,raw_predictions,correctly_predicted
0,"<S2SV_ModStart> ; if ( n2size < 0 ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed: <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""%s <S2SV_blank> (%u) <S2SV_blank> v%u, <S2SV_blank> len <S2SV_blank> %u"", tok2str ( eap_frame_type_values, ""unknown"", type ), type ) ) ; return ; } <S2SV_ModStart> 2 ) { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"",",0
2,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
3,"<S2SV_ModStart> case SIOCYAMSMCS : if ( ( ym = kmalloc ( sizeof ( struct yamdrv_mcs ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( ( ym = kmalloc ( sizeof ( struct yamdrv_mcs ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( ( ym = kmalloc ( sizeof ( struct yamdrv_mcs ), GFP_KERNEL ) ) == NULL ) { kfree ( ym ) ; return - ENOBUFS ; } add_mcs ( ym -> bits, ym -> bitrate, 0 ) ; if ( ( ym = kmalloc ( sizeof ( struct yamdrv_mcs ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( ( ym = kmalloc ( sizeof ( struct yamdrv_mcs ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( ( ym = kmalloc ( sizeof ( struct yamdrv_mcs ), GFP_KERNEL",0
4,<S2SV_ModStart> frag_hdr_sz ) ; if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( unfrag_ip6hlen ) ; },0
5,"<S2SV_ModStart> int64_t time, offset ; if ( version == 1 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else if ( version == 2 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else if ( version == 3 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; }",0
6,"<S2SV_ModStart> * tpg ; unsigned <S2SV_ModEnd> long tpgt ; <S2SV_ModStart> ""tpgt_"" )!= name ) return ERR_PTR ( - EINVAL ) ; tpg = kzalloc ( sizeof ( struct vhost_scsi_tpg ), GFP_KERNEL ) ; if (! tpg ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> struct <S2SV_blank> vhost_scsi_tpg"" ) ; return ERR_PTR ( - ENOMEM ) ; } tpg -> tport = tport ; tpg -> tport_tpgt = tpgt ; ret = core_tpg_register ( & vhost_scsi_fabric_configfs -> tf_ops, wwn, & tpg -> se_tpg, tpg, TRANSPORT_TPG_TYPE_NORMAL ) ; if ( ret < 0 ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> register <S2SV_blank> core_tpg"" ) ; return NULL ; } mutex_lock ( & vhost_scsi_mutex ) ; list_add_tail ( & tpg -> tv_tpg_list, & vhost_scsi_list ) ; mutex_unlock ( & vhost_scsi_mutex ) ;",0
7,"<S2SV_ModStart> writers ) ) { GF_Box * stco = ( GF_Box * ) gf_list_get ( writers, 0 ) ; GF_Box * stsc = ( GF_Box * ) gf_list_get ( writers, 1 ) ; gf_isom_box_del ( stco ) ; gf_isom_box_del ( stsc",0
8,<S2SV_ModStart> vcpu ) { u32 vapic <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; vapic = kmap_atomic ( vcpu -> arch. apic -> vapic_page ) ; if (! vapic ) return ; data = * ( u32 * ) ( vapic + offset_in_page ( vcpu -> arch. apic -> vapic_addr ) ) ; <S2SV_ModEnd> apic_set_tpr ( vcpu,0
9,<S2SV_ModStart> src ) ; <S2SV_ModEnd> clear_task_ebb ( dst,0
10,<S2SV_ModStart> item ) { <S2SV_ModEnd> return array -> <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
11,"<S2SV_ModStart>!= ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if (! sb_block ) { ext3_msg ( sb, ""error: <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
12,<S2SV_ModStart> = NEXTHDR_FRAGMENT ; if ( unfrag_ip6hlen < 0 ) { kfree_skb ( skb ) ; return ERR_PTR ( unfrag_ip6hlen ) ; },0
13,"<S2SV_ModStart> u32 event_id, u64 <S2SV_ModEnd> nr, int <S2SV_ModStart>, event_id, <S2SV_ModEnd> & data,",0
14,"<S2SV_ModStart> { # ifndef _MSC_VER if ( fileblock >= EXT2_BLOCK_SIZE ( data ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModStart> ) ; if ( fileblock >= EXT2_BLOCK_SIZE ( data ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModStart> ) ; if ( fileblock >= EXT2_BLOCK_SIZE ( data ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModStart> 0 ; else { grub_disk_addr_t start ; start = grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start",0
15,"<S2SV_ModStart> fdct16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step4 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> 8 ] ; tran_high_t temp1, temp2 ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 13 ] ; input [ 3 ] = in [ 3 ] + in [ 14 ] ; input [ 4 ] = in [ 4 ] + in [ 11 ] ; input [ 5 ] = in [ 5 ] + in [ 12 ] ; input [ 6 ] = in [ 6 ] + in [ 9 ] ; input [ 7 ] = in [ 7 ] + in [ 8 ] ; s0 = input [ 0 ] + input [ 7 ] ; s1 = input [ 1 ] + input [ 6 ] ;",0
16,<S2SV_ModStart> env ) ; if ( env -> prog -> aux -> offload ) { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret < 0 ) { ret = bpf_prog_offload_verifier_cleanup ( env ) ; if ( ret < 0 ) { ret = bpf_prog_offload_verifier_cleanup ( env ) ; if ( ret < 0 ) { ret = bpf_prog_offload_verifier_cleanup ( env ) ; if ( ret ) goto err_unlock ; } else { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret < 0 ) { ret = bpf_prog_offload_verifier_cleanup ( env ) ; if ( ret < 0 ) { ret = bpf_prog_offload_verifier_cleanup ( env ) ; if ( ret < 0 ) { ret = bpf_prog_offload_verifier_cleanup ( env ) ; if ( ret ) goto err_unlock ; } } else { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret < 0 ) { ret = bpf_prog_offload_verifier,0
17,<S2SV_ModStart> -> num_channels ; # ifdef ENABLE_DSD wpc -> dsd_multiplier = 1 ; flags = DSD_FLAG ; for ( i = 14 ; i >= 0 ; -- i ) if ( ( config -> sample_rate % sample_rates [ i ] ) == 0 ) { int divisor = config -> sample_rate / sample_rates [ i ] ; if ( divisor && ( divisor & ( divisor - 1 ) ) == 0 ) { int divisor = config -> sample_rate / sample_rates [ i ] ; if ( divisor && ( divisor & ( divisor - 1 ) ) == 0 ) { int divisor = ( divisor - 1 ) ; if ( divisor && ( divisor & ( divisor - 1 ) ) == 0 ) { int divisor = ( divisor - 1 ) ; if ( divisor && ( divisor & ( divisor - 1 ) ) == 0 ) { int divisor = ( divisor - 1 ) ; if ( divisor && ( divisor & ( divisor - 1 ) ) == 0 ) { int divisor = ( divisor - 1 ) ; if ( divisor && ( divisor & ( divisor - 1 ) ) == 0 ) { int divisor = ( divisor - 1 ) ; if ( divisor && ( divisor & ( divisor - 1,0
18,"<S2SV_ModStart> = 0 ; if ( cgc -> sense == NULL ) { err = - ENOMEM ; goto out ; } <S2SV_ModStart> cgc -> sense, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { switch ( sshdr. sense_key ) { case UNIT_ATTENTION : SDev -> changed = 1 ; if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""disc <S2SV_blank> change <S2SV_blank> detected.\\n"" ) ; if ( retries ++ < 10 ) goto retry ; err = - ENOMEDIUM ; break ; } if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready. <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> there <S2SV_blank> is <S2SV_blank> a <S2SV_blank> disc <S2SV_blank> in <S2SV_blank> the <S2SV_blank> drive.\\n"" ) ; if ( retries ++ < 10 ) { ssleep ( 2 ) ; goto retry ; } if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready. <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> there <S2SV_blank>",0
19,"<S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> 0x48454150 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; } else { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; }",0
20,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> { VP9_COMMON * const cm <S2SV_ModEnd> = & cpi <S2SV_ModStart> = get_max_filter_level ( <S2SV_ModEnd> cpi ) ; <S2SV_ModStart> ; int best_err <S2SV_ModEnd> ; int filt_best <S2SV_ModStart> ; int filt_direction ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> twopass. section_intra_rating < 20 ) { bias = ( best_err >> ( 15 - ( cpi -> twopass. section_intra_rating / 20 ) ) * filter_step ; if ( cpi -> twopass. section_intra_rating < 20 ) { bias = ( best_err >> ( 15 - ( cpi -> twopass. section_intra_rating / 20 ) ) * filter_step ; if ( cpi -> twopass. section_intra_rating > 20 ) { bias = ( best_err >> ( 15 - ( cpi -> twopass. section_intra_rating / 20 ) ) * filter_step ; if ( cpi -> twopass. section_intra,0
21,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
22,"<S2SV_ModStart> encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, mv_class == MV_CLASS_0? mvcomp -> class0_fp : mvcomp -> fp ) ; } vpx_write_token ( w, vp9_mv_class_tree, mvcomp -> classes, & mv_class_encodings [ mv_class ] ) ; if ( mv_class == MV_CLASS_0 ) { vpx_write_token ( w, vp9_mv_class0_tree, mvcomp -> class0, & mv_class0_encodings [ d ] ) ; } else { int i ; for ( i = 0 ; i < n ; ++ i ) vpx_write ( w, ( d >> i ) & 1, mvcomp -> bits [ i ] ) ; } vpx_write_token ( w, vp9_mv_fp_tree, mvcomp -> class0_fp [ d ] : mvcomp -> fp, & mv_fp_encodings [ fr ] ) ; if ( usehp ) vpx_write ( w, hp, mv_class",0
23,<S2SV_ModStart> base ) ; mutex_lock ( & ralg -> lock ) ; <S2SV_ModStart> rng_make_random ) ; mutex_unlock ( & ralg -> lock ) ;,0
24,"<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) { error = - EINVAL ; goto end ; } if ( sockaddr_len < sizeof ( struct sockaddr_pptp ) ) { error = - EINVAL ; goto end ; } if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) { error = - EINVAL ; goto end ; } if ( sockaddr_len > sizeof ( struct sockaddr_pppox ) ) { error = - EINVAL ; goto end ; } <S2SV_ModEnd> if ( lookup_chan_dst <S2SV_ModStart> sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. sin_addr. s_addr ) { error = - EINVAL ; goto end ; } if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) { error = - EINVAL ; goto end ; } if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) { error = - EINVAL ; goto end ; } if ( sockaddr_len < sizeof ( struct sockaddr_pptp ) ) {",0
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; },0
26,"<S2SV_ModStart> int verbose ; jas_image_t <S2SV_ModEnd> * image ; <S2SV_ModStart> ; while ( ( id = jas_getopt <S2SV_ModEnd> ( argc, <S2SV_ModStart> ; while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { if ( ( id = jas_getopt ( argc, argv, opts ) ) < 0 ) { fprintf ( stderr, ""missing <S2SV_blank> option\\n"" ) ; exit ( EXIT_FAILURE ) ; } } if ( ( id = jas_getopt ( argc, argv, opts ) ) < 0 ) { fprintf ( stderr, ""missing <S2SV_blank> option\\n"" ) ; exit ( EXIT_FAILURE ) ; } if ( ( fmtid = jas_image_getfmt ( instream ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if (! ( image = jas_image_decode ( instream, fmtid, 0 ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> load <S2SV_blank> image\\n"" ) ; return EXIT_FAILURE ; } if (! ( fmtname = jas_image_fmttostr ( fmtid ) ) )",0
27,"<S2SV_ModStart> esr ) { <S2SV_ModEnd> pr_crit ( ""Bad <S2SV_blank> mode <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> handler <S2SV_blank> detected, <S2SV_blank> code <S2SV_blank> 0x%08x\\n"" <S2SV_ModStart> esr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
28,"<S2SV_ModStart> ) dat ; if ( length < 5 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 5 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ptr, length <S2SV_ModEnd> ) ; }",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * intf1 = to_usb_host_interface ( udev, intf ) ; struct usb_host_interface * intf2 = to_usb_interface ( udev, intf ) ; <S2SV_ModStart> intf ) ; if ( intf1 -> desc. bNumEndpoints < 1 ) return - ENODEV ; if ( intf1 -> desc. bNumEndpoints < 1 ) return - ENODEV ; alt = intf1 -> desc. bNumEndpoints ; if ( intf -> desc. bNumEndpoints < 1 || intf1 -> desc. bNumEndpoints > 1 ) return - ENODEV <S2SV_ModEnd> ; alt = <S2SV_ModStart> 0 ]. desc. bNumEndpoints <S2SV_ModEnd> ; return usb_set_interface",0
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart> * from, size_t <S2SV_ModEnd> fromlen, unsigned <S2SV_ModStart> * to, size_t <S2SV_ModEnd> length ) { <S2SV_ModStart> case 2 : memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> case 3 : memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += 3 ; break ; case 4 : memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += 2 ; break ; case 5 : memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += udf_get_filename ( sb, pc -> componentIdent, p, length ) ; * p ++ = '/' ; break ; case 6 : p += udf_get_filename ( sb, pc -> componentIdent, p, length ) ; * p ++ = '/' ; break ; case 7 : p += udf_get_filename ( sb, pc -> componentIdent, p, length ) ; * p ++ = '/' ; break ; case 6 : p += udf_get_filename ( sb, pc -> componentIdent, p, length ) ; * p ++ = '/' ; break ; case 8 : p += udf_get_filename ( sb, pc -> componentIdent, p, length ) ; * p",0
31,"<S2SV_ModStart> = atoi ( argv [ 2 ] ) ; if ( server. port < 0 || server. port > 65535 ) { err = ""Invalid <S2SV_blank> port"" ; goto loaderr ; } } else if (! strcasecmp ( argv [ 0 ], ""keepalive"" ) && argc == 2 ) { server. keepalive = atoi ( argv [ 1 ] ) ; if ( server. keepalive < 0 ) { err = ""Invalid <S2SV_blank> keepalive <S2SV_blank> value"" ; goto loaderr ; } else { server. protected_mode = yesnotoi ( argv [ 1 ] ) ; if ( server. protected_mode == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } } else if (! strcasecmp ( argv [ 0 ], ""keepalive"" ) && argc == 2 ) { if ( server. keepalive < 0 ) { err = ""Invalid <S2SV_blank> keepalive <S2SV_blank> value"" ; goto loaderr ; } else { server. protected_mode = yesnotoi ( argv [ 1 ] ) ; if ( server. protected_mode == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'",0
32,<S2SV_ModStart> connection_id ) ; <S2SV_ModEnd> spin_lock_irqsave ( &,0
33,"<S2SV_ModStart> = NULL ; if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", endpoint -> desc. bNumEndpoints ) ; retval = - ENODEV ; goto exit ; } if ( usb_endpoint_xfer_bulk ( endpoint ) ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", endpoint -> desc. bNumEndpoints ) ; retval = - ENODEV ; goto exit ; } if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", endpoint -> desc. bNumEndpoints ) ; retval = - ENODEV ; goto exit ; } if ( usb_endpoint_xfer_bulk ( endpoint ) ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", endpoint -> desc. bNumEndpoints ) ; retval = - ENODEV ; goto exit ; } if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number",0
34,"<S2SV_ModStart> if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size ) { sdb_set ( sdb, ""link_section_name"", link_section_name, 0 ) ; } else if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size ) { sdb_set ( sdb, ""link_section_name"", link_section_name, 0 ) ; } else if ( bin -> shstrtab && link_shdr && link_shdr -> sh_name < bin -> shstrtab_size ) { sdb_set ( sdb, ""link_section_name"", link_section_name, 0 ) ; } else if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size ) { sdb_set ( sdb, ""link_section_name"", link_section_name, 0 ) ; } else if ( bin -> shstrtab && link_shdr && link_shdr -> sh_name < bin -> shstrtab_size ) { sdb_set ( sdb,",0
35,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; if ( dest_keyring ) { <S2SV_ModStart> ( ""%p"", dest_keyring ) ; return 0 ; } <S2SV_ModEnd> switch ( cred <S2SV_ModStart> KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : if ( cred -> request_key_auth ) { authkey = cred -> request_key_auth ; if (! test_bit ( KEY_FLAG_REVOKED, & authkey -> flags ) ) dest_keyring = key_get ( authkey -> dest_keyring ) ; up_read ( & authkey -> sem ) ; if ( dest_keyring ) dest_keyring = key_get ( cred -> user -> session_keyring ) ; if ( dest_keyring ) dest_keyring = key_get ( cred -> user -> session_keyring ) ; if ( dest_keyring ) dest_keyring = key_get ( cred -> user -> session_keyring ) ; if ( dest_keyring ) dest_keyring = key_get",0
36,<S2SV_ModStart> = create_spnego_ctx ( ) ; if ( sc == NULL ) { ret = GSS_S_FAILURE ; goto cleanup ; },0
37,<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip ) || <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> -> l2tp_family!= AF_INET ) return - EINVAL ; ret = - EADDRINUSE ; read_lock_bh ( & l2tp_ip_lock ) ; if ( inet -> inet_state!= TCP_CLOSE || sk -> sk_state!= TCP_CLOSE || addr_len < sizeof ( struct sockaddr_l2tpip ) ) goto out ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_LOCAL && chk_addr_ret!= RTN_MULTICAST || chk_addr_ret!= RTN_BROADCAST ) goto out ; if ( addr -> l2tp_addr. s_addr ) inet -> inet_rcv_saddr = inet -> inet_saddr = addr -> l2tp_addr. s_addr ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_,0
38,<S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> void ) { <S2SV_ModEnd> unsigned int max <S2SV_ModStart> { max = <S2SV_ModEnd> ( ( - <S2SV_ModStart> ) & STACK_RND_MASK <S2SV_ModEnd> ) << PAGE_SHIFT,0
39,<S2SV_ModStart> ( gtk_dialog_add_button ( <S2SV_ModEnd> GTK_DIALOG ( dialog <S2SV_ModStart> ( gtk_dialog_add_button ( <S2SV_ModEnd> GTK_DIALOG ( dialog <S2SV_ModStart> ( gtk_dialog_add_button ( <S2SV_ModEnd> GTK_DIALOG ( dialog <S2SV_ModStart> ( gtk_dialog_add_button ( <S2SV_ModEnd> GTK_DIALOG ( dialog <S2SV_ModStart> ( gtk_dialog_add_button ( <S2SV_ModEnd> GTK_DIALOG ( dialog,0
40,<S2SV_ModStart> ; tm = g_tm_localtime <S2SV_ModEnd> ( & t,0
41,"<S2SV_ModStart> strlen ( password ) ) ; if ( type == PW_PASSWORD ) { vector = request -> vector ; } else { vector = ( unsigned char * ) password ; } MD5Init ( & md5_secret ) ; MD5Update ( & md5_secret, vector, AUTH_VECTOR_LEN ) ; MD5Final ( misc, & my_md5 ) ; xor ( hashed, misc, AUTH_PASS_LEN ) ; for ( i = 1 ; i < ( length >> 4 ) ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5, vector, AUTH_VECTOR_LEN ) ; MD5Final ( misc, & my_md5 ) ; xor ( hashed, misc, AUTH_PASS_LEN ) ; for ( i = 1 ; i < ( length >> 4 ) ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5, & hashed [ ( i - 1 ) * AUTH_PASS_LEN ], AUTH_PASS_LEN ) ; MD5Final ( misc, & my_md5 ) ; xor ( hashed [ i * AUTH_PASS_LEN ],",0
42,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> m88rs2000_frontend_attach ( struct <S2SV_ModStart> ]. fe = dvb_usb_generic_rw ( d -> dev, obuf, 1, ibuf, 1, 0 ) ; if ( d -> fe_adap [ 0 ]. fe == NULL ) { err ( ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> fe_adap [ 0 ]. fe = dvb_attach ( m88rs2000_attach, & s421_m88rs2000_config, <S2SV_ModEnd> & d -> <S2SV_ModStart> -> i2c_adap ) ; if ( d -> fe_adap [ 0 ]. fe == NULL ) { err ( ""Failed <S2SV_blank> to <S2SV_blank> attach <S2SV_blank> RS2000/TS2020!"" ) ; d -> fe_adap [ 0 ]. fe = dvb_attach ( ts2020_attach, d -> fe_adap [ 0 ]. fe, & dw2104_ts2020_config, d -> dev ) ; if ( dvb_attach ( ts2020_attach, d -> fe_adap [ 0 ]. fe, & dw",0
43,"<S2SV_ModStart> = transport -> transport <S2SV_ModEnd> ; bh_lock_sock ( <S2SV_ModStart>. sk ) ; if ( sock_owned_by_user ( <S2SV_ModEnd> asoc -> base <S2SV_ModStart>. sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> hb_timer, jiffies + ( HZ / 20 ) ) ) sctp_transport_put ( transport ) ; goto out_unlock ; } <S2SV_ModEnd> error = sctp_do_sm <S2SV_ModStart> SCTP_EVENT_T_TIMEOUT, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_HEARTBEAT ), asoc -> state, asoc -> ep, asoc, transport, GFP_ATOMIC ) ; if ( error ) asoc -> base. sk -> sk_err = - error ; <S2SV_ModEnd> out_unlock : bh_unlock_sock <S2SV_ModStart> sk ) ; sctp_transport_put ( transport ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
44,"<S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> options <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> options <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%ll",0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> * cp0 ; if ( cc < 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""cc"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> } } } return 1 ;",0
46,"<S2SV_ModStart> tsample_t s ; if ( scanlinesizein > TIFF_MAX_SCANLINE_SIZE || scanlinesizeout > TIFF_MAX_SCANLINE_SIZE ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> too <S2SV_blank> large <S2SV_blank> scanline <S2SV_blank> size <S2SV_blank> (%lu)"", ( unsigned long ) scanlinesizein ) ; goto bad ; } inbuf = _TIFFmalloc ( scanlinesizein ) ; if (! inbuf ) goto bad ; outbuf = _TIFFmalloc ( scanlinesizeout ) ; if (! outbuf ) goto bad ; for ( row = 0 ; row < imagelength ; row ++ ) { if ( TIFFReadScanline ( in, inbuf, row, 0 ) < 0 &&! ignore ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can\'t <S2SV_blank> read <S2SV_blank> scanline <S2SV_blank> (%lu)"", ( unsigned long ) row ) ; goto bad ; } inp = ( ( uint8 * ) inbuf ) + s ; outp = ( uint8 * ) outbuf ; for ( n = imagewidth ; n -- > 0 ; ) { * outp ++ = * inp ; } if (",0
47,<S2SV_ModStart> page ) ; struct address_space * mapping ; <S2SV_ModStart> hugetlb_lock ) ; mapping = page_mapping ( page ) <S2SV_ModEnd> ; set_page_private ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
48,"<S2SV_ModStart> } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length\\n"" ) ; return AVERROR ( EIO ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length\\n"" ) ; return AVERROR ( EIO ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length\\n"" ) ; return AVERROR ( EIO ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length\\n"" ) ; return AVERROR ( EIO ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length\\n"" ) ; return AVERROR ( EIO ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length\\n"" ) ; return AVERROR ( EIO ) ; }",0
49,"<S2SV_ModStart> ; if (! e ) { r = ENOMEM ; goto fail ; } r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) goto not_found ; r = sd_bus_open_system ( ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""org.freedesktop/machine1.Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_bus_message_read ( reply, ""u"", & mapped ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found",0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return <S2SV_ModEnd> get_page ( buf <S2SV_ModStart> page ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
51,"<S2SV_ModStart> case IV2_T_ENCR : idstr = STR_OR_ID ( t_id, esp_p_map ) ; break ; case IV2_T_INTEG : idstr = STR_OR_ID ( t_id, integ_p_map ) ; break ; case IV2_T_DH : idstr = STR_OR_ID ( t_id, dh_p_map ) ; break ; case IV2_T_ESN : idstr = STR_OR_ID ( t_id, esn_p_map ) ; break ; case IV2_T_DH : idstr = STR_OR_ID ( t_id, dh_p_map ) ; break ; case IV2_T_DH : idstr = STR_OR_ID ( t_id, dh_p_map ) ; break ; case IV2_T_ESN : idstr = STR_OR_ID ( t_id, esn_p_map ) ; break ; case IV2_T_ENCR : idstr = STR_OR_ID ( t_id, esn_p_map ) ; break ; case IV2",0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart> = 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP",0
54,"<S2SV_ModStart> wp ) { int rc ; <S2SV_ModStart> -> pm_max_requests ; rc = init_worker_pool ( wp ) ; if ( rc < 0 ) { zlog ( ZLOG_ERROR, ""[pool <S2SV_blank> %s] <S2SV_blank> child <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> initialize"", wp -> config -> name ) ; exit ( FPM_EXIT_SOFTWARE ) ; } if ( rc < 0 ) { zlog ( ZLOG_ERROR, ""[pool <S2SV_blank> %s] <S2SV_blank> child <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> initialize"", wp -> config -> name ) ; exit ( FPM_EXIT_SOFTWARE ) ; } rc = init_worker_pool ( wp ) ; if ( rc < 0 ) { zlog ( ZLOG_ERROR, ""[pool <S2SV_blank> %s] <S2SV_blank> child <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> initialize"", wp -> config -> name ) ; exit ( FPM_EXIT_SOFTWARE ) ; } if ( rc < 0 ) { zlog ( ZLOG_ERROR, ""[pool <S2SV_blank> %s] <S2SV_blank> child <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> initialize"", wp -> config -> name ) ; exit ( FPM_EXIT_SOFTWARE ) ; }",0
55,"<S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> { int trans_to_still <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( frame_interval > MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 ) { int j ; const FIRSTPASS_STATS * position = twopass -> stats_in ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. <S2SV_ModEnd> pcnt_inter - tmp_next_frame <S2SV_ModStart> pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. <S2SV_ModEnd> pcnt_inter - tmp_next_frame <S2SV_ModStart> pcnt_inter - tmp_next_frame. <S2SV_ModEnd> pcnt_motion < 0.999 <S2SV_ModStart> pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. <S2SV_ModEnd> pcnt_inter - tmp_next_frame <S2SV_ModStart> pcnt_inter - tmp_next_frame. <S2SV_ModEnd> pcnt_motion < 0.999 <S2SV_ModStart> break",0
56,<S2SV_ModStart> } if ( IS_ERR ( handle -> h_transaction ) ) { <S2SV_ModStart> ; err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; handle -> h_transaction = NULL ; return err ; } sb = handle -> h_transaction -> t_journal -> j_private ; err = handle -> h_err ; rc = jbd2_journal_stop ( handle ) ; if (! err ) err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; if (! rc ) err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; if (! err ) err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; if (! err ) err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; if (! rc ) err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; if (! err ) err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; if (!,0
57,"<S2SV_ModStart> return ret ; ret = ext4_convert_unwritten_extents_nolock ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret ) ; return ret ; }",0
58,"<S2SV_ModStart> ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ) ; xfs_trans",0
59,"<S2SV_ModStart> alg ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) && mask & CRYPTO_ALG_NEED_FALLBACK ) { <S2SV_ModStart> ) ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) && mask & CRYPTO_ALG_NEED_FALLBACK ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) && mask & CRYPTO_ALG_NEED_FALLBACK ) { <S2SV_ModStart> ) ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) && mask & CRYPTO_ALG_NEED_FALLBACK ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) && mask & CRYPTO_ALG_NEED_FALLBACK ) { request_module ( ""%s-all"", name ) ;",0
60,<S2SV_ModStart> 2 ) { if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; switch ( <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ),0
61,"<S2SV_ModStart> { return reply_msg <S2SV_ModEnd> ( c, <S2SV_ModStart> MSG_JOB_TOO_BIG ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; }",0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,"<S2SV_ModStart> ; if ( opt_len < 12 ) { ND_PRINT ( ( ndo, ""Opt <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", opt_len ) ) ; return 0 ; } if ( opt_len < 20 ) { ND_PRINT ( ( ndo, ""Opt <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", opt_len ) ) ; return 0 ; } if ( flags & TH_SYN ) { ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc",0
64,"<S2SV_ModStart> -> ipc_socket ; <S2SV_ModEnd> lxc_attach_options_t * options <S2SV_ModStart> int fd ; <S2SV_ModEnd> int status ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" <S2SV_ModStart> ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (1)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } if ( ( options -> namespaces & CLONE_NEWNS ) && ( options -> namespaces & CLONE_NEWNS ) && ( options -> attach_flags & LXC_ATTACH_REMOUNT_PROC_SYS ) ) { ret = lxc_attach_remount_sys_proc ( ) ; if ( ret < 0 ) { SYSERROR ( ""could <S2SV_blank> not <S2SV_blank> ensure <S2SV_blank> correct <S2SV_blank> architecture"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } } # if HAVE_SYS_PERSONALITY_H if ( options -> attach_flags & LXC_ATTACH_SET_PERSONALITY",0
65,"<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; * out = ( git_pkt * ) pkt ; return - 1 ; } <S2SV_ModStart> += 3 ; if ( len < 1 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; * out = ( git_pkt * ) pkt ; return - 1 ; } <S2SV_ModEnd> len = ptr <S2SV_ModStart> + 1 ; if ( len < 1 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; * out = ( git_pkt * ) pkt ; return - 1 ; } <S2SV_ModEnd> len = ptr <S2SV_ModStart> + 1 ; if ( len < 1 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; * out = ( git_pkt * ) pkt ; return - 1 ; } <S2SV_ModEnd> len = ptr <S2SV_ModStart> + 1 ; if ( len < 1 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; * out = ( git_pkt * ) pkt ;",0
66,<S2SV_ModStart> = ( OPJ_UINT32 ) getc ( IN ) ; header -> biBitsPerSample = ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |=,0
67,<S2SV_ModStart> NULL ; } sas_destruct_devices ( port ) ;,0
68,"<S2SV_ModStart> } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } image -> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> - ENOBUFS ; } memset ( & line, 0, sizeof ( line ) ) ;",0
71,"<S2SV_ModStart> arg ) { if ( bd -> bd_disk -> queue ) return scsi_sg_ioctl ( bd -> bd_disk -> queue, bd -> bd_disk, mode, cmd, arg ) ; else return scsi_sg_ioctl ( bd -> bd_disk -> queue, bd -> bd_disk, mode, cmd, arg ) <S2SV_ModEnd> ; } <S2SV_null>",0
72,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
73,"<S2SV_ModStart> qeth_snmp_ureq_hdr * ureq = memdup_user ( udata, req_len + sizeof ( struct qeth_snmp_ureq_hdr ) ) ; if ( IS_ERR ( ureq ) ) { QETH_CARD_TEXT ( card, 2, ""snmpnome"" ) ; return PTR_ERR ( ureq ) ; } qinfo. udata = kzalloc ( qinfo. udata_len, GFP_KERNEL ) ; if (! qinfo. udata ) { kfree ( qinfo. udata ) ; kfree ( qinfo. udata ) ; kfree ( qinfo. udata ) ; kfree ( qinfo. udata ) ; return - ENOMEM ; } qinfo. udata_offset = qinfo. udata_len ; iob = qeth_get_adapter_cmd ( card, IPA_SETADP_SET_SNMP_CONTROL, QETH_SNMP_SETADP_CMDLENGTH + req_len ) ; cmd = ( struct qeth_ipa_cmd * ) ( iob -> data + IPA_PDU_HEADER_",0
74,"<S2SV_ModStart> c ) { jas_verify2 ( n, "" <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
75,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_EOF ; num_video = avio_r8 ( pb ) ; num_video = avio_r8 ( pb ) ; num_video = avio_r8 ( pb ) ; num_video = avio_r8 ( pb ) ; num_video = avio_r8 ( pb ) ; num_video = avio_r8 ( pb ) ; num_video = avio_r8 ( pb ) ; num_video = avio_r8 ( pb ) ; num_video = avio_r8 ( pb ) ; num_video = avio_r8 ( pb ) ; num_video = avio_r8 ( pb ) ; num_video = avio_r8 ( pb ) ; num_video = avio_r8 ( pb ) ; num_video = avio_r8 ( pb ) ; num_video = avio_r8 ( pb ) ; num_video = avio_r8 ( pb ) ; num_video = avio_r,0
76,"<S2SV_ModStart> ) ) { if ( j >= mxf -> metadata_sets_count ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> metadata <S2SV_blank> sets\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( j >= mxf -> metadata_sets_count ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> metadata <S2SV_blank> sets\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( j >= mxf -> metadata_sets_count ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> metadata <S2SV_blank> sets\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( j >= mxf -> metadata_sets_count ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> metadata <S2SV_blank> sets\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( j >= mxf -> metadata_sets_count ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> metadata <S2SV_blank> sets\\n"" ) ; return AVERROR",0
77,"<S2SV_ModStart> 1 ; } if ( ret >= sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> long"" ) ; return - 1 ; } ret = mount_entry_on_generic ( mntent, path ) ; if ( ret >= sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> long"" ) ; return - 1 ; } ret = snprintf ( path, sizeof ( path ), ""%s/%s"", rootfs, mntent -> mnt_dir ) ; if ( ret >= sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> long"" ) ; return - 1 ; } ret = snprintf ( path, sizeof ( path ), ""%s/%s"", rootfs, mntent -> mnt_dir ) ; if ( ret >= sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> long"" ) ; return - 1 ; } ret = snprintf ( path, sizeof ( path ), ""%s/%s"", rootfs, mntent -> mnt_dir ) ; if ( ret >= sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> long"" ) ; return - 1 ; }",0
78,"<S2SV_ModStart> + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> offset <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; <S2SV_ModStart> } ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
79,"<S2SV_ModStart> += jnx_ext_len ; if ( jnx_ext_len!= 4 ) { ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; return 0 ; } <S2SV_ModStart> += jnx_ext_len ; if ( jnx_ext_len!= 4 ) { ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; return 0 ; } <S2SV_ModStart> += jnx_ext_len ; if ( jnx_ext_len!= 4 ) { ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; return 0 ; }",0
80,<S2SV_ModStart> return NF_STOLEN ; kfree_skb ( skb ) ;,0
81,"<S2SV_ModStart> * up ; struct xfrm_state * state ; <S2SV_ModStart> rta ) ; state = nla_data ( rta ) ; <S2SV_ModStart> - ENOMEM ; state = kmemdup ( state, xfrm_replay_state_esn_len ( state ), GFP_KERNEL ) ; if (! state ) return - ENOMEM <S2SV_ModStart> - ENOMEM ; state = kmemdup ( state, xfrm_replay_state_esn_len ( state ), GFP_KERNEL ) ; if (! state ) return - ENOMEM ; <S2SV_ModStart> - ENOMEM ; } <S2SV_ModStart> - ENOMEM ; state = kmemdup ( state, xfrm_replay_state_esn_len ( state ), GFP_KERNEL ) ; if (! state ) return - ENOMEM ; <S2SV_ModStart> - ENOMEM ; state = kmemdup ( state, xfrm_replay_state_esn_len ( state ), GFP_KERNEL ) ; if (! state ) return - ENOMEM ; <S2SV_ModStart> - ENOMEM ; state = kmemdup ( state, xfrm_replay_state_esn_len ( state",0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
83,<S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ),0
84,"<S2SV_ModStart> ) ) ; if ( ret < 0 ) { btif_storage_error ( ""Unable <S2SV_blank> to <S2SV_blank> add <S2SV_blank> bonded <S2SV_blank> device\\n"" ) ; return BT_STATUS_FAIL ; } <S2SV_ModStart> ) ) ; if ( ret < 0 ) { btif_storage_error ( ""Unable <S2SV_blank> to <S2SV_blank> add <S2SV_blank> bonded <S2SV_blank> device\\n"" ) ; return BT_STATUS_FAIL ; } <S2SV_ModStart> ) ) ; if ( ret < 0 ) { btif_storage_error ( ""Unable <S2SV_blank> to <S2SV_blank> add <S2SV_blank> bonded <S2SV_blank> device\\n"" ) ; return BT_STATUS_FAIL ; }",0
85,<S2SV_ModStart> { if ( numcols > JPC_QMFB_COLGRPSIZE / sizeof ( jpc_fix_t ) ) { abort ( ) ; } <S2SV_ModStart> } if ( numcols > JPC_QMFB_COLGRPSIZE / sizeof ( jpc_fix_t ) / sizeof ( jpc_fix_t ) ) { abort ( ) ; } if ( numcols > JPC_QMFB_COLGRPSIZE / sizeof ( jpc_fix_t ) ) { abort ( ) ; } if ( numcols > JPC_QMFB_COLGRPSIZE / sizeof ( jpc_fix_t ) ) { abort ( ) ; } if ( numcols > JPC_QMFB_COLGRPSIZE / sizeof ( jpc_fix_t ) / sizeof ( jpc_fix_t ) ) { abort ( ) ; },0
86,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if ( ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( iface -> caps & VPX_CODEC_CAP_STREAMING ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( iface -> caps & VPX_CODEC_CAP_STREAMING ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( iface -> caps & VPX_CODEC_CAP_STREAMING ) res = VPX_CODEC_INCAPABLE ; else if ( iface -> caps & VPX_CODEC_CAP_STREAMING ) res = VPX_CODEC_INCAPABLE ; else,0
87,"<S2SV_ModStart> size ) { netdev_err ( vif -> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u. gso. type == XEN_NETIF_GSO_TYPE_TCP ) { netdev_err ( vif -> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> type <S2SV_blank> %d.\\n"", gso -> u. gso. type ) ; return - EINVAL ; } if ( skb_shinfo ( skb ) -> gso_type!= SKB_GSO_TCPV4 ) { netdev_err ( vif -> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> type <S2SV_blank> %d.\\n"", gso -> u. gso. type ) ; return - EINVAL ; }",0
88,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_object ( struct <S2SV_ModStart> * path, <S2SV_ModEnd> void * data <S2SV_ModStart> strbuf * path <S2SV_ModEnd> ) { struct <S2SV_ModStart>. hash ) ; if ( bitmap_pos < 0 ) { char * name = path_name ( path, last ) ; bitmap_set ( base, bitmap_pos ) ; } else { <S2SV_ModEnd> char * name <S2SV_ModStart> name ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
89,"<S2SV_ModStart> ; newparity = term_get_parity ( tty_fd ) ; newbits = term_get_parity ( tty_fd ) ; if ( newparity!= opts. parity ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> parity: <S2SV_blank> %d <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", newparity, opts. parity ) ; } else if ( newparity!= opts. parity ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> parity: <S2SV_blank> %d <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", newparity, opts. parity ) ; if ( newparity!= opts. parity ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> parity: <S2SV_blank> %d <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", newparity, opts. parity ) ; } else if ( newparity!= opts. parity ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> parity: <S2SV_blank> %d <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", opts. parity, opts. parity ) ; }",0
90,<S2SV_ModStart> mixer ) { if ( mixer -> urb ) { kfree ( mixer -> urb -> transfer_buffer ) ; usb_free_urb ( mixer -> urb ) ; },0
91,"<S2SV_ModStart> type_flags ) { <S2SV_ModEnd> struct packet_fanout * <S2SV_ModStart> ; } if ( id >= PACKET_MAX_FANOUT_IDS ) return - EINVAL ; if ( id >= PACKET_MAX_FANOUT_IDS ) return - EINVAL ; if ( id >= PACKET_MAX_FANOUT_IDS ) return - EINVAL ; if ( id >= PACKET_MAX_FANOUT_IDS ) return - EINVAL ; <S2SV_ModStart> ) ) { atomic_long_set ( & po -> rollover -> num, 0 ) ; atomic_long_set ( & po -> rollover -> num_huge, 0 ) ; atomic_long_set ( & po -> rollover -> num_failed, 0 ) ; } mutex_lock ( & fanout_mutex ) ; match = NULL ; list_for_each_entry ( f, & fanout_list, list ) { if ( f -> id == id && read_pnet ( & f -> net ) == sock_net ( sk ) ) { atomic_long_set ( & f -> rollover -> num, 0 ) ; atomic_long_set ( & f -> rollover -> num_",0
92,"<S2SV_ModStart> ( newsk ) ; rcu_read_lock ( ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt ) opt = ipv6_dup_options ( newsk, opt ) ; if ( opt ) opt = ipv6_dup_options ( newsk, opt ) ; if ( opt ) opt = ipv6_dup_options ( newsk, opt ) ; if ( opt ) opt = ipv6_dup_options ( newsk, opt ) ; if ( opt ) opt = ipv6_dup_options ( newsk, opt ) ; rcu_read_unlock ( ) ; sctp_sk ( newsk ) -> pinet6 = NULL ; sctp_sk ( newsk ) -> v4mapped = sctp_sk ( sk ) -> v4mapped ; sctp_sk ( newsk ) -> v4mapped = sctp_sk ( sk ) -> v4mapped ; sctp_sk ( newsk ) -> v4mapped = sctp_sk ( sk ) -> v4mapped ;",0
93,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
94,"<S2SV_ModStart> int frame_out, uint64_t dx_time ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"" <S2SV_ModEnd>, frame_in,",0
95,"<S2SV_ModStart> ; if ( imp_sth -> num_fields > imp_sth -> num_fields ) { do_error ( sth, JW_ERR_SEQUENCE, ""num_fields <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", imp_sth -> num_fields ) ; return Nullav ; } <S2SV_ModStart> ; if ( imp_sth -> num_fields > imp_sth -> num_fields ) { do_error ( sth, JW_ERR_SEQUENCE, ""num_fields <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", imp_sth -> num_fields ) ; return Nullav ; } <S2SV_ModStart> ; if ( imp_sth -> num_fields > imp_sth -> num_fields ) { do_error ( sth, JW_ERR_SEQUENCE, ""num_fields <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", imp_sth -> num_fields ) ; return Nullav ; }",0
96,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteBuffer ( interface, buffer, offset ) ; enc28j60SetBit ( interface, ENC28J60_ECON1,",0
97,"<S2SV_ModStart> ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_",0
98,"<S2SV_ModStart> ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/get"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } else if (! strcmp ( func, ""page/get"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page && ( access ( page, R_OK ) == 0 ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ;",0
99,"<S2SV_ModStart> ( flags == EXT4_GET_BLOCKS_PRE_IO <S2SV_ModEnd> ) { ret <S2SV_ModStart> out ; } if ( flags & EXT4_GET_BLOCKS_CONVERT ) { ret = ext4_convert_unwritten_extents_endio ( handle, inode, path ) ; if ( ret >= 0 ) ext4_update_inode_fsync_trans ( handle, inode, 1 ) ; goto out2 ; } if ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) goto map_out ; if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out1 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out2 ; } if ( ( flags & EXT4_GET_BLOCKS_CREATE ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out1 ; } if ( ( flags & EXT4_GET_BLOCKS_CREATE ) == 0 ) { set_buffer_unwritten",0
100,"<S2SV_ModStart> 0 ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } <S2SV_ModStart> 2 ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } <S2SV_ModStart> 0 ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ;",0
101,"<S2SV_ModStart> { if (! caller_is_in_cgroup ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; goto out ; } if (! caller_may_access ( fc, controller, cgroup, NULL, O_RDONLY ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; goto out ; } if (! caller_is_in_cgroup ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 0600 ; sb -> st_nlink = 2 ; goto out ; } if (! caller_may_access ( fc, controller, cgroup, NULL, O_RDONLY ) ) { sb -> st_mode = S_IFDIR | 0600 ; sb -> st_nlink = 2 ; goto out ; } if (! caller_is_in_cgroup ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 0600 ; sb -> st_nlink = 2",0
102,"<S2SV_ModStart> flag ) { const int mb_rows = source -> y_width >> 4 ; const int mb_cols = source -> y_height >> 4 ; unsigned char * limits = cm -> pp_limits_buffer ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; memset ( limits, ( unsigned char ) ppl, 16 * mb_cols ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vpx_post_proc_down_and_across_mb_row ( source -> v_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride,",0
103,"<S2SV_ModStart> ptr ) { if ( copy_to_user ( param, ptr, sizeof ( * ptr ) ) ) return - EFAULT ; param += sizeof ( struct floppy_raw_cmd ) ; if ( ( ptr -> flags & FD_RAW_WRITE ) && ptr -> buffer_length ) { long length = ptr -> buffer_length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; param += length ; if ( ( ptr -> flags & FD_RAW_READ ) && ptr -> buffer_length ) { if ( ptr -> length >= 0 && ptr -> length <= ptr -> buffer_length ) { long length = ptr -> buffer_length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; } }",0
104,"<S2SV_ModStart> skip : if ( issecure ( SECURE_NOROOT ) && ( new -> euid!= old -> uid || new -> egid!= old -> gid ||! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) && bprm -> unsafe & ~ LSM_UNSAFE_PTRACE_CAP ) { if (! capable ( CAP_SETUID ) ) { new -> euid = new -> uid ; } else { new -> euid = new -> uid ; } } <S2SV_ModEnd> new -> securebits",0
105,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> ce = mb_cache_entry_alloc <S2SV_ModStart> int error ; <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> ; error = mb2_cache_entry_insert ( ext4_mb_cache, bh -> b_bdev, bh -> b_blocknr, hash ) ; if ( error ) { mb_cache_entry_free ( ext4_mb_cache, ce ) ; ea_bdebug ( bh, ""inserting <S2SV_blank> [%x]"", ( int ) hash ) ; <S2SV_ModEnd> } } <S2SV_null>",0
106,"<S2SV_ModStart> ) ) ; if (! r_socket_http_answer ( s, code, rlen ) ) { r_socket_protocol_error ( s, ""POST <S2SV_blank> /%s <S2SV_blank> HTTP/1.0\\r\\n"" ""User-Agent: <S2SV_blank> radare2 <S2SV_blank> "" R2_VERSION ""\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n"", host ) ; if (! r_socket_http_answer ( s, code, rlen ) ) { r_socket_protocol_error ( s, ""POST <S2SV_blank> /%s <S2SV_blank> HTTP/1.0\\r\\n"" ""User-Agent: <S2SV_blank> radare2 <S2SV_blank> "" R2_VERSION ""\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"", host ) ; r_socket_protocol_error ( s, ""POST <S2SV_blank> /%s <S2SV_blank> HTTP/1.0\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n""",0
107,<S2SV_ModStart> ( c == LUA_SIGNATURE <S2SV_ModEnd> [ 0 ],0
108,"<S2SV_ModStart> = 0 ; struct ip_options_rcu * inet_opt ; <S2SV_ModStart> = answer -> opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; spin_lock_bh ( & inet_opt -> inet_lock ) ; <S2SV_ModStart> ; inet_opt = rcu_dereference_protected ( inet_opt -> inet_opt, sock_owned_by_user ( sk ) ) ; spin_unlock_bh ( & inet_opt -> inet_lock ) ; spin_lock_bh ( & inet_opt -> inet_lock ) ; spin_unlock_bh ( & inet_opt -> inet_lock ) ; spin_lock_bh ( & inet_opt -> inet_lock ) ; spin_lock_bh ( & inet_opt -> inet_lock ) ; spin_unlock_bh ( & inet_opt -> inet_lock ) ; spin_lock_bh ( & inet_opt -> inet_lock ) ; spin_lock_bh ( & inet_opt -> inet_lock ) ; spin_lock_bh ( & inet_opt",0
109,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct ip_options_rcu <S2SV_ModEnd> * ip_options_get_from_user ( <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> if ( optlen && copy_from_user ( & opt -> __data, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } <S2SV_ModStart> if ( optlen && copy_from_user ( & opt -> __data, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } return ip_options_get_finish ( net, optp, opt, optlen ) ; } <S2SV_null>",0
110,"<S2SV_ModStart> ; dl = kmalloc_array ( dev_num, size, GFP_KERNEL ) ; if (! dl ) return - ENOMEM ; di = dl -> dev_info ; spin_lock ( & rfcomm_dev_lock ) ; list_for_each_entry ( dev, & rfcomm_dev_list, list ) { if ( test_bit ( RFCOMM_TTY_RELEASED, & dev -> flags ) ) continue ; ( di + n ) -> state = dev -> dlc -> state ; ( di + n ) -> channel = dev -> channel ; ( di + n ) -> src = dev -> src ; ( di + n ) -> dst = dev -> dst ; } spin_unlock ( & rfcomm_dev_lock ) ; list_for_each_entry ( dev, & rfcomm_dev_list, list ) { if ( test_bit ( RFCOMM_TTY_RELEASED, & dev -> flags ) ) continue ; ( di + n ) -> state = dev -> dlc -> state ; ( di + n ) -> channel = dev -> channel ; ( di + n ) -> src = dev -> src ; ( di + n ) ->",0
111,"<S2SV_ModStart> ; trunc : if ( dio -> rpl_mopprf == NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; return ; } <S2SV_ModStart> : if ( dio -> rpl_mopprf == NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; return ; } <S2SV_ModStart> : if ( dio -> rpl_mopprf == NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; return ; } <S2SV_ModStart> : if ( dio -> rpl_mopprf == NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; return ; } <S2SV_ModStart> : if ( dio -> rpl_mopprf == NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; return ; }",0
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> * msg ; <S2SV_ModEnd> ND_TCHECK2 ( * <S2SV_ModStart> -> length ) ; ND_TCHECK_32BITS ( pdu_header -> length ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_PRINT ( ( ndo, ""%sRPKI-RTRv%u, <S2SV_blank> %s <S2SV_blank> PDU <S2SV_blank> (%u), <S2SV_blank> length: <S2SV_blank> %u"", indent_string ( 8 ), <S2SV_ModEnd> pdu_header -> version <S2SV_ModStart> case RPKI_RTR_END_OF_DATA_PDU : ND_PRINT ( ( ndo, ""%sSession <S2SV_blank> ID: <S2SV_blank> 0x%04x, <S2SV_blank> Serial: <S2SV_blank> %u"", indent_string ( indent + 2 ), EXTRACT_16BITS ( pdu_header -> u. session_id ), EXTRACT_16BITS ( pdu_header -> u. serial ) ) ; break ; case RPKI_RTR_RESET_QUERY_PDU : case RPKI_RTR_CACHE_",0
113,"<S2SV_ModStart> ; int n, len ; if ( skb -> len < 4 ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } <S2SV_ModStart> ; if (! rose_parse_facilities ( skb -> data + len + 4, & facilities ) ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) || ( make = rose_make_new ( sk ) ) == NULL ) { rose_transmit_clear_request ( neigh, lci, ROSE_NETWORK_CONGESTION, 120 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) || ( make = rose_make_",0
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,"<S2SV_ModStart> } else { if ( ( * varp == NULL ) || ( * varp == ( char_u * ) ""/\\\\*?[|<>"" ) == NULL ) { errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; } else if ( ( * varp == ( char_u * ) ""/\\\\*?[|<>"" ) == NULL ) { errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; } else { if ( ( * varp == ( char_u * ) ""/\\\\*?[|<>"" ) == NULL ) { errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; } else { if ( ( * varp == ( char_u * ) ""/\\\\*?[|<>"" ) == NULL ) { errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; } else",0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
117,"<S2SV_ModStart> ) ; struct o2nm_cluster * cluster <S2SV_ModEnd> = to_o2nm_cluster_from_node ( <S2SV_ModStart> ) ; } if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) <S2SV_ModStart> ; if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else { rb_link_node ( & node -> nd_ip_node, & cluster -> cl_node_ip_tree, parent ) ; rb_insert_color ( & node -> nd_ip_node, & cluster -> cl_node_ip_tree ) ; } write_unlock ( & cluster -> cl_nodes_lock ) ; if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else { rb_link_node ( & node -> nd_ip_node, & cluster -> cl_node_ip_tree, parent ) ; rb_insert_color ( & node -> nd_ip_node, & cluster -> cl_",0
118,"<S2SV_ModStart> case BSD_AFNUM_ISO : isoclns_print <S2SV_ModEnd> ( ndo,",0
119,"<S2SV_ModStart> == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } }",0
120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TPM_RC <S2SV_ModEnd> tpm_kdfa ( TSS2_SYS_CONTEXT <S2SV_ModStart> { TPM2B_DIGEST tmpResult ; TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2 ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT8 * tpm2b_i_2Ptr = & tpm2b_i_2. t. buffer [ 0 ] ; TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2 ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT32 bitsSwizzled = string_bytes_endian_convert_32 ( bits ) ; * ( UINT32 * ) tpm2bBitsPtr = bitsSwizzled ; for ( i = 0",0
121,"<S2SV_ModStart> size_t size ; if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> hstep_, cmpt -> vstep_, & size ) ||! jas_safe_size_mul ( size, cmpt -> prec_, & size ) ) { goto error ; } if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ||! jas_safe_size_mul ( size, cmpt -> prec_, & size ) ||! jas_safe_size_mul ( size, cmpt -> sgnd_, & size ) ) { goto error ; } cmpt -> stream_ = ( inmem )? jas_stream_memopen2 ( 0, size ) : jas_stream_tmpfile ( ) ; if (",0
122,<S2SV_ModStart> s ) { if ( s < 0 ) { abort ( ) ; },0
123,"<S2SV_ModStart> ; if ( WARN_ON_ONCE ( count > sizeof ( cmd ) ) ) { ret = - EINVAL ; goto bail ; } ucmd = ( const struct qib_cmd __user * ) data ; if ( copy_from_user ( & cmd. type, & ucmd -> type, sizeof ( cmd. type ) ) ) { ret = - EFAULT ; goto bail ; } dest = & cmd. cmd ; src = & ucmd -> cmd ; break ; case QIB_CMD_SET_CTXT_INFO : copy = sizeof ( cmd. cmd. ctxt_info ) ; dest = & cmd. cmd. ctxt_info ; src = & ucmd -> cmd. ctxt_info ; break ; case QIB_CMD_SET_TID_INFO : copy = sizeof ( cmd. cmd. tid_info ) ; dest = & cmd. cmd. tid_info ; src = & ucmd -> cmd. tid_info ; break ; case QIB_CMD_SET_PART_KEY : copy = sizeof ( cmd. cmd. part_key ) ; dest = & cmd. cmd. part_key ; src = & ucmd -> cmd. part_key ; break ;",0
124,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
125,<S2SV_ModStart> peer ) { spin_lock_bh ( & net -> nsid_lock ) ; <S2SV_ModStart> peer ) ; spin_unlock_bh ( & net -> nsid_lock ) ;,0
126,<S2SV_ModStart> ++ ) { if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i + 1 ; } } else if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i + 1 ; } } else if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i + 1 ; } } else if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i,0
127,<S2SV_ModStart> ; if (! POKE_UINT8 ( c_id_subtype ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len <S2SV_ModStart> ; if (! POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len <S2SV_ModStart> ; if (! POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE,0
128,<S2SV_ModStart> ; if ( unlikely ( pc + asn1_op_lengths [ op ] > datalen ) ) goto machine_overrun_error ; <S2SV_ModStart> ; if ( unlikely ( pc + asn1_op_lengths [ op ] > datalen ) ) goto machine_overrun_error <S2SV_ModEnd> ; pc += <S2SV_ModStart> ; if ( unlikely ( pc + asn1_op_lengths [ op ] > datalen ) ) goto machine_overrun_error <S2SV_ModEnd> ; pc += <S2SV_ModStart> ; if ( unlikely ( dp + asn1_op_lengths [ op ] > datalen ) ) goto machine_overrun_error <S2SV_ModEnd> ; pc += <S2SV_ModStart> ; if ( unlikely ( pc + asn1_op_lengths [ op ] > datalen ) goto machine_overrun_error <S2SV_ModEnd> ; pc += <S2SV_ModStart> ; if ( unlikely ( pc + asn1_op_lengths [ op ] > datalen ) ) goto machine_overrun_error <S2SV_ModEnd> ; pc += <S2SV_ModStart> ; if ( unlikely ( dp + asn1_op_lengths [ op ] > datalen ) goto machine_overrun_error <S2SV_ModEnd> ; pc += <S2SV_ModStart> ; if ( unlikely ( pc + asn1_op_lengths [ op ] > datalen ),0
129,"<S2SV_ModStart> = 0 ; spin_lock_init ( & sp -> sctp_lock ) ; spin_unlock_irqrestore ( & sp -> sctp_lock, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> = 0 ; spin_unlock_irqrestore ( & sp -> sctp_lock, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> = 0 ; spin_unlock_irqrestore ( & sp -> sctp_lock, sock_owned_by_user ( sk ) ) ; spin_lock_init ( & sp -> sctp_lock ) ; spin_lock_irqsave ( & sp -> sctp_lock, sock_owned_by_user ( sk ) ) ; spin_lock_irqsave ( & sp -> sctp_lock, sock_owned_by_user ( sk ) ) ; spin_unlock_irqrestore ( & sp -> sctp_lock, sock_owned_by_user ( sk ) ) ; spin_lock_init ( & sp -> sctp_lock ) ; spin_unlock_irqrestore ( & sp -> sctp_lock, sock_owned_by_",0
130,"<S2SV_ModStart> int mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModEnd> * s, <S2SV_ModStart> 4 ) ; if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> level = 0 ; } else { s -> avctx -> profile = 0 ; } <S2SV_ModEnd> return 0 ;",0
131,"<S2SV_ModStart> ; spin_lock_irqsave ( & mpu -> input_lock, flags ) ; if ( readw ( mpu -> dev -> MIDQ + JQS_wTail )!= readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) { u16 wTmp, val ; val = readw ( pwMIDQData + 2 * readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, (",0
132,"<S2SV_ModStart> rule ) ; if ( result < 0 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> LSM <S2SV_blank> rule: <S2SV_blank> %d\\n"", __func__, lsm_rule ) ; return result ; } result = security_filter_rule_init ( entry -> lsm [ lsm_rule ]. type, Audit_equal, args, & entry -> lsm [ lsm_rule ]. rule ) ; if ( result < 0 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> LSM <S2SV_blank> rule: <S2SV_blank> %d\\n"", __func__, lsm_rule ) ; return result ; } result = security_filter_rule_init ( entry -> lsm [ lsm_rule ]. type, Audit_equal, args, & entry -> lsm [ lsm_rule ]. rule ) ; if ( result < 0 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> LSM <S2SV_blank> rule: <S2SV_blank> %d\\n"", __func__, lsm_rule ) ; return result ; }",0
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
134,"<S2SV_ModStart> ) ) ; if ( st == NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; return ; } <S2SV_ModStart> ) ) ; if ( st == NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; return ; } passert ( st == NULL ) ; passert ( st -> st_suspended_md == ke -> md ) ; if ( st -> st_calculating == FALSE ) { complete_v2_state_transition ( & st -> st_suspended_md, e ) ; if ( st -> st_calculating == FALSE ) { complete_v2_state_transition ( & st -> st_suspended_md, e ) ; if ( st -> st_calculating == FALSE ) { complete_v2_state_transition ( & st -> st_suspended_md, e ) ; if ( st -> st_calculating == TRUE ) { complete_v2_state_transition ( & st -> st_suspended_md, e ) ; if",0
135,"<S2SV_ModStart> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> targetOrigin <S2SV_blank> = <S2SV_blank> \'%s\';\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> message <S2SV_blank> = <S2SV_blank> \'%s\';\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\').contentWindow;\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> message <S2SV_blank> = <S2SV_blank> \'%s\';\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\').contentWindow;\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\').contentWindow;\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\').contentWindow;\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> message <S2SV_blank> = <S2SV_blank> \'%s\';\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\').contentWindow;\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window",0
136,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> int status ; struct kvec * iov = req -> rq_rcv_buf. head ; <S2SV_ModEnd> uint32_t attrlen, <S2SV_ModStart> ( status = decode_kvec <S2SV_ModEnd> ( xdr, <S2SV_ModStart>, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen <S2SV_ModStart> ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen <S2SV_ModStart> ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank>",0
137,<S2SV_ModStart> frag_hdr_sz ) ; if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( unfrag_ip6hlen ) ; } <S2SV_ModStart> frag_hdr_sz ) ; if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) { kfree_skb ( skb ) ; return ERR_PTR ( unfrag_ip6hlen ) ; },0
138,<S2SV_ModStart> while ( ( tmpName [ i ]!= 0 ) && ( i < <S2SV_ModEnd> to_read ) ),0
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,"<S2SV_ModStart> AVPALETTE_SIZE ) ; if ( in -> data [ plane ] ) { memcpy ( out -> data [ plane ], in -> data [ plane ], ( size_t ) in -> data [ plane ], ( size_t ) in -> data [ plane ] ) ; } else { memcpy ( out -> data [ plane ], ( size_t ) in -> data [ plane ], ( size_t ) in -> data [ plane ] ) ; } for ( i = 0 ; i < height ; i ++ ) { uint16_t * outrow16 = ( uint16_t * ) outrow ; uint16_t * inrow16 = ( uint16_t * ) inrow ; for ( j = 0 ; j < width ; j ++, outrow16 ++ ) { uint16_t * outrow16 = ( uint16_t * ) outrow ; uint16_t * inrow16 = ( uint16_t * ) inrow ; for ( j = 0 ; j < width ; j ++, outrow16 ++ ) { uint16_t * outrow16 = ( uint16_t * ) outrow ; uint16_t *",0
141,"<S2SV_ModStart> '/' ) { if ( strlen ( pszFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } <S2SV_ModStart> '/' ) { if ( strlen ( pszFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } } else { if ( strlen ( pszFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( iniOpen ( & hIni, szFileName, ""#;"", '[', ']', '=', TRUE, 0L )!= INI_SUCCESS ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } else { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" )",0
142,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart>, "":"", & perms ) ; if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = 0 ; } } if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoiradix ( group, - 1, NULL ) ; } else { gid = 0 ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; } for ( tok = sclone ( dirs ) ; ( dir = stok ( tok, "","", & tok ) )!= 0 ; ) { path = httpMakePath ( state -> route, state -> configDir, dir ) ; if ( mprGetPathInfo ( path, & info ) == 0 && info. isDir ) { continue ; } if ( mprMakeDir ( path, mode, uid, gid, 1 ) < 0 ) { return MPR_ERR",0
143,"<S2SV_ModStart> ; if ( nelements == 0 ) { DPRINTF ( ( ""CDF_READ_PROPERTY_INFO: <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
144,<S2SV_ModStart> ; if ( inet -> inet_opt && inet -> inet_opt -> opt. <S2SV_ModEnd> srr ) daddr,0
145,"<S2SV_ModStart> ) ) { pr_err ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> "" ""ACCEPT/DROP\\n"" ) ; return - EINVAL ; } <S2SV_ModEnd> newinfo -> counters",0
146,<S2SV_ModStart> struct eigrp_tlv_ip_ext_t * eigrp_tlv_ip_ext ; const struct eigrp_tlv_at_cable_setup_t * eigrp_tlv_at_cable_setup = ( const struct eigrp_tlv_at_cable_setup_t * ) pptr ; const struct eigrp_tlv_at_ext_t * eigrp_tlv_at_ext = ( const struct eigrp_tlv_at_ext_t * ) pptr ; const struct eigrp_tlv_at_cable_setup_t * eigrp_tlv_at_cable_setup = ( const struct eigrp_tlv_at_cable_setup_t * ) pptr ; const struct eigrp_tlv_at_ext_t * eigrp_tlv_at_ext = ( const struct eigrp_tlv_at_ext_t * ) pptr ; ND_TCHECK ( * eigrp_tlv_at_ext ) ; if ( eigrp_t,0
147,"<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER int number_aau ; if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = VPX_MALLOC_L ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ; # endif <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr",0
148,"<S2SV_ModStart> int res ; long long <S2SV_ModEnd> export_index_table [ indexes <S2SV_ModStart> ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } <S2SV_ModEnd> SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table",0
149,"<S2SV_ModStart> ) ; } sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp,",0
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; if ( flags & EXT4_GET_BLOCKS_PRE_IO ) split_flag |= EXT4_GET_BLOCKS_PRE_IO,0
151,"<S2SV_ModStart> HASH_DISABLED ; } else { return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 ) ; }",0
152,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
153,"<S2SV_ModStart> = 0.0 ; uint16 nstrips = 0, ntiles = 0, planar = 0 ; uint16 bps = 0, spp = 0 ; uint16 orientation = 0 ; uint16 input_photometric = 0 ; uint16 subsampling_horiz = 0 ; uint16 subsampling_vert = 0 ; uint32 width = 0 ; uint32 length = 0 ; if (! TIFFGetField ( in, TIFFTAG_IMAGEWIDTH, & width ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> image <S2SV_blank> width <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_IMAGELENGTH, & length ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> image <S2SV_blank> length <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & tlsize ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> scanlinesize <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & buffsize ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> scanlinesize <S2SV_blank> tag"" ) ; if",0
154,"<S2SV_ModStart> = 0 ; # if CONFIG_VP9_ENCODER if ( global -> codec -> name == ""vp9"" ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp8"" ) == 0 ) { ctrl_args = vp8_args ; ctrl_args_map = vp8_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & arg, & fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm = 1 ; } else if ( arg_match ( & arg, & use",0
155,"<S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, ( u_short ) fwd. listen_port, ( u_short ) <S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, ( u_short ) fwd. listen_port, ( u_short ) fwd. listen_host, ( u_short ) <S2SV_ModStart> ( ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, ( u_short ) fwd. listen_port, ( u_short ) fwd. listen_port, ( u_short ) <S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, ( u_short ) fwd. listen_port, ( u_short ) <S2SV_ModStart> ( ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, ( u_short ) fwd. listen_port, ( u_short ) fwd. listen_port",0
156,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
157,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
158,"<S2SV_ModStart> errout ; } memset ( & gr -> gr_ctx, 0, sizeof ( gss_union_ctx_id_desc ) ) ;",0
159,"<S2SV_ModStart> ; if (! ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) { struct ext4_inode_info * ei = EXT4_I ( inode ) ; struct ext4_inode_info * ei = EXT4_I ( inode ) ; struct ext4_inode_info * ei = EXT4_I ( inode ) ; struct ext4_inode_info * ei_inode = EXT4_I ( inode ) ; if ( ei -> i_filp == EXT4_I ( inode ) -> i_filp ) { struct ext4_extent * ext4_inode = EXT4_I ( inode ) ; neh = ext_block_hdr ( bh ) ; if ( ext_depth ( inode ) ) neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( ei, 0 ) ) ; else neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( ei, 0 ) ) ; neh -> eh_magic = EXT4_EXT_MAGIC ; ext4_extent_block",0
160,"<S2SV_ModStart> } if ( <S2SV_ModEnd> verify_checks ( c <S2SV_ModStart> callback_ctx ) ) { SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } else { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } return 1 ; } if ( SSL_get1_session ( c -> ssl ) ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data",0
161,"<S2SV_ModStart> ; int ret ; if ( kuid_has_mapping ( parent_ns, owner ) || kgid_has_mapping ( parent_ns, group ) ) return - EPERM",0
162,"<S2SV_ModStart> ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cmac_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cmac_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { rc = - 1 ; goto exit ; }",0
163,"<S2SV_ModStart> } if ( s -> bit_depth > JPEG2000_MAX_BITDEPTH ) { avpriv_request_sample ( s -> avctx, ""bitdepth <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return AVERROR_PATCHWELCOME ; } if ( s -> bit_depth > JPEG2000_MAX_BITDEPTH ) { avpriv_request_sample ( s -> avctx, ""bitdepth <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> bit_depth > JPEG2000_MAX_BITDEPTH ) { avpriv_request_sample ( s -> avctx, ""bitdepth <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return AVERROR_PATCHWELCOME ; } if ( s -> bit_depth > JPEG2000_MAX_BITDEPTH ) { avpriv_request_sample ( s -> avctx, ""bitdepth <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> bit_depth > JPEG2000_MAX_BITDEPTH ) { avpriv_request_sample ( s -> avctx, ""bitdepth <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return AVERROR_",0
164,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
165,<S2SV_ModStart> ; bool is_drop_n_account <S2SV_ModEnd> ; BUILD_BUG_ON ( <S2SV_ModStart> ( TPACKET_ALIGN ( sizeof ( h. h2 ) )!= 32 ) ; BUILD_BUG_ON ( TPACKET_ALIGN ( sizeof ( h. h3 ) )!= 48 ) ; if ( skb -> ip_summed == CHECKSUM_COMPLETE && skb_csum_unnecessary ( skb ) ) status |= TP_STATUS_CSUM_VALID ; else if ( skb -> ip_summed == CHECKSUM_PARTIAL ) status |= TP_STATUS_CSUMNOTREADY ; else if ( skb -> ip_summed == CHECKSUM_COMPLETE ) status |= TP_STATUS_CSUM_VALID ; else if ( skb -> ip_summed == CHECKSUM_COMPLETE && skb_csum_unnecessary ( skb ) ) status |= TP_STATUS_CSUM_VALID ; else if ( skb -> ip_summed == CHECKSUM_COMPLETE && skb_csum_unnecessary ( skb ) ) status |= TP_STATUS_CSUM_VALID ; else if ( skb -> ip_summed == CHECKSUM_COMPLETE,0
166,"<S2SV_ModStart> ; } list_for_each_entry ( trans, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) sctp_assoc_rm_peer ( asoc, trans ) ; } else { list_for_each_entry ( trans, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) sctp_assoc_add_peer ( asoc, & trans -> ipaddr, GFP_ATOMIC, trans -> state ) ) sctp_assoc_rm_peer ( asoc, trans ) ; } else { list_for_each_entry ( trans, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) sctp_assoc_rm_peer ( asoc, & trans -> ipaddr, GFP_ATOMIC, trans -> state ) ) sctp_assoc_rm_peer ( asoc, trans ) ; }",0
167,<S2SV_ModStart> return false ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
168,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( procfd, on_exec, lsm_label, NULL <S2SV_ModEnd> ) { int <S2SV_ModStart> ( name, ""AppArmor"" ) == 0 ) on_exec = 0 ; if ( on_exec ) { labelfd = openat ( procfd, ""self/attr/exec"", O_RDWR ) ; } else { labelfd = openat ( procfd, ""self/attr/current"", O_RDWR ) ; } if ( labelfd < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out ; } size = sprintf ( command, ""changeprofile <S2SV_blank> %s"", lsm_label ) ; if ( size < 0 ) { SYSERROR ( ""Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> apparmor <S2SV_blank> profile"" ) ; ret = - 1 ; goto out ; } if ( write ( labelfd, command, size + 1 ) < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out ; } if",0
169,<S2SV_ModStart> ( OPJ_UINT32 ) ( ( ( OPJ_UINT32 ) comp -> dx >> ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) comp -> dy >> ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) comp -> dx >> ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) comp -> dy >> ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) comp -> dx >> ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) comp -> dy >> ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) comp -> dx >> ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) comp -> dy >> ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) comp -> dx >> ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) (,0
170,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
171,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> uint64_t bits_used = <S2SV_ModStart> 0 ) ; # ifdef DISABLE_RC_LONG_TERM_MEM if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. kf_group_bits += cpi -> rc. this_frame_target - bits_used ; } else { cpi -> twopass. kf_group_bits += cpi -> rc. projected_frame_size - bits_used ; } else { cpi -> twopass. kf_group_bits += cpi -> rc. this_frame_target - bits_used ; } else { cpi -> twopass. kf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
172,"<S2SV_ModStart> charlen ; } curqlevel = tmpql = ( lquery_level * ) palloc0 ( ITEMSIZE * num ) ; if ( ISALNUM ( ptr ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAITDELIM ; curqlevel -> numvar = 1 ; } else if ( charlen == 1 && t_iseq ( ptr, '.' ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAITDELIM ; curqlevel -> numvar = 1 ; } else if ( charlen == 1 && t_iseq ( ptr, '!' ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAIT",0
173,"<S2SV_ModStart> * header, struct mb2_cache_entry * * pce ) { struct mb2_cache * ext4_mb_cache = EXT4_GET_MB_CACHE ( inode ) ; struct mb2_cache * ext4_mb_cache = EXT4_GET_MB_CACHE ( inode ) ; struct mb2_cache * ext4_mb_cache = ext4_get_mb_cache ( <S2SV_ModEnd> inode -> i_sb <S2SV_ModStart> hash ) ; while ( ce ) { struct buffer_head * bh ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; } else if ( le32_to_cpu ( BHDR ( bh ) -> h_refcount ) >= EXT4_XATTR_REFCOUNT_MAX ) { ea_idebug ( inode, ""block <S2SV_blank> %lu <S2SV_blank> refcount <S2SV_blank> %d>=%d"", ( unsigned long ) ce -> e_block, EXT4_",0
174,"<S2SV_ModStart> data_offset ) { int <S2SV_ModEnd> pkt_len ; char <S2SV_ModStart> offset ; int <S2SV_ModEnd> pkt_len = parse_cosine_rec_hdr <S2SV_ModStart> ; pkt_len = parse_cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart>, pkt_len, wth -> frame_buffer, err, err_info ) ; if ( pkt_len == - 1 ) return FALSE ; return parse_cosine_hex_dump ( wth -> fh, & wth -> phdr, pkt_len, wth -> frame_buffer, err, err_info ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
175,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
176,"<S2SV_ModStart> ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } <S2SV_ModEnd> if ( left <S2SV_ModStart> left >= n ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } len = s -> packet_length ; if ( len + left > ( int ) ( rb -> len - rb -> offset ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( len + left > n ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( len + left > ( int ) ( rb -> len - rb -> offset ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( len + left > ( int ) ( rb -> len - rb -> offset ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ;",0
177,"<S2SV_ModStart> ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataIn",0
178,"<S2SV_ModStart> ; if ( hdr. size_in > size ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu <S2SV_blank> > <S2SV_blank> %zu\\n"", __func__, returned_size, size ) ; ret = - EINVAL ; goto out ; } if ( hdr. size_in > size ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu <S2SV_blank> > <S2SV_blank> %zu\\n"", __func__, returned_size, size ) ; ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu <S2SV_blank> > <S2SV_blank> %zu\\n"", __func__, returned_size, size ) ; ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu <S2SV_blank> > <S2SV_blank> %zu\\n"",",0
179,<S2SV_ModStart> int m ; jas_int64_t <S2SV_ModEnd> hstartcol ; if <S2SV_ModStart> { hstartcol = ( numrows + 1 - parity ) >> 1 ; n = m ; dstptr = buf ; srcptr = & a [ ( 1 - parity ) * stride ] ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += JPC_QMFB_COLGRPSIZE ; srcptr += stride << 1 ; } dstptr = buf ; srcptr = & a [ ( 2 - parity ) * stride ] ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += stride ; srcptr += stride << 1 ; } dstptr = buf ; src,0
180,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> width, image -> height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> width, image -> height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> = SetImageExtent ( image, image -> height, image -> depth ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> height, image -> depth ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; return ( DestroyImageList ( image ) ) ; }",0
181,"<S2SV_ModStart> ( image ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> do { image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> alpha_trait = flags & 0x01 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows",0
182,"<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_flags & MS_RDONLY ) { struct ext2_super_block * es = sbi -> s_es ; spin_lock ( & sbi -> s_lock ) ; es -> s_state = cpu_to_le16 ( sbi -> s_mount_state ) ; spin_unlock ( & sbi -> s_lock ) ; ext2_sync_super ( sb, es, 1 ) ; } db_count = sbi -> s_gdb_count ; for ( i = 0 ; i < db_count ; i ++ ) if ( sbi -> s_group_desc [ i ] ) brelse ( sbi -> s_group_desc [ i ] ) brelse ( sbi -> s_group_desc [ i ] ) ; for ( i = 0 ; i < db_count ; i ++ ) if ( sbi -> s_group_desc [ i ] ) brelse ( sbi -> s_group_desc [ i ] ) brelse ( sbi -> s_group_desc [ i ] ) brelse ( sbi -> s_group",0
183,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> num_altsetting < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> interface: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; error = - ENODEV ; goto err_free_devs ; } dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %",0
184,"<S2SV_ModStart> ; if ( strcmp ( command, ""show"" ) == 0 ) { fprintf ( stderr, ""Error: <S2SV_blank> the <S2SV_blank> sandbox <S2SV_blank> doesn\'t <S2SV_blank> use <S2SV_blank> a <S2SV_blank> new <S2SV_blank> network <S2SV_blank> namespace\\n"" ) ; exit ( 1 ) ; } if ( strcmp ( command, ""show"" ) == 0 ) { fprintf ( stderr, ""Error: <S2SV_blank> the <S2SV_blank> sandbox <S2SV_blank> doesn\'t <S2SV_blank> use <S2SV_blank> a <S2SV_blank> new <S2SV_blank> network <S2SV_blank> namespace\\n"" ) ; exit ( 1 ) ; } if ( strcmp ( command, ""show"" ) == 0 ) { fprintf ( stderr, ""Error: <S2SV_blank> the <S2SV_blank> sandbox <S2SV_blank> doesn\'t <S2SV_blank> use <S2SV_blank> a <S2SV_blank> new <S2SV_blank> network <S2SV_blank> namespace\\n"" ) ; exit ( 1 ) ; } if ( strcmp ( command, ""show"" ) == 0 ) { fprintf ( stderr, ""Error: <S2SV_blank> the <S2SV_blank> sandbox <S2SV_blank> doesn\'t <S2SV_blank> use <S2SV_blank> a <S2SV_blank> new <S2SV_blank> network <S2SV_blank> namespace\\n"" ) ; exit ( 1 ) ; } if ( strcmp ( command, ""show"" ) == 0 ) { fprintf ( stderr, ""Error: <S2SV_blank> the <S2SV_blank> sandbox <S2SV_blank> doesn\'t <S2SV_blank> use <S2SV_blank> a <S2SV_blank> new <S2SV_blank> network <S2SV_blank> namespace\\n""",0
185,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) { struct o2nm_cluster * o2nm_cluster = node -> nd_item. ci_parent ; o2nm_cluster = o2nm_cluster_get ( o2nm_cluster_id ( node -> nd_item. ci_parent ) ) ; return o2nm_cluster ; } <S2SV_ModEnd> return to_o2nm_cluster ( <S2SV_ModStart> -> ci_parent ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
186,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart> ) ; nfs_set_open_stateid_locked <S2SV_ModEnd> ( state,",0
187,<S2SV_ModStart> codec_id = AV_CODEC_ID_MVC1 ; break ; case 3 : vst -> codecpar -> format = AV_PIX_FMT_ARGB ; break ; case 4 : vst -> codecpar -> format = AV_PIX_FMT_ARGB ; break ; case 5 : vst -> codecpar -> format = AV_PIX_FMT_ARGB ; break ; case 6 : vst -> codecpar -> format = AV_PIX_FMT_ARGB ; break ; case 7 : vst -> codecpar -> format = AV_PIX_FMT_ARGB ; break ; case 8 : vst -> codecpar -> format = AV_PIX_FMT_ARGB ; break ; case 9 : vst -> codecpar -> format = AV_PIX_FMT_ARGB ; break ; case 10 : vst -> codecpar -> format = AV_PIX_FMT_ARGB ; break ; case 9 : vst -> codecpar -> format = AV_PIX_FMT_ARGB ; break ; case 10 : vst -> codecpar -> format = AV_PIX_FMT_ARGB ; break ; default : avpriv_request,0
188,"<S2SV_ModStart> ; if ( nelements == 0 ) { DPRINTF ( ( ""CDF_READ_PROPERTY_INFO: <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
189,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> # ifdef AUTOKEY <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> # endif # <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = & <S2SV_ModStart> ntpd_time_stepped ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
190,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> dir = ""/tmp"" ) == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd =",0
191,"<S2SV_ModStart> prev ) ; if (! list_empty ( & shadows -> mnt_ns -> mnt_mounts ) ) attach_shadowed ( mnt, parent, & shadows -> mnt_ns -> mnt_mounts [ mnt -> mnt_ns -> mnt_mounts [ mnt -> mnt_mounts - 1 ]. mnt_ns -> mnt_mounts [ mnt -> mnt_mounts - 1 ]. mnt_ns -> mnt_mounts [ m -> mnt_mounts - 1 ]. mnt_ns -> mnt_mounts [ m -> mnt_mounts - 1 ]. mnt_ns -> mnt_mounts [ m -> mnt_ns -> mnt_mounts [ m -> mnt_mounts - 1 ]. mnt_ns -> mnt_mounts [ m -> mnt_mounts - 1 ]. mnt_ns -> mnt_mounts [ m -> mnt_mounts - 1 ]. mnt_ns -> mnt_mounts [ m -> mnt_mounts - 1 ]. mnt_ns -> mnt_",0
192,"<S2SV_ModStart> next ) ; if ( unlikely ( next -> es | prev -> es ) ) loadsegment ( es, next -> es ) ; if ( unlikely ( next -> ds | prev -> ds ) ) loadsegment ( ds, next -> ds ) ; if ( unlikely ( fsindex | next -> fsindex | prev -> fs ) ) { loadsegment ( fs, next -> fsindex ) ; if ( fsindex ) prev -> fs = 0 ; } if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev -> gs = 0 ; if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev -> gsindex = gsindex ; if ( unlikely ( gsindex | next -> gsindex | prev -> gs ) ) { loadsegment ( gs, next -> gsindex ) ; if ( gsindex ) prev -> gs = 0 ; } if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev -> gsindex = gsindex ; if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next",0
193,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
194,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
195,<S2SV_ModStart> << NM_VECTOR ) | <S2SV_ModEnd> ( 1u <<,0
196,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> NFSX_V3FHMAX + 1 ] ; temp [ sizeof ( temp ) - 1 ] = '\\0' ; spacep = strchr ( temp,'<S2SV_blank>') ; if ( spacep ) * spacep = '\\0' ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %s/"", temp ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", fsid. Fsid_dev. Major, fsid. Fsid_dev. Minor ) ) ; } if ( fsid. Fsid_dev. Major == 257 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", fsid. Opaque_Handle ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", fsid. Opaque_Handle ) ) ; } if ( fsid. Fsid_dev. Minor == 257 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d",0
197,"<S2SV_ModStart> int transhdrlen, unsigned <S2SV_ModStart> = SKB_GSO_UDP ; if ( skb_is_gso ( skb ) ) { struct frag_hdr fhdr ; <S2SV_ModStart> ; ipv6_select_ident ( & fhdr ) ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; __skb_queue_tail ( & sk -> sk_write_queue, skb ) ; return 0 ; } <S2SV_ModEnd> skb_shinfo ( sk <S2SV_ModStart> = SKB_GSO_UDP ; if ( skb_is_gso ( skb ) ) { struct frag_hdr fhdr ; skb_shinfo ( skb ) -> gso_size = ( mtu - fragheaderlen - sizeof ( struct frag_hdr ) ) & ~ 7 ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_UDP ; ipv6_select_ident ( & fhdr ) ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; __skb_queue_tail ( & sk -> sk_write_queue, skb ) ;",0
198,"<S2SV_ModStart> return res ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_A ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 1 ], HSR_PT_SLAVE_B ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_C ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 1 ], HSR_PT_SLAVE_C ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_B ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 1 ], HSR_PT_SLAVE_C ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_C ) ; if ( res ) goto",0
199,"<S2SV_ModStart> ] = 0 ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
200,"<S2SV_ModStart> void vp9_setup_dst_planes ( <S2SV_ModEnd> MACROBLOCKD * xd <S2SV_ModStart> ) { uint8_t <S2SV_ModEnd> * const buffers <S2SV_ModStart> src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_x, pd -> subsampling_y ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
201,<S2SV_ModStart> ; len = XDR_QUADLEN ( len ) ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; hdr = ( void * ) p - head -> iov_base ; dlen = head -> iov_len + rqstp -> rq_arg. page_len + tail -> iov_len - hdr ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ;,0
202,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { if ( ctxt -> op_bytes < 4 ) { WARN ( 1, ""unsupported <S2SV_blank> eip <S2SV_blank> assignment <S2SV_blank> size\\n"" ) ; } return 0 ; } <S2SV_ModStart> { switch ( ctxt -> op_bytes ) { case 2 : ctxt -> _eip = ( u16 ) dst ; break ; case 4 : ctxt -> _eip = ( u32 ) dst ; break ; case 8 : ctxt -> _eip = ( u32 ) dst ; break ; default : WARN ( 1, ""unsupported <S2SV_blank> eip <S2SV_blank> assignment <S2SV_blank> size\\n"" ) ; } return 1 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
203,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
204,"<S2SV_ModStart> ; remaining = tvb_captured_length_remaining ( tvb, offset ) ; if ( remaining <= 0 ) { if ( data ) * data = g_strdup ( """" ) ; return offset ; } text = tvb_get_string_enc ( NULL, tvb, offset, remaining, ENC_UTF_16 | ENC_LITTLE_ENDIAN ) ; len = ( int ) strlen ( text ) ; if ( data ) * data = text ; else g_free ( text ) ;",0
205,"<S2SV_ModStart> == READ ) { struct ocfs2_dinode * ip = OCFS2_I ( inode ) ; <S2SV_ModStart> == READ ) { struct ocfs2_dinode * ip = OCFS2_I ( inode ) ; <S2SV_ModStart> = ocfs2_dio_get_block ; return __blockdev_direct_IO ( iocb, inode, ip -> i_sb -> s_bdev, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; } else { get_block = ocfs2_dio_get_block ; } <S2SV_ModStart> == WRITE ) { struct ocfs2_dinode * ip = OCFS2_I ( inode ) ; <S2SV_ModStart> = ocfs2_dio_get_block ; return __blockdev_direct_IO ( iocb, inode, ip -> i_sb -> s_bdev, ip, get_block, ocfs2_dio_end_io, NULL, 0 ) ; }",0
206,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
207,"<S2SV_ModStart> if ( fscanf ( f, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == 2 ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len + 1 ) ; strcpy ( newstring, strparm + 1 ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm + 2, ""%i"", & parm ) ; else sscanf ( strparm + 2, ""%i"", & parm ) ; for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) { if (! strcmp ( def, defaults [ i ]. name ) ) { if (! strcmp (",0
208,<S2SV_ModStart> + 1 ) ; <S2SV_ModEnd> write_pmc ( i,0
209,<S2SV_ModStart> = len ; * nl = 0 ;,0
210,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> ; int kind <S2SV_ModEnd> ; void * <S2SV_ModStart> ; char * str <S2SV_ModEnd> ; PyObject * <S2SV_ModStart> ; char * fstring_name <S2SV_ModEnd> ; Py_ssize_t i <S2SV_ModStart> ; o = PyUnicode_DecodeUTF8 <S2SV_ModEnd> ( expr_start, <S2SV_ModStart> ; len = PyUnicode_GET_LENGTH ( o ) ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! Py_UNICODE_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } } if ( all_whitespace ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } len = expr_end - expr_start ; str = PyMem_RawMalloc ( len + 3 ) ; if ( str == NULL ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ;",0
211,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
212,"<S2SV_ModStart> string ) { if ( string ) { while ( c && cJSON_strcasecmp ( c -> string, string ) ) c = c -> next ; } else { while ( c && cJSON_strcasecmp ( c -> string, string ) ) c = c -> next ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
213,"<S2SV_ModStart> == 0 ) { if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) set_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ; else set_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ; }",0
214,"<S2SV_ModStart> * len ) ; if (! net_read_exact ( s, & nh, sizeof ( nh ) ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_type, nh. nh_len ) ; if (! net_read_exact ( s, arg, * len ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_type, * len ) ; if (! net_read_exact ( s, & nh, sizeof ( nh ) ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_type, nh. nh_len ) ; if (! net_read_exact ( s, arg, * len ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_len ) ; if (! net_read_exact ( s, & nh, sizeof ( nh ) ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"",",0
215,"<S2SV_ModStart> XFS_ATTR_LOCAL ) { xfs_attr_leaf_name_local_t * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; * name_loc = xfs_attr3_leaf_",0
216,"<S2SV_ModStart> - EINVAL ; if ( vlen < sizeof ( struct mmsghdr ) ) return - EINVAL ; <S2SV_ModStart> NULL ) ; datagrams = __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, & ktspec, get_compat_timespec ( & ktspec, timeout ) ) ; if ( datagrams < 0 ) return datagrams ; datagrams = __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, & ktspec, <S2SV_ModEnd> flags | MSG_CMSG_COMPAT <S2SV_ModStart> ) mmsg, vlen, flags | MSG_CMSG_COMPAT, <S2SV_ModEnd> put_compat_timespec ( & <S2SV_ModStart> = __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, & ktspec, get_compat_timespec ( & ktspec, timeout ) ) ; if ( datagrams < 0 ) return datagrams ;",0
217,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> width, image -> height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> width, image -> height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> = SetImageExtent ( image, image -> depth, image -> depth ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> height, image -> depth ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; return ( DestroyImageList ( image ) ) ; }",0
218,"<S2SV_ModStart> ; int ret ; skb -> protocol = eth_type_trans ( skb, ndev ) <S2SV_ModEnd> ; ret = <S2SV_ModStart> q_num ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_bytes += skb -> len ; ndev -> stats. tx_packets ++ ; return ( netdev_tx_t ) ret ; } <S2SV_ModEnd> ret = hns_nic_net_xmit_hw <S2SV_ModStart> ( ndev, skb, & tx_ring_data ( priv, skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_bytes += skb -> len ; ndev -> stats. tx_packets += skb -> len ; } ret = hns_nic_net_xmit_hw ( ndev, skb, & tx_ring_data ( priv, skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_bytes += sk",0
219,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
220,"<S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPOR",0
221,"<S2SV_ModStart> ; RAnalOp next_op ; if ( len < op -> size ) { avr_op_analyze_fail ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len, cpu ) ; } else { avr_op_analyze_fail ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; } if ( next_op. esil ) { avr_op_analyze_fail ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; avr_op_analyze_fail ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; }",0
222,<S2SV_ModStart> size ) ; <S2SV_ModEnd> px -> ft,0
223,"<S2SV_ModStart> data ) { const char * user_config = NULL, * repo_config = NULL ; <S2SV_ModStart> ) ; } user_config = strdup ( mkpath ( ""/etc/perfconfig"" ) ) ; if (! access ( user_config, R_OK ) ) { ret += perf_config_from_file ( fn, user_config, data ) ; found += 1 ; } free ( user_config ) ; <S2SV_ModStart> } repo_config = strdup ( mkpath ( ""/etc/perfconfig"" ) ) ; if (! access ( repo_config, R_OK ) ) { ret += perf_config_from_file ( fn, repo_config, data ) ; found += 1 ; } free ( repo_config ) ;",0
224,<S2SV_ModStart> int validate_event ( struct perf_event * event ) { struct arm_pmu * armpmu = to_arm_pmu ( event -> pmu ) <S2SV_ModEnd> ; struct hw_perf_event <S2SV_ModStart> ( event -> pmu <S2SV_ModEnd>!= leader_pmu || <S2SV_ModStart> state < PERF_EVENT_STATE_OFF <S2SV_ModEnd> ) return 1 <S2SV_ModStart> return 1 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
225,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> bool new_idmap_permitted ( <S2SV_ModStart> return true ; if ( in_egroup_p ( current_user_ns ( ) -> user_ns, CAP_SYS_UID ) && in_egroup_p ( ) -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns, CAP_SYS_UID ) && in_egroup_p ( current_user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns",0
226,"<S2SV_ModStart> ++ ) { body [ j ] = XMALLOC ( VarLenData, 1 ) ; body [ j ] -> len = a -> values [ j ]. len ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. len ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. len ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf ) ; memmove ( body [ j ] -> data, a -> values [ j ] -> data -> buf, body [ j ] -> len ) ; }",0
227,"<S2SV_ModStart> * hx ; <S2SV_ModEnd> int ret, <S2SV_ModStart> ; u8 reset <S2SV_ModEnd> ; ret = <S2SV_ModStart> 0 ; hx = kzalloc ( sizeof ( * hx ), GFP_KERNEL ) ; if (! hx ) return - ENOMEM ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> 0 ) { <S2SV_ModEnd> reset = 1 <S2SV_ModStart> = 0 ; if ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 )!= 1 ) err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; while ( ( ret = dvb_usb_get_hexline ( fw, hx, & pos, & ret ) > 0 ) { deb_fw ( ""writing <S2SV_blank> to <S2SV_blank> address <S2SV_blank> 0x%04x <S2SV_blank> (buffer: <S2SV_blank> 0x%02x <S2SV_blank> %02x)\\n"", hx -> addr, hx -> len ) ; if ( ret!= hx -> len ) { err ( ""error <S2SV_blank> while <S2SV_blank> transferring <S2SV_blank> firmware <S2SV_blank> (transferred <S2SV_blank> size: <S2SV_blank> %d, <S2SV_blank> block <S2SV_blank> size: <S2SV_blank> %d)"", ret, hx -> len ) ;",0
228,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ;",0
229,"<S2SV_ModStart> princ ) ; if ( c1 && c2 && strncmp ( c1 -> data, c2 -> data, c2 -> length ) == 0 && strncmp ( handle -> params. realm, realm -> data, realm -> length ) == 0 && strncmp ( ""kadmin"", c1 -> data, c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0",0
230,"<S2SV_ModStart> < shader_rec_offset || args -> shader_rec_count >= ( UINT_MAX / sizeof ( struct vc4_shader_state ) ) || temp_size < exec_size ) { DRM_ERROR ( ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; goto fail ; } if ( args -> shader_rec_count >= ( UINT_MAX / sizeof ( struct vc4_shader_state ) ) || exec -> shader_state_count >= ( UINT_MAX / sizeof ( struct vc4_shader_state ) ) || exec -> shader_state_size < exec -> shader_state_size ) { DRM_ERROR ( ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; goto fail ; } if ( args -> shader_rec_count >= ( UINT_MAX / sizeof ( struct vc4_shader_state ) ) || exec -> shader_state_size < exec -> shader_state_count ) { DRM_ERROR ( ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; goto fail ; }",0
231,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
232,"<S2SV_ModStart> -> vm_file ) ; if ( test_opt ( inode -> i_sb, DELALLOC ) &&! ext4_should_nonda_switch ( inode -> i_sb ) ) { do { ret = block_page_mkwrite ( vma, vmf, ext4_da_get_block_prep ) ; } while ( ret == - ENOSPC && test_opt ( inode -> i_sb, DELALLOC ) ) { do { ret = block_page_mkwrite ( vma, vmf, ext4_da_get_block_prep ) ; } while ( ret == - ENOSPC && ext4_should_retry_alloc ( inode -> i_sb, & retries ) ) ; } while ( page_has_buffers ( page ) ) { if (! ext4_walk_buffers ( NULL, 0, len, NULL, ext4_bh_unmapped ) ) { wait_for_stable_page ( page ) ; ret = VM_FAULT_LOCKED ; goto out ; }",0
233,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
234,"<S2SV_ModStart> * arg ) { if (! * arg ) { r_return_val_if_fail ( arg, NULL ) ; } <S2SV_ModStart> case ';' : if (! * arg ) { r_return_val_if_fail ( arg, NULL ) ; } <S2SV_ModStart> case '\\n' : if (! * arg ) { r_return_val_if_fail ( arg, NULL ) ; } <S2SV_ModStart> case '\\n' : if (! * arg ) { r_return_val_if_fail ( arg, NULL ) ; } <S2SV_ModStart> case '@' : if (! * arg ) { r_return_val_if_fail ( arg, NULL ) ; } <S2SV_ModStart> case '`' : if (! * arg ) { r_return_val_if_fail ( arg, NULL ) ; } if (! * arg ) { r_return_val_if_fail ( arg, NULL ) ; } if (! * arg ) { r_return_val_if_fail ( arg, NULL ) ; } if (! * arg ) { r_return_val_if_fail ( arg ) { r_return_val_if_fail ( arg, NULL ) ; }",0
235,"<S2SV_ModStart> case 1 : idstr = STR_OR_ID ( t. t_id, oakley_p_map ) ; map = ipsec_t_map ; nmap = sizeof ( ipsec_t_map ) / sizeof ( ipsec_t_map [ 0 ] ) ; break ; case 2 : idstr = STR_OR_ID ( t. t_id, ah_p_map ) ; map = ipsec_t_map ; nmap = sizeof ( ipsec_t_map ) / sizeof ( ipsec_t_map [ 0 ] ) ; break ; case 3 : idstr = STR_OR_ID ( t. t_id, esp_p_map ) ; map = ipsec_t_map ; nmap = sizeof ( ipsec_t_map ) / sizeof ( ipsec_t_map [ 0 ] ) ; break ; case 4 : idstr = STR_OR_ID ( t. t_id, ipcomp_p_map ) ; map = ipsec_t_map ; nmap = sizeof ( ipsec_t_map ) / sizeof ( ipsec_t_map [ 0 ] ) ; break ;",0
236,"<S2SV_ModStart> GsmIceConnectionData ; static gboolean accept_ice_connection ( GIOChannel * source, GIOCondition condition, GsmIceConnectionData * data ) { IceListenObj listener ; IceAcceptStatus status ; gsm_client * client ; gsm_store_add ( server -> priv -> client_store, gsm_client_peek_id ( client ), G_OBJECT ( client ) ) ; g_object_unref ( client ) ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return FALSE ; } status = IceAcceptConnection ( listener, & status ) ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return TRUE ; } client = gsm_xsmp_client_new ( ice_conn ) ; gsm_store_add ( server -> priv -> client_store, gsm_client_peek_id ( client ), G_OBJECT ( client ) ) ;",0
237,"<S2SV_ModStart> ; if ( unlikely (! pskb_expand_head ( skb, frag_hdr_sz, 0, GFP_ATOMIC ) ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - ENOMEM ) ; }",0
238,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
239,"<S2SV_ModStart> ; case SO_REUSEADDR : v. val = sock_flag ( sk, SOCK_TRUNC ) ; break ; case TCP_NODELAY : v. val = sock_flag ( sk, SOCK_TRUNC ) ; break ; case TCP_NODELAY : v. val = sock_flag ( sk, SOCK_TRUNC ) ; break ; case TCP_NODELAY : v. val = sock_flag ( sk, SOCK_NODELAY ) ; break ; case TCP_NODELAY : v. val = sock_flag ( sk, SOCK_TRUNC ) ; break ; case TCP_NODELAY : v. val = sock_flag ( sk, SOCK_TRUNC ) ; break ; case TCP_NODELAY : v. val = sock_flag ( sk, SOCK_TRUNC ) ; break ; case TCP_NODELAY : v. val = sock_flag ( sk, SOCK_NODELAY ) ; break ; case TCP_NODELAY : v. val = sock_flag ( sk, SOCK_TRUNC ) ; break ; case TCP_NODELAY : v. val = sock_flag",0
240,"<S2SV_ModStart> { if ( flags & MSG_TRUNC ) { msg -> msg_flags |= MSG_TRUNC ; copied = skb -> len ; } if ( len < 0 ) { msg -> msg_flags |= MSG_TRUNC ; copied = len ; } skb_reset_transport_header ( skb ) ; err = skb_copy_datagram_iovec ( skb, 0, msg -> msg_iov, copied ) ; if ( err ) { sock_recv_ts_and_drops ( msg, sk, skb ) ; if ( bt_sk ( sk ) -> skb_msg_name ) bt_sk ( sk ) -> skb_msg_name ( skb, msg -> msg_name, & msg -> msg_namelen ) ; if ( bt_sk ( sk ) -> skb_msg_name ) bt_sk ( sk ) -> skb_msg_name ( skb, msg -> msg_name, & msg -> msg_namelen ) ; else <S2SV_ModEnd> msg -> msg_namelen",0
241,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
242,"<S2SV_ModStart> int i ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_z ) ; } <S2SV_ModEnd> } } <S2SV_null>",0
243,"<S2SV_ModStart>, j ; <S2SV_ModEnd> unsigned int bufsize <S2SV_ModStart> cleanup ; X509_NAME_oneline_ex <S2SV_ModEnd> ( X509_get_subject_name ( <S2SV_ModStart>, buf, & bufsize, XN_FLAG_SEP_COMMA_PLUS ) ; md -> subject_dn = strdup ( buf ) ; if ( md -> subject_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; j = 0 ; if ( pkinit_sans!= NULL ) { for ( i = 0 ; pkinit_sans [ i ]!= NULL ; i ++ ) j ++ ; } if ( upn_sans!= NULL ) { for ( i = 0 ; upn_sans [ i ]!= NULL",0
244,"<S2SV_ModStart>. npages = min_t ( gfn_t, npages, KVM_MEM_MAX_NR_PAGES - mem -> slot ) ; if ( new. npages > KVM_MEM_MAX_NR_PAGES - mem -> slot ) r = - EINVAL ; if ( new. npages > KVM_MEM_MAX_NR_PAGES - mem -> slot ) r = - EINVAL ; if ( new. npages > KVM_MEM_MAX_NR_PAGES - KVM_MEM_MAX_NR_PAGES ) r = - EINVAL ; if ( new. npages > KVM_MEM_MAX_NR_PAGES - mem -> slot ) r = - EINVAL ; if ( new. npages > KVM_MEM_MAX_NR_PAGES - mem -> slot ) r = - EINVAL ; if ( new. npages > KVM_MEM_MAX_NR_PAGES - KVM_MEM_MAX_NR_PAGES - KVM_MEM_MAX_NR_PAGES - KVM_MEM_MAX_NR",0
245,"<S2SV_ModStart> ; err = - EINVAL ; } if (! err ) { if ( ru && copy_to_user ( ru, & r, sizeof ( struct rusage ) ) ) { if ( ru && copy_to_user ( ru, & r, sizeof ( struct rusage ) ) ) { if ( ru && copy_to_user ( ru, & r, sizeof ( struct rusage ) ) ) { if ( ru && copy_to_user ( ru, & r, sizeof ( struct rusage ) ) ) { if ( ru && copy_to_user ( ru, & r, sizeof ( struct rusage ) ) ) return - EFAULT ; } } else { if ( ru && copy_to_user ( ru, & r, sizeof ( struct rusage ) ) ) { if ( ru && copy_to_user ( ru, & r, sizeof ( struct rusage ) ) ) { if ( ru && copy_to_user ( ru, & r, sizeof ( struct rusage ) ) ) { if ( ru && copy_to_user ( ru, & r, sizeof ( struct rusage ) ) ) return - EFAULT ; } } }",0
246,"<S2SV_ModStart> ; lock_sock ( sk ) ; if ( msg -> msg_name ) { msg -> msg_name [ msg -> msg_namelen ] = kmemdup ( msg -> msg_name, msg -> msg_namelen, GFP_KERNEL ) ; msg -> msg_name [ msg -> msg_namelen ] = kmemdup ( msg -> msg_name, msg -> msg_namelen, GFP_KERNEL ) ; } else { msg -> msg_name [ msg -> msg_namelen ] = kmemdup ( msg -> msg_name, msg -> msg_namelen, GFP_KERNEL ) ; }",0
247,"<S2SV_ModStart> * ni ; <S2SV_ModEnd> register u_int amt <S2SV_ModStart> ; register u_int i <S2SV_ModEnd> ; int j <S2SV_ModStart> ; if ( length < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d[%u]:"", j, length ) ) ; break ; } if ( length < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d[%u]:"", j, length ) ) ; break ; } if ( length < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d[%u]:"", j, length ) ) ; break ; } if ( length < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d[%u]:"", j, length ) ) ; break ; } if ( length < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d[%u]:"", j, length ) ) ; break ; } if ( length < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d[%u]:"", j, length ) ) ;",0
248,<S2SV_ModStart> ; if ( reqkey_defl == KEY_REQKEY_DEFL_THREAD_KEYRING ) { ret = install_thread_keyring_to_cred ( new ) ; if ( ret < 0 ) { ret = - EINVAL ; goto error ; } ret = install_process_keyring_to_cred ( new ) ; if ( ret < 0 ) { ret = - EINVAL ; goto error ; } goto set ; case KEY_REQKEY_DEFL_USER_KEYRING : ret = install_user_keyring_to_cred ( new ) ; if ( ret < 0 ) { ret = install_user_keyring_to_cred ( new ) ; if ( ret < 0 ) { ret = - EINVAL ; goto error ; } ret = install_process_keyring_to_cred ( new ) ; if ( ret < 0 ) { ret = - EINVAL ; goto error ; } goto set ; case KEY_REQKEY_DEFL_GROUP_KEYRING : ret = install_group_keyring_to_cred ( new ) ; if ( ret < 0 ) { ret = - EINVAL ; goto error ; },0
249,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
250,"<S2SV_ModStart> argc ++ ; if ( fmt -> flags & MISC_FMT_OPEN_BINARY ) { fd_install ( bprm -> file, bprm -> file ) ; bprm -> interp_flags |= BINPRM_FLAGS_EXECFD ; } else { allow_write_access ( bprm -> file, - 1 ) ; bprm -> interp_flags |= BINPRM_FLAGS_EXEC ; } <S2SV_ModStart> argc ++ ; if ( fmt -> flags & MISC_FMT_OPEN_BINARY ) { fd_install ( - 1, bprm -> file ) ; allow_write_access ( bprm -> file, bprm -> file ) ; bprm -> interp_flags |= BINPRM_FLAGS_EXECFD ; } else { allow_write_access ( bprm -> file, - 1 ) ; bprm -> interp_flags |= BINPRM_FLAGS_EXEC ; }",0
251,<S2SV_ModStart> double dTotalWeight = 0.0 <S2SV_ModEnd> ; int iSrc <S2SV_ModStart> } } for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ; } if ( dTotalWeight < 0.0 ) { _gdContributionsFree ( res ) ; return NULL ; } if ( dTotalWeight > 0.0 ) { for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ; } } if ( dTotalWeight > 0.0 ) { for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight -= ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ) ; } if ( d,0
252,<S2SV_ModStart> user ) { if ( user == NULL ) return - EINVAL ; <S2SV_ModStart> user ) ; <S2SV_ModEnd> cleanup_srcu_struct ( &,0
253,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if ( COM_CompareExtension ( filename, "".cfg"" )!= 0 ) { Com_Printf ( ""Unsupported <S2SV_blank> extension: <S2SV_blank> %s\\n"", filename ) ; Com_Printf ( ""Unsupported <S2SV_blank> extension: <S2SV_blank> %s\\n"", filename ) ; return ; }",0
254,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> limit = 0,0
255,<S2SV_ModStart> & tee_mm_sec_ddr ) ; if ( IS_ERR ( mobj ) ) { if ( IS_ERR ( mobj ) ) { if ( IS_ERR ( mobj ) ) { if ( IS_ERR ( mobj ) ) { if ( IS_ERR ( mobj ) ) { if ( IS_ERR ( mobj ) ) { if ( IS_ERR ( mobj ) ) { if ( IS_ERR ( mobj ) ) { if ( IS_ERR ( mobj ) ) { if ( IS_ERR ( mobj ) ) { if ( IS_ERR ( mobj ) ) { if ( IS_ERR ( mobj ) ) { if ( IS_ERR ( mobj ) ) { if ( IS_ERR ( mobj ) ) { if ( IS_ERR ( mobj ) ) { if ( IS_ERR ( mobj ) ) { if ( IS_ERR ( mobj ) ) { if ( IS_ERR ( mobj ) ) { if ( IS_ERR ( mobj ) ) { if ( IS_ERR ( mobj ) ) { if ( IS_ERR ( mobj ) ) { if ( IS_ERR ( mobj ) ),0
256,<S2SV_ModStart> += incr ; delta -= incr ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
257,"<S2SV_ModStart> * for_ch ; int <S2SV_ModEnd> is_async = 0 <S2SV_ModStart> comp_for ) ; if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 0 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async ) ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( first, expression, NULL, is_async, c -> c_arena ) ; else comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ), expression, NULL, is_async, c -> c_arena )",0
258,"<S2SV_ModStart> = NULL ; } for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof",0
259,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> write_mb_modes_kf ( const <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> -> mi_stride ] <S2SV_ModEnd> ; const MODE_INFO <S2SV_ModStart> -> segment_id ) ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id ) ; if ( cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi",0
260,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
261,"<S2SV_ModStart> } } DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> iov. iov_len ) ; n = r -> iov. iov_len / 512 ; r -> sector += n ; r -> sector_count -= n ; scsi_req_data ( & r -> req, r -> iov. iov_len <S2SV_ModEnd> ) ; }",0
262,"<S2SV_ModStart> cs > CQSPI_MAX_CHIPSELECT ) { dev_err ( dev, ""Chip <S2SV_blank> select <S2SV_blank> %d <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", cs ) ; goto err ; } if (",0
263,"<S2SV_ModStart> maxn ) { switch ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : return decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME : return decompileGOTOFRAME ( n, actions, maxn, 0 ) ; case SWFACTION_GOTOFRAME : return decompileGOTOFRAME ( n, actions, maxn, 0 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETPROPERTY : decompileGETPROPERTY ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE (",0
264,<S2SV_ModStart> ) ) ; if ( l < 0 ) { AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( bo ) ) ) ) ) ) ) ) ) ) ) ) ) ; AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ (,0
265,"<S2SV_ModStart> out ; } if ( free == MLX4_VLAN_REGULAR ) { err = - ENOMEM ; goto out ; } if ( vlan == ( MLX4_VLAN_MASK & be32_to_cpu ( table -> entries [ free ] ) ) ) { err = - EINVAL ; goto out ; } if ( vlan == ( MLX4_VLAN_MASK & be32_to_cpu ( table -> entries [ free ] ) ) ) { err = - EINVAL ; goto out ; } table -> refs [ free ] = 1 ; table -> entries [ free ] = cpu_to_be32 ( vlan | MLX4_VLAN_VALID ) ; if ( unlikely ( err ) ) { mlx4_warn ( dev, ""Failed <S2SV_blank> adding <S2SV_blank> vlan: <S2SV_blank> %u\\n"", vlan ) ; table -> entries [ free ] = 0 ; err = mlx4_set_port_vlan_table ( dev, port, table -> entries ) ; if ( unlikely ( err ) ) { mlx4_warn ( dev, ""Failed <S2SV_blank> adding <S2SV_blank> vlan: <S2SV_blank> %u\\n"", vlan ) ; table -> entries [ free ] = 0",0
266,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> len < sizeof <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS <S2SV_ModStart> ( & prep -> pp_n ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { const struct id_off * ie ; char c = '<' ; ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & ps -> page. p_sid ), EXTRACT_32BITS ( & ps -> page. p_uid ) ) ; ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) ie ; for ( ie = io + ps -> nid ; io < ie && ND_TTEST ( * io ) ; ++ io ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) ie ; for ( ie = io + ps -> nid ; io <",0
267,<S2SV_ModStart> ; rq -> skip_clock_update = 1 ;,0
268,"<S2SV_ModStart> int ret ; <S2SV_ModEnd> dev_dbg ( & <S2SV_ModStart>, ""atusb: <S2SV_blank> reg <S2SV_blank> = <S2SV_blank> 0x%x\\n"", reg ) ; if ( ret < 0 ) return ret ; ret = atusb_control_msg ( atusb, usb_rcvctrlpipe ( usb_dev, 0 ), ATUSB_REG_READ, ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = atusb_control_msg ( atusb, usb_rcvctrlpipe ( usb_dev, 0 ), ATUSB_REG_READ, ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> atusb_control_msg ( atusb <S2SV_ModStart>, ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> atusb_control_msg ( atusb <S2SV_ModStart>, ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return",0
269,<S2SV_ModStart> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> sizeof ( char <S2SV_ModEnd> ) * (,0
270,"<S2SV_ModStart> } } } if ( s -> str ) { strncpy ( outbuffer, s -> str, XMLRPC_BUFSIZE ) ; } else { strncpy ( outbuffer, s -> str, XMLRPC_BUFSIZE ) ; }",0
271,"<S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE, ""No <S2SV_blank> adaptation <S2SV_blank> state <S2SV_blank> for <S2SV_blank> device <S2SV_blank> profile"" ) ; goto Error ; } } else { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE, ""No <S2SV_blank> adaptation <S2SV_blank> state <S2SV_blank> for <S2SV_blank> device <S2SV_blank> profile"" ) ; goto Error ; } } if ( ( nProfiles == 1 ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE, ""No <S2SV_blank> adaptation <S2SV_blank> state <S2SV_blank> for <S2SV_blank> device <S2SV_blank> profile"" ) ; goto Error ; } } else { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE, ""No <S2SV_blank> adaptation <S2SV_blank> state <S2SV_blank> for <S2SV_blank> device <S2SV_blank> profile"" ) ; goto Error ; } if ( ( nProfiles == 1 ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE, ""No <S2SV_blank> adaptation <S2SV_blank> state <S2SV_blank> for <S2SV_blank> device <S2SV_blank> profile",0
272,"<S2SV_ModStart> { ut32 addr32 = r_read_le32 ( buf + i ) ; if ( addr32 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, ( ut64 ) addr32, type, bits ) ; r_list_append ( ret, ba ) ; } } else { ut64 addr64 = r_read_le64 ( buf + i ) ; if ( addr64 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, ( ut64 ) addr64, type, bits ) ; r_list_append ( ret, ba ) ; } } } else { ut64 addr64 = r_read_le64 ( buf + i ) ; if ( addr64 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, addr64, type, bits ) ; r_list_append ( ret, ba ) ; } }",0
273,"<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_ADMIN_GROUP : case ISIS_SUBTLV_EXT_IS_REACH_LINK_REMOTE_ID : if ( subl >= 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr + 4 ) ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr + 8 ) ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr + 4 ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr + 4 ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr + 8 ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "",",0
274,"<S2SV_ModStart> 2 * anal_size, <S2SV_ModEnd> 2 * anal_size <S2SV_ModStart> 2 * anal_size, <S2SV_ModEnd> 8 * anal_size <S2SV_ModStart> 2 * anal_size, 8 * anal_size, 8 <S2SV_ModEnd> * anal_size, <S2SV_ModStart> 2 * anal_size, 8 <S2SV_ModEnd> * anal_size, <S2SV_ModStart> * anal_size, 8 <S2SV_ModEnd> * anal_size, <S2SV_ModStart> * anal_size, 8 <S2SV_ModEnd> * anal_size, <S2SV_ModStart> * anal_size, 8 <S2SV_ModEnd> * anal_size, <S2SV_ModStart> * anal_size, 8 <S2SV_ModEnd> * anal_size, <S2SV_ModStart> * anal_size, 8 <S2SV_ModEnd> * anal_size, <S2SV_ModStart> * anal_size, 8 <S2SV_ModEnd> * anal_size, <S2SV_ModStart> * anal_size, 8 <S2SV_ModEnd> * anal_size, <S2SV_ModStart> * anal_size, 8 <S2SV_ModEnd> * anal_size, <S2SV_ModStart> * anal_size, 8 <S2SV_ModEnd> * anal_size, <S2SV_ModStart> * anal_size, 8 <S2SV_ModEnd> * anal_size, 8 <S2SV_ModEnd> * anal_size, <S2SV_ModStart> * anal_size, 8 <S2SV_ModEnd> * anal_size, <S2SV_ModStart> * anal_size, 8 <S2SV_ModEnd> * anal",0
275,<S2SV_ModStart> -> dmin ; if (! ONIGENC_IS_MULTIBYTE ( reg -> enc ) ) { return - 1 ; } <S2SV_ModStart> ; while (! ONIGENC_IS_MULTIBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { return - 1 ; } else { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { return - 1 ; } } else { if (! ONIGENC_IS_MULTIBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { return - 1 ; } else { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { return - 1 ; } } else { if (! ONIGENC_IS_SINGLEBYTE ( reg ->,0
276,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_data <S2SV_ModEnd> * bfqd, <S2SV_ModStart> bfqd = bfqq <S2SV_ModEnd> -> bfqd ; <S2SV_ModStart> flags ) ; <S2SV_ModEnd> if ( bfqq <S2SV_ModStart> ; return ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
277,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
278,"<S2SV_ModStart> continue ; RING_FINAL_CHECK_FOR_REQUESTS <S2SV_ModEnd> ( & vif <S2SV_ModStart> ; if ( unlikely ( txreq. size > vif -> remaining_credit && tx_credit_exceeded ( vif, txreq. size ) ) { netbk_tx_err ( vif, ""txreq.size <S2SV_blank> exceeded"" ) ; continue ; } vif -> tx. req_cons = ++ idx ; memcpy ( & txreq, RING_GET_REQUEST ( & vif -> tx, idx ), sizeof ( txreq ) ) ; if ( txreq. size > vif -> remaining_credit && tx_credit_exceeded ( vif, txreq. size ) ) { netbk_tx_err ( vif, ""txreq.size <S2SV_blank> exceeded"" ) ; continue ; } vif -> tx. req_cons = ++ idx ; memcpy ( & txreq, RING_GET_REQUEST ( & vif -> tx, idx ), sizeof ( txreq ) ) ; if ( txreq. size > vif -> remaining_credit && tx_credit_exceeded ( vif, txreq. size ) ) { netbk_",0
279,<S2SV_ModStart> cb ) { <S2SV_ModEnd> struct xfrm_policy_walk *,0
280,<S2SV_ModStart> conn ) ; if ( h2o_timeout_is_linked ( & conn -> _read. timeout_entry ) ) { h2o_timeout_unlink ( & conn -> _read. timeout_entry ) ; do_emit_writereq ( conn ) ; },0
281,"<S2SV_ModStart> ; struct pending_tx_info * pending_tx_info = netbk -> pending_tx_info ; struct xenvif_tx_request * txp <S2SV_ModEnd> ; int nr_frags <S2SV_ModStart> -> status ; netbk -> pending_tx_info [ pending_idx ]. vif = vif ; netbk -> pending_ring [ index ] = pending_idx ; <S2SV_ModEnd> xenvif_put ( vif <S2SV_ModStart> XEN_NETIF_RSP_ERROR ) ; txp = & netbk -> pending_tx_info [ pending_idx ]. req ; make_tx_response ( vif, txp, XEN_NETIF_RSP_ERROR ) ; index = pending_index ( netbk -> pending_prod ++ ) ; netbk -> pending_ring [ index ] = pending_idx ; xenvif_put ( vif ) ; } start = ( frag_get_pending_idx ( & shinfo -> frags [ i ] ) == pending_idx ) ; for ( i = start ; i < nr_frags ; i ++ ) { int j, newerr ; pending_idx = frag_get_pending_idx ( & shinfo -> frags [ i",0
282,,1
283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( chroma_image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" <S2SV_ModStart> ) break ; status = SetImageExtent ( chroma_image, chroma_image -> columns, chroma_image -> rows, exception ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent""",0
284,"<S2SV_ModStart> ; if ( len < sizeof ( struct hv_kvp_msg ) ) { syslog ( LOG_ERR, ""len <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", len ) ; close ( fd ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ; if ( len < sizeof ( struct hv_kvp_msg ) ) { syslog ( LOG_ERR, ""len <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", len ) ; close ( fd ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> < 0 ) { syslog ( LOG_ERR, ""len <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", len ) ; close ( fd ) ; exit ( EXIT_FAILURE ) ; } if ( len < sizeof ( struct hv_kvp_msg ) ) { syslog ( LOG_ERR, ""len <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", len ) ; close ( fd ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> < 0 ) { syslog ( LOG_ERR, ""len <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", len ) ; close ( fd ) ; exit (",0
285,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
286,"<S2SV_ModStart> TRUE ) ; if ( client -> ipc == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> type"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> type"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; CRM_LOG_ASSERT ( type!= NULL ) ; if ( client -> diffs && safe_str_eq ( type, T_CIB_DIFF_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> replace && safe_str_eq ( type, T_CIB_REPLACE_CONFIRM ) ) { do_send = TRUE ; } else if ( client -> pre_notify && safe_str_eq ( type, T_CIB_",0
287,"<S2SV_ModStart> + x > diffBlock + diffBlockLength || extraPtr + y <S2SV_ModStart> NULL ; } if ( newpos + x > newDataLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } <S2SV_ModStart> + x > diffBlock + diffBlockLength || extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( newpos + x > newDataLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, extraPtr, y ) ;",0
288,"<S2SV_ModStart> ) ) { if ( fibh -> sbh ) fibh -> sbh = udf_tread_super ( dir -> i_sb, lfi ) ; if (! fibh -> ebh ) fibh -> sbh = udf_tread_super ( dir -> i_sb, lfi ) ; if (! fibh -> sbh ) fibh -> sbh = udf_tread_super ( dir -> i_sb, lfi ) ; if (! fibh -> sbh ) fibh -> sbh = udf_tread_super ( dir -> i_sb, lfi ) ; if (! fibh -> sbh ) fibh -> sbh = udf_tread_super ( dir -> i_sb, lfi ) ; if (! fibh -> sbh ) fibh -> sbh = udf_tread_super ( dir -> i_sb, lfi ) ; if (! fibh -> sbh ) fibh -> sbh = udf_tread_super ( dir -> i_sb, lfi ) ; if (! fibh -> sbh ) fibh",0
289,"<S2SV_ModStart> ( cmd == IP_VS_BASE_CTL || cmd == IP_VS_SO_GET_DAEMON <S2SV_ModEnd> ) { struct <S2SV_ModStart>. mcast_ifn, sizeof ( d [ 1 ]. mcast_ifn ) ) ; memset ( & d [ 2 ], 0, sizeof ( d [ 2 ]. mcast_ifn ) ) ; memset ( & d [ 3 ], 0, sizeof ( d [ 3 ]. mcast_ifn ) ) ; memset ( & d [ 4 ], 0, sizeof ( d [ 4 ]. mcast_ifn ) ) ; memset ( & d [ 5 ], 0, sizeof ( d [ 5 ]. mcast_ifn ) ) ; memset ( & d [ 3 ], 0, sizeof ( d [ 3 ]. mcast_ifn ) ) ; memset ( & d [ 4 ], 0, sizeof ( d [ 4 ]. mcast_ifn ) ) ; memset ( & d [ 5 ], 0, sizeof ( d [ 5 ]. mcast_ifn ) ) ; memset ( & d [ 6 ], 0, sizeof ( d [ 6 ]. m",0
290,"<S2SV_ModStart> pktopts ) ; rcu_read_lock ( ) ; <S2SV_ModStart>, fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
291,<S2SV_ModStart> hdr ; ssize_t <S2SV_ModEnd> result ; if,0
292,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> const char * <S2SV_ModStart> ; if (! fc_may_access ( fc, controller, path, NULL, O_RDWR ) ) { <S2SV_ModEnd> ret = - <S2SV_ModStart> - EACCES ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } ret = cgfs_create ( controller, cgroup, fc -> uid, fc -> gid ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup, fc -> uid, fc -> gid ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; <S2SV_ModEnd> free ( cgdir <S2SV_ModStart> ) ; return ret <S2SV_ModEnd> ; } <S2SV_null",0
293,<S2SV_ModStart> { disk -> queue = NULL ; continue ; } if (! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) if (! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ),0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
295,"<S2SV_ModStart> = MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number",0
296,<S2SV_ModStart> ) pktnum ; if ( avio_feof ( s -> pb ) || avio_feof ( s -> pb ) || avio_feof ( s -> pb ) || avio_feof ( s -> pb ) || avio_feof ( s -> pb ) || avio_feof ( s -> pb ) || avio_feof ( s -> pb ) ) { ret = AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR ( AVERROR (,0
297,<S2SV_ModStart> ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO,0
298,"<S2SV_ModStart> ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; install_keyword_root ( ""security_context"", & security_context_handler ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler ) ; # endif # ifdef _WITH_VRRP_ install_keyword ( ""security_context"", & security_context_handler ) ; # endif # ifdef _WITH_LVS_ install_keyword ( ""security_context"", & security_context_handler ) ; # endif # ifdef _WITH_LVS_ install_keyword ( ""security_context"", & security_context_handler ) ; # endif # ifdef _WITH_LVS_ install_keyword ( ""security_context"", & security_context_handler ) ; # endif",0
299,"<S2SV_ModStart> data ) { const vpx_codec_priv_enc_mr_cfg_t * enc_mr_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) data ; vpx_codec_err_t res = encoder_common_init ( ctx, enc_mr_cfg ) ; if ( res!= VPX_CODEC_ERR_OK ) { res = encoder_common_init ( ctx, enc_mr_cfg ) ; if ( res!= VPX_CODEC_ERR_OK ) { res = encoder_common_init ( ctx, enc_mr_cfg ) ; if ( res!= VPX_CODEC_ERR_OK ) { res = encoder_common_init ( ctx, res ) ; if ( res!= VPX_CODEC_ERR_OK ) { res = VPX_CODEC_ERR_INTERNAL ; res = encoder_common_init ( ctx, res ) ; if ( res!= VPX_CODEC_ERR_INTERNAL ) { res = encoder_common_init ( ctx, res ) ; if ( res!= VPX_CODEC_ERR_INTERNAL ) { res =",0
300,"<S2SV_ModStart> 0 ) { if ( strlen ( key ) + 2 > length ) { kfree ( tmpbuf ) ; return - 1 ; } <S2SV_ModStart> 0 ) { if ( strlen ( key ) + 2 > length ) { kfree ( tmpbuf ) ; return - 1 ; } <S2SV_ModStart> tmpbuf ) ; return - 1 ; } if ( strlen ( key ) + 2 > length ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + 2 ; if ( strlen ( value ) + 2 > length ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + 2 ; if ( strlen ( value ) + 2 > length ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + 2 ; if ( iscsi_check_accessed_state ( param, value ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + 2 ; if ( iscsi_check_accessed_state ( param, value ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; }",0
301,"<S2SV_ModStart> == ENOENT ) { struct stat st ; if ( stat ( t -> stamp_path, & st ) < 0 ) t -> last_trigger. realtime = timespec_sub ( st. st_atim, 0 ) ; else t -> last_trigger. realtime = timespec_sub ( st. st_atim <S2SV_ModEnd>, USEC_INFINITY, <S2SV_ModStart>, UID_INVALID, GID_INVALID, 0 ) ; else if ( errno == EPERM ) touch_file ( t -> stamp_path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, 0 ) ; else if ( errno == EPERM ) touch_file ( t -> stamp_path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, 0 ) ; else if ( errno == EPERM ) touch_file ( t -> stamp_path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, 0 ) ; else if ( errno == EPERM ) touch_file ( t -> stamp_path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, 0 ) ; }",0
302,"<S2SV_ModStart> = 0 ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> len ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> len ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box:",0
303,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
304,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> copylen ; bool <S2SV_ModStart> ; if ( q -> flags & IFF_VNET_HDR ) { vnet_hdr_len = q -> vnet_hdr_sz ; err = - EINVAL ; if ( len < vnet_hdr. hdr_len ) goto err ; err = - EINVAL ; if ( len < vnet_hdr. hdr_len ) goto err ; len -= vnet_hdr. hdr_len ; err = - EINVAL ; if ( len < vnet_hdr. hdr_len ) goto err ; if ( ( vnet_hdr. flags & VIRTIO_NET_HDR_F_NEEDS_CSUM ) && ( vnet_hdr. flags & VIRTIO_NET_HDR_F_NEEDS_CSUM ) && ( vnet_hdr. flags & VIRTIO_NET_HDR_F_NEEDS_CSUM ) && ( vnet_hdr. flags & VIRTIO_NET_HDR_F_NEEDS_CSUM ) && ( vnet_hdr. flags & VIRTIO_NET,0
305,"<S2SV_ModStart> nexthdr ) { struct ipv6_opt_hdr * exthdr = ( struct ipv6_opt_hdr * ) <S2SV_ModEnd> ( skb_network_header ( <S2SV_ModStart> ) { switch ( ipv6_optlen ( exthdr ) ) { case NEXTHDR_HOP : break ; case NEXTHDR_ROUTING : found_rhdr = 1 ; break ; case NEXTHDR_DEST : # if IS_ENABLED ( CONFIG_IPV6_MIP6 ) if ( ipv6_find_tlv ( skb, offset, IPV6_TLV_HAO ) >= 0 ) break ; # endif if ( found_rhdr ) { # if IS_ENABLED ( CONFIG_IPV6_MIP6 ) if ( ipv6_find_tlv ( skb, offset, IPV6_TLV_HAO ) >= 0 ) break ; # endif if ( IS_ENABLED ( CONFIG_IPV6_MIP6 ) if ( ipv6_find_tlv ( skb, offset, IPV6_TLV_HAO ) >= 0 ) break ; # endif <S2SV_ModStart> return offset ; } <S2SV_ModEnd> return offset ;",0
306,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
307,"<S2SV_ModStart> mbmi. mv. as_int ; mv_bias ( ref_frame_bias [ refframe ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi.",0
308,<S2SV_ModStart> ; if ( msg -> msg_namelen == 0 ) { msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; } else if ( msg -> msg_namelen > sizeof ( struct virtio_net_hdr ) ) { msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; } else if ( msg -> msg_namelen > sizeof ( struct virtio_net_hdr ) ) { msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof,0
309,"<S2SV_ModStart> return ; } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN || dj_report -> device_index > DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index",0
310,"<S2SV_ModStart> ) ) { pr_err ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> "" ""ACCEPT/DROP\\n"" ) ; return - EINVAL ; } <S2SV_ModEnd> newinfo -> counters",0
311,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
312,"<S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) <S2SV_ModEnd> asconf -> chunk_hdr <S2SV_ModStart> __u32 serial ; sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> skb -> data ; chunk_len = ntohs ( asconf -> chunk_hdr -> length ) - sizeof ( sctp_chunkhdr_t ) ; serial = ntohl ( hdr -> serial ) ; length = ntohs ( asconf_param -> p. length ) ; asconf_param = ( void * ) addip + length ; chunk_len -= length ; asconf_ack = sctp_make_asconf_ack ( asoc, addip, serial, chunk_len * 4 ) ; if (! asconf_ack ) goto done ; err_code = sctp_process_asconf_param ( asoc, asconf, addip ) ; if ( err_code",0
313,"<S2SV_ModStart> ; JAS_DBGLOG ( 100 <S2SV_ModEnd>, ( ""jas_realloc <S2SV_blank> called <S2SV_blank> with <S2SV_blank> %x,%zu\\n"" <S2SV_ModStart> size ) ) ; JAS_DBGLOG ( 100 <S2SV_ModEnd>, ( ""jas_realloc(%p, <S2SV_blank> %zu) <S2SV_blank> -> <S2SV_blank> %p\\n""",0
314,<S2SV_ModStart> exit ; } if ( unlikely ( m -> msg_name ) ) { m -> msg_name [ sizeof ( * m -> msg_name ) - 1 ] = 0 ; m -> msg_namelen = sizeof ( * m -> msg_name ) - 1 ; },0
315,<S2SV_ModStart> break ; # ifdef CONFIG_KVM_XICS case KVM_XICS_VERSION_1_0 : case KVM_XICS_VERSION_2_0 : case KVM_XICS_VERSION_3_0 : case KVM_XICS_VERSION_1_1 : case KVM_XICS_VERSION_2_1 : case KVM_XICS_VERSION_2_0 : case KVM_XICS_VERSION_3_0 : case KVM_XICS_VERSION_3_0 : case KVM_XICS_VERSION_1_0 : case KVM_XICS_VERSION_2_0 : case KVM_XICS_VERSION_3_0 : case KVM_XICS_VERSION_1_1 : case KVM_XICS_VERSION_2_1 : case KVM_XICS_VERSION_2_0 : case KVM_XICS_VERSION_3_0 : case KVM_XICS_VERSION_3_0 : case KVM_XICS_VERSION_2_0 : case KVM_XICS_VERSION_3_0 : case KVM_XICS_,0
316,<S2SV_ModStart> msicap ; pci_populate_msicap <S2SV_ModEnd> ( & msicap,0
317,"<S2SV_ModStart> response_done ; } if ( strlen ( key_name ) > 64 ) { pr_warn ( ""KVP: <S2SV_blank> Key <S2SV_blank> name <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> 64\\n"" ) ; return ; } <S2SV_ModStart> 1 ) ; if ( strlen ( value ) > 64 ) { pr_warn ( ""KVP: <S2SV_blank> Value <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> 64\\n"" ) ; return ; } <S2SV_ModStart> + 1 ) ; if ( strlen ( value ) > 64 ) { pr_warn ( ""KVP: <S2SV_blank> Value <S2SV_blank> length <S2SV_blank> exceeds64 <S2SV_blank> "" ) ; return ; } <S2SV_ModStart> valuelen ) { pr_warn ( ""KVP: <S2SV_blank> Value <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> 64\\n"" ) ; return ; } if ( strlen ( value ) > 64 ) { pr_warn ( ""KVP: <S2SV_blank> Value <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> 64\\n"" ) ; return ; } <S2SV_ModStart> + 1 ) ; if ( strlen ( value ) > 64 ) { pr_warn ( ""KVP: <S2SV_blank> Value <S2SV_blank> length <S2SV_blank> exceeds64 <S2SV_blank> "" ) ; return ; }",0
318,"<S2SV_ModStart> ; ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx ) ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx ) ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx ) ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx ) ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx ) ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx ) ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx ) ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx ) ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL )",0
319,<S2SV_ModStart> return ; } if ( img -> numcomps == 3 ) { img -> color_space = OPJ_CLRSPC_SRGB ; } else if ( ( img -> numcomps == 2 ) && ( img -> comps [ 0 ]. dx == 1 ) && ( img -> comps [ 1 ]. dx == 1 ) && ( img -> comps [ 2 ]. dx == 1 ) && ( img -> comps [ 0 ]. dy == 1 ) && ( img -> comps [ 2 ]. dy == 1 ) && ( img -> comps [ 0 ]. dx == 1 ) && ( img -> comps [ 1 ]. dx == 1 ) && ( img -> comps [ 2 ]. dx == 1 ) && ( img -> comps [ 0 ]. dy == 1 ) && ( img -> comps [ 1 ]. dy == 1 ) && ( img -> comps [ 2 ]. dy == 1 ) && ( img -> comps [ 0 ]. dy == 1 ) && ( img -> comps [ 2 ]. dy == 1 ) && ( img -> comps [ 0 ]. dx == 1 ) && ( img -> comps [ 1 ]. dy == 1 ) && ( img -> comps [ 2 ]. dy == 1 ) && ( img,0
320,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> size_t ctrls_size = <S2SV_ModStart> case _IOC_NONE : if ( cmd == VIDIOC_S_EXT_CTRLS || cmd == VIDIOC_G_EXT_CTRLS || cmd == VIDIOC_TRY_EXT_CTRLS ) { parg = NULL ; break ; } <S2SV_ModEnd> case _IOC_READ : <S2SV_ModStart> case _IOC_WRITE : if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { parg = sbuf ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out_ext_ctrl ; p -> error_idx = p -> count ; user_ptr = ( void __user * ) p -> controls ; if ( p -> count ) { ctrls_size = sizeof ( struct v4l2_ext_control ) * p -> count ; mbuf = kmalloc ( ctrls_size, GFP_KERNEL ) ; if ( NULL == mbuf ) goto out_ext_ctrl ; p -> controls = mbuf ; } err = - EFAULT ;",0
321,"<S2SV_ModStart> psubscribeCommand ) { addReplyError ( c, ""only <S2SV_blank> (P)SUBSCRIBE <S2SV_blank> / <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> QUIT <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" ) ; return REDIS_OK ; } if ( ( cmd -> flags & REDIS_CMD_DENYOOM ) && zmalloc_used_memory ( ) > server. maxmemory ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( ( cmd -> flags & REDIS_CMD_DENYOOM ) && zmalloc_used_memory ( ) > server. maxmemory ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( ( cmd -> flags & REDIS_CMD_DENYOOM ) && zmalloc_used_memory ( ) > server. maxmemory ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return RED",0
322,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( rtl8150_t <S2SV_ModStart> ) { return <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, RTL8150_REQ_SET_REGS, RTL8150_REQT_WRITE <S2SV_ModEnd>, indx, <S2SV_ModStart>, 500 ) ; } <S2SV_null> <S2SV_null>",0
323,<S2SV_ModStart> { case RESPONSE_RUN <S2SV_ModEnd> : { screen <S2SV_ModStart> uri ) ; <S2SV_ModEnd> break ; case,0
324,"<S2SV_ModStart> -> lsr_event ) { if (! edge_port -> open ) { dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 0, edge_port -> lsr_mask, * data ) ; } else { dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 0, edge_port -> lsr_mask, * data ) ; }",0
325,"<S2SV_ModStart> <S2SV_null> <S2SV_null> struct cifsSesInfo <S2SV_ModEnd> * cifs_find_smb_ses ( <S2SV_ModStart> ) ; if ( list_empty ( & server -> smb_ses_list ) ) { write_unlock ( & cifs_tcp_ses_lock ) ; return NULL ; } <S2SV_ModEnd> ses = list_entry <S2SV_ModStart> smb_ses_list ) ; if ( strncmp ( ses -> userName, username, MAX_USERNAME_SIZE ) ) { write_unlock ( & cifs_tcp_ses_lock ) ; return NULL ; } <S2SV_ModEnd> ++ ses ->",0
326,"<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) { ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; return ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; } if ( ( cfg -> g_w > ctx -> cfg. g_w ) ) { ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; return ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; } # endif if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) { ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; return ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; return ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initial",0
327,"<S2SV_ModStart>'<S2SV_blank>') { ptr = strchr ( input,'<S2SV_blank>') ; if ( ptr2 ) { * ptr2 = 0 ; off = r_num_math ( core -> num, ptr2 + 1 ) ; } <S2SV_ModStart> } else { ptr = strchr ( input,'<S2SV_blank>') ; if ( ptr2 ) { * ptr2 = 0 ; off = r_num_math ( core -> num, ptr2 + 1 ) ; } if (! r_fs_mount ( core -> fs, ptr, input, off ) ) { eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else if (! r_fs_mount ( core -> fs, ptr, input, off ) ) { eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else if (! r_fs_mount ( core -> fs, ptr, input, off ) ) { eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else if (! r_fs_mount ( core -> fs, ptr, input, off ) ) { eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ;",0
328,"<S2SV_ModStart> ( vm_flags & VM_NORESERVE <S2SV_ModEnd> ) return 0 <S2SV_ModStart> return chg ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; else { struct resv_map * resv_map = resv_map_alloc ( ) ; if (! resv_map ) set_vma_resv_map ( vma, resv_map ) ; set_vma_resv_flags ( vma, HPAGE_RESV_OWNER ) ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; else { struct resv_map * resv_map = resv_map_alloc ( ) ; set_vma_resv_flags ( vma",0
329,<S2SV_ModStart> new ) { const struct key * old_keyring = new -> thread_keyring ; const struct key * old_keyring = NULL ; if ( old_keyring ) old_keyring = key_get ( old_keyring ) ; if (! old_keyring ) key_put ( old_keyring ) ;,0
330,"<S2SV_ModStart> ; static size_t scanned ; static size_t readnbd ; if ( readnbd > ( size_t ) 0U ) { readnbd -= scanned ; memmove ( cmd, cmd + scanned, readnbd ) ; scanned = ( size_t ) 0U ; readnbd = ( size_t ) 0U ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { while ( ( readnb = read ( clientfd, cmd + readnbd, cmdsize - readnbd ) ) < ( ssize_t ) 0 && errno == EINTR ) { while ( ( readnb = read ( clientfd, cmd + readnbd, cmdsize - readnbd ) ) < ( ssize_t ) 0 && errno == EINTR ) ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { while ( ( readnb = read ( clientfd, cmd + readnbd, cmdsize - readnbd ) ) < ( ssize_t ) 0 && errno == EINTR ) { while ( readnb <= ( ssize_t ) 0 && errno == E",0
331,"<S2SV_ModStart> orig ) ; if ( mrb_iv_get ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), & buf ) ) { mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( m",0
332,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
333,"<S2SV_ModStart> cpi ) { vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi,",0
334,"<S2SV_ModStart> return res ; memset ( param, 0, sizeof ( * param ) ) ;",0
335,"<S2SV_ModStart> int rc ; if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) return X86EMUL_CONTINUE ; rc = assign_eip_far ( ctxt, ctxt -> src. val, ctxt -> src. len, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE <S2SV_ModEnd> ) return X86EMUL_CONTINUE <S2SV_ModStart> sel, VCPU_SREG_CS <S2SV_ModEnd> ) ) return <S2SV_ModStart> return X86EMUL_CONTINUE ; rc = assign_eip_far ( ctxt, ctxt -> src. val, ctxt -> src. len, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE <S2SV_ModEnd> ) return X86EMUL_CONTINUE <S2SV_ModStart> return X86EMUL_CONTINUE ; memcpy ( & ctxt -> _eip, ctxt -> src. val, ctxt -> src. len, VCPU_SREG_CS ) ) return X86EMUL_CONTINUE ; rc = assign_eip_far ( ctxt, ctxt -> src. val, ctxt -> src. len, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE",0
336,"<S2SV_ModStart> ; if ( j < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", j ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( j < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", j ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( j < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", j ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( j < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", j ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( j < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", j ) ; return AVER",0
337,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Extension <S2SV_blank> not <S2SV_blank> supported: <S2SV_blank> %s\\n"", filename ) ; return ; } if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Extension <S2SV_blank> not <S2SV_blank> supported: <S2SV_blank> %s\\n"", filename ) ; return ; } # ifdef COM_CompareExtension ( filename, "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Extension <S2SV_blank> not <S2SV_blank> supported: <S2SV_blank> %s\\n"", filename ) ; return ; } if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Extension <S2SV_blank> not <S2SV_blank> supported: <S2SV_blank> %s\\n"", filename ) ; return ; } # ifdef COM_CompareExtension ( filename, "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Extension <S2SV_blank>",0
338,"<S2SV_ModStart> } struct reloc_struct_t * got_table ; got_table = calloc ( n_got + 1, sizeof ( struct reloc_struct_t ) ) ; if (! got_table ) { r_list_free ( list ) ; return NULL ; } <S2SV_ModEnd> obj -> n_got <S2SV_ModStart> n_reloc + 1, sizeof ( struct reloc_struct_t ) ) ; if (! reloc_table ) { r_list_free ( list ) ; return NULL ; } <S2SV_ModEnd> reloc_table = calloc <S2SV_ModStart> reloc_table ) { ut32 got_entry ; if ( obj -> hdr -> data_start + offset + 4 > obj -> size || obj -> hdr -> data_start + offset + 4 > obj -> size ) { break ; } len = r_buf_read_at ( obj -> b, obj -> hdr -> data_start + offset, ( ut8 * ) & got_entry, sizeof ( ut32 ) ) ; if (! VALID_GOT_ENTRY ( got_entry ) || len!= sizeof ( ut32 ) ) { break ; } got_table [ i ]. addr_to_patch = got_entry ; got_",0
339,"<S2SV_ModStart> -> si_code >= <S2SV_ModEnd> 0 ) return <S2SV_ModStart> return - EPERM ; if ( info -> si_signo!= sig ) { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } <S2SV_ModEnd> info -> si_signo",0
340,"<S2SV_ModStart> tw ; * p_tx0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x0 ) ; * p_tx1 = opj_int_min ( ( OPJ_INT32 ) ( p_cp -> tx0 + ( p + 1 ) * p_cp -> tdx ) ; * p_ty0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y1 ) ; * p_ty1 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y1 ) ; * p_max_prec = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image ->",0
341,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * create_output_name <S2SV_ModStart> dir ) ; if (! name ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } <S2SV_ModStart> sep ) fname ++ ; p = & name [ strlen ( ( char * ) name ) ] ; if ( fname >= fe ) { free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0xC0 ) && ( c < 0xE0 ) ) { x = ( c & 0xC0 ) << 12 ; x |= ( * fname ++ & 0x3F ; } else { x = ( c & 0xF0 ) << 12 ; x |= ( * fname ++ & 0x3F ; } else if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ; } else if ( ( c >= 0xF0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F",0
342,"<S2SV_ModStart> php_unserialize_data_t var_hash ; zend_hash_table * class_hash = NULL ; if ( Z_TYPE_P ( options ) == IS_ARRAY ) { class_hash = zend_hash_str_find ( Z_ARRVAL_P ( options ), ""allowed_classes"", sizeof ( ""allowed_classes"" ) - 1 ) ; } if ( class_hash && ( Z_TYPE_P ( classes ) == IS_ARRAY ) ) { class_hash = zend_hash_str_find ( Z_ARRVAL_P ( classes ), ""allowed_classes"", sizeof ( ""allowed_classes"" ) - 1 ) ; } if ( class_hash && ( Z_TYPE_P ( classes ) == IS_ARRAY ||! zend_is_true ( classes ) ) ) { class_hash = zend_hash_str_find ( Z_ARRVAL_P ( classes ), ""allowed_classes"", sizeof ( ""allowed_classes"" ) - 1 ) ; } if ( class_hash && ( Z_TYPE_P ( classes ) == IS_ARRAY ) ) { ZEND_HASH_FOREACH_END ( )",0
343,"<S2SV_ModStart> ; kfree ( tu -> tqueue ) ; tu -> tqueue = NULL ; if ( tu -> tread ) { tu -> tqueue = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_tread ), GFP_KERNEL ) ; if ( tu -> queue == NULL ) { snd_timer_close ( tu -> timeri ) ; tu -> timeri = NULL ; } else { tu -> queue = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_read ), GFP_KERNEL ) ; if ( tu -> queue == NULL ) { snd_timer_close ( tu -> timeri ) ; tu -> timeri = NULL ; } else { tu -> queue = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_read ), GFP_KERNEL ) ; if ( tu -> queue == NULL ) { snd_timer_close ( tu -> timeri ) ; tu -> timeri = NULL ; } else { tu -> queue = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_read ), GFP_KERNEL ) ; if ( tu -> queue == NULL ) {",0
344,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> movie_identifier == NULL ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_TEXT ( GF_LOG_ERROR, GF_LOG_TEXT ( GF_LOG_ERROR, GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_ERROR, GF_LOG_TEXT ( GF_LOG_ERROR, GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_ERROR, GF_LOG_TEXT ( GF_LOG_ERROR, GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_TEXT ( GF",0
345,<S2SV_ModStart> alg_priv ) ; else if ( ctx -> iface -> enc. get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> iface -> enc. get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> iface -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> iface -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> iface -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> iface -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> iface -> enc. get_glob_hdrs ) ) ctx -> err = VP,0
346,<S2SV_ModStart> cmdline_syslog_name ) ; if ( cmdline_syslog_name == NULL || cmdline_syslog_name [ namelen - 1 ] == '\\0' || cmdline_syslog_name [ namelen - 1 ] == '\\0' || cmdline_syslog_name [ namelen - 1 ] == '\\0' || cmdline_syslog_name [ namelen - 1 ] == '\\0' || cmdline_syslog_name [ namelen - 1 ] == '\\0' || cmdline_syslog_name [ namelen - 1 ] == '\\0' || cmdline_syslog_name [ namelen - 1 ] == '\\0' || cmdline_syslog_name [ namelen - 1 ] == '\\0' || cmdline_syslog_name [ namelen - 1 ] == '\\0' || cmdline_syslog_name [ namelen - 1 ] == '\\0' || cmdline_syslog_name [ namelen - 1 ] == '\\0' || cmdline_syslog_name [ namelen - 1 ] == '\\0' || cmdline_syslog_name [ namelen - 1 ] == '\\0',0
347,"<S2SV_ModStart> += 6 ; if ( strlen ( p ) > 0 ) { s -> seekable = strtol ( p + 1, NULL, 10 ) ; s -> filesize = strtol ( slash + 1, NULL, 10 ) ; } else if ( strlen ( p ) > 0 ) { s -> seekable = strtol ( p + 1, NULL, 10 ) ; s -> filesize = strtol ( p + 1, NULL, 10 ) ; } if ( s -> seekable == - 1 && (! s -> is_akamai || s -> filesize!= 2147483647 ) ) h -> is_streamed = 0 ; } else if ( strlen ( p ) > 0 ) { s -> seekable = strtol ( p + 1, NULL, 10 ) ; } else if ( strlen ( p ) > 0 ) { s -> seekable = strtol ( p + 1, NULL, 10 ) ; s -> filesize = strtol ( p + 1, NULL, 10 ) ; } if ( s -> seekable == - 1 && (! s -> is_akamai || s -> filesize!= 2147483647 ) h -> is_streamed <S2SV_ModEnd> = 0 ;",0
348,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart>, upb ; size_t <S2SV_ModEnd> offset, upb <S2SV_ModStart> maxw = ( size_t ) img -> comps [ 0 ]. w ; size_t maxh = ( size_t ) img -> comps [ 0 ]. h ; max = maxw * maxh ; y = img -> comps [ 0 ]. data ; cb = img -> comps [ 1 ]. data ; cr = img -> comps [ 2 ]. data ; d0 = r = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; d1 = g = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; d2 = b = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; if ( r == NULL || g == NULL || b == NULL ) goto fails ; for ( i = 0U ; i < maxh ; ++ i ) { for ( j = 0U ; j < maxw ; ++ j ) { sycc_to_rgb ( offset, upb, * y, * cb, * cr, r, g,",0
349,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> == mode ) return ; if ( ( fmode & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( ( fmode & FMODE_WRITE )!= ( fmode & FMODE_WRITE ) ) list_move ( & state -> open_states, & state -> owner -> so_states ) ; else list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } else { if ( ( fmode & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( fmode & FMODE_WRITE ) list_move ( & state -> open_states, & state -> owner -> so_states ) ; else list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } state -> state = mode ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
350,"<S2SV_ModStart> = sshpkt_ptr ( kex, & dlen ) ; if ( ( r = sshbuf_put ( kex -> peer, ptr, dlen ) )!= 0 ) return r ; for ( i = 0 ; i < KEX_COOKIE_LEN ; i ++ ) if ( ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; for ( i = 0 ; i < PROPOSAL_MAX ; i ++ ) if ( ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; for ( i = 0 ; i < PROPOSAL_MAX ; i ++ ) if ( ( r = sshpkt_get_u8",0
351,"<S2SV_ModStart> ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
352,"<S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImage",0
353,"<S2SV_ModStart> = 0 ; if ( parse_cmdline_cmp ( argc, argv, & inParam ) == 1 ) { compare_dump_files_help_display ( ) ; goto cleanup ; } printf ( ""******Parameters********* <S2SV_blank> \\n"" ) ; printf ( "" <S2SV_blank> base_filename <S2SV_blank> = <S2SV_blank> %s\\n"" "" <S2SV_blank> test_filename <S2SV_blank> = <S2SV_blank> %s\\n"" "" <S2SV_blank> base_filename <S2SV_blank> = <S2SV_blank> %s\\n"" "" <S2SV_blank> test_filename <S2SV_blank> = <S2SV_blank> %s\\n"", inParam. base_filename, inParam. test_filename ) ; printf ( ""************************* <S2SV_blank> \\n"" ) ; printf ( ""Try <S2SV_blank> to <S2SV_blank> open: <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> reading <S2SV_blank>... <S2SV_blank> "", inParam. base_filename ) ; if ( ( fbase = fopen ( inParam. base_filename, ""rb"" ) ) == NULL ) { goto cleanup ; } printf ( ""Ok.\\n"" ) ; while ( fgets ( lbase, sizeof ( lbase ), fbase ) && fgets ( ltest, sizeof ( ltest ), ftest ) ) { int nbase = sscanf ( lbase, ""%255[^\\r\\n",0
354,"<S2SV_ModStart> intf ) { struct cdc_ncm_data * data <S2SV_ModEnd> ; int ret <S2SV_ModStart> ; ret = <S2SV_ModEnd> cdc_ncm_bind_common ( dev <S2SV_ModStart>, intf, CDC_NCM_COMM_ALTSETTING_NCM, data ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> cdc_ncm_bind_common ( dev <S2SV_ModStart>, intf, CDC_NCM_DATA_ALTSETTING_NCM, data <S2SV_ModEnd> ) ; usbnet_link_change",0
355,"<S2SV_ModStart> 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; }",0
356,"<S2SV_ModStart> ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( int ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( int ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ), ( int ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( int ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ), ( int ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ;",0
357,"<S2SV_ModStart> EINVAL ; for ( h = NF_INET_NUMHOOKS ; h < NF_INET_NUMHOOKS ; h ++ ) { if ( ( unsigned char * ) e - base > sizeof ( struct ip6t_entry_target ) ) { duprintf ( ""Bad <S2SV_blank> offset <S2SV_blank> %p\\n"", e ) ; return - EINVAL ; } if ( ( unsigned char * ) e - base > sizeof ( struct ip6t_entry_target ) ) { duprintf ( ""Bad <S2SV_blank> offset <S2SV_blank> %p\\n"", e ) ; return - EINVAL ; } if ( ( unsigned char * ) e - base > sizeof ( struct ip6t_entry_target ) ) { duprintf ( ""Bad <S2SV_blank> offset <S2SV_blank> %p\\n"", e ) ; return - EINVAL ; } if ( ( unsigned char * ) e - base > sizeof ( struct ip6t_entry_target ) ) { duprintf ( ""Bad <S2SV_blank> offset <S2SV_blank> %p\\n"", e ) ; return - EINVAL ; } if ( ( unsigned char * ) e - base > sizeof ( struct ip6t_entry_target ) )",0
358,"<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; }",0
359,"<S2SV_ModStart> 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; }",0
360,<S2SV_ModStart> q ) { <S2SV_ModEnd> snd_seq_timer_stop ( q <S2SV_ModStart> timer ) ; snd_use_lock_sync ( & q -> use_lock ) ; snd_seq_prioq_delete ( & q -> tickq ) ; snd_seq_prioq_delete ( & q -> timeq ) ; snd_seq_timer_delete ( & q -> timer ) ;,0
361,"<S2SV_ModStart> ; u64 start = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; unsigned int start_offset = ( offset & ~ PAGE_CACHE_MASK ) <S2SV_ModEnd> >> PAGE_CACHE_SHIFT ; <S2SV_ModStart> FALLOC_FL_KEEP_SIZE ) ) { struct gfs2_dinode * ip = GFS2_I ( inode ) ; pgoff_t curr ; struct page * page ; unsigned int from, to ; if ( curr == end ) to = end_offset ; error = write_empty_blocks ( page, from, to, mode ) ; if (! error && offset + to > inode -> i_size && <S2SV_ModEnd>! ( mode <S2SV_ModStart> FALLOC_FL_KEEP_SIZE ) ) { i_size_write ( inode, offset + to ) ; } unlock_page ( page ) ; page_cache_release ( page ) ; if ( error ) goto out ; curr ++ ; offset += PAGE_CACHE_SIZE ; from = 0 ; } <S2SV_ModEnd> mark_inode_dirty ( inode <S2SV_ModStart> out : return error <S2SV_ModEnd> ; } <S2SV_null>",0
362,"<S2SV_ModStart> b ) ; if (! class ) return ( NULL ) ; <S2SV_ModStart> ( load ) ||! vips_image_pio_input <S2SV_ModEnd> ( load -> <S2SV_ModStart> out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; vips_image_pipelinev ( load -> out, load -> out -> dhint, load -> real, NULL ) ; } else { g_object_set_qdata ( G_OBJECT ( load -> real ), vips__foreign_load_operation, load ) ; if ( class -> load ( load ) ||! vips_image_pio_input ( load -> real ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; g_object_set_qdata ( G_OBJECT ( load -> real ), vips__foreign_",0
363,"<S2SV_ModStart> { const char * name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; } else if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; } else { puts ( ""+ <S2SV_blank> "" ) ; } } if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; }",0
364,"<S2SV_ModStart> & XFS_ATTR_LOCAL ) { xfs_attr_leaf_name_local_t * name_loc ; name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; if (! ( name_loc -> flags & XFS_ATTR_LOCAL ) ) { xfs_attr_leaf_name_local_t * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; } } else if (! ( name_loc -> flags & XFS_ATTR_INCOMPLETE ) ) { xfs_attr_leaf_name_local_t * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; } if (! ( name_loc -> flags & XFS_ATTR_LOCAL ) ) { xfs_attr_leaf_name_local_t * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; } else if (! ( name_loc -> flags & XFS_ATTR_LOCAL ) { xfs_attr_leaf_name_local_t * name_loc = xfs_attr3",0
365,"<S2SV_ModStart> ; if ( kfifo_alloc ( & state -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL ) ) { kfree ( state ) ; return - ENOMEM ; } state -> dev = dev ; sd = & state -> sd ; v4l2_subdev_init ( sd, & cx23888_ir_controller_ops ) ; v4l2_set_subdevdata ( sd, state ) ; snprintf ( sd -> name, sizeof ( sd -> name ), ""%s/888-ir"", dev -> name ) ; sd -> grp_id = CX23885_HW_888_IR ; ret = cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ;",0
366,<S2SV_ModStart> service_name_tlv_length ) ; if (! service_name_tlv ) { err = - EINVAL ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if (! rw_tlv ) { err = - EINVAL ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if (! service_name_tlv ) { err = - EINVAL ; goto error_tlv ; },0
367,"<S2SV_ModStart> ssh * ssh = active_state <S2SV_ModEnd> ; struct monitor <S2SV_ModStart> 1 ) ; mon -> m_fds = xcalloc ( 1, sizeof ( * mon ) ) ; <S2SV_ModStart>. compression ) { mon -> m_fds = xcalloc ( 1, sizeof ( * mon ) ) ; monitor_openfds ( mon, 1 ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( mon -> m_zlib, 20 * MM_MEMSIZE ) ; ssh_packet_set_compress_hooks ( ssh, mon -> m_fds, ( ssh_packet_compress_alloc_func * ) mm_zalloc, ( ssh_packet_compress_free_func * ) mm_zfree ) ; }",0
368,"<S2SV_ModStart> iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> cfg, vpx_codec_flags_t <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_",0
369,"<S2SV_ModStart> * chan ; jas_uint16 type ; jas_uint16 assoc ; jas_uint16 numchans ; if (! jas_getuint16 ( in, & type ) ) { return - 1 ; } numchans = jp2_getuint16 ( in, & assoc ) ; if (! numchans ) { return - 1 ; } if (! ( ents = jas_alloc2 ( cdef -> numchans, sizeof ( jp2_cdefent_t ) ) ) ) { return - 1 ; } for ( channo = 0 ; channo < numchans ; ++ channo ) { chan = & ents [ channo ] ; if (! jas_alloc2 ( numchans, sizeof ( jp2_cdefchan_t ) ) ) { return - 1 ; } if (! ( ents = jas_alloc2 ( ents -> numchans, sizeof ( jp2_cdefent_t ) ) ) ) { return - 1 ; } for ( channo = 0 ; channo < numchans ; ++ channo ) { chan = & ents [ channo ] ; if (! jas",0
370,<S2SV_ModStart> value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
371,"<S2SV_ModStart> ; } ipc = rcu_dereference_protected ( net -> ipv4. icmp_cookie, sock_owned_by_user ( sk ) ) ; if ( ipc == NULL ) { kfree_skb ( skb_in ) ; kfree_skb ( skb_in ) ; kfree_rcu ( ipc, rcu_dereference ( net -> ipv4. icmp_cookie ) ; return ; } <S2SV_ModEnd> ipc = ipc <S2SV_ModStart> ; ipc = rcu_dereference_protected ( net -> ipv4. icmp_cookie, sock_owned_by_user ( sk ) ) ; if ( ipc == NULL ) { kfree_skb ( sk ) ; kfree_skb ( skb_in ) ; kfree_rcu ( ipc, rcu_dereference ( net -> ipv4. icmp_cookie ) ) ; return ; }",0
372,"<S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + 2 ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ; break ; default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; return len ;",0
373,<S2SV_ModStart> = 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
374,<S2SV_ModStart> private ) { <S2SV_ModEnd> crypto_free_skcipher ( private,0
375,"<S2SV_ModStart> bprm ) { <S2SV_ModEnd> umode_t mode = <S2SV_ModStart> int retval ; bprm -> cred -> euid = current_euid ( ) ; bprm -> cred -> egid = current_egid ( ) ; if (! ( bprm -> file -> f_path. mnt -> mnt_flags & MNT_NOSUID ) &&! task_no_new_privs ( current ) && kuid_has_mapping ( bprm -> cred -> user_ns, inode -> i_uid ) && kgid_has_mapping ( bprm -> cred -> user_ns, inode -> i_gid ) ) { if ( ( mode & ( S_ISUID | S_IXGRP ) ) == ( S_ISUID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_ON_SETID ; bprm -> cred -> euid = inode -> i_uid ; } if ( ( mode & ( S_ISGID | S_IXGRP ) ) == ( S_ISGID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_",0
376,<S2SV_ModStart> = nlogs ; if ( unlikely ( headcount >= UIO_MAXIOV ) ) { r = - ENOBUFS ; goto err ; },0
377,<S2SV_ModStart> { dlen -= 3 <S2SV_ModEnd> ; if (,0
378,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
379,<S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VP,0
380,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
381,"<S2SV_ModStart> skb_is_nonlinear ( skb ) ) { if ( skb -> len < sizeof ( struct nlattr ) ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> skb <S2SV_blank> length\\n"", __func__ ) ; return 0 ; } if ( skb_is_nonlinear ( skb ) ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> skb <S2SV_blank> length\\n"", __func__ ) ; return 0 ; } if ( skb_is_nonlinear ( skb ) ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> skb <S2SV_blank> length\\n"", __func__ ) ; return 0 ; } <S2SV_ModStart> skb_is_nonlinear ( skb ) ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> skb <S2SV_blank> length\\n"", __func__ ) ; return 0 ; } if ( skb_is_nonlinear ( skb ) ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> skb <S2SV_blank> length\\n"", __func__ ) ; return 0 ; }",0
382,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
383,"<S2SV_ModStart> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( gre_flag_values, ""none"", flags ) ) ; bp += 2 ; len -= 2 ; if ( ( flags & GRE_CP ) | ( flags & GRE_RP ) ) { ND_PRINT ( ( ndo, "", <S2SV_blank> sum <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> off <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; if ( ( flags & GRE_CP ) | ( flags & GRE_KP ) ) { ND_PRINT ( ( ndo, "", <S2SV_blank> key=0x%x"", EXTRACT_32BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> key=0x%x"", EXTRACT_32",0
384,"<S2SV_ModStart> < 0 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> reading <S2SV_blank> contigTilesIntoBuffer"" ) ; exit ( - 1 ) ; } <S2SV_ModStart> < 0 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> reading <S2SV_blank> contigTilesIntoBuffer"" ) ; exit ( - 1 ) ; } <S2SV_ModStart> < 0 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> reading <S2SV_blank> contigTilesIntoBuffer"" ) ; exit ( - 1 ) ; } <S2SV_ModStart> < 0 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> reading <S2SV_blank> contigTilesIntoBuffer"" ) ; exit ( - 1 ) ; } <S2SV_ModStart> < 0 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> reading <S2SV_blank> contigTilesIntoBuffer"" ) ; exit ( - 1 ) ; } <S2SV_ModStart> < 0 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> reading <S2SV_blank> contigTilesIntoBuffer"" ) ; exit ( - 1 ) ; } <S2SV_ModStart> < 0 ) { TIFFError (",0
385,<S2SV_ModStart> } # if defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined (,0
386,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int modify_bar_registration ( <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; return - ENODEV <S2SV_ModEnd> ; } switch <S2SV_ModStart> break ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
387,<S2SV_ModStart> item ) ; struct o2net_cluster * cluster <S2SV_ModEnd> = to_o2net_cluster_from_node ( <S2SV_ModStart> return - EBUSY <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> tmp == cluster -> cl_has_local && cluster -> cl_local_node == node -> nd_num ) { ret = o2net_start_listening ( node ) ; if ( ret ) { o2net_stop_listening ( node ) ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; },0
388,"<S2SV_ModStart> ; if ( fscanf ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"", & n, typestr )!= 2 ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""float"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> float <S2SV_blank> file"", procName, NULL ) ; if ( ( pta = ptaCreate ( n ) ) == NULL ) return ( PTA * ) ERROR_PTR ( ""pta <S2SV_blank> not <S2SV_blank> made"", procName, NULL ) ; if ( ( pta = ptaCreate ( n ) ) == NULL ) return ( PTA * ) ERROR_PTR ( ""pta <S2SV_blank> not <S2SV_blank> made"", procName, NULL ) ; if ( ( pta = ptaCreate ( n ) ) == NULL ) return ( PTA * ) ERROR_PTR ( ""pta <S2SV_blank> not <S2SV_blank> made"", procName, NULL ) ; if ( ( pta = ptaCreate ( n ) ) ==",0
389,<S2SV_ModStart> case 0x0a : case 0x0b : case 0x0c : case 0x0f : <S2SV_ModStart> case 0x91 : case 0x91 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case,0
390,"<S2SV_ModStart> = transport -> transport <S2SV_ModEnd> ; bh_lock_sock ( <S2SV_ModStart>. sk ) ; if ( sock_owned_by_user ( asoc -> base. sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> T3_rtx_timer, jiffies + ( HZ / 20 ) ) ) sctp_transport_put ( transport ) ; goto out_unlock ; } <S2SV_ModEnd> error = sctp_do_sm <S2SV_ModStart> SCTP_EVENT_T_TIMEOUT, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_T3_RTX ), asoc -> state, asoc -> ep, asoc, transport, GFP_ATOMIC ) ; if ( error ) asoc -> base. sk -> sk_err = - error ; <S2SV_ModEnd> out_unlock : bh_unlock_sock <S2SV_ModStart> sk ) ; sctp_transport_put ( transport ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
391,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
392,"<S2SV_ModStart> E_NOTHANDLED ; fd = open ( EF_GBL_OPTIONS -> output_file, O_CREAT | O_RDWR | O_TRUNC | O_BINARY, 0644 ) ; ON_ERROR ( fd, - 1, ""Can\'t <S2SV_blank> create <S2SV_blank> file <S2SV_blank> %s"", EF_GBL_OPTIONS -> output_file ) ;",0
393,"<S2SV_ModStart> trunc ; ND_TCHECK_32BITS ( lshp -> ls_seq ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), lshp -> ls_seq, lshp -> ls_age, lshp -> ls_length ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), lshp -> ls_age, lshp -> ls_length ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo,",0
394,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
395,"<S2SV_ModStart> ; if (! ND_TTEST2 ( * ( p + offset ), elementlen ) ) return 0 ; memcpy ( & rates. rates, p + offset, rates. rates ) ; if (! ND_TTEST2 ( * ( p + offset ), elementlen ) ) return 0 ; memcpy ( & ds. rates, p + offset, rates. rates ) ; if (! ND_TTEST2 ( * ( p + offset ), elementlen ) ) return 0 ; memcpy ( & ds. rates, p + offset, rates. rates ) ; if (! ND_TTEST2 ( * ( p + offset ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), elementlen ) ) return 0 ; memcpy ( & cf. rates, p + offset, rates. rates ) ; if (! ND_TTEST2 ( * ( p + offset ), elementlen ) ) return 0 ; memcpy ( & cf. rates, p + offset, rates. rates ) ; if (! ND_TTEST2 ( * ( p + offset ), element",0
396,<S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf ) ; opipe -> nrbufs ++ ; ibuf -> offset += obuf -> len ; obuf -> len = len ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf ) ; opipe -> nrbufs ++ ; ibuf -> offset += obuf -> len ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; } else if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GI,0
397,"<S2SV_ModStart> ) ; r_buf_set_bytes <S2SV_ModEnd> ( tbuf,",0
398,"<S2SV_ModStart> long err ; <S2SV_ModEnd> if (! <S2SV_ModStart> = 0 ; <S2SV_ModEnd> set_fs ( KERNEL_DS <S2SV_ModStart> = 0 ; <S2SV_ModEnd> err |= __put_user <S2SV_ModStart> 0 ; err |= __put_user ( r. ru_utime. tv_sec, & ur -> ru_utime. tv_sec ) ; err |= __put_user ( r. ru_utime. tv_usec, & ur -> ru_utime. tv_usec ) ; err |= __put_user ( r. ru_stime. tv_sec, & ur -> ru_stime. tv_sec ) ; err |= __put_user ( r. ru_maxrss, & ur -> ru_maxrss ) ; err |= __put_user ( r. ru_ixrss, & ur -> ru_ixrss ) ; err |= __put_user ( r. ru_idrss, & ur -> ru_idrss ) ; err |= __put_user ( r. ru_isrss, & ur -> ru_isrss ) ; err |= __put_user ( r. ru_minflt, & ur -> ru_minflt ) ; err |= __put_user (",0
399,"<S2SV_ModStart> NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_RW, ""proc"", """,0
400,"<S2SV_ModStart> ; } else if ( addrinsubnet ( & md -> sender, & c -> spd. that. client, & c -> spd. that. client ) ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" ""but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ) ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" ""but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), ( ntohs ( portof ( & md -> iface -> ip_addr ) ) ) ; } else { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" ""but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has",0
401,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> { nsc_encode_argb_to_aycocg ( <S2SV_ModEnd> context, bmpdata <S2SV_ModStart> { nsc_encode_subsampling ( <S2SV_ModEnd> context ) ;",0
402,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
403,<S2SV_ModStart> { if ( g_xgmac_stats_string [ sizeof ( g_xgmac_stats_string ) - 1 ] == '\\0' ) return ARRAY_SIZE ( g_xgmac_stats_string ) - 1 ; if ( g_xgmac_stats_string [ sizeof ( g_xgmac_stats_string ) - 1 ] == '\\0' ) return ARRAY_SIZE ( g_xgmac_stats_string ) - 1 ; if ( g_xgmac_stats_string [ sizeof ( g_xgmac_stats_string ) - 1 ] == '\\0' ) return ARRAY_SIZE ( g_xgmac_stats_string ) - 1 ; if ( g_xgmac_stats_string [ sizeof ( g_xgmac_stats_string ) - 1 ] == '\\0' ) return ARRAY_SIZE ( g_xgmac_stats_string ) - 1 ; if ( g_xgmac_stats_string [ sizeof ( g_xgmac_stats_string ) - 1 ] == '\\0' ) return ARRAY_SIZE ( g_xgmac_stats_string ) - 1 ;,0
404,<S2SV_ModStart> == 1 ) { size_t columns = GetPSDPacketSize ( image ) ; return ( <S2SV_ModEnd> columns + 7 <S2SV_ModStart> / 8 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
405,"<S2SV_ModStart> fd = open ( dev_path, O_RDWR | O_CLOEXEC ) ; if ( p_dev -> fd < 0 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, p_dev -> fd ) ; p_dev -> fd = - 1 ; } <S2SV_ModStart> O_CLOEXEC ) ; if ( p_dev -> fd == - 1 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, p_dev -> fd ) ; p_dev -> fd = - 1 ; } else if ( p_dev -> fd == - 1 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, p_dev -> fd ) ; if ( p_dev -> fd == - 1 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, p_dev -> fd ) ; p_dev -> fd = -",0
406,"<S2SV_ModStart> bMasterInterface0 ) ; if ( alt -> desc. bNumEndpoints!= 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } <S2SV_ModStart> bSlaveInterface0 ) ; if ( alt -> desc. bNumEndpoints!= 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } pcu -> ep_ctrl = & alt -> endpoint [ 0 ]. desc ; if (! usb_endpoint_is_bulk_out ( pcu -> ep_ctrl ) ) { dev_err ( pcu -> dev, ""First <S2SV_blank> endpoint <S2SV_blank> on <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> is <S2SV_blank> not <S2SV_blank> BULK <S2SV_blank> OUT\\n"" ) ; return - EINVAL ; } pcu -> ep_in = & alt -> endpoint [ 1 ]. desc ; if (! usb_endpoint_is_bulk_in ( pcu -> ep_in ) ) { dev",0
407,"<S2SV_ModStart> intf ) ; <S2SV_ModEnd> struct device * <S2SV_ModStart> struct device * dev ; dev = d -> udev -> dev ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> bInterfaceNumber=%d\\n"", __func__, intf -> cur_altsetting -> desc. bInterfaceNumber, intf -> cur_altsetting -> desc. bInterfaceNumber ) ; dev_info ( & dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> bInterfaceNumber=%d\\n"", __func__, intf -> cur_altsetting -> desc. bInterfaceNumber ) ; if ( d -> props -> disconnect ) d -> props -> disconnect ( d ) ; <S2SV_ModEnd> dvb_usbv2_exit ( d <S2SV_ModStart> d ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
408,<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 1 ) { return - 1 ; } <S2SV_ModStart> ) ) ; if ( pirlvl -> prcheightexpn + picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 1 ) { return - 1 ; } <S2SV_ModStart> ) ) ; if ( pirlvl -> prcwidthexpn + picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - JAS_UINTFAST32_NUMBITS - 1 ) { return - 1 ; } <S2SV_ModStart> ) ) ; if ( pirlvl -> prcheightexpn + picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 1 ) { return - 1 ; } <S2SV_ModStart> ) ) ; if ( pirlvl -> prcwidthexpn + picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - JAS_UINTFAST32_NUMBITS - JAS_UINTFAST32_NUMBITS - 1 ) { return,0
409,"<S2SV_ModStart> target_enc ) { * reg = ( regex_t * ) xmalloc ( sizeof ( regex_t ) ) ; if ( IS_ERR ( * reg ) ) { r = ONIGERR_MEMORY ; goto err2 ; } r = onig_compile ( * reg, cpat, cpat_end, einfo ) ; if ( r!= 0 ) { onig_free ( * reg ) ; * reg = NULL ; goto err ; } r = onig_compile ( * reg, cpat, cpat_end, einfo ) ; if ( r!= 0 ) { onig_free ( * reg ) ; * reg = NULL ; goto err ; } r = onig_reg_init ( * reg, ci -> option, ci -> case_fold_flag, ci -> syntax ) ; if ( r!= 0 ) { onig_free ( * reg ) ; * reg = NULL ; goto err ; } r = onig_compile ( * reg, cpat, cpat_end, einfo ) ; if ( r!= 0 ) { onig_free ( * reg ) ; * reg = NULL ; goto err ; }",0
410,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart> ) { size_t <S2SV_ModEnd> bit ; ssize_t <S2SV_ModStart> ; ssize_t x ; <S2SV_ModEnd> register Quantum * <S2SV_ModStart> ; index = <S2SV_ModEnd> 0 ; switch <S2SV_ModStart> : { q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) break ; for ( x = 0 ; x < ( ( ssize_t ) image -> columns - 7 ) ; x += 8 ) { for ( bit = 0 ; bit < 8 ; bit ++ ) { index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) )!= 0 ) { index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) )!= 0 )? 0x01 : 0x00 ) ; SetPixelIndex ( image, index, q ) ; q += GetPixelChannels ( image ) ; } p ++ ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> } case 3 : { q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1,",0
411,"<S2SV_ModStart> const u_char * t <S2SV_ModEnd> ) { u_int <S2SV_ModStart> network_addr_type ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> "", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> "", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> "", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> "", ipaddr_string ( ndo, tptr + 1 ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> "", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> "", ip6addr_string ( ndo, tptr + 1 ) ) ) ;",0
412,"<S2SV_ModStart>, ss ; u32 <S2SV_ModEnd> msr_data ; u16 <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; <S2SV_ModEnd> ops -> get_msr <S2SV_ModStart> = X86EMUL_MODE_PROT64 ; <S2SV_ModEnd> cs. dpl <S2SV_ModStart> = 1 ; <S2SV_ModEnd> } cs_sel |= <S2SV_ModStart> ; ss_sel |= SELECTOR_RPL_MASK ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & ss, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & ss, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG",0
413,"<S2SV_ModStart> dev ) ; if ( pdev -> driver_override ) strlcpy ( buf, pdev -> driver_override, sizeof ( pdev -> driver_override ) ) ; else strlcpy ( buf, pdev -> driver_override, sizeof ( pdev -> driver_override ) ) ;",0
414,"<S2SV_ModStart>, i ; <S2SV_ModEnd> if ( out <S2SV_ModStart> CMS_TEXT ) { <S2SV_ModEnd> tmpout = BIO_new <S2SV_ModStart> tmpout = BIO_new <S2SV_ModEnd> ( BIO_s_mem (",0
415,"<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( rcu_dereference_protected ( rs, lockdep_is_held ( & request_state_mutex ) ) <S2SV_ModStart> retval, NULL, rcu_dereference_protected ( rs, lockdep_is_held ( & request_state_mutex ) ) ) { rcu_dereference_protected ( rs, lockdep_is_held ( & request_state_mutex ) ) ; rs. respond ( rc, retval, NULL, NULL, NULL ) ; } else { rs. respond ( rcu_dereference_protected ( rs. arg, lockdep_is_held ( & request_state_mutex ) ) ; rs. respond ( rcu_dereference_protected ( rs, lockdep_is_held ( & request_state_mutex ) ) ; }",0
416,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> b ) ; vpx_tree_index <S2SV_ModEnd> ii = tree",0
417,"<S2SV_ModStart> NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TMPDIR"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir =",0
418,"<S2SV_ModStart> ; switch ( c -> sock -> family ) { case AF_INET : ( void ) inet_ntop ( af, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_addr, addr_text, sizeof ( addr_text ) - 1 ) ; port = ntohs ( ( ( struct sockaddr_un * ) sock_addr ) -> sun_port ) ; break ; case AF_INET6 : ( void ) inet_ntop ( af, & ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_addr, addr_text + 1, sizeof ( addr_text ) - 1 ) ; port = ntohs ( ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_port <S2SV_ModEnd> ) ; protoname",0
419,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
420,"<S2SV_ModStart> & 0xffff ; if ( c < 4 ) return - EINVAL ; <S2SV_ModStart> 0xffff ; } if ( ev_code >= 128 ) { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 4 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } <S2SV_ModStart> } if ( ev_code >= 128 ) { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 4 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 4 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } if ( ev_code >= 128 ) { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 4 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ;",0
421,"<S2SV_ModStart> avoid_reserve ) { struct hugepage_subpool * spool = subpool_vma ( vma ) ; struct hugepage_subpool * spool = subpool_vma ( vma ) ; struct hugepage_subpool * spool <S2SV_ModEnd> = hstate_vma ( <S2SV_ModStart> vma ) ; if (! spool ) return ERR_PTR ( - VM_FAULT_OOM ) ; spin_lock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { spin_unlock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { spin_unlock ( & hugetlb_lock ) ; return ERR_PTR ( - VM_FAULT_SIGBUS ) ; } } if (! page ) { spin_unlock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) {",0
422,"<S2SV_ModStart> filegen_string ) ; NTP_LOG ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s\'\\n"", filegen_string, filegen -> prefix, filegen -> basename ) ) ; <S2SV_ModStart> filegen_file ) ; NTP_LOG ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s\'\\n"", filegen_file, filegen -> prefix, filegen -> basename ) ) ; <S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s%s\'\\n"", filegen_string, filegen -> basename, filegen -> prefix, filegen -> basename ) ) ; filegen -> flag |= FGEN_FLAG_ENABLED <S2SV_ModEnd> ; my_opts = <S2SV_ModStart> -> options ) ; for ( ; my_opts!= NULL ; my_opts = HEAD_PFIFO ( my_node -> options ) ; for ( ; my_opts!= NULL ; my_opts = HEAD_PFIFO ( my_node -> options ) ; for ( ; my_opts!= NULL ; my_opts = HEAD_PFIFO ( my_",0
423,"<S2SV_ModStart> -> stamp_path ) { if ( IS_ERR ( t -> last_trigger. realtime ) ) r = PTR_ERR ( t -> last_trigger. realtime ) ; else r = PTR_ERR ( t -> last_trigger. realtime ) ; if ( r < 0 ) { log_unit_warning ( UNIT ( t ), ""Failed <S2SV_blank> to <S2SV_blank> queue <S2SV_blank> unit <S2SV_blank> startup <S2SV_blank> job: <S2SV_blank> %s"", bus_error_message ( & error, r ) ) ; timer_enter_dead ( t, TIMER_FAILURE_RESOURCES ) ; } else if ( IS_ERR ( t -> last_trigger. realtime ) ) r = PTR_ERR ( t -> last_trigger. realtime ) ; if ( r < 0 ) { log_unit_warning ( UNIT ( t ), ""Failed <S2SV_blank> to <S2SV_blank> queue <S2SV_blank> unit <S2SV_blank> startup <S2SV_blank> job: <S2SV_blank> %s"", bus_error_message ( & error, r ) ) ; timer_enter_dead ( t, TIMER_FAILURE_RESOURCES ) ; }",0
424,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 15 ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> [ 0 ] ; tran_high_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> [ 13 ] ; tran_high_t x3 = input [ 2 ] ; tran_high_t x4 = input [ 12 ] ; tran_high_t x5 = input [ 5 ] ; tran_high_t x6 = input [ 7 ] ; tran_high_t x8 = input [ 8 ] ; tran_high_t x9 = input [ 9 ] ; tran_high_t x10 = input [ 5 ] ; tran_high_t x11 = input [ 10 ] ; tran_high_t x12 = input [ 3 ] ; tran_high_t x14 = input [ 1 ] ; tran_high_t",0
425,<S2SV_ModStart> ; # if HAVE_EDSP <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> # endif # if HAVE_MEDIA <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> ; # endif # if HAVE_NEON <S2SV_ModEnd> flags |= HAS_NEON,0
426,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
427,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
428,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
429,"<S2SV_ModStart> ; if ( length < 0 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine_read_header"" ) ; return AVERROR_INVALIDDATA ; } length = avio_rl32 ( pb ) ; if ( length < 0 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine_read_header"" ) ; return AVERROR_INVALIDDATA ; } length = avio_rl32 ( pb ) ; if ( length < 0 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine_read_header"" ) ; return AVERROR_INVALIDDATA ; } if ( length < 0 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine_read_header"" ) ; return AVERROR_INVALIDDATA ; } if ( length < 0 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine_read_header"" ) ; return AVERROR_INVALIDDATA ; }",0
430,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> const char * <S2SV_ModStart> ( stderr, ""rmdir: <S2SV_blank> verifying <S2SV_blank> access <S2SV_blank> to <S2SV_blank> %s:%s <S2SV_blank> (req <S2SV_blank> path <S2SV_blank> %s)\\n"" <S2SV_ModEnd>, controller, <S2SV_ModStart> out ; } if (! fc_may_access ( fc, controller, cgdir, NULL, O_WRONLY ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! cgfs_remove ( controller, cgroup ) ) { ret = - EINVAL ; goto out ; } <S2SV_ModEnd> ret = 0",0
431,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flag & CL_UNPRIVILEGED <S2SV_ModStart> ; if ( mnt -> mnt. mnt_flags & MNT_READONLY ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && list_empty ( & mnt -> mnt_expire ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_LOCKED ; atomic_inc ( & sb -> s_active ) ; mnt -> mnt. mnt_sb = sb ; mnt -> mnt. mnt_mountpoint = mnt -> mnt. mnt_root ; mnt -> mnt_parent = mnt ; if ( ( flag & CL_UNPRIVILEGED ) && list_empty ( & mnt -> mnt_expire ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_LOCKED ; atomic_inc ( & sb -> s_active ) ; mnt -> mnt. mnt_root = dget ( root ) ; mnt -> mnt_parent = mnt ; lock_mount_hash ( ),0
432,"<S2SV_ModStart> trans = & rds_loop_transport ; } else if ( trans == NULL ) { kmem_cache_free ( rds_conn_slab, conn ) ; conn = ERR_PTR ( - EINVAL ) ; goto out ; }",0
433,"<S2SV_ModStart> { if ( rdesc [ 104 ] == 0x26 && rdesc [ 105 ] == 0x80 && rdesc [ 110 ] == 0x03 && rdesc [ 111 ] == 0x21 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x03 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; } else if ( rdesc [ 104 ] == 0x26 && rdesc [ 105 ] == 0x80 && rdesc [ 110 ] == 0x03 && rdesc [ 111 ] == 0x21 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x03 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; }",0
434,"<S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len - mac_header_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Too <S2SV_blank> large <S2SV_blank> EAPOL <S2SV_blank> packet"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_PARAMETER ; }",0
435,"<S2SV_ModStart> & I8042_STR_AUXERR ) { if ( time_before ( jiffies, last_transmit + HZ / 10 ) ) { if ( time_before ( jiffies, last_transmit + HZ / 10 ) ) { if ( time_before ( jiffies, last_transmit + HZ / 10 ) ) { if ( time_before ( jiffies, last_transmit + HZ / 10 ) ) { if ( time_before ( jiffies, last_transmit + HZ / 10 ) { if ( time_before ( jiffies, last_transmit + HZ / 10 ) ) { if ( time_before ( jiffies, last_transmit + HZ / 10 ) ) { if ( time_before ( jiffies, last_transmit + HZ / 10 ) { if ( time_before ( jiffies, last_transmit + HZ / 10 ) { if ( time_before ( jiffies, last_transmit + HZ / 10 ) { if ( time_before ( jiffies, last_transmit + HZ / 10 ) { if ( time",0
436,"<S2SV_ModStart> = parsefh ( ndo, dp, v3 ) ; if ( ( dp = parsepost_op_attr ( ndo, dp, ndo -> ndo_vflag ) ) && ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } } else { if ( ( dp = parsefh ( ndo, dp, v3 ) ) && ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } if ( ( dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ) && ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo",0
437,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_translate_to_linux ( uint8_t <S2SV_ModStart> newIndex ; } } static int udf_translate_to_linux ( uint8_t * newName, uint8_t * udfName, int udfLen, uint8_t * fidName, int fidNameLen ) { int index, newExtIndex = 0, needsCRC = 0 ; uint8_t curr ; if ( curr == '/' || curr == 0 ) { needsCRC = 1 ; curr = ILLEGAL_CHAR_MARK ; while ( index + 1 < udfLen && ( udfName [ index + 1 ] == '/' || udfName [ index + 1 ] == 0 ) ) { if ( udfName [ index + 1 ] == '/' ) { needsCRC = 1 ; curr = ILLEGAL_CHAR_MARK ; while ( index + 1 < udfLen && ( udfName [ index + 1 ] == '/' || curr == 0 ) ) { needsCRC = 1 ; curr = ILLEGAL_CHAR_MARK ; while ( index + 1 < udfLen && ( udfName [ index + 1 ] == '/' || udfName [ index",0
438,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( VP9_COMP <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { int bw, bh ; if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_cols ) return ; bw = num_8x8_blocks_wide_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; bh = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; if ( bw == bs && bh == bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, bs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs,",0
439,<S2SV_ModStart> c -> flags & CLIENT_CLOSE_AFTER_REPLY <S2SV_ModEnd> ) break ;,0
440,<S2SV_ModStart> = EXT4_GET_BLOCKS_CREATE ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_GET_BLOCKS_UNWRITTEN ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; if ( mpd -> b_state & ( 1 << BH_Delay ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_GET_BLOCKS_UNWRITTEN ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC ; if ( mpd -> b_state & ( 1 << BH_Delay ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC ; if ( mpd -> b_state & ( 1 << BH_,0
441,"<S2SV_ModStart> * s ; int ret = - 1 ; if ( siglen < 0 ) { ret = - 1 ; goto err ; } if ( d2i_DSA_SIG ( & s, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : DSA_SIG_free ( s ) ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : if ( siglen < 0 ) { ret = - 1 ; goto err ; } if ( d2i_DSA_SIG ( & s, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : DSA_SIG_free ( s ) ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; <S2SV_ModEnd> return ( ret",0
442,"<S2SV_ModStart> NULL ) ; rv = gdImageGifCtx <S2SV_ModEnd> ( im, <S2SV_ModStart> out ) ; if ( rv ) <S2SV_ModEnd> rv = gdDPExtractData",0
443,<S2SV_ModStart> ) ; } bprm -> cred = NULL ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
444,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>, handle, & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & p -> ai_addrlen, NULL, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= - 1 || oe_errno",0
445,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; if ( separator!= NULL ) { * separator = '\\0' ; strSafeCopy ( connection -> request. auth. user, token, HTTP_SERVER_USERNAME_MAX_LEN ) ; token = separator + 1 ; } } } TRACE_DEBUG ( ""Authorization <S2SV_blank> header:\\r\\n"" ) ; connection -> request. auth. user = strTrimWhitespace ( token ) ; value = strTrimWhitespace ( separator + 1 ) ; n = osStrlen ( value ) ; if ( n > 0 && value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ n - 1 ]",0
446,<S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
447,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
448,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart>, data, size, & ret ) { if ( ret < 0 ) { netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; return ret ; } ret = usb_control_msg ( pegasus -> usb, <S2SV_ModEnd> PEGASUS_REQ_SET_REGS, PEGASUS_REQT_WRITE <S2SV_ModStart>, indx, <S2SV_ModEnd> data, size <S2SV_ModStart>, 100 ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; return ret ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
449,"<S2SV_ModStart> asdl_seq * body <S2SV_ModEnd>, PyArena * <S2SV_ModStart> ; return p <S2SV_ModEnd> ; } <S2SV_null>",0
450,"<S2SV_ModStart> destroy_list ) ; sas_destruct_port ( port, dev ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
451,"<S2SV_ModStart> * src, vpx_bit_depth_t bit_depth, vpx_bit_depth_t bit_depth <S2SV_ModStart> >> 4 ; vpx_bit_depth = bit_depth <S2SV_ModEnd> ; # endif <S2SV_ModStart> write_idx ) ; vpx_bit_depth = bit_depth <S2SV_ModStart> # if USE_PARTIAL_COPY vpx_copy_and_extend_frame <S2SV_ModEnd> ( src, <S2SV_ModStart> } else { vpx_copy_and_extend_frame <S2SV_ModEnd> ( src, <S2SV_ModStart> } else { vpx_copy_and_extend_frame <S2SV_ModEnd> ( src, <S2SV_ModStart> } } # else vpx_copy_and_extend_frame <S2SV_ModEnd> ( src, <S2SV_ModStart> img ) ; # endif buf -> ts_start = ts_start ; buf -> ts_end = ts_end ; buf -> flags = flags ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
452,<S2SV_ModStart> cdev ) ; kfree ( fud ) ;,0
453,"<S2SV_ModStart> return code ; code = verify_s4u_x509_user_checksum ( context, tgs_subkey? tgs_subkey : tgs_session, & req_data, request -> nonce, * s4u_x509_user ) ; if ( code ) { * status = ""INVALID_S4U2SELF_CHECKSUM"" ; krb5_free_pa_s4u_x509_user ( context, * s4u_x509_user ) ; * s4u_x509_user = NULL ; return code ; } if ( code ) { * status = ""INVALID_S4U2SELF_REQUEST"" ; krb5_free_pa_s4u_x509_user ( context, * s4u_x509_user ) ; * s4u_x509_user = NULL ; return KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN ; }",0
454,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> scsi_disk_emulate_command ( SCSIDiskReq <S2SV_ModStart> case READ_CAPACITY_10 : if ( bdrv_is_inserted ( s -> bs, & nb_sectors ) ) { scsi_disk_emulate_read_geometry ( s -> bs, & nb_sectors ) ; if ( nb_sectors < 1 ) { scsi_disk_emulate_read_geometry ( s -> bs, & nb_sectors ) ; if ( nb_sectors < 1 ) { scsi_disk_emulate_read_geometry ( s -> bs, & nb_sectors ) ; if ( bdrv_is_inserted ( s -> bs, & nb_sectors ) ) { scsi_disk_emulate_read_geometry ( s -> bs, & nb_sectors ) ; } else { scsi_disk_emulate_read_geometry ( s -> bs, & nb_sectors ) ; if ( nb_sectors < 1 ) { scsi_disk_emulate_read_geometry ( s -> bs, & nb",0
455,<S2SV_ModStart> cur_pic. field_picture && s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO || s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO,0
456,"<S2SV_ModStart> { if ( hdr_off || sg || off ) { struct rds_header * hdr = & rm -> m_inc. i_hdr ; if ( hdr -> m_inc. i_hdr. h_flags & RDS_FLAG_CONG_BITMAP ) { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; return sizeof ( struct rds_header ) + RDS_CONG_MAP_BYTES ; } if ( hdr_off || sg || off ) { rds_inc_init ( & rm -> m_inc, conn, conn -> c_laddr, conn -> c_faddr, & hdr -> m_inc, GFP_KERNEL, KM_USER0 ) ; rds_recv_incoming ( conn, conn -> c_laddr, conn -> c_faddr, & hdr -> m_inc, GFP_KERNEL, KM_USER0 ) ; rds_send_drop_acked ( conn, be64_to_cpu ( hdr -> m_inc. i_hdr. h_sequence ), NULL ) ; rds_inc_put ( & rm -> m_inc",0
457,<S2SV_ModStart> ) ) { if ( fileblock >= EXT2_BLOCK_SIZE ( data ) ) { <S2SV_ModStart> ) ) { if ( fileblock >= EXT2_BLOCK_SIZE ( data ) ) { <S2SV_ModStart> ) ) { if ( fileblock >= EXT2_BLOCK_SIZE ( data ) ) { ext_block = ( struct grub_ext4_extent_header * ) buf ; return 0 ; } <S2SV_ModStart> ) ) { ext_block = ( struct grub_ext4_extent_header * ) buf ; } else { ext_block = ( struct grub_ext4_extent_header * ) buf ; <S2SV_ModStart> ) ) { if ( fileblock >= EXT2_BLOCK_SIZE ( data ) ) { <S2SV_ModStart> ) ) { ext_block = ( struct grub_ext4_extent_header * ) buf ; } else { ext_block = ( struct grub_ext4_extent_header * ) buf ; if ( ext_block ) { ext_block = ( struct grub_ext4_extent_header * ) buf ; } else { ext_block = ( struct grub_ext4_extent_header * ) buf ; } else { ext_block = ( struct grub_ext,0
458,<S2SV_ModStart> ; if ( key -> state == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> ) { ret,0
459,"<S2SV_ModStart> ) { ND_TCHECK <S2SV_ModEnd> ( * mh <S2SV_ModStart> 8 ) ; if ( hlen >= ip6m_hdrlen [ IP6M_MAX ] ) { ND_PRINT ( ( ndo, ""(header <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> for <S2SV_blank> type <S2SV_blank> %u)"", ip6m_hdrlen [ IP6M_MAX ] ) ) ; goto trunc ; } if ( hlen >= ip6m_hdrlen [ IP6M_MAX ] ) { ND_PRINT ( ( ndo, ""(header <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> for <S2SV_blank> type <S2SV_blank> %u)"", ip6m_hdrlen [ IP6M_MAX ] ) ) ) ; goto trunc ; } if ( hlen >= ip6m_hdrlen [ IP6M_MAX ] ) { ND_PRINT ( ( ndo, ""(header <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> for <S2SV_blank> type <S2SV_blank> %u)"", ip6m_hdrlen [ IP6M_MAX ] ) ) ; goto trunc ; }",0
460,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
461,"<S2SV_ModStart> ; uint16_t hmi_bpm = 0 <S2SV_ModStart> ; } * note = NULL ; UNUSED ( hmi_base ) ; if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__",0
462,"<S2SV_ModStart> -> id ; memset ( haddr, 0, sizeof ( * haddr ) ) ;",0
463,<S2SV_ModStart> i_iget5_offset ; fh32 [ 1 ] = inode -> i_generation ;,0
464,"<S2SV_ModStart> ; } if ( isflagset ( server. attributes, KRB5_KDB_REQUIRES_ADMIN ) &&! isflagset ( client. attributes, KRB5_KDB_ADMIN ) ) { * status = ""ADMIN <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( client. attributes, KRB5_KDB_REQUIRES_ADMIN ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_ADMIN ) &&! isflagset ( client. attributes, KRB5_KDB_ADMIN ) ) { * status = ""ADMIN <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( client. attributes, KRB5_KDB_REQUIRES_ADMIN ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_ADMIN ) ) { * status = """,0
465,"<S2SV_ModStart> case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case",0
466,"<S2SV_ModStart> LPF_PICK_FROM_Q ) { const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; lf -> filter_level = clamp ( lf -> filter_level, min_filter_level, max_",0
467,<S2SV_ModStart> case BTA_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; status = btif_storage_get_adapter_property ( & bdname ) ; if ( status == BT_STATUS_SUCCESS ) { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } if ( status == BT_STATUS_SUCCESS ) { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; },0
468,"<S2SV_ModStart> ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
469,"<S2SV_ModStart> '!' : { luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> controloptions"" ) ; luaL_checkstack ( L, 2, ""in <S2SV_blank> function <S2SV_blank> controloptions"" ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } case '!' : { luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> controloptions"" ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } default : { const char * msg = lua_pushfstring ( L, ""invalid <S2SV_blank> format <S2SV_blank> option <S2SV_blank> \'%c\'"", opt ) ; luaL_argerror ( L, 1, ""in <S2SV_blank> function <S2SV_blank> controloptions"" ) ; luaL_argerror ( L, 1, ""in <S2SV_blank> function <S2SV_blank> controloptions"" ) ; }",0
470,<S2SV_ModStart> void usage_exit ( void,1
471,"<S2SV_ModStart> { if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_element_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_element_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_row_count + 1 ) ) ; * o_row_idx_id = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * (",0
472,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
473,<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else { if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE,0
474,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> value [ strlen <S2SV_ModStart> ] == ',' ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return 0 ; } par -> extradata_size = 0 ; ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par -> extradata_size, value ) ; if ( ret ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return 0 ; } par -> extradata_size = 0 ; av_freep ( & par -> extradata ) ; ret = ff_h264_parse_extradata ( s, & par -> extradata, & par -> extradata_size, value ) ; if ( ret ) { av_log ( s, AV_LOG_ERROR, ""Extradata <S2SV_blank> set <S2SV_blank> to <S2SV_blank> %p <S2SV_blank> (size: <S2SV_blank> %d)\\n"", par -> extradata, par -> extradata_",0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> isofs_read_inode ( struct <S2SV_ModStart> inode ) ; if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { ret = - EIO ; goto fail ; } if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { ret = - EIO ; goto fail ; } if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { ret = - EIO ; goto fail ; } if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { ret = - EIO ; goto fail ; } if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { ret,0
476,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Extension <S2SV_blank> not <S2SV_blank> supported: <S2SV_blank> %s\\n"", filename ) ; return ; } if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Extension <S2SV_blank> not <S2SV_blank> supported: <S2SV_blank> %s\\n"", filename ) ; return ; } # ifdef COM_CompareExtension ( filename, "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Extension <S2SV_blank> not <S2SV_blank> supported: <S2SV_blank> %s\\n"", filename ) ; return ; } if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Extension <S2SV_blank> not <S2SV_blank> supported: <S2SV_blank> %s\\n"", filename ) ; return ; } # ifdef COM_CompareExtension ( filename, "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Extension <S2SV_blank>",0
477,"<S2SV_ModStart> ( ndo, ""%s, <S2SV_blank> length <S2SV_blank> %u"" <S2SV_ModEnd>, source_address_length, <S2SV_ModStart> ( ndo, ""%s, <S2SV_blank> source_address_number <S2SV_blank> %u"" <S2SV_ModEnd>, source_address_number, <S2SV_ModStart> ( ndo, ""%s, <S2SV_blank> source_address_length <S2SV_blank> %u"" <S2SV_ModEnd>, source_address_length, <S2SV_ModStart> ( ndo, ""%s, <S2SV_blank> source_address_number <S2SV_blank> %u"" <S2SV_ModEnd>, source_address_number, <S2SV_ModStart> ( ndo, ""%s, <S2SV_blank> source_address_length <S2SV_blank> %u"" <S2SV_ModEnd>, source_address_length, <S2SV_ModStart> ( ndo, ""%s, <S2SV_blank> source_address_number <S2SV_blank> %u"" <S2SV_ModEnd>, source_address_number, <S2SV_ModStart> ( ndo, ""%s, <S2SV_blank> source_address_length <S2SV_blank> %u"" <S2SV_ModEnd>, source_address_number, <S2SV_ModStart> ( ndo, ""%s, <S2SV_blank> source_address_number <S2SV_blank> %u"", source_address_length, source_address_number, source_address_number, esis_pdu_type, source_address_length, source_address_number, esis_pdu_type, esis_pdu_type, source_address",0
478,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> } } }",0
479,"<S2SV_ModStart> } else { if (! kvm_arm_pmu_v3_ready ( vcpu ) ) { return trap_raz_wi ( vcpu, p, r ) ; } } else if (! kvm_arm_pmu_v3_ready ( vcpu ) ) { return trap_raz_wi ( vcpu, p, r ) ; } else { if (! kvm_arm_pmu_v3_ready ( vcpu ) ) { return trap_raz_wi ( vcpu, p, r ) ; } else if (! kvm_arm_pmu_v3_ready ( vcpu ) ) { return trap_raz_wi ( vcpu, p, r ) ; } else if (! kvm_arm_pmu_v3_ready ( vcpu ) ) { if (! kvm_arm_pmu_v3_ready ( vcpu ) ) { return trap_raz_wi ( vcpu, p, r ) ; } else if (! kvm_arm_pmu_v3_ready ( vcpu ) ) { return trap_raz_",0
480,"<S2SV_ModStart> case IS_STRING : if (! Z_TYPE_PP ( zval_affine_elem ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } <S2SV_ModStart> case IS_DOUBLE : if (! Z_TYPE_PP ( zval_affine_elem ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } <S2SV_ModStart> case IS_LONG : if (! Z_TYPE_PP ( zval_affine_elem ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } <S2SV_ModStart> case IS_DOUBLE : if (! Z_TYPE_PP ( zval_affine_elem ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i )",0
481,<S2SV_ModStart> self ) { if ( self -> dict ) { Py_CLEAR ( self -> dict ) ; Py_TYPE ( self ) -> tp_free ( self ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
482,<S2SV_ModStart> SQL_DROP ) ; <S2SV_ModEnd> return 0 ;,1
483,<S2SV_ModStart> - EFAULT ; if ( offset + len > PAGE_SIZE ) return - EINVAL ;,0
484,"<S2SV_ModStart> argv [ ] ) { printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\nThis <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n"" <S2SV_ModEnd> ) ; exit <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\nThis <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n"" <S2SV_ModEnd> ) ; exit",0
485,<S2SV_ModStart> ; if ( serial -> interface -> desc -> bNumEndpoints < 1 ) { retval = - ENODEV ; goto error_get_interface ; } if ( serial -> interface -> desc -> bNumEndpoints < 1 ) { retval = - ENODEV ; goto error_get_interface ; } if ( serial -> interface -> desc -> bNumEndpoints < 1 ) { retval = - ENODEV ; goto error_get_interface ; } if ( serial -> interface -> desc -> bNumEndpoints < 1 ) { retval = - ENODEV ; goto error_get_interface ; } if ( serial -> interface -> desc -> bNumEndpoints < 1 ) { retval = - ENODEV ; goto error_get_interface ; } if ( serial -> interface -> desc -> bNumEndpoints < 1 ) { retval = - ENODEV ; goto error_get_interface ; } if ( serial -> interface -> desc -> bNumEndpoints < 1 ) { retval = - ENODEV ; goto error_get_interface ; } if ( serial -> interface -> desc -> bNumEndpoints < 1 ) { retval = - ENODEV ; goto error_get_interface ; },0
486,<S2SV_ModStart> cpuctx_lock ) ; mutex_lock ( & cpuctx -> ctx. mutex ) ; <S2SV_ModStart> type = cpu_context ; mutex_unlock ( & cpuctx -> ctx. mutex ) ;,0
487,"<S2SV_ModStart> len, struct iovec * iovec ) { if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! rw ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (",0
488,"<S2SV_ModStart> ext4_group_t flex_group ; unsigned <S2SV_ModEnd> groups_per_flex = 0 <S2SV_ModStart> sbi -> s_log_groups_per_flex ; unsigned <S2SV_ModEnd> size_t size ; <S2SV_ModStart> groups_per_flex < 2 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } <S2SV_ModEnd> flex_group_count = ( <S2SV_ModStart> groups_per_flex < 2 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } <S2SV_ModEnd> atomic_add ( ext4_free_inodes_count <S2SV_ModStart> gdp ), & sbi -> s_flex_groups [ flex_group ]. free_inodes ) ; atomic_add ( ext4_free_group_clusters ( sb, gdp ), & sbi -> s_flex_groups [ flex_group ]. free_clusters ) ; atomic_add ( ext4_used_dirs_count ( sb, gdp ), & sbi -> s_flex_groups [ flex_group ]. used_dirs ) ; atomic_add ( ext4_free_inodes_count ( sb, gdp ), & sbi -> s_flex_groups",0
489,<S2SV_ModStart> ; if ( unlikely ( chunk_length > ( __u16 ) SCTP_MAX_CHUNK_SIZE - required_length ) ) return 0 ; if (,0
490,"<S2SV_ModStart> cJSON_CreateArray ( ) ; if ( a && i < count ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } } else { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] ) ; else suffix_object ( p, n ) ; p = n ; }",0
491,"<S2SV_ModStart> { if ( cli_sslclifp ( cptr ) ) sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> SASL"", parv [ 0 ], parv [ 1 ] ) ; else sendcmdto_one ( & me, CMD_SASL, parv [ 0 ], ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> SASL"", parv [ 1 ], parv [ 2 ] ) ; } else sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> SASL"", parv [ 0 ], parv [ 1 ] ) ; if (! acptr ) sendcmdto_one ( & me, CMD_SASL, parv [ 1 ], ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> SASL"", parv [ 2 ], parv [ 3 ] ) ; else sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> SASL"", par",0
492,<S2SV_ModStart> # endif # if defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ),0
493,<S2SV_ModStart> -> forward_matches ; if ( match_length > callback_args -> data_size ) { return ERROR_INVALID_DATA ; },0
494,"<S2SV_ModStart>! no_port_forwarding_flag && ( ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 ) && ( ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 &&! options. disable_forwarding ) ) { logit ( ""refused <S2SV_blank> streamlocal <S2SV_blank> port <S2SV_blank> forward: <S2SV_blank> "" ""originator <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d, <S2SV_blank> target <S2SV_blank> %s"", originator, originator_port ) ; c = channel_connect_to_path ( target, ""direct-streamlocal@openssh.com"", ""direct-streamlocal"" ) ; } else if ( ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 &&! options. disable_forwarding ) { logit ( ""refused <S2SV_blank> streamlocal <S2SV_blank> port <S2SV_blank> forward: <S2SV_blank> "" ""originator <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d, <S2SV_blank> target <S2SV_blank> %s"", originator, originator_port ) ; }",0
495,"<S2SV_ModStart> length ) { int r ; <S2SV_ModStart> ) ) { if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( length ) { int r ; if ( bitstream_read_bit ( bc ) ) { if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
496,<S2SV_ModStart> err ; } <S2SV_ModEnd> } else {,0
497,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == Py_None ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" )",0
498,<S2SV_ModStart> int m ; jas_int64_t <S2SV_ModEnd> hstartcol ; if <S2SV_ModStart> ) >> 1 ; n = m ; dstptr = buf ; srcptr = & a [ ( 1 - parity ) * stride ] ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ ( 2 - parity ) * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while (,0
499,"<S2SV_ModStart> ; iwl_sta_ucode_deactivate ( priv <S2SV_ModEnd>, sta_id )",0
500,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
501,"<S2SV_ModStart> ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""misissippi\\tmisissippi.misissippi\\nmisissippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""misissippi\\tmisissippi.misissippi\\nmisissippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a",0
502,"<S2SV_ModStart> ) ; if ( hashbin -> hb_type & HB_LOCK ) { spin_lock_irqsave ( & hashbin -> hb_spinlock, flags, hashbin_lock_depth ++ ) ; } queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { if ( free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { if ( free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } } hashbin -> hb_current = NULL ; hashbin -> magic = ~ HB_MAGIC ; if ( hashbin -> hb_type & HB_LOCK ) { spin_unlock_irqrestore ( & hashbin -> hb_spinlock, flags ) ; hashbin_lock_depth",0
503,<S2SV_ModStart> EPERM ; } if ( mnt -> mnt. mnt_flags & MNT_LOCK_READWRITE ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_READWRITE ) &&! ( mnt_flags & MNT_READWRITE ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_READONLY ) &&! ( mnt_flags & MNT_LOCK_READONLY ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_READONLY ) &&! ( mnt_flags & MNT_LOCK_READONLY ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_READONLY ) &&! ( mnt_flags & MNT_LOCK_READONLY ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_READONLY ) &&! ( mnt_flags & MNT_,0
504,<S2SV_ModStart> ; int copied = 0 ; struct sockaddr_ll * sll = msg -> msg_name <S2SV_ModStart> msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_family = AF_PACKET ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ;,0
505,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
506,"<S2SV_ModStart> ; if ( serial -> num_ports < 2 ) return - 1 ; port = serial -> port [ 0 ] ; if ( port -> bulk_out_endpointAddress == 0 ) port -> bulk_out_endpointAddress = USB_ENDPOINT_NUMBER ( serial -> port [ 1 ] -> bulk_out_endpointAddress ) ; else port -> bulk_out_endpointAddress = USB_ENDPOINT_NUMBER ( serial -> port [ 0 ] -> bulk_out_endpointAddress ) ; if ( port -> bulk_out_endpointAddress == USB_ENDPOINT_NUMBER ( serial -> port [ 1 ] -> bulk_out_endpointAddress ) ) port -> bulk_out_endpointAddress = USB_ENDPOINT_NUMBER ( port -> bulk_out_endpointAddress ) ; else port -> bulk_out_endpointAddress = USB_ENDPOINT_NUMBER ( serial -> dev, USB_ENDPOINT_NUMBER ( serial -> port [ 1 ] -> bulk_out_endpointAddress ) ; if ( port -> bulk_out_endpointAddress == USB_ENDPOINT_NUMBER ( serial -> port [ 1 ] -> bulk_out_endpointAddress ) ) port -> bulk_out_endpointAddress = USB_ENDPOINT_NUMBER ( port ->",0
507,"<S2SV_ModStart> qmode ) { RiffChunkHeader <S2SV_ModEnd> riffhdr, datahdr <S2SV_ModStart> ; DS64Chunk ds64_chunk ; JunkChunk junkchunk ; int64_t total_riff_bytes ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_data_bytes > 0xff000000 ) { if ( debug_logging_mode ) error_line ( ""total_data_bytes <S2SV_blank> = <S2SV_blank> %lld, <S2SV_blank> so <S2SV_blank> rf64"", total_data_bytes ) ; do_rf",0
508,"<S2SV_ModStart> msg ) ; <S2SV_ModEnd> err = verify_compat_iovec <S2SV_ModStart> ( msg_sys, iov, & addr, VERIFY_READ ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nosec : sock_recvmsg ) ( sock, msg, msg_sys, flags ) ; if ( err < 0 ) goto out_freeiov ; <S2SV_ModEnd> cmsg_ptr = ( <S2SV_ModStart> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nosec : sock_recvmsg ) ( sock, msg, cmsg_ptr, len",0
509,<S2SV_ModStart> inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * gfs2_inode = GFS2_I ( inode ) ; struct gfs2_log * log = GFS2_SB ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * gfs2_inode = GFS2_I ( inode ) ; struct gfs2_log * log = GFS2_SB ( inode ) ;,0
510,"<S2SV_ModStart> -> filename, <S2SV_ModEnd> input -> use_i420 <S2SV_ModStart> input -> use_i420 <S2SV_ModEnd>? ""I420"" : <S2SV_ModStart> ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next ) ; if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next -> index ) ; if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next -> index ) ; if ( stream -> next || stream -> index ) fprintf ( stderr,",0
511,"<S2SV_ModStart> FALSE ; PROFILER_ENTER ( context -> priv -> <S2SV_ModEnd> prof_nsc_rle_decompress_data ) ; <S2SV_ModStart> prof_nsc_rle_decompress_data ) ; PROFILER_EXIT ( context -> priv -> <S2SV_ModEnd> prof_nsc_rle_decompress_data ) ; <S2SV_ModStart> prof_nsc_decode ) ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, 0, NULL, flip ) ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, 0, 0, NULL, flip ) ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_",0
512,"<S2SV_ModStart> == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> attributes <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; } else value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form",0
513,"<S2SV_ModStart> 0 ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; <S2SV_ModStart> 0 ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch""",0
514,<S2SV_ModStart>. nextsame!= NULL || fv -> b. sf -> fv!= & fv -> b ) { return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 &&! _FVMenuSave ( fv ) ) return ( false ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 &&! _FVMenuSave ( fv ) ) return ( false ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; },0
515,<S2SV_ModStart> msix_tab_size % 4096 <S2SV_ModEnd> == 0 ),0
516,<S2SV_ModStart> timr ) ; period = timespec_to_ns ( new_setting -> it_interval ) ; if ( period == 0 ) { when = timespec_to_ns ( new_setting -> it_value ) ; period = timespec_to_ns ( new_setting -> it_interval ) ; } else if ( flags & TIMER_ABSTIME ) { struct timespec n ; unsigned long now ; getnstimeofday ( & n ) ; when = timespec_to_ns ( n ) ; now = timespec_to_ns ( n ) ; if ( when > now ) when -= now ; else when = 0 ; } when = ( when + period - 1 ) / sgi_clock_period + rtc_time ( ) ; when = ( when + period - 1 ) / sgi_clock_period ; if ( flags & TIMER_ABSTIME ) { struct timespec n ; unsigned long now ; getnstimeofday ( & n ) ; when = timespec_to_ns ( n ) ; if ( when > now ) when -= now ; period = ( period + sgi_clock_period - 1 ) / sgi_clock,0
517,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
518,<S2SV_ModStart> case OFreshOID : <S2SV_ModEnd> caml_set_oo_id ( (,0
519,"<S2SV_ModStart>, multipart_media ; size_t <S2SV_ModEnd> content_length ; int <S2SV_ModStart> ; size_t content_length ; int code = 500, fd = - 1, nranges, ret ; uint32_t boundary ; char content_range [ 64 ] ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr = ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> file <S2SV_blank> buffer"" ; goto abort ; } if ( ( range = parse_range ( range_str, st -> st_size, & nranges ) ) == NULL ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> %lld-%lld/%lld"", range -> start, st -> st_size ) ; errstr = ""bytes <S2SV_blank> */%lld"" ; goto abort ; } if ( ( fd = open ( path, O_RDONLY ) ) == - 1 ) { ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> %lld-%lld/%lld"", st -> st_size ) ; errstr =",0
520,"<S2SV_ModStart> = FALSE ; ier = ksz8851ReadReg ( interface, KSZ8851_IER ) ; ksz8851WriteReg ( interface, KSZ8851_IER, 0 ) ; isr = ksz8851ReadReg ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR",0
521,"<S2SV_ModStart> void encode_quantization ( vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
522,"<S2SV_ModStart> ( write ( uipc_main. ch [ ch_id ]. fd, p_buf, msglen",0
523,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } case <S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
524,<S2SV_ModStart> FBIOGET_VBLANK : { struct fb_vblank <S2SV_ModEnd> vblank ; int <S2SV_ModStart> FB_VBLANK_HAVE_COUNT | FB_VBLANK_HAVE_VCOUNT | FB_VBLANK_HAVE_VSYNC <S2SV_ModEnd> ; vblank.,0
525,"<S2SV_ModStart> int flags ) { if ( ( flags & TFD_TIMER_ABSTIME ) && ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME_ON_SET ) ) { if (! ctx -> might_cancel ) { spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist, & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME_ON_SET ) ) { if (! ctx -> might_cancel ) { spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist, & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } else if ( ctx -> might_cancel ) { spin_lock ( &",0
526,"<S2SV_ModStart> ++ ) { if ( nCurves == 256 ) { for ( j = 0 ; j < nCurves ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], FROM_8_TO_16 ( j ) ) ; } } else if ( nCurves == 256 ) { for ( j = 0 ; j < nCurves ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], FROM_16_TO_16 ( j ) ) ; } } else { for ( j = 0 ; j < nCurves ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], FROM_16_TO_16 ( j ) ) ; } } else { for ( j = 0 ; j < nCurves ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], ( cmsUInt16Number ) j ) ; }",0
527,<S2SV_ModStart> { if (! path_is_positive ( dir ) ) { error = - EINVAL ; goto out ; } path = tomoyo_realpath_from_path ( dir ) ; if (! path_is_positive ( path ) ) { error = - EINVAL ; goto out ; } path = tomoyo_realpath_from_path ( dir ) ; if (! path_is_positive ( path ) ) { error = - EINVAL ; goto out ; } path = tomoyo_realpath_from_path ( dir ) ; if (! path_is_positive ( path ) ) { error = - EINVAL ; goto out ; } if (! path_is_positive ( path ) ) { error = - EINVAL ; goto out ; } path = tomoyo_realpath_from_path ( dir ) ; if (! path_is_positive ( path ) ) { error = - EINVAL ; goto out ; } path = tomoyo_realpath_from_path ( path ) ; if (! path_is_positive ( path ) ) { error = - EINVAL ; goto out ;,0
528,<S2SV_ModStart> buf_size ) ; if ( msg -> size + buf_size > bus -> m_dwSizeGetRing ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( msg -> size + buf_size > bus -> m_dwSizeGetRing ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( msg -> size + buf_size > bus -> m_dwSizeGetRing ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( msg -> size + buf_size > bus -> m_dwSizeGetRing ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( msg -> size + buf_size > bus -> m_dwSizeGetRing ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( msg -> size + buf_size > bus -> m_dwSizeGetRing ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; },0
529,"<S2SV_ModStart> TSRMLS_CC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> RETVAL_STRINGL ( replaced, ( size_t ) new_len, 0 ), TEMP_FAILURE_RETRY ( <S2SV_ModStart> RETVAL_STRINGL ( replaced, ( size_t ) new_len, 0 ), TEMP_FAILURE_RETRY ( <S2SV_ModStart> RETVAL_STRINGL ( replaced, ( size_t ) new_len, 0 ), TEMP_FAILURE_RETRY ( <S2SV_ModStart> RETVAL_STRINGL ( replaced, ( int ) new_len, 0 ), TEMP_FAILURE_RETRY ( <S2SV_ModStart> RETVAL_STRINGL ( replaced, ( size_t ) new_len, TEMP_FAILURE_RETRY ( <S2SV_ModStart> RETVAL_STRINGL ( replaced, ( size_t ) new_len, TEMP_FAILURE_RETRY ( <S2SV_ModStart> RETVAL_STRINGL ( replaced, ( size_t ) new_len, 0 ), TEMP_FAILURE_RETRY ( <S2SV_ModStart> RETVAL_STRINGL ( replaced, ( int ) new_len, 0 ), TEMP_FAILURE_RETRY (",0
530,"<S2SV_ModStart> peerec ) ) { if ( ( peerec = d2i_EC_PUBKEY_bio ( peerec, NULL ) ) == NULL ) { if ( ( peerec = d2i_EC_PUBKEY_bio ( peerec, NULL ) ) == NULL ) { if ( ( peerec = d2i_EC_PUBKEY_bio ( peerec, NULL ) ) == NULL ) { if ( ( peerec = d2i_EC_PUBKEY_new ( ) ) == NULL ) { if ( ( peerec = d2i_EC_PUBKEY_bio ( peerec, NULL ) ) == NULL ) { if ( ( peerec = d2i_EC_PUBKEY_bio ( peerec, NULL ) ) == NULL ) { if ( ( peerec = d2i_EC_PUBKEY_bio ( peerec, NULL ) ) == NULL ) { if ( ( peerec = d2i_EC_PUBKEY_new ( ) ) == NULL ) { if ( ( peerec = d2i_EC_PUBKEY_new ( ) ) == NULL ) { if ( ( peerec = d2i_EC_PUBKEY_new (",0
531,"<S2SV_ModStart> t1_getline ( ) ; strcpy ( t1_line_array, charstringname ) ; t1_line_ptr = eol ( t1_line_array ) ; } else { strcpy ( t1_buf_array, charstringname ) ; strcpy ( t1_line_array, charstringname ) ; strcpy ( t1_line_array, charstringname ) ; strcpy ( t1_line_ptr = eol ( t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; }",0
532,"<S2SV_ModStart> BLOCK_SIZE bsize, <S2SV_ModEnd> BLOCK_SIZE subsize ) <S2SV_ModStart> -> e_mbd ; # if CONFIG_VP9_HIGHBITDEPTH int bsl = b_width_log2_lookup [ bsize ], hbs = ( 1 << bsl ) / 4 ; # endif <S2SV_ModStart> case PARTITION_NONE : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; <S2SV_ModEnd> break ; case <S2SV_ModStart> case PARTITION_VERT : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; if ( mi_col + hbs < cm -> mi_cols ) { * get_sb_index ( x, subsize ) = 1 ; set_modeinfo_offsets ( cm, xd, mi",0
533,"<S2SV_ModStart> name ) ; if (! check_submodule_name ( name ) ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ;",0
534,"<S2SV_ModStart> = 0 ; int block_ptr = 0 ; int pixel_x, pixel_y <S2SV_ModEnd> ; int total_blocks <S2SV_ModStart> break ; case 0x00 : colorA = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] ) ; colorB = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] ) ; colorA = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] ) ; colorB = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] ) ; colorA = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] ) ; colorB = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] ) ; colorB = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] ) ; colorA = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] ) ; colorB = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] ) ; colorA = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] ) ; colorB = ( opcode << 8 ) | ( s",0
535,"<S2SV_ModStart> cnt ) { jas_log_debug ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ; JAS_DBGLOG ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ) ; jas_log_debug ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ; jas_log_debug ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ; jas_dbgLOG ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ; jas_log_debug ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ; jas_log_debug ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf,",0
536,<S2SV_ModStart> * ptype ; if ( skb_is_gsap ( skb ) ) { rcu_read_unlock ( ) ; goto out_unlock ; } type = greh -> protocol ; if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) ->,0
537,"<S2SV_ModStart> ; if ( numrows > jas_matind_max ( numrows, numcols ) ) { jas_matind_destroy ( matrix ) ; return 0 ; } if ( numcols > jas_matind_max ( numcols, numrows ) ) { jas_matind_destroy ( matrix ) ; return 0 ; } if ( numrows > jas_matind_max ( numrows, numcols ) ) { jas_matind_destroy ( matrix ) ; return 0 ; } for ( i = 0 ; i < matrix -> numrows_ ; ++ i ) { matrix -> rows_ [ i ] = & matrix -> rows_ [ i * matrix -> numcols_ ] ; } for ( i = 0 ; i < matrix -> datasize_ ; ++ i ) { matrix -> data_ [ i ] = & matrix -> data_ [ i * matrix -> numcols_ ] ; } for ( i = 0 ; i < matrix -> datasize_ ; ++ i ) { matrix -> data_ [ i ] = & matrix -> data_ [ i * matrix -> numcols_ ] ; } for ( i = 0 ; i < matrix -> numrows_ ; ++ i ) {",0
538,"<S2SV_ModStart> string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & session -> sessionKey. b ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & session -> salt. b ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & session -> authValueBind. b ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & session -> sessionKey. b ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & session -> sessionKey. b ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE",0
539,"<S2SV_ModStart> ; ret = key_permission_check ( key_ref, KEY_NEED_READ ) ; if ( ret == 0 ) goto error2 ; if ( is_key_possessed ( key_ref ) ) { ret = - EOPNOTSUPP ; goto error2 ; } if ( key -> type -> read ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ;",0
540,<S2SV_ModStart> u4_first_slice_is_aud ) { if ( 0 == ps_dec -> u4_first_slice_is_aud ) { ps_dec -> u4_first_slice_is_aud = 1 ; } else { if ( 0 == ps_dec -> u4_first_slice_is_aud ) { if ( 0 == ps_dec -> u4_first_slice_is_aud ) { ps_dec -> u4_first_slice_is_aud = 1 ; } else { if ( 0 == ps_dec -> u4_first_slice_is_aud ) { ps_dec -> u4_first_slice_is_aud = 1 ; } else { if ( 0 == ps_dec -> u4_first_slice_is_aud ) { if ( 0 == ps_dec -> u4_first_slice_is_aud ) { ps_dec -> u4_first_slice_is_aud = 1 ; } else { if ( 0 == ps_dec -> u4_first_slice_is_aud ) { ps_dec -> u4_first_slice_is_aud = 1 ; } else { ps,0
541,"<S2SV_ModStart> var_off ) ; switch ( opcode ) { case BPF_ADD : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value",0
542,"<S2SV_ModStart> == NULL ) { cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and",0
543,<S2SV_ModStart> ; break ; case VFIO_PCI_BAR0_REGION_INDEX : info. offset = VFIO_PCI_BAR0_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_BAR5_INDEX_TO_OFFSET ( info. index ) ; info. size = VFIO_PCI_BAR5_INDEX_TO_OFFSET ( info. index ) ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_BAR5_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO,0
544,"<S2SV_ModStart> ext4_test_inode_state ( inode, EXT4_STATE_ORDERED_MODE ) ) { ret = ext4_jbd2_file_inode ( handle, inode ) ; if ( ret ) goto errout ; }",0
545,"<S2SV_ModStart> = 1 ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if ( options ) av_dict_copy ( & s -> chained_options, * options, 0 ) ; if ( s -> headers ) { int len = strlen ( s -> headers ) ; if ( len < 2 || strcmp ( ""\\r\\n"", s -> headers + len - 2 ) ) { av_log ( h, AV_LOG_WARNING, ""No <S2SV_blank> trailing <S2SV_blank> CRLF <S2SV_blank> found <S2SV_blank> in <S2SV_blank> HTTP <S2SV_blank> header.\\n"" ) ; ret = av_reallocp ( & s -> headers, len + 3 ) ; if ( ret < 0 ) { av_log ( h, AV_LOG_WARNING, ""No <S2SV_blank> trailing <S2SV_blank> CRLF <S2SV_blank> found <S2SV_blank> in <S2SV_blank> HTTP <S2SV_blank> header.\\n"" ) ;",0
546,"<S2SV_ModStart> ) ) { struct ip_options_rcu * opt_rcu = rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt, sock_owned_by_user ( sk ) ) ; if ( opt ) { struct ip_options_rcu * opt_rcu = rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ; opt_rcu = rcu_dereference_protected ( opt, sock_owned_by_user ( sk ) ) ; opt_rcu = rcu_dereference_protected ( opt, sock_owned_by_user ( sk ) ) ; if ( opt ) { struct ip_options_rcu * opt_rcu = rcu_dereference_protected ( opt -> opt, sock_owned_by_user ( sk ) ; opt_rcu = rcu_dereference_protected ( opt, sock_owned_by_user ( sk ) ) ; opt_rcu = rcu_dereference_",0
547,"<S2SV_ModStart> char * in, size_t maxlen <S2SV_ModStart> += 4 ; if ( len > maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > maxlen ) return - 1 ; <S2SV_ModStart> '=' )",0
548,<S2SV_ModStart> gc ) ; mutex_destroy ( & gpio_dev -> mutex ) ; <S2SV_ModStart> pctrl ) ; mutex_destroy ( & gpio_dev -> mutex ) ;,0
549,"<S2SV_ModStart>, len, cur_len ; size_t bytes_copied = 0 ; <S2SV_ModStart> i ++ ) { bytes_copied = min_t ( size_t, bytes_copied, cifs_sb -> wsize ) ; if ( bytes_copied < 0 ) { rc = - EINVAL ; break ; } <S2SV_ModStart> i ++ ) { bytes_copied = min_t ( size_t, bytes_copied, cifs_sb -> wsize ) ; if ( rc ) { kfree ( wdata ) ; break ; } <S2SV_ModStart> ++ ) { size_t bytes_copied = min_t ( size_t, bytes_copied, cifs_sb -> wsize ) ; if (! bytes_copied ) { rc = - EINVAL ; break ; } <S2SV_ModStart> i ++ ) { bytes_copied = min_t ( size_t, bytes_copied, cifs_sb -> wsize ) ; if (! bytes_copied ) { kfree ( wdata ) ; break ; } <S2SV_ModStart> ++ ) { bytes_copied = min_t ( size_t, bytes_copied, cifs_sb -> wsize ) ; if (",0
550,<S2SV_ModStart>! ( quirks & CP_RDESC_SWAPPED_MIN_MAX <S2SV_ModEnd> ) ) return,0
551,"<S2SV_ModStart> { int number_of_frames, <S2SV_ModEnd> number_of_keyframes, encode_frame_count <S2SV_ModStart> ; SvcInternal * const <S2SV_ModEnd> si = get_svc_internal <S2SV_ModStart> svc_ctx ) ; if ( svc_ctx == NULL || si == NULL ) { svc_log_reset ( svc_ctx ) ; return NULL ; } <S2SV_ModEnd> encode_frame_count = si <S2SV_ModStart> encode_frame_count ; if ( <S2SV_ModEnd> encode_frame_count <= 0 <S2SV_ModStart> encode_frame_count <= 0 ) { return vpx_svc_get_message ( svc_ctx ) ; } for ( i = 0 ; i < si -> layers ; ++ i ) { number_of_frames = encode_frame_count ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"",",0
552,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static UINT32 <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> 5 ) { len = ( UINT32 ) * in ++ ; <S2SV_ModStart> 4 ; } fillMemory ( out, len, value ) ; out += len ; left -= len ; } else if ( value == * in ) { in ++ ; if ( * in < 0xFF ) { len = ( UINT32 ) * in ++ ; len += 2 ; } else { in ++ ; len = ( UINT32 ) * in ++ ; len += 2 ; } else { len = ( UINT32 ) * in ++ ; len += 2 ; } fillMemory ( out, len, value ) ; out += len ; left -= len ; } <S2SV_ModEnd> } <S2SV_null>",0
553,"<S2SV_ModStart> -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> buffer ) ; screen -> buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( new_cols > old_cols ) { VTermRect rect ; rect. start_row = 0 ; rect. end_row = old_rows ; rect. start_col = old_cols ; scrollrect ( rect, first_blank_row - new_rows, 0, user ) ; scrollrect ( rect, first_blank_row - new_rows, 0, user ) ; screen -> buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( new_cols > old_cols ) { VTermRect rect ; rect. start_row = 0 ; rect. end_col = new_cols ; scrollrect ( rect, first_blank_row - new_rows, 0, user ) ; scrollrect ( rect, first_blank_row - new_rows, 0, user ) ; screen -> buffer = vterm_allocator_malloc (",0
554,<S2SV_ModStart> { const char * literal_start <S2SV_ModEnd> ; int in_named_escape <S2SV_ModStart> ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str +,0
555,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static jas_stream_memobj_t <S2SV_ModEnd> mem_resize ( jas_stream_memobj_t <S2SV_ModStart> int bufsize ) { JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; if ( bufsize < 0 ) { JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; if (! ( buf = jas_realloc2 ( m -> buf_, bufsize, sizeof ( unsigned char ) ) ) && bufsize ) { JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> failed\\n"" ) ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> succeeded\\n"" ) ) ; m -> buf_ = buf ; m -> bufsize",0
556,"<S2SV_ModStart> ( pd, g_settings_dump_location <S2SV_ModEnd> ) ; char",0
557,"<S2SV_ModStart> ( symInterpretMatchMaskNames, expr -> action. args, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } expr = expr -> action. args ; } else if ( expr -> expr. op == EXPR_ACTION_DECL ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. name ) ; if (! LookupString ( symInterpretMatchMaskNames, pred_txt, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } if ( expr -> expr. op == EXPR_IDENT ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. ident ) ; if ( pred_txt && istreq ( pred_txt, ""any"" ) ) { * pred_rtrn = MATCH_ANY ; * mods_rtrn = MOD_REAL_MASK_ALL ; return",0
558,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> void pcrypt_free ( <S2SV_ModStart> ) { struct pcrypt_ctx <S2SV_ModEnd> * ctx =,0
559,<S2SV_ModStart> 0 ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr,0
560,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
561,"<S2SV_ModStart> ; if ( neigh ) { if ( skb -> ndisc_nodetype == NDISC_NODETYPE_HOST ) { ND_PRINTK ( 0, err, ""RA: <S2SV_blank> from <S2SV_blank> host <S2SV_blank> or <S2SV_blank> unauthorized <S2SV_blank> router\\n"" ) ; return ; } <S2SV_ModStart> ) ) { if ( skb -> ndisc_nodetype == NDISC_NODETYPE_HOST ) { ND_PRINTK ( 0, err, ""RA: <S2SV_blank> from <S2SV_blank> host <S2SV_blank> or <S2SV_blank> unauthorized <S2SV_blank> router\\n"" ) ; return ; } if ( skb -> ndisc_nodetype == NDISC_NODETYPE_HOST ) { ND_PRINTK ( 0, err, ""RA: <S2SV_blank> from <S2SV_blank> host <S2SV_blank> or <S2SV_blank> unauthorized <S2SV_blank> router\\n"" ) ; return ; } if ( skb -> ndisc_nodetype == NDISC_NODETYPE_HOST ) { ND_PRINTK ( 0, err, ""RA: <S2SV_blank> from <S2SV_blank> host <S2SV_blank> or <S2SV_blank> unauthorized <S2SV_blank> router\\n"" ) ; return ; }",0
562,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
563,<S2SV_ModStart> * up ; int len ; <S2SV_ModStart> rp ) ; len = nla_len ( rp ) ; if ( len < 0 || len > xfrm_replay_state_esn_len ( replay_esn ) || len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; if ( len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; len = xfrm_replay_state_esn_len ( replay_esn ) ; if ( len < 0 || len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; if ( len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; if ( len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; len = xfrm_replay_state_esn_len ( up ) ; if ( len < 0 || len > xfrm_replay_state_esn_len ( up ) ) return -,0
564,"<S2SV_ModStart> { int ret ; if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM ; ret = proc_dointvec ( table, write, buffer, lenp, ppos ) ; if ( ret ||! write ) return ret ; if ( sysctl_perf_cpu_time_max_percent == 100 || sysctl_perf_cpu_time_max_percent == 0 ) { printk ( KERN_WARNING ""perf: <S2SV_blank> Dynamic <S2SV_blank> interrupt <S2SV_blank> throttling <S2SV_blank> disabled, <S2SV_blank> can <S2SV_blank> hang <S2SV_blank> your <S2SV_blank> system!\\n"" ) ; return - EPERM ; } <S2SV_ModEnd> sysctl_perf_cpu_time_max_percent = 100 <S2SV_ModStart> sysctl_perf_cpu_time_max_percent == 100 || sysctl_perf_cpu_time_max_percent == 0 ) { printk ( KERN_WARNING ""perf: <S2SV_blank> Dynamic <S2SV_blank> interrupt <S2SV_blank> throttling <S2SV_blank> disabled, <S2SV_blank> can <S2SV_blank> hang <S2SV_blank> your <S2SV_blank> system!\\n"" ) ; WRITE_ONCE ( perf_sample_allowed_ns, 100 <S2SV_ModEnd> ) ; }",0
565,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) ; this_mv <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; sad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; sad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; sad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; sad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; sad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; sad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; sad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; sad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; sad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; sad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; sad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; sad_array",0
566,<S2SV_ModStart> ) ) { if ( compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> num,0
567,<S2SV_ModStart> name ) { if ( IS_ERR ( __crypto_lookup_template ( name ) ) ) return ERR_CAST ( __crypto_lookup_template ( name ) ) ; if ( IS_ERR ( __crypto_lookup_template ( name ) ) ) return ERR_CAST ( __crypto_lookup_template ( name ) ) ; if ( IS_ERR ( __crypto_lookup_template ( name ) ) ) return ERR_CAST ( __crypto_lookup_template ( name ) ) ; if ( IS_ERR ( __crypto_lookup_template ( name ) ) ) { return ERR_CAST ( __crypto_lookup_template ( name ) ) ; } if ( IS_ERR ( __crypto_lookup_template ( name ) ) ) return ERR_CAST ( __crypto_lookup_template ( name ) ) ; if ( IS_ERR ( __crypto_lookup_template ( name ) ) return ERR_CAST ( __crypto_lookup_template ( name ) ) ; if ( IS_ERR ( __crypto_lookup_template ( name ) ) ) { return ERR_CAST ( __crypto_lookup_template ( name ) ) ; },0
568,"<S2SV_ModStart> ps ) { u32 prev_legacy, cur_legacy ; <S2SV_ModStart> -> flags ; if ( ps -> flags & KVM_PIT_FLAGS_LOAD_COUNT ) { kvm_pit_load_count ( kvm, 0, ps -> channels [ 0 ]. count, start ) ; mutex_unlock ( & kvm -> arch. vpit -> pit_state. lock ) ; return 0 ; } prev_legacy = kvm -> arch. vpit -> pit_state. flags & KVM_PIT_FLAGS_HPET_LEGACY ; cur_legacy = ps -> flags & KVM_PIT_FLAGS_HPET_LEGACY ; if (! prev_legacy && cur_legacy ) { memcpy ( & kvm -> arch. vpit -> pit_state. channels, & ps -> channels, sizeof ( ps -> channels ) ) ; kvm -> arch. vpit -> pit_state. flags = ps -> flags ; kvm_pit_load_count ( kvm, 0, ps -> channels [ 0 ]. count, start ) ; mutex_unlock ( & kvm -> arch. vpit -> pit",0
569,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * prev_mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> = cm -> prev_mi <S2SV_ModEnd> + idx_str ; <S2SV_ModStart> MODE_INFO * * prev_mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> idx_str ; BLOCK_SIZE bsize ; cpi -> mb. source_variance = UINT_MAX ; vp9_zero ( cpi -> mb. pred_mv ) ; switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_",0
570,"<S2SV_ModStart> 1 ) ; atomic_sub ( opipe -> nrbufs, & opipe -> nrbufs ) ; <S2SV_ModStart> ; obuf = opipe -> bufs + nbuf ; * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; if ( obuf -> len > len ) obuf -> len = len ; <S2SV_ModStart> - EAGAIN ; atomic_sub ( opipe -> nrbufs, & opipe -> nrbufs ) ; atomic_sub ( opipe -> nrbufs, & opipe -> nrbufs ) ; atomic_sub ( opipe -> nrbufs, & opipe -> nrbufs ) ; atomic_sub ( opipe -> nrbufs, & opipe -> nrbufs ) ; atomic_sub ( opipe -> nrbufs, & opipe -> nrbufs ) ; atomic_sub ( opipe -> nrbufs, & opipe -> nrbufs ) ; atomic_sub ( opipe -> nrbufs, & opipe -> nrbufs ) ; atomic_sub ( opipe -> nrbufs, & opipe -> nrbufs ) ; atomic_sub ( opipe -> nrbufs",0
571,"<S2SV_ModStart> ; dh = skb_header_pointer <S2SV_ModEnd> ( skb,",0
572,"<S2SV_ModStart> } else { FILE * f = fopen ( filename, ""rb"" ) ; if ( f == NULL ) return HTTP_INTERNAL_SERVER_ERROR ; <S2SV_ModStart> Fp == NULL ) { f = fopen ( filename, ""rb"" ) ; if ( f == NULL ) { f = fopen ( filename, ""wb"" ) ; if ( f == NULL ) { f = fopen ( filename, ""rb"" ) ; if ( f == NULL ) { return HTTP_INTERNAL_SERVER_ERROR ; } } else { f = fopen ( filename, ""rb"" ) ; if ( f == NULL ) { return HTTP_INTERNAL_SERVER_ERROR ; } <S2SV_ModStart> } if ( f == NULL ) { f = fopen ( filename, ""rb"" ) ; if ( f == NULL ) { f = fopen ( filename, ""wb"" ) ; if ( f == NULL ) { f = fopen ( filename, ""rb"" ) ; if ( f == NULL ) { return HTTP_INTERNAL_SERVER_ERROR ; } } else { f = fopen ( filename, ""rb"" ) ; if ( f == NULL ) { return HTTP_INTERNAL_SERVER_ERROR ; }",0
573,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> dir = ""/tmp"" ) == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd =",0
574,<S2SV_ModStart> ( blkg ) ) { blkg_free ( new_blkg ) ; return <S2SV_ModEnd> PTR_ERR ( blkg <S2SV_ModStart> PTR_ERR ( blkg ) ; } q -> root_blkg = blkg ; q -> root_rl. blkg = blkg ; ret = blk_throtl_init ( q ) ; if ( ret ) { spin_lock_irq ( q -> queue_lock ) ; blkg_destroy_all ( q ) ; spin_unlock_irq ( q -> queue_lock ) ; } q -> root_rl. blkg = blkg ; ret = blk_throtl_init ( q ) ; if ( ret ) { spin_lock_irq ( q -> queue_lock ) ; blkg_destroy_all ( q ) ; spin_unlock_irq ( q -> queue_lock ) ; blkg_destroy_all ( q ) ; spin_unlock_irq ( q -> queue_lock ) ; },0
575,"<S2SV_ModStart> ; if ( buf_size < 4 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> frame <S2SV_blank> size\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( buf_size < 4 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> frame <S2SV_blank> size\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( buf_size < 4 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> frame <S2SV_blank> size\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( buf_size < 4 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> frame <S2SV_blank> size\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( buf_size < 4 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> frame <S2SV_blank> size\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( buf_size < 4 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> frame <S2SV_blank> size\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
576,<S2SV_ModStart> ; krb5_data rspac ; if ( rspac == NULL ) { ret = KRB5KDC_ERR_INVALID_PARAMETER ; goto error ; } if ( rspac == NULL ) { ret = KRB5KDC_ERR_INVALID_PARAMETER ; goto error ; } if ( rspac == NULL ) { ret = KRB5KDC_ERR_INVALID_PARAMETER ; goto error ; } <S2SV_ModStart> ) ; } if ( ret == KRB5KDC_ERR_INVALID_PARAMETER ) { ret = KRB5KDC_ERR_INVALID_PARAMETER ; goto error ; } if ( ret == KRB5KDC_ERR_INVALID_PARAMETER ) { ret = KRB5KDC_ERR_INVALID_PARAMETER ; goto error ; } if ( ret == KRB5KDC_ERR_INVALID_PARAMETER ) { ret = KRB5KDC_ERR_INVALID_PARAMETER ; goto error ; } if ( ret == KRB5KDC_ERR_INVALID_PARAMETER ) { ret = KRB5KDC_ERR_INVALID_PARAMETER ; goto error ; } if ( ret == KRB5KDC_ERR_INVALID_PARAMETER ) { ret = KRB5,0
577,"<S2SV_ModStart> mnt ) ; if ( dentry -> d_inode -> i_op -> follow_link ) cookie = dentry -> d_inode -> i_op -> follow_link ( dentry, nd ) ; if ( IS_ERR ( cookie ) ) { char * s = nd_get_link ( nd ) ; error = 0 ; if ( s ) error = __vfs_follow_link ( nd, s ) ; else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; }",0
578,"<S2SV_ModStart> arg ) { struct usbdevfs_connectinfo ci ; if ( ps -> dev -> speed == USB_SPEED_HIGH ) { ci. devnum = ps -> dev -> num, ci. slow = ps -> dev -> speed == USB_SPEED_LOW ; } else { ci. devnum = ps -> dev -> num ; ci. slow = ps -> dev -> speed == USB_SPEED_HIGH ; } <S2SV_ModStart> = {. devnum = ps -> dev -> num ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; return 0 ; } if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ;",0
579,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> * opt, u32 optlen ) { <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> ; if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } kfree ( * optp ) ; * optp = opt ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
580,"<S2SV_ModStart> ; } retval = xfs_attr3_leaf_add ( args, bp ) ; if ( retval == ENOSPC ) { xfs_bmap_init ( args -> flist, args -> firstblock ) ; error = xfs_attr_leaf_to_node ( args ) ; if ( error ) { xfs_trans_brelse ( args -> trans, bp ) ; return error ; } args -> rmtblkcnt2 = args -> rmtblkcnt ; } xfs_bmap_init ( args -> flist, args -> firstblock ) ; error = xfs_bmap_finish ( args -> flist, & committed ) ; args -> trans = NULL ; xfs_trans_ijoin ( args -> trans, dp, 0 ) ; if ( error ) { xfs_trans_roll ( args -> trans, dp, 0 ) ; return ( error ) ; } args -> rmtblkcnt2 = args -> rmtblkcnt ; args -> rmtblkno2 = args -> rmtblkcnt ; args -> rmtblkcnt2 = args -> rmtblkcnt ; args -> rmtblkcnt2",0
581,"<S2SV_ModStart> ; if ( IoEnumerateDevices ( DeviceObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; if ( IoEnumerateDevices ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; if ( IoEnumerateDevices ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; if ( IoEnumerateDevices ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; if ( IoEnumerateDevices ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) *",0
582,"<S2SV_ModStart> ; if ( strcmp ( connection, ""close"" )!= 0 <S2SV_ModEnd> ) goto error <S2SV_ModStart> ; if ( strcmp ( ws_version, ""13"" )!= 0 <S2SV_ModEnd> ) goto error <S2SV_ModStart> goto error ; if ( strcmp ( ws_version, ""13.0"" )!= 0 <S2SV_ModEnd> ) goto error <S2SV_ModStart> goto error ; if ( strcmp ( ws_version, ""14.0"" )!= 0 <S2SV_ModEnd> ) goto error <S2SV_ModStart> goto error ; if ( strcmp ( ws_version, ""14.0"" )!= 0 <S2SV_ModEnd> ) goto error <S2SV_ModStart> goto error ; if ( strcmp ( ws_version, ""14.0"" )!= 0 <S2SV_ModEnd> ) goto error <S2SV_ModStart> goto error ; if ( strcmp ( ws_version, ""14.0"" )!= 0 <S2SV_ModEnd> ) goto error <S2SV_ModStart> goto error ; if ( strcmp ( ws_version, ""14.0"" )!= 0 <S2SV_ModEnd> ) goto error <S2SV_ModStart> goto error ; if ( strcmp ( ws_version, ""14.0"" )!= 0 <S2SV_ModEnd> ) goto error <S2SV_ModStart> goto error ; if ( strcmp ( ws_version, ""14.0"" )!= 0 <S2SV_ModEnd> ) goto error",0
583,"<S2SV_ModStart> uint16 nif = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> description ) { if ( strlen ( d -> description ) > plen ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } <S2SV_ModStart> name ) ; if ( strlen ( d -> name ) > plen ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } <S2SV_ModStart> -> description ) { if ( strlen ( d -> description ) > plen ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } <S2SV_ModStart> -> name ) { if ( strlen ( d -> name ) > plen ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } if ( pcap_findalldevs_if ( & findalldevs_if, errmsgbuf ) == - 1 ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } if ( pcap_findalldevs ( & findalldevs_if, errmsgbuf ) == - 1 ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; }",0
584,"<S2SV_ModStart> ; struct dump_dir <S2SV_ModEnd> * dd = <S2SV_ModStart> DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; }",0
585,"<S2SV_ModStart> ) ; for ( bit = 0 ; bit < ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; q ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns",0
586,"<S2SV_ModStart> a ) { BN_ULONG <S2SV_ModEnd> c1, c2",0
587,"<S2SV_ModStart> * sk, <S2SV_ModEnd> struct sock_exterr_skb * <S2SV_ModStart> * serr ; <S2SV_ModEnd> serr = SKB_EXT_ERR <S2SV_ModStart> = SO_EE_ORIGIN_TIMESTAMPING ; memset ( & serr -> ee, 0, sizeof ( * serr ) ) ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= sk -> sk_tskey ; } if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( skb_shinfo ( skb ) -> tskey > sk -> sk_tskey ) serr -> ee. ee_data -= sk -> sk_tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= sk",0
588,"<S2SV_ModStart> } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
589,"<S2SV_ModStart> = len ; if ( len < 0 ) { ND_PRINT ( ( ndo, ""NULL <S2SV_blank> length <S2SV_blank> (%u)"", len ) ) ; return ; } <S2SV_ModStart> len ; if ( len < 0 ) { ND_PRINT ( ( ndo, ""null <S2SV_blank> length <S2SV_blank> (%u)"", len ) ) ; return ; } <S2SV_ModStart> len ; if ( len < 0 ) { ND_PRINT ( ( ndo, ""null <S2SV_blank> length <S2SV_blank> (%u)"", len ) ) ; } <S2SV_ModStart> len ; if ( len < 0 ) { ND_PRINT ( ( ndo, ""null <S2SV_blank> length <S2SV_blank> (%u)"", len ) ) ; return ; } <S2SV_ModStart> len ; if ( len < 0 ) { ND_PRINT ( ( ndo, ""null <S2SV_blank> length <S2SV_blank> (%u)"", len ) ) ; return ; } <S2SV_ModStart> len ; if ( len < 0 ) { ND_PRINT ( ( ndo, ""null <S2SV_blank> length <S2SV_blank> (%u)"", len ) ) ; } <S2SV_ModStart> len ; if ( len < 0 ) { ND_PRINT ( ( ndo, ""null <S2SV_blank> length <S2SV_blank> (%u)"", len ) ) ; return ; }",0
590,"<S2SV_ModStart>, ptmp, flags, __LINE__, 0 ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, 0 ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, 0 ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, 0 ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, 0 ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, 0 ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, 0 ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, 0 ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, 0 ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, 0 ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, 0 ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, 0",0
591,<S2SV_ModStart> ; if ( task -> ptrace &&! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_,0
592,"<S2SV_ModStart> long ) ; if ( w < sizeof ( long ) ) { pr_err ( ""%s: <S2SV_blank> too <S2SV_blank> big <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> too <S2SV_blank> big <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> too <S2SV_blank> big <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> too <S2SV_blank> big <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> add_bytes_l2_c()\\n"", __func__, w ) ; } else { pr_err ( ""%s: <S2SV_blank> too <S2SV_blank> big <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> long <S2SV_blank> big <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> too <S2SV_blank> big <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> too <S2SV_blank> big <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> too <S2SV_blank> big <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> add_bytes_l2_c()\\n"", __func__, w ) ; }",0
593,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & __GFP_ZERO,0
594,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
595,<S2SV_ModStart> = 1 ; <S2SV_ModEnd> ps_parse -> s_sei_params <S2SV_ModStart> = 1 ; <S2SV_ModEnd> ps_parse -> s_sei_params <S2SV_ModStart> = 1 ; <S2SV_ModEnd> ps_parse -> s_sei_params <S2SV_ModStart> = 1 ; <S2SV_ModEnd> ps_parse -> s_sei_params <S2SV_ModStart> = 1 ; <S2SV_ModEnd> ps_parse -> s_sei_params <S2SV_ModStart> = 1 ; <S2SV_ModEnd> ps_parse -> s_sei_params <S2SV_ModStart> = 1 ; <S2SV_ModEnd> ps_parse -> s_sei_params <S2SV_ModStart> = 1 ; <S2SV_ModEnd> ps_parse -> s_sei_params <S2SV_ModStart> = 1 ; <S2SV_ModEnd> ps_parse -> s_sei_params <S2SV_ModStart> = 1 ; <S2SV_ModEnd> ps_parse -> s_sei_params <S2SV_ModStart> = 1 ; <S2SV_ModEnd> ps_parse -> s_sei_params <S2SV_ModStart> = 1 ; <S2SV_ModEnd> ps_parse -> s_sei_params <S2SV_ModStart> = 1 ; <S2SV_ModEnd> ps_parse -> s_sei_params <S2SV_ModStart> = 1 ; <S2SV_ModEnd> ps_parse -> s_sei_params <S2SV_ModStart> = 1 ; <S2SV_ModEnd> ps_parse -> s_sei_params <S2SV_ModStart> = 1 ; <S2SV_ModEnd> ps_parse -> s_sei_params <S2SV_ModStart> = 1 ; <S2SV_ModEnd> ps_parse -> s_sei_,0
596,<S2SV_ModStart> ; priv = kzalloc <S2SV_ModEnd> ( sizeof (,0
597,<S2SV_ModStart> -> num_engines ; if ( num_engines > SDMA_MAX_ENGINES ) { ret = - EINVAL ; goto error ; } <S2SV_ModStart> -> num_engines ; if ( num_engines > SDMA_MAX_ENGINES ) { ret = - EINVAL ; goto error ; } <S2SV_ModStart> -> num_engines ; if ( num_engines > SDMA_MAX_ENGINES ) { ret = - EINVAL ; goto error ; } <S2SV_ModStart> -> num_engines ; if ( num_engines > SDMA_MAX_ENGINES ) { ret = - EINVAL ; goto error ; } <S2SV_ModStart> -> num_engines ; if ( num_engines > SDMA_MAX_ENGINES ) { ret = - EINVAL ; goto error ; } <S2SV_ModStart> -> num_engines ; if ( num_engines > SDMA_MAX_ENGINES ) { ret = - EINVAL ; goto error ; } <S2SV_ModStart> -> num_engines ; if ( num_engines > SDMA_MAX_ENGINES ) { ret = - EINVAL ; goto error ; },0
598,<S2SV_ModStart> -> device_data ; snd_use_lock_free ( & dev -> use_lock <S2SV_ModEnd> ) ; return,0
599,"<S2SV_ModStart> int rep_quick ) { if ( param -> testflag & T_UNPACK ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; } else { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; if ( param -> testflag & T_UNPACK ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; } else { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; if ( param -> testflag & T_SILENT ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr (",0
600,"<S2SV_ModStart> == q || ( <S2SV_ModStart> size < 16 || ( <S2SV_ModStart> size > 256 ) ) ) return ( DestroyImageList ( images ) ) ; p = q ; sizes [ i ++ ] = size ; while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) || ( ( * p == ',' ) ) ) { resized = ResizeImage ( image, sizes [ i ], sizes [ i ], image -> filter, exception ) ; if ( resized == ( Image * ) NULL ) return ( DestroyImageList ( images ) ) ; if ( resized == ( DestroyImageList ( images ) ) return ( DestroyImageList ( images ) ) ; if ( images == ( Image * ) NULL ) return ( DestroyImageList ( images ) ) ; } if ( i == 0 ) i = 10 ; for ( i = 0 ; i < * count ; i ++ ) { resized = ResizeImage ( image, sizes [ i ], sizes [ i ], image -> filter, exception ) ; if ( resized == ( Image * ) NULL ) return ( DestroyImageList ( images ) ) ; if ( resized == ( Image * ) NULL ) return ( DestroyImageList ( images ) ) ; if ( images == ( Image",0
601,<S2SV_ModStart> valuelen ) ; if ( size > ( mp -> m_sb. sb_blocksize >> 3 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 3 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 3 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 3 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 3 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 3 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 3 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 3 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 3 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 3 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 3 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 3 ) ) { nblks *= 2 ; } },0
602,"<S2SV_ModStart> ) ; } if ( pcount > HSTORE_MAX_PAIRS ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, HSTORE_MAX_PAIRS ) ) ) ;",0
603,"<S2SV_ModStart> val ) ; if (! strcmp ( var, ""command"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> command"", r -> name ) ; else if ( strcmp ( var, ""rspfile"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; else if ( strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; else if ( strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ;",0
604,<S2SV_ModStart> ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) <S2SV_ModStart> ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) <S2SV_ModStart> ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; <S2SV_ModStart> ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_,0
605,"<S2SV_ModStart> ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), ( unsigned long long ) c -> id, c -> buf ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""PUT"", c -> buf, 4 ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> id, c -> buf ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""POST"", c -> buf, 4 ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu",0
606,"<S2SV_ModStart> vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> ] ; int i, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",0
607,"<S2SV_ModStart> G_KEY_FILE_KEEP_TRANSLATIONS, error ) ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) { g_error ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g",0
608,"<S2SV_ModStart> fh_dentry ) ; fh_lock ( fh ) ; error = fh_want_write ( fh ) ; if ( error ) goto out_errno ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access ) ; if ( error ) goto out_errno ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_write ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_errno ; error = inode -> i_op -> set_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_write ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_write ; fh_unlock ( fh ) ; <S2SV_ModEnd> fh_drop_write ( fh",0
609,"<S2SV_ModStart> ; BUG_IF ( unfolded_tree == NULL ) ; if ( tree_root == NULL ) { fprintf ( stdout, ""Unfolding <S2SV_blank> the <S2SV_blank> meta-tree <S2SV_blank> "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout, "" <S2SV_blank> done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue, & unfolded_tree, next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array, i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ], & ue -> fop, sizeof ( struct filter_op ) ) ; i ++ ; } } else { SAFE_REALLOC ( array, i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ], & ue -> fop, sizeof ( struct filter_op ) ) ; i ++ ; } }",0
610,"<S2SV_ModStart> char * temp_filename = osi_calloc ( <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> 5 ) ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ;",0
611,"<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) + pc -> lengthComponentIdent ; <S2SV_ModStart> case 1 : elen += pc -> lengthComponentIdent ; break ; case 2 : if ( tolen == 0 ) return - ENAMETOOLONG ; * p ++ = '/' ; tolen -- ; break ; case 3 : if ( tolen < 3 ) return - ENAMETOOLONG ; memcpy ( p, ""../"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 4 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 5 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 6 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 7 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 3 )",0
612,"<S2SV_ModStart> case NFSPROC_DELETE : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefh ( ndo, dp, v3 )!= NULL ) { if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefh ( ndo, dp, v3 )!= NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsproc_str, ""proc-%u"", proc ) ) ; }",0
613,"<S2SV_ModStart> case VTP_SUMMARY_ADV : if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %d]"", tlv_len ) ) ; break ; } <S2SV_ModStart> case VTP_UPDATE_TIMESTAMP_LEN : if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %d]"", tlv_len ) ) ; break ; } <S2SV_ModStart> case VTP_VLAN : if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %d]"", tlv_len ) ) ; break ; } <S2SV_ModStart> case VTP_VLAN : if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %d]"", tlv_len ) ) ; break ; } <S2SV_ModStart> case VTP_VLAN : if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %d",0
614,"<S2SV_ModStart> userData, target, ctxt -> parserContext <S2SV_ModStart>, target, ctxt -> parserContext <S2SV_ModStart>, target, ctxt -> parserContext <S2SV_ModStart>, target, ctxt -> parserContext <S2SV_ModStart>, target, ctxt -> parserContext <S2SV_ModStart>, target, ctxt -> parserContext <S2SV_ModStart>, target, ctxt -> parserContext <S2SV_ModStart>, target, ctxt -> parserContext <S2SV_ModStart>, target, ctxt -> parserContext <S2SV_ModStart>, target, ctxt -> parserContext",0
615,<S2SV_ModStart> ( sk ) ; * addr_len = sizeof ( * sin ) ; if ( flags & MSG_TRUNC ) { if ( copied < ulen ) { msg -> msg_flags |= MSG_TRUNC ; } else { if ( UDP_SKB_CB ( skb ) -> partial_cov ) { if ( UDP_SKB_CB ( skb ) -> partial_cov ) { if ( UDP_SKB_CB ( skb ) -> partial_cov ) { if ( UDP_SKB_CB ( skb ) -> partial_cov ) { if ( UDP_SKB_CB ( skb ) -> partial_cov ) { if ( UDP_SKB_CB ( skb ) -> partial_cov ) { if ( UDP_SKB_CB ( skb ) -> partial_cov ) { if ( UDP_SKB_CB ( skb ) -> partial_cov ) { if ( UDP_SKB_CB ( skb ) -> partial_cov ) { if ( UDP_SKB_CB ( skb ) -> partial_cov ) { if ( UDP_SKB_CB ( skb ) -> partial_cov ) { if ( UDP_SKB_CB,0
616,"<S2SV_ModStart> len ) { u_int <S2SV_ModEnd> pdu_type, pdu_len <S2SV_ModStart> trunc ; } while ( tlen >= sizeof ( rpki_rtr_pdu ) ) { ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; pdu_header = ( const rpki_rtr_pdu * ) tptr ; pdu_type = pdu_header -> pdu_type ; pdu_len = EXTRACT_32BITS ( pdu_header -> length ) ; if (! pdu_type ||! pdu_len ) { break ; } <S2SV_ModStart> trunc ; } while ( tlen >= sizeof ( rpki_rtr_pdu ) ) { ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; pdu_header = ( const rpki_rtr_pdu * ) tptr ; pdu_len = EXTRACT_32BITS ( pdu_header -> length ) ; if (! pdu_len ) { break ; } if ( tlen < pdu_len ) { goto trunc ; } if ( <S2SV_ModEnd> rpki_rtr_pdu_print (",0
617,"<S2SV_ModStart> int tagval ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> tsrequest <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"" ) ; return False ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"" ) ; return False ; } if (! s_check_rem ( s, length ) ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> tsrequest <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"" ) ; return False ; } if (! s_check_rem ( s, length ) ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"" ) ; return False ; } if (! s_check_rem ( s, length ) ) { logger ( Protocol, Error, ""cssp_read",0
618,"<S2SV_ModStart> ; int chars_processed <S2SV_ModEnd> ; int elt <S2SV_ModStart> ; int data_size ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ( ( i = * cp ++ ) & INDIR_MASK )!= INDIR_MASK ) { compress = 0 ; rp = cp + l ; } if ( i!= 0 ) while ( i && cp < ndo -> ndo_snapend ) { if (! compress ) { rp = cp + 1 ; compress = 1 ; } if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return ( NULL ) ; } continue ; } if ( ( i & INDIR_MASK ) == INDIR_MASK ) { if (! compress ) { rp = cp + 1 ; compress = 1 ; } if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars",0
619,"<S2SV_ModStart> valuelen ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, ""xfs_attr_rmtval_set"", args -> firstblock, args -> total, args -> rmtblkcnt <S2SV_ModEnd> ) ; error <S2SV_ModStart> valuelen ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, ""xfs_attr_rmtval_set"", args -> rmtblkcnt ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, ""xfs_attr_rmtval_set"", args -> rmtblkcnt ) ; if ( error ) { xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, ""xfs_attr_rmtval_set"", args -> firstblock, args -> total, args -> rmtblkcnt ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, ""xfs_attr_rmtval",0
620,"<S2SV_ModStart> ; int rv = Socket_print ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"" ""\\r\\n""",0
621,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", src ) ; exit ( 1 ) ; } <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> rv = copy_file <S2SV_ModStart> ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"" ) ; } unlink ( src ) ; }",0
622,<S2SV_ModStart> ; if ( <S2SV_ModEnd> rc!= BFA_STATUS_OK <S2SV_ModStart> return NULL ; <S2SV_ModEnd> hstats -> seconds_since_last_reset <S2SV_ModStart> secs_reset ; hstats -> lip_count = fcstats -> fc. lip_count ; hstats -> nos_count = fcstats -> fc. nos_count ; hstats -> error_frames = fcstats -> fc. error_frames ; hstats -> dumped_frames = fcstats -> fc. dropped_frames ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_sync_count = fcstats -> fc. loss_of_syncs ; hstats -> link_missed_count = fcstats -> fc. link_missed_count ; hstats -> link_missed_count = fcstats -> fc. link_missed_count ; hstats -> link_missed_count = fcstats -> fc. link_missed_count ; hstats -> link_missed_count = fcstats -> fc. link_missed_count ; hstats -> link_missed_count = fcstats -> fc. link_missed_count ; hstats -> link,0
623,"<S2SV_ModStart> value ) { if ( value ) { value -> x = MinF ( 1.0f, MaxF ( 0.0f, value -> x ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; } else { value -> x = MinF ( 1.0f, MaxF ( 0.0f, value -> x ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; } <S2SV_ModEnd> } <S2SV_null>",0
624,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_clear ( ) ; * out = line ; return 0 ; } if ( len >= PKT_LEN_SIZE ) { giterr_clear ( ) ; * out = line ; return flush_pkt ( head ) ; } len -= PKT_LEN_SIZE ; if ( * line == '#' ) ret = comment_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""OK <S2SV_blank> "" ) ) ret = ok_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""ERR <S2SV_blank> "" ) ) ret = err_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""NAK"" ) ) ret = nak_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""ERR <S2SV_blank> "" ) ) ret = err_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""ERR <S2SV_blank> "" ) ) ret = err_pkt ( head, line, len ) ; else if (! git__prefixcmp (",0
625,"<S2SV_ModStart> ; if ( unlikely (! mmget_still_valid ( mm ) ) ) return VM_FAULT_SIGSEGV ; if ( ( flags & FAULT_FLAG_EXEC ) &&! mm_forbids_zeropage ( mm ) ) { entry = pte_mkspecial ( my_zero_pfn ( address ), vma -> vm_page_prot ) ; page_table = pte_offset_map_lock ( mm, pmd, address, & ptl ) ; if ( page_table == NULL ) page_table = pte_offset_map_lock ( mm, pmd, address, & ptl ) ; if (! pte_none ( * page_table ) ) { entry = pte_mkwrite ( my_zero_pfn ( address ), vma -> vm_page_prot ) ; if ( vma -> vm_flags & VM_WRITE ) entry = pte_mkwrite ( pte_mkdirty ( entry ) ; page_table = pte_offset_map_lock ( mm, pmd, address, & ptl ) ; if (! pte_none ( * page_table ) )",0
626,<S2SV_ModStart> -> sasl_mechanism ; rec -> sasl_username = src -> sasl_username ; rec -> sasl_password = src -> sasl_password ;,0
627,"<S2SV_ModStart> cnt ) { <S2SV_ModEnd> if ( cnt <S2SV_ModStart> 1 ) ) { memcpy ( new_data, old_data, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; memcpy ( new_data + off + cnt - 1, old_data + off, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; memcpy ( new_data + off + cnt - 1, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; memcpy ( new_data + off + cnt - 1, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; memcpy ( new_data + off + cnt - 1, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; memcpy ( new_data + off, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt",0
628,"<S2SV_ModStart> ) bp2 ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_32BITS ( & dp -> ip6f_offlg ) & IP6F_OFF_MASK, sizeof ( struct ip6_frag ) ) ) ; } else { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_32BITS ( & dp -> ip6f_offlg ) & IP6F_OFF_MASK, sizeof ( struct ip6_frag ) ) ) ; } if ( ( EXTRACT_16BITS ( & dp -> ip6f_offlg ) & IP6F_OFF_MASK )!= 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_32BITS ( & dp -> ip6f_",0
629,"<S2SV_ModStart> trunc ; } if ( len - i < IP6MOPT_REFRESH_MINLEN ) { ND_PRINT ( ( ndo, ""(refresh: <S2SV_blank> %u)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""(refresh: <S2SV_blank> %u)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; break ; case IP6MOPT_ALTCOA : if ( len - i < IP6MOPT_ALTCOA_MINLEN ) { ND_PRINT ( ( ndo, ""(alt-CoA: <S2SV_blank> %s)"", ip6addr_string ( ndo, & bp [ i + 2 ] ) ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""(alt-CoA: <S2SV_blank> %s)"", ip6addr_string ( ndo, & bp [ i + 2 ] ) ) ) ; break ; case IP6MOPT_NONCEID : if ( len - i < IP6MOPT_NONCEID_MINLEN ) { ND_PRINT ( ( ndo, ""(",0
630,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
631,"<S2SV_ModStart> 0 ) ; if ( occ0 < 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""occ0 <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds"", ( int ) ( ( int ) ( occ0 / rowsize ) ) ) ; TIFFErrorExt ( tif -> tif_clientdata, ""occ0 <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds"", ( int ) ( ( int ) ( occ0 / rowsize ) ) ) ; return 0 ; } <S2SV_ModEnd> assert ( sp <S2SV_ModStart> 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""occ0 <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds"", ( int ) ( ( int ) ( occ0 / rowsize ) ) ) ; TIFFErrorExt ( tif -> tif_clientdata, ""occ0 <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds"", ( int ) ( ( int ) ( occ0 % rowsize ) ) ) ; assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { TIFFErrorExt ( tif, ""occ0 <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds"", ( int ) (",0
632,"<S2SV_ModStart>, o, datao ; if ( CHECKOVERFLOW ( datao, buf_size, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } c = exif_get_short ( buf + datao, n -> order ) ; if ( CHECKOVERFLOW ( c, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; }",0
633,<S2SV_ModStart> ; if ( ctx == NULL ) { * minor_status = KG_CTX_INCOMPLETE ; return GSS_S_NO_CONTEXT ; } if (,0
634,<S2SV_ModStart> = NULL ; hugetlbfs_put_super_nolock <S2SV_ModEnd> ( sbi ),0
635,"<S2SV_ModStart> HA_ERR_CRASHED : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> a <S2SV_blank> correct <S2SV_blank> index <S2SV_blank> definition. <S2SV_blank> You <S2SV_blank> need <S2SV_blank> to <S2SV_blank> recreate <S2SV_blank> it <S2SV_blank> before <S2SV_blank> you <S2SV_blank> can <S2SV_blank> do <S2SV_blank> a <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_NOT_A_TABLE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed",0
636,"<S2SV_ModStart> { int alloc = <S2SV_ModEnd> strlen ( string <S2SV_ModStart> string ) ) + 1 <S2SV_ModEnd> ; char * <S2SV_ModStart> unsigned long hex <S2SV_ModEnd> ; CURLcode res <S2SV_ModStart> CURL_convert_from_network ( handle <S2SV_ModEnd>, & in <S2SV_ModStart> 1 ) ; if (! res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; } if ( <S2SV_ModEnd> alloc > 0 <S2SV_ModStart> alloc > 0 ) { in = * string ; if ( ( '%' == in ) && ISXDIGIT ( string [ 1 ] ) && ISXDIGIT ( string [ 2 ] ) && ISXDIGIT ( string [ 3 ] ) ) { free ( ns ) ; return NULL ; } hex = strtoul ( hexstr, & ptr, 16 ) ; in = curlx_ultouc ( hex ) ; res = Curl_convert_from_network ( handle, & in, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } ns [ strindex ++ ] = in ; string ++ ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = str",0
637,"<S2SV_ModStart> ; RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""?{,%"" PFMT64d "",pc,=,},"", next_op -> jump ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""?{,%"" PFMT64d "",pc,=,},"", op ->",0
638,"<S2SV_ModStart> ( unlikely ( iov_iter_count ( i ) == 0 ) ) <S2SV_ModStart> again ; } if ( unlikely ( iov_iter_count ( i ) == 0 ) ) { bytes = min_t ( unsigned long, PAGE_CACHE_SIZE - offset, iov_iter_single_seg_count ( i ) ) ; goto again ; } pos += copied ; written += copied ; balance_dirty_pages_ratelimited ( mapping ) ; } while ( iov_iter_count ( i ) ) { pgoff_t pgoff = pos >> PAGE_CACHE_SHIFT ; bytes = min_t ( unsigned long, PAGE_CACHE_SIZE - offset, iov_iter_count ( i ) ) ; status = a_ops -> write_begin ( file, mapping, pos, bytes, flags, & page, & fsdata ) ; if ( unlikely ( status < 0 ) ) { status = - EFAULT ; break ; } status = a_ops -> write_end ( file, mapping, pos, bytes, flags, page, fsdata ) ; if ( unlikely ( status < 0 ) ) break ; status = a_ops -> write_end ( file, mapping, pos, bytes",0
639,"<S2SV_ModStart> } if ( unlikely ( len < ring -> rx_buffersize ) ) { int cnt = 0 ; s32 tmp ; while ( 1 ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; cnt ++ ; tmp -= ring -> rx_buffersize ; if ( tmp <= 0 ) break ; } desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; <S2SV_ModEnd> } drop_recycle_buffer :",0
640,"<S2SV_ModStart> pdu_free_state_ref = usm_free_usmStateReference ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_rgenerate_out_msg, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_rgenerate_out_msg, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_rgenerate_out_msg, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_rgenerate_out_msg, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_rgenerate_out_msg, NULL ) ; snmp_register_callback ( SNMP",0
641,"<S2SV_ModStart> |= SEEN ; if ( obj -> flags & ( UNINTERESTING | SEEN ) ) continue ; <S2SV_ModStart> |= SEEN ; if ( obj -> flags & ( UNINTERESTING | SEEN ) ) continue ; <S2SV_ModStart> |= SEEN ; if ( obj -> flags & ( UNINTERESTING | SEEN ) ) continue ; if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TREE ) { process_tree ( revs, ( struct tree * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_",0
642,<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) {,0
643,<S2SV_ModStart> ++ ) { if ( zsize > dlen / 3 ) { return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ++ ) { if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ++ ) { if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ++ ) { if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ++ ) { if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ++ ) { if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ++ ) { if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ++ ) { if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ++ ) { if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ++ ) { if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ++ ) { if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ++ ) { if ( zsize > d,0
644,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
645,"<S2SV_ModStart> idx ] ; # ifdef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if (! exten ||! exten -> efix_entry ) { snmp_log ( LOG_ERR, ""No <S2SV_blank> command <S2SV_blank> to <S2SV_blank> run\\n"" ) ; return SNMP_ERR_GENERR ; }",0
646,<S2SV_ModStart> case 3 : { CheckNumberPixels ( 4 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >>,0
647,"<S2SV_ModStart> timer ) ; mutex_unlock ( & register_mutex ) ; list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; } spin_unlock_irq ( & slave_active_lock ) ; mutex_unlock ( & register_mutex ) ;",0
648,"<S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; } if ( len < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank>",0
649,"<S2SV_ModStart> ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config, ""io.va"", ( binobj -> info )? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config, ""bin.baddr"", baseaddr ) ; r_config_set_i ( r -> config, ""asm.bits"", bits ) ; r_config_set ( r -> config, ""asm.arch"", arch ) ; r_config_set ( r -> config, ""asm.bits"", bits ) ; r_asm_use ( r -> assembler, arch ) ; r_core_bin_info ( r, R_CORE_BIN_ACC_ALL, R_CORE_BIN_SET, va, NULL, NULL ) ; r_core_bin_set_cur ( r, binfile ) ; return true ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
650,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void sas_probe_devices ( <S2SV_ModStart> sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart> * dev, * n ; spin_lock_irq ( & port -> dev_list_lock ) ; list_for_each_entry_safe ( dev, n, & port -> dev_list, disco_list_node ) { spin_unlock_irq ( & port -> dev_list_lock ) ; sas_probe_sata ( port ) ; } list_for_each_entry_safe ( dev, n, & port -> disco_list, disco_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_add_tail ( & dev -> dev_list_node, & port -> dev_list ) ; spin_unlock_irq ( & port -> dev_list_lock ) ; } sas_probe_sata ( port ) ; list_for_each_entry_safe ( dev, n, & port -> disco_list, disco_",0
651,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
652,"<S2SV_ModStart> ; int pkt_len <S2SV_ModEnd> ; char line <S2SV_ModStart> ; char line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; gboolean cap_dir ; char cap_dst [ 13 ] ; if ( wth -> file_encap == WTAP_ENCAP_UNKNOWN ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; <S2SV_ModStart> ; if (! parse_netscreen_hex_dump ( wth -> fh, pkt_len, cap_int, cap_dir, cap_dst, & wth -> phdr, wth -> frame_buffer, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> fh, pkt_len, cap_int, cap_dst, & wth -> phdr, wth -> frame_buffer, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> fh, pkt_len, cap_int, cap_dir, cap_dst, & wth -> phdr, wth -> frame_buffer, err,",0
653,"<S2SV_ModStart> 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> processed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; <S2SV_ModStart> 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; <S2SV_ModStart> 0 ) ; if (! dtls1_process_record ( s ) ) return ( 0 ) ; dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3 -> rrec. seq_num ) return ( 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; dtls1_buffer_record ( s, & ( s -> d1 -> processed_rcds ), s -> s3 -> rrec. seq_num ) ; }",0
654,<S2SV_ModStart> { int_fast32_t widthOverflow = gifFilePtr -> Image. Width - info -> originalWidth ; int_fast32_t heightOverflow = gifFilePtr -> Image. Height - info -> originalHeight ; if ( widthOverflow > 0 && heightOverflow > 0 ) { const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( widthOverflow * gifFilePtr -> Image. Height ) ) { const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_,0
655,"<S2SV_ModStart> can_read_key : if ( key_is_positive ( key ) ) { ret = - EINVAL ; goto error2 ; } <S2SV_ModStart> 0 ) { if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; } else { up_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; } } <S2SV_ModEnd> error2 : key_put",0
656,"<S2SV_ModStart> || cherokee_buffer_is_empty ( & conn -> validator -> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ;",0
657,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlob ( image ) ; if ( length!= GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length!= GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlob ( image ) ; if ( length!= GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlob ( image ) ; if ( length!= GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlob ( image ) ; if ( length!= GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlob ( image ) ; if ( length!= GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlob ( image ) ; if ( length!= GetBlob",0
658,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - 1 ; <S2SV_ModEnd> * val = <S2SV_ModStart> 0x7fffffff ) + 1 <S2SV_ModEnd> ; return 0,0
659,<S2SV_ModStart> ; break ; case RDS_CMSG_ATOMIC_FADD_SWAP : rm -> atomic. op_m_fadd. swap = args -> m_fadd. swap ; break ; case RDS_CMSG_ATOMIC_CSWP_SWAP : rm -> atomic. op_m_cswp. swap = args -> m_cswp. swap ; break ; case RDS_CMSG_ATOMIC_CSWP_SWAP : rm -> atomic. op_m_cswp. compare_mask = args -> cswp. compare_mask ; rm -> atomic. op_m_cswp. swap_mask = args -> m_cswp. swap_mask ; break ; case RDS_CMSG_ATOMIC_FADD_SWAP : rm -> atomic. op_m_fadd. swap = args -> m_fadd. swap ; break ; case RDS_CMSG_ATOMIC_CSWP_SWAP : rm -> atomic. op_m_cswp. compare = args -> cswp. compare ; rm -> atomic. op_m_cswp. swap = args -> cswp. swap ; break ; case RDS_CMSG_MASKED_,0
660,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> no <S2SV_blank> bus <S2SV_blank> info\\n"", __func__, dev -> name, dev -> bus ) ; return ; }",0
661,"<S2SV_ModStart> ; rdsdebug ( ""size <S2SV_blank> %zu <S2SV_blank> flags <S2SV_blank> 0x%x <S2SV_blank> timeo <S2SV_blank> %ld\\n"" <S2SV_ModEnd>, size,",0
662,"<S2SV_ModStart> ( spath ) ) { flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> (%u) <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", var, iface, strerror ( errno ) ) ; flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> (%u) <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", var, iface, strerror ( errno ) ) ; return - 1 ; } if ( access ( spath, F_OK )!= 0 ) return - 1 ; if ( flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> (%u) <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", name, val, iface, strerror ( errno ) ) ) { flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> (%u) <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", var, iface, strerror ( errno ) ) ; return - 1 ; }",0
663,<S2SV_ModStart> 0 ) { if ( s [ 9 ] == '\\0' ) { <S2SV_ModStart> ++ s ; if ( s [ 9 ] == '\\0' ) { <S2SV_ModStart> ++ s ; if ( s [ 9 ] == '\\0' ) { if ( s [ 9 ] == '\\0' ) { if ( s [ 9 ] == '\\0' ) { if ( s [ 9 ] == '\\0' ) { if ( s [ 9 ] == '\\0' ) { if ( s [ 9 ] == '\\0' ) { if ( s [ 9 ] == '\\0' ) { if ( s [ 9 ] == '\\0' ) { if ( s [ 9 ] == '\\0' ) { if ( s [ 9 ] == '\\0' ) { if ( s [ 9 ] == '\\0' ) { if ( s [ 9 ] == '\\0' ) { if ( s [ 9 ] == '\\0' ) { if ( s [ 9 ] == '\\0' ) { if ( s [ 9 ] == '\\0' ) { if ( s [ 9 ] == '\\0' ) { if ( s [ 9 ] == '\\0' ) { if ( s [ 9 ] == '\\0' ) { if (,0
664,"<S2SV_ModStart> 0 ) { if ( ctx -> hdrs [ i ] -> refno == - 1 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data ) ; } else if ( ctx -> hdrs [ i ] -> refno == - 1 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data ) ; } else if ( ctx -> hdrs [ i ] -> refno == - 1 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data ) ; } else if ( ctx -> hdrs [ i ] -> refno == - 1 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data ) ; } else if ( ctx -> hdrs [ i ] -> refno == - 1 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data ) ; } else if ( ctx -> hdrs [ i ] -> refno == - 1 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [",0
665,"<S2SV_ModStart> * objp ) ; break ; case XDR_UNPARSEABLE : if (! xdrs_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) )",0
666,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, TEMP_FAILURE_RETRY (",0
667,"<S2SV_ModStart> ; goto discard ; } if ( dh -> dccph_type == DCCP_PKT_RESET ) { dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ; return 1 ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; }",0
668,"<S2SV_ModStart> struct msixcap msixcap ; <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> msgnum ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size ) ; pci_populate_msixcap ( & msixcap, msgnum, barnum, tab_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_populate_msixcap ( & msixcap, msgnum, barnum, tab_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba",0
669,"<S2SV_ModStart> out ; if (! capable ( CAP_SYS_ADMIN ) ) { mutex_lock ( & upperdentry -> d_inode -> i_mutex ) ; err = notify_change ( upperdentry, attr, NULL ) ; mutex_unlock ( & upperdentry -> d_inode -> i_mutex ) ; } else { mutex_lock ( & dentry -> d_inode -> i_mutex ) ; err = notify_change ( dentry, attr, NULL ) ; mutex_unlock ( & dentry -> d_inode -> i_mutex ) ; } if (! capable ( CAP_SYS_ADMIN ) ) { mutex_unlock ( & dentry -> d_inode -> i_mutex ) ; err = notify_change ( dentry, attr, NULL ) ; mutex_unlock ( & dentry -> d_inode -> i_mutex ) ; } if (! capable ( CAP_SYS_ADMIN ) ) { mutex_unlock ( & dentry -> d_inode -> i_mutex ) ; err = notify_change ( dentry, attr, NULL ) ; mutex_unlock ( & dentry -> d_inode -> i_mutex ) ; }",0
670,<S2SV_ModStart> ( isspace ( <S2SV_ModEnd> * p ),0
671,"<S2SV_ModStart> ; if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; }",0
672,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
673,"<S2SV_ModStart> ; i < <S2SV_ModEnd> ctx -> msgcount <S2SV_ModStart> msgcount ; i ++ ) if ( mutt_str_strcmp ( line, ctx -> hdrs [ i ] -> data ) == 0 ) break ; if ( i == ctx -> msgcount ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; ctx -> hdrs [ i ] = mutt_header_new ( ) ; } else if ( i == ctx -> msgcount ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; ctx -> hdrs [ i ] = mutt_header_new ( ) ; } else if ( i == ctx -> msgcount ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; ctx -> hdrs [ i ] = mutt_header_new ( ) ; } else if ( i == ctx -> msgcount ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; ctx -> hdrs [ i ] = mutt_header_new (",0
674,"<S2SV_ModStart> NULL ) goto cleanup ; status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber",0
675,<S2SV_ModStart> ++ ) { if ( precno >= reslevel -> num_precincts_x * reslevel -> num_precincts_y ) { av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> cblkincl ) ; av_freep ( & prec -> cblk ) ; } if ( precno >= reslevel -> num_precincts_x * reslevel -> num_precincts_y ) { if ( precno >= reslevel -> num_precincts_x * reslevel -> num_precincts_y ) { av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> cblkincl ) ; av_freep ( & prec -> cblk ) ; } } if ( precno >= reslevel -> num_precincts_x * reslevel -> num_precincts_y ) { Jpeg2000Prec * prec = band -> prec + precno ; av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> cblkincl ) ; av_freep,0
676,"<S2SV_ModStart> == 0 ) { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } else { xmlWarningMsg ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } else { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } else { xmlWarningMsg ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } else { xmlWarningMsg ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank>",0
677,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
678,<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> ) { return ONLY_4X4 <S2SV_ModEnd> ; } else <S2SV_ModStart> else { if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL || cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL || cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ],0
679,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) { return <S2SV_ModEnd> malloc ( size <S2SV_ModStart> size ) ; } <S2SV_null> <S2SV_null>,0
680,"<S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval",0
681,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > sz <S2SV_ModStart> NULL ; } if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; },0
682,"<S2SV_ModStart> ; if ( memcmp ( buf1 -> data, buf2 -> data, sizeof ( TileBufferData ) ) ) { return - 1 ; } else if ( memcmp ( buf1 -> data, buf2 -> data, sizeof ( TileBufferData ) ) ) { return 1 ; } else if ( memcmp ( buf1 -> data, buf2 -> data, sizeof ( TileBufferData ) ) ) { return - 1 ; } else if ( memcmp ( buf1 -> data, sizeof ( TileBufferData ) ) { return 1 ; } else if ( memcmp ( buf1 -> data, buf2 -> data, sizeof ( TileBufferData ) ) ) { return 1 ; } else if ( memcmp ( buf1 -> data, buf2 -> data, sizeof ( TileBufferData ) ) ) { return - 1 ; }",0
683,"<S2SV_ModStart> } # endif if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & dir ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out3 ; } # ifdef CDF_DEBUG cdf_dump_dir ( & info, & h, & sst, & dir ) ; # endif if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & dir ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out3 ; } # ifdef CDF_DEBUG cdf_dump_dir ( & info, & h, & sst, & dir ) ; # endif if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & dir ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out4 ; } # ifdef CDF_DEBUG cdf_dump_dir ( & info, & h, & sst, & dir ) ; # endif if ( ( i = cdf_read_short",0
684,"<S2SV_ModStart> ; size_t sz ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; sz = ( size >> PAGE_SHIFT ) + 2 ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if (! info ) { info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info",0
685,"<S2SV_ModStart>! eof ) { if ( vars -> str. len > vars -> end - vars -> ptr ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Input <S2SV_blank> variables <S2SV_blank> exceeded <S2SV_blank> %"" PRIu64 "". <S2SV_blank> "" ""To <S2SV_blank> increase <S2SV_blank> the <S2SV_blank> limit <S2SV_blank> change <S2SV_blank> max_input_vars <S2SV_blank> in <S2SV_blank> php.ini."", max_vars ) ; return FAILURE ; } <S2SV_ModEnd> memmove ( vars",0
686,<S2SV_ModStart> ; if ( protocol < 0 || protocol > AX25_MAX_PROTOCOL ) return - EINVAL ; if (,0
687,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
688,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val, false <S2SV_ModStart> case 4 : rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src",0
689,"<S2SV_ModStart> list. name, false",0
690,"<S2SV_ModStart> secret, void * end <S2SV_ModEnd>, void * <S2SV_ModStart> * th ; struct ceph_crypto_key * old_key ; <S2SV_ModEnd> struct ceph_buffer * <S2SV_ModStart> out ; } <S2SV_ModEnd> dlen = ceph_x_decrypt <S2SV_ModStart>, end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } <S2SV_ModEnd> dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"" <S2SV_ModStart> ; struct ceph_crypto_key <S2SV_ModEnd> new_session_key ; struct ceph_buffer * new_ticket_blob ; unsigned long new_expires, new_renew_after ; u64 new_secret_id ; int ret ; dlen = ceph_x_decrypt ( secret, p, end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; dp = dbuf ; tkt_struct_v = ceph_decode_8 ( & dp ) ; tkt_struct_v = ceph_decode_",0
691,"<S2SV_ModStart> / 2 ; if ( count > MAX_HSTORE_SIZE / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, ( int ) ( MAX_HSTORE_SIZE / sizeof ( Pairs ) ) ) ) ;",0
692,<S2SV_ModStart> ; rq -> skip_clock_update = 1 ;,0
693,"<S2SV_ModStart> -> tlsext_tick_lifetime_hint ) ; if (! s -> method -> ssl_get_message ( s, SSL3_ST_CR_SESSION_TICKET_A, SSL3_ST_CR_SESSION_TICKET_B, SSL3_MT_NEWSESSION_TICKET, 16384, & ok ) ) { al = SSL_AD_DECODE_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, ERR_R_MALLOC_FAILURE ) ; goto err ; } memcpy ( p, s -> session -> tlsext_tick, ticklen ) ; if (! s -> method -> ssl_get_message ( s, SSL3_ST_CR_SESSION_TICKET_A, SSL3_ST_CR_SESSION_TICKET_B, SSL3_MT_NEWSESSION_TICKET, 16384, & ok ) ) { al = SSL_AD_DECODE_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, ERR_R_MALLOC_FAILURE ) ; goto err ;",0
694,"<S2SV_ModStart> b ) ; if ( b -> manager -> event == NULL ) { r = log_error_errno ( SYNTHETIC_ERRNO ( EADDRNOTAVAIL ), ""Device <S2SV_blank> %s <S2SV_blank> does <S2SV_blank> not <S2SV_blank> expose <S2SV_blank> keys <S2SV_blank> or <S2SV_blank> switches <S2SV_blank> relevant <S2SV_blank> to <S2SV_blank> us, <S2SV_blank> ignoring."", p ) ; if ( r < 0 ) { r = log_error_errno ( SYNTHETIC_ERRNO ( EADDRNOTAVAIL ), ""Device <S2SV_blank> %s <S2SV_blank> does <S2SV_blank> not <S2SV_blank> expose <S2SV_blank> keys <S2SV_blank> or <S2SV_blank> switches <S2SV_blank> relevant <S2SV_blank> to <S2SV_blank> us, <S2SV_blank> ignoring."", p ) ; if ( r < 0 ) { r = log_error_errno ( SYNTHETIC_ERRNO ( EADDRNOTAVAIL ), ""Device <S2SV_blank> %s <S2SV_blank> does <S2SV_blank> not <S2SV_blank> expose <S2SV_blank> keys <S2SV_blank> or <S2SV_blank> switches <S2SV_blank> relevant <S2SV_blank> to <S2SV_blank> us, <S2SV_blank> ignoring."", p ) ; if ( r < 0 ) { r = log_error_errno ( SYNTHETIC_ERRNO ( EADDRNOTAVAIL ), ""Device <S2SV_blank> %s <S2SV_blank> does <S2SV_blank> not <S2SV_blank> expose <S2SV_blank> keys <S2SV_blank> or <S2SV_blank> switches <S2SV_blank>",0
695,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
696,<S2SV_ModStart> = NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_ARRAY_REF <S2SV_ModStart> = NULL ; return ( * index_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_FIELD_REF_ENTRY <S2SV_ModStart> = NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_ARRAY_REF_ENTRY,0
697,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
698,"<S2SV_ModStart> ; REQ ( CHILD ( n, 1 ), funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; <S2SV_ModStart> ( is_async ) return AsyncFunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; else return FunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end",0
699,"<S2SV_ModStart> = 0 ; struct ip_sockaddr_storage addr = sctp_skaddr2addr ( sk, id ) ; struct ip_sockaddr_storage addr = sctp_skaddr2addr ( sk, id ) ; struct ip_sockaddr_storage addr = sctp_skaddr2addr ( sk, id ) ; if ( addr. sa_family!= AF_INET || addr. sa_family!= AF_INET6 ) return - EINVAL ; addr. sa_family = AF_INET6 ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET6 ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET6 ; addr. sa_family = AF_INET6 ; addr. sa_family = AF_INET6 ;",0
700,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
701,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
702,"<S2SV_ModStart> { if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) * ( * o_element_count ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) * ( * o_values ) ) ; * o_row_idx_id = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_column_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) * (",0
703,"<S2SV_ModStart> ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries <S2SV_ModStart> ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageData",0
704,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> eflags ) ) { rc = <S2SV_ModStart> ) ) ; if ( rc!= X86EMUL_CONTINUE ) return rc <S2SV_ModEnd> ; } <S2SV_null>,0
705,,1
706,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ; if ( resource_size ( res ) < HI3660_STUB_CLOCK_DATA ) return - EINVAL,0
707,"<S2SV_ModStart> : if ( psf -> header. size == 0 ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; } ; if ( psf -> header. size == 0 ) { psf_log_printf ( psf, "" <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
708,"<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; credits = ext4_writepage_trans_blocks ( inode, EXT4_HT_TRUNCATE, credits ) ; handle = ext4_journal_start ( inode, EXT4_HT_TRUNCATE, credits ) ; if ( IS_ERR ( handle ) ) { ret = PTR_ERR ( handle ) ; goto out_mutex ; }",0
709,"<S2SV_ModStart> uint32_t track_size ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ;",0
710,"<S2SV_ModStart> |= SOCK_SNDBUF_LOCK ; atomic_set ( & sk -> sk_omem_alloc, val * 2 ) ; <S2SV_ModStart> |= SOCK_SNDBUF_LOCK ; atomic_set ( & sk -> sk_omem_alloc, val * 2 ) ; <S2SV_ModStart> |= SOCK_SNDBUF_LOCK ; atomic_set ( & sk -> sk_omem_alloc, val * 2 ) ;",0
711,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; bh = <S2SV_ModStart> TAG_IDENT_LVD ) ; if ( le32_to_cpu ( lvd -> mapTableLength ) > sbi -> s_partitions ) goto out_bh ; for ( i = 0, offset = 0 ; i < sbi -> s_partitions && offset < le32_to_cpu ( lvd -> mapTableLength ) ; i ++, offset += gpm -> partitionMapLength ) { struct udf_part_map * map = & sbi -> s_partmaps [ i ] ; map = ( struct genericPartitionMap * ) & ( lvd -> partitionMaps [ offset ] ) ; type = gpm -> partitionMapType ; if ( type == 1 ) { struct genericPartitionMap1 * gpm1 = ( struct genericPartitionMap1 * ) gpm ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gpm1 -> partitionNum ) ; map -> s_partition_type = UDF_TYPE1_MAP",0
712,"<S2SV_ModStart> long n ; JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> header: <S2SV_blank> magic <S2SV_blank> 0x%x; <S2SV_blank> siz <S2SV_blank> %d; <S2SV_blank> res1 <S2SV_blank> %d; <S2SV_blank> res2 <S2SV_blank> %d; <S2SV_blank> off <S2SV_blank> %d\\n"" ""THAT <S2SV_blank> IS, <S2SV_blank> THE <S2SV_blank> JASPER <S2SV_blank> SOFTWARE <S2SV_blank> CANNOT <S2SV_blank> DECODE <S2SV_blank> ALL <S2SV_blank> TYPES <S2SV_blank> OF <S2SV_blank> BMP <S2SV_blank> DATA.\\n"" ""THAT <S2SV_blank> IS, <S2SV_blank> THE <S2SV_blank> JASPER <S2SV_blank> SOFTWARE <S2SV_blank> CANNOT <S2SV_blank> DECODE <S2SV_blank> ALL <S2SV_blank> TYPES <S2SV_blank> OF <S2SV_blank> BMP <S2SV_blank> DATA.\\n"" ""THAT <S2SV_blank> IS, <S2SV_blank> THE <S2SV_blank> JASPER <S2SV_blank> SOFTWARE <S2SV_blank> CANNOT <S2SV_blank> DECODE <S2SV_blank> ALL <S2SV_blank> TYPES <S2SV_blank> OF <S2SV_blank> BMP <S2SV_blank> DATA.\\n"" ""THAT <S2SV_blank> IS, <S2SV_blank> THE <S2SV_blank> JASPER <S2SV_blank> SOFTWARE <S2SV_blank> CANNOT <S2SV_blank> DECODE <S2SV_blank> ALL <S2SV_blank> TYPES <S2SV_blank> OF <S2SV_blank> BMP <S2SV_blank> DATA.\\n"" ""THAT <S2SV_blank> IS, <S2SV_blank> THE <S2SV_blank> JASPER <S2SV_blank> SOFTWARE <S2SV_blank> CANNOT <S2SV_blank> DECODE <S2SV_blank> ALL <S2SV_blank> TYPES <S2SV_blank> OF <S2SV_blank> BMP <S2SV_blank> DATA.\\n"" ""THAT <S2SV_blank> IS, <S2SV_blank> THE <S2SV_blank> JASPER",0
713,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
714,<S2SV_ModStart> u4_ofst ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
715,"<S2SV_ModStart> g_tv_comment, FILENAME_COMMENT ) ; if ( g_expert_mode ) { int n = select_next_page_no ( pages [ PAGENO_SUMMARY ]. page_no, NULL ) ; log_info ( ""switching <S2SV_blank> to <S2SV_blank> page_no:%d"", n ) ; gtk_notebook_set_current_page ( assistant, n ) ; return ; } } if ( pages [ PAGENO_REVIEW_DATA ]. page_widget == page ) { gtk_widget_show ( g_btn_detail ) ; gtk_toggle_button_set_active ( GTK_TOGGLE_BUTTON ( g_rb_custom_search ) ) ; } else if ( highlight_forbidden ( ) ) { add_sensitive_data_warning ( ) ; show_warnings ( ) ; gtk_expander_set_expanded ( g_exp_search, TRUE ) ; } if ( pages [ PAGENO_REVIEW_DATA ]. page_widget == page ) { gtk_widget_show ( g_btn_detail ) ; gtk_toggle_button_get_active ( g_tb_approve_",0
716,"<S2SV_ModStart> pad ; media_device_kpad_to_upad <S2SV_ModEnd> ( & entity <S2SV_ModStart> entity ) continue ; media_device_kpad_to_upad ( entity -> links [ l ]. source, & link. source ) ; media_device_kpad_to_upad ( entity -> links [ l ]. sink, & link. sink ) ; link. flags = entity -> links [ l ]. flags ; if ( copy_to_user ( ulink, & link, sizeof ( * ulink ) ) ) return - EFAULT ;",0
717,<S2SV_ModStart> ) ) { if ( prev_line_has_list_loosening_effect &&! ( line -> type & MD_LINE_HAS_LIST_LOOSEING_EFFECT ) ) { if (! ( line -> type & MD_LINE_HAS_LIST_LOOSEING_EFFECT ) ) { if (! ( line -> type & MD_LINE_HAS_LIST_LOOSEING_EFFECT ) ) { if (! ( line -> type & MD_LINE_HAS_LIST_LOOSEING_EFFECT ) &&! ( line -> type & MD_LINE_HAS_LIST_LOOSEING_EFFECT ) ) { if (! ( line -> type & MD_LINE_HAS_LIST_LOOSEING_EFFECT ) ) { if (! ( line -> type & MD_LINE_HAS_LIST_LOOSEING_EFFECT ) ) { if (! ( line -> type & MD_LINE_HAS_LIST_LOOSEING_EFFECT ) &&! ( line -> type & MD_LINE_HAS_LIST_LOOSEING_EFFECT ) ) { if (! ( line -> type &,0
718,"<S2SV_ModStart>, height ; if ( extent > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ; if ( extent > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> height ; if ( extent > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> height ; if ( extent > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> height ; if ( extent > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> height ; if ( extent > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> height ; if ( extent > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> height ; if ( extent > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
719,"<S2SV_ModStart> * client, const char * client_name, hdb_entry_ex * krbtgt, krb5_enctype krbtgt_etype, const krb5_principals spp, const krb5_data * enc_pa_data <S2SV_ModStart> trpolicy == TRPOLICY_ALWAYS_CHECK ) # define GLOBAL_ALLOW_PER_PRINCIPAL ( config -> trpolicy == TRPOLICY_ALLOW_PER_PRINCIPAL ) # define GLOBAL_ALLOW_DISABLE_TRANSITED_CHECK ( config -> trpolicy == TRPOLICY_ALWAYS_CHECK ) # define GLOBAL_ALLOW_PER_PRINCIPAL ( config -> trpolicy == TRPOLICY_ALLOW_PER_PRINCIPAL ) # define GLOBAL_ALLOW_DISABLE_TRANSITED_CHECK ( config -> trpolicy == TRPOLICY_ALWAYS_CHECK ) # define GLOBAL_ALLOW_PER_PRINCIPAL ( config -> trpolicy == TRPOLICY_ALLOW_DISABLE_TRANSITED_CHECK ) # define GLOBAL_ALLOW_PER_PRINCIPAL ( config -> trpolicy == TRPOLICY_ALWAYS_CHECK ) # define GLOBAL_ALLOW_PER_PRINCIPAL",0
720,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
721,"<S2SV_ModStart> -> loc_addr ; newinet -> inet_opt = NULL ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> inet_id = jiffies ; dccp_sync_mss ( newsk, dst_mtu ( dst ) ) ;",0
722,<S2SV_ModStart> struct xmlparser parser ; data -> portListing = NULL ; data -> portListingLength = 0 ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. data = data ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. data = data ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstarteltfunc = NameValueParserStartElt ; parser. endeltfunc = NameValueParserEndElt ; parser. datafunc = NameValueParserGetData ; parser. attfunc = 0 ;,0
723,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> offset!= 0 <S2SV_ModStart>, csum_partial ( <S2SV_ModEnd> skb_transport_header ( skb <S2SV_ModStart> + tlen, <S2SV_ModEnd> offset, 0 <S2SV_ModStart>, csum_partial ( <S2SV_ModEnd> skb_transport_header ( skb <S2SV_ModStart> + tlen, <S2SV_ModEnd> offset, 0",0
724,"<S2SV_ModStart> pfn ) ; printk ( KERN_ERR ""kvm_iommu_map_address:"" ""iommu <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> map <S2SV_blank> pfn=%llx\\n"", pfn ) ; r = - EINVAL ; goto unmap_pages ; } <S2SV_ModEnd> gfn += page_size <S2SV_ModStart> unmap_pages : if ( r ) { printk ( KERN_ERR ""kvm_iommu_map_address:"" ""iommu <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> unmap <S2SV_blank> pfn\\n"" ) ; printk ( KERN_ERR ""kvm_iommu_map_address:"" ""iommu <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> map <S2SV_blank> pfn=%llx\\n"", pfn ) ; goto unmap_pages ; } <S2SV_ModEnd> gfn += page_size <S2SV_ModStart> unmap_pages : if ( r ) { printk ( KERN_ERR ""kvm_iommu_map_address:"" ""iommu <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> unmap <S2SV_blank> pfn=%llx\\n"" ) ; printk ( KERN_ERR ""kvm_iommu_map_address:"" ""iommu <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> unmap <S2SV_blank> p",0
725,"<S2SV_ModStart> 4 ], <S2SV_ModEnd> cmd -> msg <S2SV_ModStart> msg_len ) ; if ( cmd -> msg_len < 6 ) return - EINVAL ;",0
726,<S2SV_ModStart> perf_event_context * ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } <S2SV_null>,0
727,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] ) ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [,0
728,"<S2SV_ModStart> sbi ) ; <S2SV_ModEnd> struct free_nid * <S2SV_ModStart> free_nid * i <S2SV_ModEnd> ; struct nat_entry <S2SV_ModStart> ; int err ; i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ; spin_lock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; radix_tree_preload_end ( ) ; if ( err ) { kmem_cache_free ( free_nid_slab, i ) ; return false ; } spin_lock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true",0
729,<S2SV_ModStart> ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ) ; flags -> color_mb_modes_flag = ctx -> dbg_color_mb_modes_flag ; flags -> color_b_modes_flag = ctx -> dbg_color_b_modes_flag ; flags -> display_mv_flag = ctx -> dbg_display_mv_flag ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
730,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; return - EBADR ; } memcpy ( & extra, RING_GET_REQUEST ( & vif -> tx, cons ), sizeof ( extra ) ) ; if ( unlikely ( extra. type >= XEN_NETIF_EXTRA_TYPE_MAX ) ) { netdev_err ( vif -> dev, ""Invalid <S2SV_blank> extra <S2SV_blank> type: <S2SV_blank> %d\\n"", extra. type ) ; return - EINVAL ; } memcpy ( & extras [ extra. type - 1 ], & extras [ extra. type - 1 ], sizeof ( extras [ extra. type - 1 ] ) ) ; vif -> tx. req_cons = ++ cons ; if ( unlikely ( extra. flags & XEN_NETIF_EXTRA_FLAG_MORE ) ) { netdev_err ( vif -> dev, ""Invalid <S2SV_blank> extra <S2SV_blank> flags: <S2SV_blank> %d\\n"", extra. flags ) ; return - EINVAL ; } memcpy ( & extras [ extra. type - 1 ], & extras [ extra. type - 1 ], sizeof (",0
731,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_satype = SADB_SATYPE_UNSPEC ; hdr -> sadb_msg_satype_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_msg_satype_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_msg_satype_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ; hdr -> sadb_msg_satype_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_msg_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_msg_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_msg_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_msg,0
732,<S2SV_ModStart> ) return ; if ( tu -> flags & SNDRV_TIMER_FLAG_TIMED_OUT ) { if ( tu -> flags & SNDRV_TIMER_FLAG_TIMED_OUT ) { if ( tu -> flags & SNDRV_TIMER_FLAG_TIMED_OUT ) { if ( tu -> flags & SNDRV_TIMER_FLAG_TIMED_OUT ) { if ( tu -> flags & SNDRV_TIMER_FLAG_TIMED_OUT ) { if ( tu -> flags & SNDRV_TIMER_FLAG_TIMED_OUT ) { if ( tu -> flags & SNDRV_TIMER_FLAG_TIMED_OUT ) { if ( tu -> flags & SNDRV_TIMER_FLAG_TIMED_OUT ) { if ( tu -> flags & SNDRV_TIMER_FLAG_TIMED_OUT ) { if ( tu -> flags & SNDRV_TIMER_FLAG_TIMED_OUT ) { if ( tu -> flags & SNDRV_TIMER_FLAG_TIMED_OUT ) { if ( tu -> flags & SND,0
733,"<S2SV_ModStart> - 1 ; if ( pos >= ld ) { luaL_error ( L, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> long"" ) ; return luaL_argerror ( L, pos + size <= ld, 2, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; return luaL_argerror ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; } if ( pos >= ld ) { luaL_error ( L, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> long"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> long"" ) ; return luaL_argerror ( L, pos + size <= ld, 2, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; return luaL_argerror ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; } if ( pos >= ld ) { luaL_error ( L, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> long"" ) ; luaL_argcheck ( L, pos + size",0
734,"<S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( int ) length ) ) ; goto trunc ; } <S2SV_ModEnd> ND_TCHECK2 ( * <S2SV_ModStart> struct olsr_msg6 ) ) ; if (! ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( int ) length ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( int ) length ) ) ; goto trunc ; } <S2SV_ModEnd> ND_TCHECK2 ( * <S2SV_ModStart> struct olsr_msg4 ) ) ; if (! ND_TTEST2 ( * tptr, msg_type ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( int ) length )",0
735,"<S2SV_ModStart> ; int n ; if ( len < sizeof ( struct oz_multiple_fixed ) + 1 ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; return ; } n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) / body -> unit_size ; while ( n -- ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } } break ; case OZ_DATA_F_ISOC_FIXED : { struct oz_isoc_fixed * body = ( struct oz_isoc_fixed * ) data_hdr ; int data_len = len - sizeof ( struct oz_isoc_fixed ) + 1 ; u8 * data = body -> data ; int count ; int i ; if (! unit_size ) break ; count = data_len / unit_size ; for ( i = 0 ; i < count ; i ++ ) { oz_hcd_data_ind ( usb_ctx -> hport",0
736,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> timer ) ; if ( cpi -> oxcf. lag_in_frames < 2 ) { assert ( 0 ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; } if ( cpi -> oxcf. lag_in_frames < 2 ) { assert ( 0 ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; } if ( cpi -> oxcf. lag_in_frames < 2 ) { assert ( 0 ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_,0
737,"<S2SV_ModStart> { fprintf ( stderr <S2SV_ModEnd>, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) <S2SV_ModStart> ; int rv = copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0 ) ; if ( rv ) fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } waitpid ( child, NULL, 0 ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""chown"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""chmod"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""chmod"" ) ;",0
738,"<S2SV_ModStart> IMAP_CMD_CONTINUE ) { mutt_debug ( 1, ""Error <S2SV_blank> parsing <S2SV_blank> STATUS\\n"" ) ; return ; } <S2SV_ModEnd> mailbox = idata <S2SV_ModStart> IMAP_FATAL ; return ; } status = imap_mboxcache_get ( idata, mailbox, 1 ) ; if ( status == NULL ) { mutt_debug ( 1, ""Error <S2SV_blank> parsing <S2SV_blank> STATUS\\n"" ) ; return ; }",0
739,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
740,"<S2SV_ModStart> ; if ( unlikely (! path [ depth ]. p_ext ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if (! path [ depth ]. p_ext ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if ( path [ depth ]. p_ext!= EXT_MAX_EXTENT ( path [ depth ]. p_hdr ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if ( path [ depth ]. p_ext!= EXT_MAX_EXTENT ( path [ depth ]. p_hdr ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT(path[depth]. p_hdr ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXT",0
741,"<S2SV_ModStart> } else { memset ( ptr_hbe_txposer, 0, sizeof ( ia_esbr_hbe_txposer_struct ) ) ; <S2SV_ModStart> } else { memset ( ptr_hbe_txposer, 0, sizeof ( ia_esbr_hbe_txposer_struct ) ) ; <S2SV_ModStart> } else { memset ( ptr_hbe_txposer, 0, sizeof ( ia_esbr_hbe_txposer_struct ) ) ; if ( ptr_hbe_txposer == NULL ) { memset ( ptr_hbe_txposer, 0, sizeof ( ia_esbr_hbe_txposer_struct ) ) ; } else { memset ( ptr_hbe_txposer, 0, sizeof ( ia_esbr_hbe_txposer_struct ) ) ; } else { memset ( ptr_hbe_txposer, 0, sizeof ( ia_esbr_hbe_txposer_struct ) ) ; if ( ptr_hbe_txposer == NULL ) { memset ( ptr_hbe_txposer, 0, sizeof ( ia_esbr_hbe_txposer_struct ) ) ;",0
742,"<S2SV_ModStart> 2 ] ; # if 0 <S2SV_ModStart> 7 ] ; # endif <S2SV_ModStart> # if 0 x_origin = get_ushort ( & tga [ 8 ] ) ; y_origin = get_ushort ( & tga [ 10 ] ) ; image_w = get_ushort ( & tga [ 12 ] ) ; pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; * flip_image = ( unsigned int ) image_w ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if (! id ) { fprintf ( stderr, ""tga_readheader: <S2SV_blank> memory <S2SV_blank> out\\n"" ) ; return 0 ; } if (! fread ( id, id_len, 1, fp ) ) { fprintf ( stderr, ""\\nError: <S2SV_blank> fread <S2SV_blank> return <S2SV_blank> a <S2SV_blank>",0
743,<S2SV_ModStart> ; ssize_t ret ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) return - EPERM ;,0
744,"<S2SV_ModStart> tp ) { struct timespec res ; <S2SV_ModStart> ) == CPUCLOCK_SCHED ) res = div_u64_rem ( cpu. sched, NSEC_PER_SEC, & tp -> tv_sec ) ; if ( res ) res = div_u64_rem ( res, NSEC_PER_SEC, & tp -> tv_nsec ) ; else res = div_u64_rem ( res, NSEC_PER_SEC, & tp -> tv_sec ) ; if ( res ) res = div_u64_rem ( res, NSEC_PER_SEC, & tp -> tv_nsec ) ; else res = div_u64_rem ( res, NSEC_PER_SEC ) ; if ( res ) res = div_u64_rem ( res, NSEC_PER_SEC, & tp -> tv_sec ) ; else res = div_u64_rem ( res, NSEC_PER_SEC ) ; if ( res ) res = div_u64_rem ( res, NSEC_PER_SEC, & tp -> tv_nsec ) ; else res = div_u64_rem ( res, NSEC_PER_",0
745,<S2SV_ModStart> tif_dir ; uint32 <S2SV_ModEnd> nstrips ; if,0
746,"<S2SV_ModStart> lua_module ) ; if ( parsed_require_line == NULL ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02314 ) ""Unable <S2SV_blank> to <S2SV_blank> compile <S2SV_blank> VM <S2SV_blank> for <S2SV_blank> authz <S2SV_blank> provider <S2SV_blank> %s"", prov_spec -> name ) ; return AUTHZ_GENERAL_ERROR ; } spec = create_vm_spec ( & pool, r, cfg, server_cfg, NULL, 0, ""authz <S2SV_blank> provider"" ) ; L = ap_lua_get_lua_state ( pool, spec, r ) ; if ( L == NULL ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; } lua_getglobal ( L, -",0
747,"<S2SV_ModStart> * prev ; unsigned long stack_guard_gap ; int error ; stack_guard_gap = ( vma -> vm_end - address ) >> PAGE_SHIFT ; <S2SV_ModStart> address ) ; if ( stack_guard_gap ) { stack_guard_gap = ( vma -> vm_end - address ) >> PAGE_SHIFT ; grow = ( vma -> vm_start - address ) >> PAGE_SHIFT ; error = - ENOMEM ; if ( grow <= vma -> vm_pgoff ) { error = acct_stack_growth ( vma, size, grow ) ; if (! error ) { spin_lock ( & mm -> page_table_lock ) ; anon_vma_interval_tree_pre_update_vma ( vma ) ; anon_vma_interval_tree_post_update_vma ( vma ) ; } } <S2SV_ModEnd> } <S2SV_null>",0
748,"<S2SV_ModStart> { umode_t mode ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart>, & mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> error = xfs_set_mode <S2SV_ModStart> inode -> i_mode, & mode, & acl ) ; <S2SV_ModEnd> if ( error",0
749,"<S2SV_ModStart> long mountflags, <S2SV_ModEnd> char * data <S2SV_ModStart> # endif if ( mount ( fsname, target, fstype, mountflags & ~ MS_REMOUNT, data ) < 0 ) { SYSERROR ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\'"", fsname, target ) ; return - 1 ; } if ( mount ( fsname, target, fstype, mountflags & ~ MS_BIND, data ) < 0 ) { SYSERROR ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target ) ; return - 1 ; } if ( mount ( fsname, target, fstype, mountflags & ~ MS_REMOUNT, data ) < 0 ) { SYSERROR ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\'"", fsname, target ) ; return - 1 ; } if ( mount ( fsname, target, fstype, mountflags & ~ MS_REMOUNT, data ) < 0 ) { SYSERROR ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\'""",0
750,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
751,<S2SV_ModStart> -> it_overrun = 0 <S2SV_ModEnd> ; ++ timr,0
752,"<S2SV_ModStart> ; if (! proto_end || strchr ( proto_end, <S2SV_ModStart> ; if (! check_url_component ( url, quiet, ""protocol"", c -> protocol ) < 0 || check_url_component ( url, quiet, ""host"", c -> host ) < 0 || check_url_component ( url, quiet, ""path"", c -> path ) < 0 || check_url_component ( url, quiet, ""path"", c -> path ) < 0 || check_url_component ( url, quiet, ""protocol"", c -> protocol ) < 0 || check_url_component ( url, quiet, ""path"", c -> path ) < 0 || check_url_component ( url, quiet, ""username"", c -> username ) < 0 || check_url_component ( url, quiet, ""password"", c -> password ) < 0 || check_url_component ( url, quiet, ""username"", c -> username ) < 0 || check_url_component ( url, quiet, ""password"", c -> password ) < 0 || check_url_component ( url, quiet, ""password"", c -> password ) < 0 || check_",0
753,<S2SV_ModStart> static_key * done_key <S2SV_ModEnd> ) { static <S2SV_ModStart> flags ) ; <S2SV_ModEnd> return true ;,0
754,"<S2SV_ModStart> -> actual ; <S2SV_ModEnd> if ( io_data <S2SV_ModStart> -> ffs_eventfd &&! ( io_data -> kiocb -> ki_flags & IOCB_EVENTFD ) ) eventfd_signal ( io_data -> ffs -> ffs_eventfd, 1 ) ; <S2SV_ModEnd> usb_ep_free_request ( io_data <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
755,"<S2SV_ModStart> ; if ( ip_is_fragment ( skb ) ) { IPCB ( skb ) -> flags |= IPSKB_FORWARD ; return ip_forward_csum ( skb ) ; } <S2SV_ModEnd> iph -> frag_off <S2SV_ModStart> ; if ( ip_is_fragment ( skb ) ) { IP_INC_STATS ( dev_net ( rt -> dst. dev ), IPSTATS_MIB_FRAGFAILS ) ; icmp_send ( skb, ICMP_DEST_UNREACH, ICMP_FRAG_NEEDED, htonl ( mtu ) ) ; goto drop ; } if ( ip_is_fragment ( skb ) ) { IP_INC_STATS ( dev_net ( rt -> dst. dev ), IPSTATS_MIB_FRAGFAILS ) ; icmp_send ( skb, ICMP_DEST_UNREACH, ICMP_FRAG_NEEDED, htonl ( mtu ) ) ; } if ( ip_is_fragment ( skb ) ) { IP_INC_STATS ( dev_net ( rt -> dst. dev ), IPSTATS_MIB_FRAGFAILS )",0
756,"<S2SV_ModStart> ) ) ; if ( st == NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; if ( dh -> md ) release_md ( dh -> md ) ; return ; } <S2SV_ModStart> ) ) ; if ( st == NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; if ( dh -> md ) release_md ( dh -> md ) ; return ; } e = ikev2_parent_inR1outI2_tail ( pcrc, r ) ; if ( dh -> md!= NULL ) { complete_v2_state_transition ( & st -> st_suspended_md, e ) ; if ( dh -> md ) release_md ( dh -> md ) ; } if ( st == NULL ) { complete_v2_state_transition ( & st -> st_suspended_md, e ) ; if ( dh -> md!= NULL ) { complete_v2_state_transition ( & st -> st_suspended_md, e ) ; if",0
757,"<S2SV_ModStart> prep ) { struct trusted_key_options * new_o = NULL ; <S2SV_ModStart> 0 ] ; char * datablob = kmalloc ( datalen + 1, GFP_KERNEL ) ; if (! datablob ) { ret = - ENOMEM ; goto out ; } memcpy ( datablob, prep -> data, datalen ) ; datablob [ datalen ] = '\\0' ; ret = datablob_parse ( datablob, new_p, new_o ) ; if ( ret!= Opt_update ) { ret = - EINVAL ; kfree ( new_p ) ; goto out ; } if (! new_p -> keyhandle ) { ret = - EINVAL ; kfree ( new_p ) ; goto out ; } if (! new_p -> key_len ) { pr_info ( ""trusted_key: <S2SV_blank> key_parse <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kfree ( new_p ) ; goto out ; } if ( new_o -> pcrlock ) { pr_info ( ""trusted_key: <S2SV_blank> pcrlock <S2SV_blank> failed <S2SV_blank> (%d)\\n"", new_o -> pcrlock )",0
758,<S2SV_ModStart> } v |= ( uint_fast32_t ) <S2SV_ModEnd> c ; if,0
759,"<S2SV_ModStart>, lci_o ; if ( ( skb = skb_dequeue ( & rose_loopback_queue <S2SV_ModEnd> ) )!= <S2SV_ModStart> 2 ] ; if ( ( dest = ( rose_address * ) ( skb -> data + 4 ) ) == NULL ) { kfree_skb ( skb ) ; continue ; } if ( frametype == ROSE_RESET_REQUEST ) { sk = rose_find_socket ( lci_o, rose_loopback_neigh ) ; if ( sk ) { if ( rose_process_rx_frame ( sk, skb ) == 0 ) kfree_skb ( skb ) ; continue ; } if ( frametype == ROSE_CLEAR_REQUEST ) { if ( ( dev = rose_dev_get ( dest ) ) == NULL ) { kfree_skb ( skb ) ; continue ; } if ( ( dev = rose_dev_get ( dest ) ) == NULL ) { kfree_skb ( skb ) ; } } else { kfree_skb ( skb ) ; } }",0
760,"<S2SV_ModStart> & KVM_MEM_LOG_DIRTY_PAGES ) { kvm_arch_free_memory_slot ( kvm, memslot ) ; kvm_arch_free_memory_slot ( kvm, memslot ) ; kvm_arch_free_memory_slot ( kvm, memslot ) ; kvm_arch_free_memory_slot ( kvm, memslot ) ; kvm_arch_free_memory_slot ( kvm, memslot ) ; } else if ( ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) ) { kvm_arch_free_memory_slot ( kvm, memslot ) ; } else if ( ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags &",0
761,<S2SV_ModStart> indev!= NULL && indev -> ifa_list,0
762,"<S2SV_ModStart> fdt ) ; if ( count >= max_regions ) return - FDT_ERR_TOO_MANY_REGIONS ; <S2SV_ModStart> = nextoffset ; if ( count >= max_regions ) return - FDT_ERR_TOO_MANY_REGIONS ; <S2SV_ModStart> case FDT_PROP : include = want >= 2 ; break ; case FDT_NOP : include = want >= 2 ; stop_at = offset ; <S2SV_ModStart> FDT_ERR_BADSTRUCTURE ; if ( str_in_list ( str, exc_prop, exc_prop_count ) ) return - FDT_ERR_BADSTRUCTURE ; if ( str_in_list ( str, exc_prop, exc_prop_count ) ) include = 0 ; break ; case FDT_END_NODE : depth -- ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BAD_DEPTH ; <S2SV_ModStart> FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_",0
763,"<S2SV_ModStart> if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! ( config -> qmode & QMODE_NO_STORE_WRAPPER ) &&! WavpackAddWrapper ( wpc, & dff_chunk_header, sizeof ( DFFChunkHeader ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! ( config -> qmode & QMODE_IGNORE_LENGTH ) && dff_chunk_header. ckDataSize && dff_chunk_header. ckDataSize + 12!= infilesize ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header",0
764,"<S2SV_ModStart> ; if (! PKCS7_is_detached ( p7 ) && data_body == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; } <S2SV_ModStart> : if (! PKCS7_is_detached ( p7 ) && data_body == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; } <S2SV_ModStart> : if (! PKCS7_is_detached ( p7 ) && data_body == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; } <S2SV_ModStart> : if (! PKCS7_is_detached ( p7 ) && data_body == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA",0
765,"<S2SV_ModStart> ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; } if ( ( loops % 100 ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), listLength ( server. clients ), zmalloc_used_memory ( ) ) ; } if ( ( loops % 100 ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; } if ( ( loops % 100 ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use""",0
766,"<S2SV_ModStart> } if ( ( options -> flags & UV_PROCESS_SETGID ) && setgid ( options -> gid, options -> uid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setgid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETUSER ) && setuser ( options -> user, options -> user ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuser()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_NOEXEC ) && seteuid ( options -> euid, options -> euid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""seteuid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_NOEXEC ) && seteuid ( options -> euid, options -> euid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""seteuid()"" ) ; _exit ( 127 ) ; }",0
767,"<S2SV_ModStart> ; int ret = <S2SV_ModEnd> - EOPNOTSUPP ; <S2SV_ModStart> EOPNOTSUPP ; } if ( wlen > MAX_XFER_SIZE ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } if ( rbuf == NULL || rlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } if ( rbuf == NULL || rlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } if ( wo ) ret = dvb_usb_generic_write ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; else ret = dvb_usb_generic_rw ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; mutex_unlock ( & d -> data_mutex ) ;",0
768,"<S2SV_ModStart> channel ) ; if ( client -> priv -> protocol_timeout == 0 ) { g_debug ( ""GsmXSMPClient: <S2SV_blank> Protocol <S2SV_blank> timeout <S2SV_blank> is <S2SV_blank> zero"" ) ; client -> priv -> protocol_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_protocol_timeout, client ) ; } else { g_debug ( ""GsmXSMPClient: <S2SV_blank> Protocol <S2SV_blank> timeout <S2SV_blank> is <S2SV_blank> zero"" ) ; client -> priv -> protocol_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_protocol_timeout, client ) ; }",0
769,<S2SV_ModStart> - 1 ; if ( i + book -> dim > n ) return - 1 ;,0
770,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
771,"<S2SV_ModStart> new_root_item ) ; if ( ret ) { kfree ( new_root_item ) ; kfree ( path ) ; goto root_item_alloc_fail ; } dir_item = btrfs_find_dir_item ( path, root -> root_key. objectid, & new_uuid ) ; if (! dir_item ) { kfree ( path ) ; goto root_item_alloc_fail ; } new_root_item = kmalloc ( sizeof ( * dir_item ), GFP_NOFS ) ; if (! new_root_item ) { kfree ( path ) ; goto root_item_alloc_fail ; } dir_item = btrfs_find_root_item ( path, root -> root_key. objectid, & new_uuid ) ; if (! dir_item ) { kfree ( path ) ; goto root_item_alloc_fail ; } dir_item = btrfs_find_dir_item ( path, root -> root_key. objectid, & new_uuid ) ; if (! new_root_item ) { kfree ( path ) ; goto root_item_alloc_fail",0
772,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; spin_unlock <S2SV_ModStart> unix_tot_inflight -- ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
773,"<S2SV_ModStart> channel_map!= NULL ) { size_t chanmap_size = map_info -> num_channels * sizeof ( psf -> channel_map [ 0 ] ) ; if ( chanmap_size > sizeof ( psf -> channel_map [ 0 ] ) ) return SFE_MALLOC_FAILED ; <S2SV_ModStart> NULL ) { size_t chanmap_size = map_info -> num_channels * sizeof ( psf -> channel_map [ 0 ] ) ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; <S2SV_ModStart> NULL ) { size_t chanmap_size = map_info -> num_channels * sizeof ( psf -> channel_map [ 0 ] ) ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; memcpy ( psf -> channel_map, map_info -> channel_map, chanmap_size ) ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ;",0
774,"<S2SV_ModStart> { if ( check_scale_factors <S2SV_ModEnd> ( other_w, <S2SV_ModStart> 16 ) { if ( check_scale_factors ( other_w, other_h, this_w, this_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value ; } else { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y",0
775,<S2SV_ModStart> { int32_t nestsize ; if ( ms -> buffer_size_longs > size ) return GPMF_ERROR_TOO_BIG ;,0
776,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
777,"<S2SV_ModStart> ip6t_entry ) && ( <S2SV_ModStart> verdict < 0 && unconditional ( & e -> ipv6 ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT",0
778,"<S2SV_ModStart> -> xrefs = safe_calloc ( <S2SV_ModEnd> pdf -> n_xrefs <S2SV_ModStart> -> n_xrefs ) ; if (! pdf -> xrefs ) { ERR ( ""Failed <S2SV_blank> to <S2SV_blank> locate <S2SV_blank> the <S2SV_blank> startxref <S2SV_blank> token. <S2SV_blank> "" ""This <S2SV_blank> might <S2SV_blank> be <S2SV_blank> corrupt <S2SV_blank> PDF.\\n"" ) ; return - 1 ; }",0
779,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
780,<S2SV_ModStart> sk ) ; spin_lock_bh ( & sk -> sk_receive_queue ) ; <S2SV_ModStart> NULL ) ; spin_unlock_bh ( & sk -> sk_receive_queue ) ; <S2SV_ModStart> ) ; } spin_unlock_bh ( & sk -> sk_receive_queue ) ;,0
781,"<S2SV_ModStart> ; BIO * <S2SV_ModEnd> tmpin = NULL <S2SV_ModStart>, tmpin ) <S2SV_ModEnd> ; if (",0
782,"<S2SV_ModStart> = rcu_dereference_protected ( np -> rxopt, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) ;",0
783,<S2SV_ModStart> ( ) ; unregister_netdev_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ( ) ; unregister_netdev_subsys <S2SV_ModEnd> ( & sctp_protosw_ops <S2SV_ModStart> ( ) ; unregister_netdev_subsys <S2SV_ModEnd> ( & sctp_protosw_ops <S2SV_ModStart> ( ) ; unregister_netdev_subsys <S2SV_ModEnd> ( & sctp_protosw_ops <S2SV_ModStart> ( ) ; unregister_netdev_subsys <S2SV_ModEnd> ( & sctp_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del,0
784,"<S2SV_ModStart> cs_flags ) ; service_named_bind_command ( ""chanserv"", & chanserv_conf ) ; service_named_bind_command ( ""chanserv"", & chanserv_conf <S2SV_ModStart> cs_flags ) ; service_named_bind_command ( ""chanserv_conf"", & chanserv_conf <S2SV_ModStart> cs_flags ) ; service_named_bind_command ( ""chanserv_conf"", & chanserv_conf <S2SV_ModStart> cs_flags ) ; service_named_bind_command ( ""chanserv_conf"", & chanserv_conf ) ; service_named_bind_command ( ""chanserv_conf"", & chanserv_conf <S2SV_ModStart> cs_flags ) ; service_named_bind_command ( ""chanserv_conf"", & chanserv_conf <S2SV_ModStart> cs_conf ) ; service_named_bind_command ( ""chanserv_conf"", & chanserv_conf <S2SV_ModStart> cs_conf ) ; service_named_bind_command ( ""chanserv_conf"", & chanserv_conf ) ; service_named_bind_command ( ""chanserv_conf"", & chanserv_conf",0
785,<S2SV_ModStart> ptr ) { struct net_device * dev = ( ( struct in_ifaddr * ) ptr ) -> ifa_dev <S2SV_ModEnd> ; struct netdev_notifier_info <S2SV_ModStart> struct netdev_notifier_info info ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; if ( dev -> priv_flags & IFF_TX_SKB_SHARING ) info. flags |= IFF_TX_SKB_SHARING ; if ( info. flags & IFF_TX_SKB_SHARING ) info. flags |= IFF_TX_SKB_SHARING ; if ( dev -> priv_flags & IFF_TX_SKB_SHARING ) info. flags |= IFF_TX_SKB_SHARING ; if ( dev -> priv_flags & IFF_TX_SKB_SHARING ) info. flags |= IFF_TX_SKB_SHARING ; if ( info. flags & IFF_TX_SKB_SHARING ) info. flags |= IFF_TX_SKB_SHARING ;,0
786,"<S2SV_ModStart> ) ; if (! mm ) { leave_mm ( smp_processor_id ( ) ) ; base_pages_to_flush = TLB_FLUSH_ALL ; } if ( ( start!= TLB_FLUSH_ALL ) &&! ( vmflag & VM_HUGETLB ) ) base_pages_to_flush = ( end - start ) >> PAGE_SHIFT ; if ( base_pages_to_flush > tlb_single_page_flush_ceiling ) { base_pages_to_flush = TLB_FLUSH_ALL ; count_vm_tlb_event ( NR_TLB_LOCAL_FLUSH_CEILING, base_pages_to_flush ) ; local_flush_tlb ( ) ; } else { base_pages_to_flush = ( end - start ) >> PAGE_SHIFT ; if ( base_pages_to_flush > tlb_single_page_flush_ceiling ) { base_pages_to_flush = TLB_FLUSH_ALL ; count_vm_tlb_event ( NR_TLB_LOCAL_FLUSH_CEILING, base_pages_",0
787,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> ) ; ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", stream -> psnr_totals [ i ] / stream -> psnr_count ) ; }",0
788,<S2SV_ModStart> val ) { <S2SV_ModEnd> int i =,0
789,<S2SV_ModStart> task ) { <S2SV_ModEnd> complete ( &,0
790,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
791,"<S2SV_ModStart> ; if ( addr_str_length > sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1 ; } <S2SV_ModStart> NULL ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1 ; } <S2SV_ModStart> NULL ) { if ( addr_str_length > sizeof ( orgid ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1 ; } <S2SV_ModStart> NULL ) { if ( addr_str_length > sizeof ( orgid ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1 ; } <S2SV_ModStart> NULL ) { if ( addr_str_length > sizeof ( orgid ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1",0
792,"<S2SV_ModStart> case BPLIST_TRUE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = TRUE ; data -> length = 1 ; return node_create ( data, NULL ) ; } case BPLIST_FALSE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = FALSE ; data -> length = 1 ; return node_create ( NULL, data ) ; } case BPLIST_TRUE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = TRUE ; data -> length = 1 ; return node_create ( NULL, data ) ; } case BPLIST_TRUE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = TRUE ; data -> length = 1 ; return node_create ( NULL, data ) ; } case BPLIST_FALSE : { plist_data_t data = plist_new_plist_",0
793,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> TRACE_DEBUG ( ""CIDER=0x%04"" <S2SV_ModStart> ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; <S2SV_ModStart> ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { memPoolFree ( context -> txBuffer ) ; memPoolFree ( context -> rxBuffer ) ; memPoolFree ( context -> txBuffer ) ; memPoolFree ( context -> rxBuffer ) ; memPoolFree ( context -> txBuffer ) ;",0
794,<S2SV_ModStart> all_channels_lock ) ; mutex_lock ( & pch -> file. mutex ) ; <S2SV_ModStart> dead = 1 ; mutex_unlock ( & pch -> file. mutex ) ;,0
795,"<S2SV_ModStart> { struct btrfs_dir_item * dir_item ; <S2SV_ModStart> XATTR_REPLACE ) { dir_item = btrfs_lookup_dir_item ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; <S2SV_ModStart> out ; } else { dir_item = btrfs_lookup_dir_item ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } ret = btrfs_delete_one_dir_name ( trans, root, path, dir_item ) ; if ( ret <S2SV_ModEnd> ) goto out <S2SV_ModStart> out ; } else { di = btrfs_lookup_xattr ( NULL, root, path, btrfs_ino ( inode ), name, name_len, 0 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } if (! di &&! value ) goto out ; btrfs_release_path ( path ) ; } again : ret =",0
796,"<S2SV_ModStart> ; if ( buf_len < 1 ) { pr_err ( ""%s: <S2SV_blank> buffer <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", __func__, buf_len ) ; return - 1 ; } <S2SV_ModStart> ; if ( buf_len < 1 ) { pr_err ( ""%s: <S2SV_blank> buffer <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", __func__, buf_len ) ; return - 1 ; } <S2SV_ModStart> 1 ; } if ( buf_len < 1 ) { pr_err ( ""%s: <S2SV_blank> buffer <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", __func__, buf_len ) ; return - 1 ; } if ( buf_len < 1 ) { pr_err ( ""%s: <S2SV_blank> buffer <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", __func__, buf_len ) ; return - 1 ; } <S2SV_ModStart> 1 ; } if ( buf_len < 1 ) { pr_err ( ""%s: <S2SV_blank> buffer <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", __func__, buf_len ) ; return - 1 ;",0
797,<S2SV_ModStart> client ) ; g_object_unref <S2SV_ModEnd> ( & client,0
798,"<S2SV_ModStart> encode_block_intra, & arg ) ; vp9_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
799,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) <S2SV_ModEnd> ) return - <S2SV_ModStart> ret ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kzfree ( new_p ) ; goto out ; } ret = key_seal ( new_p, new_o ) ; if ( ret < 0 ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kzfree ( new_p ) ; goto out ; } ret = key_seal ( new_p, new_o ) ; if ( ret < 0 ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kzfree ( new_p ) ; goto out ; } ret = key_seal ( new_p, new_o ) ; if ( ret < 0 ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kzfree ( new_p ) ; goto",0
800,"<S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NE",0
801,"<S2SV_ModStart> ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } <S2SV_ModEnd> bootstage_mark ( bootstage_id <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_FORMAT_OK ) ; if ( fit_uname ) { bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_UNIT_NAME ) ; noffset = fit_image_get_node ( fit, fit_uname ) ; } else { bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_NO",0
802,<S2SV_ModStart> len ) {vpn_packet_t <S2SV_ModEnd> outpkt ; outpkt,0
803,"<S2SV_ModStart> out5 : rdmsrl_safe ( MSR_EFER, & host_efer ) ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_msr_bitmap_index ) ; ++ i ) kvm_define_shared_msr ( i, vmx_msr_bitmap_index [ i ] ) ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_msr_bitmap_index ) ; ++ i ) kvm_define_shared_msr ( i, vmx_msr_bitmap_index [ i ] ) ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_msr_bitmap_index ) kvm_define_shared_msr ( i, vmx_msr_bitmap_index [ i ] ) ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_msr_bitmap_index ) ; ++ i ) kvm_define_shared_msr ( i, vmx_msr_bitmap_index [ i ] ) ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_msr_bit",0
804,"<S2SV_ModStart> if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size ) { sdb_set ( sdb, ""link_section_name"", link_section_name, 0 ) ; } else if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size ) { sdb_set ( sdb, ""link_section_name"", link_section_name, 0 ) ; } else if ( bin -> shstrtab && link_shdr && link_shdr -> sh_name < bin -> shstrtab_size ) { sdb_set ( sdb, ""link_section_name"", link_section_name, 0 ) ; } else if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size ) { sdb_set ( sdb, ""link_section_name"", link_section_name, 0 ) ; } else if ( bin -> shstrtab && link_shdr && link_shdr -> sh_name < bin -> shstrtab_size ) { sdb_set ( sdb,",0
805,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ),0
806,<S2SV_ModStart> refresh_alt_ref_frame ) )? ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> avg_frame_bandwidth <S2SV_ModEnd> + af_ratio - <S2SV_ModStart> 1 ) : ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval + af_ratio - 1 ) ; # else target = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # endif,0
807,"<S2SV_ModStart> ++ ) { if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s",0
808,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
809,"<S2SV_ModStart> INDENT_INCR ; } if ( cmd == HTML_DT ) { check_minimum0 ( tbl, 0 ) ; addcontentssize ( tbl, offset ) ; } else { check_minimum0 ( tbl, 0 ) ; addcontentssize ( tbl, offset ) ; }",0
810,"<S2SV_ModStart> ; if ( e < b ) { DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u]"", line, b, e, ( size_t ) ( e - b ), CDF_SEC_SIZE ( h ), sst -> sst_len ) ) ; errno = EFTYPE ; return - 1 ; } if ( e < b || ( size_t ) ( e - b ) <= CDF_SEC_SIZE ( h ) * sst -> sst_len || CDF_SEC_SIZE ( h ) * sst -> sst_len < CDF_SEC_SIZE ( h ) * sst -> sst_len ) { DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u",0
811,"<S2SV_ModStart> } # endif # define YYSTACK_RELOCATE ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; # define YYSTACK ( N ) ( yyssa -= ( N ) ) int yyssp = ( N ), yyssp -= ( N ) ) int yyvsa = ( YYSTYPE * ) yyvs ; YYSIZE_T yyvs = ( YYSTYPE * ) yyvsa + 1 ; # ifdef YYSTACK_RELOCATE ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; # else # define YYSTACK ( N ) ( yyssa -= ( N ) ) int yyssp = ( N ), yyssp -= ( N ) ) int yyvsa = ( YYSTYPE * ) yyvs ; YYSIZE_T yyvs = ( YYSTYPE * ) yyvsa + 1 ; # ifdef yyoverflow { YYSTYPE * yyss1 = yyss ; yyoverflow ( YY_ ( ""memory <S2SV_blank> exhausted"" ), & yyss1, yysize * sizeof ( * yyssp ), & yyvs",0
812,<S2SV_ModStart> ib ] ; # if CONFIG_VP8_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12,0
813,<S2SV_ModStart> FN_REFLEN ] ; if ( ( i = ( int ) strlength ( opt_basedir ) ) > FN_REFLEN ) { error = - 1 ; goto exit ; } if ( ( i = ( int ) strlength ( opt_basedir ) ) > FN_DIRLEN ) { error = - 1 ; goto exit ; } if ( ( i = ( int ) strlength ( opt_basedir ) - 1 ) > FN_DIRLEN ) { error = - 1 ; goto exit ; } if ( ( i = ( int ) strlength ( opt_basedir ) - 1 ) > FN_DIRLEN ) { error = - 1 ; goto exit ; } if ( ( i = ( int ) strlength ( opt_basedir ) ) > FN_DIRLEN ) { error = - 1 ; goto exit ; } if ( ( i = ( int ) strlength ( opt_basedir ) - 1 ) > FN_DIRLEN ) { error = - 1 ; goto exit ; } if ( ( i = ( int ) strlength ( opt_basedir ) - 1 ) > FN_DIRLEN ) { my_free ( opt_basedir ) ; opt_basedir = my_strdup ( opt_basedir ) ; opt,0
814,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) <S2SV_ModEnd> ) zap =",0
815,"<S2SV_ModStart> hci_filter * f = rcu_dereference_protected ( sk -> sk_filter, sock_owned_by_user ( sk ) ) ; if ( f -> type_mask == HCI_UNSPEC ) { uf. type_mask = f -> type_mask ; uf. opcode = f -> opcode ; } else { uf. type_mask = * ( ( u32 * ) f -> type_mask + 0 ) ; uf. type_mask = * ( ( u32 * ) f -> type_mask + 1 ) ; uf. event_mask [ 0 ] = * ( ( u32 * ) f -> event_mask + 0 ) ; uf. event_mask [ 1 ] = * ( ( u32 * ) f -> event_mask + 1 ) ; }",0
816,"<S2SV_ModStart> { int n = min_t ( int, data_end - data, sizeof ( clear_buffer ) ) ; if ( n < 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } <S2SV_ModStart> { int n = min_t ( int, data_end - data, sizeof ( clear_buffer ) ) ; if ( n < 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } <S2SV_ModStart> int ) ( data_end - data ) ; if ( n < 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } if ( pbi -> ec_active ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } else { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank>",0
817,"<S2SV_ModStart> getprivs_ret ret ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
818,"<S2SV_ModStart>. sack_needed ; sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, asoc -> peer. i. initial_tsn, GFP_ATOMIC ) ;",0
819,"<S2SV_ModStart> cleanup ; } if ( copy_from_user ( & fibsize, & user_srb -> count, sizeof ( u32 ) ) ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> copy <S2SV_blank> data <S2SV_blank> size <S2SV_blank> from <S2SV_blank> user\\n"" ) ) ; rcode = - EFAULT ; goto cleanup ; }",0
820,"<S2SV_ModStart> 0 ) ; if ( cc0 < 0 ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Invalid <S2SV_blank> cc0 <S2SV_blank> value."", cc0 ) ; return 0 ; } <S2SV_ModStart> 0 ) ; if ( cc0 < 0 ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Invalid <S2SV_blank> cc0 <S2SV_blank> value."", cc0 ) ; return 0 ; }",0
821,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> proto_unreach_timer, jiffies + ( HZ / 20 ) ) ) sctp_association_put ( asoc ) ; goto out_unlock ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> proto_unreach_timer, jiffies + ( HZ / 20 ) ) ) sctp_association_put ( asoc ) ; goto out_unlock ; } if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> proto_unreach_timer, jiffies + ( HZ / 20 ) )",0
822,"<S2SV_ModStart> input_data, size_t input_size <S2SV_ModEnd>, int flags <S2SV_ModStart> { action = ACTION_KILL_TAIL <S2SV_ModEnd> ; break ; <S2SV_ModStart> } max_bytes_matched = ( int ) yr_min ( input_size, RE_SCAN_LIMIT ) ; if ( max_bytes_matched < 0 ) { action = ACTION_NONE <S2SV_ModEnd> ; break ; <S2SV_ModStart> } max_bytes_matched = ( int ) yr_min ( input_size, RE_SCAN_LIMIT ) ; max_bytes_matched = ( int ) yr_min ( input_size, RE_SCAN_LIMIT ) ; bytes_matched = max_bytes_matched - max_bytes_matched % character_size ; bytes_matched = 0 ; error = _yr_re_fiber_create ( & fibers, & storage -> fiber_pool, & fiber ) ; fail_if_error ( error ) ; fiber -> ip = re_code ; fibers. head = fiber ; fibers. tail = fiber ; error = _yr_re_fiber_sync ( & fibers, & storage -> fiber_pool, fiber ) ; fail_if_",0
823,"<S2SV_ModStart> returnrate, int * returndistortion <S2SV_ModEnd>, int * <S2SV_ModStart> ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int = 0 ; # endif mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_mode. rd = INT_MAX ; best_mode. intra_rd = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; # endif mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int = 0 ; best_ref",0
824,"<S2SV_ModStart>, UD_VECTOR ) ; set_exception_intercept ( svm, MC_VECTOR ) ; set_intercept ( svm, INTERCEPT_INTR ) ; set_intercept ( svm, INTERCEPT_SELECTIVE_CR0 ) ; set_intercept ( svm, INTERCEPT_RDPMC ) ; set_intercept ( svm, INTERCEPT_CPUID ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVLPG ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVLPG ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTER",0
825,<S2SV_ModStart> goto error ; if ( statbuf. st_size < 0 ) goto error ; if ( h -> hdr -> magic [ 0 ] == '\\0' || h -> hdr -> magic [ 1 ] == '\\0' || h -> hdr -> magic [ 2 ] == '\\0' || h -> hdr -> magic [ 3 ] == '\\0' || h -> hdr -> magic [ 4 ] == '\\0' || h -> hdr -> magic [ 5 ] == '\\0' || h -> hdr -> magic [ 6 ] == '\\0' || h -> hdr -> magic [ 7 ] == '\\0' || h -> hdr -> magic [ 8 ] == '\\0' || h -> hdr -> magic [ 9 ] == '\\0' || h -> hdr -> magic [ 10 ] == '\\0' || h -> hdr -> magic [ 11 ] == '\\0' || h -> hdr -> magic [ 12 ] == '\\0' || h -> hdr -> magic [ 13 ] == '\\0' || h -> hdr -> magic [ 14 ] == '\\0' || h -> hdr -> magic [ 14 ] == '\\0',0
826,"<S2SV_ModStart> const cdf_stream_t * sst <S2SV_ModEnd>, const uint64_t <S2SV_ModStart> break ; } str = cdf_clsid_to_mime ( clsid, clsid2desc ) ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s""",0
827,"<S2SV_ModStart> ; UWORD8 u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id <S2SV_ModEnd> ; UWORD16 i2_max_frm_num <S2SV_ModStart> u1_seq_parameter_set_id ) ; i2_max_frm_num = ih264d_get_max_frm_num ( ps_bitstrm ) ; u1_level_idc = ih264d_get_level_idc ( ps_bitstrm ) ; u1_level_idc = ih264d_get_level_idc ( ps_bitstrm ) ; u1_max_frm_num = ih264d_get_max_frm_num ( ps_bitstrm ) ; i2_max_frm_num = ih264d_get_max_frm_num ( ps_bitstrm ) ; u1_max_frm_num = ih264d_get_max_frm_num ( ps_bitstrm ) ; <S2SV_ModEnd> uc_constraint_set1_flag = ih264d_get_bit_h264 <S2SV_ModStart> ps_bit",0
828,"<S2SV_ModStart> ) ; err |= __put_user ( length, & up -> length ) ; if ( err ) return - EFAULT",0
829,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ; vpx_svc_parameters_t * const svc_params = va_arg ( args, vpx_svc_parameters_t * <S2SV_ModEnd> ) ; VP9_COMP <S2SV_ModStart> ; if ( svc_params <S2SV_ModEnd> == NULL ) <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; svc_params -> spatial_layer_id = params -> spatial_layer ; svc_params -> temporal_layer_id = params -> temporal_layer ; svc_params -> lst_fb_idx = params -> lst_fb_idx ; svc_params -> gld_fb_idx = params -> gld_fb_idx ; svc_params -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; set_encoder_config ( & ctx -> oxcf, & ctx -> extra_",0
830,"<S2SV_ModStart> ; if ( fhdr -> frag_off == IP6_MF ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ; } else { if ( fhdr -> frag_off == IP6_MF ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ; } else { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_",0
831,"<S2SV_ModStart> out ) { <S2SV_ModEnd> copyFunc cf ; <S2SV_ModStart> uint16 input_compression, input_photometric ; if ( compression!= ( uint16 ) - 1 ) { TIFFSetField ( out, TIFFTAG_COMPRESSION, compression ) ; return FALSE ; } TIFFGetFieldDefaulted ( in, TIFFTAG_COMPRESSION, & input_compression ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_PHOTOMETRIC, & input_photometric ) ; if ( jpegcolormode!= JPEGCOLORMODE_RGB ) { TIFFSetField ( out, TIFFTAG_JPEGCOLORMODE, jpegcolormode ) ; if ( subsamplinghor!= 1 || subsamplingver!= 1 ) { TIFFSetField ( out, TIFFTAG_YCBCRSUBSAMPLING, & subsamplinghor, & subsamplingver ) ; if ( subsamplinghor!= 1 || subsamplingver!= 1 ) { TIFFSetField ( out, TIFFTAG_YCBCRSUBSAMPLING, & subsamplinghor, & subsamplingver ) ; if ( subsamplinghor!= 1 || subsamplingver!= 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s:",0
832,"<S2SV_ModStart> { # if defined ( HAVE_LSTAT ) if ( a -> pst == NULL ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } else if ( S_ISLNK ( st. st_mode ) ) { archive_set_error ( & a -> archive, 0, ""Removing <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; } else { return ( ARCHIVE_FAILED ) ; } } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a",0
833,"<S2SV_ModStart> ; if ( safe_mount <S2SV_ModEnd> ( hostpath,",0
834,"<S2SV_ModStart> sbi ) ; struct kernel_lb_addr loc ; struct indirectEntry * ie = NULL ; struct indirectEntry * ie = ( struct indirectEntry * ) ibh -> b_data ; if (! ie ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( ident == TAG_IDENT_IE && ie ) { struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ie -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if (! ie ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( ident == TAG_IDENT_FE || ident == TAG_IDENT_EFE ) { memcpy ( & iinfo -> i_location, & loc, sizeof ( struct fileEntry ) ) ; make_bad_inode",0
835,"<S2SV_ModStart> -> tx_size ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y [ tx_size_y ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv ] ; int i = 0 ; i < w ; i ++ ) { memset ( & lfm -> lfl_y [ index ], filter_level, w ) ; index += 8 ; } } * above_y |= above_prediction_mask [ block_size ] << shift_y ; * above_uv |= above",0
836,"<S2SV_ModStart> dst_size ) { uint16_t size ; <S2SV_ModStart> data_end ) ; size = ff_amf_tag_size ( data, data_end ) ; if ( size < 0 || size >= data_end - data ) return - 1 ; <S2SV_ModStart> - 1 ; size = ff_amf_tag_size ( data, data_end ) ; if ( size < 0 || size >= data_end - data ) return - 1 ; <S2SV_ModStart> += size ; if ( size == namelen &&! memcmp ( data - size, name, namelen ) ) { switch ( * data ++ ) { case AMF_DATA_TYPE_NUMBER : snprintf ( dst, dst_size, ""%g"", av_int2double ( AV_RB64 ( data ) ) ) ; break ; case AMF_DATA_TYPE_BOOL : snprintf ( dst, dst_size, ""%s"", * data? ""true"" : ""false"" ) ; break ; case AMF_DATA_TYPE_STRING : len = bytestream_get_be16 ( & data ) ; av_strlcpy ( dst, data, FFMIN ( len + 1, dst_size )",0
837,"<S2SV_ModStart> mq_flush_lock, flags ) ; flush_rq -> tag = fq -> flush_pending_idx ; <S2SV_ModEnd> list_for_each_entry_safe ( rq <S2SV_ModStart> n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; WARN_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error ) ; list_for_each_entry_safe ( rq, n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; WARN_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error ) ; } if ( queued || fq -> flush_queue_delayed ) { WARN_ON ( q -> mq_ops ) ; blk_run_queue_async ( q ) ; }",0
838,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1 ;,0
839,<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) {,0
840,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; return <S2SV_ModStart> wc ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
841,"<S2SV_ModStart> ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue || * ovalue == '\\0' ) continue ; if ( smatch ( option, ""name"" ) ) { httpSetRouteCookie ( state -> route, scaselessmatch ( ovalue, ""name"" ) ) ; } else { httpSetRouteSessionVisibility ( state -> route, scaselessmatch ( ovalue, ""visible"" ) ) ; } else if ( smatch ( option, ""name"" ) ) { httpSetRouteCookie ( state -> route, scaselessmatch ( ovalue, ""name"" ) ) ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; }",0
842,"<S2SV_ModStart> __be32 daddr ; struct ip_options_rcu * inet_opt ; struct ip_options_rcu * inet_opt <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; inet_opt = rcu_dereference_protected ( inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr",0
843,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
844,"<S2SV_ModStart> * mgr_hdl ; pid_t <S2SV_ModEnd> pid ; memset <S2SV_ModStart> instance ) ; pid = getpid ( ) ; switch ( mgr ) { case FM_MGR_PM : mgr_prefix = HSM_FM_SCK_PM ; mgr_hdl = & hdl -> pm_hdl ; break ; case FM_MGR_FE : mgr_prefix = HSM_FM_SCK_FE ; mgr_hdl = & hdl -> fe_hdl ; break ; default : return FM_CONF_INIT_ERR ; } sprintf ( s_path, ""%s%s%d"", HSM_FM_SCK_PREFIX, mgr_prefix, hdl -> instance ) ; sprintf ( c_path, ""%s%s%d_C_%lu"", HSM_FM_SCK_PREFIX, mgr_prefix, hdl -> instance, ( long unsigned ) pid ) ; if ( * mgr_hdl == NULL ) { if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF",0
845,"<S2SV_ModStart> == NULL || <S2SV_ModEnd> replySize < ( <S2SV_ModStart> ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } * ( effect_param_t * ) pReplyData = effect_get_param ( effect, ( effect_param_t * ) pCmdData ) ; if ( * ( effect_param_t * ) pReplyData == NULL || * replySize < ( int ) sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } * ( effect_param_t * ) pReplyData = effect_get_param ( effect, ( effect_param_t * ) pCmdData ) ; if ( * ( effect_param_t * ) pReplyData == NULL || * replySize < ( int ) sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; }",0
846,"<S2SV_ModStart> ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImage",0
847,"<S2SV_ModStart> = rcu_dereference_protected ( np -> rxopt, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) ;",0
848,<S2SV_ModStart> key_data [ i ]. key_data_type [ 0 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 0 ] = 0 ; if ( key_data [ i ]. key_data_length [ 0 ] == 0 ) { err = EINVAL ; goto cleanup ; } <S2SV_ModStart> key_data [ i ]. key_data_type [ 0 ] = KRB5_KDB_SALTTYPE_NORMAL ; if ( key_data [ i ]. key_data_length [ 0 ] == 0 ) { err = EINVAL ; goto cleanup ; } <S2SV_ModStart> key_data [ i ]. key_data_length [ 0 ] = 0 ; if ( key_data [ i ]. key_data_length [ 0 ] == 0 ) { err = EINVAL ; goto cleanup ; } <S2SV_ModStart> key_data [ i ]. key_data_type [ 0 ] = KRB5_KDB_SALTTYPE_NORMAL ; if ( key_data [ i ]. key_data_length [ 0 ] == 0 ) { err = EINVAL ; goto cleanup ; },0
849,"<S2SV_ModStart> ) ; } if ( F -> strict ) { checkfutureword ( J, F, catchvar ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; } if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; } if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not",0
850,"<S2SV_ModStart> { if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_values = 0 ; } else if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; } else { * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; *",0
851,<S2SV_ModStart> 0x02 ) ; memcpy <S2SV_ModEnd> ( sbuf +,0
852,"<S2SV_ModStart> uint8 result ; uint16 <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", __func__ ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", __func__ ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", __func__ ) ; return False ; }",0
853,<S2SV_ModStart> ; if ( s4u_x509_user!= NULL ) { if ( s4u_x509_user -> user!= NULL ) { if ( s4u_x509_user -> user!= NULL ) { if ( s4u_x509_user -> user!= NULL ) { if ( s4u_x509_user -> user!= NULL ) { if ( s4u_x509_user -> user!= NULL ) { if ( s4u_x509_user -> user!= NULL ) { if ( s4u_x509_user -> user!= NULL ) { if ( s4u_x509_user -> user!= NULL ) { if ( s4u_x509_user -> user!= NULL ) { if ( s4u_x509_user -> user!= NULL ) { if ( s4u_x509_user -> user!= NULL ) { if ( s4u_x509_user -> user!= NULL ) { if ( s4u_x509_user -> user!= NULL ) { if ( s4u_x509_user -> user!= NULL ) { if ( s4u_x509_user -> user!= NULL,0
854,<S2SV_ModStart> && ( ( ctxt -> instate == XML_PARSER_START ) || ( ( ctxt -> instate == XML_PARSER_END ) || ( ( ctxt -> instate == XML_PARSER_END_TAG ) || ( ( ctxt -> instate == XML_PARSER_END_TAG ) || ( ( ctxt -> instate == XML_PARSER_END_TAG ) || ( ( ctxt -> instate == XML_PARSER_END_TAG ) || ( ( ctxt -> instate == XML_PARSER_END_TAG ) ) || ( ( ctxt -> instate == XML_PARSER_END_TAG ) ) || ( ( ctxt -> instate == XML_PARSER_END_TAG ) && ( ( ctxt -> instate == XML_PARSER_END_TAG ) && ( ( ctxt -> instate == XML_PARSER_END_TAG ) && ( ( ctxt -> instate == XML_PARSER_END_TAG ) && ( ( ctxt -> instate == XML_PARSER_END_TAG ) && ( ctxt -> instate == XML_PARSER_END_TAG ) ) || ( ( ctxt -> instate == XML_PARSER_END_TAG ) && ( ( ctxt -> instate == XML_PARSER_END_,0
855,"<S2SV_ModStart> return ret ; if ( macvlan_cnt > I40E_MAX_MACVLAN_ENTRIES ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> macvlan <S2SV_blank> count: <S2SV_blank> %d"", macvlan_cnt ) ; return - EINVAL ; }",0
856,"<S2SV_ModStart> { if ( * rsize >= 17 && rdesc [ 16 ] == 0xff && rdesc [ 12 ] == 0x02 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Cherry <S2SV_blank> Cymotion <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 11 ] = rdesc [ 17 ] = 0x02 ; } else if ( * rsize >= 18 && rdesc [ 11 ] == 0x3c && rdesc [ 12 ] == 0x02 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Cherry <S2SV_blank> Cymotion <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 12 ] = rdesc [ 16 ] = 0xff ; } else if ( * rsize >= 18 && rdesc [ 11 ] == 0x3c && rdesc [ 12 ] == 0x02 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Cherry <S2SV_blank> Cymotion <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 11 ] = rdesc [ 17 ] = 0x03 ; }",0
857,"<S2SV_ModStart> = simple_strtoul ( pos, & pos, 10 ) ; if ( idx >= map -> nr_extents ) { ret = - EFSCORRUPTED ; goto out ; } if ( idx >= map -> nr_extents ) { ret = - EFSCORRUPTED ; goto out ; } <S2SV_ModStart> = simple_strtoul ( pos, & pos, 10 ) ; if ( idx >= map -> nr_extents ) { ret = - EFSCORRUPTED ; goto out ; } <S2SV_ModStart> = simple_strtoul ( pos, & pos, 10 ) ; if ( idx >= map -> nr_extents ) { ret = - EFSCORRUPTED ; goto out ; } if ( idx >= map -> nr_extents ) { ret = - EFSCORRUPTED ; goto out ; } <S2SV_ModStart> = simple_strtoul ( pos, & pos, 10 ) ; if ( idx >= map -> nr_extents ) { ret = - EFSCORRUPTED ; goto out ; }",0
858,"<S2SV_ModStart> } } } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( action, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( cmd_cb ( core_ptr, ""ds"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ;",0
859,"<S2SV_ModStart> sr ) { smb_ofile_t <S2SV_ModEnd> * of = <S2SV_ModStart> ) ; } if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) { ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_node ) ; ( void ) smb_mbc_encodef ( & sr -> reply, ""wwl"", 4, 0 ) ; return ( SDRC_SUCCESS ) ; } if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) { ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_node ) ; ( void ) smb_fsop_encodef ( sr, of -> f_cr, of -> f_node ) ; ( void ) smb_mbc_encodef ( & sr -> reply, ""wwl"", 4, 0 ) ; return ( SDRC_SUCCESS ) ; }",0
860,<S2SV_ModStart> * dataptr ; jas_uchar <S2SV_ModEnd> * datacnt ;,0
861,<S2SV_ModStart> = yv12_fb_new -> y_stride <S2SV_ModEnd> ; int recon_uv_stride <S2SV_ModStart> = yv12_fb_new -> uv_stride <S2SV_ModEnd> ; int recon_y_row <S2SV_ModStart> = yv12_fb_new -> y_offset <S2SV_ModEnd> ; int recon_uv_row <S2SV_ModStart> = yv12_fb_new -> uv_offset <S2SV_ModEnd> ; int recon_y_row <S2SV_ModStart> = yv12_fb_new -> y_offset <S2SV_ModEnd> ; int recon_uv_row <S2SV_ModStart> = yv12_fb_new -> uv_offset <S2SV_ModEnd> ; int recon_y_row <S2SV_ModStart> = yv12_fb_new -> y_offset <S2SV_ModEnd> ; int recon_uv_row <S2SV_ModStart> = yv12_fb_new -> uv_offset <S2SV_ModEnd> ; int recon_uv_row <S2SV_ModStart> = yv12_fb_new -> uv_offset <S2SV_ModEnd> ; int recon_y_row <S2SV_ModStart> = yv12_fb_new -> y_offset <S2SV_ModEnd> ; int recon_uv_row <S2SV_ModStart> = yv12_fb_new -> uv_offset <S2SV_ModEnd> ; int recon_uv_row <S2SV_ModStart> = yv12_fb_new ->,0
862,"<S2SV_ModStart> = AF_TIPC ; memset ( addr, 0, sizeof ( * addr ) ) ;",0
863,<S2SV_ModStart> goto out ; r = - EINVAL ; if ( mem -> guest_phys_addr + mem -> memory_size < mem -> guest_phys_addr ) goto out ; if ( mem -> slot >= KVM_MEMORY_SLOTS + KVM_PRIVATE_MEM_SLOTS ) goto out ; if ( mem -> guest_phys_addr + mem -> memory_size < mem -> guest_phys_addr ) goto out ; if ( mem -> guest_phys_addr + mem -> memory_size < mem -> guest_phys_addr ) goto out ;,0
864,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> } quantum_info =,0
865,"<S2SV_ModStart> ; if (! stream ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> URL: <S2SV_blank> %s"", path ) ; return NULL ; } if (! stream ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> URL: <S2SV_blank> %s"", path ) ; return NULL ; } if (! stream ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> URL: <S2SV_blank> %s"", path ) ; return NULL ; } if (! stream ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> URL: <S2SV_blank> %s"", path ) ; return NULL ; } if (! stream ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> URL: <S2SV_blank> %s"", path ) ; return NULL ; } if (! stream ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> URL: <S2SV_blank> %s"", path",0
866,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * p ; PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( u ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = decode_utf8 ( c, & s, end ) ; if ( data == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; sprintf ( p, ""\\\\U%08x"", chr ) ; p += 10 ; } assert ( p - buf <= Py_SIZE ( u",0
867,"<S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size."" <S2SV_ModEnd>, function ) <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function ) <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function ) <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function ) <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function )",0
868,"<S2SV_ModStart> ; uint32_t bcount ; if (! DoReadFile ( infile, & filehdr, sizeof ( Wave64FileHeader ), & bcount ) || bcount!= sizeof ( Wave64FileHeader ) || memcmp ( filehdr. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( filehdr. formType, wave_guid, sizeof ( wave_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! DoReadFile ( infile, & chunk_header, sizeof ( Wave64ChunkHeader ), & bcount ) || bcount!= sizeof ( Wave64ChunkHeader ) || memcmp ( chunk_header. ckID, riff_guid ) || memcmp ( chunk_header. formType, wave_guid ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
869,"<S2SV_ModStart> if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! ( config -> qmode & QMODE_NO_STORE_WRAPPER ) &&! WavpackAddWrapper ( wpc, & dff_chunk_header, sizeof ( DFFChunkHeader ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! ( config -> qmode & QMODE_IGNORE_LENGTH ) && dff_chunk_header. ckDataSize && dff_chunk_header. ckDataSize + 12!= infilesize ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header",0
870,"<S2SV_ModStart> ~ SNDRV_TLG_RUNNING ; if ( timeri -> flags & SNDRV_TIMER_IFLG_SLAVE ) { spin_unlock_irqrestore ( & timeri -> lock, flags ) ; goto __end ; } if ( timeri -> flags & SNDRV_TIMER_IFLG_RUNNING ) { spin_unlock_irqrestore ( & timeri -> lock, flags ) ; timeri -> flags &= ~ SNDRV_TIMER_IFLG_RUNNING ; spin_unlock_irqrestore ( & timeri -> lock, flags ) ; }",0
871,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> int setimes, <S2SV_ModStart>, wrerrno = 0 <S2SV_ModEnd> ; char ch <S2SV_ModStart>, omode, stb. st_mode, <S2SV_ModEnd> stb. st_nlink <S2SV_ModStart>, omode, <S2SV_ModEnd> stb. st_nlink <S2SV_ModStart>, omode, <S2SV_ModEnd> stb. st_nlink <S2SV_ModStart>, omode, <S2SV_ModEnd> stb. st_nlink <S2SV_ModStart>, omode, <S2SV_ModEnd> stb. st_nlink <S2SV_ModStart>, omode, <S2SV_ModEnd> stb. st_mode <S2SV_ModStart> stb. st_mode, <S2SV_ModEnd> stb. st_nlink <S2SV_ModStart>, omode, stb. st_mode, <S2SV_ModEnd> stb. st_nlink <S2SV_ModStart>, omode, <S2SV_ModEnd> stb. st_nlink <S2SV_ModStart>, omode, <S2SV_ModEnd> stb. st_nlink <S2SV_ModStart>, omode, <S2SV_ModEnd> stb. st_nlink <S2SV_ModStart>, omode, <S2SV_ModEnd> stb. st_nlink <S2SV_ModStart>, omode, <S2SV_ModEnd> stb. st_mode <S2SV_ModStart> stb. st_mode, <S2SV_ModEnd> stb. st_nlink <S2SV_ModStart> stb. st_nlink <S2SV_ModStart> stb. st_mode, <S2SV_ModEnd> stb. st_nlink <S2SV_ModStart> stb. st_nlink <S2SV_ModStart> st",0
872,"<S2SV_ModStart> } else if ( myentity_find_ext ( target ) == NULL && chanacs_source_has_flag ( mc, si, CA_FOUNDER ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> closed."" ), channel ) ; return ; } if ( metadata_find ( mc, ""private:close:closer"" ) && ( target ||! has_priv ( si, PRIV_CHAN_AUSPEX ) ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> closed."" ), channel ) ; return ; } if ( metadata_find ( mc, ""private:close:closer"" ) && ( target ||! has_priv ( si, PRIV_CHAN_AUSPEX ) ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> closed."" ), channel ) ; return ; } if (! myentity_find_ext ( target ) == NULL && chanacs_source_has_flag ( mc, si, CA_",0
873,<S2SV_ModStart> ; ghash_flush ( ctx <S2SV_ModEnd> ) ; memcpy,0
874,<S2SV_ModStart> ; if ( IS_ERR ( sub_demuxer ) ) { ret = PTR_ERR ( sub_demuxer ) ; if ( ret ) { av_error ( sub_demuxer ) ; goto error ; } <S2SV_ModStart> ; if ( IS_ERR ( sub_demuxer ) ) { av_error ( sub_demuxer ) ; goto error ; } <S2SV_ModStart> ; if ( IS_ERR ( sub_demuxer ) ) { av_error ( sub_demuxer ) ; goto error ; } <S2SV_ModStart> ; if ( IS_ERR ( sub_demuxer ) ) { av_error ( sub_demuxer ) ; return AVERROR ( sub_demuxer ) ; } <S2SV_ModStart> ; if ( IS_ERR ( sub_demuxer ) ) { av_error ( sub_demuxer ) ; goto error ; } <S2SV_ModStart> ; if ( IS_ERR ( sub_demuxer ) ) { av_error ( sub_demuxer ) ; goto error ; } <S2SV_ModStart> ; if ( IS_ERR ( sub_demuxer ) ) { av_error ( sub_demuxer ) ; return AVERROR ( sub_demuxer ) ; },0
875,"<S2SV_ModStart> null_server ; int need_error_free = 0, local_rcache = 0, local_authcon = 0 ; response = 0 ; if ( ( retval = krb5_read_message ( context, fd, & inbuf ) ) ) return ( retval ) ; if ( strcmp ( inbuf. data, sendauth_version ) ) { problem = KRB5_SENDAUTH_BADAUTHVERS ; response = 1 ; } if ( version &&! problem ) * version = inbuf ; else free ( inbuf. data ) ; } if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 1 ; } if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 1 ; } if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; } if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPL",0
876,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
877,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) return ret",0
878,"<S2SV_ModStart> ++ = frametype ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, buffer, faclen ) ; dptr += faclen ; break ; case ROSE_CLEAR_REQUEST : * dptr ++ = ROSE_GFI | lci1 ; * dptr",0
879,<S2SV_ModStart> = new_ns ; if ( p -> mnt == new_fs -> root. mnt ) { new_fs -> root. mnt = mntget ( & q -> mnt ) ; rootmnt = & p -> mnt ; } if ( & p -> mnt == new_fs -> pwd. mnt ) { new_fs -> pwd. mnt = mntget ( & q -> mnt ) ; pwdmnt = & p -> mnt ; } if ( p -> mnt. mnt_root!= q -> mnt. mnt_root ) { new_fs -> pwd. mnt = mntget ( & q -> mnt ) ; pwdmnt = & p -> mnt ; },0
880,<S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof
881,"<S2SV_ModStart> = php_zip_get_properties ; zip_object_handlers. get_object_name = php_zip_get_object_name ; <S2SV_ModStart> = php_zip_get_object_name ; php_zip_register_prop_handler ( & zip_prop_handlers, ""name"", php_zipobj_get_name, NULL, NULL, IS_STRING TSRMLS_CC ) ; php_zip_register_prop_handler ( & zip_prop_handlers, ""description"", NULL, NULL, NULL, IS_STRING TSRMLS_CC ) ; php_zip_register_prop_handler ( & zip_prop_handlers, ""error"", php_zipobj_get_error, NULL, IS_STRING TSRMLS_CC ) ; php_zip_register_prop_handler ( & zip_prop_handlers, ""error"", php_zipobj_get_error, NULL, IS_STRING TSRMLS_CC ) ; php_zip_register_prop_handler ( & zip_prop_handlers, ""error"", php_zipobj_get_error, NULL, IS_STRING TSRMLS_CC",0
882,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if ( iova + length > mem -> iova + mem -> length ) { return - EFAULT ; } <S2SV_ModStart> case RXE_MEM_TYPE_MR : if ( iova + length > mem -> iova + mem -> length ) { return - EFAULT ; } <S2SV_ModStart> case RXE_MEM_TYPE_FMR : if ( iova + length > mem -> iova + mem -> length ) { return - EFAULT ; },0
883,"<S2SV_ModStart> ) ) ; if ( siz > icmp6len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", icmp6len ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( siz > icmp6len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", icmp6len ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( siz > icmp6len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", icmp6len ) ) ; break ; } if ( siz > icmp6len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", icmp6len ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( siz > icmp6len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", siz ) ) ; break ; }",0
884,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
885,"<S2SV_ModStart> ; * sent = 0 ; if ( n_vec == 0 ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ; break ; } <S2SV_ModEnd> smb_msg. msg_namelen <S2SV_ModStart> ; if (! server -> noblocksnd ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ; break ; } <S2SV_ModEnd> msleep ( 500 <S2SV_ModStart> } if (! server -> noblocksnd ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ; break ; } if ( rc > remaining ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ; break ; } if ( rc > remaining ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15",0
886,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; return <S2SV_ModEnd> ref -> ref <S2SV_ModStart> -> ref ++ ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
887,"<S2SV_ModStart> ; if ( cluster < 0 || cluster >= fs -> clusters ) die ( ""Cluster <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds."", cluster ) ; <S2SV_ModStart> ; if ( cluster < 0 || cluster >= fs -> clusters ) die ( ""Cluster <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds."", cluster ) ;",0
888,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
889,<S2SV_ModStart> sk_nulls_node ) ; spin_lock_bh ( & ping_table. lock ) ; <S2SV_ModStart> sk ) ; spin_unlock_bh ( & ping_table. lock ) ;,0
890,"<S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, <S2SV_ModEnd> u1_num_mbsNby2, u1_is_idr_slice <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, <S2SV_ModEnd> u1_is_idr_slice ) { <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, u1_num_mbsNby2, u1_is_idr_slice, u1_is_idr_slice, <S2SV_ModEnd> u1_num_mbsNby2, u1_is_idr_slice <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, <S2SV_ModEnd> u1_is_idr_slice ) { <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, u1_num_mbsNby2, u1_is_idr_slice, u1_is_idr_slice, u1_is_idr_slice, u1_num_mbsNby2, u1_is_idr_slice, u1_is_",0
891,<S2SV_ModStart> ; if ( unlikely ( src >= env_end ) ) { ret = - EINVAL ; goto free ; } page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) { page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) { page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) goto free ; } page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) { page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) { page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) { page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; break ; } page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) { page = ( char * ) __get_free_page (,0
892,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> parse_rock_ridge_inode ( struct <S2SV_ModStart> inode ) { int result ; if ( ( ISOFS_SB ( inode -> i_sb ) -> s_rock_offset == - 1 ) && ( ISOFS_SB ( inode -> i_sb ) -> s_rock == 2 ) ) { result = parse_rock_ridge_inode_internal ( de, inode, 14 ) ; } else { result = parse_rock_ridge_inode_internal ( de, inode <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ) ) { <S2SV_ModEnd> result = parse_rock_ridge_inode_internal",0
893,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> struct fsnotify_group * <S2SV_ModStart> = 0 ; mutex_lock ( & group -> inotify_data. mutex ) ; <S2SV_ModStart> = user ; mutex_unlock ( & group -> inotify_data. mutex ) ;,0
894,"<S2SV_ModStart> in -> data [ p ] ) { if ( out -> linesize [ p ] > in -> linesize [ p ] ) av_image_copy_plane ( out -> data [ p ], out -> linesize [ p ], in -> linesize [ p ], w, h ) ; else if ( out -> linesize [ p ] > in -> linesize [ p ] ) av_image_copy_plane ( out -> data [ p ], out -> linesize [ p ], in -> linesize [ p ], w, h ) ; else if ( out -> linesize [ p ] > in -> linesize [ p ] ) av_image_copy_plane ( out -> data [ p ], out -> linesize [ p ], in -> linesize [ p ], w, h ) ; else if ( out -> linesize [ p ] > in -> linesize [ p ] ) av_image_copy_plane ( out -> data [ p ], out -> linesize [ p ], in -> linesize [ p ], w, h ) ; else if ( out -> linesize [ p ] > in -> linesize [ p ] ) av_image_copy_plane",0
895,"<S2SV_ModStart> 1 ] ) { memset ( screen -> sb_buffer, 0, sizeof ( screen -> sb_buffer ) ) ; memset ( screen -> sb_buffer, 0, sizeof ( screen -> sb_buffer ) ) ; }",0
896,"<S2SV_ModStart> EACCES ; } if (! tnum_is_const ( reg -> var_off. value ) ) { verbose ( env, ""dereference <S2SV_blank> of <S2SV_blank> modified <S2SV_blank> ctx <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d+%d, <S2SV_blank> ctx+const <S2SV_blank> is <S2SV_blank> allowed, <S2SV_blank> ctx+const+const <S2SV_blank> is <S2SV_blank> not\\n"", regno, reg -> off, off - reg -> off ) ; return - EACCES ; } if ( t == BPF_READ ) { verbose ( env, ""R%d <S2SV_blank> leaks <S2SV_blank> addr <S2SV_blank> into <S2SV_blank> map\\n"", value_regno ) ; return - EACCES ; } if (! tnum_is_const ( reg -> var_off. value ) ) { verbose ( env, ""dereference <S2SV_blank> of <S2SV_blank> modified <S2SV_blank> ctx <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d+%d, <S2SV_blank> ctx+const <S2SV_blank> is <S2SV_blank> allowed, <S2SV_blank> ctx+const+const <S2SV_blank> is <S2SV_blank> not\\n"", regno, reg -> off - reg -> off ) ; return - EACCES ; }",0
897,"<S2SV_ModStart> uint16 strip, nstrips = TIFFNumberOfStrips ( in ) ; uint32 stripsize = TIFFStripSize ( in ) ; uint32 rows = 0 ; tsize_t scanline_size = TIFFGetFieldDefaulted ( in, TIFFTAG_ROWSPERSTRIP, & rps ) ; if ( scanline_size == 0 ) { TIFFError ( """", ""TIFF <S2SV_blank> scanline <S2SV_blank> size <S2SV_blank> is <S2SV_blank> zero!"" ) ; return 0 ; } for ( strip = 0 ; strip < nstrips ; strip ++ ) { bytes_read = TIFFReadEncodedStrip ( in, strip, bufp, - 1 ) ; rows = bytes_read / scanline_size ; if ( rows > scanline_size ) { TIFFError ( """", ""Error <S2SV_blank> reading <S2SV_blank> strip <S2SV_blank> %lu <S2SV_blank> rows"", ( unsigned long ) rows, ( unsigned long ) scanline_size ) ; return 0 ; } if ( rows > scanline_size ) { TIFFError ( """", ""Error <S2SV_blank> reading <S2SV_blank> strip <S2SV_blank> %lu <S2SV_blank> rows"", ( unsigned long ) rows, ( unsigned long ) scanline_size ) ; return 0 ; }",0
898,"<S2SV_ModStart> base_name ) ; <S2SV_ModEnd> struct search_domain * <S2SV_ModStart> char need_to_append_dot = ( base_name [ base_len - 1 ] == '.' ) <S2SV_ModEnd>? 0 : <S2SV_ModStart> 1 ; struct search_domain * const dom ; for ( dom = state -> head ; dom ; dom = dom -> next ) { if (! n -- ) { const u8 * const postfix = ( ( u8 * ) dom ) + sizeof ( struct search_domain ) ; const int postfix_len = dom -> len ; char * newname = ( char * ) mm_malloc ( postfix_len + 1 ) ; if (! newname ) return NULL ; memcpy ( newname + base_len + need_to_append_dot, postfix, postfix_len ) ; memcpy ( newname + base_len + need_to_append_dot, postfix, postfix_len + 1 ) ; if ( need_to_append_dot ) newname [ base_len ] = '.' ; memcpy ( newname + base_len + need_to_append_dot, postfix, postfix_len + 1 ) ; if ( need_to_append_dot ) newname [ base_len ] = 0 ;",0
899,<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay ) ),0
900,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = -,1
901,"<S2SV_ModStart>, one ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> number_planes_filled ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> number_planes_filled ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> number_planes_filled ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> number_planes_filled ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> number_planes_filled ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( Cor",0
902,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> ; UINT32 originalSize ; if ( context -> PlaneByteCount == 0 ) { fillMemory ( <S2SV_ModEnd> context -> priv <S2SV_ModStart> 0xFF ) ; } else if ( planeSize > originalSize ) { nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; } else if ( planeSize < originalSize ) { nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; } else if ( planeSize < originalSize ) { nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; } else if ( planeSize < originalSize ) { nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; } else if ( planeSize < originalSize ) { nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; } else CopyMemory",0
903,<S2SV_ModStart> policy ) { if (! inode_has_encryption_context ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ) return - ENOTEMPTY ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - ENOTEMPTY ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - ENOTEMPTY ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir,0
904,"<S2SV_ModStart> { httpSetHostName ( state <S2SV_ModEnd>, stok (",0
905,"<S2SV_ModStart>. cmp = type -> cmp <S2SV_ModEnd>,. match_data <S2SV_ModStart> match_data. lookup_type = KEYRING_SEARCH_LOOKUP_DIRECT,. match_data. <S2SV_ModStart> dest_keyring ) ; ret = request_key ( key, description, callout_info, callout_len, aux, flags ) ; if ( ret ) { key_put ( dest_keyring ) ; ret = ERR_PTR ( ret ) ; goto error_free ; } ret = request_key ( key, description, callout_info, callout_len, aux ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; ret = ERR_PTR ( ret ) ; goto error_free ; } ret = request_key ( key, description, callout_info, callout_len, aux, flags ) ; if ( ret ) { key_put ( dest_keyring ) ; ret = ERR_PTR ( ret ) ; goto error_free ; } ret = request_key ( key, description, callout_info, callout_len, aux ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; ret",0
906,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; if (,0
907,"<S2SV_ModStart> (! job_id ||! prev_hash ||! coinbase1 ||! coinbase2 ||! bbversion ||! nbit ||! ntime ) { free ( prev_hash ) ; free ( coinbase1 ) ; free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; if ( job_id ) { free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; free ( pool -> swork. job_id ) ; if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; pool -> swork. job_id = job_id ; snprintf ( pool -> prev_hash, 65, ""%s"", prev_hash ) ; snprintf ( pool -> bbversion, 9, ""%s"", bbversion ) ; snprintf ( pool -> nbit, 9, ""%s"", nbit ) ; snprintf ( pool -> ntime, 9, ""%s"", ntime ) ;",0
908,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
909,"<S2SV_ModStart> size ) { if ( num > UINT32_MAX / size ) { return NULL ; } <S2SV_ModStart> size ) ) ; if ( num > UINT32_MAX / size ) { return NULL ; } <S2SV_ModStart> { memset ( ptr, '\\0', ( num * size ) ) ; if ( num > UINT32_MAX / size ) { memset ( ptr, '\\0', ( num * size ) ) ; if ( num > UINT32_MAX / size ) { memset ( ptr, '\\0', ( num * size ) ) ; } else { memset ( ptr, '\\0', ( num * size ) ) ; } if ( num > UINT32_MAX / size ) { memset ( ptr, '\\0', ( num * size ) ) ; } if ( num > UINT32_MAX / size ) { memset ( ptr, '\\0', ( num * size ) ) ; if ( num > UINT32_MAX / size ) { memset ( ptr, '\\0', ( num * size ) ) ; } else { memset ( ptr, '\\0', ( num * size ) ) ; }",0
910,<S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
911,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> __dict__ ) ; if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } <S2SV_ModStart> dict ) { if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( dict == NULL ) { if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( dict ) { if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___dict__ )",0
912,"<S2SV_ModStart> USB_DT_OTG, ( struct usb_otg_descriptor * * ) & desc ) ; if (! ( desc -> bmAttributes & USB_OTG_HNP ) ) { dev_err ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %s <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; return 0 ; } if ( desc -> bLength == sizeof ( struct usb_otg_descriptor ) ) { err = usb_control_msg ( udev, usb_sndctrlpipe ( udev, 0 ), USB_REQ_SET_FEATURE, 0, USB_DEVICE_B_HNP_ENABLE, 0, NULL, 0, USB_CTRL_SET_TIMEOUT ) ; if ( err < 0 ) dev_err ( & udev -> dev, ""can\'t <S2SV_blank> set <S2SV_blank> HNP <S2SV_blank> mode: <S2SV_blank> %d\\n"", err ) ; bus -> b_hnp_enable = 0 ; } else if ( desc -> bLength == sizeof ( struct usb_otg_descriptor ) ) { err = usb_",0
913,"<S2SV_ModStart> -> private_data ; u64 id ; <S2SV_ModStart> ) ; case PERF_EVENT_IOC_PERIOD : id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_SET_ID : { u64 id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_SET_FILTER : if ( arg!= - 1 ) { struct perf_event * output_event ; struct fd output ; ret = perf_event_set_filter ( event, output_event ) ; fdput ( output ) ; } else { ret = perf_event_set_filter ( event, NULL ) ; } else { ret = perf_event_set_filter ( event, NULL ) ; } <S2SV_ModEnd> return ret ;",0
914,"<S2SV_ModStart> prr_delivered += newly_acked_sacked ; if ( delta < 0 ) { u64 dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd - 1 ; sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; } else if ( ( flag & FLAG_RETRANS_DATA_ACKED ) &&! ( flag & FLAG_LOST_RETRANS ) ) { sndcnt = min_t ( int, delta, max_t ( int, tp -> prr_delivered - tp -> prr_out, 1 ) ; } else if ( ( flag & FLAG_RETRANS_DATA_ACKED ) &&! ( flag & FLAG_LOST_RETRANS ) ) { sndcnt = min_t ( int, delta, max_t ( int, tp -> prr_delivered - tp -> prr_out, 1 ) ; }",0
915,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
916,"<S2SV_ModStart> mask ) { int err ; err = crypto_alloc_skcipher ( name, type, mask ) ; if ( err ) { crypto_free_skcipher ( name ) ; return ERR_PTR ( err ) ; } <S2SV_ModStart> mask ) ; err = crypto_alloc_skcipher ( name, type, mask ) ; if ( err ) { crypto_free_skcipher ( name ) ; return ERR_PTR ( err ) ; } return ERR_PTR ( err ) ;",0
917,"<S2SV_ModStart> ; break ; case CCP_SHA_TYPE_1 : if ( sha -> ctx_len < SHA1_DIGEST_SIZE ) return - EINVAL ; block_size = SHA1_BLOCK_SIZE ; break ; case CCP_SHA_TYPE_224 : if ( sha -> ctx_len < SHA224_DIGEST_SIZE ) return - EINVAL ; block_size = SHA224_BLOCK_SIZE ; break ; case CCP_SHA_TYPE_256 : if ( sha -> ctx_len < SHA256_DIGEST_SIZE ) return - EINVAL ; block_size = SHA256_BLOCK_SIZE ; break ; case CCP_SHA_TYPE_384 : if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || sha -> ctx_len < SHA384_DIGEST_SIZE ) return - EINVAL ; block_size = SHA384_BLOCK_SIZE ; break ; case CCP_SHA_TYPE_512 : if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || sha -> ctx_len < SHA512_DIGEST_SIZE )",0
918,"<S2SV_ModStart> tile_height ) { if ( c -> old_tile_w < c -> tile_width || c -> old_tile_h < c -> tile_height ) { c -> tile_stride = FFALIGN ( c -> tile_width * 3, 16 ) ; aligned_height = c -> tile_height ; } else { c -> tile_stride = FFALIGN ( c -> tile_width * 3, 16 ) ; aligned_height = c -> tile_height ; } if (! c -> kempf_buf ) return AVERROR ( ENOMEM ) ; c -> kempf_flags = av_mallocz ( c -> tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> kempf_buf = av_mallocz ( c -> tile_width * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> kempf_flags = av_mallocz ( c -> tile_width * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> kempf_flags = av_mallocz ( c -> tile_stride * aligned_height + FF",0
919,"<S2SV_ModStart> sizeof iv ) ; if ( iter > EVP_MAX_KEY_ITER ) ossl_raise ( eCipherError, ""key <S2SV_blank> iter <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( unsigned int ) ( NUM2INT ( iter ) ) ) ) ossl_raise ( eCipherError, ""key <S2SV_blank> iter <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( unsigned int ) ( NUM2INT ( iter ) ) ) ; if ( iter > EVP_MAX_KEY_ITER ) ossl_raise ( eCipherError, ""key <S2SV_blank> iter <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( unsigned int ) ( ( unsigned int ) ( NUM2INT ( iter ) ) ) ) ) ossl_raise ( eCipherError, ""key <S2SV_blank> iter <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( unsigned int ) ( NUM2INT ( iter ) ) ) ;",0
920,<S2SV_ModStart> } srcptr = buf ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += 2 * stride ; srcptr += stride ; } srcptr = buf ; dstptr = & a [ ( 1 - parity ) * stride ] ; n = numrows - hstartcol ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += 2 * stride ; srcptr += stride ; } srcptr = buf ; dstptr = & a [ ( 1 - parity ) * stride ] ; dstptr = & a [ ( 1 - parity ) * stride ] ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; },0
921,"<S2SV_ModStart> s ) ; memory_region_init_io ( & s -> mmio, OBJECT ( s ), & stellaris_enet_ops, s, ""stellaris_enet"", 0x1000 ) ; sysbus_init_irq ( sbd, & s -> irq ) ; s -> nic = qemu_new_nic ( & net_stellaris_enet_info, & s -> conf, qemu_get_queue ( s -> nic ) ) ; s -> nic = qemu_new_nic ( & net_stellaris_enet_info, & s -> conf, qemu_get_queue ( s -> nic ) ) ; s -> nic = qemu_new_nic ( & net_stellaris_enet_info, & s -> conf, qemu_get_queue ( s -> nic ) ) ; qemu_format_nic_info_str ( qemu_get_queue ( s -> nic ), s -> conf. macaddr. a ) ; s -> nic = qemu_new_nic ( & net_stellaris_enet_info, & s -> conf, qemu_get_queue ( s -> nic",0
922,"<S2SV_ModStart> p ) { size_t <S2SV_ModEnd> length = h <S2SV_ModStart> len ) ; if ( length > CHDLC_HDRLEN ) { ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( - 1 ) ; } <S2SV_ModStart> ) ; } ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( - 1 ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
923,"<S2SV_ModStart> ; if ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_NOSUID ) { cFYI ( 1, ""MNT_LOCK: <S2SV_blank> %s"", cifs_sb -> mnt_cifs_flags ) ; rc = - EPERM ; goto out ; } if ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_NOSUID ) { cFYI ( 1, "" <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
924,<S2SV_ModStart> len && ( sk -> sk_tsflags == SOF_TIMESTAMPING_OPT_STATS || sk -> sk_tsflags == SOF_TIMESTAMPING_SOFTWARE || sk -> sk_tsflags == SOF_TIMESTAMPING_RAW_HARDWARE || <S2SV_ModStart> len && ( sk -> sk_tsflags == SOF_TIMESTAMPING_OPT_STATS || sk -> sk_tsflags == SOF_TIMESTAMPING_RAW_HARDWARE || sk -> sk_tsflags == SOF_TIMESTAMPING_SOFTWARE || sk -> sk_tsflags == SOF_TIMESTAMPING_RAW_HARDWARE || sk -> sk_tsflags == SOF_TIMESTAMPING_RAW_HARDWARE || sk -> sk_tsflags == SOF_TIMESTAMPING_SOFTWARE || sk -> sk_tsflags == SOF_TIMESTAMPING_RAW_HARDWARE || sk -> sk_tsflags == SOF_TIMESTAMPING_RAW_HARDWARE || skb_tsflags == SOF_TIMESTAMPING_RAW_HARDWARE || skb_tsflags == SOF_TIMESTAMPING_RAW_HARDWARE || skb_tsflags == SOF_TIMESTAMPING,0
925,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_IGNORE_DTD, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_IGNORE_DTD ) ) ; raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_IGNORE_DTD, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_IGNORE_DTD ) ) ; if ( raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_IGNORE_DTD, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_IGNORE_DTD ) ) { raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_IGNORE_DTD, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_IGNORE_DTD ) ) ; raptor_sax2_parse_start (",0
926,"<S2SV_ModStart> ; if ( alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD",0
927,<S2SV_ModStart> { return SECURE_ELEMENT_ERROR_NPE <S2SV_ModEnd> ; } },0
928,<S2SV_ModStart> += 4 ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return NGHTTP2_ERR_FRAME_OVERFLOW ; } <S2SV_ModStart> += 4 ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return NGHTTP2_ERR_FRAME_OVERFLOW ; } <S2SV_ModStart> += 4 ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return NGHTTP2_ERR_FRAME_OVERFLOW ; } if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return NGHTTP2_ERR_FRAME_OVERFLOW ; } if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return NGHTTP2_ERR_FRAME_OVERFLOW ; } if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return NGHTTP2_ERR_FRAME_OVERFLOW ; } if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return NGHTTP2_ERR_,0
929,<S2SV_ModStart> = ucounts ; if ( IS_ERR ( new_ns ) ) { kfree ( new_ns ) ; dec_mnt_namespaces ( ucounts ) ; return ERR_CAST ( new_ns ) ; },0
930,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
931,"<S2SV_ModStart> intel_arch_events ) ; x86_pmu. num_counters_fixed = max ( x86_pmu. num_counters, ( unsigned int ) edx. split. num_counters_fixed ) ; if ( version > 1 ) x86_pmu. num_counters_fixed = max ( x86_pmu. num_counters, ( unsigned int ) edx. split. num_counters_fixed ) ; if ( version > 1 ) x86_pmu. num_counters_fixed = max ( x86_pmu. num_counters, ( unsigned int ) edx. split. num_counters_fixed ) ; if ( version > 1 ) x86_pmu. num_counters_fixed = max ( x86_pmu. num_counters, ( unsigned int ) edx. split. num_counters_fixed ) ; if ( version > 1 ) x86_pmu. num_counters_fixed = max ( x86_pmu. num_counters_fixed, ( unsigned int ) edx. split. num_counters_fixed ) ; if ( version > 1 ) x86_pmu. num_counters_fixed = max",0
932,"<S2SV_ModStart>. dimensions ; # ifdef STB_VORBIS_DIVIDES_IN_RESIDUE uint8 * * part_classdata = ( uint8 * * ) temp_block_array ( f, f -> channels, r -> part_size * sizeof ( * * part_classdata ) ) ; # else int * * classifications = ( int * * ) temp_block_array ( f, f -> channels, r -> part_size * sizeof ( * * classifications ) ) ; # endif CHECK ( f ) ; for ( i = 0 ; i < n ; ++ i ) if ( do_not_decode [ i ] ) memset ( residue_buffers [ i ], 0, sizeof ( float ) * n ) ; for ( j = 0 ; j < ch ; ++ j ) if ( do_not_decode [ i ] ) memset ( residue_buffers [ i ], 0, sizeof ( float ) * n ) ; for ( j = 0 ; j < ch ; ++ j ) if ( do_not_decode [ j ] ) memset ( residue_buffers [ i ], 0, sizeof ( float ) * n ) ; for ( j = 0 ; j",0
933,"<S2SV_ModStart> ) ; u32 last_oow_ack_time <S2SV_ModEnd> ; if ( <S2SV_ModStart> { challenge_timestamp = last_oow_ack_time ; last_oow_ack_time = jiffies <S2SV_ModStart> ) { challenge_count = sysctl_tcp_challenge_ack_limit ; } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; } else { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; tcp_send_ack ( sk ) ; } } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; }",0
934,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
935,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * * tp, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) ; vpx_write_tree ( w, vp9_coef_con_tree, vp9_pareto8_full [ p -> context_tree [ PIVOT_NODE ] - 1 ], bits, len, 0 ) ; } else { vpx_write_tree ( w, vp9_coef_con_tree, vp9_pareto8_full [ p -> context_tree [ PIVOT_NODE ] - 1 ], v, n - len, i",0
936,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> 16 ) ; vpx_clear_system_state ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
937,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
938,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; int n <S2SV_ModStart> - ENODEV ; } if ( le16_to_cpu ( dev -> descriptor. idVendor ), le16_to_cpu ( dev -> descriptor. idProduct ) ) { dbg_hid ( ""invalid <S2SV_blank> vendor <S2SV_blank> or <S2SV_blank> product <S2SV_blank> identifier\\n"" ) ; return - ENODEV ; } if ( le16_to_cpu ( dev -> descriptor. idVendor ), le16_to_cpu ( dev -> descriptor. idProduct ) ) { dbg_hid ( ""invalid <S2SV_blank> vendor <S2SV_blank> or <S2SV_blank> product <S2SV_blank> identifier\\n"" ) ; return - ENODEV ; } if ( <S2SV_ModEnd> hdesc -> bNumDescriptors <S2SV_ModStart> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; else rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if ( rsize > HID_MAX_DESCRIPTOR_SIZE ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%",0
939,"<S2SV_ModStart> { struct ikev2_id id <S2SV_ModEnd> ; int id_len <S2SV_ModStart> ; ND_TCHECK ( <S2SV_ModEnd> ext ) ; <S2SV_ModStart> ( * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; id_len = ntohs ( id. h. len ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } id_len = id_len - 4 ; ND_PRINT ( ( ndo, "" <S2SV_blank> len=%d"", id_len - 4 ) ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1",0
940,<S2SV_ModStart> ) ; # ifdef CONFIG_FUTEX if ( unlikely ( tsk -> robust_list ) ) exit_robust_list ( tsk ) ; # ifdef CONFIG_COMPAT if ( unlikely ( tsk -> compat_robust_list ) ) compat_exit_robust_list ( tsk ) ; # ifdef CONFIG_COMPAT if ( unlikely ( tsk -> robust_sync_list ) ) robust_sync_exit_robust_list ( tsk ) ; # ifdef CONFIG_COMPAT if ( unlikely ( tsk -> robust_sync_list ) ) robust_sync_exit_robust_list ( tsk ) ; # ifdef CONFIG_COMPAT if ( unlikely ( tsk -> robust_sync_list ) ) robust_sync_exit_robust_list ( tsk ) ; # ifdef CONFIG_COMPAT if ( unlikely ( tsk -> robust_sync_list ) ) robust_sync_exit_robust_list ( tsk ) ; # ifdef CONFIG_COMPAT if ( unlikely ( tsk -> robust_sync_list ) ) robust_sync_exit_compat_list ( tsk ) ; # ifdef CONFIG_,0
941,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> data ) { <S2SV_ModEnd> add_preferred_base_object ( name <S2SV_ModStart> ; add_object_entry ( obj -> oid. hash, obj -> type, name, 0 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
942,<S2SV_ModStart> = atoi ( jas_tvparser_getval <S2SV_ModEnd> ( tvp ) <S2SV_ModStart> = atoi ( jas_tvparser_getval <S2SV_ModEnd> ( tvp ) <S2SV_ModStart> = atoi ( jas_tvparser_getval <S2SV_ModEnd> ( tvp ) <S2SV_ModStart> = atoi ( jas_tvparser_getval <S2SV_ModEnd> ( tvp ) <S2SV_ModStart> = atoi ( jas_tvparser_getval <S2SV_ModEnd> ( tvp ) <S2SV_ModStart> = atoi ( jas_tvparser_getval <S2SV_ModEnd> ( tvp ) <S2SV_ModStart> = atoi ( jas_tvparser_getval <S2SV_ModEnd> ( tvp ) <S2SV_ModStart> = atoi ( jas_tvparser_getval <S2SV_ModEnd> ( tvp ) <S2SV_ModStart> = atoi ( jas_tvparser_getval <S2SV_ModEnd> ( tvp ),0
943,"<S2SV_ModStart> urb ) ; if ( ret ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_urb ( urb ) ;",0
944,"<S2SV_ModStart>, fft_jmp ; WORD32 xt0_0, yt0_0, yt1_0, xt2_0, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_0, x_h2_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_",0
945,<S2SV_ModStart> ; if ( datalen < dp ) goto data_overrun_error ; <S2SV_ModStart> ++ ] ; if ( datalen < dp ) goto data_overrun_error ; <S2SV_ModStart> ++ ] ; if ( datalen < dp ) goto data_overrun_error ; <S2SV_ModStart> ++ ] ; if ( datalen < dp ) goto data_overrun_error ; <S2SV_ModStart> ++ ] ; if ( datalen < dp ) goto data_overrun_error ; <S2SV_ModStart> ++ ] ; if ( datalen < dp ) goto data_overrun_error ; <S2SV_ModStart> ++ ] ; if ( datalen < dp ) goto data_overrun_error ; <S2SV_ModStart> ++ ] ; if ( datalen < dp ) goto data_overrun_error ; <S2SV_ModStart> ++ ] ; if ( datalen < dp ) goto data_overrun_error ; <S2SV_ModStart> ++ ] ; if ( datalen < dp ) goto data_overrun_error ; <S2SV_ModStart> ++ ] ; if ( datalen < dp ) goto data_overrun_error ; <S2SV_ModStart> ++ ] ; if ( datalen < dp ) goto data_overrun_error ; <S2SV_ModStart> ++ ] ; if ( datalen < dp ) goto data_overr,0
946,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & __GFP_ZERO,0
947,<S2SV_ModStart> mnt_dir ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ; if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ;,0
948,"<S2SV_ModStart> { if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> { if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> { if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len, ( int ) sig_len ) ) ; return FAILURE ; } <S2SV_ModStart> { if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> { if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len, ( int ) sig_len ) ) ; return FAILURE ; }",0
949,"<S2SV_ModStart> && value [ n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 <S2SV_ModEnd> ) goto exit <S2SV_ModStart> n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 <S2SV_ModEnd> ) goto exit <S2SV_ModStart> n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 <S2SV_ModEnd> ) goto exit <S2SV_ModStart> n ] <= max && search ( value, value [ n ], count ) ) hid_process_event ( hid, field, & field -> usage [ value [ n ] - min ], 0, interrupt ) ; if ( value [ n ] >= min && value [ n ] <= max && field -> usage [ value [ n ] - min ]. hid && search ( field -> value, value [ n ], count ) ) hid_process_event ( hid, field, & field -> usage [ value [ n ] - min ], 1, interrupt ) ; if ( value [ n ] >= min && value [ n ] <= max && field -> usage [ value [",0
950,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
951,"<S2SV_ModStart> ; if ( argReg < 0 || argReg + insns_size > regsz ) { <S2SV_ModStart> break ; } if ( argReg + insns_size > regsz ) { <S2SV_ModStart> break ; } if ( argReg + insns_size > regsz ) { <S2SV_ModStart> break ; } if ( argReg + insns_size > regsz ) { <S2SV_ModStart> break ; } <S2SV_ModEnd> p4 = r_uleb128 <S2SV_ModStart> p4, p4_end <S2SV_ModEnd> - p4, <S2SV_ModStart> break ; } <S2SV_ModEnd> p4 = r_uleb128 <S2SV_ModStart> p4, p4_end <S2SV_ModEnd> - p4, <S2SV_ModStart> break ; } if ( argReg + insns_size > regsz ) { <S2SV_ModStart> break ; } if ( argReg + insns_size > regsz ) { <S2SV_ModStart> break ; } if ( argReg + insns_size > regsz ) { <S2SV_ModStart> break ; } <S2SV_ModEnd> p4 = r_uleb128 <S2SV_ModStart> p4, p4_end <S2SV_ModEnd> - p4,",0
952,"<S2SV_ModStart> ( env, remote_addr_val, req_remote_addr ( req ) ) ; rb_hash_aset ( env, remote_port_val, req_remote_port ( req ) ) ; rb_hash_aset ( env, remote_ip_addr_val, req_remote_ip_addr ( req ) ) ; rb_hash_aset ( env, remote_port_val, req_remote_port ( req ) ) ; rb_hash_aset ( env, remote_ip_val, req_remote_ip ( req ) ) ; rb_hash_aset ( env, remote_port_val, req_remote_port ( req ) ) ; rb_hash_aset ( env, remote_ip_addr_val, req_remote_ip_addr ( req ) ) ; rb_hash_aset ( env, remote_port_val, req_remote_port ( req ) ) ; rb_hash_aset ( env, remote_ip_addr_val, req_remote_ip ( req ) ) ; rb_hash_aset ( env, remote_port_val, req_remote_port ( req ) ) ; rb_hash_aset ( env,",0
953,<S2SV_ModStart> 0 ) ; if ( args -> flags & ATTR_KERNOVAL ) { args -> valuelen = valuelen ; return XFS_ERROR ( ERANGE ) ; } args -> rmtvaluelen = valuelen ;,0
954,<S2SV_ModStart> endif # endif # if defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ),0
955,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_DEAD, & key -> flags ) ) <S2SV_ModStart> key ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_UNINSTANTIATED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ;",0
956,"<S2SV_ModStart> ) ) ; if (! state. sumlen ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> queries <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", state. num ) ) ) ;",0
957,<S2SV_ModStart> int need = 0 ; char * line = ( Char * ) malloc ( ( size_t ) need + 1 ) ; if ( line == ( Char * ) malloc ( ( size_t ) need + 1 ) ) { SysError ( ERROR_BMALLOC2 ) ; free ( line ) ; line = ( Char * ) malloc ( ( size_t ) ( need + 1 ) ) ; } if ( line == ( Char * ) malloc ( ( size_t ) need + 1 ) ) { SysError ( ERROR_BMALLOC2 ) ; free ( line ) ; <S2SV_ModStart> } if ( line == ( Char * ) malloc ( ( size_t ) need + 1 ) ) { SysError ( ERROR_BMALLOC2 ) ; free ( line ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) ( need + 1 ) ) ; free ( line ) ; <S2SV_ModStart> } if ( line == ( Char * ) malloc ( ( size_t ) need + 1 ) ) { SysError ( ERROR_BMALLOC2 ) ; free ( line ) ;,0
958,"<S2SV_ModStart> = 0 ; mutex_lock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ; <S2SV_ModStart> i_orphan ) ; err = ext4_reserve_inode_write ( handle, inode, & iloc ) ; if ( err ) goto out_err ; if ( prev == & ei -> i_orphan ) { BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_brelse ; } if ( prev == & ei -> i_orphan ) { BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_brelse ; sbi -> s_es -> s_last_orphan = cpu_to_le32 ( ino_next ) ; BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err",0
959,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> ( val ) ) { if ( <S2SV_ModEnd> val < 0 <S2SV_ModStart> ( val < 0 ) strncpy ( str, ""-NaN"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { <S2SV_ModEnd> if ( val <S2SV_ModStart> ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } <S2SV_ModEnd> } <S2SV_null>",0
960,"<S2SV_ModStart> ; if ( ( sscanf ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d%[ <S2SV_blank> \\t]%d"", temp, & prec, temp, & w, temp, & h )!= 9 ) { fclose ( f ) ; fprintf ( stderr, ""ERROR: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> the <S2SV_blank> right <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> from <S2SV_blank> the <S2SV_blank> fscanf() <S2SV_blank> function!\\n"" ) ; return NULL ; } if ( ( sscanf ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"", temp, & w, temp, & h )!= 9 ) { fclose ( f ) ; fprintf ( stderr, ""ERROR: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> the <S2SV_blank> right <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> from <S2SV_blank> the <S2SV_blank> fscanf() <S2SV_blank> function!\\n"" ) ; return NULL ; } if ( ( sscanf ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%",0
961,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 6 <S2SV_ModStart> ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; if ( size < 6 ) ASSERT ( result!= buf ) ; ASSERT ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) == 0 ) ; if ( result!= buf ) free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; size = size ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( NULL, & length, ""%d"", 12345 ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length ==",0
962,"<S2SV_ModStart> cycles ) ; if ( unlikely ( fast_pool -> count >= 64 ) && crng_load_fast ( fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; } <S2SV_ModEnd> if ( (",0
963,"<S2SV_ModStart> LEX_ID ) { if ( jslGetTokenValueAsString ( )!= NULL ) strncat ( str, jslGetTokenValueAsString ( ), len ) ; <S2SV_ModStart> LEX_STR ) { if ( jslGetTokenValueAsString ( )!= NULL ) strncat ( str, jslGetTokenValueAsString ( ), len ) ; strncat ( str, ""\\'"", len ) ; } else { jslTokenAsString ( lex -> tk, str, len ) ; } <S2SV_ModEnd> } else if <S2SV_ModStart> EX_STR ) { if ( jslGetTokenValueAsString ( )!= NULL ) strncat ( str, jslGetTokenValueAsString ( ), len ) ; strncat ( str, ""\\'"" <S2SV_ModEnd>, len )",0
964,"<S2SV_ModStart> ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device"", <S2SV_ModEnd> g. inf <S2SV_ModStart> ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device"", <S2SV_ModEnd> g. inf <S2SV_ModStart> ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device"", <S2SV_ModEnd> g. inf <S2SV_ModStart> ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device"", <S2SV_ModEnd> g. inf <S2SV_ModStart> ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device"", <S2SV_ModEnd> g. inf <S2SV_ModStart> ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device"", <S2SV_ModEnd> g. inf <S2SV_ModStart> ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device"", <S2SV_ModEnd> g. inf <S2SV_ModStart> ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device"", <S2SV_ModEnd> g. inf <S2SV_ModStart> ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device"", <S2SV_ModEnd> g. inf <S2SV_ModStart> ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device"", <S2SV_ModEnd> g. inf",0
965,,1
966,"<S2SV_ModStart> * output ; if ( argc < 2 ) ThrowFileException ( exception, ResourceLimitError, ""MemoryAllocationFailed"", GetExceptionMessage ( errno ) ) ; input = fopen_utf8 ( argv [ argc - 1 ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ argc - 1 ] ) ; return ( MagickFalse ) ; } output = fopen_utf8 ( argv [ argc - 1 ], ""wb"" ) ; if ( output == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ argc - 1 ] ) ; return ( MagickFalse ) ; } for ( c = fgetc ( input ) ; c!= EOF ; c = fgetc ( input ) ) { ( void ) fputc ( ( char ) c, output ) ; ( void ) fclose ( input ) ; ( void ) remove_utf8 ( argv [ i ] ) ; } ( void ) fclose ( output ) ; return ( MagickTrue ) ; } <S2SV_ModEnd> <S2SV_null> <S",0
967,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
968,"<S2SV_ModStart> fail : ext3_msg ( sb, ""error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s: <S2SV_blank> %ld"", __bdevname ( dev, b ) <S2SV_ModEnd>, PTR_ERR (",0
969,"<S2SV_ModStart> passwd * pwd, const char * prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> ( fp = safe_mkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> atomic_dir ) ) == NULL ) return - 1 ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( lckpwdf ( ) < 0 ) goto fail ; pwf = fopen ( PASSWD_FILE, ""r"" ) ; if (! found && linebuf [ namelen ] == ':' &&! strncmp ( linebuf, pwd -> pw_name, namelen ) ) { if ( putpwent ( pwd, fp ) < 0 ) goto fail ; namelen = strlen ( linebuf ) ; } if (! found && linebuf [ namelen ] == ':' &&! strncmp ( linebuf, pwd",0
970,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned <S2SV_ModStart> int right ; if ( tree [ i ] <= 0 ) left = num_events [ - tree [ i ] ] ; else left = convert_distribution ( tree [ i ], tree, branch_ct, num_events ) ; if ( tree [ i + 1 ] <= 0 ) right = num_events [ - tree [ i + 1 ] ] ; if ( tree [ i + 1 ] <= 0 ) right = num_events [ - tree [ i + 1 ] ] ; if ( tree [ i + 2 ] <= 0 ) left = num_events [ - tree [ i + 2 ] ] ; else right = convert_distribution ( tree [ i + 2 ], tree, branch_ct, num_events ) ; if ( tree [ i + 3 ] <= 0 ) left = num_events [ - tree [ i + 3 ] ] ; if ( tree [ i + 3 ] <= 0 ) left = num_events [ - tree [ i + 3 ] ] ; else left = convert_distribution ( tree [ i + 3 ], tree, branch_ct, num_events ) ;",0
971,"<S2SV_ModStart> s2 ) { size_t len = strlen ( s2 ) ; return memcmp <S2SV_ModEnd> ( s1, <S2SV_ModStart> 1U ) ; } <S2SV_null> <S2SV_null>",0
972,"<S2SV_ModStart> TRUE ; } Jid * jid_from = jid_create ( from ) ; Jid * jid_to = jid_create ( to ) ; if (! jid_from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> jid <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } if ( g_strcmp0 ( name, ""sent"" )!= 0 ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> unrecognised <S2SV_blank> name: <S2SV_blank> %s"", name ) ; return TRUE ; } if ( g_strcmp0 ( name, ""received"" )!= 0 ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> unrecognised <S2SV_blank> name: <S2SV_blank> %s"", name ) ; return TRUE ; } if ( g_strcmp0 ( name, ""sent"" )!= 0 ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> unrecognised <S2SV_blank> name: <S2SV_blank> %s"", name ) ; return TRUE ; } if ( g_strcmp0 ( name, ""received"" )!= 0 ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> unrecognised <S2SV_blank> name: <S2SV_blank> %s"", name",0
973,"<S2SV_ModStart> badfmt : if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { addReplyError ( c, ""rdb_filename <S2SV_blank> can\'t <S2SV_blank> be <S2SV_blank> a <S2SV_blank> path, <S2SV_blank> just <S2SV_blank> a <S2SV_blank> filename"" ) ; return ; } <S2SV_ModStart> badfmt : if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { addReplyError ( c, ""rdb_filename <S2SV_blank> can\'t <S2SV_blank> be <S2SV_blank> a <S2SV_blank> path, <S2SV_blank> just <S2SV_blank> a <S2SV_blank> filename"" ) ; return ; } zfree ( server. rdb_filename ) ; server. rdb_filename = zstrdup ( o -> ptr ) ; } <S2SV_ModStart> badfmt : if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { addReplyError ( c, ""rdb_filename <S2SV_blank> can\'t <S2SV_blank> be <S2SV_blank> a <S2SV_blank> path, <S2SV_blank> just <S2SV_blank> a <S2SV_blank> filename"" ) ; return ; } zfree ( server. rdb_filename ) ; server. rdb_filename = zstrdup ( o -> ptr ) ; server. rdb_filename = zstrdup ( o -> ptr ) ;",0
974,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_HELP <S2SV_ModEnd>, NULL, <S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options ( ) ; log_flush ( LOG_MODE_INFO ) ; return 1 ; } if ( type == CONF_FD ) { if (! arg2 ) { s_log ( LOG_ERR, ""No <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> specified"" ) ; ioerror ( ""fd"" ) ; return 1 ; } name = arg2 ; type = CONF_FILE ; } if ( type == CONF_FILE ) { s_log (",0
975,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; msg ->,0
976,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
977,"<S2SV_ModStart> ; if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { loglog ( RC_LOG_SERIOUS, ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { loglog ( RC_LOG_SERIOUS, ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { loglog ( RC_LOG_SERIOUS, ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { loglog ( RC_LOG_SERIOUS, ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank>",0
978,<S2SV_ModStart> u4_num_Bytes ) ; if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_Bytes = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else if ( ps_op -> s_ivd_video_decode_op_t. u4_num_Bytes > ps_ip -> s_ivd_video_,0
979,"<S2SV_ModStart> int x, y, i ; if ( x_size < 0 || y_size < 0 ) { return false ; } <S2SV_ModEnd> old_width = s_map <S2SV_ModStart> ]. height ; tilemap = malloc ( x_size * y_size * sizeof ( struct map_tile ) ) ; if (! tilemap ) return false ; for ( x = 0 ; x < x_size ; ++ x ) { if ( y < y_size ) { tile = & tilemap [ x + y * x_size ] ; tile -> frames_left = tileset_get_delay ( s_map -> tileset, 0 ) ; } else { tile = & tilemap [ x + y * x_size ] ; tile -> frames_left = tileset_get_delay ( s_map -> tileset, 0 ) ; } } free ( tilemap ) ; s_map -> layers [ layer ]. tilemap = NULL ; for ( i = 0 ; i < s_map -> num_layers ; ++ i ) { if (! s_map -> layers [ i ]. is_parallax ) { s_map -> width = fmax ( s_map -> width, s_",0
980,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> 3 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ) ; return - 1 ; } <S2SV_ModEnd> ptr = cp <S2SV_ModStart> 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ) ; if ( ptr > length + 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ; if ( ptr > length + 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ; return - 1 ; } if ( ptr > length + 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ) ; if ( ptr > length + 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ; if ( ptr > length + 1 ) ND_PRINT ( ( ndo",0
981,<S2SV_ModStart> <S2SV_null> static char <S2SV_ModEnd> * print_string ( <S2SV_ModStart> { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> item -> valuestring ) ; } <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
982,"<S2SV_ModStart> 1 ) res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ; else { int i ; ctx += num_enc - 1 ; for ( i = num_enc - 1 ; i >= 0 ; i -- ) { if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) ) break ; ctx -- ; if ( img ) img -- ; } else { int i ; ctx += num_enc - 1 ; for ( i = num_enc - 1 ; i >= 0 ; i -- ) { if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) ) break ; ctx -- ; if ( img ) img -- ; } else { int i ; ctx += num_enc - 1 ; for ( i = num_enc - 1 ; i >= 0 ; i -- ) { if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) break ; ctx -- ;",0
983,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> ++ ; ret = <S2SV_ModStart> } if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> prestring\\n"" ) ; return 1 ; } <S2SV_ModStart> ++ ; ret = <S2SV_ModStart> + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } <S2SV_ModStart> ++ ; ret = sscanf ( argv",0
984,"<S2SV_ModStart> -> num_chunks ) { size_t size = sizeof ( unsigned char * ) * chunk_num * chm -> chunk_size ; if (! sys -> alloc ) { self -> error = MSPACK_ERR_NOMEMORY ; return NULL ; } memset ( chm -> chunk_cache, 0, size ) ; } if (! sys -> seek ( fh, ( off_t ) ( chm -> dir_offset + ( chunk_num * chm -> chunk_size ) ), MSPACK_SYS_SEEK_START ) ) { self -> error = MSPACK_ERR_SEEK ; sys -> free ( buf ) ; return NULL ; } if ( sys -> read ( fh, buf, ( int ) chm -> chunk_size )!= ( int ) chm -> chunk_size ) { self -> error = MSPACK_ERR_READ ; sys -> free ( buf ) ; return NULL ; } if ( sys -> seek ( fh, ( off_t ) ( chm -> dir_offset + ( chunk_num * chm -> chunk_size ) ) { self -> error = MSPACK_ERR_SEEK ; sys -> free ( buf ) ; return NULL ; } if",0
985,"<S2SV_ModStart> = fake_used_mask ; list_for_each_entry ( sibling, & leader -> sibling_list, group_entry ) { if ( sibling -> group_leader == leader ) return - EINVAL ; <S2SV_ModStart> group_entry ) { if ( sibling -> group_leader == leader ) return - EINVAL ; list_for_each_entry ( sibling, & sibling -> group_entry, group_entry ) { if ( sibling -> group_leader == leader ) return - EINVAL ; } list_for_each_entry ( sibling, & sibling -> sibling_list, group_entry ) { if (! validate_event ( & fake_pmu, sibling ) ) return - EINVAL ; } if ( sibling -> group_leader == leader ) return - EINVAL ; list_for_each_entry ( sibling, & sibling -> group_entry, group_entry ) { if (! validate_event ( & fake_pmu, sibling ) ) return - EINVAL ; } list_for_each_entry ( sibling, & sibling -> group_entry, group_entry ) { if (! validate_event ( & fake_pmu, sibling ) ) return - E",0
986,"<S2SV_ModStart> cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( - 1 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 2 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 3 ) { win_maximise ( - 1 ) ; win_set_geom ( 0, - 1, 0, 0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; win_set_chars ( rows0, rows0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( - 1 ) ; win_set_chars ( rows0,",0
987,"<S2SV_ModStart> ; if (! s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ;",0
988,<S2SV_ModStart> ; if ( nsops > INT_MAX / sizeof ( * sops ) ) return - EINVAL ; if (,0
989,<S2SV_ModStart> ++ ) s [ i ] = 0 ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] + s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; int x = s [ c + 7 ] + s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; int x = s [ c + 7 ] + s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; int x = s [ c + 7 ] + s [ c - 8 ] ; int y = s [ c + 7 ] +,0
990,"<S2SV_ModStart> blksz ) ; if ( log2_blksz < 0 ) { grub_error ( GRUB_ERR_BAD_FS, ""log2 <S2SV_blank> blksz <S2SV_blank> too <S2SV_blank> large"" ) ; return - 1 ; } <S2SV_ModStart> blksz ) ; if ( log2_blksz < 0 ) { grub_error ( GRUB_ERR_BAD_FS, ""log2 <S2SV_blank> blksz <S2SV_blank> too <S2SV_blank> large"" ) ; return - 1 ; } <S2SV_ModStart> blksz ) ; if ( log2_blksz < 0 ) { grub_error ( GRUB_ERR_BAD_FS, ""log2 <S2SV_blank> blksz <S2SV_blank> too <S2SV_blank> large"" ) ; return - 1 ; } <S2SV_ModStart> blksz ) ; if ( log2_blksz < 0 ) { grub_error ( GRUB_ERR_BAD_FS, ""log2 <S2SV_blank> blksz <S2SV_blank> too <S2SV_blank> large"" ) ; return - 1 ; } <S2SV_ModStart> blksz ) ; if ( log2_blksz < 0 ) { grub_error ( GRUB_ERR_BAD_FS, ""log2 <S2SV_blank> blksz <S2SV_blank> too <S2SV_blank> large"" ) ; return - 1 ;",0
991,"<S2SV_ModStart> ; # endif if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif i -> posX = i -> parent -> width ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
992,"<S2SV_ModStart> ; if ( nelements == 0 ) { DPRINTF ( ( ""CDF_READ_PROPERTY_INFO: <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
993,"<S2SV_ModStart> ; if ( flags & RE_FLAGS_EXHAUSTIVE ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_BACKWARDS? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; break ; } <S2SV_ModStart> ) ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_EXHAUSTIVE? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; break ; } if ( flags & RE_FLAGS_BACKWARDS ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_BACKWARDS? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; break ; } <S2SV_ModStart> ) ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_BACKWARDS? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; break ; } <S2SV_ModStart> if ( flags & RE_FLAGS_BACKWARDS ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_BACKWARDS? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ;",0
994,"<S2SV_ModStart> int token, <S2SV_ModEnd> char * str <S2SV_ModStart> { case LEX_EOF : strncpy ( str, ""EOF"", len ) ; return ; case LEX_ID : strncpy ( str, ""ID"", len ) ; return ; case LEX_INT : strncpy ( str, ""INT"", len ) ; return ; case LEX_FLOAT : strncpy ( str, ""FLOAT"", len ) ; return ; case LEX_STR : strncpy ( str, ""STRING"", len ) ; return ; case LEX_UNFINISHED_STR : strncpy ( str, ""UNFINISHED <S2SV_blank> STRING"", len ) ; return ; case LEX_TEMPLATE_LITERAL : strncpy ( str, ""TEMPLATE <S2SV_blank> LITERAL"", len ) ; return ; case LEX_REGEX : strncpy ( str, ""REGEX"", len ) ; return ; case LEX_UNFINISHED_REGEX : strncpy ( str, ""UNFINISHED <S2SV_blank> REGEX"", len ) ; return ; case LEX_UNFINISHED_COMMENT : strncpy ( str, ""UNFINISHED <S2SV_blank> COMMENT"", len ) ; return ; } if ( token >= _",0
995,"<S2SV_ModStart> mnt_instance ) ; if ( unlikely (! ( mnt -> mnt. mnt_flags & MNT_INTERNAL ) ) ) { init_task_work ( & mnt -> mnt_rcu, __cleanup_mnt ) ; if (! task_work_add ( task, & mnt -> mnt_rcu, true ) ) { init_task_work ( & mnt -> mnt_rcu, true ) ; if (! task_work_add ( task, & mnt -> mnt_rcu, true ) ) { init_task_work ( & mnt -> mnt_rcu, true ) ; if (! task_work_add ( task, & mnt -> mnt_rcu, true ) ) return ; } if ( llist_add ( & mnt -> mnt_llist, & delayed_mntput_list ) ) schedule_delayed_work ( & delayed_mntput_work, 1 ) ; return ; }",0
996,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
997,"<S2SV_ModStart> ) ) { jas_eprintf ( ""packet <S2SV_blank> offset=%08ld <S2SV_blank> cmptno=%02d <S2SV_blank> "" ""rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_cmptno ( pi ), jpc_pi_rlvlno ( pi ), jpc_pi_lyrno ( pi ) ) ; } if ( jas_stream_peekc ( in ) == EOF ) { jas_eprintf ( ""packet <S2SV_blank> offset=%08ld <S2SV_blank> prg=%02d <S2SV_blank> cmptno=%02d <S2SV_blank> "" ""rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", jas_stream_getrwcount ( in ), jpc_pi_cmptno ( pi ), jpc_pi_rlvlno ( pi ), jpc_pi_prcno ( pi ), jpc_pi_lyrno ( pi ) ) ; }",0
998,"<S2SV_ModStart> * symlink ; <S2SV_ModEnd> struct udf_inode_info * <S2SV_ModStart> * iinfo ; <S2SV_ModEnd> down_read ( & <S2SV_ModStart> ; uint32_t pos ; if ( UDF_I ( inode ) -> i_alloc_type == ICBTAG_FLAG_AD_IN_ICB ) { symlink = iinfo -> i_ext. i_data + iinfo -> i_lenEAttr ; } else { bh = sb_bread ( inode -> i_sb, pos ) ; if (! bh ) goto out ; } pos = udf_block_map ( inode, 0 ) ; if ( iinfo -> i_alloc_type == ICBTAG_FLAG_AD_IN_ICB ) { symlink = iinfo -> i_ext. i_data + iinfo -> i_lenEAttr ; } else if ( iinfo -> i_alloc_type == ICBTAG_FLAG_AD_IN_ICB ) { symlink = iinfo -> i_ext. i_data + iinfo -> i_lenEAttr ; } brelse ( bh ) ; up_read ( & iinfo -> i_data_sem ) ; SetPageUptodate ( page ) ; kun",0
999,<S2SV_ModStart> ; else if ( is_noncanonical_address ( vcpu -> arch. apic_base ) ) { if ( is_noncanonical_address ( vcpu -> arch. apic_base ) ) { if ( is_noncanonical_address ( vcpu ) ) { if ( is_noncanonical_address ( vcpu ) ) { if ( is_noncanonical_address ( vcpu ) ) { if ( is_noncanonical_address ( vcpu ) ) { if ( is_noncanonical_address ( vcpu ) ) { if ( is_noncanonical_address ( vcpu ) ) { if ( is_noncanonical_address ( vcpu ) ) { if ( is_noncanonical_address ( vcpu ) ) { if ( is_noncanonical_address ( vcpu ) ) { if ( is_noncanonical_address ( vcpu ) ) { if ( is_noncanonical_address ( vcpu ) ) { if ( is_noncanonical_address ( vcpu ) ) { if ( is_noncanonical_address ( vcpu ) ) { if ( is_noncanonical_address ( vcpu ) ) { if ( is_noncanonical_address ( vcpu ) ),0
1000,"<S2SV_ModStart> ( ent!= NULL && <S2SV_ModStart> ( st = populate_policy ( context, ld, ent, pol_name, * policy ) )!= 0 <S2SV_ModEnd> ) goto cleanup <S2SV_ModStart> cleanup ; } dal_handle = get_dal_handle ( context ) ; if ( dal_handle == NULL ) { krb5_ldap_put_handle_to_pool ( ldap_context, ldap_server_handle ) ; return krb5_ldap_free_password_policy ( context, dal_handle ) ; } dal_handle = get_dal_handle ( context ) ; if ( dal_handle == NULL ) { st = krb5_ldap_put_handle_to_pool ( ldap_context, ldap_server_handle ) ; if ( dal_handle == NULL ) { krb5_ldap_put_handle_to_pool ( ldap_context, ldap_server_handle ) ; return st ; } dal_handle = get_dal_handle ( context, dal_handle ) ; if ( dal_handle == NULL ) { krb5_ldap_put_handle_to_pool ( ldap_context, ldap_server_handle",0
1001,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
1002,"<S2SV_ModStart> ) ) { switch ( c ) { case'<S2SV_blank>': psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'e' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'T' : trunc_8to4 = SF_TRUE ; break ; case'm' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_3byte ( psf, data ) ; } else { header_put_le_3byte ( psf, data ) ; } ; count += 3 ; break ; case '5' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_3byte ( psf, data ) ; } else { header_put_le_3byte ( psf, data ) ; } ; count += 5 ; break ; case '6' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_",0
1003,"<S2SV_ModStart> ; if ( d -> msg_len > ( CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) ) return - EINVAL ; if ( d -> msg_len < 0 ) return - EINVAL ; if ( ++ i < d -> msg_len ) printk ( KERN_INFO ""cx24116: <S2SV_blank> %s("", __func__ ) ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGOFS + i ] = d -> msg [ i ] ; state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN ] = d -> msg_len ; state -> dsec_cmd. len = CX24116_DISEQC_MSGOFS + state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN ] ; if ( toneburst == CX24116_DISEQC_TONEOFF ) state -> dsec_cmd. args [ CX24116_DISEQC_BURST ] = 0",0
1004,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
1005,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> width, image -> height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> width, image -> height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> = SetImageExtent ( image, image -> depth, image -> depth ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> height, image -> depth ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; return ( DestroyImageList ( image ) ) ; }",0
1006,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; }",0
1007,"<S2SV_ModStart> int num_items_scanned ; guint <S2SV_ModEnd> pkt_len ; int <S2SV_ModStart> 0 ) ; if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } <S2SV_ModStart> = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE",0
1008,"<S2SV_ModStart> ; int err ; msg -> msg_namelen = 0 <S2SV_ModStart> cskb ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( msg, SOL_IUCV, SCM_IUCV_STATUS, CB_IUCV_STATUS ( skb ) ) ) { if (! ( flags & MSG_PEEK ) ) skb_queue_head ( & sk -> sk_receive_queue, skb ) ; return - EFAULT ; } <S2SV_ModEnd> err = put_cmsg <S2SV_ModStart>, SOL_IUCV, SCM_IUCV_STATUS, CB_IUCV_STATUS ( skb ) ) ; if ( err ) { if (! ( flags & MSG_PEEK ) ) skb_queue_head ( & sk -> sk_receive_queue, skb ) ; return err ; } <S2SV_ModEnd> err = put_cmsg <S2SV_ModStart>, SOL_IUCV, SCM_IUCV_ERROR, CB_IUCV_ERROR, CB_IUCV_ERROR ( skb ) ) ; if ( err ) { if (! ( flags & MSG_PEEK ) ) skb_queue_head ( & sk -> sk_receive_queue, skb ) ;",0
1009,"<S2SV_ModStart> key ) ; if ( zend_symtable_find ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_symtable_update ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, & data, sizeof ( data ), NULL ) ; break ; case IS_STRING : if ( zend_symtable_find ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_symtable_update ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, & data, sizeof ( data ), NULL ) ; break ; case IS_LONG : if ( zend_hash_index_find ( ht, Z_LVAL_P ( key",0
1010,"<S2SV_ModStart> ) ) ; if ( link [ TIPC_NLA_LINK_NAME ] ) strcpy ( link_info. str, nla_data ( link [ TIPC_NLA_LINK_NAME ] ), sizeof ( link_info. str ) <S2SV_ModEnd> ) ; return",0
1011,<S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; obuf -> len = len ; opipe -> nrbufs ++ ; ibuf -> offset += obuf -> len ; ibuf -> len -= obuf -> len ; } else if ( ibuf -> flags & PIPE_BUF_FLAG_OVERFLOW ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_OVERFLOW ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; obuf -> len = len ; opipe -> nrbufs ++ ; ibuf -> offset += obuf -> len ; ibuf -> len -= obuf -> len ; },0
1012,"<S2SV_ModStart> ) { if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ) { p -> tokenlen = sizeof ( p -> tokenbuf ) * 2 + 256 ; p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen ) ; } assert (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ; if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ) { p -> tokenlen = sizeof ( p -> tokenbuf ) * 2 + 256 ; p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen ) ; } assert (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ; if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ) { jv_mem",0
1013,<S2SV_ModStart> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> : return vp9_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> : return vp9_mse16x8 <S2SV_ModEnd> ; default : <S2SV_ModStart> : return vp9_mse8x16 <S2SV_ModEnd> ; } },0
1014,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1015,<S2SV_ModStart> return AVERROR_INVALIDDATA ; if ( back_size > INT_MAX / 2 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size,0
1016,<S2SV_ModStart> ) ) { if ( comp -> dx > ( OPJ_UINT32 ) ( 1u << ( res -> pdx + comp -> numresolutions - 1 ) ) ) { if ( comp -> dy > ( OPJ_UINT32 ) ( 1u << ( res -> pdy + comp -> numresolutions - 1 ) ) ) { if ( comp -> dx > ( OPJ_UINT32 ) ( 1u << ( res -> pdx + comp -> numresolutions - 1 ) ) { if ( comp -> dx > ( OPJ_UINT32 ) ( 1u << ( res -> pdy + comp -> numresolutions - 1 ) ) ) { if ( comp -> dy > ( OPJ_UINT32 ) ( 1u << ( res -> pdx + comp -> numresolutions - 1 ) ) ) { if ( comp -> dx > ( OPJ_UINT32 ) ( 1u << ( res -> pdx + comp -> numresolutions - 1 ) ) ) { if ( comp -> dx > ( OPJ_UINT32 ) ( 1u << ( res -> pdy + comp -> numresolutions - 1 ) ) ) { if ( comp -> dx >,0
1017,"<S2SV_ModStart> send_pa ) ; if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX_REQ ) { return return_pkinit_kx_req ( context, request, reply, encrypting_key, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX_REP ) { return return_pkinit_kx_rep ( context, request, reply, encrypting_key, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX_REQ ) { return return_pkinit_kx_req ( context, request, reply, encrypting_key, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX_REQ ) { return return_pkinit_kx_rep ( context, request, reply, encrypting_key, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX_REQ ) { return return_pkinit_kx_req (",0
1018,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1019,"<S2SV_ModStart> -> stratum_port ; if (! strcmp ( url, pool -> sockaddr_url ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", url ) ; return false ; } if ( strcmp ( url, pool -> sockaddr_url ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", url ) ; return false ; } if ( strcmp ( url, pool -> sockaddr_url ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", url ) ; return false ; } if ( strcmp ( url, pool -> sockaddr_url ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", url ) ; return false ; }",0
1020,"<S2SV_ModStart> max_submaps ) { if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; <S2SV_ModStart> max_submaps ) { if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; <S2SV_ModStart> max_submaps ) { if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) return error ( f, VORBIS_too_many_submaps ) ; } <S2SV_ModStart> max_submaps ) { if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) { if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) return error ( f, VORBIS_too_many_",0
1021,<S2SV_ModStart> return 0 ; if ( head -> iov_len + hdr + len > XDR_QUADLEN ( len ) * 4 ) return 0 ;,0
1022,"<S2SV_ModStart> item ) ; <S2SV_ModEnd> unsigned long tmp <S2SV_ModStart> EINVAL ; write_lock ( & cluster -> cl_nodes_lock ) ; if ( cluster -> cl_nodes [ tmp ] ) ret = - EEXIST ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_NUM, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_PORT, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else { cluster -> cl_nodes [ tmp ] = node ; node -> nd_num = tmp ; set_bit ( tmp, cluster -> cl_nodes_bitmap ) ; } write_unlock ( & cluster -> cl_nodes_lock ) ;",0
1023,"<S2SV_ModStart> flags ) ; <S2SV_ModEnd> v4l2_buf = to_vb2_v4l2_buffer <S2SV_ModStart> v4l2_buf ) ; if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_left, frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_left, frame_len ) ; return ;",0
1024,<S2SV_ModStart> size ) { if ( size < PREFIX_SIZE ) { zmalloc_oom_handler ( size ) ; return NULL ; },0
1025,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> count ; if,0
1026,<S2SV_ModStart> serviceId == EXTRACT_32BITS <S2SV_ModEnd> ( & rxh,0
1027,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, INFO, ""info: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> = <S2SV_blank> %s\\n"", req_ssid -> ssid ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid_len ) ; } else { memset ( bss_desc -> ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; }",0
1028,"<S2SV_ModStart> ) ) { xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED, XFS_RANDOM_ATTR_SHORTFORM ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED, XFS_RANDOM_ATTR_SHORTFORM ) ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_",0
1029,"<S2SV_ModStart> r ) { int ret ; ret = ASN1_item_verify ( ASN1_ITEM_rptr ( X509_CINF ), a -> signature, a -> cert_info, r ) ; if ( ret < 0 ) return ret ; ret = ASN1_item_verify ( ASN1_ITEM_rptr ( X509_CINF ), a -> sig_alg, a -> signature, a -> cert_info, r ) ; if ( ret < 0 ) return ret ; ret = ASN1_item_verify ( ASN1_ITEM_rptr ( X509_CINF ), a -> sig_alg, a -> signature, a -> cert_info, r ) ; if ( ret < 0 ) return ret ; ret = ASN1_item_verify ( ASN1_ITEM_rptr ( X509_CINF ), a -> sig_alg, a -> signature, a -> cert_info, r ) ; if ( ret < 0 ) return ret ;",0
1030,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> hrtimer_start ( &,0
1031,"<S2SV_ModStart> ; struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; void * <S2SV_ModStart> = L2CAP_MODE_BASIC ; <S2SV_ModEnd> switch ( pi <S2SV_ModStart> = L2CAP_MODE_ERTM ; <S2SV_ModEnd> rfc. txwin_size <S2SV_ModStart> = L2CAP_DEFAULT_TX_WINDOW ; <S2SV_ModEnd> rfc. retrans_timeout <S2SV_ModStart> = L2CAP_DEFAULT_RETRANS_TO ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) ; break ; case L2CAP_MODE_STREAMING : rfc. mode = L2CAP_MODE_STREAMING ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP",0
1032,"<S2SV_ModStart> r ) { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_WAITALL ) ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_WAITALL ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1033,"<S2SV_ModStart> = - 1 ; if ( s -> chunksize == - 1 ) { av_log ( h, AV_LOG_ERROR, ""chunksize <S2SV_blank> is <S2SV_blank> negative\\n"" ) ; return err ; }",0
1034,<S2SV_ModStart> u1_nal_ref_idc ) ; if ( ( u1_nal_ref_idc < 0 ) || ( u1_nal_ref_idc > ps_dec -> u1_nal_ref_idc_max ) || ( u1_nal_ref_idc > ps_dec -> u1_nal_ref_idc_max ) || ( ( u1_nal_ref_idc > ps_dec -> u1_nal_ref_idc_max ) || ( u1_nal_ref_idc < 0 ) || ( u1_nal_ref_idc > ps_dec -> u1_nal_ref_idc_min ) || ( u1_nal_ref_idc < ps_dec -> u1_nal_ref_idc_min ) || ( u1_nal_ref_idc < ps_dec -> u1_nal_ref_idc_min ) || ( u1_nal_ref_idc > ps_dec -> u1_nal_ref_idc_max,0
1035,"<S2SV_ModStart>!= 0 ) { if (! mprHasItem ( app -> formData, sclone ( pair ) ) ) mprAddItem ( app -> formData, sclone ( tok ) ) ; if (! mprHasItem ( app -> formData, sclone ( tok ) ) ) { mprAddItem ( app -> formData, sclone ( tok ) ) ; mprAddItem ( app -> formData, sclone ( tok ) ) ; } pair = stok ( 0, ""&"", & tok ) ; if ( pair!= 0 ) { if (! mprHasItem ( app -> formData, sclone ( tok ) ) ) mprAddItem ( app -> formData, sclone ( tok ) ) ; if (! mprHasItem ( app -> formData, sclone ( tok ) ) ) { mprAddItem ( app -> formData, sclone ( tok ) ) ; mprAddItem ( app -> formData, sclone ( tok ) ) ; } else if (! mprHasItem ( app -> formData, sclone ( pair ) ) ) { mprAddItem ( app -> formData, sclone ( tok ) ) ; mprAddItem ( app -> formData, sclone ( tok ) )",0
1036,"<S2SV_ModStart> } err = crypto_rng_setseed <S2SV_ModEnd> ( tfm,",0
1037,<S2SV_ModStart> = uid ; <S2SV_ModEnd> spin_lock_irq ( & <S2SV_ModStart> new ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1038,<S2SV_ModStart> ; if ( msg_sys. msg_namelen > msg_sys. msg_namelen ) { err = - EINVAL ; break ; } <S2SV_ModEnd> if ( msg_sys <S2SV_ModStart> msg_sys. msg_namelen > msg_sys. msg_namelen ) { err = - EINVAL ; break ; } <S2SV_ModEnd> if ( msg_sys <S2SV_ModStart> msg_sys. msg_namelen > msg_sys. msg_namelen ) { err = - EINVAL ; break ; } if ( msg_sys. msg_flags & MSG_TRUNC ) { if ( msg_sys. msg_namelen > msg_sys. msg_namelen && msg_sys. msg_namelen == msg_sys. msg_namelen ) { err = - EINVAL ; break ; } if ( msg_sys. msg_namelen > msg_sys. msg_namelen ) { err = - EINVAL ; break ; } if ( msg_sys. msg_flags & MSG_TRUNC ) { if ( msg_sys. msg_namelen > msg_sys. msg_namelen && msg_sys,0
1039,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1040,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> prefetch_table ( const <S2SV_ModStart> len ) { return <S2SV_ModEnd> 0 ; } <S2SV_ModStart> i ; } <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1041,"<S2SV_ModStart> inode ) ; if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank> %d, <S2SV_blank> depth: <S2SV_blank> %d"", inode -> i_ino, path [ depth ]. p_ext, depth ) ; err = - EIO ; goto out2 ; } if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> depth: <S2SV_blank> %d"", inode -> i_ino, depth ) ; goto out2 ; } if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> depth: <S2SV_blank> %d"", depth ) ; goto out2 ; } if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> depth",0
1042,"<S2SV_ModStart> * open_stateid, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode &= ( FMODE_READ | FMODE_WRITE ) ; <S2SV_ModStart> deleg_cur ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) <S2SV_ModEnd>!= open_flags ) <S2SV_ModStart> ) ; __update_open_stateid <S2SV_ModEnd> ( state,",0
1043,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> width, image -> height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> width, image -> height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ( <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1044,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1045,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void oidc_scrub_headers (,1
1046,"<S2SV_ModStart> int64_t * out_rate_sum, int64_t * out_dist_sum, vpx_bit_depth_t bit_depth <S2SV_ModStart> int sse ; vpx_bit_depth_t bit_depth <S2SV_ModStart> void ) cpi <S2SV_ModEnd> -> fn_ptr [ <S2SV_ModStart> ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & bit_depth <S2SV_ModStart> ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; int64_t square_error ; int quantizer ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist, & dist ) ; rate_sum += rate ; dist_sum += dist ; } else { int rate ; int64_t dist ; vpx_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ;",0
1047,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1048,"<S2SV_ModStart> ( ndo, ""%s, <S2SV_blank> length <S2SV_blank> %u"" <S2SV_ModEnd>, source_address_length, <S2SV_ModStart> ( ndo, ""%s, <S2SV_blank> source_address_number <S2SV_blank> %u"" <S2SV_ModEnd>, source_address_number, <S2SV_ModStart> ( ndo, ""%s, <S2SV_blank> source_address_length <S2SV_blank> %u"" <S2SV_ModEnd>, source_address_length, <S2SV_ModStart> ( ndo, ""%s, <S2SV_blank> source_address_number <S2SV_blank> %u"" <S2SV_ModEnd>, source_address_number, <S2SV_ModStart> ( ndo, ""%s, <S2SV_blank> source_address_length <S2SV_blank> %u"" <S2SV_ModEnd>, source_address_length, <S2SV_ModStart> ( ndo, ""%s, <S2SV_blank> source_address_number <S2SV_blank> %u"" <S2SV_ModEnd>, source_address_number, <S2SV_ModStart> ( ndo, ""%s, <S2SV_blank> source_address_length <S2SV_blank> %u"" <S2SV_ModEnd>, source_address_number, <S2SV_ModStart> ( ndo, ""%s, <S2SV_blank> source_address_number <S2SV_blank> %u"", source_address_length, source_address_number, source_address_number, esis_pdu_type, source_address_length, source_address_number, esis_pdu_type, esis_pdu_type, source_address",0
1049,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; <S2SV_ModStart> } if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( <S2SV_ModStart> + 1 ) ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username,0
1050,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { return vpx_read_tree <S2SV_ModEnd> ( r,",1
1051,<S2SV_ModStart> uint32_t backup_handle ; if ( unlikely ( req -> mip_levels > DRM_VMW_MAX_MIP_LEVELS ) ) return - EINVAL ;,0
1052,<S2SV_ModStart> <S2SV_null> static struct desc_struct <S2SV_ModEnd> * get_desc ( <S2SV_ModStart> ) { struct desc_struct <S2SV_ModEnd> * desc = <S2SV_ModStart> ldt && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> -> nr_entries ) { <S2SV_ModEnd> desc = & <S2SV_ModStart> -> entries [ sel ] ; mutex_unlock ( & current -> active_mm -> context. lock ) ; return desc ; } <S2SV_ModEnd> # endif native_store_gdt <S2SV_ModStart> = sel & SEGMENT_RPL_MASK ; if ( desc_base > gdt_desc. size ) return NULL ; desc_base = sel & ~ ( SEGMENT_RPL_MASK | SEGMENT_TI_MASK ) ; if ( desc_base > gdt_desc. size ) return NULL ; if ( desc_base > gdt_desc. size ) return NULL ; desc_base = sel & SEGMENT_RPL_MASK | SEGMENT_TI_MASK ; if ( desc_base > gdt_desc. size ) return NULL ; if ( desc_base > gdt_desc. size ) return NULL ; desc_base = sel & ~ ( SEGMENT_RPL_MASK | SEGMENT_TI_MASK ) ; if ( desc,0
1053,"<S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } src_ptr1 += src_stride ; src_ptr2 += src_stride ; dst_ptr2 += src_stride ; } src_ptr1 = src - extend_left ; src_ptr2 = src + src_stride * ( height - 1 ) - extend_left ; dst_ptr1 = src + src_stride * ( height - 1 ) - extend_left ; for ( i = 0 ; i < extend_top ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_bottom ; ++ i ) { memcpy ( dst_ptr2, src_ptr2, linesize ) ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_right ; ++ i ) { memcpy ( dst_ptr",0
1054,"<S2SV_ModStart> struct sctp_sockaddr_entry * laddr = & t -> ipaddr <S2SV_ModEnd> ; union sctp_addr <S2SV_ModStart> struct sctp_sockaddr_entry * baddr = & t -> ipaddr <S2SV_ModEnd> ; union sctp_addr <S2SV_ModStart> ; __u8 matchlen ; __u8 bmatchlen ; sctp_scope_t scope ; memset ( fl6, 0, sizeof ( struct flowi6 ) ) ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_oif = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_",0
1055,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1056,"<S2SV_ModStart> ++ ; buf2 = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf2 == NULL ) { ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; return ( NULL ) ; } buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) { ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; return ( NULL ) ; } s [ p - fmt ] = '\\0' ; fmt = p + 1 ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) { ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; return ( NULL ) ; } ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len )",0
1057,<S2SV_ModStart> ; if ( gsm_protocol_timeout_is_valid ( client -> priv -> protocol_timeout ) ) { gsm_source_remove ( client -> priv -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; } else if ( gsm_protocol_timeout_is_valid ( client -> priv -> protocol_timeout ) ) { gsm_source_remove ( client -> priv -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; } if ( gsm_protocol_timeout_is_valid ( client -> priv -> protocol_timeout ) ) { gsm_source_remove ( client -> priv -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; } else if ( gsm_protocol_timeout_is_valid ( client -> priv -> protocol_timeout ) ) { gsm_source_remove ( client -> priv -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; } if ( gsm_protocol_timeout_is_valid ( client -> priv -> protocol_timeout ) ) { gsm_source_remove ( client -> priv -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; },0
1058,"<S2SV_ModStart> 1 ) ; if ( ps == NULL ) { ND_PRINT ( ( ndo, ""No <S2SV_blank> pgstate <S2SV_blank> present"" ) ) ; return ( - 1 ) ; } <S2SV_ModStart> 1 ) ; if ( ps == NULL ) { ND_PRINT ( ( ndo, ""No <S2SV_blank> pgstate <S2SV_blank> present"" ) ) ; return ( - 1 ) ; } <S2SV_ModStart> 1 ) ; if ( ps == NULL ) { ND_PRINT ( ( ndo, ""No <S2SV_blank> pgstate <S2SV_blank> present"" ) ) ; return ( - 1 ) ; } if ( ps == NULL ) { ND_PRINT ( ( ndo, ""No <S2SV_blank> pgstate <S2SV_blank> present"" ) ) ; return ( - 1 ) ; } if ( ps == NULL ) { ND_PRINT ( ( ndo, ""No <S2SV_blank> pgstate <S2SV_blank> present"" ) ) ; return ( - 1 ) ; } if ( ps == NULL ) { ND_PRINT ( ( ndo, ""No <S2SV_blank> pgstate <S2SV_blank> present"" ) ) ; return ( - 1 ) ; } if ( ps == NULL ) { ND_PRINT ( ( ndo, ""No <S2SV_blank> pgstate <S2SV_blank> present"" ) ) ; return ( - 1 ) ; }",0
1059,"<S2SV_ModStart> length ) ; header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; header. byteCount = htole16 ( length ) ; header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_TXQCR, TXQCR_METFE ) ; ksz8851WriteFifo ( interface, ( uint8_t * ) & header, sizeof ( Ksz8851TxHeader ) ) ; ksz8851WriteFifo ( interface, ( uint8_t * ) & header, sizeof ( Ksz8851TxHeader ) ) ; ksz8851WriteFifo ( interface, ( uint8_t * ) & header, sizeof ( Ksz8851TxHeader ) ) ; ksz8851WriteFifo ( interface, ( uint8_t * ) & header, sizeof ( Ksz8851TxHeader",0
1060,"<S2SV_ModStart> NULL ) ; if ( ctx -> flags & EVP_CIPHER_FLAG_ZERO_KEY ) { ossl_raise ( eCipherError, ""key <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero"" ) ; ossl_raise ( eCipherError, ""key <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero"" ) ; return key ; } if ( ctx -> flags & EVP_CIPHER_FLAG_ZERO_KEY ) { ossl_raise ( eCipherError, ""key <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero"" ) ; return key ; } if ( ctx -> flags & EVP_CIPHER_FLAG_ZERO_KEY ) { ossl_raise ( eCipherError, ""key <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero"" ) ; ossl_raise ( eCipherError, ""key <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero"" ) ; return key ; } if ( ctx -> flags & EVP_CIPHER_FLAG_ZERO_KEY ) { ossl_raise ( eCipherError, ""key <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero"" ) ; return key ; } if ( ctx -> flags & EVP_CIPHER_FLAG_ZERO_KEY ) { ossl_raise ( eCipherError, ""key <S2SV_blank> must <S2SV_blank>",0
1061,"<S2SV_ModStart> assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { if (! assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> slot <S2SV_blank> %d\\n"", i ) ; edit -> dead_leaf = node -> slots [ i ] ; } else if (! assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> slot <S2SV_blank> %d\\n"", i ) ; edit -> dead_leaf = node -> slots [ i ] ; } else if (! assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> slot <S2SV_blank> %d\\n"",",0
1062,<S2SV_ModStart> ; settings. ssl_verify_peer = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_pass = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_pass = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_pass = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_pass = false ; settings. ssl_,0
1063,"<S2SV_ModStart> ; # endif # ifdef MONO_HAS_SEMAPHORES if ( domains_to_finalize ) { mono_finalizer_lock ( ) ; domains_to_finalize = g_slist_remove ( domains_to_finalize, g_slist_head ( domains_to_finalize, g_slist_head ( domains_to_finalize, g_slist_head ( domains_to_finalize, g_slist_head ) ) ; domains_to_finalize = g_slist_remove ( domains_to_finalize, g_slist_head ( domains_to_finalize, g_slist_head ( domains_to_finalize, g_slist_head ) ) ; } else { mono_finalizer_unlock ( ) ; finalize_domain_objects ( g_slist_remove ( domains_to_finalize, g_slist_head ( domains_to_finalize, g_slist_head ( domains_to_finalize, g_slist_head ( domains_to_finalize, g_slist_head ( domains_to_finalize, g_slist_head ( domains_to_finalize, g",0
1064,"<S2SV_ModStart>, x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 n00, n10, n20, n30, n01, n11, n21, n31 ; WORD32 n03, n12, n22, n32, n03, n13, n23, n33 ; WORD32 n0, j0 ; for ( i = 0 ; i < npoints ; i ++ ) { h2 = * pdig_rev_tbl ++ >> 2 ; x_0 = * x0 ++ ; x_1 = * x0 ++ ; x_2 = * x0 ++ ; x_3 = * x0 ++ ; x_4 = * x0 ++ ; x_5 = * x0 ++ ; x_6 = * x0 ++ ; x_7 = * x0 ++ ; x_6 = * x0 ++ ; x_7 = * x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_a = * x0 ++ ; x_b = * x0",0
1065,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
1066,"<S2SV_ModStart> ) ) { if ( unlikely ( pmd_trans_huge_or_clear_bad ( pmd ) ) <S2SV_ModStart> continue ; } if ( unlikely ( pmd_trans_huge_or_clear_bad ( pmd ) ) ) { if ( pmd_none_or_clear_bad ( pmd ) ) { ret = unuse_pte_range ( vma, pmd, addr, next, entry, page ) ; if ( ret ) return ret ; } else { if ( pmd_none_or_clear_bad ( pmd ) ) { ret = unuse_pte_range ( vma, pmd, addr, next, entry, page ) ; if ( ret ) { if ( pmd_none_or_clear_bad ( pmd ) ) { ret = unuse_pte_range ( vma, pmd, addr, next, entry, page ) ; if ( ret ) return ret ; } } else { if ( pmd_none_or_clear_bad ( pmd ) ) { ret = unuse_pte_range ( vma, pmd, addr, next, entry, page ) ; if (",0
1067,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1068,<S2SV_ModStart> ) ; } <S2SV_ModEnd> r_anal_esil_to_reil_setup ( esil <S2SV_ModStart> ) ; } <S2SV_ModEnd> r_anal_esil_to_reil_setup ( esil <S2SV_ModStart> ) ; } <S2SV_ModEnd> r_anal_esil_to_reil_setup ( esil <S2SV_ModStart> ) ; } <S2SV_ModEnd> r_anal_esil_to_reil_setup ( esil <S2SV_ModStart> ) ; } <S2SV_ModEnd> r_anal_esil_to_reil_setup ( esil <S2SV_ModStart> ) ; } <S2SV_ModEnd> r_anal_esil_to_reil_setup ( esil <S2SV_ModStart> ) ; } <S2SV_ModEnd> r_anal_esil_to_reil_setup ( esil <S2SV_ModStart> ) ; } <S2SV_ModEnd> r_anal_esil_to_reil_setup ( esil,0
1069,"<S2SV_ModStart>, frames ; if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s",0
1070,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 wTmp ; snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wHead ) ) ) ; wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp < readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp < readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip ->",0
1071,<S2SV_ModStart> OPCODE_DESC * opcode_desc ; if ( len < 2 ) { goto INVALID_OP ; } <S2SV_ModStart> ; } return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
1072,<S2SV_ModStart> status ; ACPI_FUNCTION_TRACE ( ns_terminate ) ; <S2SV_ModStart> * prev ; <S2SV_ModEnd> next = acpi_gbl_module_code_list <S2SV_ModStart> } } # endif acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node ) ; status = acpi_ut_acquire_mutex ( ACPI_MTX_NAMESPACE ) ; if ( ACPI_FAILURE ( status ) ) { return_VOID ; } acpi_ut_release_mutex ( ACPI_MTX_NAMESPACE ) ; if ( ACPI_FAILURE ( status ) ) { return_VOID ; } acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node ) ; status = acpi_ut_acquire_mutex ( ACPI_MTX_NAMESPACE ) ; if ( ACPI_FAILURE ( status ) { return_VOID ; } acpi_ns_delete_node ( acpi_gbl_root_node ) ; if ( status ) { return_VOID ; } acpi_ns_delete_node ( acpi_gbl_root_node ) ; ( void ) acpi_ut_release_mutex,0
1073,"<S2SV_ModStart> ; # endif strcpy ( the_url, arg ) ; if ( strlen ( the_url ) > sizeof ( the_url ) - sizeof ( the_url ) - sizeof ( the_url ) - sizeof ( the_url ) - sizeof ( the_url ) - sizeof ( the_url ) - sizeof ( the_url ) - sizeof ( the_url ) - sizeof ( the_url ) - sizeof ( the_url ) - sizeof ( the_url ) ) return - 1 ; if ( strlen ( the_url ) > sizeof ( the_url ) - sizeof ( the_url ) - sizeof ( the_url ) - sizeof ( the_url ) - sizeof ( the_url ) - sizeof ( the_url ) - sizeof ( the_url ) - sizeof ( the_url ) - sizeof ( the_url ) - sizeof ( the_url ) - sizeof ( the_url ) - sizeof ( the_url ) - sizeof ( the_url ) ) return - 1 ; if ( strlen ( the_url ) > sizeof ( the_url ) - sizeof ( the_url ) - sizeof ( the_url ) - sizeof ( the_url ) - sizeof ( the_url ) - sizeof",0
1074,<S2SV_ModStart> num_fields ) { <S2SV_ModEnd> _Py_IDENTIFIER ( _attributes,0
1075,"<S2SV_ModStart> ; struct vpx_codec_alg_priv <S2SV_ModEnd> * priv ; <S2SV_ModStart> vpx_codec_alg_priv ) ) ; if (! ctx -> config ) { return VPX_CODEC_MEM_ERROR ; } ctx -> priv = vpx_calloc ( 1, sizeof ( struct vpx_codec_alg_priv ) ) ; } cfg = & ctx -> config ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage!= cfg -> g_usage ; i ++ ) ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg. pkt_list = & priv -> pkt_list. head ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h * 3 / 2 * 2 ; if ( priv -> cx_data_sz < 32768 ) priv -> cx_data_sz = 32768 ; if ( priv -> cx_data_sz < 32768 ) priv -> cx_data_sz = 32768 ; if ( priv -> cx_data_sz < 32768 ) priv -> cx_data",0
1076,"<S2SV_ModStart> error ) { xfs_trans_log_inode ( args, XFS_ILOG_CORE, dp, XFS_ERROR ( args -> dp, XFS_ERROR ( args -> dp, XFS_ERROR ( args -> dp, XFS_ERROR ( args -> dp, XFS_ERROR ( args -> dp, XFS_ERROR ( args -> dp, XFS_ERROR ( args -> dp, XFS_ERROR ( args -> dp, XFS_ERROR ( args -> dp, XFS_ERROR ( args -> dp, XFS_ILOG_CORE ), dp, XFS_ERROR ( args -> dp, XFS_ERROR ( args -> dp, XFS_ERROR ( args -> dp, XFS_ERROR ( args -> dp, XFS_ERROR ( args -> dp, XFS_ERROR ( args -> dp, XFS_ERROR ( args -> dp, XFS_ERROR ( args -> dp, XFS_ERROR ( args -> dp, XFS_ERROR ( args -> dp, XFS_ERROR ( args -> dp, XFS_ERROR ( args -> dp, XFS_ERROR ( args -> dp, XFS_ERROR ( args -> dp, X",0
1077,"<S2SV_ModStart> ; } if ( ( ret = s -> decode ( gb, rc, cumfr, cnt_c, totfr ) ) < 0 ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> total_freq += step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 16 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; pixel -> freq [ i ] = nc ; pixel -> lookup [ i ] = nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) { unsigned sum = 0",0
1078,"<S2SV_ModStart> err ; err = nla_parse_nested ( attrs, TIPC_NLA_SOCK_MAX, & attrs [ TIPC_NLA_SOCK ], tipc_nl_sock_policy ) ; if ( err ) return err ; <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> tsk_portid = nla_get_u32 <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> } if (",0
1079,"<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ( ctx -> fragments. ptrs, 0, sizeof ( ctx -> fragments. ptrs ) ) ; memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> sizes, 0, sizeof ( ctx -> fragments. sizes ) ) ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ ctx -> fragments. count ] = data ; ctx -> fragments. sizes [ ctx -> fragments. count ] = data_sz ; ctx -> fragments. count ++ ; if ( ctx -> fragments. count > ( 1 << EIGHT_PARTITION ) + 1 ) { ctx -> fragments. count = 0 ; * res = VPX_CODEC_INVALID_PARAM ; return - 1 ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ ctx -> fragments. count ] = data ; ctx -> fragments. sizes [ ctx -> fragments. count ] = data_sz ; ctx -> fragments. count ++ ; if ( ctx -> fragments. count > ( 1 << EIGHT_PARTITION ) + 1 ) { ctx -> fragments. count = 0",0
1080,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1081,"<S2SV_ModStart> ; length = le16_to_cpu ( cap -> bLength ) ; total_len -= length ; if ( total_len < length ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor\\n"" ) ; goto err ; } dev -> bos -> desc = ( struct usb_bos_descriptor * ) buffer ; ret = usb_get_descriptor ( dev, USB_DT_BOS, 0, buffer, total_len ) ; if ( ret < total_len ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor\\n"" ) ; goto err ; } dev -> bos -> desc = ( struct usb_bos_descriptor * ) buffer ; ret = usb_get_descriptor ( dev, USB_DT_BOS, 0, buffer, total_len ) ; if ( ret < total_len ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor\\n"" ) ; goto err ; } dev -> bos -> desc = ( struct usb_bos_descriptor * ) buffer ; ret = usb_get_descriptor ( dev, USB_DT_BOS, 0, buffer",0
1082,<S2SV_ModStart> task_struct * task <S2SV_ModEnd> ; file_sb_list_del (,0
1083,<S2SV_ModStart> le16_to_cpu ( efe -> icbTag. <S2SV_ModStart> le16_to_cpu ( efe -> icbTag. <S2SV_ModStart> le16_to_cpu ( efe -> icbTag. <S2SV_ModStart> le16_to_cpu ( efe -> icbTag. <S2SV_ModStart> le16_to_cpu ( efe -> icbTag. <S2SV_ModStart> le16_to_cpu ( efe -> icbTag. <S2SV_ModStart> le16_to_cpu ( efe -> icbTag. <S2SV_ModStart> le16_to_cpu ( efe -> icbTag. <S2SV_ModStart> le16_to_cpu ( efe -> icbTag. <S2SV_ModStart> le16_to_cpu ( efe -> icbTag. <S2SV_ModStart> le16_to_cpu ( efe -> icbTag. <S2SV_ModStart> le16_to_cpu ( efe -> icbTag. <S2SV_ModStart> le16_to_cpu ( efe -> icbTag. <S2SV_ModStart> le16_to_cpu ( efe -> icbTag. <S2SV_ModStart> le16_to_cpu ( efe -> icbTag. <S2SV_ModStart> le16_to_cpu ( efe -> icbTag. <S2SV_ModStart> le16_to_cpu ( efe -> icbTag,0
1084,"<S2SV_ModStart> data ) { enc28j60WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
1085,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int bad_format_imginfo ( <S2SV_ModStart> fmt ) { <S2SV_ModEnd> int n =,0
1086,"<S2SV_ModStart> sk_forward_alloc ) ; rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ;",0
1087,<S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { break ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ;,0
1088,<S2SV_ModStart> )!= hashval ) { args -> index = probe ; return XFS_ERROR ( EFSCORRUPTED ) ; } if ( probe == ichdr. count && be32_to_cpu ( entry -> hashval ) == hashval ) { args -> index = probe ; return XFS_ERROR ( ENOENT ) ; } if ( probe == ichdr. count && be32_to_cpu ( entry -> hashval ) == hashval ) { args -> index = probe ; return XFS_ERROR ( EFSCORRUPTED ) ; } if ( probe == ichdr. count && be32_to_cpu ( entry -> hashval ) == hashval ) { args -> index = probe ; return XFS_ERROR ( EFSCORRUPTED ) ; } if ( probe == ichdr. count && be32_to_cpu ( entry -> hashval ) == hashval ) { args -> index = probe ; return XFS_ERROR ( EFSCORRUPTED ) ; } if ( probe == ichdr. count && be32_to_cpu ( entry -> hashval ) == hashval ) { args -> index = probe ; return XFS_ERROR (,0
1089,"<S2SV_ModStart> ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragIPv4TooLargeTest"", DefragIPv4TooLargeTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakWindowsTest"", IPV6DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakFirstTest"", IPV6DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLastTest"", IPV6DefragSturgesNovakLastTest ) ;",0
1090,"<S2SV_ModStart> ; if ( object_length > sizeof ( new_object. data ) - add_v1_record ) { new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( object_length + add_v1_record > sizeof ( new_object. data ) - object_length ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( object_length + add_v1_record > sizeof ( new_object. data ) - add_v1_record ) { new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( add_v1_record ) { new_object. data [ 0 ] = COOLKEY_V1_OBJECT ; new_object. length ++ ; } memcpy ( & new_object. data [ add_v1_record ], object_data, object_length ) ; }",0
1091,"<S2SV_ModStart> 0 ) ; if ( ( int ) shdr -> sh_size > ( int ) sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_size > ( int ) sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } <S2SV_ModStart> 0 ) ; if ( ( int ) shdr -> sh_size > ( int ) sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_size > ( int ) sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_size > ( int ) sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ;",0
1092,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1093,<S2SV_ModStart> u8 label_len ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( ptr_count > length ) return - 1 ; if ( name_end < 0 ) name_end = j ; j = ( ( int ) label_len & 0xc0 ) << 8 ) + ptr_low ; if ( name_end < 0 ) name_end = j ; j = ( ( int ) label_len & 0x3f ) << 8 ; if ( name_end < 0 ) name_end = j ; j = ( ( int ) label_len & 0x3f ) << 8 ; if ( name_end < 0 ) name_end = j ; j = ( ( int ) label_len & 0x3f ) << 8 ; if ( name_end < 0 ) name_end = j,0
1094,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; if (! tmp ) { TIFFErrorExt ( tif -> tif_dev, ""MemoryAllocationFailed"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! tmp ) { TIFFErrorExt ( tif -> tif_dev, ""MemoryAllocationFailed"" ) ; return 0 ;",0
1095,"<S2SV_ModStart> ) ) { if ( unlikely ( pmd_none ( * pmd ) ) ) return do_fault ( mm, vma, address, pte, pmd, flags, entry ) ; else return do_anonymous_page ( mm, vma, address, pte, pmd, flags ) ; } if ( pte_protnone ( entry ) ) return do_numa_page ( mm, vma, address, entry, pte, pmd, ptl ) ; if ( flags & FAULT_FLAG_WRITE ) { if (! pte_write ( entry ) ) return do_wp_page ( mm, vma, address, pte, pmd, ptl, entry ) ; } entry = pte_mkyoung ( entry ) ; if ( ptep_set_access_flags ( vma, address, pte, entry, flags & FAULT_FLAG_WRITE ) ) { update_mmu_cache ( vma, address, pte ) ; } else { if ( flags & FAULT_FLAG_WRITE ) flush_tlb_fix_spurious_fault ( vma, address, pte ) ;",0
1096,<S2SV_ModStart> s ) { <S2SV_ModEnd> return pool_alloc ( <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1097,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1098,"<S2SV_ModStart> ; next_line = strchr ( pos, '\\n' ) ; if ( next_line ) { next_line = strchr ( pos, '\\n' ) ; if ( next_line ) next_line = strchr ( pos, '\\n' ) ; if ( next_line ) next_line = strchr ( pos, '\\n' ) ; if ( next_line ) next_line = strchr ( pos, '\\n' ) ; if ( next_line ) next_line = strchr ( pos, '\\n' ) ; if ( next_line ) next_line = strchr ( pos, '\\n' ) ; if ( next_line ) next_line = strchr ( pos, '\\n' ) ; if ( next_line ) next_line = strchr ( pos, '\\n' ) ; if ( next_line ) next_line = strchr ( pos, '\\n' ) ; if ( next_line ) next_line = strchr ( pos, '\\n' ) ; if ( next_line ) next_line = strchr ( pos, '\\n' ) ; if ( next_line ) next_line = strchr ( pos, '\\n",0
1099,"<S2SV_ModStart> ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> capacity <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; if ( i >= cu -> length ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> length <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } memset ( & cu -> dies [ cu -> length ]. attr_values [ i ], 0, sizeof ( cu -> dies [ cu -> length ]. attr_values [ i ] ) ) ; break ; } if ( i >= cu -> dies [ cu -> length ]. capacity || i >= cu -> dies [ cu -> length ]. capacity ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> capacity <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } memset ( & cu -> dies [ cu -> length ]. attr_values [ i ], 0, sizeof ( cu -> dies [ cu -> length ]. attr_values [ i ], 0, sizeof ( cu -> dies [ cu -> length ]. attr_values [ i ] ) ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwar",0
1100,"<S2SV_ModStart> b_go ) { if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_in. i_codec ) { msg_Err ( p_enc, ""Unsupported <S2SV_blank> codec <S2SV_blank> %d"", p_enc -> fmt_in. i_codec ) ; return NULL ; } <S2SV_ModStart> b_go ) { if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_in. i_codec ) { msg_Err ( p_enc, ""Unsupported <S2SV_blank> codec <S2SV_blank> %d"", p_enc -> fmt_in. i_codec ) ; return NULL ; } if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_in. i_codec ) { msg_Err ( p_enc, ""Unsupported <S2SV_blank> codec <S2SV_blank> %d"", p_enc -> fmt_in. i_codec ) ; return NULL ; } if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_in. i_codec ) { msg_Err ( p_enc, ""Unsupported <S2SV_blank> codec <S2SV_blank> %d"", p_enc -> fmt_in. i_codec ) ; return NULL",0
1101,"<S2SV_ModStart> ; if (! mp_path_exists ( mf -> names [ mf -> nr_of_files - 1 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ] ) ; } else if (! mp_path_exists ( mf -> names [ mf -> nr_of_files - 1 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ] ) ; } else if (! mp_path_exists ( mf -> names [ mf -> nr_of_files - 1 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ] ) ; } else if (! mp_path_exists ( mf -> names [ mf -> nr_of_files - 1 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf ->",0
1102,"<S2SV_ModStart> ) ) ; if ( length < len ) { ND_PRINT ( ( ndo, ""length <S2SV_blank> error: <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; return ; } if ( length < len ) { ND_PRINT ( ( ndo, ""length <S2SV_blank> error: <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; return ; } if ( length < len ) { ND_PRINT ( ( ndo, ""length <S2SV_blank> error: <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", len ) ) ; return ; } if ( length < len ) { ND_PRINT ( ( ndo, ""length <S2SV_blank> error: <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; return ; } if ( length < len ) { ND_PRINT ( ( ndo, ""length <S2SV_blank> error: <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; return ; } if ( length < len ) { ND_PRINT ( ( ndo, ""length <S2SV_blank> error: <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; return ; } if ( length < len ) { ND_PRINT ( ( ndo, ""length <S2SV_blank> error: <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing",0
1103,<S2SV_ModStart> 4 ) ; if ( idx + 4 + len > MAX_ATTR_SIZE ) { return NULL ; } <S2SV_ModStart> len ) ; if ( idx + 4 + len > MAX_ATTR_SIZE ) { return NULL ; } <S2SV_ModStart> len ) ; if ( idx + 4 + len > MAX_ATTR_SIZE / sizeof ( unsigned char ) * sizeof ( unsigned char ) * sizeof ( unsigned char ) * sizeof ( unsigned char ) * sizeof ( unsigned char ) * sizeof ( unsigned char ) * sizeof ( unsigned char ) * sizeof ( unsigned char ) * sizeof ( unsigned char ) * sizeof ( unsigned char ) ; <S2SV_ModStart> len ) ; if ( idx + 4 + len > MAX_ATTR_SIZE ) { return NULL ; } <S2SV_ModStart> len ) ; if ( idx + 4 + len > MAX_ATTR_SIZE / sizeof ( unsigned char ) * sizeof ( unsigned char ) * sizeof ( unsigned char ) * sizeof ( unsigned char ) * sizeof ( unsigned char ) * sizeof ( unsigned char ) * sizeof ( unsigned char ) * sizeof ( unsigned char ) * sizeof ( unsigned char ) * sizeof ( unsigned char ) * sizeof ( unsigned char ) * sizeof ( unsigned char ) * sizeof ( unsigned char ) * sizeof ( unsigned char ) * sizeof ( unsigned char ),0
1104,"<S2SV_ModStart> EIO ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; }",0
1105,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1106,<S2SV_ModStart> sse ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
1107,"<S2SV_ModStart> ( ) ; strcpy ( t1_buf_array, charstringname ) ; strcpy ( t1_line_array, charstringname ) ; strcpy ( t1_line_array, charstringname ) ; t1_line_ptr = eol ( t1_line_array ) ; } else { strcpy ( t1_buf_array, charstringname ) ; strcpy ( t1_line_array, charstringname ) ; strcpy ( t1_line_array, charstringname ) ; strcpy ( t1_line_array, charstringname ) ; strcpy ( t1_line_array, charstringname ) ; t1_line_ptr = eol ( t1_line_array ) ; }",0
1108,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> frame_parallel_decode ) { YV12_BUFFER_CONFIG * fb ; yuvconfig2image ( & data -> img, NULL, NULL ) ; return VPX_CODEC_OK ; } else { YV12_BUFFER_CONFIG * fb ; yuvconfig2image ( & data -> img, NULL, NULL ) ; return VPX_CODEC_INVALID_PARAM ; } # endif <S2SV_ModStart> * fb ; # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> frame_parallel_decode ) { YV12_BUFFER_CONFIG * fb ; yuvconfig2image ( & data -> img, NULL, NULL ) ; return VPX_CODEC_OK ; } else { YV12_BUFFER_CONFIG * fb ; yuvconfig2image ( & data -> img, NULL, NULL ) ; return VPX_CODEC_INVALID_PARAM ; } # endif <S2SV_ModStart> vp9_get_reference_dec ( ctx <S2SV_ModEnd>, data ->",0
1109,"<S2SV_ModStart> ctxt ) ; if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) ops -> get_msr ( ctxt, MSR_EFER, & efer ) ; if ( efer & EFER_LMA ) ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; if ( efer & EFER_LMA ) ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_SS ) ; if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_SS ) ; if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops",0
1110,"<S2SV_ModStart> if ( j + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> last <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOS.\\n"", j ) ; return AVERROR_INVALIDDATA ; } if ( j + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> last <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> EOI.\\n"", marker ) ; return AVERROR_INVALIDDATA ; } if ( j + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> last <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOS.\\n"", marker ) ; return AVERROR_INVALIDDATA ; } if ( j + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> last <S2SV_blank>",0
1111,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) expr1 = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; else expr1 = ast_for_expr ( c, CHILD ( n, 1 ) ) ; if (! expr1 ) return NULL ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; switch ( TYPE ( CHILD ( n, 2 ) ) { case Name_kind : case Attribute_kind : case Subscript_kind : expr2 = ast_for_expr ( c, CHILD ( n, 2 ) ) ; if (! expr2 ) return NULL ; newoperator = ast_for_augassign ( c, CHILD ( n, 1 ) ) ; if (! newoperator ) return NULL ; newoperator = ast_for_augassign ( c, expr1, newoperator, expr2, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; return NULL ; } ch = CHILD ( n, 0 ) ;",0
1112,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y, <S2SV_ModEnd> int mc_avg_y_stride = <S2SV_ModStart> unsigned char * running_avg_y, <S2SV_ModEnd> int avg_y_stride = <S2SV_ModStart> int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { if ( absdiff >= 4 && absdiff <= 7 ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ; } else { running_avg_y [ c ] = running_avg_y [ c ] ; sum_diff += diff ; } else { if ( absdiff >= 4 && absdiff <= 7 ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ; } else { if ( absdiff >= 8 && absdiff <= 15 ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff +=",0
1113,"<S2SV_ModStart> ) ) { if ( reqPtr -> request. line == NULL ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> request <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long <S2SV_blank> (%d <S2SV_blank> bytes)"", ( int ) ( e - s ) ) ; } else { if ( reqPtr -> request. line == NULL ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long <S2SV_blank> (%d <S2SV_blank> bytes)"", ( int ) ( e - s ) ) ; } else { if ( reqPtr -> request. line == NULL ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> request <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long <S2SV_blank> (%d <S2SV_blank> bytes)"", ( int ) ( e - s ) ) ) ; } else { if ( reqPtr -> request. line == NULL ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long <S2SV_blank> (%d <S2SV_blank> bytes)"", ( int ) ( e - s ) ) ; } else { if ( reqPtr -> request. line == NULL ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> request <S2SV_blank> line <S2SV_blank>",0
1114,"<S2SV_ModStart> = 0 ; unsigned long flags ; <S2SV_ModStart> ; ret |= __copy_to_user ( & ti -> xtregs, & xtregs, sizeof ( xtregs ) ) ; if ( XTENSA_HAVE_COPROCESSORS && xtregs -> cp0 < sizeof ( xtregs_coprocessor_t ) ) { ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ) ; } else { ret |= __copy_from_user ( & ti -> xtregs_user, & xtregs -> user, sizeof ( xtregs -> user ) ) ; if ( XTENSA_HAVE_COPROCESSORS && xtregs -> cp0 < sizeof ( xtregs_coprocessor_t ) ) { ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ; }",0
1115,<S2SV_ModStart> size ) ; # if ( ETH_SUPPORT == ENABLED ) message -> srcIpAddr = queueItem -> srcIpAddr ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif # if ( ETH_TTL_SUPPORT == ENABLED ) message -> ttl = queueItem -> ancillary. ttl ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif,0
1116,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> -> src_dev ; pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; }",0
1117,"<S2SV_ModStart> - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close_sock ; } <S2SV_ModEnd> ndp -> sock",0
1118,"<S2SV_ModStart> int error ; struct mb2_cache * ext2_mb_cache = EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> new_bh ) ; mb2_cache_insert ( ext2_mb_cache, new_bh, EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> ) ; ext2_mb_cache_insert ( ext2_mb_cache, new_bh, EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> ( new_bh ) ; mb2_mb_cache_insert ( ext2_mb_cache, new_bh ) ; mb2_mb_cache_insert ( ext2_mb_cache, new_bh, EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> cleanup ; } mb2_cache_insert ( ext2_mb_cache, new_bh, EXT2_SB ( sb ) -> s_mb_cache, EXT2_SB ( sb ) -> s_mb_cache ) ; mb2_mb_cache_insert ( ext2_mb_cache, new_bh ) ; mb2_mb_cache_insert ( ext",0
1119,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1120,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> map ) { vpx_active_map_t * const active_map = va_arg ( args, vpx_active_map_t * ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> vp9_set_active_map ( ctx <S2SV_ModEnd> -> cpi, <S2SV_ModStart>, map -> active_map, active_map -> rows, active_map -> cols ) ) return VPX_CODEC_OK ; else return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1121,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> 0 ) return <S2SV_ModEnd> rc ; inode",0
1122,"<S2SV_ModStart> ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1123,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1124,"<S2SV_ModStart> ) { size_t <S2SV_ModEnd> maxlen = 3 <S2SV_ModStart> * len ; if (! parse_scheme ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> scheme: <S2SV_blank> \'%s\'"", state -> ptr ) ; efree ( state ) ; return NULL ; } if (! parse_hier ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> hier: <S2SV_blank> \'%s\'"", state -> ptr ) ; efree ( state ) ; return NULL ; } if (! parse_fragment ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> fragment: <S2SV_blank> \'%s\'"", state -> ptr ) ; efree ( state ) ; return NULL ; } if (! parse_fragment ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> fragment: <S2SV_blank> \'%s\'"",",0
1125,"<S2SV_ModStart> SUCCESS ) { if ( i >= npoints ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Too <S2SV_blank> many <S2SV_blank> points"" ) ; RETURN_FALSE ; } <S2SV_ModStart> SUCCESS ) { if ( i >= npoints ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Too <S2SV_blank> many <S2SV_blank> points"" ) ; RETURN_FALSE ; } <S2SV_ModStart> SUCCESS ) { if ( i >= npoints ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, "" <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1126,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1127,"<S2SV_ModStart> ; dmbuf = ( unsigned char * ) <S2SV_ModStart> AcquireQuantumMemory ( imsx, imsy <S2SV_ModEnd>, 1 ) <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if",0
1128,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; if ( ctx -> frame_parallel_decode ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; vpx_ref_frame_t * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 <S2SV_ModEnd> ; YV12_BUFFER_CONFIG sd <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; vpx_ref_frame_t * const frame_worker_data = ( vpx_ref_frame_t * ) worker -> frame_workers [ frame_worker_data -> frame_worker_data -> frame_worker_data -> frame_worker_data -> frame_worker_data -> frame_worker_data -> frame_worker_data -> frame_worker_data -> frame_worker_data -> frame_worker_data -> frame_worker_data -> frame_worker_data -> frame_worker_data -> frame_worker_data -> frame_worker_data -> frame_worker_data -> frame_worker_data -> frame_worker_data -> frame_worker_data -> frame",0
1129,<S2SV_ModStart>. path ; if ( strlen ( path ) > MAX_URL_PATH ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> ; if ( strlen ( path ) > MAX_URL_PATH ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> ; if ( strlen ( path ) > MAX_URL_PATH ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> ; if ( strlen ( path ) > MAX_URL_PATH ) return CURLE_OUT_OF_PATH ; if ( <S2SV_ModStart> ; if ( strlen ( path ) > MAX_URL_PATH ) return CURLE_OUT_OF_MEMORY ; if ( strlen ( path ) > MAX_URL_PATH ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> ; if ( strlen ( path ) > MAX_URL_PATH ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> ; if ( strlen ( path ) > MAX_URL_PATH ) return CURLE_OUT_OF_PATH ; if ( <S2SV_ModStart> ; if ( strlen ( path ) > MAX_URL_PATH ) return CURLE_OUT_OF_MEMORY ; if ( strlen ( path ) > MAX_URL_PATH ) return CURLE_OUT_OF_MEMORY ;,0
1130,"<S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; }",0
1131,"<S2SV_ModStart>, ret ; if ( sh -> pps_id >= HEVC_MAX_PPS_COUNT && s -> ps. sps!= ( HEVCSPS * ) s -> ps. sps_list [ sh -> pps_id ] -> data ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> id <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> %d\\n"", sh -> pps_id ) ; return AVERROR_INVALIDDATA ; } if ( sh -> pps_id >= HEVC_MAX_PPS_COUNT && s -> ps. pps_list [ sh -> pps_id ] -> data ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> id <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> %d\\n"", sh -> pps_id ) ; return AVERROR_INVALIDDATA ; } if ( s -> ps. sps!= ( HEVCSPS * ) s -> ps. sps_list [ sh -> pps_id ] -> data ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> changed",0
1132,"<S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, <S2SV_ModEnd> u1_num_mbsNby2, u1_is_idr_slice <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, <S2SV_ModEnd> u1_is_idr_slice ) { <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, u1_num_mbsNby2, u1_is_idr_slice, u1_is_idr_slice, <S2SV_ModEnd> u1_num_mbsNby2, u1_is_idr_slice <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, <S2SV_ModEnd> u1_is_idr_slice ) { <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, u1_num_mbsNby2, u1_is_idr_slice, u1_is_idr_slice, u1_is_idr_slice, u1_num_mbsNby2, u1_is_idr_slice, u1_is_",0
1133,"<S2SV_ModStart>, u4_y_offset ; IMPEG2D_ERROR_CODES_T e_error = ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_NONE ; <S2SV_ModStart> == B_PIC ) { e_error = ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_INVALID_PARAMETER ; break ; } <S2SV_ModStart> == B_PIC ) { e_error = ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_INVALID_PARAMETER ; break ; } <S2SV_ModStart> == B_PIC ) { e_error = ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_INVALID_PARAMETER ; break ; } <S2SV_ModStart> == B_PIC ) { e_error = ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_INVALID_PARAMETER ; break ; } <S2SV_ModStart> == B_PIC ) { e_error = ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_INVALID_PARAMETER ; break ; } <S2SV_ModStart> == B_PIC ) { e_error = ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_INVALID_PARAMETER ; break ; } <S2SV_ModStart> ==",0
1134,"<S2SV_ModStart> VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vpx_yv12_copy_frame ( cfg, sd ) ; } else if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vpx_yv12_copy_frame ( cfg, sd ) ; } else if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_",0
1135,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1136,"<S2SV_ModStart> TX_SIZE tx_size = get_plane_tx_size ( mbmi, plane ) ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ plane_bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ plane_bsize ] ; const int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y",0
1137,<S2SV_ModStart> random_factor ) ; if ( mmap_is_legacy ( ) ) { mm -> mmap_base = mmap_legacy_base ( random_factor ) ; mm -> get_unmapped_area = arch_get_unmapped_area_topdown ; } else { mm -> mmap_base = mmap_base ( random_factor ) ; },0
1138,<S2SV_ModStart> { # if defined <S2SV_ModEnd> ( CONFIG_FAST_UNALIGNED ) <S2SV_ModStart> ] = src [ 0 ] ; # else ( ( uint32_t * ) dst ) [ 0 ] = ( ( uint32_t * ) src ) [ 0 ] ; ( ( uint32_t * ) dst ) [ 1 ] = ( ( uint32_t * ) src ) [ 1 ] ; ( ( uint32_t * ) dst ) [ 2 ] = ( ( uint32_t * ) src ) [ 2 ] ; ( ( uint32_t * ) dst ) [ 3 ] = ( ( uint32_t * ) src ) [ 4 ] ; ( ( uint32_t * ) dst ) [ 5 ] = ( ( uint32_t * ) src ) [ 5 ] ; ( ( uint32_t * ) dst ) [ 6 ] = ( ( uint32_t * ) src ) [ 6 ] ; ( ( uint32_t * ) dst ) [ 7 ] = ( ( uint32_t * ) src ) [ 7 ] ; # else ( ( uint32_t * ) dst ) [ 0 ] = ( ( uint32_t * ) src ) [ 0 ] ; ( (,0
1139,"<S2SV_ModStart> ; case 'c' : return getnum ( L, fmt, sizeof ( lua_Number ) ) ; case 'u' : case 'U' : { size_t sz = getnum ( L, fmt, sizeof ( lua_Number ) ) ; if ( sz > MAXINTSIZE ) luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sz, MAXINTSIZE ) ; return sz ; } case 'u' : case 'U' : { size_t sz = getnum ( L, fmt, sizeof ( lua_Number ) ) ; if ( sz > MAXINTSIZE ) luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sz, MAXINTSIZE ) ; return sz ; } case 'u' : case 'U' : { size_t sz = getnum ( L, fmt, sizeof ( lua_Number ) ) ; if ( sz > MAXINTSIZE ) luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d""",0
1140,"<S2SV_ModStart> nrow ) { if ( img -> row_offset + nrow > h ) { TIFFError ( tif, ""row_offset <S2SV_blank> too <S2SV_blank> large"" ) ; return ( 0 ) ; } <S2SV_ModStart> img -> row_offset + nrow > h? h - row : rowstoread ; if ( img -> row_offset + nrow > h ) { TIFFError ( tif, ""row_offset <S2SV_blank> too <S2SV_blank> large"" ) ; return ( 0 ) ; } <S2SV_ModStart> % rowsperstrip ; if ( img -> row_offset + nrow > h ) { TIFFError ( tif, ""row_offset <S2SV_blank> too <S2SV_blank> large"" ) ; return ( 0 ) ; } <S2SV_ModStart> img -> row_offset + nrow > h? h - row : rowstoread ; if ( img -> row_offset + nrow > h ) { TIFFError ( tif, ""row_offset <S2SV_blank> too <S2SV_blank> large"" ) ; return ( 0 ) ; } <S2SV_ModStart> % rowsperstrip ; if ( img -> row_offset + nrow > h ) { TIFFError ( tif, ""row_offset <S2SV_blank> too <S2SV_blank> large"" ) ; return ( 0 ) ; }",0
1141,"<S2SV_ModStart> } } assert ( NCH ( n ) <= 3 ) ; if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 1 ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 3 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 3 ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 3 ) == TYPE_COMMENT ) i += 2 ; else if",0
1142,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf -> header [ psf,0
1143,<S2SV_ModStart> upid == - 1 || upid == 0,0
1144,<S2SV_ModStart> ( ) ; if ( msg -> msg_namelen ) { err = - EINVAL ; goto out_err ; },0
1145,<S2SV_ModStart> ( num & ( 1U << ( number - 1 ) <S2SV_ModEnd> ) ) return,0
1146,"<S2SV_ModStart> ] ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int cols = vpx_img_plane_cols ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int cols = vpx_img_plane_cols ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; for ( y = 0 ; y < rows ; ++ y ) { if ( fread ( buf, stride, rows, cols <S2SV_ModEnd>, file )",0
1147,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; if ( attr_len > MD5_DIGEST_LENGTH ) { memcpy ( avp -> val, p1, MD5_DIGEST_LENGTH",0
1148,<S2SV_ModStart> -> private ; mutex_lock ( & lc -> mutex ) ; <S2SV_ModStart> arg ) ; mutex_unlock ( & lc -> mutex ) ;,0
1149,"<S2SV_ModStart> ; if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_ALGORITHM_ERROR ) ; return 0 ; } <S2SV_ModStart> ; if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_ALGORITHM_ERROR ) ; return 0 ; } ctx -> cipher_data = OPENSSL_memdup ( actx, sizeof ( * actx ) + Poly1305_ctx_size ( ) ) ; if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_COPY_ERROR ) ; return 0 ; } ctx -> cipher_data = OPENSSL_memdup ( ctx -> cipher_data, sizeof ( * ctx ) + Poly1305_ctx_size ( ) ) ; if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R",0
1150,"<S2SV_ModStart> alg ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) && mask & CRYPTO_ALG_NEED_FALLBACK ) { <S2SV_ModStart> ) ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) && mask & CRYPTO_ALG_NEED_FALLBACK ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) && mask & CRYPTO_ALG_NEED_FALLBACK ) { <S2SV_ModStart> ) ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) && mask & CRYPTO_ALG_NEED_FALLBACK ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) && mask & CRYPTO_ALG_NEED_FALLBACK ) { request_module ( ""%s-all"", name ) ;",0
1151,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1152,"<S2SV_ModStart> fp ) ; if ( access ( full_path, R_OK ) ) { if ( arg_debug || arg_debug_private_lib ) printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } unlink ( RUN_LIB_FILE ) ; if ( access ( full_path, R_OK ) ) { printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } if ( access ( full_path, R_OK ) ) { printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } if ( access ( full_path, R_OK ) ) { printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } if ( access ( full_path, R_OK ) ) { printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ;",0
1153,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock,",0
1154,"<S2SV_ModStart> cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; if ( is_a_tty ) { setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; }",0
1155,<S2SV_ModStart> | NTLMSSP_NEGOTIATE_UNICODE | NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC <S2SV_ModEnd> ; if ( <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_SIGN ; <S2SV_ModEnd> tmp = *,0
1156,"<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; if ( mutt_socket_empty ( adata -> conn ) ) { mutt_socket_empty ( adata -> conn ) ; mutt_socket_empty ( adata -> conn ) ; if ( mutt_socket_empty ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; goto err_close_conn ; } } else { mutt_socket_empty ( adata -> conn ) ; if ( mutt_socket_empty ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; mutt_socket_empty ( adata -> conn ) ; if ( mutt_socket_empty ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; goto err_close_conn ; } else { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection",0
1157,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1158,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) == 0 ) ; if ( cc < 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""cc"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""cc"" ) ; return 1 ; }",0
1159,"<S2SV_ModStart> sect <= 0 || g -> head > UDP -> heads || g -> track > UDP -> tracks || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SECTBASEMASK ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SECTBASEMASK ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 ) return - EINVAL ; if ( cmd == FDDEFPRM ) { if ( poll_drive ( true, FD_RAW_NEED_DISK ) == - EINTR ) return - EINTR ; } current_type [ drive ] = NULL ; current_sizes [ drive ] = 0 ; for ( cnt = 0 ; cnt < N_DRIVE ; cnt ++ ) { struct block_device * bdev = opened_bdev [ cnt ] ; if (! bdev || ITYPE ( bdev )",0
1160,"<S2SV_ModStart> ; if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; }",0
1161,"<S2SV_ModStart>, & rlen, 0",1
1162,"<S2SV_ModStart> * slavename ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) mlock ( md5data, sizeof ( md5data ) ) ; if ( user -> password!= NULL ) { strncpy ( md5data, user -> password, 82 ) ; memcpy ( md5data + 1, user -> password, 82 ) ; memcpy ( md5data + 1 + strlen ( user -> password ), curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_CPTYPE_END_AUTH, NULL, 0",0
1163,"<S2SV_ModStart> 1 ; } if ( strlen ( path ) > MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } r = snprintf ( path, MAXPATHLEN, ""%s/%s"", lxcpath, lxc_name ) ; if ( r < 0 || r >= MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } if ( strlen ( path ) > MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } if ( strlen ( path ) > MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; }",0
1164,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n,",0
1165,"<S2SV_ModStart> ; if ( unlikely (! bio_flagged ( bio, BIO_UPTODATE ) ) ) { ret = - EINVAL ; goto out_unmap ; }",0
1166,<S2SV_ModStart> depth ; assert ( <S2SV_ModEnd> numcolors <= RAS_CMAP_MAXSIZ,0
1167,"<S2SV_ModStart> pp ; const char * domain <S2SV_ModEnd> ; int len <S2SV_ModStart> ""localhost"" ; } domain = curl_easy_unescape ( conn -> data, path, 0, & len ) ; if (! domain ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET <S2SV_ModEnd> ) return CURLE_OUT_OF_MEMORY <S2SV_ModStart> len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGRE",0
1168,"<S2SV_ModStart> } ; if ( str [ i ] ) { if ( j >= sizeof ( buf ) - 1 ) { return - 1 ; } <S2SV_ModStart> ++ ) { if ( j >= sizeof ( buf ) - 1 && str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } if ( j >= sizeof ( buf ) - 1 && str [ i ] == '#' ) { i -- ; continue ; } if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } if ( j >= sizeof ( buf ) - 1 && str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = 0 ; arm_opcode_parse ( & aop, buf ) ; if (! assemble [ thumb ] ( & aop, off, buf ) ) { return - 1 ; } if (! assemble [ thumb ] ( & aop, off, buf ) ) { return - 1 ; }",0
1169,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1170,"<S2SV_ModStart> 0 ) ; if ( off + RDS_CONG_MAP_BYTES > sg -> length ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> ) + RDS_CONG_MAP_BYTES ; if ( off + RDS_FRAG_SIZE > sg -> length ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> += RDS_FRAG_SIZE ; if ( off + RDS_FRAG_SIZE > sg -> length ) { set_bit ( RDS_LL_SEND_FULL, & conn -> c_flags ) ; rds_ib_stats_inc ( s_ib_tx_ring_full ) ; goto out ; } <S2SV_ModStart> ) + RDS_FRAG_SIZE ; if ( off + RDS_FRAG_SIZE > sg -> length ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> += RDS_FRAG_SIZE ; if ( off + RDS_FRAG_SIZE > sg -> length ) { set_bit ( RDS_LL_SEND_FULL, & conn -> c_flags ) ; rds_ib_stats_inc ( s_ib_tx_ring_full ) ; goto out ; }",0
1171,"<S2SV_ModStart> = devm_ioremap ( & pdev -> dev, r -> start, resource_size ( r ) ) ; if (! priv -> base ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank> remap <S2SV_blank> register\\n"" ) ; return - ENOMEM ; } priv -> mii_bus = NULL ; if ( pdata ) { priv -> wait_func = pdata -> wait_func ; priv -> wait_func_data = pdata -> wait_func_data ; bus -> phy_mask = ~ pdata -> phy_mask ; } else { priv -> wait_func = unimac_mdio_poll ; } ret = of_mdiobus_register ( bus, np ) ; if ( ret ) { dev_err ( & pdev -> dev, ""MDIO <S2SV_blank> bus <S2SV_blank> registration <S2SV_blank> failed\\n"" ) ; goto out_mdio_free ; } ret = of_mdiobus_register ( bus, np ) ; if ( ret ) { dev_err ( & pdev -> dev, ""MDIO <S2SV_blank> bus <S2SV_blank> registration <S2SV_blank> failed\\n"" ) ; goto out_mdio_free ; } <S2SV_ModEnd> return ret",0
1172,"<S2SV_ModStart> credssp ) ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; <S2SV_ModStart> credssp ) ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may",0
1173,"<S2SV_ModStart> -> prclyrnos ) { if ( * prclyrno >= JAS_CAST ( int, pchg -> prclyrnos ) ) { JAS_LOG ( 0x534e4554, ( ""JAS_ERROR"", ( ""JAS_ERROR"" ) ( ""JAS_ERROR"" ) ( ""JAS_ERROR"" ) ( ""JAS_ERROR"" ) ( ""JAS_ERROR"" ) ( ""JAS_ERROR"" ) ( ""JAS_ERROR"" ) ( ""JAS_ERROR"" ) ( ""JAS_ERROR"" ) ( ""JAS_ERROR"" ) ( ""JAS_ERROR"" ) ( ""JAS_ERROR"" ) ( ""JAS_ERROR"" ) ( ""JAS_ERROR"" ) ( ""JAS_ERROR"" ) ( ""JAS_ERROR"" ) ( ""JAS_ERROR"" ) ( ""JAS_ERROR"" ) ( ""JAS_ERROR"" ) ( ""JAS_ERROR"" ) ( ""JAS_ERROR"" ) ( ""JAS_ERROR"" ) ( ""JAS_ERROR"" ) ( ""JAS_ERROR"" ) ( ""J",0
1174,"<S2SV_ModStart>! exponly ) { if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_SET ( mode ) ) { r_flag_space_set ( r -> flags, R_FLAGS_FS_SYMBOLS ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_SET ( mode ) ) { r_flag_space_set ( r -> flags, R_FLAGS_FS_SYMBOLS ) ; } else if (",0
1175,"<S2SV_ModStart> goto out ; status = decode_getacl_nolock <S2SV_ModEnd> ( xdr,",0
1176,"<S2SV_ModStart> sizeof iv ) ; if ( iter > EVP_MAX_KEY_ITER ) ossl_raise ( eCipherError, ""key <S2SV_blank> iter <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( unsigned int ) ( NUM2INT ( iter ) ) ) ) ossl_raise ( eCipherError, ""key <S2SV_blank> iter <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( unsigned int ) ( NUM2INT ( iter ) ) ) ; if ( iter > EVP_MAX_KEY_ITER ) ossl_raise ( eCipherError, ""key <S2SV_blank> iter <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( unsigned int ) ( ( unsigned int ) ( NUM2INT ( iter ) ) ) ) ) ossl_raise ( eCipherError, ""key <S2SV_blank> iter <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( unsigned int ) ( NUM2INT ( iter ) ) ) ;",0
1177,"<S2SV_ModStart> KDC_OPT_ENC_TKT_IN_SKEY ) ) { return KRB5KDC_ERR_BADOPTION ; } if (! krb5_principal_compare ( kdc_context, request -> princ, server_princ ) ) { return KRB5KDC_ERR_SERVER_NOMATCH ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_",0
1178,<S2SV_ModStart> ( clone_flags & CLONE_SETTLS <S2SV_ModEnd> ) thread ->,0
1179,"<S2SV_ModStart> bufsize ) { JAS_DBGLOG ( 100, ( ""jas_stream_memopen(%p, <S2SV_blank> %d)\\n"", buf, bufsize ) ) ; jas_stream_initbuf ( stream, JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY ; jas_stream_initbuf ( stream, JAS_STREAM_FULLBUF, 0, 0 ) ; stream -> ops_ = & jas_stream_memops ; if (! ( obj = jas_malloc ( sizeof ( jas_stream_memobj_t ) ) ) ) { jas_stream_destroy ( stream ) ; return 0 ; } stream -> openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY ; jas_stream_initbuf ( stream, JAS_STREAM_FULLBUF, 0, 0 ) ; stream -> ops_ = & jas_stream_memops ; if (! ( obj = jas_malloc ( sizeof ( jas_stream_memobj_t ) ) ) ) { jas_stream_destroy ( stream )",0
1180,"<S2SV_ModStart> -> pw ; <S2SV_ModEnd> struct sshkey * <S2SV_ModStart> ; char * <S2SV_ModEnd> pkalg, * <S2SV_ModStart> NULL ; u_char <S2SV_ModEnd> * pkblob, <S2SV_ModStart> ; u_char * <S2SV_ModEnd> sig, have_sig <S2SV_ModStart> ; if (! authctxt -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_string ( ssh, & sig, & slen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & blen ) )!= 0 || ( r = sshpkt_get_",0
1181,"<S2SV_ModStart> ; uint32_t bcount ; if (! DoReadFile ( infile, & chunk_header, sizeof ( Wave64ChunkHeader ), & bcount ) || bcount!= sizeof ( Wave64ChunkHeader ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! DoReadFile ( infile, & chunk_header, sizeof ( WaveHeader ), & bcount ) || bcount!= sizeof ( Wave64ChunkHeader ) || memcmp ( chunk_header. ckID, riff_guid ) || memcmp ( chunk_header. formType, wave_guid ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! DoReadFile ( infile, & chunk_header, sizeof (",0
1182,"<S2SV_ModStart> mech ) ) { ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sasl_failure ( s, _sasl_err_",0
1183,"<S2SV_ModStart> tn_buf ) ; return - EACCES ; } off = regs [ regno ]. off + access_size * BPF_REG_SIZE ; if (! tnum_is_const ( regs [ regno ]. var_off ) ) { verbose ( env, ""invalid <S2SV_blank> variable <S2SV_blank> stack <S2SV_blank> read <S2SV_blank> R%d <S2SV_blank> var_off=%d\\n"", regno, regs [ regno ]. var_off ) ; return - EACCES ; } if (! tnum_is_const ( regs [ regno ]. var_off ) ) { verbose ( env, ""invalid <S2SV_blank> variable <S2SV_blank> stack <S2SV_blank> read <S2SV_blank> R%d <S2SV_blank> var_off=%d\\n"", regno, regs [ regno ]. var_off ) ; return - EACCES ; } if (! tnum_is_const ( regs [ regno ]. var_off ) ) { verbose ( env, ""invalid <S2SV_blank> variable <S2SV_blank> stack <S2SV_blank> read <S2SV_blank> R%d <S2SV_blank> var_off=%d\\n"", regno, regs [ regno ]. var_off ) ; return - EACCES ; }",0
1184,"<S2SV_ModStart> size_t s ; size_t t ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } s = exif_get_long ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; if ( CHECKOVERFLOW ( o, buf_size, 2 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } t = exif_get_long ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; if ( CHECKOVERFLOW ( o, buf_size, 2 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } t = exif_get_long ( buf + o, EXIF_BYTE_ORDER_INTE",0
1185,"<S2SV_ModStart> ; if (! sbi -> s_mb_cache ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1186,<S2SV_ModStart> bd_addr ) { if ( bd_addr == NULL ) return BT_STATUS_INVALID_PARAMETER ;,0
1187,"<S2SV_ModStart> * 4 ; if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { unsigned int in_mtu = tcpmss_reverse_mtu ( net, skb, family ) ; if ( in_mtu <= minlen ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", in_mtu ) ; return - 1 ; } } else { unsigned int in_mtu = tcpmss_reverse_mtu ( net, skb, family ) ; unsigned int min_mtu = min ( dst_mtu ( skb_dst ( skb ) ), in_mtu ) ; if ( min_mtu <= minlen ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", min_mtu ) ; return - 1 ; } } if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n""",0
1188,"<S2SV_ModStart> ; if ( numrows > jas_matind_max ( numrows, numcols ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } if ( numcols > jas_matind_max ( numcols, numrows ) ) { jas_matind_destroy ( matrix ) ; return 0 ; } if ( numrows > jas_matind_max ( numrows, numcols ) ) { jas_matind_destroy ( matrix ) ; return 0 ; } matrix -> data_ = 0 ; matrix -> datasize_ = numrows * numcols ; if ( matrix -> maxrows_ > 0 ) { if (! ( matrix -> rows_ = jas_alloc2 ( matrix -> maxrows_, sizeof ( jas_seqent_t * ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } } if ( matrix -> datasize_ > 0 ) { if (! ( matrix -> data_ = jas_alloc2 ( matrix -> datasize_, sizeof ( jas_seqent_t ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } } for ( i",0
1189,"<S2SV_ModStart> ; icmpv6_send ( skb, ICMPV6_PKT_TOOBIG, 0, mtu ) ; IP6_INC_STATS ( net, ip6_dst_idev ( skb ) ) ; IP6_INC_STATS ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_FRAGFAILS ) ; kfree_skb ( skb ) ; icmpv6_send ( skb, ICMPV6_PKT_TOOBIG, 0, mtu ) ; IP6_INC_STATS ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_FRAGFAILS ) ; kfree_skb ( skb ) ;",0
1190,"<S2SV_ModStart> * req ; struct scsi_disk_req * r <S2SV_ModEnd> ; req = <S2SV_ModStart> scsi_disk_reqops, & s -> qdev -> dev, tag, lun, hba_private ) ; if (! req ) return NULL ; r = DO_UPCAST ( SCSIDiskReq, r, req ) ; r -> iov. iov_base = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; r -> iov. iov_base = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; r -> iov. iov_base = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; r -> iov. iov_base = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; r -> iov. iov_len = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; r -> iov. iov_len = qemu_blockalign ( s -> bs, SCSI_D",0
1191,"<S2SV_ModStart> int i ; <S2SV_ModEnd> int avail ; <S2SV_ModStart> 4 ) ; if ( nxip < 0 || nxip > buf -> len || avail > buf -> cursor ) goto bad_format ; xmin = 0 ; xmax = 0 ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax || cur > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> xip [ i ] = cur ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; }",0
1192,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> 3 ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header,0
1193,"<S2SV_ModStart> ; if (! <S2SV_ModEnd> cm_id -> device <S2SV_ModStart> -> node_type!= RDMA_NODE_IB_CA ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; }",0
1194,<S2SV_ModStart> sk ) ; <S2SV_ModEnd> struct xfrm_dump_info info <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> info. in_skb <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> walk = ( <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> walk = ( <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> walk = ( <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> walk = (,0
1195,"<S2SV_ModStart> - 1 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> count ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; oe_syscall_write_ocall ( & ret, epoll -> host_fd, buf, count ) ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } else { ret = - 1 ; } if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( ret > ( ssize_t ) count ) { ret = - 1 ; oe_syscall_write_ocall ( & ret, epoll -> host_fd, buf, count ) ; OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
1196,"<S2SV_ModStart> dentry * upper = ovl_dentry_upper ( dentry ) <S2SV_ModEnd> ; int err <S2SV_ModStart> I_MUTEX_PARENT ) ; if ( upper -> d_parent == upperdir ) { dget ( upper ) ; if ( is_dir ) err = vfs_rmdir ( dir, upper ) ; else err = vfs_unlink ( dir, upper, NULL ) ; else err = vfs_unlink ( dir, upper, NULL ) ; <S2SV_ModEnd> ovl_dentry_version_inc ( dentry <S2SV_ModStart> d_parent ) ; } <S2SV_ModEnd> inode_unlock ( dir <S2SV_ModStart> I_MUTEX_PARENT ) ; if ( upper -> d_parent == upperdir ) { dget ( upper ) ; if ( is_dir ) err = vfs_rmdir ( dir, upper ) ; else err = vfs_unlink ( dir, upper, NULL ) ; else err = vfs_unlink ( dir, upper, NULL ) ; <S2SV_ModEnd> ovl_dentry_version_inc ( dentry <S2SV_ModStart> d_parent ) ; <S2SV_ModEnd> } if (",0
1197,"<S2SV_ModStart> { errstr = parse_global_option <S2SV_ModEnd> ( CMD_INITIALIZE, <S2SV_ModStart> eof ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", ( * section_ptr ) -> servname, errstr ) ; return 1 ; } } if ( * section_ptr!= & new_service_options || eof ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", errstr ) ; return",0
1198,<S2SV_ModStart> (! * ptrptr <S2SV_ModEnd> &&! (,0
1199,<S2SV_ModStart> ] ; if ( a -> type == MAPI_BODY_HTML ) { body. html_bodies = get_html_data ( a ) ; html_size = a -> num_values ; } else if ( a -> type == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> type == MAPI_BODY_TEXT ) { body. text_body = get_text_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> type == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> type == MAPI_BODY_HTML ) { body. html_bodies = get_html_data ( a ) ; html_size = a -> num_values ; } else if ( a -> type == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data (,0
1200,"<S2SV_ModStart> ; # endif if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif i -> posX = i -> parent -> width ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1201,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } } <S2SV_null>,0
1202,"<S2SV_ModStart> 1 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %d\\n"", box -> info -> name ) ; goto error ; } if (! ( dec = jp2_dec_create ( ) ) { goto error ; } if (! ( dec = jp2_dec_create ( ) ) { goto error ; } if (! ( dec = jp2_dec_create ( ) ) { goto error ; } if (! ( dec = jp2_dec_create ( ) ) { goto error ; } if (! ( dec = jp2_dec_create ( ) ) { goto error ; } if (! ( dec = jp2_dec_create ( ) ) { goto error ; } if (! ( dec = jp2_dec_create ( ) ) { goto error ; } if (! ( dec = jp2_dec_create ( ) ) { goto error ; } if (! ( dec = jp2_dec_create ( ) ) { goto error ; } if (! ( dec = jp2_dec_create ( ) ) { goto error ; } if (! ( dec = jp2_dec_create ( ) ) { jas_eprintf (",0
1203,"<S2SV_ModStart> M_FS_TYPE_DIR ) { if ( M_fs_perms_can_access ( p2, M_FS_PERMS_MODE_NONE ) == M_FS_ERROR_SUCCESS ) { ret = M_FALSE ; goto done ; } }",0
1204,<S2SV_ModStart> * journal = EXT4_JOURNAL ( page -> mapping -> host ) <S2SV_ModEnd> ; if (,0
1205,"<S2SV_ModStart> ) { GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = trak -> Media -> information -> sampleTable ; writer -> timeScale = trak -> Media -> mediaHeader -> timeScale ; writer -> all_dref_mode = Media_SelfContainedType ( writer -> mdia ) ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; writer -> isDone = 0 ; writer -> chunkDur = 0 ; writer -> chunkDur = 0 ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ;",0
1206,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1207,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> = '\\0' ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> strlen ( password ), pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; md5sum [ 0 ] = 0 ; init_packet ( & data, MT_PTYPE_DATA, srcmac, dstmac, sessionkey, outcounter ) ; plen = add_control_packet ( & data, MT_CPTYPE_USERNAME, username, strlen ( username ) ) ; plen += add_control_packet ( & data, MT_CPTYPE_TERM_TYPE, terminal, strlen ( terminal ) ) ; if ( is_a_tty && get_terminal_size ( width, height )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height )",0
1208,"<S2SV_ModStart> useSystemLib ) { const char * topDir = Cvar_VariableString ( ""fs_toppath"" ) ; char libPath [ MAX_OSPATH ] ; char * basePath = Cvar_VariableString ( ""fs_basepath"" ) ; if (! topDir ) { Com_Printf ( ""Trying <S2SV_blank> to <S2SV_blank> load <S2SV_blank> \\""%s\\"" <S2SV_blank> from <S2SV_blank> \\""%s\\""...\\n"", name, topDir ) ; Com_sprintf ( libPath, sizeof ( libPath ), ""%s%c%s"", topDir, PATH_SEP, name ) ; dllhandle = Sys_LoadLibrary ( libPath ) ; } if (! dllhandle ) Com_Printf ( ""Loading <S2SV_blank> \\""%s\\"" <S2SV_blank> failed\\n"", name ) ; } else { if ( FS_FilenameCompare ( topDir, basePath ) ) { Com_Printf ( ""Trying <S2SV_blank> to <S2SV_blank> load <S2SV_blank> \\""%s\\"" <S2SV_blank> from <S2SV_blank> \\""%s\\""...\\n"", name, basePath ) ; dllhandle = Sys_LoadLibrary ( libPath ) ; } if (! dllhandle ) Com_Printf ( ""Loading <S2SV_blank> \\""%s\\"" <S2SV_blank> failed\\n""",0
1209,<S2SV_ModStart> ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; SNMP_FREE ( _mibindexes [ i ] ) ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; SNMP_FREE ( _mibindexes [ i ] ) ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE (,0
1210,"<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> bits -= 24 ; \\\n} <S2SV_ModEnd> typedef struct PCDTable <S2SV_ModStart> buffer ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; buffer = ( unsigned char * ) AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ;",0
1211,"<S2SV_ModStart> ; if (! TYPE_COMMENT ( CHILD ( n, i ) ) ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break",0
1212,"<S2SV_ModStart> g_hash_table_destroy ( headers ) ; g_hash_table_remove_all ( headers ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=3;k=blah"" ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached ( ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=4;k=blah"" ) ) ; g_hash_table_remove_all ( headers ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=5;k=blah"" ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached ( ) ; g_hash_table_destroy ( headers )",0
1213,"<S2SV_ModStart> # ifdef HAVE_IPV6 char * p ; if ( str_len > 2 ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } p = memchr ( str + 1, '[', str_len - 2 ) ; if (! p || * ( p + 1 )!= ':' ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } * portno = atoi ( p + 2 ) ; } else { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv4 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } if ( str_len ) { colon = memchr ( str, ':', str_len - 1 ) ; } else { colon = NULL ; } if ( colon ) { * portno = atoi ( colon + 1 ) ; host = estrndup ( str, colon",0
1214,"<S2SV_ModStart> -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( row >= src_ybc -> y_height ) { pr_err ( ""%s: <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1215,"<S2SV_ModStart> cblk_style = bytestream2_get_byteu ( & s -> g ) ; if ( c -> cblk_style == 0 ) { av_log ( s -> avctx, AV_LOG_ERROR, ""cblk <S2SV_blank> style <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
1216,"<S2SV_ModStart> { if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_EFFECTIVE_URL, & stringp ) && stringp ) fputs ( stringp, stream ) ; break ; case VAR_EFFECTIVE_URL : if ( ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_EFFECTIVE_URL, & stringp ) ) && stringp ) fputs ( stringp, stream ) ; break ; case VAR_HTTP_CODE_PROXY : if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CONNECTCODE, & longinfo ) ) fprintf ( stream, ""%03ld"", longinfo ) ; break ; case VAR_HTTP_CODE_PROXY : if ( ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CODE_PROXY, & stringp ) ) && stringp ) fputs ( stringp, stream ) ; break ; case VAR_HTTP_CODE_PROXY : if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CONNECTCODE, & longinfo ) ) fprintf ( stream, ""%03ld"", long",0
1217,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> mi_col_start ; mi_col < tile -> mi_col_end ; mi_col += MI_BLOCK_SIZE ) { int dummy_rate ; int64_t dummy_dist ; int i ; MACROBLOCK * x = & cpi -> mb ; if ( sf -> adaptive_pred_interp_filter ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 4, num_4x4_w * num_4x4_blk ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index < 16 / num_4x4_blk ; ++ x -> b",0
1218,"<S2SV_ModStart>, obj_tlen ; u_int hexdump_len ; <S2SV_ModStart> obj_tlen ; hexdump_len = EXTRACT_32BITS ( obj_tptr ) ; hexdump_len = EXTRACT_32BITS ( obj_tptr ) ; hexdump_len = EXTRACT_32BITS ( obj_tptr ) ; hexdump_len = EXTRACT_32BITS ( obj_tptr ) ; hexdump_len = EXTRACT_32BITS ( obj_tptr ) ; if ( hexdump_len > hexdump_len ) { ND_PRINT ( ( ndo, ""hexdump <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", hexdump_len ) ) ; return ; } hexdump_len = EXTRACT_32BITS ( obj_tptr ) ; hexdump_len = EXTRACT_32BITS ( obj_tptr ) ; hexdump_len = EXTRACT_32BITS ( obj_tptr ) ; if ( hexdump_len > hexdump_len ) { ND_PRINT ( ( ndo, ""hexdump <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", hexdump_len )",0
1219,"<S2SV_ModStart> const MB_MODE_INFO * mbmi <S2SV_ModEnd>, nmv_context_counts *",0
1220,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1221,"<S2SV_ModStart> ; if ( pskb_expand_head ( skb_out, size - skb -> len, GFP_ATOMIC ) < 0 ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; memcpy ( skb_put ( skb_out, size ), skb -> len - hdr_size ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_set_transport_header ( skb_out, - ETH_HLEN ) ; skb_reset_network_header ( skb_out ) ; skb_reset_transport_header ( skb_out ) ; hlist_for_each_entry ( entry, chain, list ) { size = entry -> skb -> len - hdr_size ; memcpy ( skb_put ( skb_out,",0
1222,<S2SV_ModStart> ) ; spin_lock_init ( & sta -> lock ) ; spin_lock_bh ( & sta -> ampdu_mlme. mtx ) ; <S2SV_ModEnd> INIT_WORK ( & <S2SV_ModStart> sta_unblock ) ; spin_lock_bh ( & sta -> ampdu_mlme. mtx ) ; <S2SV_ModEnd> INIT_WORK ( & <S2SV_ModStart> ) ; spin_lock_bh ( & sta -> ampdu_mlme. mtx ) ; spin_lock_bh ( & sta -> ampdu_mlme. mtx ) ; spin_lock_bh ( & sta -> ampdu_mlme. mtx ) ; spin_lock_init ( & sta -> ampdu_mlme. mtx ) ; spin_lock_bh ( & sta -> ampdu_mlme. mtx ) ; spin_lock_bh ( & sta -> ampdu_mlme. mtx ) ; spin_lock_init ( & sta -> ampdu_mlme. mtx ) ; spin_lock_bh ( & sta -> ampdu_mlme. mtx ) ; spin_lock_bh ( & sta -> ampdu_mlme.,0
1223,<S2SV_ModStart> tp_event ) && p_event -> attr. sample_type == PERF_SAMPLE_RAW && p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } } else { if ( p_event -> attr. sample_type == PERF_SAMPLE_RAW ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_NOEXEC ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_NOEXEC ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_NOEXEC ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_NOEXEC ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_NOEXEC ) { if ( tp_event -> flags & TRACE,0
1224,"<S2SV_ModStart> 1 ) ; if (! data_interface ) { dev_err ( & intf -> dev, ""No <S2SV_blank> data <S2SV_blank> interface\\n"" ) ; return - ENODEV ; } <S2SV_ModStart> 0 ) ; if (! control_interface ) { dev_err ( & intf -> dev, ""No <S2SV_blank> control <S2SV_blank> interface\\n"" ) ; return - ENODEV ; }",0
1225,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1226,"<S2SV_ModStart> ; netsnmp_mibindex_load ( ) ; DEBUGMSGTL ( ( ""init_mib"", ""Seen <S2SV_blank> MIBDIRS: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> dirs <S2SV_blank>...\\n"", env_var ) ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ;",0
1227,"<S2SV_ModStart> struct list_head tmplist ; sctp_skb_for_each ( skb, & oldsk -> sk_receive_queue, reasm ) { sctp_skb_copy_descendant ( skb, oldsk ) ; memcpy ( & tmplist, & newsp -> auto_asconf_list, sizeof ( tmplist ) ) ; } else { inet_sk_copy_descendant ( newsk, oldsk ) ; memcpy ( & tmplist, & newsp -> auto_asconf_list, sizeof ( tmplist ) ) ; } sctp_skb_for_each ( skb, & newsk -> sk_receive_queue, reasm ) { sctp_skb_copy_descendant ( newsk, oldsk ) ; sctp_sk ( newsk ) -> inet_num = inet_sk ( skb ) -> inet_num ; sctp_sk ( newsk ) -> inet_num = inet_sk ( skb ) -> inet_num ; sctp_sk ( newsk ) -> inet_num = inet_sk ( skb ) -> inet_num ; sctp_sk ( newsk ) ->",0
1228,"<S2SV_ModStart> { fd = open_safe <S2SV_ModEnd> ( uinput_dev_path [ <S2SV_ModStart>, O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } <S2SV_ModEnd> fd = open <S2SV_ModStart>, O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } <S2SV_ModEnd> fd = open <S2SV_ModStart>, O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> device"", __FUNCTION__ ) ; return - 1 ; } <S2SV_ModEnd> fd = open <S2SV_ModStart>, O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } <S2SV_ModEnd> fd = open <S2SV_ModStart>, O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank>",0
1229,"<S2SV_ModStart> regs ) { struct desc_struct <S2SV_ModEnd> * desc ; <S2SV_ModStart> return sel ; <S2SV_ModEnd> desc = get_desc <S2SV_ModStart> ( sel ) ; if (! desc ) return - EINVAL ; if ( desc -> type & BIT ( 3 ) ) return - EINVAL ; switch ( ( desc -> l << 1 ) | desc -> d ) { case 0 : return INSN_CODE_SEG_PARAMS ( 2, 2 ) ; case 1 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 2 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 3 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; case 4 : return INSN_CODE_SEG_PARAMS ( 8, 16 ) ; case 5 : return INSN_CODE_SEG_PARAMS ( 8, 24 ) ; case 6 : return INSN_CODE_SEG_PARAMS ( 8, 16 ) ; case 7 : return INSN_CODE_SEG_PARAMS ( 8, 24 ) ; case 8 : return INSN_CODE_SEG_PARAMS ( 8, 16 ) ; case 9 : return INSN_CODE_SEG_",0
1230,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
1231,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
1232,"<S2SV_ModStart> return ret ; if ( unlikely ( atomic_read ( & user -> inotify_devs ) >= inotify_max_user_instances ) ) { ret = - EMFILE ; goto out_free_uid ; } group = inotify_new_group ( user, inotify_max_queued_events ) ; if ( IS_ERR ( group ) ) { ret = PTR_ERR ( group ) ; goto out_free_uid ; } group = inotify_new_group ( user, inotify_max_user_instances ) ; if ( IS_ERR ( group ) ) { ret = PTR_ERR ( group ) ; goto out_free_uid ; } group = inotify_new_group ( user, inotify_max_queued_events ) ; if ( IS_ERR ( group ) ) { ret = PTR_ERR ( group ) ; goto out_free_uid ; } group = inotify_new_group ( user, inotify_max_user_instances ) ; if ( IS_ERR ( group ) ) { ret = PTR_ERR ( group ) ; goto out_free_uid ; }",0
1233,"<S2SV_ModStart> * pctx ) { if ( pctx ) { iakerb_ctx_id_t ctx ; krb5_error_code code ; code = krb5_gss_init_context ( & ctx -> k5c ) ; if ( code!= 0 ) goto cleanup ; * pctx = ctx ; return code ; } ctx = k5alloc ( sizeof ( * ctx ), & code ) ; if ( ctx == NULL ) goto cleanup ; ctx = k5alloc ( sizeof ( * ctx ), & code ) ; if ( ctx == NULL ) goto cleanup ; ctx -> defcred = GSS_C_NO_CREDENTIAL ; ctx -> state = IAKERB_AS_REQ ; ctx -> count = 0 ; code = krb5_gss_init_context ( & ctx -> k5c ) ; if ( ctx == NULL ) goto cleanup ; <S2SV_ModEnd> * pctx =",0
1234,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, screen -> columns, screen -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } bitmapDC = CreateCompatibleDC ( hDC ) ; if ( bitmapDC == ( HDC ) NULL ) { DeleteDC ( hDC ) ; ThrowReaderException ( CoderError, ""UnableToCreateDC"" ) ; } if ( bitmapDC == ( HDC ) NULL ) { DeleteDC ( hDC ) ; ThrowReaderException ( CoderError, ""UnableToCreateDC"" ) ; }",0
1235,<S2SV_ModStart> )!= START_CODE_PREFIX && ps_stream -> u4_offset < ps_stream -> u4_max_offset <S2SV_ModStart> )!= START_CODE_PREFIX && ps_stream -> u4_offset < ps_stream -> u4_max_offset,0
1236,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) ) flood_duration_test = false ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) ) flood_duration_test = false ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ip",0
1237,"<S2SV_ModStart> type_argv ) ; if ( inflated ) { mono_reflection_inflate_generic_method ( inflated, & tmp_context ) ; } else { mono_reflection_inflate_generic_method ( inflated, & tmp_context ) ; }",0
1238,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; unsigned long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> ( buf, buffer <S2SV_ModEnd>, count )",0
1239,"<S2SV_ModStart>, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"", ctxt -> inputNr + 1, input -> cur <S2SV_ModEnd> ) ; }",0
1240,"<S2SV_ModStart> return 1 ; } if ( le32_to_cpu ( raw_super -> log_blocksize ) > F2FS_MAX_LOG_BLOCK_SIZE || le32_to_cpu ( raw_super -> log_sectorsize ) < F2FS_MIN_LOG_BLOCK_SIZE ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> blocksize <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> log_blocksize ) ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> blocks <S2SV_blank> per <S2SV_blank> segment <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> log_blocks_per_seg ) ) ; return 1 ; } if ( le32_to_cpu ( raw_super -> log_sectorsize ) > F2FS_MAX_LOG_SECTOR_SIZE ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> sectorsize <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> log_sectorsize ) ) ;",0
1241,"<S2SV_ModStart> ) { char <S2SV_ModEnd> * last_elem, <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"",",0
1242,"<S2SV_ModStart> } pDecCont = <S2SV_ModEnd> H264SwDecMalloc ( sizeof <S2SV_ModStart> ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; }",0
1243,"<S2SV_ModStart> len ) { struct ipv6_txoptions * opt = NULL ; <S2SV_ModStart> ) ) { opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt ) { rcu_dereference ( opt_space ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt, sock_owned_by_user ( sk ) ) ; }",0
1244,"<S2SV_ModStart> drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( unlikely ( opt -> optlen < 0 ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen < 0 ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( unlikely ( opt -> optlen < 0 ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; goto drop ; } if ( unlikely ( opt -> optlen < 0 ) { IP_INC_STATS_BH ( dev_net ( dev",0
1245,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1246,"<S2SV_ModStart> ; if ( rcu_dereference_protected ( rt -> dst, sock_owned_by_user ( in_skb -> sk ), GFP_KERNEL ) ) { err = rcu_dereference_protected ( rt -> dst, sock_owned_by_user ( in_skb -> sk ), GFP_KERNEL ) ; goto errout ; } rcu_read_lock ( ) ; <S2SV_ModStart> ; errout : if ( rcu_dereference_protected ( rt -> dst, sock_owned_by_user ( in_skb -> sk ), GFP_KERNEL ) ) { err = rcu_dereference_protected ( rt -> dst, sock_owned_by_user ( in_skb -> sk ), GFP_KERNEL ) ; goto errout ; } rcu_read_unlock ( ) ;",0
1247,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1248,"<S2SV_ModStart> goto errout ; if (! info -> stagemasks [ j ] ) { int cascade = 0 ; if ( oggpack_read ( opb, 3 ) ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade >= ci -> books ) goto errout ; info -> stagemasks [ j ] = cascade ; } for ( j = 0 ; j < info -> partitions ; j ++ ) { if ( ( info -> stagemasks [ j ] >> k ) & 1 ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade >= ci -> books ) goto errout ; info -> stagemasks [ j ] = cascade ; } for ( j = 0 ; j < info -> partitions ; j ++ ) { if ( ( info -> stagemasks [",0
1249,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
1250,"<S2SV_ModStart> ) break ; if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } tp -> copied_seq = seq ; tcp_rcv_space_adjust ( sk ) ;",0
1251,"<S2SV_ModStart> 0 ; krb5_key_data <S2SV_ModEnd> * key_data ; <S2SV_ModStart> & err ) ; if ( key_data_in == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) if ( key_data [ i ]. key_data_kvno!= key_data [ i + 1 ]. key_data_kvno ) num_versions ++ ; ret = ( struct berval * * ) calloc ( num_versions + 1, sizeof ( * ret ) ) ; if ( ret == NULL ) { err = ENOMEM ; goto cleanup ; } for ( i = 0 ; i < n_key_data - 1 ; i ++ ) if ( key_data [ i ]. key_data_kvno!= key_data [ i + 1 ]. key_data_kvno ) num_versions ++ ; ret = ( struct berval * * ) calloc ( num_versions + 1, sizeof ( struct berval * ) ) ; if ( ret == NULL ) { err = ENOMEM ; goto",0
1252,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
1253,"<S2SV_ModStart> ] ) ; sqlite3_int64 <S2SV_ModEnd> zInput = sqlite3_malloc <S2SV_ModStart> 1 ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; pCsr -> zInput [ nByte ] = 0 ; rc = pTab -> pMod -> xOpen ( pTab -> pTok, pCsr -> zInput, nByte, & pCsr -> pCsr ) ; if ( rc == SQLITE_NOMEM ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; pCsr -> zInput [ nByte ] = 0 ; rc = pTab -> pMod -> xOpen ( pTab -> pTok, pCsr -> zInput, nByte, & pCsr -> pCsr ) ; if ( rc == SQLITE_OK ) { pCsr -> pCsr -> pTokenizer = pTab -> pTok ; } }",0
1254,<S2SV_ModStart> filp ) { return seq_release ( <S2SV_ModEnd> SOCKET_I ( inode <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1255,"<S2SV_ModStart> expr_ty iter, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",0
1256,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ""Can\'t <S2SV_blank> sort <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ;",0
1257,"<S2SV_ModStart> ; } } if ( opt ) { atomic_sub ( opt -> opt_nflen, & sk -> sk_omem_alloc ) ; opt = xchg ( & sk -> sk_omem_alloc, opt ) ; atomic_sub ( opt -> opt_nflen, & sk -> sk_omem_alloc ) ; }",0
1258,<S2SV_ModStart> ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ),0
1259,"<S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal server <S2SV_blank> error"" ; case <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_",0
1260,"<S2SV_ModStart> UINT error ; if ( pduLength > UINT32_MAX ) { WLog_ERR ( TAG, ""rdpei_recv_pdu: <S2SV_blank> pdu <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", pduLength ) ; return UINT_INVALID_DATA ; }",0
1261,"<S2SV_ModStart> ) ; } if ( pData -> socket == NULL ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed: <S2SV_blank> %s"", pData -> description ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; } <S2SV_ModStart> ( pData -> socket == NULL ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed: <S2SV_blank> %s"", pData -> description ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; } if ( pData -> socket == NULL ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed: <S2SV_blank> %s"", pData -> description ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; }",0
1262,"<S2SV_ModStart> 0 ) return - EINVAL ; if ( hugepage_subpool_get_pages ( spool, chg ) ) return - ENOSPC ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) return ret ; if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; else { struct resv_map * resv_map = resv_map_alloc ( ) ; if (! resv_map ) set_vma_resv_map ( vma, resv_map ) ; set_vma_resv_flags ( vma, HPAGE_RESV_OWNER ) ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from",0
1263,"<S2SV_ModStart> sk ) ; struct ipv6_txoptions * opt ; <S2SV_ModStart> struct flowi6 fl6 ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; rcu_read_lock ( ) ; <S2SV_ModStart> = 1 ; rcu_read_unlock ( ) ; <S2SV_ModStart> = 1 ; rcu_read_unlock ( ) ; <S2SV_ModEnd> return ip6_xmit ( <S2SV_ModStart> sk, skb, opt <S2SV_ModEnd>, np ->",0
1264,"<S2SV_ModStart> goto out_free ; } if ( path. dentry -> d_sb -> s_type == & ecryptfs_fs_type ) { rc = - EINVAL ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; } if ( path. dentry -> d_sb -> s_type == & ecryptfs_fs_type ) { rc = - EINVAL ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; } if ( path. dentry -> d_sb -> s_type == & ecryptfs_fs_type ) { rc = - EINVAL ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> known <S2SV_blank> incompatibilities\\n"" ) ;",0
1265,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1266,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1267,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, "" <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1268,"<S2SV_ModStart>, last_pwd ; if ( keepold ) return KADM5_PROTECT_PRINCIPAL ; <S2SV_ModStart> keepold ) return KADM5_PROTECT_PRINCIPAL <S2SV_ModEnd> ; have_pol =",0
1269,"<S2SV_ModStart> = 0 ; bn_t t ; bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; switch ( operation ) { case RSA_ENC : bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; } bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = m_len ; m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_ERR ; } do { m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp",0
1270,"<S2SV_ModStart> ; if ( i < 0 ) { yr_error ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( ) ) ) ) ), yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( ) ) ) ) ) ) ), yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_",0
1271,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1272,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1273,"<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> sizeof ( SF_PRIVATE <S2SV_ModStart> ) ) == NULL ) { sf_errno = SFE_MALLOC_FAILED ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( psf_copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( psf_copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %",0
1274,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> ++ j ) <S2SV_ModEnd> count [ i,0
1275,"<S2SV_ModStart> { token ++ ; } op -> operands [ operand ]. type = ARM_UNDEFINED ; op -> operands [ operand ]. reg_type = ARM_UNDEFINED ; op -> operands [ operand ]. shift = ARM_NO_SHIFT ; while ( token [ 0 ] == '[' || token [ 0 ] == ']' ) { token ++ ; } if (! strncmp ( token, ""lsl"", 3 ) ) { op -> operands [ operand ]. shift = ARM_LSL ; } else { op -> operands [ operand ]. shift = ARM_NO_SHIFT ; } if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } if (! strncmp ( token, ""lsl"", 3 ) ) { op -> operands [ operand ]. shift = ARM_NO_SHIFT ; } if (! strncmp ( token, ""lsr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_NO_SHIFT ; } if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [",0
1276,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> -> act_zbin_adj = 0 ; vpx_setup_src_planes ( x, cpi -> Source, 0, 0 ) ; vpx_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_dst_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; vpx_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; vpx_memset ( xd -> above_seg_context, 0, sizeof ( * xd ->",0
1277,"<S2SV_ModStart> ( hp ) ; if (! htc_request_check_host_hdr ( hp ) ) { WSPR ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_REQ, HTTP_HDR_URL, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_PROTO, HTTP_HDR_URL, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; }",0
1278,"<S2SV_ModStart> ( image ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ; if ( status == MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ; if ( status == MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ; if ( status == MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ; if ( status == MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ; if ( status == MagickFalse ) ( void ) LogMagickEvent ( TraceEvent",0
1279,"<S2SV_ModStart> snd_cards_lock ) ; if ( idx >= SNDRV_CARDS ) { mutex_unlock ( & snd_card_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> (range <S2SV_blank> 0-%i), <S2SV_blank> error: <S2SV_blank> %d\\n"", idx, snd_cards_limit - 1, err ) ; kfree ( card ) ; return err ; } if ( idx >= SNDRV_CARDS ) { mutex_unlock ( & snd_card_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> (range <S2SV_blank> 0-%i), <S2SV_blank> error: <S2SV_blank> %d\\n"", idx, snd_cards_limit - 1, err ) ; kfree ( card ) ; return err ; } if ( idx >= SNDRV_CARDS ) { mutex_unlock ( & snd_card_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> (range <S2SV_blank> 0-%i), <S2SV_blank> error: <S2SV_blank> %d\\n"", idx",0
1280,"<S2SV_ModStart> ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } if ( s_max_octets < sig_len ) { return ""2"" ""exponentiation <S2SV_blank> failed; <S2SV_blank> too <S2SV_blank> many <S2SV_blank> octets"" ; }",0
1281,"<S2SV_ModStart> len ) ; if ( len > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len ) ; return - 1 ; } <S2SV_ModStart> len ) ; if ( len > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", TAP_MAX_PKT_WRITE_LEN ) ; return - 1 ; } memcpy ( packet + sizeof ( tETH_HDR ), buf, len ) ; if ( len > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len ) ; return - 1 ; } memcpy ( packet + sizeof ( tETH",0
1282,<S2SV_ModStart> ; if ( i4_poc -> i4_delta_pic_order_cnt_lsb < ps_prev_poc -> i4_pic_order_cnt_lsb || i4_poc -> i4_delta_pic_order_cnt_msb < ps_prev_poc -> i4_pic_order_cnt_msb ) { ps_dec -> i4_delta_pic_order_cnt_lsb = ps_prev_poc -> i4_delta_pic_order_cnt_lsb ; ps_dec -> i4_delta_pic_order_cnt_msb = ps_prev_poc -> i4_delta_pic_order_cnt_msb ; } else { ps_dec -> i4_delta_pic_order_cnt_lsb = ps_prev_poc -> i4_delta_pic_order_cnt_lsb ; ps_dec -> i4_delta_pic_order_cnt_msb = ps_cur_poc -> i4_delta_pic_order_cnt_msb ; },0
1283,"<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; rdata = ( DTLS1_RECORD_DATA * ) OPENSSL_malloc ( sizeof ( DTLS1_RECORD_DATA ) ) ; if ( rdata == NULL ) { SSLerr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; rdata = ( DTLS1_RECORD_DATA * ) OPENSSL_malloc ( sizeof ( DTLS1_RECORD_DATA ) ) ; if ( item == NULL ) { SSLerr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; rdata = ( DTLS1_RECORD_DATA * ) OPENSSL_malloc ( sizeof ( DTLS1_RECORD_DATA ) ) ; OPENSSL_free ( rdata ) ; return ( 0 ) ; } <S2SV_ModStart> item ) ; if ( rdata == NULL ) { SSLerr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; rdata = ( DTLS1_RECORD_DATA * ) OPENSSL_malloc ( sizeof ( DTLS1_RECORD_DATA ) ) ; rdata = ( DTLS1_RECORD_DATA ) ) OPEN",0
1284,"<S2SV_ModStart> ; if ( args -> buffer_count > I915_NUM_BUFFERS ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } exec2_list = kmalloc ( sizeof ( * exec2_list ) * args -> buffer_count, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if ( exec2_list == NULL ) exec2_list = drm_malloc_ab ( sizeof ( * exec2_list ), args -> buffer_count ) ; if ( exec2_list == NULL ) { DRM_DEBUG ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> exec <S2SV_blank> list <S2SV_blank> for <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - ENOMEM ; } exec2_list = kmalloc ( sizeof ( * exec2_list ) * args -> buffer_count, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if ( exec2_list == NULL ) { DRM_DEBUG ( ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> exec",0
1285,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> MPT_ADAPTER * ioc <S2SV_ModEnd> ; struct pci_dev <S2SV_ModStart> ; struct pci_dev <S2SV_ModEnd> * pdev ; <S2SV_ModStart> PTR_ERR ( karg ) ) { <S2SV_ModEnd> printk ( MYIOC_s_ERR_FMT <S2SV_ModStart>, __FILE__, __LINE__, PTR_ERR ( karg ) ) ; return PTR_ERR ( karg ) ; } if ( ( iocnum = mpt_verify_adapter ( ioc -> hdr. iocnum, & ioc ) ) < 0 ) || ( ioc == NULL ) ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mpt_ioinfo() <S2SV_blank> - <S2SV_blank> ioc%d <S2SV_blank> not <S2SV_blank> found!\\n"", __FILE__, __LINE__, iocnum ) ; kfree ( karg ) ; return - ENODEV ; } if ( ( iocnum = mpt_verify_adapter ( ioc -> hdr. iocnum, & ioc ) ) < 0 ) || ( ioc == NULL ) ) { printk ( MYIOC_s_ERR_",0
1286,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
1287,"<S2SV_ModStart> * mntent, <S2SV_ModEnd> const char * <S2SV_ModStart> mnt_type, mntent -> mnt_flags <S2SV_ModEnd>, mntdata,",0
1288,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1289,"<S2SV_ModStart> ab ) { <S2SV_ModEnd> size_t i, <S2SV_ModStart> = 0 ; <S2SV_ModEnd> p = ( <S2SV_ModStart> -> arg_start ; if (! audit_log_format ( * ab, ""argc=%d"", context -> execve. argc ) ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } <S2SV_ModStart> ; buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if (! len ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent",0
1290,"<S2SV_ModStart> ; fd = safe_open <S2SV_ModEnd> ( path,",0
1291,"<S2SV_ModStart> err_info ) { gchar <S2SV_ModEnd> line [ NETSCREEN_LINE_LENGTH <S2SV_ModStart> ; char line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; gboolean cap_dir ; char cap_dst [ 13 ] ; if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = file_error ( wth -> random_fh, err_info ) ; return FALSE ; } if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = file_error ( wth -> random_fh, err_info ) ; if ( * err == 0 ) { * err = WTAP_ERR_SHORT_READ ; } return FALSE ; } if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = file_error ( wth -> random_fh, err_info ) ; if ( * err == 0 ) { * err = WTAP_ERR_SHORT_READ ; } return FALSE ; } <S2SV_ModStart> FALSE",0
1292,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ( rq ) <S2SV_ModEnd> ; u64 irq_time <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1293,"<S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv",0
1294,"<S2SV_ModStart> st ) { <S2SV_ModEnd> unsigned long flags <S2SV_ModStart> int notify ; memset ( & resp, 0, sizeof ( resp ) ) ; <S2SV_ModStart> : memcpy ( RING_GET_RESPONSE <S2SV_ModEnd> ( & blk_rings <S2SV_ModStart> : memcpy ( RING_GET_RESPONSE <S2SV_ModEnd> ( & blk_rings <S2SV_ModStart> : memcpy ( RING_GET_RESPONSE <S2SV_ModEnd> ( & blk_rings <S2SV_ModStart> : memcpy ( RING_GET_RESPONSE <S2SV_ModEnd> ( & blk_rings <S2SV_ModStart> : memcpy ( RING_GET_RESPONSE <S2SV_ModEnd> ( & blk_rings <S2SV_ModStart> : memcpy ( RING_GET_RESPONSE <S2SV_ModEnd> ( & blk_rings <S2SV_ModStart> : memcpy ( RING_GET_RESPONSE <S2SV_ModEnd> ( & blk_rings <S2SV_ModStart> : memcpy ( RING_GET_RESPONSE <S2SV_ModEnd> ( & blk_rings <S2SV_ModStart> : memcpy ( RING_GET_RESPONSE <S2SV_ModEnd> ( & blk_rings <S2SV_ModStart> : memcpy ( RING_GET_RESPONSE <S2SV_ModEnd> ( & blk_rings <S2SV_ModStart> : memcpy ( RING_GET_RESPONSE <S2SV_ModEnd> ( & blk_rings <S2SV_ModStart> : memcpy ( RING_GET_RESPONSE <S2SV_ModEnd> ( & blk_rings",0
1295,<S2SV_ModStart> ; if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) && ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) && ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( mask & KADM5,0
1296,"<S2SV_ModStart> ; if ( datao > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; if ( datao + 2 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteFuj",0
1297,"<S2SV_ModStart> == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName ) ; return 1 ; } <S2SV_ModStart> == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName ) ; return 1 ; } <S2SV_ModStart> == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName ) ; return 1 ; } if ( shtml == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName ) ; return 1 ; } <S2SV_ModStart> == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName ) ; return 1 ; } <S2SV_ModStart> == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName ) ; return 1 ; } <S2SV_ModStart> if ( shtml == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName ) ; return 1 ; } <S2SV_ModStart> == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s",0
1298,"<S2SV_ModStart> case ICMP_ECHO_PROTOCOL : ND_TCHECK_16BITS ( & dp -> icmp_ip. ip_dst ) ; ( void ) snprintf ( buf, sizeof ( buf ), ""echo <S2SV_blank> %s, <S2SV_blank> id <S2SV_blank> %u, <S2SV_blank> seq <S2SV_blank> %u"", dp -> icmp_type, dp -> icmp_seq ) ; break ; case ICMP_REPLY_PROTOCOL : ND_TCHECK_16BITS ( & dp -> icmp_ip. ip_p ) ; ( void ) snprintf ( buf, sizeof ( buf ), ""reply <S2SV_blank> protocol <S2SV_blank> %d <S2SV_blank> unreachable"", ipaddr_string ( ndo, & dp -> icmp_ip. ip_dst ), dp -> icmp_ip. ip_p ) ; ( void ) snprintf ( buf, sizeof ( buf ), ""echo <S2SV_blank> %s, <S2SV_blank> id <S2SV_blank> %u, <S2SV_blank> seq <S2SV_blank> %u"", dp -> icmp_id, dp -> icmp_seq ) ; ( void ) snprintf ( buf, sizeof ( buf ), ""reply <S2SV_blank> protocol <S2SV_blank> %d <S2SV_blank> unreachable"", ipaddr_string ( ndo, & dp -> i",0
1299,<S2SV_ModStart> flags ) { <S2SV_ModEnd> struct fscrypt_info * <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> d_lock ) ; <S2SV_ModEnd> dir_has_key = ( <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ),0
1300,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ; CRYPTO_THREAD_write_lock ( stunnel_locks [ LOCK_SECTIONS ] ) ; service_free ( & stunnel_locks ) ; opt = service_options. next ; service_options. next = NULL ; service_free ( & service_options ) ; while ( opt ) { unsigned i ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname ) ; service_free ( & service_options ) ; } while ( opt ) { unsigned i ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr.",0
1301,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc > MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } } if ( argc < 2 ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Not <S2SV_blank> enough <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } result = ( * pack ) ( argc, numbers, & error ) ; if ( error!= NULL ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""%s"", error ) ; return ARCHIVE_WARN ; } if ( argc < 2 ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Not <S2SV_blank> enough <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } result = ( * pack ) ( argc, numbers, & error ) ; if ( error!= NULL ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""%s"", error ) ; return AR",0
1302,<S2SV_ModStart> parent ) ; if ( ( i -> posX + i -> width ) > i -> parent -> width ) return - 1 ; if ( ( i -> posY + i -> height ) > i -> parent -> height ) return - 1 ; if ( ( i -> posX + i -> width ) > i -> parent -> width ) return - 1 ; if ( ( i -> posX + i -> width ) > i -> parent -> width ) return - 1 ; if ( ( i -> posY + i -> height ) -> parent -> height ) return - 1 ; if ( ( i -> posX + i -> width ) > i -> parent -> width ) return - 1 ; if ( ( i -> posY + i -> height ) > i -> parent -> height ) return - 1 ; if ( ( i -> posX + i -> width ) > i -> parent -> width ) return - 1 ; if ( ( i -> posY + i -> height ) > i -> parent -> height ) return - 1 ; if ( ( i -> posY + i -> height ) > i -> parent -> height ) return - 1 ;,0
1303,"<S2SV_ModStart> if ( p + l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( l > ( unsigned ) n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( p + l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( l > ( unsigned ) n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( l > ( unsigned ) n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; }",0
1304,"<S2SV_ModStart> 4 ) ; avr_op_analyze ( anal, & next_op, op -> addr, len - op -> size, cpu ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""r%d,r%d,^,!,"" <S2SV_ModEnd>,",0
1305,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; if (! explicit_retry ) { InheritException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCMException ( ThrowDCM",0
1306,<S2SV_ModStart> void ) { if (! recovery_started ) { recovery_started = true ; return ; },0
1307,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT7 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT8 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT9 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT10 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT11 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT12 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J",0
1308,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; return ( DestroyImageList ( image ) ; }",0
1309,"<S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> received <S2SV_blank> data <S2SV_blank> from <S2SV_blank> %s"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> received <S2SV_blank> data <S2SV_blank> from <S2SV_blank> %s"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> received <S2SV_blank> data <S2SV_blank> from <S2SV_blank> %s"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> received <S2SV_blank> data <S2SV_blank> from <S2SV_blank> %s"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> received <S2SV_blank> data <S2SV_blank> from <S2SV_blank> %s"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> received <S2SV_blank> data <S2SV_blank> from <S2SV_blank> %s"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> received <S2SV_blank> data <S2SV_blank> from <S2SV_blank> %s"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> received <S2SV_blank> data <S2SV_blank> from <S2SV_blank> %s"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> received <S2SV_blank> data <S2SV_blank> from <S2SV_blank> %s"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> received <S2SV_blank> data <S2SV_blank> from <S2SV_blank> %s"" <S2SV_ModEnd>, req ->",0
1310,<S2SV_ModStart> ps_slice_hdr ) { dpb_mgr_t * ps_dpb_mgr ; mv_buf_t * ps_mv_buf_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; dpb_mgr_t * ps_mv_buf_mgr = ( dpb_mgr_t * ) ps_codec -> pv_mv_buf_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; dpb_mgr_t * ps_mv_buf_mgr = ( dpb_mgr_t * ) ps_codec -> pv_mv_buf_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; dpb_mgr_t * ps_d,0
1311,"<S2SV_ModStart> PTRACE_SET_THREAD_AREA : ret = get_thread_area ( child ) ; break ; case PTRACE_GET_SYSCALL : task_thread_info ( child ) -> syscall = data ; break ; case PTRACE_GET_THREADS : ret = get_thread_regs ( child ) ; break ; case PTRACE_SET_THREADS : ret = get_thread_regs ( child ) ; break ; case PTRACE_GETFPREGS : ret = copy_regset_from_user ( child, & user_arm_view, REGSET_FPR, 0, sizeof ( union fp_regs ), datap ) ; break ; case PTRACE_SETFPREGS : ret = copy_regset_from_user ( child, & user_arm_view, REGSET_FPR, 0, sizeof ( union fp_state ), datap ) ; break ; case PTRACE_GETFPREGS : ret = copy_regset_from_user ( child, & user_arm_view, REGSET_FPR, 0, sizeof ( union fp_regs ), datap ) ; break ; case PTRACE_SET",0
1312,"<S2SV_ModStart> ; goto fail ; } if ( args -> shader_rec_count >= ( UINT_MAX / sizeof ( struct vc4_shader_state ) ) ) { ret = - EINVAL ; goto fail ; } if ( copy_from_user ( bin + bin_offset, ( void __user * ) args -> bin_cl, args -> bin_cl_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( bin + shader_rec_u, ( void __user * ) args -> shader_rec, args -> shader_rec_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( exec -> uniforms_u, ( void __user * ) args -> uniforms_u, args -> uniforms_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( exec -> shader_state, ( void __user * ) args -> shader_state, args -> shader_state_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( exec -> shader_state, ( void __user * ) args -> uniforms_",0
1313,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart> = 0 ; if ( child ) { ++ numentries ; child = child -> next ; } if (! out ) out = ( char * ) cJSON_malloc ( len ) ; if (! out ) out = ( char * ) cJSON_malloc ( len ) ; if (! out ) out = ( char * ) cJSON_malloc ( len ) ; if (! out ) out = ( char * ) cJSON_malloc ( len ) ; if (! out ) out = ( char * ) cJSON_malloc ( len ) ; if (! out ) out = ( char * ) cJSON_malloc ( len ) ; if (! out ) out = ( char * ) cJSON_malloc ( len ) ; if (! out ) out = ( char * ) cJSON_malloc ( len ) ; if (! out ) out = ( char * ) cJSON_malloc ( len ) ; if (! out ) out = ( char * ) cJSON_malloc ( len ) ; if (! out ) out = ( char *,0
1314,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
1315,<S2SV_ModStart> ( sk ) ; atomic_dec ( & sk -> sk_wmem_alloc ) ; <S2SV_ModStart> other ) { atomic_dec ( & sk -> sk_wmem_alloc ) ; <S2SV_ModStart> wait ) ; atomic_dec ( & sk -> sk_wmem_alloc ) ; <S2SV_ModStart> = 0 ; } atomic_dec ( & sk -> sk_wmem_alloc ) ; <S2SV_ModStart> = 0 ; atomic_dec ( & sk -> sk_wmem_alloc ) ; <S2SV_ModStart> = 0 ; atomic_dec ( & sk -> sk_wmem_alloc ) ; <S2SV_ModStart> = 0 ; atomic_dec ( & sk -> sk_wmem_alloc ) ; atomic_dec ( & sk -> sk_wmem_alloc ) ; atomic_dec ( & sk -> sk_wmem_alloc <S2SV_ModStart> ) ; } atomic_dec ( & sk -> sk_wmem_alloc ) ; atomic_dec ( & sk -> sk_wmem_alloc ) ; atomic_dec ( & sk -> sk_wmem_alloc ) ; atomic_dec ( & sk -> sk_wmem_alloc <S2SV_ModStart> ; atomic_dec ( & sk -> sk_wmem_alloc ) ; atomic_dec ( & sk -> sk_wmem_,0
1316,<S2SV_ModStart> 4 ] ; size_t <S2SV_ModEnd> value ; if <S2SV_ModStart> ( size_t ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 <S2SV_ModEnd> ; value |= <S2SV_ModStart> << 16 ; value |= buffer [ 1 ] << 8 ; value |= buffer [ 2 ] ; value |= buffer [ 3 ] <S2SV_ModEnd> ; quantum. <S2SV_ModStart> unsigned_value = ( <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> unsigned_value = ( <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; return,0
1317,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
1318,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; task_lock ( task <S2SV_ModEnd> ) ; ioc <S2SV_ModStart> -> io_context ; task <S2SV_ModEnd> -> io_context = <S2SV_ModStart> ; task_unlock ( task <S2SV_ModEnd> ) ; if,0
1319,"<S2SV_ModStart> = 0 ; unsigned long flags ; <S2SV_ModStart> ; ret |= __copy_to_user ( & ti -> xtregs, & xtregs, sizeof ( xtregs ) ) ; if ( XTENSA_HAVE_COPROCESSORS && xtregs -> cp0 < sizeof ( xtregs_coprocessor_t ) ) { ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ) ; } else { ret |= __copy_from_user ( & ti -> xtregs_user, & xtregs -> user, sizeof ( xtregs -> user ) ) ; if ( XTENSA_HAVE_COPROCESSORS && xtregs -> cp0 < sizeof ( xtregs_coprocessor_t ) ) { ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ; }",0
1320,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return GSS_S_DEFECTIVE_TOKEN ; <S2SV_ModStart> ; } if ( header -> buffer. length < token_wrapper_len ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN,0
1321,<S2SV_ModStart> data ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> int i ; if (! pci_is_enabled ( dev ) ) return PCIBIOS_DEVICE_NOT_FOUND ; for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; } if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_PREFETCH ) * value |= PCI_COMMAND_PREFETCH ; if ( dev -> resource [ i ]. flags & IORESOURCE_PREFETCH ) * value |= PCI_COMMAND_PREFETCH ; if ( dev -> resource [ i ]. flags & IORESOURCE_PREFETCH ) * value |= PCI_COMMAND_PREFETCH ; if ( dev -> resource [ i ]. flags & IORESOURCE_PREFETCH ) * value |= PCI_COMMAND_PREFETCH ; if ( dev -> resource [ i,0
1322,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ; vp9_ref_frame_t * frame <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL ) { YV12_BUFFER_CONFIG * fb ; frame = va_arg ( args, YV12_BUFFER_CONFIG * ) ; yuvconfig2image ( & frame -> img, NULL, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> vp9_get_reference_enc ( ctx <S2SV_ModStart> YV12_BUFFER_CONFIG * fb ; frame = va_arg ( args, YV12_BUFFER_CONFIG * ) ; if ( frame!= NULL ) { YV12_BUFFER_CONFIG * fb ; vp9_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1323,<S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1324,<S2SV_ModStart> plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { ret = - EPERM ; break ; },0
1325,<S2SV_ModStart> -> dwc ; spin_lock ( & dwc -> lock ) ; <S2SV_ModStart> lock ) ; <S2SV_ModEnd> pm_runtime_put ( dwc <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1326,<S2SV_ModStart> } # else # ifndef YYSTACK_RELOCATE # ifndef YYSTACK_RELOCATE # ifndef YYSTACK_RELOCATE # ifndef YYSTACK_RELOCATE # ifndef YYSTACK_RELOCATE # ifndef YYSTACK_RELOCATE # ifndef YYSTACK_RELOCATE # ifndef YYSTACK_RELOCATE # ifndef YYSTACK_RELOCATE # <S2SV_ModStart> } # else # ifndef YYSTACK_RELOCATE # ifndef YYSTACK_RELOCATE # ifndef YYSTACK_RELOCATE # ifndef YYSTACK_RELOCATE # ifndef YYSTACK_RELOCATE # ifndef YYSTACK_RELOCATE # ifndef YYSTACK_RELOCATE # ifndef YYSTACK_RELOCATE # ifndef YYSTACK_RELOCATE # else # ifndef YYSTACK_RELOCATE # ifndef YYSTACK_RELOCATE # ifndef YYSTACK_RELOCATE # ifndef YYSTACK_RELOCATE #,0
1327,"<S2SV_ModStart> = sas_revalidate_domain, <S2SV_ModEnd> [ DISCE_PROBE ] <S2SV_ModStart> = sas_probe_devices, <S2SV_ModEnd> [ DISCE_SUSPEND ] <S2SV_ModStart> = sas_suspend_devices, <S2SV_ModEnd> [ DISCE_RESUME ]",0
1328,"<S2SV_ModStart> int rep_quick ) { if ( param -> testflag & ( T_UNPACK | HA_OPTION_COMPRESS_RECORD ) ) { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; } else { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; } else { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> re",0
1329,"<S2SV_ModStart> ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN <S2SV_ModEnd> uECC_word_t * p <S2SV_ModStart> curve ) ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, num_n_words ) ) { return 0 ; } uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_",0
1330,"<S2SV_ModStart> trunc : ND_PRINT ( <S2SV_ModEnd> ndo, "" <S2SV_blank> [|dao-truncated]""",0
1331,"<S2SV_ModStart> ; int err ; struct sockaddr_storage * sin <S2SV_ModEnd> ; int copied <S2SV_ModStart> ; if ( addr_len ) { sin = ( struct sockaddr_in * ) msg -> msg_name ; sin -> sin_family = AF_INET ; sin -> sin_port = 0 ; sin -> sin_family = AF_INET ; sin -> sin_addr. s_addr = ip_hdr ( skb ) -> saddr ; memset ( sin -> sin_zero, 0, sizeof ( sin -> sin_zero ) ) ; * addr_len = sizeof ( * sin ) ; } <S2SV_ModEnd> if ( flags <S2SV_ModStart> { sin = ( struct sockaddr_in * ) msg -> msg_name ; sin -> sin_family = AF_INET ; sin -> sin_addr. s_addr = ip_hdr ( skb ) -> saddr ; memset ( sin -> sin_zero, 0, sizeof ( sin -> sin_zero ) ) ; <S2SV_ModEnd> if ( isk",0
1332,<S2SV_ModStart> ; flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT <S2SV_ModEnd> | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN | <S2SV_ModStart> | EXT4_EX_NOCACHE ; mutex_lock ( & EXT4_I ( inode ) -> i_mmap_mutex <S2SV_ModEnd> ) ; if <S2SV_ModStart> EXT4_GET_BLOCKS_KEEP_SIZE ; mutex_unlock ( & EXT4_I ( inode ) -> i_mmap_mutex <S2SV_ModEnd> ) ; if,0
1333,"<S2SV_ModStart> ; } else { uint32_t new_free_total = pool -> free_total * 2 ; void * new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total * sizeof ( nw_buf * ) ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total ; pool -> free_arr = new_arr ; } else { free ( buf ) ; } }",0
1334,"<S2SV_ModStart> map ; bpf_map_inc <S2SV_ModEnd> ( map,",0
1335,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> escapes ( const <S2SV_ModStart> [ ] = { ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeE",0
1336,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1337,"<S2SV_ModStart> ; if ( sizeof ( ipfix_template_record_t ) > size_left ) { LogError ( ""Process_ipfix <S2SV_blank> [%u] <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } table_id = ntohs ( ipfix_template_record -> TemplateID ) ; count = ( uint32_t ) ipfix_template_record -> FieldCount ; memset ( ( void * ) cache. common_extensions, 0, count ) ; memset ( ( void * ) cache. lookup_info, 0, 65536 * sizeof ( struct element_param_s ) ) ; for ( i = 1 ; i < count ; i ++ ) { if ( ipfix_element_map [ i ]. id == ipfix_element_map [ i ]. id ) { uint32_t Type = ipfix_element_map [ i ]. id ; if ( ipfix_element_map [ i ]. id == ipfix_element_map [ i - 1 ]. id ) { uint32",0
1338,"<S2SV_ModStart> * lined ; PIXC * pixc, * pixm, * pixg, * pixd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if ( pixs == NULL ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"",",0
1339,<S2SV_ModStart> ; if ( BN_num_bits ( u ) > BN_num_bits ( v ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( r ) ) goto err ; if (,0
1340,"<S2SV_ModStart> ; v_fn_ptr. <S2SV_ModEnd> vf = vp8_mse16x16 <S2SV_ModStart> vf = vp8_mse16x16 ; xd -> pre. y_buffer = recon_buffer -> y_buffer + recon_yoffset ; tmp_mv. as_int = 0 ; ref_mv_full. as_mv. row = 0 ; ref_mv_full. as_mv. col = 0 ; ref_mv_full. as_mv. row = 0 ; tmp_err = cpi -> diamond_search_sad ( x, b, d, & ref_mv_full, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> mvcost, ref_mv ) ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_",0
1341,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1342,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1343,"<S2SV_ModStart> ; value = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> qfalse ; } <S2SV_ModEnd> if ( msg <S2SV_ModStart> ) { nbits = 8 ; for ( i = 0 ; i < nbits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << i ) ; } bits = bits - nbits ; } if ( bits ) { for ( i = 0 ; i < bits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << i ) ; } bits = bits - nbits ; } if ( bits ) { for ( i = 0 ; i < bits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << i ) ; } bits = bits - nbits ; } if ( bits ) { for ( i = 0 ; i < bits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << i ) ; } bits = bits - nbits ; } if ( bits ) { for ( i = 0 ; i < bits ; i ++ ) { value |= ( Huff_getBit ( msg -> data,",0
1344,"<S2SV_ModStart> int err = - ENOMEM <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> count ; if ( snd_ctl_find_id ( card, & id ) ) { up_write ( & card -> controls_rwsem ) ; dev_err ( card -> dev, ""control <S2SV_blank> %i:%i:%i:%s:%i <S2SV_blank> is <S2SV_blank> already <S2SV_blank> present\\n"", id. iface, id. device, id. subdevice, id. name, id. index ) ; err = - EBUSY ; goto error ; } if ( snd_ctl_find_id ( card, & id ) ) { up_write ( & card -> controls_rwsem ) ; dev_err ( card -> dev, ""control <S2SV_blank> %i:%i:%i:%i:%s:%i <S2SV_blank> is <S2SV_blank> already <S2SV_blank> present\\n"", id. iface, id. device, id. subdevice, id. name, id. index ) ; err = - EBUSY ; goto error ; } if ( snd_ctl_find_id ( card, & id ) ) { up_write ( & card -> controls_rwsem ) ; dev_err ( card -> dev, ""control <S2SV_blank> %i:%i:%i:%i",0
1345,"<S2SV_ModStart> dev ) ; if ( dev -> interface -> desc. bNumEndpoints < 1 ) { dev_err ( & udev -> dev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", dev -> interface -> desc. bNumEndpoints ) ; status = - ENODEV ; goto out ; } if ( dev -> interface -> desc. bNumEndpoints < 1 ) { dev_err ( & udev -> dev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", dev -> interface -> desc. bNumEndpoints ) ; status = - ENODEV ; goto out ; } if ( dev -> interface -> desc. bNumEndpoints < 1 ) { dev_err ( & udev -> dev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", dev -> interface -> desc. bNumEndpoints ) ; status = - ENODEV ; goto out ; } if ( dev -> interface -> desc. bNumEndpoints < 1 ) { dev_err ( & udev -> dev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", dev -> interface -> desc. bNumEndpoints ) ; status = - ENODEV ; goto out",0
1346,"<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> = overhead ; if ( count > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 ) == MONGO_ERROR ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ;",0
1347,"<S2SV_ModStart> ""_Save"" ), g_strdup <S2SV_ModEnd> ( item -> <S2SV_ModStart> ""_Cancel"" ), g_strdup <S2SV_ModEnd> ( item -> <S2SV_ModStart> ""_Save"" ), g_strdup <S2SV_ModEnd> ( item -> <S2SV_ModStart> ( item -> content ), g_strdup <S2SV_ModEnd> ( item -> <S2SV_ModStart> ( item -> content ), g_strdup <S2SV_ModEnd> ( item -> <S2SV_ModStart> ( item -> content ), g_strdup <S2SV_ModEnd> ( item -> <S2SV_ModStart> ( item -> content ), g_strdup <S2SV_ModEnd> ( item -> <S2SV_ModStart> ( item -> content ), g_strdup <S2SV_ModEnd> ( item -> <S2SV_ModStart> ( item -> content ), g_strdup <S2SV_ModEnd> ( item -> <S2SV_ModStart> ( item -> content ), g_strdup <S2SV_ModEnd> ( item -> <S2SV_ModStart> ( item -> content ), g_strdup <S2SV_ModEnd> ( item -> <S2SV_ModStart> ( item -> content ), g_strdup <S2SV_ModEnd> ( item -> <S2SV_ModStart> ( item -> content ), g_strdup <S2SV_ModEnd> ( item -> <S2SV_ModStart> ( item -> content ), g_strdup <S2SV_ModEnd> ( item -> <S2SV_ModStart> ( item -> content ), g_strdup <S2SV_ModEnd> ( item -> <S2SV_ModStart> ( item -> content ), g_strdup <S2SV_ModEnd> ( item -> <S2SV_ModStart> ( item -> content ), g_strdup <S2SV_ModEnd> ( item",0
1348,<S2SV_ModStart> - 2 ; if ( plen < 0 ) return 0 ;,1
1349,"<S2SV_ModStart> { umode_t mode ; retval = posix_acl_update_mode ( inode, & mode, & acl ) ; if ( retval <S2SV_ModEnd> ) goto err_out <S2SV_ModStart> err_out ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> { umode_t mode ; retval = posix_acl_update_mode ( inode, & mode, & acl ) ; if ( retval < 0 ) goto err_out ; <S2SV_ModEnd> iattr = { <S2SV_ModStart> ia_valid = ATTR_MODE <S2SV_ModEnd> ; v9fs_vfs_setattr_dotl ( dentry, & iattr ) ; } break ; case ACL_TYPE_SYNCHRONIZE : if ( S_ISDIR ( inode -> i_mode ) ) { retval = v9fs_vfs_setattr_dotl ( dentry, & iattr ) ; } break ; case ACL_TYPE_RESERVE : if (! S_ISDIR ( inode -> i_mode ) ) { retval = - EOPNOTSUPP ; goto err_out ; } break ; case ACL_TYPE_RESERVE : if (! S_ISDIR ( inode -> i_mode ) ) { retval = - EOPNOTSUPP ; goto err_",0
1350,"<S2SV_ModStart> ; if ( class_name == NULL ) { eprintf ( ""Class <S2SV_blank> name <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"" ) ; return false ; } <S2SV_ModStart> ; if ( class_name == NULL ) { eprintf ( ""Class <S2SV_blank> name <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"" ) ; return false ; } <S2SV_ModStart> ; if ( class_name == NULL ) { eprintf ( ""Class <S2SV_blank> name <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"" ) ; return false ; } <S2SV_ModEnd> class_name = class_name <S2SV_ModStart> ; if ( class_name == NULL ) { eprintf ( ""Class <S2SV_blank> name <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"" ) ; return false ; } <S2SV_ModStart> ; if ( class_name == NULL ) { eprintf ( ""Class <S2SV_blank> name <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"" ) ; return false ; } <S2SV_ModStart> ; if ( class_name == NULL ) { eprintf ( ""Class <S2SV_blank> name <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"" ) ; return false ; } <S2SV_ModEnd> class_name = class_name <S2SV_ModStart> ; if ( class_name == NULL ) { eprintf ( ""Class <S2SV_blank> name <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"" ) ; return false ; }",0
1351,<S2SV_ModStart> case NPPVpluginDescriptionString : type = RPC_TYPE_STRING ; break ; case NPPVpluginWindowSize : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTimerInterval : type = RPC_TYPE_INT32 ; break ; case NPPVpluginNeedsXEmbed : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTransparentBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVjavascriptPushCallerBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginKeepLibraryInMemory : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginScriptableNPObject : type = RPC_TYPE_NP_OBJECT ; break ;,0
1352,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; return ; } if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""Invalid <S2SV_blank> RDP_NEG_RSP"" ) ; <S2SV_ModStart> = NEGO_STATE_FINAL ; return ;",0
1353,"<S2SV_ModStart> ; int i, bits_per_mb_at_this_q ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; i = active_best_quality ; do { const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( target_bits_per_mb - bits_per_mb_at_this_q ) <= last_error ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } else { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; } } else { last_error = bits_per_mb_at_this_q - target_bits_per",0
1354,<S2SV_ModStart> value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
1355,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1356,<S2SV_ModStart> data ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1357,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ;,0
1358,"<S2SV_ModStart> TX_SIZE tx_size, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> plane ] ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd>",0
1359,"<S2SV_ModStart> } else { if ( end >= pattern [ current ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ current ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ current ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ current ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ current ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ current ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; }",0
1360,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> jas_iccprof_t <S2SV_ModEnd> * jas_iccprof_createfrombuf (,0
1361,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
1362,"<S2SV_ModStart> BUG_ON (! thresholds ||! thresholds -> primary ) ; usage = mem_cgroup_usage ( memcg, type == _MEM ) ; __mem_cgroup_threshold ( memcg, type == _MEM ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; size = 0 ; for ( i = 0 ; i < thresholds -> primary -> size ; i ++ ) { if ( thresholds -> primary -> entries [ i ]. eventfd!= eventfd ) size ++ ; } new = thresholds -> spare ; if (! size ) { kfree ( new ) ; new = NULL ; goto swap_buffers ; } new = thresholds -> spare ; if (! size ) { kfree ( new ) ; new = NULL ; goto swap_buffers ; } new = thresholds -> spare ; if (! size ) { kfree ( new ) ; new = NULL ; goto swap_buffers ; } new -> size = size ; new -> current_threshold = - 1 ; for ( i = 0, j = 0 ; i < thresholds -> primary -> size ; i ++ ) { if ( new -> entries [ j ]. threshold < usage ) { ++ new -> current",0
1363,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> lock ) ; mutex_lock ( & client -> lock ) ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> lock ) ; mutex_unlock ( & client -> lock ) ;",0
1364,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vp9_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } vp9_wb_write_literal ( wb, VP9_FRAME_MARKER, 3 ) ; if ( cm -> profile >= PROFILE_1 ) { vp9_wb_write_bit ( wb, 0 ) ; if ( cm -> profile >= PROFILE_1 ) { vp9_wb_write_bit ( wb, cm -> subsampling_x ) ; vp9_wb_write_bit ( wb, cm -> subsampling_y ) ; vp9_wb_write_bit ( wb, cm -> subsampling_x ) ; vp9_wb_write_bit ( wb, cm -> subsampling_y ) ; vp9_wb_write_bit ( wb, 0 ) ; if ( cm -> profile >= PROFILE_1 ) { vp9_wb_write_bit ( wb, cm -> subsampling_x ) ; vp9",0
1365,"<S2SV_ModStart> col_nam ) ; if ( strchr ( col_nam, '=' ) ) { strcpy ( col_nam, '=' ) ; } else { strcpy ( col_nam, '=' ) ; } <S2SV_ModStart> } ) ; if ( strchr ( col_nam, '=' ) ) { strcpy ( col_nam, '=' ) ; } if ( strchr ( col_nam, '=' ) ) { strcpy ( col_nam, '=' ) ; } else { strcpy ( col_nam, '=' ) ; } if ( strchr ( col_nam, '=' ) ) { strcpy ( col_nam, '=' ) ; } else { strcpy ( col_nam, '=' ) ; } <S2SV_ModStart> } ) ; if ( strchr ( col_nam, '=' ) ) { strcpy ( col_nam, '=' ) ; } if ( strchr ( col_nam, '=' ) ) { strcpy ( col_nam, '=' ) ; } else { strcpy ( col_nam, '=' ) ; } if ( strchr ( col_nam, '=' ) ) { strcpy ( col_nam, '=' ) ; } else { strcpy ( col_nam",0
1366,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
1367,"<S2SV_ModStart> ; if (! TYPE_COMMENT ( CHILD ( n, i ) ) ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break",0
1368,<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd ->,0
1369,"<S2SV_ModStart> error ; uint32_t <S2SV_ModEnd> status ; enc624j600Context <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { context <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; context -> nextPacket = letoh16 ( context -> nextPacket ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; context -> nextPacket = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & status, sizeof ( uint32_t ) ) ; status = letoh32 ( status ) ; if ( ( status & RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { enc624j600WriteReg ( interface, ENC6",0
1370,"<S2SV_ModStart> 0x01 ) { if ( i + 1 + objlen > GEMSAFE_MAX_OBJLEN ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_SIZE_T ""u"", GEMSAFE_MAX_OBJLEN ) ; return SC_ERROR_INTERNAL ; } <S2SV_ModStart> 0x01 ) { if ( i + 1 + objlen > GEMSAFE_MAX_OBJLEN ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_SIZE_T ""u"", GEMSAFE_MAX_OBJLEN ) ; return SC_ERROR_INTERNAL ; } <S2SV_ModStart> 0x01 ) { if ( i + 1 + objlen > GEMSAFE_MAX_OBJLEN ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_SIZE_T ""u"", GEMSAFE_MAX_OBJLEN ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_SIZE_T ""u"", GEMSAFE_MAX_OBJLEN ) ; return SC_",0
1371,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1372,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass, VALUE content ) { VALUE rb_schema = rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( argv ), rb_const_get ( rb_const_get ( ), rb_const_get ( ), rb_const_get ( rb_const_get ( rb_const_get ( ), rb_const_get ( rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( )",0
1373,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart>, off ; if ( fbdev -> fb_phys + fbdev -> fb_len > PAGE_SIZE ) { return - EINVAL ; } start = fbdev -> fb_phys & PAGE_MASK ; len = PAGE_ALIGN ( ( start & ~ PAGE_MASK ) + fbdev -> fb_len ) ; off = vma -> vm_pgoff << PAGE_SHIFT ; if ( ( vma -> vm_end - vma -> vm_start + off ) > len ) { return - EINVAL ; } vma -> vm_pgoff = PAGE_ALIGN ( ( vma -> vm_end - vma -> vm_start ) >> PAGE_SHIFT ; vma -> vm_page_prot = pgprot_noncached ( vma -> vm_page_prot ) ; pgprot_val ( vma -> vm_page_prot ) |= _CACHE_MASK ; return io_remap_pfn_range ( vma, vma -> vm_start, off >> PAGE_SHIFT, vma -> vm_end - vma -> vm_start, vma -> vm_page_prot",0
1374,"<S2SV_ModStart> += 3 ; if ( strlen ( config_arg ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> argument <S2SV_blank> in <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> += 3 ; if ( strlen ( config_arg ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> argument <S2SV_blank> in <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> += 3 ; if ( strlen ( config_arg ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> argument <S2SV_blank> in <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> += 3 ; if ( strlen ( config_arg ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> argument <S2SV_blank> in <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> += 3 ; if ( strlen ( config_arg ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> argument <S2SV_blank> in <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; }",0
1375,<S2SV_ModStart> / 2 ] ; if ( x >= 4 * state -> xsize ) return - 1 ; <S2SV_ModStart> / 2 ] ; if ( x >= 4 * state -> xsize ) return - 1 ; <S2SV_ModStart> / 2 ] ; if ( x >= 4 * state -> xsize ) return - 1 ; <S2SV_ModStart> / 2 ] ; if ( x >= 4 * state -> xsize ) return - 1 ;,0
1376,"<S2SV_ModStart> idx ) ) { if (! alpha_perf_event_set_period ( event, hwc, idx, & data, regs ) ) { pr_warning ( ""PMI: <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1377,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1378,"<S2SV_ModStart> ; err = - EBUSY <S2SV_ModEnd> ; if ( <S2SV_ModStart> out ; } if ( type == PACKET_FANOUT_HASH ) { atomic_long_set ( & rollover -> num, 0 ) ; atomic_long_set ( & rollover -> num_huge, 0 ) ; atomic_long_set ( & rollover -> num_failed, 0 ) ; goto out ; } if ( type == PACKET_FANOUT_HASH ) { atomic_long_set ( & rollover -> num, 0 ) ; atomic_long_set ( & rollover -> num_failed, 0 ) ; goto out ; } if ( type == PACKET_FANOUT_CPU ) { atomic_long_set ( & rollover -> num_huge, 0 ) ; atomic_long_set ( & rollover -> num_failed, 0 ) ; goto out ; } if ( type == PACKET_FANOUT_CPU ) { atomic_long_set ( & rollover -> num, 0 ) ; atomic_long_set ( & rollover -> num_failed, 0 ) ; goto out ; }",0
1379,<S2SV_ModStart> poll ) ; <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1380,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static wchar_t <S2SV_ModEnd> utf8s_to_utf16s ( const <S2SV_ModStart> int len, wchar_t <S2SV_ModEnd> * pwcs ) <S2SV_ModStart> - EINVAL ; if ( len < size ) return - EINVAL ; <S2SV_ModStart> PLANE_SIZE ) { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } s += size ; len -= size ;",0
1381,"<S2SV_ModStart> length ) { uint32_t <S2SV_ModEnd> i ; if <S2SV_ModStart> == PNG_COLOR_TYPE_RGB && ( s -> state & PNG_PLTE ) ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; if ( s -> bit_depth > 8 ) av_WB16 ( & s -> transparent_color_be [ 2 * i ], v ) ; else s -> transparent_color_be [ 2 * i ] = v ; } } else if ( s -> color_type == PNG_COLOR_TYPE_GRAY ) { if ( s -> state & PNG_PLTE ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; if ( s -> bit_depth > 8 ) av_WB16 ( & s -> transparent_color_be [ 2",0
1382,"<S2SV_ModStart> EPROTONOSUPPORT ) { crm_error ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; <S2SV_ModStart> EPROTONOSUPPORT ) { crm_error ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st",0
1383,<S2SV_ModStart> = AF_INET6 ; } if ( PKT_IS_IPV4 ( p ) ) { dt -> id = ( int32_t ) IPV4_EXTHDR_GET_IPID ( p ) ; } else if ( PKT_IS_IPV6 ( p ) ) { dt -> id = ( int32_t ) IPV6_EXTHDR_GET_FH_ID ( p ) ; } else if ( PKT_IS_IPV4 ( p ) ) { dt -> id = ( int32_t ) IPV6_EXTHDR_GET_IPID ( p ) ; } else if ( PKT_IS_IPV6 ( p ) ) { dt -> id = ( int32_t ) IPV6_EXTHDR_GET_FH_ID ( p ) ; } else { dt -> id = ( int32_t ) IPV6_EXTHDR_GET_FH_ID ( p ) ; },0
1384,"<S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & ( KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXRF | KSZ8851_RXCE <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( status & ( KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXRF | KSZ8851_RXCE <S2SV_ModEnd> ) ) == <S2SV_ModStart> { ksz8851WriteReg ( interface, KSZ8851_RXFDPR, RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_RRXEF <S2SV_ModEnd> )",0
1385,"<S2SV_ModStart> const node * node <S2SV_ModEnd>, asdl_seq * <S2SV_ModStart> int is_async ) { identifier name ; arguments_ty args = NULL ; expr_ty returns = NULL ; int name_i = 1 ; node * tc ; string type_comment = NULL ; if ( TYPE ( CHILD ( n, name_i + 1 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 2 ) ) ; if (! args ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3 ) ) ; <S2SV_ModStart> returns, type_comment, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; else if ( TYPE ( CHILD ( n, name_i + 3 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3 ) ) ; if (! type_comment ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3 )",0
1386,"<S2SV_ModStart> int i ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pud = pud_offset ( pgd, 0xA0000 ) ; if ( pud_none_or_clear_bad ( pud ) ) goto out ; pmd = pmd_offset ( pmd, 0xA0000 ) ; split_huge_page_pmd ( mm, pmd ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ; pte = pte_offset_map_lock ( mm, pmd, 0xA0000, & ptl ) ; for ( i = 0 ; i < 32 ; i ++ ) { if ( pte_present ( * pte ) ) set_pte ( pte, pte_wrprotect ( * pte ) ) set_pte ( pte, pte_wrprotect ( * pte ) ; } pte_unmap_unlock ( pte, ptl ) ; out :",0
1387,"<S2SV_ModStart> ; return aa_audit ( AUDIT_APPARMOR_DENIED, & sa, NULL ) ; } else if ( strcmp ( name, ""description"" ) == 0 ) { error = - EINVAL ; return aa_audit ( AUDIT_APPARMOR_DENIED, NULL, GFP_KERNEL, & sa, NULL ) ; } else if ( strcmp ( name, ""profile"" ) == 0 ) { error = aa_setprocattr_profile ( args,! AA_ONEXEC,! AA_DO_TEST ) ; } else if ( strcmp ( name, ""permipc"" ) == 0 ) { error = aa_setprocattr_permipc ( args,! AA_ONEXEC,! AA_DO_TEST ) ; } else if ( strcmp ( name, ""profile"" ) == 0 ) { error = aa_setprocattr_profile ( args,! AA_ONEXEC,! AA_DO_TEST ) ; } else if ( strcmp ( name, ""profile"" ) == 0 ) { error = aa_setprocattr_profile ( args,! AA_ONEXEC,! AA_DO_TEST ) ; } else",0
1388,"<S2SV_ModStart> uint_fast8_t tmp ; if (! siz -> caps ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_e",0
1389,"<S2SV_ModStart> ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; }",0
1390,"<S2SV_ModStart> += 4 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> += 4 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> += 4 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> += 4 ; xmi_size -= 4 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> += 4 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> +",0
1391,"<S2SV_ModStart> ; size_t total_len ; if ( unlikely ( total_len > iov_len ( iov, nr_segs ) ) ) { ret = - EINVAL ; do_wakeup = 1 ; break ; } <S2SV_ModEnd> for ( ; <S2SV_ModStart> ; size_t chars = iov_length ( iov, nr_segs ) ; int error, atomic ; if ( unlikely ( chars > total_len ) ) { if (! ret ) ret = error ; break ; } error = pipe_iov_copy_to_user ( iov, addr + buf -> offset, chars, atomic ) ; if ( unlikely ( error ) ) { if ( atomic ) atomic =! iov_fault_in_pages_write ( iov, chars ) ; goto redo ; } ret += chars ; buf -> offset += chars ; buf -> len -= chars ; if ( buf -> flags & PIPE_BUF_FLAG_PACKET ) { if (! ret ) ret = error ; break ; } ret += chars ; buf -> len -= chars ; if ( buf -> flags & PIPE_BUF_FLAG_PACKET ) { do_wakeup = 1 ; ret = error ; break ;",0
1392,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> } \\\n} <S2SV_ModEnd> IndexPacket index ; <S2SV_ModStart> } \\\n} <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1393,"<S2SV_ModStart> ) ) ; if ( ugh == NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; release_md ( dh -> md ) ; return ; } if ( ugh == NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; release_md ( dh -> md ) ; return ; } passert ( ugh!= NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; release_md ( dh -> md ) ; return ; } if ( ugh == NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; release_md ( dh -> md ) ; return ; } passert ( ugh!= NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ;",0
1394,<S2SV_ModStart> ) { p_fm_config_conx_hdlt <S2SV_ModEnd> hdl ; int <S2SV_ModStart> res ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1395,"<S2SV_ModStart> ; if (! jas_safe_init <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ] ; infile = NULL ; verbose = 0 ; debug = 0 ; # if defined ( JAS_DEFAULT_MAX_MEM_USAGE ) max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; # endif while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_VERBOSE : verbose = 1 ; break ; case OPT_DEBUG : debug = atoi ( jas_optarg ) ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_HELP : default : usage ( ) ; break ; } } if ( ( fmtid = jas_image_getfmt ( instream ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if ( ( fmtid = jas_image_getfmt ( instream ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if ( ( fmtid = jas_image_getfmt (",0
1396,"<S2SV_ModStart> ) ) { if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } <S2SV_ModStart> ) ) { if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } <S2SV_ModStart> ) ) { if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } <S2SV_ModStart> } if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return",0
1397,"<S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # else for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # endif <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # else for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # endif for ( i = 0 ; i < 11 ; i ++ ) { if ( ( j = pana_bits ( 8",0
1398,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> len < needed <S2SV_ModStart> needed ) { struct dm_dev * dev = dm_disk ( hc -> md ) ; if ( dev -> bd_dev == 0 || dev -> bd_dev -> bd_dev!= dev -> bd_dev ) { dm_dev_err ( filp, ""Invalid <S2SV_blank> device: <S2SV_blank> %s\\n"", dev -> bd_dev -> bd_dev -> bd_dev_name ) ; dm_dev_err ( filp, ""Invalid <S2SV_blank> device: <S2SV_blank> %s\\n"", dev -> bd_dev -> bd_dev -> bd_dev_name, dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev ) ; } else { dm_dev_err ( filp, ""Invalid <S2SV_blank> device: <S2SV_blank> %s\\n"", dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev_name ) ; dm_dev_err ( filp, ""Invalid <S2SV_blank> device: <S2SV_blank> %s\\n"", dev -> bd_dev -> bd_dev -> bd_dev_name, dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd",0
1399,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1400,"<S2SV_ModStart> vcpu_info ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> irq_srcu ) ; if ( guest_irq >= irq_rt -> nr_rt_entries ) goto out <S2SV_ModEnd> ; hlist_for_each_entry ( <S2SV_ModStart> -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! kvm_intr_is_single_vcpu ( kvm, & irq, & vcpu ) ) { ret = irq_set_vcpu_affinity ( host_irq, NULL ) ; if ( ret < 0 ) { printk ( KERN_ERR ""failed <S2SV_blank> to <S2SV_blank> back <S2SV_blank> to <S2SV_blank> remapped <S2SV_blank> mode, <S2SV_blank> irq: <S2SV_blank> %u\\n"", host_irq ) ; goto out <S2SV_ModEnd> ; } }",0
1401,<S2SV_ModStart> bfqq ) { hrtimer_try_to_cancel ( timer <S2SV_ModEnd> ) ; return,0
1402,"<S2SV_ModStart> } else { if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, umin_value ) ) == 0 && rold -> umin_value == U64_MIN && rold -> umax_value == U64_MAX && rold -> smin_value == S64_MIN && rold -> smax_value == S64_MAX && tnum_is_unknown ( rold -> var_off ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, smin_value ) ) == 0 && range_within ( rold, rcur ) && tnum_in ( rold -> var_off, rcur -> var_off ) ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, smin_value ) ) == 0 && tnum_is_unknown ( rold -> var_off ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, smax_value ) ) return false ; if ( memcmp ( rold",0
1403,<S2SV_ModStart>! handle ) return NULL ; pointer = ( void * ) ~ ( ( size_t ) handle -> dwUpper & ( size_t ) SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_,0
1404,<S2SV_ModStart> += 1 ; if ( orderInfo -> orderType < 0 || orderInfo -> orderType >= MAX_ORDER_TYPE ) return - 1 ;,0
1405,<S2SV_ModStart> out ; } if ( OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER (,0
1406,"<S2SV_ModStart> ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> start: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", str, end, sstart, sprev ) ;",0
1407,"<S2SV_ModStart> int plane ; switch ( bsize ) { case BLOCK_SIZE_8X8 : vp9_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; break ; case BLOCK_SIZE_10X8 : vp9_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; break ; case BLOCK_SIZE_12X8 : vp9_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; break ; case BLOCK_SIZE_8X8 : vp9_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; break ; case BLOCK_SIZE_10X8 : vp9_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; break ; case BLOCK_SIZE_12X8 : vp9_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; break ; case BLOCK_SIZE_8X8 : vp9_foreach_transformed_block_in_plane",0
1408,<S2SV_ModStart> ; int error ; msg -> msg_namelen = 0,0
1409,<S2SV_ModStart> = hash ; sr -> fd = fd ;,0
1410,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> x -> e_mbd ; # if CONFIG_VP9_HIGHBITDEPTH if ( frame_is_intra_only ( cm ) ) { vpx_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { vpx_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } # else MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( frame_is_intra_only ( cm ) ) { vpx_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } # else MB_PREDICTION_MODE intramode = DC_PRED ; set_",0
1411,<S2SV_ModStart> { dev -> priv_flags &= ~ ( IFF_TX_SKB_SHARING | IFF_TX_SKB_SHARING | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) dev -> priv_flags &= ~ ( IFF_TX_SKB_SHARING | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> csum ) dev -> priv_flags &= ~ ( IFF_TX_SKB_SHARING | IFF_TX_SKB_SHARING | IFF_TX_SKB_SHARING | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> dev -> priv_flags &= ~ ( IFF_TX_SKB_SHARING | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> csum ) dev -> priv_flags &= ~ ( IFF_TX_SKB_SHARING | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> priv_flags &= ~ ( IFF_TX_SKB_SHARING | IFF_TX_,0
1412,"<S2SV_ModStart> = NULL ; if ( reader. superblock == NULL ) { log ( ""cannot <S2SV_blank> read <S2SV_blank> superblock <S2SV_blank> from <S2SV_blank> stdin\\n"" ) ; return NULL ; } <S2SV_ModStart> superblock ) ; if ( reader. gcol == NULL ) { log ( ""cannot <S2SV_blank> read <S2SV_blank> gcol <S2SV_blank> from <S2SV_blank> stdin\\n"" ) ; return NULL ; }",0
1413,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, ( size_t ) MagickMax ( number_planes_filled, ( size_t ) MagickMax ( number_planes_filled, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes_filled, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax (",0
1414,"<S2SV_ModStart> = 1 ; memset ( pMap -> ranges, 0, sizeof ( MappedRange ) ) ;",0
1415,"<S2SV_ModStart> ; if ( ( be16_to_cpu ( dip -> di_nlink ) + be16_to_cpu ( dip -> di_nlink ) > mp -> m_sb. sb_inodesize ) return __this_address ; if (! xfs_verify_cksum ( ( char * ) dip, mp -> m_sb. sb_inodesize, XFS_DINODE_CRC_OFF ) ) return __this_address ; if ( ( be16_to_cpu ( dip -> di_nlink ) + be16_to_cpu ( dip -> di_anextents ) > mp -> m_sb. sb_inodesize ) return __this_address ; if ( ( be16_to_cpu ( dip -> di_nlink ) + be16_to_cpu ( dip -> di_anextents ) > mp -> m_sb. sb_inodesize ) return __this_address ; if ( ( be16_to_cpu ( dip -> di_nlink ) + be16_to_cpu ( dip -> di_anextents ) > mp -> m_sb. sb_inodesize ) return __this_address",0
1416,"<S2SV_ModStart> ; if ( ( flags & VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_GF ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_G",0
1417,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1418,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( & <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
1419,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> case BGPTYPE_IPV4_ADDRESS : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( tlen < 4 ) { ND",0
1420,"<S2SV_ModStart> ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Host</th>"" ""<th <S2SV_blank> width=\'60%%\'>Pid</th>"" ""<th <S2SV_blank> width=\'60%%\'>Log</th>"" ""<th <S2SV_blank> width=\'60%%\'>State</th>"" ""<th <S2SV_blank> width=\'60%%\'>Debug</table <S2SV_blank> id>"" ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Environment</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Host</th>"" ""<th <S2SV_blank> width=\'60%%\'>PID</th>"" ""<th <S2SV_blank> width=\'60%%\'>Control</th>"" ""<th <S2SV_blank> width=\'60%%\'>State</th>"" ""<th <S2SV_blank> width=\'60%%\'>Log</th>""",0
1421,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
1422,"<S2SV_ModStart> ( tokbuf, sizeof ( tokbuf ), ""%s"", constr1 ) ; strncat ( tokbuf, constr2, sizeof ( constr2 ), ""%s"", constr1 ) ; strncat ( tokbuf, ""%s"", constr2 ) ; strncat ( tokbuf, ""%s"", constr1 ) ; strncat ( tokbuf, ""%s"", constr2 ) ; strncat ( tokbuf, ""%s"", constr1 ) ; strncat ( tokbuf, ""%s"", constr2 ) ; strncat ( tokbuf, ""%s"", constr1 ) ; strncat ( tokbuf, ""%s"", constr2 ) ; strncat ( tokbuf, ""%s"", constr1 ) ; strncat ( tokbuf, ""%s"", constr2 ) ; strncat ( tokbuf, ""%s"", constr1 ) ; strncat ( tokbuf, ""%s"", constr2 ) ; strncat ( tokbuf, ""%s"", constr1 ) ; strncat ( tokbuf, ""%s"", constr2 ) ;",0
1423,<S2SV_ModStart> int u ; if ( n < 0 || n > 32 ) { return - 1 ; },0
1424,"<S2SV_ModStart>, & nr_segs, <S2SV_ModEnd> len, iovec <S2SV_ModStart>, & nr_segs, <S2SV_ModEnd> len, iovec <S2SV_ModStart>, & nr_segs, <S2SV_ModEnd> len, iovec <S2SV_ModStart>, & nr_segs, <S2SV_ModEnd> len, iovec <S2SV_ModStart>, & nr_segs, <S2SV_ModEnd> len, iovec <S2SV_ModStart>, & nr_segs, <S2SV_ModEnd> len, iovec <S2SV_ModStart> = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if (! ret ) ret = rw_verify_area (",0
1425,"<S2SV_ModStart> ; } } if ( c -> rbytes == sizeof ( protocol_binary_request_header ) ) { c -> rbytes = sizeof ( protocol_binary_request_header ) ; } else if ( c -> rbytes == sizeof ( protocol_binary_request_header ) ) { c -> rbytes = sizeof ( protocol_binary_request_header ) ; } else if ( ii % 4 == 0 ) { fprintf ( stderr, ""\\n<%d <S2SV_blank> <S2SV_blank> "", c -> sfd ) ; } fprintf ( stderr, ""\\n<%d <S2SV_blank> Read <S2SV_blank> binary <S2SV_blank> protocol <S2SV_blank> data:"", c -> sfd ) ; for ( ii = 0 ; ii < sizeof ( protocol_binary_request_header ) ; ++ ii ) { if ( ii % 4 == 0 ) { fprintf ( stderr, ""\\n<%d <S2SV_blank> <S2SV_blank> "", c -> sfd ) ; } fprintf ( stderr, ""\\n<%d <S2SV_blank> <S2SV_blank> "", c -> sfd ) ; } fprintf ( stderr, ""\\n<%d <S2SV_blank> Read <S2SV_blank> binary <S2SV_blank> protocol <S2SV_blank> data:"", c -> sfd ) ; for ( ii = 0 ; ii < sizeof ( protocol_binary_request_header ) ; ++",0
1426,"<S2SV_ModStart> len ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> "" ""type <S2SV_blank> = <S2SV_blank> 0x%X, <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %d\\n"", cfgidx, config -> desc. bDescriptorType, config -> desc. bLength ) ; return - EINVAL ; } if ( len < sizeof ( struct usb_descriptor_header ) ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> "" ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> "" ""type <S2SV_blank> = <S2SV_blank> 0x%X, <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %d\\n"", cfgidx, config -> desc. bDescriptorType, config -> desc. bLength ) ; return - EINVAL ; } if ( len < sizeof ( struct usb_descriptor_header ) ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> "" ""length <S2SV_blank> = <S2SV_blank> %d\\n"", cfgidx, config -> desc. bLength ) ; return - EINVAL ; }",0
1427,"<S2SV_ModStart> ; if ( info -> count < 1 ) return - EINVAL ; access = info -> access == 0? SNDRV_CTL_ELEM_ACCESS_READWRITE : ( info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ) ; info -> id. numid = 0 ; memset ( & kctl, 0, sizeof ( kctl ) ) ;",0
1428,"<S2SV_ModStart> { exit_client ( <S2SV_ModEnd> client_p, client_p <S2SV_ModStart> client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( strlen ( parv [ 1 ] ) > 400 ) { sendto_one ( source_p, form_str ( ERR_SASLTOOLONG ), me. name, EmptyString ( source_p -> name )? ""*"" : source_p -> name ) ; return 0 ; } if ( strlen ( parv [ 2 ] ) > 400 ) { sendto_one ( source_p, form_str ( ERR_SASLTOOLONG ), me. name, EmptyString ( source_p -> name )? ""*"" : source_p -> name ) ; return 0 ; } if ( strlen ( parv [ 3 ] ) > 400 ) { sendto_one ( source_p, form_str ( ERR_SASLTOOLONG ), me. name, EmptyString ( source_p -> name )? ""*"" : source_p -> name ) ; return 0 ; }",0
1429,<S2SV_ModStart> ; break ; case X86EMUL_MODE_UNDEFINED : case X86EMUL_MODE_PROT64 : case X86EMUL_MODE_PROT32 : case X86EMUL_MODE_PROT64 : case X86EMUL_MODE_PROT48 : case X86EMUL_MODE_PROT48 : case X86EMUL_MODE_PROT48 : case X86EMUL_MODE_PROT48 : if ( mode == X86EMUL_MODE_PROT64 ) { <S2SV_ModStart> case X86EMUL_MODE_PROT64 : case X86EMUL_MODE_PROT32 : case X86EMUL_MODE_PROT64 : case X86EMUL_MODE_PROT48 : case X86EMUL_MODE_PROT48 : case X86EMUL_MODE_PROT48 : case X86EMUL_MODE_PROT48 : if ( mode == X86EMUL_MODE_PROT64 ) { <S2SV_ModStart> case X86EMUL_MODE_PROT32 : case X86EMUL_MODE_PROT64 : if ( mode == X86EMUL_MODE_PROT,0
1430,"<S2SV_ModStart> event, mmap_event <S2SV_ModEnd> -> event_id.",0
1431,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1432,"<S2SV_ModStart> 16 ) ; if ( error16x16 > INT_MAX ) { error16x16 = INT_MAX ; distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; this_rd = RDCOST ( x -> rdmult, x -> rddiv, rate, distortion ) ; if ( error16x16 > this_rd ) { error16x16 = this_rd ; best_mode = mode ; best_sse = sse ; } }",0
1433,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 ) ; interface -> macAddr. w [ 0 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR2 ) ; interface -> macAddr. w [ 1 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR3 ) ; interface -> macAddr. w [ 2 ] = letoh16 ( temp ) ; macAddrToEui64 ( & interface -> macAddr, & interface -> eui64 ) ; } else { temp = htole16 ( interface -> macAddr. w [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR1, temp ) ; temp = htole16 ( interface -> macAddr. w [ 1 ] ) ; enc624j600Write",0
1434,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; vsnprintf ( start, maxlen, format, argptr ) ; <S2SV_ModStart> = 0 ; psf -> header. <S2SV_ModEnd> headindex = strlen <S2SV_ModStart> psf -> header. <S2SV_ModEnd> headindex = strlen <S2SV_ModStart> psf -> header. <S2SV_ModEnd> headindex = strlen <S2SV_ModStart> psf -> header. <S2SV_ModEnd> headindex = strlen <S2SV_ModStart> psf -> header. <S2SV_ModEnd> headindex = strlen <S2SV_ModStart> psf -> header. <S2SV_ModEnd> headindex = strlen <S2SV_ModStart> psf -> header. <S2SV_ModEnd> headindex = strlen <S2SV_ModStart> = 0 ; psf -> header. <S2SV_ModEnd> headindex = strlen <S2SV_ModStart> psf -> header. <S2SV_ModEnd> headindex = strlen <S2SV_ModStart> psf -> header. <S2SV_ModEnd> headindex = strlen <S2SV_ModStart> psf -> header. <S2SV_ModEnd> headindex = strlen <S2SV_ModStart> psf -> header. <S2SV_ModEnd> headindex = strlen <S2SV_ModStart> psf -> header. <S2SV_ModEnd> headindex = strlen <S2SV_ModStart> psf -> header. <S2SV_ModEnd> headindex = strlen <S2SV_ModStart> psf -> header. <S2SV_ModEnd> headindex = strlen <S2SV_ModStart> psf -> header. <S2SV_ModEnd> headindex = strlen <S2SV_ModStart> psf -> header. <S2SV_ModEnd> headindex = strlen",0
1435,"<S2SV_ModStart> ) ) ; if ( unconditional ( e ) ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && t -> verdict < - NF_MAX_VERDICT && unconditional ( & e -> arp ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_",0
1436,<S2SV_ModStart> alg_priv ) { vpx_alg_destroy_priv <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> alg_priv ) ; },0
1437,<S2SV_ModStart> ( exit_reason == EXIT_REASON_RDTSC <S2SV_ModEnd> ) { pr_info_ratelimited <S2SV_ModStart> ( exit_reason == EXIT_REASON_RDPMC <S2SV_ModEnd> ) { pr_info_ratelimited <S2SV_ModStart> ( exit_reason == EXIT_REASON_RDTSC <S2SV_ModEnd> ) { pr_info_ratelimited <S2SV_ModStart> ( exit_reason == EXIT_REASON_RDPMC <S2SV_ModEnd> ) { pr_info_ratelimited <S2SV_ModStart> ( exit_reason == EXIT_REASON_RDTSC <S2SV_ModEnd> ) { pr_info_ratelimited <S2SV_ModStart> ) ; } if ( exit_reason == EXIT_REASON_RDPMC <S2SV_ModEnd> ) { pr_info_ratelimited <S2SV_ModStart> ( exit_reason == EXIT_REASON_RDTSC <S2SV_ModEnd> ) { pr_info_ratelimited <S2SV_ModStart> ( exit_reason == EXIT_REASON_RDPMC <S2SV_ModEnd> ) { pr_info_ratelimited <S2SV_ModStart> ( exit_reason == EXIT_REASON_RDTSC <S2SV_ModEnd> ) ; },0
1438,"<S2SV_ModStart> { sf -> use_square_partition_only <S2SV_ModEnd> =! frame_is_intra_only <S2SV_ModStart> =! frame_is_intra_only <S2SV_ModEnd> ( cm ) <S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> = vp9_frame_is_boosted ( cpi )? USE_FULL_RD : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = DISABLE_ALL_SPLIT ; else sf -> disable_split_mask = DISABLE_ALL_INTER_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; sf -> recode_loop = ALLOW_RECODE_KFARFGF ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V",0
1439,"<S2SV_ModStart> ; dh = skb_header_pointer ( skb, dataoff, sizeof ( _dh ), & dh ) ; if ( dh == NULL ) { nf_ct_kill_acct ( ct, ctinfo, skb ) ; return NF_ACCEPT ; } type = dh -> dccph_type ; if ( type == DCCP_PKT_RESET &&! test_bit ( IPS_SEEN_REPLY_BIT, & ct -> status ) ) { nf_ct_kill_acct ( ct, ctinfo, skb ) ; return NF_ACCEPT ; } spin_unlock_bh ( & ct -> lock ) ; break ; case CT_DCCP_TIMEWAIT : if ( old_state == CT_DCCP_REQUEST ) ct -> proto. dccp. role [! dir ] = CT_DCCP_ROLE_CLIENT ; ct -> proto. dccp. role [! dir ] = CT_DCCP_ROLE_SERVER ; break ; case CT_DCCP_RESPOND : if ( old_state == CT_DCCP_RESPOND ) ct -> proto. dccp. handshake_seq = dccp",0
1440,"<S2SV_ModStart> struct compat_timex tx32 ; memset ( txc, 0, sizeof ( * txc ) ) ;",0
1441,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
1442,"<S2SV_ModStart> ; int goodsize ; if ( inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = L -> stacksize ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { }, { }, { }",0
1443,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1444,"<S2SV_ModStart>, * s = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; char * ch, s_kind [ 3 ] = { 0, 0, 0, 0 } ; raw = s ; while ( * raw && * raw!= '\\'' && * raw!= \'""\' ) { * raw ++ = * raw ++ ; } kind = PyUnicode_FromString ( s_kind ) ; if (! kind ) { return NULL ; } # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { PyError_Fetch ( & type, & value, & tback ) ; errstr = PyObject_Str ( value ) ; if ( errstr ) { char * s = """" ; char buf [ 128 ] ; s = _PyUnicode_AsString ( errstr ) ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", s ) ; ast_error ( n, buf ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown",0
1445,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> } if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) { svc_log (",0
1446,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( & <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
1447,"<S2SV_ModStart> context ) ; if ( ( mask & KADM5_PRINCIPAL ) || ( mask & KADM5_LAST_PWD_CHANGE ) || ( mask & KADM5_MOD_TIME ) || ( mask & KADM5_MOD_NAME ) || ( mask & KADM5_AUX_ATTRIBUTES ) || ( mask & KADM5_KEY_DATA ) || ( mask & KADM5_LAST_SUCCESS ) || ( mask & KADM5_LAST_FAILED ) ) return KADM5_BAD_MASK ; if ( entry == ( kadm5_principal_ent_t ) NULL ) return EINVAL ; if ( mask & KADM5_TL_DATA ) { tl_data_orig = entry -> tl_data ; while ( tl_data_orig ) { if ( tl_data_orig -> tl_data_type < 256 ) return KADM5_BAD_TL_TYPE ; tl_data_orig = tl_data_orig -> tl_data_next ; } } ret = get_entry ( handle, entry -> principal, & kdb, & adb ) ; if ( ret )",0
1448,"<S2SV_ModStart> = desc -> log2_chroma_h ; if ( frame -> data [ plane ] ) { int64_t linesize = ff_image_get_linesize ( frame -> format, frame -> width, plane ) ; if ( linesize < 0 ) return linesize ; int64_t linesize = ff_image_get_linesize ( frame -> format, frame -> width, plane ) ; if ( linesize < 0 ) return linesize ; for ( i = 0 ; i < h ; i ++ ) { uint8_t * data = frame -> data [ plane ] ; int64_t linesize = ff_image_get_linesize ( frame -> format, frame -> width, plane ) ; if ( linesize < 0 ) return linesize ; int64_t linesize = ff_image_get_linesize ( frame -> format, frame -> width, plane ) ; if ( linesize < 0 ) return linesize ; for ( i = 0 ; i < linesize ; i ++ ) { uint8_t * data = frame -> data [ plane ] ; int64_t linesize = ff_image_get_linesize ( frame -> format, frame -> width",0
1449,"<S2SV_ModStart> ""\\n"" ) ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""Mbs <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. mb_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb",0
1450,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
1451,,1
1452,"<S2SV_ModStart> imp_dbh ) ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql )",0
1453,<S2SV_ModStart> if (! TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> slot_lock ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> slot_lock ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> slot_lock ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> slot_lock ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> slot_lock ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> slot_lock ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY (,0
1454,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; memset ( & phdr, 0, sizeof ( phdr ) ) ; <S2SV_ModStart> struct ieee_802_11_phdr phdr ; memset ( & phdr, 0, sizeof ( phdr ) ) ;",0
1455,<S2SV_ModStart> ; sh = s_malloc0 <S2SV_ModEnd> ( hdrlen +,0
1456,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; if (! context ) { NSC_DBGLOG ( ""nsc_encode_argb_to_aycocg: <S2SV_blank> missing <S2SV_blank> context\\n"" ) ; return - 1 ; } <S2SV_ModStart> -> ChromaSubsamplingLevel ; if (! context ) { NSC_DBGLOG ( ""nsc_encode_argb_to_aycocg: <S2SV_blank> missing <S2SV_blank> context\\n"" ) ; return - 1 ; } <S2SV_ModStart> -> ColorLossLevel ; if (! context ) { NSC_DBGLOG ( ""nsc_encode_argb_to_aycocg: <S2SV_blank> invalid <S2SV_blank> context\\n"" ) ; return - 1 ; } <S2SV_ModStart> -> ChromaSubsamplingLevel ; if (! context ) { NSC_DBGLOG ( ""nsc_encode_argb_to_aycocg: <S2SV_blank> missing <S2SV_blank> context\\n"" ) ; return - 1 ; }",0
1457,"<S2SV_ModStart> + 1 ; } offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL,",0
1458,"<S2SV_ModStart> nr_parens ) return ERR_PTR ( - EINVAL ) ; if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out",0
1459,<S2SV_ModStart> cpi ) { const VP9EncoderConfig <S2SV_ModEnd> * rc = <S2SV_ModStart> ) { target = ( cpi -> oxcf. starting_buffer_level > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) : <S2SV_ModEnd> ( int ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) : <S2SV_ModEnd> ( int ) <S2SV_ModStart> / 2 ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; } else if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key /,0
1460,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1461,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
1462,"<S2SV_ModStart> struct hello6 * hellop = ( const struct hello6 * ) ( op + OSPF6HDR_LEN ) ; if ( EXTRACT_32BITS ( & hellop -> hello_options )!= 0 ) { ND_PRINT ( ( ndo, ""\\n\\tOptions <S2SV_blank> [%s]"", bittok2str ( ospf6_option_values, ""none"", EXTRACT_32BITS ( & hellop -> hello_options ) ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Options <S2SV_blank> [%s]"", bittok2str ( ospf6_option_values, ""none"", EXTRACT_32BITS ( & hellop -> hello_options ) ) ) ; } if ( EXTRACT_32BITS ( & hellop -> hello_options )!= 0 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Hello <S2SV_blank> Timer <S2SV_blank> %us, <S2SV_blank> Dead <S2SV_blank> Timer <S2SV_blank> %us, <S2SV_blank> Priority <S2SV_blank> %u, <S2SV_blank> Interface-ID <S2SV_blank> %s, <S2SV_blank> Priority <S2SV_blank> %u"", EXTRACT_16BITS ( & hellop -> hello_ifid ), hellop -> hello_priority ) ) ;",0
1463,<S2SV_ModStart> datalen ) { if ( datalen < 1 ) return - EINVAL ; <S2SV_ModStart> return 1 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1464,"<S2SV_ModStart> rc ) { mutex_lock ( & rc -> uwbd. mutex ) ; <S2SV_ModStart> ""uwbd"" ) ; mutex_unlock ( & rc -> uwbd. mutex ) ; <S2SV_ModStart> NULL ) { mutex_unlock ( & rc -> uwbd. mutex ) ; <S2SV_ModStart> ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; return ; } <S2SV_ModStart> ( KERN_ERR ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; mutex_unlock ( & rc -> uwbd. mutex ) ;",0
1465,"<S2SV_ModStart> : # line 116 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). class_vector ) ) ; } # line 1046 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 116 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 116 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 116 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 116 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 116 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 116 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 116 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 116 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 116 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 116 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line",0
1466,<S2SV_ModStart> : idx ; if ( bitIdx >= 8 ) { int i ; for ( i = 0 ; i < 8 ; i ++ ) { char c = ( char ) ( col >> i ) ; pixelCount = ( short ) ( pixelCount + 1 - ( wholeBytes * 8 / gfx -> data. bpp ) ) ; pixelCount = ( short ) ( wholeBytes * 8 / gfx -> data. bpp ) ; if ( wholeBytes ) { char c = ( char ) ( col >> i ) ; pixelCount = ( short ) ( wholeBytes * 8 / gfx -> data. bpp ) ; while ( wholeBytes -- ) { char c = ( char ) ( col >> i ) ; pixelCount = ( short ) ( pixelCount + 1 - ( wholeBytes * 8 / gfx -> data. bpp ) ) ; pixelCount = ( short ) ( wholeBytes * 8 / gfx -> data. bpp ) ; if ( wholeBytes ) { char c = ( char ) ( col >> i ) ; pixelCount = ( short ) ( wholeBytes * 8 / gfx -> data. bpp ) ; while ( wholeBytes -- ) { char c = ( char ) ( col >> i ) ; pixelCount = ( short,0
1467,"<S2SV_ModStart> = args -> cpi <S2SV_ModEnd> ; MACROBLOCKD * <S2SV_ModStart> struct macroblock_plane * p <S2SV_ModEnd> = & cpi <S2SV_ModStart> uint8_t token_cache [ 64 * 64 <S2SV_ModEnd> ] ; MB_MODE_INFO <S2SV_ModStart> -> plane_type ; const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const int ref = is_inter_block ( mbmi ) ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const eob_branch ) [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const eob_prob ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const e",0
1468,"<S2SV_ModStart> ; SrcList * pSrc = pSelect -> pSrc ; if ( pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = & pSrc -> a [ i ] ; if ( pItem -> pTab == p -> pTab ) { renameTokenFind ( pWalker -> pParse, p, pItem -> zName ) ; } }",0
1469,<S2SV_ModStart> ( shmflg & SHM_RND <S2SV_ModEnd> ) addr &= <S2SV_ModStart> shm_perm ) ; if ( shp -> shm_file == NULL ) { err = - EIDRM ; goto out_unlock ; } <S2SV_ModStart> shm_perm ) ; if ( shp -> shm_file == NULL ) { ipc_unlock_object ( & shp -> shm_perm ) ; err = - EIDRM ; goto out_unlock ; } if ( shp -> shm_file == NULL ) { ipc_unlock_object ( & shp -> shm_perm ) ; if ( shp -> shm_file == NULL ) { err = - EIDRM ; goto out_unlock ; } <S2SV_ModStart> shm_perm ) ; if ( shp -> shm_file == NULL ) { ipc_unlock_object ( & shp -> shm_perm ) ; err = - EIDRM ; goto out_unlock ; } if ( shp -> shm_file == NULL ) { ipc_unlock_object ( & shp -> shm_perm ) ; if ( shp -> shm_perm == NULL ) { ipc_unlock_object ( & shp -> shm_perm ) ; goto,0
1470,"<S2SV_ModStart> ; serv = svc_create ( <S2SV_ModEnd> & nfs4_callback_program,",0
1471,"<S2SV_ModStart> PointZZ_p * point, const CurveZZ_p * curve ) { PointZZ_p R0, R1 ; mpz_set ( R0. x, R0. x ) ; mpz_set ( R0. y, R1. y ) ; pointZZ_pDouble ( & R1, & tmp, curve ) ; if ( mpz_tstbit ( scalar, i ) ) { mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y ) ; pointZZ_pDouble ( & R1, & tmp, curve ) ; } else { if ( mpz_tstbit ( scalar, i ) ) { mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y ) ; pointZZ_pDouble ( & R1, & tmp, curve ) ; } else { mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y ) ; pointZZ_pDouble ( & R1, & tmp, curve ) ; } }",0
1472,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1473,<S2SV_ModStart> case NPNVSupportsWindowless : <S2SV_ModEnd> type = RPC_TYPE_BOOLEAN,0
1474,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
1475,"<S2SV_ModStart> s ) { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1476,"<S2SV_ModStart> = NULL ; if ( xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ) ) ; break ; } else { char * path = xml_get_path ( xml ) ; free ( path )",0
1477,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> const SvcInternal * <S2SV_ModStart> return NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1478,"<S2SV_ModStart> mq_flush_lock, flags ) ; flush_rq -> tag = fq -> flush_pending_idx ; <S2SV_ModEnd> list_for_each_entry_safe ( rq <S2SV_ModStart> n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; WARN_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error ) ; list_for_each_entry_safe ( rq, n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; WARN_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error ) ; } if ( queued || fq -> flush_queue_delayed ) { WARN_ON ( q -> mq_ops ) ; blk_run_queue_async ( q ) ; }",0
1479,"<S2SV_ModStart> { int length ; if (! s_check ( s ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> stream <S2SV_blank> is <S2SV_blank> in <S2SV_blank> invalid <S2SV_blank> state"" ) ; return RD_FALSE ; } <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & length ) ; if (! s_check ( s ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> stream <S2SV_blank> is <S2SV_blank> in <S2SV_blank> invalid <S2SV_blank> state"" ) ; return RD_FALSE ; } <S2SV_ModStart> length ) ; if (! s_check ( s ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> stream <S2SV_blank> is <S2SV_blank> in <S2SV_blank> invalid <S2SV_blank> state"" ) ; return RD_FALSE ; } if (! s_check ( s ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> stream <S2SV_blank> is <S2SV_blank> in <S2SV_blank> invalid <S2SV_blank> state"" ) ; return RD_FALSE ; }",0
1480,"<S2SV_ModStart> ; } else if ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_index_exists ( params, hkey. num ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_STRING &&! zend_hash_exists ( params, hkey. str, hkey. len ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_index_exists ( params, hkey. num ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; }",0
1481,"<S2SV_ModStart> only_420 ) { _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; _y4m -> vpx_bps = 12 ; <S2SV_ModStart> = VPX_IMG_BPS_I420 ; if (! _y4m -> vpx_fmt ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> video <S2SV_blank> format; <S2SV_blank> assuming <S2SV_blank> progressive <S2SV_blank> scan.\\n"" ) ; return - 1 ; } <S2SV_ModStart> = VPX_IMG_FMT_I420 ; if (! _y4m -> vpx_bps ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> video <S2SV_blank> bps; <S2SV_blank> assuming <S2SV_blank> progressive <S2SV_blank> scan.\\n"" ) ; return - 1 ; } <S2SV_ModStart> = VPX_IMG_FMT_I420 ; if (! _y4m -> vpx_fmt ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> video <S2SV_blank> format; <S2SV_blank> assuming <S2SV_blank> progressive <S2SV_blank> scan.\\n"" ) ; return - 1 ; } <S2SV_ModStart> -> vpx_fmt = VPX_IMG_FMT_I4",0
1482,"<S2SV_ModStart> { struct obj * otmp ; if (! readobjnam ( buf, ( struct obj * ) 0 ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } otmp = readobjnam ( buf, ( struct obj * ) 0 ) ; if (! otmp ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } if (! readobjnam ( buf, ( struct obj * ) 0 ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
1483,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> 0 ) return FALSE ; if ( parse_exports_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table",0
1484,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct env * <S2SV_ModEnd> createenv ( const <S2SV_ModStart> root ) ; if ( rule -> options & KEEPENV ) { extern char * * environ ; size_t i ; env = malloc ( sizeof ( * env ) ) ; if (! env ) err ( 1, NULL ) ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1485,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ] ) ; vpx_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vpx_enable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vpx_compute_qdelta_by_rate ( & cpi -> rc, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vpx_set_segfeature ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; vpx_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; } vpx_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vpx_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q )",0
1486,"<S2SV_ModStart> ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 5 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"", stmt_type, ClassDef_fields, 5 ) ; if (! ClassDef_type ) return 0",0
1487,"<S2SV_ModStart> O_WRONLY | O_CREAT | O_TRUNC <S2SV_ModEnd>, S_IRUSR | <S2SV_ModStart> S_IROTH ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> return ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart> ""btsnoop\\0\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"", 16 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> } write ( TEMP_FAILURE_RETRY_RETRY_RETRY, TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY",0
1488,"<S2SV_ModStart> += 8 ; # ifndef NGIFLIB_INDEXED_ONLY if ( p -> mode & NGIFLIB_MODE_INDEXED ) { # endif * context -> frbuff_p. p8 = v ; # ifndef NGIFLIB_INDEXED_ONLY } else * context -> frbuff_p. p32 = GifIndexToTrueColor ( i -> palette, v ) ; # endif <S2SV_ModStart> += 4 ; # ifndef NGIFLIB_INDEXED_ONLY if ( p -> mode & NGIFLIB_MODE_INDEXED ) { # endif * context -> frbuff_p. p32 = GifIndexToTrueColor ( i -> palette, v ) ; # endif } # ifndef NGIFLIB_INDEXED_ONLY if ( p -> mode & NGIFLIB_MODE_INDEXED ) { # endif * context -> frbuff_p. p32 = GifIndexToTrueColor ( i -> palette, v ) ; # endif } # ifndef NGIFLIB_INDEXED_ONLY if ( p -> mode & NGIFLIB_MODE_INDEXED ) { # endif * context -> frbuff",0
1489,<S2SV_ModStart> 16 ) ; } if ( m == Y_PRED ) { ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; },0
1490,"<S2SV_ModStart> ) ; } if ( sr -> fid_ofile == NULL ) { smbsr_error ( sr, NT_STATUS_INVALID_HANDLE, ERRDOS, ERRbadfid ) ; return ( SDRC_ERROR ) ; } <S2SV_ModStart> mutex_enter ( & file -> f_mutex ) ; smb_flush_file <S2SV_ModEnd> ( sr,",0
1491,<S2SV_ModStart> 0 ] == '\\0' || <S2SV_ModEnd> stb. st_size <S2SV_ModStart> 1 ] == '\\0' || <S2SV_ModEnd> stb. st_size <S2SV_ModStart> 1 ] == '\\0' || <S2SV_ModEnd> stb. st_size <S2SV_ModStart> 1 ] == '\\0' || <S2SV_ModEnd> stb. st_size <S2SV_ModStart> 1 ] == '\\0' || <S2SV_ModEnd> stb. st_size <S2SV_ModStart> 1 ] == '\\0' || <S2SV_ModEnd> stb. st_size <S2SV_ModStart> 1 ] == '\\0' || <S2SV_ModEnd> stb. st_size <S2SV_ModStart> 1 ] == '\\0' || <S2SV_ModEnd> stb. st_size <S2SV_ModStart> 1 ] == '\\0' || <S2SV_ModEnd> stb. st_size <S2SV_ModStart> 1 ] == '\\0' || <S2SV_ModEnd> stb. st_size <S2SV_ModStart> 1 ] == '\\0' || <S2SV_ModEnd> stb. st_size <S2SV_ModStart> 1 ] == '\\0' || <S2SV_ModEnd> stb. st_size <S2SV_ModStart> 1 ] == '\\0' || <S2SV_ModEnd> stb. st_size <S2SV_ModStart> 1 ] == '\\0' || <S2SV_ModEnd> stb. st_size <S2SV_ModStart> 1 ] == '\\0' || <S2SV_ModEnd> stb. st_size <S2SV_ModStart> 1 ] == '\\0' || <S2SV_ModEnd> stb. st_size <S2SV_ModStart> 1 ] == '\\0' || <S2SV_ModEnd> stb. st_,0
1492,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, <S2SV_ModEnd> * t, <S2SV_ModStart> * t, <S2SV_ModEnd> * StartClean ; <S2SV_ModStart> ++ ; outpos = outputbuffer <S2SV_ModEnd> ; outpos += <S2SV_ModStart> += sprintf ( <S2SV_ModEnd> outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"" <S2SV_ModStart> = outputbuffer ; outpos += sprintf ( <S2SV_ModEnd> outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"" <S2SV_ModStart> = outputbuffer ; if ( * s == '0' && s [ 1 ] == ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; free ( argbuf ) ; } } StartClean = out",0
1493,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart> ; net_get_random_once ( & net -> ipv4. ip_id_hashrnd <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> sizeof ( net -> ipv4. ip_id_hashrnd <S2SV_ModEnd> ) ) ; <S2SV_ModStart>, id ; if ( iph -> protocol & IPPROTO_UDP ) hash = jhash_3 ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, net -> ipv4. ip_id_mix ( net ), ip_idents_hashrnd ) ; else hash = jhash_3words ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, net -> ipv4. ip_id_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs ) ; iph -> id = htons ( id ) ; }",0
1494,"<S2SV_ModStart> expr_ty step ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower ) ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id ( obj, & PyId_upper ) ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } if ( lookup_attr_id ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; }",0
1495,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
1496,<S2SV_ModStart> = gecos ; <S2SV_ModEnd> printf ( _,0
1497,<S2SV_ModStart> vns ) { struct ieee80211_radiotap_header * radiotap_header = ( struct ieee80211_radiotap_header * ) get_unaligned_le64 ( & radiotap_header -> it_version ) ; if ( max_length < get_unaligned_le16 ( & radiotap_header -> it_len ) ) return - EINVAL ; iterator -> _rtheader = radiotap_header ; iterator -> _max_length = get_unaligned_le16 ( & radiotap_header -> it_len ) ; iterator -> _arg_index = 0 ; iterator -> _bitmap_shifter = get_unaligned_le32 ( & radiotap_header -> it_present ) ; iterator -> _arg = ( uint8_t * ) radiotap_header + sizeof ( * radiotap_header ) ; iterator -> _arg += sizeof ( uint8_t ) ; if ( iterator -> _bitmap_shifter & ( 1 << IEEE80211_RADIOTAP_EXT ) ) { while ( get_unaligned_le32 ( iterator -> _,0
1498,"<S2SV_ModStart> int err ; list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } <S2SV_ModStart> return - ENOMEM ; } list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; if ( ( iter -> val & cmask ) == ( val & cmask ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } } cmask = iter -> mask & mask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && ( iter -> band!= knode -> res -> classid ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_",0
1499,"<S2SV_ModStart> } ZEND_FETCH_RESOURCE ( <S2SV_ModEnd> IM, gdImagePtr <S2SV_ModStart>, le_gd ) ; if ( ZEND_TEST_RESOURCE ( im, gdImagePtr, & IM, - 1, ""Image"", le_gd ) ) { zend_log ( ERROR, ( ERROR, ( ERROR, ( ERROR, ( ERROR, ( ERROR, ( ERROR, ( ERROR, ( ERROR, ( ERROR, ( ERROR, ( ERROR, ( ERROR, ( ERROR ) ) ) ) ) ) ) ; } if ( gdImageTrueColor ( im ) ) { int x, y, c ; for ( x = 0 ; x < gdImageSX ( im ) ; x ++ ) { c = gdImageGetPixel ( im, x, y ; gdImageSetPixel ( im, x, y, c ; gdImageSetPixel ( im, x, y, c ; gdImageSetPixel ( im, x, y, c ; gdImageSetPixel ( im, x, y, c ; gdImageSetPixel ( im, x, y, c ; gdImageSetPixel ( im, x, y, c ; for ( x = 0 ; x < gdImageSX ( im ) ; x ++",0
1500,<S2SV_ModStart>. cfg. <S2SV_ModEnd> g_pass = pass <S2SV_ModStart> ; if ( stream -> config. cfg. rc_twopass_stats_in == NULL ) { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } } else { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; } stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1501,"<S2SV_ModStart> G_KEY_FILE_KEEP_TRANSLATIONS, error ) ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) { g_error ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g_strerror ( g",0
1502,"<S2SV_ModStart> { VP9_COMMON * const cm <S2SV_ModEnd> = & pbi <S2SV_ModStart>, tile_col ; vpx_reader <S2SV_ModEnd> r ; assert <S2SV_ModStart> end = NULL ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> 6 ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> int last_tile = tile_row == tile_rows - 1 && tile_col == tile_cols - 1 ; const size_t size = get_tile ( data_end, last_tile, & cm -> error, & data ) ; for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) { for ( tile_col = 0 ; tile_col < tile_cols ; ++ tile_col ) { const int last_tile = tile_row == tile_rows - 1 && tile_col == tile_cols - 1 ; const size_t size = get_tile ( data_end, last_tile, & cm -> error, & data ) ; TileBuffer * const buf = & tile_buffers [ tile_row ] [ tile_col ] ; buf -> data = data ; buf -> size = size ; data += size ; } } for ( tile_row = 0 ; tile_col < tile",0
1503,"<S2SV_ModStart> vp9_decoder_create ( const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ( 32, sizeof ( * oxcf ) <S2SV_ModEnd> ) ; VP9_COMMON <S2SV_ModStart> cm = pbi? & pbi -> common : NULL ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 0 ; vp9_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vpx_initialize_dec ( ) ; vpx_rtcd ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; cm -> error. setjmp = 0 ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_init ( & pbi -> lf_worker ) ; return pbi ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1504,"<S2SV_ModStart> { GF_LOG ( GF_LOG_ERROR <S2SV_ModEnd>, GF_LOG_CONTAINER, <S2SV_ModStart> GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; s -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } if (! ( ( GF_DataInformationBox * ) s ) -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; s -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1505,<S2SV_ModStart> -> count ; kfree ( new_fpl ) ;,0
1506,"<S2SV_ModStart> { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> -> opt ; rcu_read_lock ( ) ; <S2SV_ModStart> ; if ( rcu_dereference_protected ( req_inet -> inet_opt, sock_owned_by_user ( req ) ) ) <S2SV_ModStart> ; if ( rcu_dereference_protected ( req_inet -> inet_opt, sock_owned_by_user ( req ) ) <S2SV_ModStart> ; if ( rcu_dereference_protected ( req_inet -> inet_opt, sock_owned_by_user ( req ) ) ) return ; if ( rcu_dereference_protected ( req_inet -> inet_opt, sock_owned_by_user ( req ) ) ) opt -> cipso = rcu_dereference_protected ( req_inet -> inet_opt, sock_owned_by_user ( req ) ) ; if ( rcu_dereference_protected ( req_inet -> inet_opt, sock_owned_by_user ( req ) ) return ; rcu_read_unlock ( ) ;",0
1507,"<S2SV_ModStart> void tree2tok ( vpx_token <S2SV_ModEnd> * tokens, <S2SV_ModStart> ) { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tokens [ - j ]. len = l ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1508,<S2SV_ModStart> ; if ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) && ( flags & VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref = 7 ; if ( flags & VP8_EFLAG_NO_UPD_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_UPD_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_UPD_ARF ) ref ^= VP9_ALT_,0
1509,"<S2SV_ModStart> wqh ) ; if ( isalarm ( ctx ) ) alarm_init ( & ctx -> t. alarm, ctx -> clockid == CLOCK_REALTIME_ALARM? ALARM_REALTIME : ALARM_BOOTTIME, timerfd_alarmproc ) ; else hrtimer_init ( & ctx -> t. tmr, clockid, HRTIMER_MODE_ABS ) ;",0
1510,"<S2SV_ModStart> ; struct hlist_node <S2SV_ModEnd> * n ; <S2SV_ModStart> int err ; hlist_for_each_entry_safe ( child, n, & tree_list, mnt_hash ) { struct mount * q ; hlist_del_init ( & child -> mnt_hash ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; commit_tree ( child, q ) ; } else { lock_mount_hash ( ) ; } if ( parent_path ) { detach_mnt ( source_mnt, parent_path ) ; attach_mnt ( source_mnt, dest_mnt, dest_mp ) ; touch_mnt_namespace ( source_mnt -> mnt_ns ) ; } else { mnt_set_mountpoint ( dest_mnt, dest_mp, source_mnt ) ; } hlist_for_each_entry_safe ( child, n, & tree_list, mnt_hash ) { struct mount * q ; hlist_del_init ( & child -> mnt_hash ) ; q = __lookup_mnt_last ( & child -> mnt_parent ->",0
1511,"<S2SV_ModStart>, & len ) ; if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; if ( newseq == NULL ) { ret = ENO",0
1512,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> },0
1513,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> occf ) { const int64_t av_per_frame_bandwidth = rc -> avg_frame_bandwidth * ( ( int64_t ) oxcf -> two_pass_vbrmax_section ) / 100 ; if ( av_per_frame_bandwidth < 0 ) max_bits = 0 ; else max_bits = ( ( int64_t ) rc -> avg_frame_bandwidth * ( ( int64_t ) oxcf -> two_pass_vbrmax_section ) / 100 ; if ( max_bits < 0 ) max_bits = 0 ; else if ( max_bits > rc -> max_frame_bandwidth ) max_bits = rc -> max_frame_bandwidth ;,0
1514,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
1515,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> Huff_transmit ( huff_t <S2SV_ModStart> { Huff_transmit ( <S2SV_ModEnd> huff, NYT <S2SV_ModStart>, fout ) ; return - 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1516,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCK * const x = & cpi -> mb ; MACROBLOCKD * const xd = & x -> e_mbd ; <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> ] ; PICK_MODE_CONTEXT * const ctx = get_block_context ( x, bsize ) ; unsigned int segment_id = cm -> mi_stride ; const int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; const int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; x -> skip_recode =! x -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 && cpi -> oxcf. aq_mode!= COMPLEXITY_A",0
1517,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> 8 ] ; <S2SV_ModEnd> crypto_skcipher * tfm_des <S2SV_ModStart> crypto_alloc_skcipher ( ""ecb(des)"" <S2SV_ModEnd>, 0, <S2SV_ModStart> crypto_alloc_skcipher ( ""des"", 0, CRYPTO_ALG_ASYNC ) ; if ( IS_ERR ( tfm_des ) ) { rc = PTR_ERR ( tfm_des ) ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } req = skcipher_request_alloc ( tfm_des, GFP_KERNEL ) ; if (! req ) { rc = - ENOMEM ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } crypto_skcipher_setkey ( tfm_des, key, 8 ) ; sg_init_one ( & sgin, in, 8 ) ; skcipher_request_set_crypt ( req, & sgin, & sgout, 8, NULL ) ; rc = crypto_skcipher",0
1518,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> 4 ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ psf -> headerindex ] = ( x >> 24 ) ; psf -> header [ psf -> headerindex ++ ] = ( x >> 16 ) ; psf -> header [ psf -> headerindex ++ ] = ( x >> 8 ) ; psf -> header [ psf -> headerindex ++ ] = ( x >> 16 ) ; psf -> header [ psf -> headerindex ++ ] = ( x >> 24 ) ; psf -> header [ psf -> header [ psf -> headerindex ++ ] = ( x >> 24 ) ; psf -> header [ psf -> headerindex ++ ] = ( x >> 16 ) ; psf -> header [ psf -> headerindex ++ ] = ( x >> 8 ) ; psf -> header [ psf -> headerindex ++ ] = ( x >> 16 ) ; psf -> header [ psf -> headerindex ++ ] = ( x >> 8 ) ; psf -> header [ psf -> headerindex ++ ] = ( x >> 24 ) ; psf -> header [ psf -> headerindex ++ ] = ( x >> 16 ) ; psf -> header [ psf -> headerindex ++ ] = ( x >> 24 ) ; psf -> header [ psf -> headerindex ++ ],0
1519,"<S2SV_ModStart> { uint32_t value ; int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable && get_bits_left ( gbc ) < 65 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModEnd> while ( 1 <S2SV_ModStart> 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( ctx -> trace_enable ) { bits [ i",0
1520,<S2SV_ModStart> delta ; else { if ( i > pos && i + insn -> off + 1 < pos ) { <S2SV_ModStart> += delta ; } else { if ( i > pos && i + insn -> off + 1 < pos ) { <S2SV_ModStart> += delta ; } else { if ( i > pos && i + insn -> off + 1 < pos ) { insn -> off -= delta ; } else { if ( i > pos && i + insn -> off + 1 < pos ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_CALL ) { if ( BPF_OP ( insn -> code ) == BPF_EXIT ) { break ; } } else { if ( i > pos && i + insn -> off + 1 < pos ) { insn -> off -= delta ; } else { if ( i > pos && i + insn -> off + 1 < pos ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF,0
1521,<S2SV_ModStart> ( exit_reason == EXIT_REASON_NMI_WINDOW <S2SV_ModEnd> ) { pr_info_ratelimited <S2SV_ModStart> ( exit_reason == EXIT_REASON_TASK_SWITCH <S2SV_ModEnd> ) { pr_info_ratelimited <S2SV_ModStart> ( exit_reason == EXIT_REASON_NMI_WINDOW <S2SV_ModEnd> ) { pr_info_ratelimited <S2SV_ModStart> ( exit_reason == EXIT_REASON_TASK_SWITCH <S2SV_ModEnd> ) { pr_info_ratelimited <S2SV_ModStart> ( exit_reason == EXIT_REASON_NMI_WINDOW <S2SV_ModEnd> ) { pr_info_ratelimited <S2SV_ModStart> ( exit_reason == EXIT_REASON_TASK_SWITCH <S2SV_ModEnd> ) { pr_info_ratelimited <S2SV_ModStart> ( exit_reason == EXIT_REASON_NMI_WINDOW <S2SV_ModEnd> ) { pr_info_ratelimited <S2SV_ModStart> ( exit_reason == EXIT_REASON_TASK_SWITCH <S2SV_ModEnd> ) { pr_info_ratelimited <S2SV_ModStart> ( exit_reason == EXIT_REASON_TASK_SWITCH <S2SV_ModEnd> ) { pr_info_ratelimited <S2SV_ModStart> ( exit_reason == EXIT_REASON_TASK_SWITCH <S2SV_ModEnd> ) { pr_info_ratelimited <S2SV_ModStart> ( exit_,0
1522,"<S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c )",0
1523,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> http_contentlen. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> accept_line. ptr = NULL, packet -> accept_line. len = 0, packet -> user_agent_line. ptr = NULL, packet -> user_agent_line. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> http_method. ptr = NULL, packet -> http_method. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> http_num_headers = 0 ; }",0
1524,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1525,"<S2SV_ModStart> ++ r ; if ( ( int ) floor ( pow ( ( float ) r, dim ) ) > entries ) r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; if ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; if ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) r = ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; if ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; if ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) r = ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; if ( ( int ) floor ( pow ( (",0
1526,"<S2SV_ModStart> { q = QueueAuthenticPixels ( image, Min ( 4, dds_info -> width - x ), Max ( 4, dds_info -> height - y ), exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBLong ( image ) ; bits = ReadBlobLSBLong ( image ) ; CalculateColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { for ( i = 0 ; i < 4 ; i ++ ) { if ( ( x + i ) < ( ssize_t ) dds_info -> width && ( y + j ) < ( ssize_t ) dds_info -> height ) { if ( ( x + i ) < ( ssize_t ) dds_info -> width ) { SetPixelRed ( q, ScaleCharToQuantum ( colors. r [ code ] ) ; SetPixelGreen ( q, ScaleCharToQuantum ( colors. g [ code ] ) ; SetPixelBlue ( q, ScaleCharToQuantum ( colors",0
1527,"<S2SV_ModStart> drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( unlikely ( opt -> optlen < 0 ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen < 0 ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( unlikely ( opt -> optlen < 0 ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; goto drop ; } if ( unlikely ( opt -> optlen < 0 ) { IP_INC_STATS_BH ( dev_net ( dev",0
1528,<S2SV_ModStart> length ) { int ret ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY (,0
1529,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
1530,<S2SV_ModStart> cfg ) { <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) == 0 && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK,0
1531,"<S2SV_ModStart> = DEF_MIN_FSYNC_BLOCKS ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; <S2SV_ModStart> = DEF_MIN_HOT_BLOCKS ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu",0
1532,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; printf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; send <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1533,"<S2SV_ModStart> ; WLog_VRB ( AUTODETECT_TAG <S2SV_ModEnd>, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" )",0
1534,<S2SV_ModStart> ; # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # else # endif <S2SV_ModStart> 16 ) ; # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # else # endif # endif # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENO,0
1535,"<S2SV_ModStart> ( pvc ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } <S2SV_ModEnd> dev = alloc_netdev <S2SV_ModStart> ether_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if ( type == ARPHRD_ETHER ) random_ether_addr ( dev -> dev_addr ) ; else { * ( __be16 * ) dev -> dev_addr = htons ( dlci ) ; dlci_to_q922 ( dev -> broadcast, dlci ) ; } dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ;",0
1536,"<S2SV_ModStart> * data ; struct stream packet ; <S2SV_ModStart> length ) ; packet = * s ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> data <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> data <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
1537,"<S2SV_ModStart> # if CONFIG_MULTITHREAD vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
1538,"<S2SV_ModStart> case FORM_INPUT_CHECKBOX : if ( form -> checked ) buf -> currentLine -> lineBuf [ spos ] = '*' ; else buf -> currentLine -> lineBuf [ spos ] ='<S2SV_blank>'; break ; case FORM_INPUT_PASSWORD : if ( form -> value ) buf -> currentLine -> lineBuf [ spos ] ='<S2SV_blank>'; else buf -> currentLine -> lineBuf [ spos ] ='<S2SV_blank>'; break ; case FORM_INPUT_TEXT : if ( form -> type == FORM_TEXTAREA ) { int n = a -> y - buf -> currentLine -> linenumber ; if ( n < 0 ) for ( ; l && n ; l = l -> prev, n ++ ) ; else if ( n < 0 ) for ( ; l && n ; l = l -> prev, n ++ ) ; else if ( n < 0 ) for ( ; l && n ; l = l -> prev, n ++ ) ; else if ( n < 0 ) for ( ; l && n ; l = l -> prev, n ++ ) ; else if ( n < 0 ) for ( ; l && n ; l = l -> prev, n ++ ) for ( ; l && n ; l = l ->",0
1539,<S2SV_ModStart> { if ( ( <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) > xFreeBytesRemaining ) { mtCOVERAGE_TEST_MARKER ( ) ; } <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) > xFreeBytesRemaining ) { mtCOVERAGE_TEST_MARKER ( ) ; } xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { mtCOVERAGE_TEST_MARKER ( ) ; } } if ( ( xWantedSize > 0 ) && ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) > xFreeBytesRemaining ) { mtCOVERAGE_TEST_MARKER ( ) ; } xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ),0
1540,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1541,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1542,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> ( cc % <S2SV_ModEnd> ( bps * <S2SV_ModStart> stride ) ) == 0 ) ; if ( tmp ) _TIFFmemcpy ( tmp, cp0, cc ) ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { # if WORDS_BIGENDIAN cp [ ( bps - byte - 1 ) * wc + count ] = tmp [ ( bps - byte - 1 ) * wc + count ] ; # endif } } if ( tmp ) _TIFFmemcpy ( tmp, cp0, cc ) ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { # if WORDS_BIGENDIAN cp [ byte * wc + count ] = tmp [ ( bps - byte - 1 ) * wc + count ] ; # else cp [ ( bps - byte - 1 ) * wc + count ] = tmp [ ( bps - byte - 1 ) * wc + count ] ; # endif",0
1543,"<S2SV_ModStart> STREAM s ) { if ( s. len < 2 ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", __func__ ) ; return ; } <S2SV_ModStart> ++ ) { if ( s. len < 4 ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", __func__ ) ; return ; } <S2SV_ModStart> ++ ) { if ( s. len < 4 ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", __func__ ) ; return ; } <S2SV_ModStart> ++ ) { if ( s. len < 4 ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", __func__ ) ; return ; } <S2SV_ModStart> ++ ) { if ( s. len < 4 ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", __func__ ) ; return",0
1544,"<S2SV_ModStart> } else { if ( smatch ( option, ""filename"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Filename <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""level"" ) ) { level = ( ssize ) getnum ( ovalue ) ; } else if ( smatch ( option, ""backup"" ) ) { flags |= MPR_LOG_BACKUP ; } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""path"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Path <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD",0
1545,"<S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> -> frame_coef_probs [ tx_size ] ; vpx_coeff_count * coef_counts = cpi -> coef_counts [ tx_size ] ; vpx_tree_probs_from_distribution ( vp9_coef_tree, coef_branch_ct [ i ] [ j ] [ k ] [ l ], coef_counts [ i ] [ j ] [ k ] [ l ] ) ; for ( m = 0 ; m < UNCONSTRAINED_NODES ; ++ m ) coef_probs [ i ] [ j ] [ k ] [ l ] = get_binary_prob ( coef_branch_ct [ i ] [ j ] [ k ] [ l ], coef_probs [ i ] [ j ] [ k ] [ m ] ) ; for ( m = 0 ; m < UNCONSTRAINED_NODES ; ++ m ) coef_probs [ i ] [ j ] [ k ] [ l ] = get_binary_prob ( coef_branch_ct [ i ] [ j ] [ k ] [ l ], coef_probs [ i ]",0
1546,"<S2SV_ModStart> { } ; struct termios old_tc ; <S2SV_ModStart> name ) ; old_tc = tc ; r = loop_write ( fd, ""\\033%G"", 3, false ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> UTF-8 <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( tcgetattr ( fd, & tc ) < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = tcsetattr ( fd, TCSANOW, & old_tc ) ; if ( r < 0 ) return log_warning_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank>",0
1547,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> d ) { struct dvb_usb_device * d = d -> dev ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> data [ 0 ] = 0xe ; d -> data [ 1 ] = 0x02 ; d -> data [ 2 ] = 1 ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> data [ 0 ] = 0xe ; d -> data [ 1 ] = 0x83 ; d -> data [ 2 ] = 1 ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> data [ 0 ] = 0xe ; d -> data [ 1 ] =",0
1548,"<S2SV_ModStart> * iface, <S2SV_ModEnd> vpx_codec_enc_cfg_t * cfg <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&",0
1549,"<S2SV_ModStart> int stride, vpx_bit_depth_t bit_depth, vpx_bit_depth_t bit_depth <S2SV_ModStart> const kernel = vpx_get_interp_kernel ( xd -> mi [ 0 ] -> mbmi. interp_filter ) <S2SV_ModEnd> ; enum mv_precision <S2SV_ModStart> = MV_PRECISION_Q3 ; vpx_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, bit_depth, which_mv, kernel, MV_PRECISION_Q4, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, MV_PRECISION_Q3",0
1550,"<S2SV_ModStart> TRUE ; if ( strlen ( origbuf ) < 4 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( buf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; }",0
1551,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> cJSON <S2SV_ModEnd> * cJSON_CreateFloatArray ( <S2SV_ModStart> ) ; for ( a = cJSON_CreateArray ( ) ; a && i < count ; ++ i ) { n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } a = cJSON_CreateArray ( ) ; for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! i ) a -> child = n ; else suffix_object ( p, n ) ; } <S2SV_ModEnd> return a ;",0
1552,"<S2SV_ModStart> tk_status ) ; if ( status == NLM_LCK_DENIED ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_rebind ; } if ( status == NLM_LCK_GRANTED <S2SV_ModEnd> ) printk (",0
1553,"<S2SV_ModStart>, n ) ; # if CONFIG_STB_HIGHBITDEPTH if ( f -> previous_window == NULL ) { f -> previous_window = NULL ; return 0 ; } # endif <S2SV_ModStart>, n ) ; # if CONFIG_STB_HIGHBITDEPTH if ( f -> previous_window == NULL ) { f -> previous_window = get_window ( f, n ) ; if ( f -> channel_buffers [ i ] [ left + j ] == NULL ) { f -> channel_buffers [ i ] [ left + j ] = 0 ; } # else if ( f -> channel_buffers [ i ] [ left + j ] == NULL ) { f -> previous_window [ i ] [ j ] = 0 ; } # if CONFIG_STB_HIGHBITDEPTH if ( f -> previous_window == NULL ) { f -> previous_window = get_window ( f, n ) ; if ( f -> channel_buffers [ i ] [ left + j ] == NULL ) { f -> previous_window [ i ] [ j ] = 0 ; } # else if ( f -> channel_buffers [ i ] [ left + j ] == NULL ) { f -> previous_window [ i ] [ j",0
1554,<S2SV_ModStart> 4 ) ; if ( idx + 4 + len > buf_size ) { return NULL ; } <S2SV_ModStart> len ) ; if ( idx + 4 + len > buf_size ) { return NULL ; } <S2SV_ModStart> len ) ; if ( idx + 4 + len > buf_size ) { return NULL ; } <S2SV_ModStart> len ) ; if ( idx + 4 + len > buf_size ) { return NULL ; },0
1555,"<S2SV_ModStart> data_end ) { <S2SV_ModEnd> const uint8_t * <S2SV_ModStart> int aligned_mi_cols = mi_cols_aligned_to_sb ( cm -> mi_cols ) ; const int tile_rows = mi_rows_aligned_to_sb ( cm -> log2_tile_rows ) ; const int num_workers = MIN ( pbi -> oxcf. max_threads, tile_cols ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int final_worker = - 1 ; if ( pbi -> num_tile_workers == 0 ) { CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_threads * sizeof ( * pbi -> tile_workers ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; if (! vp9_worker_init ( worker ) ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Tile <S2SV_blank>",0
1556,"<S2SV_ModStart> ; offset = base <S2SV_ModEnd> + get4 ( <S2SV_ModStart> ; switch ( len ) { case 0x505244 : break ; case 0x524946 : break ; case 0x524946 : break ; case 0x524946 : break ; case 0x524946 : if (! strncasecmp ( model, ""DSLR-A100"", 9 ) ) { fseek ( ifp, 8, SEEK_CUR ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 3 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 4 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 5 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 3 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 4 ] = get",0
1557,"<S2SV_ModStart> -> common ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const double base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; int i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i )",0
1558,"<S2SV_ModStart> int bychunk ; if ( bitspersample > 8 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( bitspersample == 8 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( bitspersample == 8 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!=8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( bitspersample == 8 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( bitspersample == 8 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank>",0
1559,<S2SV_ModStart> error_code ) { if ( error -> has_detail ) ctx -> base. err_detail = error -> detail ; else ctx -> base. err_detail = NULL ; return error -> error_code ; },0
1560,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1561,"<S2SV_ModStart>, 4, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 4, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 4, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 4, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart> ""dotquery.bson"", 4, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 4, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 4, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart> ""dotquery.bson"", 4, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$",0
1562,"<S2SV_ModStart> * ps_cur_slice ; pocstruct_t * ps_prev_poc, * ps_cur_poc ; if (! ps_dec ) return ; ps_prev_poc = ps_dec -> ps_prev_poc ; ps_cur_poc = ps_dec -> ps_cur_poc ;",0
1563,<S2SV_ModStart> goto out_unlock ; if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_,0
1564,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( btpan_cb. congest_packet ) ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; GKI_freebuf ( buffer ) ; btsock_thread_add_fd ( pan_pth, fd, 0, SOCK_THREAD_FD_RD ) ; return ; } <S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( btpan_cb. congest_packet ) ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; GKI_freebuf ( buffer ) ; btsock_thread_add_fd ( pan_pth, fd, 0, SOCK_THREAD_FD_RD ) ; return ; }",0
1565,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> getnum ( const <S2SV_ModStart> = 0 ; if (! isdigit ( * ( * fmt ) ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * ( * fmt ) ) ;,0
1566,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = * psurvival ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g ->",0
1567,"<S2SV_ModStart> = 0 ; else { ret = <S2SV_ModEnd> - EIO ; <S2SV_ModStart> - EIO ; } <S2SV_ModEnd> deb_info ( ""Identify <S2SV_blank> state <S2SV_blank> cold <S2SV_blank> = <S2SV_blank> %d\\n""",0
1568,"<S2SV_ModStart> ; ( void ) phase <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } memset ( buffer, 0, sizeof buffer ) ; s_read ( c, c -> local_rfd. fd, buffer, sizeof buffer ) ; if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok ) ; return NULL ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof",0
1569,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> struct sockaddr_in addr <S2SV_ModEnd> ; int rc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct mainloop_fd_callbacks cib_fd_callbacks <S2SV_ModStart> = NULL ; <S2SV_ModEnd> connection -> socket <S2SV_ModStart> NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1",0
1570,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ; cpi -> gf_bitrate_adjustment = 0 ; cpi -> frames_till_gf_update_due = 0 ; cpi -> non_gf_bitrate_adjustment = 0 ; cpi -> prob_last_coded = 128 ; cpi -> prob_gf_coded = 63 ; cpi -> prob_intra_coded = 63 ; cpi -> recent_ref_frame_usage [ LAST_FRAME ] = 1 ; cpi -> recent_ref_frame_usage [ GOLDEN_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ GOLDEN_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ LAST_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ GOLDEN_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ GOLDEN_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ GOLDEN_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ G",0
1571,"<S2SV_ModStart> & __FAIL_ADDR_MASK ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS <S2SV_ModEnd>, 1, <S2SV_ModStart> ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MIN <S2SV_ModEnd>, 1, <S2SV_ModStart> ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_OVERFLOW <S2SV_ModEnd>, 1, <S2SV_ModStart> ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_OVERFLOW <S2SV_ModEnd>, 1, <S2SV_ModStart> ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_OVERFLOW <S2SV_ModEnd>, 1, <S2SV_ModStart> ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_OVERFLOW <S2SV_ModEnd>, 1, <S2SV_ModStart> ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_OVERFLOW <S2SV_ModEnd>, 1, <S2SV_ModStart> ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_OVERFLOW <S2SV_ModEnd>, 1,",0
1572,"<S2SV_ModStart> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag=%d"", bp [ 24 ] & 0x08 ) ) ; } if ( ndo -> ndo_vflag )",0
1573,<S2SV_ModStart> case EXPR_NOT : if ( expr -> boolean. set == NULL ) { * set_rtrn =! * set_rtrn ; return false ; } <S2SV_ModStart> case EXPR_UNARY_PLUS : if ( expr -> boolean. set == NULL ) { * set_rtrn =! * set_rtrn ; return false ; } <S2SV_ModStart> case EXPR_UNARY_PLUS : if ( expr -> boolean. set == NULL ) { * set_rtrn =! * set_rtrn ; return false ; } <S2SV_ModStart> case EXPR_ADD : case EXPR_SUBTRACT : if ( expr -> boolean. set == NULL ) { * set_rtrn =! * set_rtrn ; return false ; } <S2SV_ModStart> case EXPR_UNARY_PLUS : if ( expr -> boolean. set == NULL ) { * set_rtrn =! * set_rtrn ; return false ; } <S2SV_ModStart> case EXPR_UNARY_PLUS : if ( expr -> boolean. set == NULL ) { * set_rtrn =! * set_rtrn ; return false ; },0
1574,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1575,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> ; } if ( copy_from_user ( & karg, uarg, sizeof ( struct mpt_ioctl_command ) ) ) { printk ( KERN_ERR MYNAM ""%s@%d::mpt_command <S2SV_blank> - <S2SV_blank> "" ""Unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> in <S2SV_blank> mpt_ioctl_command <S2SV_blank> struct <S2SV_blank> @ <S2SV_blank> %p\\n"", __FILE__, __LINE__, uarg ) ; return - EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
1576,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; register MagickBooleanType <S2SV_ModStart>, length, <S2SV_ModEnd> padding, value <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } image = DestroyImageList ( image ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } width = 0 ; height = 0 ; while ( ReadBlobString ( image, buffer )!= ( char * ) NULL ) if ( sscanf ( buffer, ""#define <S2SV_blank> %32s <S2SV_blank> %u"", name, & width ) == 2 ) if ( ( strlen ( name ) >= 6 ) && ( LocaleCompare ( name + strlen ( name ) - 6, ""_width"" ) == 0 ) ) break ; while ( ReadBlobString ( image, buffer )!= ( char * ) NULL ) if ( ( strlen ( name ) >= 7 ) && ( LocaleCompare ( name + strlen ( name ) - 7, ""_height"" ) == 0 ) ) break ; while ( ReadBlobString (",0
1577,"<S2SV_ModStart> 1 ) { if ( jas_stream_getrwcount ( enc -> out ) < mainhdrlen ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> mainhdr\\n"" ) ; return - 1 ; } <S2SV_ModStart> 1 ) { if ( jas_stream_getrwcount ( enc -> out ) < mainhdrlen ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> mainhdr\\n"" ) ; return - 1 ; } <S2SV_ModStart> 1 ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> mainhdr\\n"" ) ; return - 1 ; } <S2SV_ModStart> 1 ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> mainhdr\\n"" ) ; return - 1 ; } <S2SV_ModStart> 1 ) { if ( jas_stream_getrwcount ( enc -> out ) < mainhdrlen ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> mainhdr\\n"" ) ; return - 1 ; } <S2SV_ModStart> 1 ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> mainhdr\\n"" ) ; return - 1 ; } <S2SV_ModStart> 1 ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> mainhdr\\n"" ) ; return - 1 ;",0
1578,"<S2SV_ModStart>, NULL, WEECHAT_STRING_SPLIT_STRIP_LEFT | WEECHAT_STRING_SPLIT_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS, 0 ) ; if (! str_modes ) str_modes = strdup ( ""+"" ) ; if (! str_modes ) str_modes = strdup ( ""+"" ) ; if (! str_modes ) str_modes = strdup ( ""+"" ) ; if (! str_modes ) str_modes = strdup ( ""+"" ) ; if (! str_modes ) str_modes = strdup ( ""+"" ) ; if (! str_modes ) str_modes = strdup ( ""+"" ) ; if (! str_modes ) str_modes = strdup ( ""+"" ) ; if (! str_modes ) str_modes = strdup ( ""+"" ) ; if (! str_modes ) str_modes = strdup ( ""+"" ) ; if (! str_modes ) str_modes = strdup ( ""+"" ) ; if (! str_modes ) str_modes = strdup ( ""+"" ) ; if (! str_modes ) str_modes = strdup ( ""+""",0
1579,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_bit_t <S2SV_ModEnd> decode_uniform ( vpx_reader <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> int v = vpx_read_bit <S2SV_ModEnd> ( r )",0
1580,"<S2SV_ModStart> * cert ; int <S2SV_ModEnd> is_valid ; if <S2SV_ModStart> error ; is_valid = error!= GIT_ECERTIFICATE ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) { if (! giterr_last ( ) ) giterr_set ( GITERR_NET, ""user <S2SV_blank> cancelled <S2SV_blank> certificate <S2SV_blank> check"" ) ; return error ; } error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) { if (! giterr_last ( ) ) giterr_set ( GITERR_NET, ""user <S2SV_blank> cancelled <S2SV_blank> certificate <S2SV_blank> check"" ) ; return error ; } error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) { if (! giterr_last ( ) ) giterr_set ( GITERR_NET,",0
1581,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1582,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> ctx ] ) <S2SV_ModEnd> ; if (",0
1583,"<S2SV_ModStart>! stream ) <S2SV_ModEnd> fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" <S2SV_ModStart> ; res = vpx_codec_enc_config_default <S2SV_ModEnd> ( global -> <S2SV_ModStart> ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; stream -> ebml. last_pts_ms = - 1 ; stream -> ebml. debug = global -> debug ; if ( global -> deadline == VPX_DL_REALTIME ) stream -> config. cfg. g_lag_in_frames = 0 ; if ( global -> deadline == VPX_DL_REALTIME ) stream -> config. cfg. g_lag_in_frames = 0 ; if ( global -> deadline == VPX_DL_REALTIME ) stream -> config. cfg",0
1584,"<S2SV_ModStart> nd_opt_mtu * opm = ( const struct nd_opt_mtu * ) cp ; if ( op -> nd_opt_len < 4 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_len ) ) ; goto trunc ; } if ( op -> nd_opt_len < 4 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_len ) ) ; goto trunc ; } if ( op -> nd_opt_len < 4 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_len ) ) ; goto trunc ; }",0
1585,"<S2SV_ModStart> = 0 ; if ( yr_re_ast_get_root ( * re_ast ) == NULL ) { yr_error ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( ) ) ) ), ""re_ast"" ) ), ""re_ast"" ) ) ) ; return ERROR_SUCCESS ; } if ( yr_re_ast_get_root ( * re_ast ) == NULL ) ) { yr_error ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( ) ) ), ""re_ast"" ) ), ""re_ast"" ) ) ; return ERROR_SUCCESS ; } if ( yr_re_ast_get_root ( * re_ast ) == NULL ) { yr_error (",0
1586,"<S2SV_ModStart> DICT_PATH_SHARED ) ; if ( iter -> var_expand_table == NULL ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } <S2SV_ModStart> 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( ret < 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank>",0
1587,<S2SV_ModStart> ; if ( <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len < <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> A ] ; if ( nla -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len <S2SV_ModEnd> ) return 0,0
1588,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; return ( DestroyImageList ( image ) ) ; }",0
1589,"<S2SV_ModStart> ( ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost/mobile\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</forwarded>"" ""</message>""",0
1590,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1591,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> altwarning <S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> alterror <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1592,<S2SV_ModStart> } if ( av1 -> emul_esd ) { gf_odf_desc_del ( av1 -> emul_esd ) ; av1 -> emul_esd = ( GF_Descriptor * ) av1 -> emul_esd = ( GF_Descriptor * ) av1 -> emul_esd = ( GF_Descriptor * ) av1 -> emul_esd = ( GF_Descriptor * ) av1 -> emul_esd = ( GF_Descriptor * ) av1 -> emul_esd ; if ( av1 -> emul_esd ) gf_odf_desc_del ( av1 -> emul_esd ) ; av1 -> emul_esd = ( GF_Descriptor * ) av1 -> emul_esd = ( GF_Descriptor * ) av1 -> emul_esd = ( GF_Descriptor * ) av1 -> emul_esd = ( GF_Descriptor * ) av1 -> emul_esd ) ; if ( av1 -> emul_esd ) gf_odf_desc_del ( av1 -> emul_esd,0
1593,"<S2SV_ModStart> { GF_LOG ( GF_LOG_ERROR <S2SV_ModEnd>, GF_LOG_CONTAINER, <S2SV_ModStart> GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; s -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } if (! ( ( GF_DataInformationBox * ) s ) -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; s -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1594,"<S2SV_ModStart> ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; if ( r < 0 ) { SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; } <S2SV_ModStart> ] = '\\0' ; if ( r < 0 ) { SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> serial_number <S2SV_blank> failed"" ) ; } <S2SV_ModStart> = '\\0' ; if ( r < 0 ) { SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> serial_number <S2SV_blank> failed"" ) ; } <S2SV_ModStart> = '\\0' ; if ( r < 0 ) { SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> serial_number <S2SV_blank> failed"" ) ; } <S2SV_ModStart> ; if ( r < 0 ) { SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> serial_number <S2SV_blank> failed"" ) ; }",0
1595,"<S2SV_ModStart> maxFrameNum ) ; <S2SV_ModEnd> dpb -> maxLongTermFrameIdx <S2SV_ModStart> NO_LONG_TERM_FRAME_INDICES ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; if ( noReordering ) dpb -> dpbSize = dpb -> maxRefFrames ; else dpb -> dpbSize = dpbSize ;",0
1596,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> ; if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_in = OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; } if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( oe_syscall_getpeername_ocall ( & ret, sock -> host_fd, ( struct oe_sockaddr * ) addr, addrlen_in, addrlen_out )!= OE_OK ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_out > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_",0
1597,,1
1598,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> TPDU <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; }",0
1599,"<S2SV_ModStart> ( sk ) ; struct ipv6_txoptions * opt = NULL ; <S2SV_ModStart> final_p ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; }",0
1600,"<S2SV_ModStart>, at ; uint32_t <S2SV_ModEnd> valign, hdr_size <S2SV_ModStart> size_t fsize ; uint32_t <S2SV_ModEnd> valign, hdr_size <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; struct cli_exe_section <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; struct cli_pe_hook_data <S2SV_ModStart> pe_json ) { cli_err ( ""cli_scanpe: <S2SV_blank> pe_json <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> pe <S2SV_blank> hook\\n"" ) ; return CL_ENULLARG ; } if (! exe_sections ) { cli_err ( ""cli_scanpe: <S2SV_blank> pe_sections <S2SV_blank> is <S2SV_blank> not <S2SV_blank> valid\\n"" ) ; return CL_ENULLARG ; } # if HAVE__INTERNAL__SHA_COLLECT int sha_collect = ctx -> sha_collect ; # endif const char * archtype = NULL ; int viruses_found = 0 ; # if HAVE_JSON int toval = 0 ; if ( cli_json_timeout_cycle_check ( ctx, & toval )!= 0 ) { cli_err ( ""cli_scanpe: <S2SV_blank> pe_sections <S2SV_blank> is <S2SV_blank> not <S2SV_blank> valid\\n"" ) ; return CL_EN",0
1601,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> address ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg (",0
1602,"<S2SV_ModStart> = 0 ; # ifdef CCITT_SUPPORT if ( t2p -> pdf_compression == T2P_COMPRESS_G4 ) { buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ; if ( buffer == NULL ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> t2p_readwrite_pdf_image, <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> "" ""t2p_readwrite_pdf_image"" ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( buffer == ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> t2p_readwrite_pdf_image, <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> "" ""t2p_readwrite_pdf_image"" ) ; t2p -> t2p_error = T2P_ERR_ERROR ;",0
1603,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1604,"<S2SV_ModStart> { rc = cib_tls_signon <S2SV_ModEnd> ( cib, <S2SV_ModStart> } if ( rc == pcmk_ok ) { rc = cib_tls_signon <S2SV_ModEnd> ( cib, <S2SV_ModStart> } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; crm_send_remote_msg ( hello, F_CIB_CLIENTNAME, name ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0,",0
1605,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
1606,"<S2SV_ModStart> ref_mv_full } ; vpx_variance_fn_ptr_t v_fn_ptr ; vpx_int64 <S2SV_ModEnd> new_mv_mode_penalty = 256 <S2SV_ModStart> bsize ] ; vpx_int64 <S2SV_ModEnd> new_mv_mode_penalty = 256 <S2SV_ModStart> bsize ) ; vpx_int64 <S2SV_ModEnd> new_mv_mode_penalty = 256 <S2SV_ModStart>, & num00, & v_fn_ptr, x -> nmvjointcost, x -> mvcost, ref_mv ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err <",0
1607,"<S2SV_ModStart> ntreg_header ) ; if ( h -> size == 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; }",0
1608,"<S2SV_ModStart> ; # ifdef DEBUG_CONF ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", parent, child, merged ) ; ap_log_perror ( APLOG_MARK, APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> result <S2SV_blank> %pp"", child, merged ) ; # ifdef DEBUG_CONF ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> result <S2SV_blank> %pp"", parent, child, merged ) ; ap_log_perror ( APLOG_MARK, APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp"", child, merged ) ; # endif",0
1609,"<S2SV_ModStart> ; if ( msg_sys -> msg_name ) memcpy ( & address, msg_sys -> msg_name, sizeof ( address ) ) ; else memcpy ( & address, msg_sys -> msg_name, sizeof ( address ) ) ;",0
1610,"<S2SV_ModStart>, one ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageData",0
1611,"<S2SV_ModStart> 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> cipher ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> key, comp -> key_len ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> iv, comp -> iv_len ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> cipher, sizeof ( comp -> cipher ) ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> key, comp -> key_len ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> iv, comp -> iv_len ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> cipher, sizeof ( comp -> cipher ) ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> key, comp -> key_len ) )!= 0 || ( r",0
1612,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1613,"<S2SV_ModStart> user_data ) { if ( client == NULL ) { return ; } <S2SV_ModStart> num_clients ) ; <S2SV_ModEnd> free ( client <S2SV_ModStart> user ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
1614,"<S2SV_ModStart> * uv ; luaL_checkstack ( g, 1, ""in <S2SV_blank> function <S2SV_blank> remarkupvals"" ) ; <S2SV_ModStart> uv ) { luaL_checkstack ( g, 1, ""in <S2SV_blank> function <S2SV_blank> remarkupvals"" ) ; <S2SV_ModStart> uv ) { luaL_checkstack ( g, 1, ""in <S2SV_blank> function <S2SV_blank> remarkupvals"" ) ; <S2SV_ModStart> uv ) { luaL_checkstack ( g, 1, ""in <S2SV_blank> function <S2SV_blank> remarkupvals"" ) ; } else { luaL_checkstack ( g, 1, ""in <S2SV_blank> function <S2SV_blank> remarkupvals"" ) ; } <S2SV_ModEnd> } } <S2SV_null>",0
