,raw_predictions,correctly_predicted
0,"<S2SV_ModStart> ; if ( n2size < 0 ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed(%d): <S2SV_blank> %s"", err. line, err. text ) ; goto out ; } <S2SV_ModStart> ; if ( n2size < 0 ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed(%d): <S2SV_blank> %s"", err. line, err. text ) ; goto out ; } <S2SV_ModStart> ; if ( n2size < 1 ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed(%d): <S2SV_blank> %s"", err. line, err. text ) ; goto out ; } if ( n2size < 0 ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed(%d): <S2SV_blank> %s"", err. line, err. text ) ; goto out ; } if ( n2size < 0 ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed(%d): <S2SV_blank> %s"", err. line, err. text ) ; goto out ; } if ( n2size < 0 ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed(%d): <S2SV_blank> %s"", err. line",0
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %u <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 2 ) ) ) ; break ; } <S2SV_ModStart> <= 2 ) { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 2 ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ; break ; } <S2SV_ModStart> <= 2 ) { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t",0
2,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
3,"<S2SV_ModStart> ; if ( copy_from_user ( & ym, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_mcs ) ) ) { kfree ( ym ) ; return - EFAULT ; } add_mcs ( ym -> bits, ym -> bitrate, 0 ) ; if ( ym -> bitrate > YAM_MAXBITRATE ) { kfree ( ym ) ; return - EINVAL ; } if ( ( ym = kmalloc ( sizeof ( struct yamdrv_ioctl_mcs ), GFP_KERNEL ) ) == NULL ) { kfree ( ym ) ; return - ENOBUFS ; } if ( copy_from_user ( & ym, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_mcs ) ) ) { kfree ( ym ) ; return - EFAULT ; } if ( ( ym = kmalloc ( sizeof ( struct yamdrv_ioctl_mcs ), GFP_KERNEL ) ) == NULL ) { kfree ( ym ) ; return - ENOBUFS ; } kfree (",0
4,"<S2SV_ModStart> ; if ( unlikely ( skb_is_gso ( skb ) ) ) { skb_gso_set ( skb, SKB_GSO_DODGY | SKB_GSO_UDP_TUNNEL | SKB_GSO_GRE | SKB_GSO_IPIP | SKB_GSO_SIT | SKB_GSO_MPLS ) ; goto out ; } <S2SV_ModStart> ( skb ) ; if ( unlikely ( skb_shinfo ( skb ) -> gso_type & SKB_GSO_DODGY ) ) { skb_gso_set ( skb, SKB_GSO_DODGY | SKB_GSO_UDP_TUNNEL | SKB_GSO_GRE | SKB_GSO_IPIP | SKB_GSO_SIT | SKB_GSO_MPLS ) ; goto out ; } <S2SV_ModStart> ( skb ) ; if ( unlikely ( skb_shinfo ( skb ) -> gso_type & SKB_GSO_DODGY ) ) { int type = skb_shinfo",0
5,"<S2SV_ModStart> { int64_t time, offset ; if ( version == 1 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else if ( version == 2 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; }",0
6,"<S2SV_ModStart> * tpg ; <S2SV_ModEnd> int ret ; <S2SV_ModStart> EINVAL ) ; tpg = kzalloc ( sizeof ( struct vhost_scsi_tpg ), GFP_KERNEL ) ; if (! tpg ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> struct <S2SV_blank> vhost_scsi_tpg"" ) ; return ERR_PTR ( - ENOMEM ) ; } if (! tpg ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> struct <S2SV_blank> vhost_scsi_tpg"" ) ; return ERR_PTR ( - ENOMEM ) ; } ret = core_tpg_register ( & vhost_scsi_fabric_configfs -> tf_ops, wwn, & tpg -> se_tpg, tpg, TRANSPORT_TPG_TYPE_NORMAL ) ; if ( ret < 0 ) { kfree ( tpg ) ; return NULL ; } mutex_lock ( & vhost_scsi_mutex ) ; list_add_tail ( & tpg -> tv_tpg_list, & vhost_scsi_list ) ; mutex_unlock ( & vhost_scsi_mutex ) ; <S2SV_ModEnd> return NULL ;",0
7,"<S2SV_ModStart> ) ) { GF_Box * stco = gf_list_get ( writers, 0 ) ; GF_Box * stsc = ( GF_Box * ) gf_list_get ( writers, 1 ) ; gf_isom_box_del ( stco ) ; gf_isom_box_del ( stsc",0
8,"<S2SV_ModStart> vapic ) { <S2SV_ModEnd> u32 data ; <S2SV_ModStart> ) ) return ; if (! test_bit ( KVM_APIC_PV_EOI_PENDING, & vcpu -> arch. apic_attention ) ) apic_sync_pv_eoi_from_guest ( vcpu, vcpu -> arch. apic ) ) return ; if (! test_bit ( KVM_APIC_CHECK_VAPIC, & vcpu -> arch. apic_attention ) ) return ; if (! test_bit ( KVM_APIC_CHECK_VAPIC, & vcpu -> arch. apic_attention ) ) return ; if (! test_bit ( KVM_APIC_CHECK_VAPIC, & vcpu -> arch. apic_attention ) ) return ; data = * ( u32 * ) ( vapic + offset_in_page ( vcpu -> arch. apic -> vapic_addr ) ) ; kunmap_atomic ( vapic ) ; apic_set_tpr ( vcpu -> arch. apic, data & 0xff ) ;",0
9,<S2SV_ModStart> src ) ; flush_spe_to_thread ( src ) ; flush_fp_to_thread ( src ) ; flush_altivec_to_thread ( src ) ; flush_vsx_to_thread ( src ) ; flush_spe_to_thread ( src ) ;,0
10,<S2SV_ModStart> item ) { <S2SV_ModEnd> return array -> <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
11,"<S2SV_ModStart>!= ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( sb_block < 0 || sb_block >= EXT3_SB_BLOCKS ( sb ) ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> block <S2SV_blank> number: <S2SV_blank> %d"", sb_block ) ; return 1 ; } if ( sb_block >= EXT3_SB_BLOCKS ( sb ) ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank>",0
12,"<S2SV_ModStart> goto out ; if ( skb_is_gso ( skb, features | NETIF_F_GSO_ROBUST ) ) { int type = skb_shinfo ( skb ) -> gso_type ; if ( unlikely ( type & SKB_GSO_DODGY ) ||! ( type & SKB_GSO_DODGY ) ) ) goto out ; skb_shinfo ( skb ) -> gso_segs = 1 ; } else if ( skb_is_gso ( skb, features | NETIF_F_GSO_ROBUST ) ) { int type = skb_shinfo ( skb ) -> gso_type ; if (! ( type & SKB_GSO_DODGY ) ||! ( type & SKB_GSO_DODGY ) ) goto out ; skb_shinfo ( skb ) -> gso_segs = 0 ; }",0
13,"<S2SV_ModStart> u32 event_id, <S2SV_ModEnd> u64 nr, <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",0
14,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { struct grub_ext4_extent_header * leaf ; char * buf = grub_malloc ( EXT2_BLOCK_SIZE ( data ) ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModStart> leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; } if ( -- i >= 0 ) { fileblock -= grub_le_to_cpu32 ( ext [ i ]. block ) ; if ( fileblock >= grub_le_to_cpu16 ( ext [ i ]. len ) ) return 0 ; if ( fileblock >= grub_le_to_cpu16 ( ext [ i ].",0
15,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> ; int temp1, temp2 ; tran_high_t temp3 ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 13 ] ; input [ 2 ] = in [ 2 ] + in [ 12 ] ; input [ 3 ] = in [ 3 ] + in [ 11 ] ; input [ 4 ] = in [ 4 ] + in [ 13 ] ; input [ 5 ] = in [ 5 ] + in [ 10 ] ; input [ 6 ] = in [ 7 ] - in [ 8 ] ; s0 = input [ 0 ] + input [ 7 ] ; s1 = input [ 1 ] + input [ 6 ] ; s2 = input [ 2 ] + input [ 4 ] ; s3 = input [ 3 ] + input",0
16,<S2SV_ModStart> skip_full_check : mutex_unlock ( & bpf_verifier_lock ) ; <S2SV_ModStart> err_free_env ; } mutex_unlock ( & bpf_verifier_lock ) ; <S2SV_ModStart> skip_full_check : mutex_unlock ( & bpf_verifier_lock ) ; <S2SV_ModStart> err_unlock : mutex_unlock ( & bpf_verifier_lock ) ; <S2SV_ModStart> skip_full_check : mutex_unlock ( & bpf_verifier_lock ) ; if ( env -> prog -> aux -> offload ) { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret < 0 ) goto err_unlock ; } if ( env -> prog -> aux -> offload ) { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret < 0 ) goto err_unlock ; } if ( env -> prog -> aux -> offload ) { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret < 0 ) goto err_unlock ; } ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret < 0 ) goto err_unlock ;,0
17,<S2SV_ModStart> ; int i ; wpc -> stream_version = ( config -> flags & CONFIG_COMPATIBLE_WRITE )? CUR_STREAM_VERS : MAX_STREAM_VERS ; if ( config -> qmode & QMODE_DSD_AUDIO ) { # ifdef ENABLE_DSD wpc -> dsd_multiplier = 1 ; flags = DSD_FLAG ; for ( i = 14 ; i >= 0 ; i -- ) if ( config -> sample_rate % sample_rates [ i ] == 0 ) { int divisor = config -> sample_rate / sample_rates [ i ] ; if ( divisor & ( divisor - 1 ) ) == 0 ) { int divisor = config -> sample_rate / sample_rates [ i ] ; if ( divisor & ( divisor - 1 ) ) == 0 ) { int divisor = config -> sample_rate / sample_rates [ i ] ; if ( divisor & ( divisor - 1 ) ) == 0 ) { int divisor = config -> sample_rate / sample_rates [ i ] ; if ( divisor & ( divisor - 1 ) ) == 0 ) { int divisor = config -> sample_rate / divisor ; if ( divisor & ( divisor - 1 ) ) ==,0
18,"<S2SV_ModStart> = 0 ; if (! scsi_block_when_processing_errors ( SDev ) ) { err = - ENODEV ; goto out ; } <S2SV_ModEnd> retry : if <S2SV_ModStart> cgc -> sense, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { switch ( sshdr. sense_key ) { case UNIT_ATTENTION : SDev -> changed = 1 ; if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""disc <S2SV_blank> change <S2SV_blank> detected.\\n"" ) ; if ( retries ++ < 10 ) goto retry ; err = - ENOMEDIUM ; break ; case NOT_READY : if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready <S2SV_blank> yet.\\n"" ) ; if ( retries ++ < 10 ) goto retry ; if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready <S2SV_blank> yet.\\n"" ) ; if ( retries ++ < 10 ) goto",0
19,"<S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ; # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ;",0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> partial_frame ) { VP9_COMMON * const cm = & cpi -> common ; struct loopfilter * const lf = cm -> lf ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; const int max_filter_level = clamp ( cm -> lf -> filter_level, min_filter_level, max_filter_level ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; const int filt_direction = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ;",0
21,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
22,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, mv_class == MV_CLASS_0? mvcomp -> class0_fp : mvcomp -> fp ) ; vpx_write_token ( w, vp9_mv_class_tree, mvcomp -> classes, & mv_class_encodings [ d ] ) ; vpx_write_token ( w, vp9_mv_class0_tree, mvcomp -> class0, & mv_class0_encodings [ fr ] ) ; vpx_write ( w, mv_class == MV_CLASS_0? mvcomp -> class0_fp : mvcomp -> fp ) ; vpx_write_token ( w, vp9_mv_class0_tree, mvcomp -> class0, & mv_class0_encodings [ fr ] ) ; vpx_write_token ( w, vp9_mv_fp_tree, mvcomp -> class0_fp [ fr ] <S2SV_ModEnd> ) ; if",0
23,<S2SV_ModStart> base ) ; if ( <S2SV_ModEnd> alg -> cra_rng <S2SV_ModStart> rng_make_random ) return <S2SV_ModEnd> rng -> seedsize,0
24,"<S2SV_ModStart> ; if (! sp -> sa_protocol ||! sp -> sa_addr. pptp. sin_addr. s_addr ) return - EINVAL ; if ( lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. sin_addr. s_addr ) ) return - EINVAL ; if ( lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. sin_addr. s_addr ) ) return - EINVAL ; if ( lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. sin_addr. s_addr ) ) return - EALREADY ; if ( lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id",0
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; },0
26,"<S2SV_ModStart> ; char * cmdname <S2SV_ModEnd> ; int verbose <S2SV_ModStart> ; while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_VERBOSE : verbose = 1 ; break ; case OPT_INFILE : infile = jas_optarg ; break ; case OPT_HELP : default : usage ( ) ; break ; } } if ( infile ) { if (! ( instream = jas_stream_fopen ( infile, ""rb"" ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> input <S2SV_blank> image <S2SV_blank> file <S2SV_blank> %s\\n"", infile ) ; exit ( EXIT_FAILURE ) ; } } else { if (! ( instream = jas_stream_fdopen ( 0, ""rb"" ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> standard <S2SV_blank> input <S2SV_blank> file <S2SV_blank> %s\\n"", infile ) ; exit ( EXIT_FAILURE ) ; } } if ( ( fmtid = jas_image_getfmt ( instream ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if (! ( image = jas_image",0
27,"<S2SV_ModStart> esr ) { <S2SV_ModEnd> pr_crit ( ""Bad <S2SV_blank> mode <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> handler <S2SV_blank> detected, <S2SV_blank> code <S2SV_blank> 0x%08x\\n"" <S2SV_ModStart> esr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
28,"<S2SV_ModStart> ) dat ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_32BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_32BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_32BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_32BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_32BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_PRINT ( ( ndo, ""%s"", tok2str ( l2tp_cc_direction2str, ptr, ""Direction-#%u"", * ( ( const u_char * ) ptr ++ ) ) ) ) ; ND_TCHECK_32BITS ( ptr ) ; ptr ++ ; ND_PRINT ( ( ndo, ""%s"", tok2str ( l2tp_cc_direction2str, ptr, ""Direction-#%u"", * ( ( const u_char * ) ptr ++ ) ) ) ; if ( length < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> """,0
29,<S2SV_ModStart> intf ) { struct usb_host_interface * intf_intf = to_usb_interface ( intf ) ; struct usb_host_interface * intf_intf = to_usb_interface ( intf ) ; struct usb_host_interface * intf_intf = to_usb_interface ( intf ) ; <S2SV_ModStart> intf ) ; if ( intf_intf -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) return - ENODEV ; if ( intf_intf -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) return - ENODEV ; alt = intf_intf -> altsetting [ 0 ]. desc. bNumEndpoints ; if ( intf_intf -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) return - ENODEV ; if ( intf_intf -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) return - ENODEV ; if ( intf_intf -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) return - ENODEV ; if ( intf_intf -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) return - ENODEV ; if ( intf_intf [ 0 ]. desc. b,0
30,"<S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart> < S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart> < S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart> < S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart>, unsigned char * from, int fromlen, unsigned char * to ) { struct pathComponent * pc = ( struct pathComponent * ) from ; int elen = 0 ; for ( elen = 0 ; elen < fromlen ; elen += sizeof ( struct pathComponent ) + pc -> lengthComponentIdent ; elen ++ ) { pc = ( struct pathComponent * ) from + elen ; switch ( pc -> componentType ) { case 2 : p = to ; * p ++ = '/' ; break ; case 3 : p += udf_get_filename ( sb, pc -> componentIdent, p, pc -> lengthComponentIdent ) ; * p ++ = '/' ; break ; case 4 : p += udf_get_filename ( sb, pc -> componentIdent, p, pc -> lengthComponentIdent ) ; * p",0
31,"<S2SV_ModStart> loaderr ; } else if ( atoi ( argv [ 1 ] ) == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( atoi ( argv [ 1 ] ) == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( atoi ( argv [ 1 ] ) == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( atoi ( argv [ 1 ] ) == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( atoi ( argv [ 1 ] ) == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( atoi ( argv [ 1 ] ) == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; }",0
32,<S2SV_ModStart> connection_id ) ; <S2SV_ModEnd> spin_lock_irqsave ( &,0
33,"<S2SV_ModStart> get_version_reply ) ; if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; retval = - ENODEV ; goto exit ; } if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; retval = - ENODEV ; goto exit ; } if ( usb_endpoint_dir_in ( endpoint ) ) dev -> interrupt_in_endpoint = NULL ; dev -> interrupt_in_endpoint = NULL ; dev -> interrupt_in_endpoint = NULL ; dev -> interrupt_in_running = 0 ; dev -> interrupt_in_done = 0 ; dev -> interrupt_out_endpoint = NULL ; dev -> interrupt_out_urb = NULL ; dev -> interrupt_out_busy = 0 ; if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; retval = - ENODEV ; goto exit ; } if ( usb_endpoint_dir_in ( endpoint ) ) dev -> interrupt_in_endpoint",0
34,"<S2SV_ModStart> ; if ( bin -> shstrtab && shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( bin -> shstrtab && shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( bin -> shstrtab && shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( bin -> shstrtab && shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( bin -> shstrtab && shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( """,0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> authkey ; if ( dest_keyring ) { key_get ( dest_keyring ) ; } else { switch ( cred -> jit_keyring ) { case KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : if ( cred -> request_key_auth ) dest_keyring = key_get ( cred -> request_key_auth ) ; if ( dest_keyring ) dest_keyring = key_get ( cred -> request_key_auth ) ; if ( dest_keyring ) dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) dest_keyring = key_get ( cred -> process_keyring ) ; if ( dest_keyring ) dest_keyring = key_get ( cred -> process_keyring ) ; if ( dest_keyring ) dest_keyring = key_get ( cred -> process_keyring ) ; if ( dest_keyring ) dest_keyring = key_,0
36,"<S2SV_ModStart> ; sc = NULL ; if ( sc == NULL ) { ret = create_spnego_ctx ( ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; ret = get_der_mechs ( minor_status, spcred, GSS_C_INITIATE, & sc -> mech_set ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; sc -> internal_mech = & sc -> mech_set -> elements [ 0 ] ; if ( put_der_mech_set ( sc -> mech_set, & sc -> DER_mechTypes ) < 0 ) { ret = GSS_S_FAILURE ; goto cleanup ; } sc -> ctx_handle = GSS_C_NO_CONTEXT ; * ctx = ( gss_ctx_id_t ) sc ; sc = NULL ; * tokflag = INIT_TOKEN_SEND ; ret = GSS_S_CONTINUE_NEEDED ;",0
37,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> addr_len < sizeof <S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> ) ) return - EINVAL ; ret = - EADDRINUSE ; read_lock_bh ( & l2tp_ip_lock ) ; if ( inet -> inet_state!= TCP_CLOSE || sk -> sk_state!= TCP_CLOSE || addr_len < sizeof ( struct sockaddr_l2tpip ) ) goto out ; chk_addr_ret = inet_addr_type ( net, addr -> l2tp_addr. s_addr ) ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_LOCAL && chk_addr_ret!= RTN_MULTICAST && chk_addr_ret!= RTN_BROADCAST && chk_addr_ret!= RTN_BROADCAST ) goto out ; if ( addr -> l2tp_addr. s_addr ) inet -> inet_rcv_saddr = inet -> inet_saddr = addr -> l2tp_addr. s_addr ; if ( chk_addr_ret == RT",0
38,<S2SV_ModStart> <S2SV_null> static inline <S2SV_ModEnd> unsigned int stack_maxrandom_size <S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> < S2SV_null> static int <S2SV_ModEnd> max = ( <S2SV_ModStart> ) & STACK_RND_MASK <S2SV_ModEnd> ) << PAGE_SHIFT <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> stack_maxrandom_size ( void,0
39,"<S2SV_ModStart> ), _ ( ""Launch <S2SV_blank> anyway"" ), RESPONSE_RUN ) ; if ( nautilus_file_can_set_permissions ( file ) ) { gtk_dialog_add_button ( GTK_DIALOG ( dialog ), _ ( ""Mark <S2SV_blank> as <S2SV_blank> _Trusted"" ), RESPONSE_MARK_TRUSTED ) ; } else { gtk_dialog_add_button ( GTK_DIALOG ( dialog ), _ ( ""_Cancel"" ), GTK_RESPONSE_CANCEL ) ; } if ( nautilus_file_is_trusted_link ( file ) ) { gtk_dialog_add_button ( GTK_DIALOG ( dialog ), _ ( ""_Cancel"" ), GTK_RESPONSE_CANCEL ) ; } else { gtk_dialog_add_button ( GTK_DIALOG ( dialog ), _ ( ""_Cancel"" ), GTK_RESPONSE_CANCEL ) ; }",0
40,<S2SV_ModStart> ; tm = <S2SV_ModEnd> localtime ( & <S2SV_ModStart> t ) ; str = g_strdup ( asctime ( tm ) ) ; if (! str ) str = g_malloc ( strlen ( str ) ) ; if (! str ) str = g_malloc ( strlen ( str ) ) ; if (! str ) str = g_malloc ( strlen ( str ) ) ; if (! str ) str = g_malloc ( strlen ( str ) ) ; if ( len > 0 ) str [ len - 1 ] = '\\0' ; if (! str ) str = g_strdup ( asctime ( tm ) ) ; if (! str ) str = g_malloc ( strlen ( str ) ) ; if (! str ) str = g_malloc ( strlen ( str ) ) str = g_malloc ( strlen ( str ) ) ; if (! str ) str = g_malloc ( strlen ( str ) ) ; if ( len > 0 ) str [ len - 1 ] = '\\0' ; if ( len > 0 ) str [ len - 1 ] = '\\0' ;,0
41,"<S2SV_ModStart> length ) ; memcpy <S2SV_ModEnd> ( hashed, <S2SV_ModStart> password ) ) ; md5_destroy ( & md5_secret ) ; MD5Init ( & md5_secret ) ; MD5Update ( & my_md5, vector, AUTH_VECTOR_LEN ) ; md5Final ( misc, & my_md5 ) ; xor ( hashed, misc, AUTH_PASS_LEN ) ; for ( i = 1 ; i < ( length >> 4 ) ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5, vector, AUTH_VECTOR_LEN ) ; md5Final ( misc, & my_md5 ) ; xor ( hashed, misc, AUTH_PASS_LEN ) ; md5_destroy ( & md5_secret ) ; md5Final ( misc, & my_md5 ) ; xor ( hashed, misc, AUTH_PASS_LEN ) ; for ( i = 1 ; i < ( length >> 4 ) ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5, vector, AUTH_VECTOR_LEN ) ; md5Final ( misc, & my_",0
42,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> m88rs2000_frontend_attach ( struct <S2SV_ModStart> int m88rs2000_frontend_attach ( struct dvb_usb_adapter * adap ) { struct dvb_usb_device * dev = adap -> dev ; struct dvb_usb_device_priv * priv = d -> priv ; struct dvb_usb_device_info * info = & adap -> info ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 1, ibuf, 1, 0 ) < 0 ) { err ( ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> fe_adap [ 0 ]. fe = dvb_attach ( m88rs2000_attach, & s421_m88rs2000_config, & d -> dev -> i2c_adap ) ; if ( d -> fe_adap [ 0 ]. fe == NULL ) return - EIO ; if ( dvb_attach ( ts2020_attach, d -> fe_adap [ 0 ]. fe, & dw2104_ts2020_config, & d",0
43,"<S2SV_ModStart> ; struct sock * net = sock_net ( asoc -> base. sk ) <S2SV_ModEnd> ; bh_lock_sock ( <S2SV_ModStart>. sk ) ; if ( sock_owned_by_user ( asoc -> base. sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> hb_timer, jiffies + ( HZ / 20 ) ) ) sctp_transport_hold ( transport ) ; goto out_unlock ; } if (! sock_owned_by_user ( asoc -> base. sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> hb_timer, jiffies + ( HZ / 20 ) ) ) sctp_transport_hold ( transport ) ; goto out_unlock ; } if ( transport -> dead ) goto out_unlock ; error = sctp_do_sm ( net, SCTP_EVENT_T_HEARTBEAT, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_HE",0
44,"<S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s",0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""(cc%stride)!=0"", ""(cc%stride)!=0"" ) ; return 0 ;",0
46,<S2SV_ModStart> tsample_t s ; if ( scanlinesizein > TIFF <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
47,"<S2SV_ModStart> ) ; struct <S2SV_ModEnd> address_space * mapping <S2SV_ModStart> hugetlb_lock ) ; __dec_zone_state ( h -> zone, NR_FILE_PAGES ) ; if ( page_count ( page ) ) { __dec_zone_state ( h -> zone, NR_FILE_PAGES ) ; __dec_zone_state ( h -> zone, NR_FILE_PAGES - 1 ) ; __dec_zone_state ( h -> zone, NR_FILE_PAGES - 1 ) ; __dec_zone_state ( h -> zone, NR_FILE_PAGES - 1 ) ; } else { __dec_zone_state ( h -> zone, NR_FILE_PAGES - 1 ) ; __dec_zone_state ( h -> zone, NR_FILE_PAGES - 1 ) ; __dec_zone_state ( h -> zone, NR_FILE_PAGES - 1 ) ; __dec_zone_state ( h -> zone, NR_FILE_PAGES - 1 ) ; __dec_zone_state ( h -> zone, NR_FILE_PAGES - 1 ) ; }",0
48,"<S2SV_ModStart> ; if ( length < 0 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length\\n"" ) ; return AVERROR ( EIO ) ; } if ( avio_tell ( pb ) - startpos < length ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length\\n"" ) ; return AVERROR ( EIO ) ; } if ( length < 0 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length\\n"" ) ; return AVERROR ( EIO ) ; } if ( length < 0 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( length < 0 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( length < 0 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length",0
49,"<S2SV_ModStart> ; if (! e ) { r = ENOMEM ; goto fail ; } r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) goto not_found ; r = sd_bus_open_system ( & bus ) ; if ( r < 0 ) goto fail ; r = sd_bus_call_method ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_bus_message_read ( reply, ""u"", & mapped ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_",0
50,"<S2SV_ModStart> void generic_pipe_buf_get ( struct pipe_inode_info * pipe, struct pipe_buffer * buf, int page <S2SV_ModStart> ) { get_page ( page ) ; } <S2SV_null> <S2SV_null>",0
51,"<S2SV_ModStart> case IV2_T_ENCR : idstr = STR_OR_ID ( t_id, encr_t_map ) ; map = NULL ; nmap = sizeof ( encr_t_map ) / sizeof ( encr_t_map ) ; break ; case IV2_T_INTEG : idstr = STR_OR_ID ( t_id, integ_p_map ) ; map = NULL ; nmap = sizeof ( encr_t_map ) / sizeof ( encr_t_map ) ; break ; case IV2_T_DH : idstr = STR_OR_ID ( t_id, dh_p_map ) ; break ; case IV2_T_ESN : idstr = STR_OR_ID ( t_id, esn_p_map ) ; break ; case IV2_T_DH : idstr = STR_OR_ID ( t_id, dh_p_map ) ; break ; case IV2_T_ESN : idstr = STR_OR_ID ( t_id, esn_p_map ) ; break ; default : ND_PRINT ( ( ndo,",0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart> = 0 ; if ( select ( reader -> bytes_available_fd + 1, & read_fds, NULL, NULL, & timeout ) < 0 ) { FD_SET ( reader -> bytes_available_fd, & read_fds ) ; FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return false ; } if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ; } if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ; }",0
54,"<S2SV_ModStart> wp -> config -> max_requests ; if ( 0 > wp -> config -> pm_max_requests ) { zlog ( ZLOG_ERROR, ""[pool <S2SV_blank> %s] <S2SV_blank> child <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> initialize"", wp -> config -> name ) ; exit ( FPM_EXIT_SOFTWARE ) ; }",0
55,"<S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { TWO_PASS <S2SV_ModEnd> * twopass = <S2SV_ModStart> ; if ( frame_interval < MIN_GF_INTERVAL <S2SV_ModEnd> && loop_decay_rate >= <S2SV_ModStart> 0.9 ) { TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> twopass -> stats_in ; FIRSTPASS_STATS tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion <S2SV_ModEnd> < 0.999 ) <S2SV_ModStart> break ; } reset_fpf_position <S2SV_ModEnd> ( twopass, <S2SV_ModStart> } return trans_to_still <S2SV_ModEnd> ; } <S2SV_null>",0
56,"<S2SV_ModStart> 0 ; } handle -> h_transaction = NULL ; err = jbd2_journal_stop ( handle ) ; if ( handle -> h_err ) return handle -> h_err ; sb = handle -> h_transaction -> t_journal -> j_private ; err = handle -> h_err ; rc = jbd2_journal_stop ( handle ) ; if (! err ) err = handle -> h_err ; if (! rc ) err = rc ; if (! err ) err = rc ; if (! err ) err = handle -> h_err ; rc = jbd2_journal_stop ( handle ) ; if (! err ) err = handle -> h_err ; rc = jbd2_journal_stop ( handle ) ; if (! err ) err = rc ; if (! err ) err = rc ; if (! err ) err = handle -> h_err ; rc = jbd2_journal_stop ( handle ) ; if (! err ) err = rc ; if (! err ) err = rc ; if (! err ) err = rc ; if (! err ) __ext4_std_error ( sb, where, line, err ) ; return",0
57,"<S2SV_ModStart> return ret ; ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; ret = ext4_convert_written_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; ret = ext4_convert_written_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KER",0
58,"<S2SV_ModStart> args ) ; memset ( name_loc, 0, args -> namelen ) ; memset ( name_rmt, 0, args -> valuelen ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp ) ) ; xfs_trans",0
59,"<S2SV_ModStart> ) { request_module <S2SV_ModEnd> ( ""%s"", <S2SV_ModStart> ) ) request_module <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) request_module <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ( ""%s-all"", name ) ; } if ( alg ) return crypto_is_larval ( alg )? crypto_larval_wait ( alg ) : alg ; if (! crypto_is_larval ( alg ) ) return ERR_PTR ( - EINVAL ) ; if ( alg ) return crypto_alg_lookup ( name, type, mask ) ; if ( alg ) return crypto_is_larval ( alg )? crypto_larval_wait ( alg ) : alg ; if ( crypto_is_larval ( alg ) return crypto_is_larval ( alg )? crypto_larval_wait ( alg ) : alg ; if (! crypto_is_larval ( alg ) ) return ERR_PTR ( - EINVAL ) ; if ( crypto_is_larval ( alg ) ) return crypto_is_larval ( alg )? crypto_larval_wait ( alg ) : alg ; return crypto_larval_add ( name, type",0
60,"<S2SV_ModStart> 2 ) { switch ( stlv_type ) { case ISIS_SUBTLV_SPB_INSTANCE : ND_TCHECK2 ( * tptr, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
61,"<S2SV_ModStart> { return reply_msg <S2SV_ModEnd> ( c, <S2SV_ModStart> MSG_JOB_TOO_BIG ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; }",0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ; <S2SV_ModStart> = dgnc_NumBoards ; if ( dgnc_Board [ brd ] -> state == BOARD_FAILED ) di. info_nports = 0 ; else di. info_nports = dgnc_Board [ brd ] -> nasync ; if ( dgnc_Board [ brd ] -> state!= BOARD_FAILED ) di. info_nports = dgnc_Board [ brd ] -> nasync ; if ( dgnc_Board [ brd ] -> state!= BOARD_FAILED ) di. info_nports = 0 ; if ( dgnc_Board [ brd ] -> state!= BOARD_FAILED ) di. info_nports = dgnc_Board [ brd ] -> nasync ; if ( dgnc_Board [ brd ] -> state!= BOARD_FAILED ) di. info_nports = dgnc_Board [ brd ] -> nasync ; if ( dgnc_Board [ brd ] -> state!= BOARD_FAILED ) di. info_nports = dgnc_",0
63,"<S2SV_ModStart> ; if ( opt_len < 12 || opt_len > 20 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return 0 ; } if ( mpc -> flags & MP_CAPABLE_C ) ND_PRINT ( ( ndo, "" <S2SV_blank> csum"" ) ) ; if ( mpc -> flags & MP_CAPABLE_D ) ND_PRINT ( ( ndo, "" <S2SV_blank> {0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; if ( opt_len == 12 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ;",0
64,"<S2SV_ModStart> -> ipc_socket ; int procfd <S2SV_ModEnd> = payload -> <S2SV_ModStart> ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } if (! ( options -> namespaces & CLONE_NEWNS ) && ( options -> attach_flags & LXC_ATTACH_REMOUNT_PROC_SYS ) ) { shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } if (! ( options -> namespaces & CLONE_NEWNS ) && ( options -> attach_flags & LXC_ATTACH_REMOUNT_PROC_SYS ) ) { ret = lxc_attach_remount_sys_proc ( ) ; if ( ret < 0 ) { SYSERROR ( ""could <S2SV_blank> not <S2SV_blank> ensure <S2SV_blank> correct <S2SV_blank> architecture"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } if ( options -> attach_flags & LXC_ATTACH_SET_PERSONALITY ) { ret =",0
65,"<S2SV_ModStart> = GIT_PKT_NG ; if (! ( ptr = strchr ( line,'<S2SV_blank>') ) ) goto out_err ; <S2SV_ModStart> = '\\0' ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> ref [ len ] = '\\0' ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' ; if (! ( ptr = strchr ( line",0
66,<S2SV_ModStart> = ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitCount |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitCount |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample = ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OP,0
67,"<S2SV_ModStart> NULL ; } <S2SV_ModEnd> SAS_DPRINTK ( ""DONE <S2SV_blank> DISCOVERY <S2SV_blank> on <S2SV_blank> port <S2SV_blank> %d, <S2SV_blank> pid:%d, <S2SV_blank> result:%d\\n""",0
68,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> - ENOBUFS ; } if ( copy_from_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ; if ( copy_to_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ; if ( copy_to_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ; if ( copy_from_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ; if ( copy_to_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, & size ) ) return - EFAULT ; if ( copy_to_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, & size ) ) return - EFAULT ; if ( copy_from_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ;",0
71,"<S2SV_ModStart> arg ) { if ( cmd == SCSI_IOCTL_GET_IDLQUEUE ) return scsi_ioctl_get_idlqueue ( bd -> bd_disk -> queue, bd -> bd_disk, mode, cmd, arg ) ; if ( cmd == SCSI_IOCTL_GET_IDLQUEUE ) return scsi_ioctl_get_idlqueue ( bd -> bd_disk -> queue, bd -> bd_disk, mode, cmd, arg ) ; if ( cmd == SCSI_IOCTL_GET_IDLQUEUE ) return scsi_ioctl_get_idlqueue ( bd -> bd_disk -> queue, bd -> bd_disk, mode, cmd, arg ) ; if ( cmd == SCSI_IOCTL_GET_IDLQUEUE ) return scsi_ioctl_get_idlqueue ( bd -> bd_disk -> queue, bd -> bd_disk, mode, cmd, arg ) ; if ( cmd == SCSI_IOCTL_GET_IDLQUEUE ) return scsi_cmd_get_idlqueue ( bd -> bd_disk -> queue, bd -> bd_disk, mode, cmd",0
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> state = NEGO_STATE_FINAL ; return TRUE ;,0
73,"<S2SV_ModStart> qeth_snmp_ureq * ureq ; size_t <S2SV_ModEnd> req_len ; struct <S2SV_ModStart> ) ) { kfree ( ureq ) ; <S2SV_ModStart> - EFAULT ; } ureq = memdup_user ( udata, req_len + sizeof ( struct qeth_snmp_ureq_hdr ) ) ; if ( IS_ERR ( ureq ) ) { QETH_CARD_TEXT ( card, 2, ""snmpnome"" ) ; return PTR_ERR ( ureq ) ; } qinfo. udata = kzalloc ( qinfo. udata_len, GFP_KERNEL ) ; if (! qinfo. udata ) { kfree ( ureq ) ; return - ENOMEM ; } qinfo. udata_offset = sizeof ( struct qeth_snmp_ureq_hdr ) ; iob = qeth_get_adapter_cmd ( card, IPA_SETADP_SET_SNMP_CONTROL, QETH_SNMP_SETADP_CMDLENGTH + req_len ) ; cmd = ( struct qeth_ipa_cmd * ) ( iob -> data + IPA_PDU_HEADER_",0
74,<S2SV_ModStart> c ) { jas_matind_t <S2SV_ModEnd> m ; for,0
75,"<S2SV_ModStart> num_video ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num_video ) ; return AVERROR_PATCHWELCOME ; } for ( j = 0 ; j < c ; j ++ ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; for ( j = 0 ; j < c ; j ++ ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; for ( j = 0 ; j < c ; j ++ ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; for ( j = 0 ; j < c ; j ++ ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; for ( j = 0 ; j < c ; j ++ ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; for ( j = 0 ; j < c ; j ++ ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ;",0
76,"<S2SV_ModStart> = NULL ; if (! mxf_find_component ( mxf, component ) ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! mxf_find_component ( mxf, component ) ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! mxf_find_component ( mxf, component ) ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! mxf_find_component ( mxf, component ) ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! mxf_find_component ( mxf, component ) ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> component <S2SV_blank> found\\n"" )",0
77,"<S2SV_ModStart> 1 ; } ret = mount_entry_on_generic ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> short"" ) ; return - 1 ; } ret = snprintf ( path, sizeof ( path ), ""%s/%s"", rootfs, mntent -> mnt_dir ) ; if ( ret >= sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> long"" ) ; return - 1 ; } ret = snprintf ( path, sizeof ( path ), ""%s/%s"", rootfs, mntent -> mnt_dir ) ; if ( ret >= sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> long"" ) ; return - 1 ; } ret = snprintf ( path, sizeof ( path ), ""%s/%s"", rootfs, mntent -> mnt_dir ) ; if ( ret >= sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> long"" ) ; return - 1 ; } ret = snprintf ( path, sizeof ( path ), ""%s/%s"", rootfs, mntent -> mnt_dir ) ;",0
78,"<S2SV_ModStart> + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> offset: <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; <S2SV_ModStart> return 1 ; } psf_log_printf ( psf, ""ID3 <S2SV_blank> offset: <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; <S2SV_ModStart> + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> offset: <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n",0
79,"<S2SV_ModStart> ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%u]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ; if ( ndo -> ndo_eflag ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%u]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%u]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; <S2SV_ModStart> ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%u]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ; if ( ndo -> ndo_eflag ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank>",0
80,"<S2SV_ModStart> NF_STOLEN ; # if defined ( CONFIG_NF_CONNTRACK ) if ( skb -> nfct ) nf_ct_frag6_gather ( state -> net, skb, nf_ct_frag6_defrag_user ( state -> hook, skb ) ) return NF_ACCEPT ; # else err = nf_ct_frag6_gather ( state -> net, skb, nf_ct_frag6_defrag_user ( state -> hook, skb ) ) ; if ( err ) { kfree_skb ( skb ) ; nf_ct_frag6_gather ( state -> net, skb, nf_ct_frag6_defrag_user ( state -> hook, skb ) ) ; return NF_ACCEPT ; } # else err = nf_ct_frag6_gather ( state -> net, skb, nf_ct_frag6_defrag_user ( state -> hook, skb ) ) ; if ( err ) { kfree_skb ( skb ) ; kfree_skb ( skb ) ; nf_ct_frag6_gather ( state -> net, skb",0
81,"<S2SV_ModStart> * up ; int err ; <S2SV_ModStart> rta ) ; err = - EINVAL ; if ( err ) return err <S2SV_ModEnd> ; up = <S2SV_ModStart> rta ) ; if ( err ) return err <S2SV_ModEnd> ; p = <S2SV_ModStart> ; pp = kmemdup ( up, xfrm_replay_state_esn_len ( up ), GFP_KERNEL ) ; if (! pp ) { kfree ( p ) ; return - ENOMEM ; } * replay_esn = p ; * preplay_esn = pp ; return 0 ; } p = kmemdup ( up, xfrm_replay_state_esn_len ( up ), GFP_KERNEL ) ; if (! p ) return - ENOMEM ; pp = kmemdup ( up, xfrm_replay_state_esn_len ( up ), GFP_KERNEL ) ; if (! pp ) { kfree ( p ) ; return - ENOMEM ; } p = kmemdup ( up, xfrm_replay_state_esn_len ( up ), GFP_KERNEL ) ; if (! p ) return - ENOMEM",0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
83,<S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_,0
84,<S2SV_ModStart> ) ) ; if ( ret < 0 ) { btif_storage_del_bonded_device ( remote_bd_addr ) ; btif_storage_del_bonded_device ( remote_bd_addr ) ; btif_storage_del_bonded_device ( remote_bd_addr ) ; btif_storage_del_bonded_device ( remote_bd_addr ) ; return BT_STATUS_FAIL ; } ret = btif_storage_del_bonded_device ( remote_bd_addr ) ; if ( ret < 0 ) { btif_storage_del_bonded_device ( remote_bd_addr ) ; btif_storage_del_bonded_device ( remote_bd_addr ) ; btif_storage_del_bonded_device ( remote_bd_addr ) ; btif_storage_del_bonded_device ( remote_bd_addr ) ; return BT_STATUS_FAIL ; },0
85,<S2SV_ModStart> { if ( numcols > JPC_QMFB_COLGRPSIZE * sizeof ( jpc_fix_t ) ) { abort ( ) ; } if ( numcols > JPC_QMFB_COLGRPSIZE * sizeof ( jpc_fix_t ) * JPC_QMFB_COLGRPSIZE * sizeof ( jpc_fix_t ) * JPC_QMFB_COLGRPSIZE ) { abort ( ) ; } if ( numrows >= 2 ) { hstartcol = ( numrows + 1 - parity ) >> 1 ; m = ( numrows + 1 - parity ) >> 1 ; n = numrows - m - (! parity ) ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < numcols ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; n = numrows - m - (! parity ) ; while ( n -- > 0 ) {,0
86,<S2SV_ModStart> vpx_codec_err_t res ; <S2SV_ModEnd> if (! <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if (! iface -> enc. cfg_maps ) res = VPX_CODEC_INCAPABLE ; else if ( iface -> caps & VPX_CODEC_CAP_ENCODER ) res = VPX_CODEC_INCAPABLE ; else if ( iface -> caps & VPX_CODEC_CAP_ENCODER ) res = VPX_CODEC_INCAPABLE ; else if ( iface -> caps & VPX_CODEC_CAP_ENCODER ) res = VPX_CODEC_INCAPABLE ; else { res = VPX_CODEC_INVALID_PARAM ; if ( iface -> caps & VPX_CODEC_CAP_ENCODER ) res = VPX_CODEC_INCAPABLE ; else if ( iface -> caps & VPX_CODEC_CAP_ENCODER ) res = VPX_CODEC_INCAPABLE ; else if ( iface -> caps & VPX_CODEC_CAP_ENCODER ) res = V,0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u. gso. type!= XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> type <S2SV_blank> %d.\\n"", gso -> u. gso. type ) ; return - EINVAL ; } if ( skb_shinfo ( skb ) -> gso_type!= SKB_GSO_TCPV4 ) { netdev_err ( vif -> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> type <S2SV_blank> %d.\\n"", gso -> u. gso. type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_segs = 0 ;",0
88,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_object ( struct <S2SV_ModStart> * path, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * last, <S2SV_ModEnd> void * data <S2SV_ModStart> ) ; if ( bitmap_pos < 0 ) { char * name = path_name ( path, last ) ; int bitmap_pos = ext_index_add_object ( object, name ) ; free ( name ) ; } else { char * name = path_name ( path, last ) ; int bitmap_pos = bitmap_position ( object -> oid. hash ) ; if ( bitmap_pos < 0 ) { char * name = path_name ( path, last ) ; bitmap_pos = ext_index_add_object ( object, name ) ; free ( name ) ; } bitmap_set ( base, bitmap_pos <S2SV_ModEnd> ) ; }",0
89,"<S2SV_ModStart> ; newparity = get_parity_from_fd ( tty_fd ) ; newbits = get_parity_from_fd ( tty_fd ) ; if ( newparity!= opts. parity ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> parity: <S2SV_blank> %d <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", newparity, opts. parity ) ; } else if ( newparity!= opts. parity ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> parity: <S2SV_blank> %d <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", newparity, opts. parity ) ; if ( newparity!= opts. parity ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> parity: <S2SV_blank> %d <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", newparity, opts. parity ) ; } else if ( newparity!= opts. parity ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> parity: <S2SV_blank> %d <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", newparity, opts. parity ) ; }",0
90,<S2SV_ModStart> mixer ) { if ( mixer -> urb ) { kfree ( mixer -> urb -> transfer_buffer ) ; usb_free_urb ( mixer -> urb ) ; } if ( mixer -> rc_urb ) { kfree ( mixer -> rc_urb ) ; kfree ( mixer -> rc_setup_packet ) ; kfree ( mixer -> rc_setup_packet ) ; kfree ( mixer ) ; },0
91,"<S2SV_ModStart> type_flags ) { struct packet_rollover * rollover = NULL ; <S2SV_ModStart> ; } if ( type == PACKET_FANOUT_ROLLOVER || ( type_flags & PACKET_FANOUT_FLAG_ROLLOVER ) ) { rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) return - ENOMEM ; atomic_long_set ( & rollover -> num, 0 ) ; atomic_long_set ( & rollover -> num_huge, 0 ) ; atomic_long_set ( & rollover -> num_failed, 0 ) ; } else { atomic_long_set ( & rollover -> num, 0 ) ; atomic_long_set ( & rollover -> num_huge, 0 ) ; atomic_long_set ( & rollover -> num_failed, 0 ) ; } mutex_lock ( & fanout_mutex ) ; match = NULL ; list_for_each_entry ( f, & fanout_list, list ) { if ( f -> id == id && read_pnet ( & f -> net ) == read_pnet ( & f -> net",0
92,"<S2SV_ModStart> newsk ) ; if ( np ) { memcpy ( newnp, np, sizeof ( struct ipv6_pinfo ) ) ; rcu_read_lock ( ) ; opt = ipv6_dup_options ( np -> opt ) ; RCU_INIT_POINTER ( newnp -> opt, opt ) ; RCU_INIT_POINTER ( newnp -> opt, opt ) ; RCU_INIT_POINTER ( newnp -> opt, opt",0
93,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
94,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> show_progress ( int <S2SV_ModStart> frame_out, uint64_t dx_time, BOOL verbose ) { if ( verbose ) fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time ) ; else fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time ) ; if ( verbose ) fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time ) ; else fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r""",0
95,"<S2SV_ModStart> ; } } # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION if ( imp_sth -> use_server_side_prepare ) { if ( imp_sth -> fetch_done ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } } # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION if ( imp_sth -> use_server_side_prepare ) { if (! DBIc_ACTIVE ( imp_sth ) ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } if (! imp_sth -> done_desc ) { do_error ( sth, JW_ERR_SEQUENCE, ""Error <S2SV_blank> while <S2SV_blank> describe <S2SV_blank> result <S2SV_blank> set."", NULL ) ; return Nullav ; } if (! imp_sth -> done_desc ) { if (! dbd_describe ( sth, imp_sth ) ) { do_error ( sth, JW_ERR_SEQUENCE, ""Error <S2SV_blank> while <S2SV_blank> describe <S2SV_blank> result <S2SV_blank>",0
96,"<S2SV_ModStart> } enc28j60SetBit ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC",0
97,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o ->",0
98,"<S2SV_ModStart> ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/get"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/exists"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req",0
99,"<S2SV_ModStart> == EXT4_GET_BLOCKS_PRE_IO ) { ret = ext4_split_unwritten_extents ( handle, inode, path, iblock, max_blocks, flags ) ; if ( io ) io -> flag = EXT4_IO_UNWRITTEN ; else ext4_set_inode_state ( inode, EXT4_STATE_DIO_UNWRITTEN ) ; goto out ; } if ( flags == EXT4_GET_BLOCKS_CONVERT ) { ret = ext4_convert_unwritten_extents_endio ( handle, inode, path ) ; if ( ret >= 0 ) ext4_update_inode_fsync_trans ( handle, inode, 1 ) ; goto out2 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out1 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto map_out ; } if ( ( flags & EXT4_GET_BLOCKS",0
100,<S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + 2 <S2SV_ModEnd> ) ; compproto <S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_16BITS ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_,0
101,"<S2SV_ModStart> { if (! caller_is_in_controller ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if ( caller_is_in_controller ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if (! caller_may_access ( fc, controller, cgroup, NULL, O_RDONLY ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if (! caller_may_access ( fc, controller, cgroup, NULL, O_RDONLY ) ) { sb -> st_mode = S_IF",0
102,"<S2SV_ModStart> flag ) { int mb_rows = source -> y_width >> 4 ; int mb_cols = source -> y_height >> 4 ; unsigned char * limits ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; memset ( limits, ( unsigned char ) ppl, 16 * mb_cols ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vpx_post_proc_down_and_across_mb_row ( source -> v_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_",0
103,"<S2SV_ModStart> ) { ret = copy_to_user <S2SV_ModEnd> ( param, <S2SV_ModStart> ) ) ; if ( ret ) return - EFAULT ; param += sizeof ( struct floppy_raw_cmd ) ; if ( ( ptr -> flags & FD_RAW_WRITE ) && ptr -> buffer_length ) { if ( ptr -> length >= 0 && ptr -> length <= ptr -> buffer_length ) { ret = fd_copyout ( ptr -> data, ptr -> kernel_data, ptr -> length ) ; if ( ret ) return ret ; } ret = fd_copyout ( ptr -> data, ptr -> kernel_data, ptr -> length ) ; if ( ret ) return ret ; param += ptr -> length ; if ( ( ptr -> flags & FD_RAW_READ ) && ptr -> buffer_length ) { if ( ptr -> length >= 0 && ptr -> length <= ptr -> buffer_length ) { ret = fd_copyout ( ptr -> data, ptr -> kernel_data, ptr -> length ) ; if ( ret ) return ret ; } ret = fd_copyout ( ptr -> kernel_data, ptr -> kernel_data, ptr -> length ) ; if ( ret ) return ret ; param += ptr -> length",0
104,"<S2SV_ModStart>!= old -> uid ||! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) && bprm -> unsafe & ~ LSM_UNSAFE_PTRACE_CAP ) { if (! capable ( CAP_SETUID ) ) { new -> euid = new -> uid ; new -> egid = new -> gid ; } new -> cap_permitted = cap_intersect ( new -> cap_permitted, old -> cap_permitted ) ; } new -> cap_effective = effective ; bprm -> cap_effective = effective ; if (! cap_issubset ( CAP_FULL_SET, new -> cap_effective ) || new -> euid!= 0 || new -> uid!= 0 || issecure ( SECURE_NOROOT ) ) { ret = audit_log_bprm_fcaps ( bprm, new, old ) ; if ( ret < 0 ) return ret ; bprm -> cap_effective = effective ; if (! issecure ( SECURE_NOROOT ) ) { ret = audit_log_bprm_fcaps ( bprm, new, old ) ; if (",0
105,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> int error ; struct mb2_cache_entry * ce ; int rc = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS ) ; if (! ce ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } <S2SV_ModStart> int error ; mb2_cache_entry_insert ( ce, bh -> b_bdev, bh -> b_blocknr, hash ) ; if ( error ) { mb2_cache_entry_put ( ext4_mb_cache, ce ) ; mb2_cache_entry_put ( ext4_mb_cache, ce ) ; mb2_cache_entry_put ( ext4_mb_cache, ce ) ; return ; } error = mb2_cache_entry_insert ( ext4_mb_cache, bh -> b_bdev, bh -> b_blocknr, hash ) ; if ( error ) { mb2_cache_entry_put ( ext4_mb_cache, ce ) ; mb2_cache_entry_put",0
106,"<S2SV_ModStart> rlen ) ; if ( r_socket_http_answer ( s, code, rlen ) < 0 ) { eprintf ( ""Invalid <S2SV_blank> HTTP/1.0\\r\\n"" ) ; free ( uri ) ; return NULL ; } <S2SV_ModStart> rlen ) ; if ( r_socket_http_answer ( s, code, rlen ) < 0 ) { eprintf ( ""Invalid <S2SV_blank> HTTP/1.0\\r\\n"" ) ; free ( uri ) ; return NULL ; } if ( r_socket_http_answer ( s, code, rlen ) < 0 ) { eprintf ( ""Invalid <S2SV_blank> HTTP/1.0\\r\\n"" ) ; free ( uri ) ; return NULL ; } if ( r_socket_http_answer ( s, code, rlen ) < 0 ) { eprintf ( ""Invalid <S2SV_blank> HTTP/1.0\\r\\n"" ) ; free ( uri ) ; free ( uri ) ; return NULL ; } if ( r_socket_http_answer ( s, code, rlen ) < 0 ) { eprintf ( ""Invalid <S2SV_blank> HTTP/1.0\\r\\n"" ) ; free ( uri ) ; return NULL ;",0
107,"<S2SV_ModStart> ; tf = ( ( c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser ) ( L, p -> z, <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
108,"<S2SV_ModStart> = 0 ; struct inet_opt * inet_opt ; <S2SV_ModStart> ; sock -> state = SS_UNCONNECTED ; inet_opt = rcu_dereference_protected ( net -> ipv4. inet_opt, sock_owned_by_user ( sock ) ) ; if (! inet_opt ) goto out_rcu_unlock ; inet_opt = rcu_dereference_protected ( net -> ipv4. inet_opt, sock_owned_by_user ( sock ) ) ; if (! inet_opt ) goto out_rcu_unlock ; inet_opt = rcu_dereference_protected ( net -> ipv4. inet_opt, sock_owned_by_user ( sock ) ) ; if (! inet_opt ) goto out_rcu_unlock ; inet_opt = rcu_dereference_protected ( net -> ipv4. inet_opt, sock_owned_by_user ( sock ) ) ; if (! inet_opt ) goto out_rcu_unlock ; inet_opt = rcu_dereference_protected ( net -> ipv4. inet_opt, sock_owned_by_user",0
109,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int ip_options_get_from_user ( <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( optlen && copy_from_user ( & opt -> __data, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } if ( copy_from_user ( & opt -> __data, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } if ( copy_from_user ( & opt -> __data, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } return ip_options_get_finish ( net, optp, opt, optlen ) ; }",0
110,"<S2SV_ModStart> ; dl = kmalloc ( size, GFP_KERNEL ) ; if (! dl ) return - ENOMEM ; di = dl -> dev_info ; spin_lock ( & rfcomm_dev_lock ) ; list_for_each_entry ( dev, & rfcomm_dev_list, list ) { if ( test_bit ( RFCOMM_TTY_RELEASED, & dev -> flags ) ) continue ; ( di + n ) -> state = dev -> dlc -> state ; ( di + n ) -> channel = dev -> channel ; ( di + n ) -> src = dev -> src ; ( di + n ) -> dst = dev -> dst ; ( di + n ) -> flags = dev -> flags ; ( di + n ) -> state = dev -> dlc -> state ; ( di + n ) -> src = dev -> src ; ( di + n ) -> dst = dev -> dst ; ( di + n ) -> state = dev -> state ; ( di + n ) -> channel = dev -> channel ; ( di + n ) -> state = dev -> dlc -> state ; ( di + n ) -> src = dev -> src ; ( di + n ) -> dst =",0
111,<S2SV_ModStart> trunc : ND_TCHECK_32BITS ( & dio -> rpl_dagrank ) ; <S2SV_ModStart> ; trunc : ND_TCHECK_32BITS ( & dio -> rpl_mopprf ) ; if ( RPL_DIO_GROUNDED ( dio -> rpl_mopprf ) || RPL_DIO_GROUNDED ( dio -> rpl_mopprf ) || RPL_DIO_PRF ( dio -> rpl_mopprf ) || RPL_DIO_GROUNDED ( dio -> rpl_mopprf ) || RPL_DIO_GROUNDED ( dio -> rpl_mopprf ) || RPL_DIO_GROUNDED ( dio -> rpl_mopprf ) || RPL_DIO_PRF ( dio -> rpl_mopprf ( dio -> rpl_mopprf ) || RPL_DIO_GROUNDED ( dio -> rpl_mopprf ) || RPL_DIO_GROUNDED ( d,0
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> * msg ; ND_TCHECK2 ( * tptr, 4 ) ; ND_TCHECK_32BITS ( pdu_header -> length ) ; ND_PRINT ( ( ndo, ""%sRPKI-RTRv%u, <S2SV_blank> %s <S2SV_blank> PDU <S2SV_blank> (%u), <S2SV_blank> length: <S2SV_blank> %u"", indent_string ( 8 ), pdu_header -> version, pdu_header -> pdu_type, pdu_len ) ) ; switch ( pdu_type ) { case RPKI_RTR_SERIAL_NOTIFY_PDU : case RPKI_RTR_SERIAL_QUERY_PDU : case RPKI_RTR_RESET_QUERY_PDU : case RPKI_RTR_CACHE_RESET_PDU : case RPKI_RTR_CACHE_RESPONSE_PDU",0
113,"<S2SV_ModStart> rose_facilities_struct facilities ; unsigned int <S2SV_ModEnd> len ; skb <S2SV_ModStart> NULL ; memset <S2SV_ModEnd> ( & facilities <S2SV_ModStart> ; if ( skb -> len < 4 ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) || ( make = rose_make_new ( sk ) ) == NULL ) { rose_transmit_clear_request ( neigh, lci, ROSE_NETWORK_CONGESTION, 120 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL ) { rose_transmit_clear_request ( neigh",0
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,"<S2SV_ModStart> ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; else if ( term_is_gui ( T_NAME ) ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( set_termname ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( set_termname ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( set_termname ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( set_termname ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ (",0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
117,"<S2SV_ModStart> ) ; struct o2nm_cluster * cluster = <S2SV_ModEnd> to_o2nm_cluster_from_node ( node <S2SV_ModStart> ; } write_lock ( & cluster -> cl_nodes_lock ) ; if ( o2nm_node_ip_tree_lookup ( cluster, ipv4_addr, & p, & parent ) ) ret = - EEXIST ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else { rb_link_node ( & node -> nd_ip_node, parent, p, & parent ) ; rb_insert_color ( & node -> nd_ip_node, & cluster -> cl_node_ip_tree ) ; } write_unlock ( & cluster ->",0
118,"<S2SV_ModStart> case BSD_AFNUM_ISO : if (! ND_TTEST2 ( * p, length ) ) ND_PRINT ( ( ndo, ""[|isoclns]"" ) ) ; else ND_PRINT ( ( ndo, ""[|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|atalk][|at",0
119,"<S2SV_ModStart> separator = * src ++ ; if ( dest == a -> name ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'.\'"" ) ; return ( ARCHIVE_FAILED ) ; } if ( dest == a -> name ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'.\'"" ) ; return ( ARCHIVE_FAILED ) ; } if ( dest == a -> name ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'.\'"" ) ; return ( ARCHIVE_FAILED ) ; } if ( dest == a -> name ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'.\'"" ) ; return ( ARCHIVE_FAILED ) ; } if ( dest == a -> name ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'.\'"" ) ; return (",0
120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TPM_RC <S2SV_ModEnd> tpm_kdfa ( TSS2_SYS_CONTEXT <S2SV_ModStart> { TPM2B_DIGEST tmpResult ; TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2 ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT8 * tpm2b_i_2Ptr = & tpm2b_i_2. t. buffer [ 0 ] ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT32 bitsSwizzled = string_bytes_endian_convert_32 ( bits ) ; * ( UINT32 * ) tpm2bBitsPtr = bitsSwizzled ; for ( i = 0 ; i < tpm2bLabel. t. size ; i ++ ) { i_Swizzled = string_bytes_endian_convert_32 ( i ) ; * ( UINT32 * ) tpm2b_i_2Ptr =",0
121,"<S2SV_ModStart> size_t size ; if ( width < 0 || height < 0 || hstep <= 0 || vstep <= 0 ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_intfast32_add ( tlx, tly, 0 ) ||! jas_safe_intfast32_add ( tlx, tly, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; } if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } cmpt -> stream_ = ( inmem )? jas_stream_memopen2 ( 0, size ) : jas_stream_tmpfile ( ) ;",0
122,<S2SV_ModStart> s ) { if ( s > UINT32_MAX / SIZE_T_MAX / SIZE_T_MAX / SIZE_T_MAX / SIZE_T_MAX / SIZE_T_MAX / SIZE_T_MAX / SIZE_T_MAX / SIZE_T_MAX / SIZE_T_MAX / SIZE_T_MAX / SIZE_T_MAX / SIZE_T_MAX / SIZE_T_MAX / SIZE_T_MAX ) { size_max = UINT32_MAX / SIZE_T_MAX / SIZE_T_MAX / SIZE_T_MAX ; if ( s > UINT32_MAX / SIZE_T_MAX / SIZE_T_MAX / SIZE_T_MAX / SIZE_T_MAX / SIZE_T_MAX / SIZE_T_MAX / SIZE_T_MAX / SIZE_T_MAX / SIZE_T_MAX / SIZE_T_MAX / SIZE_T_MAX / SIZE_T_MAX ) { size_max = UINT32_MAX / SIZE_T_MAX / SIZE_T_MAX ; if ( s > UINT32_MAX / SIZE_T_MAX / SIZE_T_MAX / SIZE_T_MAX,0
123,<S2SV_ModStart> ; if ( safe_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
124,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
125,<S2SV_ModStart> peer ) get_net ( peer ) ; spin_unlock_bh ( & net -> nsid_lock ) ;,0
126,<S2SV_ModStart> ++ ; } if ( i < ( int ) header_buf_used && ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i + 1 ; } } else if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i + 1 ; } } else if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i + 1 ; } } else if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [,0
127,"<S2SV_ModStart> ; if (! POKE_UINT8 ( c_id_subtype ) && POKE_UINT8 ( c_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_UINT8 ( p_id_subtype ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_UINT8 ( p_id_len ) && POKE_U",0
128,<S2SV_ModStart> &= ~ FLAG_MATCHED ; if ( ( op & ASN1_OP_MATCH__COND && flags & FLAG_LAST_MATCHED ) || ( dp + asn1_op_lengths [ op ] > datalen ) ) { pc += asn1_op_lengths [ op ] ; flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; } if ( ( op & ASN1_OP_MATCH__COND && flags & FLAG_LAST_MATCHED ) || ( dp + asn1_op_lengths [ op ] > datalen ) || ( dp + asn1_op_lengths [ op ] > datalen ) ) { pc += asn1_op_lengths [ op ] ; flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; } if ( ( op & ASN1_OP_MATCH__COND && flags & FLAG_MATCHED ) || ( dp + asn1_op_lengths [ op ] > datalen ) ) { flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ],0
129,"<S2SV_ModStart> = 0 ; spin_lock_init ( & net -> sctp. sctp_lock ) ; atomic_set ( & net -> sctp. sock_owned_by_user, 1 ) ; spin_unlock_init ( & net -> sctp. sock_owned_by_user, 0 ) ; <S2SV_ModStart> = 0 ; spin_unlock_init ( & net -> sctp. sock_owned_by_user, 1 ) ; spin_lock_init ( & net -> sctp. sock_owned_by_user, 0 ) ; spin_lock_init ( & net -> sctp. sock_owned_by_user, 1 ) ; spin_lock_init ( & net -> sctp. sock_owned_by_user, 0 ) ; spin_unlock_init ( & net -> sctp. sock_owned_by_user, 1 ) ; spin_lock_init ( & net -> sctp. sock_owned_by_user, 0 ) ; spin_unlock ( & net -> sctp. sock_owned_by_user, 1 ) ; spin_unlock ( & net -> sctp. sock_owned_by",0
130,"<S2SV_ModStart> int mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModEnd> * s, <S2SV_ModStart> int mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModEnd> * s, <S2SV_ModStart> gb ) { s -> avctx -> profile = get_bits ( gb, 4 ) ; s -> avctx -> level = get_bits ( gb, 4 ) ; if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> level = 0 ; } else { s -> avctx -> profile = 0 ; s -> avctx -> level = 0 ; } return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
131,"<S2SV_ModStart> + MIDQ_DATA_BUFF ; struct snd_rawmidi_substream * substream = mpu -> substream_input ; <S2SV_ModStart> 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if (",0
132,"<S2SV_ModStart> rule ) ; if ( result < 0 ) { security_filter_rule_destroy ( & entry -> lsm [ lsm_rule ]. rule ) ; return result ; } result = security_filter_rule_init ( & entry -> lsm [ lsm_rule ]. rule, Audit_equal, args, & entry -> lsm [ lsm_rule ]. rule ) ; if ( result < 0 ) { security_filter_rule_destroy ( & entry -> lsm [ lsm_rule ]. rule ) ; security_filter_rule_destroy ( & entry -> lsm [ lsm_rule ]. rule ) ; return result ; } result = security_filter_rule_init ( & entry -> lsm [ lsm_rule ]. rule, Audit_equal, args, & entry -> lsm [ lsm_rule ]. rule ) ; if ( result < 0 ) { security_filter_rule_destroy ( & entry -> lsm [ lsm_rule ]. rule ) ; security_filter_rule_destroy ( & entry -> lsm [ lsm_rule ]. rule ) ; return result ; }",0
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
136,"<S2SV_ModStart> req, size_t acl_len <S2SV_ModEnd> ) { __be32 <S2SV_ModStart> status ; __be32 * savep ; uint32_t attrlen, bitmap [ 3 ] ; if ( ( status = decode_op_hdr ( xdr, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; * acl_len = attrlen ; } else { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; } xdr_read_pages ( xdr, attrlen ) ; * acl_",0
137,"<S2SV_ModStart> goto out ; if ( skb_is_gso ( skb, features | NETIF_F_GSO_ROBUST ) ) { skb_gso_ok ( skb, features | NETIF_F_GSO_ROBUST ) ; if ( skb_gso_ok ( skb, features | NETIF_F_GSO_FRAGMENT ) ) { skb_shinfo ( skb ) -> gso_segs = DIV_ROUND_UP ( skb -> len, mss ) ; if ( skb_gso_ok ( skb, features | NETIF_F_GSO_FRAGMENT ) ) { skb_gso_ok ( skb, features | NETIF_F_GSO_ROBUST ) ; if ( skb_gso_ok ( skb, features | NETIF_F_GSO_FRAGMENT ) ) { skb_shinfo ( skb ) -> gso_segs = DIV_ROUND_UP ( skb -> len, mss ) ; if ( skb_gso_ok ( skb, features | NETIF_F_GSO",0
138,<S2SV_ModStart>!= 0 ) && ( i < to_read ),0
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,"<S2SV_ModStart> ; for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { const int width = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> w, s -> hsub ) : inlink -> w ; const int height = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> h, s -> vsub ) : inlink -> h ; step = s -> max_step [ plane ] ; outrow = out -> data [ plane ] + ( width - 1 ) * step ; inrow = in -> data [ plane ] + ( width - 1 ) * step ; for ( i = 0 ; i < height ; i ++ ) { uint16_t * outrow16 = ( uint16_t * ) outrow ; uint16_t * inrow16 = ( uint16_t * ) inrow ; for ( j = 0 ; j < width ; j ++ ) outrow16 [ j ] = inrow16 [ - j ] ; for ( j = 0 ; j < width ; j ++ ) outrow16 [ j ] = inrow16 [ - j ] ;",0
141,"<S2SV_ModStart> '/' ) { if ( strlen ( pszFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } strncpy ( szFileName, sizeof ( szFileName ) - 5, pszFileName ) ; snprintf ( szFileName, sizeof ( szFileName ) - 5, ""%s/%s"", szPath, pszFileName ) ; } if ( strlen ( szFileName ) < 4 ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } <S2SV_ModEnd> if ( pszString <S2SV_ModStart> NULL ) { if ( iniPropertySeek ( hIni, ( char * ) pszAppName, ( char * ) pszKeyName, """" ) == INI_SUCCESS ) { iniObjectInsert ( hIni, ( char * ) pszAppName ) ; } if ( iniPropertySeek ( hIni, ( char * ) pszKeyName, ( char * ) pszKeyName, """" ) == INI_SUCCESS ) { iniObjectDelete ( hIni ) ; } if",0
142,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart> ) ; } if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = userToID ( owner ) ; } } if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else { gid = groupToID ( group ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; }",0
143,"<S2SV_ModStart> ; if ( q - p < sh. sh_properties ) { DPRINTF ( ( ""CDF_READ_PROPERTY_INFO: <S2SV_blank> offset <S2SV_blank> %u <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds\\n"", q - p ) ) ; goto out ; } if ( q - p < sh. sh_properties ) { DPRINTF ( ( ""CDF_READ_PROPERTY_INFO: <S2SV_blank> offset <S2SV_blank> %u <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds\\n"", q - p ) ) ; goto out ; } if ( q - q < sh. sh_properties ) { DPRINTF ( ( ""CDF_READ_PROPERTY_INFO: <S2SV_blank> offset <S2SV_blank> %u <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds\\n"", q - p ) ) ; goto out ; } if ( q - p < sh. sh_properties ) { DPRINTF ( ( ""CDF_READ_PROPERTY_INFO: <S2SV_blank> offset <S2SV_blank> %u <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds\\n"", q - p ) ) ; goto out ; } if ( q - q < sh. sh_properties ) { DPRINTF ( ( ""CDF_READ_PROPERTY_INFO: <S2SV_blank> offset <S2SV_blank> %",0
144,<S2SV_ModStart> ; if ( inet -> inet_opt && inet -> inet_opt -> opt. <S2SV_ModEnd> srr ) daddr,0
145,"<S2SV_ModStart> ) ) { pr_err <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> """,0
146,"<S2SV_ModStart> eigrp_tlv_len ) ; if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigrp_tlv_len < 8 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ;",0
147,"<S2SV_ModStart> NULL ; # if CONFIG_MEM_MANAGER int number_aau ; if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; if ( hmm_alloc ( & hmm_d, number_aau ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } <S2SV_ModEnd> addr = VPX_MALLOC_L <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr",0
148,<S2SV_ModStart> int res ; size_t <S2SV_ModEnd> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
149,"<S2SV_ModStart> } ptr = strchr <S2SV_ModEnd> ( ptr + <S2SV_ModStart> 1, '/' ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr",0
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; split_flag |= EXT4_GET_BLOCKS_PRE_IO <S2SV_ModEnd> ; return ext4_split_extent,0
151,"<S2SV_ModStart> HASH_DISABLED ; } else { return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 ) ; }",0
152,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> & final ) ; rcu_read_unlock ( ) ;",0
153,"<S2SV_ModStart> = 0.0 ; uint16 <S2SV_ModEnd> planar = 0 <S2SV_ModStart> = 0.0 ; if ( nstrips > 3 ) TIFFError ( ""loadImage"", ""Number <S2SV_blank> of <S2SV_blank> strips <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", nstrips ) ; if ( ntiles > 3 ) TIFFError ( ""loadImage"", ""Number <S2SV_blank> of <S2SV_blank> tiles <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ntiles ) ; if ( nstrips > 3 ) TIFFError ( ""loadImage"", ""Number <S2SV_blank> of <S2SV_blank> strips <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", nstrips ) ; if ( nstrips > 3 ) TIFFError ( ""loadImage"", ""Number <S2SV_blank> of <S2SV_blank> strips <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ntiles ) ; if ( ntiles > 3 ) TIFFError ( ""loadImage"", ""Number <S2SV_blank> of <S2SV_blank> tiles <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ntiles ) ; if ( nstrips > 3 ) TIFFError ( ""loadImage"", ""Number <S2SV_blank> of <S2SV_blank> strips <S2SV_blank> exceeds",0
154,"<S2SV_ModStart> = 0 ; # if CONFIG_VP8_ENCODER if ( strcmp ( global -> codec -> name, ""vp8"" ) == 0 ) { ctrl_args = vp8_args ; ctrl_args_map = vp8_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & arg, & fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm = 0 ; } else if ( arg_match (",0
155,"<S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d <S2SV_blank> %d"", rtype, fwd. listen_host, fwd. listen_port, ( u_short ) packet_get_int ( ), <S2SV_ModEnd> pw -> pw_uid <S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d <S2SV_blank> %d"", rtype, fwd. listen_port, ( u_short ) <S2SV_ModEnd> pw -> pw_uid <S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d <S2SV_blank> %d"", rtype, fwd. listen_host, fwd. listen_port, ( u_short ) packet_get_int ( ), <S2SV_ModEnd> pw -> pw_uid <S2SV_ModStart> ""server_input_global_request: <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d <S2SV_blank> %d"", rtype, fwd. listen_host, fwd. listen_port, ( u_short ) <S2SV_ModEnd> pw -> pw_uid <S2SV_ModStart> ""server_input_global_request: <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d <S2SV_blank> %d"", rtype, fwd.",0
156,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
157,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
158,"<S2SV_ModStart> errout ; } memset ( & gr -> gr_ctx, 0, sizeof ( gss_union_ctx_id_desc ) ) ;",0
159,"<S2SV_ModStart> err = 0 ; struct ext4_inode_info * ei = EXT4_I ( inode ) ; struct ext4_inode_info * ei_inode = EXT_I ( inode ) ; struct ext4_inode_info * ei_inode = EXT_I ( inode ) ; struct ext4_inode_info * ei_inode = EXT4_I ( inode ) ; struct ext4_inode_info * ei_inode = EXT4_I ( inode ) ; <S2SV_ModStart> out ; } neh = ext_block_hdr ( bh ) ; if ( ext_depth ( inode ) ) neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( ei_inode, 0 ) ) ; else neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( ei_inode, 0 ) ) ; neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( ei_inode, 0 ) ) ; neh -> eh_magic = EXT4_EXT_MAGIC ; ext4_extent_",0
160,"<S2SV_ModStart> } if ( <S2SV_ModEnd> verify_checks ( c <S2SV_ModStart> preverify_ok, callback_ctx ) ) { SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if (! sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ;",0
161,"<S2SV_ModStart> ; int ret ; if ( kuid_has_mapping ( parent_ns, owner ) || kgid_has_mapping ( parent_ns, group ) ) return - EPERM",0
162,"<S2SV_ModStart> ; if ( fixed_length < AT91_AES_BLOCK_SIZE_BYTE ) { rc = - EINVAL ; goto exit ; } if ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { rc = - EINVAL ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) goto exit ; } if ( at91_aes_cmac ( data_length, data, cmac, key_size, cipher_key, iv ) ) goto exit ; if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { rc = - EINVAL ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) goto exit ;",0
163,"<S2SV_ModStart> } if ( c -> nreslevels > JPEG2000_MAX_RESLEVELS ) { av_log ( s -> avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( c -> nreslevels > JPEG2000_MAX_RESLEVELS ) { av_log ( s -> avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( c -> nreslevels2decode > JPEG2000_MAX_RESLEVELS - s -> reduction_factor ) c -> nreslevels2decode = JPEG2000_MAX_RESLEVELS - s -> reduction_factor ; c -> log2_cblk_width = ( bytestream2_get_byteu ( & s -> g ) & 15 ) + 2 ; c -> log2_cblk_height = ( bytestream2_get_byteu ( & s -> g ) & 15 ) + 2 ; if ( c -> log2_cblk_width + c -> log2_cblk_height > 12 ) { av",0
164,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
165,<S2SV_ModStart> ts_status ; bool <S2SV_ModEnd> is_drop_n_account = false <S2SV_ModStart> is_drop_n_account = true ; if ( skb -> ip_summed == CHECKSUM_PARTIAL ) status |= TP_STATUS_CSUMNOTREADY ; else if ( skb -> ip_summed == CHECKSUM_COMPLETE || skb_csum_unnecessary ( skb ) ) status |= TP_STATUS_CSUM_VALID ; else if ( skb -> ip_summed == CHECKSUM_COMPLETE ) status |= TP_STATUS_CSUM_VALID ; if ( skb -> pkt_type == PACKET_OUTGOING && skb -> ip_summed == CHECKSUM_COMPLETE ) status |= TP_STATUS_CSUMNOTREADY ; else if ( skb -> ip_summed == CHECKSUM_COMPLETE || skb_csum_unnecessary ( skb ) ) status |= TP_STATUS_CSUM_VALID ; else if ( skb -> ip_summed == CHECKSUM_COMPLETE || skb_csum_unnecessary ( skb ) ) status |= TP_STATUS_CSUM_VALID ; else if ( skb -> ip_summed,0
166,"<S2SV_ModStart> peer ) ; list_for_each_entry ( trans, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( trans, & trans -> ipaddr ) ) sctp_assoc_rm_peer ( asoc, trans ) ; } if ( asoc -> state >= SCTP_STATE_ESTABLISHED ) { sctp_assoc_rm_peer ( asoc, trans ) ; } else { list_for_each_entry ( trans, & trans -> ipaddr. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( trans, & trans -> ipaddr ) ) sctp_assoc_rm_peer ( asoc, trans ) ; } if ( asoc -> state >= SCTP_STATE_ESTABLISHED ) { sctp_assoc_rm_peer ( asoc, trans ) ; } else { list_for_each_entry ( trans, & trans -> ipaddr. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( trans, & trans -> ipaddr ) ) sctp_assoc",0
167,<S2SV_ModStart> return false ; if ( msg -> flags & NDP_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_FLAG,0
168,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int lsm_set_label_at ( int procfd, <S2SV_ModEnd> int on_exec, <S2SV_ModStart> ( name, ""None"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( name, ""AppArmor"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( on_exec ) { labelfd = openat ( procfd, ""self/attr/exec"", O_RDWR ) ; } else { labelfd = openat ( procfd, ""self/attr/current"", O_RDWR ) ; } if ( labelfd < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out ; } if ( write ( labelfd, command, size + 1 ) < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out ; } } else if ( strcmp ( name, ""SELinux"" ) == 0 ) { if ( write ( labelfd, command, size + 1 ) < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> LSM <S2SV_blank> label""",0
169,<S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32,0
170,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
171,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> ; if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. bits_left += cpi -> rc. this_frame_target - bits_used ; } else { cpi -> twopass. bits_left -= bits_used ; } cpi -> twopass. bits_left = MAX ( cpi -> twopass. bits_left, 0 ) ; if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. kf_group_bits += cpi -> rc. this_frame_target - bits_used ; } else { cpi -> twopass. kf_group_bits += cpi -> rc. this_frame_target - bits_used ; } cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
172,"<S2SV_ModStart> charlen ; } curqlevel = tmpql = ( lquery_level * ) palloc0 ( ITEMSIZE * num ) ; if ( ISALNUM ( ptr ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAITDELIM ; curqlevel -> numvar = 1 ; } else if ( charlen == 1 && t_iseq ( ptr, '.' ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAITDELIM ; curqlevel -> numvar = 1 ; } else if ( charlen == 1 && t_iseq ( ptr, '!' ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAIT",0
173,"<S2SV_ModStart> * header, <S2SV_ModEnd> struct mb_cache_entry * <S2SV_ModStart> ; struct mb2_cache_entry <S2SV_ModEnd> * ce ; <S2SV_ModStart> hash ) ; struct mb2_cache_entry <S2SV_ModEnd> * ce ; <S2SV_ModStart> again : ce = mb2_cache_entry_find_first ( ext4_mb_cache, inode -> i_sb -> s_bdev, hash ) ; if ( IS_ERR ( ce ) ) { if ( PTR_ERR ( ce ) == - EAGAIN ) break ; } bh = sb_bread ( inode -> i_sb, ce -> e_block ) ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; } else if ( le32_to_cpu ( BHDR ( bh ) -> h_refcount ) >= EXT4_XATTR_REFCOUNT_MAX ) { ea_idebug ( inode, ""block <S2SV_blank> %lu <S2SV_blank> refcount <S2SV_blank> %d>==%d"", ( unsigned long ) ce -> e_block, le32_to_cpu ( BHDR ( bh ) -> h_refcount ), EXT",0
174,"<S2SV_ModStart> data_offset ) { <S2SV_ModEnd> int pkt_len ; <S2SV_ModStart> offset ; pkt_len = <S2SV_ModEnd> parse_cosine_rec_hdr ( & <S2SV_ModStart> ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart>, pkt_len, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart>, pkt_len, <S2SV_ModEnd> wth -> frame_buffer",0
175,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
176,"<S2SV_ModStart> ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( SSL_IS_DTLS ( s ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } <S2SV_ModEnd> if ( left <S2SV_ModStart> left ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( SSL_IS_DTLS ( s ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( SSL_IS_DTLS ( s ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( SSL_IS_DTLS ( s ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ;",0
177,"<S2SV_ModStart> = 0 ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> = 0 ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> = 0 ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> = 0 ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> = 0 ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> = 0 ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModEnd>, ""InsufficientImageDataInFile"" <S2SV_ModStart> = 0 ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile",0
178,"<S2SV_ModStart> - ENOMEM ; if ( hdr. size_in > size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, hdr. size_in - hdr. size_in ) ; ret = - EFAULT ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, hdr. size_in - hdr. size_in ) ; ret = - EFAULT ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ; ret = vbg_core_ioctl ( session, req, buf ) ; if ( ret ) goto out ; if ( hdr. size_out < size ) memset ( buf + hdr. size_out, 0, size - hdr. size_out - hdr. size_out ) { ret = - EFAULT ; goto out ; } if ( hdr. size_out < size ) memset ( buf + hdr. size_out, 0, size - hdr. size_out )",0
179,<S2SV_ModStart> int m ; jpc_fix_t * buf2 ; jpc_fix_t * srcptr ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = & a [ hstartcol * stride ] ; n = m ; dstptr = buf ; srcptr = & a [ hstartcol * stride ] ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr,0
180,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
181,"<S2SV_ModStart> ( image ) ) <S2SV_ModEnd> ; status = <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, <S2SV_ModStart> ""Im",0
182,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_mount_state & MS_RDONLY ) { struct ext2_super_block * es = sbi -> s_es ; spin_lock ( & sbi -> s_lock ) ; es -> s_state = cpu_to_le16 ( sbi -> s_mount_state ) ; sbi -> s_mount_state = cpu_to_le16 ( sbi -> s_flags & MS_RDONLY ) ; } else if ( sbi -> s_mount_state & MS_RDONLY ) { struct ext2_super_block * es = sbi -> s_es ; spin_unlock ( & sbi -> s_lock ) ; es -> s_state = cpu_to_le16 ( sbi -> s_mount_state ) ; sbi -> s_mount_state = cpu_to_le16 ( sbi -> s_mount_state ) ; spin_unlock ( & sbi -> s_lock ) ; },0
183,"<S2SV_ModStart> err_free_buf ; } usb_set_interface_desc ( usbinterface, usbinterface -> altsetting [ 0 ] ) ; dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbin",0
184,"<S2SV_ModStart> buf ) ; if ( strlen ( buf ) > 1024 ) { fprintf ( stderr, ""Error: <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", sizeof ( buf ) ) ; fprintf ( stderr, ""Error: <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", sizeof ( buf ) ) ; fprintf ( stderr, ""Error: <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", sizeof ( buf ) ) ; fprintf ( stderr, ""Error: <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", sizeof ( buf ) ) ; fprintf ( stderr, ""Error: <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", sizeof ( buf ) ) ; fprintf ( stderr, ""Error: <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", sizeof ( buf ) ) ; fprintf ( stderr, ""Error: <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%",0
185,<S2SV_ModStart> node ) { struct o2nm_cluster * o2nm_cluster ; if ( node -> nd_item. ci_parent ) o2nm_cluster = to_o2nm_cluster_from_node_parent ( node -> nd_item. ci_parent ) ; return o2nm_cluster ; } if ( node -> nd_item. ci_parent ) { o2nm_cluster = to_o2nm_cluster_from_node_parent ( node -> nd_item. ci_parent ) ; return o2nm_cluster ; } if ( node -> nd_item. ci_parent ) { o2nm_cluster = to_o2nm_cluster_from_node_parent ( node -> nd_item. ci_parent ) ; return o2nm_cluster ; } if ( node -> nd_item. ci_parent ) { o2nm_cluster = to_o2nm_cluster_from_node_parent ( node -> nd_item. ci_parent ) ; return o2nm_cluster ; } if ( node -> nd_item. ci_parent ) { o2nm_cluster = to_o2nm_cluster_from_node,0
186,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
187,"<S2SV_ModStart> ; if ( avio_read_bit ( pb ) < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> bit <S2SV_blank> rate <S2SV_blank> received"" ) ; return AVERROR ( EINVAL ) ; } <S2SV_ModStart> ; if ( avio_read_bit ( pb ) < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> bit <S2SV_blank> rate <S2SV_blank> received"" ) ; return AVERROR ( EINVAL ) ; } if ( avio_read_bit ( pb ) < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> bit <S2SV_blank> rate <S2SV_blank> received"" ) ; return AVERROR ( EINVAL ) ; } <S2SV_ModStart> ; if ( avio_read_bit ( pb ) < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> bit <S2SV_blank> rate <S2SV_blank> received"" ) ; return AVERROR ( EINVAL ) ; } if ( avio_read_bit ( pb ) < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> bit <S2SV_blank> rate <S2SV_blank> received"" ) ; return AVERROR",0
188,"<S2SV_ModStart> ; if ( q - p < sh. sh_properties ) { DPRINTF ( ( ""CDF_READ_PROPERTY_INFO: <S2SV_blank> offset <S2SV_blank> %u <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds\\n"", q - p ) ) ; goto out ; } if ( q - p < sh. sh_properties ) { DPRINTF ( ( ""CDF_READ_PROPERTY_INFO: <S2SV_blank> offset <S2SV_blank> %u <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds\\n"", q - p ) ) ; goto out ; } if ( q - q < sh. sh_properties ) { DPRINTF ( ( ""CDF_READ_PROPERTY_INFO: <S2SV_blank> offset <S2SV_blank> %u <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds\\n"", q - p ) ) ; goto out ; } if ( q - p < sh. sh_properties ) { DPRINTF ( ( ""CDF_READ_PROPERTY_INFO: <S2SV_blank> offset <S2SV_blank> %u <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds\\n"", q - p ) ) ; goto out ; } if ( q - q < sh. sh_properties ) { DPRINTF ( ( ""CDF_READ_PROPERTY_INFO: <S2SV_blank> offset <S2SV_blank> %",0
189,"<S2SV_ModStart> protostats ) ; filegen_register <S2SV_ModEnd> ( statsdir, <S2SV_ModStart> cryptostats ) ; filegen_register <S2SV_ModEnd> ( statsdir, <S2SV_ModStart> cryptostats ) ; filegen_register <S2SV_ModEnd> ( statsdir, <S2SV_ModStart> timingstats ) ; filegen_register <S2SV_ModEnd> ( statsdir,",0
190,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( fd = mkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> dir ) ) == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( tmpname [ strlen ( tmpname ) - 1 ]!= '\\0' ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; if ( tmpname [ strlen ( tmpname ) - 1 ]!= '\\0' ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } copyfile ( lockfd, fileno ( fd ) ) ; tmp_file = tmpname ; return fd ; } if ( tmpname [ strlen ( tmpname ) - 1 ]!= '\\0' ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; if ( tmpname [ strlen ( tmpname ) - 1 ]!= '\\0' ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } <S2SV_ModEnd> copyfile ( lockfd",0
191,"<S2SV_ModStart> ; attach_shadowed ( mnt <S2SV_ModEnd>, parent,",0
192,"<S2SV_ModStart> next ) ; if ( unlikely ( next -> es | prev -> es ) ) loadsegment ( es, next -> es ) ; if ( unlikely ( next -> ds | prev -> ds ) ) loadsegment ( ds, next -> ds ) ; if ( unlikely ( next -> fs | next -> fs | prev -> fs ) ) loadsegment ( fs, next -> fs ) ; if ( unlikely ( next -> gs | next -> gs | prev -> gs ) ) loadsegment ( gs, next -> gs ) ; if ( next -> fs ) wrmsrl ( MSR_FS_BASE, next -> fs ) ; prev -> fsindex = fsindex ; if ( unlikely ( next -> gsindex | next -> gsindex | prev -> gs ) ) { loadsegment ( gs, next -> gsindex ) ; if ( gsindex ) prev -> gs = 0 ; } if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev -> gsindex = gsindex ; if ( next -> gs ) wrmsrl ( MSR_GS_BASE, next -> gs ) ; prev -> gsindex = gsindex ; switch_fpu_finish ( prev_p, fpu",0
193,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
194,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; } BITS_PARSE <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; } BITS_PARSE <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; } BITS_PARSE <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; } BITS_PARSE <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; } BITS_PARSE <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_,0
195,<S2SV_ModStart> << NM_VECTOR ) | ( 1u << DB_VECTOR ) ; if ( is_guest_mode ( vcpu ) ) eb |= ( 1u << MC_VECTOR ) ; else if ( ( vcpu -> guest_debug & ( KVM_GUESTDBG_ENABLE | KVM_GUESTDBG_USE_SW_BP ) ) == ( KVM_GUESTDBG_ENABLE | KVM_GUESTDBG_USE_SW_BP ) ) eb |= ( 1u << BP_VECTOR ) ; if ( vcpu -> guest_debug & ( KVM_GUESTDBG_ENABLE | KVM_GUESTDBG_USE_SW_BP ) ) == ( KVM_GUESTDBG_ENABLE | KVM_GUESTDBG_USE_SW_BP ) ) eb |= ( 1u << BP_VECTOR ) ; if ( ( vcpu -> guest_debug & ( KVM_GUESTDBG_ENABLE | KVM_GUESTDBG_USE_SW_BP ) ) == ( KVM_GUESTDBG_ENABLE |,0
196,"<S2SV_ModStart> { static char <S2SV_ModEnd> temp [ NFSX_V3FHMAX <S2SV_ModStart> + 1 ] ; temp [ sizeof ( temp ) - 1 ] = '\\0' ; spacep = strchr ( temp,'<S2SV_blank>') ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp, fsid. Fsid_dev. Major, fsid. Fsid_dev. Minor ) ) ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp, fsid. Fsid_dev. Major, fsid. Fsid_dev. Minor ) ) ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp, fsid. Fsid_dev. Major, fsid. Fsid_dev. Minor ) ) ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp, fsid. Fsid",0
197,"<S2SV_ModStart> int transhdrlen, unsigned int mtu, <S2SV_ModStart> = SKB_GSO_UDP ; if ( ( skb = sock_alloc_send_skb ( sk, hh_len + fragheaderlen + transhdrlen + 20, ( flags & MSG_DONTWAIT ) ) == NULL ) skb = sock_alloc_send_skb ( sk, hh_len + fragheaderlen + transhdrlen + 20, ( flags & MSG_DONTWAIT ), & err ) ; if ( skb == NULL ) { skb = sock_alloc_send_skb ( sk, hh_len + fragheaderlen + transhdrlen + 20, ( flags & MSG_DONTWAIT ), & err ) ; skb_append_datato_frags ( sk, skb, getfrag, from, ( length - transhdrlen ) ) ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_UDP ; ipv6_select_ident ( & fhdr ) ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; __skb_queue_",0
198,"<S2SV_ModStart> return res ; res = register_netdevice ( hsr_dev ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_MASTER ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 1 ], HSR_PT_SLAVE_A ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_B ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_C ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 1 ], HSR_PT_SLAVE_C ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_C ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 1 ], H",0
199,"<S2SV_ModStart> ; if ( arg == NULL ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; if ( arg == NULL ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; if ( arg == NULL ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; if ( arg == NULL ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; } if ( arg == NULL ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( arg == NULL ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( arg == NULL ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; if ( arg == NULL ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( arg == NULL ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG )",0
200,"<S2SV_ModStart> void vp9_setup_dst_planes ( <S2SV_ModEnd> MACROBLOCKD * xd <S2SV_ModStart> int mi_col ) { <S2SV_ModEnd> const uint8_t * <S2SV_ModStart> const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_x, pd -> subsampling_y ) ; } <S2SV_ModEnd> } <S2SV_null>",0
201,<S2SV_ModStart> ++ ) ; if (! p ) return 0 ; hdr = ( void * ) p - head -> iov_base ; dlen = head -> iov_len + rqstp -> rq_arg. page_len + tail -> iov_len - hdr ; if ( dlen < XDR_QUADLEN ( hdr ) * 4 ) return 0 ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( hdr + dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ;,0
202,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { int rc ; rc = assign_eip_near_nolock ( ctxt, dst ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; if ( rc!= X86EMUL_CONTINUE ) return 1 ; switch ( rc ) { case 1 : rc = assign_eip_near_nolock ( ctxt, dst ) ; break ; case 2 : rc = assign_eip_near_nolock ( ctxt, dst ) ; break ; case 4 : rc = assign_eip_near_nolock ( ctxt, dst ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; if ( rc!= X86EMUL_CONTINUE ) return 1 ; switch ( rc ) { case 1 : rc = assign_eip_near_nolock ( ctxt, dst ) ; break ; case 8 : rc = assign_eip_near_nolock ( ctxt, dst ) ; break ; default : WARN ( 1, ""unsupported <S2SV_blank> eip <S2SV_blank> assignment <S2SV_blank> size\\n"" ) ; } }",0
203,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
204,"<S2SV_ModStart> ; remaining = <S2SV_ModEnd> tvb_captured_length_remaining ( tvb <S2SV_ModStart> offset ) ; if ( remaining <= 0 ) { if ( data ) * data = g_strdup ( """" ) ; return offset ; } text = tvb_get_string_enc ( NULL, tvb, offset, remaining, ENC_UTF_16 | ENC_LITTLE_ENDIAN ) ; len = ( int ) strlen ( text ) ; proto_tree_add_string ( tree, hf_name, tvb, offset, len * 2, text ) ; if ( data ) * data = text ; else g_free ( text ) ;",0
205,"<S2SV_ModStart> == READ ) { int ret = __blockdev_direct_IO ( iocb, inode, file -> f_mapping -> host, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; if ( ret < 0 ) return ret ; <S2SV_ModStart> == READ ) { ret = __blockdev_direct_IO ( iocb, inode, file -> f_mapping -> host, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; if ( ret < 0 ) return ret ; ret = __blockdev_direct_IO ( iocb, inode, file -> f_mapping -> host, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; } else ret = __blockdev_direct_IO ( iocb, inode, file -> f_mapping -> host, iter, get_block, ocfs2_get_block, NULL, 0 ) ; if ( ret < 0 ) return ret ;",0
206,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
207,"<S2SV_ModStart> ; if ( fscanf ( f, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == 2 ) { if ( strparm [ 0 ] == ""\'""\'"" ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strcpy ( newstring, strparm + 1 ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( parm == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm + 2, ""%i"", & parm ) ; for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) { if (! strcmp ( def, defaults [ i ]. name ) ) { if (! strcmp ( def, defaults [ i ]. name ) ) { if (",0
208,<S2SV_ModStart> + 1 ) ; perf_event_update_userpage ( event ) ;,0
209,"<S2SV_ModStart> = get_line_size ( <S2SV_ModEnd> * b,",0
210,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> ; int kind <S2SV_ModEnd> ; void * <S2SV_ModStart> ; char * str ; PyObject * o, * fstring_name ; Py_ssize_t len ; Py_ssize_t i <S2SV_ModEnd> ; assert ( <S2SV_ModStart> expr_end == ':' ) ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = PyUnicode_GET_LENGTH ( o ) ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! PyUnicode_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) ) { all_whitespace = 0 ; break ; } } Py_DECREF ( o ) ; str [ 0 ] = '(' ; memcpy ( str + 1, expr_start, len ) ; str [ len + 1 ] = ')' ; str [ len + 2 ] = 0 ; cf. cf_flags = PyCF_ONLY_AST ; fstring_name = PyUnicode_FromString ( ""<fstring>"" ) ;",0
211,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
212,"<S2SV_ModStart> string ) { if ( cJSON_strcasecmp ( c -> string, string ) ) { c = c -> next ; break ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
213,"<S2SV_ModStart> == 0 ) set_bit <S2SV_ModEnd> ( KEY_FLAG_NEGATIVE,",0
214,"<S2SV_ModStart> len ) ; if (! net_read_exact ( s, & nh, sizeof ( nh ) ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_type, plen ) ; if (! net_read_exact ( s, & nh, sizeof ( nh ) ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", nh. nh_len, nh. nh_type, plen ) ; if (! net_read_exact ( s, & nh, sizeof ( nh ) ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_len ) ; * len = plen ; if (! net_read_exact ( s, & nh, sizeof ( nh ) ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", nh. nh_type, plen ) ; if (! net_read_exact ( s, & nh, sizeof ( nh ) ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %",0
215,"<S2SV_ModStart> & XFS_ATTR_LOCAL ) { xfs_attr_leaf_name_local_t * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; retval = context -> put_listent ( context, entry -> flags, name_loc -> nameval, ( int ) name_loc -> len ) ; retval = context -> put_listent ( context, entry -> flags, name_loc -> valuelen, ( int ) name_loc -> valuelen ) ; retval = context -> put_listent ( context, entry -> flags, name_loc -> valuelen, ( int ) name_loc -> valuelen ) ; retval = context -> put_listent ( context, entry -> flags, name_loc -> valuelen, ( int ) name_loc -> len ) ; retval = context -> put_listent ( context, entry -> flags, name_loc -> valuelen, ( int ) name_loc -> valuelen ) ; retval = context -> put_listent ( context, entry -> flags, name_loc -> valuelen, ( int ) name_loc -> valuelen ) ; retval = context -> put",0
216,"<S2SV_ModStart> - EINVAL ; ktspec. tv_sec = 0 ; <S2SV_ModStart> NULL ) ; datagrams = __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, & ktspec ) ; if ( datagrams > 0 && get_compat_timespec ( & ktspec, timeout ) ) datagrams = - EFAULT ; else datagrams = __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, & ktspec ) ; if ( datagrams > 0 && put_compat_timespec ( & ktspec, timeout ) ) datagrams = - EFAULT ; else datagrams = __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, & ktspec ) ; if ( datagrams > 0 && put_compat_timespec ( & ktspec, timeout ) ) datagrams = - EFAULT ;",0
217,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
218,"<S2SV_ModStart> ; int ret ; skb -> protocol = eth_type_trans ( skb, ndev ) <S2SV_ModEnd> ; ret = <S2SV_ModStart> hns_nic_net_xmit_hw ( ndev, skb, & tx_ring_data ( priv, skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_bytes += skb -> len ; ndev -> stats. tx_packets ++ ; } else { netif_trans_update ( ndev ) ; ndev -> stats. tx_packets ++ ; } ret = hns_nic_net_xmit_hw ( ndev, skb, & tx_ring_data ( priv, skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_bytes += skb -> len ; ndev -> stats. tx_packets ++ ; } return ( netdev_tx_t ) ret <S2SV_ModEnd> ; } <S2SV_null>",0
219,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
220,"<S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart> TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart> TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPOR",0
221,"<S2SV_ModStart> RAnalOp next_op ; if ( len < op -> size ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; } else if ( len < op -> size ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, buf + op -> size, len - op -> size, cpu ) ; } else if ( len < op -> size ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; }",0
222,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
223,"<S2SV_ModStart> data ) { int found = 0 ; char * user_config = NULL ; char * repo_config = NULL ; if ( perf_config_system ( ) &&! access ( perf_etc_perfconfig ( ), R_OK ) ) { ret += perf_config_from_file ( fn, perf_etc_perfconfig ( ), data ) ; found += 1 ; } home = getenv ( ""HOME"" ) ; if ( home ) { char * user_config = mkpath ( ""%s/.perfconfig"", home ) ; if (! access ( user_config, R_OK ) ) { ret += perf_config_from_file ( fn, user_config, data ) ; found += 1 ; } free ( user_config ) ; } repo_config = perf_pathdup ( ""config"" ) ; if (! access ( repo_config, R_OK ) ) { ret += perf_config_from_file ( fn, repo_config, data ) ; found += 1 ; } free ( repo_config ) ; if ( found == 0 ) return - 1 ; return ret ; }",0
224,<S2SV_ModStart> int validate_event ( struct perf_event * event ) { struct <S2SV_ModEnd> arm_pmu * armpmu <S2SV_ModStart> = to_arm_pmu ( <S2SV_ModEnd> event -> pmu <S2SV_ModStart> ( event -> pmu <S2SV_ModEnd>!= leader_pmu || <S2SV_ModStart> state < PERF_EVENT_STATE_OFF <S2SV_ModEnd> ) return 1 <S2SV_ModStart> return 1 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
225,"<S2SV_ModStart> new_idmap_permitted ( struct user_namespace * user_ns, int cap_setid, struct uid_gid_map * new_map ) { if ( new_map -> nr_extents == 1 ) { u32 id = new_map -> extent [ 0 ]. lower_first ; if ( cap_setid == CAP_SETUID ) { kuid_t uid = make_kuid ( current_fsuid ( ), id ) ; if ( uid_eq ( uid, current_fsgid ( ) ) ) return true ; } else if ( cap_setid == CAP_SETUID ) { kuid_t gid = make_kgid ( current_fsgid ( ), id ) ; if ( gid_eq ( gid, current_fsgid ( ) ) ) return true ; } else if ( cap_setid == CAP_SETGID ) { kgid_t gid = make_kgid ( current_fsgid ( ), id ) ; if ( gid_eq ( gid, current_fsgid ( ) ) return true ; } else if (! ns_capable ( user_ns, cap_setid ) )",0
226,"<S2SV_ModStart> ++ ) { body [ j ] = XMALLOC ( VarLenData, 1 ) ; body [ j ] -> len = a -> values [ j ]. len ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. len ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf ) ; memmove ( body [ j ] -> data, body [ j ] -> data, body [ j ] -> len ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf, body [ j ] -> data -> len ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf ) ; memmove ( body [ j ] -> data",0
227,"<S2SV_ModStart> hexline * hx ; u8 reset <S2SV_ModEnd> ; int ret <S2SV_ModStart> pos = 0 ; hx = kzalloc ( sizeof ( * hx ), GFP_KERNEL ) ; if (! hx ) return - ENOMEM <S2SV_ModEnd> ; if ( <S2SV_ModStart> reset = 1 ; if ( ( ret = usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 ) )!= 1 ) err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; while ( ( ret = dvb_usb_get_hexline ( fw, hx, & pos ) ) > 0 ) { deb_fw ( ""writing <S2SV_blank> to <S2SV_blank> address <S2SV_blank> 0x%04x <S2SV_blank> (buffer: <S2SV_blank> 0x%02x <S2SV_blank> %02x)\\n"", hx -> addr, hx -> len, hx -> chk ) ; ret = usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 ) ; if ( ret!= hx -> len ) { err ( ""error <S2SV_blank> while <S2SV_blank> transferring <S2SV_blank> firmware",0
228,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) goto trunc <S2SV_ModEnd> ; val_h = <S2SV_ModStart> val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_PRINT ( ( ndo, ""CRCErr=%u <S2SV_blank> "", ( val_h << 16 ) + val_l ) ) ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_PRINT ( ( ndo, ""BufOver=%u <S2SV_blank> "", ( val_h << 16 ) + val_l ) ) ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_PRINT ( ( ndo, ""HardOver=%u <S2SV_blank> "", ( val_h << 16 ) + val_l ) ) ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ;",0
229,<S2SV_ModStart> princ ) ; <S2SV_ModEnd> if ( strncmp <S2SV_ModStart> == 0 <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
230,"<S2SV_ModStart> * bo ; uint32_t shader_state_size ; uint32_t uniforms_state_size ; <S2SV_ModStart> ; if ( copy_from_user ( & shader_state_size, ( void __user * ) ( uintptr_t ) args -> shader_state, args -> shader_state_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( & uniforms_state_size, ( void __user * ) args -> uniforms_size, args -> uniforms_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( exec -> shader_state, ( void __user * ) ( uintptr_t ) args -> shader_state, args -> shader_state_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( exec -> shader_state, ( void __user * ) ( uintptr_t ) args -> uniforms_state, args -> uniforms_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( exec -> shader_state, ( void __user * ) ( uintptr_t ) args -> shader_state,",0
231,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
232,"<S2SV_ModStart> -> i_sb ) ; if ( test_opt ( inode -> i_sb, DELALLOC ) &&! ext4_nonda_switch ( inode -> i_sb ) ) { ret = VM_FAULT_SIGBUS ; goto out_ret ; } if ( ext4_should_dioread_nolock ( inode ) ) get_block = ext4_get_block_write ; else get_block = ext4_get_block ; out_ret : if ( test_opt ( inode -> i_sb, DELALLOC ) &&! ext4_should_nonda_switch ( inode -> i_sb ) ) { do { ret = block_page_mkwrite ( vma, vmf, ext4_da_get_block_prep ) ; } while ( ret == - ENOSPC && ext4_should_retry_alloc ( inode -> i_sb, & retries ) ) { if ( ext4_should_dioread_nolock ( inode ) ) get_block = ext4_get_block_write ; else get_block = ext4_get_block_write ; }",0
233,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
234,"<S2SV_ModStart> { switch ( <S2SV_ModEnd> * arg ) <S2SV_ModStart> case '\\n' : if ( strchr ( arg, '\\n' ) ) { * b ++ = '\\n' ; break ; } <S2SV_ModEnd> arg ++ ; <S2SV_ModStart> case '\\n' : if ( strchr ( arg, '\\r' ) ) { * b ++ = '\\r' ; break ; default : * b ++ = * arg ; break ; } arg ++ ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
235,"<S2SV_ModStart> case 5 : idstr = STR_OR_ID ( t. t_id, oakley_p_map ) ; map = oakley_t_map ; nmap = sizeof ( oakley_t_map ) / sizeof ( oakley_t_map ) ; break ; case 6 : idstr = STR_OR_ID ( t. t_id, ah_p_map ) ; map = ipsec_t_map ; nmap = sizeof ( ipsec_t_map ) / sizeof ( ipsec_t_map ) ; break ; case 7 : idstr = STR_OR_ID ( t. t_id, esp_p_map ) ; map = ipsec_t_map ; nmap = sizeof ( ipsec_t_map ) / sizeof ( ipsec_t_map ) ; break ; case 8 : idstr = STR_OR_ID ( t. t_id, ipcomp_p_map ) ; map = ipsec_t_map ; nmap = sizeof ( ipsec_t_map ) / sizeof ( ipsec_t_map ) ; break ; case 9 : idstr = STR_OR",0
236,"<S2SV_ModStart> GsmIceConnectionData ; static gboolean accept_ice_connection ( GIOChannel * source, GIOCondition condition, GsmIceConnectionData * data ) { IceListenObj listener ; IceAcceptStatus status ; g_debug ( ""GsmXsmpServer: <S2SV_blank> accept_ice_connection()"" ) ; listener = data -> listener ; status = IceAcceptConnection ( listener, & status ) ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return FALSE ; } <S2SV_ModEnd> client = gsm_xsmp_client_new <S2SV_ModStart> ice_conn ) ; <S2SV_ModEnd> gsm_store_add ( server",0
237,"<S2SV_ModStart> ; if ( unlikely ( pskb_expand_head ( skb, frag_hdr_sz, 0, GFP_ATOMIC ) ) ) goto out ; <S2SV_ModStart> = CHECKSUM_NONE ; if ( skb_is_gso ( skb, features | NETIF_F_GSO_ROBUST ) ) { int type = skb_shinfo ( skb ) -> gso_type ; if (! ( type & SKB_GSO_DODGY ) ||! ( type & SKB_GSO_DODGY ) ) ) goto out ; skb_shinfo ( skb ) -> gso_segs = 1 ; goto out ; } <S2SV_ModStart> = NEXTHDR_FRAGMENT ; if ( skb_is_gso ( skb, features | NETIF_F_GSO_ROBUST ) ) { int type = skb_shinfo ( skb ) -> gso_type ; if (! ( type & SKB_GSO_DODGY ) ||! ( type & SKB_GSO_DODGY ) ) goto out ; skb_shinfo ( skb ) -> gso_segs =",0
238,"<S2SV_ModStart> void ) { test_checkout_fails <S2SV_ModEnd> ( ""refs/heads/git_tilde1"", <S2SV_ModStart> "".git/foobar"" ) ; test_checkout_fails <S2SV_ModEnd> ( ""refs/heads/git_tilde1"", <S2SV_ModStart> "".git/foobar"" ) ; test_checkout_fails <S2SV_ModEnd> ( ""refs/heads/git_tilde1"", <S2SV_ModStart> "".git/foobar"" ) ; test_checkout_fails <S2SV_ModEnd> ( ""refs/heads/git_tilde1"",",0
239,"<S2SV_ModStart> case SO_REUSEADDR : v. val = sock_flag ( sk, SOCK_TRUNC ) ; break ; case SO_NODELAY : v. val = sock_flag ( sk, SOCK_NODELAY ) ; break ; case SO_ACCEPTCONN : v. val = sock_flag ( sk, SOCK_TRUNC ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_NODELAY : v. val = sock_flag ( sk, SOCK_TRUNC ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_REUSEADDR : v. val",0
240,"<S2SV_ModStart> ) { msg -> msg_name = NULL ; msg -> msg_namelen = 0 ; return 0 ; } if ( sk -> sk_shutdown & RCV_SHUTDOWN ) { msg -> msg_name = NULL ; msg -> msg_namelen = 0 ; return 0 ; } if ( skb -> len < len ) { msg -> msg_flags |= MSG_TRUNC ; copied = skb -> len ; } if ( len < copied ) { msg -> msg_flags |= MSG_TRUNC ; copied = len ; } skb_reset_transport_header ( skb ) ; err = skb_copy_datagram_iovec ( skb, 0, msg -> msg_iov, copied ) ; if ( err == 0 ) { sock_recv_ts_and_drops ( msg, sk, skb ) ; if ( bt_sk ( sk ) -> skb_msg_name ) bt_sk ( sk ) -> skb_msg_name ( skb, msg -> msg_name, & msg -> msg_namelen ) ; <S2SV_ModEnd> msg -> msg_namelen",0
241,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
242,"<S2SV_ModStart> int i ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y ) ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y ) ; setup_pred_plane ( & pd -> pre [ idx ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_y",0
243,"<S2SV_ModStart> ; char buf [ DN_BUF_LEN <S2SV_ModEnd> ] ; unsigned <S2SV_ModStart> cleanup ; X509_NAME_oneline_ex ( X509_get_subject_name ( cert ), buf, & bufsize, XN_FLAG_SEP_COMMA_PLUS ) ; md -> subject_dn = strdup ( buf ) ; if ( md -> subject_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } X509_NAME_oneline_ex ( X509_get_issuer_name ( cert ), buf, & bufsize, XN_FLAG_SEP_COMMA_PLUS ) ; md -> issuer_dn = strdup ( buf ) ; if ( md -> issuer_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; j = 0 ; if ( pkinit_sans!= NULL ) { for ( i = 0 ; upn_sans!= NULL ; i ++ ) { for ( i =",0
244,"<S2SV_ModStart> out_free ; } for ( i = 0 ; i < KVM_MEMORY_SLOTS_NUM ; ++ i ) if ( s -> base_gfn + s -> npages > mem -> guest_phys_addr + mem -> memory_size ) { kvm_iommu_unmap_pages ( kvm, s -> base_gfn, s -> npages ) ; kvm_iommu_unmap_pages ( kvm, s -> guest_phys_addr + s -> npages ) ; kvm_iommu_unmap_pages ( kvm, s -> guest_phys_addr + s -> npages, mem -> guest_phys_addr + mem -> memory_size ) ; kvm_iommu_unmap_pages ( kvm, s -> base_gfn + s -> npages ) ; kvm_iommu_unmap_pages ( kvm, s -> guest_phys_addr + s -> npages ) ; kvm_iommu_unmap_pages ( kvm, s -> guest_phys_addr + s -> npages, mem -> guest_phys_addr + mem -> memory",0
245,"<S2SV_ModStart> = 0 ; } if ( ru && copy_to_user ( ru, & r, sizeof ( struct rusage ) ) ) return - EFAULT ;",0
246,<S2SV_ModStart> ; lock_sock ( sk ) ; if ( msg -> msg_name ) { msg -> msg_name = msg -> msg_name ; msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; msg -> msg_flags |= MSG_TRUNC ; msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; if ( msg -> msg_namelen > sizeof ( * msg -> msg_name ) ) msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; if ( msg -> msg_namelen > sizeof ( * msg -> msg_name ) ) { msg -> msg_name = sizeof ( * msg -> msg_name ) ; msg -> msg_flags |= MSG_TRUNC ; msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; if ( msg -> msg_namelen > sizeof ( * msg -> msg_name ) ) msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; msg -> msg_namelen = sizeof ( * msg -> msg_name ),0
247,<S2SV_ModStart> ni ; register <S2SV_ModEnd> u_int amt ; <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart>,0
248,<S2SV_ModStart> ; if ( reqkey_defl == KEY_REQKEY_DEFL_DEFAULT ) { ret = - EINVAL ; goto error ; } goto set ; case KEY_REQKEY_DEFL_SESSION_KEYRING : case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : ret = install_thread_keyring_to_cred ( new ) ; if ( ret < 0 ) { ret = - EINVAL ; goto error ; } goto set ; case KEY_REQKEY_DEFL_NO_CHANGE : case KEY_REQKEY_DEFL_GROUP_KEYRING : ret = install_group_keyring_to_cred ( new ) ; if ( ret < 0 ) { ret = - EINVAL ; goto error ; goto set ; } <S2SV_ModEnd> goto set ;,0
249,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
250,"<S2SV_ModStart> argc ++ ; retval = copy_strings_kernel ( 1, & iname_addr, bprm ) ; if ( retval < 0 ) goto _error ; bprm -> interp = iname ; bprm -> file = open_exec ( iname ) ; retval = PTR_ERR ( interp_file ) ; if ( retval ) goto _error ; <S2SV_ModStart> argc ++ ; retval = copy_strings_kernel ( 1, & iname_addr, bprm ) ; if ( retval < 0 ) goto _error ; bprm -> interp = iname ; retval = copy_strings_kernel ( 1, & iname_addr, bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> ; bprm -> <S2SV_ModStart> argc ++ ; retval = copy_strings_kernel ( 1, & iname_addr, bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> ; bprm -> <S2SV_ModStart> argc ++ ; retval = copy_strings_kernel ( 1, & iname_addr, bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> ; bprm -> <S2SV_ModStart> argc ++ ; retval = copy_strings_kernel",0
251,<S2SV_ModStart> ; int iSrc ; res -> ContribRow [ u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; if ( iLeft + 1 > windows_size ) { iLeft ++ ; } else { iRight -- ; } } for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ) ; } if ( dTotalWeight < 0.0 ) { _gdContributionsFree ( res ) ; return NULL ; } if ( dTotalWeight > 0.0 ) { for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ) ; } if ( dTotalWeight > 0.0 ) { for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { res -> Contrib,0
252,<S2SV_ModStart> user ) { if ( user == NULL ) return - EINVAL,0
253,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; Com_Exit ( 1 <S2SV_ModEnd> ) ; return",0
254,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen <S2SV_ModStart> + 1 ; size_t <S2SV_ModEnd> limit = 0,0
255,"<S2SV_ModStart> & tee_mm_sec_ddr ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> mobj ) { memset <S2SV_ModEnd> ( mobj_get_va ( <S2SV_ModStart> 0 ), 0, size ) ; return mobj ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
256,<S2SV_ModStart> += incr ; timer -> it_overrun += 1 <S2SV_ModEnd> << i ;,0
257,"<S2SV_ModStart> * for_ch ; int <S2SV_ModEnd> is_async = 0 <S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( first, expression, NULL, is_async, c -> c_arena ) ; else comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ), expression, NULL, is_async, c -> c_arena ) ; else comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ), expression, NULL, is_",0
258,"<S2SV_ModStart> NULL ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } err = copy_func_state ( dst, src -> frame [ i ] ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } err = copy_func_state ( dst, src -> frame [ i ] ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } err = copy_func_state ( dst, src -> frame [ i ] ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } err = copy_",0
259,"<S2SV_ModStart> void write_mb_modes_kf ( const VP9_COMMON * const cm = & cpi -> common ; const MACROBLOCKD * const xd = & cpi -> mb. e_mbd ; const MODE_INFO * const mi = mi_8x8 [ 0 ] ; const MODE_INFO * const above_mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * const left_mi = mi_8x8 [ - 1 ] ; const MB_MODE_INFO * const mbmi = mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ] ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ] ; int idx, idy ; for ( idx = 0",0
260,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
261,"<S2SV_ModStart> } } DPRINTF <S2SV_ModEnd> ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", <S2SV_ModStart>. iov_len ) ; scsi_req_data ( & r -> req, r -> iov. iov_base, r -> iov. iov_len ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
262,"<S2SV_ModStart> goto err ; } if ( cs < 0 || cs >= CQSPI_MAX_CHIPSELECT ) { dev_err ( dev, ""Chip <S2SV_blank> select <S2SV_blank> %d <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", cs ) ; goto err ; } f_pdata = & cqspi -> f_pdata [ cs ] ; f_pdata -> cqspi = cqspi ; f_pdata -> np = np ; ret = cqspi_of_get_flash_pdata ( pdev, f_pdata, np ) ; if ( ret ) goto err ;",0
263,"<S2SV_ModStart> maxn ) { switch ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : return decompileCONSTANTPOOL ( n, actions, maxn, 0 ) ; case SWFACTION_GOTOFRAME : return decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME2 : return decompileGOTOFRAME2 ( n, actions, maxn, 0 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_STACKSWAP : decompileSTACKSWAP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETPROPERTY : decompileGETPROPERTY ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n,",0
264,<S2SV_ModStart> ; l = W_TIM_real ( wrk ) ; if ( l < 0 ) { AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( BUSYOBJ_MAGIC ) ) ) ) ) ) ) ) ) ) ) ; } else { AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ (,0
265,"<S2SV_ModStart> goto out ; } if ( table -> total == table -> max ) { err = - ENOSPC ; goto out ; } table -> entries [ free ] = cpu_to_be32 ( vlan | MLX4_VLAN_VALID ) ; if ( unlikely ( err ) ) { mlx4_warn ( dev, ""Failed <S2SV_blank> adding <S2SV_blank> vlan: <S2SV_blank> %u\\n"", vlan ) ; table -> refs [ free ] = 0 ; table -> entries [ free ] = 0 ; table -> entries [ free ] = cpu_to_be32 ( vlan | MLX4_VLAN_VALID ) ; err = mlx4_set_port_vlan_table ( dev, port, table -> entries ) ; if ( unlikely ( err ) ) { mlx4_warn ( dev, ""Failed <S2SV_blank> adding <S2SV_blank> vlan: <S2SV_blank> %u\\n"", vlan ) ; table -> refs [ free ] = 0 ; table -> entries [ free ] = 0 ; table -> entries [ free ] = 0 ; table -> entries [ free ] = 0 ; goto out ; } table -> refs [ free ] = 1 ; table -> entries [ free ] = cpu_to_be32 ( vlan | MLX",0
266,"<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & prep -> pp_n ) ; <S2SV_ModStart> - 1 ) ; ND_TCHECK_32BITS ( & prep -> pp_n ) ; ps = ( const struct pgstate * ) ( prep + 1 ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { const struct id_off * ie ; char c = '<' ; ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & ps -> page. p_sid ), EXTRACT_32BITS ( & ps -> page. p_uid ) ) ; io = ( const struct id_off * ) ( ps + 1 ) ; for ( ie = io + ps -> nid ; ie < ie && ND_TTEST ( * io ) ; ++ io ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps =",0
267,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
268,"<S2SV_ModStart> int ret ; <S2SV_ModEnd> dev_dbg ( & <S2SV_ModStart>, ""atusb: <S2SV_blank> reg <S2SV_blank> = <S2SV_blank> 0x%x\\n"", reg ) <S2SV_ModEnd> ; ret = <S2SV_ModStart>, reg, NULL <S2SV_ModEnd>, 1, <S2SV_ModStart> 1000 ) ; if ( ret < 0 ) { dev_err ( & usb_dev -> dev, ""atusb: <S2SV_blank> reg <S2SV_blank> = <S2SV_blank> 0x%x\\n"", reg ) ; return ret ; } ret = <S2SV_ModEnd> atusb_control_msg ( usb_dev <S2SV_ModStart> ATUSB_REQ_FROM_DEV, ret <S2SV_ModEnd>, 0, <S2SV_ModStart>, reg, NULL <S2SV_ModEnd>, 1, <S2SV_ModStart> 1000 ) ; if ( ret < 0 ) { dev_err ( & usb_dev -> dev, ""atusb: <S2SV_blank> reg <S2SV_blank> = <S2SV_blank> 0x%x\\n"", reg ) ; return ret ; } ret = <S2SV_ModEnd> atusb_control_msg ( usb_dev <S2SV_ModStart> ATUSB_REQ_FROM_DEV, ret <S2SV_ModEnd>, 0, <S2SV_ModStart>, reg, NULL <S2SV_ModEnd>, 1, <S2SV_ModStart> 1000 ) ; if ( ret < 0 ) { dev_err ( & usb_dev -> dev, ""atusb: <S2SV_blank> reg <S2SV_blank> = <S2SV_blank> 0x%x\\n"", reg ) ; return",0
269,"<S2SV_ModStart> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> pTable, char * zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> pTable -> nModuleArg ; sqlite3_int64 <S2SV_ModEnd> * ( 2 <S2SV_ModStart> pTable -> nModuleArg ) ; char * * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; } else { sqlite3_int64 nBytes = sizeof ( char * ) * ( 2 + pTable -> nModuleArg ) ; char * * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; } else { int i = pTable -> nModuleArg",0
270,"<S2SV_ModStart> } } memcpy <S2SV_ModEnd> ( outbuffer,",0
271,"<S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE, ""AdaptationState <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero <S2SV_blank> in <S2SV_blank> DefaultICCintents"" ) ; goto Error ; } <S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE, ""AdaptationState <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero <S2SV_blank> in <S2SV_blank> the <S2SV_blank> DefaultICCintents"" ) ; goto Error ; } } else { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE, ""AdaptationState <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero <S2SV_blank> in <S2SV_blank> the <S2SV_blank> DefaultICCintents"" ) ; goto Error ; } <S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE, ""AdaptationState <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero <S2SV_blank> in <S2SV_blank> the <S2SV_blank> DefaultICCintents"" ) ; goto Error ; } } else { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE,",0
272,"<S2SV_ModStart> 32 ) { ut32 addr32 = r_read_le32 ( buf + i ) ; ut64 addr64 = r_read_le64 ( buf + i ) ; if ( addr64 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, addr64, type, bits ) ; r_list_append ( ret, ba ) ; } } } else { for ( i = 0 ; i < sec -> size ; i += 4 ) { ut64 addr64 = r_read_le64 ( buf + i ) ; if ( addr64 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, addr64, type, bits ) ; r_list_append ( ret, ba ) ; } } } } else { for ( i = 0 ; i < sec -> size ; i += 8 ) { ut64 addr64 = r_read_le64 ( buf + i ) ; if ( addr64 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, addr64, type, bits ) ; r_list_append ( ret, ba ) ; } }",0
273,"<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_IPV6_INTF_ADDR : if ( subl >= 4 ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; <S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_IPV6_INTF_ADDR : if ( subl >= 4 ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; <S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_IPV6_INTF_ADDR : if ( subl >= 4 ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_",0
274,<S2SV_ModStart> ; for ( j = 0 ; j < TWICE_QMF_SYNTH_CHANNELS_NUM ; j ++ ) { u [ j ] = * ptr_hbe_txposer -> qmf_in_buf [ idx + j * 2 * ptr_hbe_txposer -> synth_size + j ] ; u [ j ] = * ptr_hbe_txposer -> qmf_in_buf [ idx + j * 2 * ptr_hbe_txposer -> synth_size + j ] ; for ( j = 0 ; j < TWICE_QMF_SYNTH_CHANNELS_NUM ; j ++ ) { u [ j ] = * ptr_hbe_txposer -> qmf_in_buf [ idx + j * 2 * ptr_hbe_txposer -> synth_size + j ] ; u [ j ] = * ptr_hbe_txposer -> qmf_in_buf [ idx + j * 2 * ptr_hbe_txposer -> synth_size + j ] ; for ( j = 0 ; j < TWICE_QMF_SYNTH_CHANNELS_NUM ; j ++ ),0
275,<S2SV_ModStart> < q ) { if ( ONIGENC_IS_ZEROCHAR ( reg -> enc ) || ONIGENC_IS_UNSIGNEDCHAR ( reg -> enc ) || ONIGENC_IS_UNSIGNEDCHAR ( reg -> enc ) || ONIGENC_IS_UNSIGNEDCHAR ( reg -> enc ) || ONIGENC_IS_UNSIGNEDCHAR ( reg -> enc ) || ONIGENC_IS_UNSIGNEDCHAR ( reg -> enc ) || ONIGENC_IS_UNSIGNEDCHAR ( reg -> enc ) || ONIGENC_IS_UNSIGNEDCHAR ( reg -> enc ) || ONIGENC_IS_UNSIGNEDCHAR ( reg -> enc ) || ONIGENC_IS_UNSIGNEDCHAR ( reg -> enc ) || ONIGENC_IS_UNSIGNEDCHAR ( reg -> enc ) || ONIGENC_IS_UNSIGNEDCHAR ( reg -> enc ) || ONIGENC_IS_UNSIGNEDCHAR ( reg -> enc ) || ONIGENC_IS_UNSIGNEDCHAR ( reg -> enc ) || ONIGENC_IS_UNSIGNEDCHAR ( reg -> enc ) || ONIGENC_IS_UNSIGNEDCHAR ( reg -> enc ) || ONIGENC_IS_UNSIGNED,0
276,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfqq ) { struct bfq_data * bfqd = bfqq -> bfqd <S2SV_ModEnd> ; enum bfqq_expiration <S2SV_ModStart> flags ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else goto schedule_dispatch ; spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; return ;",0
277,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
278,"<S2SV_ModStart> continue ; RING_FINAL_CHECK_FOR_REQUESTS ( & vif -> tx, work_to_do ) ; if ( unlikely ( idx < vif -> tx. req_cons ) ) { netbk_tx_err ( vif, XEN_NETIF_ERR_RING_IDX, idx ) ; netbk_tx_err ( vif, XEN_NETIF_ERR_RING_IDX, idx ) ; break ; } idx = vif -> tx. req_cons ; rmb ( ) ; memcpy ( & txreq, RING_GET_REQUEST ( & vif -> tx, idx ), sizeof ( txreq ) ) ; if ( txreq. size > vif -> remaining_credit && tx_credit_exceeded ( vif, txreq. size ) ) { netbk_tx_err ( vif, XEN_NETIF_ERR_RING_IDX, idx ) ; break ; } idx = vif -> tx. req_cons ; rmb ( ) ; memcpy ( & txreq, RING_GET_REQUEST ( & vif -> tx, idx ), sizeof ( txreq ) )",0
279,<S2SV_ModStart> cb -> args [ 0 ] ; struct net * net = sock_net ( cb -> skb -> sk ) <S2SV_ModEnd> ; struct xfrm_policy_walk,0
280,<S2SV_ModStart> conn ) ; if ( h2o_timeout_is_linked ( & conn -> _read. timeout_entry ) ) { h2o_timeout_unlink ( & conn -> _read. timeout_entry ) ; do_emit_writereq ( conn ) ; },0
281,"<S2SV_ModStart> -> data ) ; struct xenvif_tx_request * txp ; struct xenvif_shared_info * shinfo = skb_shinfo ( skb ) ; int nr_frags = shinfo -> nr_frags ; int err, start ; err = gop -> status ; if ( unlikely ( err ) ) { pending_ring_idx_t index ; index = pending_index ( netbk -> pending_prod ++ ) ; txp = & pending_tx_info [ pending_idx ]. req ; make_tx_response ( vif, txp, XEN_NETIF_RSP_ERROR ) ; netbk -> pending_ring [ index ] = pending_idx ; xenvif_put ( vif ) ; } start = ( frag_get_pending_idx ( & shinfo -> frags [ 0 ] ) == pending_idx ) ; for ( i = 0 ; i < nr_frags ; i ++ ) { int j, newerr ; pending_idx = frag_get_pending_idx ( & shinfo -> frags [ i ] ) ; newerr = ( ++ gop ) -> status ; if ( unlikely ( newerr ) ) netbk_idx",0
282,,1
283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ;",0
284,<S2SV_ModStart> ; error = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ;,0
285,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
286,"<S2SV_ModStart> ; if ( client -> ipc == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } if ( client -> diffs && safe_str_eq ( type, T_CIB_DIFF_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> replace && safe_str_eq ( type, T_CIB_REPLACE_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> confirmations && safe_str_eq ( type, T_CIB_UPDATE_CONFIRM ) ) { do_send = TRUE ; } else if ( client -> pre_notify && safe_str_eq ( type, T_CIB_PRE_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> post_notify && safe_str_eq ( type, T_CIB_POST_NOTIFY ) ) { do_send =",0
287,"<S2SV_ModStart> + x > newDataLength <S2SV_ModEnd> || diffPtr + <S2SV_ModStart> + diffBlockLength || extraPtr <S2SV_ModEnd> + y > <S2SV_ModStart> + y > extraBlock + extraBlockLength <S2SV_ModEnd> ) { PyMem_Free <S2SV_ModStart> NULL ; } if ( newpos + diffBlockLength > origDataLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( newpos + diffBlockLength > origDataLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( newpos + diffBlockLength > origDataLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( newpos + diffBlockLength > origDataLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( newpos + diffBlockLength > origDataLength ) { PyMem_Free",0
288,<S2SV_ModStart> ; if ( UDF_I ( dir ) -> i_alloc_type == ICBTAG_FLAG_AD_IN_ICB ) epos. offset -= sizeof ( struct short_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_LONG ) epos. offset -= sizeof ( struct long_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_SHORT ) epos. offset -= sizeof ( struct short_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_LONG ) epos. offset -= sizeof ( struct long_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_LONG ) epos. offset -= sizeof ( struct long_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_SHORT ) epos. offset -= sizeof ( struct short_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_LONG ) epos. offset -= sizeof ( struct long_ad ) ; else,0
289,"<S2SV_ModStart> ( cmd == IP_VS_BASE_CTL || cmd == IP_VS_SO_GET_DAEMON ) { d [ 0 ]. state = IP_VS_STATE_MASTER ; strlcpy ( d [ 0 ]. mcast_name, ipvs -> master_mcast_name, sizeof ( d [ 0 ]. mcast_name ) ) ; d [ 0 ]. syncid = ipvs -> master_syncid ; } else { d [ 1 ]. state = IP_VS_STATE_BACKUP ; strlcpy ( d [ 1 ]. mcast_name, ipvs -> backup_mcast_name, sizeof ( d [ 1 ]. mcast_name ) ) ; d [ 1 ]. syncid = ipvs -> backup_syncid ; } if ( cmd == IP_VS_BASE_CTL || cmd == IP_VS_SO_GET_DAEMON ) { d [ 1 ]. state = IP_VS_BASE_CTL ; strlcpy ( d [ 1 ]. mcast_name, ipvs -> backup_mcast_name, sizeof ( d [ 1 ]. mcast_name ) ) ; d",0
290,"<S2SV_ModStart> pktopts ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> opt, & rcu_dereference ( <S2SV_ModStart> np -> tclass ) <S2SV_ModStart> np -> opt, & rcu_dereference ( <S2SV_ModStart> np -> opt, & rcu_dereference ( <S2SV_ModStart> np -> opt, & rcu_dereference ( <S2SV_ModStart> np -> opt, & rcu_dereference ( <S2SV_ModStart> np -> opt, & rcu_dereference ( rcu )",0
291,<S2SV_ModStart> ssize_t result ; if ( len < 0 ) return - EINVAL,0
292,"<S2SV_ModStart> ; char * fpath = NULL, * cgdir = NULL, * controller = NULL ; if (! fc_may_access ( fc, controller, path, O_RDWR ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_controller ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_controller ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_controller ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } ret = cgfs_create ( controller, cgroup, fc -> uid, fc -> gid ) ; printf ( ""cgfs_create",0
293,<S2SV_ModStart> ) ) { kfree ( disk ) ; disk = NULL ; continue ; } <S2SV_ModEnd> INIT_LIST_HEAD ( &,0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
295,"<S2SV_ModStart> ; if ( MagickMax ( number_pixels, MAX_PACKETS_PER_BIT ) > MAX_PACKETS_PER_BIT ) { MagickMax ( number_pixels, MAX_PACKETS_PER_BIT ) ; return NULL ; } if ( MagickMax ( number_pixels, MIN_PACKETS_PER_BIT ) > MAX_PACKETS_PER_BIT ) { MagickMax ( number_pixels, MAX_PACKETS_PER_BIT ) ; return NULL ; } if ( MagickMax ( number_pixels, MAX_PACKETS_PER_BIT ) > MAX_PACKETS_PER_BIT ) { MagickMax ( number_pixels, MAX_PACKETS_PER_BIT ) ; return NULL ; } if ( MagickMax ( number_pixels, MIN_PACKETS_PER_BIT ) > MAX_PACKETS_PER_BIT ) { MagickMax ( number_pixels, MAX_PACKETS_PER_BIT ) ; return NULL ; } if ( MagickMax ( number_pixels, MAX_PACKETS_PER_BIT ) > MAX_PACKETS_PER_BIT ) {",0
296,<S2SV_ModStart> ; int64_t index_pts ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; },0
297,<S2SV_ModStart> ; val = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 ) ; TEMP_FAILURE_RETRY (,0
298,"<S2SV_ModStart>, global_active ) ; install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; install_keyword_root ( ""security_context_manager"", & security_context_manager_handler, global_active ) ; install_keyword_root ( ""security_context_manager"", & security_context_manager_handler, global_active ) ; install_keyword_root ( ""security_context_manager"", & security_context_manager_handler, global_active ) ; install_keyword_root ( ""security_context"", & security_context_manager_handler, global_active ) ; install_keyword_root ( ""security_context_manager"", & security_context_manager_handler, global_active ) ; install_keyword_root ( ""security_context_manager"", & security_context_manager_handler, global_active ) ; install_keyword_root ( ""security_context_manager"", & security_context_manager_handler, global_active ) ; install_keyword_root ( ""security_context"", & security_context_manager_handler, global_active ) ; install_keyword",0
299,<S2SV_ModStart> data ) { const vpx_codec_priv_enc_mr_cfg_t * enc_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) data ; vpx_codec_ctx_t * ctx = ( vpx_codec_ctx_t * ) ctx ; vpx_codec_priv_enc_mr_cfg_t * next_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) next_cfg ; vpx_codec_priv_enc_mr_cfg_t * next_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) next_cfg ; vpx_codec_ctx_t * next_cfg = ( vpx_codec_ctx_t * ) next_cfg ; vpx_codec_priv_enc_mr_cfg_t * next_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) next_cfg ; vpx_codec_priv_enc_mr_cfg_t * next_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) next_cfg,0
300,"<S2SV_ModStart> key ) ; if ( tmpbuf [ strlen ( key ) ]!= '\\0' ) { kfree ( tmpbuf ) ; return - 1 ; } <S2SV_ModEnd> param = iscsi_check_key <S2SV_ModStart>, sender, param_list ) ; if (! param ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + strlen ( value ) + 2 ; continue ; } if ( iscsi_check_value ( param, value ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + strlen ( value ) + 2 ; if ( iscsi_check_acpi_state ( param, value ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + strlen ( value ) + 2 ; continue ; } if ( iscsi_check_acpi_state ( param, value ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; }",0
301,"<S2SV_ModStart> ( t -> stamp_path <S2SV_ModEnd>, true, <S2SV_ModStart>, UID_INVALID, GID_INVALID <S2SV_ModEnd>, 0 )",0
302,<S2SV_ModStart> ; if ( JAS_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
303,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert <S2SV_ModStart> { Py_ssize_t i ; if ( new_size > self -> memo_size ) { PyErr_NoMemory ( ) ; return - 1 ; } PyObject * * memo_new = self -> memo ; PyMem_RESIZE ( memo_new, PyObject *, new_size ) ; if ( memo_new == NULL ) { PyErr_NoMemory ( ) ; return - 1 ; } self -> memo = memo_new ; for ( i = self -> memo_size ; i < new_size ; i ++ ) { PyErr_NoMemory ( ) ; return - 1 ; } self -> memo = memo_new ; for ( i = self -> memo_size ; i < new_size ; i ++ ) { PyMem_RESIZE ( memo_new, PyObject *, new_size ) ; if ( memo_new == NULL ) { PyErr_NoMemory ( ) ; return - 1 ; } self -> memo = memo_new ; for ( i = self -> memo_size ; i < new_size ; i ++ ) { Py",0
304,"<S2SV_ModStart> ; int copylen <S2SV_ModEnd> ; bool zerocopy <S2SV_ModStart> ; if ( q -> flags & IFF_VNET_HDR ) { vnet_hdr_len = q -> vnet_hdr_sz ; err = - EINVAL ; if ( len < vnet_hdr. hdr_len ) goto err ; err = - EINVAL ; if ( len < vnet_hdr. hdr_len ) goto err ; len -= vnet_hdr. hdr_len ; err = memcpy_fromiovecend ( ( void * ) & vnet_hdr, iv, 0, sizeof ( vnet_hdr ) ) ; if ( err < 0 ) goto err ; len -= vnet_hdr_len ; err = memcpy_fromiovecend ( ( void * ) & vnet_hdr, iv, 0, sizeof ( vnet_hdr ) ) ; if ( err < 0 ) goto err ; len -= vnet_hdr. hdr_len ; skb = macvtap_alloc_skb ( & q -> sk, NET_IP_ALIGN, copylen, vnet_hdr. hdr_len, noblock, & err ) ; if",0
305,"<S2SV_ModStart> nexthdr ) { const struct ipv6_opt_hdr * opt = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + 1 ) ; struct ipv6_opt_hdr * nexthdr = ( struct ipv6_opt_hdr * ) ( skb_tail_pointer ( skb ) + 1 ) ; struct ipv6_opt_hdr * nexthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + offset ) ; int found_rhdr = 0 ; if ( * nexthdr ) { switch ( * * nexthdr ) { case NEXTHDR_HOP : break ; case NEXTHDR_ROUTING : found_rhdr = 1 ; break ; case NEXTHDR_DEST : if ( ipv6_find_tlv ( skb, offset, IPV6_TLV_HAO ) >= 0 ) break ; # endif if ( found_rhdr ) break ; # if IS_ENABLED ( CONFIG_IPV6_MIP6 ) if ( find_tlv ( skb, offset, IPV6_TLV_HAO ) >= 0 ) break ; #",0
306,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
307,"<S2SV_ModStart> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; near_ref [ vcnt ] = left -> mbmi. ref_frame ; } vcnt ++ ; if ( left -> mbmi. ref_frame!= INTRA_FRAME ) { near_mvs [ vcnt ]. as_int = left -> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; near_ref [ vcnt ] = left -> mbmi. ref_frame ; } vcnt ++ ; if ( aboveleft -> mbmi. ref_frame!= INTRA_FRAME ) { near_mvs [ vcnt ]. as_int = left -> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, &",0
308,<S2SV_ModStart> ; if ( msg -> msg_name ) { msg -> msg_name = msg -> msg_name ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; } if ( msg -> msg_name ) { msg -> msg_name = msg -> msg_name ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; } if ( msg -> msg_name ) { msg -> msg_name = msg -> msg_name ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen,0
309,"<S2SV_ModStart> return ; } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_",0
310,"<S2SV_ModStart> ) ) { pr_err <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> """,0
311,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
312,"<S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) addip <S2SV_ModEnd> ; __u32 serial <S2SV_ModStart> * hdr ; sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; chunk_len = ntohs ( asconf -> chunk_hdr -> length ) - sizeof ( sctp_addiphdr_t ) ; serial = ntohl ( hdr -> serial ) ; length = ntohs ( addip -> param_hdr. length ) ; asconf_param = ( void * ) addip + ntohs ( addip -> p. length ) ; chunk_len -= length ; asconf_ack = sctp_make_asconf_ack ( asoc, addip, serial, chunk_len * 4 ) ; if (! asconf_ack ) goto done ; err_code = sctp_process_asconf_param ( asoc, asconf,",0
313,"<S2SV_ModStart> ; JAS_DBGLOG ( 100 <S2SV_ModEnd>, ( ""jas_realloc <S2SV_blank> called <S2SV_blank> with <S2SV_blank> %x,%zu\\n"" <S2SV_ModStart> ( 101, ( ""jas_realloc(%p, <S2SV_blank> %zu) <S2SV_blank> -> <S2SV_blank> %p\\n"", ptr, size )",0
314,<S2SV_ModStart> exit ; } if ( unlikely ( m -> msg_name ) ) { m -> msg_name = 0 ; m -> msg_namelen = sizeof ( struct sockaddr_tipc ) ; m -> msg_namelen = sizeof ( struct sockaddr_tipc ) ; m -> msg_namelen = 0 ; m -> msg_namelen = sizeof ( struct sockaddr_tipc ) ; m -> msg_namelen = sizeof ( struct sockaddr_tipc ) ; m -> msg_name = NULL ; m -> msg_namelen = 0 ; m -> msg_namelen = sizeof ( struct sockaddr_tipc ) ; m -> msg_namelen = sizeof ( struct sockaddr_tipc ) ; m -> msg_namelen = sizeof ( struct sockaddr_tipc ) ; m -> msg_namelen = sizeof ( struct sockaddr_tipc ) ; m -> msg_namelen = sizeof ( struct sockaddr_tipc ) ; m -> msg_name = NULL ; m -> msg_namelen = 0 ; m -> msg_namelen = sizeof ( struct sockaddr_tipc ) ; m -> msg_,0
315,<S2SV_ModStart> break ; # ifdef CONFIG_KVM_GUEST_KERNEL case KVM_GUEST_KERNEL_VERSION : case KVM_GUEST_KERNEL_VERSION_1 : case KVM_GUEST_KERNEL_VERSION_2 : case KVM_GUEST_KERNEL_VERSION_3 : case KVM_GUEST_KERNEL_VERSION_2 : case KVM_GUEST_KERNEL_VERSION_3 : case KVM_GUEST_KERNEL_VERSION : case KVM_GUEST_KERNEL_VERSION : case KVM_GUEST_KERNEL_VERSION_1 : case KVM_GUEST_KERNEL_VERSION_2 : case KVM_GUEST_KERNEL_VERSION_3 : case KVM_GUEST_KERNEL_VERSION_2 : case KVM_GUEST_KERNEL_VERSION_3 : case KVM_GUEST_KERNEL_VERSION :,0
316,<S2SV_ModStart> msicap ; pci_populate_msicap <S2SV_ModEnd> ( & msicap,0
317,"<S2SV_ModStart> } keylen = utf8s_to_utf16s <S2SV_ModEnd> ( key_name, <S2SV_ModStart> ( key_name ), & kvp_data -> data. key ) ; kvp_data -> data. key_size = 2 * ( keylen + 1 ) ; valuelen = utf8s_to_utf16s <S2SV_ModEnd> ( value, <S2SV_ModStart> ( value ), & valuelen <S2SV_ModEnd> ) ; kvp_data <S2SV_ModStart> valuelen + 1 ) ; kvp_data -> data. value_size = 2 * ( valuelen + 1 ) ; kvp_data -> data. value_type = REG_SZ ; icmsghdrp -> status = HV_S_OK ; response_done : icmsghdrp -> icflags = ICMSGHDRFLAG_TRANSACTION | ICMSGHDRFLAG_RESPONSE ; vmbus_sendpacket ( channel, req_id, sizeof ( struct vmbuspipe_hdr ) + sizeof ( struct icmsg_hdr ) + sizeof ( struct icmsg_hdr ) ] ; kvp_data -> data. key_size = 2 * ( keylen + 1 ) ; icmsghdrp -> status = HV_S_OK ;",0
318,"<S2SV_ModStart> ; ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx ) ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx ) ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx ) ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx ) ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx ) ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx ) ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx ) ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx ) ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx )",0
319,"<S2SV_ModStart> ; } } else { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; }",0
320,"<S2SV_ModStart> * mbuf = NULL ; int is_ext_ctrl = ( cmd == VIDIOC_S_EXT_CTRLS || cmd == VIDIOC_G_EXT_CTRLS || cmd == VIDIOC_TRY_EXT_CTRLS ) <S2SV_ModEnd> ; size_t ctrls_size <S2SV_ModStart> case _IOC_NONE : mbuf = kmalloc ( sizeof ( sbuf ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out ; if ( _IOC_DIR ( cmd ) & _IOC_READ ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out ; parg = mbuf ; } err = - EFAULT ; if ( _IOC_DIR ( cmd ) & _IOC_WRITE ) if ( copy_from_user ( parg, ( void __user * ) arg, _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out_ext",0
321,"<S2SV_ModStart> ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'""",0
322,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( rtl8150_t <S2SV_ModStart> data ) { int ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, RTL8150_REQ_SET_REGS, RTL8150_REQT_WRITE, indx <S2SV_ModEnd>, data, <S2SV_ModStart> 500 ) ; if ( ret < 0 ) return ret ; return ret ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>",0
323,"<S2SV_ModStart> { case RESPONSE_RUN : { screen = gtk_widget_get_screen ( GTK_WIDGET ( parameters -> parent_window ) ) ; uri = nautilus_file_get_uri ( parameters -> file ) ; DEBUG ( ""Launching <S2SV_blank> untrusted <S2SV_blank> launcher <S2SV_blank> %s"", uri ) ; nautilus_launch_desktop_file ( screen, uri, NULL, parameters -> parent_window ) ; g_free ( uri ) ; } break ; case RESPONSE_MARK_TRUSTED : { file = nautilus_file_get_location ( parameters -> file ) ; g_object_unref ( file ) ; nautilus_file_mark_desktop_file_trusted ( file, parameters -> parent_window, TRUE, NULL, NULL ) ; g_object_unref ( file ) ;",0
324,"<S2SV_ModStart> -> lsr_event ) { dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 0, edge_port -> lsr_mask, * data ) ; -- urb -> actual_length ; } if ( urb -> actual_length ) { dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 1, edge_port -> lsr_mask, * data ) ; -- urb -> actual_length ; ++ data ; } if ( urb -> actual_length ) { dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank>",0
325,"<S2SV_ModStart> <S2SV_null> <S2SV_null> struct cifsSesInfo <S2SV_ModEnd> * cifs_find_smb_ses ( <S2SV_ModStart> server -> smb_ses_list ) { struct cifsSesInfo * ses ; <S2SV_ModStart> smb_ses_list ) ; ses = list_entry ( tmp, struct cifsSesInfo, smb_ses_list ) ; if (! ses ) { write_unlock ( & cifs_tcp_ses_lock ) ; return NULL ; } <S2SV_ModEnd> ++ ses ->",0
326,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( & ctx -> cfg, 0, sizeof ( ctx -> cfg ) ) ; <S2SV_ModStart> ( cfg -> <S2SV_ModEnd> g_lag_in_frames > 1 <S2SV_ModStart> ( cfg -> <S2SV_ModEnd> g_pass!= VPX_RC_ONE_PASS <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; res = validate_config ( ctx, cfg, & ctx -> vp8_cfg, 0 ) ; if (! res ) { ctx -> cfg = * cfg ; set_vp8e_config ( & ctx -> oxcf",0
327,"<S2SV_ModStart>'<S2SV_blank>') { ptr = strchr ( input,'<S2SV_blank>') ; ptr2 = strchr ( ptr,'<S2SV_blank>') ; if ( ptr2 ) { * ptr2 = 0 ; off = r_num_math ( core -> num, ptr2 + 1 ) ; } if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n",0
328,"<S2SV_ModStart> ( vm_flags & VM_NORESERVE <S2SV_ModEnd> ) return 0 <S2SV_ModStart> return chg ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; else { struct resv_map * resv_map = resv_map_alloc ( ) ; if (! resv_map ) resv_map_free ( resv_map ) ; set_vma_resv_flags ( vma, HPAGE_RESV_OWNER ) ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; else { struct resv_map * resv_map = resv_map_alloc ( ) ; if (! resv_map ) resv_map_free ( resv_",0
329,"<S2SV_ModStart> { struct key * keyring = NULL ; if ( new -> thread_keyring ) { keyring = key_dup ( ""_tid"", new -> uid, new -> gid, new, KEY_POS_ALL | KEY_USR_VIEW, NULL, NULL ) ; if ( IS_ERR ( keyring ) ) return PTR_ERR ( keyring ) ; new -> thread_keyring = NULL ; } else { keyring = key_alloc ( ""_tid"", new -> uid, new -> gid, new, KEY_POS_ALL | KEY_USR_VIEW, KEY_ALLOC_QUOTA_OVERRUN, NULL, NULL ) ; if ( IS_ERR ( keyring ) ) return PTR_ERR ( keyring ) ; }",0
330,"<S2SV_ModStart> = 0 ; # ifdef __APPLE_CC__ static size_t scanned ; static size_t readnbd ; if ( readnbd > ( size_t ) 0U ) { readnbd -= scanned ; memmove ( cmd + scanned, cmd + scanned, readnbd ) ; scanned = ( size_t ) 0U ; } pfd. revents = 0 ; while ( ( readnb = read ( clientfd, cmd + scanned, cmdsize - scanned ) ) < ( ssize_t ) 0 && errno == EINTR ) { while ( ( readnb = SSL_read ( clientfd, cmd + scanned, cmdsize - scanned ) ) < ( ssize_t ) 0 && errno == EINTR ) ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { while ( ( readnb = read ( clientfd, cmd + scanned, cmdsize - scanned ) ) < ( ssize_t ) 0 && errno == EINTR ) ) { while ( ( readnb = read ( clientfd, cmd + scanned, cmdsize - scanned ) ) < ( ssize_t ) 0 && errno == EINTR",0
331,"<S2SV_ModStart> orig ) ; buf = mrb_iv_get ( mrb, orig, mrb_intern_cstr ( mrb, ""@buf"" ) ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; DATA_TYPE ( copy ) = & mrb_io_type ; DATA_PTR ( copy ) = fptr_copy ; buf = mrb_iv_get ( mrb, orig, mrb_intern_cstr ( mrb, ""@buf"" ) ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf",0
332,"<S2SV_ModStart> } ; struct keyring_search_data match_data = {. cmp = key_match,. raw_data = description,. lookup_type = KEYRING_SEARCH_LOOKUP_DIRECT, } ; if (! key_is_positive ( target_id ) ) authkey = ERR_PTR ( - EINVAL ) ; else authkey = key_ref_to_ptr ( authkey_ref ) ; if ( test_bit ( KEY_FLAG_REVOKED, & authkey -> flags ) ) authkey = ERR_PTR ( - EKEYREVOKED ) ; if ( test_bit ( KEY_FLAG_REVOKED, & authkey -> flags ) ) authkey = ERR_PTR ( - EKEYREVOKED ) ; if ( test_bit ( KEY_FLAG_REVOKED, & authkey -> flags ) ) authkey = ERR_PTR ( - EKEYREVOKED ) ; if ( test_bit ( KEY_FLAG_REVOKED, & authkey -> flags ) ) authkey = ERR_PTR ( - EKEYREVOKED ) ; if ( test_bit ( KEY_FLAG_REVOKED,",0
333,<S2SV_ModStart> cpi ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VPX_FLAG_HIGHBITDEPTH ) cpi -> cur_buf -> flags &= ~ VPX_FLAG_HIGHBITDEPTH ; # endif # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VPX_FLAG_HIGHBITDEPTH ) cpi -> cur_buf -> flags &= ~ VPX_FLAG_HIGHBITDEPTH ; # endif # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VPX_FLAG_HIGHBITDEPTH ) cpi -> cur_buf -> flags &= ~ VPX_FLAG_HIGHBITDEPTH ; # endif # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VPX_FLAG_HIGHBITDEPTH ) cpi -> cur_buf -> flags &= ~ VPX_FLAG_HIGHBITDEPTH ; # endif # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VPX_FLAG_HIGHBITDEPTH ) cpi -> cur_buf,0
334,"<S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return res ; <S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof",0
335,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; struct x86_emulate_ops ops = ctxt -> ops ; if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) ops -> get_segment ( ctxt, & old_cs, & old_eip, & ops ) ; else ops -> get_segment ( ctxt, & old_cs, & old_eip, & ops ) ; old_eip = ctxt -> _eip ; memcpy ( & old_eip, ctxt -> src. val + ctxt -> op_bytes, 2 ) ; ops -> set_segment ( ctxt, & old_cs, & new_desc, VCPU_SREG_CS ) ; if ( ops -> get_segment ( ctxt, & old_cs, VCPU_SREG_CS ) == NULL ) ops -> get_segment ( ctxt, & old_cs, VCPU_SREG_CS ) ; old_eip = ctxt -> _eip ; memcpy ( & old_eip, ctxt -> src. val + ctxt -> op_bytes, 2 ) ; rc = em_push ( ctxt ) ; if ( rc!=",0
336,"<S2SV_ModStart> ; if ( log2_band_prec_width < 0 || log2_band_prec_height < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""log2_band_prec_width <S2SV_blank> must <S2SV_blank> be <S2SV_blank> %d\\n"", log2_band_prec_width ) ; av_log ( avctx, AV_LOG_ERROR, ""log2_band_prec_height <S2SV_blank> must <S2SV_blank> be <S2SV_blank> %d\\n"", log2_band_prec_height ) ; av_log ( avctx, AV_LOG_ERROR, ""log2_band_prec_width <S2SV_blank> must <S2SV_blank> be <S2SV_blank> %d\\n"", log2_band_prec_width ) ; av_log ( avctx, AV_LOG_ERROR, ""log2_band_prec_height <S2SV_blank> must <S2SV_blank> be <S2SV_blank> %d\\n"", log2_band_prec_height ) ; av_log ( avctx, AV_LOG_ERROR, ""log2_band_prec_height <S2SV_blank> must <S2SV_blank> be <S2SV_blank> %d\\n"", log2_band_prec_height ) ; av_log ( avctx, AV_LOG_ERROR",0
337,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> No <S2SV_blank> extension <S2SV_blank> specified\\n"" ) ; return ; }",0
338,"<S2SV_ModStart> } struct reloc_struct_t * got_table = calloc ( 1, n_got * sizeof ( ut32 ) ) ; if (! got_table ) { goto out_error ; } <S2SV_ModStart> * got_table = calloc ( 1, n_got * sizeof ( ut32 ) ) ; if (! got_table ) { goto out_error ; } <S2SV_ModStart> * reloc_table = calloc ( 1, n_got * sizeof ( struct reloc_struct_t ) ) ; if ( got_table ) { ut32 offset = 0 ; for ( i = 0 ; i < n_got ; offset += 4, i ++ ) { ut32 got_entry ; if (! VALID_GOT_ENTRY ( got_entry ) || len!= sizeof ( ut32 ) ) { break ; } len = r_buf_read_at ( obj -> b, offset, ( ut8 * ) & got_entry, sizeof ( ut32 ) ) ; if (! VALID_GOT_ENTRY ( got_entry ) || len!= sizeof ( ut32 ) ) { break ; } len = r_buf_read_at ( obj -> b, offset, ( ut8 *",0
339,"<S2SV_ModStart> info -> si_code < 0 || info -> si_signo <S2SV_ModEnd> >= 0 ) <S2SV_ModStart> - EPERM ; if ( info -> si_signo!= sig ) { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } else { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } if ( info -> si_code >= 0 ) { info -> si_code = - EPERM ; info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } if ( info -> si_code < 0 ) { info -> si_code = - EPERM ; } else { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } if ( info -> si_code >= 0 ) { info -> si_code = - EPERM ; info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } if ( info -> si_code >= 0 )",0
340,"<S2SV_ModStart> tw ; * p_tx0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x0 ) ; * p_tx1 = opj_int_min ( ( OPJ_INT32 ) ( p_cp -> tx0 + q * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x1 ) ; * p_ty0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y0 ) ; <S2SV_ModStart> = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y1 ) ; * p_ty1 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT",0
341,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * create_output_name <S2SV_ModStart> dir ) ; if (! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! name ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! name ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if ( ( c = * fname ++ ) < 0xC0 ) && ( c < 0xE0 ) ) { x = ( c & 0x1F ) << 12 ; x |= ( * fname ++ & 0x3F ; } else if ( ( c >= 0xC0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F ) ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) {",0
342,"<S2SV_ModStart> php_unserialize_data_t var_hash ; zval * classes = NULL ; HashTable * class_hash = NULL ; if ( zend_parse_parameters ( ZEND_NUM_ARGS ( ), ""s|a"", & buf, & buf_len, & classes, & class_hash ) == FAILURE ) { RETURN_FALSE ; } if ( classes ) { class_hash = zend_hash_str_find ( Z_ARRVAL_P ( classes ), ""allowed_classes"", sizeof ( ""allowed_classes"" ) - 1 ) ; } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; } } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; } if ( classes ) { class_hash = zend_hash_str_find ( Z_ARRVAL_P ( classes ), ""allowed_classes"", sizeof ( ""allowed_classes"" ) - 1 ) ; } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; FREE_HASH",0
343,<S2SV_ModStart> goto __err ; <S2SV_ModEnd> tu -> queue,0
344,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; <S2SV_ModEnd> tmp_str = gf_malloc <S2SV_ModStart> tmp_strsize ) { if (! tmp_str ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_",0
345,<S2SV_ModStart> = VPX_CODEC_INCAPABLE ; else if (! ctx -> iface -> enc. get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> priv -> alg_priv ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> priv -> alg_priv -> get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> priv -> alg_priv -> get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> priv -> alg_priv -> get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> priv -> alg_priv -> get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> priv -> alg_priv -> get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> priv -> alg_priv ->,0
346,<S2SV_ModStart> FALSE ; BOOL <S2SV_ModEnd> flag_G = FALSE <S2SV_ModStart> FALSE ; BOOL <S2SV_ModEnd> flag_n = FALSE <S2SV_ModStart> FALSE ; BOOL <S2SV_ModEnd> flag_G = FALSE <S2SV_ModStart> FALSE ; BOOL <S2SV_ModEnd> flag_n = FALSE <S2SV_ModStart> FALSE ; BOOL <S2SV_ModEnd> flag_G = FALSE <S2SV_ModStart> FALSE ; BOOL <S2SV_ModEnd> flag_n = FALSE <S2SV_ModStart> FALSE ; BOOL <S2SV_ModEnd> flag_G = FALSE <S2SV_ModStart> FALSE ; BOOL <S2SV_ModEnd> flag_n = FALSE <S2SV_ModStart> FALSE ; BOOL <S2SV_ModEnd> flag_G = FALSE <S2SV_ModStart> FALSE ; BOOL flag_n = <S2SV_ModStart> FALSE ; BOOL <S2SV_ModEnd> flag_n = FALSE <S2SV_ModStart> FALSE ; BOOL <S2SV_ModEnd> flag_G = FALSE <S2SV_ModStart> FALSE ; BOOL flag_G = FALSE ; BOOL flag_n = FALSE ; BOOL flag_G = FALSE ; BOOL flag_G = FALSE ; BOOL flag_n = FALSE ; BOOL flag_G = FALSE ; BOOL flag_G = FALSE ; BOOL flag_n = FALSE ; BOOL flag_G = FALSE ; BOOL flag_G = FALSE ; BOOL flag_n = FALSE ; BOOL flag_G = FALSE ; BOOL flag_G = FALSE ; BOOL flag_G = FALSE ; BOOL flag_n = FALSE ; BO,0
347,"<S2SV_ModStart> ; s -> seekable = strtoll ( p <S2SV_ModEnd>, NULL, <S2SV_ModStart> 10 ) ; if ( s -> seekable == - 1 && (! s -> is_akamai || s -> filesize!= 2147483647 ) ) h -> is_streamed = 0 ; } else if ( s -> seekable == - 1 && (! s -> is_akamai || s -> filesize!= 2147483647 ) ) h -> is_streamed = 0 ; if ( ( slash = strchr ( p, '/' ) ) && strlen ( slash ) > 0 ) { s -> seekable = strtoll ( slash + 1, NULL, 10 ) ; if (! s -> is_akamai || s -> filesize!= 2147483647 ) h -> is_streamed = 0 ; } else if ( s -> seekable == - 1 && (! s -> is_akamai || s -> filesize!= 2147483647 ) ) h -> is_streamed = 0 ; } if ( s -> seekable == - 1 && (! s -> is_akamai || s -> filesize!= 2147483647 ) ) h -> is_streamed = 0 ;",0
348,"<S2SV_ModStart> * cr ; unsigned int maxw, maxh, max ; unsigned int offset, upb ; maxw = ( unsigned int ) img -> comps [ 0 ]. w ; maxh = ( unsigned int ) img -> comps [ 0 ]. h ; maxw = ( unsigned int ) img -> comps [ 0 ]. w ; maxh = ( unsigned int ) img -> comps [ 0 ]. h ; maxw = ( unsigned int ) img -> comps [ 0 ]. w ; maxh = ( unsigned int ) img -> comps [ 0 ]. h ; max = maxw * maxh ; y = img -> comps [ 0 ]. data ; cb = img -> comps [ 1 ]. data ; cr = img -> comps [ 2 ]. data ; d0 = r = ( int * ) malloc ( sizeof ( int ) * max ) ; d1 = g = ( int * ) malloc ( sizeof ( int ) * max ) ; d2 = b = ( int * ) malloc ( sizeof ( int ) * max ) ; if ( r == NULL || g == NULL || b == NULL ) goto fails ; for ( i = 0U ; i < maxh ; ++ i ) { for ( j",0
349,"<S2SV_ModStart> void nfs4_state_set_mode_locked ( fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> == mode ) return ; if ( ( fmode & FMODE_READ )!= ( state -> state & FMODE_READ ) <S2SV_ModEnd> ) { if <S2SV_ModStart> FMODE_WRITE ) ) { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } else { if ( ( state -> state & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( ( state -> state & FMODE_WRITE )!= ( state -> state & FMODE_WRITE ) ) list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } state -> state = mode ; } else { if ( ( state -> state & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( ( state -> state & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( ( state -> state & FMODE_READ )!= ( state -> state & FMODE_READ ) ) list_move_tail ( & state",0
350,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; if ( ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; for ( i = 0 ; i < PROPOSAL_MAX ; i ++ ) if ( ( r = sshpkt_get_u8 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; for ( i = 0 ; i < PROPOSAL_MAX ; i ++ ) if ( ( r = sshpkt_get_u8 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) ) )!= 0 || (",0
351,"<S2SV_ModStart> ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule{ <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.one <S2SV_blank> + <S2SV_blank> 1 <S2SV_blank> == <S2SV_blank> tests.constants.two <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule{ <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule{ <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule{ <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule{ <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.foo <S2SV_blank> == <S2SV_blank> \\""foo\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
352,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) InheritException ( exception, & image -> exception ) ; if ( status == MagickFalse ) InheritException ( exception, & image -> exception ) ; if ( status == MagickFalse ) InheritException ( exception, & image -> exception ) ; if ( status == MagickFalse ) InheritException ( exception, & image -> exception ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) InheritException ( exception, & image -> exception ) ; if ( status == MagickFalse ) InheritException ( exception, & image -> exception ) ; if ( status == MagickFalse ) InheritException ( exception, & image -> exception ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
353,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> char lbase [ <S2SV_ModStart> 256 ] ; char ltest [ 256 ] ; char strbase [ 256 ] ; char ltest [ 256 ] ; char strtest [ 256 ] ; if ( parse_cmdline_cmp ( argc, argv, & inParam ) == 1 ) { compare_dump_files_help_display ( ) ; goto cleanup ; } printf ( ""******Parameters********* <S2SV_blank> \\n"" ) ; printf ( "" <S2SV_blank> base_filename <S2SV_blank> = <S2SV_blank> %s\\n"", inParam. base_filename ) ; printf ( "" <S2SV_blank> test_filename <S2SV_blank> = <S2SV_blank> %s\\n"", inParam. test_filename ) ; if ( ( fbase = fopen ( inParam. base_filename, ""rb"" ) ) == NULL ) { goto cleanup ; } printf ( ""Ok.\\n"" ) ; while ( fgets ( lbase, sizeof ( lbase ), fbase ) && fgets ( ltest, sizeof ( ltest ), ftest ) ) { int nbase = sscanf ( lbase, ""%255[^\\r\\n]"", strbase ) ; int ntest = sscanf ( ltest, ""%255[^\\r\\n]""",0
354,"<S2SV_ModStart> intf ) { int ret = - ENODEV ; if ( intf -> altsetting!= CDC_NCM_COMM_ALTSETTING_NCM ) return - ENODEV ; if ( cdc_ncm_select_altsetting ( intf )!= CDC_NCM_COMM_ALTSETTING_NCM ) return - ENODEV ; if ( intf -> altsetting == CDC_NCM_DATA_ALTSETTING_NCM ) return - ENODEV ; if ( intf -> altsetting == CDC_NCM_COMM_ALTSETTING_NCM ) return - ENODEV ; ret = cdc_ncm_bind_common ( dev, intf, CDC_NCM_DATA_ALTSETTING_NCM, 0 ) ; if ( ret < 0 ) return ret ; if ( intf -> altsetting == CDC_NCM_COMM_ALTSETTING_NCM ) return ret ; if ( intf -> altsetting == CDC_NCM_COMM_ALTSETTING_NCM ) ret = cdc_ncm_bind_common ( dev, intf, CDC_NCM_COMM_ALT",0
355,"<S2SV_ModStart> 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { memcpy ( elem. in_sg [ 0 ]. iov_base, buf, len ) ; virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. out_sg [ 0 ]. iov_len!= len ) { memcpy ( elem. out_sg [ 0 ]. iov_base, buf, len ) ; virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. out_sg [ 0 ]. iov_len!= len ) { memcpy ( elem. out_sg [ 0 ]. iov_base, buf, len ) ; virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; }",0
356,"<S2SV_ModStart> i, ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] )",0
357,"<S2SV_ModStart> ; err = check_entry_size_and_hooks ( e, newinfo, base, limit, hook_entries, underflows, valid_hooks ) ; if ( err ) return err ; for ( h = 0 ; h < NF_INET_NUMHOOKS ; h ++ ) { if (! ( valid_hooks & ( 1 << h ) ) ) continue ; if ( ( unsigned char * ) e - base == hook_entries [ h ] ) newinfo -> hook_entry [ h ] = hook_entries [ h ] ; if ( ( unsigned char * ) e - base == underflows [ h ] ) newinfo -> underflow [ h ] = underflows [ h ] ; if ( ( unsigned char * ) e - base == hook_entries [ h ] ) newinfo -> hook_entry [ h ] = hook_entries [ h ] ; if ( ( unsigned char * ) e - base == hook_entries [ h ] ) newinfo -> hook_entry [ h ] = hook_entries [ h ] ; if ( ( unsigned char * ) e - base == underflows [ h ] ) newinfo -> underflow [ h ] = underflows [ h ] ; if ( ( unsigned",0
358,"<S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Invalid <S2SV_blank> chunk <S2SV_blank> format"" ) ; return AVERROR_PATCHWELCOME ; }",0
359,"<S2SV_ModStart> 1 ) ; } if ( length == 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length == 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length == 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 0 ) ; } if ( length == 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( length == 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length == 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 0 ) ; } if ( length == 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 0 ) ; }",0
360,<S2SV_ModStart> q ) { <S2SV_ModEnd> snd_seq_timer_stop ( q <S2SV_ModStart> timer ) ; snd_use_lock_sync ( & q -> use_lock ) ; snd_seq_prioq_delete ( & q -> tickq ) ; snd_seq_prioq_delete ( & q -> timeq ) ; snd_seq_timer_delete ( & q -> timer ) ;,0
361,"<S2SV_ModStart> int error ; pgoff_t start = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; unsigned int start_offset = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; pgoff_t end = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; unsigned int end_offset = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; pgoff_t curr ; struct page * page ; error = grab_cache_page ( inode -> i_mapping, curr, AOP_FLAG_NOFS ) ; if ( unlikely (! ( mode & FALLOC_FL_KEEP_SIZE ) ) { i_size_write ( inode, offset + to ) ; } unlock_page ( page ) ; page_cache_release ( page ) ; if ( error ) goto out ; curr ++ ; offset += PAGE_CACHE_SIZE ; from = 0 ; to = PAGE_CACHE_SIZE ; error = write_empty_blocks ( page, from, to, mode ) ; if (! error &&! ( mode & FALLOC_FL_KEEP_SIZE ) ) { i_size_write ( inode, offset + to )",0
362,"<S2SV_ModStart> b ) ; VipsForeignLoadClass * class = VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; if ( class == NULL ) return ( NULL ) ; if ( <S2SV_ModStart> load ) ||! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; <S2SV_ModStart> ( load ) ||! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; vips_image_pipelinev ( load -> out, load -> out -> dhint, load -> real, NULL ) ; } else { g_object_set_qdata ( G_OBJECT ( load -> real ), vips__foreign_load_operation, load ) ; if ( class -> load ( load ) ||! vips_image_pio_input ( load -> real ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out )",0
363,"<S2SV_ModStart> { const char * name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; verified = 1 ; break ; } } } if ( noffset == - FDT_ERR_BADSTRUCTURE || noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; }",0
364,"<S2SV_ModStart> ; cursor -> offset = XFS_LB_HASH ( mp, leaf -> m_sb. sb_dblocks ) ; if ( cursor -> offset == XFS_LB_HASH ( mp, leaf -> m_sb. sb_dblocks ) ) { cursor -> offset = XFS_LB_HASH ( mp, leaf -> m_sb. sb_dblocks ) ; cursor -> flags &= ~ XFS_LB_HASH ( mp, leaf -> m_sb. sb_dblocks ) ; } cursor -> offset = XFS_LB_HASH ( mp, leaf -> m_sb. sb_dblocks ) ; if ( cursor -> offset == XFS_LB_HASH ( mp, leaf -> m_sb. sb_dblocks ) ) { cursor -> offset = XFS_LB_HASH ( mp, leaf -> m_sb. sb_dblocks ) ; cursor -> flags &= ~ XFS_LB_HASH ( mp, leaf -> m_sb. sb_dblocks ) ; } if ( cursor -> offset == XFS_LB_HASH ( mp, leaf -> m_sb. sb_dblocks ) ) { cursor -> offset = XFS_LB_HASH ( mp, leaf",0
365,"<S2SV_ModStart> ( kfifo_alloc ( & state -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL ) ) return - ENOMEM ; state -> dev = dev ; sd = & state -> sd ; v4l2_subdev_init ( sd, & cx23888_ir_controller_ops ) ; v4l2_set_subdevdata ( sd, state ) ; snprintf ( sd -> name, sizeof ( sd -> name ), ""%s/888-ir"", dev -> name ) ; sd -> grp_id = CX23885_HW_888_IR ; ret = v4l2_device_register_subdev ( & dev -> v4l2_dev, sd ) ; if ( ret == 0 ) { cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> rx_params_lock ) ; default_params = default_rx_params ; v4l2_subdev_call ( sd, ir, rx_s_parameters",0
366,"<S2SV_ModStart> service_name_tlv_length ) ; if ( service_name_tlv ) size += service_name_tlv_length <S2SV_ModEnd> ; miux = <S2SV_ModStart> miux_tlv_length ) ; if ( miux_tlv ) size += miux_tlv_length <S2SV_ModEnd> ; rw_tlv = <S2SV_ModStart> rw_tlv_length ) ; if ( rw_tlv ) size += rw_tlv_length <S2SV_ModEnd> ; pr_debug ( <S2SV_ModStart> pr_debug ( ""SKB <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> SN <S2SV_blank> length <S2SV_blank> %zu\\n"", size, sock -> service_name_len ) ; skb = llcp_allocate_pdu ( sock, LLCP_PDU_CONNECT, size ) ; if ( skb == NULL ) { err = - ENOMEM ; goto error_tlv ; } pr_debug ( ""SKB <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> SN <S2SV_blank> length <S2SV_blank> %zu\\n"", size, sock -> service_name_len ) ; skb = llcp_allocate_pdu ( sock, LLCP_PDU_CONNECT, size ) ; if ( skb == NULL ) { err = - ENOMEM ; goto",0
367,"<S2SV_ModStart> void ) { <S2SV_ModEnd> struct monitor * <S2SV_ModStart> = active_state ; <S2SV_ModEnd> if ( options <S2SV_ModStart>. compression ) { mon -> m_zback = mm_create ( NULL, MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; ssh_packet_set_compress_hooks ( ssh, mon -> m_zlib, ( ssh_packet_alloc_func * ) mm_zalloc, ( ssh_packet_free_func * ) mm_zfree ) ; } else { mon -> m_zlib = mm_create ( NULL, MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; ssh_packet_set_compress_hooks ( ssh, mon -> m_zlib, ( ssh_packet_alloc_func * ) mm_zalloc, ( ssh_packet_free_func * ) mm_zfree ) ; }",0
368,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_ERROR_CONCEALMENT ) &&! ( iface -> caps & VPX_CODEC_CAP_ERROR_CONCEALMENT ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE",0
369,"<S2SV_ModStart> * chan ; jas_uint16 channo ; if (! ( cdef -> ents = jas_alloc2 ( cdef -> numchans, sizeof ( jp2_cdefent_t ) ) ) ) { return - 1 ; } if (! ( cdef -> ents = jas_alloc2 ( cdef -> numchans, sizeof ( jp2_cdefent_t ) ) ) ) { return - 1 ; } for ( channo = 0 ; channo < cdef -> numchans ; ++ channo ) { if (! ( cdef -> ents = jas_alloc2 ( cdef -> numchans, sizeof ( jp2_cdefent_t ) ) ) ) { return - 1 ; } if (! ( cdef -> ents = jas_alloc2 ( cdef -> numchans, sizeof ( jp2_cdefent_t ) ) ) ) { return - 1 ; } for ( channo = 0 ; channo < cdef -> numchans ; ++ channo ) { if (! ( cdef -> ents = jas_alloc2 ( cdef -> numchans, sizeof ( jp",0
370,"<S2SV_ModStart> |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ;",0
371,"<S2SV_ModStart> ; ipc = rcu_dereference_protected ( net -> ipv4. ipcm_cookie, lockdep_is_held ( & net -> ipv4. ipcm_cookie, lockdep_is_held ( & net -> ipv4. ipcm_cookie ) ) ; if ( ipc == NULL ) ipc = rcu_dereference_protected ( net -> ipv4. ipcm_cookie, lockdep_is_held ( & net -> ipv4. ipcm_cookie, lockdep_is_held ( & net -> ipv4. ipcm_cookie, lockdep_is_held ( & net -> ipv4. ipcm_cookie, lockdep_is_held ( & net -> ipv4. ipcm_cookie ) ) ) ; if ( ipc == NULL ) ipc = rcu_dereference_protected ( net -> ipv4. ipcm_cookie, lockdep_is_held ( & net -> ipv4. ipcm_cookie, lockdep_is_held ( & net -> ipv4. ipcm_cookie, lockdep_is_held ( & net -> ipv4. ip",0
372,"<S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + 2 ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ;",0
373,<S2SV_ModStart> = 0 ; } skb_dst_drop ( skb ) ;,0
374,<S2SV_ModStart> private ) { crypto_free_blkcipher <S2SV_ModEnd> ( private ),0
375,"<S2SV_ModStart> file ) { <S2SV_ModEnd> umode_t mode = <S2SV_ModStart> int retval ; bprm -> cred -> euid = current_euid ( ) ; bprm -> cred -> egid = current_egid ( ) ; if (! ( bprm -> file -> f_path. mnt -> mnt_flags & MNT_NOSUID ) &&! task_no_new_privs ( current ) && kuid_has_mapping ( bprm -> cred -> user_ns, inode -> i_uid ) && kgid_has_mapping ( bprm -> cred -> user_ns, inode -> i_gid ) ) { if ( ( mode & ( S_ISUID | S_IXGRP ) ) == ( S_ISUID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_ON_SETID ; bprm -> cred -> euid = inode -> i_uid ; } if ( ( mode & ( S_ISGID | S_IXGRP ) ) == ( S_ISGID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_ON_",0
376,<S2SV_ModStart> = nlogs ; if ( unlikely ( log ) ) * log_num = nlogs ;,0
377,<S2SV_ModStart> ) ) { if ( dlen < 2 ) break ; * pt ++ = '\\\\' ; * pt ++ = * s ; } else { * pt ++ = '\\\\' ; * pt ++ = * s ; },0
378,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
379,<S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_,0
380,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
381,<S2SV_ModStart> skb_is_nonlinear ( skb ) ) return 0 ; if ( skb -> len < sizeof ( struct nlattr,1
382,"<S2SV_ModStart> ; encode_share_access ( xdr <S2SV_ModEnd>, arg ->",0
383,"<S2SV_ModStart> & GRE_CP ) { ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> sum <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; <S2SV_ModStart> & GRE_KP ) { ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> key=0x%x"", EXTRACT_32BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; } if ( flags & GRE_SP ) { ND_TCHECK2 ( * bp, 4 ) ; if ( len < 4 ) goto trunc ; ND_PRINT ( ( ndo, "", <S2SV_blank> seq <S2SV_blank> %u"", EXTRACT_32BITS ( bp ) ) ) ; bp += 4 ; len -= 4 ; } if ( flags & GRE_CP ) { ND_TCHECK2 ( * bp, 2 ) ; if (",0
384,"<S2SV_ModStart> ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> reading <S2SV_blank> data"" ) ; exit ( - 1 ) ; } if ( tile_buffsize == 0 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> reading <S2SV_blank> data"" ) ; exit ( - 1 ) ; } <S2SV_ModStart> ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> reading <S2SV_blank> data"" ) ; exit ( - 1 ) ; } if ( tile_buffsize == 0 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> reading <S2SV_blank> data"" ) ; exit ( - 1 ) ; } if ( tile_buffsize == 0 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> reading <S2SV_blank> data"" ) ; exit ( - 1 ) ; } if ( tile_buffsize == 0 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> reading <S2SV_blank> data"" ) ; exit ( - 1 ) ; }",0
385,"<S2SV_ModStart> }, # if defined _WITH_VRRP_ && defined _WITH_LVS_ { ""release-vips"", no_argument, NULL, 'X' }, { ""dont-release-ipvs"", no_argument, NULL, 'I' }, # endif { ""dont-fork"", no_argument, NULL, 'n' }, # if defined _WITH_BFD_ { ""no_bfd"", no_argument, NULL, 'G' }, # if defined _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL, 'X' }, { ""dont-fork"", no_argument, NULL, 'n' }, # if defined _WITH_VRRP_ && defined _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL, 'I' }, # endif { ""dont-respawn"", no_argument, NULL, 'R' }, # if defined _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL, 'I' },",0
386,"<S2SV_ModStart> void modify_bar_registration ( struct pci_dev * dev <S2SV_ModEnd>, int idx <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; <S2SV_ModEnd> return ; } <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
387,<S2SV_ModStart> item ) ; struct o2net_cluster * cluster = <S2SV_ModEnd> to_o2nm_cluster_from_node ( node <S2SV_ModStart> ; if ( <S2SV_ModEnd> tmp == cluster <S2SV_ModStart> cluster -> cl_has_local <S2SV_ModEnd> ) { ret <S2SV_ModStart> - EBUSY ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node ->,0
388,"<S2SV_ModStart> ; if ( fscanf ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"", & n, typestr )!= 2 ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""float"" ) ) type = 0 ; else type = 1 ; if ( ( pta = ptaCreate ( n ) ) == NULL ) return ( PTA * ) ERROR_PTR ( ""pta <S2SV_blank> not <S2SV_blank> made"", procName, NULL ) ; if ( ( pta = ptaCreate ( n ) ) == NULL ) return ( PTA * ) ERROR_PTR ( ""pta <S2SV_blank> not <S2SV_blank> made"", procName, NULL ) ; if ( ( pta = ptaCreate ( n ) ) == NULL ) return ( PTA * ) ERROR_PTR ( ""pta <S2SV_blank> not <S2SV_blank> made"", procName, NULL ) ; if ( ( pta = ptaCreate ( n ) ) == NULL ) return ( PTA * ) ERROR_PTR ( ""pta <S2SV_blank> not",0
389,<S2SV_ModStart> : case 0x1a : case 0x1b : case 0x1c : case 0x1f : case 0x22 : case 0x23 : case 0x27 : case 0x2a : case 0x2b : case 0x2c : case 0x2f : case 0x32 : case 0x33 : case 0x34 : case 0x37 : case 0x3a : case 0x3b : case 0x3c : case 0x3f : case 0x4a : case 0x4b : case 0x4c : case 0x4f : case 0x5a : case 0x5b : case 0x5c : case 0x5f : case 0x6a : case 0x6b : case 0x6e : case 0x7a : case 0x7b : case 0x7c : case 0x7f :,0
390,"<S2SV_ModStart> ; struct sock * net = sock_net ( asoc -> base. sk ) <S2SV_ModEnd> ; bh_lock_sock ( <S2SV_ModStart>. sk ) ; if ( sock_owned_by_user ( asoc -> base. sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned_by_user\\n"", __func__ ) ; sctp_transport_put ( transport ) ; goto out_unlock ; } if (! sock_owned_by_user ( asoc -> base. sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> T3_rtx_timer, jiffies + ( HZ / 20 ) ) ) sctp_transport_hold ( transport ) ; goto out_unlock ; } if ( transport -> dead ) goto out_unlock ; error = sctp_do_sm ( net, SCTP_EVENT_T_FAILED, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_T3_RTX ), asoc -> state, asoc -> ep, asoc, transport,",0
391,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
392,"<S2SV_ModStart> E_NOTHANDLED ; fd = open ( EF_GBL_OPTIONS -> output_file, O_CREAT | O_RDWR | O_TRUNC | O_BINARY, 0644 ) ; ON_ERROR ( fd, - 1, ""Can\'t <S2SV_blank> create <S2SV_blank> file <S2SV_blank> %s"", EF_GBL_OPTIONS -> output_file ) ;",0
393,"<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> 0x%08x, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), EXTRACT_32BITS ( & lshp -> ls_seq ), lshp -> ls_length ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> 0x%08x, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), EXTRACT_32BITS ( & lshp -> ls_seq ), EXTRACT_16BITS ( & lshp -> ls_age ), lshp -> ls_length ) ) ; }",0
394,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
395,"<S2SV_ModStart> ; if (! ND_TTEST2 ( * ( p + offset ), length ) ) return 0 ; <S2SV_ModStart> ; if (! ND_TTEST2 ( * ( p + offset ), length ) ) return 0 ; memcpy ( & rates, p + offset, rates. length ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), length ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), length ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), length ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), length ) ) return 0 ; memcpy ( & rates, p + offset, rates. length ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), length ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), length ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), length ) ) return 0 ; if (! ND",0
396,<S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf ) ; opipe -> nrbufs ++ ; } <S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_OVERFLOW ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_OVERFLOW ; pipe_buf_mark_unmergeable ( obuf ) ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf ) ; } ret += obuf -> len ;,0
397,"<S2SV_ModStart> ; r_buf_set_bytes ( tbuf <S2SV_ModEnd>, buf,",0
398,"<S2SV_ModStart> long ret, <S2SV_ModEnd> err ; mm_segment_t <S2SV_ModStart> = 0 ; if (! access_ok ( VERIFY_WRITE, ur, sizeof ( * ur ) ) ) return - EFAULT ; r. ru_utime. tv_sec = ur -> ru_utime. tv_sec ; err |= __put_user ( r. ru_utime. tv_sec, & ur -> ru_utime. tv_sec ) ; err |= __put_user ( r. ru_utime. tv_usec, & ur -> ru_utime. tv_usec ) ; err |= __put_user ( r. ru_stime. tv_sec, & ur -> ru_stime. tv_sec ) ; err |= __put_user ( r. ru_stime. tv_usec, & ur -> ru_stime. tv_usec ) ; err |= __put_user ( r. ru_maxrss, & ur -> ru_maxrss ) ; err |= __put_user ( r. ru_ixrss, & ur -> ru_ixrss ) ; err |= __put_user ( r. ru_idrss, & ur",0
399,"<S2SV_ModStart> NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_RW, ""proc"", ""%r/",0
400,"<S2SV_ModStart> ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), ( policy!= LEMPTY )? bitnamesof ( sa_policy_bit_names, policy ) : """", ( policy!= LEMPTY )? bitnamesof ( sa_policy_bit_names, policy ) : """", ( policy!= LEMPTY )? "" <S2SV_blank> with <S2SV_blank> policy="" : """", ( policy!= LEMPTY )? bitnamesof ( sa_policy_bit_names, policy ) : """", ( policy!= LEMPTY )? bitnamesof ( sa_policy_bit_names, policy ) : """" ) ; if ( policy!= LEMPTY ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s%s"", ip_str (",0
401,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> bmpdata, UINT32 rowstride, UINT32 rowstride_high <S2SV_ModEnd> ) { nsc_encode_argb_to_aycocg <S2SV_ModStart>, rowstride, rowstride_high <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) { nsc_encode_subsampling_high <S2SV_ModEnd> ( context ) <S2SV_ModStart> } } <S2SV_null>",0
402,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
403,<S2SV_ModStart> ( stringset == ETH_SS_STATS <S2SV_ModEnd> ) return ARRAY_SIZE <S2SV_ModStart> == ETH_SS_STATS ) return ARRAY_SIZE ( g_xgmac_stats_string ) <S2SV_ModEnd> ; } <S2SV_null>,0
404,<S2SV_ModStart> 1 ) return <S2SV_ModEnd> ( image -> <S2SV_ModStart> / 8 ) ; else return ( image -> columns * GetPSDPacketSize ( image ) ) <S2SV_ModEnd> ; } <S2SV_null>,0
405,<S2SV_ModStart> < 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_,0
406,"<S2SV_ModStart> bMasterInterface0 ) ; if ( pcu -> ctrl_intf -> desc. bNumEndpoints!= 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } pcu -> ep_ctrl = & alt -> endpoint [ 0 ]. desc ; pcu -> max_ctrl_size = usb_endpoint_maxp ( pcu -> ep_ctrl ) ; if ( pcu -> max_ctrl_size < 8 ) { dev_err ( pcu -> dev, ""Max <S2SV_blank> CTRL <S2SV_blank> packet <S2SV_blank> size <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%zd)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } pcu -> data_intf = & alt -> endpoint [ 1 ]. desc ; if (! usb_endpoint_is_bulk_out ( pcu -> ep_out ) ) { dev_err ( pcu -> dev, ""First <S2SV_blank> endpoint <S2SV_blank> on <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> is <S2SV_blank> not <S2SV_blank> BULK <S2SV_blank> OUT\\n"" ) ; return - EINVAL",0
407,"<S2SV_ModStart> intf ) ; <S2SV_ModEnd> struct device * <S2SV_ModStart> dev = d -> udev <S2SV_ModEnd> -> dev ; <S2SV_ModStart> d -> name ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> bInterfaceNumber=%d\\n"", __func__, intf -> cur_altsetting -> desc. bInterfaceNumber ) ; dev_info ( & dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; if ( d -> props -> exit ) d -> props -> exit ( d ) ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; dvb_usbv2_exit ( d ) ; dev_info ( & dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; }",0
408,<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + picomp -> numrlvls > JAS_UINTF_MAX / JAS_UINTF_MAX / JAS_UINTF_MAX / JAS_UINTF_MAX / JAS_UINTF_MAX / JAS_UINTF_MAX / JAS_UINTF_MAX / JAS_UINTF_MAX / JAS_UINTF_MAX / JAS_UINTF_MAX / JAS_UINTF_MAX / JAS_UINTF_MAX / JAS_UINTF_MAX / JAS_UINTF_MAX / JAS_UINTF_MAX / JAS_UINTF_MAX / JAS_UINTF_MAX / JAS_UINTF_MAX / JAS_UINTF_MAX / JAS_UINTF_MAX / JAS_UINTF_MAX / JAS_UINTF_MAX / JAS_UINTF_MAX / JAS_UINTF_MAX / JAS_UINTF_MAX / JAS_,0
409,"<S2SV_ModStart> target_enc ) { * reg = ( regex_t * ) conv_encoding ( ci -> pattern_enc, ci -> target_enc, pattern, pattern_end, & cpat, & cpat_end ) ; if ( IS_ERR ( * reg ) ) return r ; r = onig_reg_init ( * reg, ci -> option, ci -> case_fold_flag, ci -> syntax ) ; if ( r!= 0 ) goto err ; * reg = ( regex_t * ) xmalloc ( sizeof ( regex_t ) ) ; if ( IS_NULL ( * reg ) ) { r = ONIGERR_MEMORY ; goto err2 ; } r = onig_reg_init ( * reg, ci -> option, ci -> case_fold_flag, ci -> syntax ) ; if ( r!= 0 ) goto err ; r = onig_compile ( * reg, cpat, cpat_end, einfo ) ; if ( r!= 0 ) goto err ;",0
410,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart>, ssize_t depth, <S2SV_ModEnd> unsigned char * <S2SV_ModStart>, ssize_t x, <S2SV_ModEnd> ssize_t y, <S2SV_ModStart>, ssize_t y, <S2SV_ModEnd> ExceptionInfo * exception <S2SV_ModStart>, ssize_t y, Quantum * <S2SV_ModEnd> q ; Quantum <S2SV_ModStart> ; ssize_t bit ; ssize_t index <S2SV_ModEnd> ; switch ( <S2SV_ModStart> ; bit ++ ) { index = ConstrainColormapIndex ( image, ( * p >> 6 ) & 0x3, exception ) ; SetPixelIndex ( image, index, q ) ; q += GetPixelChannels ( image ) ; p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { index = ConstrainColormapIndex ( image, ( * p >> 6 ) & 0x3, exception ) ; q += GetPixelChannels ( image ) ; index = ConstrainColormapIndex ( image, ( * p >> 4 ) & 0x3, exception ) ; q += GetPixelChannels ( image ) ; index = ConstrainColormapIndex ( image, ( * p >> 4 ) & 0x3, exception ) ;",0
411,"<S2SV_ModStart> * ndo, <S2SV_ModEnd> const u_char * <S2SV_ModStart> u_int network_addr_type ; <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) )",0
412,"<S2SV_ModStart>, ss ; u32 <S2SV_ModEnd> msr_data ; int <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_CS, & msr_data ) ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; } else { return emulate_gp ( ctxt, 0 ) ; } ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & ss, 0, VCPU_SREG_SS ) ; * reg_write ( ctxt, VCPU_REGS_RSP ) = reg_read ( ctxt, VCPU_REGS_RSP ) = reg_read ( ctxt, VCPU_REGS_RSP ) ; ops -> set_segment ( ctxt, cs_sel,",0
413,"<S2SV_ModStart> dev ) ; if ( pdev -> driver_override ) strlcpy ( buf, pdev -> driver_override, sizeof ( pdev -> driver_override ) ) ; else strlcpy ( buf, ""%s\\n"", pdev -> driver_override ) ;",0
414,"<S2SV_ModStart>, i ; BIO * tmpout ; tmpout = NULL ; if ( out == NULL ) tmpout = BIO_new ( BIO_s_null ( ) ) ; else if ( flags & CMS_TEXT ) { tmpout = BIO_new ( BIO_s_mem ( ) ) ; BIO_set_mem_eof_return ( tmpout, 0 ) ; } else tmpout = out ; if (! tmpout ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } for ( ; ; ) { i = BIO_read ( in, buf, sizeof ( buf ) ) ; if ( i <= 0 ) { if (! BIO_write ( tmpout, buf, i )!= i ) goto err ; break ; } if ( tmpout && ( BIO_write ( tmpout, buf, i )!= i ) goto err ; break ; } if ( flags & CMS_TEXT ) { if (! SMIME_text ( tmpout, out ) ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, CMS_R_SMIME_TEXT_ERROR",0
415,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
416,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> tree, const <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] ; vpx_tree_index <S2SV_ModEnd> ii = tree <S2SV_ModStart> i + b ] ; if ( ii <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
417,"<S2SV_ModStart> == '\\0' ) && ( ( tmp_dir = getenv ( ""TMPDIR"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMPDIR"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP""",0
418,"<S2SV_ModStart> ; switch ( c -> family ) { case AF_INET : ( void ) inet_ntop ( af, & ( ( struct sockaddr_in * ) sock_addr ) -> sin_addr, addr_text, sizeof ( addr_text ) - 1 ) ; port = ntohs ( ( ( struct sockaddr_in * ) sock_addr ) -> sin_port ) ; protoname = ""tcp"" ; break ; case AF_INET6 : ( void ) inet_ntop ( af, & ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_addr, addr_text + 1, sizeof ( addr_text ) - 2 ) ; port = ntohs ( ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_port ) ; protoname = ""udp6"" ; break ; case AF_UNIX : ( void ) inet_ntop ( af, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, addr_text, sizeof ( addr_text ) - 1 ) ; port = ntohs ( ( ( struct sockaddr_un * ) sock_addr ) -> sun_",0
419,"<S2SV_ModStart> write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",0
420,"<S2SV_ModStart> & 0xffff ; if ( synth_devs [ dev ] -> load_patch == NULL ) { err = - ENODEV ; goto out ; } err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ; return err ; } if ( ev_code >= 128 ) { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 4 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } ev_size = 8 ; if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return - EINVAL ; } if ( copy_from_user ( ( char * ) & event_rec [ 4 ], & ( buf ) [ p + 4 ], 4 ) ) ) goto out ; } if ( copy_from_user ( ( char * ) & event_rec [ 4 ], & ( buf ) [ p + 4 ], 4 ) ) goto out ;",0
421,"<S2SV_ModStart> avoid_reserve ) { <S2SV_ModEnd> struct page * <S2SV_ModStart> struct page * page ; struct address_space * mapping = vma -> vm_file -> f_mapping ; long chg = vma_needs_reservation ( h, vma, addr ) ; if ( chg < 0 ) return ERR_PTR ( - VM_FAULT_OOM ) ; if ( hugetlb_get_quota ( inode -> i_mapping, chg ) ) return ERR_PTR ( - VM_FAULT_SIGBUS ) ; spin_lock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ERR_PTR ( - VM_FAULT_SIGBUS ) ; } } set_page_private ( page, ( unsigned long ) mapping ) ; vma_commit_reservation ( h, vma, addr ) ; return page",0
422,"<S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s\'\\n"", filegen_string, filegen -> prefix, filegen -> basename ) ) ; <S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s\'\\n"", filegen_string, filegen -> prefix, filegen -> basename ) ) ; filegen -> flag |= FGEN_FLAG_ENABLED ; my_node = HEAD_PFIFO ( my_node -> options ) ; for ( ; my_node!= NULL ; my_node = my_node -> link ) { switch ( my_opts -> attr ) { case T_File : filegen_file = my_opts -> value. s ; break ; case T_Pid : filegen_type = FILEGEN_PID ; break ; case T_Day : filegen_type = FILEGEN_DAY ; break ; case T_Week : filegen_type = FILEGEN_WEEK ; break ; case T_None : filegen_type = FILEGEN_NONE ; break ; case T_None : filegen_type = FILEGEN_NONE ; break ; case T_",0
423,"<S2SV_ModStart> stamp_path ) { _cleanup_bus_error_free_ sd_bus_error error = SD_BUS_ERROR_NULL ; if ( manager_add_job ( UNIT ( t ) -> manager, JOB_REPLACE, UNIT_TRIGGER ( UNIT ( t ) ), JOB_START, UNIT_TRIGGER ( UNIT ( t ) ), JOB_REPLACE, true, & error, NULL ) ; if ( r < 0 ) goto fail ; r = manager_add_job ( UNIT ( t ) -> manager, JOB_START, UNIT_TRIGGER ( UNIT ( t ) ), JOB_REPLACE, true, & error, NULL ) ; if ( r < 0 ) goto fail ; dual_timestamp_get ( & t -> last_trigger ) ; if ( t -> stamp_path ) touch_file ( t -> stamp_path, true, t -> last_trigger. realtime, UID_INVALID, GID_INVALID, 0 ) ; timer_set_state ( t, TIMER_RUNNING ) ; return ; }",0
424,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_high_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart>, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart>, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart>, s2, s3, s4, s5, tran_high_t <S2SV_ModEnd> ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> ; tran_high_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> ; tran_high_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> ; tran_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> ; tran_high_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> ; tran_",0
425,<S2SV_ModStart> ; # if HAVE_EDSP flags |= HAS_EDSP ; # endif <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
426,"<S2SV_ModStart> MODE_INFO * cur_mi <S2SV_ModEnd>, int b",0
427,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
428,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
429,"<S2SV_ModStart> ; if ( length < 0 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> frames <S2SV_blank> (%d)"", length ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( length < 0 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> frames <S2SV_blank> (%d)"", length ) ; return AVERROR_INVALIDDATA ; } length = avio_rl32 ( pb ) ; length = avio_rl32 ( pb ) ; if ( length < 0 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> frames <S2SV_blank> (%d)"", length ) ; return AVERROR_INVALIDDATA ; } if ( length < 0 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> frames <S2SV_blank> (%d)"", length ) ; return AVERROR_INVALIDDATA ; } if ( length < 0 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> frames <S2SV_blank> (%d)"", length ) ; return AVERROR_INVALIDDATA ; }",0
430,"<S2SV_ModStart> ( ) ; const <S2SV_ModStart> ( stderr, ""rmdir: <S2SV_blank> verifying <S2SV_blank> access <S2SV_blank> to <S2SV_blank> %s:%s <S2SV_blank> (req <S2SV_blank> path <S2SV_blank> %s)\\n"" <S2SV_ModEnd>, controller, <S2SV_ModStart> out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! cgfs_remove ( controller, cgroup ) ) { ret = - EINVAL ; goto out ; } if (! caller_may_access ( fc, controller, cgdir, NULL, O_WRONLY ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc",0
431,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> flag & CL_UNPRIVILEGED <S2SV_ModStart> ; if ( mnt -> mnt. mnt_flags & MNT_READONLY ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( mnt -> mnt. mnt_flags & MNT_WRITE_HOLD ) mnt -> mnt. mnt_flags |= MNT_LOCK_WRITE_HOLD ; if ( ( flag & CL_UNPRIVILEGED ) && list_empty ( & mnt -> mnt_expire ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_LOCKED ; atomic_inc ( & sb -> s_active ) ; mnt -> mnt. mnt_sb = sb ; mnt -> mnt. mnt_root = dget ( root ) ; mnt -> mnt_mountpoint = mnt -> mnt. mnt_root ; mnt -> mnt_parent = mnt ; lock_mount_hash ( ) ; list_add_tail ( & mnt -> mnt_instance, & sb -> s_mounts ) ; unlock_mount_hash (",0
432,"<S2SV_ModStart> trans = & rds_loop_transport ; if ( trans == NULL ) { kmem_cache_free ( rds_conn_slab, conn ) ; conn = ERR_PTR ( - EINVAL ) ; goto out ; }",0
433,"<S2SV_ModStart> { if ( rdesc [ 104 ] == 0x26 && rdesc [ 105 ] == 0x80 && rdesc [ 106 ] == 0x03 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x03 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; } else { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x03 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; }",0
434,"<S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len - 2 ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL <S2SV_blank> packet"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_DATA ; }",0
435,"<S2SV_ModStart> ; } } if ( str & I8042_STR_AUXERR ) { dbg ( ""AUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; if ( time_before ( jiffies, last_transmit + HZ / 10 ) ) { str = last_str ; break ; } dfl = ( ( str & I8042_STR_PARITY )? SERIO_PARITY : 0 ) | ( ( str & I8042_STR_TIMEOUT &&! i8042_notimeout )? SERIO_TIMEOUT : 0 ) | ( ( str & I8042_STR_PARITY )? SERIO_PARITY : 0 ) | ( ( str & I8042_STR_TIMEOUT &&! i8042_notimeout )? SERIO_TIMEOUT : 0 ) | ( ( str & I8042_STR_TIMEOUT &&! i8042_notimeout )? SERIO_TIMEOUT : 0 ) ; }",0
436,"<S2SV_ModStart> case NFSPROC_GETSTAT : if (! parsewccres ( ndo, dp, ndo -> ndo_vflag ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dstat:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp,",0
437,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_translate_to_linux ( uint8_t <S2SV_ModStart> newIndex ; } } static int udf_translate_to_linux ( uint8_t * newName, uint8_t * udfName, int udfLen, uint8_t * fidName, int fidNameLen ) { int index, newIndex = 0, needsCRC = 0 ; if ( udfName [ index ] == '.' ) { needsCRC = 1 ; curr = ILLEGAL_CHAR_MARK ; while ( index + 1 < udfLen && ( udfName [ index + 1 ] == '/' || curr == 0 ) ) index ++ ; } if ( curr == EXT_MARK ) { needsCRC = 1 ; curr = ILLEGAL_CHAR_MARK ; while ( index + 1 < udfLen && ( udfName [ index + 1 ] == '/' || udfName [ index + 1 ] == 0 ) ) index ++ ; } if ( curr == EXT_MARK ) { needsCRC = 1 ; curr = ILLEGAL_CHAR_MARK ; while ( udfName [ index + 1 ] == 0 ) index ++ ; } if ( curr == EXT",0
438,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( const <S2SV_ModStart> const tile, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { int bw, bh ; if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_cols ) return ; bw = num_8x8_blocks_wide_lookup [ mi [ 0 ] -> mbmi. sb_type ] ; bh = num_8x8_blocks_high_lookup [ mi [ 0 ] -> mbmi. sb_type ] ; if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_col ) ; count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_col ) ; count_",0
439,<S2SV_ModStart> break ; if ( c -> flags & CLIENT_CLOSE_AFTER_REPLY <S2SV_ModEnd> ) break ;,0
440,<S2SV_ModStart> = EXT4_GET_BLOCKS_CREATE ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_GET_BLOCKS_UNWRITTEN ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) get_blocks_flags |= EXT4_GET_BLOCKS_UNWRITTEN ; if ( mpd -> b_state & ( 1 << BH_Delay ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_GET_BLOCKS_UNWRITTEN ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_GET_BLOCKS_UNWRITTEN ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) get_blocks_flags |= EXT4_GET_BLOCKS_UNWRITTEN ;,0
441,"<S2SV_ModStart> * s ; DSA_SIG * d2i_DSA_SIG = NULL ; if ( d2i_DSA_SIG ( & d2i_DSA_SIG, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : if ( d2i_DSA_SIG ( & s, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : if ( d2i_DSA_SIG ( & d2i_DSA_SIG, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : if ( d2i_DSA_SIG ( & s, & d2i_DSA_SIG, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : DSA_SIG_free ( d2i",0
442,"<S2SV_ModStart> NULL ) ; rv = gdImageGifCtx <S2SV_ModEnd> ( im, <S2SV_ModStart>, out ) ; out -> gd_free ( out ) ;",0
443,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
444,"<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> canonnamelen = 0 <S2SV_ModStart>, handle, & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & p -> ai_addrlen, NULL, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= - 1 || oe_errno!= OE_EINVAL ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= -",0
445,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> '=' ) ; if ( separator!= NULL ) { * separator = '\\0' ; strSafeCopy ( connection -> request. auth. user, token, HTTP_SERVER_USERNAME_MAX_LEN ) ; token = separator + 1 ; connection -> request. auth. password = token ; } else { * separator = '\\0' ; strSafeCopy ( connection -> request. auth. user, token, HTTP_SERVER_USERNAME_MAX_LEN ) ; token = separator + 1 ; connection -> request. auth. password = token ; } } } TRACE_DEBUG ( ""Authorization <S2SV_blank> header:\\r\\n"" ) ; TRACE_DEBUG ( ""Authorization <S2SV_blank> header:\\r\\n"" ) ; TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> username: <S2SV_blank> %s\\r\\n"", connection -> request. auth. user ) ; TRACE_DEBUG ( "" <S2SV_blank> password: <S2SV_blank> %s\\r\\n"", connection -> request. auth. user ) ; TRACE_DEBUG ( "" <S2SV_blank>",0
446,<S2SV_ModStart> -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 5 ] ) ; rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) ; has_local_ct = ( int ) ( ( rctx -> rbuf [ 8 ] >> 7 ) & 0x01 ) ; if ( has_local_ct ) { local_ct_size = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) ; rctx -> colortable. num_entries = 1 << ( 1 + local_ct_size ) ; } if ( has_local_ct ) { local_ct_size = ( int ) ( rctx -> rbuf [ 8 ] >> 7 ) & 0x07 ) ; rctx -> colortable. num_entries = 1 << ( 1 + local_ct_size ) ; } if ( has_local_ct ) { local_ct_size = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; rctx -> colortable. num_entries = 1 << ( 1 + local_ct_size ) ; },0
447,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
448,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { int ret ; ret = usb_control_msg ( pegasus -> usb, 0, PEGASUS_REQ_SET_REGS, PEGASUS_REQT_WRITE, indx, data, size, 100 ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__,",0
449,"<S2SV_ModStart> asdl_seq * body, PyArena * arena ) { mod_ty * p = ( mod_ty * ) PyArena_Malloc ( arena, sizeof ( * p ) ) ; if (! p ) { PyArena_LogError ( ""PyArena_Malloc <S2SV_blank> failed"" ) ; PyArena_LogError ( ""PyArena_Malloc <S2SV_blank> failed"" ) ; PyArena_LogError ( ""PyArena_Malloc <S2SV_blank> failed"" ) ; PyArena_LogError ( ""PyArena_Malloc <S2SV_blank> failed"" ) ; return NULL ; } p -> v. Module. body = body ; if (! p ) { PyArena_LogError ( ""PyArena_Malloc <S2SV_blank> failed"" ) ; PyArena_LogError ( ""PyArena_Malloc <S2SV_blank> failed"" ) ; PyArena_LogError ( ""PyArena_Malloc <S2SV_blank> failed"" ) ; PyArena_LogError"" ) ; PyArena_LogError ( ""PyArena_Malloc"" ) ; return NULL ; }",0
450,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
451,"<S2SV_ModStart> * src, vpx_bit_depth_t bit_depth <S2SV_ModStart> >> 4 ; vpx_bit_depth_t bit_depth <S2SV_ModEnd> ; # endif <S2SV_ModStart> ; # if USE_PARTIAL_COPY vpx_copy_and_extend_frame ( src, & buf -> img ) ; vpx_copy_and_extend_frame ( src, & buf -> img ) ; vpx_copy_and_extend_frame ( src, & buf -> img ) ; # else for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { for ( ; col < mb_cols ; ++ col ) { if ( active_map [ active_end ] ) break ; } vpx_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; active_map += mb_cols ; } } else { vpx_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; active_map += mb_cols ; }",0
452,"<S2SV_ModStart> } rc = fuse_dev_release_nolock <S2SV_ModEnd> ( inode,",0
453,"<S2SV_ModStart> return code ; code = verify_s4u_x509_user_checksum ( context, tgs_subkey? tgs_subkey : tgs_session, & req_data, request -> nonce, * s4u_x509_user ) ; if ( code ) { * status = ""INVALID_S4U2SELF_CHECKSUM"" ; krb5_free_pa_s4u_x509_user ( context, * s4u_x509_user ) ; * s4u_x509_user = NULL ; return code ; } if ( krb5_princ_size ( context, ( * s4u_x509_user ) -> user_id. user ) == 0 || ( * s4u_x509_user ) -> user_id. subject_cert. length!= 0 ) { * status = ""INVALID_S4U2SELF_REQUEST"" ; krb5_free_pa_s4u_x509_user ( context, * s4u_x509_user ) ; * s4u_x509_user = NULL ; return KRB5KDC_ERR_C_PRINC",0
454,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> scsi_disk_emulate_command ( SCSIDiskReq <S2SV_ModStart> outbuf ) ; if ( buflen < 0 ) goto illegal_request ; break ; case WRITE_TOC : if ( scsi_disk_emulate_write_toc ( r, outbuf ) < 0 ) goto illegal_request ; break ; case READ_TOC_10 : if ( req -> cmd. buf [ 1 ] & 1 ) goto illegal_request ; break ; case READ_TOC_10 : if ( req -> cmd. buf [ 1 ] & 1 ) goto illegal_request ; break ; case READ_TOC_10 : if ( scsi_disk_emulate_read_toc ( r, outbuf ) < 0 ) goto illegal_request ; break ; case READ_TOC_10 : if ( scsi_disk_emulate_read_toc ( r, outbuf ) < 0 ) goto illegal_request ; break ; case READ_TOC_10 : if ( req -> cmd. buf [ 1 ] & 1 ) goto illegal_request ; break ; case READ_TOC_10 : if",0
455,<S2SV_ModStart>. field_picture || s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO || s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO,0
456,"<S2SV_ModStart> int off ) { unsigned long flags ; <S2SV_ModStart> 0 ) ; flags = be32_to_cpu ( rm -> m_inc. i_hdr. h_flags ) ; if ( flags & RDS_FLAG_CONG_BITMAP ) { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; <S2SV_ModStart> ) + RDS_CONG_MAP_BYTES ; } if ( hdr_off || sg || off ) { if ( flags & RDS_FLAG_CONG_BITMAP ) { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; } <S2SV_ModStart> m_inc ) ; if ( flags & RDS_FLAG_CONG_BITMAP ) { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; } if ( flags & RDS_FLAG_CONG_BITMAP ) { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ;",0
457,<S2SV_ModStart> buf ) ) { struct grub_ext4_extent_header * ext_block = ( struct grub_ext4_extent_header * ) buf ; ext_block = ( struct grub_ext4_extent_header * ) buf ; if ( ext_block -> depth == 0 ) { ext_block = ( struct grub_ext4_extent_header * ) buf ; } else { ext_block = ( struct grub_ext4_extent_header * ) buf ; } if ( ext_block -> depth == 0 ) { struct grub_ext4_extent_header * ext_block = ( struct grub_ext4_extent_header * ) buf ; ext_block = ( struct grub_ext4_extent_header * ) buf ; if ( ext_block -> depth == 0 ) { ext_block = ( struct grub_ext4_extent_header * ) buf ; } else { ext_block = ( struct grub_ext4_extent_header * ) buf ; },0
458,"<S2SV_ModStart> ; if ( key -> type == & key_type_keyring ) { ret = - ENOKEY ; goto error ; } if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; } ret = key_permission ( key_ref, KEY_READ ) ; if ( ret!= 0 ) goto error2 ; if (! is_key_possessed ( key_ref ) ) { ret = - EOPNOTSUPP ; goto error2 ; } up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key ->",0
459,"<S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & mh -> ip6m_data16 [ 0 ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> %s <S2SV_blank> Init <S2SV_blank> Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", EXTRACT_32BITS ( & bp [ hlen ] ), EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; } else { ND_TCHECK_16BITS ( & mh -> ip6m_data16 [ 0 ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> %s <S2SV_blank> Init <S2SV_blank> Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", EXTRACT_32BITS ( & bp [ hlen ] ), EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; }",0
460,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
461,"<S2SV_ModStart> = hmi_data ; uint16_t hmi_bpm = 0 ; uint16_t hmi_division = 0 ; uint32_t <S2SV_ModStart> channel ; } * note = NULL ; if ( hmi_size < 18 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> ; } * hmi_mdi = _WM_initMDI ( ) ; if ( hmi_mdi == NULL ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ; if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG",0
462,<S2SV_ModStart> -> id ; * addr = ( struct sockaddr_hci * ) & sk -> sk_omem_alloc ; if (! * addr ) * addr = ( struct sockaddr_hci * ) & sk -> sk_omem_alloc ; if (! * addr ) * addr = ( struct sockaddr_hci * ) & sk -> sk_omem_alloc ; if (! * addr ) * addr = ( struct sockaddr_hci * ) & sk -> sk_omem_alloc ; * addr = ( struct sockaddr_hci * ) & sk -> sk_omem_alloc ; if (! * addr ) * addr = ( struct sockaddr_hci * ) & sk -> sk_omem_alloc ; if (! * addr ) * addr = ( struct sockaddr_hci * ) & sk -> sk_omem_alloc ; if (! * addr ) * addr = ( struct sockaddr_hci * ) & sk -> sk_omem_alloc ; * addr = ( struct sockaddr_hci * ) & sk -> sk_omem_alloc ; if (! * addr ) * addr = ( struct sockaddr_hci,0
463,<S2SV_ModStart> = inode -> i_generation ; fh32 [ 3 ] = ei -> i_iget5_block + ei -> i_iget5_offset ; fh32 [ 4 ] = ei -> i_iget5_offset + ei -> i_iget5_blocks ; fh32 [ 5 ] = ei -> i_iget5_offset + ei -> i_iget5_blocks ; fh32 [ 6 ] = ei -> i_iget5_offset + ei -> i_iget5_blocks ; fh32 [ 7 ] = ei -> i_iget5_offset + ei -> i_iget5_blocks ; fh32 [ 6 ] = ei -> i_iget5_offset + ei -> i_iget5_blocks ; fh32 [ 7 ] = ei -> i_iget5_offset + ei -> i_iget5_blocks <S2SV_ModEnd> ; fh32 [,0
464,"<S2SV_ModStart>! vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( server. expiration && server. expiration < kdc_time &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB_PWCHANGE_SERVICE ) ) { * status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( server. expiration && server. expiration < kdc_time &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset (",0
465,"<S2SV_ModStart> case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) || signed_add_overflows ( dst_reg -> umin_value, umin_val ) || signed_add_overflows ( dst_reg -> umax_value, umax_val ) || signed_add_overflows ( dst_reg -> umin_value, umax_val ) || signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) || signed_add_overflows ( dst_reg -> umin_value, umin_val ) || signed_add_overflows ( dst_reg -> umax_value, umax_val ) || signed_add_overflows ( dst_reg -> umax_value, umax_val ) || signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add",0
466,"<S2SV_ModStart> if ( method == LPF_PICK_FROM_Q ) { const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; lf -> sharpness_level = clamp ( lf -> sharpness_level, min_filter_level, max_filter_level ) ; } else { const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; lf -> sharpness_level = clamp ( lf -> sharp",0
467,<S2SV_ModStart> BT_STATUS_SUCCESS ) { if ( service_mask & ( tBTA_SERVICE_MASK ) ( BTA_SERVICE_ID_TO_SERVICE_MASK ( BTA_MAX_SERVICE_ID ) ) ) { if ( service_mask & ( tBTA_SERVICE_MASK ) ( BTA_SERVICE_ID_TO_SERVICE_MASK ( BTA_MAX_SERVICE_ID ) ) ) { if ( service_mask & ( tBTA_SERVICE_MASK ) ( BTA_SERVICE_ID_TO_SERVICE_MASK ( BTA_SERVICE_ID_TO_SERVICE_MASK ( BTA_MAX_SERVICE_ID ( BTA_MAX_SERVICE_ID ) ) ) ) { if ( service_mask & ( tBTA_SERVICE_MASK ) ( BTA_SERVICE_ID_TO_SERVICE_MASK ( BTA_MAX_SERVICE_ID ) ) ) ) { if ( service_mask & ( tBTA_SERVICE_MASK ) ( BTA_SERVICE_ID_TO_SERVICE_MASK ( BTA_MAX_SERVICE_ID ( BTA_MAX_SERVICE_ID ( BTA_MAX_SERVICE_ID ( B,0
468,"<S2SV_ModStart> ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image",0
469,"<S2SV_ModStart> : { int <S2SV_ModEnd> a = getnum <S2SV_ModStart>, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } <S2SV_ModEnd> default : {",0
470,<S2SV_ModStart> void usage_exit ( void,1
471,"<S2SV_ModStart> { if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_element_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_element_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int",0
472,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
473,"<S2SV_ModStart> vpx_codec_err_t res ; unsigned int alg_priv_size ; <S2SV_ModStart> ; else { alg_priv_size = get_alg_priv_size ( ctx -> priv -> alg_priv ) ; res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; if ( res!= VPX_CODEC_OK ) res = VPX_CODEC_ERROR ; else alg_priv_size = get_alg_priv_size ( ctx -> priv -> alg_priv ) ; if ( alg_priv_size!= ctx -> priv -> alg_priv_size ) res = VPX_CODEC_INVALID_PARAM ; else res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; if ( res!= VPX_CODEC_OK ) res = VPX_CODEC_ERROR ; else if ( alg_priv_size!= ctx -> priv -> alg_priv_size ) res = VPX_CODEC_INVALID_PARAM ; else res = VPX_CODEC_",0
474,"<S2SV_ModStart> int ret ; if (! strchr ( value, ',' ) ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return 0 ; } if (! strchr ( value, ',' ) ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return 0 ; } par -> extradata_size = 0 ; av_freep ( & par -> extradata ) ; ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par -> extradata_size, value ) ; av_log ( s, AV_LOG_DEBUG, ""Extradata <S2SV_blank> set <S2SV_blank> to <S2SV_blank> %p <S2SV_blank> (size: <S2SV_blank> %d)\\n"", par -> extradata, par -> extradata_size ) ; ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par -> extradata_size, value ) ;",0
475,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> isofs_read_inode ( struct <S2SV_ModStart> inode ) ; if ( de -> name_len > sizeof ( struct iso_directory_record ) - de_len ) { printk ( KERN_INFO ""%s: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory\\n"", __func__ ) ; ret = - EIO ; goto fail ; } if ( de -> name_len > sizeof ( struct iso_directory_record ) - de_len ) { printk ( KERN_INFO ""%s: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory\\n"", __func__ ) ; ret = - EIO ; goto fail ; } if ( de -> name_len > sizeof ( struct iso_directory_record ) - de_len ) { printk ( KERN_INFO ""%s: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory\\n"", __func__ ) ; goto fail ; } if ( de -> name_len > sizeof ( struct iso_directory_record ) - de_len ) { printk ( KERN_INFO ""%s: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory\\n"", __func__ ) ; goto",0
476,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> No <S2SV_blank> extension <S2SV_blank> specified\\n"" ) ; return ; }",0
477,"<S2SV_ModStart> ; } if ( li < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size!"", li ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%u"", * pptr ++ ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%u"", * pptr ++ ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%u"", * pptr ++ ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%u"", * pptr ++ ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%u"", * pptr ++ ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%u"", * pptr ++ ) ) ; while ( pptr < ndo ->",0
478,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f",0
479,"<S2SV_ModStart> { BUG ( ) ; if (! kvm_arm_pmu_v3_ready ( vcpu ) ) return trap_raz_wi ( vcpu, p, r ) ; if (! kvm_arm_pmu_v3_ready ( vcpu ) ) return trap_raz_wi ( vcpu, p, r ) ; if (! kvm_arm_pmu_v3_ready ( vcpu ) ) return trap_raz_wi ( vcpu, p, r ) ; if (! kvm_arm_pmu_v3_ready ( vcpu ) ) return trap_raz_wi ( vcpu, p, r ) ; if (! kvm_arm_pmu_v3_ready ( vcpu ) ) return trap_raz_wi ( vcpu, p, r ) ; if (! kvm_arm_pmu_v3_ready ( vcpu ) ) return trap_raz_wi ( vcpu, p, r ) ; if (! kvm_arm_pmu_v3_ready ( vcpu ) ) return trap_raz",0
480,"<S2SV_ModStart> case IS_STRING : if ( Z_TYPE_PP ( zval_affine_elem )!= IS_DOUBLE ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } <S2SV_ModEnd> affine [ i <S2SV_ModStart> case IS_LONG : if ( Z_TYPE_PP ( zval_affine_elem )!= IS_LONG ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } break ; case IS_DOUBLE : if ( Z_TYPE_PP ( zval_affine_elem )!= IS_DOUBLE ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } break ; default : php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; }",0
481,<S2SV_ModStart> self ) { if ( Py_IS_UNDEFINED ( self ) ) { Py_CLEAR ( self -> dict ) ; Py_TYPE ( self ) -> tp_free ( self ) ; return ; } if ( Py_IS_UNDEFINED ( self ) ) { Py_CLEAR ( self -> dict ) ; Py_TYPE ( self ) -> tp_free ( self ) ; return ; } if ( Py_IS_UNDEFINED ( self ) ) { Py_CLEAR ( self -> dict ) ; Py_CLEAR ( self -> dict ) ; Py_CLEAR ( self -> type_cache ) ; Py_TYPE ( self ) -> tp_free ( self ) ; return ; } if ( Py_IS_UNDEFINED ( self ) ) { Py_CLEAR ( self -> type_cache ) ; Py_TYPE ( self ) -> tp_free ( self ) ; } if ( Py_IS_UNDEFINED ( self ) ) { Py_CLEAR ( self -> dict ) ; Py_CLEAR ( self -> type_cache ) ; Py_CLEAR ( self -> type_cache ) ; Py_TYPE ( self ) -> tp_free ( self ) ; },0
482,<S2SV_ModStart> SQL_DROP ) ; sqlite3_free <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_DROP ) ; sqlite3_free <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_DROP ) ; sqlite3_free <S2SV_ModEnd> ( szSepLine ),0
483,"<S2SV_ModStart> - EFAULT ; r = copy_from_user ( data, ( void __user * ) addr + offset, len ) ; if ( r ) return r <S2SV_ModEnd> ; return 0",0
484,"<S2SV_ModStart> ] ) { <S2SV_ModEnd> char * p <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n <S2SV_blank> particular <S2SV_blank> purpose.\\n"" ) ; <S2SV_ModEnd> exit ( 0 <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n <S2SV_blank> particular <S2SV_blank> purpose.\\n"" ) ; <S2SV_ModEnd> exit ( 0",0
485,"<S2SV_ModStart> ; if ( serial -> interface -> desc -> bNumEndpoints < 1 ) { retval = - ENODEV ; goto error_get_interface ; } if ( serial -> interface -> desc -> bNumEndpoints < 1 ) { pr_err ( ""No <S2SV_blank> USB <S2SV_blank> device <S2SV_blank> connected <S2SV_blank> to <S2SV_blank> ttyUSB%i\\n"", serial -> interface -> desc -> bNumEndpoints ) ; retval = - ENODEV ; goto error_get_interface ; } if ( serial -> interface -> desc -> bNumEndpoints < 1 ) { pr_err ( ""No <S2SV_blank> USB <S2SV_blank> device <S2SV_blank> connected <S2SV_blank> to <S2SV_blank> ttyUSB%i\\n"", serial -> interface -> desc -> bNumEndpoints ) ; retval = - ENODEV ; goto error_get_interface ; } if ( serial -> interface -> desc -> bNumEndpoints < 1 ) { pr_err ( ""No <S2SV_blank> USB <S2SV_blank> device <S2SV_blank> connected <S2SV_blank> to <S2SV_blank> ttyUSB%i\\n"", serial -> interface -> desc -> bNumEndpoints ) ; retval = - ENODEV ; goto error_get_interface ; } if ( serial -> interface -> desc -> bNumEndpoints < 1 ) { pr_err ( ""No <S2SV_blank> USB <S2SV_blank> device <S2SV_blank> connected <S2SV_blank> to <S2SV_blank>",0
486,"<S2SV_ModStart> cpuctx_lock ) ; if ( cpuctx -> ctx. type == cpu_context ) { cpuctx -> ctx. pmu = pmu ; cpuctx -> ctx. unique_pmu = pmu ; __perf_cpu_hrtimer_init ( cpuctx, cpu ) ; INIT_LIST_HEAD ( & cpuctx -> rotation_list ) ; cpuctx -> unique_pmu = pmu ; } else if ( cpuctx -> ctx. type == task_context ) { cpuctx -> ctx. type = task_context ; cpuctx -> ctx. pmu = pmu ; cpuctx -> ctx. unique_pmu = pmu ; __perf_cpu_hrtimer_init ( cpuctx, cpu ) ; INIT_LIST_HEAD ( & cpuctx -> rotation_list ) ; cpuctx -> unique_pmu = pmu ; } else if (! perf_event_init_context ( & cpuctx -> ctx ) ) { lockdep_set_class ( & cpuctx -> ctx. mutex, & cpuctx_mutex ) ; lockdep_set_class ( & cpuctx ->",0
487,"<S2SV_ModStart> len, struct iovec * iovec, size_t nr_segs_base, size_t nr_segs_len <S2SV_ModStart> = 1 ; * nr_segs_base = nr_segs_base ; * nr_segs_len = nr_segs_len ; <S2SV_ModStart> = 1 ; * nr_segs_len = nr_segs_base + nr_segs_len <S2SV_ModEnd> ; } <S2SV_null>",0
488,<S2SV_ModStart> ext4_group_t flex_group ; unsigned <S2SV_ModEnd> groups_per_flex = 0 <S2SV_ModStart> sbi -> s_log_groups_per_flex ; unsigned <S2SV_ModEnd> size_t size ; <S2SV_ModStart> = 1 << sbi -> s_log_groups_per_flex ; if ( groups_per_flex < 2 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } if ( sbi -> s_groups_count < groups_per_flex ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } flex_group_count = ( sbi -> s_groups_count + groups_per_flex - 1 ) + ( ( le16_to_cpu ( sbi -> s_es -> s_reserved_gdt_blocks ) + 1 ) << EXT4_DESC_PER_BLOCK_BITS ( sb ) ) ) / groups_per_flex ; size = ( sbi -> s_groups_count + groups_per_flex - 1 ) + ( ( le16_to_cpu ( sbi -> s_es -> s_reserved_gdt_blocks ) + 1 ) << EXT4_,0
489,<S2SV_ModStart> ; if ( unlikely ( chunk_length > required_length ) ) return 0 ; if (,0
490,"<S2SV_ModStart> ; for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
491,"<S2SV_ModStart> { if (! cli_sslclifp ( cptr ) ) sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> SASL"", parv [ 1 ] ) ; else sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> SASL"", parv [ 2 ] ) ; if (! EmptyString ( cli_saslagent ( cptr ) ) ) sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> SASL"", parv [ 1 ] ) ; else sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> SASL"", parv [ 2 ] ) ; if (! EmptyString ( cli_saslagent ( cptr ) ) ) sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> SASL"", parv [ 1",0
492,<S2SV_ModStart> # endif # if HAVE_FAST_UNALIGNED if ( ( long ) src2 & ( sizeof ( long ) - 1 ) ) { for ( i = 0 ; i < w - 8 ; i += 8 ) { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_80 ) ) ^ ( ( a ^ b ^ pb_80 ) & pb_80 ) ; } for ( ; i < w ; i ++ ) dst [ i + 0 ] = src1 [ i + 0 ] - src2 [ i + 0 ] ; dst [ i + 1 ] = src1 [ i + 1 ] - src2 [ i + 1 ] ; dst [ i + 2 ] = src1 [ i + 2 ] - src2 [ i + 2 ] ; dst [ i + 3 ] = src1 [ i + 3 ] - src2 [ i + 3 ] ; dst [ i + 4 ] = src1 [ i + 4 ] - src2 [ i + 4 ] ; dst [ i +,0
493,<S2SV_ModStart> -> forward_matches ; if ( match_length + callback_args -> forward_matches > callback_args -> data_size ) { return ERROR_INVALID_DATA ; } <S2SV_ModStart> match_length += callback_args -> forward_matches ; if ( match_length > callback_args -> data_size ) { return ERROR_INVALID_DATA ; },0
494,<S2SV_ModStart>! no_port_forwarding_flag && <S2SV_ModEnd>! options.,0
495,"<S2SV_ModStart> length ) { if (! bitstream_read_bit ( bc ) ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( length ) { int r ; int length ; r = smacker_decode_tree ( bc, hc, prefix, length ) ; if ( r ) return r ; length ++ ; r = smacker_decode_tree ( bc, hc, prefix, length ) ; if ( r ) return r ; r = smacker_decode_tree ( bc, hc, prefix, length ) ; if ( r ) return r ; length ++ ; r = smacker_decode_tree ( bc, hc, prefix, length ) ; if ( r",0
496,<S2SV_ModStart> ; } } if ( m -> msg_name ) { m -> msg_name = address ; m -> msg_namelen = 0 ; m -> msg_iov = NULL ; err = 0 ; for ( ct = 0 ; ct < m -> msg_iovlen ; ct ++ ) { size_t len = iov [ ct ]. iov_len ; if ( len > INT_MAX - err ) { len = INT_MAX - err ; iov [ ct ]. iov_len = len ; } m -> msg_iov = iov ; err = 0 ; for ( ct = 0 ; ct < m -> msg_iovlen ; ct ++ ) { size_t len = iov [ ct ]. iov_len ; if ( len > INT_MAX - err ) { len = INT_MAX - err ; iov [ ct ]. iov_len = len ; } err += len ; } m -> msg_iov = iov ; err = 0 ; for ( ct = 0 ; ct < m -> msg_iovlen ; ct ++ ) { size_t len = iov [ ct ]. iov_len ; if ( len,0
497,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } len = PyList_GET_SIZE ( tmp ) ; body = _Ta3_asdl_seq_new ( len, arena ) ; if ( body == NULL ) { PyErr_SetString ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> changed <S2SV_blank> size <S2SV_blank> during <S2SV_blank> iteration"" ) ; goto failed ; } type_ignores = lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) ; if ( len!= PyList_GET_SIZE ( tmp ) ) { PyErr_SetString ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> changed <S2SV_blank> size <S2SV_blank> during <S2SV_blank> iteration"" ) ; goto failed ; } asdl_seq_SET ( type_ignores, i, type_ignores ) ; Py_CLEAR ( tmp ) ;",0
498,<S2SV_ModStart> ; register int <S2SV_ModEnd> hstartcol ; if <S2SV_ModStart> { hstartcol = ( numrows + 1 - parity ) >> 1 ; n = m ; dstptr = buf ; srcptr = & a [ ( numrows + 1 - parity ) * stride ] ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ;,0
499,"<S2SV_ModStart> ; iwl_sta_ucode_deactivate ( priv <S2SV_ModEnd>, sta_id )",0
500,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
501,"<S2SV_ModStart> ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /abc/ <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""abc\\tabc\\nabc"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /abc/ <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""abc\\tabc\\nabc"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /abc/ <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""abc\\tabc\\nabc"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /abc/ <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""abc\\tabc\\nabc"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /abc/ <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""abc\\tabc\\nabc"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /abc/ <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }""",0
502,"<S2SV_ModStart> ( hashbin -> hb_type & HB_LOCK ) { spin_lock_irqsave ( & hashbin -> hb_spinlock, flags, hashbin_lock_depth ++ ) ; } for ( i = 0 ; i < HASHBIN_SIZE ; i ++ ) { queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; if ( queue ) { if ( free_func ) free_func ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } } queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { if ( free_func ) free_func ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } } hashbin -> hb_current = NULL ; hashbin -> magic",0
503,<S2SV_ModStart> EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&,0
504,"<S2SV_ModStart> * skb ; struct sockaddr_ll * sll ; <S2SV_ModStart> copied, err ; sll = msg -> msg_name ; if (! msg -> msg_namelen ) { msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; goto out_free ; } <S2SV_ModEnd> if ( skb_is_gso <S2SV_ModStart> & SKB_GSO_TCPV6 ) vnet_hdr. gso_type = VIRTIO_NET_HDR_GSO_TCPV6 ; else if ( sinfo -> gso_type & SKB_GSO_TCPV4 ) vnet_hdr. gso_type = VIRTIO_NET_HDR_GSO_TCPV4 ; else if ( sinfo -> gso_type & SKB_GSO_TCPV6 ) vnet_hdr. gso_type = VIRTIO_NET_HDR_GSO_TCPV6 ; else if ( sinfo -> gso_type & SKB_GSO_UDP ) vnet_",0
505,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
506,"<S2SV_ModStart> ; if ( serial -> num_ports < 1 || serial -> num_ports > 15 ) return - 1 ; port = serial -> port [ 0 ] ; if ( port -> bulk_out_endpointAddress == 0 ) port -> bulk_out_endpointAddress = USB_ENDPOINT_NUMBER ( serial -> dev, port -> bulk_out_endpointAddress ) ; else port -> bulk_out_endpointAddress = USB_ENDPOINT_NUMBER ( serial -> dev, port -> bulk_out_endpointAddress ) ; if ( port -> bulk_out_endpointAddress == 0 ) port -> bulk_out_endpointAddress = USB_ENDPOINT_NUMBER ( serial -> dev, port -> bulk_out_endpointAddress ) ; if ( port -> bulk_out_endpointAddress == USB_ENDPOINT_NUMBER ( serial -> dev, port -> bulk_out_endpointAddress ) ) port -> bulk_out_endpointAddress = USB_ENDPOINT_NUMBER ( serial -> dev, port -> bulk_out_endpointAddress ) ; if ( port -> bulk_out_endpointAddress == 0 ) port -> bulk_out_endpointAddress = USB_ENDPOINT_NUMBER ( serial -> dev, port -> bulk_out_endpointAddress )",0
507,"<S2SV_ModStart> qmode ) { RiffChunkHeader riffhdr ; DS64Chunk ds64_chunk ; JunkChunk junkchunk <S2SV_ModEnd> ; WaveHeader wavhdr <S2SV_ModStart> ; DS64Chunk ds64_chunk ; if ( ds64_chunk == NULL ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header <S2SV_blank> for <S2SV_blank> non-normalized <S2SV_blank> floating <S2SV_blank> data!"" ) ; return FALSE ; } if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples > 0x7ffff000 ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header <S2SV_blank> for <S2SV_blank> non-normalized <S2SV_blank> floating <S2SV_blank> data!"" ) ; return FALSE ; } if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes",0
508,"<S2SV_ModStart> ; if ( msg_sys -> msg_namelen ) { err = - EINVAL ; goto out_freeiov ; } else { err = verify_iovec ( msg_sys, iov, & addr, VERIFY_READ ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( err < 0 ) goto out_freeiov ; } else { msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nosec : sock_recvmsg ) ( sock, msg, msg_sys, flags ) ; if ( err < 0 ) goto out_freeiov ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_namel",0
509,<S2SV_ModStart> inode ) ; struct gfs2_meta_inode * ip_ext = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_ext = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_ext = GFS2_I ( inode ) ; struct gfs2_meta_inode * old_inode = GFS2_I ( inode ) ; struct gfs2_meta_inode * old_inode = GFS2_I ( inode ) ; struct gfs2_meta_inode * old_inode = GFS2_I ( inode ) ; struct gfs2_meta_inode * old_inode = GFS2_I ( inode ) ; struct gfs2_meta_inode * old_inode = GFS2_I ( inode ) ; struct gfs2_meta_inode * old_inode = GFS2_I ( inode ) ; struct gfs2_meta_inode * old_inode = GFS2_I ( inode ) ; struct gfs2_meta_inode * old_,0
510,"<S2SV_ModStart> ( global -> codec <S2SV_ModEnd> -> interface ( <S2SV_ModStart> ( ) ) ) ; fprintf ( stderr, ""Codec: <S2SV_blank> %s\\n"", global -> codec -> codec_interface ( ) ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; if ( input -> use_i420 ) { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( input -> use_i420 ) { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( input -> use_i420 ) {",0
511,"<S2SV_ModStart> ; PROFILER_ENTER ( context <S2SV_ModEnd> -> prof_nsc_rle_decompress_data ) <S2SV_ModStart> prof_nsc_rle_decompress_data ) ; PROFILER_EXIT ( context <S2SV_ModEnd> -> prof_nsc_rle_decompress_data ) <S2SV_ModStart> prof_nsc_decode ) ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, 0, NULL, flip ) ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, 0, 0, 0, NULL, flip ) ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32",0
512,"<S2SV_ModStart> ; if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; } if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error",0
513,"<S2SV_ModStart> == 0 ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_",0
514,<S2SV_ModStart> fv -> b. <S2SV_ModEnd> sf -> fv <S2SV_ModStart> fv -> b ) { if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; else SFClearAutoSave ( sf ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; else SFClearAutoSave ( sf ) ; } _FVCloseWindows ( fv ) ; if ( sf -> filename!= NULL ) RecentFilesRemember ( sf -> filename ) ; else if ( sf -> origname!= NULL ) RecentFilesRemember ( sf -> origname ) ; GDrawDestroyWindow ( fv -> gw ) ;,0
515,<S2SV_ModStart> % 4096 == 0 ) ; if ( ( barnum & PCIM_MSIX_BIR_MASK )!= 0 && ( barnum & PCIM_MSIX_BIR_MASK )!= 0 && ( barnum & PCIM_MSIX_BIR_MASK )!= 0 && ( barnum & PCIM_MSIX_BIR_MASK )!= 0 && ( barnum & PCIM_MSIX_BIR_MASK )!= ( barnum & PCIM_MSIX_BIR_MASK )!= 0 && ( barnum & PCIM_MSIX_BIR_MASK )!= 0 && ( barnum & PCIM_MSIX_BIR_MASK )!= 0 && ( barnum & PCIM_MSIX_BIR_MASK )!= 0 && ( barnum & PCIM_MSIX_BIR_MASK )!= 0 && ( barnum & PCIM_MSIX_BIR_MASK )!= ( barnum & PCIM_MSIX_BIR_MASK )!= 0 && ( barnum & PCIM_MSIX_BIR_MASK )!= 0 && ( b,0
516,"<S2SV_ModStart> ) ; when = timespec_to_ns ( new_setting -> it_value ) ; period = timespec_to_ns ( new_setting -> it_interval ) ; if ( when == 0 ) return 0 ; base = kmalloc ( sizeof ( struct mmtimer ), GFP_KERNEL ) ; if ( base == NULL ) return - ENOMEM ; if ( flags & TIMER_ABSTIME ) { struct timespec n ; unsigned long now ; getnstimeofday ( & n ) ; when = timespec_to_ns ( n ) ; period = timespec_to_ns ( n ) ; if ( when > now ) when -= now ; else when = 0 ; } when = ( when + sgi_clock_period - 1 ) / sgi_clock_period ; if ( when > rtc_time ( ) ) when -= rtc_time ( ) ; period = ( period + sgi_clock_period - 1 ) / sgi_clock_period ;",0
517,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog <S2SV_ModStart> 0 ) ) js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
518,<S2SV_ModStart> case OFreshOID : caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; case OShift : * dest += sp -> arg ; if ( -- ( sp -> arg ) == 0 ) sp -- ; break ; case OReadItems : sp -> dest ++ ; if ( -- ( sp -> arg ) == 0 ) sp -- ; break ; case OShift : * dest += sp -> arg ; if ( -- ( sp -> arg ) == 0 ) sp -- ; break ; case OShift : * dest += sp -> arg ; if ( -- ( sp -> arg ) == 0 ) sp -- ; break ; case OShift : * dest += sp -> arg ; if ( -- ( sp -> arg ) == 0 ) sp -- ; break ; case OReadItems : sp -> dest ++ ; if ( -- ( sp -> arg ) == 0 ) sp -- ; code = read8u ( ) ; if ( code >= PREFIX_BIG_INT ) { tag = code & 0xF ; size = ( code >> 4 ) & 0x7 ; read_block : if ( size == 0 ) { v = Atom ( tag ) ; } else { v = Val_int ( code & 0x3,0
519,"<S2SV_ModStart> ; struct range <S2SV_ModEnd> * range ; <S2SV_ModStart> ; size_t content_length ; int code = 500, fd = - 1, nranges, ret ; uint32_t boundary ; char content_range [ 64 ] ; const char * errstr = NULL ; if ( ( range = parse_range ( range_str, st -> st_size, & nranges ) ) == NULL ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr = content_range ; goto abort ; } if ( ( fd = open ( path, O_RDONLY ) ) == - 1 ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr = content_range ; goto abort ; } if ( ( fd = open ( path, O_RDONLY ) ) == - 1 ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> %lld-%lld/%lld"", st",0
520,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_RXIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_",0
521,"<S2SV_ModStart> void encode_quantization ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex, QINDEX_BITS ) ; write_delta_q ( wb, cm -> y_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_dc_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> uv_ac_delta_q ) ; }",0
522,"<S2SV_ModStart> ( write ( uipc_main. ch [ ch_id ]. fd, p_buf, msglen ) < 0 ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> (%s)"", strerror ( errno ) ) ; }",0
523,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } case <S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> ) ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
524,<S2SV_ModStart> FBIOGET_VBLANK : { struct fb_vblank <S2SV_ModEnd> vblank ; vblank,0
525,<S2SV_ModStart> int flags ) <S2SV_ModEnd> { if ( <S2SV_ModStart> ) ; } else if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_ABSTIME_ON_SET ) ) { if (! ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } else if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME_ON_SET ) ) { if (! ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } else if (! ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } else if (! ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } else if (! ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } else if (! ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; },0
526,"<S2SV_ModStart> ++ ) { if ( c16 -> Curves [ i ] == NULL ) c16 -> Curves [ i ] = _cmsMallocZero ( ContextID, sizeof ( cmsUInt16Number ) ) ; if ( c16 -> Curves [ i ] == NULL ) c16 -> Curves [ i ] = _cmsMallocZero ( ContextID, sizeof ( cmsUInt16Number ) ) ; if ( c16 -> Curves [ i ] == NULL ) c16 -> Curves [ i ] = _cmsMallocZero ( ContextID, sizeof ( cmsUInt16Number ) ) ; if ( c16 -> Curves [ i ] == NULL ) { c16 -> Curves [ i ] = _cmsMallocZero ( ContextID, sizeof ( cmsUInt16Number ) ) ; c16 -> Curves [ i ] = _cmsMallocZero ( ContextID, sizeof ( cmsUInt16Number ) ) ; if ( c16 -> Curves [ i ] == NULL ) c16 -> Curves [ i ] = _cmsMallocZero ( ContextID, sizeof ( cmsUInt16Number ) ) ; if ( c16 -> Curves [ i ] == NULL ) c16 -> Curves [ i ] =",0
527,"<S2SV_ModStart> { if ( tomoyo_pathcmp ( & r -> path, dev_name, sizeof ( r -> path ) - 1 ) == 0 ) { error = - EINVAL ; goto out ; } if ( tomoyo_pathcmp ( & r -> path, dev_name, sizeof ( r -> path ) - 1 ) == 0 ) { error = - EINVAL ; goto out ; } if ( tomoyo_pathcmp ( & r -> path, dev_name, sizeof ( r -> path ) - 1 ) == 0 || tomoyo_pathcmp ( & r -> path, dev_name ) == 0 ) { error = - EINVAL ; goto out ; } if ( tomoyo_pathcmp ( & r -> path, dev_name, sizeof ( r -> path ) - 1 ) == 0 ) { error = - EINVAL ; goto out ; } if ( tomoyo_pathcmp ( & r -> path, dev_name, sizeof ( r -> path ) - 1 ) == 0 ) { error = - EINVAL ; goto out ; }",0
528,<S2SV_ModStart> ; if ( msg -> size + buf_size > dev -> bus. m_wMaxReqSize ) { ret = SAA_ERR_BAD_PARAMETER ; goto out ; } if ( msg -> size + buf_size > dev -> bus. m_wMaxReqSize ) { ret = SAA_ERR_BAD_PARAMETER ; goto out ; } if ( msg -> size + buf_size > dev -> bus. m_wMaxReqSize ) { ret = SAA_ERR_BAD_PARAMETER ; goto out ; } if ( msg -> size + buf_size > dev -> bus. m_wMaxReqSize ) { ret = SAA_ERR_BAD_PARAMETER ; goto out ; } if ( msg -> size + buf_size > dev -> bus. m_wMaxReqSize ) { ret = SAA_ERR_BAD_PARAMETER ; goto out ; } if ( msg -> size + buf_size > dev -> bus. m_wMaxReqSize ) { ret = SAA_ERR_BAD_PARAMETER ; goto out ; } if ( msg -> size + buf_size > dev -> bus. m_wMaxReqSize ) { ret = SAA_ERR_BAD,0
529,"<S2SV_ModStart> ) ; RETVAL_STRINGL <S2SV_ModEnd> ( replaced,",0
530,"<S2SV_ModStart> ; if ( ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == 1 && ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == 1 && ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == 1 && ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == 1 && ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == 1 && ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == 1 && ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) == 1 && ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == 1 && ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == 1 && ( peerec = d2i_EC",0
531,"<S2SV_ModStart> ( ) ; strcpy <S2SV_ModEnd> ( t1_buf_array,",0
532,"<S2SV_ModStart> BLOCK_SIZE subsize, int partition <S2SV_ModEnd> ) { MACROBLOCKD <S2SV_ModStart> -> e_mbd ; int bsl = b_width_log2_lookup [ partition <S2SV_ModEnd> ], hbs <S2SV_ModStart> / 4 ; if ( partition == PARTITION_NONE ) { set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; } else { set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; } break ; case PARTITION_VERT : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] )",0
533,"<S2SV_ModStart> name ) ; if (! name ) { data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; }",0
534,<S2SV_ModStart> ; int block_ptr <S2SV_ModEnd> ; int pixel_x <S2SV_ModStart> ; pixel_x = s -> pixel_x ; pixel_y = s -> pixel_y <S2SV_ModEnd> ; total_blocks = <S2SV_ModStart> break ; case 0x00 : colorA = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] ) ; colorB = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] ) ; opcode = 0 ; if ( ( s -> buf [ stream_ptr ++ ] & 0x80 )!= 0 ) { colorA = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] ) ; colorB = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] ) ; colorB = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] ) ; colorB = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] ) ; opcode = 0 ; if ( ( s -> buf [ stream_ptr ++ ] & 0x80 )!= 0 ) { colorA = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] ) ; colorB = ( opcode << 8 ) | (,0
535,"<S2SV_ModStart> cnt ) { JAS_DBGLOG ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ) ; JAS_DBGLOG ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt )",0
536,"<S2SV_ModStart> * ptype ; struct gre_base_hdr * greh2 ; __be16 type ; off = skb_gro_offset ( skb ) ; hlen = off + sizeof ( * greh ) ; if ( skb_gro_header_hard ( skb, hlen ) ) { greh = skb_gro_header_fast ( skb, hlen ) ; if (! greh ) goto out_unlock ; type = greh -> protocol ; } if ( ( greh -> flags & GRE_CSUM ) &&! NAPI_GRO_CB ( skb ) -> flush ) { if ( skb_gro_checksum_simple_validate ( skb ) ) goto out_unlock ; skb_gro_checksum_try_convert ( skb, IPPROTO_GRE, 0, null_compute_pseudo ) ; goto out_unlock ; } if ( ( greh -> flags & GRE_CSUM ) &&! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if ( skb_gro_checksum_simple_validate ( skb",0
537,<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { jas_matrix_destroy ( matrix ) ; return 0 ; } matrix -> rows_ = 0 ; matrix -> rows_ = 0 ; matrix -> maxrows_ = 0 ; matrix -> data_ = 0 ; matrix -> datasize_ = 0 ; if ( matrix -> datasize_ < 0 ) { jas_matrix_destroy ( matrix ) ; return 0 ; } for ( i = 0 ; i < numrows ; ++ i ) { matrix -> rows_ [ i ] = NULL ; } for ( i = 0 ; i < matrix -> datasize_ ; ++ i ) { matrix -> data_ [ i ] = NULL ; } for ( i = 0 ; i < matrix -> datasize_ ; ++ i ) { matrix -> data_ [ i ] = NULL ; } for ( i = 0 ; i < matrix -> datasize_ ; ++ i ) { matrix -> data_ [ i ] = NULL ; } for ( i = 0 ; i < matrix -> datasize_ ; ++ i ) { matrix -> data_ [ i ] = NULL ; } for ( i = 0 ; i < matrix -> datasize_ ; ++ i ) { matrix -> data,0
538,"<S2SV_ModStart> string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> sessionKey. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> nonceNewer. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> salt. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> nonceNewer. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> nonceNewer. b ) ) ; if (! result",0
539,<S2SV_ModStart> KEY_NEED_READ ) ; if ( key -> type -> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
540,<S2SV_ModStart> u4_first_slice_in_pic ) { ps_dec -> u4_first_slice_in_pic = 1 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 1 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 1 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 1 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 1 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 1 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec,0
541,"<S2SV_ModStart> ; dst_known = <S2SV_ModEnd> tnum_is_const ( dst_reg <S2SV_ModStart> case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } if ( dst_reg -> umin_value + umin_val < umin_val || dst_reg -> umax_value + umax_val < umax_val ) { dst_reg -> umin_value = 0 ; dst_reg -> umax_value = U64_MAX ; } if ( dst_reg -> umin_value + umin_val < umin_val || dst_reg -> umax_value < umax_val ) { dst_reg -> umin_value = 0 ; dst_reg -> umax_value =",0
542,"<S2SV_ModStart> ) ) { cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; cFYI ( 1, ""parent <S2SV_blank> file <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; cFYI ( 1, ""parent <S2SV_blank> file <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry ) ; cFYI ( 1, ""parent <S2SV_blank> file <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; cFYI ( 1, ""parent <S2SV_blank> file <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank>",0
543,<S2SV_ModStart> ; break ; case VFIO_PCI_CONFIG_REGION_INDEX : info. offset = VFIO_PCI_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> cfg_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR0_REGION_INDEX : info. offset = VFIO_PCI_INDEX_TO_OFFSET ( info. index ) ; info. size = VFIO_PCI_INDEX_TO_OFFSET ( info. index ) ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_INDEX_TO_OFFSET ( info. index ) ; info. size = VFIO_PCI_INDEX_TO_OFFSET ( info. index ) ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG,0
544,"<S2SV_ModStart>, copied ) ; if ( ext4_test_inode_state ( inode, EXT4_STATE_ORDERED_MODE ) ) { ret = ext4_jbd2_file_inode ( handle, inode ) ; if ( ret ) goto errout ; }",0
545,"<S2SV_ModStart> = 1 ; if ( uri [ strlen ( uri ) - 1 ] == '\\0' ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if ( options ) av_dict_copy ( & s -> chained_options, * options, 0 ) ; if ( s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) return AVERROR ( ENOMEM ) ;",0
546,"<S2SV_ModStart> = rcu_dereference_protected ( tp -> rcu, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) ; if ( rcu_dereference_protected ( tp -> rcu, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) == NULL ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIESFAILED ) ; goto out ; } rt = rcu_dereference_protected ( sk, sock_owned_by_user ( sk ) ) ; if ( rcu_dereference_protected ( tp -> rcu, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) == NULL ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIESFAILED ) ; goto out ; }",0
547,"<S2SV_ModStart> char * in, size_t maxlen <S2SV_ModStart> += 4 ; if ( len > maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { * out ++ = ( base64val ( digit1 ) << 4 ) | ( base64val ( digit2 ) >> 4 ) ; len ++ ; if ( digit3!= '=' ) { * out ++ = ( ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 4 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit3 ) << 6 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; } } } while ( * in && digit4!= '=' ) { * out ++ = ( ( base64val ( digit4 ) << 6 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; if ( len > maxlen ) return - 1 ;",0
548,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
549,"<S2SV_ModStart>, cur_len ; <S2SV_ModEnd> ssize_t total_written = <S2SV_ModStart> copied = min_t ( <S2SV_ModEnd> size_t, cur_len <S2SV_ModStart> ) { size_t total_copied = min_t ( <S2SV_ModEnd> size_t, cur_len <S2SV_ModStart> ) { size_t total_copied = min_t ( <S2SV_ModEnd> size_t, copied <S2SV_ModStart> copied = min_t ( <S2SV_ModEnd> size_t, total_copied",0
550,<S2SV_ModStart>! ( quirks & CP_RDESC_SWAPPED_MIN_MAX <S2SV_ModEnd> ) ) return,0
551,"<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart>, encode_frame_count ; SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> svc_ctx ) ; svc_log_reset <S2SV_ModEnd> ( svc_ctx ) <S2SV_ModStart> ; encode_frame_count = get_svc_internal_count <S2SV_ModEnd> ( svc_ctx ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> encode_frame_count <= 0 <S2SV_ModStart> svc_ctx ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> psnr_sum [ i ] [ 0 ] / number_of_frames, ( double ) si -> psnr_sum [ i ] [ 1 ] / number_of_frames, ( double ) si -> psnr_sum [ i ] [ 2 ] / number_of_frames, ( double ) si -> psnr_sum [ i ] [ 3 ] / number_of_frames, ( double ) si -> psnr_sum [ i ] [ 4 ] / number_of",0
552,"<S2SV_ModStart> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> 5 ) { BYTE value ; UINT32 left ; value = * in ++ ; if ( value == * in ) { len = ( UINT32 ) * in ++ ; len += 2 ; } else { len = ( UINT32 ) * in ++ ; len += 2 ; } fillMemory ( out, len, value ) ; out += len ; left -= len ; } else if ( value == * in ) { in ++ ; if ( * in < 0xFF ) { len = ( UINT32 ) * in ++ ; len += 2 ; } else { len = ( UINT32 ) * in ++ ; len += 2 ; } fillMemory ( out, len, value ) ; out += len ; left -= len ; } else { * out ++ = value ; left -- ; } } * ( ( UINT32 * ) in ) = * ( ( UINT32 * ) in ) ; }",0
553,"<S2SV_ModStart> ; if ( screen -> buffer ) vterm_allocator_free ( screen -> vt, screen -> buffer ) ; screen -> buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, screen -> sb_buffer ) ; screen ->",0
554,<S2SV_ModStart> { const char * literal_start = * str ; const char * literal_end = * str ; int in_named_escape = 0 ; int result = 0 ; assert ( <S2SV_ModEnd> literal == NULL <S2SV_ModStart> NULL ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ;,0
555,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static jas_stream_memobj_t <S2SV_ModEnd> mem_resize ( jas_stream_memobj_t <S2SV_ModStart> * buf ; JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; if ( bufsize < 0 ) { JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; if (! ( buf = jas_realloc2 ( m -> buf_, bufsize, sizeof ( unsigned char ) ) ) && bufsize ) { JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> failed\\n"" ) ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> succeeded\\n"" ) ) ; m -> buf_ = buf ; m -> bufsize_ =",0
556,"<S2SV_ModStart> create_dump_dir_from_problem_data ( pd <S2SV_ModEnd>, g_settings_dump_location )",0
557,"<S2SV_ModStart> ; if (! LookupString <S2SV_ModEnd> ( symInterpretMatchMaskNames, <S2SV_ModStart>, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } expr = expr -> action. args ; } else if ( expr -> expr. op == EXPR_ACTION_DECL ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. name ) ; if (! LookupString ( symInterpretMatchMaskNames, pred_txt, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } } else if ( expr -> expr. op == EXPR_IDENT ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. ident ) ; if ( istreq ( pred_txt, ""any"" ) ) { * pred_rtrn = MATCH_ANY ; * mods_rtrn = MOD_REAL_MASK_ALL ;",0
558,<S2SV_ModStart> void pcrypt_free ( struct pcrypt_ctx * ctx <S2SV_ModEnd> ) { struct <S2SV_ModStart> pcrypt_instance_ctx * inst = crypto_instance_ctx ( ctx <S2SV_ModEnd> ) ; crypto_drop_aead <S2SV_ModStart> ( inst ) ; kfree ( ctx ) ; } <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
559,<S2SV_ModStart> ; if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr,0
560,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
561,"<S2SV_ModStart> ; if ( skb -> ndisc_nodetype == NDISC_NODETYPE_HOST ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> from <S2SV_blank> host <S2SV_blank> or <S2SV_blank> unauthorized <S2SV_blank> router\\n"" ) ; return ; } # ifdef CONFIG_IPV6_NDISC_IPV6 if ( skb -> ndisc_nodetype == NDISC_NODETYPE_HOST ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> source <S2SV_blank> address <S2SV_blank> is <S2SV_blank> not <S2SV_blank> link-local\\n"" ) ; return ; } ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> from <S2SV_blank> host <S2SV_blank> or <S2SV_blank> unauthorized <S2SV_blank> router\\n"" ) ; return ; } # ifdef CONFIG_IPV6_NDISC_IPV6 if ( skb -> ndisc_nodetype == NDISC_NODETYPE_HOST ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> source <S2SV_blank> address <S2SV_blank> is <S2SV_blank> not <S2SV_blank> link-local\\n"" ) ; return ; } ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> from <S2SV_blank> host <S2SV_blank> or <S2SV_blank> unauthorized <S2SV_blank> router\\n""",0
562,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
563,<S2SV_ModStart> * up ; size_t replay_esn_len = xfrm_replay_state_esn_len ( replay_esn ) ; if ( replay_esn_len < 0 || replay_esn_len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; <S2SV_ModStart> ( replay_esn )!= <S2SV_ModEnd> xfrm_replay_state_esn_len ( up <S2SV_ModStart> up ) ) return - EINVAL ; replay_esn_len = xfrm_replay_state_esn_len ( replay_esn ) ; if ( xfrm_replay_state_esn_len ( replay_esn_len )!= xfrm_replay_state_esn_len ( up ) <S2SV_ModEnd> ) return -,0
564,"<S2SV_ModStart> int ret = proc_dointvec <S2SV_ModEnd> ( table, <S2SV_ModStart>, ppos ) ; if ( ret ||! write ) return ret ; if ( sysctl_perf_cpu_time_max_percent == 0 ) { printk ( KERN_WARNING ""perf: <S2SV_blank> Dynamic <S2SV_blank> interrupt <S2SV_blank> throttling <S2SV_blank> disabled, <S2SV_blank> can <S2SV_blank> hang <S2SV_blank> your <S2SV_blank> system!\\n"" ) ; perf_sample_allowed_ns = 0 ; } else if ( sysctl_perf_cpu_time_max_percent == 100 || sysctl_perf_cpu_time_max_percent == 0 ) { printk ( KERN_WARNING ""perf: <S2SV_blank> Dynamic <S2SV_blank> interrupt <S2SV_blank> throttling <S2SV_blank> disabled, <S2SV_blank> can <S2SV_blank> hang <S2SV_blank> your <S2SV_blank> system!\\n"" ) ; perf_sample_allowed_ns = 0 ; }",0
565,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_cost",0
566,<S2SV_ModStart> l_step_l ) { if ( l_step_l > OPJ_J2K_MAXRLVLS ) { opj_free ( l_tmp_data ) ; opj_free ( l_tmp_data ) ; opj_free ( l_tmp_data ) ; opj_free ( l_tmp_data ) ; opj_free ( l_tmp_data ) ; opj_free ( l_tmp_data ) ; } if ( l_step_l > OPJ_J2K_MAXRLVLS ) { opj_free ( l_tmp_data ) ; opj_free ( l_tmp_data ) ; opj_free ( l_tmp_data ) ; opj_free ( l_tmp_data ) ; opj_free ( l_tmp_data ) ; opj_free ( l_tmp_data ) ; l_tmp_data = ( OPJ_UINT32 * ) opj_malloc ( l_data_stride ) ; if (! l_tmp_data ) { opj_free ( l_tmp_data ) ; opj_free ( l_,0
567,"<S2SV_ModStart> name ) { if (! try_request_module ( __crypto_lookup_template ( name ), ""%s"", name ) ) return NULL ; if (! try_request_module ( __crypto_lookup_template ( name ), ""%s"", name ) ) return NULL ; return try_then_request_module ( __crypto_lookup_template ( name ), ""%s"", name ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
568,"<S2SV_ModStart> int start = 0 ; u32 prev_legacy, cur_legacy ; mutex_lock ( & kvm -> arch. vpit -> pit_state. lock ) ; prev_legacy = kvm -> arch. vpit -> pit_state. flags & KVM_PIT_FLAGS_HPET_LEGACY ; cur_legacy = ps -> flags & KVM_PIT_FLAGS_HPET_LEGACY ; if ( prev_legacy && cur_legacy ) start = 1 ; <S2SV_ModStart> flags ; kvm_pit_load_count <S2SV_ModEnd> ( kvm,",0
569,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> idx_str = cm -> mi_stride <S2SV_ModEnd> * mi_row + <S2SV_ModStart> ; MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> idx_str ; MODE_INFO * * prev_mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> prev_mi_grid_visible = cm -> prev_mi_grid_visible <S2SV_ModEnd> + idx_str ; <S2SV_ModStart> MODE_INFO * * prev_mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> prev_mi_grid_visible + idx_str <S2SV_ModEnd> ; BLOCK_SIZE bsize <S2SV_ModStart> cpi, tile, mi <S2SV_ModEnd>, BLOCK_64X64, <S2SV_ModStart> case SOURCE_VAR_BASED_PARTITION : switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : switch ( cpi -> sf. partition_search_type ) { case SOURCE_VAR_BASED_PARTITION : switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION :",0
570,<S2SV_ModStart> 1 ) ; if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) ibuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; if ( ibuf -> len > len ) ibuf -> len = len ; obuf = opipe -> bufs + nbuf ; * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; if ( obuf -> len > len ) obuf -> len = len ; opipe -> nrbufs ++ ; ret += obuf -> len ; i ++ ; } if (! ret && opipe -> waiting_writers && ( flags & SPLICE_F_NONBLOCK ) ) ret = - EAGAIN ;,0
571,"<S2SV_ModStart> ; dh = skb_header_pointer <S2SV_ModEnd> ( skb,",0
572,"<S2SV_ModStart> } else { if ( Instr && Instr -> IsVirtualFile ) { Fp = ( virtualDirCallback. open ) ( filename, UPNP_WRITE ) ; if ( Fp == NULL ) return HTTP_INTERNAL_SERVER_ERROR ; } <S2SV_ModEnd> parser -> position <S2SV_ModStart> POS_COMPLETE ) { status = parser_parse_entity ( parser ) ; if ( status == PARSE_INCOMPLETE_ENTITY ) { ok_on_close = TRUE ; } else if ( ( status!= PARSE_SUCCESS ) && ( status!= PARSE_CONTINUE_1 ) && ( status!= PARSE_INCOMPLETE ) ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_INTERNAL_SERVER_ERROR ; goto ExitFunction ; } if ( entity_offset + Data_Buf_Size > parser -> msg. entity. length ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_INTERNAL_SERVER_ERROR ; goto ExitFunction ; } if ( entity_offset + Data_Buf_Size > parser -> msg. entity. length ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code",0
573,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( fd = mkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> dir ) ) == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( tmpname [ strlen ( tmpname ) - 1 ]!= '\\0' ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; if ( tmpname [ strlen ( tmpname ) - 1 ]!= '\\0' ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } copyfile ( lockfd, fileno ( fd ) ) ; tmp_file = tmpname ; return fd ; } if ( tmpname [ strlen ( tmpname ) - 1 ]!= '\\0' ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; if ( tmpname [ strlen ( tmpname ) - 1 ]!= '\\0' ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } <S2SV_ModEnd> copyfile ( lockfd",0
574,<S2SV_ModStart> ( blkg ) ) { blkg_free ( new_blkg ) ; <S2SV_ModStart> PTR_ERR ( blkg ) ; } q -> root_blkg = blkg ; q -> root_rl. blkg = blkg ; ret = blk_throtl_init ( q ) ; if ( ret ) { spin_lock_irq ( q -> queue_lock ) ; blkg_destroy_all ( q ) ; spin_unlock_irq ( q -> queue_lock ) ; },0
575,"<S2SV_ModStart> ; if ( ncolors > 3 ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> in <S2SV_blank> the <S2SV_blank> frame\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> gb ) ; if ( lsize > 3 ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> in <S2SV_blank> the <S2SV_blank> frame\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> gb ) ; if ( rsize > 3 ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> in <S2SV_blank> the <S2SV_blank> frame\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> gb ) ; if ( lsize > 3 ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> in <S2SV_blank> the <S2SV_blank> frame\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> gb ) ; if ( rsize > 3 ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> in <S2SV_blank> the <S2SV_blank> frame\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
576,<S2SV_ModStart> ; krb5_data rspac ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * s4u2self_impersonated_clientdb = NULL ; HDB * clientdb = NULL ; HDB * s4u2self_impersonated_clientdb = NULL ; HDB * s4u2self_impersonated_clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * s4u2self_impersonated_clientdb = NULL ; HDB * s4u2self_impersonated_clientdb = NULL ; HDB * s4u2self_impersonated_clientdb = NULL ; HDB * s4u2self_impersonated_clientdb = NULL ; HDB * s4u2self_impersonated_clientdb = NULL ; HDB * s4u2self_impersonated_clientdb = NULL ; HDB * s4u2self_impersonated_clientdb = NULL ; HDB * s4u2self_impersonated_clientdb =,0
577,"<S2SV_ModStart> mnt ) ; if ( dentry -> d_inode -> i_op -> follow_link ) { cookie = dentry -> d_inode -> i_op -> follow_link ( dentry, nd ) ; error = PTR_ERR ( cookie ) ; if (! IS_ERR ( cookie ) ) { char * s = nd_get_link ( nd ) ; error = 0 ; if ( s ) error = __vfs_follow_link ( nd, s ) ; else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } if ( dentry -> d_inode -> i_",0
578,"<S2SV_ModStart> arg ) { struct usbdevfs_connectinfo ci ; struct usb_device * dev = ps -> dev ; if ( dev == NULL ) return - ENODEV ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if (",0
579,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * opt, <S2SV_ModStart>, int optlen, ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * opt, <S2SV_ModStart> & 3 ) opt -> __data [ opt -> optlen ++ ] = IPOPT_END ; if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; * optp = opt ; return 0 ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; * optp = opt ; return 0 ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; * optp = opt ; return 0 ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt",0
580,"<S2SV_ModStart> ; } retval = xfs_attr3_leaf_add ( args, bp ) ; if ( retval == ENOSPC ) { args -> op_flags |= XFS_DA_OP_RENAME ; args -> rmtblkcnt2 = args -> rmtblkcnt ; args -> rmtblkcnt2 = args -> rmtblkcnt ; args -> rmtblkcnt2 = args -> rmtblkcnt2 ; } if ( retval == EEXIST ) { args -> op_flags |= XFS_DA_OP_RENAME ; args -> rmtblkcnt2 = args -> rmtblkcnt2 ; args -> rmtblkcnt2 = args -> rmtblkcnt ; args -> rmtblkcnt2 = args -> rmtblkcnt2 ; args -> rmtblkcnt2 = args -> rmtblkcnt2 ; args -> rmtblkcnt2 = args -> rmtblkcnt ; } if ( retval == EEXIST ) { args -> op_flags |= XFS_DA_OP_RENAME ; args -> rmtblkcnt2 = args -> rmtblkcnt2 ; args",0
581,"<S2SV_ModStart> TC_IOCTL_GET_DEVICE_REFCOUNT : if ( ValidateIOBufferSize ( Irp, sizeof ( LONG ), ValidateOutput ) ) { * ( int * ) Irp -> AssociatedIrp. SystemBuffer = DeviceObject -> ReferenceCount ; Irp -> IoStatus. Information = sizeof ( LONG ) ; Irp -> IoStatus. Status = STATUS_BUFFER_TOO_SMALL ; } else if ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; Irp -> IoStatus. Information = sizeof ( int ) ; Irp -> IoStatus. Status = STATUS_BUFFER_TOO_SMALL ; if ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; Irp -> IoStatus. Information = sizeof ( int ) ; Irp -> IoStatus. Status = STATUS_BUFFER_TOO",0
582,"<S2SV_ModStart> ; if ( connection == NULL ) goto error ; else { bool found_upgrade = false ; double count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, ""Upgrade"" ) ; if ( strcmp ( token, ""Sec-WebSocket-Version"" ) == 0 ) { found_upgrade = true ; break ; } } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, ""Sec-WebSocket-Version"" ) ; if ( strcmp ( token, ""Sec-WebSocket-Version"" ) == 0 ) { found_upgrade = true ; break ; } } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) goto error ;",0
583,"<S2SV_ModStart> uint16 nif = 0 ; if ( plen < 0 ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } if ( pcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."", errbuf ) == - 1 ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } if ( pcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."", errbuf ) == - 1 ) { rpcapd_log ( LOGPRIO_ERROR, ""Send <S2SV_blank> to <S2SV_blank> client <S2SV_blank> failed: <S2SV_blank> %s"", errbuf ) ; return -",0
584,"<S2SV_ModStart> ; struct dump_dir <S2SV_ModEnd> * dd = <S2SV_ModStart> DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } dd_create_basic_files ( dd, client_uid, NULL ) ; dd_save_text ( dd, FILENAME_ABRT_VERSION, VERSION ) ; dd_save_text ( dd, FILENAME_CMDLINE, cmdline ) ; g_hash_table_iter_init ( & iter, problem_info ) ; while ( g_hash_table_iter_next ( & iter, & gpkey, & gpvalue ) ) { dd_save_text ( dd, FILENAME_UID, cmdline ) ; free ( cmdline ) ; }",0
585,"<S2SV_ModStart> ; for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO",0
586,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
587,"<S2SV_ModStart> * sk, <S2SV_ModEnd> int tstype ) <S2SV_ModStart> sock_exterr_skb * serr ; int err <S2SV_ModEnd> ; serr = <S2SV_ModStart> ; serr -> ee. ee_errno = ENOMSG ; serr -> ee. ee_origin = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee. ee_info = tstype <S2SV_ModEnd> ; if ( <S2SV_ModStart> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( skb_shinfo ( skb ) -> tskey > skb_shinfo ( skb ) -> tskey ) serr -> ee. ee_data -= skb_shinfo ( skb ) -> tskey ; if ( skb_shinfo ( skb ) -> tskey > skb_shinfo ( skb ) -> tskey ) serr -> ee. ee_data -= skb_shinfo ( skb ) ->",0
588,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
589,<S2SV_ModStart> = len ; bp [ len - 1 ] = 0 ; <S2SV_ModStart> = len ; bp [ len - 1 ] = 0 <S2SV_ModEnd> ; ND_TCHECK ( <S2SV_ModStart> = len ; bp [ len - 1 ] = 0 <S2SV_ModEnd> ; ND_TCHECK ( <S2SV_ModStart> = len ; bp [ len - 1 ] = 0 <S2SV_ModEnd> ; ND_TCHECK ( <S2SV_ModStart> = len ; bp [ len - 1 ] = 0 <S2SV_ModEnd> ; ND_TCHECK ( <S2SV_ModStart> = len ; bp [ len - 1 ] = 0 <S2SV_ModEnd> ; ND_TCHECK ( <S2SV_ModStart> = len ; bp [ len - 1 ] = 0 <S2SV_ModEnd> ; ND_TCHECK ( <S2SV_ModStart> = len ; bp [ len - 1 ] = 0 <S2SV_ModEnd> ; ND_TCHECK ( <S2SV_ModStart> = len ; bp [ len - 1 ] = 0 <S2SV_ModEnd> ; ND_TCHECK ( <S2SV_ModStart> = len ; bp [ len - 1 ] = 0 <S2SV_ModEnd> ; ND_TCHECK ( <S2SV_ModStart> = len ; bp [ len - 1 ] = 0 <S2SV_ModEnd> ; bp [ <S2SV_ModStart> = len ;,0
590,"<S2SV_ModStart> ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc"" ), CONST_STR_LEN ( ""/abc/"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ), CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc?d="" ), CONST_STR_LEN ( ""/abc?d="" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__,",0
591,<S2SV_ModStart> ; if ( task -> ptrace &&! capable_wrt_mm ( task ) ) { rcu_read_unlock ( ) ; return - EPERM ; } if (! dumpable && capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable_wrt_mm ( task ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_RAW_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_RAW_PTRACE ) ) {,0
592,<S2SV_ModStart> ; for ( int j = 0 ; j < w ; j ++ ) { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( ( a & pb_7f ) + ( b & pb_7f ) ) ^ ( a & pb_80 ) ; * ( long * ) ( dst + i ) = ( ( a ^ b ) & pb_80 ) ; } for ( ; i < w ; i ++ ) { * ( long * ) ( src1 + i ) = ( a & pb_7f ) + ( b & pb_7f ) ) ; * ( long * ) ( dst + i ) = ( ( a & pb_7f ) + ( b & pb_7f ) ) ^ ( a & pb_80 ) ; * ( long * ) ( dst + i ) = ( ( a ^ b ) & pb_80 ) ; } for ( ; i < w ; i ++ ) dst [ i ] = src1 [ i ] + src2 [ i ] ; } for ( ; i < w ; i ++ ),0
593,"<S2SV_ModStart> ; if ( dev -> coherent_dma_mask <= DMA_BIT_MASK ( 32 ) || dev -> coherent_dma_mask <= DMA_BIT_MASK ( 64 ) || dev -> coherent_dma_mask <= DMA_BIT_MASK ( 64 ) || dev -> coherent_dma_mask <= DMA_BIT_MASK ( 64 ) ) { memset ( addr, 0, size ) ; return addr ; } dev -> coherent_dma_mask = DMA_BIT_MASK ( 32 ) ; dev -> coherent_dma_mask = DMA_BIT_MASK ( 32 ) ; dev -> coherent_dma_mask = DMA_BIT_MASK ( 32 ) ; dev -> coherent_dma_mask = DMA_BIT_MASK ( 32 ) ; dev -> coherent_dma_mask = PAGE_ALIGN ( size ) ; if ( dev -> coherent_dma_mask <= DMA_BIT_MASK ( 32 ) ) dev -> coherent_dma_mask = DMA_BIT_MASK ( 32 ) ; dev -> coherent",0
594,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
595,<S2SV_ModStart> ps_sps ) ; if ( 0 == ps_sps -> i1_sps_valid ) { ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params. i4_sei_buffering_period_params_present_flags = 1 ; ps_parse -> s_sei_pic_timing_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei,0
596,"<S2SV_ModStart> * priv ; if ( port -> bulk_out_size > CYPRESS_BUF_SIZE ) { kfree ( priv ) ; return - ENOMEM ; } priv = kzalloc ( sizeof ( struct cypress_private ), GFP_KERNEL ) ; if (! priv ) return - ENOMEM ; if ( kfifo_alloc ( & priv -> read_fifo, CYPRESS_BUF_SIZE, GFP_KERNEL ) ) { kfree ( priv ) ; return - ENOMEM ; } priv -> read_urb_interval = port -> interrupt_in_urb -> interval ; priv -> read_urb_interval = port -> interrupt_out_urb -> interval ; priv -> read_urb_interval = port -> interrupt_in_urb -> interval ; priv -> write_urb_interval = port -> interrupt_out_urb -> interval ; priv -> read_urb_interval = port -> interrupt_in_urb -> interval ; dev_dbg ( & port -> dev, ""%s <S2SV_blank> - <S2SV_blank> intervals: <S2SV_blank> read=%d <S2SV_blank> write=%d\\n"", __func__, priv -> read_urb_interval, priv -> read_urb_interval ) ; }",0
597,"<S2SV_ModStart> ; tmp_sdma_rht = kmalloc ( sizeof ( * tmp_sdma_rht ), GFP_KERNEL ) ; if (! tmp_sdma_rht ) { kfree ( tmp_sdma_rht ) ; HFI1_CAP_CLEAR ( SDMA_AHG ) ; return 0 ; }",0
598,<S2SV_ModStart> device_data ; if ( dev ) device_put ( & dev -> dev ) ;,0
599,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> mi_repair_parallel ( MI_CHECK <S2SV_ModStart>, rep_quick ) { if ( param -> testflag & T_UNPACK ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; } else { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_",0
600,"<S2SV_ModStart> == q || <S2SV_ModEnd> size < 16 <S2SV_ModStart> size > 256 ) return ( ( Image * ) NULL ) ; p = q ; sizes [ i ++ ] = size ; while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) || ( * p == ',' ) ) ) { resized = ResizeImage ( image, sizes [ i ], sizes [ i ], image -> filter, exception ) ; if ( resized == ( Image * ) NULL ) return ( DestroyImageList ( images ) ) ; if ( images == ( Image * ) NULL ) return ( DestroyImageList ( images ) ) ; if ( images == ( Image * ) NULL ) return ( DestroyImageList ( images ) ) ; } if ( i == 0 ) i = 10 ; for ( i = 0 ; i < 10 ; i ++ ) { resized = ResizeImage ( image, sizes [ i ], sizes [ i ], image -> filter, exception ) ; if ( resized == ( Image * ) NULL ) return ( DestroyImageList ( images ) ) ; if ( images == ( Image * ) NULL ) return ( DestroyImageList ( images ) ) ; if ( images == ( Image * ) NULL ) return ( DestroyImageList (",0
601,<S2SV_ModStart> } else { xfs_bmbt_irec_t <S2SV_ModEnd> dblocks = XFS_B_TO_FSB <S2SV_ModStart> valuelen ) ; xfs_bmbt_irec_t <S2SV_ModEnd> dblocks = XFS_B_TO_FSB <S2SV_ModStart> valuelen ) ; xfs_bmbt_irec_t <S2SV_ModEnd> nblks += dblocks,0
602,"<S2SV_ModStart> ) ; } buflen = pq_getmsgint ( buf, 4 ) ; if ( rawlen < 0 ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""too <S2SV_blank> many <S2SV_blank> pairs <S2SV_blank> in <S2SV_blank> hstore <S2SV_blank> recv"" ) ) ) ; for ( i = 0 ; i < pcount ; ++ i ) { int rawlen = pq_getmsgint ( buf, 4 ) ; int len ; if ( rawlen < 0 ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""too <S2SV_blank> many <S2SV_blank> pairs <S2SV_blank> in <S2SV_blank> hstore <S2SV_blank> recv"" ) ) ) ; if ( rawlen < 0 ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""too <S2SV_blank> many <S2SV_blank> pairs <S2SV_blank> in <S2SV_blank> hstore <S2SV_blank> recv"" ) ) ) ; for ( i = 0 ; i < pcount ; ++ i ) { int rawlen = pq_getmsgint ( buf, 4 ) ; int len ; if ( rawlen < 0 ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg (",0
603,"<S2SV_ModStart> val ) ; if (! strcmp ( var, ""command"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> command"", r -> name ) ; if (! strcmp ( var, ""rspfile"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if (! strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ;",0
604,<S2SV_ModStart> ; if ( RE_YY_INPUT ( yyscanner ) <S2SV_ModStart> ; if ( RE_YY_INPUT ( yyscanner ) <S2SV_ModStart> ; if ( RE_YY_INPUT ( yyscanner ) <S2SV_ModStart> ; if ( RE_YY_INPUT ( yyscanner ) <S2SV_ModStart> ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT (,0
605,"<S2SV_ModStart> ) ) { if ( clen > sizeof ( c -> buf ) - 1 ) { return bad_request ( c, 431, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen > sizeof ( c -> buf ) - 1 ) { return bad_request ( c, 431, __LINE__ ) ; } <S2SV_ModStart> } if ( clen > sizeof ( c -> buf ) - 1 ) { if ( clen > sizeof ( c -> buf ) - 1 ) { return bad_request ( c, 431, __LINE__ ) ; } <S2SV_ModStart> if ( clen > sizeof ( c -> buf ) - 1 ) { return bad_request ( c, 431, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen > sizeof ( c -> buf ) - 1 ) { return bad_request ( c, 431, __LINE__ ) ; } if ( clen > sizeof ( c -> buf ) - 1 ) { if ( clen > sizeof ( c -> buf ) - 1 ) { return bad_request ( c, 431, __LINE__ ) ; } <S2SV_ModStart> if ( clen > sizeof ( c -> buf ) - 1 ) { return bad_request ( c, 431, __LINE__ ) ; }",0
606,"<S2SV_ModStart> vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> ] ; int i, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> 16 ], temp_out [ 16 ] ; const transform_2d ht = FHT_16 [ tx_type ] ; for ( i = 0 ; i < 16 ; ++ i ) temp_in [ j ] = input [ j * stride + i ] * 4 ; ht. cols ( temp_in, temp_out ) ; for ( j = 0 ; j < 16 ; ++ j ) outptr [ j * 16 + i ] = ( temp_out [ j ] + 1 + ( temp_out [ j ] < 0 ) ) >> 2 ; } for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) temp_in [ j ] = out [",0
607,"<S2SV_ModStart> ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len,",0
608,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access ) ; if ( error ) <S2SV_ModEnd> goto out_drop_write ; <S2SV_ModStart> goto out_drop_drop_write ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_drop_write ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_drop_write ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_drop_write ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_drop_write ; fh_drop_write ( fh ) ; <S2SV_ModEnd> fh_drop_write ( fh",0
609,"<S2SV_ModStart> * ue ; if ( tree_root == NULL ) { fprintf ( stdout, "" <S2SV_blank> Unfolding <S2SV_blank> the <S2SV_blank> meta-tree <S2SV_blank> "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout, "" <S2SV_blank> done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue, & unfolded_tree, next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array, i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ], & ue -> fop, sizeof ( struct filter_op ) ) ; i ++ ; } } TAILQ_FOREACH ( ue, & unfolded_tree, next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array, i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ], & ue -> fop, sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ], & ue -> fop, sizeof ( struct filter_op",0
610,"<S2SV_ModStart> char * temp_filename = osi_calloc ( <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, filename ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ; node = list_node ( node ) ; fprintf ( fp, ""[%s]\\n"", section -> name ) ; for ( const list_node_t * enode = list_begin ( section -> entries ) ; enode!= list_end ( section -> entries ) ; enode = list_node ( enode ) ; fprintf ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s\\n"", entry",0
611,"<S2SV_ModStart> elen ) ; elen += pc -> lengthComponentIdent ; <S2SV_ModStart> case 1 : elen += pc -> lengthComponentIdent ; break ; case 2 : elen += pc -> lengthComponentIdent ; break ; case 3 : if ( tolen < 3 ) return - ENAMETOOLONG ; memcpy ( p, ""../"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 4 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 6 : comp_len = udf_get_filename ( sb, pc -> componentIdent, pc -> lengthComponentIdent, p, tolen ) ; p += 3 ; tolen -= 3 ; break ; case 7 : comp_len = udf_get_filename ( sb, pc -> componentIdent, pc -> lengthComponentIdent, p, tolen ) ; p += comp_len ; tolen -= comp_len ; if ( tolen == 0 ) return - ENAMETOOLONG ; * p ++ = '/' ; tolen -= comp_len ; if ( comp_len < 0 ) return - ENAMETOOLONG ;",0
612,"<S2SV_ModStart> case NFSPROC_GETATTR : case NFSPROC_SETATTR : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsproc_str, ""proc-%u"", proc ) ) ) ; goto trunc ; } <S2SV_ModStart> case NFSPROC_DELETE : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsproc_str, ""proc-%u"", proc ) ) ) ; goto trunc ; } break ; case NFSPROC_UNLINK : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsproc_str, """,0
613,"<S2SV_ModStart> : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Config <S2SV_blank> Rev <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> "", EXTRACT_32BITS ( tptr ), EXTRACT_32BITS ( tptr ), EXTRACT_32BITS ( tptr ), EXTRACT_32BITS ( tptr ), EXTRACT_32BITS ( tptr ), EXTRACT_32BITS ( tptr ), EXTRACT_32BITS ( tptr ), EXTRACT_32BITS ( tptr ), EXTRACT_32BITS ( tptr ), EXTRACT_32BITS ( tptr ), EXTRACT_32BITS ( tptr ), EXTRACT_32BITS ( tptr ), EXTRACT_32BITS ( tptr ), EXTRACT_32BITS ( tptr ), EXTRACT_32",0
614,"<S2SV_ModStart> userData, target, ctxt -> xml_namespaces <S2SV_ModStart>, target, ctxt -> xml_namespaces <S2SV_ModStart>, target, ctxt -> xml_namespaces <S2SV_ModStart>, target, ctxt -> xml_namespaces <S2SV_ModStart>, target, ctxt -> xml_namespaces <S2SV_ModStart>, target, ctxt -> xml_namespaces <S2SV_ModStart>, target, ctxt -> xml_namespaces <S2SV_ModStart>, target, ctxt -> xml_namespaces <S2SV_ModStart>, target, ctxt -> xml_namespaces <S2SV_ModStart>, target, ctxt -> xml_namespaces <S2SV_ModStart>, target, ctxt -> xml_namespaces <S2SV_ModStart> NULL ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if ( buf == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if ( buf == NULL ) { xmlErrMemory ( ctxt, NULL ) ; xmlFree ( buf ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if ( buf == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt ->",0
615,"<S2SV_ModStart> ; bool slow = false <S2SV_ModStart> ) ; * addr_len = sizeof ( * sin ) ; if ( flags & MSG_TRUNC ) { msg -> msg_flags |= MSG_TRUNC ; } skb = skb_recv_datagram ( sk, flags | ( noblock? MSG_DONTWAIT : 0 ), & peeked, & off, & err ) ; if ( err ) { atomic_inc ( & sk -> sk_drops ) ; UDP_INC_STATS_USER ( sock_net ( sk ), UDP_MIB_INDATAGRAMS, is_udplite ) ; UDP_INC_STATS_USER ( sock_net ( sk ), UDP_MIB_INDATAGRAMS, is_udplite ) ; } else { atomic_inc ( & sk -> sk_drops ) ; UDP_INC_STATS_USER ( sock_net ( sk ), UDP_MIB_INDATAGRAMS, is_udplite ) ; UDP_INC_STATS_USER ( sock_net ( sk ), UDP_MIB_INDATAGRAMS, is_udplite ) ; }",0
616,"<S2SV_ModStart> len ) { <S2SV_ModEnd> ND_TCHECK2 ( * <S2SV_ModStart> ; } while ( tlen >= sizeof ( rpki_rtr_pdu ) ) { ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; pdu_header = ( const rpki_rtr_pdu * ) tptr ; pdu_type = EXTRACT_32BITS ( pdu_header -> pdu_type ) ; if (! pdu_type ) { break ; } if (! pdu_len ) { break ; } if ( rpki_rtr_pdu_print ( ndo, tptr, 8 ) ) goto trunc ; tlen -= pdu_len ; tptr += pdu_len ; } <S2SV_ModEnd> return ; trunc",0
617,"<S2SV_ModStart> int tagval ; struct stream packet = * s ; if ( s -> p [ 0 ]!= ( BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED ) ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER_TAG_SEQUENCE|BER_TAG_CONSTRUCTED, <S2SV_blank> got <S2SV_blank> %x"", s -> p [ 0 ] ) ; return False ; } if (! s_check_rem ( s, length ) ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER_TAG_SEQUENCE| BER_TAG_CONSTRUCTED, <S2SV_blank> got <S2SV_blank> %x"", s -> p [ 0 ] ) ; return False ; } if (! s_check_rem ( s, length ) ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER_TAG_SEQUENCE|BER_TAG_CONSTRUCTED, <S2SV_blank> got <S2SV_blank> %x"", s -> p [ 0 ] ) ; return False ; } if (! s_check_rem ( s, length ) ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER",0
618,"<S2SV_ModStart> ; int chars_processed <S2SV_ModEnd> ; int elt <S2SV_ModStart> ; int data_size ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ( ( i = * cp ++ ) & INDIR_MASK )!= INDIR_MASK ) { compress = 0 ; cp = bp + ( ( ( i << 8 ) | * cp ) & 0x3fff ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int )",0
619,"<S2SV_ModStart> args ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE ) ; args -> rmtvaluelen = args -> valuelen ; args -> rmtvaluelen = valuelen ; args -> rmtvaluelen = args -> valuelen ; args -> rmtvaluelen = args -> valuelen ; args -> rmtvaluelen = args -> valuelen ; args -> rmtvaluelen = args -> valuelen ; args -> rmtvaluelen = args -> valuelen ; args -> rmtvaluelen = args -> valuelen ;",0
620,"<S2SV_ModStart> int rv = Socket_print <S2SV_ModEnd> ( S, <S2SV_ModStart> ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""%s"", request <S2SV_ModStart>, request, StringBuffer_length ( data ), _auth? _auth : """", StringBuffer_toString ( data ) ) ; if ( rv < 0 ) THROW ( IOException, ""Monit: <S2SV_blank> cannot <S2SV_blank> send <S2SV_blank> command <S2SV_blank> to <S2SV_blank> the <S2SV_blank> monit <S2SV_blank> daemon <S2SV_blank> -- <S2SV_blank> %s"", STRERROR ) ;",0
621,"<S2SV_ModStart> } pid_t child ; if ( is_link ( dest ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", dest ) ; exit ( 1 ) ; } child = copy_file ( src, dest ) ; if ( child < 0 ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; exit ( 1 ) ; } if ( child == 0 ) { drop_privs ( 0 ) ; rv = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } <S2SV_ModEnd> waitpid ( child <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( chown <S2SV_ModStart> ( dest, S_IRUSR | S_IWUSR <S2SV_ModEnd> ) < 0 <S2SV_ModStart> ( chmod ( dest, S_IRUSR | S_IWUSR <S2SV_ModEnd> ) < 0 <S2SV_ModStart> ( chmod ( dest, S_IRUSR | S_IWUSR <S2SV_ModEnd> ) < 0",0
622,<S2SV_ModStart> flags ) ; kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; <S2SV_ModEnd> hstats -> seconds_since_last_reset <S2SV_ModStart> comp ) ; <S2SV_ModEnd> hstats -> lip_count <S2SV_ModStart> fcstats -> fc. lip_count ; hstats -> nos_count = fcstats -> fc. nos_count ; hstats -> error_count = fcstats -> fc. error_count ; hstats -> dumped_count = fcstats -> fc. dropped_count ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_sync_count = fcstats -> fc. loss_of_syncs ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_syncs_count = fcstats -> fc. loss_of_syncs_count ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_syncs_count = fcstats -> fc. loss_of_syncs_count ; hstats -> loss_of_syncs_count = fcstats -> fc. loss_of_syncs_count ; hstats,0
623,"<S2SV_ModStart> value ) { value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0",0
624,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_clear ( ) ; * head = NULL ; * out = line ; return 0 ; } if ( len == - PKT_LEN_SIZE ) { giterr_clear ( ) ; * head = line ; return flush_pkt ( head ) ; } if ( len == - PKT_LEN_SIZE ) { giterr_clear ( ) ; * head = line ; return flush_pkt ( head ) ; } len -= PKT_LEN_SIZE ; if ( bufflen >= 4 &&! git__prefixcmp ( line, ""PACK"" ) ) ret = pack_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""NAK <S2SV_blank> "" ) ) ret = nak_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""ERR <S2SV_blank> "" ) ) ret = err_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""ERR <S2SV_blank> "" ) ) ret = err_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""ERR <S2SV_blank> "" )",0
625,"<S2SV_ModStart> ; if ( unlikely <S2SV_ModEnd> ( check_stack_guard_page ( <S2SV_ModStart>, address ) <S2SV_ModEnd> ) return VM_FAULT_SIGSEGV",0
626,<S2SV_ModStart> -> sasl_mechanism ; rec -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> sasl_password = g_strdup ( src -> sasl_password ) ; <S2SV_ModStart> -> sasl_password = g_strdup ( src -> sasl_password ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ;,0
627,"<S2SV_ModStart> { struct bpf_insn_aux_data <S2SV_ModEnd> * new_data, <S2SV_ModStart> ) ) ; memset ( new_data, 0, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; <S2SV_ModStart> = new_data ; memcpy ( new_data + off + cnt - 1, old_data + off, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; memcpy ( new_data + off + cnt - 1, old_data + off + cnt - 1, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; <S2SV_ModStart> = new_data ; memcpy ( new_data + off, old_data + off, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; memcpy ( new_data + off + cnt - 1, old_data + off + cnt - 1, sizeof ( struct bpf_insn_aux_data ) * ( prog_len -",0
628,"<S2SV_ModStart> bp2 ; ND_TCHECK_32BITS ( & dp -> ip6f_offlg ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_32BITS ( & dp -> ip6f_offlg ) & IP6F_OFF_MASK, sizeof ( struct ip6_frag ) ) ) ; } else { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_32BITS ( & dp -> ip6f_offlg ) & IP6F_OFF_MASK, sizeof ( struct ip6_hdr ) ) ) ; } if ( ( EXTRACT_16BITS ( & dp -> ip6f_offlg ) & IP6F_OFF_MASK )!= 0 ) { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp",0
629,"<S2SV_ModStart> trunc ; } if ( len - i < IP6MOPT_REFRESH_MINLEN ) { ND_PRINT ( ( ndo, ""(refresh: <S2SV_blank> %u)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""(refresh: <S2SV_blank> %u)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; break ; case IP6MOPT_ALTCOA : if ( len - i < IP6MOPT_ALTCOA_MINLEN ) { ND_PRINT ( ( ndo, ""(altcoa: <S2SV_blank> trunc)"" ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""(alt-CoA: <S2SV_blank> %s)"", ip6addr_string ( ndo, & bp [ i + 2 ] ) ) ) ; break ; case IP6MOPT_NONCEID : if ( len - i < IP6MOPT_NONCEID_MINLEN ) { ND_PRINT ( ( ndo, ""(ni: <S2SV_blank> trunc)"" ) ) ; goto trunc ; } ND_PRINT ( ( ndo",0
630,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
631,"<S2SV_ModStart> 0 ) ; if ( occ0 < 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""occ0_overflow"", ( int ) ( occ0 / rowsize ) ) ; TIFFErrorExt ( tif -> tif_clientdata, ""occ0_overflow"", ( int ) ( occ0 / rowsize ) ) ; <S2SV_ModStart> 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""occ0_overflow"", ( int ) ( occ0 / rowsize ) ) ; TIFFErrorExt ( tif -> tif_clientdata, ""occ0_overflow"", ( int ) ( occ0 / rowsize ) ) ; TIFFErrorExt ( tif -> tif_clientdata, ""occ0_overflow"", ( int ) ( occ0 / rowsize ) ) ) ; <S2SV_ModStart> 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""occ0_overflow"", ( int ) ( occ0 / rowsize ) ) ; TIFFErrorExt ( tif -> tif_clientdata, ""occ0_overflow"", ( int ) ( occ0 / rowsize ) ) ; TIFFErrorExt ( tif -> tif",0
632,"<S2SV_ModStart>, o, datao ; if ( CHECKOVERFLOW ( 6 + n -> offset, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + datao, n -> order ) ; datao += 2 ; exif_mnote_data_canon_clear ( n ) ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. tag = exif_get_short ( buf + o + 2, n -> order ) ; n -> entries [ tcount ]. format = exif_get_short ( buf + o + 4, n -> order ) ; n -> entries [ tcount ]. components = exif_get_long ( buf + o + 4, n -> order ) ; n -> entries [ tcount ]. order = n -> order ;",0
633,"<S2SV_ModStart> established ) { * minor_status = KG_CTX_INCOMPLETE ; return GSS_S_NO_CONTEXT ; } if ( kg_locate_iov ( iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM )!= NULL ) { code = kg_unseal_stream_iov_token ( minor_status, ctx, conf_state, qop_state, iov, iov_count, toktype ) ; } else if ( kg_locate_iov ( iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM )!= NULL ) { code = kg_unseal_stream_iov_token ( minor_status, ctx, conf_state, qop_state, iov, iov_count, toktype ) ; } else { code = kg_unseal_iov_token ( minor_status, ctx, conf_state, qop_state, iov, iov_count, toktype ) ; }",0
634,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> } } <S2SV_null>,0
635,"<S2SV_ModStart> HA_ERR_CRASHED : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM <S2SV_blank> table"", filename ) ; <S2SV_ModStart> HA_ERR_CRASHED_ON_USAGE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ;",0
636,"<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; CURLcode <S2SV_ModEnd> res ; if <S2SV_ModStart> ; res = Curl_convert_from_network <S2SV_ModEnd> ( handle, <S2SV_ModStart> 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = in ; string ++ ; } ns [ strindex ] = 0 ; if ( olen ) { * olen = strindex ; return ns ; } if ( olen ) { * olen = strindex ; return NULL ; } if ( olen ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns <S2SV_ModEnd> ; } <S2SV_null>",0
637,"<S2SV_ModStart> RAnalOp next_op ; if ( len < op -> size ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; } else { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; if ( len < op -> size ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, buf + op -> size, len - op -> size, cpu ) ; } else { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; if ( len < op -> size ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, len - op -> size, cpu )",0
638,"<S2SV_ModStart> ( unlikely ( iov_iter_count ( i ) <= 0 ) ) { bytes = min_t ( unsigned long, PAGE_CACHE_SIZE - offset, iov_iter_single_seg_count ( i ) ) ; goto again ; } <S2SV_ModStart> again ; } if ( unlikely ( iov_iter_count ( i ) <= 0 ) ) { bytes = min_t ( unsigned long, PAGE_CACHE_SIZE - offset, iov_iter_single_seg_count ( i ) ) ; goto again ; } if ( iov_iter_count ( i ) <= 0 ) { bytes = min_t ( unsigned long, PAGE_CACHE_SIZE - offset, iov_iter_count ( i ) ) ; goto again ; } if ( unlikely ( iov_iter_count ( i ) <= 0 ) ) { bytes = min_t ( unsigned long, PAGE_CACHE_SIZE - offset, iov_iter_single_seg_count ( i ) ) ; goto again ; } if ( iov_iter_count ( i ) <= 0 ) { bytes = min_t ( unsigned long, PAGE_CACHE_SIZE - offset, iov_iter_single_seg_",0
639,"<S2SV_ModStart> drop_recycle_buffer ; } if ( unlikely ( len < ring -> rx_buffersize ) ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; cnt ++ ; tmp -= ring -> rx_buffersize ; if ( tmp <= 0 ) break ; } desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; cnt = 0 ; while ( 1 ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring",0
640,"<S2SV_ModStart> pdu_free_state_ref = usm_free_usmStateReference ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_POST_PREMIB_READ_CONFIG, init_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN",0
641,"<S2SV_ModStart> obj, name <S2SV_ModEnd>, data ) <S2SV_ModStart> |= SEEN ; if (! path ) path = """" ; if ( obj -> type == OBJ_TREE ) { process_tree ( revs, ( struct tree * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TAG ) { process_tag ( revs, ( struct tag * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TREE ) { process_tree ( revs, ( struct tree * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob *",0
642,"<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) return! prog -> match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; if ( prog -> flags & eflags ) return! prog -> match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; if ( prog -> flags & eflags ) return! prog -> match ( prog -> start, sp, sp, prog -> flags | eflags | eflags, sub ) ; if ( prog -> flags & eflags ) return! prog -> match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; if ( prog -> flags & eflags ) return! prog -> match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; if ( prog -> flags & eflags ) return! prog -> match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; if ( prog -> flags & eflags ) return! prog -> match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ;",0
643,<S2SV_ModStart> + 1 ; if ( zsize > c -> tile_width * c -> tile_height ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> + 1 ; if ( zsize > c -> tile_height * c -> tile_width ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> + 1 ; if ( zsize > c -> tile_width * c -> tile_height * c -> tile_width * c -> tile_height ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> + 1 ; if ( zsize > c -> tile_height * c -> tile_width * c -> tile_height * c -> tile_height * c -> tile_width * c -> tile_height * c -> tile_height ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> + 1 ; if ( zsize > c -> tile_width * c -> tile_height * c -> tile_height * c -> tile_height * c -> tile_height * c -> tile_height * c -> tile_width * c -> tile_height * c -> tile_height * c -> tile_height * c -> tile_height * c -> tile_height * c -> tile_width * c -> tile_height * c -> tile,0
644,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
645,"<S2SV_ModStart> ; # ifndef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= 1 ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if (! exten ||! exten -> efix_entry ) { snmp_log ( LOG_ERR, ""No <S2SV_blank> command <S2SV_blank> to <S2SV_blank> run\\n"" ) ; return SNMP_ERR_GENERR ; } if (! exten ||! exten -> efix_entry ) { snmp_log ( LOG_ERR, ""No <S2SV_blank> command <S2SV_blank> to <S2SV_blank> run\\n"" ) ; return SNMP_ERR_GENERR ; }",0
646,<S2SV_ModStart> ; break ; case 3 : { CheckNumberPixels ( 4 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >>,0
647,"<S2SV_ModStart> timer ) ; mutex_lock ( & register_mutex ) ; list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; slave -> timer = NULL ; mutex_unlock ( & register_mutex ) ; } list_for_each_entry_safe ( slave, tmp, & timeri -> timer_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; slave -> master = NULL ; slave -> timer = NULL ; spin_unlock_irq ( & slave_active_lock ) ; mutex_unlock ( & register_mutex ) ;",0
648,"<S2SV_ModStart> len ; } ND_TCHECK_16 ( * p <S2SV_ModEnd>, 1 ) <S2SV_ModStart> len ; } ND_TCHECK_16 ( * p <S2SV_ModEnd>, 1 ) <S2SV_ModStart> len ; } ND_TCHECK_16 ( * p <S2SV_ModEnd>, 1 ) <S2SV_ModStart> len ; } ND_TCHECK_16 ( * p <S2SV_ModEnd>, 1 ) <S2SV_ModStart> len ; } ND_TCHECK_16 ( * p <S2SV_ModEnd>, 1 ) <S2SV_ModStart> len ; } ND_TCHECK_16 ( * p <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK_16 ( * p <S2SV_ModEnd>, 1 ) <S2SV_ModStart> len ; } ND_TCHECK_16 ( * p <S2SV_ModEnd>, 1 ) <S2SV_ModStart> len ; } ND_TCHECK_16 ( * p <S2SV_ModEnd>, 1 ) <S2SV_ModStart> len ; } ND_TCHECK_16 ( * p <S2SV_ModEnd>, 1 ) <S2SV_ModStart> len ; } ND_TCHECK_16 ( * p <S2SV_ModEnd>, 1 ) <S2SV_ModStart> len ; } ND_TCHECK_16 ( * p <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK_16 ( * p <S2SV_ModEnd>, 1 ) <S2SV_ModStart> len ; } ND_TCHECK_16 ( * p",0
649,"<S2SV_ModStart> ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config, ""io.va"", ( binobj -> info )? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config, ""bin.baddr"", baseaddr ) ; r_config_set_i ( r -> config, ""asm.bits"", bits ) ; r_config_set ( r -> config, ""asm.arch"", arch ) ; r_config_set ( r -> config, ""asm.bits"", bits ) ; r_config_set ( r -> config, ""anal.arch"", arch ) ; r_config_set ( r -> config, ""anal.cpu"", * info -> cpu ) ; r_asm_use ( r -> assembler, arch ) ; r_core_bin_info ( r, R_CORE_BIN_ACC_ALL, R_CORE_BIN_SET, va, NULL, NULL ) ; r_core_bin",0
650,"<S2SV_ModStart> void sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart> * dev, * n ; list_for_each_entry_safe ( dev, n, & port -> disco_list, disco_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_add_tail ( & dev -> dev_list_node, & port -> dev_list ) ; spin_unlock_irq ( & port -> dev_list_lock ) ; } sas_probe_sata ( port ) ; list_for_each_entry_safe ( dev, n, & port -> disco_list, disco_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_add_tail ( & dev -> dev_list_node, & port -> dev_list ) ; spin_unlock_irq ( & port -> dev_list_lock ) ; } sas_probe_sata ( port ) ; list_for_each_entry_safe ( dev, n, & port -> disco_list, disco_list_node ) {",0
651,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands ( ps_dec ) ; if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) ps_dec -> ps_bitstrm -> u4_ofst += 4 ; if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) ps_dec -> ps_bitstrm -> u4_ofst += 4 ; if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) ps_dec -> ps_bitstrm -> u4_ofst += 4 ; else ps_dec -> ps_bitstrm -> u4_ofst += 4 ; if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) ps_dec -> ps_bitstrm -> u4_ofst += 4 ; if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) ps_dec -> ps_bitstrm -> u4_ofst += 4 ;,0
652,"<S2SV_ModStart> ; int pkt_len ; char line [ NETSCREEN_LINE_LENGTH + NETSCREEN_MAX_INT_NAME_LENGTH <S2SV_ModEnd> ] ; char <S2SV_ModStart> ; if ( <S2SV_ModEnd> parse_netscreen_rec_hdr ( & <S2SV_ModStart>, line, <S2SV_ModEnd> cap_int, & <S2SV_ModStart>, & cap_dir, <S2SV_ModEnd> cap_dst, &",0
653,"<S2SV_ModStart> 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> processed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3 -> rrec. seq_num ) ; } } s -> d1 -> processed_rcds. epoch = s -> d1 -> r_epoch ; s -> d1 -> unprocessed_rcds. epoch = s -> d1 -> r_epoch ; s -> d1 -> unprocessed_rcds. epoch = s -> d1 -> r_epoch ; s -> d1 -> unprocessed_rcds. epoch = s -> d1 -> r_epoch ; s -> d1 -> unprocessed_rcds. q = pqueue_peek ( s -> d1 -> unprocessed_rcds. q ) ; while ( pqueue_peek ( s -> d1 -> unprocessed_rcds. q ) ) { dtls1_get_unprocessed_record ( s ) ; if (! dtls1_process_record ( s ) ) return ( 0",0
654,<S2SV_ModStart> decode ) { const uint_fast32_t originalWidth = gifFilePtr -> Image. Width ; const uint_fast32_t originalHeight = gifFilePtr -> Image. Height ; const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image.,0
655,"<S2SV_ModStart> can_read_key : if ( key -> type -> validate ) { down_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; if ( key -> type -> validate ) { ret = - EOPNOTSUPP ; if ( key -> type -> validate ) { down_read ( & key -> sem ) ; ret = key -> type -> validate ( key, buffer, buflen ) ; if ( ret == 0 ) { ret = - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } } else { ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( &",0
656,"<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator <S2SV_ModStart> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; re = ldap_count_entries ( ldap -> conn, message ) ; if ( re!= 1 ) { LOG_ERROR ( CHEROKEE_ERROR_VALIDATOR_LDAP_SEARCH, message ) ; return ret_not_found ; } first = ldap_first_entry ( ldap -> conn, message ) ; if ( first == NULL ) { ldap_msgfree ( message ) ; return ret_not_found ; } dn = ldap_get_dn ( ldap -> conn, first ) ; if ( dn == NULL ) { ret = ret_not_found ; } ret = validate_dn ( props, dn, conn -> validator -> passwd. buf ) ; if ( ret!= ret_ok ) return ret ; ret = validate_dn ( props, dn, conn -> validator -> passwd. buf ) ; if ( ret!= ret_ok ) return ret ; re = ldap_",0
657,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlob ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlob ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlob ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlob ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlob ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlob ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlob ( image ) ; if ( length > Get",0
658,"<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - 1 ; if (! jas_iccgetuint ( in, 4, & tmp ) ) return - 1 ; * val = ( tmp & 0x80000000 )? ( - JAS_CAST ( longlong, ( ( ( ~ tmp ) & 0x7fffffff ) + 1 ) ) : JAS_CAST ( longlong, ( ( ( ~ tmp ) & 0x7fffffff ) + 1 ) ) ) : JAS_CAST ( longlong <S2SV_ModEnd>, tmp )",0
659,<S2SV_ModStart> case RDS_CMSG_ATOMIC_FADD : rm -> atomic. op_m_fadd. add = args -> fadd. add ; rm -> atomic. op_m_fadd. nocarry_mask = args -> fadd. nocarry_mask ; break ; case RDS_CMSG_MASKED_ATOMIC_FADD : rm -> atomic. op_m_fadd. add = args -> fadd. add ; rm -> atomic. op_m_fadd. nocarry_mask = args -> m_fadd. nocarry_mask ; break ; case RDS_CMSG_MASKED_ATOMIC_CSWP : rm -> atomic. op_m_cswp. compare = args -> cswp. compare ; rm -> atomic. op_m_cswp. swap = args -> cswp. swap ; break ; case RDS_CMSG_MASKED_ATOMIC_CSWP : rm -> atomic. op_m_cswp. nocarry_mask = args -> m_cswp. nocarry_mask ; break ; case RDS_CMSG_MASKED_ATOMIC_CSWP : rm -> atomic. op,0
660,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
661,"<S2SV_ModStart> ( ""size <S2SV_blank> %zu <S2SV_blank> flags <S2SV_blank> 0x%x <S2SV_blank> timeo <S2SV_blank> %ld\\n"" <S2SV_ModEnd>, size,",0
662,"<S2SV_ModStart> ( spath, sizeof ( spath ), var, iface ) < 0 <S2SV_ModEnd> ) return -",0
663,<S2SV_ModStart> ; isspace ( <S2SV_ModEnd> * s ) <S2SV_ModStart> ; while ( <S2SV_ModEnd> isspace ( * <S2SV_ModStart> ; while ( <S2SV_ModEnd> isspace ( * <S2SV_ModStart> ; while ( <S2SV_ModEnd> isspace ( * <S2SV_ModStart> ; while ( <S2SV_ModEnd> isspace ( *,0
664,"<S2SV_ModStart> 0 ) { mutt_bcache_del <S2SV_ModEnd> ( pop_data -> <S2SV_ModStart> data ) ; if ( ctx -> hdrs [ i ] -> changed ) { mutt_hcache_delete ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ), ctx -> hdrs [ i ], 0 ) ; } } # ifdef USE_HCACHE if ( ctx -> hdrs [ i ] -> changed ) { mutt_hcache_store ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ), ctx -> hdrs [ i ], 0 ) ; } # endif } } # ifdef USE_HCACHE if ( ctx -> hdrs [ i ] -> changed ) { mutt_hcache_store ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ), ctx -> hdrs [ i ], 0 ) ; } # ifdef USE_HCACHE if ( ctx -> hdrs [ i ] -> changed ) { mutt_hcache_delete ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ), ctx ->",0
665,"<S2SV_ModStart> objp ) ; xdrs -> x_op = XDR_END ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; xdrs -> x_op = XDR_END ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if ( p ) { ret = krb5_parse_name ( context, p, & pr ) ; if ( ret!= 0 ) return FALSE ; * objp = pr ; free ( p ) ;",0
666,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, TEMP_FAILURE_RETRY )",0
667,"<S2SV_ModStart> return 1 ; } if ( sk -> sk_state == DCCP_LISTEN ) { dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ; return 1 ; } if ( sk -> sk_state == DCCP_REQUESTING && dh -> dccph_type == DCCP_PKT_DATA ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( sk -> sk_state == DCCP_RESPOND ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( sk -> sk_state == DCCP_REQUESTING && dh -> dccph_type == DCCP_PKT_RESPONSE ) || ( dp -> dccps_role == DCCP_ROLE_SERVER && dh -> dccph_type == DCCP_PKT_DATA ) ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; }",0
668,"<S2SV_ModStart> struct msixcap msixcap ; <S2SV_ModEnd> assert ( barnum <S2SV_ModStart> ) ; pci_msix_table_init <S2SV_ModEnd> ( dev, <S2SV_ModStart> ) ; pci_populate_msixcap ( & msixcap, msgnum, barnum, tab_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; return ( pci_emul_add_capability ( dev, ( u_char * ) & msixcap, sizeof ( msixcap ) )",0
669,"<S2SV_ModStart> ; upperdentry = d_find_upper_dentry <S2SV_ModEnd> ( dentry ) <S2SV_ModStart> dentry ) ; if ( upperdentry ) { mutex_lock ( & upperdentry -> d_inode -> i_mutex ) ; err = notify_change ( upperdentry, attr, NULL ) ; mutex_unlock ( & upperdentry -> d_inode -> i_mutex ) ; } else { err = ovl_copy_up_last ( dentry, attr, false ) ; mutex_unlock ( & upperdentry -> d_inode -> i_mutex ) ; } if ( upperdentry ) { mutex_lock ( & upperdentry -> d_inode -> i_mutex ) ; err = notify_change ( upperdentry, attr, NULL ) ; mutex_unlock ( & upperdentry -> d_inode -> i_mutex ) ; }",0
670,<S2SV_ModStart> ( isspace ( <S2SV_ModEnd> p ) ),0
671,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> authctxt -> valid <S2SV_ModStart> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if (! authctxt -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & slen ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & cuser, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get",0
672,"<S2SV_ModStart> int decode_unsigned_max ( vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int max ) { vpx_read_bit_buffer <S2SV_ModEnd> data = vp9_rb_read_literal <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",0
673,"<S2SV_ModStart> 1 ) ; if ( mutt_str_strcmp ( line, ctx -> hdrs [ i ] -> data ) == 0 ) break ; if ( i == ctx -> msgcount ) { mutt_debug ( 1, ""skip <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; ctx -> hdrmax ++ ; ctx -> hdrs [ i ] = mutt_header_new ( ) ; } else if ( i == ctx -> msgcount ) { mutt_debug ( 1, ""skip <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; ctx -> hdrmax ++ ; ctx -> hdrs [ i ] = mutt_header_new ( ) ; ctx -> hdrs [ i ] -> data = mutt_str_strdup ( line ) ; } else if ( ctx -> hdrs [ i ] -> index!= index - 1 ) pop_data -> clear_cache = true ; ctx -> hdrs [ i ] -> refno = index ; ctx -> hdrs [ i ] -> index = index ;",0
674,"<S2SV_ModStart> NULL ) goto cleanup ; status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ; } retval = 0 ; <S2SV_ModEnd>",0
675,<S2SV_ModStart> ++ ) { if ( precno >= reslevel -> num_precincts_x * reslevel -> num_precincts_y ) { av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> cblkincl ) ; av_freep ( & prec -> cblk ) ; } if ( precno >= reslevel -> num_precincts_x * reslevel -> num_precincts_y ) { if ( precno >= reslevel -> num_precincts_x * reslevel -> num_precincts_y ) { av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> cblkincl ) ; av_freep ( & prec -> cblk ) ; } if ( precno >= reslevel -> num_precincts_x * reslevel -> num_precincts_y ) { Jpeg2000Prec * prec = band -> prec + precno ; av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> zerobits ) ; av_freep ( &,0
676,"<S2SV_ModStart> NULL ) { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } else { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } else { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } else { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } else { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%s; <S2SV_blank> is",0
677,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np ->",0
678,<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X,0
679,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> H264SwDecMalloc ( u32 <S2SV_ModStart> size ) { BOOL res = malloc ( size ) ; if ( res == NULL ) res = ERR_PTR ( - ENOMEM ) ; if ( res == NULL ) res = ERR_PTR ( - ENOMEM ) ; if ( res == NULL ) res = ERR_PTR ( - 1 ) ; if ( res == NULL ) res = ERR_PTR ( - 1 ) ; if ( res == NULL ) res = ERR_PTR ( - 1 ) ; if ( res == NULL ) res = ERR_PTR ( - 1 ) ; if ( res == NULL ) res = ERR_PTR ( - ENOMEM ) ; if ( res == ERR_PTR ( - ENOMEM ) ) res = ERR_PTR ( - ENOMEM ) ; if ( res == ERR_PTR ( - 1 ) ) res = ERR_PTR ( - 1 ) ; if ( res == NULL ) res = ERR_PTR ( - 1 ) ; if ( res == NULL ) res = ERR_PTR ( - 1 ),0
680,"<S2SV_ModStart> case GF_VDEF : if ( im -> gdes [ vidx ]. gf == GF_VDEF ) { printval = im -> gdes [ vidx ]. vf. val ; localtime_r ( & now, & tmvdef ) ; } else if ( isnan ( im -> gdes [ vidx ]. data [ ii ] ) ) continue ; if ( isnan ( im -> gdes [ vidx ]. data [ ii ] ) ) continue ; if ( isnan ( im -> gdes [ vidx ]. data [ ii ] ) ) continue ; if ( isnan ( im -> gdes [ vidx ]. data [ ii ] ) ) continue ; if ( isnan ( im -> gdes [ vidx ]. data [ ii ] ) ) continue ; if ( isnan ( im -> gdes [ vidx ]. data [ ii ] ) ) continue ; if ( isnan ( im -> gdes [ vidx ]. data [ ii ] ) ) continue ; if ( isnan ( im -> gdes [ vidx ]. data [ ii ] ) ) continue ; if ( isnan ( im -> gdes [ vidx ]. data [ ii ] ) ) continue ;",0
681,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > sz <S2SV_ModStart> NULL ; } sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { s,0
682,<S2SV_ModStart> ; if ( buf1 -> size > buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else <S2SV_ModEnd> { return 1,0
683,"<S2SV_ModStart> goto out4 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & dir ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out5 ; } # ifdef CDF_DEBUG cdf_dump_dir ( & info, & h, & dir, CDF_SHORT_SEC_SIZE ( & h ) ) ; # endif if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & dir ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out5 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & dir, & dir ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> short <S2SV_blank> directory"" ; goto out4 ; } # ifdef CDF_DEBUG cdf_dump_dir ( & info, & h, & dir, CDF_SHORT_SEC_SIZE ( & h ) ) ; # endif if ( ( i = cdf_read_short_stream ( & info,",0
684,"<S2SV_ModStart> = NULL ; size_t <S2SV_ModEnd> sz = SMP_ALIGN <S2SV_ModStart> + size ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOW",0
685,"<S2SV_ModStart>! eof ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Input <S2SV_blank> variables <S2SV_blank> exceeded <S2SV_blank> %"" PRIu64 "". <S2SV_blank> "" ""To <S2SV_blank> increase <S2SV_blank> the <S2SV_blank> limit <S2SV_blank> change <S2SV_blank> max_input_vars <S2SV_blank> in <S2SV_blank> php.ini."", max_vars ) ; return FAILURE ; }",0
686,<S2SV_ModStart> ; if ( protocol < 0 || protocol > AX25_MAX_PROTOCOL <S2SV_ModEnd> ) return -,0
687,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
688,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> src. val <S2SV_ModStart> src. val, false",0
689,"<S2SV_ModStart> imap_quote_string ( errstr, sizeof ( errstr ), list. name ) ; if ( mutt_str_strcmp ( url. path, ImapPath ) == 0 ) url. path [ strlen ( url. path ) - 1 ] = '\\0' ; if ( mutt_str_strcmp ( url. user, ImapUser ) == 0 ) url. user = NULL ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ; if ( mutt_str_strcmp ( url. user, ImapUser ) == 0 ) url. user = NULL ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ; if ( mutt_str_strcmp ( url. user, ImapUser ) == 0 ) url. user = NULL ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ;",0
690,"<S2SV_ModStart> secret, void <S2SV_ModEnd> * end, <S2SV_ModStart> * th ; void * dp, * dend ; int dlen ; char is_enc <S2SV_ModEnd> ; struct ceph_crypto_key <S2SV_ModStart> ; struct ceph_crypto_key <S2SV_ModEnd> old_key ; void <S2SV_ModStart> ; } dlen = ceph_x_decrypt ( secret, p, end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } dout ( ""decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; dp = dbuf ; dend = dp + dlen ; tkt_struct_v = ceph_decode_8 ( & dp ) ; if ( tkt_struct_v!= 1 ) goto bad ; memcpy ( & old_key, & th -> session_key, sizeof ( old_key ) ) ; ret = ceph_crypto_key_decode ( & new_session_key, & dp, dend ) ; if ( ret ) goto out ; ret = ceph_crypto_key_decode ( & tp, & tp, dend ) ; if ( ret ) goto out ; ret = ceph_crypto_",0
691,"<S2SV_ModStart> / 2 ; if ( count > UINT32_MAX / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, ( UINT32_MAX / sizeof ( Pairs ) ) ) ) ;",0
692,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
693,"<S2SV_ModStart> -> init_msg ; if (! s -> session -> tlsext_tick_lifetime_hint ) { al = SSL_AD_DECODE_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, SSL_R_INVALID_PARAMETER ) ; goto err ; }",0
694,"<S2SV_ModStart> b ) ; if ( sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) < 0 ) { r = log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } log_info ( ""Watching <S2SV_blank> system <S2SV_blank> buttons <S2SV_blank> on <S2SV_blank> /dev/input/%s <S2SV_blank> (%s)""",0
695,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD <S2SV_ModEnd> ; else return,0
696,"<S2SV_ModStart> = NULL ; * elem_rtrn = NULL ; * field_rtrn = xkb_atom_text ( ctx, expr -> field_ref. element ) ; * field_rtrn = xkb_atom_text ( ctx, expr -> field_ref. field ) ; * index_rtrn = NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_ARRAY_REF <S2SV_ModStart>. entry ; * elem_rtrn = xkb_atom_text ( ctx, expr -> array_ref. element ) ; * field_rtrn = xkb_atom_text ( ctx, expr -> array_ref. field ) ; * index_rtrn = expr -> array_ref. entry ; * elem_rtrn = NULL ; * field_rtrn = xkb_atom_text ( ctx, expr -> array_ref. field ) ; * index_rtrn = NULL ; * elem_rtrn = xkb_atom_text ( ctx, expr -> array_ref. element ) ; * field_rtrn = xkb_atom_text ( ctx, expr -> array_ref. field ) ;",0
697,<S2SV_ModStart> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),0
698,"<S2SV_ModStart> ; REQ ( n, funcdef_start ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; if ( is_async ) return AsyncFunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; else return FunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset",0
699,<S2SV_ModStart> * sock ; sctp_assoc_t old_id = id ; sctp_assoc_t new_id = id ; <S2SV_ModStart> = 0 ; if ( id!= old_id ) return - EINVAL ; if ( waitqueue_active ( & old_asoc -> wait ) ) return - EBUSY ; if ( waitqueue_active ( & old_asoc -> wait ) ) return - EBUSY ; if ( waitqueue_active ( & old_asoc -> wait ) ) return - EBUSY ; if ( waitqueue_active ( & old_asoc -> wait ) ) return - EBUSY ; if ( waitqueue_active ( & old_asoc -> wait ) ) return - EBUSY ; if ( waitqueue_active ( & old_asoc -> wait ) ) return - EBUSY ; if ( waitqueue_active ( & old_asoc -> wait ) ) return - EBUSY ; if ( waitqueue_active ( & old_asoc -> wait ) ) return - EBUSY ; if ( waitqueue_active ( & old_asoc -> wait ) ) return - EBUSY ; if ( waitqueue_active ( & old_,0
700,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
701,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
702,"<S2SV_ModStart> if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) * ( * o_element_count ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) * ( * o_element_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned",0
703,"<S2SV_ModStart> = 0 ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> = 0 ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> = 0 ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> = 0 ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> = 0 ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> = 0 ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModEnd>, ""InsufficientImageDataInFile"" <S2SV_ModStart> = 0 ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile",0
704,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,1
705,,1
706,"<S2SV_ModStart> ; freq_reg = devm_ioremap_nocache ( dev, res -> start, resource_size ( res ) ) ; if (! freq_reg ) return - ENOMEM ; ret = devm_ioremap_nocache ( dev, res -> start, resource_size ( res ) ) ; if ( ret ) return ret ; ret = devm_ofclk_add_hw_provider ( & pdev -> dev, hi3660_stub_clk_hw_get, hi3660_stub_clks ) ; if ( ret ) return ret ; ret = devm_ofclk_remove_hw_provider ( & pdev -> dev, hi3660_stub_clk_hw_get, hi3660_stub_clks ) ; if ( ret ) return ret ; ret = devm_ofclk_remove_hw_provider ( & pdev -> dev, hi3660_stub_clk_hw_get, hi3660_stub_clks ) ; if ( ret ) return ret ; ret = devm_ioremap_nocache ( dev, res -> start, resource_size ( res ) ) ; if ( ret",0
707,"<S2SV_ModStart> : if ( psf_is_empty ( psf ) ) { psf_fseek ( psf, whence, <S2SV_ModEnd> ) ; return <S2SV_ModStart> } ; if ( psf_is_empty ( psf ) ) { psf_fseek ( psf, whence, <S2SV_ModEnd> ) ; return <S2SV_ModStart> } ; if ( psf_is_empty ( psf ) ) { psf_fseek ( psf, whence, <S2SV_ModEnd> ) ; return <S2SV_ModStart> } ; if ( psf_is_empty ( psf ) ) { psf_fseek ( psf, whence, <S2SV_ModEnd> ) ; return <S2SV_ModStart> } ; if ( psf_is_empty ( psf ) ) { psf_fseek ( psf, whence, <S2SV_ModEnd> ) ; return <S2SV_ModStart> } ; if ( psf_is_empty ( psf ) ) { psf_fseek ( psf, whence, <S2SV_ModEnd> ) ; return <S2SV_ModStart> } ; if ( psf_is_empty ( psf ) ) { psf_fseek ( psf, whence, <S2SV_ModEnd> ) ; return <S2SV_ModStart> } ; if ( psf_is_empty ( psf ) ) { psf_fseek ( psf, whence, <S2SV_ModEnd> ) ; return <S2SV_ModStart> } ; if ( psf_is_empty ( psf ) ) { psf_fseek ( psf, whence, <S2SV_ModEnd> ) ; return",0
708,"<S2SV_ModStart> out_mutex ; } down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> inode, ioffset ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModEnd> ) ; ext4_inode_block_unlocked_dio <S2SV_ModStart> inode ) ; out_mutex : up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; out_mutex : up_write ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModEnd> ) ; ext4_inode_block_unlocked_dio <S2SV_ModStart> inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModEnd> ) ; ext4_inode_block_unlocked_dio <S2SV_ModStart> inode ) ; out_mutex : up_write ( & EXT4_I ( inode ) -> i_mmap_sem",0
709,"<S2SV_ModStart> uint32_t track_size ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * mid",0
710,"<S2SV_ModStart> |= SOCK_SNDBUF_LOCK ; sk -> sk_sndbuf = max_t ( u32, val * 2, SOCK_MIN_SNDBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_RCVBUF : val = min_t ( u32, val, sysctl_rmem_max ) ; set_rcvbuf : sk -> sk_userlocks |= SOCK_RCVBUF_LOCK ; sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_MIN_RCVBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_RCVBUFSIZE : val = min_t ( u32, val, sysctl_rmem_max ) ; set_rcvbuf : sk -> sk_userlocks |= SOCK_RCVBUF_LOCK ; sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_MIN_RCVBUF ) ; sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_MIN_RCVBUF )",0
711,"<S2SV_ModStart> * bh ; <S2SV_ModEnd> bh = udf_read_tagged <S2SV_ModStart> ; ret = udf_sb_alloc_partition_maps ( sb, le32_to_cpu ( lvd -> numPartitionMaps ) ) ; if ( ret ) goto out_bh ; for ( i = 0, offset = 0 ; i < sbi -> s_partitions && offset < le32_to_cpu ( lvd -> mapTableLength ) ; i ++, offset += gpm -> partitionMapLength ) { struct udf_part_map * map = & sbi -> s_partmaps [ i ] ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gpm1 -> partitionNum ) ; map -> s_partition_func = NULL ; } else { struct genericPartitionMap * gpm = ( struct genericPartitionMap * ) gpm ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num",0
712,"<S2SV_ModStart> long n ; JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> decoder <S2SV_blank> options: <S2SV_blank> magic <S2SV_blank> 0x%x; <S2SV_blank> siz <S2SV_blank> %d; <S2SV_blank> res1 <S2SV_blank> %d; <S2SV_blank> res2 <S2SV_blank> %d; <S2SV_blank> off <S2SV_blank> %d\\n"", hdr. magic, hdr. siz, hdr. reserved1, hdr. reserved2, hdr. off ) ) ; if ( bmp_gethdr ( in, & hdr ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> header\\n"" ) ; return 0 ; } JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> header: <S2SV_blank> magic <S2SV_blank> 0x%x; <S2SV_blank> siz <S2SV_blank> %d; <S2SV_blank> res1 <S2SV_blank> %d; <S2SV_blank> res2 <S2SV_blank> %d; <S2SV_blank> off <S2SV_blank> %d\\n"", hdr. magic, hdr. siz, hdr. reserved1, hdr. reserved2, hdr. off ) ) ; if (! info ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; return 0 ; } JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %d; <S2SV_blank> width <S2SV_blank> %",0
713,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
714,"<S2SV_ModStart> ) IHEVCD_SUCCESS ) ; if ( ps_cabac -> u4_ofst >= ps_bitstrm -> u4_nxt_word ) { IHEVCD_ERROR_T e ; ps_cabac -> u4_ofst = 0 ; ps_cabac -> u4_range = ( UWORD32 ) 510 ; BITS_GET ( ps_cabac -> u4_ofst, ps_bitstrm -> u4_cur_word, ps_bitstrm -> u4_bit_ofst, ps_bitstrm -> u4_nxt_word ) ; if ( ps_cabac -> u4_ofst >= ps_bitstrm -> u4_nxt_word ) { ps_cabac -> u4_range = ( UWORD32 ) 510 ; BITS_GET ( ps_cabac -> u4_ofst, ps_bitstrm -> u4_bit_ofst, ps_bitstrm -> u4_bit_ofst, ps_bitstrm -> u4_cur_word, ps_bitstrm -> u",0
715,"<S2SV_ModStart> ; save_text_from_text_view ( g_tv_comment, FILENAME_COMMENT ) ; if ( g_expert_mode ) { int n = select_next_page_no ( pages [ PAGENO_SUMMARY ]. page_no, NULL ) ; log_info ( ""switching <S2SV_blank> to <S2SV_blank> page_no:%d"", n ) ; gtk_notebook_set_current_page ( assistant, n ) ; return ; } if ( g_expert_mode ) { int n = select_next_page_no ( pages [ PAGENO_SUMMARY ]. page_no, NULL ) ; log_info ( ""switching <S2SV_blank> to <S2SV_blank> page_no:%d"", n ) ; gtk_notebook_set_current_page ( assistant, n ) ; log_info ( ""switching <S2SV_blank> to <S2SV_blank> page_no:%d"", n ) ; gtk_notebook_set_current_page ( assistant, n ) ; return ; } if ( pages [ PAGENO_SUMMARY ]. page_widget == page ) { if (! g_expert_mode ) { int n = select_next_page_no",0
716,"<S2SV_ModStart> media_pad_desc pad ; if ( copy_to_user ( & links -> pads [ p ], & pad, sizeof ( pad ) ) ) return - EFAULT ; media_device_kpad_to_upad ( & entity -> pads [ p ], & pad ) ; if ( copy_to_user ( & links -> pads [ p ], & pad, sizeof ( pad ) ) ) return - EFAULT ; } } if ( links -> links ) { struct media_link_desc link ; if ( entity -> links [ l ]. source -> entity!= entity ) continue ; media_device_kpad_to_upad ( entity -> links [ l ]. source, & link. source ) ; media_device_kpad_to_upad ( entity -> links [ l ]. sink, & link. sink ) ; link. flags = entity -> links [ l ]. flags ; media_device_kpad_to_upad ( entity -> links [ l ]. source, & link. source ) ; media_device_kpad_to_upad ( entity -> links [ l ]. sink, & link. sink ) ; link. flags =",0
717,<S2SV_ModStart> ; if ( prev_line_has_list_loosening_effect ) { line -> type = MD_LINE_LIST_LOOSE ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( line -> type == MD_LINE_BLANK ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 0 ; } else if ( CH ( prev_line_has_list_loosening_effect ) == 0 ) { line -> type = MD_LINE_LIST_LOOSE ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( line -> type == MD_LINE_BLANK ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 0 ; } else if ( CH ( prev_line_has_list_loosening_effect ) == 0 ) { line -> type = MD_LINE_LIST_LOOSE ; ctx -> last_line_has_list_loosening_effect = 0 ; },0
718,"<S2SV_ModStart>, extent ; size_t width, <S2SV_ModEnd> height, length <S2SV_ModStart> sun_data ) ; width = sun_info. width ; height = sun_info. height ; <S2SV_ModStart> sun_data ) ; if ( width > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> sun_data ) ; if ( width > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> sun_data ) ; if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( <S2SV_ModStart> sun_data ) ; if ( width > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> sun_data ) ; if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader",0
719,"<S2SV_ModStart> client, krb5_enctype krbtgt_etype <S2SV_ModEnd>, hdb_entry_ex * <S2SV_ModStart> client_principal, hdb_entry_ex * krbtgt <S2SV_ModEnd>, krb5_principals spp",0
720,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
721,"<S2SV_ModStart> -> loc_addr ; ireq -> opt = NULL ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> inet_id = jiffies ; dccp_sync_mss ( newsk, dst_mtu ( dst ) ) ;",0
722,<S2SV_ModStart> struct xmlparser parser ; data -> xmlstart = buffer ; data -> xmlsize = bufsize ; parser. starteltfunc = NameValueParserStartElt ; parser. endeltfunc = NameValueParserEndElt ; parser. datafunc = NameValueParserGetData ; parser. attfunc = 0 ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. data = data ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. starteltfunc = NameValueParserStartElt ; parser. endeltfunc = NameValueParserEndElt ; parser. datafunc = NameValueParserStartElt ; parser. endeltfunc = NameValueParserEndElt ; parser. datafunc = NameValueParserGetData ; parser. attfunc = 0 ;,0
723,"<S2SV_ModStart> ; if ( skb_csum_unnecessary ( skb ) ) csum = ~ csum_partial ( skb_transport_header ( skb ) + tlen, offset, 0 ) ; else csum = ~ csum_partial ( skb_transport_header ( skb ) + tlen, offset, 0 ) ; if (! msg -> msg_control ) put_cmsg ( msg, SOL_IP, IP_CHECKSUM, sizeof ( __wsum ), & csum ) ; else put_cmsg ( msg, SOL_IP, IP_CHECKSUM, sizeof ( __wsum ), & csum ) ;",0
724,<S2SV_ModStart> pfn ) ; r = - EINVAL ; goto unmap_pages <S2SV_ModEnd> ; } gfn,0
725,"<S2SV_ModStart> = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00",0
726,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; task = <S2SV_ModStart> -> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } raw_spin_unlock_irq,0
727,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) ( buffer [ 1 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; },0
728,"<S2SV_ModStart> free_nid * i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) ; struct nat_entry * ne ; int err <S2SV_ModEnd> ; if ( <S2SV_ModStart> return false ; <S2SV_ModEnd> if ( build <S2SV_ModStart> return false ; <S2SV_ModEnd> i = f2fs_kmem_cache_alloc <S2SV_ModStart> ( free_nid_slab, GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) { spin_lock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; radix_tree_preload_end ( ) ; if ( err ) { kmem_cache_free ( free_nid_slab, i ) ; return true ; } spin_lock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST,",0
729,<S2SV_ModStart>. post_proc_flag ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ) <S2SV_ModEnd> ; flags ->,0
730,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; return - EBADR ; } if ( unlikely (! RING_GET_REQUEST ( & vif -> tx, cons ) ) ) { netdev_err ( vif -> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; return - EBADR ; } memcpy ( & extras [ extra. type - 1 ], & extra, sizeof ( extra ) ) ; vif -> tx. req_cons = ++ cons ; } if ( unlikely ( extra. flags & XEN_NETIF_EXTRA_FLAG_MORE ) ) { netdev_err ( vif -> dev, ""Invalid <S2SV_blank> extra <S2SV_blank> flags: <S2SV_blank> %d\\n"", extra. flags ) ; return - EINVAL ; } memcpy ( & extras [ extra. type - 1 ], & extra, sizeof ( extra ) ) ; vif -> tx. req_cons = ++ cons ;",0
731,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_satype = SADB_SATYPE_UNSPEC ; hdr -> sadb_msg_datype = SADB_SATYPE_UNSPEC ; hdr -> sadb_msg_datype = SADB_SATYPE_UNSPEC ; hdr -> sadb_msg_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_msg_datype = SADB_SATYPE_UNSPEC ; hdr -> sadb_msg_datype = SADB_SATYPE_UNSPEC ; hdr -> sadb_msg_datype = SADB_SATYPE_UNSPEC ; hdr -> sadb_msg_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_msg_datype = SADB_SATYPE_UNSPEC ; hdr -> sadb_msg_datype = SADB_SATYPE_UNSPEC ; hdr -> sadb_msg_len = ( sizeof ( struct,0
732,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
733,"<S2SV_ModStart> - 1 ; luaL_checkstack ( L, 1, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; if ( pos + size > ld ) { luaL_error ( L, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> long"" ) ; return 0 ; } pos += gettoalign ( pos, & h, opt, size ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; if ( pos + size > ld ) { luaL_error ( L, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> long"" ) ; return 0 ; } <S2SV_ModEnd> case 'x' : <S2SV_ModStart> float f ; memcpy ( & f, data + pos, size ) ; correctbytes ( ( char * ) & f, sizeof ( f ), h. endian ) ; lua_pushnumber ( L, f ) ; lua_pushnumber ( L, d ) ; lua_pop ( L, 1 )",0
734,"<S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( ptr. common -> packet_seq ), length ) ) ; goto trunc ; } <S2SV_ModStart> msg_len_valid = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg6 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( ptr. common -> packet_seq ), length ) ) ; goto trunc ; } ND_TCHECK2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( ptr. common ->",0
735,"<S2SV_ModStart> ; int n ; if (! body -> unit_size ) break ; n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) / body -> unit_size ; while ( n -- ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } } break ; case OZ_DATA_F_MULTIPLE : { struct oz_multiple * body = ( struct oz_multiple * ) data_hdr ; int data_len = body -> data ; int count ; int i ; if (! unit_size ) break ; count = data_len / unit_size ; for ( i = 0 ; i < count ; i ++ ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } } break ; case OZ_DATA_F_ISOC_FIXED : { struct oz_isoc_fixed * body = ( struct oz_isoc_fixed * ) data_hdr ; u8 *",0
736,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,0
737,"<S2SV_ModStart> { fprintf ( stderr <S2SV_ModEnd>, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) <S2SV_ModStart> ; int rv = copy_file ( src, dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""copy_file"" ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } waitpid ( child, NULL, 0 ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""chmod"" ) ;",0
738,<S2SV_ModStart> IMAP_FATAL ; } if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD,0
739,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
740,"<S2SV_ModStart> ; if ( unlikely (! path [ depth ]. p_ext ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if ( <S2SV_ModStart> le32_to_cpu ( border ) + sizeof ( struct ext4_extent ) * sizeof ( struct ext4_extent ) * sizeof ( struct ext4_extent ) * sizeof ( struct ext4_extent ) * sizeof ( struct ext4_extent ) * sizeof ( struct ext4_extent ) * sizeof ( struct ext4_extent ) * sizeof ( struct ext4_extent ) * sizeof ( struct ext4_extent ) * sizeof ( struct ext4_extent ) * sizeof ( struct ext4_extent ) * sizeof ( struct ext4_extent ) * sizeof ( struct ext4_extent ) * sizeof ( struct ext4_extent ) * sizeof ( struct ext4_extent ) * sizeof ( struct ext4_extent ) * sizeof ( struct ext4_extent ) * sizeof ( struct ext4_extent ) * sizeof ( struct ext4_extent ) * sizeof ( struct ext4_extent ) * sizeof ( struct ext4_extent",0
741,<S2SV_ModStart> ; } else { if ( ptr_hbe_txposer -> core_frame_length == 768 ) { if ( ptr_hbe_txposer -> k_start + ptr_hbe_txposer -> synth_size > 8 ) { if ( ptr_hbe_txposer -> k_start + ptr_hbe_txposer -> synth_size > 26 ) { if ( ptr_hbe_txposer -> k_start + ptr_hbe_txposer -> k_size > 26 ) { if ( ptr_hbe_txposer -> k_start + ptr_hbe_txposer -> k_size > 26 ) { if ( ptr_hbe_txposer -> synth_size > 26 ) { if ( ptr_hbe_txposer -> k_start + ptr_hbe_txposer -> synth_size > 26 ) { if ( ptr_hbe_txposer -> k_start + ptr_hbe_txposer -> k_size > 26 ) { if ( ptr_hbe_txposer -> k_start + ptr_hbe_txposer -> k_size > 26 ) { if ( ptr_h,0
742,"<S2SV_ModStart> [ 2 ] ; image_w = get_ushort ( & tga [ 5 ] ) ; image_h = get_ushort ( & tga [ 7 ] ) ; pixel_depth = get_ushort ( & tga [ 11 ] ) ; image_desc = tga [ 13 ] ; * bits_per_pixel = ( unsigned int ) image_w ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if (! id ) { fprintf ( stderr, ""\\nError: <S2SV_blank> tga_readheader: <S2SV_blank> memory <S2SV_blank> out\\n"" ) ; return 0 ; } if (! fread ( id, id_len, 1, fp )!= 1 ) { fprintf ( stderr, ""\\nError: <S2SV_blank> tga_readheader: <S2SV_blank> memory <S2SV_blank> out\\n"" ) ; return 0 ; } id = ( unsigned char * ) malloc ( id_len ) ; if (! fread ( id, id_len, 1, fp )!= 1 ) { fprintf ( stderr, ""\\nError:",0
743,<S2SV_ModStart> ssize_t ret ; if ( len < 0 ) return - EINVAL,0
744,"<S2SV_ModStart> { if ( CPUCLOCK_WHICH ( which_clock ) == CPUCLOCK_SCHED ) { tp -> tv_sec = div_u64_rem ( cpu. sched, NSEC_PER_SEC, & tp -> tv_sec ) ; } else { tp -> tv_sec = div_u64_rem ( cpu. cpu, NSEC_PER_SEC, & tp -> tv_nsec ) ; } <S2SV_ModEnd> if ( CPUCLOCK_WHICH <S2SV_ModStart> ( which_clock ) == CPUCLOCK_SCHED ) { tp -> tv_sec = div_u64_rem ( cpu. sched, NSEC_PER_SEC, & tp -> tv_sec ) ; } else { cputime_to_timespec ( cpu. cpu, tp ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
745,"<S2SV_ModStart> tif_dir ; uint32 <S2SV_ModEnd> nstrips ; if <S2SV_ModStart> -> td_nstrips ; if ( td -> td_planarconfig == PLANARCONFIG_SEPARATE ) nstrips = _TIFFMultiply32 ( tif, nstrips, ( uint32 ) td -> td_samplesperpixel, ""TIFFNumberOfStrips"" ) ; if ( td -> td_planarconfig == PLANARCONFIG_SEPARATE ) nstrips = _TIFFMultiply32 ( tif, nstrips, ( uint32 ) td -> td_samplesperpixel, ""TIFFNumberOfStrips"" ) ; if ( td -> td_planarconfig == PLANARCONFIG_SEPARATE ) nstrips = _TIFFMultiply32 ( tif, nstrips, ( uint32 ) td -> td_samplesperpixel, ""TIFFNumberOfStrips"" ) ; if ( td -> td_planarconfig == PLANARCONFIG_SEPARATE ) nstrips = _TIFFMultiply32 ( tif, nstrips, ( uint32 ) td -> td_samplesperpixel, ""TIFFNumberOfStrips"" ) ; if ( td -> td",0
746,"<S2SV_ModStart> lua_module ) ; lua_authz_provider_t * prov_spec = parsed_require_line ; int result ; int nargs = 0 ; spec = create_vm_spec ( & pool, r, cfg, server_cfg, NULL, 0, ""authz <S2SV_blank> provider"" ) ; L = ap_lua_get_lua_state ( pool, spec, r ) ; if ( L == NULL ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02314 ) ""Unable <S2SV_blank> to <S2SV_blank> compile <S2SV_blank> VM <S2SV_blank> for <S2SV_blank> authz <S2SV_blank> provider <S2SV_blank> %s"", prov_spec -> name ) ; return AUTHZ_GENERAL_ERROR ; } L = ap_lua_get_lua_state ( pool, spec, r ) ; if ( L == NULL ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name",0
747,<S2SV_ModStart> * prev ; <S2SV_ModEnd> address &= PAGE_MASK <S2SV_ModStart> address ) ; if (! mmget_still_valid ( mm ) ) return - EFAULT ; prev = vma -> vm_prev ; if (! ( prev -> vm_flags & VM_GROWSDOWN ) && ( prev -> vm_flags & VM_WRITE | VM_READ | VM_EXEC ) ) { if ( address - prev -> vm_end < stack_guard_gap ) return - ENOMEM ; } if (! ( prev -> vm_flags & VM_GROWSDOWN ) && ( vma -> vm_flags & VM_WRITE | VM_READ | VM_EXEC ) ) { if ( address - vma -> vm_start < stack_guard_gap ) return - ENOMEM ; if ( grow <= vma -> vm_pgoff ) { error = - ENOMEM ; if (! error ) { spin_lock ( & mm -> page_table_lock ) { spin_unlock ( & mm -> page_table_lock ) ; anon_vma_interval_tree_pre_update_vma ( vma ) ; anon_vma_interval_tree_post_update_vma ( vma,0
748,"<S2SV_ModStart> { umode_t mode ; posix_acl_update_mode ( & inode -> i_mode, & acl ) ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart> <= 0 ) { posix_acl_release_mode ( & inode -> i_mode, & acl ) ; <S2SV_ModEnd> inode -> i_mode <S2SV_ModStart> inode -> i_mode <S2SV_ModEnd> ) ; if <S2SV_ModStart> error <= 0 ) { posix_acl_release_mode ( & inode -> i_mode, & acl ) ; } else { posix_acl_release_mode ( & inode -> i_mode, & acl ) ; error = xfs_set_mode ( inode, mode ) ; if ( error ) return error ; } <S2SV_ModEnd> error = xfs_set_mode",0
749,"<S2SV_ModStart> long mountflags, <S2SV_ModEnd> char * data <S2SV_ModStart> int optional ) { # ifdef HAVE_STATVFS struct statvfs sb ; # endif if ( mount ( fsname, target, fstype, mountflags & ~ MS_REMOUNT, data ) ) { if ( optional ) { INFO ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target, strerror ( errno ) ) ; return 0 ; } else { INFO ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target, strerror ( errno ) ) ; return - 1 ; } } if ( mount ( fsname, target, fstype, mountflags & ~ MS_REMOUNT, data ) ) { if ( optional ) { INFO ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target, strerror ( errno ) ) ; return 0 ; } else { INFO ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (",0
750,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
751,<S2SV_ModStart> -> it_overrun = 0 <S2SV_ModEnd> ; ++ timr,0
752,"<S2SV_ModStart> ; if ( proto_end == NULL ) return 0 ; cp = proto_end + 3 ; at = strchr ( cp, '@' ) ; colon = strchrnul ( cp, ':' ) ; if (! at || at <= cp ) { host = cp ; } else if ( at <= cp ) { c -> username = url_decode_mem ( cp, at - cp ) ; c -> password = url_decode_mem ( cp, at - cp ) ; } else { c -> username = url_decode_mem ( cp, at - cp ) ; c -> password = url_decode_mem ( cp, at - cp ) ; c -> host = url_decode_mem ( cp, at - cp ) ; c -> path = url_decode ( cp, slash - host ) ; if ( at <= cp ) { c -> username = url_decode_mem ( cp, at - cp ) ; c -> password = url_decode_mem ( cp, at - cp ) ; } else { c -> username = url_decode_mem ( cp, at - cp ) ; c -> password = url_decode_mem ( cp, at - cp ) ; c -> path = url_decode",0
753,"<S2SV_ModStart> static_key * done_key <S2SV_ModEnd> ) { static <S2SV_ModStart> flags ) ; get_random_bytes ( buf, nbytes ) ; * done = true ; spin_unlock_irqrestore ( & lock, flags ) ; <S2SV_ModStart> flags ) ; <S2SV_ModEnd> return true ;",0
754,"<S2SV_ModStart> -> actual ; struct usb_ep * ep = io_data -> ep ; struct usb_request * req = io_data -> req ; if ( io_data -> read ) { use_mm ( io_data -> mm ) ; ret = copy_to_iter ( io_data -> buf, ret, & io_data -> data ) ; if ( iov_iter_count ( & io_data -> data ) ) ret = - EFAULT ; } else { use_mm ( io_data -> mm ) ; ret = copy_to_iter ( io_data -> buf, ret, & io_data -> data ) ; if ( iov_iter_count ( & io_data -> data ) ) ret = - EFAULT ; } <S2SV_ModEnd> io_data -> kiocb",0
755,"<S2SV_ModStart> ; if ( rt -> rt_flags & RTCF_DOREDIRECT &&! skb_sec_path ( skb ) ) { IP_INC_STATS ( dev_net ( rt -> dst. dev ), IPSTATS_MIB_ROUTING ) ; icmp_send ( skb, ICMP_DEST_UNREACH, ICMP_FRAG_NEEDED, htonl ( mtu ) ) ; goto drop ; } if ( <S2SV_ModStart> ) ) { IP_INC_STATS ( dev_net ( rt -> dst. dev ), IPSTATS_MIB_ROUTING ) ; icmp_send ( skb, ICMP_DEST_UNREACH, ICMP_FRAGFAILS ) ; icmp_send ( skb, ICMP_DEST_UNREACH, ICMP_FRAG_NEEDED, htonl ( mtu ) ) ; goto drop ; } if ( skb_is_gso ( skb ) ) { IP_INC_STATS ( dev_net ( rt -> dst. dev ), IPSTATS_MIB_ROUTING ) ; icmp_send ( skb, ICMP_DEST",0
756,"<S2SV_ModStart> GLOBALS_ARE_RESET ( ) ) ; if ( e!= e_OK ) { complete_v2_state_transition ( & dh -> md, e_ok ) ; if ( e!= e_ok ) { complete_v2_state_transition ( & dh -> md, e_ok ) ; if ( e == e_ok ) { complete_v2_state_transition ( & dh -> md, e_ok ) ; if ( e == e_ok ) { complete_v2_state_transition ( & dh -> md, e_ok ) ; if ( e == e_ok ) { complete_v2_state_transition ( & dh -> md, e_ok ) ; if ( e == e_ok ) { complete_v2_state_transition ( & dh -> md, e_ok ) ; if ( e == e_ok ) { complete_v2_state_transition ( & dh -> md, e_ok ) ; if ( e == e_ok ) { complete_v2_state_transition ( & dh -> md, e_ok ) ; if ( e == e_ok ) { complete_v2_state_transition ( &",0
757,"<S2SV_ModStart> prep ) { struct trusted_key_options * new_o ; size_t datalen = prep -> datalen ; char * datablob = kmalloc ( datalen + 1, GFP_KERNEL ) ; if (! datablob ) return - ENOMEM ; memcpy ( datablob, prep -> data, datalen ) ; datablob [ datalen ] = '\\0' ; ret = datablob_parse ( datablob, new_p, new_o ) ; if ( ret!= Opt_update ) { ret = - EINVAL ; kfree ( new_p ) ; goto out ; } if (! new_o -> keyhandle ) { ret = - EINVAL ; kfree ( new_p ) ; goto out ; } new_p -> migratable = p -> migratable ; new_p -> key_len = p -> key_len ; memcpy ( new_p -> key, p -> key, p -> key_len ) ; dump_payload ( new_p ) ; dump_payload ( new_p ) ; dump_options ( new_o ) ;",0
758,<S2SV_ModStart> } v |= ( jas_uint_fast32_t ) <S2SV_ModEnd> c << 24,0
759,"<S2SV_ModStart> ; while ( ( skb = skb_dequeue ( & loopback_queue ) )!= NULL ) { if ( ( skb = skb_dequeue ( & loopback_queue ) ) == NULL ) break ; if ( ( skb = skb_dequeue ( & loopback_queue ) ) == NULL ) break ; dest = ( rose_address * ) ( skb -> data + 4 ) ; lci_o = ROSE_DEFAULT_MAXVC + 1 - lci_i ; skb_reset_transport_header ( skb ) ; sk = rose_find_socket ( lci_o, rose_loopback_neigh ) ; if ( sk ) { if ( rose_process_rx_frame ( sk, skb ) == 0 ) kfree_skb ( skb ) ; continue ; } if ( frametype == ROSE_CALL_REQUEST ) { if ( ( dev = rose_dev_get ( dest ) )!= NULL ) { if ( rose_rx_call_request ( skb, dev, rose_loopback_neigh, lci_o ) == 0 ) kfree_skb ( sk",0
760,"<S2SV_ModStart> goto out_free ; kvm_iommu_unmap_pages ( kvm, mem -> guest_phys_addr, mem -> memory_size ) ; kvm_iommu_unmap_pages ( kvm, mem -> guest_phys_addr, mem -> memory_size ) ; kvm_iommu_unmap_pages ( kvm, mem -> guest_phys_addr, mem -> memory_size ) ; kvm_iommu_unmap_pages ( kvm, mem -> guest_phys_addr, mem -> memory_size ) ; kvm_iommu_unmap_pages ( kvm, mem -> memory_size ) ; kvm_iommu_unmap_pages ( kvm, mem -> guest_phys_addr, mem -> memory_size ) ; kvm_iommu_unmap_pages ( kvm, mem -> guest_phys_addr, mem -> memory_size ) ; kvm_iommu_unmap_pages ( kvm, mem -> guest_phys_addr, mem -> memory_size ) ; kvm_iommu_unmap_pages ( kvm, mem ->",0
761,"<S2SV_ModStart> ) ; if ( indev == NULL ) { rcu_read_unlock ( ) ; return NF_DROP ; } <S2SV_ModStart> indev!= NULL ) { newrange. flags = mr -> range [ 0 ]. flags | NF_NAT_RANGE_MAP_IPS ; newrange. max_proto = mr -> range [ 0 ]. max ; newrange. min_proto = mr -> range [ 0 ]. min ; newrange. max_proto = mr -> range [ 0 ]. max ; } else { memset ( & newrange. min_addr, 0, sizeof ( newrange. min_addr ) ) ; newrange. flags = mr -> range [ 0 ]. flags | NF_NAT_RANGE_MAP_IPS ; newrange. min_proto = mr -> range [ 0 ]. min ; newrange. max_proto = mr -> range [ 0 ]. max ; newrange. flags = mr -> range [ 0 ]. flags | NF_NAT_RANGE_MAP_IPS ; newrange. flags = mr -> range [ 0 ]. flags | NF_NAT_RANGE_MAP_IPS ; newrange. flags = mr -> range [",0
762,"<S2SV_ModStart> ; end = path + path_len <S2SV_ModEnd> ; do { <S2SV_ModStart> ; switch ( tag ) { case FDT_END_NODE : depth -- ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - F",0
763,"<S2SV_ModStart> ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode )",0
764,"<S2SV_ModStart> NULL ) { if (! PKCS7_is_detached ( p7 ) ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNATURE_TYPE ) ; goto err ; }",0
765,"<S2SV_ModStart> ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ;",0
766,"<S2SV_ModStart> ( options -> flags & UV_PROCESS_SETUID ) && setuid ( options -> uid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETGID ) && setgid ( options -> gid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setgid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETUID ) && setuid ( options -> uid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_DETACHED )",0
767,"<S2SV_ModStart> int ret, wo <S2SV_ModEnd> ; if ( <S2SV_ModStart> EOPNOTSUPP ; } if ( wbuf == NULL || wlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } if ( rbuf == NULL || rlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } if ( rbuf == NULL || rlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } if ( wo ) ret = dvb_usb_generic_write ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; else ret = dvb_usb_generic_rw ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; mutex_unlock ( & d -> data_mutex ) ; st -> data",0
768,"<S2SV_ModStart> ; client -> priv -> <S2SV_ModEnd> protocol_timeout = g_timeout_add_seconds <S2SV_ModStart> 5, ( GSourceFunc ) _client_protocol_timeout <S2SV_ModEnd>, client )",0
769,<S2SV_ModStart> - 1 ; if ( i + book -> dim > n ) return - 1 ;,0
770,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
771,"<S2SV_ModStart> new_root_item ) ; if ( ret ) { ret = btrfs_check_dir_item_collision ( fs_info, root, new_root_item ) ; if ( ret ) { ret = btrfs_check_dir_item_collision ( fs_info, root, new_root_item ) ; if ( ret ) { ret = btrfs_check_dir_item_collision ( fs_info, root, new_root_item ) ; if ( ret ) { ret = btrfs_fs_check_dir_item_collision ( fs_info, root, new_root_item ) ; if ( ret ) { ret = btrfs_check_dir_item_collision ( fs_info, root, new_root_item ) ; if ( ret ) { ret = btrfs_check_dir_item_collision ( fs_info, root, new_root_item ) ; if ( ret ) { ret = btrfs_fs_check_dir_item_collision ( fs_info, root, new_root_item ) ; if ( ret ) { ret = btrfs_",0
772,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s ) ; atomic_long_dec ( & u -> inflight ) ; if ( atomic_long_dec_and_test ( & u -> inflight ) ) list_del_init ( & u -> link ) ; unix_tot_inflight -- ; <S2SV_ModStart> unix_tot_inflight -- ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
773,"<S2SV_ModStart> NULL ) { size_t <S2SV_ModEnd> chanmap_size = psf <S2SV_ModStart> channels * sizeof ( psf -> channel_map [ 0 ] ) ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; memcpy ( psf -> channel_map, map_info -> channel_map, chanmap_size ) ; } else { size_t chanmap_size = psf -> sf. channels * sizeof ( psf -> channel_map [ 0 ] ) ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; memcpy ( psf -> channel_map, map_info -> channel_map, chanmap_size ) ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ;",0
774,"<S2SV_ModStart> { if (! check_scale_factors ( other_w, other_h, this_w, this_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value ; } else { sf -> predict [ 0 ] [ 0 ] = vp9_convolve_copy ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ 0 ] [ 1",0
775,<S2SV_ModStart> { int32_t nestsize ; if ( ms -> buffer_size_longs < size ) return GPMF_ERROR_BAD_STRUCTURE ;,0
776,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
777,"<S2SV_ModStart> ip6t_entry ) && ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && t -> verdict <S2SV_ModEnd> < 0 && <S2SV_ModStart> verdict < 0 && unconditional ( & e -> ipv6 ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target.",0
778,"<S2SV_ModStart> -> xrefs = safe_calloc <S2SV_ModEnd> ( 1, <S2SV_ModStart> -> n_xrefs ) ; if (! pdf -> xrefs ) { ERR ( ""Failed <S2SV_blank> to <S2SV_blank> locate <S2SV_blank> the <S2SV_blank> startxref <S2SV_blank> token. <S2SV_blank> "" ""This <S2SV_blank> might <S2SV_blank> be <S2SV_blank> a <S2SV_blank> corrupt <S2SV_blank> PDF.\\n"" ) ; return - 1 ; } if ( ( pos = get_next_eof ( fp ) ) < 0 ) { ERR ( ""Failed <S2SV_blank> to <S2SV_blank> locate <S2SV_blank> the <S2SV_blank> startxref <S2SV_blank> token. <S2SV_blank> "" ""This <S2SV_blank> might <S2SV_blank> be <S2SV_blank> corrupt <S2SV_blank> PDF.\\n"" ) ; return - 1 ; } if ( ( pos = get_next_eof ( fp ) ) < 0 ) { ERR ( ""Failed <S2SV_blank> to <S2SV_blank> locate <S2SV_blank> the <S2SV_blank> startxref <S2SV_blank> token. <S2SV_blank> "" ""This <S2SV_blank> might <S2SV_blank> be <S2SV_blank> a <S2SV_blank> corrupt <S2SV_blank> PDF.\\n"" ) ; return - 1 ; } if ( ( pos = get_next_eof ( fp ) ) < 0 ) { ERR ( ""Failed <S2SV_blank> to <S2SV_blank> locate <S2SV_blank> the <S2SV_blank> startxref <S2SV_blank> token. <S2SV_blank> "" ""This <S2SV_blank> might <S2SV_blank> be <S2SV_blank> a <S2SV_blank> corrupt <S2SV_blank> PDF.\\n"" ) ; return - 1 ; }",0
779,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
780,"<S2SV_ModStart> sk ) ; atomic_sub ( skb -> truesize, & sk -> sk_omem_alloc ) ; <S2SV_ModStart> sk ) ; atomic_sub ( skb -> truesize, & sk -> sk_omem_alloc ) ; <S2SV_ModStart> NULL ) ; atomic_sub ( skb -> truesize, & sk -> sk_omem_alloc ) ; <S2SV_ModStart> ( opt ) { atomic_sub ( skb -> truesize, & sk -> sk_omem_alloc ) ; atomic_sub ( skb -> truesize, & sk -> sk_omem_alloc ) ; atomic_sub ( skb -> truesize, & sk -> sk_omem_alloc ) ; atomic_sub ( skb -> truesize, & sk -> sk_omem_alloc ) ; atomic_sub ( skb -> truesize, & sk -> sk_omem_alloc ) ; atomic_sub ( skb -> truesize, & sk -> sk_omem_alloc ) ; } atomic_sub ( skb -> truesize, & sk -> sk_omem_alloc ) ; atomic_sub ( skb -> truesize, & sk -> sk_",0
781,"<S2SV_ModStart> ; BIO * cmsbio = NULL, * tmpin = NULL ; if (! check_content ( cms ) ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_CONTENT_DOES_NOT_EXIST ) ; goto err ; } if ( scount!= sk_CMS_SignerInfo_num ( sinfos ) ) scount += CMS_set1_signers_certs ( cms, certs, flags ) ; if ( scount!= sk_CMS_SignerInfo_num ( sinfos ) ) scount += CMS_set1_signers_certs ( cms, certs, flags ) ; if ( scount!= sk_CMS_SignerInfo_num ( sinfos ) ) scount += CMS_set1_signers_certs ( cms, certs, flags ) ; if ( scount!= sk_CMS_SignerInfo_num ( sinfos ) ) scount += CMS_set1_signers_certs ( cms, certs, flags ) ; if ( scount!= sk_CMS_SignerInfo_num ( sinfos ) ) scount += CMS_set1_signers_certs ( cms, certs, flags ) ; if ( scount!= sk_CMS",0
782,"<S2SV_ModStart> case IPV6_MULTICAST_FILTER : { struct ipv6_mc_filter mcf ; int err ; if ( copy_from_user ( & mcf, optval, GROUP_FILTER_SIZE ( 0 ) ) ) return - EFAULT ; lock_sock ( sk ) ; err = ip6_mc_msfget ( sk, & mcf, ( struct group_filter __user * ) optval, GROUP_FILTER_SIZE ( 0 ) ) ; release_sock ( sk ) ; } break ; case IPV6_MULTICAST_FILTER : { struct ipv6_mc_filter gsf ; int err ; if ( copy_from_user ( & gsf, optval, GROUP_FILTER_SIZE ( 0 ) ) ) return - EFAULT ; if ( gsf. gf_group. ss_family!= AF_INET6 ) return - EADDRNOTAVAIL ; if ( gsf. gf_group. ss_family!= AF_INET6 ) return - EINVAL ; if ( copy_from_user ( & mcf, optval, GROUP_FILTER_SIZE ( 0 ) ) ) return - EFAULT ; if ( copy_from_user ( &",0
783,<S2SV_ModStart> ( ) ; unregister_netdev_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ( ) ; unregister_netdev_subsys <S2SV_ModEnd> ( & sctp_protosw_ops <S2SV_ModStart> ( ) ; unregister_netdev_subsys <S2SV_ModEnd> ( & sctp_protosw_ops <S2SV_ModStart> ( ) ; unregister_netdev_subsys <S2SV_ModEnd> ( & sctp_protosw_ops,0
784,"<S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> ) ; } <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
785,<S2SV_ModStart> { struct net_device * dev = <S2SV_ModEnd> ( ( struct <S2SV_ModStart> ) ptr ) -> ifa_dev <S2SV_ModEnd> ; struct netdev_notifier_info <S2SV_ModStart> & info ; <S2SV_ModEnd> return masq_device_event (,0
786,<S2SV_ModStart> ; if (! mm ||! current -> mm ) { leave_mm ( smp_processor_id ( ) ) ; goto out ; } if ( ( start!= TLB_FLUSH_ALL ) &&! ( vmflag & VM_HUGETLB ) ) base_pages_to_flush = ( end - start ) >> PAGE_SHIFT ; if ( base_pages_to_flush > tlb_single_page_flush_ceiling ) base_pages_to_flush = TLB_FLUSH_ALL ; if ( base_pages_to_flush > tlb_single_page_flush_ceiling ) base_pages_to_flush = ( end - start ) >> PAGE_SHIFT ; if ( base_pages_to_flush > tlb_single_page_flush_ceiling ) base_pages_to_flush = tlb_single_page_flush_ceiling ; if ( base_pages_to_flush > tlb_single_page_flush_ceiling ) base_pages_to_flush = TLB_FLUSH_ALL ; count_vm_tlb_event ( NR_TLB_LOCAL_MM_SH,0
787,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> ) ; ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", stream -> psnr_totals [ i ] / stream -> psnr_count ) ; } fprintf ( stderr, ""\\n"" ) ; }",0
788,<S2SV_ModStart> val ) { <S2SV_ModEnd> int i = <S2SV_ModStart> ( fp ) ; if ( i >= sizeof ( temp ) ) return NULL ; if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) { char * ret ; temp [ i ] = 0 ; ret = malloc ( strlen ( temp ) + 10 ) ; temp [ i ] = 0 ; ret = malloc ( strlen ( temp ) + 10 ) ; temp [ i ] = 0 ; ret = malloc ( strlen ( temp ) + 10 ) ; temp [ i ] = 0 ; ret = malloc ( strlen ( temp ) + 10 ) ; if ( ret == NULL ) { temp [ i ] = 0 ; ret = malloc ( strlen ( temp ) + 10 ) ; temp [ i ] = 0 ; ret = malloc ( strlen ( temp ) + 10 ) ; temp [ i ] = 0 ; ret = malloc ( strlen ( temp ) + 10 ) ; temp [ i ] = 0 ; ret = malloc ( strlen ( temp ) + 10 ) ; temp [ i ] = 0 ; ret = malloc ( strlen ( temp ) + 10 ) ; temp [ i ] = 0 ; ret = malloc (,0
789,<S2SV_ModStart> task ) { <S2SV_ModEnd> complete ( &,0
790,"<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> 16 ) ) ; if (! dst_name ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> summary\\n"" ) ; return ; }",0
791,<S2SV_ModStart> = 0 ; switch ( af ) { case AF_INET : case AF_INET6 : case AF_INET7 : case AF_INET6 : case AF_INET6 : case AF_INET6 : case AF_INET6_VLAN : case AF_INET6_VLAN : case AF_INET6_VLAN : case AF_INET6_VLAN : case AF_INET6_VLAN : case AF_INET6_VLAN : case AF_INET6_VLAN : case AF_INET6_VLAN : case AF_INET6_VLAN : case AF_INET6_VLAN : case AF_INET6_VLAN : case AF_INET6_VLAN : case AF_INET6_VLAN : case AF_INET6_VLAN : case AF_INET6_VLAN : case AF_INET6_VLAN : case AF_INET6_VLAN : case AF_INET6_VLAN : case AF_INET6_VLAN : case AF_INET6_VLAN : case AF_INET6_VLAN : case AF_INET6_VLAN : case AF_INET6_VLAN : case AF_,0
792,"<S2SV_ModStart> case BPLIST_UINT : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_UINT ; data -> length = UINT_TO_HOST ( * object, BPLIST_UINT ) ; data -> boolval = TRUE ; data -> length = UINT_TO_HOST ( * object, BPLIST_UINT ) ; data -> length = UINT_TO_HOST ( * object, BPLIST_UINT ) ; data -> length = UINT_TO_HOST ( * object, BPLIST_UINT ) ; data -> length = UINT_TO_HOST ( * object, BPLIST_UINT ) ; data -> length = UINT_TO_HOST ( * object, BPLIST_UINT ) ; data -> boolval = TRUE ; data -> length = UINT_TO_HOST ( * object, BPLIST_UINT ) ; data -> length = UINT_TO_HOST ( * object, BPLIST_UINT ) ; data -> length = UINT_TO_HOST ( * object, BPLIST_UINT ) ; data -> length = UINT_TO_HOST ( * object, B",0
793,"<S2SV_ModStart> init ( ) ; <S2SV_ModEnd> TRACE_DEBUG ( ""CIDER=0x%04"" <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_PHY1ILR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_PHY1IHR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { memPoolFree ( context -> txBuffer ) ; memPoolFree ( context -> rxBuffer ) ; memPoolFree ( context -> txBuffer ) ; memPoolFree ( context -> rxBuffer ) ; memPoolFree ( context -> txBuffer ) ; mem",0
794,<S2SV_ModStart> all_channels_lock ) ; if ( pch -> file. dead ) { atomic_dec ( & pch -> file. refcnt ) ; wake_up_interruptible ( & pch -> file. rwait ) ; if ( atomic_dec_and_test ( & pch -> file. refcnt ) ) ppp_destroy_channel ( pch ) ; },0
795,"<S2SV_ModStart> { struct btrfs_dir_item <S2SV_ModEnd> * di ; <S2SV_ModStart> & XATTR_REPLACE ) { path = btrfs_alloc_path ( ) ; if ( IS_ERR ( path ) ) { ret = PTR_ERR ( path ) ; goto out ; } <S2SV_ModEnd> di = btrfs_lookup_xattr <S2SV_ModStart>, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } else if (! di ) { ret = - ENODATA ; goto out ; } ret = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( ret ) goto out ; btrfs_release_path ( path ) ; } again : ret = btrfs_insert_xattr_item ( trans, root, path, btrfs_ino ( inode ), name, name_len, value, size ) ; if ( ret == - EOVERFLOW ) ret = - EEXIST ; if ( ret == - EOVERFLOW ) ret = - EOVERFLOW ; if ( ret == - E",0
796,"<S2SV_ModStart> ; if ( op -> len < 1 || op -> len <S2SV_ModStart> return 1 ; if ( op -> len > buf_len ) { pr_err ( ""%s: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> buffer <S2SV_blank> length <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", __func__, buf_len ) ; return - 1 ; } if ( op -> len < 1 ) { pr_err ( ""%s: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> buffer <S2SV_blank> (%d)"", __func__, buf_len ) ; return - 1 ; } if ( op -> len < buf_len ) { pr_err ( ""%s: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> buffer <S2SV_blank> length <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", __func__, op -> len, buf_len ) ; return - 1 ; } if ( op -> len < 1 ) { pr_err ( ""%s: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> buffer <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", __func__, buf_len, op -> len, buf",0
797,<S2SV_ModStart> client ) ; <S2SV_ModEnd> g_hash_table_destroy ( client,0
798,<S2SV_ModStart>. skip } ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf ->,0
799,"<S2SV_ModStart> ; if ( key_is_negative <S2SV_ModEnd> ( key ) <S2SV_ModStart> - ENOKEY ; ret = key_seal ( key, new_p, new_o ) ; if ( ret < 0 ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kzfree ( new_p ) ; goto out ; } ret = key_seal ( key, new_p, new_o ) ; if ( ret < 0 ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kzfree ( new_p ) ; goto out ; } if ( ret < 0 ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kzfree ( new_p ) ; goto out ; } ret = key_seal ( key, new_p, new_o ) ; if ( ret < 0 ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kzfree ( new_",0
800,"<S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NE",0
801,"<S2SV_ModStart> ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_FORMAT_OK ) ; if ( fit_uname ) { bootstage_mark ( bootstage_id + BOOTSTAGE_UNIT_NAME ) ; noffset = fit_image_get_node ( fit, fit_uname ) ; } else { bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_NO_UNIT_NAME ) ; noffset = fit",0
802,<S2SV_ModStart> len ) {vpn_packet_t <S2SV_ModEnd> outpkt ; outpkt,0
803,<S2SV_ModStart> long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_bitmap_legacy_x2apic ) goto out3 ; vmx_msr_bitmap_legacy_x2apic = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_bitmap_legacy_x2apic ) goto out3 ; vmx_msr_bitmap_longmode = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_bitmap_longmode_x2apic ) goto out4 ; vmx_msr_bitmap_nested = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_bitmap_nested_x2apic ) goto out5 ; vmx_vmread_bitmap = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_vmread_bitmap ) goto out,0
804,"<S2SV_ModStart> ; if ( bin -> shstrtab && shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( bin -> shstrtab && shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( bin -> shstrtab && shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( bin -> shstrtab && shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( bin -> shstrtab && shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( """,0
805,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY (,0
806,<S2SV_ModStart> ) )? ( ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> avg_frame_bandwidth + af_ratio - 1 ) ) : ( ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) ) ; # else target = ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) ; # else target = ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) ; # else target = ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) ; # endif,0
807,"<S2SV_ModStart> ++ ) { int allow_untrusted = strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ; if (! allow_untrusted ) { errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; argv [ 0 ] = path ; setuid ( 0 ) ; setgid ( 0 ) ; execv ( path, ( char * const * ) argv ) ; perror ( path ) ; return 1 ; } if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) { errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; } else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; argv [ 0 ] = path ; setuid ( 0 ) ; setgid ( 0 ) ; execv ( path, ( char * const * ) argv ) ;",0
808,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
809,"<S2SV_ModStart> ; } if ( cmd == HTML_DT ) { if ( mode -> indent_level > 0 && mode -> indent_level < MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; if ( tbl -> indent > 0 ) { check_minimum0 ( tbl, 0 ) ; addcontentssize ( tbl, offset ) ; } } else if ( cmd == HTML_TR ) { if ( mode -> indent_level > 0 && mode -> indent_level <= MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; if ( mode -> indent_level < 0 && mode -> indent_level <= MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; if ( tbl -> indent > 0 ) { check_minimum0 ( tbl, 0 ) ; addcontentssize ( tbl, offset ) ; } } else if ( cmd == HTML_TR ) { if ( mode -> indent_level > 0 && mode -> indent_level <= MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; if ( mode -> indent_level < MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; } else if ( mode -> indent_level < MAX_INDENT_LEVEL ) offset",0
810,"<S2SV_ModStart> ; if ( e < b ) { DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u\\n"", line, b, e, ( size_t ) ( e - b ), CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ), sst -> sst_len ) ) ; errno = EFTYPE ; return - 1 ; } if ( e < b ) { DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> < <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u\\n"", line, b, e, ( size_t ) ( e - b ), CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_",0
811,"<S2SV_ModStart> } # endif # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; for ( N = 0 ; N < yylen ; N ++ ) { yytype_int16 * yyss = yyss ; yytype_int16 * yyvs = yyvs ; yytype_int16 * yyvs1 = yyvs ; yytype_int16 * yyss1 = yyss ; yyoverflow ( YY_ ( ""memory <S2SV_blank> exhausted"" ), & yyss1, yysize * sizeof ( * yyssp ), & yyvs1, yysize * sizeof ( * yyvsp ), & yystacksize ) ; <S2SV_ModStart> } # endif # define YYSTACK ( N ) ( yyss = yyssa ; yytype_int16 * yyvs = yyvs ; yytype_int16 * yyvs1 = yyvs ; yytype_int16 * yyss1 = yyss ; yyoverflow ( YY_ ( ""memory <S2SV_blank> exhausted"" ), & yyss1, yysize * sizeof ( * yyssp ), & yyvs1, yysize * sizeof ( * yyvsp ), & yystacksize",0
812,"<S2SV_ModStart> ] ; # if CONFIG_VP8_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vp8_highbitdepth_quantize_b ( b, d ) ; } else { # if CONFIG_VP9_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vp8_highbitdepth_quantize_b ( b, d ) ; } # endif } # if CONFIG_VP8_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vp8_highbitdepth_quantize_b ( b, d ) ; # endif } # if CONFIG_VP12_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mb",0
813,"<S2SV_ModStart> [ FN_REFLEN ] ; # ifdef __WIN__ strncat ( buff, opt_basedir, sizeof ( buff ) - strlen ( opt_basedir ) - 1 ) ; # else strncat ( buff, ""/"", sizeof ( buff ) - strlen ( opt_basedir ) - 1 ) ; # endif strncat ( buff, FN_DIRSEP, sizeof ( buff ) - strlen ( opt_basedir ) - 1 ) ; buff [ sizeof ( buff ) - 1 ] = 0 ; my_free ( opt_basedir ) ; opt_basedir = my_strdup ( buff, MYF ( MY_FAE ) ) ; } if ( opt_verbose ) { printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> basedir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_basedir ) ; printf ( ""# <S2SV_blank> <S2SV_blank> plugin_dir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_plugin_dir ) ; printf ( ""# <S2SV_blank> <S2SV_blank> datadir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_datadir ) ; printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> plugin_ini <S2SV_blank> = <S2SV_blank> %s\\n"", opt_plugin_ini ) ; }",0
814,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) && key -> type == & key_type_keyring ) { zap = dereference_key_locked ( key ) ; if ( zap ) call_rcu ( & zap -> rcu, user_free_payload_rcu ) ; return ret ; } ret = key_payload_reserve ( key, prep -> datalen ) ; if ( ret < 0 ) return ret ; ret = key_payload_reserve ( key, prep -> datalen ) ; if ( ret < 0 ) { ret = - EINVAL ; zap = dereference_key_locked ( key ) ; zap = dereference_key_locked ( key ) ; if ( zap ) call_rcu ( & zap -> rcu, user_free_payload_rcu ) ; return ret ; }",0
815,"<S2SV_ModStart> hci_filter * f = rcu_dereference_protected ( hci_pi ( sk ) -> filter, sock_owned_by_user ( sk ) ) ; if ( f ) { struct hci_filter * f = rcu_dereference_protected ( hci_pi ( sk ) -> filter, sock_owned_by_user ( sk ) ) ; if ( f ) { struct hci_filter * f = f ; uf. type_mask = f -> type_mask ; uf. opcode = f -> opcode ; uf. event_mask [ 0 ] = * ( ( u32 * ) f -> event_mask + 0 ) ; uf. event_mask [ 1 ] = * ( ( u32 * ) f -> event_mask + 1 ) ; } len = min_t ( unsigned int, len, sizeof ( uf ) ) ; if ( copy_to_user ( optval, & f, len ) ) err = - EFAULT ; break ; }",0
816,"<S2SV_ModStart> int n = <S2SV_ModEnd> ( data_end - <S2SV_ModStart> data ) ; if ( n < 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } if ( pbi -> ec_active ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } if ( pbi -> ec_active ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } if ( pbi -> ec_active ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } if ( pbi -> ec_active ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } if ( pbi -> ec_active ) { vpx_internal_error ( & pc -> error, VPX_CODEC",0
817,"<S2SV_ModStart> getprivs_ret ret ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
818,"<S2SV_ModStart>. sack_needed ; sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, asoc -> peer. i. initial_tsn, GFP_ATOMIC ) ; list_for_each_entry ( pos, temp, & new -> peer. transport_addr_list ) { sctp_assoc_rm_peer ( asoc, trans ) ; } if ( asoc -> state >= SCTP_STATE_ESTABLISHED ) { sctp_assoc_rm_peer ( asoc, trans ) ; continue ; } if (! sctp_assoc_lookup_paddr ( new, & trans -> ipaddr ) ) sctp_assoc_rm_peer ( asoc, trans ) ; } if ( asoc -> state >= SCTP_STATE_ESTABLISHED ) { asoc -> next_tsn = new -> next_tsn ; asoc -> ctsn_ack_point = new -> ctsn_ack_point ; asoc -> adv_peer_ack_point = new -> adv_peer_ack_point ; sctp_ssnmap",0
819,"<S2SV_ModStart> cleanup ; } status = aac_fib_send ( dev, srbfib, sizeof ( struct aac_srb ) ) ; if ( status ) { dprintk ( ( KERN_INFO ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> -EBUSY\\n"" ) ) ; rcode = - EINVAL ; goto cleanup ; } if ( status ) { dprintk ( ( KERN_INFO ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> - EINVAL\\n"" ) ) ; rcode = - EINVAL ; goto cleanup ; } if ( status ) { dprintk ( ( KERN_INFO ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> -EBUSY\\n"" ) ) ; rcode = - EINVAL ; goto cleanup ; } if ( status ) { dprintk ( ( KERN_INFO ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> - EINVAL\\n"" ) ) ; rcode = - EINVAL ; goto cleanup ; } if ( status ) { dprintk ( ( KERN_INFO ""aac",0
820,"<S2SV_ModStart> 0 ) ; if ( cc0 < 0 ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Invalid <S2SV_blank> cc0 <S2SV_blank> value <S2SV_blank> %d"", ( unsigned int ) cc0 ) ; return 0 ; } <S2SV_ModStart> 0 ) ; if ( cc0 < 0 ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Invalid <S2SV_blank> cc0 <S2SV_blank> value <S2SV_blank> %d"", ( unsigned int ) cc0 ) ; return 0 ; }",0
821,"<S2SV_ModStart> ; struct sock * net = sock_net ( asoc -> base. sk ) <S2SV_ModEnd> ; bh_lock_sock ( <S2SV_ModStart>. sk ) <S2SV_ModEnd> ; if ( <S2SV_ModStart>. sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> proto_unreach_timer, jiffies + ( HZ / 20 ) ) ) sctp_association_hold ( asoc ) ; goto out_unlock ; } if ( sock_owned_by_user ( asoc -> base. sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> proto_unreach_timer, jiffies + ( HZ / 20 ) ) ) sctp_association_hold ( asoc ) ; goto out_unlock ; } if ( sock_owned_by_user ( asoc -> base. sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned_by_user\\n"", __func__ ) ; if (! mod_timer ( & transport",0
822,"<S2SV_ModStart> input_data, size_t input_data_len <S2SV_ModEnd>, int flags <S2SV_ModStart> { action = ACTION_NONE <S2SV_ModEnd> ; break ; <S2SV_ModStart> } # define fail_if_error ( e ) switch ( e ) { case ERROR_INSUFFICIENT_MEMORY : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } if ( _yr_re_alloc_storage ( & storage )!= ERROR_SUCCESS ) return - 2 ; if ( flags & RE_FLAGS_WIDE ) character_size = 2 ; else if ( flags & RE_FLAGS_BACKWARDS ) { input -= character_size ; input_incr = - input_incr ; } max_bytes_matched = ( int ) yr_min ( input_size, RE_SCAN_LIMIT ) ; max_bytes_matched = max_bytes_matched - max_bytes_matched % character_size ; bytes_matched = 0 ; error = _yr_re_fiber_create ( & fibers, & storage -> fiber_pool, & fiber ) ; fail_if_error ( error ) ; fiber -> ip = re_code ; f",0
823,"<S2SV_ModStart>, int * returndistortion <S2SV_ModEnd>, int * <S2SV_ModStart>, int * returnintra ) { # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart>, best_rd_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart>, best_rd_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart>, best_rd_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart>, best_rd_sse = INT_MAX, best_rd_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart>, best_rd_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart>, best_rd_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart>, best_rd_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_",0
824,"<S2SV_ModStart>, UD_VECTOR ) ; set_exception_intercept ( svm, MC_VECTOR ) ; set_exception_intercept ( svm, MC_VECTOR ) ; set_intercept ( svm, INTERCEPT_INTR ) ; set_intercept ( svm, INTERCEPT_NMI ) ; set_intercept ( svm, INTERCEPT_SMI ) ; set_intercept ( svm, INTERCEPT_SELECTIVE_CR0 ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVLPG ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT_IOIO_PROT ) ; set_intercept ( svm, INTERCEPT_MSR_PROT ) ; set_intercept (",0
825,"<S2SV_ModStart> goto error ; <S2SV_ModEnd> if (! <S2SV_ModStart>. st_size ) { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; DEBUG ( 2, ""malloc <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; } else { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; DEBUG ( 2, ""malloc <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; } h -> fd = - 1 ; } if ( h -> addr == NULL ) { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; DEBUG ( 2, ""malloc <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; } else { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; DEBUG ( 2, ""malloc <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; } if (! h -> writable ) { h -> addr = mmap ( NULL, h -> size, PROT_READ, MAP_SHARED, h -> fd, 0 ) ;",0
826,"<S2SV_ModStart> * sst, <S2SV_ModEnd> const uint64_t clsid <S2SV_ModStart> break ; } if ( str = cdf_clsid_to_mime ( clsid, clsid2desc ) ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str",0
827,"<S2SV_ModStart> u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id ; WORD32 pic_height_in_map_units_minus1 = 0 ; WORD32 u2_pic_wd = 0 ; WORD32 u2_pic_ht = 0 ; WORD32 u2_frm_wd_y = 0 ; WORD32 u2_frm_ht_y = 0 ; WORD32 u2_pic_wd_uv = 0 ; WORD32 u2_crop_offset_y = 0 ; WORD32 u2_crop_offset_uv = 0 ; WORD32 u4_num_reorder_frames ; WORD32 i4_i ; u1_frame_cropping_flag = ih264d_get_bits_h264 ( ps_bitstrm, u1_frame_cropping_flag, u1_frame_cropping_rect_left_ofst, u1_frame_cropping_rect_right_ofst, u1_frame_cropping_rect_top_ofst, u1_frame_cropping_rect_bottom_ofst, u4_num",0
828,"<S2SV_ModStart> palp ) ; if ( err ) return - EFAULT ; err |= __put_user ( length, & up -> length <S2SV_ModStart> ) ; up_native = compat_alloc_user_space ( sizeof ( struct video_spu_palette ) ) ; if ( err ) return - EFAULT ; err = copy_to_user ( up_native, & compat_video_spu_palette_head, sizeof ( struct video_spu_palette ) ) ; err |= __put_user ( length, & up_native -> length ) ; if ( err ) return - EFAULT ; err = __copy_to_user ( up_native, & compat_video_spu_palette_tail, sizeof ( struct video_spu_palette ) ) ; if ( err ) return - EFAULT ; err = copy_to_user ( up_native, & compat_video_spu_palette_head, palp ) ; err |= __put_user ( length, & up_native -> length ) ; if ( err ) return - EFAULT ;",0
829,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * cpi ; vpx_svc_parameters_t * const params = va_arg ( args, vpx_svc_parameters_t * ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ; if ( params == NULL ) return VPX_CODEC_INVALID_PARAM ; cpi -> svc. spatial_layer_id = params -> spatial_layer ; cpi -> svc. temporal_layer_id = params -> temporal_layer ; cpi -> lst_fb_idx = params -> lst_fb_idx ; cpi -> gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; set_encoder_config ( & ctx -> oxcf, & ctx -> extra_cfg, & ctx -> extra",0
830,"<S2SV_ModStart> icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ) ; if ( skb -> ip_summed == CHECKSUM_UNNECESSARY ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ) ; if ( skb -> ip_summed == CHECKSUM_UNNECESSARY ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag",0
831,"<S2SV_ModStart> out ) { uint32 width, length ; uint16 bitspersample, samplesperpixel ; uint16 input_compression, input_photometric ; copyFunc cf ; uint32 width, length ; copyField ( TIFFTAG_IMAGEWIDTH, width, length ) ; CopyField ( TIFFTAG_IMAGELENGTH, length ) ; CopyField ( TIFFTAG_BITSPERSAMPLE, bitspersample ) ; CopyField ( TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; if ( input_compression!= ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_COMPRESSION, input_compression ) ; else if ( input_photometric!= ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_PHOTOMETRIC, input_photometric ) ; else if ( input_compression == COMPRESSION_SGILOG || input_compression == COMPRESSION_SGILOG24 ) TIFFSetField ( out, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_LOGL ) ; else if ( input_compression == COMPRESSION_SGILOG24 ) TIFFSetField ( out, TIFFTAG_PHOTOMETRIC, input_photometric ) ;",0
832,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int check_symlinks <S2SV_ModEnd> ( archive_write_disk * <S2SV_ModStart> ; r = safe_lstat <S2SV_ModEnd> ( a -> <S2SV_ModStart> & st ) ; if ( r!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name )",0
833,"<S2SV_ModStart> ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL )!= 0 ) { SYSERROR ( ""Failed <S2SV_blank> mounting <S2SV_blank> device <S2SV_blank> %s <S2SV_blank> from <S2SV_blank> host <S2SV_blank> into <S2SV_blank> container"", d -> name ) ; return - 1 ; }",0
834,"<S2SV_ModStart> ; unsigned int <S2SV_ModEnd> link_count ; struct <S2SV_ModStart> ibh ) { struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if (! loc ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!loc\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if (! nbh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!nbh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if (! nbh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!nbh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if (! nbh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!nbh\\n"",",0
835,"<S2SV_ModStart> -> tx_size ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y [ tx_size_y ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_",0
836,"<S2SV_ModStart> dst_size ) { const uint8_t * name_start = data ; const uint8_t * name_end = data + ff_amf_tag_size ( data, data_end ) ; const uint8_t * name_end = data + ff_amf_tag_size ( data, data_end ) ; int namelen = strlen ( name ) ; int len ; while ( data < data_end ) { int size = bytestream_get_be16 ( & data ) ; if (! size ) break ; if (! size ) break ; if (! memcmp ( data - size, name_start, namelen ) ) { switch ( * data ++ ) { case AMF_DATA_TYPE_NUMBER : snprintf ( dst, dst_size, ""%g"", av_int2double ( AV_RB64 ( data ) ) ) ; break ; case AMF_DATA_TYPE_BOOL : snprintf ( dst, dst_size, ""%s"", * name_start ) ; break ; case AMF_DATA_TYPE_STRING : len = bytestream_get_be16 ( & data ) ; av_strlc",0
837,"<S2SV_ModStart> mq_flush_lock, flags ) ; flush_rq -> tag = - 1",0
838,"<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1 ; <S2SV_ModStart> -> get_config ( vdev <S2SV_ModEnd>, vdev ->",0
839,"<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) return! prog -> match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; if ( prog -> flags & eflags ) return! prog -> match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; if ( prog -> flags & eflags ) return! prog -> match ( prog -> start, sp, sp, prog -> flags | eflags | eflags, sub ) ; if ( prog -> flags & eflags ) return! prog -> match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; if ( prog -> flags & eflags ) return! prog -> match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; if ( prog -> flags & eflags ) return! prog -> match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; if ( prog -> flags & eflags ) return! prog -> match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ;",0
840,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; return,0
841,"<S2SV_ModStart> ) ) { if ( smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue || * ovalue == '\\0' ) continue ; if ( smatch ( option, ""secure"" ) ) { httpSetRouteSessionSecure ( state -> route, scaselessmatch ( ovalue, ""secure"" ) ) ; } else if ( smatch ( option, ""secure"" ) ) { httpSetRouteSessionSecure ( state -> route, scaselessmatch ( ovalue, ""secure"" ) ) ; } else if ( smatch ( option, ""secure"" ) ) { httpSetRouteSessionSecure ( state -> route, scaselessmatch ( ovalue,",0
842,"<S2SV_ModStart> __be32 daddr ; struct ip_options_rcu * inet_opt <S2SV_ModStart> ; int err ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> -> inet_daddr ; inet_opt = rcu_dereference_protected ( inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> -> inet_daddr ; inet_opt = rcu_dereference_protected ( inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> -> inet_daddr ; inet_opt = rcu_dereference_protected ( inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr",0
843,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
844,"<S2SV_ModStart> p_hsm_com_client_hdl_t * mgr_hdl ; pid_t pid ; memset ( s_path, 0, sizeof ( s_path ) ) ; memset ( c_path, 0, sizeof ( c_path ) ) ; pid = getpid ( ) ; switch ( mgr ) { case FM_MGR_PM : mgr_prefix = HSM_FM_SCK_PM ; mgr_hdl = & hdl -> pm_hdl ; break ; default : return FM_CONF_INIT_ERR ; } sprintf ( s_path, ""%s%s"", HSM_FM_SCK_PREFIX, mgr_prefix, hdl -> instance ) ; sprintf ( c_path, ""%s%s%d_C_%lu"", HSM_FM_SCK_PREFIX, mgr_prefix, hdl -> instance, ( long unsigned ) pid ) ; if ( * mgr_hdl == NULL ) { if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_",0
845,"<S2SV_ModStart> == NULL || <S2SV_ModEnd> replySize < ( <S2SV_ModStart> == NULL || <S2SV_ModEnd> replySize < ( <S2SV_ModStart> ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } effect_param_t * p = ( effect_param_t * ) pCmdData ; if ( * ( int * ) pReplyData!= 0 ) break ; if ( effect -> state!= EFFECT_STATE_ACTIVE ) * ( int * ) pReplyData = session_get_param ( effect -> session, p ) ; if ( * ( int * ) pReplyData!= 0 ) break ; if ( effect -> state!= EFFECT_STATE_ACTIVE ) * ( int * ) pReplyData = effect_set_state ( effect, EFFECT_STATE_CONFIG ) ; if ( * ( int * ) pReplyData!= 0 ) break ; if ( effect -> state!= EFFECT_STATE_CONFIG ) * ( int * ) pReplyData = session_get_config ( effect -> session, p ) ; if ( * ( int * ) pReplyData!= 0 ) break ; if ( effect -> state!= EFF",0
846,"<S2SV_ModStart>!= MagickFalse ) { if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart>!= MagickFalse ) { if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart>!= MagickFalse ) { if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart>!= MagickFalse ) { if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart>!= MagickFalse ) { if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart>!= MagickFalse ) { if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart>!= MagickFalse ) {",0
847,"<S2SV_ModStart> case IPV6_MULTICAST_FILTER : if ( len < 0 ) return - EINVAL ; if ( copy_from_user ( & gsf, optval, GROUP_FILTER_SIZE ( 0 ) ) ) return - EFAULT ; if ( copy_to_user ( & gsf, optval, GROUP_FILTER_SIZE ( 0 ) ) ) return - EFAULT ; if ( gsf. gf_group. ss_family!= AF_INET6 ) return - EADDRNOTAVAIL ; if ( len < 0 ) return - EINVAL ; if ( copy_from_user ( & gsf, optval, len ) ) return - EFAULT ; if ( gsf. gf_group. ss_family!= AF_INET6 ) return - EINVAL ; if ( gsf. gf_group. ss_family!= AF_INET6 ) return - EINVAL ; if ( gsf. gf_group. ss_family!= AF_INET6 ) return - EADDRNOTAVAIL ;",0
848,"<S2SV_ModStart> ; if ( code == NULL ) { err = ENOMEM ; goto cleanup ; } ret [ j ] = k5alloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; } if ( code -> key_data_type [ 0 ]!= KRB5_KDB_SALTTYPE_NORMAL || code -> key_data_length [ 0 ]!= 0 || code -> key_data_contents [ 0 ]!= NULL ) { err = ENOMEM ; goto cleanup ; } if ( code -> key_data_length [ 0 ]!= 0 || code -> key_data_length [ 0 ]!= 0 || code -> key_data_contents [ 0 ] == NULL ) { err = ENOMEM ; goto cleanup ; } if ( code -> key_data_type [ 0 ]!= KRB5_KDB_SALTTYPE_NORMAL || code -> key_data_length [ 0 ]!= 0 || code -> key_data_contents [ 0 ]!= NULL ) { err = ENOMEM ; goto cleanup ; }",0
849,"<S2SV_ModStart> ; L3 = checkfutureword ( J, F, trystm ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ||! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, trystm, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank>",0
850,"<S2SV_ModStart> ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; } else { * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_element_count = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ) ; * o_element_count = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ) ; * o_element_count = ( unsigned int * ) malloc ( sizeof ( unsigned int ) *",0
851,<S2SV_ModStart> 0x02 ) ; memcpy <S2SV_ModEnd> ( sbuf +,0
852,"<S2SV_ModStart> uint8 result ; uint16 <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> ; int length ; struct stream packet <S2SV_ModStart> return False ; packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; rdp_protocol_error (",0
853,<S2SV_ModStart> ; if ( stkt_server!= NULL ) { stkt_server -> stkt = stkt_server ; stkt_server -> stkt_type = 0 ; stkt_server -> stkt_type = 0 ; stkt_server -> stkt_type = 0 ; stkt_server -> stkt_type = 0 ; stkt_server -> stkt_type = 0 ; stkt_server -> stkt_type = 0 ; stkt_server -> stkt_type = 0 ; stkt_server -> stkt_type = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; st,0
854,<S2SV_ModStart> ':' ) || ( ( c >= 0xC0 ) && ( c <= 0xD6 ) ) || ( ( c >= 0xF0 ) && ( c <= 0xF8 ) ) || ( ( c >= 0x370 ) && ( c <= 0x37F ) ) || ( ( c >= 0x218F ) && ( c <= 0x2FEF ) ) || ( ( c >= 0xF900 ) && ( c <= 0xFDCF ) ) || ( ( c >= 0xF900 ) && ( c <= 0xFDCF ) ) || ( ( c >= 0xF900 ) && ( c <= 0xFDCF ) ) || ( ( c >= 0xF900 ) && ( c <= 0xFDCF ) ) || ( ( c >= 0xF900 ) && ( c <= 0xFDCF ) ) || ( ( c >= 0xF900 ) && ( c <= 0xFDCF ) ) || ( ( c >= 0xF900 ) && ( c <= 0xFDCF ) ) || ( ( c >= 0xF900 ) && ( c <= 0xFDCF ) ) || ( ( c >= 0xF900 ) && (,0
855,"<S2SV_ModStart> = 0 ; for ( i = 0 ; i < I40E_NUM_CHANNELS ; i ++ ) { if ( ch -> type!= I40E_VSI_MAIN ) { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> VSI <S2SV_blank> type: <S2SV_blank> %d\\n"", ch -> type ) ; return - EINVAL ; } <S2SV_ModStart> = 0 ; if ( ch -> type!= I40E_VSI_MAIN ) { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> VSI <S2SV_blank> type: <S2SV_blank> %d\\n"", ch -> type ) ; return - EINVAL ; } if ( ch -> type!= I40E_VSI_MAIN ) { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> VSI <S2SV_blank> type: <S2SV_blank> %d\\n"", ch -> type ) ; return - EINVAL ; } if ( ch -> type!= I40E_VSI_MAIN ) { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> VSI <S2SV_blank> type: <S2SV_blank> %d\\n"", ch -> type ) ; return - EINVAL ; }",0
856,"<S2SV_ModStart> [ 11 ] == 0x3c && rdesc [ 12 ] == 0x02 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Cherry <S2SV_blank> Cymotion <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 17 ] = 0x02 ; } else if ( * rsize >= 18 && rdesc [ 11 ] == 0x3c && rdesc [ 12 ] == 0x02 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Cherry <S2SV_blank> Cymotion <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 11 ] = rdesc [ 16 ] = 0xff ; rdesc [ 12 ] = rdesc [ 17 ] = 0x03 ; }",0
857,"<S2SV_ModStart> new_map ) ; ret = set_bit ( idx, & map -> nr_extents ) ; if ( ret < 0 ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> out ; } ret = set_bit ( idx, & parent_map -> nr_extents ) ; if ( ret < 0 ) { mutex_unlock ( & userns_state_mutex ) ; mutex_lock ( & userns_state_mutex ) ; memset ( & new_map, 0, sizeof ( new_map ) ) ; ret = set_bit ( idx, & parent_map -> nr_extents ) ; if ( ret < 0 ) { ret = - EINVAL ; goto out ; } ret = set_bit ( idx, & map -> nr_extents ) ; if ( ret < 0 ) { ret = - EINVAL ; mutex_unlock ( & userns_state_mutex ) ; mutex_lock ( & userns_state_mutex ) ; mutex_unlock ( & userns_state_mutex ) ; ret = set_bit ( idx, & new_map -> nr_extents ) ; mutex_unlock ( & userns_state_mutex ) ;",0
858,"<S2SV_ModStart> } } } if ( cmd_cb ( core_ptr, ""vCont"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } <S2SV_ModStart> ""E01"" ) ; } if ( cmd_cb ( core_ptr, ""vCont"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } if ( cmd_cb ( core_ptr, ""vCont"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } if ( cmd_cb ( core_ptr, ""ds"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } if ( cmd_cb ( core_ptr, ""dc"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } if ( cmd_cb ( core_ptr, ""vCont"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; }",0
859,"<S2SV_ModStart> ) { smb_ofile_t <S2SV_ModEnd> * of = <S2SV_ModStart> ; } of = sr -> fid_ofile ; if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) { ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_node ) ; ( void ) smb_mbc_encodef ( & sr -> reply, ""wwlqq"", 4, 0 ) ; return ( SDRC_ERROR ) ; } if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_node ) ; ( void ) smb_mbc_encodef ( & sr -> reply, ""wwl"", 4, 0 ) ; return ( SDRC_SUCCESS ) ; }",0
860,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
861,<S2SV_ModStart> ; # if CONFIG_VP8_HIGHBITDEPTH if ( pbi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { YV12_BUFFER_CONFIG * this_fb = pbi -> dec_fb_ref [ i ] ; ref_buffer [ i ] [ 0 ] = this_fb -> y_buffer ; ref_buffer [ i ] [ 1 ] = this_fb -> u_buffer ; ref_buffer [ i ] [ 2 ] = this_fb -> v_buffer ; } for ( i = 0 ; i < MAX_REF_FRAMES ; i ++ ) { YV12_BUFFER_CONFIG * this_fb = pbi -> dec_fb_ref [ i ] ; ref_buffer [ i ] [ 0 ] = this_fb -> y_buffer ; ref_buffer [ i ] [ 1 ] = this_fb -> u_buffer ; ref_buffer [ i ] [ 2 ] = this_fb -> u_buffer ; ref_buffer [ i ] [ 2 ] = this_fb -> v_buffer ; i ++ ) { YV12_BUFFER_CONFIG * this_fb = pbi -> dec_fb_ref [ i,0
862,<S2SV_ModStart> = AF_TIPC ; <S2SV_ModEnd> addr -> addr,0
863,<S2SV_ModStart> userspace_addr & ( PAGE_SIZE - 1 ) ) goto out ; if ( mem -> guest_phys_addr + mem -> memory_size < mem -> guest_phys_addr ) goto out ; if ( mem -> slot >= KVM_MEMORY_SLOTS + KVM_PRIVATE_MEM_SLOTS ) goto out ; if ( mem -> guest_phys_addr + mem -> memory_size < mem -> guest_phys_addr ) goto out ; if ( ( mem -> guest_phys_addr + mem -> memory_size < mem -> guest_phys_addr ) || ( mem -> guest_phys_addr + mem -> memory_size < mem -> guest_phys_addr ) || ( mem -> guest_phys_addr + mem -> memory_size < mem -> guest_phys_addr ),0
864,<S2SV_ModStart> NULL ) ; } quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
865,"<S2SV_ModStart> ; if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Malformed <S2SV_blank> HTTP <S2SV_blank> request, <S2SV_blank> aborting"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Malformed <S2SV_blank> HTTP <S2SV_blank> request, <S2SV_blank> aborting"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Malformed <S2SV_blank> HTTP <S2SV_blank> request, <S2SV_blank> aborting"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Malformed <S2SV_blank> HTTP <S2SV_blank> request, <S2SV_blank> aborting"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Malformed <S2SV_blank> HTTP <S2SV_blank> request, <S2SV_blank> aborting"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Malformed <S2SV_blank> HTTP <S2SV_blank>",0
866,"<S2SV_ModStart> len ) { PyObject <S2SV_ModEnd> * u ; <S2SV_ModStart> char * buf <S2SV_ModEnd> ; char * <S2SV_ModStart> char * p ; PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( u ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; p += 10 ; } assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; } if ( * s & 0x80 ) { * p ++ = * s ++ ; if ( * s & 0x80 ) { * p ++ = * s ++ ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i",0
867,"<S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function ) <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function ) <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function ) <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function ) <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function",0
868,"<S2SV_ModStart> ; uint32_t bcount ; if (! DoReadFile ( infile, & filehdr, sizeof ( Wave64FileHeader ), & bcount ) || bcount!= sizeof ( Wave64FileHeader ) - 4 || memcmp ( filehdr. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( filehdr. formType, wave_guid, sizeof ( wave_guid ) ) || memcmp ( filehdr. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( filehdr. formType, wave_guid, sizeof ( wave_guid ) ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) || memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) || memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) || memcmp ( chunk",0
869,"<S2SV_ModStart> ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode )",0
870,"<S2SV_ModStart> ~ SNDRV_TLG_RUNNING ; if ( timeri -> flags & SNDRV_TIMER_IFLG_SLAVE ) timeri -> flags &= ~ SNDRV_TIMER_IFLG_SLAVE ; spin_unlock_irqrestore ( & timeri -> lock, flags ) ;",0
871,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart>, targisdir, wrerrno <S2SV_ModEnd> ; char ch <S2SV_ModStart>, omode, stb. st_mode <S2SV_ModStart>, omode, stb. st_mode <S2SV_ModEnd> )!= 0 <S2SV_ModStart>, omode, stb. st_mode <S2SV_ModEnd> )!= 0 <S2SV_ModStart>, omode, stb. st_mode <S2SV_ModEnd> )!= 0 <S2SV_ModStart>, omode, stb. st_mode <S2SV_ModEnd> )!= 0",0
872,<S2SV_ModStart> } else if ( myentity_find_ext <S2SV_ModEnd> ( target ) <S2SV_ModStart> ; } else if ( myentity_find_ext <S2SV_ModEnd> ( target ) <S2SV_ModStart> ; } else if ( myentity_find_ext <S2SV_ModEnd> ( target ) <S2SV_ModStart> ; } else if ( myentity_find_ext <S2SV_ModEnd> ( target ) <S2SV_ModStart> ; } else if ( myentity_find_ext <S2SV_ModEnd> ( target ) <S2SV_ModStart> ; } else if ( myentity_find_ext <S2SV_ModEnd> ( target ) <S2SV_ModStart> ; } else if ( myentity_find_ext <S2SV_ModEnd> ( target ),0
873,<S2SV_ModStart> ; ghash_flush ( ctx <S2SV_ModEnd> ) ; memcpy,0
874,"<S2SV_ModStart> goto error ; ret = AVERROR_INVALIDDATA ; if ( ret ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret < 0 ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret < 0 ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret < 0 ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret < 0 ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret < 0 ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret < 0 ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc",0
875,"<S2SV_ModStart> null_server ; int <S2SV_ModEnd> need_error_free = 0 <S2SV_ModStart> retval ) ; <S2SV_ModEnd> if ( appl_version <S2SV_ModStart> appl_version && strcmp ( inbuf. data, sendauth_version ) ) { if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 1 ; } free ( inbuf. data ) ; } if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; }",0
876,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 1 ) ; vpx_write_literal <S2SV_ModEnd> ( w,",0
877,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) return ret",0
878,"<S2SV_ModStart> = frametype ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, buffer, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & buffer, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, buffer, faclen ) ; dptr += faclen ; break ; case ROSE_CLEAR_REQUEST : * dptr ++ = lci1 ; * dptr ++ = frametype ; * dptr ++ = 0x00 ; * dptr ++",0
879,"<S2SV_ModStart> = new_ns ; q = next_mnt ( q, new ) ; if (! q ) break ; if ( & p -> mnt == new_fs -> root. mnt ) { new_fs -> root. mnt = mntget ( & q -> mnt ) ; rootmnt = & p -> mnt ; pwdmnt = & q -> mnt ; } if ( & p -> mnt == new_fs -> pwd. mnt ) { new_fs -> pwd. mnt = mntget ( & q -> mnt ) ; pwdmnt = & p -> mnt ; } if ( p -> mnt == new_fs -> root. mnt ) { new_fs -> root. mnt = mntget ( & q -> mnt ) ; rootmnt = & p -> mnt ; pwdmnt = & q -> mnt ; } if ( & p -> mnt == new_fs -> pwd. mnt ) { new_fs -> pwd. mnt = mntget ( & q -> mnt ) ; pwdmnt = & p -> mnt ; }",0
880,"<S2SV_ModStart> ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> temp_scale_frame, width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> alt_scale_frame, width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> lst_frame_buffer, width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> alt_scale_frame, width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> alt_scale_frame, width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> alt_scale_",0
881,<S2SV_ModStart> get_properties = php_zip_get_properties ; zip_object_handlers. read_property = php_zip_read_property ; zip_object_handlers. has_property = php_zip_has_property ;,0
882,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if ( iova + length > mem -> iova + mem -> length ) return - EFAULT ; else return 0 ; <S2SV_ModEnd> } } <S2SV_null>,0
883,"<S2SV_ModStart> case ICMP6_NI_QUERY_REPLY : if ( siz < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } <S2SV_ModStart> case ICMP6_NI_QUERY_REPLY : if ( siz < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-",0
884,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> name, void * cb_data ) { struct rev_list_info * info = cb_data ; if ( info -> revs -> verify_objects &&! obj -> parsed ) die ( ""missing <S2SV_blank> commit <S2SV_blank> object <S2SV_blank> \'%s\'"", oid_to_hex ( & obj -> oid ) ) ; if ( info -> revs -> verify_objects && obj -> type!= OBJ_COMMIT ) parse_object ( obj -> oid. hash ) ; if ( info -> revs -> verify_objects &&! obj -> parsed ) die ( ""missing <S2SV_blank> commit <S2SV_blank> object <S2SV_blank> \'%s\'"", oid_to_hex ( & obj -> oid ) ) die ( ""missing <S2SV_blank> commit <S2SV_blank> object <S2SV_blank> \'%s\'"", oid_to_hex ( & obj -> oid ) ) ; if ( info -> revs -> verify_objects && obj -> type!= OBJ_COMMIT ) parse_object ( obj -> oid. hash ) ; if ( info -> revs -> verify_objects &&! obj -> parsed ) die ( ""missing <S2SV_blank> commit <S2SV_blank> object <S2SV_blank> \'%s\'"", oid_to_hex ( & obj -> oid ) ) die ( """,0
885,<S2SV_ModStart> ; * sent = 0 ; smb_msg. msg_namelen = sizeof ( struct sockaddr ) ; smb_msg. msg_name -> si_family = AF_INET ; smb_msg. msg_namelen = sizeof ( struct sockaddr ) ; smb_msg. msg_name -> si_family = AF_INET ; smb_msg. msg_name -> si_family = AF_INET ; smb_msg. msg_name -> si_family = AF_INET ; smb_msg. msg_namelen = sizeof ( struct sockaddr ) ; smb_msg. msg_controllen = sizeof ( struct sockaddr ) ; smb_msg. msg_controllen = sizeof ( struct sockaddr ) ; smb_msg. msg_name -> si_family = AF_INET ; smb_msg. msg_name -> si_family = AF_INET ; smb_msg. msg_name -> si_family = AF_INET ; smb_msg. msg_namelen = sizeof ( struct sockaddr ) ; smb_msg. msg_controllen = sizeof ( struct sockaddr ) ; smb_msg.,0
886,"<S2SV_ModStart> void buffer_pipe_buf_get ( struct pipe_inode_info * pipe <S2SV_ModEnd>, struct pipe_buffer <S2SV_ModStart> -> private ; mutex_lock ( & pipe -> buffer_mutex ) ; <S2SV_ModStart> -> ref ++ ; mutex_unlock ( & pipe -> buffer_mutex ) ;",0
887,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> cluster!= fs <S2SV_ModStart> clusters - 1 ) get_fat ( & subseqEntry, fs -> fat, cluster + 1, fs ) ; else subseqEntry. value = 0 ; data [ 0 ] = ( ( 0xff & subseqEntry. value ) << 4 ) | ( ( 0xff & subseqEntry. value ) >> 8 ) ; data [ 1 ] = ( ( 0xff & subseqEntry. value ) << 4 ) ; size = 2 ; break ; case 8 : data = fs -> fat + cluster * 2 ; offs = fs -> fat_start + cluster * 2 ; * ( unsigned short * ) data = htole16 ( new ) ; size = 2 ; break ; case 16 : data = fs -> fat + cluster * 2 ; offs = fs -> fat_start + cluster * 2 ; * ( unsigned short * ) data = htole16 ( new ) ; size = 2 ; break ; case 32 : { FAT_ENTRY curEntry ; get_fat ( & curEntry, fs -> fat, cluster, fs ) ; data = fs -> fat + cluster * 4 ; * ( uint32_t * ) data = htole",0
888,"<S2SV_ModStart> ; memcpy ( & t_above, x -> e_mbd. above_context, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memcpy ( & t_left, x -> e_mbd. left_context, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; ta = ( ENTROPY_CONTEXT * ) & t_above ; tl = ( ENTROPY_CONTEXT * ) & t_left ; has_2nd_order = ( x -> e_mbd. mode_info_context -> mbmi. mode!= B_PRED && x -> e_mbd. mode_info_context -> mbmi. mode!= SPLITMV ) ; type = has_2nd_order? PLANE_TYPE_Y_NO_DC : PLANE_TYPE_Y_WITH_DC ; for ( b = 0 ; b < 24 ; b ++ ) { optimize_b ( x, b, type, ta + vp8_block2above [ b ], tl + vp8_block2left [ b ] ) ; check_reset_2nd_coeffs ( & x -> e_mbd,",0
889,<S2SV_ModStart> sk_nulls_node ) ; <S2SV_ModEnd> isk -> inet_num,0
890,"<S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, <S2SV_ModEnd> u1_num_mbsNby2, u1_is_idr_slice <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, <S2SV_ModEnd> u1_num_mbsNby2, u1_is_idr_slice <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_is_idr_slice, u1_is_idr_slice, u1_num_mbsNby2, u1_is_idr_slice, u1_is_idr_slice, u1_num_mbsNby2, u1_num_mbsNby2, u1_is_idr_slice, u1_is_idr_slice, u1_num_mbsNby2, u1_is_idr_slice, u1_is_idr_slice, u1_num_mbsNby2, u1_is_idr_slice, u1_is_idr_slice,",0
891,<S2SV_ModStart> ; if ( unlikely (! mmget_still_valid ( mm ) ) ) return - EINVAL,0
892,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> parse_rock_ridge_inode ( struct <S2SV_ModStart> inode ) { int result ; if ( ( ISOFS_SB ( inode -> i_sb ) -> s_rock_offset == - 1 ) && ( ISOFS_SB ( inode -> i_sb ) -> s_rock == 2 ) ) { result = parse_rock_ridge_inode_internal ( de, inode, 14 ) ; } else if ( ( ISOFS_SB ( inode -> i_sb ) -> s_rock == 2 ) ) { result = parse_rock_ridge_inode_internal ( de, inode, 0 ) ; if ( ( ISOFS_SB ( inode -> i_sb ) -> s_rock_offset == - 1 ) && ( ISOFS_SB ( inode -> i_sb ) -> s_rock == 2 ) ) { result = parse_rock_ridge_inode_internal ( de, inode, 15 ) ; } else if ( ( ISOFS_SB ( inode -> i_sb ) -> s_rock == 2 ) ) { result = parse_rock_ridge_inode_internal ( de, inode",0
893,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct <S2SV_ModEnd> fsnotify_group * inotify_new_group <S2SV_ModStart> 0 ; group -> inotify_data. <S2SV_ModEnd> user = user <S2SV_ModStart> = user ; group -> inotify_data. <S2SV_ModEnd> fa = NULL <S2SV_ModStart> NULL ; return group <S2SV_ModEnd> ; } <S2SV_null>,0
894,"<S2SV_ModStart> in ) ; if ( in -> linesize < 4 ) { av_image_copy_plane ( out -> data [ p ], out -> linesize [ p ], in -> data [ p ], w, h ) ; } else if ( in -> linesize < 4 ) { av_image_copy_plane ( out -> data [ p ], in -> linesize [ p ], w, h ) ; } else if ( in -> linesize < 4 ) { av_image_copy_plane ( out -> data [ p ], in -> linesize, in -> data [ p ], w, h ) ; else if ( out -> data [ p ]!= in -> data [ p ] ) av_image_copy_plane ( out -> data [ p ], in -> linesize [ p ], in -> linesize [ p ], w, h ) ; else if ( out -> data [ p ]!= in -> data [ p ] ) av_image_copy_plane ( out -> data [ p ], in -> data [ p ], in -> linesize [ p ], w, h ) ; else if ( out -> data [ p ]!= in -> data [ p ]",0
895,"<S2SV_ModStart> [ 1 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 2 ] ) ; if ( screen -> buffers [ 3 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 3 ] ) ; if ( screen -> buffers [ 4 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 4 ] ) ; if ( screen -> buffers [ 5 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 5 ] ) ; if ( screen -> buffers [ 6 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 6 ] ) ; if ( screen -> buffers [ 7 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 7 ] ) ; if ( screen -> buffers [ 8 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 8 ] ) ; if ( screen -> buffers [ 9 ] )",0
896,"<S2SV_ModStart> ( env, ""dereference <S2SV_blank> of <S2SV_blank> modified <S2SV_blank> ctx <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d+%d, <S2SV_blank> ctx+const <S2SV_blank> is <S2SV_blank> allowed, <S2SV_blank> ctx+const <S2SV_blank> is <S2SV_blank> not\\n"" <S2SV_ModEnd>, regno,",0
897,"<S2SV_ModStart> uint16 strip, nstrips = TIFFNumberOfStrips ( in ) ; uint32 stripsize = TIFFStripSize ( in ) ; uint32 rows = 0 ; tsize_t scanline_size = TIFFGetFieldDefaulted ( in, TIFFTAG_ROWSPERSTRIP, & rps ) ; if ( scanline_size == 0 ) { TIFFError ( """", ""TIFF <S2SV_blank> scanline <S2SV_blank> size <S2SV_blank> is <S2SV_blank> zero!"" ) ; return 0 ; } for ( strip = 0 ; strip < nstrips ; strip ++ ) { bytes_read = TIFFReadEncodedStrip ( in, strip, bufp, - 1 ) ; rows = bytes_read / scanline_size ; if ( bytes_read < 0 &&! ignore ) { TIFFError ( """", ""Error <S2SV_blank> reading <S2SV_blank> strip <S2SV_blank> %lu <S2SV_blank> after <S2SV_blank> %lu <S2SV_blank> rows"", ( unsigned long ) strip, ( unsigned long ) rows, ( unsigned long ) scanline_size ) ; return 0 ; } for ( strip = 0 ; strip < nstrips ; strip ++ ) { bytes_read = TIFFReadEncodedStrip ( in, strip, bufp, - 1 ) ; rows = bytes_read / scanline_size ;",0
898,"<S2SV_ModStart> base_name ) ; <S2SV_ModEnd> const char need_to_append_dot <S2SV_ModStart> 1 : 0 ; struct search_domain * const dom ; for ( dom = state -> head ; dom ; dom = dom -> next ) { if (! n -- ) { const u8 * const postfix = ( ( u8 * ) dom ) + sizeof ( struct search_domain ) ; const int postfix_len = dom -> len ; char * newname = ( char * ) mm_malloc ( base_len + need_to_append_dot + postfix_len + 1 ) ; if (! newname ) return NULL ; memcpy ( newname, base_name, base_len ) ; if ( need_to_append_dot ) newname [ base_len ] = '.' ; memcpy ( newname + base_len + need_to_append_dot, postfix, postfix_len ) ; newname [ base_len ] = 0 ; if ( need_to_append_dot ) newname [ base_len ] = '.' ; memcpy ( newname + base_len + need_to_append_dot, postfix, postfix_len ) ; newname [ base_len ] = 0 ; }",0
899,<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay ) ; TEMP_FAILURE_RETRY (,0
900,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = -,1
901,"<S2SV_ModStart>, one ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > GetBlobSize ( image )",0
902,"<S2SV_ModStart> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> < S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> < S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; if ( planeSize < originalSize ) nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; else CopyMemory ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; if ( planeSize > originalSize ) nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; else CopyMemory ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; if ( planeSize < originalSize ) nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; else CopyMemory ( rle, context -> priv -> Plane",0
903,<S2SV_ModStart> policy ) { if (! inode_has_encryption_context ( inode ) ) return - EOPNOTSUPP ; if (! inode_has_encryption_secrets ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ) return - ENOTEMPTY ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - EOPNOTSUPP ; if (! inode_has_encryption_secrets ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - ENOTEMPTY ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - EOPNOTSUPP ; if (! inode_has_encryption_secrets ( inode ) ) return - EOPNOTSUP,0
904,"<S2SV_ModStart> value ) { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; else if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; else if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; else if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ; state -> endpoints = sclone ( value )",0
905,"<S2SV_ModStart> -> match, } ; struct keyring_search_data match_data = {. cmp = type -> cmp,. raw_data = description,. lookup_type = KEYRING_SEARCH_LOOKUP_DIRECT, } ; if ( match_data. cmp!= type -> match ) { ret = type -> match ( & ctx. match_data, & match_data ) ; if ( ret < 0 ) { key = ERR_PTR ( ret ) ; goto error_free ; } } if ( dest_keyring ) construct_get_dest_keyring ( & dest_keyring ) ; ret = key_link ( dest_keyring, key ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; ret = ERR_PTR ( ret ) ; goto error_free ; } key = key_ref_to_ptr ( key_ref ) ; if ( dest_keyring ) { construct_get_dest_keyring ( & dest_keyring ) ; ret = construct_get_dest_keyring ( & dest_keyring ) ; ret = key_link ( dest_keyring, key ) ; if ( ret < 0 ) { key",0
906,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; if (,0
907,"<S2SV_ModStart> ) ) ; ret = json_is_true ( json_array_get ( val, 9 ) ) ; if ( ret ) { cg_wlock ( & pool -> data_lock ) ; free ( job_id ) ; free ( coinbase1 ) ; free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; cg_wlock ( & pool -> data_lock ) ; free ( pool -> data_lock ) ; pool -> swork. job_id = job_id ; snprintf ( pool -> prev_hash, 65, ""%s"", prev_hash ) ; snprintf ( pool -> bbversion, 9, ""%s"", bbversion ) ; snprintf ( pool -> nbit, 9, ""%s"", nbit ) ; snprintf ( pool -> ntime, 9, ""%s"", ntime ) ; pool -> swork. clean = clean ; alloc_len = pool -> coinbase_len ;",0
908,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
909,"<S2SV_ModStart> { void * ptr ; if ( num > UINT32_MAX / size ) { pr_err ( ""%d <S2SV_blank> cannot <S2SV_blank> allocate <S2SV_blank> %d <S2SV_blank> bytes\\n"", __func__, num, size ) ; return NULL ; } ptr = malloc0 <S2SV_ModEnd> ( num * <S2SV_ModStart> size ) ) ; if (! ptr ) { pr_err ( ""%d <S2SV_blank> cannot <S2SV_blank> allocate <S2SV_blank> %d <S2SV_blank> bytes\\n"", __func__, num, size ) ; return NULL ; } if (! ptr ) { pr_err ( ""%d <S2SV_blank> cannot <S2SV_blank> allocate <S2SV_blank> %d <S2SV_blank> bytes\\n"", __func__, num, size ) ; return NULL ; } <S2SV_ModEnd> return ptr ;",0
910,<S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
911,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> * res ; PyObject * dict ; Py_DECREF ( dict ) ; dict = _PyObject_GetAttrId ( self, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( dict ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if",0
912,"<S2SV_ModStart> USB_DT_OTG, ( struct usb_otg_descriptor <S2SV_ModEnd> * * ) <S2SV_ModStart> & desc ) ; if (! desc ) return 0 ; if ( desc -> bmAttributes & USB_OTG_HNP ) { dev_info ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %sHNP <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; return 0 ; } else if ( port1 == bus -> otg_port ) { err = usb_control_msg ( udev, 0, USB_REQ_SET_FEATURE, 0, USB_DEVICE_B_HNP_MODE, 0, NULL, 0, USB_CTRL_SET_TIMEOUT ) ; if ( err < 0 ) dev_err ( & udev -> dev, ""can\'t <S2SV_blank> set <S2SV_blank> HNP <S2SV_blank> mode: <S2SV_blank> %d\\n"", err ) ; bus -> b_hnp_enable = 0 ; } else { err = usb_control_msg ( udev, 0, USB_REQ_SET_FEATURE, 0, USB_DEVICE_",0
913,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> ; case PERF_EVENT_IOC_PERIOD : perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_ID : perf_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_SET_OUTPUT : { int ret ; if ( arg!= - 1 ) { struct fd output ; ret = perf_fget_light ( arg, & output ) ; if ( ret ) return ret ; output_event = output. file -> private_data ; ret = perf_event_set_output ( event, output_event ) ; fdput ( output ) ; } else { ret = perf_event_set_output ( event, NULL ) ; } return ret ; } <S2SV_ModEnd> case PERF_EVENT_IOC_SET_FILTER :",0
914,<S2SV_ModStart> -> prr_delivered += tcp_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
915,"<S2SV_ModStart> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> frame_parallel_decoding_mode ) ++",0
916,"<S2SV_ModStart> mask ) { int err ; err = crypto_alloc_skcipher ( name, type, mask ) ; if ( err ) return ERR_PTR ( err ) ; if ( crypto_alloc_skcipher ( name, type, mask, & err ) ; if (! err ) return ERR_PTR ( err ) ; crypto_free_skcipher ( name ) ; return ERR_PTR ( err ) ;",0
917,"<S2SV_ModStart> case CCP_SHA_TYPE_1 : if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || sha -> ctx_len < SHA1_DIGEST_SIZE ) return - EINVAL ; block_size = SHA1_BLOCK_SIZE ; break ; case CCP_SHA_TYPE_224 : if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || sha -> ctx_len < SHA224_DIGEST_SIZE ) return - EINVAL ; block_size = SHA224_BLOCK_SIZE ; break ; case CCP_SHA_TYPE_256 : if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || sha -> ctx_len < SHA256_DIGEST_SIZE ) return - EINVAL ; block_size = SHA256_BLOCK_SIZE ; break ; case CCP_SHA_TYPE_384 : if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || sha -> ctx_len < SHA384_DIGEST_SIZE ) return - EIN",0
918,<S2SV_ModStart> tile_height ) { av_free ( c -> synth_tile ) ; av_free ( c -> jpeg_tile ) ; c -> synth_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> jpeg_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> kempf_buf = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> kempf_flags = av_mallocz ( c -> tile_width * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> synth_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> jpeg_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> kempf_buf = av_mallocz ( c -> tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> kempf_flags = av_mallocz ( c -> tile_width * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE,0
919,"<S2SV_ModStart> sizeof iv ) ; if (! rb_safe_cmp ( self, rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_const_const ) ) ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ) ) ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get (",0
920,<S2SV_ModStart> = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += 2 * stride ; srcptr += stride ; } srcptr = buf ; dstptr = & a [ ( 1 - parity ) * stride ] ; n = numrows - hstartcol ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += 2 * stride ; srcptr += stride ; } dstptr = & a [ ( 1 - parity ) * stride ] ; n = numrows - hstartcol ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dst,0
921,<S2SV_ModStart> s ) ; <S2SV_ModEnd> register_savevm ( dev,0
922,"<S2SV_ModStart> { register u_int <S2SV_ModEnd> len = h <S2SV_ModStart> len ) ; if ( length > CHDLC_HDRLEN ) { ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( - 1 ) ; } if ( chdlc_print ( ndo, p, length ) < 0 ) { ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( - 1 ) ; } if ( length > CHDLC_HDRLEN ) { ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( - 1 ) ; } if ( chdlc_print ( ndo, p, length ) < 0 ) { ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( - 1 ) ; }",0
923,"<S2SV_ModStart> = 0 ; if ( cifs_sb -> mnt_cifs_options & CIFS_MOUNT_NOSUID ) { cFYI ( 1, ""No <S2SV_blank> mnt_cifs_options <S2SV_blank> specified"" ) ; rc = - EINVAL ; goto out ; } cifs_sb -> mnt_cifs_options |= CIFS_MOUNT_NOSUID ; cifs_sb -> mnt_cifs_options |= CIFS_MOUNT_NOSUID ; cifs_sb -> mnt_cifs_options &= ~ CIFS_MOUNT_NOSUID ; cFYI ( 1, ""No <S2SV_blank> mnt_cifs_options <S2SV_blank> specified"" ) ; rc = - EINVAL ; goto out ; } if ( cifs_sb -> mnt_cifs_options & CIFS_MOUNT_NOSUID ) { cFYI ( 1, ""No <S2SV_blank> mnt_cifs_options <S2SV_blank> specified"" ) ; cifs_sb -> mnt_cifs_options |= ~ CIFS_MOUNT_NOSUID ; cFYI ( 1, ""No <S2SV_blank> mnt_cifs_",0
924,"<S2SV_ModStart> len && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS ) && <S2SV_ModStart> len && ( sk -> sk_tsflags & SOF_TIMESTAMPING_HARDWARE ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE ) && ktime_to_timespec_cond ( shhwtstamps -> hwtstamp, tss. ts + 1 ) ) empty = 0 ; if ( shhwtstamps && ( sk -> sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE ) && ktime_to_timespec_cond ( shhwtstamps -> hwtstamp, tss. ts + 3 ) ) empty = 0 ; if ( shhwtstamps && ( sk -> sk_tsflags & SOF_TIMESTAMPING_HARDWARE ) && ktime_to_timespec_cond ( shhwtstamps -> hwtstamp, tss. ts + 4 ) ) empty = 0 ; if ( skb_is_err_queue ( skb ) && skb -> len && skb_is_err_queue ( skb ) && skb -> len",0
925,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_DISABLE_EXTERNAL_ENTITIES, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_DISABLE_EXTERNAL_ENTITIES ) ) ; raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_DISABLE_EXTERNAL_ENTITIES, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_DISABLE_EXTERNAL_ENTITIES ) ) ; raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_DISABLE_EXTERNAL_ENTITIES, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_DISABLE_EXTERNAL_ENTITIES ) ) ;",0
926,"<S2SV_ModStart> ; if ( alg_k & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_k & ( SSL_kECDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_k & ( SSL_kECDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; }",0
927,<S2SV_ModStart> ) ) { SecureElement <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
928,<S2SV_ModStart> - first ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return NGHTTP2_ERR_FRAME_OVERFLOW ; } <S2SV_ModStart> - first ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return NGHTTP2_ERR_FRAME_OVERFLOW ; } <S2SV_ModStart> - first ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return NGHTTP2_ERR_FRAME_OVERFLOW ; } if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return NGHTTP2_ERR_FRAME_OVERFLOW ; } if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return NGHTTP2_ERR_FRAME_OVERFLOW ; } if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return NGHTTP2_ERR_FRAME_OVERFLOW ; } if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return NGHTTP2_ERR_FRAME_OVER,0
929,<S2SV_ModStart> = ucounts ; if (! new_ns ) { kfree ( new_ns ) ; dec_mnt_namespaces ( ucounts ) ; return ERR_PTR ( - ENOMEM ) ; },0
930,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
931,"<S2SV_ModStart> ; if (! cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES ) ||! cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_MISC ) ||! cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_MISC2 ) ||! cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_MISC3 ) ||! cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES ) ||! cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_MISC4 ) ||! cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_MISC2 ) ||! cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_MISC3 ) ||! cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPAB",0
932,"<S2SV_ModStart>. dimensions ; # ifdef STB_VORBIS_DIVIDES_IN_RESIDUE uint8 * * part_classdata = ( uint8 * * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * part_classdata ) ) ; # else int * * classifications = ( int * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * classifications ) ) ; # endif CHECK ( f ) ; # ifndef STB_VORBIS_DIVIDES_IN_RESIDUE uint8 * * part_classdata = ( uint8 * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * part_classdata ) ) ; # else int * * classifications = ( int * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * classifications ) ) ; # endif for ( i = 0 ; i < j ; ++ i ) if ( do_not_decode [ i ] ) memset ( residue_buffers [ i ], 0, sizeof ( float",0
933,"<S2SV_ModStart> ( sk ) ; <S2SV_ModEnd> if ( tcp_oow_rate_limited <S2SV_ModStart> ( sk ), skb, LINUX_MIB_TCPACKSKIPPEDCHALLENGE, & tp -> last_oow_ack_time ) ) { net_inc_stats ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; tp -> sent_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
934,<S2SV_ModStart> struct llc_pktinfo info ; msg -> msg_namelen = sizeof ( info ),0
935,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, const TOKENEXTRA * * tp, const TOKENEXTRA * stop ) { const int t = p -> token ; const struct vpx_token * const a = & vp9_coef_encodings [ t ] ; const struct vpx_extra_bit * const b = & vp9_extra_bits [ t ] <S2SV_ModEnd> ; int i <S2SV_ModStart> = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) ; v9_write_tree ( w, vp9_coef_tree, p -> context_tree, bits, len, i ) ; vp9_write_tree ( w, vp9_coef_con_tree, vp9_pareto8_full [ p -> context_tree [ PIVOT_NODE ] - 1 ], v, n - len, 0 ) ; } else { vpx_write_tree ( w, vp9_coef_tree, p",0
936,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart>, 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_rb_bytes_written <S2SV_ModEnd> ( & wb <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_clear_system_state ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_rb_bytes_written <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_compute_update_table <S2SV_ModEnd> ( ) ;",0
937,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
938,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; int n <S2SV_ModStart> ENODEV ; } if (! interface -> desc. bNumEndpoints ) { dbg_hid ( ""class <S2SV_blank> descriptor <S2SV_blank> not <S2SV_blank> present\\n"" ) ; return - ENODEV ; } if ( le16_to_cpu ( interface -> desc. bcdHID )!= hdesc -> bcdHID ) { dbg_hid ( ""class <S2SV_blank> descriptor <S2SV_blank> not <S2SV_blank> present\\n"" ) ; return - ENODEV ; } hid -> version = le16_to_cpu ( interface -> desc. bcdHID ) ; hid -> country = hdesc -> bCountryCode ; for ( n = 0 ; n < hdesc -> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if (! rsize || rsize > HID_MAX_DESCRIPTOR_SIZE ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - EINVAL ; }",0
939,"<S2SV_ModStart> ) { struct ikev2_id id ; int id_len, idtype_len <S2SV_ModEnd> ; ND_TCHECK ( <S2SV_ModStart> * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; id_len = ntohs ( id. h. len ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } idtype_len = id_len - 4 ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } ND_TCHECK ( * ext ) ;",0
940,<S2SV_ModStart> group_dead ) ; if ( unlikely ( tsk -> robust_list ) ) exit_robust_list ( tsk ) ; # ifdef CONFIG_COMPAT if ( unlikely ( tsk -> compat_robust_list ) ) compat_exit_robust_list ( tsk ) ; # ifdef CONFIG_FUTEX if ( unlikely ( tsk -> robust_list ) ) robust_exit_robust_list ( tsk ) ; # ifdef CONFIG_FUTEX if ( unlikely ( tsk -> robust_list ) ) robust_exit_robust_list ( tsk ) ; # ifdef CONFIG_COMPAT if ( unlikely ( tsk -> compat_robust_list ) ) compat_exit_robust_list ( tsk ) ; # endif,0
941,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> data ) { <S2SV_ModEnd> char * name <S2SV_ModStart> ( path, obj -> oid. hash <S2SV_ModEnd> ) ; add_preferred_base_object <S2SV_ModStart> |= OBJECT_ADDED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
942,<S2SV_ModStart> ; if ( atoi ( jas_tvparser_getval ( tvp ) ) < 0 ) { goto error ; } <S2SV_ModStart> ; if ( atoi ( jas_tvparser_getval ( tvp ) ) < 0 ) { goto error ; } <S2SV_ModStart> ; if ( atoi ( jas_tvparser_getval ( tvp ) ) < 0 ) { goto error ; } if ( atoi ( jas_tvparser_getval ( tvp ) ) < 0 ) { goto error ; } if ( atoi ( jas_tvparser_getval ( tvp ) ) < 0 ) { goto error ; } if ( atoi ( jas_tvparser_getval ( tvp ) ) < 0 ) { goto error ; } if ( atoi ( jas_tvparser_getval ( tvp ) ) < 0 ) { goto error ; } if ( atoi ( jas_tvparser_getval ( tvp ) ) < 0 ) { goto error ; } if ( atoi ( jas_tvparser_getval ( tvp ) ) < 0 ) { goto error ; } if ( atoi ( jas_tvparser_getval (,0
943,"<S2SV_ModStart> urb ) ; if ( ret ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_urb ( urb ) ; usb_free_urb_from_pipe ( urb_context ) ; goto err_free_urb_to_pipe ; } <S2SV_ModStart> urb ) ; if ( ret ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_urb ( urb ) ; if ( ret ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_",0
944,"<S2SV_ModStart>, yt0_0, yt1_0, xt2_0, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0, x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_0, x_l2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1, x_l2_0, x_l2_1, x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_",0
945,<S2SV_ModStart> ; if ( unlikely ( ( tag & 0x1f ) == ASN1_LONG_TAG ) ) { do { if ( unlikely ( datalen - dp < 2 ) ) goto data_overrun_error ; tmp = data [ dp ++ ] ; } while ( tmp & 0x80 ) ; } len = data [ dp ++ ] ; if ( unlikely ( len <= 0x7f ) ) { dp += len ; goto next_tag ; } if ( unlikely ( len == ASN1_INDEFINITE_LENGTH ) ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } if ( unlikely ( len == ASN1_INDEFINITE_LENGTH ) ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } n = len - 0x80 ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto length_too_,0
946,"<S2SV_ModStart> val ; if ( WARN_ON_ONCE (! ( flags & __GFP_ZERO ) ) ) { WARN_ON_ONCE ( 1 ) ; <S2SV_ModStart> flags & __GFP_ZERO ) memset ( ptr, 0, size ) ; } else if ( WARN_ON_ONCE (! ( flags & __GFP_WAIT ) ) ) { WARN_ON_ONCE ( 1 ) ; val = gen_pool_alloc ( atomic_pool, size ) ; if ( val ) { WARN_ON_ONCE (! ( flags & __GFP_ZERO ) ) ; ptr = ( void * ) val ; if ( flags & __GFP_ZERO ) memset ( ptr, 0, size ) ; } else if ( WARN_ON_ONCE (! ( flags & __GFP_WAIT ) ) ) { WARN_ON_ONCE ( 1 ) ; val = gen_pool_free ( atomic_pool, val ) ; if ( val ) { WARN_ON_ONCE (! ( flags & __GFP_ZERO ) ) ; ptr = ( void * ) val ; if ( flags & __GFP_ZERO ) memset ( ptr, 0, size",0
947,<S2SV_ModStart> mntent ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ; if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ;,0
948,"<S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> } if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ) ; return FAILURE ; } if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank>",0
949,<S2SV_ModStart> n ] >= min <S2SV_ModEnd> && value [ <S2SV_ModStart> n ] <= max <S2SV_ModEnd> && field -> <S2SV_ModStart> n ] <= <S2SV_ModEnd> max <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
950,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
951,"<S2SV_ModStart> ( argReg >= sizeof ( struct dex_debug_local_t ) <S2SV_ModEnd> ) { } <S2SV_ModStart> = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & line_start ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; <S2SV_ModStart> = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; param_type_idx = r_uleb128 ( p4, p4_end - p4, & param_type",0
952,"<S2SV_ModStart> ) ) ; rb_val_set ( env, server_name_key_val, req_server_name ( req ) ) ; rb_val_set ( env, server_port_key_val, req_server_port ( req ) ) ; rb_val_set ( env, server_ip_key_val, req_server_ip_key ( req ) ) ; rb_val_set ( env, server_name_key_val, req_server_name ( req ) ) ; rb_val_set ( env, server_port_key_val, req_server_port ( req ) ) ; rb_val_set ( env, server_ip_key_val, req_server_ip ( req ) ) ; rb_val_set ( env, server_ip_key_val, req_server_ip_key ( req ) ) ; rb_val_set ( env, server_ip_key_val, req_server_ip ( req ) ) ; rb_val_set ( env, server_ip_key_val, req_server_ip ( req ) ) ; rb_val_set ( env, server_ip_",0
953,<S2SV_ModStart> 0 ) ; args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; if ( args -> rmtvaluelen > XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ) { args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; return XFS_ERROR ( ERANGE ) ; } args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; if ( args -> rmtvaluelen > XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ) { args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; } args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; if ( args -> rmtvaluelen > XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ) { args -> rmt,0
954,"<S2SV_ModStart> endif # endif <S2SV_ModEnd> MYSQL_BIND * bind <S2SV_ModStart>, prepare_retval ; # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = imp_dbh -> use_server_side_prepare ; if ( attribs ) { svp = DBD_ATTRIB_GET_SVP ( attribs, ""mysql_server_prepare"", 20 ) ; imp_sth -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare ; if ( svp && SvTRUE ( * svp ) ) { # if MYSQL_ASYNC imp_sth -> is_async = TRUE ; imp_sth -> use_server_side_prepare = FALSE ; # else do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000"" ) ; # endif } } else { # if MYSQL_ASYNC imp_sth -> is_async = FALSE ; imp_sth -> use_server_side_prepare = FALSE ; imp_sth ->",0
955,"<S2SV_ModStart> ; if ( key -> type && key -> type -> destroy ) key -> type -> destroy ( key ) ; <S2SV_ModEnd> if ( test_bit <S2SV_ModStart> KEY_FLAG_IN_QUOTA, & key -> flags ) ) { spin_lock ( & key -> user -> lock ) ; key -> user -> qnkeys -- ; key -> user -> qnbytes -= key -> quotalen ; spin_unlock ( & key -> user -> lock ) ; } atomic_dec ( & key -> user -> nkeys ) ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_INSTANTI",0
956,"<S2SV_ModStart> ) ) ; if (! state. sumlen ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""program <S2SV_blank> limit <S2SV_blank> exceeded"" ), errdetail ( ""program <S2SV_blank> limit <S2SV_blank> exceeded"" ) ) ) ;",0
957,"<S2SV_ModStart> int need = 0 <S2SV_ModEnd> ; Char * <S2SV_ModStart>, { need = <S2SV_ModEnd> Length ( screen <S2SV_ModStart>, { need = <S2SV_ModEnd> Length ( screen <S2SV_ModStart>, { need = <S2SV_ModEnd> Length ( screen <S2SV_ModStart>, { need = <S2SV_ModEnd> Length ( screen <S2SV_ModStart>, { need = <S2SV_ModEnd> Length ( screen <S2SV_ModStart>, { need = <S2SV_ModEnd> Length ( screen <S2SV_ModStart>, { need = <S2SV_ModEnd> Length ( screen <S2SV_ModStart>, { need = <S2SV_ModEnd> Length ( screen <S2SV_ModStart>, { need = <S2SV_ModEnd> Length ( screen <S2SV_ModStart>, { need = <S2SV_ModEnd> Length ( screen <S2SV_ModStart> } ) ;",0
958,"<S2SV_ModStart> = 0 ; mutex_lock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock <S2SV_ModEnd> ) ; if <S2SV_ModStart> i_orphan ) ; err = ext4_reserve_inode_write ( handle, inode, & iloc ) ; if ( err ) goto out_err ; if ( prev == & sbi -> s_orphan ) { BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_brelse ; sbi -> s_es -> s_last_orphan = cpu_to_le32 ( ino_next ) ; BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_brelse ; sbi -> s_es -> s_last_orphan = cpu_to_le32 ( ino_next ) ; BUFFER_TRACE ( sbi",0
959,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> val ) ) { if ( val < 0 ) strncpy ( str, ""-NaN"", len ) ; else strncpy ( str, <S2SV_ModStart> ) ) { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } if (",0
960,"<S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp,",0
961,"<S2SV_ModStart> ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; if ( size < 6 ) ASSERT ( result!= buf ) ; ASSERT ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) == 0 ) ; if ( result!= buf ) free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; if ( size < 6 ) ASSERT (",0
962,"<S2SV_ModStart> cycles ) ; if ( unlikely ( fast_pool -> count >= 64 ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; } if ( ( fast_pool -> count < 64 ) && crng_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; r = & input_pool ; if (! spin_trylock ( & r -> lock ) ) return ; if (! time_after ( now, fast_pool -> last + HZ ) ) return ; r = & input_pool ; if (! spin_trylock ( & r -> lock ) ) return ; if ( arch_get_random_seed_long ( & seed ) ) { __mix_pool_bytes ( r, & seed, sizeof ( seed ) ) ; credit = 1 ; } else if ( arch_get_random_seed_long ( & seed ) ) { __mix_pool_bytes ( r, & seed, sizeof ( seed ) ) ; credit = 1 ; }",0
963,"<S2SV_ModStart> { strncat <S2SV_ModEnd> ( str, <S2SV_ModStart> ( str, jslGetTokenValueAsString <S2SV_ModEnd> ( ), <S2SV_ModStart> ( str, jslGetTokenValueAsString <S2SV_ModEnd> ( ), <S2SV_ModStart> ( str, jslGetTokenValueAsString <S2SV_ModEnd> ( ), <S2SV_ModStart> ( str, jslGetTokenValueAsString <S2SV_ModEnd> ( ),",0
964,<S2SV_ModStart> ; if ( ( st. st_mode & S_IFMT ) == S_IFREG && ( st. st_mode & S_IFMT )!= S_IFLNK && ( st. st_mode & S_IFMT )!= S_IFDIR && ( st. st_mode & S_IFMT )!= S_IFDIR && ( st. st_mode & S_IFMT )!= S_IFREG && ( st. st_mode & S_IFMT )!= S_IFLNK && ( st. st_mode & S_IFMT )!= S_IFDIR && ( st. st_mode & S_IFMT )!= S_IFDIR && ( st. st_mode & S_IFMT )!= S_IFDIR && ( st. st_mode & S_IFMT )!= S_IFREG && ( st. st_mode & S_IFMT )!= S_IFDIR && ( st. st_mode & S_IFMT )!= S_IFDIR && ( st. st_mode & S_IFMT )!= S_IFDIR && ( st. st_mode & S_IFMT ),0
965,,1
966,"<S2SV_ModStart> * output ; size_t <S2SV_ModEnd> i ; if <S2SV_ModStart> ) ; } input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( i = 2 ; i < ( ssize_t ) ( argc - 1 ) ; i ++ ) { # if 0 fprintf ( stderr, ""DEBUG: <S2SV_blank> Concatenate <S2SV_blank> Image: <S2SV_blank> \\""%s\\""\\n"", argv [ i ] ) ; # endif input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( c = fgetc ( input ) ; c!= EOF ; c = fgetc ( input ) ) { ( void ) fputc ( ( char ) c, output ) ; ( void ) remove_utf8 ( argv [ i ] ) ; } ( void ) fclose ( input ) ; ( void ) fclose ( output ) ; return",0
967,"<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> const si = get_svc_internal ( svc_ctx ) ; if ( si == NULL ) { return VPX_CODEC_INVALID_PARAM ; } strncpy ( si -> service_name, options, sizeof ( si -> service_name ) ) ; si -> service_name [ sizeof ( si -> service_name ) - 1 ] = '\\0' ; si -> service_name [ sizeof ( si -> service_name ) - 1 ] = '\\0' ; si -> service_name [ sizeof ( si -> service_name ) - 1 ] = '\\0' ; si -> service_name [ sizeof ( si -> service_name ) - 1 ] = '\\0' ; si -> service_name [ sizeof ( si -> service_name ) - 1 ] = '\\0' ; si -> service_name [ sizeof ( si -> service_name ) - 1 ] = '\\0' ; si -> service_name [ sizeof ( si -> service_name ) - 1 ] = '\\0' ; si -> service_name [ sizeof ( si -> service_name ) - 1 ] = '\\0' ; si -> service_name [ sizeof (",0
968,"<S2SV_ModStart> fail : if ( IS_ERR ( bdev ) ) { ext3_msg ( sb, ""error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s: <S2SV_blank> %ld"", __bdevname ( dev, b ), PTR_ERR ( bdev ) ) ; blkdev_put ( bdev, FMODE_READ | FMODE_WRITE | FMODE_EXCL ) ; if ( IS_ERR ( bdev ) ) { ext3_msg ( sb, ""error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s: <S2SV_blank> %ld"", __bdevname ( dev, b ), PTR_ERR ( bdev ) ) ; return NULL ; } <S2SV_ModEnd> return bdev ;",0
969,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> tmpname = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> ( fp = safe_mkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> atomic_dir ) ) == NULL ) return - 1 ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( lckpwdf ( ) < 0 ) goto fail ; pwf = fopen ( PASSWD_FILE, ""r"" ) ; if (! found && linebuf [ namelen ] == ':' &&! strncmp ( linebuf, pwd -> pw_name, namelen ) ) { if ( putpwent ( pwd, fp ) < 0 ) goto fail ; namelen = strlen ( linebuf ) ; contlen = strlen ( linebuf ) ;",0
970,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
971,"<S2SV_ModStart> { return memcmp <S2SV_ModEnd> ( s1, <S2SV_ModStart> s2, strlen ( s2 ) <S2SV_ModEnd> ) ; }",0
972,"<S2SV_ModStart> TRUE ; } Jid * from = xmpp_stanza_get_from ( message ) ; Jid * jid_to = jid_create ( from ) ; if (! jid_to ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> stanza <S2SV_blank> name <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } if ( g_strcmp0 ( name, ""sent"" )!= 0 ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> unrecognised <S2SV_blank> name: <S2SV_blank> %s"", name ) ; return TRUE ; } if ( g_strcmp0 ( name, ""received"" )!= 0 ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> unrecognised <S2SV_blank> stanza <S2SV_blank> name <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } if ( g_strcmp0 ( name, ""received"" )!= 0 ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> unrecognised <S2SV_blank> name: <S2SV_blank> %s"", name ) ; return TRUE ; } if ( g_strcmp0 ( name, ""sent"" )!= 0 ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> stanza <S2SV_blank> name <S2SV_blank>",0
973,"<S2SV_ModStart> badfmt ; } <S2SV_ModEnd> } config_set_special_field ( <S2SV_ModStart> ""cluster-announce-ip"" ) { if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { addReplyError ( c, ""cluster-announce-ip <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; server. cluster_announce_ip = ( ( char * ) o -> ptr ) [ 0 ]? zstrdup ( o -> ptr ) : NULL ; } <S2SV_ModEnd> } config_set_special_field ( <S2SV_ModStart> ""cluster-announce-ip"" ) { if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { addReplyError ( c, ""cluster-announce-ip <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; server. cluster_announce_ip = ( ( char * ) o -> ptr ) [ 0 ]? zstrdup ( o -> ptr ) : NULL ; } <S2SV_ModEnd> } config_set_special_field ( <S2SV_ModStart> ""cluster-announce-ip"" ) { if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { addReplyError ( c",0
974,<S2SV_ModStart> ) ) { <S2SV_ModEnd> parse_global_option ( CMD_PRINT_HELP <S2SV_ModStart> ) ) { <S2SV_ModEnd> parse_service_option ( CMD_PRINT_HELP <S2SV_ModStart> ) ) { <S2SV_ModEnd> parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModStart> ) ) { <S2SV_ModEnd> parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModStart> ) ) { <S2SV_ModEnd> print_ssl_options ( ),0
975,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; msg ->,0
976,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
977,"<S2SV_ModStart> st_v1_new_iv ) ; if ( st -> st_v1_key_e_nss == NULL ) { libreswan_log ( RC_LOG_SERIOUS, ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } if ( st -> st_v1_key_e_nss == NULL ) { libreswan_log ( RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of <S2SV_blank> encryption <S2SV_blank> blocksize"" ) ; return ; } st -> st_v1_key_e_nss = st -> st_oakley. ta_encrypt ; st -> st_v1_key_e_nss = NULL ; if ( st -> st_v1_key_e_nss == NULL ) { libreswan_log ( RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of <S2SV_blank> encryption <S2SV_blank> blocksize"" ) ; return ; } st -> st_v1_key_e_nss = st ->",0
978,<S2SV_ModStart> -> s_ivd_video_decode_ip_t. u4_num_Bytes ; if ( ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed + 1 ) > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_Bytes = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes - 1 ; if ( ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed + 1 ) > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_Bytes = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes - 1 ; if ( ( ps_op -> s_ivd_video_decode_op_,0
979,"<S2SV_ModStart> int x, y, i ; tilemap = malloc ( x_size * y_size <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> map_tile ) ) ) return false ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * old_width ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * old_height ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tile -> frames_left = tileset_get_delay ( s_map -> tileset, 0 ) ; tile -> tile_index = 0 ; } for ( i = 0 ; i < s_map -> num_layers ; ++ i ) { if (! s_map -> layers [ i ]. is_parallax ) { s_map -> width = fmax ( s_map -> width, s_map -> layers [ i ]. width * tile_width ) ; s_map -> height = fmax ( s_map -> height, tile_height",0
980,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ) ; ND_TCHECK_16 ( length ) ; <S2SV_ModStart> ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ; ND_TCHECK_32 ( length + 1 ) ; <S2SV_ModStart> ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ; if ( ptr > length + 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ) ; ptr = cp [ 2 ] - 1 ; if ( ptr < 3 || ( ptr + 1 ) & 3 ) || ptr > length + 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ) ; if ( ptr > length + 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ) ; if ( ptr > length + 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", ptr )",0
981,<S2SV_ModStart> <S2SV_null> static char <S2SV_ModEnd> * print_string ( <S2SV_ModStart> item ) { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> valuestring ) ; } <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_string_ptr ( item,0
982,<S2SV_ModStart> enc. encode <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> enc. encode <S2SV_ModEnd> ( ctx ->,0
983,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> buf ) ; if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } <S2SV_ModStart> ; if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting",0
984,"<S2SV_ModStart> * buf ; size_t size = sizeof ( unsigned char * ) * chm -> num_chunks ; if (! sys -> alloc ) { self -> error = MSPACK_ERR_NOMEMORY ; return NULL ; } if (! sys -> seek ( fh, ( off_t ) ( chm -> dir_offset + ( chunk_num * chm -> chunk_size ) ), MSPACK_SYS_SEEK_START ) ) { self -> error = MSPACK_ERR_SEEK ; sys -> free ( buf ) ; return NULL ; } if ( sys -> read ( fh, buf, ( int ) chm -> chunk_size )!= ( int ) chm -> chunk_size ) { self -> error = MSPACK_ERR_READ ; sys -> free ( buf ) ; return NULL ; } if ( sys -> seek ( fh, ( off_t ) ( chm -> dir_offset + ( chunk_num * chm -> chunk_size ) )!= ( int ) chm -> chunk_size ) ) { self -> error = MSPACK_ERR_SEEK ; sys -> free ( buf ) ; return NULL ; } if ( sys -> seek ( fh, ( off_t",0
985,"<S2SV_ModStart> leader ) ) return - EINVAL ; list_for_each_entry ( sibling, & leader -> sibling_list, group_entry ) { if (! validate_event ( & fake_pmu, sibling ) ) return - EINVAL ; } if (! validate_event ( & fake_pmu, sibling ) ) return - EINVAL ; } if (! validate_event ( & fake_pmu, event ) ) return - EINVAL ; list_for_each_entry ( sibling, & sibling -> sibling_list, group_entry ) { if (! validate_event ( & fake_pmu, sibling ) ) return - EINVAL ; } if (! validate_event ( & fake_pmu, sibling ) ) return - EINVAL ; }",0
986,"<S2SV_ModStart> ; } else if ( arg1 == 3 ) { win_set_geom ( 0, - 1, 0, 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( 1 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 1 ) { win_maximise ( 0 ) ; term. rows0 = rows0 ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 2 ) { win_maximise ( - 1 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 3 ) { win_set_geom ( 0, - 1, 0, 0, 0 ) ; term. rows0 = rows0 ; term. cols0 = rows0 ; term. rows0 = rows0 ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; term. rows0 = rows0 ; term",0
987,"<S2SV_ModStart> ; if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported\\n"" ) ; av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported\\n"" ) ; av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported\\n"" ) ; av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported\\n"" ) ; av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported\\n"" ) ; av",0
988,"<S2SV_ModStart> ; if ( nsops > INT_MAX / sizeof ( * sops ) ) return - EINVAL ; sops = kmalloc ( sizeof ( * sops ) * nsops, GFP_KERNEL ) ; if (! sops ) return - ENOMEM ; for ( i = 0 ; i < nsops ; i ++ ) { __get_user_error ( sops [ i ]. sem_num, & tsops -> sem_num, err ) ; __get_user_error ( sops [ i ]. sem_op, & tsops -> sem_op, err ) ; sops ++ ; } for ( i = 0 ; i < nsops ; i ++ ) { __get_user_error ( sops [ i ]. sem_num, & tsops -> sem_num, err ) ; __get_user_error ( sops [ i ]. sem_flg, & tsops -> sem_flg, err ) ; tsops ++ ; } if ( timeout ) { err |= copy_from_user ( & local_timeout, timeout, sizeof ( * timeout ) ) ; timeout = & local_timeout ; }",0
989,<S2SV_ModStart> ; for ( i = 0 ; i < cols + 17 ; i ++ ) s [ i ] = s [ i + 1 ] ; for ( i = 0 ; i < cols + 8 ; i ++ ) s [ i ] = s [ i + 1 ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; d [ c & 15 ] = d [ ( c - 8 ) & 15 ] ; if ( x * x < flimit ) { d [ c & 15 ] = ( 8 + sum + s [ c ] ) >> 4 ; } s [ c - 8 ] = d [ ( c - 8 ) & 15 ] ; if ( sumsq * 15 - sum * 15 < flimit ) { d [ c & 15 ] = ( 8 + sum + s [ c ] ) >> 4 ; },0
990,"<S2SV_ModStart> 0 ; } if ( i < 0 ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModStart> 0 ; } if ( i < 0 ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModStart> grub_disk_addr_t start ; start = grub_le_to_cpu32 ( ext [ i ]. start_hi ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu32",0
991,"<S2SV_ModStart> ; # endif if ( ( npix + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( npix + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( npix + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } #",0
992,"<S2SV_ModStart> ; if ( q - p < sh. sh_properties ) { DPRINTF ( ( ""CDF_READ_PROPERTY_INFO: <S2SV_blank> offset <S2SV_blank> %u <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds\\n"", q - p ) ) ; goto out ; } if ( q - p < sh. sh_properties ) { DPRINTF ( ( ""CDF_READ_PROPERTY_INFO: <S2SV_blank> offset <S2SV_blank> %u <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds\\n"", q - p ) ) ; goto out ; } if ( q - q < sh. sh_properties ) { DPRINTF ( ( ""CDF_READ_PROPERTY_INFO: <S2SV_blank> offset <S2SV_blank> %u <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds\\n"", q - p ) ) ; goto out ; } if ( q - p < sh. sh_properties ) { DPRINTF ( ( ""CDF_READ_PROPERTY_INFO: <S2SV_blank> offset <S2SV_blank> %u <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds\\n"", q - p ) ) ; goto out ; } if ( q - q < sh. sh_properties ) { DPRINTF ( ( ""CDF_READ_PROPERTY_INFO: <S2SV_blank> offset <S2SV_blank> %",0
993,"<S2SV_ModStart> ; } } if ( bytes_matched >= max_bytes_matched ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_EXHAUSTIVE? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; break ; } <S2SV_ModStart> ; } } if ( bytes_matched >= max_bytes_matched ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_EXHAUSTIVE? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; break ; }",0
994,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> jslTokenAsString ( int <S2SV_ModStart> ) { case LEX_EOF : strncpy ( str, ""EOF"" ) ; return ; case LEX_ID : strncpy ( str, ""ID"", len ) ; return ; case LEX_INT : strncpy ( str, ""INT"", len ) ; return ; case LEX_FLOAT : strncpy ( str, ""FLOAT"", len ) ; return ; case LEX_STR : strncpy ( str, ""STRING"", len ) ; return ; case LEX_TEMPLATE_LITERAL : strncpy ( str, ""TEMPLATE <S2SV_blank> LITERAL"", len ) ; return ; case LEX_REGEX : strncpy ( str, ""REGEX"", len ) ; return ; case LEX_UNFINISHED_STR : strncpy ( str, ""UNFINISHED <S2SV_blank> STRING"", len ) ; return ; case LEX_UNFINISHED_TEMPLATE_LITERAL : strncpy ( str, ""UNFINISHED <S2SV_blank> TEMPLATE <S2SV_blank> LITERAL"", len ) ; return ; case LEX_REGEX : strncpy ( str, ""REGEX"",",0
995,"<S2SV_ModStart> mnt_instance ) ; if ( mnt -> mnt. mnt_flags & MNT_PRIVILEGED ) { mnt -> mnt. mnt_flags &= ~ MNT_PRIVILEGED ; <S2SV_ModStart> unlock_mount_hash ( ) ; if ( unlikely ( mnt -> mnt. mnt_flags & MNT_INTERNAL ) ) { init_task_work ( & mnt -> mnt_rcu, __cleanup_mnt ) ; if (! task_work_add ( task, & mnt -> mnt_rcu, true ) ) return ; } init_task_work ( & mnt -> mnt_rcu, __cleanup_mnt ) ; if (! ( task -> flags & PF_KTHREAD ) ) { init_task_work ( & mnt -> mnt_rcu, __cleanup_mnt ) ; if (! task_work_add ( task, & mnt -> mnt_rcu, true ) ) return ; } if ( llist_add ( & mnt -> mnt_llist, & delayed_mntput_list ) ) schedule_delayed_work ( & delayed_mntput_",0
996,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 16 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 32 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
997,"<S2SV_ModStart> ; } } if ( jas_stream_peekc ( pkthdrstream )!= EOF ) { jas_eprintf ( ""packet <S2SV_blank> offset=%08ld <S2SV_blank> cmptno=%02d <S2SV_blank> rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_cmptno ( pi ), jpc_pi_rlvlno ( pi ), jas_stream_peekc ( pkthdrstream ) ) ; if ( jas_stream_peekc ( pkthdrstream )!= EOF ) { jas_eprintf ( ""packet <S2SV_blank> offset=%08ld <S2SV_blank> cmptno=%02d <S2SV_blank> rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", jas_stream_getrwcount ( in ), jpc_pi_cmptno ( pi ), jas_stream_getrwcount ( in ), jpc_pi_cmptno ( pi ), jpc_pi_rlvlno ( pi ), jas_stream_",0
998,<S2SV_ModStart> * symlink ; <S2SV_ModEnd> struct udf_inode_info * <S2SV_ModStart> * iinfo ; <S2SV_ModEnd> pos = udf_block_map <S2SV_ModStart> pos ) ; if (! bh ) goto out <S2SV_ModEnd> ; symlink = <S2SV_ModStart> b_data ; } up_read ( & iinfo -> i_data_sem ) ; SetPageError ( page ) ; <S2SV_ModStart> 0 ; out : if ( PageError ( page ) ) { up_read ( & iinfo -> i_data_sem ) ; SetPageUptodate ( page ) ; kunmap ( page ) ; unlock_page ( page ) ; return err ; } up_read ( & iinfo -> i_data_sem ) ; SetPageError ( page ) ; unlock_page ( page ) ; return 0 ; <S2SV_ModEnd> } <S2SV_null>,0
999,<S2SV_ModStart> else if ( vcpu -> arch. apic_base & X2APIC_DISABLE ) msr_bitmap = vmx_msr_bitmap_nested_x2apic ; else if ( vcpu -> arch. apic_base & X3APIC_ENABLE ) msr_bitmap = vmx_msr_bitmap_nested_x3apic ; else if ( vcpu -> arch. apic_base & X3APIC_ENABLE ) { if ( is_long_mode ( vcpu ) ) msr_bitmap = vmx_msr_bitmap_longmode_x3apic ; else msr_bitmap = vmx_msr_bitmap_legacy_x3apic ; } else { if ( is_long_mode ( vcpu ) ) msr_bitmap = vmx_msr_bitmap_legacy_x3apic ; else msr_bitmap = vmx_msr_bitmap_legacy_x3apic ; },0
1000,"<S2SV_ModStart> ( ent!= NULL && st == 0 <S2SV_ModEnd> ) { if <S2SV_ModStart> cleanup ; } st = populate_policy ( context, ld, ent, pol_name, * policy ) ; <S2SV_ModEnd> ldap_msgfree ( result",0
1001,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; } BITS_PARSE <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; } BITS_PARSE <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER,0
1002,"<S2SV_ModStart> ) ) { switch ( c ) { case'<S2SV_blank>': psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'e' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'E' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'T' : trunc_8to4 = SF_TRUE ; break ; case 'T' : trunc_8to4 = SF_FALSE ; break ; case'm' : data = va_arg ( argptr, unsigned int ) ; header_put_marker ( psf, data ) ; count += 1 ; break ; case '2' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_short ( psf, data ) ; } else { header_put_le_short ( psf, data ) ; } ; count += 2 ; break ; case '3' : data = va_arg ( argptr, unsigned int ) ; header_put_byte ( psf, data ) ; count += 3 ; break ; case '4' : data = va",0
1003,"<S2SV_ModStart>, ret ; state -> dsec_cmd. len = CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ; <S2SV_ModStart> ) ; } state -> dsec_cmd. args [ CX24116_DISEQC_MSGOFS ] = 0 ; state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN ] = 0 ; if ( toneburst == CX24116_DISEQC_TONEOFF ) state -> dsec_cmd. args [ CX24116_DISEQC_BURST ] = 0 ; else if ( toneburst == CX24116_DISEQC_TONECACHE ) state -> dsec_cmd. args [ CX24116_DISEQC_BURST ] = 0 ; else if ( toneburst == CX24116_DISEQC_MESGCACHE ) state -> dsec_cmd. args [ CX24116_DISEQC_BURST ] = 0 ; else if ( toneburst == CX24116_DISEQC_TONECACHE ) state -> dsec_cmd. args [ CX24116",0
1004,"<S2SV_ModStart> ; break ; } cinfo. hci_handle = sco_pi ( sk ) -> conn -> hcon -> handle ; memcpy ( cinfo. dev_class, sco_pi ( sk ) -> conn -> hcon -> dev_class, 3 ) ; len = min_t ( unsigned int, len, sizeof ( cinfo ) ) ; if ( copy_to_user ( optval, ( char * ) & cinfo, len ) ) err = - EFAULT ; break ;",0
1005,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1006,"<S2SV_ModStart> 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } if ( copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } <S2SV_ModEnd> waitpid",0
1007,"<S2SV_ModStart> ; guint num_items_scanned <S2SV_ModEnd> ; int pktnum <S2SV_ModStart> 0 ) ; if ( num_items_scanned!= 1 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } <S2SV_ModStart> 0 ) ; if ( num_items_scanned!= 1 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( num_items_scanned!= 1 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( num_items_scanned!= 1 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba",0
1008,"<S2SV_ModStart> ; int err ; msg -> msg_namelen = 0 <S2SV_ModStart> = 0 ; if ( msg -> msg_namelen ) { msg -> msg_namelen = sizeof ( struct iucv_user_info ) ; memset ( msg -> msg_name, 0, sizeof ( struct iucv_user_info ) ) ; memset ( msg -> msg_namelen, 0, sizeof ( struct iucv_user_info ) ) ; memset ( msg -> msg_name, 0, sizeof ( struct iucv_user_info ) ) ; memset ( msg -> msg_namelen, 0, sizeof ( struct iucv_user_info ) ) ; memset ( msg -> msg_name, 0, sizeof ( struct iucv_user_info ) ) ; memset ( msg -> msg_namelen, 0, sizeof ( struct iucv_user_info ) ) ; memset ( msg -> msg_name, 0, sizeof ( struct iucv_user_info ) ) ; memset ( msg -> msg_namelen, 0, sizeof ( struct iucv_user_info ) ) ; memset ( msg ->",0
1009,"<S2SV_ModStart> key ) ; if (! zend_symtable_find ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } <S2SV_ModStart> key ) ; if (! zend_symtable_find ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_symtable_update ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, & data, sizeof ( data ), NULL ) ; break ; case IS_STRING : if ( zend_symtable_find ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, ( void * * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data )",0
1010,"<S2SV_ModStart> ) ) ; strncpy <S2SV_ModEnd> ( link_info. <S2SV_ModStart>. str, nla_data ( link [ TIPC_NLA_LINK_NAME ] ), sizeof ( link_info. str )",0
1011,<S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; obuf -> len = len ; opipe -> nrbufs ++ ; ibuf -> offset += obuf -> len ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; obuf -> len -= obuf -> len ; } ret += obuf -> len ; len -= obuf -> len ;,0
1012,"<S2SV_ModStart> ) { if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ) p -> tokenlen = sizeof ( p -> tokenbuf ) ; if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ) p -> tokenlen = sizeof ( p -> tokenbuf ) ; if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ) p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ; if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) p -> tokenlen = sizeof ( p -> tokenbuf ) ; if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen",0
1013,<S2SV_ModStart> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1014,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1015,<S2SV_ModStart> return AVERROR_INVALIDDATA ; if ( back_size > INT_MAX / 2 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 <S2SV_ModStart> return AVERROR_INVALIDDATA ; if ( back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size > INT_MAX / 3 || back_size,0
1016,<S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ,0
1017,"<S2SV_ModStart> ; } } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX_REQ ) { return return_pkinit_kx_req ( context, request, reply, padata, cb, rock, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX_REP ) { return return_pkinit_kx_rep ( context, request, reply, encrypting_key, cb, rock, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX_REQ ) { return return_pkinit_kx_req ( context, request, reply, padata, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX_REQ ) { return return_pkinit_kx_rep ( context, request, reply, encrypting_key, cb, rock, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX_REQ ) { return return",0
1018,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1019,"<S2SV_ModStart> -> stratum_port ; if ( strcmp ( url, pool -> sockaddr_url ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> url <S2SV_blank> without <S2SV_blank> domain <S2SV_blank> \'%s\'"", url ) ; return false ; } if ( strcmp ( url, port ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", url ) ; return false ; } if ( strcmp ( url, dot_reconnect ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> \'%s\'"", url ) ; return false ; } if ( strcmp ( url, dot_reconnect ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", url ) ; return false ; } if ( strcmp ( url, dot_reconnect ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain",0
1020,"<S2SV_ModStart> max_submaps ) { if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; <S2SV_ModStart> max_submaps ) { if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; <S2SV_ModStart> max_submaps ) { if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; <S2SV_ModStart> max_sub",0
1021,<S2SV_ModStart> return 0 ; if ( head -> iov_len + head -> iov_len < hdr ) return 0 ; dlen = head -> iov_len + rqstp -> rq_arg. page_len - hdr ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; rqstp -> rq_vec [ 0 ]. iov_base = ( void * ) p ; rqstp -> rq_vec [ 0 ]. iov_len = hdr ; v = 0 ; while ( len > rqstp -> rq_vec [ v ]. iov_len ) { len -= rqstp -> rq_vec [ v ]. iov_len ; v ++ ; rqstp -> rq_vec [ v ]. iov_base = page_address ( rqstp -> rq_pages [ v ] ) ; rqstp -> rq_vec [ v ]. iov_len = PAGE_SIZE ; },0
1022,"<S2SV_ModStart> ) ; struct o2nm_cluster * cluster = <S2SV_ModEnd> to_o2nm_cluster_from_node ( node <S2SV_ModStart> - EINVAL ; mutex_lock ( & cluster -> cl_nodes_mutex ) ; <S2SV_ModStart> cl_nodes_lock ) ; mutex_unlock ( & cluster -> cl_nodes_mutex ) ; <S2SV_ModStart> ) ; if ( unlikely ( test_and_set_bit ( O2NM_NODE_ATTR_NUM, & node -> nd_set_attributes ) ) ) { mutex_unlock ( & cluster -> cl_nodes_mutex ) ; cluster -> cl_nodes [ tmp ] = node ; node -> nd_num = tmp ; set_bit ( tmp, cluster -> cl_nodes_bitmap ) ; } mutex_unlock ( & cluster -> cl_nodes_mutex ) ;",0
1023,"<S2SV_ModStart> flags ) ; <S2SV_ModEnd> v4l2_buf = to_vb2_v4l2_buffer <S2SV_ModStart> v4l2_buf ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank>",0
1024,"<S2SV_ModStart> size ) { size_t res ; if ( size > ZMALLOC_MAX_SIZE ) { zmalloc_oom_handler ( ZMALLOC_MAX_SIZE ) ; return NULL ; } res = calloc ( 1, size + PREFIX_SIZE ) ; if (! res ) zmalloc_oom_handler ( ZMALLOC_MAX_SIZE ) ; if (! res ) zmalloc_oom_handler ( ZMALLOC_MAX_SIZE ) ; if (! res ) zmalloc_oom_handler ( ZMALLOC_MAX_SIZE ) ; if (! zmalloc_oom_handler ( ZMALLOC_MAX_SIZE ) ) { zmalloc_oom_handler ( ZMALLOC_MAX_SIZE ) ; zmalloc_oom_handler ( ZMALLOC_MAX_SIZE ) ; update_zmalloc_stat_alloc ( ZMALLOC_MAX_SIZE ) ; return NULL ; }",0
1025,"<S2SV_ModStart> ssize_t count ; if ( psf -> file. filedes == NULL ) psf_log_syserr ( psf, ""unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> descriptor: <S2SV_blank> %s\\n"", __func__ ) ; else psf_log_syserr ( psf, ""unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> descriptor: <S2SV_blank> %s\\n"", __func__, ( ( const char * ) ptr ) + total, items ) ; if ( psf -> file. filedes == NULL ) psf_log_syserr ( psf, ""unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> descriptor: <S2SV_blank> %s\\n"", __func__, ( ( const char * ) ptr ) + total, items ) ; else psf_log_syserr ( psf, ""unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> descriptor: <S2SV_blank> %s\\n"", __func__, ( ( const char * ) ptr ) + total, items ) ; if ( psf -> file. filedes == NULL ) psf_log_syserr ( psf, ""unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> descriptor: <S2SV_blank> %s\\n"", __func__, ( ( const char * ) ptr ) + total, items ) ;",0
1026,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
1027,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { memset ( adhoc_start -> ssid, 0, sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_",0
1028,"<S2SV_ModStart> ) ) { xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED, XFS_RANDOM_ATTR_SHORTFORM ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED, XFS_RANDOM_ATTR_SHORTFORM ) ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_",0
1029,"<S2SV_ModStart> r ) { return ( ASN1_item_verify ( ASN1_ITEM_rptr ( X509_CINF ), a -> sig_alg, a -> signature, a -> cert_info, r ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
1030,"<S2SV_ModStart> 0 ) ; hrtimer_set_expires ( & stime -> hrt, ns_to_ktime ( t -> sticks * resolution ), HRTIMER_MODE_REL ) ;",0
1031,"<S2SV_ModStart> ; struct l2cap_conf_rfc <S2SV_ModEnd> rfc = { <S2SV_ModStart>. mode = L2CAP_MODE_BASIC <S2SV_ModEnd> ; void * <S2SV_ModStart> = L2CAP_MODE_ERTM ; rfc. txwin_size = L2CAP_DEFAULT_TX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) ; break ; } req -> dcid = cpu_to_le16 ( pi -> dcid ) ; req -> flags = cpu_to_le16 ( 0 <S2SV_ModEnd> ) ; return",0
1032,"<S2SV_ModStart> r ) { if ( r < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = recv ( sock_fd, buf, r, MSG_WAITALL ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } buf += ret ; r -= ret ;",0
1033,"<S2SV_ModStart> = 0 ; if ( s -> chunksize < 0 ) { av_log ( h, AV_LOG_ERROR, ""invalid <S2SV_blank> chunk <S2SV_blank> size <S2SV_blank> (%d) <S2SV_blank> for <S2SV_blank> HTTP <S2SV_blank> request\\n"", s -> chunksize ) ; return - 1 ; }",0
1034,<S2SV_ModStart> u1_nal_ref_idc ) ; if ( ( u1_nal_ref_idc < 0 ) || ( ( u1_nal_ref_idc > MAX_NAL_REF_IDC ) || ( u1_nal_ref_idc > MAX_NAL_REF_IDC ) || ( ( u1_nal_ref_idc < 0 ) || ( u1_nal_ref_idc > MAX_NAL_REF_IDC ) ) || ( ( u1_nal_ref_idc > MAX_NAL_REF_IDC ) || ( u1_nal_ref_idc > MAX_NAL_REF_IDC ) || ( u1_nal_ref_idc > MAX_NAL_REF_IDC ) || ( u1_nal_ref_idc < 0 ) || ( u1_nal_ref_idc > MAX_NAL_REF_IDC ) || ( u1_nal_ref_idc > MAX_NAL_REF_IDC ) || ( u1_nal,0
1035,"<S2SV_ModStart>!= 0 ) { mprAddItem ( app -> formData, sclone ( pair ) ) ; pair = stok ( 0, ""&"", & tok ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1036,"<S2SV_ModStart> = buf ; } if ( seed && slen ) err = crypto_rng_setseed ( tfm, seed, slen ) ; if ( err < 0 ) { err = - EINVAL ; kfree ( buf ) ; return err ; }",0
1037,<S2SV_ModStart> = uid ; <S2SV_ModEnd> spin_lock_irq ( & <S2SV_ModStart> new -> count = 1 <S2SV_ModEnd> ; spin_unlock_irq (,0
1038,<S2SV_ModStart> ; } if ( msg_sys. msg_namelen > msg_sys. msg_namelen ) { msg_sys. msg_namelen = msg_sys. msg_namelen - msg_sys. msg_namelen ; msg_sys. msg_flags |= MSG_TRUNC ; msg_sys. msg_namelen = msg_sys. msg_namelen - msg_sys. msg_namelen ; } if ( msg_sys. msg_flags & MSG_TRUNC ) { msg_sys. msg_flags |= MSG_TRUNC ; msg_sys. msg_namelen = msg_sys. msg_namelen - msg_sys. msg_namelen ; msg_sys. msg_flags |= MSG_TRUNC ; msg_sys. msg_namelen = msg_sys. msg_namelen - msg_sys. msg_namelen ; } if ( msg_sys. msg_flags & MSG_TRUNC ) { msg_sys. msg_flags |= MSG_TRUNC ; msg_sys. msg_flags |= MSG_TRUNC ; },0
1039,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1040,"<S2SV_ModStart> void prefetch_table ( const tran_low_t <S2SV_ModEnd> * tab, <S2SV_ModStart> size_t len ) { <S2SV_ModEnd> for ( i <S2SV_ModStart> 8 * 32 ) { ( void ) tab [ i + 0 * 32 ] ; ( void ) tab [ i + 1 * 32 ] ; ( void ) tab [ i + 2 * 32 ] ; ( void ) tab [ i + 3 * 32 ] ; ( void ) tab [ i + 4 * 32 ] ; ( void ) tab [ i + 5 * 32 ] ; ( void ) tab [ i + 6 * 32 ] ; ( void ) tab [ i + 8 * 32 ] ; ( void ) tab [ i + 9 * 32 ] ; ( void ) tab [ i + 10 * 32 ] ; ( void ) tab [ i + 11 * 32 ] ; ( void ) tab [ i + 12 * 32 ] ; ( void ) tab [ i + 13 * 32 ] ; ( void ) tab [ 13 * 32 ] ; ( void ) tab [ 14 * 32 ] ; ( void ) tab [ 15 * 32 ] ; ( void ) tab [ 15 * 32 ] ; ( void ) tab [ 15 * 32 ] ; ( void ) tab [ 15 * 32 ] ; ( void ) tab [",0
1041,"<S2SV_ModStart> goto out ; } if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank> %d, <S2SV_blank> depth: <S2SV_blank> %d, <S2SV_blank> path: <S2SV_blank> %d"", inode -> i_ino, path [ depth ]. p_ext -> p_idx, depth ) ; err = - EIO ; goto out2 ; } if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank> %d, <S2SV_blank> depth: <S2SV_blank> %d, <S2SV_blank> path: <S2SV_blank> %d"", inode -> i_ino, path [ depth ]. p_ext -> p_depth, path [ depth ]. p_depth, depth ) ; err = - EIO ; goto out ; } if ( path [ depth ]. p_extent == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank>",0
1042,"<S2SV_ModStart> * open_stateid, fmode_t fmode <S2SV_ModStart> = 0 ; fmode_t fmode = fmode & ( FMODE_READ | FMODE_WRITE ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) <S2SV_ModEnd> ) ; rcu_read_lock <S2SV_ModStart> deleg_cur ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, open_flags ) <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, open_flags ) <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, open_flags ) <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, open_flags ) <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, open_flags ) <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, open_flags ) <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, open_flags )",0
1043,"<S2SV_ModStart> == MagickFalse ) status = SetImageExtent ( image, image -> width, image -> height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> width, image -> height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } InheritException ( exception, & image -> exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> width, image -> height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } InheritException ( exception, & image -> exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader",0
1044,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1045,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> oidc_scrub_headers ( request_rec,0
1046,"<S2SV_ModStart> int * out_rate_sum, int64_t * out_dist_sum <S2SV_ModEnd> ) { int <S2SV_ModStart>. vf ( p -> src. buf, p -> src. stride, pd -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( i == 0 ) x -> pred_sse [ ref ] = sse ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ; rate_sum += rate ; dist_sum += dist ; } else { int64_t rate ; int64_t dist ; int64_t square_error ; int quantizer = ( pd -> dequant [ 1 ] >> 3 ) ; if ( quantizer < 120 ) rate = ( 280 - quantizer ) >> 8 ; else rate = 0 ; dist = ( 280 - quantizer ) >> 8 ; else rate = 0 ; dist = ( 280 - quantizer ) >> 8 ;",0
1047,"<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_trans_huge_wr ( * pmd ) || <S2SV_ModEnd> pmd_none_or_clear_bad ( pmd <S2SV_ModStart> pmd ) ) { if ( pmd_none_or_trans_huge_wr ( * pmd ) ) mincore_unmapped_range ( vma, addr, next, vec ) ; else mincore_pte_range ( vma, pmd, addr, next, vec ) ; vec += ( next - addr ) >> PAGE_SHIFT ; continue ; } } if ( pmd_none_or_trans_huge_wr ( * pmd ) ) { if ( mincore_huge_pmd ( pmd, addr, next, vec ) ) mincore_unmapped_range ( vma, addr, next, vec ) ; else mincore_pte_range ( vma, pmd, addr, next, vec ) ; vec += ( next - addr ) >> PAGE_SHIFT ; continue ; }",0
1048,"<S2SV_ModStart> ; } if ( li < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size!"", li ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%u"", * pptr ++ ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%u"", * pptr ++ ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%u"", * pptr ++ ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%u"", * pptr ++ ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%u"", * pptr ++ ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%u"", * pptr ++ ) ) ; while ( pptr < ndo ->",0
1049,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( <S2SV_ModStart>'<S2SV_blank>') || ( index >= PAM_MAX_RESP_SIZE ) ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ),0
1050,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { # if CONFIG_VP9_HIGHBITDEPTH if ( seg -> flags & VPX_HIGHBITDEPTH ) return vpx_read_tree ( r, vpx_segment_tree, seg -> tree_probs ) ; # else return vpx_read_tree ( r, vpx_segment_tree, seg -> tree_probs ) ; # endif <S2SV_ModStart> return vpx_read_tree ( r, vpx_segment_tree, seg -> tree_probs ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( seg -> flags & VPX_HIGHBITDEPTH ) return vpx_read_tree ( r, vpx_segment_tree, seg -> tree_probs ) ; # else return vpx_read_tree ( r, vpx_segment_tree, seg -> tree_probs ) ; # endif",0
1051,<S2SV_ModStart> uint32_t backup_handle ; struct drm_vmw_surface_create_args * req = & arg -> req ; if ( unlikely ( req -> mip_levels > DRM_VMW_MAX_MIP_LEVELS ) ) return - EINVAL ; if ( unlikely ( req -> array_size > PAGE_SIZE ) ) return - EINVAL ; if ( unlikely ( req -> base_size > PAGE_SIZE ) ) return - EINVAL ; if ( unlikely ( req -> mip_levels > DRM_VMW_MAX_MIP_LEVELS ) ) return - EINVAL ; if ( unlikely ( req -> mip_levels > DRM_VMW_MAX_MIP_LEVELS ) return - EINVAL ; if ( unlikely ( req -> mip_levels > DRM_VMW_MAX_MIP_LEVELS ) ) vmw_user_surface_size = ttm_round_pot ( sizeof ( * user_srf ) ) + 128 ; if ( unlikely ( req -> mip_levels > DRM_VMW_MAX_MIP_LEVELS ) ) vmw_user_surface_size,0
1052,<S2SV_ModStart> <S2SV_null> static struct desc_struct <S2SV_ModEnd> * get_desc ( <S2SV_ModStart> sel ) { <S2SV_ModEnd> struct ldt_struct * <S2SV_ModStart> ldt = current -> active_mm -> context. ldt ; mutex_lock ( & current -> active_mm -> context. lock <S2SV_ModEnd> ) ; if <S2SV_ModStart> ldt && sel < current -> active_mm -> context. nr_entries ) desc = & ldt -> entries [ sel ] ; mutex_unlock ( & current -> active_mm -> context. lock <S2SV_ModEnd> ) ; return <S2SV_ModStart> NULL ; } # endif native_store_gdt ( & gdt_desc ) ; desc_base = sel & ~ ( SEGMENT_RPL_MASK | SEGMENT_TI_MASK ) ; if ( desc_base > gdt_desc. size ) return NULL ; desc_base = sel & ~ ( SEGMENT_RPL_MASK | SEGMENT_TI_MASK ) ; if ( desc_base > gdt_desc. size ) return NULL ; if ( desc_base > gdt_desc. size ) return NULL ; desc_base = sel & ~ ( SEGMENT_RPL_MASK | SEGMENT_TI_MASK ) ; if ( desc_,0
1053,"<S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_top ; ++ i ) { memcpy ( dst_ptr2, src_ptr2, linesize ) ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_right ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_left ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_right ; ++ i ) { memcpy ( dst_ptr2, src_ptr2, linesize ) ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_left ; ++ i ) {",0
1054,<S2SV_ModStart> struct sctp_sockaddr_entry * laddr = NULL <S2SV_ModEnd> ; union sctp_addr <S2SV_ModStart> ; __u8 matchlen <S2SV_ModEnd> ; __u8 bmatchlen <S2SV_ModStart> ) ; } laddr = & t -> ipaddr ; baddr = & t -> ipaddr ; fl6 -> daddr = daddr -> v6. sin6_addr ; fl6 -> fl6_dport = daddr -> v6. sin6_port ; fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_oif = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6,0
1055,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1056,"<S2SV_ModStart> buf2 = smb_fdata ( ndo, buf, fmt, maxbuf, unicodestr ) ; if ( buf2 == NULL ) return ( NULL ) ; <S2SV_ModStart> buf2 = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf2 == NULL ) return ( NULL ) ; if ( p == NULL ) { return ( buf ) ; } strncpy ( s, fmt, p - fmt + 1 ) ; s [ p - fmt ] = '\\0' ; fmt = p + 1 ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( p == NULL ) return ( buf ) ; s [ p - fmt ] = '\\0' ; fmt = p + 1 ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( p == NULL ) return ( buf ) ; s [ p - fmt ] = '\\0' ; fmt = p + 1 ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if",0
1057,"<S2SV_ModStart> ; if ( gsm_protocol_timeout_is_zero ( client -> priv -> protocol_timeout ) ) { g_source_remove ( client -> priv -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; } else if ( gsm_protocol_timeout_is_zero ( client -> priv -> protocol_timeout ) ) { g_source_remove ( client -> priv -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; } g_debug ( ""GsmXSMPClient: <S2SV_blank> Initializing <S2SV_blank> client <S2SV_blank> %s"", client -> priv -> description ) ; client -> priv -> protocol_timeout = 0 ; * mask_ret |= SmsCloseConnectionProcMask ; callbacks_ret -> close_connection. callback = close_connection_callback ; callbacks_ret -> close_connection. manager_data = client ; * mask_ret |= SmsCloseConnectionProcMask ; callbacks_ret -> close_connection. manager_data = client ; * mask_ret |= SmsSetPropertiesProcMask ; callbacks_ret -> set_properties. callback = set_properties_callback ; callbacks_ret -> set_properties. manager_data = client ; * mask_ret |=",0
1058,"<S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> ++ io ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ) ) ) ; ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ) ) ) ; ND_PRINT ( ( ndo,",0
1059,"<S2SV_ModStart> } n = ksz8851ReadReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n < ( length + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } netBufferRead ( context -> txBuffer, buffer, offset, length ) ; header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_TXQCR, TXQCR_METFE ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } netBufferRead ( context -> txBuffer, buffer, offset, length ) ; header. controlWord = htole16 ( TX_CTRL_TXIC | (",0
1060,"<S2SV_ModStart> NULL ) ; rb_ary_push ( self, rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_key ) ) ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ) ) ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb",0
1061,"<S2SV_ModStart> assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> slot <S2SV_blank> %d\\n"", i ) ; edit -> dead_leaf = node -> slots [ i ] ; pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [replace]\\n"", __func__ ) ; return true ; } if ( assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""insert <S2SV_blank> in <S2SV_blank> free <S2SV_blank> slot <S2SV_blank> %d\\n"", free_slot ) ; edit -> dead_leaf = node -> slots [ free_slot ] ; edit -> adjust_count_on = node ; pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [insert]\\n"", __func__ ) ; return true ; }",0
1062,<S2SV_ModStart> udpport = 11211 ; settings. ssl_verify_peer = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_pass = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_name = NULL ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_pass = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_pass = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_pass,0
1063,<S2SV_ModStart> ; # endif <S2SV_ModEnd> if ( domains_to_finalize,0
1064,"<S2SV_ModStart>, x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; x_9 = * x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_a = * x0 ++ ; x_b = * x0 ++ ; x_c = * x0 ++ ; x_d = * x0 ++ ; x_e = * x0 ++ ; x_e = * x0 ++ ; x_7 = * x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_8 = * x0 ++ ; x_a = * x0 ++ ; x_b = * x",0
1065,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
1066,"<S2SV_ModStart> ; if ( pmd_trans_huge <S2SV_ModEnd> ( * pmd <S2SV_ModStart> * pmd ) ) { if ( pmd_none_or_clear_bad ( pmd ) ) continue ; ret = unuse_pte_range ( vma, pmd, addr, next, entry, page ) ; if ( ret ) return ret ; } <S2SV_ModStart> * pmd ) ) { if ( pmd_none_or_clear_bad ( pmd ) ) continue ; ret = unuse_pte_range ( vma, pmd, addr, next, entry, page ) ; if ( ret ) return ret ; } if ( pmd_none_or_clear_bad ( pmd ) ) continue ; if ( pmd_none_or_clear_bad ( pmd ) ) continue ; if ( pmd_none_or_clear_bad ( pmd ) ) continue ; if ( pmd_none_or_clear_bad ( pmd ) ) continue ; ret = unuse_pte_range ( vma, pmd, addr, next, entry, page ) ; if ( ret ) return ret ; }",0
1067,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1068,"<S2SV_ModStart> case 'i' : esil = r_anal_esil_new ( stacksize, <S2SV_ModEnd> romem, stats <S2SV_ModStart> stats ) ; if ( esil ) { r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; r_anal_esil_set_pc ( esil, core -> offset ) ; } break ; case 'o' : esil = r_anal_esil_new ( stacksize, <S2SV_ModEnd> romem, stats <S2SV_ModStart> stats ) ; if ( esil ) { r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; r_anal_esil_to_reil_",0
1069,"<S2SV_ModStart> int width, height, target_width, target_height ; if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 3 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank>",0
1070,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; unsigned short ioaddr = chip -> io + HP_RXL ; <S2SV_ModStart> JQS_wTail )!= readw ( chip -> DSPQ + JQS_wHead ) ) { u16 wTmp ; snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wHead ) ) ) ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wSize ) ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSP",0
1071,"<S2SV_ModStart> OPCODE_DESC * opcode_desc ; ut16 ins = ( buf [ 1 ] << 8 ) | buf [ 0 ] <S2SV_ModEnd> ; int fail <S2SV_ModStart> INVALID_OP : if ( opcode_desc -> cycles <= 0 ) { opcode_desc -> cycles = 2 ; } op -> type = R_ANAL_OP_FAMILY_UNKNOWN ; op -> family = R_ANAL_OP_FAMILY_UNKNOWN ; op -> type = R_ANAL_OP_TYPE_UNK ; op -> addr = addr ; r_strbuf_setf ( & op -> esil, """" ) ; opcode_desc -> handler ( anal, op, buf, len, & fail, & cpu ) ; if ( fail ) { r_strbuf_setf ( & op -> esil, """" ) ; opcode_desc -> cycles = 2 ; op -> type = R_ANAL_OP_TYPE_UNK ; op -> type = R_ANAL_OP_TYPE_UNK ; op -> addr = addr ; r_strbuf_setf ( & op -> esil, """" ) ; opcode_desc -> handler ( anal, op, buf, len, & fail, & cpu ) ;",0
1072,<S2SV_ModStart> ACPI_STATUS status ; <S2SV_ModEnd> struct acpi_operand_object * <S2SV_ModStart> * prev ; <S2SV_ModEnd> next = acpi_gbl_module_code_list <S2SV_ModStart> * next ; if ( next ) { prev = next ; next = next -> method. mutex ; prev -> method. mutex = NULL ; acpi_ut_remove_reference ( prev ) ; } <S2SV_ModStart> } # endif acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node ) ; status = acpi_ut_acquire_mutex ( ACPI_MTX_NAMESPACE ) ; if ( ACPI_FAILURE ( status ) ) { return_VOID ; } acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node ) ; ( void ) acpi_ut_release_mutex ( ACPI_MTX_NAMESPACE ) ; ( void ) acpi_ut_release_mutex ( ACPI_MTX_NAMESPACE ) ; status = acpi_ut_acquire_mutex ( ACPI_MTX_NAMESPACE ) ; if ( ACPI_FAILURE ( status ) { return_VOID ; } acpi_ns_delete_namespace_subtree ( ac,0
1073,<S2SV_ModStart> { # ifdef GPAC_MEMORY_TRACKING if ( mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerBackTrace || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == <S2SV_ModStart> || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerBackTrace || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem,0
1074,"<S2SV_ModStart> num_fields ) { PyObject * s, * l ; int result ; _Py_IDENTIFIER ( _attributes ) ; PyObject * s, * l = PyTuple_New ( num_fields ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } Py_DECREF ( l ) ; for ( i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } PyTuple_SET_ITEM ( l, i, s ) ; } result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; Py_DECREF ( l ) ; return result <S2SV_ModEnd> ; } <S2SV_null>",0
1075,"<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; vpx_codec_enc_cfg_t * <S2SV_ModStart> ( 1, <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> struct vpx_codec_alg_priv ) ) ; if (! ctx -> config ) { return VPX_CODEC_MEM_ERROR ; } ctx -> priv = calloc ( 1, sizeof ( struct vpx_codec_alg_priv ) ) ; } cfg = & ctx -> config. enc ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage!= cfg -> g_usage ; i ++ ) { priv -> cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg. pkt_list = & priv -> pkt_list. head ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h * 3 / 2 * 2 ; if ( priv -> cx_data_sz < 32768 ) priv -> cx_data_sz =",0
1076,"<S2SV_ModStart> { error = xfs_da_shrink_inode <S2SV_ModEnd> ( args, <S2SV_ModStart> bp ) ; if ( error ) goto out ; xfs_iunlock ( dp, XFS_ILOCK_EXCL ) ; xfs_iunlock ( dp, XFS_ILOCK_EXCL ) ; xfs_iunlock ( dp, XFS_ILOCK_EXCL ) ; xfs_iunlock ( dp, XFS_ILOCK_EXCL ) ; xfs_iunlock ( dp, XFS_ILOCK_EXCL ) ; xfs_iunlock ( dp, XFS_ILOCK_EXCL ) ; xfs_iunlock ( dp, XFS_ILOCK_EXCL ) ; xfs_iunlock ( dp, XFS_ILOCK_EXCL ) ; xfs_iunlock ( dp, XFS_ILOCK_EXCL ) ; xfs_iunlock ( dp, XFS_ILOCK_EXCL ) ; xfs_iunlock ( dp, XFS_ILOCK_EXCL ) ; xfs_iunlock ( dp, XFS_ILOCK_EXCL ) ; xfs_iunlock ( dp, X",0
1077,"<S2SV_ModStart> c ++ ; } if ( ( ret = s -> decode ( gb, rc, cumfr, cnt_c, totfr ) ) < 0 ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; totfr += step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 16 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; pixel -> lookup [ i ] = sum ; totfr += nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) { unsigned sum =",0
1078,"<S2SV_ModStart> err ; err = nla_parse_nested ( attrs, TIPC_NLA_SOCK_MAX, & sock [ TIPC_NLA_SOCK ], tipc_nl_sock_policy ) ; if ( err ) return err ; if (! sock [ TIPC_NLA_SOCK_REF ] ) return - EINVAL ; if (! sock [ TIPC_NLA_SOCK_REF ] ) return - EINVAL ; tsk_portid = nla_get_u32 ( attrs [ TIPC_NLA_SOCK ] ) ; if (! sock [ TIPC_NLA_SOCK_REF ] ) return - EINVAL ; if (! sock [ TIPC_NLA_SOCK_REF ] ) return - EINVAL ; if (! sock [ TIPC_NLA_SOCK_REF ] ) return - EINVAL ; lock_sock ( & tsk -> sk ) ; err = __tipc_nl_list_sk_publ ( skb, cb, tsk, & last_publ, & done ) ; if (! err )",0
1079,<S2SV_ModStart> { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> (! ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ ctx -> fragments. count ] = data ; ctx -> fragments. sizes [ ctx -> fragments. count ] = data_sz ; ctx -> fragments. count ++ ; if ( ctx -> fragments. count > ( 1 << EIGHT_PARTITION ) + 1 ) { ctx -> fragments. count = 0 ; * res = VPX_CODEC_INVALID_PARAM ; return - 1 ; } return 0 ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count ++ ; if ( ctx -> fragments. count > ( 1 << EIGHT_PARTITION ) + 1 ) { ctx -> fragments. count = 0 ; * res = VPX_CODEC_INVALID_PARAM ; return - 1 ;,0
1080,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1081,"<S2SV_ModStart> ; length = le16_to_cpu ( cap -> bLength ) ; if ( total_len < length ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor\\n"" ) ; if ( ret >= 0 ) ret = - ENOMSG ; goto err ; } dev -> bos -> desc = ( struct usb_bos_descriptor * ) buffer ; ret = usb_get_descriptor ( dev, USB_DT_BOS, 0, buffer, total_len ) ; if ( ret < total_len ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor\\n"" ) ; if ( ret >= 0 ) ret = - ENOMSG ; goto err ; } ret = - ENOMSG ; goto err ; } dev -> bos -> desc = ( struct usb_bos_descriptor * ) buffer ; ret = usb_get_descriptor ( dev, USB_DT_BOS, 0, buffer, total_len ) ; if ( ret < total_len ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor\\n"" ) ; if ( ret >= 0 ) ret = - ENOM",0
1082,<S2SV_ModStart> task_struct * task <S2SV_ModEnd> ; file_sb_list_del (,0
1083,"<S2SV_ModStart> EIO ; } if ( udf_read_ext_entry ( inode, & efe -> icbTag, & link_count ) < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!efe\\n"", inode -> i_ino ) ; goto out ; } if ( udf_read_ext_entry ( inode, & efe -> icbTag, & link_count ) < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino ) ; goto out ; } if ( udf_read_ext_entry ( inode, & efe -> icbTag, & link_count ) < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino ) ; goto out ; } if ( udf_read_ext_entry ( inode, & efe -> icbTag, & link_count ) < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d",0
1084,"<S2SV_ModStart> data ) { uint16_t status ; <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & ENC28J60_MISTAT_BUSY <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & ENC28J60_MISTAT_BUSY <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
1085,<S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { char * ptr ; int n = 0 ; ptr = fmt ; while ( * ptr!= '\\0' ) if ( * ptr ++ == '%' ) { if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } else { if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if,0
1086,<S2SV_ModStart> sk_forward_alloc ) ; rcu_read_lock ( ) ; <S2SV_ModStart> inet -> opt ) ; rcu_read_unlock ( ) ;,0
1087,<S2SV_ModStart> ) ) { ND_TCHECK ( * bp ) ; <S2SV_ModStart>! saw_digit ) { ND_TCHECK ( * bp ) ; <S2SV_ModStart>! saw_digit ) { ND_TCHECK ( * bp ) ; <S2SV_ModStart>! saw_digit ) { ND_TCHECK ( * bp ) ; <S2SV_ModStart>! saw_digit ) { ND_TCHECK ( * bp ) ; <S2SV_ModStart>! saw_digit ) { ND_TCHECK ( * bp ) ; goto invalid ; break ; } c -= '0' ; if ( result > ( INT_MAX / 10 ) ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX,0
1088,<S2SV_ModStart> ; name_loc -> namelen = cpu_to_be16 ( XFS_LBSIZE ( args -> dp -> i_mount ) ) ; name_rmt -> namelen = cpu_to_be16 ( XFS_LBSIZE ( args -> dp -> i_mount ) ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) ; name_rmt -> namelen = cpu_to_be16 ( XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args ->,0
1089,"<S2SV_ModStart> DefragInOrderSimpleTest ) ; UtRegisterTest ( ""DefragReverseSimpleTest"", DefragReverseSimpleTest ) ; UtRegisterTest ( ""DefragSturgesNovakBsdTest"", DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""DefragSturgesNovakLinuxTest"", DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""DefragSturgesNovakWindowsTest"", DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""DefragIPv4TooLargeTest"", DefragIPv4TooLargeTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6Def",0
1090,<S2SV_ModStart> ; if (! object_data ) { sc_cardctl_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data,0
1091,"<S2SV_ModStart> ; if ( bin -> shstrtab && shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( bin -> shstrtab && shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( bin -> shstrtab && shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( bin -> shstrtab && shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( bin -> shstrtab && shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( """,0
1092,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> separator!= NULL ) { * separator = '\\0' ; name = strTrimWhitespace ( token ) ; value = strTrimWhitespace ( value ) ; n = osStrlen ( value ) ; if ( n > 0 && value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( n > 0 && value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( n > 0 && value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( n > 0 && value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ n - 1 ] == \'\\""\' ) value [ n - 1 ]",0
1093,"<S2SV_ModStart> u8 label_len ; if ( j >= length ) goto err ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > end ) return - 1 ; if ( cp >= end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; cp += label_len ; j += label_len ; } if ( j >= length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > end ) return - 1 ; if ( cp >= end ) return - 1 ; if ( cp >= end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; cp += label_len ; j += label_len",0
1094,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; if (! tmp ) { TIFFErrorExt ( tif -> tif_err, ""MemoryAllocationFailed"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! tmp ) { TIFFErrorExt ( tif -> tif_err, ""MemoryAllocationFailed"" ) ; return 0 ; } <S2SV_ModEnd> while ( count <S2SV_ModStart> stride ) ) { REPEAT4 ( stride, cp [ 0 ] ) ; cp ++ ) count -= stride ; } _TIFFmemcpy ( tmp, cp0, cc ) ; cp = ( uint8 * ) cp0 ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { # if WORDS_BIGENDIAN cp [ bps * count + byte ] = tmp [ byte * wc + count ] ; # endif } } _TIFFfree ( tmp ) ; tmp = ( uint8 * ) _TIFFmalloc ( cc ) ; assert ( ( cc % ( bps * stride ) ) == 0 ) ; if (! tmp ) { TIFFErrorExt (",0
1095,"<S2SV_ModStart> ) ) { if ( vma -> vm_ops && vma -> vm_ops -> fault ) return vma -> vm_ops -> fault ( mm, vma, address, pte, pmd, flags, entry ) ; else return do_anonymous_page ( mm, vma, address, pte, pmd, flags ) ; } if ( pte_protnone ( entry ) ) return do_numa_page ( mm, vma, address, pte, pmd, flags, entry ) ; ptl = pte_lockptr ( mm, pmd ) ; if ( unlikely (! pte_same ( * pte, entry ) ) ) goto unlock ; if ( flags & FAULT_FLAG_EXEC ) { if (! pte_write ( entry ) ) return do_wp_page ( mm, vma, vma, address, pte, pmd, ptl, entry ) ; entry = pte_mkdirty ( entry ) ; } entry = pte_mkyoung ( entry ) ; if ( ptep_set_access_flags ( vma, address, pte, entry, flags & FAULT_FLAG",0
1096,"<S2SV_ModStart> s ) { size_t alloc_size = <S2SV_ModEnd> strlen ( s <S2SV_ModStart> + 1 ) ; if ( alloc_size < 0 ) { pr_err ( ""pool_strdup(): <S2SV_blank> alloc_size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", alloc_size ) ; return NULL ; } size_t alloc_size = <S2SV_ModEnd> strlen ( s <S2SV_ModStart> + 1 ) ; if ( alloc_size < 0 ) { pr_err ( ""pool_strdup(): <S2SV_blank> alloc_size <S2SV_blank> exceeded"" ) ; return NULL ; } char * r = pool_alloc ( alloc_size ) ; if (! r ) { pr_err ( ""pool_strdup(): <S2SV_blank> alloc_size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", alloc_size ) ; return NULL ; } char * alloc_size = pool_alloc ( alloc_size ) ; if (! r ) { pr_err ( ""pool_strdup(): <S2SV_blank> alloc_size <S2SV_blank> exceeded"" ) ; return NULL ; } char * alloc_size = pool_alloc ( alloc_size ) ; if (! r ) { pr_err ( ""pool_strdup(): <S2SV_blank> alloc_size <S2SV_blank>",0
1097,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1098,"<S2SV_ModStart> ; next_line = strchr ( pos, '\\n' ) ; if (! next_line ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; pos = skip_spaces ( pos ) ; extent -> upper_first = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; next_line = strchr ( pos, '\\n' ) ; if (! next_line ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; pos = skip_spaces ( pos ) ; extent -> upper_first = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; pos = skip_spaces ( pos ) ; extent -> count = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ;",0
1099,"<S2SV_ModStart> if ( i >= <S2SV_ModEnd> da -> decls <S2SV_ModStart> da -> decls [ abbr_code - 1 ]. capacity || i >= da -> decls [ abbr_code - 1 ]. capacity ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> capacity <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } if ( i >= da -> decls [ abbr_code - 1 ]. capacity || i >= da -> decls [ abbr_code - 1 ]. capacity || i >= da -> decls [ abbr_code - 1 ]. capacity ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> capacity <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } if ( i >= da -> decls [ abbr_code - 1 ]. capacity || i >= da -> decls [ abbr_code - 1 ]. capacity || i >= da -> decls [ abbr_code - 1 ]. capacity || i >= da -> decls [ abbr_code - 1 ]. capacity ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> capacity <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length",0
1100,<S2SV_ModStart> b_go ) { if (! p_sys -> started ||! p_sys -> b_eos_pulled ) { p_sys -> b_eos_pulled = 1 ; schro_encoder_end_of_stream ( p_sys -> p_schro ) ; return NULL ; },0
1101,"<S2SV_ModStart> ; if ( bstrchr ( bfname. str, '\\0' ) >= 0 ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", fname ) ; break ; } char * entry = bstrto0 ( mf, bfname. str ) ; if (! mp_path_exists ( entry ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", entry ) ; break ; } char * entry = bstrto0 ( mf, entry ) ; if (! mp_path_exists ( entry ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", entry ) ; break ; } char * entry = bstrto0 ( mf, bfname. str ) ; if (! mp_path_exists ( entry ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", entry ) ; break ; } char * entry = bstrto0 ( mf, entry ) ; if (! mp_path_exists ( entry ) ) { mp_err ( log, """,0
1102,"<S2SV_ModStart> ) ) ; if ( length < payload_len ) ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> bytes <S2SV_blank> missing!"", length - payload_len ) ) ; if ( length < payload_len ) ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> bytes <S2SV_blank> missing!"", length - payload_len ) ) ; if ( length < payload_len ) ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> bytes <S2SV_blank> missing!"" ) ) ; if ( length < payload_len ) ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> bytes <S2SV_blank> missing!"", length - payload_len ) ) ; if ( length < payload_len ) ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> bytes <S2SV_blank> missing!"", length - payload_len ) ) ; if ( length < payload_len ) ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> bytes <S2SV_blank> missing!"" ) ) ; if ( length < payload_len ) ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> bytes <S2SV_blank> missing!"", length - payload_len ) ) ; if ( length",0
1103,"<S2SV_ModStart> 4 ) ; size_t num_properties = GETINT32 <S2SV_ModEnd> ( buf + <S2SV_ModStart> len ) ; if ( j >= ( a -> names [ i ]. len >> 1 ) ) { a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; } } else { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. data = CHECKED_XMALLOC ( unsigned char, a -> names [ i ]. len ) ; for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; j ++ ) a -> names [ i ]. data [ j",0
1104,"<S2SV_ModStart> EIO ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!efe\\n"", inode -> i_ino ) ; goto out ; }",0
1105,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1106,<S2SV_ModStart> sse ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
1107,"<S2SV_ModStart> ( ) ; strcpy <S2SV_ModEnd> ( t1_buf_array,",0
1108,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; vpx_pbi_t * pbi = ctx -> pbi ; vpx_ref_frame_t * data = va_arg ( args, vp9_ref_frame_t * ) ; YV12_BUFFER_CONFIG * fb ; yuvconfig2image ( & data -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1109,"<S2SV_ModStart> ) ; ops -> get_efer ( ctxt, MSR_EFER, & efer ) ; ops -> get_msr ( ctxt, MSR_STAR, & msr_data ) ; msr_data >>= 32 ; cs_sel = ( u16 ) ( msr_data & 0xfffc ) ; ss_sel = ( u16 ) ( msr_data & 0xfffc ) ; if ( efer & EFER_LMA ) { cs. d = 0 ; cs. l = 1 ; } ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ctxt -> regs [ VCPU_REGS_RCX ] = ctxt -> _eip ; if ( efer & EFER_LMA ) { ops -> get_msr ( ctxt, MSR_LSTAR, & msr_data ) ; ctxt -> _eip = msr_data ; ops -> get_msr ( ctxt, MSR_SYSCALL_MASK, & msr_data",0
1110,"<S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOS <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
1111,"<S2SV_ModStart> ) == 1 && TYPE ( CHILD ( n, 0 ) ) == testlist ) expr1 = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; if (! expr1 ) return NULL ; ch = CHILD ( n, 2 ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; switch ( expr1 -> kind ) { case Name_kind : case Attribute_kind : case Subscript_kind : break ; default : ast_error ( c, ch, ""illegal <S2SV_blank> expression <S2SV_blank> for <S2SV_blank> augmented <S2SV_blank> assignment"" ) ; return NULL ; } ch = CHILD ( n, 2 ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; switch ( expr1 -> kind ) { case Name_kind : case Attribute_kind : case Subscript_kind : break ; default : ast_error ( c, ch, ""illegal <S2SV_blank> expression <S2SV_blank> for <S2SV_blank> augmented <S2SV_blank> assignment"" ) ; return NULL ; } ch = CHILD ( n, 2 ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; switch ( expr1 ->",0
1112,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> YV12_BUFFER_CONFIG * mc_running_avg <S2SV_ModStart> char * mc_avg_y = mc_running_avg -> y_buffer + y_offset ; int mc_avg_y_stride = mc_running_avg -> y_stride ; unsigned char * running_avg_y = running_avg -> y_buffer <S2SV_ModEnd> + y_offset ; <S2SV_ModStart> char * running_avg_y = running_avg -> y_buffer <S2SV_ModEnd> + y_offset ; <S2SV_ModStart> int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; ++ i ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = mc_running_avg_y [ c ] - sig [ c ] ; absdiff = abs ( diff ) ; diff = mc_running_avg_y [ c ] - sig",0
1113,"<S2SV_ModStart> ; Ns_Log ( Ns_LogRequestDebug <S2SV_ModEnd>, ""honoring <S2SV_blank> 100-continue"" ) <S2SV_ModStart> ; Ns_Log ( Ns_LogRequestDebug <S2SV_ModEnd>, ""honoring <S2SV_blank> 100-continue"" ) <S2SV_ModStart> ; Ns_Log ( Ns_LogRequestDebug <S2SV_ModEnd>, ""honoring <S2SV_blank> 10 <S2SV_blank> entity-tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank> tool <S2SV_blank>",0
1114,"<S2SV_ModStart> ; int ret ; # if XTENSA_HAVE_COPROCESSORS coprocessor_release_all ( ti ) ; regs -> cp0 = xtregs -> cp0 ; ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ) ; ret |= __copy_from_user ( & regs -> xtregs_opt, & xtregs -> opt, sizeof ( xtregs -> opt ) ) ; ret |= __copy_from_user ( & ti -> xtregs_user, & xtregs -> user, sizeof ( xtregs -> user ) ) ; ret |= __copy_from_user ( & ti -> xtregs_opt, & xtregs -> opt, sizeof ( xtregs -> opt ) ) ; ret |= __copy_from_user ( & ti -> xtregs_user, & xtregs ->",0
1115,<S2SV_ModStart> size ) ; if ( ( flags & SOCKET_FLAG_IP_ADDRESS ) == 0 ) { message -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; message -> switchPort = queueItem -> ancillary. port ; message -> timestamp = queueItem -> ancillary. timestamp ; } else { message -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; message -> switchPort = queueItem -> ancillary. port ; message -> timestamp = queueItem -> ancillary. timestamp ; },0
1116,"<S2SV_ModStart> xop ) { struct se_subsystem_dev * se_dev <S2SV_ModEnd> ; if ( <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) se_dev = <S2SV_ModEnd> xop -> src_dev <S2SV_ModStart> -> dst_dev ; else se_dev = <S2SV_ModEnd> xop -> src_dev <S2SV_ModStart> -> src_dev ; pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p\\n"", remote_dev, & se_dev -> dev_group. cg_item ) ; target_undepend_item ( & se_dev -> dev_group. cg_item ) ; } else { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p\\n"", remote_dev, & se_dev -> dev_group. cg_item ) ; target_undepend_item ( & se_dev -> dev_group. cg_item ) ; }",0
1117,"<S2SV_ModStart> 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close_sock ; } val = 255 ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_MAX_MULTICAST_OPS, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MAX_MULTICAST_OPS."" ) ; err = - errno ; goto close_sock ; } val = 255 ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_RECVPKTINFO, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_RECVPKTINFO."" ) ; err = - errno ; goto close_sock ; } val = 255 ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_MULTICAST_HOPS, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, """,0
1118,"<S2SV_ModStart> int error ; struct mb2_cache * ext2_mb_cache = EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> get_bh ( new_bh ) ; mb2_cache_insert ( ext2_mb_cache <S2SV_ModEnd>, new_bh ) <S2SV_ModStart> new_bh ) ; mb2_cache_insert ( ext2_mb_cache <S2SV_ModEnd>, new_bh ) <S2SV_ModStart> new_bh ) ; mb2_cache_insert ( ext2_mb_cache <S2SV_ModEnd>, new_bh ) <S2SV_ModStart> ( new_bh ) ; mb2_cache_unpin ( ext2_mb_cache, inode ) ; mb2_cache_insert ( ext2_mb_cache <S2SV_ModEnd>, new_bh ) <S2SV_ModStart> cleanup ; } mb2_cache_insert ( ext2_mb_cache, new_bh ) ; mb2_cache_unpin ( ext2_mb_cache, inode ) ; mb2_cache_insert ( ext2_mb_cache, new_bh ) ; mb2_cache_unpin ( ext2_mb_cache, inode ) ; mb2_cache_unpin ( ext2_mb",0
1119,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1120,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> (! vp9_set_active_map <S2SV_ModEnd> ( ctx ->",0
1121,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; inode -> i_ctime = CURRENT_TIME ; mark_inode_dirty ( inode ) ; } break ; case ACL_TYPE_DEFAULT : ea_name = XATTR_NAME_POSIX_ACL_DEFAULT ; if ( acl ) { size = posix_acl_xattr_size ( acl -> a_count ) ; value = kmalloc ( size, GFP_KERNEL ) ; if (! value ) goto out ; rc = posix_acl_to_xattr ( & init_user_ns, acl, value, size ) ; if ( rc < 0 ) goto out ; rc = __jfs_setxattr ( tid, inode, ea_name, value, size, 0 ) ; if ( rc < 0 ) goto out ; <S2SV_ModEnd> rc = __jfs_setxattr",0
1122,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; DestroyImageList ( image ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; DestroyImageList ( image ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; DestroyImageList ( image ) ;",0
1123,"<S2SV_ModStart>. size, task_event -> task -> cpu, task_event -> task -> cpu, task_event -> task -> cpu, task_event -> task -> cpu, task_event -> cpu, task_event -> cpu, task_event -> cpu, task_event -> cpu, task_event -> cpu, task_event -> cpu, task_event -> cpu, task_event -> cpu, task_event -> cpu, task_event -> cpu, task_event -> cpu ) ; if ( ret ) goto out ; task_event -> event_id. pid = perf_event_pid ( event, task ) ; task_event -> event_id. ppid = perf_event_pid ( event, task ) ; task_event -> event_id. tid = perf_event_tid ( event, task ) ; task_event -> event_id. ptid = perf_event_tid ( event, current ) ; task_event -> event_id. ppid = perf_event_pid ( event, task ) ; task_event -> event_id. ppid = perf_event_pid ( event, task ) ; task_event -> event_id. tid = perf_event_",0
1124,"<S2SV_ModStart> ) { size_t <S2SV_ModEnd> maxlen = 3 <S2SV_ModStart> * len ; if ( len > MAX_URL_SIZE ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""URL <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", len ) ; efree ( state ) ; return NULL ; } if (! parse_path ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> path: <S2SV_blank> \'%s\'"", state -> ptr ) ; efree ( state ) ; return NULL ; } if (! parse_fragment ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> fragment: <S2SV_blank> \'%s\'"", state -> ptr ) ; efree ( state ) ; return NULL ; } if (! parse_fragment ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> fragment: <S2SV_blank> \'%s\'"", state -> ptr",0
1125,<S2SV_ModStart> SUCCESS ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ;,0
1126,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1127,"<S2SV_ModStart> AcquireQuantumMemory ( imsx, imsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( imsx, imsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if",0
1128,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * data = ( <S2SV_ModEnd> vpx_ref_frame_t * ) <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; if ( ctx -> frame_parallel_decode ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data2 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame",0
1129,"<S2SV_ModStart>. path ; memset ( pop3c -> mailbox, 0, sizeof ( pop3c -> mailbox ) ) ; <S2SV_ModStart> (! pop3c -> mailbox <S2SV_ModEnd> ) return CURLE_OUT_OF_MEMORY <S2SV_ModStart> ) return CURLE_OUT_OF_MEMORY <S2SV_ModEnd> ; return CURLE_OK",0
1130,"<S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length <S2SV_blank> %d\\n"", facilities_len ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length <S2SV_blank> %d\\n"", facilities_len ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length <S2SV_blank> %d\\n"", facilities_len ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length <S2SV_blank> %d\\n"", facilities_len ) ; return 0 ; }",0
1131,"<S2SV_ModStart>, ret ; if ( s -> nal_unit_type == HEVC_NAL_CRA_NUT && s -> last_eos == 1 ) { s -> ps. sps = ( HEVCSPS * ) s -> ps. sps_list [ sh -> pps_id ] -> data ; sh -> no_output_of_prior_pics_flag = 1 ; } else { s -> ps. sps = ( HEVCSPS * ) s -> ps. sps_list [ sh -> pps_id ] -> data ; sh -> no_output_of_prior_pics_flag = 1 ; } if ( s -> ps. sps!= ( HEVCSPS * ) s -> ps. sps_list [ sh -> pps_id ] -> data ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> changed <S2SV_blank> between <S2SV_blank> slices.\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> ps. sps!= ( HEVCSPS * ) s -> ps. sps_list [ sh -> pps_id ] -> data ) { av_",0
1132,"<S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, <S2SV_ModEnd> u1_num_mbsNby2, u1_is_idr_slice <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, <S2SV_ModEnd> u1_num_mbsNby2, u1_is_idr_slice <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_is_idr_slice, u1_is_idr_slice, u1_num_mbsNby2, u1_is_idr_slice, u1_is_idr_slice, u1_num_mbsNby2, u1_num_mbsNby2, u1_is_idr_slice, u1_is_idr_slice, u1_num_mbsNby2, u1_is_idr_slice, u1_is_idr_slice, u1_num_mbsNby2, u1_is_idr_slice, u1_is_idr_slice,",0
1133,"<S2SV_ModStart> ; UWORD32 u4_x_offset ; UWORD32 u4_y_offset ; const dec_mb_params_t * ps_dec_mb_params = & ps_dec_mb_params ; UWORD8 * pu1_out_p ; UWORD8 * pu1_pred ; WORD32 u4_pred_strd ; IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; if (! ps_dec -> e_pic_type ) { e_error = ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_NONE ; break ; } if (! ps_dec -> e_pic_type ) { e_error = ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_NONE ; break ; } if ( ps_dec -> e_pic_type == B_PIC ) { e_error = ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_NONE ; break ; } else { e_error = ( IMPEG2D_ERROR_CODES_T ) I",0
1134,"<S2SV_ModStart> VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> reference <S2SV_blank> frame"" ) ; } return cm -> error. error_code ; } if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> reference <S2SV_blank> frame"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ;",0
1135,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1136,<S2SV_ModStart> const TX_SIZE tx_size = get_uv_tx_size ( mbmi ) ; const int num_4x4_w = get_4x4_blocks_wide_lookup [ plane_bsize ] ; const int num_4x4_h = get_4x4_blocks_high_lookup [ plane_bsize ] ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd ->,0
1137,<S2SV_ModStart> mmap_legacy_base = mmap_legacy_base <S2SV_ModEnd> ( random_factor ),0
1138,<S2SV_ModStart> ++ ) { if <S2SV_ModEnd> (! ( <S2SV_ModStart> CONFIG_FAST_UNALIGNED ) dst [ 0 ] = src [ 0 ] ; dst [ 1 ] = src [ 1 ] ; dst [ 2 ] = src [ 2 ] ; dst [ 3 ] = src [ 3 ] ; dst [ 4 ] = src [ 4 ] ; dst [ 5 ] = src [ 5 ] ; dst [ 6 ] = src [ 6 ] ; dst [ 7 ] = src [ 7 ] ; # else ( ( uint32_t * ) dst ) [ 0 ] = ( ( uint32_t * ) src ) [ 0 ] ; ( ( uint32_t * ) dst ) [ 1 ] = ( ( uint32_t * ) src ) [ 1 ] ; ( ( uint32_t * ) dst ) [ 2 ] = ( ( uint32_t * ) src ) [ 2 ] ; ( ( uint32_t * ) src ) [ 3 ] ; ( ( uint32_t * ) dst ) [ 3 ] = ( ( uint32_t * ) src ) [ 3 ] ; ( ( uint32_t * ) src ) [ 2 ] ; ( ( uint32_t * ) dst ) [ 2 ],0
1139,"<S2SV_ModStart> ; case 'c' : return getnum ( L, fmt, sizeof ( int ) ) <S2SV_ModEnd> ; case 'i' <S2SV_ModStart> case 'I' : { luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sizeof ( int ), MAXINTSIZE ) ; return 0 ; } case 'u' : case 'U' : { luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", MAXINTSIZE ) ; return 0 ; } <S2SV_ModEnd> case 'u' : <S2SV_ModStart> case 'U' : { luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sizeof ( int ), MAXINTSIZE ) ; return 0 ; }",0
1140,"<S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + img -> row_offset ) % rowsperstrip <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL ) { buf = _TIFFReadEncodedStripAndAllocBuffer ( tif, stripsize, ""gtStripSeparate"" ) ; if ( buf == NULL ) { buf = _TIFFAllocEncodedStripAndAllocBuffer ( tif, stripsize, ""gtStripSeparate"" ) ; if ( buf == NULL ) { buf = _TIFFAllocEncodedStripAndAllocBuffer ( tif, stripsize, ""gtStripSeparate"" ) ; if ( buf == NULL ) { buf = _TIFFAllocEncodedStripAndAllocBuffer ( tif, stripsize, ""gtStripSeparate"" ) ; } if ( buf == NULL ) { buf = _TIFFAllocEncodedStripAndAllocBuffer ( tif, stripsize, ""gtStripSeparate"" ) ; if ( buf == NULL ) { buf = _TIFFAllocEncodedStripAndAllocBuffer ( tif, stripsize, ""gtStripSeparate"" ) ; if ( buf == NULL ) { buf = _TIFFAllocEncodedStripAnd",0
1141,"<S2SV_ModStart> } } } if ( TYPE ( n )!= TYPE_COMMENT ) { Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 1 ) ), NCH ( n ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 2 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 3 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 3 ) ), NCH ( n ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 2 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 3 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 3 ) ), NCH ( n ) ) ;",0
1142,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex,0
1143,"<S2SV_ModStart> - EINVAL ; if ( upid == - 1 ) type = PIDTYPE_MAX ; else if ( upid == 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, PIDTYPE_PID ) ; } else if ( upid == 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, PIDTYPE_PID ) ; } else if ( upid < 0 ) { type = PIDTYPE_PGID ; pid = get_task_pid ( current, PIDTYPE_PGID ) ; } else if ( upid == 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, PIDTYPE_PID ) ; }",0
1144,"<S2SV_ModStart> siocb -> scm ) ; msg -> msg_namelen = sizeof ( tmp_scm ) ; if ( msg -> msg_namelen ) err = - EINVAL ; if ( msg -> msg_namelen ) err = - EOPNOTSUPP ; if ( msg -> msg_namelen ) err = - EOPNOTSUPP ; if ( msg -> msg_namelen ) err = - EOPNOTSUPP ; if ( msg -> msg_flags & MSG_OOB ) goto out_err ; if ( msg -> msg_namelen ) err = - EOPNOTSUPP ; if ( msg -> msg_namelen ) err = - EOPNOTSUPP ; if ( msg -> msg_namelen ) err = - EOPNOTSUPP ; if ( msg -> msg_namelen ) err = - EOPNOTSUPP ; if ( msg -> msg_namelen ) err = - EOPNOTSUPP ; if ( msg -> msg_namelen ) { err = - EOPNOTSUPP ; goto out_err ; } skb = sock_alloc_send_skb ( sk, size, <S2SV_ModEnd>",0
1145,<S2SV_ModStart> ( num & <S2SV_ModEnd> ( 1 << <S2SV_ModStart> ) ) return num <S2SV_ModEnd> ; } <S2SV_null>,0
1146,"<S2SV_ModStart> [ plane ] ; const int x = vpx_img_plane_width ( img, plane ) ; const int y = vpx_img_plane_height ( img, plane ) ; const int y2 = vpx_img_plane_height ( img, plane ) ; const int w = vpx_img_plane_width ( img, plane ) ; const int h = vpx_img_plane_height ( img, plane ) ; int y ; for ( y = 0 ; y < y2 ; ++ y ) { if ( fread ( buf, 1, x, w, file )!= x ) return 0 ; buf += stride ; } } return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1147,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; if ( avp -> length < 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received(type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; MD5_Init ( & md5_ctx ) ; MD5_Update ( & md5_ctx, secret, secret_len ) ; MD5_Final ( p1, & md5_ctx ) ; if ( attr_len <= MD5_DIGEST_LENGTH ) { memcpy ( avp -> val, p1, attr_len ) ; return 0 ; } memxor ( p1, avp -> val, MD5_DIGEST_LENGTH ) ; orig_attr_len = ntohs ( * ( uint16_t * ) p1 ) ; if ( orig_attr_len <= MD5_",0
1148,"<S2SV_ModStart> -> private ; if ( cmd == DM_IOCTL_GET_MODE ) return __blkdev_driver_ioctl ( lc -> dev -> bdev, lc -> dev -> mode, cmd, arg ) ; else return __blkdev_driver_ioctl ( lc -> dev -> bdev <S2SV_ModEnd>, lc ->",0
1149,"<S2SV_ModStart> ; if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_MEM_ALLOC_ERROR ) ; return 0 ; } if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_COPY_ERROR ) ; return 0 ; } ctx -> cipher_data = OPENSSL_memdup ( actx, sizeof ( * actx ) + Poly1305_ctx_size ( ) ) ; if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_MEM_ALLOC_ERROR ) ; return 0 ; } ctx -> cipher_data = OPENSSL_memdup ( ctx -> cipher_data, sizeof ( * ctx -> cipher_data ) + Poly1305_ctx_size ( ) ) ; if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL,",0
1150,"<S2SV_ModStart> ) { request_module <S2SV_ModEnd> ( ""%s"", <S2SV_ModStart> ) ) request_module <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) request_module <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ( ""%s-all"", name ) ; } if ( alg ) return crypto_is_larval ( alg )? crypto_larval_wait ( alg ) : alg ; if (! crypto_is_larval ( alg ) ) return ERR_PTR ( - EINVAL ) ; if ( alg ) return crypto_alg_lookup ( name, type, mask ) ; if ( alg ) return crypto_is_larval ( alg )? crypto_larval_wait ( alg ) : alg ; if ( crypto_is_larval ( alg ) return crypto_is_larval ( alg )? crypto_larval_wait ( alg ) : alg ; if (! crypto_is_larval ( alg ) ) return ERR_PTR ( - EINVAL ) ; if ( crypto_is_larval ( alg ) ) return crypto_is_larval ( alg )? crypto_larval_wait ( alg ) : alg ; return crypto_larval_add ( name, type",0
1151,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
1152,"<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ; if ( access ( full_path, R_OK ) ) { if ( arg_debug || arg_debug_private_lib ) printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } if ( access ( full_path, R_OK ) ) { printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } if ( access ( full_path, R_OK ) ) { if ( arg_debug || arg_debug_private_lib ) printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } if ( access ( full_path, R_OK ) ) { printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } if ( access ( full_path, R_OK ) ) { if ( arg_debug || arg_debug_private_lib ) printf",0
1153,"<S2SV_ModStart> sock, sk ) ; switch ( sa -> rc_family ) { case AF_BLUETOOTH : sa -> rc_family = AF_BLUETOOTH ; sa -> rc_channel = rfcomm_pi ( sk ) -> channel ; break ; case AF_INET : sa -> rc_family = AF_INET ; sa -> rc_channel = rfcomm_pi ( sk ) -> channel ; break ; case AF_INET6 : sa -> rc_family = AF_INET6 ; sa -> rc_channel = rfcomm_pi ( sk ) -> channel ; if ( peer ) bacpy ( & sa -> rc_bdaddr, & bt_sk ( sk ) -> peer, & bt_sk ( sk ) -> src ) ; break ; case AF_INET : sa -> rc_family = AF_INET6 ; sa -> rc_channel = rfcomm_pi ( sk ) -> channel ; break ; case AF_INET6 : sa -> rc_family = AF_INET6 ; sa -> rc_channel = rfcomm_pi ( sk ) -> channel ; if ( peer ) bacpy ( & sa -> rc_bdaddr, & bt_sk ( sk ) -> peer,",0
1154,"<S2SV_ModStart> { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; if ( is_a_tty ) { raw_term ( ) ; signal ( SIGWINCH, sig_winch ) ; } } else if ( cpkt. cptype",0
1155,<S2SV_ModStart> NTLMSSP_NEGOTIATE_UNICODE | NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC ; if ( ses -> server -> sign ) { flags |= NTLMSSP_NEGOTIATE_SIGN ; if (! ses -> server -> session_estab || ses -> ntlmssp -> sesskey_per_smbsess ) flags |= NTLMSSP_NEGOTIATE_KEY_XCH ; } else if (! ses -> server -> session_estab || ses -> ntlmssp -> sesskey_per_smbsess ) flags |= NTLMSSP_NEGOTIATE_SIGN ; if (! ses -> server -> session_estab || ses -> ntlmssp -> sesskey_per_smbsess ) flags |= NTLMSSP_NEGOTIATE_KEY_XCH ; } tmp = * pbuffer + sizeof ( AUTHENTICATE_MESSAGE ) ; sec_blob -> NegotiateFlags = cpu_to_le32 ( flags ) ; sec_blob -> NtChallengeResponse,0
1156,<S2SV_ModStart> == MUTT_ABORT ) { mutt_socket_close ( adata -> conn <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn <S2SV_ModEnd> ) ; goto,0
1157,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1158,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""cc"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""cc"" ) ; return 1 ; }",0
1159,<S2SV_ModStart> -> head <= 0 || g -> track > UDP -> tracks >> STRETCH ( g ) || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SECTBASEMASK ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 ) return - EINVAL ;,0
1160,"<S2SV_ModStart> strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || str",0
1161,"<S2SV_ModStart> remainder, & rlen ) ; if ( ret ) return ret ; if ( check_atype_tag ( a, & t, contents, clen, a, retrep ) ) return ASN1_BAD_ID ; if (! check_atype_tag ( a, & t, contents, clen, a, retrep ) ) return ASN1_BAD_ID ; if (! check_atype_tag ( a, & t, contents, clen, a, retrep ) ) return ASN1_BAD_ID ; if (! check_atype_tag ( a, & t, contents, clen, a, retrep ) ) return ASN1_BAD_ID ; if (! check_atype_tag ( a, & t, contents, clen, a, retrep ) ) return ASN1_BAD_ID ; if (! check_atype_tag ( a, & t, contents, clen, a, retrep ) ) return ASN1_BAD_ID ; if (! check_atype_tag ( a, & t, contents, clen, a, retrep ) ) return ASN1_BAD_ID ;",0
1162,"<S2SV_ModStart> slavename ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) strncpy ( md5data, curconn -> username, 82 ) ; strncpy ( md5data + 1, user -> password, 82 ) ; memcpy ( md5data + 1, user -> password, 82 ) ; memcpy ( md5data + 1, curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, 17 ) ; md5_finish ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; init_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr",0
1163,"<S2SV_ModStart> 1 ; } aux = strstr ( mntent -> mnt_dir, path ) ; if (! aux ) { WARN ( ""ignoring <S2SV_blank> mount <S2SV_blank> point <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return ret ; } offset = strlen ( path ) ; if (! aux ) { WARN ( ""ignoring <S2SV_blank> mount <S2SV_blank> point <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return ret ; } aux = strstr ( mntent -> mnt_dir, path ) ; if (! aux ) { WARN ( ""ignoring <S2SV_blank> mount <S2SV_blank> point <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return ret ; } aux = strstr ( mntent -> mnt_dir, path ) ; if (! aux ) { WARN ( ""ignoring <S2SV_blank> mount <S2SV_blank> point <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return ret ; } aux = strstr ( mntent -> mnt_dir, path ) ; if (! aux ) { WARN ( ""ignoring <S2SV_blank> mount <S2SV_blank> point <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return ret ;",0
1164,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart>, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } }",0
1165,<S2SV_ModStart> ; pages [ j ] = alloc_page ( gfp_mask ) ; if (! pages [ j ] ) { ret = - ENOMEM ; goto out_unmap ; },0
1166,<S2SV_ModStart> -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; },0
1167,"<S2SV_ModStart> -> pp ; <S2SV_ModEnd> int len ; <S2SV_ModStart> ""localhost"" ; } smtpc -> domain = curl_easy_unescape ( conn -> data, path, 0, & len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; result = smtp_init ( conn ) ; if ( CURLE_OK!= result ) return result ; conn -> bits. close = FALSE ; pp -> response_time = RESP_TIMEOUT ; pp -> statemach_act = smtp_statemach_act ; pp -> endofresp = smtp_endofresp ; pp -> conn = conn ; if ( ( conn -> handler -> protocol & CURLPROTO_SMTPS ) && data -> state. used_interface!= Curl_if_multi ) { result = Curl_ssl_connect ( conn, FIRSTSOCKET ) ; if ( result ) return result ; data -> state. proto. smtp = smtp_save ; if ( data -> state. used_interface!= Curl_if",0
1168,<S2SV_ModStart> str [ i ] && str [ i ],0
1169,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1170,<S2SV_ModStart> 0 ) ; if ( off + RDS_CONG_MAP_BYTES > sizeof ( struct rds_header ) ) { ret = - EINVAL ; goto out ; } if ( off + RDS_FRAG_SIZE > sizeof ( struct rds_header ) ) { ret = - EINVAL ; goto out ; } if ( off + RDS_FRAG_SIZE > sizeof ( struct rds_header ) + RDS_CONG_MAP_BYTES ) { ret = - EINVAL ; goto out ; } if ( off + RDS_FRAG_SIZE > sizeof ( struct rds_header ) + RDS_CONG_MAP_BYTES ) { ret = - EINVAL ; goto out ; } if ( off + RDS_FRAG_SIZE > sizeof ( struct rds_header ) ) { ret = - EINVAL ; goto out ; } if ( off + RDS_FRAG_SIZE > sizeof ( struct rds_header ) + RDS_CONG_MAP_BYTES ) { ret = - EINVAL ; goto out ; } if ( off + RDS_FRAG_SIZE > sizeof ( struct rds_header ) + RDS_CONG_MAP_BYTES ) { ret = - EINVAL,0
1171,"<S2SV_ModStart> ; priv -> mii_base = devm_ioremap_nocache ( & pdev -> dev, r -> start, resource_size ( r ) ) ; if (! priv -> mii_base ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank> remap <S2SV_blank> register\\n"" ) ; return - ENOMEM ; } priv -> mii_bus = mdiobus_alloc ( ) ; if (! priv -> mii_bus ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> unimac <S2SV_blank> MII <S2SV_blank> bus\\n"" ) ; return - ENOMEM ; } priv -> mii_bus = mdiobus_alloc ( ) ; if (! priv -> mii_bus ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> unimac <S2SV_blank> MII <S2SV_blank> bus\\n"" ) ; return - ENOMEM ; } ret = of_mdiobus_register ( bus, np ) ; if ( ret ) { dev_err ( & pdev -> dev, ""MDIO <S2SV_blank> bus <S2SV_blank> registration <S2SV_blank> failed\\n",0
1172,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1173,"<S2SV_ModStart> ) ) { JAS_DBGLOG ( 0x534e4554, ( ""b/26366256"" ) ) ; JAS_DBGLOG ( 0x534e4554, ( ""b/26366256"" ) ) ; JAS_DBGLOG ( 0x534e4554, ( ""b/26366256"" ) ) ; JAS_DBGLOG ( 0x534e4554, ( ""b/26366256256"" ) ) ; JAS_DBGLOG ( 0x534e4554, ( ""b/26366256"" ) ) ; JAS_DBGLOG ( 0x534e4554, ( ""b/26366256"" ) ) ; JAS_DBGLOG ( 0x534e4554, ( ""b/26366256"" ) ) ; JAS_DBGLOG ( 0x534e4554, ( ""b/26366256256"" ) ) ; JAS_DBGLOG ( 0x534e4554, ( ""b/26366256",0
1174,"<S2SV_ModStart> ""num <S2SV_blank> Paddr <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> Vaddr <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
1175,"<S2SV_ModStart> goto out ; status = decode_getacl_nolock <S2SV_ModEnd> ( xdr,",0
1176,"<S2SV_ModStart> sizeof iv ) ; if (! rb_safe_cmp ( self, rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_const_const ) ) ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ) ) ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get (",0
1177,"<S2SV_ModStart> KRB5KDC_ERR_BADOPTION ; } if ( request -> kdc_options & ( NON_TGT_OPTION | KDC_OPT_ENC_TKT_IN_SKEY ) ) { * status = ""BADOPTION"" ; return KRB5KDC_ERR_BADOPTION ; } if ( request -> kdc_options & ( NON_TGT_OPTION | KDC_OPT_ENC_TKT_IN_SKEY ) ) { * status = ""BADOPTION"" ; return KRB5KDC_ERR_BADOPTION ; } if ( request -> kdc_options & ( NON_TGT_OPTION | KDC_OPT_ENC_TKT_IN_SKEY ) ) { return KRB5KDC_ERR_BADOPTION ; } if ( request -> kdc_options & ( NON_TGT_OPTION | KDC_OPT_ENC_TKT_IN_SKEY ) ) { * status = ""BADOPTION"" ; return KRB5KDC_ERR_BADOPTION ; } if ( request -> kdc_options & ( NON_TGT_OPTION | KDC_OPT_ENC_T",0
1178,"<S2SV_ModStart> & CLONE_SETTLS ) { thread -> tp_value = childregs -> ARM_r3 ; thread_notify ( THREAD_NOTIFY_COPY, thread ) ; return 0 ; } if ( clone_flags & CLONE_SETTLS ) { thread -> tp_value = childregs -> ARM_r3 ; thread_notify ( THREAD_NOTIFY_COPY, thread ) ; return 0 ; }",0
1179,"<S2SV_ModStart> bufsize ) { JAS_DBGLOG ( 100, ( ""jas_stream_memopen(%p, <S2SV_blank> %d)\\n"", buf, bufsize ) ) ; jas_stream_t * stream ; jas_stream_memobj_t * obj ; JAS_DBGLOG ( 100, ( ""jas_stream_memopen(%p, <S2SV_blank> %d)\\n"", buf, bufsize ) ) ; stream = jas_stream_create ( ) ; if (! stream ) { return 0 ; } stream -> openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY ; jas_stream_initbuf ( stream, JAS_STREAM_FULLBUF, 0, 0 ) ; stream -> ops_ = & jas_stream_memops ; if (! stream ) { jas_stream_destroy ( stream ) ; return 0 ; } stream -> obj_ = ( void * ) obj ; obj -> myalloc_ = 1 ; obj -> buf_ = jas_malloc ( sizeof ( jas_stream_memobj_t ) ) ; obj -> myalloc_ =",0
1180,"<S2SV_ModStart> -> pw ; <S2SV_ModEnd> char * pkalg <S2SV_ModStart> = NULL ; <S2SV_ModEnd> u_char * pkblob <S2SV_ModStart>, * sig <S2SV_ModEnd> ; size_t blen <S2SV_ModStart> ; if ( <S2SV_ModEnd> authctxt -> valid <S2SV_ModStart> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8",0
1181,"<S2SV_ModStart> ; uint32_t bcount ; if (! DoReadFile ( infile, & filehdr, sizeof ( Wave64FileHeader ), & bcount ) || bcount!= sizeof ( Wave64FileHeader ) - 4 || memcmp ( filehdr. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( filehdr. formType, wave_guid, sizeof ( wave_guid ) ) || memcmp ( filehdr. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( filehdr. formType, wave_guid, sizeof ( wave_guid ) ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) || memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) || memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) || memcmp ( chunk",0
1182,"<S2SV_ModStart> mech ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_INVALID_MECHANISM, NULL ), 0 ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ) ), 0 ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no",0
1183,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1184,"<S2SV_ModStart> size_t s ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size,",0
1185,"<S2SV_ModStart> ) ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> setting <S2SV_blank> block <S2SV_blank> size <S2SV_blank> to <S2SV_blank> %u"", sbi -> s_sb_block ) ; kfree ( sbi -> s_blockgroup_lock ) ; kfree ( sbi -> s_blockgroup_lock ) ; sbi -> s_blockgroup_lock = kzalloc ( sizeof ( struct blockgroup_lock ), GFP_KERNEL ) ; if (! sbi -> s_blockgroup_lock ) { kfree ( sbi -> s_blockgroup_lock ) ; kfree ( sbi -> s_blockgroup_lock ) ; kfree ( sbi -> s_blockgroup_lock ) ; kfree ( sbi -> s_blockgroup_lock ) ; sbi -> s_blockgroup_lock = kzalloc ( sizeof ( struct blockgroup_lock ), GFP_KERNEL ) ; if (! sbi -> s_blockgroup_lock ) { kfree ( sbi -> s_blockgroup_lock ) ; kfree ( sbi -> s_blockgroup_lock ) ; kfree ( sbi -> s_block",0
1186,<S2SV_ModStart> bd_addr ) { int status ; if ( interface_ready ( ) == FALSE ) return BT_STATUS_NOT_READY ; if ( dm_interface_ready ( ) == FALSE ) return BT_STATUS_NOT_READY ; status = btif_dm_remove_bond ( bd_addr ) ; if ( status!= BT_STATUS_READY ) return status ; if ( dm_interface_ready ( ) == FALSE ) return BT_STATUS_NOT_READY ; if ( dm_interface_ready ( ) == FALSE ) return BT_STATUS_NOT_READY ; if ( dm_interface_ready ( ) == FALSE ) return BT_STATUS_NOT_READY ; if ( dm_interface_ready ( ) == FALSE ) return BT_STATUS_NOT_READY ; if ( interface_ready ( ) == FALSE ) return BT_STATUS_NOT_READY ; if ( dm_interface_ready ( ) == FALSE ) return BT_STATUS_NOT_READY ; if ( dm_interface_ready ( ) == FALSE ) return BT_STATUS_NOT_READY ; if ( dm_interface_ready ( ) == FALSE ) return BT_STATUS_NOT_READY,0
1187,"<S2SV_ModStart> ; if ( tcp_hdrlen + TCPOLEN_MSS > skb -> len ) return - 1 ; if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", info -> mss ) ; return - 1 ; } if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", info -> mss ) ; return - 1 ; } newmss = min_mtu - minlen ; } else { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", info -> mss ) ; return - 1 ; } if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", info -> mss ) ;",0
1188,"<S2SV_ModStart> ; if ( numrows < 0 || numcols > jas_matind_max ( numrows, numcols ) ) { return 0 ; } if ( numrows > jas_matind_max ( numrows, numcols ) ) { return 0 ; } if ( numcols > jas_matind_max ( numrows, numcols ) ) { return 0 ; } matrix -> flags_ = 0 ; matrix -> numrows_ = numrows ; matrix -> numcols_ = numcols ; matrix -> rows_ = 0 ; matrix -> maxrows_ = 0 ; matrix -> data_ = 0 ; matrix -> datasize_ = numrows * numcols ; if ( matrix -> maxrows_ > 0 ) { if (! ( matrix -> rows_ = jas_alloc2 ( matrix -> maxrows_, sizeof ( jas_seqent_t * ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } } if ( matrix -> datasize_ > 0 ) { if (! ( matrix -> data_ = jas_alloc2 ( matrix -> datasize_, sizeof ( jas_seqent_t ) ) ) ) { jas_matrix_",0
1189,"<S2SV_ModStart> ; if (! skb_is_gso ( skb ) ) { skb -> dev = NULL ; icmpv6_send ( skb, ICMPV6_PKT_TOOBIG, 0, mtu ) ; IPSTATS_INC_STATS ( net, ip6_dst_idev ( skb ) ), IPSTATS_MIB_FRAGFAILS ) ; kfree_skb ( skb ) ; return - EMSGSIZE ; } if ( skb_is_gso ( skb ) ) { skb -> dev = NULL ; icmpv6_send ( skb, ICMPV6_PKT_TOOBIG, 0, mtu ) ; IPSTATS_INC_STATS ( net, ip6_dst_idev ( skb ) ), IPSTATS_MIB_FRAGFAILS ) ; kfree_skb ( skb ) ; return - EMSGSIZE ; } if ( skb_is_gso ( skb ) ) { skb -> dev = NULL ; icmpv6_send ( skb, ICMPV6_PKT_TOOBIG, 0, mtu )",0
1190,"<S2SV_ModStart> * req ; struct scsi_disk_request * r ; req = scsi_req_alloc ( & scsi_disk_reqops, & s -> qdev, tag, lun, hba_private ) ; if (! req ) return NULL <S2SV_ModStart> scsi_disk_reqops, & s -> qdev, tag, lun, hba_private ) ; <S2SV_ModEnd> r = DO_UPCAST <S2SV_ModStart> SCSIDiskReq, req <S2SV_ModEnd> ) ; r",0
1191,"<S2SV_ModStart> int i ; size_t <S2SV_ModEnd> avail ; int <S2SV_ModStart> ; avail = ( size_t ) <S2SV_ModEnd> buf -> cursor <S2SV_ModStart> ; expect = ( size_t ) <S2SV_ModEnd> 8 + nxip <S2SV_ModStart> ; if ( expect < 0 || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> xmin = xmin ; snap -> xmax = xmax ; snap -> nxip = nxip ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax || cur >= MAX_TXID ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; }",0
1192,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ],0
1193,"<S2SV_ModStart> if ( ret ||! cm_id -> device ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; rdma_destroy_id ( cm_id ) ; return ret ; } <S2SV_ModEnd> ret = -",0
1194,"<S2SV_ModStart> sk ) ; <S2SV_ModEnd> struct xfrm_dump_info info <S2SV_ModStart> = NLM_F_MULTI ; if (! cb -> args [ 0 ] ) { cb -> args [ 0 ] = 1 ; xfrm_policy_walk_init ( & walk, XFRM_POLICY_TYPE_ANY ) ; } ( void ) xfrm_policy_walk_init ( & walk, XFRM_POLICY_TYPE_ANY ) ; } ( void ) xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; if (! cb -> args [ 0 ] ) { cb -> args [ 0 ] = 1 ; xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; } ( void ) xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; if (! cb -> args [ 0 ] ) { cb -> args [ 0 ] = 1 ; xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; } ( void ) xfrm_policy_walk_init ( walk, XFRM",0
1195,"<S2SV_ModStart> - 1 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } ret = oe_syscall_write_ocall ( & ret, epoll -> host_fd, buf, count ) ; OE_RAISE_ERRNO ( OE_EINVAL ) ; done : if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
1196,"<S2SV_ModStart> = upperdir -> d_inode <S2SV_ModEnd> ; int err <S2SV_ModStart> = - ESTALE <S2SV_ModEnd> ; inode_lock_nested ( <S2SV_ModStart> I_MUTEX_PARENT ) ; if ( upper -> d_parent == upperdir ) { dget ( upper ) ; if ( is_dir ) err = vfs_rmdir ( dir, upper ) ; else err = vfs_unlink ( dir, upper, NULL ) ; <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1197,"<S2SV_ModStart> ) { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_ERR,",0
1198,<S2SV_ModStart> (! * ptrptr <S2SV_ModEnd> &&! (,0
1199,<S2SV_ModStart> ] ; if ( a -> type == MAPI_BODY_HTML ) { body. html_bodies = get_html_data ( a ) ; html_size = a -> num_values ; } else if ( a -> type == MAPI_BODY_RTF ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> type == MAPI_BODY_TEXT ) { body. text_body = get_text_data ( a ) ; html_size = a -> num_values ; } else if ( a -> type == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> type == MAPI_BODY_HTML ) { body. html_bodies = get_html_data ( a ) ; html_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_RTF ) { body. rtf_bodies = get_rtf_data ( a ) ;,0
1200,"<S2SV_ModStart> ; # endif if ( ( npix + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( npix + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( npix + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } #",0
1201,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_DIR_MAX : * ( size_t * ) val = ms -> elf_dir_max ; return 0 ; case MAGIC_PARAM_NAME_MAX : * ( size_t * ) val = ms -> name_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ; case MAGIC_PARAM_ELF_PHNUM_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ; case MAGIC_PARAM_ELF_DIR_MAX : * ( size_t * ) val = ms -> elf_dir_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ;,0
1202,"<S2SV_ModStart> >= 1 ) { jas_eprintf ( ""invalid <S2SV_blank> image <S2SV_blank> type: <S2SV_blank> %s\\n"", box -> info -> name ) ; goto error ; } <S2SV_ModStart> >= 1 ) { jas_eprintf ( ""invalid <S2SV_blank> image <S2SV_blank> type: <S2SV_blank> %s\\n"", box -> info -> name ) ; goto error ; } if (! ( dec = jp2_dec_create ( ) ) ) { goto error ; } if (! ( dec = jp2_dec_create ( ) ) ) { jas_eprintf ( ""invalid <S2SV_blank> image <S2SV_blank> type: <S2SV_blank> %s\\n"", dec -> info -> name ) ; goto error ; } if (! ( dec = jp2_dec_create ( ) ) ) { goto error ; } if (! ( dec = jp2_dec_create ( ) ) { goto error ; } if (! ( dec = jp2_dec_create ( ) ) ) { goto error ; } if (! ( dec = jp2_dec_create ( ) ) ) { jas_eprintf ( ""invalid <S2SV_blank> image <S2SV_blank> type: <S2SV_blank> %s\\n"", dec -> info -> name ) ; goto error ; } if",0
1203,,1
1204,<S2SV_ModStart> = EXT4_JOURNAL ( page_file_mapping ( page ) <S2SV_ModEnd> ) ; if,0
1205,<S2SV_ModStart> ++ ) { writer = GF_SAFEALLOC ( <S2SV_ModStart> TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = trak -> Information -> sampleTable ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; writer -> isDone = 0 ; writer -> chunkDur = 0 ; writer -> chunkSize = 0 ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> chunkDur ) writer -> chunkDur = 0 ; writer -> stbl = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> chunkDur ) writer -> chunkDur = 0 ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> chunkDur ) writer,0
1206,<S2SV_ModStart> <S2SV_null> <S2SV_null> static UINT32 <S2SV_ModEnd> nsc_rle_encode ( BYTE <S2SV_ModStart> 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = ( runlength & 0x00FF0000 ) >> 8 ; * out ++ = ( runlength & 0x00FF0000 ) >> 16 ; * out ++ = ( runlength & 0xFF000000 ) >> 24 ; * out ++ = ( runlength & 0xFF000000 ) >> 24 ; * out ++ = ( runlength & 0xFF000000 ) >> 24 ; * out ++ = ( runlength & 0xFF000000 ) >> 24 ; * out ++ = ( runlength & 0xFF000000 ) >> 24 ; * out ++ = ( runlength &,0
1207,"<S2SV_ModStart> [ 17 ] <S2SV_ModEnd> ; int plen <S2SV_ModStart> ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) strncpy ( md5data, password, 82 ) ; strncpy ( md5data + 1, password, 82 ) ; md5data [ 83 ] = '\\0' ; memcpy ( md5data + 1 + strlen ( password ), pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( const md5_byte_t * ) md5sum + 1 ) ; md5sum [ 0 ] = 0 ; init_packet ( & data, MT_PTYPE_DATA, srcmac, dstmac, sessionkey, outcounter ) ; plen = add_control_packet ( & data, MT_CPTYPE_USERNAME, username, strlen ( username ) ) ; plen += add_control_packet ( & data, MT_CPTYPE_TERM_TYPE, terminal, strlen ( terminal ) ) ; if (",0
1208,"<S2SV_ModStart> void * dllhandle = NULL <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( ""Trying <S2SV_blank> to <S2SV_blank> load <S2SV_blank> \\""%s\\"" <S2SV_blank> from <S2SV_blank> \\""%s\\""...\\n"", name, Sys_BinaryPath ( ) ) ; if (! dllhandle ) Com_Printf ( ""Trying <S2SV_blank> to <S2SV_blank> load <S2SV_blank> \\""%s\\"" <S2SV_blank> from <S2SV_blank> \\""%s\\""...\\n"", name, Sys_BinaryPath ( ) ) ; if (! dllhandle ) Com_Printf ( ""Loading <S2SV_blank> \\""%s\\"" <S2SV_blank> failed\\n"", name, Sys_BinaryPath ( ) ) ; if (! dllhandle ) Com_Printf ( ""Loading <S2SV_blank> \\""%s\\"" <S2SV_blank> failed\\n"", name, Sys_BinaryPath ( ) ) ; if (! dllhandle ) Com_Printf ( ""Loading <S2SV_blank> \\""%s\\"" <S2SV_blank> failed\\n"", name, Sys_BinaryPath ( ) ) ; if (! dllhandle ) Com_Printf ( ""Loading <S2SV_blank> \\""%s\\"" <S2SV_blank> failed\\n"", name, Sys_BinaryPath ( ) ) ; if (! dllhandle ) Com_Printf ( ""Loading <S2SV_blank> \\""%s\\"" <S2SV_blank> failed\\n"", name, Sys",0
1209,<S2SV_ModStart> = NULL ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindexes = NULL ; },0
1210,"<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> n ) \\\n} <S2SV_ModEnd> typedef struct PCDTable <S2SV_ModStart> buffer ) ; if ( buffer == ( unsigned char * ) AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( CorruptImageError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( buffer == ( unsigned char * ) AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ) ThrowBinaryException ( CorruptImageError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ) ThrowBinaryException ( CorruptImageError, ""MemoryAllocationFailed"", image -> filename ) ; buffer = ( unsigned char * ) AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( buffer == ( unsigned char * ) AcquireQuant",0
1211,"<S2SV_ModStart> ; if (! argname ) goto error ; if ( forbidden_name ( c, argname, ch, 0 ) ) goto error ; if ( forbidden_name ( c, argname, ch, 0 ) ) goto error ; if ( forbidden_name ( c, argname, ch, 0 ) ) goto error ; if ( forbidden_name ( c, argname, ch, 0 ) ) goto error ; if ( forbidden_name ( c, argname, ch, 0 ) ) goto error ; if ( forbidden_name ( c, argname, ch, 0 ) ) goto error ; if ( forbidden_name ( c, argname, ch, 0 ) ) goto error ; if ( forbidden_name ( c, argname, ch, 0 ) ) goto error ; if ( forbidden_name ( c, argname, ch, 0 ) ) goto error ; if ( forbidden_name ( c, argname, ch, 0 ) ) goto error ; if ( forbidden_name ( c, argname, ch, 0 ) ) goto error ; if ( forbidden_name ( c, argname, ch, 0 ) ) goto error ; if ( forbidden_name ( c, argname, ch, 0 )",0
1212,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1213,"<S2SV_ModStart> HAVE_IPV6 char * p ; if ( str [ str_len - 1 ] == '[' ) { p = memchr ( str + 1, '[', str_len - 2 ) ; if (! p || * ( p + 1 )!= ':' ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } * portno = atoi ( p + 2 ) ; } else { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } if ( p ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv4 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return estrndup ( str, p - str - 1 ) ; } else { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv4 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ;",0
1214,"<S2SV_ModStart> -> y_buffer ; const uint8_t * dst_src = src_ybc -> y_buffer ; const uint8_t * dst_src = src_ybc -> y_buffer ; const uint8_t * dst_dst = dst_ybc -> y_buffer ; const uint8_t * dst_src = src_ybc -> y_buffer ; const uint8_t * dst_src = src_ybc -> y_buffer ; for ( row = 0 ; row < src_ybc -> y_height ; ++ row ) { memcpy ( dst_src, src, src_ybc -> y_width ) ; src += src_ybc -> y_stride ; dst += dst_ybc -> y_stride ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1215,"<S2SV_ModStart> } c -> csty = bytestream2_get_byteu ( & s -> g ) ; if ( c -> csty >= JPEG2000_MAX_CSTYS ) { av_log ( s -> avctx, AV_LOG_ERROR, ""csty <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( c -> csty >= JPEG2000_MAX_CSTYS ) { av_log ( s -> avctx, AV_LOG_ERROR, ""csty <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( c -> csty >= JPEG2000_MAX_CSTYS ) { av_log ( s -> avctx, AV_LOG_ERROR, ""csty <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( c -> csty >= JPEG2000_MAX_CSTYS ) { av_log ( s -> avctx, AV_LOG_ERROR, ""csty <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
1216,"<S2SV_ModStart> { if ( ptr [ 1 ] == '%' ) { fputc ( '%', stream ) ; ptr += 2 ; } else if ( '{' == ptr [ 1 ] ) { fputs ( ""%{"", stream ) ; ptr += 2 ; } else if ( '}' == ptr [ 1 ] ) { if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_EFFECTIVE_URL, & stringp ) ) fputs ( stringp, stream ) ; break ; case VAR_HTTP_CODE_PROXY : if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CODE_PROXY, & stringp ) ) fputs ( stringp, stream ) ; break ; case VAR_HTTP_CODE_PROXY : if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CONNECTCODE_PROXY, & stringp ) ) fputs ( stringp, stream ) ; break ; case VAR_HTTP_CODE_PROXY : if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CONNECTCODE_PROXY, & stringp ) ) fputs ( stringp, stream ) ; break ; case VAR_",0
1217,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> { int dummy_rate ; int64_t dummy_dist ; MACROBLOCK * x = & cpi -> mb ; if ( sf -> adaptive_pred_interp_filter ) { for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = MAX ( 4, num_4x4_blocks_wide_lookup [ i ] ) ; const int num_4x4_h = MAX ( 4, num_4x4_blocks_high_lookup [ i ] ) ; const int num_4x4_blk = MAX ( 4, num_4x4_blk ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index < 16 / num_4x4_blk ; ++",0
1218,"<S2SV_ModStart>, obj_tlen ; u_int <S2SV_ModEnd> hexdump ; u_int <S2SV_ModStart> hexdump ) ; obj_tlen = EXTRACT_32BITS ( obj_tptr ) ; if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> object <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> object <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } obj_tlen = EXTRACT_32BITS ( obj_tptr ) ; if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> object <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> object <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> object <S2SV_blank> too <S2SV_blank> short"" ) ) ; obj_tlen = EXTRACT_32BITS ( obj_tptr ) ; if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> object <S2SV_blank> too <S2SV_blank> short"" ) )",0
1219,"<S2SV_ModStart> const MB_MODE_INFO * mbmi <S2SV_ModEnd>, const int_mv <S2SV_ModStart> ) { const MV * ref = & mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ] [ 0 ] ; const MV diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col } ; vp9_inc_mv ( & diff, counts ) ; }",0
1220,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>",0
1221,"<S2SV_ModStart> ) ; if ( pskb_expand_head ( skb_out, size - skb -> len, GFP_ATOMIC ) < 0 ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_set_transport_header ( skb_out ) ; hlist_for_each_entry ( entry, chain, list ) { size = entry -> skb -> len - hdr_size ; memcpy ( skb_put ( skb_out, size ), entry -> skb -> data + hdr_size, size ) ; memcpy ( skb_put ( sk",0
1222,"<S2SV_ModStart> ) ; spin_lock_init ( & sta -> lock ) ; INIT_WORK ( & sta -> drv_unblock_wk, sta_unblock ) ; INIT_WORK ( & sta -> ampdu_mlme. work, ieee80211_ba_session_work ) ; mutex_init ( & sta -> ampdu_mlme. mtx ) ;",0
1223,<S2SV_ModStart> tp_event ) &&! capable ( CAP_SYS_ADMIN ) ) return - EPERM ; if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } if ( perf_paranoid_kernel ( ) &&! capable ( CAP_SYS_ADMIN ) ) return - EPERM ; if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_,0
1224,"<S2SV_ModStart> 1 ) ; if ( data_interface == NULL ) { dev_err ( & intf -> dev, ""No <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> found\\n"" ) ; return - EINVAL ; } <S2SV_ModStart> 0 ) ; if ( control_interface == NULL ) { dev_err ( & intf -> dev, ""No <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> found\\n"" ) ; return - EINVAL ; } <S2SV_ModStart> skip_normal_probe ; } if ( intf -> cur_altsetting -> endpoint && intf -> cur_altsetting -> endpoint -> extralen > buflen ) { dev_err ( & intf -> dev, ""No <S2SV_blank> extra <S2SV_blank> descriptors <S2SV_blank> on <S2SV_blank> endpoint\\n"" ) ; return - EINVAL ; } if ( intf -> cur_altsetting -> endpoint && intf -> cur_altsetting -> endpoint -> extralen > buflen ) { dev_err ( & intf -> dev, ""No <S2SV_blank> extra <S2SV_blank> descriptors <S2SV_blank> on <S2SV_blank> endpoint\\n"" ) ; return - EINVAL ; } if ( intf -> cur_altsetting -> endpoint -> extralen < buflen ) { dev_err ( & intf -> dev, ""No <S2SV_blank> extra <S2SV_blank> descriptors <S2SV_blank> on <S2SV_blank> endpoint\\n""",0
1225,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1226,"<S2SV_ModStart> return ; DEBUGMSGTL ( ( ""init_mib"", ""Seen <S2SV_blank> MIBDIRS: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> directories <S2SV_blank>...\\n"", env_var ) ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; } <S2SV_ModEnd> netsnmp_init_mib",0
1227,"<S2SV_ModStart> list_head tmplist ; struct sctp_sock * oldsp = sctp_sk ( oldsk ) ; newsk -> sk_sndbuf = oldsk -> sk_sndbuf ; newsk -> sk_rcvbuf = oldsk -> sk_rcvbuf ; sctp_sk_copy_descendant ( oldsk, newsk ) ; newsp -> ep = newep ; newsp -> hmac = NULL ; head = & sctp_sk_hashtable [ sctp_phashfn ( sock_net ( oldsk ), inet_sk ( oldsk ) -> inet_num ] ; sctp_sk ( newsk ) -> inet_num = inet_sk ( newsk ) -> inet_num ; spin_lock ( & head -> lock ) ; pp = sctp_sk ( oldsk ) -> bind_hash ; sk_add_bind_node ( newsk, & pp -> owner ) ; sctp_sk ( newsk ) -> bind_hash = pp ; inet_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; sctp_sk ( newsk ) -> inet_num = inet_sk",0
1228,"<S2SV_ModStart> open ( uinput_dev_path <S2SV_ModEnd> [ x ] <S2SV_ModStart>, O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } if ( write ( fd, & dev, sizeof ( dev ) ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } if ( ioctl ( fd, UI_SET_DEVICE, & dev, sizeof ( dev ) ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } if ( ioctl ( fd, UI_DEV_CREATE, & dev ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> create <S2SV_blank> uinput <S2SV_blank> device"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } fd = open ( uinput_dev_path [ x ], O_RD",0
1229,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> * desc ; <S2SV_ModStart> return sel ; <S2SV_ModEnd> if ( v8086_mode <S2SV_ModStart> return sel ; <S2SV_ModEnd> switch ( ( <S2SV_ModStart> << 1 ) | <S2SV_ModEnd> desc -> d <S2SV_ModStart> desc -> l <S2SV_ModEnd> ) { case <S2SV_ModStart> << 1 ) | desc -> d <S2SV_ModEnd> ) { case <S2SV_ModStart> case 0 : return INSN_CODE_SEG_PARAMS ( 2, 2 ) ; case 1 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 2 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; case 3 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; case 0 : return INSN_CODE_SEG_PARAMS ( 2, 2 ) ; case 1 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 2 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 3 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1230,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
1231,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
1232,<S2SV_ModStart> return ret ; <S2SV_ModEnd> out_free_uid : free_uid,0
1233,"<S2SV_ModStart> * pctx ) { iakerb_ctx_id_t ctx ; krb5_error_code code ; ctx = k5alloc ( sizeof ( * ctx ), & code ) ; if ( ctx == NULL ) goto cleanup ; ctx -> defcred = GSS_C_NO_CREDENTIAL ; ctx -> state = IAKERB_AS_REQ ; ctx -> count = 0 ; code = krb5_gss_init_context ( & ctx -> k5c ) ; if ( code!= 0 ) goto cleanup ; * pctx = ctx ; return code <S2SV_ModEnd> ; } <S2SV_null>",0
1234,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; bitmapDC = CreateCompatibleDC ( hDC ) ; if ( bitmapDC == ( HDC ) NULL ) { DeleteDC ( hDC ) ; ThrowReaderException ( CoderError, ""UnableToCreateDC"" ) ; }",0
1235,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
1236,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) && strcmp ( dentry -> d_name. name, ""ipc_flood_duration_ms"" ) ) flood_duration_test = false ; if ( flood_duration_test ) { ret = size ; goto out ; } if ( ipc_count > MAX_IPC_FLOOD_COUNT ) { ret = size ; goto out ; } if ( ipc_count > MAX_IPC_FLOOD_COUNT ) { ret = size ; goto out ; } if ( ipc_count > MAX_IPC_FLOOD_COUNT ) { ret = size ; goto out ; } if (",0
1237,"<S2SV_ModStart> ; if ( inflated == NULL ) { g_warning ( ""mono_reflection_bind_generic_method_parameters(): <S2SV_blank> method <S2SV_blank> builder <S2SV_blank> is <S2SV_blank> null"" ) ; return NULL ; }",0
1238,"<S2SV_ModStart> ] ; int tmp ; tmp = simple_strtol ( buffer, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ; uml_exitcode = tmp ; if ( copy_from_user ( buf, buffer, count ) ) return - EFAULT ; tmp = simple_strtol ( buf, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ; uml_exitcode = tmp ; return count ; } tmp = simple_strtol ( buf, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ; uml_exitcode = tmp ; return count ;",0
1239,"<S2SV_ModStart>, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"" <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"", ctxt -> inputNr <S2SV_ModEnd>, input ->",0
1240,"<S2SV_ModStart> 1 ; } if ( le32_to_cpu ( raw_super -> log_blocks_per_seg ) > F2FS_MAX_LOG_BLOCKS || le32_to_cpu ( raw_super -> log_blocks_per_seg ) < F2FS_MIN_LOG_BLOCKS || le32_to_cpu ( raw_super -> log_sectorsize ) > F2FS_MAX_LOG_SECTOR_SIZE ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> blocks <S2SV_blank> per <S2SV_blank> segment <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> log_blocks_per_seg ) ) ; return 1 ; } if ( le32_to_cpu ( raw_super -> log_sectorsize ) > F2FS_MAX_LOG_SECTOR_SIZE ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> sectorsize <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> log_sectorsize ) ) ; return 1 ; }",0
1241,"<S2SV_ModStart> is_path ) { <S2SV_ModEnd> char * last_elem <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) ) { repl = ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ],",0
1242,"<S2SV_ModStart> } pDecCont = ( decContainer_t * ) H264SwDecMalloc ( <S2SV_ModEnd> sizeof ( decContainer_t <S2SV_ModStart> ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; } # ifdef H264DEC_TRACE sprintf ( pDecCont -> str, ""H264SwDecInit# <S2SV_blank> OK: <S2SV_blank> return <S2SV_blank> %p"", ( void * ) pDecCont ) ; DEC_API_TRC ( pDecCont -> str ) ; # endif rv = h264bsdInit ( & pDecCont -> storage, noOutputReordering ) ; if ( rv!= HANTRO_OK ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> OK: <S2SV_blank> return <S2SV_blank> %p"", ( void * ) pDecCont ) ; DEC_API_TRC ( pDecCont -> str ) ; return ( H264SWDEC_MEMFAIL ) ; }",0
1243,"<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_space ; struct ipv6_txoptions * opt_space <S2SV_ModStart> ) ) { opt_space = rcu_dereference_protected ( np -> opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt_space ) * opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt_space ) * opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt_space ) * opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk )",0
1244,"<S2SV_ModStart> drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( ip_options_compile ( dev_net ( dev ), opt,",0
1245,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1246,"<S2SV_ModStart> ; rt = rcu_dereference_protected ( net -> ipv4. rt_cache, lockdep_is_held ( & net -> ipv4. rt_cache, lockdep_is_held ( & net -> ipv4. rt_cache ) ) ; if ( rt == NULL ) { err = - EINVAL ; goto errout ; } <S2SV_ModStart> = table_id ; rcu_assign_pointer ( net -> ipv4. rt_cache, rt ) ; if ( err < 0 ) { err = - EINVAL ; goto errout ; } rcu_assign_pointer ( net -> ipv4. rt_cache, rt ) ; lockdep_is_held ( & net -> ipv4. rt_cache, & net -> ipv4. rt_cache ) ; unlock_rcu ( & net -> ipv4. rt_cache, lockdep_is_held ( & net -> ipv4. rt_cache, lockdep_is_held ( & net -> ipv4. rt_cache ) ) ; err = - EINVAL ; goto errout ; } rcu_assign_pointer ( net -> ipv4. rt_cache, rt )",0
1247,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1248,"<S2SV_ModStart> goto errout ; if ( oggpack_eop ( opb, 2 ) ) goto errout ; <S2SV_ModStart> errout ; } if ( oggpack_eop ( opb, 3 ) ) { int cascade = oggpack_read ( opb, 3 ) ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade >= ci -> books ) goto errout ; info -> stagemasks [ j ] = cascade ; } for ( j = 0 ; j < info -> partitions ; j ++ ) { int book = ( unsigned char ) oggpack_read ( opb, 3 ) ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( book >= ci -> books ) goto errout ; info -> stagemasks [ j ] = cascade ; } for ( j = 0 ; j < info -> partitions ; j ++ ) { if ( ( info -> stagemasks [ j ] >> k ) & 1 ) { int book = (",0
1249,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog <S2SV_ModStart> 0 ) ) js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
1250,"<S2SV_ModStart> break ; } if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++",0
1251,"<S2SV_ModStart> ; krb5_key_data * key_data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents [ 1 ] = NULL ; } } for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_",0
1252,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
1253,"<S2SV_ModStart> ] ) ; sqlite3_int64 <S2SV_ModEnd> zInput = sqlite3_malloc <S2SV_ModStart> 1 ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; pCsr -> zInput [ nByte ] = 0 ; rc = pTab -> pMod -> xOpen ( pTab -> pTok, pCsr -> zInput, nByte, & pCsr -> pCsr ) ; if ( rc == SQLITE_NOMEM ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; pCsr -> zInput [ nByte ] = 0 ; rc = pTab -> pMod -> xOpen ( pTab -> pTok, pCsr -> zInput, nByte, & pCsr -> pCsr ) ; if ( rc == SQLITE_OK ) { pCsr -> pCsr -> pTokenizer = pTab -> pTok ; } }",0
1254,<S2SV_ModStart> filp ) { if ( IS_ERR ( filp ) ) return PTR_ERR ( filp ) ;,0
1255,"<S2SV_ModStart> expr_ty iter, asdl_seq * orelse, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",0
1256,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart>, name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( ( param -> testflag & T_SILENT ) ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( ( param -> testflag & T_SILENT ) ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( ( param -> testflag & T_SILENT ) ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( ( param -> testflag & T_SILENT ) ) printf ( ""- <S2SV_blank> Sorting",0
1257,"<S2SV_ModStart> { opt = rcu_dereference_protected ( inet_sk ( sk ) -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( opt ) { atomic_sub ( opt -> opt_flen, & sk -> sk_omem_alloc ) ; opt = rcu_dereference_protected ( sk -> sk_omem_alloc, sock_owned_by_user ( sk ) ) ; if ( opt ) { atomic_sub ( opt -> opt_flen, & sk -> sk_omem_alloc ) ; opt = xchg ( & sk -> sk_omem_alloc, opt ) ; if (! opt ) { atomic_sub ( opt -> opt_flen, & sk -> sk_omem_alloc ) ; opt = rcu_dereference_protected ( sk -> sk_omem_alloc, sock_owned_by_user ( sk ) ) ; if (! opt ) { atomic_sub ( opt -> opt_flen, & sk -> sk_omem_alloc ) ; opt = xchg ( & sk -> sk_omem_alloc, opt ) ; } } }",0
1258,<S2SV_ModStart> 1 ; } if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { vcpu -> run -> exit_reason = KVM_EXIT_INTERNAL_ERROR ; vcpu -> run -> internal. suberror = KVM_INTERNAL_ERROR_SIMUL_EX ; vcpu -> run -> internal. ndata = 3 ; vcpu -> run -> internal. data [ 0 ] = vect_info ; vcpu -> run -> internal. data [ 1 ] = intr_info ; vcpu -> run -> internal. data [ 2 ] = cr2 ; vcpu -> run -> exit_reason = KVM_EXIT_INTERNAL_ERROR ; vcpu -> run -> <S2SV_ModEnd> suberror = KVM_INTERNAL_ERROR_SIMUL_EX,0
1259,"<S2SV_ModStart> ; case NGHTTP2_ERR_STREAM_ID_NOT_AVAILABLE : return ""Stream <S2SV_blank> ID <S2SV_blank> is <S2SV_blank> not <S2SV_blank> available"" ; case NGHTTP2_ERR_STREAM_SHUT_WR : return ""The <S2SV_blank> transmission <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_STREAM_ID_NOT_AVAILABLE : return ""Stream <S2SV_blank> ID <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_STREAM_ID_NOT_AVAILABLE : return ""Stream <S2SV_blank> ID <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_STREAM_ID_NOT_AVAILABLE : return ""Stream <S2SV_blank> ID <S2SV_blank> is <S2SV_blank> not <S2SV_blank> available <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_STREAM_ID_NOT_AVAILABLE : return ""Stream <S2SV_blank> ID <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_STREAM_ID_NOT_AVAILABLE : return ""Stream <S2SV_blank> ID <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_GOAWAY_AL",0
1260,"<S2SV_ModStart> UINT error ; if (! Stream_SafeSeek ( s, sizeof ( eventId ) ) ) { WLog_ERR ( TAG, ""rdpei_recv_pdu: <S2SV_blank> missing <S2SV_blank> eventId <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"" ) ; return UINT_INVALID_DATA ; }",0
1261,<S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_hops ( pData <S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_wakeup ( pData <S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_wakeup ( pData <S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_wakeup ( pData <S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_wakeup ( pData <S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_wakeup ( pData <S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_wakeup ( pData <S2SV_ModStart> - 1 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_wakeup ( pData <S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_wakeup ( pData <S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_wakeup ( pData <S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_wakeup ( pData <S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_wakeup ( pData <S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_wakeup ( pData,0
1262,"<S2SV_ModStart> 0 ) return <S2SV_ModEnd> - ENOSPC ; <S2SV_ModStart> - ENOSPC ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list,",0
1263,"<S2SV_ModStart> struct flowi6 fl6 ; struct ipv6_txoptions * opt <S2SV_ModStart> ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ; if (! rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if (",0
1264,"<S2SV_ModStart> out_free ; } if ( path. dentry -> d_sb -> s_type == & ecryptfs_fs_type ) { rc = - EINVAL ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; } if ( path. dentry -> d_sb -> s_type == & ecryptfs_fs_type ) { rc = - EINVAL ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; } if ( path. dentry -> d_sb -> s_type == & ecryptfs_fs_type ) { rc = - EINVAL ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; }",0
1265,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1266,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1267,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> ; WLog_DBG ( TAG <S2SV_ModEnd>, ""RDP_NEG_FAILURE"" ) <S2SV_ModStart> = NEGO_STATE_FAIL ; return TRUE",0
1268,"<S2SV_ModStart>, last_pwd ; osa_princ_ent_rec hist_princ ; if ( keepold ) return KADM5_PROTECT_PRINCIPAL ; hist_princ = adb. princ ; ret = apply_keysalt_policy ( handle, adb. policy, n_ks_tuple, ks_tuple, & new_n_ks_tuple, & new_n_ks_tuple, & new_n_ks_tuple ) ; if ( ret ) goto done ; ret = apply_keysalt_policy ( handle, adb. policy, n_ks_tuple, ks_tuple, & new_n_ks_tuple, & new_n_ks_tuple, & new_n_ks_tuple, & new_n_ks_tuple, & new_n_ks_tuple, & new_n_ks_tuple, & new_n_ks_tuple, & new_n_ks_tuple ) ; if ( ret ) goto done ; ret = apply_keysalt_policy ( handle, adb. policy, n_ks_tuple, & new_n_ks_tuple, & new_n_",0
1269,"<S2SV_ModStart> = 0 ; bn_t <S2SV_ModEnd> t ; RLC_TRY <S2SV_ModStart> RLC_OK ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; switch ( operation ) { case RSA_ENC : bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { rand_bytes ( & pad, 1 ) ; bn_add_dig ( m, m, pad ) ; } bn_lsh ( m, m, 8 ) ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_ERR ; } * p_len = m_len ; m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!=",0
1270,<S2SV_ModStart> ; if (! is_undef ( r1 ) ) mem [ r1. i ] = * ( uint64_t * ) ( ip + 1 ) ; ip += sizeof ( uint64_t ) ; <S2SV_ModStart> = * ( uint64_t * ) ( ip + 1 ) ; ip += sizeof ( uint64_t ) ; <S2SV_ModStart> = * ( uint64_t * ) ( ip + 1 ) ; ip += sizeof ( uint64_t ) ; if ( mem [ r1. i ] > ( uint64_t ) mem [ r1. i ] ) mem [ r1. i ] = * ( uint64_t * ) ( ip + 1 ) ; ip += sizeof ( uint64_t ) ; <S2SV_ModStart> = * ( uint64_t * ) ( ip + 1 ) ; ip += sizeof ( uint64_t ) ; <S2SV_ModStart> = * ( uint64_t * ) ( ip + 1 ) ; ip += sizeof ( uint64_t ) ; if ( mem [ r1. i ] > ( uint64_t ) mem [ r1. i ] ) mem [ r1. i ] = * ( uint64_t * ) ( ip + 1 ) ; ip +=,0
1271,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1272,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1273,"<S2SV_ModStart> ( psf = psf_calloc <S2SV_ModEnd> ( 1, <S2SV_ModStart> ) ) == NULL ) { sf_errno = SFE_MALLOC_FAILED ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf -> file. mode = mode ; if ( strcmp ( path, ""-"" ) == 0 ) psf -> error = psf_set_stdio ( psf ) ; else psf -> error = psf_fopen ( psf ) ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf -> file. mode = mode ; if ( strcmp ( path, ""-"" ) == 0 ) psf -> error = psf_set_stdio ( psf ) ; else psf -> error = psf_fopen ( psf, sfinfo ) ; return NULL ;",0
1274,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> ++ j ) <S2SV_ModEnd> count [ i,0
1275,"<S2SV_ModStart> { token ++ ; } if ( token [ 0 ] == '[' ) { token ++ ; } if (! strncmp ( token, ""lsl"", 3 ) ) { op -> operands [ operand ]. shift = ARM_LSL ; } else if (! strncmp ( token, ""lsr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM",0
1276,"<S2SV_ModStart> cpi ) { MACROBLOCKD * const xd = & cpi -> td. <S2SV_ModStart> -> act_zbin_adj = 0 <S2SV_ModEnd> ; vpx_setup_src_planes ( <S2SV_ModStart> = 0 ; vpx_setup_pre_planes ( xd, 0, cpi -> Source, 0, 0 ) ; vpx_setup_dst_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; xd -> mi [ 0 ] -> mbmi. mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_cols ) ;",0
1277,"<S2SV_ModStart> = htc_request_check_host_hdr ( sp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_REQ, HTTP_HDR_URL, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_URL, HTTP_HDR_PROTO, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } http_ProtoVer ( hp ) ; retval = htc_request_check_host_hdr ( sp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_Error, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return",0
1278,"<S2SV_ModStart> ( image ) ) <S2SV_ModEnd> ; status = <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, <S2SV_ModStart> ""Im",0
1279,"<S2SV_ModStart> ; mutex_lock ( & snd_card_mutex ) ; if ( idx >= SNDRV_CARDS ) { mutex_unlock ( & snd_card_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> (range <S2SV_blank> 0-%i), <S2SV_blank> error: <S2SV_blank> %d\\n"", idx, snd_ecards_limit - 1, err ) ; kfree ( card ) ; return err ; } if ( idx >= SNDRV_CARDS ) { mutex_unlock ( & snd_card_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> (range <S2SV_blank> 0-%i), <S2SV_blank> error: <S2SV_blank> %d\\n"", idx, snd_ecards_limit - 1, err ) ; kfree ( card ) ; return err ; } mutex_unlock ( & snd_card_mutex ) ; if ( idx >= SNDRV_CARDS ) { mutex_unlock ( & snd_card_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> (range",0
1280,"<S2SV_ModStart> ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } if ( s_max_octets < sig_len ) { return ""2"" ""exponentiation <S2SV_blank> failed; <S2SV_blank> too <S2SV_blank> many <S2SV_blank> octets"" ; } <S2SV_ModStart> + 3 ; if ( s_max_octets < sig_len ) { return ""2"" ""exponentiation <S2SV_blank> failed; <S2SV_blank> too <S2SV_blank> many <S2SV_blank> octets"" ; } <S2SV_ModStart> += padlen + 4 ; if ( s_max_octets < sig_len ) { return ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } if ( s_max_octets < sig_len ) { return ""2"" ""exponentiation <S2SV_blank> failed; <S2SV_blank> too <S2SV_blank> many <S2SV_blank> octets"" ; } <S2SV_ModStart> += padlen + 4 ; if ( s_max_octets < sig_len ) { return ""2"" ""exponentiation <S2SV_blank> failed; <S2SV_blank> too <S2SV_blank> many <S2SV_blank> octets"" ; } if ( s_max_octets < sig_len ) { return ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; }",0
1281,"<S2SV_ModStart> len ) ; if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len + sizeof ( tETH_HDR ) ) ; return - 1 ; } <S2SV_ModStart> len ) ; if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len ) ; return - 1 ; } memcpy ( packet + sizeof ( tETH_HDR ), buf, len ) ; if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len + sizeof ( tETH_HDR ) ) ; return - 1 ; }",0
1282,"<S2SV_ModStart> u1_field_pic_flag ) { memset ( ps_seq, 0, sizeof ( dec_seq_params_t ) * ( sizeof ( dec_seq_params_t ) * ( sizeof ( dec_seq_params_t ) * ( sizeof ( dec_seq_params_t ) * ( sizeof ( dec_seq_params_t ) ) ) ), 0, sizeof ( dec_seq_params_t ) * ( sizeof ( dec_seq_params_t ) * ( sizeof ( dec_seq_params_t ) * ( sizeof ( dec_seq_params_t ) * ( sizeof ( dec_seq_params_t ) * ( sizeof ( dec_seq_params_t ) * ( sizeof ( dec_seq_params_t ) * ( sizeof ( dec_seq_params_t ) ) ) ) ) ), sizeof ( dec_seq_params_t ) * ( sizeof ( dec_seq_params_t ) * ( sizeof ( dec_seq_params_t ) * ( sizeof ( dec_seq_params_t ) * ( sizeof ( dec_seq_params_t ) * ( sizeof ( dec_seq_params_t )",0
1283,"<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; OPENSSL_seterror ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; <S2SV_ModStart> OPENSSL_free ( rdata ) ; OPENSSL_seterror ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; <S2SV_ModStart> OPENSSL_free ( item ) ; OPENSSL_seterror ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; OPENSSL_free ( item ) ; OPENSSL_seterror ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; <S2SV_ModStart> OPENSSL_free ( item ) ; OPENSSL_seterror ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; return ( 0 ) ; } if ( pqueue_size ( queue -> q ) >= 100 ) { OPENSSL_seterror ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; OPENSSL_seterror ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR )",0
1284,"<S2SV_ModStart> ; if ( args -> buffer_count > I915_MAX_BUFFERS ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } if ( args -> buffer_count > I915_MAX_BUFFERS ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } exec2_list = kmalloc ( sizeof ( * exec2_list ) * args -> buffer_count, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if ( exec2_list == NULL ) exec2_list = drm_malloc_ab ( sizeof ( * exec2_list ), args -> buffer_count ) ; if ( exec2_list == NULL ) exec2_list = drm_malloc_ab ( sizeof ( * exec2_list ), args -> buffer_count ) ; if ( exec2_list == NULL ) { DRM_DEBUG ( ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> exec <S2SV_blank> list <S2SV_blank> for",0
1285,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; struct pci_dev <S2SV_ModStart> ; struct pci_dev <S2SV_ModEnd> * pdev ; <S2SV_ModStart> PTR_ERR ( karg <S2SV_ModEnd> ) ) { <S2SV_ModStart> PTR_ERR ( karg <S2SV_ModEnd> ) ) ; <S2SV_ModStart> PTR_ERR ( karg <S2SV_ModEnd> ) ) ; <S2SV_ModStart> PTR_ERR ( karg <S2SV_ModEnd> ) ) ; <S2SV_ModStart> return - ENODEV ; } if ( ( ( iocnum = mpt_verify_adapter ( ioc, & iocnum ) ) < 0 ) || ( ioc == NULL ) ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mpt_getiocinfo() <S2SV_blank> - <S2SV_blank> adapter <S2SV_blank> not <S2SV_blank> found!\\n"", __FILE__, __LINE__, iocnum ) ; kfree ( karg ) ; return - ENODEV ; } if ( ( ( iocnum = mpt_verify_adapter ( iocnum, & ioc ) ) < 0 ) || ( ioc == NULL ) ) { printk ( MYIOC_s_ERR_FMT ""%s",0
1286,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
1287,"<S2SV_ModStart> * mntent, <S2SV_ModEnd> const char * <S2SV_ModStart> mntent -> mnt_type, <S2SV_ModEnd> mntdata, optional <S2SV_ModStart> mnt_type, mntflags <S2SV_ModEnd>, mntdata,",0
1288,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1289,"<S2SV_ModStart> * ab ) { <S2SV_ModEnd> const char __user <S2SV_ModStart> * p ; <S2SV_ModEnd> char * buf <S2SV_ModStart> ; audit_log_format ( * ab, ""argc=%u"", context -> execve. argc ) ; buf = kmalloc ( MAX_EXECVE_AUDIT_LEN <S2SV_ModEnd> + 1, <S2SV_ModStart> GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if ( len <= 0 ) break ; p += len ; } kfree ( buf ) ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if ( len <= 0",0
1290,"<S2SV_ModStart>, O_WRONLY | O_CREAT | O_CLOEXEC | O_NOCTTY <S2SV_ModEnd> ) ; if",0
1291,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> char line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; char <S2SV_ModStart> FALSE ; } if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = file_error ( wth -> random_fh, err_info ) ; if ( * err == 0 ) { * err = WTAP_ERR_SHORT_READ ; } return FALSE ; } if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = file_error ( wth -> random_fh, err_info ) ; if ( * err == 0 ) { * err = WTAP_ERR_SHORT_READ ; } return FALSE ; } if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = WTAP_ERR_SHORT_READ ; } if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = WTAP_ERR_SHORT_READ ; } return FALSE ; }",0
1292,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ) ; u64 <S2SV_ModEnd> irq_time ; rq <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1293,"<S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"",",0
1294,"<S2SV_ModStart> st ) { <S2SV_ModEnd> unsigned long flags <S2SV_ModStart> ; struct blkif_response resp <S2SV_ModEnd> ; int notify <S2SV_ModStart> case BLKIF_PROTOCOL_NATIVE : memcpy ( RING_GET_RESPONSE ( & blk_rings -> native, blk_rings -> native. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_32 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_32, blk_rings -> x86_32. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_64 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_64, blk_rings -> x86_64. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; default : BUG ( ) ; } blk_rings -> common. rsp_prod_pvt ++ ; RING_PUSH_RESPONSES_AND_CHECK_NOTIFY ( & blk_rings -> common, notify ) ; spin_unlock",0
1295,<S2SV_ModStart> if (! ( mask & KADM5_ATTRIBUTES ) ||! ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX <S2SV_ModEnd> ) ) return,0
1296,"<S2SV_ModStart> ; if ( datao + 12 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao, EXIF_BYTE_ORDER_INTEL ) ; if ( datao + 2 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + datao, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteFuj",0
1297,"<S2SV_ModStart> 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; }",0
1298,"<S2SV_ModStart> case ICMP_ECHO_REPLY : ND_TCHECK_16BITS ( & dp -> icmp_seq ) ; <S2SV_ModStart> ) snprintf ( buf, sizeof ( buf ), ""echo <S2SV_blank> %s, <S2SV_blank> id <S2SV_blank> %u, <S2SV_blank> seq <S2SV_blank> %u"", dp -> icmp_id, EXTRACT_16BITS ( & dp -> icmp_seq ), EXTRACT_16BITS ( & dp -> icmp_seq ) ) ; break ; case ICMP_ECHO_REPLY : ND_TCHECK ( & dp -> icmp_seq ) ; ( void ) snprintf ( buf, sizeof ( buf ), ""echo <S2SV_blank> %s, <S2SV_blank> id <S2SV_blank> %u, <S2SV_blank> seq <S2SV_blank> %u"", dp -> icmp_id, EXTRACT_16BITS ( & dp -> icmp_seq ), EXTRACT_16BITS ( & dp -> icmp_seq ), EXTRACT_16BITS ( & dp -> icmp_seq ) ) ; ND_TCHECK ( & dp -> icmp_seq ) ; ( void ) snprintf ( buf, sizeof ( buf ), ""echo <S2SV_blank> %s, <S2SV_blank> id <S2SV_blank> %u, <S2SV_blank> seq <S2SV_blank> %",0
1299,<S2SV_ModStart> flags ) { <S2SV_ModEnd> struct fscrypt_info * <S2SV_ModStart> 0 ; } dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ) <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ) <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ),0
1300,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> unbind_ports ( void <S2SV_ModStart> ; CRYPTO_THREAD_write_lock ( stunnel_locks [ LOCK_SECTIONS ] <S2SV_ModEnd> ) ; opt <S2SV_ModStart> servname ) ; if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; service_free ( opt ) ; while ( opt ) { unsigned i ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names ) { opt -> option. retry = 0 ; } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname ) ; for ( i = 0 ; i < opt -> local",0
1301,"<S2SV_ModStart> ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } if ( argc < 2 ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Not <S2SV_blank> enough <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } result = ( * pack ) ( argc, numbers, & error ) ; if ( error!= NULL ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""%s"", error ) ; return ARCHIVE_WARN ; } result = ( * pack ) ( argc, numbers, & error ) ; if ( error!= NULL ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""%s"", error ) ;",0
1302,<S2SV_ModStart> parent ) ; if ( i -> width > i -> parent -> width ) i -> width = i -> parent -> width ; if ( i -> height > i -> parent -> height ) i -> height = i -> parent -> height ; if ( i -> width > i -> parent -> width ) i -> width = i -> parent -> width ; if ( i -> height > i -> parent -> height ) i -> height = i -> parent -> height ; if ( i -> width > i -> parent -> width ) i -> width = i -> parent -> width ; if ( i -> height > i -> parent -> height ) i -> height = i -> parent -> height ; if ( i -> width > i -> parent -> width ) i -> width = i -> parent -> width ; if ( i -> height > i -> parent -> height ) i -> height = i -> parent -> height ; if ( i -> height > i -> parent -> height ) i -> height = i -> parent -> height ; if ( i -> width > i -> parent -> width ) i -> height = i -> parent -> width ; if ( i -> height > i -> parent -> height ) i -> height = i -> parent -> height ; if ( i -> width > i ->,0
1303,"<S2SV_ModStart> n ) ; if ( p + l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( p + l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( p + l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if (",0
1304,"<S2SV_ModStart> RAnalOp next_op ; if ( len < op -> size ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; } else { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; if ( len < op -> size ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, buf + op -> size, len - op -> size, cpu ) ; } else { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; if ( len < op -> size ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, len - op -> size, cpu )",0
1305,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [",0
1306,"<S2SV_ModStart> void ) { if ( recovery_sanity_check ( ) ) { recovery_sanity_report ( ""recovery_delete_character"" ) ; recovery_sanity_report ( ""recovery_delete_character"" ) ; recovery_sanity_report ( ""recovery_delete_character"" ) ; recovery_sanity_report ( ""recovery_delete_character"" ) ; if ( recovery_sanity_report ( ""recovery_delete_character"" ) ) { recovery_sanity_report ( ""recovery_delete_character"" ) ; } else if ( recovery_sanity_report ( ""recovery_delete_character"" ) ) { recovery_sanity_report ( ""recovery_delete_character"" ) ; recovery_sanity_report ( ""recovery_delete_character"" ) ; recovery_sanity_report ( ""recovery_delete_character"" ) ; } if ( recovery_sanity_report ( ""recovery_delete_character"" ) ) { recovery_sanity_report ( ""recovery_delete_character"" ) ; } else if ( recovery_sanity_report ( ""recovery_delete_character"" ) ) { recovery_sanity_report ( ""recovery_delete_character",0
1307,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT7 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT8 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT9 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT10 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT11 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT12 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT13 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_E8 <S2SV_ModEnd> ) )",0
1308,"<S2SV_ModStart> packets ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1309,"<S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket, n ) ; if ( n < 0 ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket, n ) ; goto error ; } <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket, n ) ; n = read ( req -> socket, rbuf, sizeof ( rbuf ) ) ; if ( n < 0 ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket, n ) ; goto error ; } if ( n < 0 ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket, n ) ; goto error ; } n = read ( req -> socket, rbuf, sizeof ( rbuf ) ) ; if ( n < 0 ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket, n",0
1310,<S2SV_ModStart> ps_slice_hdr ) { dpb_mgr_t * ps_dpb_mgr = ps_codec -> pv_dpb_mgr ; buf_mgr_t * ps_mv_buf_mgr = ps_codec -> pv_mv_buf_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; buf_mgr_t * ps_mv_buf_mgr = ( buf_mgr_t * ) ps_codec -> pv_mv_buf_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; buf_mgr_t * ps_mv_buf_mgr = ( buf_mgr_t * ) ps_codec,0
1311,"<S2SV_ModStart> PTRACE_GET_THREAD_AREA : ret = get_user ( task_thread_info ( child ) -> tp_value, datap ) ; break ; case PTRACE_SET_THREAD_AREA : ret = put_user ( task_thread_info ( child ) -> syscall, datap ) ; break ; case PTRACE_GET_SYSCALL : task_thread_info ( child ) -> syscall = data ; break ; case PTRACE_GETFPREGS : ret = copy_regset_from_user ( child, & user_arm_view, REGSET_FPR, 0, sizeof ( union fp_state ), datap ) ; break ; case PTRACE_SETFPREGS : ret = copy_regset_from_user ( child, & user_arm_view, REGSET_FPR, 0, sizeof ( union fp_state ), datap ) ; break ; case PTRACE_SETFPREGS : ret = copy_regset_from_user ( child, & user_arm_view, REGSET_FPR, 0, sizeof ( union fp_state ), datap ) ; break ; # ifdef CONFIG_IWMM",0
1312,"<S2SV_ModStart> goto fail ; } temp = drm_malloc_ab ( temp_size, 1 ) ; if (! temp ) { DRM_ERROR ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> storage <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> in <S2SV_blank> bin/render <S2SV_blank> CLs.\\n"" ) ; ret = - ENOMEM ; goto fail ; } temp = drm_malloc_ab ( temp_size, 1 ) ; if (! temp ) { DRM_ERROR ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> storage <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> in <S2SV_blank> render <S2SV_blank> CLs.\\n"" ) ; ret = - ENOMEM ; goto fail ; } if ( copy_from_user ( bin, ( void __user * ) ( uintptr_t ) args -> bin_cl, args -> bin_cl_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( exec -> uniforms_u, ( void __user * ) ( uintptr_t ) args -> uniforms_u, args -> uniforms_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( exec -> shader_state, ( void __user * ) ( uintptr",0
1313,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart>, int fmt, printbuffer * p <S2SV_ModStart> child ) { if (! p ) p = ( printbuffer * ) cJSON_malloc ( 8 ) ; if (! p ) p = ( printbuffer * ) cJSON_malloc ( 8 ) ; if (! p ) p = ( printbuffer * ) cJSON_malloc ( 8 ) ; if (! p ) p = ( printbuffer * ) cJSON_malloc ( 8 ) ; if (! p ) p = ( printbuffer * ) cJSON_malloc ( 8 ) ; if (! p ) p = ( printbuffer * ) cJSON_malloc ( 8 ) ; if (! p ) p = ( printbuffer * ) cJSON_malloc ( 8 ) ; if (! p ) p = ( printbuffer * ) cJSON_malloc ( 8 ) ; if (! p ) p = ( printbuffer * ) cJSON_malloc ( 8 ) ; if (! p ) p = ( printbuffer * ) cJSON_malloc ( 8 ) ; if (! p ) p =",0
1314,"<S2SV_ModStart> int tagval, BOOL * raw_length <S2SV_ModStart> length ) { if (! s_check ( s ) ) { rdp_protocol_error ( ""ber_parse_header(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> header <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & s -> s ) ; return False ; } if (! s_check ( s ) ) { rdp_protocol_error ( ""ber_parse_header(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> header <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & s -> s ) ; return False ; } if (! s_check ( s ) ) { rdp_protocol_error ( ""ber_parse_header(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> header <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & s -> s ) ; return False ; } if (! s_check ( s ) ) { rdp_protocol_error ( ""ber_parse_header(), <S2SV_blank> consume <S2SV_blank> header <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & s -> s ) ; return False ; } if (! s_check ( s ) ) { rdp_protocol_error ( ""ber_parse_header(),",0
1315,"<S2SV_ModStart> sk ) ; if ( writable ) { <S2SV_ModStart> ; if (! skb_queue_empty ( & sk -> sk_receive_queue ) ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask ; } <S2SV_ModStart> ; if (! skb_queue_empty ( & sk -> sk_receive_queue ) ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; sock_put ( sk ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask <S2SV_ModEnd> ; } <S2SV_null>",0
1316,<S2SV_ModStart> [ 4 ] ; size_t <S2SV_ModEnd> value ; if <S2SV_ModStart> ( size_t ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value = ( size_t ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 16 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 8 ; value |= ( size_t ) buffer [ 4 ] ; quantum. unsigned_value = ( value & 0xffffffff <S2SV_ModEnd> ) ; return,0
1317,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart>",0
1318,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; task_lock ( task <S2SV_ModEnd> ) ; ioc <S2SV_ModStart> ; ioc = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context ; task <S2SV_ModEnd> -> io_context = <S2SV_ModStart> ; task_unlock ( task <S2SV_ModEnd> ) ; if,1
1319,"<S2SV_ModStart> ; int ret ; # if XTENSA_HAVE_COPROCESSORS coprocessor_release_all ( ti ) ; regs -> cp0 = xtregs -> cp0 ; ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ) ; ret |= __copy_from_user ( & regs -> xtregs_opt, & xtregs -> opt, sizeof ( xtregs -> opt ) ) ; ret |= __copy_from_user ( & ti -> xtregs_user, & xtregs -> user, sizeof ( xtregs -> user ) ) ; ret |= __copy_from_user ( & ti -> xtregs_opt, & xtregs -> opt, sizeof ( xtregs -> opt ) ) ; ret |= __copy_from_user ( & ti -> xtregs_user, & xtregs ->",0
1320,<S2SV_ModStart> 0 ) { if ( header -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { *,0
1321,"<S2SV_ModStart> data ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> int i ; if (! pci_is_enabled ( dev ) ) return ret ; for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; } } ret = xen_pcibk_read_config_word ( dev, offset, value, data ) ; if ( ret ) return ret ; for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; } return ret <S2SV_ModEnd> ; } <S2SV_null>",0
1322,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * frame = va_arg <S2SV_ModEnd> ( args, <S2SV_ModStart> * ) ; yuv_config_t * yuv_config = va_arg ( args, yuv_config_t * ) ; YV12_BUFFER_CONFIG * yuv_config = va_arg ( args, yuv_config_t * ) ; YV12_BUFFER_CONFIG * yuv_config = va_arg ( args, yuv_config_t * ) ; YV12_BUFFER_CONFIG * yuv_config = va_arg ( args, yuv_config_t * ) ; yuv_config2image ( & frame -> img, yuv_config, NULL ) ; return VPX_CODEC_OK <S2SV_ModEnd> ; } <S2SV_null>",0
1323,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> } } <S2SV_null>,0
1324,"<S2SV_ModStart> plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { pr_debug ( ""EPERM: <S2SV_blank> io_submit: <S2SV_blank> invalid <S2SV_blank> context <S2SV_blank> id\\n"" ) ; return - EPERM ; } <S2SV_ModStart> & batch ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { pr_debug ( ""EPERM: <S2SV_blank> io_submit: <S2SV_blank> access <S2SV_blank> denied <S2SV_blank> by <S2SV_blank> user\\n"" ) ; return - EPERM ; } if (! capable ( CAP_SYS_RAWIO ) ) { pr_debug ( ""EPERM: <S2SV_blank> io_submit: <S2SV_blank> access <S2SV_blank> denied <S2SV_blank> by <S2SV_blank> user\\n"" ) ; return - EPERM ; } if ( unlikely ( capable ( CAP_SYS_RAWIO ) ) ) { pr_debug ( ""EPERM: <S2SV_blank> io_submit: <S2SV_blank> access <S2SV_blank> denied <S2SV_blank> by <S2SV_blank> user\\n"" ) ; return - EPERM ; } if (! capable ( CAP_SYS_RAWIO ) ) { pr_debug ( ""EPERM: <S2SV_blank> io_submit: <S2SV_blank> access <S2SV_blank> denied <S2SV_blank> by <S2SV_blank> user\\n"" ) ; return -",0
1325,"<S2SV_ModStart> dwc ; list_del ( & req -> list ) ; req -> remaining = 0 ; if ( req -> request. status == - EINPROGRESS ) req -> request. status = status ; if ( req -> trb ) usb_gadget_unmap_request_by_dev ( dwc -> sysdev, & req -> request, req -> direction ) ; req -> trb = NULL ; spin_lock ( & dwc -> lock ) ; usb_gadget_giveback_request ( & dep -> endpoint, & req -> request ) ; spin_unlock ( & dwc -> lock ) ; usb_gadget_giveback_request ( & dep -> endpoint, & req -> request ) ; spin_lock ( & dwc -> lock ) ; <S2SV_ModEnd> pm_runtime_put ( dwc",0
1326,<S2SV_ModStart> : # if YYSTACK_RELOCATE <S2SV_ModEnd> goto yyexhaustedlab ; <S2SV_ModStart> : # if YYSTACK_RELOCATE <S2SV_ModEnd> goto yyexhaustedlab ; <S2SV_ModStart> : # if YYSTACK_RELOCATE <S2SV_ModEnd> goto yyexhaustedlab ; <S2SV_ModStart> : # if YYSTACK_RELOCATE <S2SV_ModEnd> goto yyexhaustedlab ; <S2SV_ModStart> : # if YYSTACK_RELOCATE <S2SV_ModEnd> goto yyexhaustedlab ; <S2SV_ModStart> : # if YYSTACK_RELOCATE <S2SV_ModEnd> goto yyexhaustedlab ; <S2SV_ModStart> : # if YYSTACK_RELOCATE <S2SV_ModEnd> goto yyexhaustedlab ; <S2SV_ModStart> : # if YYSTACK_RELOCATE <S2SV_ModEnd> goto yyexhaustedlab ; <S2SV_ModStart> : # if YYSTACK_RELOCATE <S2SV_ModEnd> goto yyexhaustedlab ; <S2SV_ModStart> : # if YYSTACK_RELOCATE <S2SV_ModEnd> goto yyexhaustedlab ; <S2SV_ModStart> : # if YYSTACK_RELOCATE <S2SV_ModEnd> goto yyexhaustedlab ; <S2SV_ModStart> : # if YYSTACK_RELOCATE <S2SV_ModEnd> goto yyexhaustedlab ; <S2SV_ModStart> : # if YYSTACK_RELOCATE <S2SV_ModEnd> goto,0
1327,"<S2SV_ModStart> = sas_revalidate_domain, <S2SV_ModEnd> [ DISCE_PROBE ] <S2SV_ModStart> DISCE_SUSPEND ] = sas_suspend_devices <S2SV_ModEnd>, [ DISCE_RESUME <S2SV_ModStart> DISCE_DESTRUCT ] = sas_destruct_devices <S2SV_ModEnd>, } ;",0
1328,"<S2SV_ModStart> * info, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart>! rep_quick && init_io_cache ( & info -> read_cache, info -> dfile, ( uint ) param -> read_buffer_length, READ_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, READ_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, (",0
1329,"<S2SV_ModStart> } ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN uECC_word_t * p = signature ; # else uECC_word_t * p = ( uECC_word_t * ) signature ; # endif <S2SV_ModStart> curve ) ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, num_n_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, num_n_words ) ) { return 0",0
1330,"<S2SV_ModStart> trunc : if (! ND_TTEST2 ( * bp, length ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|dao-truncated]"" ) ) ; goto trunc ; } <S2SV_ModStart> : if (! ND_TTEST2 ( * bp, length ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|dao-length <S2SV_blank> too <S2SV_blank> short]"" ) ) ; goto trunc ; <S2SV_ModStart> : if (! ND_TTEST2 ( * bp, length ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|dao-length <S2SV_blank> too <S2SV_blank> short]"" ) ) ; goto trunc ; } <S2SV_ModStart> : if (! ND_TTEST2 ( * bp, length ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|dao-length <S2SV_blank> too <S2SV_blank> short]"" ) ) ; goto trunc ; } <S2SV_ModStart> : if (! ND_TTEST2 ( * bp, length ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|dao-length <S2SV_blank> too <S2SV_blank> short]"" ) ) ; goto trunc ; }",0
1331,"<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; err = <S2SV_ModStart> out ; if ( msg -> msg_name ) { struct sockaddr_in * sin = ( struct sockaddr_in * ) msg -> msg_name ; sin -> sin_family = family ; sin -> sin_port = 0 ; sin -> sin_zero. s_addr = ip_hdr ( skb ) -> saddr ; memset ( sin -> sin_zero, 0, sizeof ( sin -> sin_zero ) ) ; } if ( flags & MSG_TRUNC ) { skb_copy_datagram_iovec ( skb, 0, msg -> msg_iov, copied ) ; if ( copied > len ) { msg -> msg_flags |= MSG_TRUNC ; } copied = skb_copy_datagram_iovec ( skb, 0, msg -> msg_iov, copied ) ; if ( copied > len ) { msg -> msg_flags |= MSG_TRUNC ; } err = skb_copy_datagram_iovec ( skb, 0, msg -> msg_iov, copied, msg -> msg_iov, len ) ; if ( err ) goto done ; sock_recv_",0
1332,"<S2SV_ModStart> lblk ; flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN | EXT4_EX_NOCACHE ; if ( mode & FALLOC_FL_KEEP_SIZE ) flags |= EXT4_GET_BLOCKS_KEEP_SIZE ; if ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENT ) ) flags |= EXT4_GET_BLOCKS_EXTENT <S2SV_ModStart> = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN ; mutex_lock ( & inode -> i_mutex ) ; if ( mode & FALLOC_FL_KEEP_SIZE ) flags |= EXT4_GET_BLOCKS_KEEP_SIZE ; if ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENT ) flags |= EXT4_GET_BLOCKS_KEEP_SIZE ; if ( mode & FALLOC_FL_KEEP_SIZE ) flags |= EXT4_GET_BLOCKS_KEEP_",0
1333,"<S2SV_ModStart> ; } else { uint32_t new_free_total = pool -> free_total * 2 ; void * new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total * sizeof ( nw_buf * ) ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total * sizeof ( nw_buf * ) ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_arr = new_arr ; pool -> free_arr = new_arr ; pool -> free_arr = new_arr ; pool -> free_arr = new",0
1334,"<S2SV_ModStart> map ; bpf_map_inc_nolock <S2SV_ModEnd> ( map,",0
1335,"<S2SV_ModStart> tp ) { <S2SV_ModEnd> int cval = <S2SV_ModStart> ] ) { <S2SV_ModEnd> const char hex <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; const <S2SV_ModStart> * dp ; <S2SV_ModEnd> if ( * <S2SV_ModStart> == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++",0
1336,"<S2SV_ModStart> int file_is_y4m ( <S2SV_ModEnd> const char detect <S2SV_ModStart> [ 4 ] ) { if ( memcmp ( detect, ""YUV4"", 4 ) == 0 ) return 1 ; if ( memcmp ( detect, ""YUV5"", 4 ) == 0 ) return 1 ; if ( memcmp ( detect, ""YUV6"", 4 ) == 0 ) return 1 ; if ( memcmp ( detect, ""YUV7"", 4 ) == 0 ) return 1 ; if ( memcmp ( detect, ""YUV8"", 4 ) == 0 ) return 1 ; if ( memcmp ( detect, ""YUV8"", 4 ) == 0 ) return 1 ; if ( memcmp ( detect, ""YUV5"", 4 ) == 0 ) return 1 ; if ( memcmp ( detect, ""YUV6"", 4 ) == 0 ) return 0 ; if ( memcmp ( detect, ""YUV7"", 4 ) == 0 ) return 0 ;",0
1337,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_left < 4 <S2SV_ModStart> < 4 ) { LogError ( ""Process_ipfix: <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } if ( size_left < 4 ) { LogError ( ""Process_ipfix: <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } if ( size_left < 4 ) { LogError ( ""Process_ipfix: <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; }",0
1338,"<S2SV_ModStart> lined ; PIX * pixc, * pixm, * pixg, * pixd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if ( pixs == NULL ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ; if ( pixc == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; cmap = pixGetColormap ( pixc ) ; ncolors = pixcmapGetCount ( cmap ) ; cmapd = pixcmapCreate ( 8 ) ; lut = ( l_int32 * ) LEPT_CALLOC ( 256, sizeof ( l_int32 ) ) ; for ( i = 0 ; i < 256 ; i ++ ) lut [ i ] = - 1 ; for ( i = 0 ; i < 256 ; i ++ ) lut [ i ] = - 1 ; for ( i = 0 ; i < 256 ; i ++ ) lut [ i ] = - 1 ; lut [ i ] =",0
1339,<S2SV_ModStart> ; if ( BN_num_bits ( u ) > BN_num_bits ( v ) ) goto err ; if ( BN_num_bits ( v ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( u ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( v ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( u ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( v ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( u ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( v ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( u ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( v ) > BN_num_bits ( c ) ) goto err ; if (,0
1340,"<S2SV_ModStart> = 256 ; memset ( & v_fn_ptr, 0, sizeof ( vp8_mse16x16 ) ) ;",0
1341,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1342,"<S2SV_ModStart> = alloc ; size_t strindex = 0 ; size_t length ; CURLcode res ; ns = malloc ( alloc ) ; if (! ns ) return NULL ; in = * string ; if ( Curl_isunreserved ( in ) ) ns [ strindex ++ ] = in ; else { newlen += 2 ; if ( newlen > alloc ) { alloc *= 2 ; testing_ptr = realloc ( ns, alloc ) ; if (! testing_ptr ) free ( ns ) ; return NULL ; } } res = Curl_convert_to_network ( handle, & in, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } snprintf ( & ns [ strindex ], 4, ""%%%02X"", in ) ; strindex += 3 ; }",0
1343,"<S2SV_ModStart>, nbits ; msg -> bit = 0 ; <S2SV_ModStart> qfalse ; } msg -> readcount = ( msg -> bit >> 3 ) + 1 ; <S2SV_ModStart> msg -> oob ) { msg -> bit = 0 ; <S2SV_ModStart> ( msgHuff. decompressor. tree, & get, msg -> data, & msg -> bit ) ; value |= ( get << ( msg -> bit + nbits ) ) ; } } else if ( msg -> bit & 7 ) { nbits = bits & 7 ; for ( i = 0 ; i < nbits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << i ) ; } bits = bits - nbits ; } if ( bits ) { for ( i = 0 ; i < bits ; i += 8 ) { Huff_offsetReceive ( msgHuff. decompressor. tree, & get, msg -> data, & msg -> bit ) ; value |= ( get << ( i + nbits ) ) ; } msg -> readcount = ( msg -> bit >> 3 ) + 1 ; } if ( msgHuff. decompressor. tree, & get, msg -> data, & msg -> bit ) ; value |= ( get",0
1344,"<S2SV_ModStart> int idx ; struct snd_ctl_elem_id id ; <S2SV_ModStart> -> count ; id = kcontrol -> id ; down_write ( & card -> controls_rwsem ) ; if ( snd_ctl_find_id ( card, & id ) ) { dev_err ( card -> dev, ""control <S2SV_blank> %i:%i:%i:%s <S2SV_blank> is <S2SV_blank> already <S2SV_blank> present\\n"", id. iface, id. device, id. subdevice, id. name, id. index ) ; err = - EBUSY ; goto error ; } if ( snd_ctl_find_id ( card, & id ) ) { up_write ( & card -> controls_rwsem ) ; if ( snd_ctl_find_id ( card, & id ) ) { dev_err ( card -> dev, ""control <S2SV_blank> %i:%i:%i:%s <S2SV_blank> is <S2SV_blank> already <S2SV_blank> present\\n"", id. iface, id. device, id. subdevice, id. name, id. index ) ; err = - EBUSY ; goto error ; } if ( snd_ctl_find_id ( card, & id ) ) { up_write ( & card -> controls_rwsem",0
1345,"<S2SV_ModStart> netif_msg_init ( msg_level <S2SV_ModEnd>, NETIF_MSG_DRV | <S2SV_ModStart> NETIF_MSG_LINK ) ; status = register_netdev ( net, dev ) ; if ( status < 0 ) { dev_err ( & udev -> dev, ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> device\\n"", __func__ ) ; goto out ; } if ( status < 0 ) { dev_err ( & udev -> dev, ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> device\\n"", __func__ ) ; goto out ; } status = register_netdev ( net, dev ) ; if ( status < 0 ) { dev_err ( & udev -> dev, ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> device\\n"", __func__ ) ; goto out ; } if ( status < 0 ) { dev_err ( & udev -> dev, ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> device\\n"", __func__ ) ; goto out ; }",0
1346,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> = overhead ; if ( bson_size ( bsons [ i ] ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; },0
1347,"<S2SV_ModStart> ( textview ) ; gtk_widget_set_text_view_width ( scrolled, 480, 480 ) ; gtk_widget_set_text_view_height ( scrolled, 480, 480 ) ; gtk_widget_set_border_width ( scrolled, 480, 480 ) ; gtk_widget_set_border_height ( scrolled, 480, 480 ) ; gtk_widget_set_border_width ( scrolled, 480, 480 ) ; gtk_widget_set_border_width ( scrolled, 480, 480 ) ; gtk_widget_set_border_height ( scrolled, 480, 480 ) ; gtk_widget_set_border_width ( scrolled, 480, 480 ) ; gtk_widget_set_border_width ( scrolled, 480, 480 ) ; gtk_widget_set_border_height ( scrolled, 480, 480 ) ; gtk_widget_set_border_height ( scrolled, 480, 480 ) ; gtk_widget_set_border_width ( scrolled, 480, 480 ) ;",0
1348,<S2SV_ModStart> - 2 ; if ( plen < 2 ) return 1 ;,0
1349,"<S2SV_ModStart> { umode_t mode = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart> retval = posix_acl_update_mode_nolock <S2SV_ModEnd> ( inode, <S2SV_ModStart> err_out ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> { umode_t mode = posix_acl_update_mode_nolock ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart> err_out ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> ; v9fs_vfs_setattr_dotl ( dentry, & iattr ) ; break ; case ACL_TYPE_DEFAULT : if (! S_ISDIR ( inode -> i_mode ) ) { retval = - EINVAL ; goto err_out ; } break ; case ACL_TYPE_UNPRIVILEGED : if (! S_ISDIR ( inode -> i_mode ) ) { retval = - EINVAL ; goto err_out ; } break ; case ACL_TYPE_UNPRIVILEGED : if (! S_ISDIR ( inode -> i_mode ) ) { retval = - EINVAL ; goto err_out ; } retval = <S2SV_ModEnd> v9fs_vfs_setattr_dotl ( dentry <S2SV_ModStart> & iattr ) ; break",0
1350,<S2SV_ModStart> ; if (! bin -> classes ) { r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; return false ; } bin -> classes = r_list_newf ( ( RListFree ) free ) ; if (! bin -> classes_list ) { r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list,0
1351,<S2SV_ModStart> case NPPVformValue : type = RPC_TYPE_STRING ; break ; case NPPVpluginWindowSize : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTimerInterval : type = RPC_TYPE_INT32 ; break ; case NPPVpluginNeedsXEmbed : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTransparentBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVjavascriptPushCallerBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVjavascriptPushCallerBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginKeepLibraryInMemory : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginScriptableNPObject : type = RPC_TYPE_NP_OBJECT ; break ;,0
1352,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_response ( rdpNego <S2SV_ModStart> state = NEGO_STATE_FAIL <S2SV_ModEnd> ; return ; <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;,0
1353,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; i = active_best_quality ; do { const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( bits_per_mb_at_this_q - target_bits_per_mb ) <= last_error ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } else { last_error = bits_per_mb_at_this_q -",0
1354,"<S2SV_ModStart> |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_COMM_CTRL ) ; value |= TJA1101_COMM_CTRL_AUTO_OP ; tja1101WritePhyReg ( interface, TJA1101_COMM_CTRL, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_COMM_CTRL ) ; value |= TJA1101_COMM_CTRL_AUTO_OP ; tja1101WritePhyReg ( interface, TJA1101_COMM_CTRL, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_COMM_CTRL ) ; value |= TJA1101_COMM_CTRL_AUTO_OP ; tja1101WritePhyReg ( interface, TJA1101_COMM_CTRL",0
1355,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1356,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> data ) ;",1
1357,"<S2SV_ModStart> ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i",0
1358,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> TX_SIZE tx_size, int up_available, int left_available, int right_available, int plane ) { DECLARE_ALIGNED_ARRAY ( 16, uint8_t, left_col, 64 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; uint8_t * const above_row = above_data + 16 ; const int bs = 4 << tx_size ; if ( plane == 0 ) { frame_width = xd -> cur_buf -> y_width ; frame_height = xd -> cur_buf -> y_height ; } else { frame_width = xd -> cur_buf -> uv_width ; frame_height = xd -> cur_buf -> uv_height ; } x0 = ( - xd -> mb_to_left_edge >> ( 3 + pd -> subsampling_x ) ) + x ; y0 = ( - xd -> mb_to_top_edge >> ( 3 + pd -> subsampling_y ) ) + y ; memset ( left_col, 129, 64",0
1359,"<S2SV_ModStart> end ++ ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern <S2SV_blank> \\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern <S2SV_blank> \\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern <S2SV_blank> \\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern <S2SV_blank> \\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern <S2SV_blank> \\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern <S2SV_blank> \\n"" ) ; goto error ; }",0
1360,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> jas_iccprof_t <S2SV_ModEnd> * jas_iccprof_createfrombuf (,0
1361,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ; <S2SV_ModStart> cur_aio_dio = NULL ; spin_unlock_init ( & ei -> i_completed_io_lock,0
1362,"<S2SV_ModStart> BUG ( ) ; mutex_lock ( & memcg -> thresholds_lock ) ; usage = mem_cgroup_usage ( memcg, type == _MEM ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; __mem_cgroup_threshold ( memcg, type == _MEM ) ; size = 0 ; for ( i = 0 ; i < thresholds -> primary -> size ; i ++ ) { if ( thresholds -> entries [ i ]. eventfd!= eventfd ) size ++ ; } new = thresholds -> spare ; if (! size ) { kfree ( new ) ; new = NULL ; goto swap_buffers ; } new = thresholds -> spare ; if (! size ) { kfree ( new ) ; new = NULL ; goto swap_buffers ; } new = thresholds -> spare ; if (! size ) { kfree ( new ) ; new = NULL ; goto swap_buffers ; } new = thresholds -> spare ; if (! size ) { kfree ( new ) ; new = NULL ; goto swap_buffers ; } new = thresholds -> spare ; if (! size ) { kfree ( new ) ; new = NULL ; goto",0
1363,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> client, int id ) { mutex_lock ( & client -> lock ) ; handle = ion_handle_get_by_id_nolock <S2SV_ModEnd> ( client, <S2SV_ModStart> lock ) ; mutex_unlock ( & client -> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1364,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit ( wb <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ; vpx_wb_write_bit ( wb <S2SV_ModEnd>, cm -> <S2SV_ModStart> ; vpx_wb_write_bit ( wb <S2SV_ModEnd>, cm -> <S2SV_ModStart> ; vpx_wb_write_bit ( wb <S2SV_ModEnd>, cm -> <S2SV_ModStart> ; vpx_wb_write_bit ( wb <S2SV_ModEnd>, cm -> <S2SV_ModStart> ; vpx_wb_write_bit ( wb <S2SV_ModEnd>, cm -> <S2SV_ModStart> ; vpx_wb_write_bit ( wb <S2SV_ModEnd>, cm -> <S2SV_ModStart> ; vpx_wb_write_bit ( wb <S2SV_ModEnd>, cm -> <S2SV_ModStart> ; vpx_wb_write_bit ( wb <S2SV_ModEnd>, cm -> <S2SV_ModStart> ; vpx_wb_write_bit ( wb <S2SV_ModEnd>, cm -> <S2SV_ModStart> ; vpx_wb_write_bit ( wb <S2SV_ModEnd>, cm -> <S2SV_ModStart> ; vpx_wb_write_bit ( wb <S2SV_ModEnd>, cm -> <S2SV_ModStart> ; vpx_wb_write_bit ( wb <S2SV_ModEnd>, cm -> <S2SV_ModStart> ; vpx_wb_write_bit ( wb <S2SV_ModEnd>,",0
1365,"<S2SV_ModStart> 'L' }, <S2SV_ModEnd> { ""alt-autoscale-min"", <S2SV_ModStart> }, { <S2SV_ModEnd> ""alt-autoscale-max"", no_argument <S2SV_ModStart> }, { <S2SV_ModEnd> ""alt-autoscale-min"", no_argument <S2SV_ModStart> }, { <S2SV_ModEnd> ""alt-autoscale-max"", no_argument <S2SV_ModStart> }, { <S2SV_ModEnd> ""units-length"", no_argument <S2SV_ModStart> }, { <S2SV_ModEnd> ""lower-limit"", no_argument <S2SV_ModStart> }, { <S2SV_ModEnd> ""upper-limit"", no_argument <S2SV_ModStart> }, { <S2SV_ModEnd> ""alt-autoscale-max"", no_argument <S2SV_ModStart> }, { <S2SV_ModEnd> ""alt-autoscale-min"", no_argument <S2SV_ModStart> }, { <S2SV_ModEnd> ""alt-autoscale-max"", no_argument <S2SV_ModStart> }, { <S2SV_ModEnd> ""alt-autoscale-min"", no_argument <S2SV_ModStart> }, { <S2SV_ModEnd> ""alt-autoscale-max"", no_argument <S2SV_ModStart> }, { <S2SV_ModEnd> ""only-graph"", no_argument <S2SV_ModStart> }, { <S2SV_ModEnd> ""units-length"", no_argument <S2SV_ModStart> }, { <S2SV_ModEnd> ""units-length"", no_argument <S2SV_ModStart> }, { <S2SV_ModEnd> ""alt-autoscale-max"", no_argument",0
1366,"<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart>'<S2SV_blank>') ; if ( p == NULL ) return ERROR_INVALID_SYNTAX ; q = osStrchr <S2SV_ModEnd> ( p + <S2SV_ModStart> '?' ) { if ( q == NULL ) return ERROR_INVALID_SYNTAX ; m = q - p ; } else { q = p ; m = 0 ; } n = osStrlen ( queryString ) ; if ( n == 0 ) { n ++ ; if ( ( context -> bufferLen + n - m ) > HTTP_CLIENT_BUFFER_SIZE ) return ERROR_BUFFER_OVERFLOW ; osMemmove ( p, p + m, context -> buffer + context -> bufferLen + 1 - q ) ; } else { n ++ ; if ( ( context -> bufferLen + n - m ) > HTTP_CLIENT_BUFFER_SIZE ) return ERROR_BUFFER_OVERFLOW ; osStrncpy ( p + 1, queryString, n - 1 ) ; context -> bufferLen = context -> bufferLen + n - m ; p [ 0 ] = '?' ; osStrncpy ( p + 1, queryString, n - 1 ) ; context -> bufferLen = context -> bufferLen + n - m ;",0
1367,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == TYPE_COMMENT ) arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case DOUBLESTAR : i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment",0
1368,"<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ; memset ( xd -> ref_lf_deltas, 0, sizeof ( xd -> ref_lf_deltas ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ; memset ( xd -> mode_lf_deltas, 0, sizeof ( xd -> mode_lf_deltas ) ) ; pc -> refresh_golden_frame = 1 ; pc -> copy_buffer_to_arf = 0 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> ref_frame_sign_bias",0
1369,"<S2SV_ModStart> error ; uint16_t n <S2SV_ModEnd> ; uint32_t status <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_ERXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, EN",0
1370,"<S2SV_ModStart> == 0x01 ) { <S2SV_ModStart> break ; } if ( i >= gemsafe_cert_max ) { sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> unallocated"", i + 1 ) ; gemsafe_cert [ i ]. label = NULL ; gemsafe_cert [ i ]. label = NULL ; sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> unallocated"", i + 1 ) ; } else { sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> unallocated"", i + 1 ) ; gemsafe_cert [ i ]. label = NULL ; sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> unallocated"", i + 1 ) ; gemsafe_cert [ i ]. label = NULL ; sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> unallocated"", i + 1 ) ; }",0
1371,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1372,"<S2SV_ModStart> static VALUE read_memory ( int argc, VALUE * argv, VALUE klass, VALUE content ) { VALUE rb_schema ; VALUE errors ; xmlSchemaParserCtxtPtr ctx = xmlSchemaNewMemParserCtxt ( argc, ( char * ) StringValuePtr ( content ), ( int ) RSTRING_LEN ( content ) ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSetStructuredErrorFunc ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif schema = xmlSchemaParse ( ctx ) ; xmlSetStructuredErrorFunc ( NULL, Nokogiri_error_array_pusher, ( void * ) errors ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xml",0
1373,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> unsigned long start <S2SV_ModStart> = 0, off <S2SV_ModEnd> ; struct au1200fb_device <S2SV_ModStart> par ; if ( fbdev -> fb_phys & ~ PAGE_MASK ) { return - EINVAL ; } start = fbdev -> fb_phys & PAGE_MASK ; len = PAGE_ALIGN ( ( start & ~ PAGE_MASK ) + fbdev -> fb_len ) ; off = vma -> vm_pgoff << PAGE_SHIFT ; if ( ( vma -> vm_end - vma -> vm_start + off ) > len ) { return - EINVAL ; } vma -> vm_pgoff = PAGE_ALIGN ( ( start & ~ PAGE_MASK ) + fbdev -> fb_len ) >> PAGE_SHIFT ; vma -> vm_page_prot = pgprot_noncached ( vma -> vm_page_prot ) ; pgprot_val ( vma -> vm_page_prot ) |= _CACHE_MASK ; return io_remap_pfn_range ( vma, vma -> vm_start, off >> PAGE_SHIFT, vma -> vm_end - vma -> vm_start, vma -> vm_",0
1374,"<S2SV_ModStart> ; if ( strlen ( errstr ) > CONFLINELEN - 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; } errstr = strchr ( errstr,'<S2SV_blank>') ; if ( errstr ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( errstr ) > CONFLINELEN - 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; } errstr = strerror ( errstr, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; if ( errstr ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( errstr ) > CONFLINELEN - 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; }",0
1375,<S2SV_ModStart> / 2 ] ; out [ 3 <S2SV_ModEnd> ] = ptr <S2SV_ModStart> / 2 ] ; out [ 5 <S2SV_ModEnd> ] = ptr <S2SV_ModStart> / 2 ] ; out [ 6 <S2SV_ModEnd> ] = ptr <S2SV_ModStart> / 2 ] ; out [ 7 <S2SV_ModEnd> ] = ptr <S2SV_ModStart> / 2 ] ; out [ 8 <S2SV_ModEnd> ] = ptr <S2SV_ModStart> / 2 ] ; out [ 9 <S2SV_ModEnd> ] = ptr <S2SV_ModStart> / 2 ] ; out [ 10 <S2SV_ModEnd> ] = ptr <S2SV_ModStart> / 2 ] ; out [ 11 <S2SV_ModEnd> ] = ptr <S2SV_ModStart> / 2 ] ; out [ 12 <S2SV_ModEnd> ] = ptr,0
1376,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1377,<S2SV_ModStart> 1 ) ; ret = <S2SV_ModEnd> cdrom_read_mech_status ( cdi,0
1378,"<S2SV_ModStart> ; err = - EBUSY ; if (! po -> running ) goto out ; if ( type == PACKET_FANOUT_HASH || ( type_flags & PACKET_FANOUT_FLAG_LB ) || ( type_flags & PACKET_FANOUT_CPU ) || ( type_flags & PACKET_FANOUT_RND ) || ( type_flags & PACKET_FANOUT_QM ) || ( type_flags & PACKET_FANOUT_EBPF ) ) { err = - EINVAL ; goto out ; } if ( type == PACKET_FANOUT_HASH || ( type_flags & PACKET_FANOUT_FLAG_LB ) ) { err = - EINVAL ; goto out ; } rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) goto out ; atomic_long_set ( & rollover -> num, 0 ) ; atomic_long_set ( & rollover -> num_huge, 0 ) ; atomic_long_set ( & rollover -> num_failed, 0 ) ; atomic_long_set ( &",0
1379,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1380,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int utf8s_to_utf16s ( const u8 * s, int len, wchar_t <S2SV_ModEnd> * pwcs ) <S2SV_ModStart> - EINVAL ; size = utf8_to_utf32 ( s, len, & u ) ; if ( size < 0 ) return - EINVAL ; if ( u >= PLANE_SIZE ) { u -= PLANE_SIZE ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_LOW | ( u & SURROGATE",0
1381,"<S2SV_ModStart>, i ; if ( s -> state & PNG_PLTE ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> == PNG_COLOR_TYPE_GRAY ) { if ( s -> state & PNG_PLTE ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> == PNG_COLOR_TYPE_RGB && s -> state & PNG_PLTE ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = bytestream2_get_byte ( & s -> gb ) ; s -> palette [ i ] = ( s -> palette [ i ] & 0x00ffffff ) | ( v << 24 ) ; } } else if ( s -> state & PNG_PLTE ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; if ( s -> bit_depth > 8 ) av_WB16 ( & s -> transparent_color_be [ 2 * i ], v ) ; else s -> transparent_color_be [",0
1382,"<S2SV_ModStart> EPROTONOSUPPORT ) { <S2SV_ModEnd> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure""",0
1383,<S2SV_ModStart> AF_INET6 ; } if ( PKT_IS_IPV4 ( p ) ) { dt -> id = ( int32_t ) IPV4_EXTHDR_GET_FH_ID ( p ) ; dt -> af = AF_INET ; } else { dt -> id = ( int32_t ) IPV6_EXTHDR_GET_FH_ID ( p ) ; dt -> af = AF_INET ; },0
1384,"<S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_RXFHSR ) ; if ( ( status & ( RXFHSR_RXFV | RXFHSR_RXFV ) )!= 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) )!= 0 ) { if ( ( status & ( RXFHSR_RXFV | RXFHSR_RXFV | RXFHSR_RXCE ) )!= 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) )!= 0 ) { if ( ( status & ( RXFHSR_RXFV | RXFHSR_RXFV | RXFHSR_RXCE ) )!= 0 ) { if ( ( status & ( RXFHSR_RX",0
1385,"<S2SV_ModStart> * c, <S2SV_ModEnd> const node * <S2SV_ModStart> n, asdl_seq * decorator_seq, bool <S2SV_ModEnd> is_async ) { <S2SV_ModStart> is_async ) { identifier name ; arguments_ty args ; expr_ty returns = NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 2 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; if (! type_comment && NCH ( CHILD ( n, name_i + 3 ) ) > 1 ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3 ), 1 ) ; if (! type_comment && NCH ( CHILD ( n, name_i + 4 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT (",0
1386,"<S2SV_ModStart> int i ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pud = pud_offset ( pgd, 0xA0000 ) ; if ( pud_none_or_clear_bad ( pud ) ) goto out ; pmd = pmd_offset ( pud, 0xA0000 ) ; split_huge_page_pmd ( pmd ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ; pte = pte_offset_map_lock ( mm, pmd, 0xA0000, & ptl ) ; if ( pte_unmap_unlock ( pte, ptl ) ; out : if ( pmd_none_or_clear_bad ( pmd ) ) goto out ;",0
1387,"<S2SV_ModStart> ; return aa_audit ( AUDIT_APPARMOR_DENIED, & sa, GFP_KERNEL, & sa ) ; } } else if ( strcmp ( name, ""currentx"" ) == 0 ) { error = aa_setprocattr_currentx ( args, arg_size,! AA_ONEXEC ) ; } else if ( strcmp ( name, ""currentx"" ) == 0 ) { error = aa_setprocattr_currentx ( args, arg_size,! AA_ONEXEC ) ; } else if ( strcmp ( name, ""currentx"" ) == 0 ) { error = aa_setprocattr_currentx ( args, arg_size,! AA_ONEXEC ) ; } else if ( strcmp ( name, ""currentx"" ) == 0 ) { error = aa_setprocattr_currentx ( args, arg_size,! AA_ONEXEC ) ; } else if ( strcmp ( name, ""currentx"" ) == 0 ) { error = aa_setprocattr_currentx ( args, arg_size,! AA_ONEXEC ) ; } else if ( strcmp ( name, ""currentx"" ) == 0",0
1388,"<S2SV_ModStart> uint_fast8_t tmp ; if (! siz -> caps ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_e",0
1389,"<S2SV_ModStart> ; } } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } <S2SV_ModStart> = sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_len, dst_coap_msg_ptr -> token_len ) ; if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; }",0
1390,"<S2SV_ModStart> * xmi_data ++ ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> * xmi_data ++ ; if ( xmi_size < 8 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> * xmi_data ++ ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> * xmi_data ++ ; if ( xmi_size < 8 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> * xmi_data ++ ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0",0
1391,"<S2SV_ModStart> ; size_t total_len ; size_t total_size = iov_len ( iov, nr_segs ) ; if ( unlikely ( total_len > iov_len ( iov, nr_segs ) ) ) return - EINVAL <S2SV_ModStart> ; size_t chars = iov_len ( iov, nr_segs ) <S2SV_ModEnd> ; int error <S2SV_ModStart>, atomic ; if ( unlikely ( total_len < 0 ) ) return - EINVAL <S2SV_ModStart> ; error = pipe_iov_copy_to_user ( iov, addr + buf -> offset, chars, total_len, atomic ) ; if ( unlikely ( error ) ) { if (! ret ) ret = error ; break ; } ret = pipe_iov_copy_to_user ( iov, addr + buf -> offset, chars, atomic ) ; if (! ret ) ret = error ; break ; } ret += chars ; buf -> offset += chars ; buf -> len -= chars ; if ( buf -> flags & PIPE_BUF_FLAG_PACKET ) { total_len -= chars ; buf -> len -= chars ; if ( buf -> flags & PIPE_BUF_FLAG_PACKET",0
1392,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ( code ) \\\n} <S2SV_ModEnd> IndexPacket index ; <S2SV_ModStart> ) break ; if ( displacement > data_size - number_bits ) break ; if ( displacement > data_size - number_bits ) break ; <S2SV_ModStart> ) break ; if ( displacement > data_size - number_bits ) break ; <S2SV_ModStart> ) break ; if ( displacement > data_size - number_bits ) break ; if ( displacement > data_size - number_bits ) break ; if ( displacement > data_size - number_bits ) break ; <S2SV_ModStart> ) break ; if ( displacement > data_size - number_bits ) break ; if ( displacement > data_size - number_bits ) break ; <S2SV_ModStart> ) break ; if ( displacement > data_size - number_bits ) break ; if ( displacement > data_size - number_bits ) break ; if ( displacement > data_size - number_bits ) break ; if ( displacement > data_size - number_bits ) break ; if ( displacement > data_size - number_bits ) break ; if ( displacement > data_size - number_bits ) break,0
1393,"<S2SV_ModStart> GLOBALS_ARE_RESET ( ) ) ; if ( e == STF_FAIL ) { DBG_log ( ""ikev2_parent_inI2outR2_tail <S2SV_blank> returned <S2SV_blank> STF_FAIL <S2SV_blank> with <S2SV_blank> %s"", enum_name ( & ikev2_notify_names, e ) ) ; } else if ( e == STF_OK ) { DBG_log ( ""ikev2_parent_inI2outR2_tail <S2SV_blank> returned <S2SV_blank> STF_OK <S2SV_blank> with <S2SV_blank> %s"", enum_name ( & ikev2_notify_names, e ) ) ; } else if ( e == STF_FAIL ) { DBG_log ( ""ikev2_parent_inI2outR2_tail <S2SV_blank> returned <S2SV_blank> STF_FAIL <S2SV_blank> with <S2SV_blank> %s"", enum_name ( & ikev2_notify_names, e ) ) ; } else if ( e == STF_FAIL ) { int v2_notify_num = e - STF_FAIL ; DBG_log ( ""ikev2_parent_inI2outR2_tail <S2SV_blank> returned",0
1394,"<S2SV_ModStart> { p_fm_config_conx_hdlt hdl <S2SV_ModEnd> ; int instance <S2SV_ModStart> res ) ; if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> initialize <S2SV_blank> the <S2SV_blank> client <S2SV_blank> handle: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto die_clean ; } if ( ( res = fm_mgr_config_disconnect ( hdl ) )!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> disconnect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto die_clean <S2SV_ModEnd> ; } for <S2SV_ModStart> 0 ) { if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto die_clean <S2SV_ModEnd> ; } } <S2SV_ModStart> 0 ) { if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d)",0
1395,"<S2SV_ModStart> ; if ( argv [ 0 ] == NULL ) { abort ( ) ; } cmdname = argv [ 0 ] ; verbose = 0 ; debug = 0 ; # if defined ( JAS_DEFAULT_MAXMEM_USAGE ) max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; # endif while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_VERBOSE : verbose = 1 ; break ; case OPT_DEBUG : debug = atoi ( jas_optarg ) ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_HELP : default : usage ( ) ; break ; } } if ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_INFILE : infile = jas_optarg ; break ; case OPT_DEBUG : debug = atoi ( jas_optarg ) ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ;",0
1396,"<S2SV_ModStart> bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
1397,"<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # else for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ )",0
1398,"<S2SV_ModStart> ; if ( ( unsigned long long ) param -> data_start + needed > param -> data_size ) { param -> flags |= DM_BUFFER_FULL_FLAG ; goto out ; } <S2SV_ModStart> needed ) { if ( ( unsigned long long ) param -> data_start + len > param -> data_size ) { dm_ioctl_set_buffer_flags ( filp, DM_BUFFER_FULL_FLAG, & param -> flags ) ; param -> flags |= DM_BUFFER_FULL_FLAG ; goto out ; } <S2SV_ModStart> len < needed ) { dm_ioctl_set_buffer_flags ( filp, DM_BUFFER_FULL_FLAG, & param -> flags ) ; goto out ; } if ( ( unsigned long long ) param -> data_start + len > param -> data_size ) { dm_ioctl_set_buffer_flags ( filp, DM_BUFFER_FULL_FLAG, & param -> flags ) ; param -> flags |= DM_BUFFER_FULL_FLAG ; goto out ; }",0
1399,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1400,"<S2SV_ModStart> vcpu_info ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> irq_srcu ) ; <S2SV_ModEnd> hlist_for_each_entry ( e <S2SV_ModStart> -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! kvm_intr_is_single_vcpu ( kvm, & irq, & vcpu ) ) { ret = irq_set_vcpu_affinity ( host_irq, NULL ) ; if ( ret < 0 ) { printk ( KERN_ERR ""failed <S2SV_blank> to <S2SV_blank> back <S2SV_blank> to <S2SV_blank> remapped <S2SV_blank> mode, <S2SV_blank> irq: <S2SV_blank> %u\\n"", host_irq ) ; goto out ; } ret = irq_set_vcpu_affinity ( host_irq, NULL ) ; if ( ret < 0 ) { printk ( KERN_ERR ""failed <S2SV_blank> to <S2SV_blank> back <S2SV_blank> to <S2SV_blank> remapped <S2SV_blank> mode, <S2SV_blank> irq: <S2SV_blank> %u\\n"", host_irq ) ; goto",0
1401,<S2SV_ModStart> bfqq ) return bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
1402,"<S2SV_ModStart> } else { if ( rold -> umin_value == 0 && rold -> umax_value == 0 && rold -> smin_value == 0 && rold -> smax_value == 0 && tnum_is_unknown ( rold -> var_off ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) == 0 && range_within ( rold, rcur ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) == 0 && range_within ( rold, rcur ) && tnum_in ( rold -> var_off, rcur -> var_off ) ) == 0 && range_within ( rold, rcur ) && tnum_in ( rold -> var_off, rcur -> var",0
1403,<S2SV_ModStart>! handle ) return NULL ; pointer = ( void * ) ~ ( ( size_t ) handle -> dwUpper ) ; if ( pointer == NULL ) return NULL ;,0
1404,<S2SV_ModStart> += PRIMARY_DRAWING_ORDER_FIELD_BYTES [ <S2SV_ModEnd> orderInfo -> orderType,0
1405,<S2SV_ModStart> ; if (! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) ) { if ( ovl_dentry_lower ( old ) -> d_inode == ovl_dentry_lower ( new ) -> d_inode ) { if (! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if (! ovl_dentry_lower ( old ) -> d_inode == ovl_dentry_lower ( new ) -> d_inode ) { if (! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( old_type ),0
1406,"<S2SV_ModStart> ; } # ifdef ONIG_DEBUG_MATCH fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> start: <S2SV_blank> %d\\n"", str, ( int ) end, ( int ) sstart ) ; fprintf ( stderr, ""match_at: <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", str, ( int ) sprev ) ; fprintf ( stderr, ""size: <S2SV_blank> %d, <S2SV_blank> start <S2SV_blank> offset: <S2SV_blank> %d\\n"", ( int ) sstart, ( int ) sprev ) ; fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> start: <S2SV_blank> %d\\n"", str, ( int ) end, ( int ) sstart ) ; fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> start: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", ( int ) sstart, ( int ) sprev ) ; fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d,",0
1407,"<S2SV_ModStart> int plane ; # if CONFIG_VP9_HIGHBITDEPTH switch ( xd -> plane ) { case VPX_HIGHBITDEPTH : vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; break ; case VPX_HIGHBITDEPTH : vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; break ; case VPX_HIGHBITDEPTH : vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; break ; case VPX_HIGHBITDEPTH : vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; break ; case VPX_HIGHBITDEPTH : vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; break ; case VPX_HIGHBITDEPTH : vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; break ; case VPX_HIGHBITDEPTH : vpx",0
1408,"<S2SV_ModStart> * skb ; size_t <S2SV_ModEnd> copied, error",0
1409,<S2SV_ModStart> = hash ; sr -> file_info. flags |= O_CLOEXEC | O_NONBLOCK | O_CLOEXEC | O_CLOEXEC | O_NOCTTY <S2SV_ModStart> = hash ; sr -> file_info. flags |= O_NONBLOCK | O_CLOEXEC | O_CLOEXEC | O_CLOEXEC | O_NOCTTY <S2SV_ModStart> = hash ; sr -> file_info. flags |= O_NONBLOCK | O_CLOEXEC | O_NOCTTY <S2SV_ModEnd> ; } },0
1410,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> const tile, MACROBLOCK * const x, int mi_row, int mi_col, int * rate, int64_t * dist, BLOCK_SIZE bsize ) { <S2SV_ModEnd> set_offsets ( cpi <S2SV_ModStart>, tile, mi_row, mi_col, rate, dist, bsize ) ; if ( frame_is_intra_only ( cm ) ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCKD * const xd = & x -> e_mbd ; MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, b",0
1411,"<S2SV_ModStart> ) ) { u32 csum = virtio_cread_feature ( vdev, VIRTIO_NET_F_CSUM, struct virtio_net_config, & csum ) ; if ( csum ) dev -> hw_features |= NETIF_F_HW_CSUM ; else dev -> hw_features &= ~ ( NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ) ; if ( virtio_has_feature ( vdev, VIRTIO_NET_F_GF_CSUM ) ) dev -> features |= NETIF_F_GF_CSUM <S2SV_ModEnd> ; if ( <S2SV_ModStart> csum ) dev -> features |= NETIF_F_GF_CSUM ; else dev -> features &= ~ ( NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ) ; if ( virtio_has_feature ( vdev, VIRTIO_NET_F_GF_CSUM ) ) dev -> features |= NETIF_F_GF_CSUM <S2SV_ModEnd> ; if (",0
1412,"<S2SV_ModStart> = NULL ; if ( strcmp ( filename, "".sofa"" ) ) { log ( ""cannot <S2SV_blank> load <S2SV_blank> default <S2SV_blank> sofa <S2SV_blank> file\\n"" ) ; * err = errno ; return NULL ; } if ( strcmp ( filename, "".sofa"" ) ) { log ( ""cannot <S2SV_blank> load <S2SV_blank> default <S2SV_blank> sofa <S2SV_blank> file <S2SV_blank> %s\\n"", filename ) ; * err = errno ; return NULL ; } if ( strcmp ( filename, "".sofa"" ) ) { log ( ""cannot <S2SV_blank> load <S2SV_blank> default <S2SV_blank> sofa <S2SV_blank> file <S2SV_blank> %s\\n"", filename ) ; * err = errno ; return NULL ; } if ( strcmp ( filename, "".sofa"" ) ) { log ( ""cannot <S2SV_blank> load <S2SV_blank> default <S2SV_blank> sofa <S2SV_blank> file <S2SV_blank> %s\\n"", filename ) ; * err = errno ; return NULL ; } if ( strcmp ( filename, "".sofa"" ) ) { log ( ""cannot <S2SV_blank> load <S2SV_blank> default <S2SV_blank> sofa <S2SV_blank> file <S2SV_blank> %s\\n"", filename ) ; * err = errno ; return NULL ; }",0
1413,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse",0
1414,"<S2SV_ModStart> = malloc ( <S2SV_ModEnd> sizeof ( MappedRange <S2SV_ModStart> MappedRange ) ) ; if ( memPtr == NULL ) { LOGW ( ""malloc(%d, <S2SV_blank> R, <S2SV_blank> PRIVATE, <S2SV_blank> %d, <S2SV_blank> %d) <S2SV_blank> failed: <S2SV_blank> %s\\n"", length, fd, start ) ; return - 1 ; }",0
1415,"<S2SV_ModStart> fa ; fa = xfs_dinode_verify_magic ( dip, mp, XFS_DINODE_MAGIC ) ; if ( fa ) return fa ; fa = xfs_dinode_verify_magic ( dip, mp, XFS_DINODE_MAGIC ) ; if ( fa ) return fa ; fa = xfs_dinode_verify_magic ( dip, mp, XFS_DINODE_MAGIC ) ; if ( fa ) return fa ; fa = xfs_dinode_verify_magic ( dip, mp, XFS_DINODE_MAGIC ) ; if ( fa ) return fa ; fa = xfs_dinode_verify_magic ( dip, mp, XFS_DINODE_MAGIC ) ; if ( fa ) return fa <S2SV_ModEnd> ; if (",0
1416,"<S2SV_ModStart> ; if ( ( ( flags & VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_FORCE_GF ) ) || ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_E",0
1417,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1418,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( & <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> perf_event_update_userpage ( event,0
1419,"<S2SV_ModStart> * pptr, u_int len, u_int indent <S2SV_ModStart> len ) ; if ( indent > MAXHOSTNAMELEN ) { ND_PRINT ( ( ndo, ""truncated <S2SV_blank> hostname <S2SV_blank> length <S2SV_blank> (%u) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", indent, MAXHOSTNAMELEN ) ) ; break ; } if ( indent > 0 ) { ND_PRINT ( ( ndo, ""truncated <S2SV_blank> hostname <S2SV_blank> length <S2SV_blank> (%u)"", indent, MAXHOSTNAMELEN ) ) ; break ; } if ( indent > 0 ) { ND_PRINT ( ( ndo, ""truncated <S2SV_blank> hostname <S2SV_blank> length <S2SV_blank> (%u) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u) <S2SV_blank> allowed <S2SV_blank> (%u)"", indent, MAXHOSTNAMELEN ) ) ; break ; } if ( indent > 0 ) { ND_PRINT ( ( ndo, ""truncated <S2SV_blank> hostname <S2SV_blank> length <S2SV_blank> (%u)"", indent, MAXHOSTNAMELEN ) ) ; break ; } if ( indent > 0 ) { ND_PRINT ( ( ndo, ""truncated <S2SV_blank> hostname <S2SV_blank> length <S2SV_blank> (%u) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%",0
1420,"<S2SV_ModStart> ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Host</td><td>%s</td></tr>"", Run. system -> name ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Pidfile</td><td>%s</td></tr>"", Run. files. pid ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Controlfile</td><td>%s</td></tr>"", Run. files. control ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Logfile</td><td>%s</td></tr>"", Run. files. log ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Pidfile</td><td>%s</td></tr>"", Run. files. pid ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>State <S2SV_blank> file</td><td>%s</td></tr>"", Run. files. state ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Debug</td><td>%s</td></tr>"", Run. debug? ""True"" : ""False"" ) ; StringBuffer_",0
1421,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
1422,"<S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } bn_from_bytes ( msg -> data_initial_chunk. bytes + 4, 20 ) ; bn_from_bytes ( msg -> data_initial_chunk. bytes + 4 + 2 * 32, 32, & tokenMinAmount ) ; bn_from_bytes ( msg -> data_initial_chunk. bytes + 4 + 3 * 32, 32, & ethMinAmount ) ; bn_from_bytes ( msg -> data_initial_chunk. bytes + 4 + 2 * 32, 32, & tokenMinAmount ) ; bn_from_bytes ( msg -> data_initial_chunk. bytes + 4 + 3 * 32, 32, & tokenMinAmount ) ; bn_from_bytes ( msg -> data_initial_chunk. bytes + 4 + 3 * 32, 32, & tokenMinAmount ) ; bn_from_bytes ( msg -> data_initial_chunk. bytes + 4 + 6 * 32, 32, & tokenMinAmount ) ; bn_from_bytes ( msg -> data_initial_chunk. bytes + 4 + 6 * 32, 32, & tokenMinAmount ) ; bn_from_bytes ( msg ->",0
1423,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1424,"<S2SV_ModStart>, & len, NULL <S2SV_ModEnd>, compat ) <S2SV_ModStart>, & nr_segs, NULL <S2SV_ModEnd>, compat ) <S2SV_ModStart>, & nr_segs, NULL <S2SV_ModEnd>, compat ) <S2SV_ModStart>, & nr_segs, NULL <S2SV_ModEnd>, compat ) <S2SV_ModStart>, & nr_segs, NULL <S2SV_ModEnd>, compat )",0
1425,"<S2SV_ModStart> ; c -> rbytes = sizeof ( protocol_binary_request_header ) ; if ( c -> rbytes < sizeof ( c -> binary_header ) ) { c -> rbytes = sizeof ( protocol_binary_request_header ) ; c -> rcurr = c -> rbuf ; if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Realign <S2SV_blank> input <S2SV_blank> buffer\\n"", c -> sfd ) ; } if ( c -> rbytes < sizeof ( protocol_binary_request_header ) ) { c -> rbytes = sizeof ( protocol_binary_request_header ) ; c -> rcurr = ( c -> rbuf + c -> rsize ) ; c -> rbytes = sizeof ( protocol_binary_request_header ) ; c -> rcurr = c -> rbuf ; if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Realign <S2SV_blank> input <S2SV_blank> buffer\\n"", c -> sfd ) ; } if ( c -> rbytes < sizeof ( protocol_binary_request_header ) ) { c -> rbytes = sizeof ( protocol_binary_request_header ) ; c -> rcurr = ( c -> rbuf",0
1426,"<S2SV_ModStart> ; if ( len < USB_DT_CONFIG_SIZE ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> type <S2SV_blank> = <S2SV_blank> 0x%X, <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %d\\n"", cfgidx, config -> desc. bDescriptorType, config -> desc. bLength ) ; return - EINVAL ; } if ( len < USB_DT_CONFIG_SIZE ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> type <S2SV_blank> = <S2SV_blank> 0x%X, <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %d\\n"", cfgidx, config -> desc. bDescriptorType, config -> desc. bLength ) ; return - EINVAL ; } if ( len < USB_DT_CONFIG_SIZE ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> type <S2SV_blank> = <S2SV_blank> 0x%X, <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %d\\n"", cfgidx, config -> desc. bDescriptorType, config -> desc. bLength ) ; return - EINVAL ; }",0
1427,"<S2SV_ModStart> ; if ( info -> count < 1 ) return - EINVAL ; access = info -> access == 0? SNDRV_CTL_ELEM_ACCESS_READWRITE : ( info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ) ; info -> id. numid = 0 ; memset ( & kctl, 0, sizeof ( kctl ) ) ;",0
1428,"<S2SV_ModStart> { exit_client ( client_p <S2SV_ModEnd>, client_p, <S2SV_ModStart> client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( strlen ( parv [ 1 ] ) > 400 ) { sendto_one ( source_p, form_str ( ERR_SASLTOOLONG ), me. name, EmptyString ( source_p -> name )? ""*"" : source_p -> name ) ; return 0 ; } if ( strlen ( parv [ 2 ] ) > 400 ) { sendto_one ( source_p, form_str ( ERR_SASLTOOLONG ), me. name, EmptyString ( source_p -> name )? ""*"" : source_p -> name ) ; return 0 ; } if ( parv [ 3 ] == '\\0' ) { agent_p = find_id ( source_p -> localClient -> sasl_agent ) ; agent_p = find_id ( source_p -> localClient -> sasl_agent ) ; agent_p = find_id ( source_p -> localClient -> sasl_agent ) ; if ( agent_p == NULL ) { send",0
1429,<S2SV_ModStart> case 0x67 : if ( mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if (,0
1430,"<S2SV_ModStart>. header. <S2SV_ModEnd> size, 0",0
1431,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1432,"<S2SV_ModStart> 16, & sse ) ; rate = x -> mbmode_cost [ mode ] ; this_rd = RDCOST ( x -> rdmult, x -> rddiv, rate, sse ) ; if ( error16x16 > this_rd ) { error16x16 = this_rd ; best_mode = mode ; best_sse = sse ; } } xd -> mode_info_context -> mbmi. mode = best_mode ; error4x4 = pick_intra4x4mby_modes ( x, & rate, & best_sse ) ; if ( error4x4 < error16x16 ) { xd -> mode_info_context -> mbmi. mode = B_PRED ; best_rate = rate ; }",0
1433,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; context <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR6 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; context <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd> ) ; context <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; context <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> )",0
1434,"<S2SV_ModStart> * start ; memset ( & psf -> header, 0, sizeof ( psf -> header ) ) ; <S2SV_ModStart> = strlen ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header, 0, <S2SV_ModEnd> maxlen ) ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> = strlen ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> = strlen ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> = strlen ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> = strlen ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> = strlen ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> = strlen ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> = strlen ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> = strlen ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> = strlen ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> = strlen ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header <S2SV_ModEnd> ) ; return",0
1435,"<S2SV_ModStart> ; if ( unconditional ( & e -> arp ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && t -> verdict < 0 && unconditional ( & e -> arp ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( t -> verdict < - NF_MAX_VERDICT - 1 && unconditional ( & e -> arp ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( t -> verdict < N",0
1436,<S2SV_ModStart> alg_priv ) { if (! ctx -> iface -> destroy ) ctx -> iface = NULL ; ctx -> name = NULL ; ctx -> priv = NULL ; res = VPX_CODEC_OK ; } else if (! ctx -> iface -> destroy ) ctx -> iface = NULL ; ctx -> priv = NULL ; res = VPX_CODEC_ERROR ; else { if (! ctx -> iface -> destroy ) ctx -> iface = NULL ; ctx -> name = NULL ; ctx -> priv = NULL ; } else { if (! ctx -> iface -> destroy ) ctx -> iface = NULL ; ctx -> name = NULL ; ctx -> priv = NULL ; res = VPX_CODEC_OK ; },0
1437,"<S2SV_ModStart> ; } if ( exit_reason == EXIT_REASON_EXTERNAL_INTERRUPT ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry\\n"", __func__ ) ; return 1 ; } if ( exit_reason == EXIT_REASON_EXTERNAL_INTERRUPT ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry\\n"", __func__ ) ; return 0 ; } if ( exit_reason == EXIT_REASON_EXTERNAL_INTERRUPT ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, __func__ ) ; return 1 ; } if ( exit_reason == EXIT_REASON_EXTERNAL_INTERRUPT ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__ ) ; return 0 ; } if ( exit_reason == EXIT_REASON_EXTERNAL_INTERRUPT ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, __func__",0
1438,<S2SV_ModStart> speed ) { <S2SV_ModEnd> sf -> adaptive_rd_thresh <S2SV_ModStart> ; sf -> use_square_partition_only <S2SV_ModEnd> =! frame_is_intra_only <S2SV_ModStart> = 1 ; <S2SV_ModEnd> sf -> less_rectangular_check <S2SV_ModStart> = 1 ; <S2SV_ModEnd> sf -> tx_size_search_method <S2SV_ModStart> = 1 ; <S2SV_ModEnd> sf -> subpel_iters_per_step <S2SV_ModStart> = 1 ; <S2SV_ModEnd> sf -> mode_skip_start <S2SV_ModStart> = 10 ; <S2SV_ModEnd> sf -> adaptive_pred_interp_filter <S2SV_ModStart> = 1 ; <S2SV_ModEnd> sf -> recode_loop <S2SV_ModStart> = ALLOW_RECODE_KFARFGF ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_16X16,0
1439,"<S2SV_ModStart> ; dh = skb_header_pointer ( skb, dataoff, sizeof ( _dh ), & dh ) ; if ( dh == NULL ) { nf_ct_kill_acct ( ct, ctinfo, skb ) ; return NF_ACCEPT ; } <S2SV_ModStart> CT_DCCP_TIMEWAIT ) { ct -> proto. dccp. role [! dir ] = CT_DCCP_ROLE_CLIENT ; ct -> proto. dccp. role [! dir ] = CT_DCCP_ROLE_SERVER ; } break ; case CT_DCCP_REQUEST : if ( old_state == CT_DCCP_RESPOND && type == DCCP_PKT_ACK && dccp_hdr_seq ( dh ) == ct -> proto. dccp. handshake_seq ) set_bit ( IPS_ASSURED_BIT, & ct -> status ) ; break ; case CT_DCCP_RESPOND : if ( old_state == CT_DCCP_RESPOND && type == DCCP_PKT_ACK && dccp_hdr_seq ( dh ) == ct -> proto. dccp. handshake_seq ) set",0
1440,<S2SV_ModStart> struct compat_timex tx32 ; txc -> modes = tx32. modes ; txc -> freq = tx32. freq ; txc -> esterror = tx32. esterror ; txc -> status = tx32. status ; txc -> precision = tx32. precision ; txc -> tolerance = tx32. tolerance ; txc -> time. tv_sec = tx32. time. tv_sec ; txc -> time. tv_usec = tx32. time. tv_usec ; txc -> time. tv_sec = tx32. time. tv_sec ; txc -> time. tv_usec = tx32. time. tv_usec ; txc -> tick = tx32. tick ; txc -> ppsfreq = tx32. ppsfreq ; txc -> jitter = tx32. jitter ; txc -> shift = tx32. shift ; txc -> stabil = tx32. stabil ; txc -> calcnt = tx32. calcnt ; txc -> errcnt = tx32. errcnt ; txc ->,0
1441,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
1442,"<S2SV_ModStart> ; int goodsize ; if ( inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) { luaD_reallocstack ( L, goodsize, 0 ) ; } else { if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) { luaD_reallocstack ( L, goodsize, 0 ) ; } else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { },",0
1443,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1444,"<S2SV_ModStart>, * s = STR ( CHILD ( n, 0 ) ) <S2SV_ModEnd> ; int quote <S2SV_ModStart> ) { char * raw = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; char * ch, s_kind [ 3 ] = { 0, 0, 0 } ; raw = s ; while ( * raw && * raw!= '\\'' && * raw!= \'""\' ) { * ch ++ = * raw ++ ; } kind = PyUnicode_FromString ( s_kind ) ; if (! kind ) { return NULL ; } if (! str ) { Py_DECREF ( type ) ; ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } PyArena_AddPyObject ( c -> c_arena, str ) ; str = Str ( str, kind, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; return NULL ; } PyArena_AddPyObject ( c -> c_arena, str ) ; Py_DE",0
1445,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> ; } else if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { svc_ctx -> encoding_mode = atoi ( option_value ) ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { svc_ctx -> scale_factors = atoi ( option_value ) ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; if ( is_keyframe_qaunt_set ) { SvcInternal * const si = get_svc_internal ( svc_ctx ) ; memcpy ( get_svc_internal ( svc_ctx ) -> quantizer_keyframe, si -> quantizer, sizeof ( si -> quantizer ) ) ; } else if ( strcmp ( ""quantizers",0
1446,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( & <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> perf_event_update_userpage ( event,0
1447,"<S2SV_ModStart> ; if ( ( mask & KADM5_PRINCIPAL ) || ( mask & KADM5_LAST_PWD_CHANGE ) || ( mask & KADM5_MOD_TIME ) || ( mask & KADM5_MOD_NAME ) || ( mask & KADM5_AUX_ATTRIBUTES ) || ( mask & KADM5_KEY_DATA ) || ( mask & KADM5_LAST_SUCCESS ) || ( mask & KADM5_LAST_FAILED ) ) return KADM5_BAD_MASK ; if ( entry == ( kadm5_principal_ent_t ) NULL ) return EINVAL ; if ( mask & KADM5_TL_DATA ) { tl_data_orig = entry -> tl_data ; while ( tl_data_orig ) { if ( tl_data_orig -> tl_data_type < 256 ) return KADM5_BAD_TL_TYPE ; tl_data_orig = tl_data_orig -> tl_data_next ; } } ret = get_entry ( handle, entry -> principal, & kdb, & adb ) ; if ( ret ) return ret",0
1448,"<S2SV_ModStart> ; for ( plane = 0 ; plane < 4 && frame -> data [ plane ] ; plane ++ ) { int64_t linesize = av_image_get_linesize ( frame -> format, frame -> width, plane ) ; if ( linesize < 0 ) return linesize ; int64_t data = frame -> data [ plane ] ; int h = plane == 1 || plane == 2? FF_CEIL_RSHIFT ( inlink -> h, vsub ) : inlink -> h ; if ( linesize < 0 ) return linesize ; for ( i = 0 ; i < h ; i ++ ) { plane_checksum [ plane ] = av_adler32_update ( plane_checksum [ plane ], data, linesize ) ; checksum = av_adler32_update ( checksum, data, linesize ) ; data += linesize [ plane ] ; } checksum = av_adler32_update ( checksum, data, linesize ) ; checksum = av_adler32_update ( checksum, data, linesize ) ; for ( i = 0 ; i < h ; i ++ ) { plane_checksum [ plane ] = av_adler32_update ( plane_",0
1449,"<S2SV_ModStart> ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. mode ) ; mb_index ++ ; } fprintf ( mvs, ""Mb <S2SV_blank> mv <S2SV_blank> ref <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. ref_frame ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index ++ ; } for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ )",0
1450,"<S2SV_ModStart> self ) { PyObject <S2SV_ModEnd> * new_memo = <S2SV_ModStart> ; Py_ssize_t i ; PyObject * old_memo = PyDict_New ( ) ; if ( old_memo == NULL ) old_memo = PyDict_New ( ) ; if ( old_memo == NULL ) old_memo = PyDict_New ( ) ; if ( old_memo == NULL ) old_memo = PyDict_New ( ) ; if ( new_memo == NULL ) return NULL ; status = PyDict_SetItem ( old_memo, PyLong_FromSsize_t ( self -> unpickler -> memo_size ), value ) ; if ( status < 0 ) goto error ; status = PyDict_SetItem ( old_memo, PyLong_FromSsize_t ( self -> unpickler -> memo_size ), value ) ; Py_DECREF ( key ) ; if ( status < 0 ) goto error ; status = PyDict_SetItem ( old_memo, PyLong_FromSsize_t ( self -> unpickler -> memo_size ), value ) ; Py_DECREF ( key ) ; if ( status < 0 ) goto error ; status = Py",0
1451,,1
1452,"<S2SV_ModStart> do_error ( dbh <S2SV_ModEnd>, mysql_errno ( <S2SV_ModStart> pmysql ), mysql_sqlstate <S2SV_ModEnd> ( imp_dbh ->",0
1453,<S2SV_ModStart> ; if (! TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY (,0
1454,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; col_set_str ( pinfo -> cinfo, COL_PROTOCOL, ""PPI"" ) ; col_clear ( pinfo -> cinfo, COL_INFO ) ; if ( mpdu_tree ) { proto_tree_delete_subtree ( ppi_tree ) ; mpdu_tree = proto_tree_add_subtree ( ppi_tree, hf_ppi_header_version, tvb, offset, 1, ENC_LITTLE_ENDIAN ) ; mpdu_tree = proto_tree_delete_subtree ( ppi_tree, hf_ppi_header_version, tvb, offset, 1, ENC_LITTLE_ENDIAN ) ; } if ( mpdu_tree ) { proto_tree_delete_subtree ( ppi_tree, hf_ppi_header_version, tvb, offset, 1, ENC_LITTLE_ENDIAN ) ; mpdu_tree = proto_tree_add_subtree ( ppi_tree, hf_ppi_header_version, tvb, offset, 1, ENC_LITTLE",0
1455,<S2SV_ModStart> ; sh = s_malloc0 <S2SV_ModEnd> ( hdrlen +,0
1456,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; UINT32 tempWidth ; tempWidth = ROUND_UP_TO ( context -> width, 8 ) ; ccl = context -> ColorLossLevel ; for ( y = 0 ; y < context -> height ; y ++ ) { src = data + ( context -> height - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; for ( x = 0 ; x < context -> width ; x ++ ) { switch ( context -> format ) { case PIXEL_FORMAT_BGR24 : b_val = * src ++ ; g_val = * src ++ ; r_val = * src ++",0
1457,"<S2SV_ModStart> + 1 ; } if ( end_offset < offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo",0
1458,"<S2SV_ModStart> nr_parens ) return ERR_PTR <S2SV_ModEnd> ( - EINVAL <S2SV_ModStart> EINVAL ) ; if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } prog [ N ]. target = N - 1 ; len = parse_pred ( next, data, ptr - str, pe, & prog [ N ]. pred ) ; if ( len < 0 ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free",0
1459,<S2SV_ModStart> cpi ) { const VP9EncoderConfig <S2SV_ModEnd> * rc = <S2SV_ModStart> = ( ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> / 2 ) : ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> / 2 ) ;,0
1460,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1461,<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE <S2SV_ModEnd> read_tx_mode ( vpx_reader <S2SV_ModStart> r ) { vpx_reader_t <S2SV_ModEnd> * r = <S2SV_ModStart> * r = vpx_reader_t <S2SV_ModEnd> * r ; <S2SV_ModStart> * r = vpx_reader_t <S2SV_ModEnd> * r ; <S2SV_ModStart> * r = vpx_reader_t <S2SV_ModEnd> * r ; <S2SV_ModStart> * r = vpx_reader_t <S2SV_ModEnd> * r = <S2SV_ModStart> * r = vpx_reader_t <S2SV_ModEnd> * r = <S2SV_ModStart> * r = vpx_reader_t <S2SV_ModEnd> * r = <S2SV_ModStart> * r = vpx_reader_t <S2SV_ModEnd> * r = <S2SV_ModStart> * r = vpx_reader_t <S2SV_ModEnd> * r = <S2SV_ModStart> * r = vpx_reader_t <S2SV_ModEnd> * r = <S2SV_ModStart> * r = vpx_reader_t <S2SV_ModEnd> * r = <S2SV_ModStart> * r = vpx_reader_t <S2SV_ModEnd> * r = <S2SV_ModStart> * r = vpx_reader_t <S2SV_ModEnd> * r = <S2SV_ModStart> * r = vpx_reader_t <S2SV_ModEnd> * r = <S2SV_ModStart> * r = vpx_reader_t <S2SV_ModEnd> * r = <S2SV_ModStart> * r = vpx_reader_t <S2SV_ModEnd> * r =,0
1462,"<S2SV_ModStart> uint8_t * ) op + OSPF6HDR_LEN ; if ( EXTRACT_32BITS ( & hellop -> hello_options )!= 0 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Options <S2SV_blank> [%s]"", bittok2str ( ospf6_option_values, ""none"", EXTRACT_32BITS ( & hellop -> hello_options ) ) ) ; break ; } ND_TCHECK ( hellop -> hello_deadint ) ; if ( EXTRACT_16BITS ( & hellop -> hello_deadint )!= 0 ) ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Hello <S2SV_blank> Timer <S2SV_blank> %us, <S2SV_blank> Dead <S2SV_blank> Timer <S2SV_blank> %us, <S2SV_blank> Interface-ID <S2SV_blank> %s, <S2SV_blank> Priority <S2SV_blank> %u"", hellop -> hello_ifid, hellop -> hello_priority ) ) ; ND_TCHECK ( hellop -> hello_dr ) ; if ( EXTRACT_32BITS ( & hellop -> hello_dr )!= 0 ) ND_PRINT ( ( ndo, "", <S2SV_blank> Backup <S2SV_blank> Designated <S2SV_blank> Router <S2SV_blank> %s"", ipaddr_string ( n",0
1463,<S2SV_ModStart> { if ( datalen < 1 ) return - EINVAL ; if (,0
1464,"<S2SV_ModStart> rc, ""uwbd"" ) ; if ( rc -> uwbd. task == NULL ) { printk ( KERN_ERR ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; rc -> uwbd. pid = current -> pid ; } else if ( rc -> uwbd. task == NULL ) { printk ( KERN_ERR ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; rc -> uwbd. pid = current -> pid ; } else rc -> uwbd. pid = current -> pid <S2SV_ModEnd> ; } <S2SV_null>",0
1465,"<S2SV_ModStart> : # line 66 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 66 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 66 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 66 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 66 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 66 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 66 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 66 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 66 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 66 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 66 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 66 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 66 <S2SV_ModEnd> ""re_grammar.y"" {",0
1466,<S2SV_ModStart> ; * ptr = ( char ) <S2SV_ModEnd> ( ( existing <S2SV_ModStart> bitIdx ) ) ; if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { if ( gfx -> data,0
1467,"<S2SV_ModStart> = args -> cpi <S2SV_ModEnd> ; MACROBLOCKD * <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> ] ; MACROBLOCKD <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> ] ; MB_MODE_INFO <S2SV_ModStart> int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const int ref = is_inter_block ( mbmi ) ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] = cpi -> fc -> coef_counts [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] = cpi -> common. fc -> coef_probs [ tx_size ] [ type ] [ ref ] ; unsigned int ( * const eob_branch ) [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ] [ type ] [ ref ] ; unsigned int ( * const eob_branch ) [ COEFF_CONTEXTS ] = cpi -> common. counts. eob",0
1468,<S2SV_ModStart> pSelect -> pSrc ; if ( pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
1469,<S2SV_ModStart> { if ( shmflg & SHM_RND ) addr &= ~ ( shmlba - 1 ) ; else # ifndef __ARCH_FORCE_SHMLBA if ( addr & ~ PAGE_MASK ) # endif else # ifndef __ARCH_FORCE_SHMLBA if ( addr & ~ ( shmlba - 1 ) <S2SV_ModEnd> goto out ;,0
1470,"<S2SV_ModStart> ; serv = svc_create <S2SV_ModEnd> ( & nfs4_callback_program <S2SV_ModStart>, sv_ops ) ; if (! serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; } cb_info -> serv = serv ; dprintk ( ""nfs_callback_create_svc: <S2SV_blank> service <S2SV_blank> created\\n"" ) ;",0
1471,"<S2SV_ModStart> point, const CurveZZ_p * curve ) { PointZZ_p R0, R1, tmp ; mpz_inits ( R1. x, R1. y, R0. x, R0. y, R1. x, R1. y, NULL ) ; mpz_inits ( R0. x, R0. y, R1. x, R1. y, tmp. x, tmp. y, NULL ) ; mpz_inits ( R1. x, R1. y, tmp. x, tmp. y, NULL ) ; mpz_inits ( R1. x, R1. y, R0. x, R0. y ) ; mpz_inits ( R1. x, R1. y, tmp. x, tmp. y, NULL ) ; mpz_inits ( R1. x, R1. y, tmp. x, tmp. y, NULL ) ; mpz_inits ( R1. x, R1. y, NULL ) ; mpz_inits ( R1. x, R1. y, tmp. x, tmp. y, NULL ) ;",0
1472,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1473,<S2SV_ModStart> case NPNVSupportsWindowless : type = RPC_TYPE_BOOLEAN ; break ; case NPNVJavaScriptEnabledBool : type = RPC_TYPE_BOOLEAN ; break ; case NPNVasdEnabledBool : type = RPC_TYPE_UINT32 ; break ; case NPNVVisOfflineBool : type = RPC_TYPE_UINT32 ; break ; case NPNVSupportsWindowless : type = RPC_TYPE_BOOLEAN ; break ; case NPNVToolkit : case NPNVnetscapeWindow : type = RPC_TYPE_UINT32 ; break ; case NPNVToolkit : type = RPC_TYPE_UINT32 ; break ; case NPNVnetscapeWindow : type = RPC_TYPE_UINT32 ; break ; case NPNVPluginElementNPObject : type = RPC_TYPE_NP_OBJECT ; break ;,0
1474,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
1475,"<S2SV_ModStart> s ) { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } <S2SV_ModStart>, 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = send ( sock_fd, buf, s, 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = send ( sock_fd, buf, s, 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d,",0
1476,"<S2SV_ModStart> ; for ( xIter = crm_first_attr ( xml ) ; xIter!= NULL ; xIter = xIter -> next ) { const char * prop_name = ( const char * ) xIter -> name ; if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ;",0
1477,<S2SV_ModStart> <S2SV_null> static SvcInternal <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
1478,"<S2SV_ModStart> mq_flush_lock, flags ) ; flush_rq -> tag = - 1",0
1479,"<S2SV_ModStart> { int length ; struct stream packet = * s ; if (! s_check ( s ) ) return RD_FALSE <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & packet ) ; if (! s_check ( s ) ) return RD_FALSE <S2SV_ModStart>, MCS_TAG_DOMAIN_PARAMS, & packet <S2SV_ModEnd> ) ; in_uint8s <S2SV_ModStart> length ) ; if (! s_check ( s ) ) return RD_FALSE ;",0
1480,"<S2SV_ModStart> == HASH_KEY_IS_STRING ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; fprintf ( stderr, ""\\",0
1481,"<S2SV_ModStart> only_420 ) { int ret <S2SV_ModEnd> ; int i <S2SV_ModStart> = VPX_IMG_FMT_I420 ; if ( ret < 0 ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> header; <S2SV_blank> not <S2SV_blank> a <S2SV_blank> YUV4MPEG2 <S2SV_blank> file?\\n"" ) ; return ret ; } if ( ret < 0 ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> header; <S2SV_blank> not <S2SV_blank> a <S2SV_blank> YUV4MPEG2 <S2SV_blank> file?\\n"" ) ; return ret ; } if ( ret < 0 ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> header; <S2SV_blank> not <S2SV_blank> a <S2SV_blank> YUV4MPEG2 <S2SV_blank> file?\\n"" ) ; return ret ; } if ( ret < 0 ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> header; <S2SV_blank> not <S2SV_blank> a <S2SV_blank> YUV4MPEG2 <S2SV_blank> file?\\n"" ) ; return ret ; } if ( ret < 0 ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> header; <S2SV_blank> not <S2SV_blank> a <S2SV_blank> YUV4MPEG2 <S2SV_blank> file?\\n"" ) ; return ret ; } if ( ret < 0 ) { fprintf ( stderr, ""Error <S2SV_blank>",0
1482,"<S2SV_ModStart> obj * otmp ; if ( strlen ( buf ) > 1024 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } if ( strlen ( buf ) > 1024 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } if ( strlen ( buf ) > 1024 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } if ( strlen ( buf ) > 1024 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } if ( strlen ( buf ) > 1024 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } if ( strlen ( buf ) > 1024 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
1483,"<S2SV_ModStart> long long directory_table_end, table_start <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table",0
1484,"<S2SV_ModStart> * createenv ( <S2SV_ModEnd> const struct rule <S2SV_ModStart> root ) ; if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; if ( RB_INSERT ( envtree, & env -> root, NULL ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } else if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; size_t len ; char keybuf [ 1024 ] ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } }",0
1485,"<S2SV_ModStart> -> seg ; int segment ; memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ; memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vpx_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vp9_set_segdata ( seg, segment, SEG_LV",0
1486,"<S2SV_ModStart> ; Module_type = make_type <S2SV_ModEnd> ( ""Module"", <S2SV_ModStart>, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 5 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"", stmt_type, ClassDef_fields, 5 ) ; if (! ClassDef_type ) return 0 ; Return_type =",0
1487,"<S2SV_ModStart> O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IWGRP | S_IROTH <S2SV_ModEnd> ) ; if <S2SV_ModStart> } write ( logfile_fd <S2SV_ModEnd>, ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"",",0
1488,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 2 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 2 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 2 ; <S2SV_ModEnd> break ; },0
1489,<S2SV_ModStart> ) ; } ++ x -> ymode_count [ m ] ;,0
1490,"<S2SV_ModStart> ) ; } if ( sr -> fid_ofile == NULL ) { smbsr_error ( sr, NT_STATUS_INVALID_HANDLE, ERRDOS, ERRbadfid ) ; return ( SDRC_ERROR ) ; }",0
1491,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> atomicio ( read <S2SV_ModStart>, & stb, sizeof ( stb ) <S2SV_ModEnd> )!= sizeof <S2SV_ModStart>, & stb, sizeof ( stb ) <S2SV_ModEnd> )!= sizeof <S2SV_ModStart>, & stb, sizeof ( stb ) <S2SV_ModEnd> )!= sizeof <S2SV_ModStart>, & stb, sizeof ( stb ) <S2SV_ModEnd> )!= sizeof <S2SV_ModStart>, & stb, sizeof ( stb ) <S2SV_ModEnd> )!= sizeof <S2SV_ModStart>, & stb, sizeof ( stb ) <S2SV_ModEnd> )!= sizeof <S2SV_ModStart> ; if ( <S2SV_ModEnd> atomicio ( read <S2SV_ModStart>, remin, & stb, sizeof ( stb ) <S2SV_ModEnd> )!= sizeof <S2SV_ModStart>, & stb, sizeof ( stb ) <S2SV_ModEnd> )!= sizeof <S2SV_ModStart>, & stb, sizeof ( stb ) <S2SV_ModEnd> )!= sizeof <S2SV_ModStart>, & stb, sizeof ( stb ) <S2SV_ModEnd> )!= sizeof <S2SV_ModStart>, & stb, sizeof ( stb ) <S2SV_ModEnd> )!= sizeof",0
1492,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, * t, * StartClean ; double * argbuf <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> ; outpos = outputbuffer ; outpos += sprintf ( outpos <S2SV_ModEnd>, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", <S2SV_ModStart> outpos += sprintf ( outpos <S2SV_ModEnd>, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", <S2SV_ModStart> outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", axohelp ) ; return ( 0 ) ; } if ( * s == '0' && s [ 1 ] == '[' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; if ( strcmp ( nameobject, ""Curve"" ) == 0 ) { if ( ( argbuf = ReadArray ( t, & num1, & num2 ) ) == 0 ) { if ( ( argbuf = ReadArray ( t, & num1, & num2 )",0
1493,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart> ip_idents_hashrnd __read_mostly ; net_get_random_once ( & net -> ipv4. ip_id_hashrnd, sizeof ( net -> ipv4. ip_id_hashrnd ) ) ; net_get_random_once ( & net -> ipv4. ip_id_hashrnd, sizeof ( net -> ipv4. ip_id_hashrnd ) ) ; hash = jhash_3words ( hash, ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, net -> ipv4. ip_id_protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs ) ; iph -> id = htons ( id ) ; }",0
1494,"<S2SV_ModStart> expr_ty step ; PyObject * attr_id = NULL ; <S2SV_ModStart> ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_lower ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( exists_not_none ( obj, & PyId_upper ) ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( exists_not_none ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper, step, arena ) ; if ( * out == NULL ) goto failed ; return 0 ; } isinstance = _PyObject_Is",0
1495,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
1496,"<S2SV_ModStart> = gecos ; # endif <S2SV_ModStart> = gecos ; # ifdef HAVE_LIBUSER if ( setpwuid ( ctl -> pw, ctl -> username ) < 0 ) { warn ( ""setpwuid <S2SV_blank> failed. <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ; return - 1 ; } if ( setpwnam ( ctl -> pw, ctl -> username ) < 0 ) { warn ( ""setpwnam <S2SV_blank> failed. <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again.\\n"" ) ; return - 1 ; } free ( gecos ) ; printf ( _ ( ""Finger <S2SV_blank> information <S2SV_blank> *NOT* <S2SV_blank> changed. <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ) ; return - 1 ; } # ifdef HAVE_LIBUSER if ( set_value_libuser ( ""chfn"", ctl -> username, ctl -> pw -> pw_uid, LU_GECOS, gecos ) < 0 ) { warn ( ""setpwnam <S2SV_blank> failed. <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ; return - 1 ; }",0
1497,<S2SV_ModStart> vns ) { struct ieee80211_radiotap_vendor_namespaces * radiotap_vns = & radiotap_vns ; if ( max_length < get_unaligned_le16 ( & radiotap_header -> it_len ) ) return - EINVAL ; if ( max_length < get_unaligned_le16 ( & radiotap_header -> it_len ) ) return - EINVAL ; iterator -> _rtheader = radiotap_header ; iterator -> _max_length = get_unaligned_le16 ( & radiotap_header -> it_len ) ; iterator -> _arg_index = 0 ; iterator -> current_namespace = & radiotap_vns ; iterator -> is_radiotap_ns = 1 ; if ( iterator -> _bitmap_shifter & ( 1 << IEEE80211_RADIOTAP_EXT ) ) { while ( get_unaligned_le32 ( iterator -> _arg ) & ( 1 << IEEE80211_RADIOTAP_EXT ) ) { iterator -> _arg += sizeof ( uint32_t ) ; iterator -> _,0
1498,"<S2SV_ModStart> int err ; list_for_each_entry ( iter, & alink -> dscp_map, list ) if ( iter -> handle == knode -> handle ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } val = be32_to_cpu ( iter -> sel -> keys [ 0 ]. val ) >> tos_off & 0xff ; mask = iter -> sel -> keys [ 0 ]. mask >> tos_off & 0xff ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } cmask = iter -> mask & mask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_",0
1499,"<S2SV_ModStart> } ZEND_FETCH_RESOURCE ( im <S2SV_ModEnd>, gdImagePtr, <S2SV_ModStart> le_gd ) ; <S2SV_ModEnd> if ( gdImageTrueColor <S2SV_ModStart> ) ) { int x, y, c ; c = gdImageGetPixel ( im, x, y ) ; gdImageSetPixel ( im, x, y, c ) ; gdImageSetPixel ( im, x, y, c ) ; gdImageSetPixel ( im, x, y, c ) ; gdImageSetPixel ( im, x, y, c ) ; for ( x = 0 ; x < gdImageSY ( im ) ; x ++ ) { c = gdImageGetPixel ( im, x, y ) ; gdImageSetPixel ( im, x, y, c ) ; gdImageSetPixel ( im, x, y, c ) ; gdImageSetPixel ( im, x, y, c ) ; gdImageSetPixel ( im, x, y, c ) ; gdImageSetPixel ( im, x, y, c ) ; for ( x = 0 ; x < gdImageSX ( im ) ; x ++ ) { c = gdImageGetPixel ( im, x, y ) ; gdImageSetPixel ( im,",0
1500,<S2SV_ModStart> ; } if ( stream -> config. cfg. rc_twopass_stats_in == NULL ) { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } else if ( stream -> config. cfg. rc_twopass_stats_in == NULL ) { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; } if ( stream -> config. cfg. rc_twopass_stats_in == NULL ) { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; },0
1501,"<S2SV_ModStart> ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len,",0
1502,"<S2SV_ModStart> { VP9_COMMON * const cm = & pbi -> common ; TileBuffer tile_buffers [ 4 ] [ 1 << 6 ] ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; TileBuffer tile_buffers [ 4 ] [ 1 << 6 ] ; int tile_row, tile_col ; const int last_tile = tile_row == tile_rows - 1 && tile_col == tile_cols - 1 ; const size_t size = get_tile ( data_end, last_tile, & cm -> error, & data ) ; TileBuffer * const buf = & tile_buffers [ tile_row ] [ tile_col ] ; buf -> data = data ; buf -> size = size ; data += size ; } } for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) {",0
1503,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9Decoder <S2SV_ModEnd> * vp9_decoder_create ( <S2SV_ModStart> * oxcf ) { VP9_COMMON * const cm = vpx_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 0 ; vp9_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vpx_initialize_dec ( ) ; vpx_rtcd ( ) ; memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; cm -> error. setjmp = 0 ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_init ( & pbi -> lf_worker ) ; return pbi ;",0
1504,"<S2SV_ModStart> { GF_LOG ( GF_LOG_ERROR <S2SV_ModEnd>, GF_LOG_CONTAINER, <S2SV_ModStart> GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1505,<S2SV_ModStart> -> count ; new_fpl -> locked = 0 ;,0
1506,"<S2SV_ModStart> req ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> -> opt ; if ( opt == NULL || opt -> cipso == 0 ) return ; opt = rcu_dereference_protected ( req_inet -> opt, sock_owned_by_user ( req -> sk ) ) ; if ( opt == NULL || opt -> opt. <S2SV_ModStart> == NULL || opt -> opt. <S2SV_ModStart> == 0 ) return ; rcu_assign_pointer ( req_inet -> opt, NULL ) ;",0
1507,"<S2SV_ModStart> * tokens, vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tree2tok ( tokens, tree, i, v, l ) ; } <S2SV_ModEnd> } while (",0
1508,"<S2SV_ModStart> = VPX_CODEC_OK ; int ref = 7 ; int upd = 7 ; if ( ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) && ( flags & VP8_EFLAG_FORCE_GF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_UPD_LAST | VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF ) ref ^= VP9_ALT_FLAG ; if",0
1509,<S2SV_ModStart> wqh ) ; spin_lock_init ( & ctx -> lock ) ; <S2SV_ModStart> clockid = clockid ; spin_unlock_init ( & ctx -> lock,0
1510,"<S2SV_ModStart> * child, <S2SV_ModEnd> * p ; <S2SV_ModStart> int err ; lock_mount_hash ( ) ; err = propagate_mnt ( dest_mnt, dest_mp, source_mnt, & tree_list ) ; if ( err ) goto out_cleanup_ids ; for ( p = source_mnt ; p ; p = next_mnt ( p, source_mnt ) ) set_mnt_shared ( p ) ; if ( err ) goto out_cleanup_ids ; for ( p = source_mnt ; p ; p = next_mnt ( p, source_mnt ) ) set_mnt_shared ( p ) ; err = propagate_mnt ( dest_mnt, dest_mp, source_mnt, & tree_list ) ; if ( err ) goto out_cleanup_ids ; for ( p = source_mnt ; p ; p = next_mnt ( p, source_mnt ) ) set_mnt_shared ( p ) ; if ( err ) goto out_cleanup_ids ; for ( p = source_mnt ; p ; p = next_mnt ( p, source_mnt ) ) set_mnt_shared ( p ) ; err = propagate_mnt ( dest_mnt, dest_mp,",0
1511,"<S2SV_ModStart> { ret = get_tag_full ( asn1, len, & t, & clen, & len ) ; if ( ret ) goto error ; if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; ret = decode_atype ( & t, contents, clen, elemtype, elem ) ; if ( ret ) goto error ; count ++ ; }",0
1512,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i,0
1513,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart>, const VP9_CONFIG * oxcf ) { int64_t max_bits ; max_bits = ( ( int64_t ) rc -> av_per_frame_bandwidth * ( int64_t ) oxcf -> two_pass_vbrmax_section ) / 100 ; if ( max_bits < 0 ) max_bits = 0 ; if ( max_bits > rc -> max_frame_bandwidth ) max_bits = rc -> max_frame_bandwidth ; if ( max_bits > rc -> max_frame_bandwidth ) max_bits = rc -> max_frame_bandwidth ; if ( max_bits < rc -> min_frame_bandwidth ) max_bits = rc -> min_frame_bandwidth ; if ( max_bits > rc -> max_frame_bandwidth ) max_bits = rc -> max_frame_bandwidth ; if ( max_bits > rc -> max_frame_bandwidth ) max_bits = rc -> max_frame_bandwidth ; if ( max_bits < rc -> min_frame_bandwidth ) max_bits = rc",0
1514,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ MIF_MAGICLEN,0
1515,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> Huff_transmit ( huff_t <S2SV_ModStart> { Huff_transmit ( huff <S2SV_ModEnd>, NYT, <S2SV_ModStart> } else { send ( huff -> loc [ ch ] <S2SV_ModEnd>, NULL,",0
1516,"<S2SV_ModStart> void encode_superblock ( VP9_COMMON * cm, MACROBLOCK * x, int mi_row, int mi_col, BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> td. <S2SV_ModStart> x = & x <S2SV_ModEnd> -> e_mbd ; <S2SV_ModStart> -> mbmi ; PICK_MODE_CONTEXT * ctx <S2SV_ModEnd> = get_block_context ( <S2SV_ModStart>. allow_skip_recode ; ctx <S2SV_ModEnd> -> is_coded = <S2SV_ModStart>. allow_skip_recode ; ctx <S2SV_ModEnd> -> is_coded = <S2SV_ModStart>. allow_skip_recode ; ctx <S2SV_ModEnd> -> is_coded = <S2SV_ModStart>. allow_skip_optimize ; ctx <S2SV_ModEnd> -> is_coded = <S2SV_ModStart> ; if ( xd <S2SV_ModEnd> -> frame_type == <S2SV_ModStart> KEY_FRAME ) { set_ref_ptrs <S2SV_ModEnd> ( cm, <S2SV_ModStart> } else { set_ref_ptrs <S2SV_ModEnd> ( cm,",0
1517,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> crypto_skcipher * tfm_des = crypto_alloc_skcipher ( ""ecb(des)"" <S2SV_ModEnd>, 0, <S2SV_ModStart>, CRYPTO_ALG_ASYNC ) ; if ( IS_ERR ( tfm_des ) ) { rc = PTR_ERR ( tfm_des ) ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err <S2SV_ModEnd> ; } req <S2SV_ModStart> skcipher_request_alloc ( tfm_des, GFP_KERNEL ) ; if (! req ) { rc = - ENOMEM ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_free_skcipher ; } req = skcipher_request_alloc ( tfm_des, GFP_KERNEL ) ; if (! req ) { rc = - ENOMEM ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err <S2SV_ModEnd> ; } skcipher_request_set_",0
1518,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex,0
1519,"<S2SV_ModStart> range_max ) { int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } position = get_bits_count ( gbc ) ; zeroes = i = 0 ; while ( 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( ctx -> trace_enable ) position =",0
1520,<S2SV_ModStart> += delta ; <S2SV_ModEnd> } } <S2SV_null>,0
1521,<S2SV_ModStart> ; case EXIT_REASON_PAGE_FAULT : if ( is_page_fault ( intr_info ) &&! ( vmcs12 -> guest_cr0 & X86_CR0_TS ) ) return 0 ; else if ( is_fault ( intr_info ) &&! ( vmcs12 -> guest_cr0 & X86_CR0_TS ) ) return 0 ; else if ( is_fault ( intr_info ) &&! ( vmcs12 -> guest_cr0 & X86_CR0_TS ) ) return enable_ept ; else if ( is_fault ( intr_info ) &&! ( vmcs12 -> guest_cr0 & X86_CR0_TS ) ) return 0 ; else if ( is_fault ( intr_info ) &&! ( vmcs12 -> guest_cr0 & X86_CR0_TS ) ) return enable_ept ; else if ( is_fault ( intr_info ) &&! ( vmcs12 -> guest_cr0 & X86_CR0_TS ) ) return enable_ept ; else if ( is_fault ( intr_info ) &&! ( vmcs12 -> guest_cr0,0
1522,"<S2SV_ModStart> { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~",0
1523,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> http_contentlen. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> http_method. ptr = NULL, packet -> http_method. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> server_line.",0
1524,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1525,"<S2SV_ModStart> ++ r ; if ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) > entries ) { assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r",0
1526,"<S2SV_ModStart> += 4 ) { if ( ( x + 4 ) > dds_info -> width || ( y + 4 ) > dds_info -> height ) { return MagickFalse ; } <S2SV_ModStart> x ), ( y + 4 ) > dds_info -> height ) { return MagickFalse ; } <S2SV_ModStart> dds_info, 8 ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBShort ( image ) ; bits = ReadBlobLSBLong ( image ) ; CalculateColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { for ( i = 0 ; i < 4 ; i ++ ) { if ( ( x + i ) < ( ssize_t ) dds_info -> width && ( y + i ) < ( ssize_t ) dds_info -> height ) ) { if ( ( x + i ) < ( ssize_t ) dds_info -> width ) && ( y + i ) < ( ssize_t ) dds_info -> height ) {",0
1527,"<S2SV_ModStart> drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( ip_options_compile ( dev_net ( dev ), opt,",0
1528,"<S2SV_ModStart> length ) { int ret ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> EINTR ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY (",0
1529,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
1530,"<S2SV_ModStart> cfg ) { int i ; memset ( cfg, 0, sizeof ( cfg_t ) ) ; for ( i = 0 ; i < argc ; i ++ ) { if ( strcmp ( argv [ i ], ""verbose"" ) == 0 ) cfg -> verbose = 1 ; if ( strcmp ( argv [ i ], ""verbose"" ) == 0 ) cfg -> verbose = 1 ; if ( strcmp ( argv [ i ], ""verbose"" ) == 0 ) cfg -> verbose = 1 ; if ( strncmp ( argv [ i ], ""verbose="", 12 ) == 0 ) cfg -> verbose = 1 ; if ( strcmp ( argv [ i ], ""verbose="", 12 ) == 0 ) cfg -> verbose = 1 ; if ( strcmp ( argv [ i ], ""verbose="", 12 ) == 0 ) cfg -> verbose = 1 ; if ( strncmp ( argv [ i ], ""verbose="", 12 ) == 0 ) cfg -> verbose = 1 ; if ( strncmp ( argv [ i ], ""verbose="", 12 ) == 0 ) cfg -> verbose = 1 ; if ( strcmp ( argv [ i ], ""verbose="", 12 ) == 0 ) cfg -> verbose = 1 ; if",0
1531,"<S2SV_ModStart> ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ;",0
1532,<S2SV_ModStart> ) ) { sendReal <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1533,"<S2SV_ModStart> FALSE ; WLog_VRB ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; Stream_Read_UINT32 ( s, rdp -> autodetect -> bandwidthMeasureTimeDelta ) ; Stream_Read_UINT32 ( s, rdp -> autodetect -> bandwidthMeasureByteCount ) ;",0
1534,<S2SV_ModStart> ; # endif # if ( CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING ) if ( cpi -> b_multi_threaded!= 0 ) last_row_current_mb_col = & cpi -> mt_last_mb_col [ mb_row - 1 ] ; else last_row_current_mb_col = & cpi -> mt_last_mb_col [ mb_row - 1 ] ; if ( cpi -> b_multi_threaded!= 0 ) last_row_current_mb_col = & cpi -> mt_last_mb_col [ mb_row - 1 ] ; else last_row_current_mb_col = & cpi -> mt_last_mb_col [ mb_row - 1 ] ; else last_row_current_mb_col = & cpi -> mt_last_mb_col [ mb_row - 1 ] ; if ( cpi -> b_multi_threaded!= 0 ) last_row_current_mb_col = & cpi -> mt_last_mb_col [ mb_row - 1 ] ; else last_row_current_mb_col =,0
1535,"<S2SV_ModStart> ( pvc ) ; dev = alloc_netdev ( 0, ""pvceth%d"", ether_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if ( type == ARPHRD_ETHER ) dev = alloc_netdev ( 0, ""pvceth%d"", pvc_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev -> priv_flags &= ~ IFF_TX_SK",0
1536,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (! s_check ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (! s_check ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (! s_check ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (! s_check ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream",0
1537,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1538,"<S2SV_ModStart> case FORM_INPUT_CHECKBOX : if ( form -> checked ) buf -> currentLine -> lineBuf [ spos ] ='<S2SV_blank>'; else buf -> currentLine -> lineBuf [ spos ] ='<S2SV_blank>'; break ; case FORM_INPUT_PASSWORD : if ( form -> checked ) buf -> currentLine -> lineBuf [ spos ] ='<S2SV_blank>'; else buf -> currentLine -> lineBuf [ spos ] ='<S2SV_blank>'; break ; case FORM_INPUT_FILE : case FORM_INPUT_PASSWORD : if ( form -> type == FORM_INPUT_FILE ) buf -> currentLine -> lineBuf [ spos ] ='<S2SV_blank>'; else buf -> currentLine -> lineBuf [ spos ] ='<S2SV_blank>'; break ; case FORM_INPUT_RADIO : if ( form -> type == FORM_TEXTAREA ) { int n = a -> y - buf -> currentLine -> linenumber ; if ( n > 0 ) for ( ; l && n ; l = l -> prev, n ++ ) ; else if ( n < 0 ) for ( ; l && n ; l = l -> prev, n ++ ) ; else if ( n < 0 ) for ( ; l && n ; l = l -> prev,",0
1539,<S2SV_ModStart> { if ( ( <S2SV_ModStart> 0x00 ) { xWantedSize += xHeapStructSize ; if ( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) > xFreeBytesRemaining ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } if ( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) > xFreeBytesRemaining ) ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE,0
1540,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1541,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1542,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> cc ) ; if ( ( cc % ( bps * stride ) )!= 0 ) { TIFFErrorExt ( tif -> tif_dir. td_bitspersample, ""cc%(bps*stride)!=0"" ) ; TIFFErrorExt ( tif -> tif_dir. td_bitspersample, ""cc%(bps*stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! tmp ) { TIFFErrorExt ( tif -> tif_dir. td_bitspersample, ""cc%(bps*stride)!=0"" ) ; return 1 ; } _TIFFmemcpy ( tmp, cp0, cc ) ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ;",0
1543,"<S2SV_ModStart> { uint16 num_updates = 0 <S2SV_ModStart> int i ; if (! s_check ( s ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> bitmap <S2SV_blank> updates <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & s ) ; return ; } <S2SV_ModStart> ++ ) { if (! s_check ( s ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> bitmap <S2SV_blank> would <S2SV_blank> overrun"", & s ) ; return ; } <S2SV_ModStart> ++ ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> bitmap <S2SV_blank> updates <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & s ) ; return ; } <S2SV_ModStart> ++ ) { if (! s_check ( s ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> bitmap <S2SV_blank> would <S2SV_blank> overrun"", & s ) ; return ; } <S2SV_ModStart> ++ ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> bitmap <S2SV_blank> updates <S2SV_blank> from <S2SV_blank> stream",0
1544,"<S2SV_ModStart> } else { if ( smatch ( option, ""path"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Path <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( option, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""backup"" ) ) { backup = atoi ( ovalue ) ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Backup <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Backup <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10",0
1545,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> tx_size ] ; vpx_coeff_count * coef_counts = <S2SV_ModEnd> cpi -> coef_counts <S2SV_ModStart> ] ; vpx_tree_probs_from_distribution <S2SV_ModEnd> ( vp9_coef_tree,",0
1546,"<S2SV_ModStart> ( name ) ; SET_FLAG ( tc. c_iflag, IUTF8, utf8 ) ; r = loop_write ( fd, ""\\033%G"", ""\\033%@"", 3, false ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> UTF-8 <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = tcsetattr ( fd, TCSANOW, & tc ) ; if ( r < 0 ) return log_warning_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = loop_write ( fd, ""\\033%G"", ""\\033%@"", 3, false ) ; if ( r < 0 ) return log_warning_errno (",0
1547,"<S2SV_ModStart> int su3000_frontend_attach ( struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dvb_usb_device * d1 = adap -> dev ; struct dvb_usb_device * d2 = adap -> d2c_adap ; struct dvb_usb_device * d2 = adap -> d2c_adap ; struct dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> data [ 0 ] = 0xe ; d -> data [ 1 ] = 0x83 ; d -> data [ 2 ] = 1 ; if ( dvb_usb_generic_rw ( d, d -> data, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> data [ 0 ] = 0xe ; d -> data [ 1 ] = 0x83 ; d -> data [ 2 ] = 1 ; if ( dvb_usb_generic_rw (",0
1548,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> cfg, vpx_codec_flags_t <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC",0
1549,"<S2SV_ModStart> stride, int uv_block_size <S2SV_ModEnd>, int mv_row <S2SV_ModStart>. interp_filter ) ; const InterpKernel * const kernel = vp9_get_interp_kernel ( xd -> mi [ 0 ] -> mbmi. interp_filter ) ; enum mv_precision mv_precision_uv ; int uv_stride ; if ( uv_block_size == 8 ) { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q4 ; } else { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q3 ; } vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv",0
1550,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) < 4 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } <S2SV_ModEnd> bufp = find_optparam <S2SV_ModStart> buf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE",0
1551,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static cJSON * <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> ; for ( int j = 0 ; j < count ; ++ j ) { cJSON * n = 0, * p = 0 ; cJSON * a = cJSON_CreateArray ( ) ; for ( j = 0 ; j < count ; ++ j ) n = cJSON_CreateFloat ( numbers [ j ] ) ; if (! j ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } return a ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1552,"<S2SV_ModStart> tk_status ) ; if ( status == NLM_LCK_DENIED_REBIND ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_rebind ; } if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_unlock ; } if ( status == NLM_LCK_GRANTED ) { printk ( KERN_WARNING ""lockd: <S2SV_blank> unexpected <S2SV_blank> unlock <S2SV_blank> status: <S2SV_blank> %d\\n"", status ) ; goto die ; } if ( status == NLM_LCK_GRANTED ) printk ( KERN_WARNING ""lockd: <S2SV_blank> unexpected <S2SV_blank> unlock <S2SV_blank> status: <S2SV_blank> %d\\n"", status ) ; die : return <S2SV_ModEnd> ; } <S2SV_null>",0
1553,"<S2SV_ModStart>, n ) ; if ( w == NULL ) { stb_vorbis_error ( f, ""get_window <S2SV_blank> failed"" ) ; return 0 ; } <S2SV_ModStart>, n ) ; if ( w == NULL ) { stb_vorbis_error ( f, ""get_window <S2SV_blank> failed"" ) ; return 0 ; } f -> previous_length = len - right ; for ( i = 0 ; i < f -> channels ; ++ i ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] ; for ( j = 0 ; j < f -> channels ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] ; for ( j = 0 ; j < f -> channels ; ++ i ) for ( j = 0 ; j < f -> channels ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * w [ j ] ; for ( j = 0 ; j < f -> channels ; ++ j ) f -> channel_buffers [ i ]",0
1554,"<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> ) ; for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. len = GETINT32 ( buf + idx ) ; idx += 4 ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_",0
1555,"<S2SV_ModStart> data_end ) { VP9_COMMON * const cm = & pbi -> common ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows_aligned = mi_cols_aligned_to_sb ( cm -> mi_cols ) ; const int tile_cols_aligned = mi_cols_aligned_to_sb ( cm -> mi_cols ) ; const int tile_rows_aligned = mi_cols_aligned_to_sb ( cm -> mi_rows ) ; const int tile_rows_aligned = tile_rows_aligned_to_sb ( cm -> mi_rows ) ; const int tile_rows_aligned = mi_rows_aligned_to_sb ( cm -> mi_rows ) <S2SV_ModEnd> ; int final_worker <S2SV_ModStart> 0 ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; vpx_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker",0
1556,"<S2SV_ModStart> ; offset = <S2SV_ModEnd> base + get4 <S2SV_ModStart> ( ) ; <S2SV_ModEnd> while ( ( <S2SV_ModStart> ( ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ( ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ( ) ; <S2SV_ModEnd> break ; # <S2SV_ModStart> break ; # ifdef LIBRAW_LIBRARY_BUILD case 0x524946 : if (! strncasecmp ( model, ""DSLR-A100"", 9 ) ) { fseek ( ifp, 8, SEEK_CUR ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 0 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 1 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 3 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 4 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 5 ] = get2 ( )",0
1557,"<S2SV_ModStart> common ; struct segmentation_data <S2SV_ModEnd> * seg = <S2SV_ModStart> -> seg ; const double base_q = vp9_convert_qindex_to_q ( cpi -> base_qindex ) ; const double base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; const int qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, base_q * Q_RATIO ( i ) ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; RDMULT_RATIO ( i ) = ( double ) segment_rdmult / base_rdmult <S2SV_ModEnd> ; } }",0
1558,"<S2SV_ModStart> int bychunk ; uint16 config ; shortv = ( uint16 ) TIFFGetField ( in, TIFFTAG_PLANARCONFIG, & config ) ; if ( shortv == config && bitspersample!= 8 && samplesperpixel > 1 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( shortv == config && bitspersample == 8 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( shortv == config && bitspersample == 8 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( shortv == config && bitspersample == 8 && samplesperpixel == 1 ) { fprintf ( stderr, ""%s:",0
1559,<S2SV_ModStart>. err_detail = <S2SV_ModEnd> error -> has_detail <S2SV_ModStart> error -> has_detail <S2SV_ModEnd>? error ->,0
1560,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1561,"<S2SV_ModStart>, 4, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 4, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 4, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 4, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 4, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 4, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 4, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 4, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 4,",0
1562,<S2SV_ModStart> ; pocstruct_t * ps_prev_poc <S2SV_ModEnd> ; ih264d_free_dynamic_bufs (,0
1563,<S2SV_ModStart> goto out_unlock ; if (! is_vm_hugetlb_page ( vma ) ) { ret = - EINVAL ; goto out_unlock ; } <S2SV_ModStart> goto out_unlock ; if (! is_vm_hugetlb_page ( vma ) ) { ret = - EINVAL ; goto out_unlock ; },0
1564,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY (,0
1565,<S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> getnum ( const <S2SV_ModStart> int df ) { if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; <S2SV_ModStart> = 0 ; if ( isdigit ( * * fmt ) ) { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } else { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; },0
1566,"<S2SV_ModStart> g -> survival, g -> reallyold ) ; markold ( g, g -> allgc, g -> old ) ; markold ( g, g -> allgc, g -> old ) ; markold ( g, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> allgc = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival,",0
1567,<S2SV_ModStart> = 0 ; else ret = <S2SV_ModEnd> - EIO ;,0
1568,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok ) ; return NULL ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception (",0
1569,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> ; struct sockaddr_in <S2SV_ModEnd> addr ; int <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct mainloop_fd_callbacks cib_fd_callbacks <S2SV_ModStart> = NULL ; <S2SV_ModEnd> connection -> socket <S2SV_ModStart> = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } bzero ( & hints, sizeof ( struct addrinfo ) ) ) ; hints. ai_flags = AI_CANONNAME ; hints. ai_family = AF_INET ; hints. ai_socktype = SOCK_RAW ; if ( hints. ai_family == AF_INET6 ) { hints. ai_protocol = IPPROTO_ICMPV6 ; } else { hints. ai_protocol",0
1570,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; if ( setjmp ( cm -> error. jmp ) ) { cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ) ; cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ) ; cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ) ; vp8_create_common ( & cpi -> common ) ; memcpy ( cpi -> base_skip_false_prob, vp8cx_base_skip_false_prob, sizeof ( vp8cx_base_skip_false_prob )",0
1571,"<S2SV_ModStart> & __FAIL_ADDR_MASK ; perf_sw_event <S2SV_ModEnd> ( PERF_COUNT_SW_PAGE_FAULTS, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
1572,"<S2SV_ModStart> return ; } ND_TCHECK_16BITS ( & icp -> icmp6_data16 [ 0 ] ) ; if ( mrc < 32768 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [max <S2SV_blank> resp <S2SV_blank> delay <S2SV_blank> %d]"", mrc ) ) ; } else { mrt = ( ( mrc & 0x0fff ) | 0x1000 ) << ( ( ( mrc & 0x7000 ) >> 12 ) + 3 ) ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x08 ) ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( ndo -> ndo_vflag ) { ND_",0
1573,"<S2SV_ModStart> case EXPR_NOT : * set_rtrn =! * set_rtrn ; switch ( expr -> expr. op ) { case EXPR_ADD : case EXPR_SUBTRACT : if ( istreq ( ident, ""true"" ) || istreq ( ident, ""no"" ) || istreq ( ident, ""on"" ) ) { * set_rtrn = true ; return true ; } else if ( istreq ( ident, ""false"" ) || istreq ( ident, ""on"" ) ) { * set_rtrn = false ; return true ; } else if ( istreq ( ident, ""false"" ) || istreq ( ident, ""no"" ) || istreq ( ident, ""on"" ) ) { * set_rtrn = true ; return true ; } else if ( istreq ( ident, ""on"" ) ) { * set_rtrn = true ; return true ; } else if ( istreq ( ident, ""off"" ) ) { * set_rtrn = false ; return true ; }",0
1574,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1575,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_command karg ; <S2SV_ModEnd> if ( copy_from_user <S2SV_ModStart> EFAULT ; } if ( copy_to_user ( & karg, uarg, sizeof ( struct mpt_ioctl_command ) ) ) { printk ( KERN_ERR MYNAM ""%s@%d::mptctl_mpt_command <S2SV_blank> - <S2SV_blank> "" ""Unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> in <S2SV_blank> mpt_ioctl_command <S2SV_blank> struct <S2SV_blank> @ <S2SV_blank> %p\\n"", __FILE__, __LINE__, uarg ) ; return - EFAULT ; } if ( copy_to_user ( & karg, uarg, sizeof ( struct mpt_ioctl_command ) ) ) { printk ( KERN_ERR MYNAM ""%s@%d::mptctl_mpt_command() <S2SV_blank> @%d <S2SV_blank> - <S2SV_blank> "" ""Unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> in <S2SV_blank> mpt_ioctl_command <S2SV_blank> struct <S2SV_blank> @ <S2SV_blank> %p\\n"", __FILE__, __LINE__, karg ) ; return - EFAULT ; }",0
1576,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; MagickBooleanType status <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, image -> columns ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, <S2SV_ModStart> ) break ; status = SetImageExtent ( image,",0
1577,"<S2SV_ModStart> = 0 ; if ( numbands > JAS_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> to <S2SV_blank> encode\\n"" ) ; return - 1 ; }",0
1578,"<S2SV_ModStart>, NULL, WEECHAT_STRING_STRIP_LEFT | WEECHAT_STRING_STRIP_RIGHT <S2SV_ModEnd> | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS, <S2SV_ModStart>, NULL, WEECHAT_STRING_STRIP_LEFT | WEECHAT_STRING_STRIP_RIGHT <S2SV_ModEnd> | WEECHAT_STRING_COLLAPSE_SEPS, <S2SV_ModStart>, NULL, WEECHAT_STRING_STRIP_LEFT <S2SV_ModEnd> | WEECHAT_STRING_STRIP_RIGHT | <S2SV_ModStart>, WEECHAT_STRING_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS, 0 <S2SV_ModStart>, NULL, WEECHAT_STRING_STRIP_LEFT | WEECHAT_STRING_STRIP_RIGHT <S2SV_ModEnd> | WEECHAT_STRING_COLLAPSE_SEPS, 0 <S2SV_ModStart>, NULL, WEECHAT_STRING_COLLAPSE_SEPS, 0 <S2SV_ModStart>, NULL, WEECHAT_STRING_STRIP_LEFT | WEECHAT_STRING_STRIP_RIGHT <S2SV_ModEnd> | WEECHAT_STRING_COLL",0
1579,"<S2SV_ModStart> decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> int v = vpx_read_bit <S2SV_ModEnd> ( r )",0
1580,"<S2SV_ModStart> * cert ; giterr_t <S2SV_ModEnd> is_valid ; if <S2SV_ModStart> error ; is_valid = error!= GIT_ECERTIFICATE ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) { giterr_set ( GITERR_NET, ""user <S2SV_blank> cancelled <S2SV_blank> certificate <S2SV_blank> check"" ) ; return error ; } error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) { if (! giterr_last ( ) ) giterr_set ( GITERR_NET, ""user <S2SV_blank> cancelled <S2SV_blank> certificate <S2SV_blank> check"" ) ; return error ; } error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) { if (! giterr_last ( ) ) giterr_set ( GITERR_NET, ""user <S2SV_blank> cancelled <S2SV_blank> certificate",0
1581,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1582,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> frame_parallel_decoding_mode ) ++",0
1583,"<S2SV_ModStart> ; if (! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; if (! prev ) { memcpy ( prev, stream, sizeof ( * prev ) ) ; prev -> next = stream ; } else { vpx_codec_err_t res ; res = vpx_codec_enc_config_default ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_timebase. den = 1000 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. cfg. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; stream -> ebml. last_pts_ms = - 1 ; stream -> ebml. debug = global -> debug ; if ( global -> deadline == VPX_DL_REALTIME ) stream -> config. cfg. g_lag_in_frames",0
1584,"<S2SV_ModStart> ; if ( op -> nd_opt_mtu < ND_OPT_MTU_MIN || op -> nd_opt_mtu > ND_OPT_MTU_MAX ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""invalid <S2SV_blank> mtu <S2SV_blank> option"", op -> nd_opt_mtu ) ) ; break ; } if ( op -> nd_opt_mtu < ND_OPT_MTU_MIN || op -> nd_opt_mtu > ND_OPT_MTU_MAX ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""invalid <S2SV_blank> mtu <S2SV_blank> option"", op -> nd_opt_mtu ) ) ) ; break ; } if ( op -> nd_opt_mtu < ND_OPT_MTU_MIN || op -> nd_opt_mtu > ND_OPT_MTU_MAX ) { ND_PRINT ( (",0
1585,<S2SV_ModStart> = 0 ; if ( ( * re_ast ) -> root_node == NULL ) { ( * re_ast ) -> root_node = yr_malloc ( sizeof ( RE_NODE ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { ( * re_ast ) -> root_node = yr_malloc ( sizeof ( RE_NODE ) ) ; ( * re_ast ) -> root_node = yr_malloc ( sizeof ( RE_NODE ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { ( * re_ast ) -> root_node = yr_malloc ( sizeof ( RE_NODE ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { ( * re_ast ) -> root_node = yr_malloc ( sizeof ( RE_NODE ) ) ; ( * re_ast ) -> root_node = yr_malloc ( sizeof ( RE_NODE ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { ( * re_ast ) -> root_node = yr_malloc ( sizeof ( RE_NODE ) ) ; if (,0
1586,"<S2SV_ModStart> ; ret = <S2SV_ModEnd> var_expand ( path <S2SV_ModStart> iter -> var_expand_table ) ; if ( ret <= 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value",0
1587,"<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) || skb -> len <S2SV_ModStart> -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len ) return 0 ; nla = nla_find_nested ( nla, X ) ; if ( nla ) return ( void * ) nla - ( void * ) skb -> data ; nla = nla_find_nested ( nla, r4 ) ; if ( nla ) return ( void * ) nla - ( void * ) skb -> data ; nla = nla_find_nested ( nla, r5 ) ; if ( nla ) return ( void * ) nla - ( void * ) skb -> data ; if ( nla ) return ( void * ) nla - ( void * ) skb -> data ;",0
1588,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1589,"<S2SV_ModStart> ( ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost/mobile\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost/mobile\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>""",0
1590,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1591,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> altwarning <S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> alttabsize <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1592,"<S2SV_ModStart> maxBitrate ; } if ( av1 -> av1_config ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> dataLength ) ; gf_odf_av1_cfg_del ( av1_cfg",0
1593,"<S2SV_ModStart> { GF_LOG ( GF_LOG_ERROR <S2SV_ModEnd>, GF_LOG_CONTAINER, <S2SV_ModStart> GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1594,"<S2SV_ModStart> ] = '\\0' ; if ( r < 0 ) { SC_TEST_RET ( card -> ctx, SC_LOG_ERROR, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; r = SC_READ_RECORD ( card, SC_ESTEID_PD_DOCUMENT_NR, buff, sizeof ( buff ), SC_RECORD_BY_REC_NR ) ; SC_TEST_RET ( card -> ctx, SC_LOG_ERROR, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; r = SC_READ_RECORD ( card, SC_ESTEID_PD_DOCUMENT_NR, buff, sizeof ( buff ), SC_RECORD_BY_REC_NR ) ; SC_TEST_RET ( card -> ctx, SC_LOG_ERROR, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; r = SC_READ_RECORD ( card, SC_ESTEID_PD_DOCUMENT_NR, buff, sizeof ( buff ), SC_RECORD_BY_REC_NR ) ; r = SC_READ_RECORD ( card, SC_ESTEID_PD_DOCUMENT_NR, buff, sizeof ( buff ),",0
1595,"<S2SV_ModStart> maxFrameNum ) ; dpb -> maxLongTermFrameIdx = NO_LONG_TERM_FRAME_INDICES ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; if ( noReordering ) dpb -> dpbSize = dpb -> maxRefFrames ; else dpb -> dpbSize = dpbSize ;",0
1596,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> = 0 ; if (! addr ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen ) addrlen_in = * addrlen ; if ( oe_syscall_getpeername_ocall ( & ret, sock -> host_fd, addr, addrlen_in, & addrlen_out, addrlen_in )!= OE_OK ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) { OE_RAISE_ERRNO ( OE_EINVAL )",0
1597,,1
1598,"<S2SV_ModStart> FALSE ; } if (! tpdu_read_negotiation_request ( s, & li, length ) ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> TPDU <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } if ( li!= length ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> TPDU <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } if ( li!= length ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> TPDU <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } if (! tpdu_read_negotiation_request ( s, & li, length ) ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } if ( li!= length ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> TPDU <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } if ( li!= length ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> TPDU <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } if (! tpdu_read_negotiation_request ( s, & li, length ) ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negot",0
1599,"<S2SV_ModStart> final_p, final ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt_space <S2SV_ModStart> ) ) { opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference ( opt_space ) ; if ( opt_space ) opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference ( opt_space ) ; if ( opt_space ) opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ;",0
1600,"<S2SV_ModStart> ; size_t fsize ; uint32_t valign <S2SV_ModEnd>, hdr_size, <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; struct cli_exe_section <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; struct cli_exe_section <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; struct cli_exe_section <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; struct cli_exe_section <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> )!= CL_ENULLARG <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> )!= CL_ENULLARG <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> )!= CL_ENULLARG <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> )!= CL_ENULLARG <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> )!= CL_ENULLARG <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> )!= CL_ENULLARG <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> )!= CL_ENULLARG",0
1601,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ; while ( ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> ; while ( ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> 5 ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_",0
1602,"<S2SV_ModStart> 0 ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } <S2SV_ModStart> 0 ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( t2p -> pdf_compression == T2P_COMPRESS_G4 ) { buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ; if ( buffer == NULL ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR",0
1603,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1604,"<S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> rc = cib_tls_signon <S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> rc = cib_tls_signon <S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> rc = cib_tls_signon <S2SV_ModStart> pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. session, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( hello, F_CIB_CLIENTNAME, name ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL, 0, NULL ) ; free_xml ( hello ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. session, CRM_OP_REGISTER, NULL, NULL, NULL,",0
1605,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
1606,"<S2SV_ModStart> int num00, tmp_err <S2SV_ModEnd>, n, <S2SV_ModStart> bsize ] ; vpx_variance_fn_ptr_t v_fn_ptr ; const int sr = ( MAX_MVSEARCH_STEPS - 1 ) <S2SV_ModEnd> - step_param ; <S2SV_ModStart> bsize ] ; const int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr ; step_param += sr ; further_steps -= sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX",0
1607,"<S2SV_ModStart> < 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } <S2SV_ModEnd> if ( h",0
1608,"<S2SV_ModStart> ; # ifdef DEBUG_CONF ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", parent, child, merged ) ; ap_log_perror ( APLOG_MARK, APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", child, merged ) ;",0
1609,"<S2SV_ModStart> ; if ( msg_sys -> msg_name ) { memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; } else { memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; } if ( msg_sys -> msg_namelen > sizeof ( struct sockaddr_storage ) ) { memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; } else { memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; } if ( msg_sys -> msg_namelen > sizeof ( struct sockaddr_storage ) ) { memcpy ( & address, msg_sys -> msg_n",0
1610,"<S2SV_ModStart>, one ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; number_planes_filled = GetBlobSize ( image ) ; number_colormaps = MagickMax ( number_planes_filled, GetBlobSize ( image ) ) ; number_colormaps = MagickMax ( number_colormaps, GetBlobSize ( image ) ) ; number_planes_filled = ( ssize_t ) GetBlobSize ( image ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; number_planes_filled = ( ssize_t ) GetBlobSize ( image ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; number_planes_filled = ( ssize_t ) GetBlobSize ( image ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""Improper",0
1611,"<S2SV_ModStart> 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> cipher, sizeof ( comp -> cipher ) ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> key, comp -> key_len ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> cipher, sizeof ( comp -> cipher ) ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> cipher, sizeof ( comp -> cipher ) ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> key, comp -> key_len ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> cipher, sizeof ( comp -> cipher ) ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> cipher, sizeof ( comp -> cipher ) )",0
1612,"<S2SV_ModStart> ) ) { if ( smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { ovalue = strim ( option, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } } else { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; }",0
1613,"<S2SV_ModStart> user_data ) { crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"", crm_str ( client -> name ), client -> id ) ; if ( client == NULL ) { return ; } crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"", crm_str ( client -> name ), client -> id ) ; if ( client -> id!= NULL ) { if (! g_hash_table_remove ( client_list, client -> id ) ) { crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> the <S2SV_blank> hashtable"", client -> name ) ; } } <S2SV_ModEnd> free ( client <S2SV_ModStart> user ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
1614,"<S2SV_ModStart> * uv ; Thread * twups = thread ; for ( twups = twups ; twups!= NULL ; twups = twups -> next ) { if (! iswhite ( twups ) ) markvalue ( g, twups -> v ) ; } else { * p = twups ; twups = thread ; for ( uv = uv -> u. open. next ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, twups -> v ) ; } } } } p = & twups -> twups ; if ( twups!= NULL ) { if (! iswhite ( twups ) ) markvalue ( g, twups -> v ) ; } else { * p = twups ; twups = thread ; for ( uv = uv -> u. open. next ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, twups -> v <S2SV_ModEnd> ) ; }",0
