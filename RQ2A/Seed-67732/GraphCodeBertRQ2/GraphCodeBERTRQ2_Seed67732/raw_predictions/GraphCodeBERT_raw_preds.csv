,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 1,0
1,"<S2SV_ModStart> ( len < 4 <S2SV_ModEnd> ) { ND_PRINT <S2SV_ModStart> ( ndo, ""%s"", ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
2,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
3,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( b,",0
4,<S2SV_ModStart> ; if ( <S2SV_ModEnd> hlen < 0,0
5,,0
6,<S2SV_ModStart> ; upgtpg ; upg = NULL <S2SV_ModEnd> ; struct x,0
7,,0
8,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
9,,0
10,<S2SV_ModStart> -> next ) <S2SV_ModEnd> c = c,0
11,,0
12,<S2SV_ModStart> ; if ( <S2SV_ModEnd> hlen < 0,0
13,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, struct",0
14,"<S2SV_ModStart> * buf ; size_t len = 0 ; <S2SV_ModStart> 0 ) { if ( len < 0 ) { return 0 ; } <S2SV_ModStart> 0 ) { memcpy ( buf, buf, len ) ; if ( len < 0 ) { return 0 ; } <S2SV_ModEnd> return 0 ;",0
15,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 0 ) { tran_low_t <S2SV_ModEnd> out [ 0 <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) ; tran_low_t <S2SV_ModEnd> temp_low_t <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ) ; tran_low_t <S2SV_ModEnd> ( input,",0
16,,0
17,<S2SV_ModStart> sec = 0 <S2SV_ModEnd> ; if (,0
18,"<S2SV_ModStart> cgc ) ; memset ( & cgc -> sense_buffer, 0, sizeof ( senseptr -> senseptr ) ) ;",0
19,<S2SV_ModStart> = 0 ; # endif,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9_COMMON <S2SV_ModEnd> * const VP9_COMMON <S2SV_ModStart> intra_level ) { const VP9_COMMON * const VP9_COMMON * const VP9_COMMON <S2SV_ModStart> intra_COMMON * const VP9_COMMON * cpi <S2SV_ModEnd> ; const int <S2SV_ModStart> int i, twopass, twopass, twopass <S2SV_ModEnd> ) { int <S2SV_ModStart> int i, twopass, twopass, twopass, twopass, twopass <S2SV_ModStart> = 0 ; if ( cpi -> frame_level == VP9_COMMON_COMMON * cpi -> frames_level == KEY_FRAME ) { vp9_level = 0 ; if ( cpi -> frames_level == KEY_FRAME ) { if ( cpi -> frames_level == KEY_FRAME ) { if ( cpi -> frames_frame == KEY_FRAME ) { if ( cpi -> frames_frame == KEY_FRAME ) { vp9_level == KEY_FRAME ) { vp9_level ( cpi -> frames_frame",0
21,"<S2SV_ModStart> ( L, L, 0",0
22,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
23,,0
24,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
25,<S2SV_ModStart>,0
26,<S2SV_ModStart> int i ; jas_uchar <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) ; goto error <S2SV_ModEnd> ; } if,0
27,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",0
28,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> if ( length ) { ND_PRINT ( ( length ) ) ; if ( length < 2 ) { ND_PRINT ( ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> if ( length < 2 ) { ND_PRINT ( ( length ) ) ; if ( length < 2 ) { ND_PRINT ( ( ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> too <S2SV_blank> too <S2SV_blank> too <S2SV_blank> too <S2SV_blank> too <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; }",0
29,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
30,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> p ( struct <S2SV_ModStart> p ) { const char * p = p ; <S2SV_ModStart> p ) ; if (! p ) return - 1 ; <S2SV_ModStart> ] ) { if ( p + 1 ) return - 1 ; <S2SV_ModStart> 0 ) ; <S2SV_ModStart> } else { <S2SV_ModEnd> p = p <S2SV_ModStart> 1 ; } else { <S2SV_ModStart> p = sizeof ( p + 1 ) ; <S2SV_ModStart> } else { * p = sizeof ( p ) ; <S2SV_ModStart> } else { * p = sizeof ( p ) ; <S2SV_ModStart> } else { * p = sizeof ( p ) ; } else { * p = sizeof ( p + 1 ) ; <S2SV_ModStart> p -> segment_len ) ; } else { * p = sizeof ( p + 1 ) ; } else { * p = sizeof ( p ) ; } else { * p = sizeof ( p ) ; <S2SV_ModStart> } else { * p = sizeof ( p ) ; },0
31,"<S2SV_ModStart> { if ( osStrchr <S2SV_ModEnd> ( line,",0
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
33,<S2SV_ModStart> 0 ) { dev_err ( & dev -> desc. bNumEndpoints ) ;,0
34,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
36,<S2SV_ModStart> = 0 ;,0
37,<S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> in_addr <S2SV_ModStart> ) goto out_free <S2SV_ModEnd> ; if (,0
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> { int <S2SV_ModEnd> int i ; unsigned int <S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> NULL ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
39,"<S2SV_ModStart> ( file, <S2SV_ModEnd> ) ) ; if",0
40,,0
41,,0
42,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> v_null> <S2SV_null> <S2SV_null> <S2SV_null> <SV_null>,0
43,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct <S2SV_ModEnd> skb_lock_sock ( struct <S2SV_ModStart> ( sk ) <S2SV_ModEnd> sk ) { <S2SV_ModStart> sk ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> ( sk ) <S2SV_ModEnd> sk ) { <S2SV_ModStart> sk ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> sk ) { <S2SV_ModEnd> if ( sock ->,0
44,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> char *,0
45,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
46,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
47,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
48,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
49,,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
51,"<S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd> ) ) ;",0
52,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
53,,0
54,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
55,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> pcnt_inter_frame ( const FIRSTPASS <S2SV_ModEnd> decay_STATS <S2SV_ModStart> this_frame ) { const FIRSTPASS <S2SV_ModEnd> if ( twopass <S2SV_ModStart> this_frame ) { const FIRSTPASS_STATS * const FIRSTPASS_STATS <S2SV_ModStart> this_frame ) { const FIRSTPASS_STATS * twopass = ( twopass -> next_frame ) ; <S2SV_ModStart> this_frame = ( twopass -> twopass -> pcnt_frame ) ; <S2SV_ModStart> this_frame_frame = ( twopass -> pcnt_frame_frame -> pcnt_frame -> pcnt_decay_inter_frame ) ; <S2SV_ModStart> this_frame = ( pcnt_frame -> pcnt_decay_frame <S2SV_ModEnd> decay_decay_decay_frame <S2SV_ModEnd> ( twopass, <S2SV_ModStart> ( twopass, this_frame <S2SV_ModEnd> ) ; }",0
56,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
57,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
58,<S2SV_ModStart> ( args -> rmtvaluelen <S2SV_ModEnd> ) ; },0
59,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; if (,0
60,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
61,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
62,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
63,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
64,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModStart> int procfd ; int procfd = procfd -> procfd ; <S2SV_ModStart> -> procfd ; int procfd = procfd ; int procfd = procfd ; int procfd = procfd -> procfd ; <S2SV_ModStart> ; if ( procfd ) { procfd = procfd -> procfd ; procfd = procfd -> procfd ; <S2SV_ModStart> } if ( procfd ) { procfd = procfd -> procfd_label <S2SV_ModStart> ; } } if ( procfd_label ) { procfd = procfd -> procfd = procfd -> procfd ; <S2SV_ModStart> -> procfd ; } procfd = procfd ;,0
65,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } < 0,0
66,<S2SV_ModStart> return OPJ_FALSE ; } if (! ISOMEMUL_FALSE ) return OPJ600 ;,0
67,<S2SV_ModStart> port ) ; sas_destruct_devices ( port ) ;,0
68,"<S2SV_ModStart>, image ) \\\n{ <S2SV_ModEnd> if ( image",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
71,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
73,<S2SV_ModStart> ; udp_len = 0 <S2SV_ModEnd> ; if (,0
74,,0
75,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
76,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
77,"<S2SV_ModStart> ; if ( safe_mount <S2SV_ModEnd> ( mnt,",0
78,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
79,<S2SV_ModStart> -> header_len ; ND_TCHECK2 ( p [ 0 ] ) ;,0
80,,0
81,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
82,<S2SV_ModStart> inode ) ; <S2SV_ModEnd> struct io -> io,0
83,"<S2SV_ModStart> ; status = MagickFalse <S2SV_ModEnd> ( exception,",0
84,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
85,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
86,<S2SV_ModStart> ( config ) <S2SV_ModEnd> ; if (,0
87,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
88,"<S2SV_ModStart> * name, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void *",0
89,,0
90,,0
91,<S2SV_ModStart> rollover ) { struct rollover * rollover = NULL ; <S2SV_ModStart> rollover -> rollover = NULL ; mutex_lock_lock ( & rollover -> rollover -> rollover ) ; <S2SV_ModStart> rollover = NULL ; mutex_mutex_lock ( & rollover -> rollover -> rollover -> rollover -> rollover -> rollover = NULL ; mutex_lock ( & rollover -> rollover -> rollover -> rollover -> rollover ) ; mutex_lock ( & rollover -> rollover -> rollover -> rollover -> rollover ) ; rollover = NULL ; rollover = NULL ; mutex_unlock ( & rollover -> rollover -> rollover -> rollover -> rollover -> rollover -> rollover = NULL <S2SV_ModEnd> rollover -> rollover <S2SV_ModStart> rollover = NULL ; } <S2SV_ModEnd> rollover -> rollover <S2SV_ModStart> rollover = NULL <S2SV_ModEnd> rollover -> rollover <S2SV_ModStart> rollover = NULL <S2SV_ModEnd> rollover -> rollover <S2SV_ModStart> rollover = NULL ; out <S2SV_ModEnd> rollover = NULL,0
92,<S2SV_ModStart> ; newnp -> inet_opt <S2SV_ModEnd> = NULL ;,0
93,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
95,<S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; if (,0
96,,0
97,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
98,<S2SV_ModStart> ) ) { <S2SV_ModEnd> } if ( <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> } else { <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> } else {,0
99,"<S2SV_ModStart> = 0 ; size_t ext4_size = EXT4_GET_BLOCK_BLOCK_SIZE ( inode ) ; <S2SV_ModStart> out ; } ext4_write_block ( inode, EXT4_IO ) ;",0
100,<S2SV_ModStart> p ; } ND_TCHECK_16BITS ( p ) ; <S2SV_ModStart> len ; } ND_TCHECK_16BITS ( p + 2 <S2SV_ModEnd> ) ; ND_TCHECK_16BITS ( p + <S2SV_ModStart> 2 ) ; ND_16BITS ( p + 4 ) ; ND_TCHECK_16BITS ( p + 4 ) ;,0
101,,0
102,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int yv_stride ) { memcpy <S2SV_ModEnd> ( yv_stride, <S2SV_ModStart> intra_stride ) memcpy <S2SV_ModEnd> ( yv_stride, <S2SV_ModStart> int y_stride, <S2SV_ModStart> intra_stride ) ; memcpy <S2SV_ModEnd> ( y_stride, <S2SV_ModStart> 8 ) ; memcpy <S2SV_ModEnd> ( y_stride, <S2SV_ModStart> mb_stride ) ; memcpy <S2SV_ModEnd> ( yv12_stride, <S2SV_ModStart> 8 ) ; memcpy <S2SV_ModEnd> ( y_stride, <S2SV_ModStart> intra_stride ) ; memcpy <S2SV_ModEnd> ( yv_stride, <S2SV_ModStart> intra_stride ) ; memcpy <S2SV_ModEnd> ( y_stride,",0
103,"<S2SV_ModStart> char * cmd ; cmd = NULL <S2SV_ModStart>, NULL, NULL <S2SV_ModEnd> ) ; cmd <S2SV_ModStart>, NULL, NULL <S2SV_ModEnd> ) ; cmd",0
104,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> if (!,0
105,"<S2SV_ModStart> <S2SV_null> <S2SV_null> struct mb2S2SV_null> struct mb2_null> struct mb2_cache_cache ( struct mb2_cache_cache_cache ( struct mb2_cache_cache_cache_cache_cache ( struct mb2_cache_cache, bh ) ; <S2SV_ModStart> int error ; if ( bh -> bh_cache_cache_cache_block ( bh, sizeof ( struct mb2_cache ) ) ) { struct mb_cache_cache_cache_cache ( bh ) ; <S2SV_ModStart> ( bh, bh -> bh, bh -> bh ) ; if ( error_cache_cache_cache_cache_cache_block ( bh ) ) { struct mb2_cache_cache_cache_cache ( bh ) ; <S2SV_ModStart> ( bh, bh, bh ) ; if ( bh -> bh ) { error_cache_cache_cache_cache_cache_cache_cache ( bh ) ; <S2SV_ModStart> ( bh ) ; } <S2SV_ModEnd> if ( bh",0
106,,0
107,"<S2SV_ModStart> p, 0, p",0
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
110,,0
111,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) { ND_PRINT ( ( ( ndo_tptr ) ) ; ND_PRINT ( ( ( ndo, ""%s"", tptr ) ) ; <S2SV_ModStart> ) ) { ND_TCHECK_TCHECK_16BITS ( ndo_tptr ) ; break ; }",0
113,"<S2SV_ModStart> int i ; memcpy <S2SV_ModEnd> ( skb, <S2SV_ModStart> - 1 ) ; memcpy <S2SV_ModEnd> ( & 0",0
114,,0
115,<S2SV_ModStart> ( tval + 4 <S2SV_ModEnd> ) +,0
116,<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd> ) ; if,0
117,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
118,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",1
119,,0
120,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> i2SV_null> <S2SV_null> <S2S2SV_null>,0
121,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
122,,0
123,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
124,<S2SV_ModStart> 0 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
125,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
126,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
127,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( (,0
128,"<S2SV_ModStart>, size_t length <S2SV_ModEnd> ; if (",0
129,,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
131,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
132,<S2SV_ModStart> return - EINVAL ; },0
133,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
134,<S2SV_ModStart> ( stderr <S2SV_ModEnd> ) ; },0
135,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
136,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModStart> int error ; int <S2SV_ModEnd> ret ; int <S2SV_ModStart> int error ; int ret = - EINVAL ; int ret = - 1 ; <S2SV_ModStart> 0 ) { int ret = - EINVAL ; goto out_buf ; <S2SV_ModStart> return - 1 ; } if ( rd_len < 0 ) return - 1 ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> ret = - ENOMEM ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> return - 1 ; <S2SV_ModStart> 0 ; } <S2SV_ModEnd> return - 1 ;,0
137,<S2SV_ModStart> ; if ( <S2SV_ModEnd> hlen < 0,0
138,,0
139,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
140,<S2SV_ModStart> [ plane ] && in -> linesize [ plane ],1
141,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
142,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
143,<S2SV_ModStart> 0 ) ; if ( nelements < 0 ) goto out ;,0
144,,0
145,<S2SV_ModStart>,0
146,,0
147,<S2SV_ModStart> ( addr ) ; <S2SV_ModEnd> if ( addr,0
148,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <SV_null> <S2SV_null>,0
149,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & s ->,0
150,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
151,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
152,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ;,0
153,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
154,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
155,,0
156,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
157,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
158,,0
159,<S2SV_ModStart> = 0 ; size_t ext_size = 0,0
160,<S2SV_ModStart> -> c ; <S2SV_ModEnd> if ( c,0
161,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
162,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
163,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
164,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
165,<S2SV_ModStart> ; h = 0 <S2SV_ModEnd> ; h2 ->,0
166,,0
167,,0
168,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { ret = - EINVAL ; goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> 0 ) { ret = - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) ; goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> 0 ) { ret = - EIO ; goto error <S2SV_ModEnd> ; } if,0
169,,0
170,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct regs",0
171,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
172,<S2SV_ModStart> = 0 ; if (! xattr_index ( p ) ) return 0 ;,0
173,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct mb2_cache ( struct ext4_cache * ext4_mb_mb_cache <S2SV_ModStart> inode ) { struct mb2_cache_block * ext4_mb_cache = EXT4_SB ( inode -> i_sb ) -> i_mb_sb ; <S2SV_ModStart> inode ) { ext4_mb_cache = inode -> i_mb_sb ; if (! inode ) { ext4_to_cpu ( inode ) { ext4_cpu ( inode ) ; goto out ; } <S2SV_ModEnd> if ( inode <S2SV_ModStart> inode ) { ext4_cpu ( inode, inode ) ; } <S2SV_ModEnd> if ( inode <S2SV_ModStart> inode ) { ext4_to_cpu ( inode ) { ext4_cpu ( inode ) ;",0
174,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
175,,0
176,<S2SV_ModStart> ; if ( <S2SV_ModEnd> if (!,0
177,<S2SV_ModStart> ) ) ; break,0
178,<S2SV_ModStart> goto out ; <S2SV_ModEnd> if (!,0
179,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i ; jas_matind_t i ; jas_ptr_ptr1 ; jas_ptr = ( jas_ptr1 ; <S2SV_ModStart> j ; jas_ptr1 ; jas_protocol_uint32 ( jas_t ) ; jas_error ( jas_uint32_t ) ; if ( jas_protocol_error ( jas_t ) ) { jas_error ( jas_uint32 ) ; jas_uint32 ( jas_t ) ; jas_uint32 ( jas_t ) ; jas_byte ( jas_protocol_size = 0 ; } if ( jas_size < 0 ) { jas_errno = 0 ; jas_error ( jas_size - 1 ) ; jas_uint32 ( jas_t ) ; jas_error ( jas_fast32 ) ; jas_eprintf ( jas_t ) ; },0
180,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows ) ;",0
181,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
182,<S2SV_ModStart> sb ) ; <S2SV_ModEnd> if ( sb,0
183,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
184,"<S2SV_ModStart> ; if ( osStrchr <S2SV_ModEnd> ( fname,",0
185,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
186,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd>, state,",0
187,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
188,<S2SV_ModStart> 0 ) ; if ( nelements < 0 ) goto out ;,0
189,,0
190,"<S2SV_ModStart> * tmpname, <S2SV_ModEnd> dir ) { <S2SV_ModStart> = NULL ; <S2SV_ModEnd> if (!",0
191,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
192,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
193,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
194,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
195,,0
196,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> stride ) { ND_TCHECK_16BITS ( ndo, ""\\n"" ) ; <S2SV_ModStart> } if ( len < 4 ) { ND_TCHECK2 ( ndo, ""\\n"" ) ; goto trunc ; }",0
197,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
198,,0
199,,0
200,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PRED <S2SV_ModEnd> VP9_HIGHBITDEPTH const <S2SV_ModStart> VP9_HIGHBITDEPTH const vp9_highbd_stride <S2SV_ModEnd> ( src, <S2SV_ModStart> intra_stride, vp9_stride, vp9_highbd_stride, <S2SV_ModEnd> intra_stride, <S2SV_ModStart> const uv_stride, vp9_stride, <S2SV_ModEnd> intra_stride,",0
201,<S2SV_ModStart> ; return 0 <S2SV_ModEnd> ; if (,0
202,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
203,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
204,<S2SV_ModStart> ; if (,0
205,,0
206,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; msg ->,0
207,,0
208,"<S2SV_ModStart> val, regs <S2SV_ModEnd> ) ; }",0
209,<S2SV_ModStart> ) ) ; if (,0
210,"<S2SV_ModStart> * data ; size_t len = 0 ; <S2SV_ModStart> 0 ) ; size_t len = 0 ; <S2SV_ModStart> 0 ) ; if (! strcmp ( c, & PyErr_type_type_name, & PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> field <S2SV_blank> %s\\n"", __func__func__func__, & PyExc_type_type ) ) ; if (! strcpy ( c, & PyErr_type_type ) ) { PyErr_info = NULL ; goto out ; } <S2SV_ModStart> return 0 ; } else { PyErr_type = NULL ; } else { PyExc_TypeError = NULL ; } else { int res = NULL ; if (! PyErr_type_type_TypeError, & PyExc_TypeError, & PyErr_TypeError, & PyExc_TypeError, ""required <S2SV_blank> from <S2SV_blank> packet"" ) ; return 1 ; } <S2SV_ModStart> 0 ) ; } if (! strcpy ( n, & PyExc_TypeError, & PyErr_TypeError, & PyExc_TypeError, & PyExc_TypeError, & PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank>",0
211,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
212,,0
213,<S2SV_ModStart> ; if ( key -> state == 0 &&,0
214,,0
215,,0
216,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
217,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows ) ;",0
218,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
219,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; msg ->,0
220,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } if (,0
221,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
222,,0
223,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
224,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct event",0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
226,<S2SV_ModStart> ) ) { if ( data -> data [ i ]. data [ i ]. data [ i ]. data [ i ]. length ]. data [ i ]. data [ i ]. data [ i ]. data ]. data [ i ]. data [ i ]. data ]. data [ i ]. data [ i ]. data [ i ] ]. data [ i ]. data [ i ]. data ]. data [ i ]. data [ i ]. data [ i ]. data [ i ]. data ]. data [ i ]. data [ i ]. data [ i ]. data [ i ]. data + 2 ] = data -> data -> data -> data [ i ]. data -> data [ i ]. data + 2 ]. data + 2 ]. data <S2SV_ModEnd> ) ; },0
227,"<S2SV_ModStart> skb ) ; memset ( & kfree, 0, 0 ) ;",0
228,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> uint16_t ) { ND_TCHECK_16BITS ( ptr ) ; ND_TCHECK_16BITS ( ptr, 2 ) ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ) ; } ND_16BITS ( ptr, ""AVP <S2SV_blank> too <S2SV_blank> too <S2SV_blank> too <S2SV_blank> too <S2SV_blank> too <S2SV_blank> short"" ) ; ND_TCHECK_16BITS ( ptr ) ; ND_16BITS ( ndo, EXTRACT_16BITS ( ptr ) ) ; if ( len < 2 ) { ND_PRINT ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> too <S2SV_blank> too <S2SV_blank> too <S2SV_blank> too <S2SV_blank> too <S2SV_blank> short"" ) ; return - 1 ; } ND_PRINT ( ptr ) ; } <S2SV_ModStart> ) ) ; ptr = 0 ; ptr ++ ; ptr ++ ; ptr = 0 ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++",0
229,,0
230,<S2SV_ModStart> ( args ) <S2SV_ModEnd> ; if (,0
231,,0
232,<S2SV_ModStart> ) ; },0
233,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
234,,0
235,<S2SV_ModStart> ) ; },0
236,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
237,<S2SV_ModStart> ; if ( <S2SV_ModEnd> hlen < 0,0
238,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
239,<S2SV_ModStart> sock_lock ) ; <S2SV_ModEnd> return 0 ;,0
240,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; msg ->,0
241,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
242,<S2SV_ModStart> VP9_HIGHBITDEPTH if ( x -> flags & YV12_FLAG_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH,0
243,"<S2SV_ModStart> * buf ; size_t priv_size = 0 ; <S2SV_ModStart>, & buf_size, & priv -> data_size, & priv_size <S2SV_ModEnd> ) ; if",0
244,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return - EINVAL ;,0
245,,0
246,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
247,"<S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( ndo, ""%s"", <S2SV_ModStart> ) ) ; if ( len < 4 ) goto trunc <S2SV_ModEnd> ; if (",0
248,<S2SV_ModStart> ; if (,0
249,<S2SV_ModStart> ) { memset <S2SV_ModEnd> ( cpi,0
250,<S2SV_ModStart> ; ret = fcpy <S2SV_ModEnd> ( file ),0
251,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
252,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
253,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
254,,0
255,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
256,,0
257,"<S2SV_ModStart> ; if ( CHILD ( n, 0 ) == 0 ) { assert ( CHILD ( CHILD ( CHILD ( n, 0 ), 0 ) ; <S2SV_ModStart> ) ; } else if ( CHILD ( CHILD ( n ) == 0 ) { <S2SV_ModStart> ) ; } else if ( CHILD ( CHILD ( n, 0 ) == 0 ) { CHILD ( n, 0 ) ; } else if ( CHILD ( CHILD ( CHILD ( CHILD ( n, 0 ) ) == 0 ) { return 1 ; } else if ( CHILD ( CHILD ( n, 0 ) == 0 ) { CHILD ( n ) ; } else if ( CHILD ( CHILD ( n, 0 ) == 0 ) { if ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( n, 0 ) ) == CHILD ( CHILD ( n ) ) ) { CHILD ( CHILD ( n, 0 ) ) ; return 1 ; } else <S2SV_ModStart> ) ; } else if ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( n, 0 ) ) == CHILD ( CHILD ( n, 0 ) ) == CHILD ( CHILD ( n,",0
258,,0
259,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> VP9_8x8_8x8x8x8_8x8x8x8x8_8x8x8x8_8_8_8x8x8x8_8x8x8x8x8_8_8x8x8x8_8_8x8x8x8x8_8x8x8x8x8_8_8x8x8x8_8x8x8x8x8x8x8_8x8x8 <S2SV_ModEnd> ( w, <S2SV_ModStart> BLOCK_SIZE bsize, <S2SV_ModStart> BLOCK_8 ) { vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> BLOCK_8X8 ) <S2SV_ModEnd> ( w, <S2SV_ModStart> BLOCK_SIZE bsize, <S2SV_ModStart> BLOCK_8 ) { vpx_write <S2SV_ModEnd> ( w,",0
260,,0
261,<S2SV_ModStart> r -> req <S2SV_ModEnd> ) ; },0
262,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
263,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
264,<S2SV_ModStart> -> data ; <S2SV_ModEnd> break ; },0
265,<S2SV_ModStart> ; if ( free < 0 ||,0
266,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
267,,0
268,"<S2SV_ModStart> ; int ret ; int ret ; <S2SV_ModStart> dev ) ; ret = kmalloc ( dev, GFP_KERNEL ) ; if (! ret ) return - ENOMEM <S2SV_ModStart> ret ) ; ret = - ENOMEM <S2SV_ModEnd> ; ret =",0
269,,0
270,,0
271,,0
272,,0
273,"<S2SV_ModStart> ( tptr, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
274,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( *,0
275,,0
276,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
277,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
278,<S2SV_ModStart> ( net ) <S2SV_ModEnd> ; if (,0
279,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
280,<S2SV_ModStart> ( conn ) <S2SV_ModEnd> ; if (,0
281,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> dev_idx ) { struct net_idx = xd_idx ; <S2SV_ModStart> dev_idx ) { net_idx = 0 ; <S2SV_ModStart> msg_idx ; <S2SV_ModEnd> if ( netx,0
282,,1
283,<S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( image,0
284,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
285,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
286,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( client,0
287,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
288,<S2SV_ModStart> ) goto out_offset <S2SV_ModEnd> ; if (,0
289,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
290,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
291,<S2SV_ModStart> ; if (,0
292,"<S2SV_ModStart> * cpath, fc, GFP_KERNEL ) ; if (! ctx ) { ret = - ENOMEM ; goto out ; }",0
293,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
295,<S2SV_ModStart> { if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( image ->,0
296,<S2SV_ModStart> 0 ) ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; },1
297,,0
298,<S2SV_ModStart> ) ; },0
299,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
300,,0
301,,0
302,"<S2SV_ModStart> data ) { jas_eprintf ( ""cannot <S2SV_blank> data\\n"" ) ; <S2SV_ModStart> { jas_eprintf ( & boxinfo <S2SV_ModEnd> ) ) ;",0
303,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
304,<S2SV_ModStart> ; int err = <S2SV_ModEnd> ; MACROBLOCK_SIZE,0
305,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> break ; int <S2SV_ModStart> offset ) { int <S2SV_ModEnd> len ; int <S2SV_ModStart> offset ) ; len = sizeof ( struct ipv6_t * exthdr ) <S2SV_ModEnd> ; int <S2SV_ModStart> offset ) ; len = sizeof ( struct ipv6_optlen ) * exthdr ; len = sizeof ( struct ipv6_t * exthdr ) ; len = sizeof ( struct ipv6_optlen ) * exthdr ; len = sizeof ( struct ipv6_optlen ) <S2SV_ModEnd> ; len = <S2SV_ModStart> + 1 ; len = sizeof ( unsigned int ) * exthdr ) <S2SV_ModEnd> ; len = <S2SV_ModStart> offset + len <S2SV_ModEnd> ; len = sizeof ( <S2SV_ModStart> offset ) ; len = sizeof ( len + len <S2SV_ModEnd> ; len <S2SV_ModStart> offset + len <S2SV_ModEnd> ; len + len <S2SV_ModStart> offset + len + len <S2SV_ModEnd> ; len = sizeof ( <S2SV_ModStart> + 4 + len + len <S2SV_ModEnd> ) ) * <S2SV_ModStart> ; len = len + len <S2SV_ModEnd> ; len <S2SV_ModEnd> ; len,0
306,"<S2SV_ModStart> void vpx_write_bit_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
307,<S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; if (,0
308,,0
309,"<S2SV_ModStart> uint32_t hdev ; <S2SV_ModEnd> if ( hdev <S2SV_ModStart> dev -> dev_err ) { dev_errno = ""%s: <S2SV_blank> %d: <S2SV_blank> %d\\n"", __func__, __func__, __func__, ""%s: <S2SV_blank> %d: <S2SV_blank> %d\\n"", __func__, __func__, __func__, __func__, dev -> device_dev -> dev_dev -> dev_name ) ; if ( dev_err ( dev, ""%s: <S2SV_blank> %d\\n"", __func__, __func__, __func__, ""%s <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d\\n"", __func__, __func__, __func__, __func__, __func__, __func__, ""%s <S2SV_blank> %d\\n"", __func__, __func__, __func__, __func__, __func__, dev_dev -> device_dev -> dev_dev -> dev_name ) ; if ( dev_dev -> dev_name ) { dev_err ( dev, ""%s <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d\\n"", __func__, __func__",0
310,<S2SV_ModStart>,0
311,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
312,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> sctp_asconf_chunk_chunk_code ( struct sctp_chunk_code <S2SV_ModStart> sctp_chunk_code ) { if ( sctp_chunk_code == SCTP_ERROR ) { if ( sctp_chunk_code == SCTP_ERROR ) { if ( sctp_code == SCTP_ADDRESS || sctp_code == SCTP_ADDRESS || sctp_code == SCTP_IPV_ADDRESS || sctp_ADDRESS || sctp_code == SCTP_ADDRESS ) { if ( err_code == SCTP_ADDRESS || sctp_ADDRESS || sctp_code == SCTP_ADDRESS ) { if ( sctp_code == SCTP_ADDRESS || sctp_ADDRESS || sctp_code == SCTP_ADDRESS || sctp_ADDRESS || sctp,0
313,<S2SV_ModStart> ( size ) <S2SV_ModEnd> ; if (,0
314,<S2SV_ModStart> ; msg -> msg_namelen = 0 ;,0
315,,0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
317,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
318,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if (!,0
319,,0
320,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
321,,0
322,"<S2SV_ModStart> uint8 * buf, int ret ; int ret ; ret = kmalloc ( size, GFP_KERNEL ) ; if (! buf ) return - ENOMEM ; ret = kmalloc ( dev, GFP_KERNEL ) ; if (! ret ) return - ENOMEM ; ret = kmalloc ( buf, GFP_KERNEL ) ; ret < 0 ) return - ENOMEM ; ret = - ENOMEM ; memcpy ( buf, 0, 0, 0, size ) ; ret < 0 ) { ret = - ENOMEM ) ; ret = - ENOMEM ; goto out ; } if (! buf ) return - ENOMEM ; ret ; ret = kmalloc ( buf, GFP_NO_NO_NOIO ) ; if ( ret < 0 ) { ret = - ENOMEM ) ; ret = kmalloc ( buf ) ; ret = - ENOMEM ; ret < 0 ) return - ENOMEM ; ret ; ret = kmalloc ( buf, 0 ) ; ret ) ; ret = kmalloc ( ret ) ; ret ) ; ret = kmalloc ( ret < 0 ) ; ret ) ; ret = kmalloc ( ret ) ; ret",0
323,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
324,,0
325,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
326,"<S2SV_ModStart> vpx_codec_alg_priv_t * cpi <S2SV_ModEnd>, cfg",0
327,<S2SV_ModStart> ++ ) { size_t len = 0 ; <S2SV_ModStart> 0 ) ; if (! strcmp ( r ) { <S2SV_ModStart> - ENOMEM ; goto out ; },0
328,<S2SV_ModStart> - ENOMEM ; int ret = - ENOMEM ; <S2SV_ModStart> vma ) ; if ( ret < 0 ) return - ENOMEM ;,0
329,,0
330,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
331,<S2SV_ModStart> * fptr ; <S2SV_ModEnd> return NULL ;,0
332,,0
333,<S2SV_ModStart> cpi ) { vpx_free <S2SV_ModEnd> ( cpi ->,0
334,"<S2SV_ModStart> * req, TEE_ERROR_OVERFLOW, TEE_MEE_MAY ) ; if ( TEE_ERROR_OVERFLOW ( TEE_ERROR, 0 ) ) return TEE_ERROR_MEE_MEE_ERROR_MEE_MAY ; <S2SV_ModStart> ) ) { TEE_ERROR_ERROR_ERROR_MEE_ERROR_OVERFLOW ( TEE_ERROR, 0 ) ; }",0
335,"<S2SV_ModStart> ctxt ) { struct desc_struct old_desc ; struct desc_struct old_desc ; old_desc = cpl ( ctxt, & old_desc, VCPU_SREG_CS ) ; if ( ctxt -> ops!= X86EMUL_CONTINUE ) ops = assign_eip_segment ( ctxt, & old_desc, VCPU_SREG_CS, & old_desc, VCPU_SREG_CS ) ; if ( ctxt -> mode!= X86EMUL_CONTINUE ) return rc ; if ( ctxt -> mode!= X86EMUL_CONTINUE ) return rc = assign_eip_eip ( ctxt, VCPU_CS, VCPU_SREG_SREG_CS ) ; if ( ctxt -> mode!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip ( ctxt -> mode!= X86EMUL_CONTINUE ) memcpy ( ctxt, & old_desc, old_desc, VCPU_SREG_CONTINUE ) ; if ( rc!= X86EMUL_CONTINUE ) return rc!= X86EMUL",0
336,,0
337,,0
338,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
339,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
340,<S2SV_ModStart> p_vpx_codec_t * p_priv_t * p_t <S2SV_ModEnd> ; if (,0
341,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 0' ) { const char * <S2SV_ModEnd> ; char * <S2SV_ModStart> fname ) { const char * <S2SV_ModStart> = '\\0' ; char * prefix <S2SV_ModEnd> ; char * <S2SV_ModStart> ; if ( ( ( strlen ( fname, fname, fname, fname, '\\0' ) <S2SV_ModEnd> fprintf ( <S2SV_ModStart>, '\\0' ) <S2SV_ModEnd> ; if (",0
342,<S2SV_ModStart> * data ; uint32_t zval ; <S2SV_ModStart> ; zval_val ) { zval_copy_type = Z_TYPE_TYPE_HASH ; } if (! zval ) { zval_type ( Z_TYPE_HASH ) ; zval = Z_TYPE_HASH ( Z_HASH ) ; },0
343,<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> if ( tu,0
344,"<S2SV_ModStart> tmp_str ) { ISOM_DECREASE_SIZE ( ptr, 1 ) ; <S2SV_ModStart> tmp_strsize ) { ISOM_DECREASE_SIZE ( ptr, 1 ) ; }",0
345,<S2SV_ModStart> ( ctx ) <S2SV_ModEnd> ; if (,0
346,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if ( <S2SV_ModStart> } } } },0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
348,"<S2SV_ModStart> x, size_t <S2SV_ModEnd> maxw, size_t <S2SV_ModStart> maxw ) { size_t <S2SV_ModEnd> maxh ; size_t <S2SV_ModStart> max ) { size_t <S2SV_ModEnd> maxh ; size_t <S2SV_ModStart> maxh ; size_t <S2SV_ModEnd> max ; size_t <S2SV_ModStart> max ) ; memcpy <S2SV_ModEnd> ( maxh, <S2SV_ModStart> max ) ; memcpy <S2SV_ModEnd> maxw, <S2SV_ModStart> max ) ; memcpy <S2SV_ModEnd> ( w, <S2SV_ModStart> max ) ; memcpy <S2SV_ModEnd> ( w, <S2SV_ModStart> max, 0, size_t, size_t, 0, size_t <S2SV_ModEnd> maxw, <S2SV_ModStart> max ) ; size_t <S2SV_ModEnd> maxh = 0 <S2SV_ModStart> max ) ; size_t <S2SV_ModEnd> maxh = 0 <S2SV_ModStart> max ) ; size_t <S2SV_ModEnd> maxh = 0 <S2SV_ModStart> max ; memcpy <S2SV_ModEnd> maxh = 0 <S2SV_ModStart> max ) ; memcpy <S2SV_ModEnd> ( d, <S2SV_ModStart> max ) ; memcpy <S2SV_ModEnd> ( size_t, <S2SV_ModStart> max ) ; memcpy ( size_t, size_t ) ; memcpy ( size_t, <S2SV_ModStart> max ) ; memcpy ( size_t, size_t, size_t, size_t, size_t ) ; size_t <S2SV_ModEnd> maxw,",0
349,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( state ) { mutex_unlock ( fmode <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( state, fmode <S2SV_ModEnd> ) ; }",0
350,<S2SV_ModStart> ( r = NULL <S2SV_ModEnd> ; if (,0
351,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
352,<S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( c,0
353,"<S2SV_ModStart> * fmode, int fmode <S2SV_ModEnd> ) { int <S2SV_ModStart> ( fmode, fd, <S2SV_ModStart> ) ) ; if (! strcmp ( fprintf <S2SV_ModEnd> ) ) fprintf <S2SV_ModStart> ( fprintf <S2SV_ModEnd>, ""%s: <S2SV_blank> %s: <S2SV_blank> %s\\n"",",0
354,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> dev_null> <S2SV_null>,0
355,"<S2SV_ModStart> size ) { memset <S2SV_ModEnd> ( buf,",0
356,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
357,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
358,,0
359,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; return",0
360,<S2SV_ModStart> q ) ; <S2SV_ModEnd> } <S2SV_null>,0
361,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> out_write_inode ( struct <S2SV_ModStart> out ) { int offset = - EINVAL ; out_write_inode_write ( inode ) ; <S2SV_ModStart> out ; } <S2SV_ModEnd> if ( out_write <S2SV_ModStart> inode ) { <S2SV_ModEnd> if ( inode <S2SV_ModStart> inode ) { <S2SV_ModStart> out ; } out_write_free ( page ) ; <S2SV_ModStart> out ; out_write_write ( page ) ;,0
362,<S2SV_ModStart> ) ; } <S2SV_ModEnd> char *,0
363,"<S2SV_ModStart>, len < 0",0
364,,0
365,"<S2SV_ModStart> -> priv_mode ; memset ( & mode, 0, 0 ) ;",0
366,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_tlv_tlv_tlv_tlv_tlv_tlv_tlv_tlv_tlv_tlv_tlv_tlv_tlv_tlv_tlv ; <S2SV_ModStart> mi_length ) ; if (! miux_tlv_tlv_length ) return - ENOMEM ; <S2SV_ModStart> 0 ) ; if (! miux_tlv ) return - ENOMEM ;,0
367,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
368,"<S2SV_ModStart> ( ctx, <S2SV_ModEnd> va_list args )",0
369,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
370,"<S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> ) ; if",0
371,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
372,<S2SV_ModStart> len ; } ND_TCHECK_16BITS ( p + 2 ) ;,0
373,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; if (,0
374,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
375,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
376,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
377,<S2SV_ModStart> ; dlen -= 3 <S2SV_ModEnd> ; if (,0
378,<S2SV_ModStart> { rqs -> rqs [ <S2SV_ModEnd> off + rqs,0
379,<S2SV_ModStart> ( 1 ) <S2SV_ModEnd> ; if (,0
380,<S2SV_ModStart> - EOPNOTSUPP ; msg -> msg_namelen = 0 ;,0
381,<S2SV_ModStart> skb ) return 0,0
382,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; return",0
383,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp ) ;,0
384,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( tile_buffsize, 0 )",0
385,"<S2SV_ModStart>, new_umask_val ; } if ( new_umask_val == NULL ) { case 'u_val = new_umask_val ; break ; case",0
386,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
387,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
388,"<S2SV_ModStart> ( fp, "" <S2SV_ModEnd> ) ; return",0
389,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
390,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct <S2SV_ModEnd> skb_set_sock ( struct <S2SV_ModStart> ( sk ) <S2SV_ModEnd> sk ) { <S2SV_ModStart> sk ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> ( sk ) <S2SV_ModEnd> sk ) { <S2SV_ModStart> sk ) ; <S2SV_ModEnd> if (!,0
391,<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( connection ->,0
392,"<S2SV_ModStart> file ) ; fprintf <S2SV_ModEnd> ( fc,",0
393,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
394,,0
395,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( &,0
396,<S2SV_ModStart> ret = 1 <S2SV_ModEnd> ; if (,0
397,,0
398,<S2SV_ModStart> -> uid ; uid = 0 <S2SV_ModEnd> ; if (,0
399,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> NULL, NULL <S2SV_ModStart> ) ; } if ( mode == NULL ) { <S2SV_ModStart> ) ; } <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> } } }",0
400,,0
401,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
402,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
403,,0
404,<S2SV_ModStart> ) return <S2SV_ModEnd> ; } return,0
405,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> dev, 0 )",0
406,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
407,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
408,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> picompx32_t <S2SV_ModStart> picompx32_t <S2SV_ModEnd> * pirlvl ; if ( uint_t <S2SV_ModEnd> ( pirlvl ->,0
409,,0
410,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> x2SV_null> <S2S2SV_null> <S2SV_ModStart> null> 0x2SV_null> 0 <S2SV_ModEnd> 2SV_null>,0
411,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
412,<S2SV_ModStart> cs_data ) ; if ( ctxt -> rcx == X86EMUL_CONTINUE ) return rcx <S2SV_ModEnd> ; rcx,0
413,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
414,<S2SV_ModStart> * out ; if (! out ),0
415,,0
416,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_tree_tree_tree ( vpx_probs <S2SV_ModEnd> * probs, <S2SV_ModStart> int b, vpx_tree_tree, vpx_tree_probs <S2SV_ModEnd> * probs, <S2SV_ModStart> int b, vpx_tree, vpx_prob <S2SV_ModEnd> tree, vpx_probs <S2SV_ModEnd> prob <S2SV_ModStart> int b, vpx_tree_tree_tree, vpx_prob <S2SV_ModEnd> prob <S2SV_ModEnd> tree, <S2SV_ModStart> int b ; vpx_tree_tree_tree, vpx_tree_tree_tree, probs <S2SV_ModEnd> probs <S2SV_ModEnd> prob <S2SV_ModStart> int b ) { vpx_tree_tree_tree, probs <S2SV_ModEnd> probs <S2SV_ModEnd> prob <S2SV_ModStart> probs ) { vpx_tree_tree_tree_tree, vpx_tree <S2SV_ModEnd> probs <S2SV_ModEnd> ( vpx_tree,",0
417,,0
418,"<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * addr ; <S2SV_ModStart>, sizeof ( addr_addr ) <S2SV_ModEnd> ; if (",0
419,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output,",0
420,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
421,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
422,<S2SV_ModStart> fname ) ; if (! strcmp ( strcmp ( file ) ) == NULL ) { exif (,0
423,,0
424,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, tran_low_t <S2SV_ModStart> x, tran_low_t <S2SV_ModEnd> x0, tran_low_t <S2SV_ModStart> x0 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 2 ] ; tran_high_high_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_high_high_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_high_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_high_high_high_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModStart> 4 ] = input <S2SV_ModStart> 4 ] ; tran_high_high_low_t <S2SV_ModEnd> x4 ] = input <S2SV_ModStart> 0 ] ; tran_t <S2SV_ModEnd> x4 ] = input <S2SV_ModStart> 4 ] ; tran_high_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] = input <S2SV_ModStart> 4 ] ; tran_high_high_high_high_t <S2SV_ModEnd> x4 ] = input <S2SV_ModStart> 4 ] = input <S2SV_ModStart> 4 ] = input <S2SV_ModStart> 4 ] = input <S2SV_ModEnd> ; tran_high_high_",0
425,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
426,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
427,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
428,,0
429,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
430,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
431,<S2SV_ModStart> ; if ( mnt -> mnt. mnt. mnt_flags & MNT_NODEV ) { if ( mnt -> mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt_flags |= MNT_NOSUID ; if ( mnt -> mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt_flags |= MNT_NOSUID ; if ( mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt_flags ) ; if ( mnt. mnt. mnt. mnt. mnt. mnt_flags & MNT_flags & M,0
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
433,<S2SV_ModStart> * rsize >= <S2SV_ModEnd> && rdesc [,0
434,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
435,<S2SV_ModStart> ( i ++ ) <S2SV_ModEnd> ; if (,0
436,"<S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd> ) ) ;",0
437,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
438,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> se2SV_null> <S2SV_null>,0
439,,0
440,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
441,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
442,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
443,,0
444,"<S2SV_ModStart> int i, <S2SV_ModEnd> struct oe_sockaddr_info * <S2SV_ModStart> ; struct oe_sockaddr_sockaddr_t * <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) { ret = - EINVAL ; goto error ; } if ( <S2SV_ModStart> OE_EINVAL ) { ret = - EINVAL ; goto out ; } <S2SV_ModEnd> if (! <S2SV_ModStart> EINVAL ) { ret = - 1 ; OEINVAL ; goto out ; } if ( <S2SV_ModStart> EINVAL ) { ret = - EINVAL ; oe_EINVAL ; } if ( <S2SV_ModStart> E_EINVAL ) { ret = - EINVAL ; goto out ; }",0
445,<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( connection ->,0
446,<S2SV_ModStart> x ) ; <S2SV_ModEnd> return 0 ;,0
447,,0
448,"<S2SV_ModStart> uint8 * buf ; int ret = kmalloc ( buf, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart> ret ) ; ret = kmalloc ( buf, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret =",0
449,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
450,<S2SV_ModStart> s ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
451,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9_COMP_COMMON <S2SV_ModEnd> VP9_COMMON <S2SV_ModStart> VP9_COMMON * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * ctx ; const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * ctx ; const uint8_t * const uint8_t * const uint8_t * ctx ; uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * ctx ; const uint8_t * const uint8_t * const uint8_t * ctx ; const uint8_t * const uint8_t * ctx ; const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t,0
452,<S2SV_ModStart> -> ctx ; <S2SV_ModEnd> return ret ;,0
453,,0
454,<S2SV_ModStart> buf ) ; <S2SV_ModEnd> if ( req <S2SV_ModStart> buf ) ; if (! s -> buf ) return - 1 ;,0
455,,0
456,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
457,<S2SV_ModStart> ( buf + 1 <S2SV_ModEnd> ) return 0,0
458,,0
459,<S2SV_ModStart> ) ; } ND_TCHECK ( bp ) ;,0
460,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
461,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <SV_null> <S2SV_null>,0
462,,0
463,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
464,<S2SV_ModStart> } if ( key_len > 0 ) return - EINVAL ; if (,0
465,"<S2SV_ModStart> BPF_ALU64 ) { coerce_reg_to_size ( dst_reg, 4 ) ; if ( src_reg_to_size < 4 ) { coerce_reg_reg_to_size ( & src_reg, 4 ) ; }",0
466,<S2SV_ModStart>,0
467,,0
468,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
469,<S2SV_ModStart> = 0 ;,0
470,<S2SV_ModStart> void usage_exit ( void,1
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
472,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
473,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
474,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
476,,0
477,"<S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd> ) ) ;",0
478,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
479,,0
480,<S2SV_ModStart> int i ; zval ; zval_copy_ctor ( & zval ) ; zval ) { zval_copy_to_copy_copy_copy ( & zval ) ; zval_copy_to_copy_copy_copy_copy ( & zval ) ; zval ( & zval ) ; zval ) { zval_copy_to_copy_copy_copy_copy_copy_copy_copy_copy ( & zval ) ; zval_copy_copy_to_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy ( & zval ) ; zval ( & zval ) ; zval ) ; zval ( & zval ) ; zval ) { zval_copy_copy_to_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy ( & zval ) ; zval ) ; zval ( & zval ) ; zval ) ; zval <S2SV_ModEnd> ; },0
481,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
482,<S2SV_ModStart> SV_null> <S2SV_null> static,0
483,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
484,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
485,<S2SV_ModStart> -> port ; if (! serial -> port ) return NULL ;,0
486,<S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> ret ; },0
487,"<S2SV_ModStart> * buf, size_t len <S2SV_ModEnd> ) { int",0
488,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
489,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
490,<S2SV_ModStart> * c ; <S2SV_ModEnd> if ( c,0
491,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( (,0
492,,0
493,<S2SV_ModStart> * data_len ) <S2SV_ModEnd> ; if (,0
494,,0
495,,0
496,,0
497,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_TypeError, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""\\"" <S2SV_ModEnd>, arena ) <S2SV_ModStart> ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( tmp ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> field <S2SV_blank> \\"" <S2SV_ModEnd>, arena ) <S2SV_ModStart> ; if ( tmp ) < 0 ) { PyErr_SetString ( tmp ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( tmp ) ; return 1 ; } else { PyErr_TypeError, ""required <S2SV_blank> missing <S2SV_blank> missing <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> field <S2SV_blank> from <S2SV_blank> \\"", arena ) ; } if ( res!= 0 ) { return 1 ; } if ( tmp == NULL ) { Py_TypeError_TYPE_CLEAR ( tmp ) ; return 1 ; } if ( tmp == NULL ) { Py",0
498,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int i ; uint32_t <S2SV_ModStart> int i ; uint32_t colptr = 0 ; uint32_t * buf ; uint32_t hdr ; uint32_t colptr = 0 ; uint32_t hdr ; uint32_t hdr ; uint32_t hdr ; uint32_t hdr ; uint32_t * buf ; uint32_t hdr ; uint32_t ret ; uint32_t ret ; uint32_t hdr = 0 ; uint32_t hdr ; uint32_t hdr ; uint32_t hdr ; uint32_t hdr ; uint32_t hdr = 0 ; uint32_t hdr ; uint32_t ret ; uint32_t tptr = 0 ; uint32_t hdr ; uint32_t hdr ; uint32_t ret ; uint32_t ret = 0 ; uint32_t ret = 0 ; uint32_t ret ; uint32_t ret = 0 ; uint32_t ret = 0 ; uint32_t,0
499,<S2SV_ModStart> ; if ( <S2SV_ModEnd> svc_id < 0,0
500,,0
501,,0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
503,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
504,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
505,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 0,0
506,,0
507,"<S2SV_ModStart> & cs64_chunk, CS64_chunk, sizeof ( CS64Chunk ) ) <S2SV_ModStart> ) ) { cs64Chunk = sizeof ( CS64Chunk ) ; if ( CS64ChunkSize ( CS64_chunk )!= sizeof ( CS64Chunk ) ) { cs64Chunk = ( CS64_chunk * cs64_chunk ) ; cs64_chunk = ( CS64_chunk ) ; cs64_chunk ( CS64_chunk * cs64_chunk, sizeof ( CS64_chunk ) ) ) ; cs64_chunk = ( CS64_chunk ) ; if ( cs64_chunk ) { cs64_chunk ( cs64_chunk, sizeof ( CS64_chunk ) ) ) { cs64Chunk = ( CS64_chunk ) ; cs64_chunk ( CS64_chunk ) ; cs64_chunk ( cs64_chunk, sizeof ( CS64_chunk ) ) ) ; cs64_chunk = ( CS64_chunk ) ; if ( cs64_chunk ) { cs64_chunk ( cs64_chunk",0
508,"<S2SV_ModStart> -> msg_sys ; struct msg_sys <S2SV_ModEnd> * msg_sys = <S2SV_ModStart> -> msg_sys <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> msg_sys <S2SV_ModEnd> ( msg_sys, <S2SV_ModStart> -> msg_sys ) <S2SV_ModEnd> ; if (",0
509,<S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int bh ; int <S2SV_ModStart> int bh = 0 ; uint8_t bh ; uint8_t * bs = 0 ; uint8_t * bh ; uint8_t * bh = 0 ; uint8_t * bh = 0 ; uint8_t * bh ; uint8_t bh = 0 ; uint8_t * bh = 0 ; uint8_t * bh ; uint8_t * bs = 0 ; uint8_t * bh = 0 ; uint8_t * bh = 0 ; uint8_t * bh = 0 ; uint8_t * bh = 0 ; uint8_t * b_t * bh ; uint8_t * bsize = 0 ; uint8_t * bsize = 0 ; uint8_t * bh = 0 ; uint8_t * bh = 0 ; uint8_t * bh = EXT4_SB ( b_SB ( bh ) >> 8 ) >> 8 ; uint8_t * bh = 0 ; uint8_t *,0
510,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
511,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
512,,0
513,"<S2SV_ModStart> ) ; } if ( fstat ( fname, fname, fname, fname ) ) { fprintf ( stderr, ""/etc"" ) ; goto out ; } else if ( fprintf ( stderr, fname, fname, stderr, fname <S2SV_ModEnd> ) ; }",0
514,<S2SV_ModStart> ; if ( <S2SV_ModEnd> f -> sf,0
515,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
516,<S2SV_ModStart> -> private_time ; mutex_lock_unlock <S2SV_ModEnd> ; if (,0
517,"<S2SV_ModStart> if (! js_doregexec ( J, <S2SV_ModEnd> re -> prog",1
518,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
519,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> goto out_stream ( <S2SV_ModEnd> ) ; int <S2SV_ModStart> ret ; int <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) { int ret = - EINVALID_LOG_ERROR <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) ; goto out_stream <S2SV_ModEnd> ; } if ( <S2SV_ModStart> return - 1 ; <S2SV_ModEnd> } if ( <S2SV_ModStart> } break ; <S2SV_ModEnd> } if <S2SV_ModStart> } if ( <S2SV_ModEnd> r ) { <S2SV_ModStart> - EINVALID_HEADERR ( <S2SV_ModEnd> ) ) { <S2SV_ModStart> } } } <S2SV_ModEnd> - EINVALIDDATA ; <S2SV_ModStart> - EPERR_LOG_ERROR ; goto out_stream ( <S2SV_ModEnd> ) ; } <S2SV_ModStart> ; } } } } if ( <S2SV_ModEnd> - EPERM ; <S2SV_ModStart> } if ( <S2SV_ModEnd> < 0 ) { <S2SV_ModStart> 0 ) { goto out_stream ( <S2SV_ModEnd> ) ) { <S2SV_ModStart> } } <S2SV_ModStart> } if ( ( <S2SV_ModEnd> ) ) { <S2SV_ModStart> } else { free_stream ( <S2SV_ModEnd> ) ; <S2SV_ModStart> ) ) ; } <S2SV_ModStart> } if ( <S2SV_ModEnd> ) ) { <S2SV_ModStart> } if (! out_stream ( <S2SV_ModEnd> ) ) { <S2SV_ModStart> - EINVALIDDATA <S2SV_ModEnd> ) ) { <S2SV_ModStart> } },0
520,"<S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_ISR_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IS",0
521,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct vpx_wb_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
522,"<S2SV_ModStart> ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
523,<S2SV_ModStart> ; if ( state == NULL ) { return - 1 ; },0
524,<S2SV_ModStart> ( cmd ) <S2SV_ModEnd> ; if (,0
525,<S2SV_ModStart> ctx ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
526,,0
527,,0
528,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
529,<S2SV_ModStart> len_len - 1 <S2SV_ModEnd> ; if (,0
530,"<S2SV_ModStart>, id ) <S2SV_ModEnd> ; if (",0
531,,0
532,"<S2SV_ModStart> * cm, MACROBLOCK * x <S2SV_ModEnd>, BLOCK_SIZE bsize, <S2SV_ModStart> bsize ) { memset <S2SV_ModEnd> ( bsize, <S2SV_ModStart> bsize ) ; memset <S2SV_ModEnd> ( x ->",0
533,,0
534,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
535,,0
536,<S2SV_ModStart> ; if ( <S2SV_ModEnd> hdrlen < 0,0
537,,0
538,,0
539,,0
540,,0
541,"<S2SV_ModStart> ( dst_reg, 4 <S2SV_ModEnd> ) ; }",0
542,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
543,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
544,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
545,,0
546,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
547,<S2SV_ModStart> * olen ; if ( len == olen ) return len ;,0
548,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> return NULL ;,0
549,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
550,<S2SV_ModStart> ( rsize >= 0,0
551,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9_COMMON * const VP9_CODEC_CONFIG * const VP9EncoderConfig <S2SV_ModEnd> * const VP9_CODEC_CONFIG * const <S2SV_ModStart> svc ) { VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_CODEC_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_CODEC_COMMON * const VP9_COMMON * const VP9_COMMON * const VPX_CODEC_COMMON * const xd = & ctx -> common ; <S2SV_ModStart> svc ) { VPX_CODEC_COMMON * const int i ; <S2SV_ModStart> cs = & cpi -> spatial_context [ i ] ; if ( cpi -> common. spatial_context [ i ]. spatial_context [ i ] ) { VPX_CODEC_context [ i ] = & cpi -> common. spatial_,0
552,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
553,,0
554,"<S2SV_ModStart> * n ; unsigned char * strlen = 0 ; <S2SV_ModStart> 0 ) ; if (! strlen ( strlen ( str, '\\"" ) ) ) { check_start = 0 ; <S2SV_ModStart> 0 ) ; if (! strcmp ( strlen ( str, '\\"" ) ) == '\\0' ) { if (! strlen ( is_off + 1 ) == '\\"" ) { return 1 ; } <S2SV_ModStart> 0' ; } else { if (! strcmp ( start_off + 1 ) == '\\0' ) { return 1 ; } <S2SV_ModStart> == '\\0' ; } <S2SV_ModEnd> if (!",0
555,<S2SV_ModStart> int buf = 0 <S2SV_ModEnd> ; if (,0
556,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
557,,0
558,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
559,,0
560,"<S2SV_ModStart> image ) ; if ( size_t ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
561,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto out_free <S2SV_ModEnd> ; } if (,0
562,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
563,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
564,"<S2SV_ModStart> buffer, size <S2SV_ModEnd> ) { struct",0
565,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
566,<S2SV_ModStart> opj_layers + 1 <S2SV_ModEnd> ; if (,0
567,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
568,<S2SV_ModStart> <S2SV_null> <S2SV_null> 0,0
569,"<S2SV_ModStart> * cpi, ThreadData * td <S2SV_ModEnd>, BLOCK_SIZE bsize, <S2SV_ModStart> BLOCK_SIZE bsize, MACROBLOCK_SIZE bsize, <S2SV_ModStart> BLOCK_SIZE bsize, <S2SV_ModEnd> BLOCK_SIZE bsize, <S2SV_ModStart> BLOCK_SIZE bsize ) { memcpy <S2SV_ModEnd> ( bsize, <S2SV_ModStart> -> mi_row, mi_col, mi_col, mi_row, <S2SV_ModStart> mi_col ) ; memset <S2SV_ModEnd> ( mi_col, <S2SV_ModStart> -> mi_col, mi_col, mi_col, mi_col, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_row, mi_row, mi_col, mi_col, mi_col, mi_col, mi_row, mi_col ) ; <S2SV_ModStart> mi_col ) ; memcpy <S2SV_ModEnd> ( mi_col, mi_col, mi_col, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_row, mi_col, mi_col, mi_col ) ; if ( mi_col ) {",0
570,<S2SV_ModStart> ret = 1 <S2SV_ModEnd> ; if (,0
571,,0
572,<S2SV_ModStart> ; error_error = 0,0
573,"<S2SV_ModStart> * tmpname, <S2SV_ModEnd> dir ) { <S2SV_ModStart> = NULL ; <S2SV_ModEnd> if (!",0
574,<S2SV_ModStart> vp9_block_block_block ( bhdr ) ;,0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
577,,0
578,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> desc ) { <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> desc [ 0 <S2SV_ModStart> - ENODEV ; return - ENOMEM <S2SV_ModEnd> ; } return,0
579,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_options_options_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ; struct ip_options_options_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ; struct ip_options_options_rcu <S2SV_ModEnd> * inet_opt = <S2SV_ModStart> * opt -> opt. <S2SV_ModStart> ; if ( opt -> opt -> opt. <S2SV_ModStart> ; if ( opt -> opt. <S2SV_ModEnd> opt -> opt. <S2SV_ModStart> -> opt. <S2SV_ModEnd> optlen <S2SV_null>,0
580,<S2SV_ModStart> ; args -> rmtvaluelen <S2SV_ModEnd> ; args ->,0
581,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
582,<S2SV_ModStart> ; if (,0
583,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
584,"<S2SV_ModStart> ) ) ; if ( g_check_file_name_name ( dir_name ) ) { if ( g_file_settings_table ( g_table ) ) { log_debug ( ""%s: <S2SV_blank> to <S2SV_blank> not <S2SV_blank> config <S2SV_blank> %d)\\n"" <S2SV_ModEnd> ) ; }",0
585,<S2SV_ModStart> -> columns - 1 <S2SV_ModEnd> ) ; },0
586,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
587,<S2SV_ModStart> int err = 0 <S2SV_ModEnd> ; struct sock,0
588,<S2SV_ModStart> ) break ; status = SetImageExtent ( image ) ;,0
589,<S2SV_ModStart> ) ) ; ND_TCHECK ( bp ) ;,0
590,,0
591,<S2SV_ModStart> ) ) return <S2SV_ModEnd> ; if (,0
592,,0
593,<S2SV_ModStart> ( addr ) <S2SV_ModEnd> ; if (,0
594,<S2SV_ModStart> * i ; jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t,0
595,,0
596,<S2SV_ModStart> -> priv ; <S2SV_ModEnd> return 0 ;,0
597,<S2SV_ModStart> ; return - ENOMEM <S2SV_ModEnd> ; } if,0
598,<S2SV_ModStart> return 0 ;,0
599,"<S2SV_ModStart> * data, size_t data_size, <S2SV_ModStart>, & my_stat <S2SV_ModEnd> ) ; if",0
600,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 16 ),0
601,"<S2SV_ModStart> int i, i, <S2SV_ModEnd> ) ; if",0
602,<S2SV_ModStart> p ) ; if ( pixlen < 0 ) return NULL ;,0
603,<S2SV_ModStart> ( r ) <S2SV_ModEnd> ; if (,0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
605,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( c,0
606,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> out ; tran_low_t <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> out ; tran_low_t <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> out ; tran_low_t <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> temp, tran_t <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> temp_t <S2SV_ModStart> * input, tran_t <S2SV_ModEnd> temp_low_t <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> temp_t <S2SV_ModEnd> out ; tran_low_t",0
607,,0
608,"<S2SV_ModStart> ; error = fh_posix_acl ( fh, fh ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> goto out_write_lock ( fh ) ; error = fh_unlock ( fh, fh ) ; if ( error ) goto out_unlock ; fh_write ( fh ) ; error = fh_unlock ( fh ) ; fh_write ( fh ) ; if ( fh_write ( fh ) goto out_unlock ; fh_unlock ; fh_write ( fh ) ; fh_write ( fh_write ( fh ) ; fh_write ( fh, fh ) ; fh_write ( fh ) ; if ( fh_write ( fh ) goto out_unlock ; fh_unlock ( fh ) ; fh_write ( fh ) ; fh_write ( fh_write ( fh ) ; fh_write ( fh ) ; fh_write ( fh_write ( fh ) ; fh_unlock ( fh, fh ) ; fh_write ( fh_write ( fh )",0
609,,0
610,"<S2SV_ModStart> * fmode, fmode_t fmode <S2SV_ModEnd> ) ; if",0
611,<S2SV_ModStart> ) ) ; if ( elen < 2 ) goto trunc ;,0
612,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
613,<S2SV_ModStart> ) ) { ND_TCHECK_16BITS ( tptr ) ;,0
614,<S2SV_ModStart> == 0 ),0
615,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; if (,0
616,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
617,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
618,"<S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd> ) ) ;",0
619,<S2SV_ModStart> ; args -> rmtvaluelen <S2SV_ModEnd> ( args ->,0
620,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
621,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
622,<S2SV_ModStart> ( fc ) <S2SV_ModEnd> ; if (,0
623,"<S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f,",0
624,,0
625,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
626,,0
627,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
628,<S2SV_ModStart> ) ) ; ND_TCHECK2 ( bp ) ;,0
629,<S2SV_ModStart> break ; } ND_TCHECK_16BITS ( & bp [ i ] ) ;,0
630,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
631,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
632,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
633,<S2SV_ModStart> ; if ( ctx -> terminated ||,1
634,,0
635,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
636,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
637,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
638,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
639,,0
640,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ;,0
641,<S2SV_ModStart> char buf [ 0 ] <S2SV_ModEnd> ] ; if,0
642,,0
643,"<S2SV_ModStart> ; if ( memcpy <S2SV_ModEnd> ( src,",0
644,<S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
645,<S2SV_ModStart> ; len = 0 <S2SV_ModEnd> ; if (,0
646,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
647,<S2SV_ModStart> spin_lock ) ; spin_irq ( & timer ) ;,0
648,<S2SV_ModStart> p ; } ND_TCHECK_16BITS ( p ) ; <S2SV_ModStart> len ; } } ND_TCHECK_16BITS ( p + 4 ) ;,0
649,<S2SV_ModStart> ; r = <S2SV_ModEnd> if ( r,0
650,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
651,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
652,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> skb2SV_null>,0
653,,0
654,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
655,<S2SV_ModStart> ; key = 0 <S2SV_ModEnd> ; if (,0
656,,0
657,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( image <S2SV_ModStart> ) ) ; if ( length > GetBlobSize ( image ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobMSBShort ( image ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( image ) ; if ( length > GetBlobMSBShort ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobMSBShort ( image ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobMSBShort ( image ) ; if ( length > GetBlobMSBShort ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",0
658,<S2SV_ModStart> int val ; jas_ulonglong <S2SV_ModEnd> tmp ; tmp,0
659,,0
660,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return NULL ;,0
661,<S2SV_ModStart> ) ) ; msg -> msg_namelen = 0,0
662,"<S2SV_ModStart> ( str ) <S2SV_ModEnd> ( fp,",0
663,<S2SV_ModStart> ( s ) <S2SV_ModEnd> ; if (,0
664,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
665,<S2SV_ModStart> ; if ( * p == NULL ) return NULL ;,0
666,"<S2SV_ModStart>, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
667,,0
668,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
669,"<S2SV_ModStart> * dentry, struct dentry_inode <S2SV_ModEnd> * dentry ; <S2SV_ModStart> dentry ) { <S2SV_ModEnd> put_lock ( & <S2SV_ModStart> dentry ) ; <S2SV_ModEnd> return err ;",0
670,"<S2SV_ModStart> p, p",0
671,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( (,0
672,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
673,,0
674,,0
675,<S2SV_ModStart> ) ) { if ( memcpy <S2SV_ModEnd> ( comp ->,0
676,,0
677,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
678,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
679,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> malloc ( void,0
680,<S2SV_ModStart> { if ( bad_format_print <S2SV_ModEnd> ( im ->,0
681,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
682,,0
683,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
684,<S2SV_ModStart> = NULL ; if (!,0
685,,0
686,<S2SV_ModStart> ; return - EINVAL ; if (,0
687,"<S2SV_ModStart> PERF_COUNT_SW_EMULATION_FAULTS, 1 <S2SV_ModEnd>, regs,",0
688,,0
689,"<S2SV_ModStart> list. name, true",1
690,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> struct segment_t * p <S2SV_ModEnd> ; struct xd_t * <S2SV_ModStart> ; struct xd_keys * tp = NULL ; struct ext_t * tp = NULL ; <S2SV_ModStart> 0 ] ; tran_low_t * tp = NULL ; tran_low_t * tp = NULL ; <S2SV_ModStart> ; tran_low_t * tp = NULL ; tran_low_t * tp = NULL ; struct xd_t * tp = NULL ; <S2SV_ModStart> 0 ] = NULL ; tran_low_t * tp = 0 ; <S2SV_ModStart> 0 ] ; tran_low_tok = 0 ; <S2SV_ModStart> 0 ] ; if (! tp -> cur_len ) { const tran_low_t * tp = NULL ; goto out ; } <S2SV_ModStart> 0 ] = 0 ; <S2SV_ModStart> 0 ] ; <S2SV_ModStart> 0 ] = 0 ; <S2SV_ModStart> 0 ] = NULL ; <S2SV_ModStart> 0 ] = 0 ; <S2SV_ModStart> 0 ] = NULL ; <S2SV_ModStart> end ) ; <S2SV_ModStart> 0 ] = NULL ; <S2SV_ModStart> 0 ] = NULL ; <S2SV_ModStart> } else { if ( tp ( tp,0
691,"<S2SV_ModStart> ) ; } if ( count > 0 ) ereport ( ERROR, ERRCODE_PROGRAM_LIMIT_EXCEED ) ;",0
692,,0
693,<S2SV_ModStart> ( s ) <S2SV_ModEnd> ; if (,0
694,,0
695,,0
696,,0
697,,0
698,,0
699,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return - EINVAL,0
700,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
701,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
702,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
703,<S2SV_ModStart> ) ) ; break,0
704,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,1
705,,1
706,<S2SV_ModStart> ( kfree <S2SV_ModEnd> ) ; ret,0
707,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> psf_scratch ; <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; if ( <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ( psf, <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header. <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header. <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) ) { <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header. indx <S2SV_ModEnd> psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> <S2SV_ModStart> psf -> header.",0
708,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
709,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
710,"<S2SV_ModStart> sk_t sk, SOCK_STREAM",0
711,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> UINT32 ( UINT32_TYPE_TYPE_TYPE_TYPE_TYPE_BLOCKS2SV_null> UINT32 ( UINT32_TYPE_TYPE_TYPE_TYPE_TYPE_TYPE_MASK ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> int ) { if ( UINT32_TYPE_TYPE_TYPE_TYPE_TYPE_TYPE_TYPE_TYPE_TYPE_TYPE_ROBLOCK ) goto out_strdup_partition ( <S2SV_ModEnd> ) ; } if,0
712,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int jas_eprintf ( jas_eprintf, ( jas_eprintf ) ; if (! jas_eprintf ( opts ) ) { jas_eprintf ( ""error: <S2SV_blank> exceeds\\n"" ) ; goto error ; } if ( optsamples > 0 ) { jas_eprintf ( ""error: <S2SV_blank> exceeds\\n"" ) ; goto error ; } if ( optsamples > 0 ) { jas_eprintf ( ""error: <S2SV_blank> of <S2SV_blank> exceeds\\n"" ) ; goto error ; } if ( optsamples > 0 ) { goto error = 0 ; goto error ; goto error ; }",0
713,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line,",0
714,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
715,,0
716,,0
717,,0
718,"<S2SV_ModStart>, image ) \\\n{ <S2SV_ModEnd> if ( size_t",0
719,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; if (,0
720,<S2SV_ModStart> = MagickFalse ; break,0
721,,0
722,,0
723,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> skb ( skb <S2SV_ModStart> ; if ( <S2SV_ModEnd> skb ( skb <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( skb ) <S2SV_ModStart> ; if (! skb ) ) goto trunc ; <S2SV_ModEnd> } if (,0
724,"<S2SV_ModStart> pfn, page_size >> PAGE_SHIFT",0
725,,0
726,"<S2SV_ModStart> perf_event_event_context * ctx <S2SV_ModEnd>, struct perf_event_event_context * ctx <S2SV_ModStart> event ) { perf_event_context <S2SV_ModEnd> ( event, <S2SV_ModStart> ctx ) ; perf_event_event_ctx_unlock ( event <S2SV_ModEnd> ) ; }",0
727,<S2SV_ModStart> unsigned short ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 ] <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 ] <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> value & 0xffff <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> value & 0xffff <S2SV_ModStart> value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0xffff <S2SV_ModStart> ] << 8 ; value |= ( unsigned short ) <S2SV_ModEnd> value & 0xffff <S2SV_ModStart> value & 0xffff <S2SV_ModEnd> value & 0xffff <S2SV_ModStart> value & 0xffff <S2SV_ModEnd> ; return ( <S2SV_ModStart> value & 0xffff <S2SV_ModEnd> ; } <S2SV_null>,0
728,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct <S2SV_ModEnd> inode_null> <S2SV_ModStart> inode ) { struct <S2SV_ModEnd> inode = - EINVAL <S2SV_ModStart> ; if ( <S2SV_ModEnd> ) { return,0
729,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ctx,0
730,<S2SV_ModStart> vpx_codec_err_t * net <S2SV_ModEnd> ; if ( <S2SV_ModStart> dev ) ) { <S2SV_ModEnd> if (! <S2SV_ModStart> dev ) { net_err <S2SV_ModEnd> ( & net -> <S2SV_ModStart> dev ) ; return - EINVAL <S2SV_ModEnd> ; } if,0
731,,0
732,,0
733,"<S2SV_ModStart> = 0 ; luaL_check ( luaL, 3, ""in <S2SV_blank> size"" ) ; luaL_check ( L, 0, ( size ) - 1 ) <S2SV_ModEnd> ; luaL_check (",0
734,<S2SV_ModStart> 1 ) ; ND_TCHECK2 ( * tptr ) ;,0
735,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
736,"<S2SV_ModStart> ) { memcpy <S2SV_ModEnd> ( cpi,",0
737,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
738,,0
739,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
740,<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> ; } ext4_size = sizeof ( struct ext4_extentries ) + ext4_extentries ) ;,0
741,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( (,0
742,<S2SV_ModStart> = 0 ; size_t file_size = 0 ; <S2SV_ModStart> ) ) ; if ( file_size < 4 ) return - 1 ; <S2SV_ModStart> - 1 ; } if ( file_size > 0 ) return - 1 ;,0
743,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 0,0
744,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> cpi2SV_null>,0
745,<S2SV_ModStart> uint8 * tps = 0 <S2SV_ModEnd> ; if (,0
746,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
747,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void,0
748,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & acl",0
749,<S2SV_ModStart> } if ( fmode_t <S2SV_ModEnd> mode == 0,0
750,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; break ; }",0
751,,0
752,,0
753,,0
754,,0
755,<S2SV_ModStart> ; if (,0
756,,0
757,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
758,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
759,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
760,,0
761,,0
762,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
763,<S2SV_ModStart> { uint32_t num_chunk = 0,0
764,<S2SV_ModStart> ; if (,0
765,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) ; },0
766,,0
767,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
768,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
769,,0
770,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
771,"<S2SV_ModStart> NULL, NULL, true",0
772,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
773,<S2SV_ModStart> ; if ( psf_count > psf_count <S2SV_ModEnd> ( psf_count ),0
774,"<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( sf,",0
775,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
776,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
777,,0
778,,0
779,<S2SV_ModStart> ) ; } if ( count > OE_SSIZE_MAX ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
780,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
781,,0
782,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
783,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
784,<S2SV_ModStart>,0
785,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> dev_null>,0
786,<S2SV_ModStart> ) ) { <S2SV_ModEnd> } if ( <S2SV_ModStart> ) ) ; },0
787,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
788,,0
789,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
790,,0
791,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ( addr,0
792,,0
793,,0
794,,0
795,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> S_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> dst_null>,0
796,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
797,,0
798,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & x ->,0
799,,0
800,"<S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( 2, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( 2, 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( 2, 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ), 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModEnd> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModEnd> NEED_IP ( <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModEnd> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( 0",0
801,<S2SV_ModStart> ; if ( size_t len < 1 ) { <S2SV_ModStart> - ENOMEM ; goto done ; } <S2SV_ModStart> - EINVALIDDATA <S2SV_ModEnd> ; } if (,0
802,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
803,<S2SV_ModStart> 1 ) { <S2SV_ModEnd> return ret ;,0
804,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
805,<S2SV_ModStart> ; TEMP_FAILURE_RETRY (,0
806,<S2SV_ModStart> rc ; const VP9EncoderConfig <S2SV_ModEnd> * oxcf =,0
807,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
808,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
809,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
810,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
811,"<S2SV_ModStart> ; # line 63 <S2SV_ModEnd> ""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y"" break ; <S2SV_ModStart> } # line 63 <S2SV_ModEnd> ""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y"" break ; <S2SV_ModStart> } # line 2494 <S2SV_ModEnd> ""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.",0
812,<S2SV_ModStart> break ; # if CONFIG_VP9_HIGHBITDEPTH if ( len < 16 ) { ND_TCHECK_16_16 ( bd ) ; # endif,0
813,<S2SV_ModStart> ; if (,0
814,<S2SV_ModStart> ; if (,0
815,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
816,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> intra_null>,0
817,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat,0
818,<S2SV_ModStart> -> peer ; <S2SV_ModEnd> if (!,0
819,<S2SV_ModStart> - EINVAL ; if ( len < 0 ) goto error ; <S2SV_ModStart> - EINVAL ; },0
820,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
821,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
822,<S2SV_ModStart> ; size_t target_size = 0 ; <S2SV_ModStart> case 0 : 0 : 0 <S2SV_ModEnd> ; if (,0
823,<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> intra_sse ; PREDICTION_MODE <S2SV_ModStart> intra_sse ; unsigned int best_sse = 0 ; unsigned int best_sse ; int best_sse = 0 ; int best_sse ; int best_sse = 0 ; unsigned char * best_sse ; unsigned char * best_sse = 0 ; int best_mv_sse ; int best_sse ; unsigned char * best_sse = 0 ; unsigned char * best_sse = 0 ; unsigned char * best_sse ; int best_sse ; unsigned int best_sse = 0 ; unsigned char * best_sse ; int best_mv = 0 ; unsigned char * best_sse ; unsigned char * best_sse ; unsigned int best_sse = 0 ; unsigned char * best_sse ; unsigned char * best_sse ; unsigned char * best_sse = 0 ; unsigned int best_sse ; unsigned char * best_sse ; int best_sse ; unsigned char * best_sse =,0
824,,0
825,,0
826,<S2SV_ModStart> * cdf ; <S2SV_ModEnd> if ( cdf,0
827,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
828,<S2SV_ModStart> ( u8 ) <S2SV_ModEnd> ; if (,0
829,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
830,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; if (,0
831,,0
832,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> const char * a = NULL <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - 1 ; <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) { if ( ( ( ( ( <S2SV_ModStart> 0 ) == - 1 ) == - 1 ) return - 1 ; <S2SV_ModEnd> ; } if (,0
833,<S2SV_ModStart> } if ( safe_mount <S2SV_ModEnd> ( ) < 0,0
834,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> i_sb ) <S2SV_ModEnd> ; if (,0
835,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
836,<S2SV_ModStart> size_t data_size ; size_t data_size ; size_size <S2SV_ModStart> ) ) { if (! data_size_size ) { if ( data_size < sizeof ( data_size ) ) { if (! data_size_size ) goto out ; <S2SV_ModStart> ) ) { if ( data_size > ( data_size ) goto out ; <S2SV_ModStart> ) ) { if ( data_size + size_t data_size ) { if ( data_size < sizeof ( data_size ) return - 1 ; <S2SV_ModStart> ) ) { if ( data_size > ( data_size ) { if (! data_size ) { if (! data_size_size ) { if (! data_size_size ) { if (! data_size - 1 ) goto out ; } <S2SV_ModStart> ) ) { if ( data_size ) { if ( data_size ) { if ( data_size > ( data_size ) { if ( data_size ) { if (! data_size ) goto out ; } <S2SV_ModStart> ) ) { if ( data_size ) { if ( data_size < sizeof ( data_size ) { <S2SV_ModStart> ) ) { if ( data_size ) { if ( data_,0
837,<S2SV_ModStart> mq_ops ) ; q -> fctx = 0 ;,0
838,,0
839,,0
840,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
841,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
842,<S2SV_ModStart> ; int err ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet_opt ) ; if ( inet_opt && inet_opt -> inet_opt && inet_opt -> inet_opt && inet_opt -> inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) { <S2SV_ModStart> if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) inet_opt,0
843,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
844,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
845,<S2SV_ModStart> * req ; if ( len < 0 ) return - EINVAL ;,0
846,"<S2SV_ModStart> ""`%s\'"", option ) ;",0
847,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
848,,0
849,,0
850,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
851,<S2SV_ModStart> ; size_t <S2SV_ModEnd> size = 0,0
852,"<S2SV_ModStart> * s ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s ) ) { rdp_protocol_error ( ""consume <S2SV_blank> overrun"", & packet ) ; }",0
853,<S2SV_ModStart> ( key ) <S2SV_ModEnd> ; if (,0
854,,0
855,<S2SV_ModStart> ( vpx_codec_dev ) <S2SV_ModEnd> ; if (,0
856,<S2SV_ModStart> * rsize >= 31 <S2SV_ModEnd> && rdesc [,0
857,<S2SV_ModStart> ; goto out <S2SV_ModEnd> ; if (,0
858,,0
859,,0
860,<S2SV_ModStart> int jas_uchar <S2SV_ModEnd> ; if (,0
861,"<S2SV_ModStart> 1 ) { memcpy <S2SV_ModEnd> ( 4,",0
862,,0
863,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
864,<S2SV_ModStart> 0 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
865,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
866,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
867,<S2SV_ModStart> ; # if CONFIG_HIGHBITDEPTH if ( data_size < 0 ) { return - ENOMEM ; } # ifdef CONFIG_HIGHBITS2SV_null>,0
868,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
869,<S2SV_ModStart> { uint32_t num_chunk = 0,0
870,<S2SV_ModStart> -> timer ) <S2SV_ModEnd> timer_state ( timer ),0
871,"<S2SV_ModStart> } if ( * cp == '\\0' || <S2SV_ModEnd> strchr ( cp <S2SV_ModStart> ] == 0 || <S2SV_ModEnd> strchr ( cp <S2SV_ModStart> ( cp, ""%s"", <S2SV_ModEnd> )!= 0 <S2SV_ModEnd> ) { int <S2SV_ModStart> ( stderr, <S2SV_ModEnd> ) ; }",0
872,"<S2SV_ModStart> ( cmd, NULL,",0
873,,0
874,,0
875,<S2SV_ModStart> ; if ( <S2SV_ModEnd> keylen < 0,0
876,"<S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w,",0
877,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & acl,",0
878,"<S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( rdp,",0
879,<S2SV_ModStart> mnt_flags & new_flags & new_flags & new_mnt -> new_flags & new_flags & new_flags & new_mnt -> new_ns,0
880,,0
881,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> ) ; }",0
882,<S2SV_ModStart> ) return <S2SV_ModEnd> ; if (,0
883,"<S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd> ) ) ;",0
884,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
885,"<S2SV_ModStart>, 0 ) <S2SV_ModEnd> ; if (",0
886,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
887,,0
888,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
889,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
890,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
891,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
892,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
893,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
894,<S2SV_ModStart> in -> data [ plane ] && in -> linesize,0
895,,0
896,"<S2SV_ModStart>, regs, false",0
897,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
898,,0
899,<S2SV_ModStart> ; err = 0 <S2SV_ModEnd> ; if (,0
900,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
901,,0
902,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static,0
903,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return - EINVAL,0
904,,0
905,,0
906,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
907,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
908,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, length )",0
909,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> malloc ( void,0
910,<S2SV_ModStart> ioc ) ; <S2SV_ModEnd> } <S2SV_null>,0
911,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
912,<S2SV_ModStart> ; if ( <S2SV_ModEnd> desc -> bNumEndpoints < 0 ||,0
913,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
914,<S2SV_ModStart> ) return <S2SV_ModEnd> ; if (,0
915,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> intra_mode_mode_mode ( VP9_COMMON <S2SV_ModStart> * cm, MACROBLOCKD * xd, MACROBLOCKD * r, MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const xd ) vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> intra_read ) vpx_read_read_prob <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> fc -> fc -> fc -> <S2SV_ModEnd> y_mode == FRAME_COUNTS * counts ) <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> intra_mode = FRAME_COUNTS * counts -> <S2SV_ModStart> cm -> fc -> fc -> <S2SV_ModEnd> intra_mode ; FRAME_COUNTS * counts ; FRAME_MODE_COUNTS * counts = xd -> <S2SV_ModEnd> cm -> <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> y_mode [ FRAME ]",0
916,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
917,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
918,<S2SV_ModStart> c -> width + 16,0
919,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
920,<S2SV_ModStart> ptr ) { jas_uchar <S2SV_ModEnd> buf [ j,0
921,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
922,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
923,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
924,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; if (,0
925,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return NULL ;,0
926,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( s ->,0
927,,0
928,,0
929,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
930,<S2SV_ModStart> = 0 ;,0
931,<S2SV_ModStart> ) ; },0
932,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
933,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
934,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
935,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> int i ; vpx_write_prob <S2SV_ModEnd> ( w, <S2SV_ModStart> ] ) ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> i ] ; vpx_write_bit <S2SV_ModEnd> ( w,",0
936,"<S2SV_ModStart> * wb, struct vpx_write_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> * wb ) { vpx_write_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> size ) { vpx_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_write_literal <S2SV_ModEnd> ( wb,",0
937,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
938,<S2SV_ModStart> 1 ) { <S2SV_ModEnd> uint8_t * <S2SV_ModStart> size ) ; if ( hdr -> desc. bNumEndpoints < 1 ) { <S2SV_ModStart> 1 ) { if ( <S2SV_ModEnd> desc. bNumEndpoints < 1 || <S2SV_ModStart> 1 ) { <S2SV_ModEnd> desc. bNumEndpoints < 1 || <S2SV_ModEnd> desc [ 1,0
939,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static ND_TCHECK_16BITS ( ndo_len <S2SV_ModEnd> ) { ND_16BITS ( <S2SV_ModStart> len ) ; ND_PRINT ( ndo, "" <S2SV_blank> len=%d"" <S2SV_ModEnd> ) ; ND_TCHECK_16BITS ( ndo, 0 <S2SV_ModStart> len ) ; ND_16BITS ( ndo, 2 ) <S2SV_ModEnd> ) { ND_PRINT <S2SV_ModStart> len ; } ND_PRINT ( ( ( ndo, 2 ) <S2SV_ModEnd> ) ; }",0
940,<S2SV_ModStart> ) exit_io_context ( tsk,0
941,"<S2SV_ModStart> char * name <S2SV_ModEnd>, void *",0
942,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
943,<S2SV_ModStart> ) ; },0
944,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
945,<S2SV_ModStart> ; if ( ( <S2SV_ModEnd> len < 8,0
946,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
947,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
948,<S2SV_ModStart> ; if (,0
949,<S2SV_ModStart> < 0 || <S2SV_ModEnd> size < 0,0
950,"<S2SV_ModStart> void vpx_write_bit_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) { vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_write_literal <S2SV_ModEnd> ( wb,",0
951,,0
952,"<S2SV_ModStart> ) ) { rb_check_res ( rb_res, rb_val ) ;",0
953,<S2SV_ModStart> ( args -> rmtvaluelen <S2SV_ModEnd> ) ; args ->,0
954,,0
955,,0
956,,0
957,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
958,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
959,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
960,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
961,<S2SV_ModStart> uint8 * buf ; size_t size ; size = 0 ; if ( size < 2 ) { ASSERT ( size + 1 ) ; if ( size < 0 ) { ASSERT ( buf + 1 ) ; ASSERT ( length < 2 ) ; return - 1 ; },0
962,"<S2SV_ModStart>, 1, <S2SV_ModEnd> ) ; }",0
963,,0
964,,0
965,,1
966,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( void ) MagickFalse ) MagickFalse ; void ( void ) MagickFalse ; if ( status == MagickFalse ) status = MagickFalse ; <S2SV_ModStart> ( input, MagickFalse ) { MagickFalse ; } status = MagickFalse ; status = MagickFalse ; status = MagickFalse ; <S2SV_ModStart> ( input, MagickFalse ) ; if ( status == MagickFalse ) MagickFalse ) { status = MagickFalse ; status = MagickFalse ; } status = MagickFalse ; MagickFalse ; status = MagickFalse ; status = MagickFalse ; MagickFalse ; } status = MagickFalse ; <S2SV_ModStart> ( status = MagickFalse ) MagickFalse ; status = MagickFalse ; status = MagickFalse ; MagickFalse ; } status = MagickFalse ; MagickFalse ; } status = MagickFalse ; status = MagickFalse ; MagickFalse ;",0
967,,0
968,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
969,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
970,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
971,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
972,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
973,,0
974,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
975,<S2SV_ModStart> ; msg -> msg_namelen = 0,0
976,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
977,<S2SV_ModStart> ; if (,0
978,,0
979,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
980,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ) { ND_PRINT ( ( ndo, "" <S2SV_ModEnd> ) ; return",0
981,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
982,"<S2SV_ModStart>, 1 ) <S2SV_ModEnd> ; if (",0
983,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; char,0
984,<S2SV_ModStart> ; buf = 0 <S2SV_ModEnd> ; if (,0
985,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
986,,0
987,<S2SV_ModStart> profile ) ; if ( s -> profile == VPX_PROFILE_PROFILE ) { avctx -> profile == VPX_PROFILE_MPEG4_PROFILE_MPEG4_PROFILE_MPEG4_MPEG4_PROFILE && s -> avctx -> avctx -> avctx -> avctx -> avctx -> profile == 8 ) { avctx -> profile = 0 ; } if ( s -> avctx -> avctx -> profile == avctx -> profile ) { avctx -> profile = 0 ; <S2SV_ModStart> profile!= 8 ) { avctx -> profile = AVERROR_INVALIDDATA ;,0
988,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
989,,0
990,<S2SV_ModStart> ( buf + 1 <S2SV_ModEnd> ) { if,0
991,<S2SV_ModStart> i -> width + 4 <S2SV_ModEnd> ) { if,0
992,<S2SV_ModStart> 0 ) ; if ( nelements < 0 ) goto out ;,0
993,,0
994,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> break ; } if ( len <S2SV_null> <S2SV_null> static <S2SV_ModStart> } else { if ( len <S2S2SV_null> <S2SV_null>= '\\n"" ) { return ; } <S2SV_ModStart> break ; } strncpy ( str, len, len, len, len ) ; <S2SV_ModStart> } else { if ( len <S2SV_null> <S2S2SV_null> <S2SV_null>",0
995,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
996,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
997,,1
998,<S2SV_ModStart> -> bp_data ; if ( i_data_size < 0 ) goto out_size ; <S2SV_ModStart> inode ) { <S2SV_ModEnd> if ( err <S2SV_ModStart> inode ) { err = - EINVAL ; goto out_data_size ; },0
999,<S2SV_ModStart> { if (,0
1000,<S2SV_ModStart> if ( ent == NULL <S2SV_ModEnd> ) { struct,0
1001,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1002,"<S2SV_ModStart> ) return ; if ( psf_allocate ( psf, psf -> header. count ) ) return 0 ;",0
1003,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1004,,0
1005,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows ) ;",0
1006,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
1007,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> UINT64_MAX_MAX_MAX ; uint8_t * pkt_len = WTAP_MAX_PACKET_SIZE ; uint8_t * pkt_len = WTAP_ERRBUILD_SIZE ; uint8_t * pkt_len = WTAP_ERRBUFALSE ; uint8_t * pkt_len = WTAP_SIZE ; uint8_t * pkt_len = WTAP_MAX ; * pkt_len = WTAP_ERRBUILD_SIZE ; * pkt_len = WTAP_SIZE ( pkt_len, WTAP_SIZE, WTAP_SIZE, WTAP_ERRBUFALSE, WTAP_SIZE, WTAP_SIZE, WTAP_SIZE, WTAP_SIZE ) ; if ( pkt_len < WTAP_ERR_SIZE ) { WARN_ERR_ERRBUFALSE ; break ; } if ( pkt_len < WTAP_ERR_ERR_ERR_FALSE ) { WARN_ERR",0
1008,<S2SV_ModStart> ; u32 len <S2SV_ModEnd> ; if (,0
1009,<S2SV_ModStart> 0 ; } <S2SV_ModEnd> var_hash_dtor ( &,0
1010,,0
1011,<S2SV_ModStart> ret = 1 <S2SV_ModEnd> ; if (,0
1012,<S2SV_ModStart> p -> len = 0,0
1013,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> VP9_HIGHBITSV_8x8x8x8x8x8x8x8x8x8x8x8x8_8_8x8x8x8x8x8x8x8x8x8 ( vpx_8x8x8x8x8x8x8x8x8 ( vpx_8x8x8x8x8x8x8x8x8x8x8x8x8x8x8 ( v12, vpx_8x8x8x8x8x8x8x8x8x8 ) ; switch ( vpx_8x8x8x8x8x8x8x8x8 ) { switch ( vpx_8x8x8x8x8x8x8x8x8 ) { switch ( vpx_8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x",0
1014,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1015,,0
1016,,0
1017,"<S2SV_ModStart> ( key, EINVAL <S2SV_ModEnd>, NULL,",0
1018,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1019,,0
1020,"<S2SV_ModStart> ; if ( j < 0 ) return error ( f, VORBIS_invalid_setup ) ; if ( j < 0 ) return error ( f, VORBIS_invalid_setup ) ; if ( j < 0 ) return error ( f, VORBIS_invalid_invalid_setup ) ; if ( f, VORBIS_invalid_invalid_setup ) return error ( f, VORBIS_invalid_invalid_setup ) ; if ( j < 0 ) return error ( f, VORBIS_invalid_invalid_invalid_setup ) ; if ( f, VORBIS_invalid_invalid_invalid_invalid_setup ) return error ( f, VORBIS_invalid_invalid_invalid_invalid_setup ) ;",0
1021,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> if (!,0
1022,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1023,<S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if ( flags & ENODE_HIGHBITDEPTH ) goto out_buf <S2SV_ModEnd> ; if (,0
1024,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
1025,"<S2SV_ModStart> ( psf, count ) <S2SV_ModEnd> ; if (",0
1026,,0
1027,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( req,",0
1028,,0
1029,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1030,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
1031,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null>,0
1032,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
1033,,0
1034,,0
1035,,0
1036,<S2SV_ModStart> = 0 ;,0
1037,<S2SV_ModStart> -> uid ; spin_lock_irq ( & ucounts -> count <S2SV_ModEnd> ) ; spin_irq,0
1038,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
1039,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1040,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1041,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
1042,"<S2SV_ModStart> * fmode, fmode_t fmode, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> ( fmode, fmode, fmode, fmode, fmode, fmode <S2SV_ModEnd> ) { fmode",0
1043,"<S2SV_ModStart>, image ) \\\n{ <S2SV_ModEnd> if ( image",0
1044,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1045,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1046,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> MACROBLOCK_TX_SIZE bsize_t <S2SV_ModEnd> * const tran_low_t <S2SV_ModStart> int bd ; const uint8_t * const uint8_t * const uint8_t * const uint8_t * sse = xd -> plane [ 0 ] ; MACROBLOCK_TX_SIZE bsse = 0 ; int64_diff = 0 ; int64_t * const uint8_t * const uint8_t * const uint8_t * sse = 0 ; int64_t * sse ; int64_t * src_diff = 0 ; int64_diff = 0 ; const uint8_t * src_t * sse ; int64_t * sse = 0 ; int64_t * sse = 0 ; int64_diff = 0 ; int64_t * sse ; int64_t * sse = 0 ; int64_diff = 0 ; int64_diff = 0 ; uint16_t * sse ; int64_t * sse = 0 ; int64_,0
1047,<S2SV_ModStart> ( pmd ) <S2SV_ModEnd> ; if (,0
1048,"<S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd> ) ) ;",0
1049,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1050,"<S2SV_ModStart> * seg, vpx_reader <S2SV_ModEnd> * r )",0
1051,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
1052,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> if ( struct ld_desc_desc_desc_t <S2SV_ModEnd> ) { struct <S2SV_ModStart> return 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> return - ENOMEM ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) return - ENOMEM ; <S2SV_ModEnd> if (!,0
1053,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dest_ptr1,",0
1054,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct <S2SV_ModEnd> struct sctp_system_user_user ( struct <S2SV_ModStart> -> sctp_user_user_addr ; struct sctxt ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ) goto out ; } <S2SV_ModEnd> if (! <S2SV_ModStart> -> opt ) { <S2SV_ModEnd> if (! <S2SV_ModStart> -> sctxt -> opt ) { rcu_read_user_user_user_user ( daddr ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> & fl6 ) { rcu_read_user ( daddr ) ; goto out ; },0
1055,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1056,<S2SV_ModStart> ) ) ; free ( buf ) ;,0
1057,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( client,0
1058,"<S2SV_ModStart> ( ndo, 0 <S2SV_ModEnd> ) ; if",0
1059,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> skb ( void <S2SV_ModStart> ( interface, KSZ8851_TX_TX_MAC_TX_TX_SIZE, KSZ8851_TX_TX_SIZE, KSZ8851_TX_TX_MASK <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_TX_TX_MAK <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, KSZERO, KSZ8851_TX_TX_MAH <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZERO, KSZERO ) ; }",0
1060,,0
1061,<S2SV_ModStart> } if (,0
1062,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
1063,<S2SV_ModStart> void ) ; <S2SV_ModEnd> void ) ;,0
1064,"<S2SV_ModStart> * x2, u2, x2, x2, xd_size, xd_t x2, xd_y <S2SV_ModEnd> ) ; if",0
1065,<S2SV_ModStart> clips_ptr ) { ret = <S2SV_ModEnd> clips ; },0
1066,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1067,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1068,,0
1069,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; int <S2SV_ModStart> = 1 ; size_t len = 0 ; <S2SV_ModStart> ( output_size, ""%s: <S2SV_blank> %d, <S2SV_blank> %d <S2SV_blank> %u, <S2SV_blank> %d, <S2SV_blank> %d, <S2SV_blank> %d, <S2SV_blank> %d, <S2SV_blank> %d, <S2SV_blank> %d, <S2SV_blank> %d, <S2SV_blank> %d, <S2SV_blank> %d)\\n"", output_free ( argv ) ) ; return 1 ; } if ( out < 0 ) { free ( fd ) ; return 1 ; }",0
1070,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1071,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1072,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1073,,0
1074,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1075,<S2SV_ModStart> vpx_codec_alg_priv_priv_t * priv <S2SV_ModEnd> ; priv -> <S2SV_ModStart> -> priv ; priv -> priv = NULL ; priv -> priv -> priv -> priv. priv <S2SV_ModEnd> = NULL ; <S2SV_ModStart> -> priv -> priv <S2SV_ModEnd> = NULL ; priv,0
1076,<S2SV_ModStart> ; if (! xfs_inode_fdmtvaluelen <S2SV_ModEnd> ) { err,0
1077,,0
1078,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return - EINVAL,0
1079,<S2SV_ModStart> { memset <S2SV_ModEnd> ( ctx ->,0
1080,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1081,<S2SV_ModStart> * bsize ; if ( len < sizeof ( struct usb_length ) ) { ret = - EINVAL ; goto trunc ; },0
1082,<S2SV_ModStart> ) ; },0
1083,<S2SV_ModStart> ; if ( iinfo -> i_len > i_info -> i_data_size ) goto out_info ; if (,0
1084,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC28J60_MICMD <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MICMD <S2SV_ModEnd> ) ; }",0
1085,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1086,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null>,0
1087,"<S2SV_ModStart> int len ; if ( len < 0 ) goto out ; <S2SV_ModStart> break ; } if ( bp == 0 ) goto out ; <S2SV_ModStart> break ; } else { if ( bp == 0 ) goto out ; <S2SV_ModStart> break ; } if ( bp == 0 ) goto out ; } <S2SV_ModEnd> ; } else <S2SV_ModStart> break ; } if ( bp == 0 ) goto out ; <S2SV_ModStart> break ; } else { bp = bp = 0 ; } else { if ( bp == '\\n"" ) goto out ; } <S2SV_ModStart> break ; } else { if ( bp = 0 ; } if ( bp == 0 ) goto out ; } else { if ( bp = 0 ; } if (! bp == 0 ) goto out ; } if (! bp = bp = 0 ; } if (! bp == 0 ) goto out ; } else { bp = 0 ; } else { if (! bp = 0 ) goto out ; } <S2SV_ModStart> break ; } else { bp = 0 ; } else { if (! bp == 0 ) goto out = - 1 ; } if ( bp = 0 ; } if (! bp == 0 ) goto out = 0 ; } if ( b",0
1088,,0
1089,<S2SV_ModStart> ) ; },0
1090,,0
1091,,0
1092,"<S2SV_ModStart> ; if ( osStrchr <S2SV_ModEnd> ( token,",0
1093,<S2SV_ModStart> += 4 <S2SV_ModEnd> ; if (,0
1094,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1095,<S2SV_ModStart> ( page ) <S2SV_ModEnd> ; if (,0
1096,,0
1097,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1098,<S2SV_ModStart> ; ret = 0 <S2SV_ModEnd> ; if (,0
1099,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> if (!,0
1100,<S2SV_ModStart> p_header ) ; <S2SV_ModEnd> if ( p,0
1101,<S2SV_ModStart> ) ; },0
1102,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1103,<S2SV_ModStart> * buf ; size_t len = 0 ; <S2SV_ModStart> 0 ) ; if ( len < 0 ) { <S2SV_ModStart> 0 ) ; },0
1104,<S2SV_ModStart> ; if ( iinfo -> i_len > i_info -> i_data_size ) goto out_info ; if (,0
1105,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1106,"<S2SV_ModStart> ; memset <S2SV_ModEnd> ( src,",0
1107,,0
1108,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1109,"<S2SV_ModStart>, & old_data, sizeof ( ctxt ) <S2SV_ModEnd> ) ) ;",0
1110,,0
1111,,0
1112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> unsigned char * <S2SV_ModStart> int mi_y_y_y_y_stride, int motion_y_y_y_y_y, int motion_y_y_y_y, int motion_y_y, int motion_y_y_y_y_y, int motion_y_y, int motion_y_y_y_y, int motion_y_y_y_y, int motion_y_y_y_y_y_y_y, int motion_y_y_y, int motion_y_y_y, unsigned int motion_y, int motion_y_y ; unsigned int motion_y_y_y_y = 0 ; unsigned int motion_y_y_y = 0 ; unsigned int motion_y_y_y_y ; unsigned int motion_y_y = 0 ; unsigned int motion_y_y_y_y_y_y_y_y_y_y = 0 ; unsigned int motion_y_y_y_y_y",0
1113,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1114,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, NULL",0
1115,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
1116,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1117,,0
1118,<S2SV_ModStart> ) { struct mb2_cache_block ( inode <S2SV_ModEnd> ) ; },0
1119,<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp.,0
1120,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1121,"<S2SV_ModStart> { posix_acl_update_mode ( inode <S2SV_ModEnd>, & acl )",0
1122,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1123,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1124,<S2SV_ModStart> ; len = 0 <S2SV_ModEnd> ; if (,0
1125,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1126,,0
1127,<S2SV_ModStart> AcquireQuantumMemory ( size_t ) <S2SV_ModEnd> ) ; if,0
1128,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1129,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
1130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1131,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1132,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1133,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1134,<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> VP9_COMMON <S2SV_ModStart> VP9_CODEC_COMMON * const VP9_COMMON * const <S2SV_ModEnd> ; if (,0
1135,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1136,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> intra_block_block ( VP9_COMMON <S2SV_ModStart> intra_HIGHBITDEPTH if ( xd_high_8x8x8x8x8x8x8x8x8x8x8x8x8_high_high_8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8_high_t <S2SV_ModEnd> ( xd, <S2SV_ModStart> } else { vp9_highbd_8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8 <S2SV_ModEnd> ( xd, <S2SV_ModStart> } else { vp9_highbd_8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8",0
1137,<S2SV_ModStart> ) ) ; if (!,0
1138,"<S2SV_ModStart> src ) { memcpy <S2SV_ModEnd> ( src,",0
1139,<S2SV_ModStart> = 0 ;,0
1140,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1141,,0
1142,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; } <S2SV_null>,0
1143,,0
1144,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
1145,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1146,,0
1147,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1148,"<S2SV_ModStart> -> bsi_verify_ioctl <S2SV_ModEnd> ( dev,",0
1149,,0
1150,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; if (,0
1151,,0
1152,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1153,,0
1154,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1155,<S2SV_ModStart> ; if ( <S2SV_ModEnd> len < 0,0
1156,<S2SV_ModStart> ) ; } mutt_socket_empty ( adata -> conn ) ;,0
1157,<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp.,0
1158,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1159,"<S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( b,",0
1160,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1161,"<S2SV_ModStart>, & rlen, 0",1
1162,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> if ( priv,0
1163,<S2SV_ModStart> ; if ( safe_mount <S2SV_ModEnd> ( mnt ->,0
1164,"<S2SV_ModStart>, 1, <S2SV_ModEnd> ) ; } if",0
1165,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1166,"<S2SV_ModStart>, jas_uchar <S2SV_ModEnd> ; if (",0
1167,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1168,,0
1169,<S2SV_ModStart> int i ; jas_uchar <S2SV_ModEnd> buf [ 0,0
1170,,0
1171,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
1172,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1173,,1
1174,,0
1175,,0
1176,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1177,<S2SV_ModStart> - ENODE_TR <S2SV_ModEnd> ; if (,0
1178,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, p",0
1179,"<S2SV_ModStart> obj ) { jas_uchar <S2SV_ModEnd> ( obj,",0
1180,"<S2SV_ModStart> char * sig = NULL <S2SV_ModEnd> ; if ( <S2SV_ModStart> if (! authctxt -> valid || authctxt -> user == NULL || authctxt -> user == NULL ) { debug2 ( ""%s"", __func__, __func__, __func__, __func__ ) ; goto done <S2SV_ModEnd> ; } if",0
1181,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1182,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1183,"<S2SV_ModStart>, regs, false",0
1184,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1185,<S2SV_ModStart> ( sb ) <S2SV_ModEnd> ; if (,0
1186,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1187,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
1188,<S2SV_ModStart> * x ; jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_t,0
1189,<S2SV_ModStart> ; if (,0
1190,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1191,"<S2SV_ModStart> int i ; memset ( & xdr, 0, 0, sizeof ( * xdr ) ) <S2SV_ModEnd> ; if (",0
1192,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; } <S2SV_null>,0
1193,,0
1194,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;",0
1195,<S2SV_ModStart> ; if ( count > OE_SSIZE_MAX ) { ret = - EINVAL ; } if (,0
1196,<S2SV_ModStart> inode ) { struct dentry_inode * inode = 0 ; <S2SV_ModStart> dentry ) ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> dentry ) ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> dentry ) ; <S2SV_ModEnd> return err ;,0
1197,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1198,<S2SV_ModStart> * ptr ; if ( size!= NULL ) return NULL ;,0
1199,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1200,<S2SV_ModStart> i -> width + 4 <S2SV_ModEnd> ) { if,0
1201,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
1202,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1203,,1
1204,<S2SV_ModStart> ( page ) <S2SV_ModEnd> ; if (,0
1205,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
1206,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1207,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1208,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1209,<S2SV_ModStart> ) ; },0
1210,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1211,<S2SV_ModStart> ; i += 1 <S2SV_ModEnd> ; if (,0
1212,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> ) ; }",0
1213,"<S2SV_ModStart> str ) { if ( strlen ( strlen ( str, '\\0' ) ) == '\\0' ) { return - 1 ; } <S2SV_ModStart> str ; } <S2SV_ModEnd> str = strlen ( p <S2SV_ModStart> str, '\\0' <S2SV_ModEnd> ) ; }",0
1214,"<S2SV_ModStart> src ) { memcpy <S2SV_ModEnd> ( src,",0
1215,<S2SV_ModStart> ) return ; <S2SV_ModEnd> if ( c,0
1216,"<S2SV_ModStart> char * data, NULL <S2SV_ModEnd> ) { if",0
1217,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row, VP9_COMMON * mi_col ; MACROBLOCKD * const xd = & cpi -> mi_col ; MACROBLOCKD * const xd -> mi_row = & cpi -> mi_col ; MACROBLOCKD * const xd -> mi_row ; MACROBLOCKD * const xd = & cpi -> mi_col ; MACROBLOCKD * const x -> mi_col ; MACROBLOCKD * const x -> mi_row = & cpi -> mi_col ; MACROBLOCKD * const xd -> mi_row = & cpi -> mi_row, xd -> mi_row, mi_row, mi_row, mi_col ) ; <S2SV_ModStart> mi_col ) { vp9_row = xd -> mi_col ; <S2SV_ModStart> mi_col ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_X8X8X8X8X8X8X8X8",0
1218,"<S2SV_ModStart> u_int len ; u_int len ; u_int <S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
1219,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1220,"<S2SV_ModStart> ; decoder -> codec_interface <S2SV_ModEnd> ( ),",0
1221,,0
1222,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
1223,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1224,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1225,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1226,"<S2SV_ModStart> - ENOMEM ; memset ( env, 0, 0 ) ;",0
1227,<S2SV_ModStart> sk ) { sctp_frag <S2SV_ModEnd> ( skb ) <S2SV_ModStart> sock_frag ) { sctp_frag ( skb ) ; sctp_each ( skb ) { sctp_frag ( skb ) { sctp_free_frag ( skb ) ; sctp_skb_frag ( skb ) { sctp_frag ( skb ) ; } sctp_frag ( skb ) { sctp_frag ( skb ) { sctp_free_frag ( skb ) ; sctp_frag ( skb ) { sctp_frag ( skb ) ; } sctp_free_frag ( skb ) { sctp_frag ( skb ) ; sctp_frag ( skb ) { sctp_frag ( skb ) ; sctp_free_frag ( skb ) ; sctp_frag ( skb ) ; sctp_frag ( newsk ( skb ) { sctp_frag ( skb ) ; sctp_frag (,0
1228,"<S2SV_ModStart> } d = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0, 0 )",0
1229,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) return - 1 <S2SV_ModEnd> ; if (,0
1230,<S2SV_ModStart> ctx ) ; <S2SV_ModEnd> return NULL ;,0
1231,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1232,<S2SV_ModStart> group ) ; <S2SV_ModEnd> return ret ;,0
1233,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1234,"<S2SV_ModStart> = 0 ; status = SetImageExtent ( image, image ) ; <S2SV_ModStart> ) ; } status = SetImageExtent ( image ) ;",0
1235,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( ps_stream ->,0
1236,,0
1237,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1238,<S2SV_ModStart> * buf = 0 <S2SV_ModEnd> ; if (,0
1239,,0
1240,<S2SV_ModStart> ) return - 1 <S2SV_ModEnd> ; if (,0
1241,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1242,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1243,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1244,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1245,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode",0
1246,<S2SV_ModStart> ) goto done <S2SV_ModEnd> ; if (,0
1247,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1248,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1249,"<S2SV_ModStart> if (! js_doregexec ( J, <S2SV_ModEnd> re -> prog",1
1250,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
1251,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
1252,,0
1253,,0
1254,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1255,,0
1256,<S2SV_ModStart> MA ) ; <S2SV_ModEnd> return - 1,0
1257,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
1258,<S2SV_ModStart> ; if ( intr_info <S2SV_ModEnd> ) return 0,0
1259,,0
1260,"<S2SV_ModStart>, u32 <S2SV_ModEnd> ; if (",0
1261,,0
1262,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1263,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) ; rcu_read_unlock ( <S2SV_ModEnd> ) ; rcu_unlock",0
1264,<S2SV_ModStart> entry ) ; <S2SV_ModEnd> } if (,0
1265,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1266,<S2SV_ModStart> { MATLAB_KO : clone_info = ( clone_info ) ;,0
1267,<S2SV_ModStart>,0
1268,"<S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1269,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bn_t <S2SV_ModStart> 8 ) { switch ( result ) { case RLC_OK ; case RLC_OK ; case RLC_OK : bn_len = RLC_OK ; case RLC_OK : bn_zero ( bn_len ) ; case RLC_OK : bn_zero ( bn_len ) ; case RLC_ERR : bn_len = 0 ; case RLC_OK : bn_len = 0 ; bn_len = 0 ; bn_zero ( bn_len ) ; bn_len = 0 ; bn_zero ( bn_len ) ; bn_len = 0 ; bn_len = 0 ; <S2SV_ModStart> 8 ) ; bn_mod ( bn_t ) ; bn_len = 0 ; bn_len = 0 ; bn_len = 0 ; <S2SV_ModStart> 8 ) ; bn_mod ( bn_len ) ; bn_len = RLC_OK <S2SV_ModEnd> 8 ) ; <S2SV_ModStart> 8 ) { <S2SV_ModStart> 8 ) ; bn_,0
1270,"<S2SV_ModStart> r ) { if ( obj_ptr == NULL ) { yr_object_object_object_object_object_free ( obj, & yr_object_object ) ; obj_object_free ( obj_free ) ; } result = obj_free ( obj_free ) ; obj_free ( obj_object ) ; } result = obj_free ( o, obj_object_object_free ) ; obj_object_free ( obj2, obj2 ) ; obj_free ( obj_free ) ; result == NULL ) { obj2 ( obj2 == NULL ) ; } result = obj_object_object_object_object_object_object_object_object_object_object_object ( obj2, obj2, NULL ) ; obj_free ( obj_free ) ; } result = obj_free ( obj2, obj_free ) ; obj2 ( obj2 == NULL ) ; obj_object_object_object_free ( obj, obj_object_free ) ; obj2 == NULL ) { yr_object ( obj2 ) ; } } } result = obj_free ( obj_free ( obj2 == NULL ) ; obj_free ( obj2 == NULL ) ;",0
1271,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1272,<S2SV_ModStart> { rqs -> rqs [ <S2SV_ModEnd> off + bit,0
1273,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ;,0
1274,"<S2SV_ModStart> * cm, vpx_writer <S2SV_ModEnd> * w )",0
1275,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1276,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static memset <S2SV_ModEnd> ( xd, <S2SV_ModStart> xd ) ; memset <S2SV_ModEnd> ( xd ->",0
1277,<S2SV_ModStart> ) ; } hdr -> hdr. hdr = NULL ;,0
1278,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
1279,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
1280,<S2SV_ModStart> ; int err = <S2SV_ModEnd> ; if (,0
1281,<S2SV_ModStart> ( TEMP_FAILURE_RETRY (,0
1282,<S2SV_ModStart> = 0 ;,0
1283,,0
1284,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ;,0
1285,"<S2SV_ModStart> int mptctl_eventreport ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_ioctl_eventreport ( ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
1286,"<S2SV_ModStart> ( L, L, 0",0
1287,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1288,"<S2SV_ModStart> ) AcquireQuantumMemory ( image -> columns, image -> rows ) ;",0
1289,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, uint8_t <S2SV_ModStart> char * buf <S2SV_ModEnd> ) { int <S2SV_ModStart> ( buf, sizeof ( ctx ) <S2SV_ModEnd> ) ; }",0
1290,,0
1291,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1292,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> null> <S2SV_null>,0
1293,<S2SV_ModStart> } else { <S2SV_ModEnd> char *,0
1294,<S2SV_ModStart> block ) { memcpy <S2SV_ModEnd> ( & req,0
1295,<S2SV_ModStart> ( key ) <S2SV_ModEnd> ; if (,0
1296,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( buf_size, 8 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( CHECKOVERFLOW ( CHECKOVERFLOW ( CHECKOVERFLOW, buf_size, buf_size ) ) ) { exif_size = exif_size ( CHECKOVERFLOW ( CHECKOVERFLOW ( buf, ""Exif_size"" ) ) ; n -> entries [ tcount ]. entries [ tcount ]. entries [ tcount ]. order ) ; n -> entries [ tcount ] = exif_get_short ( n -> entries [ tcount ], n -> entries [ tcount ]. order ) ; n -> entries [ tcount ]. o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + n -> entries [ tcount ]. entries [ tcount ]. order ) ; n -> entries [ tcount ]. entries [ tcount ] ; n -> entries [ tcount ] ; n -> entries [ tcount ].",0
1297,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; if,0
1298,,0
1299,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> d_null>,0
1300,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1301,<S2SV_ModStart> 1 ; } if ( len < 1 ) return - 1 ;,0
1302,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1303,"<S2SV_ModStart> { memset <S2SV_ModEnd> ( ndo,",0
1304,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1305,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( data",0
1306,,0
1307,"<S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT",0
1308,<S2SV_ModStart> ( image ) <S2SV_ModEnd> ; if (,0
1309,<S2SV_ModStart> { ret = - 1,0
1310,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1311,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> ) ; }",0
1312,<S2SV_ModStart> ( args ) <S2SV_ModEnd> ; if (,0
1313,"<S2SV_ModStart> * p, size_t i, <S2SV_ModStart> out ) { if (! strlen ( p ) ) { print_free ( p ) ) ; p = ensure ( p, p ) ; if (! out ) { if ( p ) return 0 ; } <S2SV_ModStart> print_malloc ( p, 2 ) ; if (! out ) { if ( p ) return 0 ; } else { out = ensure ( p, 2 ) ; } else { if ( p ) { out = ensure ( p ) ; } else { out = ensure ( p ) ; if (! out ) return 0 ; } if ( p ) { out = ensure ( p ) ; } <S2SV_ModEnd> print_free ( p, p ) ; } else { if ( p, p ) ; if ( p ) { out = ensure_free ( p ) ; } else { if ( p, p ) ; p ) { if (! out = ensure ( p ) ; p ) { out = ensure ( p, p ) ; if ( p ) { out = ensure ( p ) ; if ( p ) { out = ensure ( p ) ; p ) ; } <S2SV_ModStart> print_free ( p ) ; if (! out = ensure ( p ) ; if (",0
1314,,0
1315,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; if (,0
1316,<S2SV_ModStart> unsigned short ) <S2SV_ModEnd> buffer [ 0,0
1317,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n"" )",0
1318,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct <S2SV_ModEnd> io_context ( struct <S2SV_ModStart> -> task_context ; void * task <S2SV_ModEnd> ; struct task <S2SV_ModStart> -> io_context ; <S2SV_ModStart> -> io_context ; task_context = task_context ( task <S2SV_ModEnd> ) ; task,0
1319,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, NULL",0
1320,,0
1321,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> dev_null> <S2SV_null>,0
1322,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
1323,<S2SV_ModStart> -> fp ) ;,0
1324,,0
1325,<S2SV_ModStart> req ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1326,"<S2SV_ModStart> ; # line 63 <S2SV_ModEnd> ""grammar.y""grammar.c""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar",0
1327,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1328,"<S2SV_ModStart>, int ret ; int test_data = 0 ; <S2SV_ModStart>, MY_NO_NO_NO_NO_EXT ) ; if ( test -> data_data_size < 0 ) { ret = - 1 ; }",0
1329,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1330,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1331,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct sock_null>,0
1332,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> write_block_block_block ( EXT4_I ( EXT4_I ( EXT4_M ) <S2SV_ModEnd> ) ; if,0
1333,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1334,,0
1335,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; <S2SV_ModEnd> cnt ++ ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> cnt ++ ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ( ( <S2SV_ModStart> ] == '\\0' <S2SV_ModEnd> ) { if <S2SV_ModStart> 0' ; } <S2SV_ModEnd> if ( cp <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( cp <S2SV_ModStart> ) return - 1 ; <S2SV_ModStart> } if ( cp < 4 ) { if ( cp < 4 ) return - 1 ; <S2SV_ModStart> } if ( <S2SV_ModEnd> == '\\0',0
1336,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1338,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; char <S2SV_ModStart> ( pw, L_BUFSIZE <S2SV_ModEnd>, pw, <S2SV_ModStart> ( p ), L_BUFSIZE <S2SV_ModEnd>, ""%s: <S2SV_blank> %d\\n"", <S2SV_ModStart> ( p, L_BUFSIZE <S2SV_ModEnd>, p,",0
1339,,0
1340,"<S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( cpi,",0
1341,<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp.,0
1342,,0
1343,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1344,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int idx,0
1345,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> return 0 ;,0
1346,"<S2SV_ModStart> * data, size_t <S2SV_ModEnd> size, int",0
1347,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> ) ) ;",0
1348,<S2SV_ModStart> ; if ( len < 0 ) return - 1 ;,0
1349,<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd> ) ; if,0
1350,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1351,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1352,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1353,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> { if ( cpi -> bit_depth_depth_depth == VP9_COMP_COMP ) { if ( cpi -> bit_depth == VP9_COMP_BITS2S2SV_null> <S2SV_null>,0
1354,"<S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> ) ; if",0
1355,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1356,,0
1357,"<S2SV_ModStart> ; if ( CHILD ( CHILD ( n, i, i ) == TYPE_COMMENT ) { if ( CHILD ( CHILD ( CHILD ( CHILD ( n, i, i ) ) == TYPE_COMMENT ) ) { if ( CHILD ( n, i, i ) == TYPE_COMMENT ) == TYPE ( CHILD ( n, i ) ) ) { i += 1 ; } if ( CHILD ( CHILD ( CHILD ( n ) == TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) i += 1 ; i += 2 ; i += 2 ; i += 2 ; i ++ ; if ( CHILD ( n, i ) == TYPE ( CHILD ( CHILD ( n, i ) == TYPE ( CHILD ( n, i ) ) ) == TYPE ( CHILD ( n, i ) ) ) { if ( CHILD ( CHILD ( i ) == TYPE ( CHILD ( CHILD ( n, i ) ) == TYPE ( CHILD ( n, i ) ) == TYPE ( CHILD ( n, i ) ) ) ; i += 2 ; i += 1 ; i ; i += 1 ; i += 2 ; i += 1 ; i",0
1358,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> VP9_HIGHBITSV_HIGHBITS2SV_HIGHBITSV_BUFFER <S2SV_ModEnd> ) { int <S2SV_ModStart> int y_stride ; memset <S2SV_ModEnd> ( y_stride, <S2SV_ModStart> 8 ) ; memset <S2SV_ModEnd> ( xd, <S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( xd, <S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( y_stride, <S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( y_stride,",0
1359,,0
1360,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1361,,0
1362,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> break ; },0
1363,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int ion_handle = <S2SV_ModStart> ; mutex_unlock ( handle <S2SV_ModEnd> ) ; mutex_unlock,0
1364,"<S2SV_ModStart> int wb, vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_write_bit <S2SV_ModEnd> ( wb,",0
1365,"<S2SV_ModStart>, unsigned char * argv <S2SV_ModEnd> ) { case <S2SV_ModStart> break ; case '0' : case '0' : case '0' : case '0' : case '0' : case '0' : case '0' : break ; case '0' : case '0' : case '0' : case '0' : case '0' : case '0' : case '0' : case '0' : case '0' : case '0' : case '0' : case 'u' : case 'u' : case 'i' : case '0' : case 'u' : case 'u' : case 'u' : case 'i' : case 'i' : case 'i' : case 'u' : case 'u' : case 'u' : case 'u' : case 'u' : case 'u' : case 'u' : case 'u' : case 'u' : case 'u' : case 'u' : case 'i' : case 'u' : case 'u' : case 'u' : case 'u' : case 'u' : case 'u' : case 'u' : case 'u",0
1366,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
1367,<S2SV_ModStart> ; i += 1 <S2SV_ModEnd> ; if (,0
1368,<S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( x -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( x ->,0
1369,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> ENC624J600_OK <S2SV_ModEnd> ( interface, ENC624J600_OK ) <S2SV_ModStart> ( interface, ENC624J600_ECON1, ENC624J600_ECON1, ENC624J600_TXB ( interface, ENC624J600_OK ) ; <S2SV_ModStart> ( interface, ENC624J600_ECON1, ENC624J600_ECON1, ENC624J600_ECON1, ENC624J600_ECON1 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_TXSB <S2SV_ModEnd> ) { uint8_t <S2SV_ModStart> ( interface, ENC624J600_t <S2SV_ModEnd>, ENC624J600_TXB ( <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_OK <S2SV_ModEnd>, ENC624J600_TXB ( <S2SV_ModStart> ( interface, ENC624J600_RDPX",0
1370,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> } if (,0
1371,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1372,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1373,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> v_start ( struct <S2SV_ModStart> -> vm_start ; struct vpgoff_start = vma_start_start ( <S2SV_ModEnd> -> vm_start ;,0
1374,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
1375,<S2SV_ModStart> * state ; if ( state == 0 ) return 0 ;,0
1376,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, regs",0
1377,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1378,<S2SV_ModStart> size_t err ; err = - EINVAL ; goto out_release ( & rollover ) ;,0
1379,<S2SV_ModStart> event ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1380,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = ( ( ( ( ( void ) <S2SV_ModEnd> stride ) <S2SV_ModStart> char * ) <S2SV_ModEnd> char * <S2SV_ModStart> { if ( ( ( ( ( ( len - 1 ) ) <S2SV_ModEnd> u32_t len - 1 <S2SV_ModStart> ) return - 1 ; <S2SV_ModEnd> char * <S2SV_ModStart> + 1 ; if ( ( ( ( len < 0 ) ) return - 1 ; <S2SV_ModStart> + 1 ; if ( ( ( ( ( len < 0 ) ) return - 1 ; <S2SV_ModStart> + 1 ; } <S2SV_ModEnd> return 0 ;,0
1381,,0
1382,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } if (,0
1383,,0
1384,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, ENC1SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, ENC624J600_TXS2SV_null> 0 <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, KSZ8851_TX_TX_TX_PARAM <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_R_R_R_R_R_PARAM_TX_PARAM <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC624J600_TXB ( interface, KSZ8851_IS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_TX_TX_ERX <S2SV_ModEnd> ) ; }",0
1385,"<S2SV_ModStart>, annotation, NULL, true",0
1386,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1387,<S2SV_ModStart> return - EACCES,0
1388,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1389,<S2SV_ModStart> + 1 ; if ( len < 0 ) { return - 1 ; },0
1390,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1391,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> if ( buf ) { int ret = - EINVAL ; <S2SV_ModStart> if (! buf ) { int ret = - EINVAL ; goto out_free ; } <S2SV_ModStart> - EINVAL ; } <S2SV_ModEnd> if ( buf <S2SV_ModStart> - EINVAL ; } <S2SV_ModStart> - EINVAL ; } <S2SV_ModEnd> if ( buf,0
1392,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( index,0
1393,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } < 0,0
1394,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1395,"<S2SV_ModStart> int i ; jas_uchar <S2SV_ModEnd> ( opts, <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { jas_uchar <S2SV_ModEnd> ( opts,",0
1396,,0
1397,<S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; if (,0
1398,"<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( ndo,",0
1399,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
1400,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1401,,0
1402,,0
1403,<S2SV_ModStart> (! handle ||! SecIsValidHandle ( handle ),1
1404,,0
1405,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
1406,"<S2SV_ModStart>, 0 ) <S2SV_ModEnd> ; if (",0
1407,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1408,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0,0
1409,,0
1410,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1411,<S2SV_ModStart> ( dev ) <S2SV_ModEnd> ; dev ->,0
1412,,0
1413,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, number_filled",0
1414,,0
1415,"<S2SV_ModStart> if ( fa ) { xfs_to_dinode_dinode_fork ( dip, XFS_FORK ) ; return fa ; } if ( fa ) { return fa ; } fa = fa ; } if ( fa ) { fa = fa ; return fa ; } if ( fa ) return fa ; } else { fa = fa = fa ; } if ( fa ) return fa ; } else { fa = fa ; } fa = fa ; } if ( fa ) return fa = fa ; } if ( fa ) return fa ; } else { fa = fa ; } else { fa = fa = fa ; } if ( fa ) { fa = fa = fa ; } fa = fa = fa ; fa ; fa = fa ; fa = fa ; fa ; fa = fa = fa ; return fa ; } else { fa ; } if ( fa = fa ) { fa = fa = fa ; } fa = fa ; fa = fa ; fa = fa = fa ; fa ; fa ; fa = fa = fa ; fa ; fa = fa ; fa ; fa = fa = fa ; fa = fa ; fa = fa = fa ; } if ( fa ) { fa ; fa = fa = fa ; fa = fa",0
1416,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( ctx ->,0
1417,<S2SV_ModStart> ) ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
1418,<S2SV_ModStart> perf_event * event <S2SV_ModEnd> ; if (,0
1419,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct <S2SV_ModStart> length ) { ND_TCHECK_TCHECK_16BITS ( tptr ) ; <S2SV_ModStart> length ) ; ND_TCHECK_TCHECK_16BITS ( tptr, length ) ; <S2SV_ModStart> len ) ; ND_TCHECK_16BITS ( tptr + 1 ) ; <S2SV_ModStart> case BGP_TCHECK_16BITS ( tptr + 4 ) ; ND_TCHECK_TCHECK_16BITS ( tptr + 1 ) ; if ( tlen!= sizeof ( tptr ) ) goto trunc ; <S2SV_ModStart> case BGP_16BITS ( tptr + 4 ) goto trunc ; if ( tlen!= sizeof ( tptr + 4 ) ) goto trunc <S2SV_ModEnd> ; ND_TCHECK_TCHECK_TCHECK_16BITS ( <S2SV_ModStart> case BGP_16BITS ( tptr + 4 ) ) goto trunc ;",0
1420,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1421,,0
1422,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ;,0
1423,<S2SV_ModStart> int n = 0 <S2SV_ModEnd> ; if (,0
1424,"<S2SV_ModStart>, buf, size_t len <S2SV_ModEnd> ) ; if",0
1425,<S2SV_ModStart> } } } <S2SV_ModEnd> } if (,0
1426,,0
1427,,0
1428,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1429,<S2SV_ModStart> -> eip ; <S2SV_ModEnd> if ( ctxt,0
1430,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
1431,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; dev ->,0
1432,"<S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( cpi,",0
1433,"<S2SV_ModStart> ( interface, ENC624J600_MAADRX <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 ) { <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; }",0
1434,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vlen ( int <S2SV_ModStart> psf ) { int <S2SV_ModEnd> psf_put ( psf,0
1435,<S2SV_ModStart> ( e <S2SV_ModEnd> ) || (,0
1436,<S2SV_ModStart>,0
1437,<S2SV_ModStart> ) return <S2SV_ModEnd> ; if (,0
1438,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> intra_cols ( VP9_COMP <S2SV_ModStart> intra_key ; const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * cpi <S2SV_ModEnd> ; VP9_COMMON <S2SV_ModStart> ; const VP9_COMMON * const VP9_COMMON * const VP9_HIGHBITDEPTH_HIGHBITDEPTH if ( cpi -> frame_key == KEY_FRAME ) { VP9_HIGHBITDEPTH if ( cpi -> flags & cpi -> frame_key == KEY_FRAME ) { VP9_HIGHBITDEPTH if ( cpi -> frame_key == VP9_HIGHBITDEPTH ) { VP9_HIGHBITDEPTH_HIGHBITDEPTH if ( cpi -> frame_key == KEY_key == KEY_FRAME ) { VP9_HIGHBITDEPTH_HIGHBITDEPTH if ( cpi -> flags & cpi -> flags & cpi -> flags & cpi -> flags & cpi ->,0
1439,<S2SV_ModStart> = 0 ;,0
1440,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1441,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ),0
1442,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1443,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1444,"<S2SV_ModStart> char * name, string type_comment <S2SV_ModStart> ; if (! type_comment ) { if (! type_comment ) { type_comment = CHILD ( CHILD ( n, ""Invalid <S2SV_blank> comment"" ) ; break ; } if (! type_comment ) { type_comment = CHILD ( n, ""Invalid <S2SV_blank> comment"" ) ; break ; } if (! type_comment ) { if (! type_comment ) { Py_COMMENT ( CHILD ( n, ""Invalid <S2SV_blank> comment"" ) ; goto failed ; } if (! type_comment ) { type_comment = NULL ; } if (! type_comment ) { if (! type_comment ) { type_comment = NULL ; break ; } } if (! type_comment (! type_comment, type_comment ) ; } if (! type_comment ) { type_comment = CHILD ( CHILD ( n, type_COMMENT ) ; break ; } if (! type_comment ) { if (! type_comment ) { type_comment = CHILD ( CHILD (! type_COMMENT ) ; break ; } if (! type_comment ) ; } if (! type_comment ) {",0
1445,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1446,<S2SV_ModStart> perf_event * event <S2SV_ModEnd> ; if (,0
1447,<S2SV_ModStart> ; if ( mask & KADM5_BADM5_BADM5_MASK ) return KADM5_MASK ; if ( ( mask & mask & mask & KADM5_MASK )!= NULL ) return KADM5_MASK ; <S2SV_ModStart> ; if ( ( ( ( mask & KADM5_M5_MASK ) ) return KADM5_BADM5_MASK ; if ( ( mask & KADM5_BADM5_MASK ) return KADM5_MASK ; if ( mask & KADM5_MASK_MASK ; if ( ( mask & mask & mask & mask & mask & mask & mask & KAD_M5_M5_data_data_data_data_data_data_data_data_data_data_data_data_data_data_data_data_data_data_data_data_type ) ) return - EINVAL ; } if ( ( ( ( tl_data_data_data_data_data_data_data_data_data_data_data_data_data_data_data_data,0
1448,<S2SV_ModStart> [ plane ] && frame -> linesize [ plane ],0
1449,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1450,,0
1451,,1
1452,<S2SV_ModStart> hdr ) ; <S2SV_ModEnd> if (!,0
1453,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
1454,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> uint8_t phdr_len ; uint8_t <S2SV_ModEnd> ; uint8_t,0
1455,,0
1456,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1457,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> size, 0 ) )",0
1458,<S2SV_ModStart> out_free ; } if (! ret ) { ret = - EINVAL ; goto out_free ; },0
1459,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rc -> avg_frame_frame_frame_frame_frame_bandwidth <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> rc -> avg_frame_frame_frame_bandwidth <S2SV_ModStart> ; if ( cpi -> avg_frame_frame_frame_frame_bandwidth <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; if ( cpi -> avg_frame_frame_bandwidth >= MAX_FRAME ) return rc -> avg_frame_frame_frame_frame_bandwidth <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> -> avg_frame_bandwidth ) <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> rc -> avg_frame_frame_frame_frame_frame_bandwidth, ( cpi -> avg_bandwidth, rc -> avg_frame_frame_frame_bandwidth ) ; if ( cpi -> avg_frame_frame_bandwidth >= MAX ( cpi -> frame_FRAME ) return - 1 ; <S2SV_ModStart> ; } else if ( cpi -> avg_frame_frame_frame_bandwidth <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; if ( cpi -> max_frame == KEY_FRAME ) return rc -> max_FRAME ) <S2SV_ModStart>",0
1460,,0
1461,"<S2SV_ModStart> * r, vpx_read_bit <S2SV_ModEnd> * r ) <S2SV_ModStart> ) { vpx_read_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ; vpx_read_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ; vpx_read_bit <S2SV_ModEnd> ( r,",0
1462,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ) ; ND_TCHECK_TCHECK_16BITS ( ndo, ""\\n"" <S2SV_ModEnd> ) ; ND_TCHECK_16BITS ( <S2SV_ModStart> ) ; } ND_TCHECK_16BITS ( ndo, ""\\n"" ) ; ND_TCHECK_16BITS ( ndo, ""[\\n"" ) ; ND_TCHECK_16BITS ( ndo, "" <S2SV_blank> "" ) ; ND_TCHECK_PRINT ( ndo, "" <S2SV_blank> "" ) ; ND_TCHECK_TCHECK_16BITS ( ( ndo, "" <S2SV_blank> "" ) ) ; ND_PRINT ( ( ( ndo, "" <S2SV_blank> "" ) ) ;",0
1463,"<S2SV_ModStart>, size_t len <S2SV_ModEnd> ; if (",0
1464,<S2SV_ModStart> rc = kfree ( uw ) ; <S2SV_ModStart> int ) ; if (! uw ) return NULL ;,0
1465,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> break ; break ; <S2SV_ModEnd> "" { yr_node_node_node_node_node_node_node ( ""grammar.c""grammar.c"" break ; <S2SV_ModStart> ""grammar.c"" { yr_node_node_node_node_node_node_node_node_grammar.c"" { yr_node_node_node_node_node_node_node_node_grammar.c"" { yr_node_node_node_node_node_node_node_node ( ( ""node_node_node_node_node_node ) ; } } # line yr_node_node_grammar.c""grammar.c"" { yr_node_node_node_node_node_node_node_node_node_node_grammar.c""grammar.c"" { yr_node_node_node_node_node_node_node_node ( ( ( ) ) ) ; } # line yr_node_node_node_node_node_node_node_node_node_node",0
1466,,0
1467,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> MACROBLOCKD * const <S2SV_ModStart> const TX_SIZE tx_SIZE tx_size ; MACROBLOCKD * const MACROBLOCKD * const xd = & ctx -> tx_size ; MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const xd = & ctx -> tx_size ; MACROBLOCKD * const xd -> tx_size ; MACROBLOCKD * const xd = & tx_size ; MACROBLOCK_SIZE tx_size ; MACROBLOCKD * const x -> tx_size = & ctx -> tx_size ; MACROBLOCKD * const xd -> tx_size ; MACROBLOCKD * const xd = & tx_size ; MACROBLOCK_SIZE tx_SIZE tx_size = & x -> tx_size ; MACROBLOCK_SIZE tx_size ; MACROBLOCKD * const xd -> tx_size = & ctx -> tx_size ; MACROBLOCK_size ; MACROBLOCK_,0
1468,,0
1469,<S2SV_ModStart> ; if (,0
1470,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
1471,,0
1472,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1473,,0
1474,,0
1475,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
1476,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1477,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1478,<S2SV_ModStart> mq_ops ) ; q -> fctx = 0 ;,0
1479,<S2SV_ModStart> * s ; struct stream packet = * s ;,0
1480,<S2SV_ModStart> val ) { zval_copy_to_val ( & kval ) ;,0
1481,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1482,<S2SV_ModStart> char * buf <S2SV_ModEnd> ; if (,0
1483,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void ( void ) { void * s_start_start_start_start_start_start_start_start_start ( & s_start_flags ) ; <S2SV_ModStart> return - EINVAL ; if (! s_start_start_start_flags & s_start_start_start_start_start_start_start ( s_start_start_start ) return NULL ; if (! s_start_start_start_start_start_start_start_start_start_start_start_start ( s_start ) ) { if (! s_start_start_start_start_start_start_test_start ( s_start_start_start_start ) ) { if (! (! s_start_start_start_start_start_start_start_start_start_start_start_start_start_start_start_start ( s_start ) ) ) goto fail_start_start_start_table ( s_start ) ; } if (! s_start_start_start_start_start_start_,0
1484,<S2SV_ModStart> ( key ) <S2SV_ModEnd> ; if (,0
1485,"<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( segfeature_active <S2SV_ModEnd> ( seg,",0
1486,<S2SV_ModStart>,0
1487,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1488,<S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case,0
1489,<S2SV_ModStart>,0
1490,,0
1491,"<S2SV_ModStart> ( cp, <S2SV_ModEnd> ) == 0",0
1492,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 0 ) { int <S2SV_ModEnd> char * strlen ( int <S2SV_ModStart> 0 ) { int <S2SV_ModEnd> ; int <S2SV_ModStart> 0 ) ; if ( strlen ( strlen ( ""\\0"" ) == 0 ) { int argv = 0 ; for ( i = 0 ; i = 0 ; for ( i = 0 ; i = 0 ; i = 0 ; i < 0 ; i ++ ) { for ( i = 0 ; i < 0 ; i ++ ) { for ( i = 0 ; i < 0 ; i ++ ) { int i = 0 ; for ( i = 0 ; i < 0 ; i ++ ) { for ( i = 0 ; i = 0 ; for ( i < 0 ; i < 0 ; i ++ ) { int i = 0 ; for ( i < 0 ; for ( i = 0 ; i < 0 ; i ++ ) { int i = 0 ; i ++ ) ; for ( i = 0 ; for ( i < 0 ; i = 0 ; i = 0 ; i < 0 ; i ++ ) { for ( i = 0 ; i < 0 ; i ++ ) { if (",0
1493,<S2SV_ModStart> ip_idents_hashrnd <S2SV_ModEnd> ( & net ->,0
1494,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""lineno\\"" ) ; return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, arena ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == NULL || tmp == NULL ) { Py_CLEAR ( tmp ) ; } if ( tmp == NULL ) { PyErr_SetString ( tmp ) ; return 1 ; } else { int res ; } if ( tmp == NULL || tmp == NULL || tmp == NULL ) { PyErr_SetString ( tmp ) ; res = NULL ; } else { int res ; res = obj2ast_type_type_type_type_id ( tmp, arena ) ; if ( tmp == NULL ) { Py_TypeError, & Py_CLEAR ( tmp ) ; if ( tmp == NULL || tmp == NULL ) { Py_TypeError, & Py_CLEAR ( tmp ) ; } if ( tmp == NULL ) { Py",0
1495,"<S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_prob <S2SV_ModEnd> * w )",0
1496,,0
1497,<S2SV_ModStart> ; if (,0
1498,<S2SV_ModStart> int err ; struct ip_options_rcu * info <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
1499,<S2SV_ModStart> ; x = 0 <S2SV_ModEnd> ; if (,0
1500,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1501,,0
1502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9_COMMON <S2SV_ModEnd> int tile_COMMON <S2SV_ModStart> int tile_col ; const VP9_COMMON * tile_col ; int tile_cols = 0 ; int tile_cols = 0 ; uint8_t * tile_row * tile_col ; int tile_cols = 0 ; uint8_t * tile_col ; uint8_t * tile_t * tile_col ; uint8_t * tile_cols = 0 ; uint8_t * tile_col ; uint8_t * tile_t * tile_col ; uint8_t * tile_row = 0 ; uint8_t * tile_t * tile_col ; uint8_t * tile_col ; uint8_t * tile_t * tile_col ; uint8_t * tile_t * tile_col = 0 ; uint8_t * tile_col ; uint8_t * tile_t * tile_col = 0 ; uint8_t * tile_col ; uint8_t * tile_t tile_t * tile_,0
1503,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> frame_decode ) { VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const frame_COMMON * const frame_decode = & cm -> frame_decode ) ; vpx_decode_decode = & frame_decode -> frame_decode_decode = 0 ; vp9_decode_decode = 0 ; vp9_decode -> frame_decode = 0 ; <S2SV_ModStart> cm -> frame_decode ) { vpx_decode = 0 ; vpx_decode -> frame_decode = 0 ; vpx_decode = 0 ; vpx_decode = 0 ; vpx_decode -> frame_decode = 0 ; vpx_decode -> frame_decode = 0 ; cm -> frame_decode = 0 ; vpx_decode -> frame_decode = 0 ; vp9_decode ->,0
1504,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( (,0
1505,,0
1506,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct <S2SV_ModEnd> opt_null>,0
1507,,0
1508,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_codec_alg_priv_priv_t * ctx <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { VPX_CODEC_CODEC_CODEC_WR <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( ctx -> flags & ctx -> flags & ctx -> flags & ctx -> flags & VPX_CODEC_CODEC_CODEC_WR <S2SV_ModEnd> ) { ctx <S2SV_ModStart> ) ; } if ( ctx -> flags & ctx -> frame_flags & ctx -> flags & ctx -> frame_flags & ctx -> flags & ctx -> flags & VPX_CODEC_CODEC_WR <S2SV_ModEnd> ) { VPX_CODEC_ALIGNED,0
1509,<S2SV_ModStart> ; TEMP_FAILURE_RETRY (,0
1510,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct mnt_ns_put_mnt_mnt_mnt_ns ( struct mnt_mnt_ns ) { struct mnt_mnt_mnt_mnt_mnt_mnt_mnt_mnt_mnt_ns ( struct mnt_mnt_ns ) ; <S2SV_ModStart> mnt_mnt_mnt_ns ) { struct mnt_mnt_ns = mnt_mnt_mnt_mnt_ns ( mnt_mnt_mnt_mnt_mnt_mnt_list ) ; } if (! mnt_mnt_ns ) { struct mnt_mnt_mnt_mnt_mnt_mnt_mnt_mnt_mnt_mnt_put_mnt_mnt_mnt_mnt_mnt_mnt_mnt_mnt_ns ( ) ; if (! mnt_mnt_mnt_mnt_mnt_mnt_mnt_mnt_mnt,0
1511,"<S2SV_ModStart>, & len, 0",1
1512,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1513,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int64_t res ; const VP9EncoderConfig <S2SV_ModEnd> * const VP9EncoderConfig <S2SV_ModEnd> * oxcf =,0
1514,"<S2SV_ModStart>, jas_uchar <S2SV_ModEnd> ; if (",0
1515,"<S2SV_ModStart> int fout, fout, int",0
1516,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9_COMMON * cpi <S2SV_ModEnd> xd = & cpi <S2SV_ModStart> -> common ; MACROBLOCK * const <S2SV_ModStart> -> common ; MACROBLOCK * const x = & cpi -> common ; MACROBLOCKD * const <S2SV_ModStart> -> common ; MACROBLOCKD * const x = & cpi -> common ; MACROBLOCK_SIZE bsize = & cpi -> common ; MACROBLOCK_SIZE bsize_t_8_8_8x8x8_8x8x8x8x8x8x8_high_8x8x8x8x8_high_8x8x8x8x8x8x8x8x8x8_high_8x8x8x8_high_8x8x8x8x8x8x8_highbd_8x8x8_high_8x8x8_8x8_8x8x8x8x8x8x8x8x8_high_8x8_diff_diff ( cpi, cpi, cpi,",0
1517,<S2SV_ModStart> int err ; struct user_key_key = 0 ; <S2SV_ModStart> 0 ) ; if (! user_key_key ) { ret = - ENOMEM ; goto out ; },0
1518,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx ] = <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; } <S2SV_null> <SV_null>,0
1519,<S2SV_ModStart> int i ; if ( count >= 32 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ) { return AVERROR_INVALIDDATA ; } if ( bit_depth > 0x00 ) return AVERROR_INVALIDDATA ;,0
1520,,0
1521,<S2SV_ModStart> ; if (,0
1522,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1523,<S2SV_ModStart> -> packet = 0,0
1524,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1525,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> ( r ) <S2SV_ModStart> ) return - 1 <S2SV_ModEnd> ; if (,0
1526,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ) ; }",0
1527,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1528,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> length ) ),0
1529,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1530,<S2SV_ModStart> * file ; struct file * file = - 1 ; O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOCT | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NO,0
1531,<S2SV_ModStart> -> base_data ; memcpy <S2SV_ModEnd> ( sizeof (,0
1532,<S2SV_ModStart> ) { sprintf ( outputbuffer <S2SV_ModEnd> ) ; },0
1533,"<S2SV_ModStart>, 0 ) <S2SV_ModEnd> ; if (",0
1534,<S2SV_ModStart> ) { memcpy <S2SV_ModEnd> ( cpi ->,0
1535,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1536,<S2SV_ModStart> * s ; struct stream packet = * s ;,0
1537,<S2SV_ModStart> pbi ) { memset <S2SV_ModEnd> ( pbi ->,0
1538,,0
1539,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1540,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input,",0
1541,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1542,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1543,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1544,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1545,,0
1546,,0
1547,"<S2SV_ModStart> -> priv ; struct dvb_usb_device * adap = 0 ; mutex_lock ( & d -> data_mutex ) ; mutex_unlock ( & d -> data_mutex ) ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 0 ] = 0x0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 0 ] = 0 ] = 0x80 ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0x0xe ; state -> data [ 1 ] = 0x0f_rw ( d, state -> data [ 1 ], state -> data [ 1 ], state -> data [ 1 ], state -> data [ 1 ], state -> data, state -> data [ 1 ], state -> data, state -> data, state -> data, state -> data, state -> data, state -> data [ 1 ], state -> data, state -> data [ 1 ], state ->",0
1548,"<S2SV_ModStart> ( ctx, <S2SV_ModEnd> va_list args )",0
1549,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int mi_row, <S2SV_ModStart> const char * const uint8_stride ) { const uint8_t planes ; const uint8_t planes ; const uint8_t planes [ 0 ] ; const uint8_t planes [ 0 ] ; const uint8_t planes [ 0 ] ; const uint8_t planes [ 0 ] ; const uint8_t planes [ 0 ] ; const uint8_t planes [ 0 ] ; const uint8_t planes [ 0 ] ; const uint8_t planes [ 0 ] ; const uint8_t planes [ 0 ] ; const uint8_t planes [ 0 ] ; const uint8_t planes [ 0 ] = 0 ] ; const uint8_t planes [ 0 ] ; const uint8_t planes [ 0 ] ; const uint8_diff = 0 ] ; const uint8_t planes [ 0 ] ; const uint8_t res = 0 ] ; memcpy ( uv_off_off_stride, uv_stride, uv_stride, uv_stride, uv_",0
1550,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; if,0
1551,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1552,<S2SV_ModStart> ; default : <S2SV_ModEnd> status = -,0
1553,,0
1554,<S2SV_ModStart> * buf ; size_t len = 0 ; <S2SV_ModStart> 0 ) ; if ( len < 0 ) { <S2SV_ModStart> 0 ) ; },0
1555,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9_COMMON <S2SV_ModEnd> VP9_COMMON * <S2SV_ModStart> int i ; vpx_worker_data_data ( TileInfo * tile_data_data, TileInfo * tile_data_data_data_info <S2SV_ModEnd>, TileInfo * <S2SV_ModStart> int i, TileInfo * tile_info <S2SV_ModEnd> tile_data, <S2SV_ModStart> int i ; vpx_data = 0 <S2SV_ModEnd> ; vpx_free ( <S2SV_ModStart> tile_data ) ; vpx_free ( i ) ) ; vpx_free ( pbi -> tile_data ) ; for ( i = 0 ; i = 0 ; i = 0 ; i = 0 ; i = 0 ; i = 0 ; i = 0 ; i < 0 ; ++ ) { vpx_free ( i ) ; ++ ) ; ++ i = 0 ; ++ i <S2SV_ModEnd> ( pbi <S2SV_ModStart> ) ) { vpx_free ( i <S2SV_ModEnd> ) ) <S2SV_ModStart> ) ) ; }",0
1556,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1557,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> VP9_COMMON <S2SV_ModStart> ) { const VP9_COMMON * const VP9_COMP9_COMMON <S2SV_ModEnd> * seg_system_active <S2SV_ModEnd> ( seg_active <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) { vpx_active <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( seg_active <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ; memcpy <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ; memcpy <S2SV_ModEnd> ( seg,",0
1558,<S2SV_ModStart> int length = 0 <S2SV_ModEnd> ; if (,0
1559,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1560,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1561,,0
1562,,0
1563,<S2SV_ModStart> -> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock,0
1564,"<S2SV_ModStart> } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
1565,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1566,,0
1567,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1568,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1569,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int crm_protocol <S2SV_ModStart> ; struct sockaddr = NULL <S2SV_ModEnd> ; struct sockaddr_t * <S2SV_ModStart> ; struct sockaddr = NULL <S2SV_ModEnd> ; struct sockaddr <S2SV_ModStart> ; int ret = <S2SV_ModEnd> ; struct sockaddr_free <S2SV_ModStart> 0 ) ; if ( <S2SV_ModEnd> mp_protocol,0
1570,<S2SV_ModStart> ) { memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( cpi ->,0
1571,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
1572,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp ) ;,0
1573,<S2SV_ModStart>,0
1574,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1575,"<S2SV_ModStart> int mptctl_eventenable ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_targetinfo ( ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
1576,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> image ) { CorruptImageError ( CorruptImageHeader ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( ( image ) == 0 ) { CorruptImageHeader ( CorruptImageError, ""ImproperImageHeader"" ) ; break ; } <S2SV_ModStart>!= ( unsigned char * ) RelinquishMagickMemory ( unsigned char * ) RelinquishMagickMemory ( unsigned char * ) RelinquishMagickMemory ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( unsigned char * ) RelinquishMagickMemory ( unsigned char * ) RelinquishMagickMemory ( unsigned char * ) RelinquishMagickMemory ( image ) ) RelinquishMagickMemory ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( unsigned char * ) RelinquishMagickMemory ( unsigned char * ) RelinquishMagickMemory ( image ) ) RelinquishMagickMemory ( CorruptImageError, ""ImproperImageHeader"" ) ; }",0
1577,"<S2SV_ModStart> { jas_eprintf ( jas_eprintf ( <S2SV_ModEnd>, jas_eprintf (",0
1578,,0
1579,"<S2SV_ModStart> void vpx_read_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> * r ) vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> int r, vpx_read_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> 1 ) ; vpx_read_literal <S2SV_ModEnd> ( r,",0
1580,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( t,0
1581,"<S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> * probs,",0
1582,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r )",0
1583,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1584,"<S2SV_ModStart> ) ; } ND_TCHECK ( ndo, 0 ) ;",0
1585,,0
1586,<S2SV_ModStart> key ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1587,<S2SV_ModStart> ; if ( <S2SV_ModEnd> skb -> len,0
1588,"<S2SV_ModStart>, image ) \\\n{ <S2SV_ModEnd> if ( image",0
1589,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1590,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1591,<S2SV_ModStart> ; # endif tok -> type_comments = 0 ;,0
1592,,0
1593,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( (,0
1594,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( len,0
1595,,0
1596,"<S2SV_ModStart> = 0 ; size_t addrlen_out = 0 ; <S2SV_ModStart>, & addrlen_out, & addrlen_out <S2SV_ModEnd> ) ; if",0
1597,,1
1598,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1599,<S2SV_ModStart> ) ) { struct ip_options_rcu * opt ; <S2SV_ModStart> -> opt ; opt = rcu_lock_dereference ( <S2SV_ModStart> np -> opt ) ; rcu_read_unlock ( ) ; <S2SV_ModStart> np -> opt ) ; opt = rcu_read_unlock ( opt ) ; <S2SV_ModStart> -> opt ; } <S2SV_ModEnd> if ( opt,0
1600,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null> static <S2SV_ModStart> if ( size_t ) { int i ; <S2SV_ModStart> if ( sizeof ( struct xdelta_t ) { size_t ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH WARN_BUFFER_HIGHBITS_BUFFER_BUFFER_BUFFER_HIGHBITDEPTH <S2SV_ModStart> ] ; } # endif <S2SV_ModStart> if ( inode_t ) { # if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH <S2SV_ModStart> } # endif <S2SV_ModStart> if ( ext_t ) { WARN_HOST_BUFFER_BUFFER_BUFFER_BUFFER_BUFFER_BUFFER_BUFFER_BUFFER_BUFFER_BUFFER_BUFFER_HIGHBITDEPTH <S2SV_ModEnd> ) ; <S2SV_ModStart> ) ; } # endif <S2SV_ModStart> if (,0
1601,"<S2SV_ModStart> ; dm9000WriteReg ( DM9000WriteReg ( DM9000_EPCR, DM9000_EPCR, DM9000_EPCR ) ; dm9000WriteReg ( DM9000_EPCR <S2SV_ModEnd> ) ; dm9000WriteReg ( DM9000WriteReg ( DM9000_EPCR <S2SV_ModEnd> ) ; dm9000WriteReg ( DM9000WriteReg ( DM9000_EPCR ) ; <S2SV_ModStart> ; dm9000WriteReg ( DM9000WriteReg ( DM9000_EPCR, DM9000_EPCR <S2SV_ModEnd> ) ; dm9000WriteReg ( DM9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPCR <S2SV_ModEnd> ) ; dm9000WriteReg ( DM9000WriteReg ( DM9000_EPCR <S2SV_ModEnd> ) ; dm9000WriteReg ( DM9000WriteReg ( DM9000_EPCR, DM9000_EPCR ) <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR <S2SV_ModEnd> ) ; dm9000WriteReg ( DM9000WriteReg (",0
1602,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> t,0
1603,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1604,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; if (,0
1605,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
1606,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MV_MV_MODE <S2SV_ModEnd> ) { int <S2SV_ModStart> step_mv_mv_cost ; int <S2SV_ModEnd> step_mv_mv_mv_step_mv_mv_mv_cost_mv_mv_cost ( cpi <S2SV_ModStart> } else { int <S2SV_ModEnd> step_mv_mv_mv_step_mv_mv_cost_mv_mv_mv_mv_mv_mv_mv_mv_cost ( cpi, <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( cpi, <S2SV_ModStart> else if CONFIG_MV12_HIGHBITDEPTHRESHIGHBITDEPTHRESHIGHBITDEPTHRESHIGHBITS2SV_null> <S2SV_null>",0
1607,,0
1608,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1609,,0
1610,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
1611,,0
1612,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1613,<S2SV_ModStart> * client ; <S2SV_ModEnd> client -> client,0
1614,,0
