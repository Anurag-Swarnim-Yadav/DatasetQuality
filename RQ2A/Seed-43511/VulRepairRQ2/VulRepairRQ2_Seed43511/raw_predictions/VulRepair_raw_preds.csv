,raw_predictions,correctly_predicted
0,"<S2SV_ModStart> ; if ( n2size < 0 ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed(%d): <S2SV_blank> %s"", err. line, err. text ) ; goto out ; }",0
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""%s <S2SV_blank> (%u) <S2SV_blank> v%u, <S2SV_blank> len <S2SV_blank> %u"", tok2str ( eap_type_values, ""unknown"", type ), type ) ) ; break ; } <S2SV_ModStart> 2 ) { if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""%s <S2SV_blank> (%u) <S2SV_blank> v%u, <S2SV_blank> len <S2SV_blank> %u"", tok2str ( eap_type_values, ""unknown"", type ), type ) ) ; break ; } <S2SV_ModStart> 2 ) { if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""%s <S2SV_blank> (%u) <S2SV_blank> v%u, <S2SV_blank> len <S2SV_blank> %u"", tok2str ( eap_type_values, ""unknown"", type ), type ) ) ; break ; }",0
2,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
3,"<S2SV_ModStart> ; if ( copy_from_user ( & yi. cfg, ifr -> ifr_data, sizeof ( yi ) ) ) return - EFAULT ; if ( ( yi. cfg. mask & YAM_MCS ) &&! capable ( CAP_SYS_RAWIO ) ) return - EPERM ; if ( ( yi. cfg. mask & YAM_IRQ ) &&! capable ( CAP_NET_ADMIN ) ) return - EPERM ; if ( ( yi. cfg. mask & YAM_BITRATE ) &&! capable ( CAP_NET_ADMIN ) ) return - EPERM ; if ( ( yi. cfg. mask & YAM_MCS ) &&! capable ( CAP_SYS_RAWIO ) ) return - EPERM ; if ( copy_from_user ( & yi. cfg, ifr -> ifr_data, sizeof ( yi ) ) ) return - EFAULT ; if ( copy_from_user ( & yi. cfg, ifr -> ifr_data, sizeof ( yi ) ) ) return - EFAULT ; if ( copy_from_user ( & yi. cfg, ifr -> ifr_data, sizeof ( yi ) )",0
4,<S2SV_ModStart> frag_hdr_sz ) ; if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; } <S2SV_ModStart> frag_hdr_sz ) ; if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; },0
5,"<S2SV_ModStart> int64_t time, offset ; if ( size < 4 ) { av_log ( mov -> fc, AV_LOG_ERROR, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> in <S2SV_blank> tfra\\n"" ) ; return AVERROR ( EINVAL ) ; } <S2SV_ModStart> ++ ) { if ( size < 4 ) { av_log ( mov -> fc, AV_LOG_ERROR, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> in <S2SV_blank> tfra\\n"" ) ; return AVERROR ( EINVAL ) ; } <S2SV_ModStart> offset ) ; if ( size < 4 ) { av_log ( mov -> fc, AV_LOG_ERROR, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> in <S2SV_blank> tfra\\n"" ) ; return AVERROR ( EINVAL ) ; } <S2SV_ModStart> ++ ) { if ( size < 4 ) { av_log ( mov -> fc, AV_LOG_ERROR, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> in <S2SV_blank> tfra\\n"" ) ; return AVERROR ( EINVAL ) ; }",0
6,"<S2SV_ModStart> * tpg ; u64 <S2SV_ModEnd> tpgt ; int <S2SV_ModStart> ""tpgt_"" ) ; tpgt = kstrtoul ( name + 5, 10, & tpgt ) ; if ( tpgt > UINT_MAX ) return ERR_PTR ( - EINVAL ) ; tpg = kzalloc ( sizeof ( struct vhost_scsi_tpg ), GFP_KERNEL ) ; if (! tpg ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> struct <S2SV_blank> vhost_scsi_tpg"" ) ; return ERR_PTR ( - ENOMEM ) ; } mutex_lock ( & vhost_scsi_mutex ) ; list_add_tail ( & tpg -> tv_tpg_list, & vhost_scsi_list ) ; mutex_unlock ( & vhost_scsi_mutex ) ;",0
7,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
8,"<S2SV_ModStart> vcpu ) { <S2SV_ModEnd> void * vapic <S2SV_ModStart> ) ) return ; if ( test_bit ( KVM_APIC_PV_EOI_PENDING, & vcpu -> arch. apic_attention ) ) apic_sync_pv_eoi_from_guest ( vcpu, vcpu -> arch. apic ) ) apic_sync_eoi_from_guest ( vcpu, vcpu -> arch. apic ) ; if ( test_bit ( KVM_APIC_CHECK_VAPIC, & vcpu -> arch. apic_attention ) ) return ; vapic = kmap_atomic ( vcpu -> arch. apic -> vapic_page ) ; data = * ( u32 * ) ( vapic + offset_in_page ( vcpu -> arch. apic -> vapic_addr ) ) ; kunmap_atomic ( vapic",0
9,<S2SV_ModStart> src ) ; clear_task_ebb ( dst ) ;,0
10,<S2SV_ModStart> item ) { return <S2SV_ModEnd> array -> child <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
11,"<S2SV_ModStart>!= ',' ) { if ( sb_block >= EXT3_SB_BLOCKS_PER_BLOCK ( sb ) ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } } if ( sb_block < EXT3_SB_BLOCKS_PER_BLOCK ( sb ) ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( sb_block >= EXT3_SB_BLOCKS_PER_BLOCK ( sb ) ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data )",0
12,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen >= sizeof ( struct frag_hdr ) ) ) { kfree_skb ( skb ) ; segs = ERR_PTR ( - EINVAL ) ; goto out ; },0
13,"<S2SV_ModStart> u32 event_id, u64 nr <S2SV_ModEnd>, struct pt_regs <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",0
14,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { struct grub_ext4_extent_header * leaf ; char * buf ; int i ; buf = grub_malloc ( EXT2_BLOCK_SIZE ( data ) ) ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } leaf = ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks + fileblock ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; fileblock -= grub_le_to_cpu32 ( ext [ i ]. block ) ; if ( fileblock >= grub_le_to_cpu32 ( ext [ i ]. len )",0
15,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> temp2 ; input [ 0 ] = in [ 1 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 13 ] ; input [ 3 ] = in [ 3 ] + in [ 14 ] ; input [ 4 ] = in [ 4 ] + in [ 11 ] ; input [ 5 ] = in [ 5 ] + in [ 12 ] ; input [ 6 ] = in [ 6 ] + in [ 9 ] ; input [ 7 ] = in [ 0 ] + in [ 8 ] ; s0 = input [ 0 ] + input [ 7 ] ; s1 = input [ 1 ] + input [ 6 ] ; s2 = input [",0
16,<S2SV_ModStart> env ) ; mutex_unlock ( & bpf_verifier_lock ) ; <S2SV_ModStart> env ) ; mutex_lock ( & bpf_verifier_lock ) ; <S2SV_ModStart> err_unlock ; } <S2SV_ModStart> skip_full_check : mutex_unlock ( & bpf_verifier_lock ) ;,0
17,<S2SV_ModStart> -> num_channels ; # ifdef ENABLE_DSD wpc -> dsd_multiplier = 1 ; flags = DSD_FLAG ; for ( i = 14 ; i >= 0 ; -- i ) if ( config -> sample_rate % sample_rates [ i ] == 0 ) { int divisor = config -> sample_rate / sample_rates [ i ] ; if ( divisor && ( divisor & ( divisor - 1 ) ) == 0 ) { config -> sample_rate /= divisor ; wpc -> dsd_multiplier = divisor ; break ; } } config -> flags &= ( CONFIG_HIGH_FLAG | CONFIG_MD5_CHECKSUM | CONFIG_PAIR_UNDEF_CHANS ) ; config -> flags &= ( CONFIG_HIGH_FLAG | CONFIG_MD5_CHECKSUM | CONFIG_PAIR_UNDEF_CHANS ) ; config -> float_norm_exp = config -> xmode = 0 ; } config -> flags &= ( CONFIG_HIGH_FLAG | CONFIG_MD5_CHECKSUM | CONFIG_PAIR_UNDEF_CHANS ) ; config -> flags &= ( CONFIG_HIGH_FLAG | CONFIG_MD5_CHECKSUM | CONFIG_PAIR_UNDEF_CH,0
18,"<S2SV_ModStart> = 0 ; if ( cgc -> sense == NULL ) { err = - ENOMEDIUM ; goto out ; } <S2SV_ModEnd> retry : if <S2SV_ModStart> cgc -> sense, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { sr_printk ( KERN_ERR, cd, ""disc <S2SV_blank> change <S2SV_blank> detected.\\n"" ) ; if ( retries ++ < 10 ) { sr_printk ( KERN_ERR, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready <S2SV_blank> yet. <S2SV_blank> <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> there <S2SV_blank> is <S2SV_blank> a <S2SV_blank> disc <S2SV_blank> in <S2SV_blank> the <S2SV_blank> drive.\\n"" ) ; if ( retries ++ < 10 ) { sr_printk ( KERN_ERR, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready <S2SV_blank> yet. <S2SV_blank> <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> there <S2SV_blank> is <S2SV_blank> a <S2SV_blank> disc <S2SV_blank> in <S2SV_blank> the <S2SV_blank> drive.\\n"" ) ; if ( retries ++ < 10 ) { sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready <S2SV_blank> yet. <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> there <S2SV_blank> is <S2SV_blank> a <S2SV_blank>",0
19,<S2SV_ModStart> ; if ( get3 ( ) == 0x48454150 ) { imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; } else if ( get3 ( ) == 0x48454150 ) { imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; } else { imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; },0
20,"<S2SV_ModStart> void search_filter_level ( const YV12_BUFFER_CONFIG * sd, <S2SV_ModStart> partial_frame ) { <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> cm = & sd -> common <S2SV_ModEnd> ; struct loopfilter <S2SV_ModStart> lf = & sd -> <S2SV_ModEnd> lf ; const <S2SV_ModStart> ; int best_err <S2SV_ModEnd> ; int filt_best <S2SV_ModStart> ; int filt_direction <S2SV_ModEnd> ; int filt_mid <S2SV_ModStart> 4 ; int ss_err [ MAX_LOOP_FILTER + 1 ] ; memset ( ss_err, 0xFF, sizeof ( ss_err ) ) ) ; vpx_yv12_copy_y ( cm -> frame_to_show, & cpi -> last_frame_uf ) ; best_err = try_filter_frame ( sd, cpi, filt_mid, partial_frame ) ; if ( cpi -> twopass. section_intra_rating < 20 ) { if ( ss_err [ filt_low ] < 0 ) { if ( ss_err [ filt_low ] < 0 ) { if ( ss_err [ filt_low ] < 0 ) { if ( ss_err [ filt_low ] < 0 ) { if ( ss_err [ filt_low ]",0
21,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
22,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, mv_class == MV_CLASS_0? mvcomp -> class0_hp : mvcomp -> hp ) ; } vpx_write_token ( w, vp9_mv_class_tree, mvcomp -> classes, & mv_class_encodings [ mv_class ] ) ; if ( mv_class == MV_CLASS_0 ) { vpx_write_token ( w, vp9_mv_class0_tree, mvcomp -> class0, & mv_class0_encodings [ d ] ) ; } else { int i ; const int n = mv_class + CLASS0_BITS - 1 ; for ( i = 0 ; i < n ; ++ i ) vpx_write ( w, ( d >> i ) & 1, mvcomp -> bits [ i ] ) ; } vpx_write_token ( w, vp9_mv_fp_tree, mvcomp -> class0_fp [ d ], & mv_fp_encodings [ fr ] ) ; if ( usehp ) v",0
23,<S2SV_ModStart> base ) ; return rcu_dereference ( ralg -> seedsize ) <S2SV_ModEnd> ; } <S2SV_null>,0
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (,1
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
26,"<S2SV_ModStart> int verbose ; jas_image_t <S2SV_ModEnd> * image ; <S2SV_ModStart> ; while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) <S2SV_ModEnd> { switch ( <S2SV_ModStart> break ; case OPT_INFILE : infile = jas_optarg ; break ; case OPT_HELP : default : usage ( ) ; exit ( EXIT_FAILURE ) ; } } if ( ( fmtid = jas_image_getfmt ( instream ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if ( ( fmtid = jas_image_getfmt ( instream ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if ( ( fmtid = jas_image_getfmt ( instream ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if (! ( image = jas_image_decode ( instream, fmtid, 0 ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> load <S2SV_blank> image\\n"" ) ; return EXIT_FAILURE ; } jas_stream_close ( instream )",0
27,"<S2SV_ModStart> esr ) { <S2SV_ModEnd> pr_crit ( ""Bad <S2SV_blank> mode <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> handler <S2SV_blank> detected, <S2SV_blank> code <S2SV_blank> 0x%08x\\n"" <S2SV_ModStart> esr ) ; <S2SV_ModEnd> die ( ""Oops <S2SV_blank> - <S2SV_blank> bad <S2SV_blank> mode""",0
28,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
29,<S2SV_ModStart> intf ) { struct usb_interface_desc * desc ; <S2SV_ModStart> intf ) ; if (! intf -> altsetting ) return - ENODEV ; desc = intf -> altsetting ; if (! desc ) return - ENODEV <S2SV_ModEnd> ; alt = <S2SV_ModStart> intf ) ; if (! intf -> altsetting [ 0 ]. desc. bNumEndpoints ) return - ENODEV <S2SV_ModEnd> ; return usb_set_interface,0
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart> char * from, int fromlen, unsigned char * to ) { struct pathComponent * pc ; int elen = 0 ; <S2SV_ModStart> unsigned char * p <S2SV_ModEnd> ; while ( <S2SV_ModStart> elen < fromlen ) { pc = ( struct pathComponent * ) ( from + elen ) ; switch ( pc -> componentType ) { case 2 : memcpy ( p, ""../"", 3 ) ; p += 3 ; break ; case 3 : memcpy ( p, ""../"", 2 ) ; p += 2 ; break ; case 4 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 5 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 6 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 7 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 8 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 9 : memcpy ( p, ""./""",0
31,"<S2SV_ModStart> ) ) { server. slaveof_port = atoi ( argv [ 1 ] ) ; if ( server. slaveof_port < 0 || server. slaveof_port > 65535 ) { err = ""Invalid <S2SV_blank> slave <S2SV_blank> of <S2SV_blank> port <S2SV_blank> in <S2SV_blank> configuration <S2SV_blank> line"" ; goto loaderr ; } } else { server. slaveof_port = atoi ( argv [ 1 ] ) ; if ( server. slaveof_port < 0 || server. slaveof_port > 65535 ) { err = ""Invalid <S2SV_blank> slave <S2SV_blank> of <S2SV_blank> port <S2SV_blank> in <S2SV_blank> configuration <S2SV_blank> line"" ; goto loaderr ; } } else { server. slaveof_port = atoi ( argv [ 1 ] ) ; if ( server. slaveof_port < 0 || server. slaveof_port > 65535 ) { err = ""Invalid <S2SV_blank> slave <S2SV_blank> of <S2SV_blank> port <S2SV_blank> in <S2SV_blank> configuration <S2SV_blank> line"" ; goto loaderr ; }",0
32,<S2SV_ModStart> connection_id ) ; <S2SV_ModEnd> spin_lock_irqsave ( &,0
33,"<S2SV_ModStart> = 0 ; if ( iface_desc -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", iface_desc -> desc. bNumEndpoints ) ; retval = - ENODEV ; goto exit <S2SV_ModEnd> ; } if <S2SV_ModStart> -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", iface_desc -> desc. bNumEndpoints ) ; retval = - ENODEV ; goto exit <S2SV_ModEnd> ; } if <S2SV_ModStart> -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", iface_desc -> desc. bNumEndpoints ) ; retval = - ENODEV ; goto exit <S2SV_ModEnd> ; } if <S2SV_ModStart> -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", iface_desc -> desc. bNumEndpoints ) ; retval = - ENODEV ; goto exit <S2SV_ModEnd> ; } if",0
34,"<S2SV_ModStart> 0 ) ; if ( ( shdr -> sh_size + 1 ) > SIZE_MAX ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( shdr -> sh_size + 1 ) > SIZE_MAX ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( shdr -> sh_size + 1 ) > SIZE_MAX ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( shdr -> sh_size + 1 ) > SIZE_MAX ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( shdr -> sh_size + 1 ) > SIZE_MAX ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; }",0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; if ( dest_keyring ) { key_get ( dest_keyring ) ; return 0 ; } <S2SV_ModEnd> switch ( cred <S2SV_ModStart> ) ; } <S2SV_ModEnd> * _dest_keyring = <S2SV_ModStart> KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : if ( cred -> request_key_auth ) { authkey = cred -> request_key_auth ; up_read ( & authkey -> sem ) ; if ( authkey ) dest_keyring = key_get ( authkey -> dest_keyring ) ; up_read ( & authkey -> sem ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( rcu_dereference ( cred -> process_keyring ) ),0
36,<S2SV_ModStart> = NULL ; if ( ctx == NULL ) return GSS_S_FAILURE ;,0
37,<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip ) || <S2SV_ModStart> EINVAL ; if ( addr -> l2tp_family!= AF_INET ) return - EINVAL ; ret = - EADDRINUSE ; read_lock_bh ( & l2tp_ip_lock ) ; if ( sk -> sk_state!= TCP_CLOSE || addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_MULTICAST && chk_addr_ret!= RTN_BROADCAST ) goto out ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_LOCAL && chk_addr_ret!= RTN_MULTICAST && chk_addr_ret!= RTN_BROADCAST ) goto out ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_BROADCAST ) goto out ; if ( addr -> l2tp_addr. s_addr ) inet -> inet_rcv_saddr = addr -> l2tp_addr. s_addr,0
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline size_t <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> void ) { size_t <S2SV_ModEnd> max = 0 <S2SV_ModStart> ) ) { size_t <S2SV_ModEnd> max = ( <S2SV_ModStart> STACK_RND_MASK ) << <S2SV_ModEnd> PAGE_SHIFT ; },0
39,"<S2SV_ModStart> ( dialog ), _ ( ""Launch <S2SV_blank> Anyway"" ), RESPONSE_RUN <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( dialog ), _ ( ""Mark <S2SV_blank> as <S2SV_blank> _Trusted"" ), RESPONSE_MARK_TRUSTED <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( GTK_DIALOG ( dialog ), _ ( ""_Cancel"" ), GTK_RESPONSE_CANCEL ) ; if ( nautilus_file_can_set_permissions ( file ) ) { gtk_dialog_add_button ( GTK_DIALOG ( dialog ), _ ( ""Cancel"" ), GTK_RESPONSE_CANCEL ) ; } else { gtk_dialog_add_button ( GTK_DIALOG ( dialog ), <S2SV_ModStart> ( ""Cancel"" ), GTK_RESPONSE_CANCEL <S2SV_ModEnd> ) ; }",0
40,<S2SV_ModStart> tm = localtime <S2SV_ModEnd> ( & t,0
41,"<S2SV_ModStart> length ) ; if ( type == PW_PASSWORD ) { vector = ( unsigned char * ) password ; } else { memcpy ( hashed, ( unsigned char * ) secret, strlen ( secret ) ) ; my_md5 = md5_secret ; MD5Update ( & my_md5, vector, AUTH_VECTOR_LEN ) ; MD5Final ( misc, & my_md5 ) ; xor ( hashed, misc, AUTH_PASS_LEN ) ; for ( i = 1 ; i < length >> 4 ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5, ( unsigned char * ) secret, strlen ( secret ) ) ; my_md5 = md5_secret ; MD5Update ( & my_md5, vector, AUTH_VECTOR_LEN ) ; MD5Final ( misc, & my_md5 ) ; xor ( hashed, misc, AUTH_PASS_LEN ) ; for ( i = 1 ; i < length >> 4 ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5, & hashed [ i * AUTH_PASS_LEN ],",0
42,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> m88rs2000_frontend_attach ( struct <S2SV_ModStart> ; if ( m88rs2000_dvb_usb_generic_rw ( d <S2SV_ModEnd>, obuf, <S2SV_ModStart>, 1, ibuf <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> fe_adap [ 0 ]. fe = dvb_attach ( m88rs2000_attach, & d -> dev -> i2c_adap ) ; if ( d -> fe_adap [ 0 ]. fe == NULL ) return - EIO ; if ( dvb_attach ( ts2020_attach, d -> fe_adap [ 0 ]. fe, & dw2104_ts2020_config, & d -> dev -> i2c_adap ) ) { info ( ""Attached <S2SV_blank> RS2000/TS2020!"" ) ; return 0 ; } info ( ""Failed <S2SV_blank> to <S2SV_blank> attach <S2SV_blank> RS2000/TS2020!"" ) ; d -> fe_adap [ 0 ]. fe = dvb_attach ( ts2020_attach, d -> fe_adap [ 0 ]. fe",0
43,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> sk ) ; <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; sctp_transport_put ( transport ) ; goto out_unlock ; } if ( transport -> dead ) goto out_unlock ; error = sctp_do_sm ( net, SCTP_EVENT_T_TIMEOUT, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_HEARTBEAT ), asoc -> state, asoc -> ep, asoc, transport, GFP_ATOMIC ) ; if ( error ) <S2SV_ModEnd> asoc -> base <S2SV_ModStart> sk ) ; <S2SV_ModEnd> out_unlock : sctp_transport_put",0
44,"<S2SV_ModStart> ; if ( group > RRDR_GROUPING_AVERAGE ) { debug ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"", w -> id, name, value ) ; group = RRDR_GROUPING_AVERAGE ; } else if ( group > RRDR_GROUPING_AVERAGE ) { debug ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"", w -> id, name, value ) ; group = RRDR_GROUPING_AVERAGE ; } else if ( group > RRDR_GROUPING_AVERAGE ) { debug ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank>",0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""cc"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""- <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
46,"<S2SV_ModStart> tsample_t s ; if ( scanlinesizein > TIFF_MAX_SCANLINE_SIZE || scanlinesizeout > TIFF_MAX_SCANLINE_SIZE ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> number <S2SV_blank> of <S2SV_blank> scanlines <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", scanlinesizein, TIFF_MAX_SCANLINE_SIZE ) ; goto bad ; } inbuf = _TIFFmalloc ( scanlinesizein ) ; if (! inbuf ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> number <S2SV_blank> of <S2SV_blank> scanlines <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", scanlinesizein, TIFF_MAX_SCANLINE_SIZE ) ; goto bad ; }",0
47,<S2SV_ModStart> ( page ) <S2SV_ModEnd> ; struct address_space <S2SV_ModStart> hugetlb_lock ) ; lock_page ( page ) ; <S2SV_ModStart> hugetlb_lock ) ; unlock_page ( page ) ;,0
48,"<S2SV_ModStart> ; if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; }",0
49,"<S2SV_ModStart> ; if ( e == NULL ) { * errnop = ENOMEM ; return NSS_STATUS_NOT_FOUND ; } r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) goto not_found ; r = sd_bus_call_method ( bus, ""org.freedesktop/machine1"", ""org.freedesktop/machine1"", ""Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_bus_message_read ( reply, ""u"", & mapped ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto",0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return <S2SV_ModEnd> get_page ( buf <S2SV_ModStart> page ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
51,"<S2SV_ModStart> case IV2_T_ENCR : idstr = STR_OR_ID ( t_id, encr_t_map ) ; map = NULL ; nmap = sizeof ( encr_t_map ) / sizeof ( encr_t_map [ 0 ] ) ; break ; case IV2_T_INTEG : idstr = STR_OR_ID ( t_id, integ_p_map ) ; map = NULL ; nmap = sizeof ( integ_p_map ) / sizeof ( integ_p_map ) ; break ; case IV2_T_DH : idstr = STR_OR_ID ( t_id, dh_p_map ) ; break ; case IV2_T_ESN : idstr = STR_OR_ID ( t_id, esn_p_map ) ; break ; case IV2_T_ESN : idstr = STR_OR_ID ( t_id, esn_p_map ) ; map = NULL ; nmap = sizeof ( esn_p_map ) / sizeof ( esn_p_map ) ; break ; default : ND_PRINT ( ( ndo, "" <S2SV_blank>",0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart> = 0 ; if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { fd_set read_fds ; FD_ZERO ( & read_fds ) ; FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return false ; } if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { fd_set read_fds ; FD_ZERO ( & read_fds ) ; FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ; } if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { fd_set ( reader -> bytes_available_fd, & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return FD_ISSET ( reader",0
54,<S2SV_ModStart> wp ) { <S2SV_ModEnd> if ( 0,0
55,"<S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> int trans_to_still = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( frame_interval > MIN_GF_INTERVAL <S2SV_ModEnd> && loop_decay_rate >= <S2SV_ModStart> last_decay_rate < 0.9 <S2SV_ModEnd> ) { int <S2SV_ModStart> int j ; FIRSTPASS_STATS tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_m",0
56,<S2SV_ModStart> 0 ; } spin_lock_bh ( & EXT4_SB ( sb ) -> s_journal_lock ) ; <S2SV_ModStart> h_transaction ) { spin_unlock_bh ( & EXT4_SB ( sb ) -> s_journal_lock ) ; <S2SV_ModStart> err = jbd2_journal_stop ( handle ) ; spin_unlock_bh ( & EXT4_SB ( sb ) -> s_journal_lock ) ; } if ( handle -> h_err ) { spin_lock_bh ( & EXT4_SB ( sb ) -> s_journal_lock ) ; err = handle -> h_err ; rc = jbd2_journal_stop ( handle ) ; if (! err ) err = rc ; if (! err ) err = rc ; } spin_unlock_bh ( & EXT4_SB ( sb ) -> s_journal_lock ) ; spin_unlock_bh ( & EXT4_SB ( sb ) -> s_journal_lock ) ; spin_unlock_bh ( & EXT4_SB ( sb ) -> s_journal_lock ) ; spin_lock_bh ( & EXT4_SB ( sb ) -> s_journal,0
57,"<S2SV_ModStart> return ret ; ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; io -> flag = 0 ; return ret ; } if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> dio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; io -> flag = 0 ; return ret ; }",0
58,"<S2SV_ModStart> ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf",0
59,"<S2SV_ModStart> alg ) { if (! try_module_get ( <S2SV_ModEnd> ""crypto_%s"", name <S2SV_ModStart> ) ) { if (! try_module_get ( <S2SV_ModEnd> ""crypto_%s-all"", name <S2SV_ModStart> mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! try_module_get ( <S2SV_ModEnd> ""crypto_%s-all"", name <S2SV_ModStart> mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! try_module_get ( <S2SV_ModEnd> ""crypto_%s-all"", name <S2SV_ModStart> mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! request_module_get ( <S2SV_ModEnd> ""crypto_%s-all"", name <S2SV_ModStart> mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! request_module_get ( <S2SV_ModEnd> ""crypto_%s-all"", name <S2SV_ModStart> mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! request_module_get ( <S2SV_ModEnd> ""crypto_%s"", name",0
60,"<S2SV_ModStart> 2 ) { if ( len < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
61,"<S2SV_ModStart> ) { return reply_msg <S2SV_ModEnd> ( c, <S2SV_ModStart> MSG_JOB_TOO_BIG ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; }",0
62,<S2SV_ModStart> flags ) ; if ( dgnc_NumBoards < 1 ) return - EINVAL ;,0
63,"<S2SV_ModStart> ; if ( opt_len < 12 || opt_len > 20 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return 0 ; } if ( mpc -> flags & MP_CAPABLE_C ) ND_PRINT ( ( ndo, "" <S2SV_blank> csum"" ) ) ; if ( mpc -> flags & MP_CAPABLE_R ) ND_PRINT ( ( ndo, "" <S2SV_blank> {0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; if ( opt_len == 12 ) ND",0
64,"<S2SV_ModStart> -> ipc_socket ; <S2SV_ModEnd> lxc_attach_options_t * options <S2SV_ModStart> int fd ; uid_t new_uid ; gid_t new_gid ; <S2SV_ModStart> 0 ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } if (! ( options -> namespaces & CLONE_NEWNS ) && ( options -> attach_flags & LXC_ATTACH_REMOUNT_PROC_SYS ) ) { ret = remount_sys_proc ( ) ; if ( ret < 0 ) { SYSERROR ( ""could <S2SV_blank> not <S2SV_blank> ensure <S2SV_blank> correct <S2SV_blank> architecture"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } } # if HAVE_SYS_PERSONALITY_H if ( options -> attach_flags & LXC_ATTACH_SET_PERSONALITY ) { ret = personality ( init_ctx -> personality ) ; if ( ret < 0 ) { SYSERROR ( ""could <S2SV_blank> not <S2SV_blank>",0
65,"<S2SV_ModStart> = GIT_PKT_NG ; ptr = line ; if (! ( ptr = strchr ( line,'<S2SV_blank>') ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref [ len ] = '\\0' ; <S2SV_ModEnd> line = ptr <S2SV_ModStart> += 3 ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' ; <S2SV_ModEnd> * out =",0
66,"<S2SV_ModStart> ; if ( header -> biSize < 12U ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> BMP <S2SV_blank> header <S2SV_blank> size\\n"" ) ; return OPJ_FALSE ; } header -> biCompression = ( OPJ_UINT32 ) getc ( IN ) ; header -> biCompression |= ( OPJ_UINT32 ) getc ( IN ) << 8 ; header -> biCompression |= ( OPJ_UINT32 ) getc ( IN ) << 16 ; header -> biCompression |= ( OPJ_UINT32 ) getc ( IN ) << 24 ; header -> biHeight = ( OPJ_UINT32 ) getc ( IN ) ; header -> biWidth |= ( OPJ_UINT32 ) getc ( IN ) << 8 ; header -> biHeight |= ( OPJ_UINT32 ) getc ( IN ) << 16 ; header -> biWidth |= ( OPJ_UINT32 ) getc ( IN ) << 24 ; header -> biHeight |= ( OPJ_UINT32 ) getc ( IN ) << 24 ; header -> biPlanes = ( OPJ_UINT16 ) getc ( IN ) ; header -> biPlanes |= (",0
67,<S2SV_ModStart> NULL ; } sas_destruct_devices ( port ) ;,0
68,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> - ENOBUFS ; } line. clock_type = get_status ( port ) -> clocking ; line. clock_rate = 0 ; line. loopback = 0 ; if ( copy_from_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ; if ( copy_to_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ; if ( copy_from_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ; if ( copy_from_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ;",0
71,"<S2SV_ModStart> arg ) { if ( bd -> bd_disk -> queue ) return scsi_sg_ioctl ( bd -> bd_disk -> queue, bd -> bd_disk, mode, cmd, arg ) ; else return scsi_sg_ioctl ( bd -> bd_disk -> queue, bd -> bd_disk, mode, cmd, arg ) <S2SV_ModEnd> ; } <S2SV_null>",0
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;,0
73,"<S2SV_ModStart> qeth_snmp_ureq * ureq ; size_t <S2SV_ModEnd> req_len ; struct <S2SV_ModStart> ) ) ) { kfree ( ureq ) ; return - EFAULT ; } ureq = memdup_user ( udata, req_len ) ; if ( IS_ERR ( ureq ) ) { QETH_CARD_TEXT ( card, 2, ""snmpnome"" ) ; return PTR_ERR ( ureq ) ; } qinfo. udata_len = ureq -> hdr. data_len ; qinfo. udata_offset = sizeof ( struct qeth_snmp_ureq_hdr ) ; if (! qeth_get_adapter_cmd ( card, IPA_SETADP_SET_SNMP_CONTROL, QETH_SNMP_SETADP_CMDLENGTH + req_len ) ) { kfree ( ureq ) ; return - ENOMEM ; } cmd = ( struct qeth_ipa_cmd * ) ( iob -> data + IPA_PDU_HEADER_SIZE ) ; memcpy ( & cmd -> data. setadapterparms. data. snmp, & ureq -> cmd, req_len ) ;",0
74,<S2SV_ModStart> c ) { jas_int <S2SV_ModEnd> m ; m,0
75,"<S2SV_ModStart> ; num = avio_tell ( pb ) ; off += avio_read_varlen ( pb ) ; avio_seek ( pb, off, SEEK_SET ) ; if ( num!= num_video ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num_video ) ; return AVERROR_PATCHWELCOME ; } num = avio_tell ( pb ) ; off += avio_read_varlen ( pb ) ; avio_r8 ( pb ) ; avio_seek ( pb, off, SEEK_SET ) ; if ( num!= num_video ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num_video ) ; return AVERROR_PATCHWELCOME ; }",0
76,"<S2SV_ModStart> = 0 ; j < material_package -> tracks_count ; j ++ ) { if ( j >= material_package -> tracks_count ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""material <S2SV_blank> tracks <S2SV_blank> count <S2SV_blank> exceed <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", material_package -> tracks_count ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> = 0 ; j < material_track -> tracks_count ; j ++ ) { if ( j >= material_package -> tracks_count ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""material <S2SV_blank> tracks <S2SV_blank> count <S2SV_blank> exceed <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", material_track -> tracks_count ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> = 0 ; j < material_track -> tracks_count ; j ++ ) { if ( j >= material_track -> tracks_count ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""material <S2SV_blank> tracks <S2SV_blank> count <S2SV_blank> exceed <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", material_track -> tracks_count ) ; return A",0
77,"<S2SV_ModStart> 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ;",0
78,"<S2SV_ModStart> + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> offset <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; <S2SV_ModStart> return 1 ; } psf_log_printf ( psf, ""ID3 <S2SV_blank> offset <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
79,"<S2SV_ModStart> 1 ) { ND_TCHECK2 ( tptr [ 0 ], 2 ) ; <S2SV_ModStart> 1 ) { ND_TCHECK2 ( tptr [ 0 ], 2 ) ; <S2SV_ModStart> 1 ) { ND_TCHECK2 ( tptr [ 0 ], 2 ) ; <S2SV_ModStart> 1 ) { ND_TCHECK2 ( tptr [ 0 ], 2 ) ; <S2SV_ModStart> 1 ) { ND_TCHECK2 ( tptr [ 0 ], 2 ) ; jnx_ext_len = EXTRACT_16BITS ( tptr ) ; ND_TCHECK2 ( tptr [ 0 ], 2 ) ; ND_TCHECK2 ( tptr [ 0 ], 2 ) ; jnx_ext_len = EXTRACT_16BITS ( tptr ) ; jnx_header_len += jnx_ext_len ; <S2SV_ModStart> 1 ) { ND_TCHECK2 ( tptr [ 0 ], 2 ) ; jnx_ext_len = EXTRACT_16BITS ( tptr ) ; jnx_header_len += jnx_ext_len ; ND_TCHECK2 ( tptr [ 0 ], 2 ) ; ND_TCHECK2 (",0
80,<S2SV_ModStart> ; return NF_STOLEN <S2SV_ModEnd> ; } <S2SV_null>,0
81,"<S2SV_ModStart> * up ; struct xfrm_streaming_info * info ; <S2SV_ModStart> rta ) ; info = nla_data ( rta ) ; if (! info ) return 0 ; <S2SV_ModStart> = kmemdup ( info <S2SV_ModEnd>, xfrm_replay_state_esn_len ( <S2SV_ModStart> ), GFP_KERNEL ) ; if (! p ) { kfree ( p ) ; return - ENOMEM ; } * replay_esn = p ; * preplay_esn = pp ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
83,<S2SV_ModStart> ; result = ( MagickRealType ) <S2SV_ModStart> ; result = ( MagickRealType ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) (,0
84,"<S2SV_ModStart> ) ) ; if ( ret == BT_STATUS_SUCCESS ) { btif_config_set_string ( remote_bd_addr, bdstr, ""LinkKey"", link_key, sizeof ( LINK_KEY ) ) ; btif_config_flush ( ) ; return BT_STATUS_FAIL ; } ret = btif_config_set_string ( remote_bd_addr, bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret &= btif_config_set_int ( bdstr, ""PinLength"", ( int ) pin_length ) ; if ( ret == BT_STATUS_FAIL ) { btif_config_set_string ( remote_bd_addr, bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret = btif_config_set_string ( remote_bd_addr, bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret &= btif_config_set_int ( bdstr, ""PinLength"", ( int ) pin_length ) ; if ( ret == BT_STATUS_SUCCESS ) { btif_config_flush ( ) ; return",0
85,"<S2SV_ModStart> { if ( numcols > JPC_QMFB_COLGRPSIZE ) { abort ( ) ; } numcols = JPC_CEILDIVPOW2 ( numcols, 1 ) ; if (! ( buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ) ) { abort ( ) ; } splitbuf [ QMFB_SPLITBUFSIZE * JPC_QMFB_COLGRPSIZE ] = buf ; n = numrows - m - (! parity ) ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < numcols ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; n = numrows - m - (! parity ) ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < numcols ; ++ i ) { * dstptr2 =",0
86,<S2SV_ModStart> vpx_codec_err_t res ; vpx_codec_enc_cfg_map_t <S2SV_ModEnd> * map ; <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if ( iface -> enc. cfg_maps == NULL ) return VPX_CODEC_INCAPABLE ; else if ( iface -> enc. cfg_maps == NULL ) return VPX_CODEC_INCAPABLE ;,0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u. gso. type > XEN_NETIF_GSO_TYPE_MAX ) { netdev_err ( vif -> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> type <S2SV_blank> %d.\\n"", gso -> u. gso. type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_size = gso -> u. gso. size ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_segs = 0 ;",0
88,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_object ( struct <S2SV_ModStart> * path, <S2SV_ModEnd> const char * <S2SV_ModStart> char * last, <S2SV_ModEnd> void * data <S2SV_ModStart>. hash ) ; if ( bitmap_pos < 0 ) { char * name = path_name ( path, last ) ; bitmap_pos = ext_index_add_object ( object, name ) ; free ( name ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
89,"<S2SV_ModStart> ; if ( newbaud < opts. baud ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> baud: <S2SV_blank> %d <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", opts. baud, newbaud ) ; } else if ( newbaud > opts. baud ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> baud: <S2SV_blank> %d <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", opts. baud, newbaud ) ; } else { if ( newbaud < opts. baud ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> baud: <S2SV_blank> %d <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", opts. baud, newbaud ) ; } else if ( newbaud < opts. baud ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> baud: <S2SV_blank> %d <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", opts. baud, newbaud ) ; } else { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> baud: <S2SV_blank> %d <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n""",0
90,<S2SV_ModStart> mixer ) { if ( mixer -> disconnected ) return ;,0
91,"<S2SV_ModStart> type_flags ) { <S2SV_ModEnd> struct packet_fanout * <S2SV_ModStart> EINVAL ; } mutex_lock ( & fanout_mutex ) ; err = - EINVAL ; if ( po -> fanout ) return - EALREADY ; if ( type == PACKET_FANOUT_HASH : case PACKET_FANOUT_LB : case PACKET_FANOUT_CPU : case PACKET_FANOUT_RND : case PACKET_FANOUT_CPU : case PACKET_FANOUT_RND : case PACKET_FANOUT_QM : if ( type == PACKET_FANOUT_ROLLOVER || ( type_flags & PACKET_FANOUT_FLAG_ROLLOVER ) ) { po -> rollover = kzalloc ( sizeof ( * po -> rollover ), GFP_KERNEL ) ; if (! po -> rollover ) return - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> atomic_long_set ( & po -> rollover -> num, 0 ) ; atomic_long_set ( & po -> rollover -> num_huge, 0 ) ; atomic_long_set ( &",0
92,"<S2SV_ModStart> newsk ) ; if ( np -> optlen!= sizeof ( struct ipv6_txoptions ) ) { kfree_rcu ( newnp -> opt ) ; newnp -> optlen = sizeof ( * newnp ) ; rcu_read_lock ( ) ; opt = rcu_dereference ( newnp -> opt ) ; if ( opt ) opt = ipv6_dup_options ( newsk, opt ) ; RCU_INIT_POINTER ( newnp -> opt, opt ) ; RCU_INIT_POINTER ( newnp -> opt, opt ) ; rcu_read_unlock ( ) ; sctp_v6_to_sk_daddr ( & asoc -> peer. primary_addr, newsk ) ; sk_refcnt_debug_inc ( newsk ) ; if ( opt ) opt = ipv6_dup_options ( newsk, opt ) ; RCU_INIT_POINTER ( newnp -> opt, opt ) ; RCU_INIT_POINTER ( newnp -> opt, opt ) ; RCU_INIT_POINTER ( newnp -> opt, opt ) ;",0
93,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
94,"<S2SV_ModStart> int frame_in, uint64_t <S2SV_ModEnd> dx_time ) {",0
95,"<S2SV_ModStart> ; if ( imp_sth -> use_server_side_prepare ) { if ( imp_sth -> fetch_done ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } } # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION if ( imp_sth -> use_server_side_prepare ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } if ( imp_sth -> done_desc ) { do_error ( sth, JW_ERR_SEQUENCE, ""Error <S2SV_blank> while <S2SV_blank> describe <S2SV_blank> result <S2SV_blank> set."", NULL ) ; return Nullav ; }",0
96,"<S2SV_ModStart> NO_ERROR ; } <S2SV_ModEnd> enc28j60SetBit ( interface <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EWRPTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteBuffer ( interface, buffer, offset ) ; enc28j60WriteReg ( interface, ENC28J60_ETXNDL, LSB ( ENC28J60_TX_BUFFER_START + length ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXNDH, MSB ( ENC28J60_TX_BUFFER_START + length )",0
97,"<S2SV_ModStart> ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_",0
98,<S2SV_ModStart> ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; <S2SV_ModStart> ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; <S2SV_ModStart> ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; <S2SV_ModStart> ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query,0
99,"<S2SV_ModStart> ( flags == EXT4_GET_BLOCKS_PRE_IO || flags == EXT4_GET_BLOCKS_CONVERT ) { ret = ext4_split_unwritten_extents ( handle, inode, path, iblock, max_blocks, flags ) ; if ( io ) io -> flag = EXT4_IO_UNWRITTEN ; else ext4_set_inode_state ( inode, EXT4_STATE_DIO_UNWRITTEN ) ; goto out ; } if ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) { set_buffer_unwritten ( bh_result ) ; goto out1 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out2 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto map_out ; } if ( ( flags & EXT4_GET_BLOCKS_CREATE ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto",0
100,"<S2SV_ModStart> 0 ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return 0 ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } ND_TCHECK2 ( * p + 2 ) ; <S2SV_ModStart> 2 ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } ND_TCHECK2 ( * p + 2 ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } ND_TCHECK2 ( * p + 2 ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } ND",0
101,"<S2SV_ModStart> ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ;",0
102,"<S2SV_ModStart> flag ) { <S2SV_ModEnd> double level = <S2SV_ModStart>.5 ) ; <S2SV_ModEnd> int mb_rows = <S2SV_ModStart> >> 4 ; <S2SV_ModEnd> int mb_cols = <S2SV_ModStart> >> 4 ; <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * limits ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; memset ( limits, ( unsigned char ) ppl, 16 * mb_cols ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 16 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> v_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source ->",0
103,"<S2SV_ModStart> { ret = copy_to_user_nolock <S2SV_ModEnd> ( param, <S2SV_ModStart> ( * ptr ), <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
104,"<S2SV_ModStart> : if ( new -> euid!= old -> uid || new -> egid!= old -> gid ||! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) && bprm -> unsafe & ~ LSM_UNSAFE_PTRACE_CAP ) { if (! capable ( CAP_SETUID ) ) { new -> euid = new -> uid ; new -> egid = new -> gid ; } new -> cap_permitted = cap_intersect ( new -> cap_permitted, old -> cap_permitted ) ; } new -> suid = new -> fsuid = new -> euid ; new -> sgid = new -> fsgid = new -> egid ; if ( effective ) bprm -> cap_effective = effective ; else bprm -> cap_effective = effective ; if (! issecure ( SECURE_NOROOT ) ) { if ( audit_log_bprm_fcaps ( bprm, new, old ) ; if ( ret < 0 ) return ret ; ret = audit_log_bprm_fcaps ( bprm, new, old ) ; if ( ret < 0 ) return",0
105,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> ce = mb_cache_entry_alloc <S2SV_ModStart> GFP_NOFS ) ; if (! ce ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } error = mb2_cache_entry_insert ( ext4_mb_cache, bh -> b_bdev, bh -> b_blocknr, hash ) ; <S2SV_ModEnd> if ( error <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> error = 0 <S2SV_ModStart> } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
106,"<S2SV_ModStart> ) ) ; if (! r_socket_http_answer ( s, code, rlen ) ) { printf ( ""HTTP/1.1 403 Forbidden\\r\\n"" ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s, ""User-Agent: <S2SV_blank> radare2 <S2SV_blank> "" R2_VERSION ""\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n"" ""Content-Length: <S2SV_blank> %i\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n"", host, ( int ) strlen ( data ) ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s, ""POST <S2SV_blank> /%s <S2SV_blank> HTTP/1.0\\r\\n"" ""User-Agent: <S2SV_blank> radare2 <S2SV_blank> "" R2_VERSION ""\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n"", host, ( int ) strlen ( data ) ) ; free (",0
107,"<S2SV_ModStart> L ) ; if ( ( c == LUA_SIGNATURE [ 0 ] ) || ( c == LUA_SIGNATURE [ 1 ] ) ) luaU_undump : luaY_parser ) ( L, p -> z, & p -> buff, p -> name ) ; else if ( c == LUA_SIGNATURE [ 0 ] ) { luaU_undump ( L, p -> z, & p -> buff, p -> name ) ; tf = ( ( c == LUA_SIGNATURE [ 1 ] )? luaU_undump : luaY_parser ) ( L, p -> z, & p -> buff, p -> name ) ; } else { luaF_newLclosure ( L, 0, hvalue ( gt ( L ) ) ) ; cl = luaF_newLclosure ( L, tf -> nups, hvalue ( gt ( L ) ) ) ; for ( i = 0 ; i < tf -> nups ; i ++ ) cl -> l. upvals [ i ] = luaF_newupval ( L, L -> top ) ; setclvalue ( L, L -> top, cl",0
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ip_options_get_from_user ( struct <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> optlen && copy_from_user ( & opt -> opt, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } <S2SV_ModEnd> return ip_options_get_finish (",0
110,"<S2SV_ModStart> dl = kmalloc ( size <S2SV_ModEnd>, GFP_KERNEL )",0
111,"<S2SV_ModStart> : ND_PRINT ( ( ndo, ""[|truncated]"" <S2SV_ModEnd> ) ) ;",0
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> int rpki_rtr_pdu_print ( ndo <S2SV_ModStart> case RPKI_RTR_END_OF_DATA_PDU : ND_PRINT ( ( ndo, ""%sRPKI-RTRv%u, <S2SV_blank> %s <S2SV_blank> PDU <S2SV_blank> (%u), <S2SV_blank> length: <S2SV_blank> %u"", indent_string ( 8 ), pdu_header -> version, pdu_header -> pdu_type, pdu_len ) ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_PRINT ( ( ndo, ""%sSession <S2SV_blank> ID: <S2SV_blank> 0x%04x"", indent_string ( 2 ), EXTRACT_16BITS ( pdu_header -> u. session_id ) )",0
113,"<S2SV_ModStart> struct rose_facilities_struct facilities ; unsigned <S2SV_ModStart>, len ; if ( skb -> len < 4 ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } <S2SV_ModStart>! rose_parse_facilities ( skb -> data <S2SV_ModEnd> + len + <S2SV_ModStart> + 4, & facilities ) ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) )",0
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,"<S2SV_ModStart> ""E529: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; else if ( term_is_gui ( T_NAME ) ) { if ( gui. in_use ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( set_termname ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> termcap"" ) ; else if ( term_is_gui ( T_NAME ) ) { if ( gui. in_use ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( set_termname ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> termcap"" ) ; else if ( term_is_gui ( T_NAME ) ) { if ( gui. in_use ) errmsg = ( char_u",0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
117,"<S2SV_ModStart> ) ; struct o2nm_cluster * cluster <S2SV_ModEnd> = to_o2nm_cluster_from_node ( <S2SV_ModStart> ; } write_lock ( & cluster -> cl_nodes_lock ) ; if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else { rb_link_node ( & node -> nd_ip_node, parent, p ) ; write_unlock ( & cluster -> cl_nodes_lock ) ; if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else { rb_link_node ( & node -> nd_ip_node, parent, p ) ; } write_unlock ( & cluster -> cl_nodes_lock ) ; if ( ret ) return ret ; memcpy ( & node -> nd_ipv4_address, & ipv4",0
118,"<S2SV_ModStart> case BSD_AFNUM_ISO : if (! ND_TTEST2 ( * p ) ) { ND_PRINT ( ( ndo, ""[|null]"" ) ) ; return ( NULL_HDRLEN ) ; } <S2SV_ModStart> case BSD_AFNUM_APPLETALK : atalk_print ( ndo, p, length ) ; if (! ND_TTEST2 ( * p ) ) { ND_PRINT ( ( ndo, ""[|null]"" ) ) ; return ( NULL_HDRLEN ) ; }",0
119,"<S2SV_ModStart> == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } } for ( ; ; ) { if ( src [ 0 ] == '\\0' ) { break ; } else if ( src [ 0 ] == '.' ) { src ++ ; continue ; } else if ( src [ 0 ] == '/' ) { src ++ ; continue ; } else if ( src [ 0 ] == '.' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } } if ( separator ) * dest ++ = '/' ; while ( * src!= '\\0' && * src!= '/' ) { * dest ++ = * src ++ ; } if ( dest == a -> name ) { if ( separator ) * dest ++ = '.' ;",0
120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TPM_RC <S2SV_ModEnd> tpm_kdfa ( TSS2_SYS_CONTEXT <S2SV_ModStart> { TPM2B_DIGEST tmpResult ; TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2 ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT8 * tpm2b_i_2Ptr = & tpm2b_i_2. t. buffer [ 0 ] ; int i, j ; UINT16 bytes = bits / 8 ; bitsSwizzled = string_bytes_endian_convert_32 ( bits ) ; * ( UINT32 * ) tpm2bBitsPtr = bitsSwizzled ; for ( i = 0 ; i < tpm2bLabel. t. size ; i ++ ) { i_Swizzled = string_bytes_endian_convert_32 ( i ) ; * ( UINT32 * ) tpm2b_i_2Ptr = i_Swizzled ; * ( UINT32 * ) t",0
121,"<S2SV_ModStart> size_t size ; if ( width > JAS_IMG_MAX_WIDTH || height > JAS_IMG_MAX_HEIGHT ) { goto error ; } <S2SV_ModStart> 0 ) ||! jas_safe_intfast32_add ( tlx, cmpt -> width_, 0 ) ||! jas_safe_intfast32_add ( tly, cmpt -> height_, 0 ) ||! jas_safe_intfast32_add ( tlx, cmpt -> tly_, 0 ) ||! jas_safe_intfast32_add ( tly, cmpt -> height_, 0 ) ) { goto error ; } if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } cmpt -> stream_ = ( inmem )? jas_stream_memopen2 ( 0, size ) : jas_stream_tmpfile",0
122,<S2SV_ModStart> s ) { if ( s > UINT32_MAX / sizeof ( size_t ) ) { return ( malloc ( ( size_t ) ( UINT32_MAX / sizeof ( size_t ) ) ) ) ; },0
123,"<S2SV_ModStart> ; if ( WARN_ON_ONCE (! mutex_is_locked ( & rcd -> mutex ) ) ) { ret = - EBUSY ; goto bail ; } ucmd = ( const struct qib_cmd __user * ) data ; if ( copy_from_user ( & cmd. type, & ucmd -> type, sizeof ( cmd. type ) ) ) { ret = - EFAULT ; goto bail ; } copy = sizeof ( cmd. cmd ) ; dest = & cmd. cmd. recv_ctrl ; src = & ucmd -> cmd. recv_ctrl ; break ; case QIB_CMD_CTXT_INFO : copy = sizeof ( cmd. cmd. ctxt_info ) ; dest = & cmd. cmd. ctxt_info ; src = & ucmd -> cmd. ctxt_info ; break ; case QIB_CMD_TID_UPDATE : case QIB_CMD_TID_FREE : copy = sizeof ( cmd. cmd. tid_info ) ; dest = & cmd. cmd. tid_info ; src = & ucmd -> cmd. tid_info ; break ; case QIB_CMD_SET_PART_KEY : copy = sizeof ( cmd. cmd",0
124,"<S2SV_ModStart> ""UnexpectedEndOfFile"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
125,<S2SV_ModStart> peer ) ; spin_unlock_bh ( & net -> nsid_lock ) ;,0
126,<S2SV_ModStart> ++ ) { if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i + 1 ; } } else if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i + 1 ; } } else if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i + 1 ; } } else if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i,0
127,"<S2SV_ModStart> ) ) { if (! POKE_UINT8 ( c_id_subtype ) && POKE_BYTES ( c_id, c_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_BYTES ( p_id, p_id_",0
128,"<S2SV_ModStart> flags & FLAG_MATCHED && ( pc + asn1_op_lengths [ op ] > datalen ) ) { flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; } <S2SV_ModStart> ) || ( pc + asn1_op_lengths [ op ] > datalen ) ) { flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; } if ( unlikely ( dp > datalen ) ) { pr_debug ( ""next_op: <S2SV_blank> pc=\\e[32m%zu\\e[m/%zu <S2SV_blank> dp=\\e[33m%zu\\e[m/%zu <S2SV_blank> C=%d <S2SV_blank> J=%d\\n"", pc, datalen, csp, jsp ) ; goto next_op ; }",0
129,"<S2SV_ModStart> = sizeof ( struct sctp_association ) ; memset ( & sp -> assocparams, 0, sizeof ( struct sctp_sasoc_params ) ) ; memset ( & sp -> rtoinfo, 0, sizeof ( struct sctp_retrans_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
130,"<S2SV_ModStart> int mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModEnd> * s, <S2SV_ModStart>, 4 ) ; if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> profile = 0 ; s -> avctx -> level = 0 ; } else if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> profile = 0 ; s -> avctx -> level = 0 ; } else { s -> avctx -> profile = 0 ; s -> avctx -> level = 0 ; }",0
131,"<S2SV_ModStart> + MIDQ_DATA_BUFF ; readw ( mpu -> dev -> MIDQ + JQS_wTail )!= readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) { u16 wTmp, val ; val = readw ( pwMIDQData + 2 * readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; wTmp",0
132,"<S2SV_ModStart> rule ) ; if ( result < 0 ) { security_filter_rule_destroy ( entry -> lsm [ lsm_rule ]. rule ) ; return result ; } result = security_filter_rule_init ( entry -> lsm [ lsm_rule ]. type, Audit_equal, args, & entry -> lsm [ lsm_rule ]. rule ) ; if ( result < 0 ) { security_filter_rule_destroy ( entry -> lsm [ lsm_rule ]. rule ) ; return result ; }",0
133,<S2SV_ModStart> file ) ; file_sb_list_del_nolock <S2SV_ModEnd> ( file ),0
134,"<S2SV_ModStart> GLOBALS_ARE_RESET ( ) ; if ( ke -> nonce == 0 ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; release_md ( ke -> md ) ; return ; } if ( ke -> nonce == 0 ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; release_md ( ke -> md ) ; return ; } if ( ke -> nonce == 0 ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; release_md ( ke -> md ) ; return ; } if ( ke -> nonce == 0 ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; release_md ( ke -> md ) ; return ; }",0
135,"<S2SV_ModStart> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
136,"<S2SV_ModStart>, size_t * acl_len <S2SV_ModEnd> ) { __be32 <S2SV_ModStart> int status ; struct kvec * iov = req -> rq_rcv_buf. head <S2SV_ModEnd> ; int status <S2SV_ModStart> ; int status ; if ( ( status = decode_op_hdr ( xdr, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen <S2SV_ModStart> ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", <S2SV_ModStart> ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n""",0
137,<S2SV_ModStart> frag_hdr_sz ) ; if ( unlikely ( unfrag_ip6hlen > MAX_FRAGMENT_IP6HLEN ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; } <S2SV_ModStart> frag_hdr_sz ) ; if ( unlikely ( unfrag_ip6hlen > MAX_FRAGMENT_IP6HLEN ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; },0
138,<S2SV_ModStart> while ( ( ptr -> nameURN [ i ]!= 0 ) && ( i < to_read ) ) { i ++ ; } if ( i == to_read ) { gf_free ( tmpName ) ; return GF_ISOM_INVALID_FILE ; } if ( i == to_read ) { gf_free ( tmpName ) ; return GF_ISOM_INVALID_FILE ; } if ( i == to_read - 1 ) { ptr -> nameURN = ( char * ) gf_malloc ( sizeof ( char ) * ( i + 1 ) ) ; if (! ptr -> nameURN ) { gf_free ( tmpName ) ; return GF_OUT_OF_MEM ; } ptr -> nameURN = ( char * ) gf_malloc ( sizeof ( char ) * ( i + 1 ) ) ; if (! ptr -> nameURN ) { gf_free ( tmpName ) ; return GF_OUT_OF_MEM ; } ptr -> nameURN = ( char * ) gf_malloc ( sizeof ( char ) * ( i + 1 ) ) ; if (! ptr -> location ) { gf_free ( tmpName ) ; return GF_OUT_OF,0
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,"<S2SV_ModStart> ) ; for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { const int width = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> w, s -> hsub ) : inlink -> w ; const int height = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> h, s -> vsub ) : inlink -> h ; step = s -> max_step [ plane ] ; outrow = out -> data [ plane ] + ( width - 1 ) * step ; inrow = in -> data [ plane ] + ( height - 1 ) * step ; for ( i = 0 ; i < height ; i ++ ) { uint16_t * outrow16 = ( uint16_t * ) outrow ; uint16_t * inrow16 = ( uint16_t * ) inrow ; for ( j = 0 ; j < width ; j ++, outrow16 ++ ) outrow16 [ j ] = in",0
141,"<S2SV_ModStart> '/' ) { if ( strlen ( pszFileName ) > ODBC_FILENAME_MAX ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } <S2SV_ModStart> ; if ( strlen ( pszFileName ) > ODBC_FILENAME_MAX ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } <S2SV_ModStart> ; if ( strlen ( pszFileName ) > ODBC_FILENAME_MAX ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( pszFileName ) > ODBC_FILENAME_MAX ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; }",0
142,"<S2SV_ModStart> { owner = <S2SV_ModEnd> stok ( auth <S2SV_ModStart>, "":"", & owner ) ; if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = userToID ( owner ) ; } } if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = userToID ( owner ) ; } } if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else { gid = groupToID ( group ) ; } } if ( perms && snumber ( perms ) ) { gid = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; }",0
143,"<S2SV_ModStart> ; if ( nelements > CDF_PROP_LIMIT ) { DPRINTF ( ( ""CDF_PROP_LIMIT <S2SV_blank> exceeds <S2SV_blank> maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> (%u)\\n"", nelements, CDF_PROP_LIMIT ) ) ; goto out ; } <S2SV_ModStart> if ( nelements > CDF_PROP_LIMIT ) { DPRINTF ( ( ""CDF_PROP_LIMIT <S2SV_blank> exceeds <S2SV_blank> maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> (%u)\\n"", nelements, CDF_PROP_LIMIT ) ) ; goto out ; } <S2SV_ModStart> 0 ) { DPRINTF ( ( ""CDF_PROP_LIMIT <S2SV_blank> exceeds <S2SV_blank> maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> (%u)\\n"", nelements, CDF_PROP_LIMIT ) ) ; goto out ; } if ( nelements > CDF_PROP_LIMIT ) { DPRINTF ( ( ""CDF_PROP_LIMIT <S2SV_blank> exceeds <S2SV_blank> maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> (%u)\\n"", nelements, CDF_PROP_LIMIT ) ) ; goto out ; } <S2SV_ModStart> 0 ) { DPRINTF ( ( ""CDF_PROP_LIMIT <S2SV_blank> exceeds <S2SV_blank> maximum <S2SV_blank>",0
144,<S2SV_ModStart> ; if ( inet -> inet_opt. opt. <S2SV_ModEnd> srr ) daddr,0
145,<S2SV_ModStart> ) ) { if ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
146,"<S2SV_ModStart> struct eigrp_tlv_at_ext_t * eigrp_tlv_at_ext ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
147,"<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER int number_aau ; if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ) ; return NULL ; } <S2SV_ModEnd> number_aau = ( <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; if ( number_aau < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ) ; addr = hmm_alloc ( & hmm_d, number_aau ) ; # endif",0
148,"<S2SV_ModStart> ; int indexes ; read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } indexes = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export",0
149,"<S2SV_ModStart> ) ; } if ( strcmp ( ptr, '/' ) == 0 ) { rw_exit ( & sdvp -> sdev_contents ) ; devzvol_create_pool_dirs ( dvp ) ; rw_enter ( & sdvp -> sdev_contents, RW_READER ) ; return ( devname_readdir_func ( dvp, uiop, cred, eofp, 0 ) ) ; } ptr = strchr ( ptr + 1, '/' ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_",0
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; <S2SV_ModEnd> return ext4_split_extent (,0
151,"<S2SV_ModStart> = HASH_DISABLED ; } else return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1",0
152,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
153,"<S2SV_ModStart> = 0.0 ; uint32 <S2SV_ModEnd> nstrips = 0 <S2SV_ModStart> = 0.0 ; if ( nstrips < 0 ) { TIFFError ( ""loadImage"", ""No <S2SV_blank> strips <S2SV_blank> in <S2SV_blank> the <S2SV_blank> image\\n"" ) ; return - 1 ; } <S2SV_ModStart> = buffsize ; if ( buffsize < 0 ) { TIFFError ( ""loadImage"", ""No <S2SV_blank> scanlines <S2SV_blank> in <S2SV_blank> the <S2SV_blank> image\\n"" ) ; return - 1 ; } <S2SV_ModStart> = buffsize ; if ( buffsize < 0 ) { TIFFError ( ""loadImage"", ""No <S2SV_blank> scanlines <S2SV_blank> in <S2SV_blank> the <S2SV_blank> image\\n"" ) ; return - 1 ; } <S2SV_ModStart> ""loadImage"", ""No <S2SV_blank> scanlines <S2SV_blank> in <S2SV_blank> the <S2SV_blank> image\\n"" ) ; if ( buffsize < 0 ) { TIFFError ( ""loadImage"", ""No <S2SV_blank> scanlines <S2SV_blank> in <S2SV_blank> the <S2SV_blank> image\\n"" ) ; return - 1 ; } <S2SV_ModStart> = buffsize ; if ( buffsize < 0 ) { TIFFError ( ""loadImage"", ""No <S2SV_blank> scanlines <S2SV_blank> in <S2SV_blank> the <S2SV_blank> image\\n"" ) ; return - 1 ; }",0
154,"<S2SV_ModStart> = 0 ; # if CONFIG_VP8_ENCODER if ( strcmp ( global -> codec -> name, ""vp8"" ) == 0 ) { ctrl_args = vp8_args ; ctrl_args_map = vp8_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif <S2SV_ModStart> } else if ( strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & arg, & fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm = 0 ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm =",0
155,"<S2SV_ModStart> ; if ( resp -> len < 1 ) fatal ( ""%s: <S2SV_blank> sshbuf_put_u32: <S2SV_blank> %d"", __func__, resp -> len ) ;",0
156,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
157,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
158,"<S2SV_ModStart> if ( ( gr -> gr_ctx. value = kmalloc ( sizeof ( gss_union_ctx_id_desc ), GFP_KERNEL ) ) == NULL ) { badauth ( gr -> gr_major, gr -> gr_minor, rqst -> rq_xprt ) ; gd -> ctx = GSS_C_NO_CONTEXT ; goto errout ; } <S2SV_ModStart> if ( ( gr -> gr_ctx. value = mem_alloc ( sizeof ( gss_union_ctx_id_desc ), GFP_KERNEL ) ) ) == NULL ) { badauth ( gr -> gr_major, gr -> gr_minor, rqst -> rq_xprt ) ; gd -> ctx = GSS_C_NO_CONTEXT ; goto errout ; } <S2SV_ModStart> if ( ( gr -> gr_ctx. value = mem_alloc ( sizeof ( gss_union_ctx_id_desc ), GFP_KERNEL ) ) ) == NULL ) { badauth ( gr -> gr_major, gr -> gr_minor, rqst -> rq_xprt ) ; gd -> ctx = GSS_C_NO_CONTEXT ; goto errout ; }",0
159,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size ) ; <S2SV_ModStart> out ; } neh = ext_block_hdr ( bh ) ; if ( ext_depth ( inode ) ) neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( inode, 0 ) ) ; else neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, 0 ) ) ; neh -> eh_magic = EXT4_EXT_MAGIC ; ext4_extent_block_csum_set ( inode, neh ) ; if ( ext_depth ( inode ) ) neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( inode, 0 ) ) ; else neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, 0 )",0
160,"<S2SV_ModStart> } if (! verify_checks ( c, preverify_ok, callback_ctx ) ) { SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } return 1 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
161,"<S2SV_ModStart> ; int ret ; if ( kuid_has_mapping ( parent_ns, owner ) || kgid_has_mapping ( parent_ns, group ) ) return - EPERM",0
162,"<S2SV_ModStart> ; if (! memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { rc = - 1 ; at91_aes_cleanup ( ) ; memset ( cmac_key, 0, sizeof ( cmac_key ) ) ; memset ( cipher_key, 0, sizeof ( cipher_key ) ) ; memset ( iv, 0, sizeof ( iv ) ) ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { rc = - 1 ; at91_aes_cleanup ( ) ; memset ( cmac_key, 0, sizeof ( cmac_key ) ) ; memset ( cipher_key, 0, sizeof ( cipher_key ) ) ; memset ( iv, 0, sizeof ( cipher_key ) ) ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { rc = - 1 ; at91_aes_cleanup ( ) ; memset ( cmac_key, 0, sizeof ( cm",0
163,"<S2SV_ModStart> } if ( s -> bit_depth > c -> nreslevels ) { av_log ( s -> avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> is <S2SV_blank> invalid\\n"", c -> nreslevels ) ; return AVERROR_INVALIDDATA ; } if ( s -> bit_depth > c -> nreslevels ) { av_log ( s -> avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> is <S2SV_blank> invalid\\n"", c -> nreslevels ) ; return AVERROR_INVALIDDATA ; } c -> nreslevels2decode = c -> nreslevels - s -> bit_depth ; c -> log2_cblk_width = ( bytestream2_get_byteu ( & s -> g ) & 15 ) + 2 ; c -> log2_cblk_height = ( bytestream2_get_byteu ( & s -> g ) & 15 ) + 2 ; if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank>",0
164,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
165,<S2SV_ModStart> ts_status ; bool <S2SV_ModEnd> is_drop_n_account = false <S2SV_ModStart> is_drop_n_account = false <S2SV_ModEnd> ; copy_skb =,0
166,"<S2SV_ModStart> SCTP_STATE_ESTABLISHED ) { if (! list_empty ( & asoc -> peer. transport_addr_list ) ) { list_for_each_entry ( trans, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) { sctp_assoc_rm_peer ( asoc, trans ) ; continue ; } } } else { list_for_each_addr ( trans, & asoc -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) { sctp_assoc_rm_peer ( asoc, trans ) ; continue ; } if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) { sctp_assoc_rm_peer ( asoc, trans ) ; continue ; }",0
167,<S2SV_ModStart> return false ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
168,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> lsm_set_label_at ( int <S2SV_ModStart> lsm_label ) { <S2SV_ModEnd> int ret = <S2SV_ModStart> ( name, ""none"" ) == 0 ) goto out ; if ( strcmp ( name, ""AppArmor"" ) == 0 ) on_exec = 0 ; if ( on_exec ) { labelfd = openat ( procfd, ""self/attr/exec"", O_RDWR ) ; } else { labelfd = openat ( procfd, ""self/attr/current"", O_RDWR ) ; } if ( labelfd < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out ; } size = sprintf ( command, ""changeprofile <S2SV_blank> %s"", lsm_label ) ; if ( size < 0 ) { SYSERROR ( ""Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> apparmor <S2SV_blank> profile"" ) ; ret = - 1 ; goto out ; } size = sprintf ( command, ""changeprofile <S2SV_blank> %s"", lsm_label ) ; if ( size < 0 )",0
169,<S2SV_ModStart> ) ) { if ( comp -> dx > ( OPJ_UINT32 ) pi -> dx ) { if ( comp -> dy > ( OPJ_UINT32 ) pi -> dy ) { if ( comp -> dx > ( OPJ_UINT32 ) pi -> dx ) { if ( comp -> dy > ( OPJ_UINT32 ) pi -> dy ) { if ( comp -> dx > ( OPJ_UINT32 ) pi -> dx ) { break ; } } else { if ( comp -> dy > ( OPJ_UINT32 ) pi -> dx ) { if ( comp -> dy > ( OPJ_UINT32 ) pi -> dy ) { if ( comp -> dx > ( OPJ_UINT32 ) pi -> dx ) { if ( comp -> dx > ( OPJ_UINT32 ) pi -> dx ) { if ( comp -> dx > ( OPJ_UINT32 ) pi -> dx ) { break ; } } else { if ( comp -> dy > ( OPJ_UINT32 ) pi -> dy ) { if ( comp -> dx > ( OPJ_UINT32 ) pi -> dx ) ) { if ( comp -> dy > ( OPJ,0
170,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
171,"<S2SV_ModStart> cpi ) { if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. bits_left -= bits_used ; cpi -> twopass. bits_left = MAX ( cpi -> twopass. bits_left, 0 ) ; } else if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. bits_left -= bits_used ; cpi -> twopass. bits_left = MAX ( cpi -> twopass. bits_left, 0 ) ; } else { cpi -> twopass. bits_left -= bits_used ; cpi -> twopass. bits_left = MAX ( cpi -> twopass. bits_left, 0 ) ; } <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> -= bits_used ; cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } <S2SV_ModEnd> <S2SV_null",0
172,"<S2SV_ModStart> charlen ; } curqlevel = tmpql = ( lquery_level * ) palloc0 ( ITEMSIZE * num ) ; ptr = buf ; while ( * ptr ) { charlen = pg_mblen ( ptr ) ; if ( charlen == 1 ) { if ( t_iseq ( ptr, '.' ) ) num ++ ; else if ( t_iseq ( ptr, '|' ) ) numOR ++ ; } ptr += charlen ; } if ( charlen == 1 ) { if ( t_iseq ( ptr, '!' ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAITDELIM ; curqlevel -> numvar = 1 ; } else if ( charlen == 1 && t_iseq ( ptr, '!' ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAITOPEN ; else",0
173,"<S2SV_ModStart> header, struct mb2_cache_entry <S2SV_ModEnd> * * pce <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> struct mb_cache * <S2SV_ModStart> ; struct mb2_cache_entry <S2SV_ModEnd> * ce ; <S2SV_ModStart> : ce = mb2_cache_entry_find_first ( ext4_mb_cache, hash ) ; while ( ce ) { struct buffer_head * bh ; if ( IS_ERR ( ce ) ) { if ( PTR_ERR ( ce ) == - EAGAIN ) break ; } bh = sb_bread ( EXT4_SB ( inode -> i_sb ), ce -> e_block ) ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; } else if ( le32_to_cpu ( BHDR ( bh ) -> h_refcount ) >= EXT4_XATTR_REFCOUNT_MAX ) { ea_idebug ( inode, ""block <S2SV_blank> %lu <S2SV_blank> refcount <S2SV_blank> >=",0
174,"<S2SV_ModStart> data_offset ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> offset ; int <S2SV_ModEnd> pkt_len ; char <S2SV_ModStart> ; pkt_len = <S2SV_ModStart> ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart>, pkt_len, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> FALSE ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth ->",0
175,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
176,"<S2SV_ModStart> > 0 ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } <S2SV_ModEnd> if ( left",0
177,<S2SV_ModStart> ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
178,"<S2SV_ModStart> - ENOMEM ; ret = - EINVAL ; if ( hdr. size_in < 0 ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in > size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ; ret = - EFAULT ; goto out ; } if ( hdr. size_in < size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ) { ret = - EFAULT ; goto out ; } if ( ret ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu <S2SV_blank> > <S2SV_blank> %zu\\n"", __func__, returned_size ) ; goto out",0
179,<S2SV_ModStart> int hstartcol ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * dstptr2 ; ++ dstptr2 ; ++ srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = & a [ hstartcol * stride ] ; n = m ; dstptr = buf ; srcptr = & a [ hstartcol * stride ] ; dstptr = & a [ h,0
180,"<S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
181,"<S2SV_ModStart> 0x07 char magick [ 20 <S2SV_ModEnd> ] ; Image <S2SV_ModStart> ) ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( Cor",0
182,"<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_flags & MS_RDONLY ) { struct ext2_super_block * es = sbi -> s_es ; spin_lock ( & sbi -> s_lock ) ; es -> s_state = cpu_to_le16 ( sbi -> s_mount_state ) ; ext2_sync_super ( sb, es, 1 ) ; } db_count = sbi -> s_gdb_count ; for ( i = 0 ; i < db_count ; i ++ ) if ( sbi -> s_group_desc [ i ] ) brelse ( sbi -> s_group_desc [ i ] ) ; if ( sbi -> s_group_desc [ i ] ) brelse ( sbi -> s_group_desc [ i ] ) ; kfree ( sbi -> s_group_desc [ i ] ) ; brelse ( sbi -> s_debts ) ; percpu_counter_destroy ( & sbi -> s_freeinodes_counter ) ; percpu_counter_destroy ( & sbi -> s_dirs_counter ) ; brel",0
183,"<S2SV_ModStart> 0 ]. desc ; if ( usbinterface -> num_altsetting < 1 ) { dev_err ( & usbinterface -> dev, ""No <S2SV_blank> endpoints <S2SV_blank> for <S2SV_blank> this <S2SV_blank> interface\\n"" ) ; error = - ENODEV ; goto err_free_devs ; } dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
184,"<S2SV_ModStart> ) ; } if ( strcmp ( command, ""set"" ) == 0 ) bandwidth_set ( pid, dev, down, up ) ; else if ( strcmp ( command, ""clear"" ) == 0 ) bandwidth_remove ( pid, dev ) ; else if ( strcmp ( command, ""clear"" ) == 0 ) bandwidth_remove ( pid, dev ) ; else if ( strcmp ( command, ""clear"" ) == 0 ) bandwidth_remove ( pid, dev ) ; else if ( strcmp ( command, ""set"" ) == 0 ) bandwidth_set ( pid, dev, down, up ) ; else if ( strcmp ( command, ""clear"" ) == 0 ) bandwidth_set ( pid, dev, down, up ) ; else if ( strcmp ( command, ""clear"" ) == 0 ) bandwidth_remove ( pid, dev ) ; else if ( strcmp ( command, ""clear"" ) == 0 ) bandwidth_remove ( pid, dev ) ; else if ( strcmp ( command, ""clear"" ) == 0 ) bandwidth_remove ( pid, dev ) ; else if ( strcmp ( command, ""clear"" ) == 0 ) bandwidth_remove ( pid, dev ) ; else if ( strcmp ( command, ""clear",0
185,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent == NULL ) return NULL ; return to_o2nm_cluster ( node -> nd_item. <S2SV_ModEnd> ci_parent -> ci_parent <S2SV_ModStart> ci_parent ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
186,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
187,"<S2SV_ModStart> ; if ( avio_read_bit ( pb ) < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> sample <S2SV_blank> rate <S2SV_blank> received"" ) ; return AVERROR ( EINVAL ) ; }",0
188,"<S2SV_ModStart> ; if ( nelements > CDF_MAX_ENTRIES ) { DPRINTF ( ( ""CDF_MAX_ENTRIES <S2SV_blank> exceeded: <S2SV_blank> %u\\n"", nelements ) ) ; goto out ; } <S2SV_ModStart> ; if ( nelements > CDF_MAX_ENTRIES ) { DPRINTF ( ( ""CDF_MAX_ENTRIES <S2SV_blank> exceeded: <S2SV_blank> %u\\n"", nelements ) ) ; goto out ; } nelements = CDF_GET_ENTRIES ( p ) ; if ( nelements > CDF_MAX_ENTRIES ) { DPRINTF ( ( ""CDF_MAX_ENTRIES <S2SV_blank> exceeded: <S2SV_blank> %u\\n"", nelements ) ) ; goto out ; } if ( nelements > CDF_MAX_ENTRIES ) { DPRINTF ( ( ""CDF_MAX_ENTRIES <S2SV_blank> exceeded: <S2SV_blank> %u\\n"", nelements ) ) ; goto out ; } <S2SV_ModStart> ) ) ; if ( nelements > CDF_MAX_ENTRIES ) { DPRINTF ( ( ""CDF_MAX_ENTRIES <S2SV_blank> exceeded: <S2SV_blank> %u\\n"", n",0
189,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> # ifdef <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> # ifdef DEBUG_TIMING <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = & <S2SV_ModStart> ntpd_time_stepped ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
190,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> fd = xfmkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> dir ) ) == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( tmpname == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; return NULL ; } if ( tmpname == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; copyfile ( lockfd, fileno ( fd ) ) ; tmp_file = tmpname ; return fd ; } if ( tmpname == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; return NULL ; } if ( tmpname == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; return NULL",0
191,"<S2SV_ModStart> prev ) ; if ( n -> mnt. mnt_flags & MNT_NOSUID ) { mnt -> mnt. mnt_flags |= MNT_NOSUID ; attach_shadowed ( mnt, parent, shadows ) ; touch_mnt_namespace ( n ) ; } else if ( n -> mnt. mnt_flags & MNT_NOSUID ) { mnt -> mnt. mnt_flags |= MNT_NOSUID ; if ( n -> mnt. mnt_flags & MNT_NOSUID ) { mnt -> mnt. mnt_flags |= MNT_NOSUID ; detach_shadowed ( mnt, parent, shadows ) ; touch_mnt_namespace ( n ) ; } } else if ( n -> mnt. mnt_flags & MNT_NOSUID ) { mnt -> mnt_flags &= ~ MNT_NOSUID ; if ( n -> mnt. mnt_flags & MNT_NOSUID ) { mnt -> mnt_flags &= ~ MNT_NOSUID ; }",0
192,"<S2SV_ModStart> next ) ; if ( unlikely ( next -> es | prev -> es ) ) loadsegment ( es, next -> es ) ; if ( unlikely ( next -> ds | prev -> ds ) ) loadsegment ( ds, next -> ds ) ; if ( unlikely ( fsindex | next -> fsindex | prev -> fs ) ) { load_fs_index ( next -> fsindex ) ; if ( fsindex ) prev -> fs = 0 ; } if ( unlikely ( gsindex | next -> gsindex | prev -> gs ) ) { load_gs_index ( next -> gsindex ) ; if ( gsindex ) prev -> gs = 0 ; } if ( next -> fs ) wrmsrl ( MSR_FS_BASE, next -> fs ) ; prev -> fsindex = fsindex ; if ( unlikely ( gsindex | next -> gsindex | prev -> gs ) ) { load_gs_index ( next -> gsindex ) ; if ( gsindex ) prev -> gs = 0 ; } if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs",0
193,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
194,"<S2SV_ModStart> ; if ( ps_codec -> i4_pps_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; ps_pps -> i1_sps_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 1 ) ; ps_pps -> i1_sps_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 2 ) ; ps_pps -> i1_sps_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 3 ) ; ps_pps -> i1_sps_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 3 ) ; ps_pps -> i1_sps_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 3 ) ; ps_pps -> i1_s",0
195,<S2SV_ModStart> << NM_VECTOR ) | <S2SV_ModEnd> ( 1u <<,0
196,"<S2SV_ModStart> { static char temp <S2SV_ModEnd> [ NFSX_V3FHMAX + <S2SV_ModStart> 1 ] ; temp [ sizeof ( temp ) - 1 ] = '\\0' ; spacep = strchr ( temp,'<S2SV_blank>') ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp, fsid. Fsid_dev. Major, fsid. Fsid_dev. Minor ) ) ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp, ( long ) ino ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", fsid. Fsid_dev. Major, fsid. Fsid_dev. Minor ) ) ; } if ( sfsname ) { static char temp [ NFSX_V3FHMAX + 1 ] ; temp [ sizeof ( temp ) - 1 ] = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp, ( long ) ino )",0
197,"<S2SV_ModStart> int transhdrlen, unsigned int <S2SV_ModEnd> flags ) { <S2SV_ModStart> = SKB_GSO_UDP ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; __skb_queue_tail ( & skb -> sk_write_queue, skb ) ; return 0 ; } if ( skb_is_gso ( skb ) ) { struct frag_hdr fhdr ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_UDP ; ipv6_select_ident ( & fhdr ) ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; __skb_queue_tail ( & skb -> sk_write_queue, skb ) ; return 0 ; } if ( skb_is_gso ( skb ) ) { struct frag_hdr fhdr ; skb_shinfo ( skb ) -> gso_size = ( mtu - fragheaderlen - sizeof ( struct frag_hdr ) ) & ~ 7 ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_",0
198,"<S2SV_ModStart> res ) return res <S2SV_ModEnd> ; res = <S2SV_ModStart> ; res = register_netdevice ( hsr_dev ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_A ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 1 ], HSR_PT_SLAVE_B ) ; if ( res ) goto fail ; mod_timer ( & hsr -> announce_timer, jiffies + msecs_to_jiffies ( 500 ) ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_MASTER ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 1 ], HSR_PT_SLAVE_B ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_MASTER ) ; if ( res ) goto fail ; mod_timer ( & hsr -> announce_timer, jiffies",0
199,"<S2SV_ModStart> ) ) { if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ) ) { if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TO",0
200,"<S2SV_ModStart> void vp9_setup_dst_planes ( <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> src ) { const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride, src -> uv_stride } ; const int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
201,<S2SV_ModStart> ++ ) ; if ( args -> count!= args -> count ) return 0 ; hdr = ( void * ) p - head -> iov_base ; dlen = head -> iov_len + tail -> iov_len - hdr ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; hdr = ( void * ) p - head -> iov_base ; dlen -= hdr ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; v = 0 ; while ( len > rqstp -> rq_vec [ v ]. iov_len ) { len -= rqstp -> rq_vec [ v ]. iov_len ) { len -= rqstp -> rq_vec [ v ]. iov_len ; v ++ ; rqstp -> rq_vec [ v ]. iov_base = ( void * ) p - head -> iov_base ; v ++ ; rqstp -> rq_vec [ v ].,0
202,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { unsigned long eip ; <S2SV_ModStart> case 2 : eip = ( u16 ) dst ; break ; case 4 : eip = ( u32 ) dst ; break ; case 8 : eip = ( u32 ) dst ; break ; case 16 : eip = ( u16 ) dst ; break ; case 24 : eip = ( u32 ) dst ; break ; case 16 : eip = ( u16 ) dst ; break ; default : WARN ( 1, ""unsupported <S2SV_blank> eip <S2SV_blank> assignment <S2SV_blank> size\\n"" ) ; } return 1 ;",0
203,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
204,"<S2SV_ModStart> ; remaining = MIN ( <S2SV_ModStart> offset ) ; if ( remaining <= 0 ) { if ( data ) * data = g_strdup ( """" ) ; return offset ; } text = tvb_get_string_enc ( NULL, tvb, offset, remaining, ENC_UTF_16 | ENC_LITTLE_ENDIAN ) ; len = ( int ) strlen ( text ) ; proto_tree_add_string ( tree, hf_name, tvb, offset, len * 2, text ) ; if ( data ) * data = text ; else g_free ( text ) ;",0
205,"<S2SV_ModStart> == READ ) { int ret ; <S2SV_ModStart> == READ ) ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; if ( ret < 0 ) return ret ; <S2SV_ModStart> == READ ) ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; else get_block = ocfs2_dio_get_block <S2SV_ModEnd> ; return __blockdev_direct_IO",0
206,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
207,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %[^\\n]\\n"" <S2SV_ModEnd>, def,",0
208,<S2SV_ModStart> ( int ) <S2SV_ModEnd> val < 0,0
209,<S2SV_ModStart> = len ; if ( tested > len ) { * nl = 1 ; return ( 0 ) ; },0
210,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> ; int kind <S2SV_ModEnd> ; void * <S2SV_ModStart> ; char * str <S2SV_ModEnd> ; char * <S2SV_ModStart> ; mod_ty mod <S2SV_ModEnd> ; Py_ssize_t i <S2SV_ModStart> ; PyObject * o <S2SV_ModEnd> ; Py_ssize_t len <S2SV_ModStart> ; Py_ssize_t i <S2SV_ModEnd> ; assert ( <S2SV_ModStart> == ':' ) ; str = PyMem_RawMalloc ( 3 ) ; if ( str == NULL ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } len = expr_end - expr_start ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! Py_UNICODE_ISSPACE ( kind, data, i ) ) { str [ 0 ] = '(' ; memcpy ( str + 1, expr_start, len ) ; str [ len + 1 ] = ')' ; str [ len + 2 ] = 0 ; cf. cf_flags = PyCF_ONLY_AST ; fstring_name = PyUnicode_FromString ( ""<fstring>"" )",0
211,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
212,"<S2SV_ModStart> string ) { return <S2SV_ModEnd> cJSON_strcasecmp ( c <S2SV_ModStart> string ) ) { if (! cJSON_strcasecmp ( c -> string, string ) ) { c = object -> child ; break ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
213,"<S2SV_ModStart> == 0 ) { if ( key -> state == KEY_IS_POSITIVE ) set_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ; else set_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ; }",0
214,"<S2SV_ModStart> len ) ; if ( ( plen > 0 ) && ( ( * len ) && ( net_read_exact ( s, arg, * len ) == - 1 ) ) ) { printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_type, * len ) ; return - 1 ; }",0
215,"<S2SV_ModStart> & XFS_ATTR_INCOMPLETE ) { xfs_trans_log_buf ( context -> trans, bp, XFS_ERROR ( EFSCORRUPTED, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_ERROR ( EFSCORRUPTED, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_R",0
216,"<S2SV_ModStart> - EINVAL ; ktspec. tv_sec = 0 ; <S2SV_ModStart> NULL ) ; datagrams = __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, & ktspec ) ; if ( datagrams > 0 && get_compat_timespec ( & ktspec, timeout ) ) datagrams = - EFAULT ; else datagrams = __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, & ktspec ) ; if ( datagrams > 0 && put_compat_timespec ( & ktspec, timeout ) ) datagrams = - EFAULT ;",0
217,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
218,"<S2SV_ModStart> ) ; netdev_tx_t <S2SV_ModEnd> ret ; assert <S2SV_ModStart> q_num ) ; netif_tx_t <S2SV_ModEnd> ret = hns_nic_net_xmit_hw <S2SV_ModStart> ( ndev, skb, & tx_ring_data ( priv, skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_bytes += skb -> len ; } else { netif_trans_update ( ndev ) ; ret = hns_nic_net_xmit_hw ( ndev, skb, & tx_ring_data ( priv, skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_packets ++ ; } return ( netdev_tx_t ) ret <S2SV_ModEnd> ; } <S2SV_null>",0
219,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
220,<S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT_FAILURE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return EXIT,0
221,<S2SV_ModStart> ) ; RAnalOp <S2SV_ModEnd> next_op ; avr_op_analyze,0
222,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
223,<S2SV_ModStart> data ) { <S2SV_ModEnd> char * repo_config <S2SV_ModStart> ) ; } <S2SV_ModEnd> return ret ;,0
224,"<S2SV_ModStart> int validate_event ( struct perf_event * event ) { struct <S2SV_ModEnd> arm_pmu * armpmu <S2SV_ModStart> = to_arm_pmu ( <S2SV_ModEnd> event -> pmu <S2SV_ModStart> event -> pmu <S2SV_ModEnd> ) ; struct <S2SV_ModStart> ( event -> pmu <S2SV_ModEnd>!= leader_pmu || <S2SV_ModStart> event -> state < PERF_EVENT_STATE_OFF ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF && event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF && event -> attr. enable_on_exec && armpmu -> get_event_idx ( hw_events, & fake_event ) >= 0 ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF && event -> attr. enable_on_exec && armpmu -> get_event_idx ( hw_events, &",0
225,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline bool new_idmap_permitted ( struct user_namespace * user_ns, int cap_setid, struct uid_gid_map * new_map ) { if ( new_map -> nr_extents > 1 ) { u32 id = new_map -> extent [ 0 ]. lower_first ; if ( uid_gid_eq ( uid, current_fsuid ( ) ) ) return true ; } else { u32 id = new_map -> extent [ 0 ]. lower_first ; if ( cap_setid == CAP_SETUID ) { kuid_t uid = make_kuid ( user_ns -> user_ns, id ) ; if ( uid_eq ( uid, current_fsuid ( ) ) ) return true ; } else if ( cap_setid == CAP_SETGID ) { kgid_t gid = make_kgid ( user_ns -> user_ns, id ) ; if ( gid_eq ( gid, current_fsgid ( ) ) ) return true ; } else { kuid_t uid = make_kuid ( user_ns ->",0
226,"<S2SV_ModStart> ++ ) { body [ j ] = XMALLOC ( VarLenData, 1 ) ; <S2SV_ModStart> } return body <S2SV_ModEnd> ; } <S2SV_null>",0
227,"<S2SV_ModStart> * hx ; struct hexline_priv * priv <S2SV_ModEnd> ; int ret <S2SV_ModStart>, pos = 0 <S2SV_ModEnd> ; hx = <S2SV_ModStart> ; if (! hx ) return - ENOMEM ; priv = kzalloc ( sizeof ( * priv ), GFP_KERNEL ) ; if (! priv ) return - ENOMEM <S2SV_ModStart> ; if ( priv -> len > <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
228,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart>, val_l ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ptr ++ ; length -= 2 ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return",0
229,"<S2SV_ModStart> princ ) ; if ( handle -> params. realm!= NULL && strncmp ( handle -> params. realm, realm -> data, realm -> length ) == 0 && strncmp ( handle -> params. handle, c2 -> data, c2 -> data, c2 -> data, c2 -> data -> length ) == 0 && strncmp ( ""kadmin"", c1 -> data, c2 -> data -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> data -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> data, c2 -> data -> length ) == 0 && strncmp ( ""kuid"", c1 -> data, c2 -> data -> length ) == 0 && strncmp ( ""kuid"", c1 -> data, c2 -> data -> length ) == 0 && strncmp ( ""kuid"", c2 -> data, c2 -> data -> length ) == 0 && strncmp ( ""kuid"", c2 -> data, c2 -> data, c2 -> data -> length ) == 0 && strncmp ( """,0
230,"<S2SV_ModStart> * bo ; if ( bin_offset < shader_rec_offset || bin_size < shader_rec_offset || exec_size < shader_rec_offset || exec_size < uniforms_offset || args -> shader_rec_count >= UINT_MAX / sizeof ( struct vc4_shader_state ) || temp_size < exec_size ) { DRM_ERROR ( ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; goto fail ; } temp = drm_malloc_ab ( temp_size, 1 ) ; if (! temp ) { DRM_ERROR ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> storage <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> in <S2SV_blank> bin/render <S2SV_blank> CLs.\\n"" ) ; goto fail ; } if (! temp ) { DRM_ERROR ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> storage <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> in <S2SV_blank> bin/render <S2SV_blank> CLs.\\n"" ) ; goto fail ; } if ( copy_from_user ( bin, ( void __user * ) ( uintptr_t ) args -> bin_cl, args -> bin_cl_size ) ) { ret = - EFAULT ; goto fail ; }",0
231,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
232,<S2SV_ModStart> -> vm_file ) ; if ( ext4_should_dioread_nolock ( inode ) ) get_block = ext4_get_block_write ; else get_block = ext4_get_block ;,0
233,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
234,"<S2SV_ModStart> * arg ) { <S2SV_ModStart> case '\\n' : r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\t' : r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\n' : r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\t' : r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\t' : r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\t' : r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\t' : r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\t' : r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\t' : r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\t' : r_return_val_if_fail ( * arg, NULL ) ;",0
235,"<S2SV_ModStart>!= NULL ) { ND_PRINT ( ( ndo, ""%s"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; <S2SV_ModStart>!= NULL ) { ND_PRINT ( ( ndo, ""%s"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; } <S2SV_ModStart>!= NULL ) { ND_PRINT ( ( ndo, ""%s"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; if ( ep2!= NULL ) { ND_PRINT ( ( ndo, ""%s"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; ND_PRINT ( ( ndo, ""%s"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ) ; } <S2SV_ModStart>!= NULL ) { ND_PRINT ( ( ndo, ""%s"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; if ( ep2!= NULL ) { ND_PRINT ( ( ndo, ""%s"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ) ;",0
236,"<S2SV_ModStart> ; static gboolean accept_ice_connection ( GIOChannel * source, GIOCondition condition, GsmIceConnectionData * data ) { IceListenObj listener ; IceAcceptStatus status ; g_debug ( ""GsmXsmpServer: <S2SV_blank> accept_ice_connection()"" ) ; listener = data -> listener ; status = IceAcceptConnection ( listener, & status ) ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return FALSE ; } client = gsm_xsmp_client_new ( ice_conn ) ; gsm_store_add ( server -> priv -> client_store, gsm_client_peek_id ( client ), G_OBJECT ( client ) ) ; g_object_unref ( client ) ; gsm_store_add ( server -> priv -> client_store, gsm_client_peek_id ( client ), G_OBJECT ( client ) ) ; g_object_unref ( client ) ; return TRUE ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null",0
237,"<S2SV_ModStart> ; if ( unlikely (! pskb_expand_head ( skb, frag_hdr_sz, 0, GFP_ATOMIC ) ) ) goto out ;",0
238,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
239,"<S2SV_ModStart> ; break ; case SO_NODELAY : v. val = sock_flag ( sk, SOCK_NODELAY ) ; break ; case SO_REUSEADDR : v. val = sock_flag ( sk, SOCK_REUSEADDR ) ; break ; case SO_RCVBUF : v. val = sock_flag ( sk, SOCK_RCVBUF ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_REUSEADDR : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_REUSEPORT : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_REUSE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_REUSE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_REUSE",0
240,<S2SV_ModStart> ) { if ( msg -> msg_name ) { <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg_namelen ) ; },0
241,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
242,"<S2SV_ModStart> int i ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_z <S2SV_ModEnd> ) ; }",0
243,"<S2SV_ModStart> ; char buf [ DN_BUF_LEN <S2SV_ModEnd> ] ; unsigned <S2SV_ModStart> goto cleanup ; X509_NAME_oneline_ex ( X509_get_subject_name ( cert ), buf, & bufsize, XN_FLAG_SEP_COMMA_PLUS ) ; md -> subject_dn = strdup ( buf ) ; md -> issuer_dn = strdup ( buf ) ; if ( md -> subject_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } X509_NAME_oneline_ex ( X509_get_issuer_name ( cert ), buf, & bufsize, XN_FLAG_SEP_COMMA_PLUS ) ; md -> issuer_dn = strdup ( buf ) ; if ( md -> issuer_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; j = 0 ; if ( pkinit_sans!= NULL ) { for ( i = 0 ; i <",0
244,"<S2SV_ModStart> out_free ; } for ( i = 0 ; i < KVM_MEMORY_SLOTS_NUM ; ++ i ) { kvm_iommu_unmap_pages ( kvm, s, i, npages ) ; kvm_iommu_unmap_pages ( kvm, s, i, npages ) ; kvm_iommu_unmap_pages ( kvm, s, i, npages ) ; kvm_iommu_unmap_pages ( kvm, s, i, npages ) ; for ( i = 0 ; i < KVM_MEMORY_SLOTS_NUM ; ++ i ) { kvm_iommu_unmap_pages ( kvm, s, i, npages ) ; kvm_iommu_unmap_pages ( kvm, s, i, npages ) ; kvm_iommu_unmap_pages ( kvm, s, i, npages ) ; } kvm_iommu_unmap_pages ( kvm, s, i, npages ) ; for ( i = 0 ; i < KVM_MEMORY_SLOTS_NUM ; ++ i ) { kvm",0
245,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
246,<S2SV_ModStart> ; lock_sock ( sk ) ; msg -> msg_namelen = 0 ;,0
247,"<S2SV_ModStart> ni ; register u_int <S2SV_ModEnd> i ; int <S2SV_ModStart> = length / 4 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d[%u]:"", j, length ) ) ; break ; } if ( j * sizeof ( * ni )!= length - 4 ) ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d[%u]:"", j, length ) ) ; else if ( j * sizeof ( * ni )!= length - 4 ) ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d[%u]:"", j, length ) ) ; else if ( j * sizeof ( * ni )!= length - 4 ) ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d[%u]:"", j, length ) ) ; else if ( j * sizeof ( * ni )!= length - 4 ) ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d[%u]:"", j, length ) ) ; else",0
248,<S2SV_ModStart> ; if ( reqkey_defl == KEY_REQKEY_DEFL_NO_CHANGE ) { ret = - EINVAL ; goto error ; } goto set ; case KEY_REQKEY_DEFL_GROUP_KEYRING : ret = install_group_keyring_to_cred ( new ) ; if ( ret < 0 ) { ret = - EINVAL ; goto error ; } goto set ; case KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_SESSION_KEYRING : case KEY_REQKEY_DEFL_USER_KEYRING : case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : ret = - EINVAL ; goto error ;,0
249,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
250,"<S2SV_ModStart> argc ++ ; if ( copy_strings_kernel ( 1, & iname_addr, bprm ) < 0 ) goto _error ; <S2SV_ModStart> argc ++ ; if ( copy_strings_kernel ( 1, & iname_addr, bprm ) < 0 ) goto _error ;",0
251,<S2SV_ModStart> = 0.0 ; register <S2SV_ModStart> int iSrc ; res -> ContribRow [ u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; if ( iLeft < 0 ) { iLeft ++ ; } else { iRight -- ; } } for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ) ; } if ( dTotalWeight > 0.0 ) { for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ) ; } if ( dTotalWeight > 0.0 ) { _gdContributionsFree ( res ) ; return NULL ; },0
252,<S2SV_ModStart> user ) { mutex_lock ( & ipmi_user_mutex ) ; <S2SV_ModStart> user ) ; mutex_unlock ( & ipmi_user_mutex ) ;,0
253,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".cfg\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n""",1
254,<S2SV_ModStart> ; int sl ; if ( cursor -> ns == NULL ) { cursor -> err = MONGO_CURSOR_INVALID ; return MONGO_ERROR ; },0
255,"<S2SV_ModStart> ) ; if ( IS_ERR ( mobj ) ) { mobj = ERR_PTR ( - ENOMEM ) ; if ( IS_ERR ( mobj ) ) { mobj = mobj_get_va ( mobj, 0 ) ; memset ( mobj_get_va ( mobj, 0 ), 0, size ) ; return mobj ; } <S2SV_ModEnd> return mobj ; <S2SV_ModStart> ; if ( IS_ERR ( mobj ) ) { mobj = mobj_get_va ( mobj, 0 ) ; if ( IS_ERR ( mobj ) ) { mobj = ERR_PTR ( - ENOMEM ) ; if ( IS_ERR ( mobj ) ) { mobj = mobj_get_va ( mobj, 0 ) ; memset ( mobj_get_va ( mobj, 0 ), 0, size ) ; return mobj ; } <S2SV_ModEnd> return mobj ;",0
256,<S2SV_ModStart> += incr ; <S2SV_ModEnd> delta -= incr,0
257,"<S2SV_ModStart> * for_ch ; if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } else if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async ) ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( first, expression, NULL, is_async, c -> c_arena ) ;",0
258,"<S2SV_ModStart> NULL ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (",0
259,"<S2SV_ModStart> void write_mb_modes_kf ( const VP9_COMMON * const cm, const MACROBLOCKD * const xd <S2SV_ModEnd>, vpx_writer * <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> -> mi_stride ] ; const MODE_INFO * const above_mi = xd -> above_available? mi_8x8 [ - xd -> mi_stride ] : NULL ; const MODE_INFO * const left_mi = xd -> left_available? mi_8x8 [ - xd -> mi_stride ] : NULL ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( seg -> update_map ) write_segment_id ( seg, seg, mbmi -> segment_id ) ; write_skip ( cpi, mbmi -> segment_id, mi, w ) ; if ( cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; else { const int num_4x4_w = num_4x",0
260,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
261,"<S2SV_ModStart> } } DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> iov. iov_len ) ; r -> sector += r -> iov. iov_len / 512 ; r -> sector_count -= r -> iov. iov_len ; scsi_req_data ( & r -> req, r -> iov. iov_base, r -> iov. iov_len ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
262,<S2SV_ModStart> cs > CQSPI_MAX_CHIPSELECT || cs < 0,0
263,"<S2SV_ModStart> maxn ) { switch ( n ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME : decompileGOTOFRAME ( n, actions, maxn, 0 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_STACKSWAP : decompileSTACKSWAP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETPROPERTY : decompileGETPROPERTY ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME",0
264,<S2SV_ModStart> = 0 ; if ( l < 0 ) { AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( a ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; } else { AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( a ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; },0
265,"<S2SV_ModStart> out ; } if ( free < 0 ) { err = - ENOSPC ; goto out ; } if ( table -> total == table -> max ) { err = - ENOSPC ; goto out ; } if ( table -> total == table -> max ) { err = - ENOSPC ; goto out ; } table -> refs [ free ] = 1 ; table -> entries [ free ] = cpu_to_be32 ( vlan | MLX4_VLAN_VALID ) ; if ( unlikely ( err ) ) { mlx4_warn ( dev, ""Failed <S2SV_blank> adding <S2SV_blank> vlan: <S2SV_blank> %u\\n"", vlan ) ; table -> entries [ free ] = cpu_to_be32 ( 0 ) ; table -> refs [ free ] = 0 ; table -> entries [ free ] = cpu_to_be32 ( 0 ) ; table -> entries [ free ] = cpu_to_be32 ( vlan | MLX4_VLAN_VALID ) ; err = mlx4_set_port_vlan_table ( dev, port, table -> entries ) ; if ( unlikely ( err ) ) { mlx4_warn ( dev, ""Failed <S2SV_blank> adding <S2SV_blank> vlan: <S2SV_blank> %u\\n",0
266,"<S2SV_ModStart> ( len < 4 <S2SV_ModEnd> ) { return <S2SV_ModStart> 1 ) ; } ND_TCHECK_32BITS ( & prep -> pp_n ) ; ps = ( const struct pgstate * ) ( prep + 1 ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", ps -> slot, ps -> nid ) ) ; io = ( const struct id_off * ) ( ps + 1 ) ; if ( io < ie && ND_TTEST ( * io ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; ps = ( const struct pgstate * ) io ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) ( ps + 1 ) ; while ( -- n >= 0 && ND_TTEST ( * io ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %c%s:%u"", ipaddr",0
267,<S2SV_ModStart> rq ) ; prev -> se. on_rq = 0 ;,0
268,"<S2SV_ModStart> int ret ; uint16_t <S2SV_ModEnd> value ; dev_dbg <S2SV_ModStart> int ret ; value = <S2SV_ModStart>, reg, NULL <S2SV_ModEnd>, 1, <S2SV_ModStart> 1000 ) ; if ( ret < 0 ) { dev_err ( & usb_dev -> dev, ""atusb: <S2SV_blank> reg <S2SV_blank> = <S2SV_blank> 0x%x\\n"", reg ) ; return ret ; } ret = <S2SV_ModEnd> atusb_control_msg ( atusb <S2SV_ModStart>, ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; if ( ret < 0 ) { dev_err ( & usb_dev -> dev, ""atusb: <S2SV_blank> reg <S2SV_blank> = <S2SV_blank> 0x%x\\n"", reg ) ; return ret ; } ret = <S2SV_ModEnd> atusb_control_msg ( usb_dev <S2SV_ModStart>, ATUSB_REG_READ, ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; if ( ret < 0 ) { dev_err ( & usb_dev -> dev, ""atusb: <S2SV_blank> reg <S2SV_blank> = <S2SV_blank> 0x%x\\n"", reg ) ; return ret ; }",0
269,<S2SV_ModStart> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> * zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * ) * ( 2 + pTable -> nModuleArg ) ; char * * azModuleArg ; if ( nBytes > UINT64_MAX / sizeof ( char * ) ) nBytes = UINT64_MAX / sizeof ( char * ) * ( 2 + pTable -> nModuleArg ) ; if ( nBytes > UINT64_MAX / sizeof ( char * ) * ( 2 + pTable -> nModuleArg ) ) nBytes = UINT64_MAX / sizeof ( char * ) * ( 2 + pTable -> nModuleArg ) ; if ( nBytes > UINT64_MAX / sizeof ( char * ) * ( 2 + pTable -> nModuleArg ) ) nBytes = UINT64_MAX / sizeof ( char * ) * ( 2 + pTable -> nModuleArg ) ; if ( nBytes > UINT64_MAX / sizeof ( char * ) * ( 2 + pTable -> nModuleArg ) ) nBytes = UINT64_MAX / sizeof ( char * ) * ( 2 + pTable -> nModuleArg,0
270,<S2SV_ModStart> } } } if ( ( s -> len < XMLRPC_BUFSIZE ) || ( ( s -> len > XMLRPC_BUFSIZE ) && ( s -> str [ XMLRPC_BUFSIZE - 1 ] == '\\0' ) ) || ( ( s -> len > XMLRPC_BUFSIZE - 1 ) && ( s -> str [ XMLRPC_BUFSIZE - 1 ] == '\\0' ) ) ) || ( ( s -> len > XMLRPC_BUFSIZE - 1 ) ) ) || ( ( s -> len < 0 ) || ( ( s -> len > XMLRPC_BUFSIZE - 1 ) && ( s -> str [ XMLRPC_BUFSIZE - 1 ] == '\\0' ) ) || ( ( s -> len > XMLRPC_BUFSIZE - 1 ) && ( s -> str [ XMLRPC_BUFSIZE - 1 ] == '\\0' ) ) || ( s -> len > XMLRPC_BUFSIZE - 1 ) ) ) || ( ( s -> len > XMLRPC_BUFSIZE - 1 ) && ( s -> len > XMLRPC_BUFSIZE - 1 ) && ( s -> str [ XMLRPC_BUFSIZE - 1,0
271,"<S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""AdaptationStates <S2SV_blank> array <S2SV_blank> is <S2SV_blank> empty"" ) ; goto Error ; }",0
272,"<S2SV_ModStart> 32 ) { ut32 addr32 = r_read_le32 ( buf + i ) ; if ( addr32 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, ( ut64 ) addr32, type, bits ) ; r_list_append ( ret, ba ) ; } } else { ut64 addr64 = r_read_le64 ( buf + i ) ; if ( addr64 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, addr64, type, bits ) ; r_list_append ( ret, ba ) ; } } } else { free ( buf ) ; }",0
273,"<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_IPV6_INTF_ADDR : case ISIS_SUBTLV_EXT_IS_REACH_IPV6_NEIGHBOR_ADDR : if ( subl >= 4 ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; } break ; case ISIS_SUBTLV_EXT_IS_REACH_IPV6_INTF_ADDR : case ISIS_SUBTLV_EXT_IS_REACH_IPV6_NEIGHBOR_ADDR : if ( subl >= 4 ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ;",0
274,<S2SV_ModStart> 1 ) { if ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> synth_size - 1 ]!= 0 && ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> synth_size - 1 ] <S2SV_ModStart> 1 ) { if ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> synth_size - 1 ]!= 0 && ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> synth_size - 1 ]!= 0 && ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> synth_size - 1 ]!=,0
275,"<S2SV_ModStart> -> dmin ; if ( p + enclen ( reg -> enc, p ) > end ) { fprintf ( stderr, ""forward_search_range: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> range: <S2SV_blank> %d\\n"", ( int ) str, ( int ) end, ( int ) range ) ; return - 1 ; } <S2SV_ModStart> -> dmin ; if ( p + enclen ( reg -> enc, p ) > end ) { fprintf ( stderr, ""forward_search_range: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> range: <S2SV_blank> %d\\n"", ( int ) str, ( int ) end, ( int ) range ) ; return - 1 ; }",0
276,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_data * bfqd, struct bfq_queue * bfqq ) { <S2SV_ModEnd> struct bfq_queue * <S2SV_ModStart> struct bfq_data * q = <S2SV_ModEnd> bfqq -> bfqd <S2SV_ModStart> flags ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_queued [ 0 ] == 0 && bfqq -> queued [ 1 ] == 0 ) reason = BFQQE_TOO_IDLE ; else goto schedule_dispatch ; spin_lock_irqsave ( & bfqd -> lock, flags ) ; bfq_clear_bfqq_wait_request ( bfqq ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else <S2SV_ModEnd> goto schedule_dispatch ;",0
277,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
278,"<S2SV_ModStart> vif ) continue <S2SV_ModEnd> ; RING_FINAL_CHECK_FOR_REQUESTS ( <S2SV_ModStart> tx, work_to_do, & pending_idx ) ; if ( unlikely ( idx >= vif -> tx. req_cons ) ) { netbk_tx_err ( vif, XEN_NETIF_ERR_TX_REQ_OVERFLOW ) ; netbk_tx_err ( vif, XEN_NETIF_ERR_TX_REQ_OVERFLOW ) ; continue ; } idx = vif -> tx. req_cons ; rmb ( ) ; memcpy ( & txreq, RING_GET_REQUEST ( & vif -> tx, idx ), sizeof ( txreq ) ) ; if ( txreq. size > vif -> remaining_credit && tx_credit_exceeded ( vif, txreq. size ) ) { netbk_tx_err ( vif, XEN_NETIF_ERR_TX_REQ_OVERFLOW ) ; continue ; } vif -> tx. req_cons = ++ idx ; memset ( extras, 0, sizeof ( extras ) ) ; if ( txreq. flags & XEN_NETTXF_",0
279,<S2SV_ModStart> cb ) { <S2SV_ModEnd> struct xfrm_policy_walk *,0
280,<S2SV_ModStart> conn ) ; if ( h2o_timeout_is_linked ( & conn -> _read. timeout_entry ) ) { h2o_timeout_unlink ( & conn -> _read. timeout_entry ) ; do_emit_writereq ( conn ) ; },0
281,"<S2SV_ModStart> -> data ) ; int nr_frags = skb_shinfo ( skb ) -> nr_frags ; <S2SV_ModStart> -> status ; netbk -> pending_tx_info [ pending_idx ]. vif = vif ; <S2SV_ModStart> ( err ) ) { netbk -> pending_tx_info [ pending_idx ]. req ; make_tx_response ( vif, txp, XEN_NETIF_RSP_ERROR ) ; netbk -> pending_ring [ index ] = pending_idx ; xenvif_put ( vif ) ; } start = ( frag_get_pending_idx ( & shinfo -> frags [ 0 ] ) == pending_idx ) ; for ( i = start ; i < nr_frags ; i ++ ) { int j, newerr ; pending_idx = frag_get_pending_idx ( & shinfo -> frags [ i ] ) ; newerr = ( ++ gop ) -> status ; if ( likely (! newerr ) ) { if ( unlikely ( err ) ) xen_netbk_idx_release ( netbk, pending_idx ) ; continue ; } txp = & netbk -> pending_tx_info [ pending_idx",0
282,,1
283,"<S2SV_ModStart> height ; } chroma_pixels = ( Quantum * ) RelinquishMagickMemory ( image -> pixels ) ; resize_image = ( Image * ) RelinquishMagickMemory ( resize_image ) ; if ( chroma_pixels == ( Quantum * ) RelinquishMagickMemory ( resize_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( chroma_pixels == ( Quantum * ) RelinquishMagickMemory ( image -> pixels ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( resize_image == ( Image * ) RelinquishMagickMemory ( resize_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( resize_image == ( Image * ) RelinquishMagickMemory ( resize_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
284,<S2SV_ModStart> ; if ( len!= sizeof ( struct hv_kvp_msg ) ) { close ( fd ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ; if ( len!= sizeof ( struct hv_kvp_msg ) ) { close ( fd ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ; if ( len!= sizeof ( struct hv_kvp_msg ) ) { close ( fd ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ; if ( len!= sizeof ( struct hv_kvp_msg ) ) { close ( fd ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ; if ( len!= sizeof ( struct hv_kvp_ipaddr_value ) ) { close ( fd ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ; if ( len!= sizeof ( struct hv_kvp_ipaddr_value ) ) { close ( fd ) ; exit ( EXIT_FAILURE ) ; },0
285,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
286,"<S2SV_ModStart> TRUE ) ; <S2SV_ModEnd> type = crm_element_value <S2SV_ModStart> F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } if ( client -> session ) { crm_debug ( ""Sent <S2SV_blank> %s <S2SV_blank> notification <S2SV_blank> to <S2SV_blank> client <S2SV_blank> %s/%s"", type, client -> name, client -> id ) ; crm_send_remote_msg ( client -> session, update_msg, client -> encrypted ) ; } else if ( client -> session ) { crm_debug ( ""Sent <S2SV_blank> %s <S2SV_blank> notification <S2SV_blank> to <S2SV_blank> client <S2SV_blank> %s/%s <S2SV_blank> failed"", type, client -> name, client -> id ) ; crm_send_remote_msg ( client -> session, update_msg, client -> encrypted ) ; } # ifdef HAVE_GNUTLS_GNUTLS_H } else if ( client -> session ) { crm_debug ( ""Sent <S2SV_blank> %s <S2SV_blank> notification <S2SV_blank> to <S2SV_blank> client <S2SV_blank> %s/%s <S2SV_blank> failed"", type, client -> name, client -> id ) ; crm_send_remote_msg ( client -> session, update",0
287,"<S2SV_ModStart> + x > diffBlock <S2SV_ModEnd> + diffBlockLength || <S2SV_ModStart> NULL ; } if ( diffPtr + x > newDataLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, diffPtr, x ) ; <S2SV_ModStart> NULL ; } if ( diffPtr + y > diffBlock + diffBlockLength || extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( diffPtr + y > diffBlock + diffBlockLength || extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
288,<S2SV_ModStart> ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
289,"<S2SV_ModStart> ( cmd == IP_VS_BASE_CTL || cmd == IP_VS_SO_GET_MAX || cmd == IP_VS_SO_GET_DAEMON ) { d [ 0 ]. state = IP_VS_STATE_MASTER ; strlcpy ( d [ 0 ]. mcast_ifn, ipvs -> master_mcast_ifn, sizeof ( d [ 0 ]. mcast_ifn ) ) ; d [ 0 ]. syncid = ipvs -> master_syncid ; } if ( ipvs -> backup_sync_state & IP_VS_STATE_BACKUP ) { d [ 1 ]. state = IP_VS_STATE_BACKUP ; strlcpy ( d [ 1 ]. mcast_ifn, ipvs -> backup_mcast_ifn, sizeof ( d [ 1 ]. mcast_ifn ) ) ; d [ 1 ]. syncid = ipvs -> backup_syncid ; } if ( ipvs -> backup_state & IP_VS_STATE_BACKUP ) { d [ 1 ]. state = IP_VS_STATE_BACKUP ; strlcpy ( d [ 1 ]. mcast",0
290,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart>, fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
291,<S2SV_ModStart> hdr ; ssize_t result ; if ( WARN_ON_ONCE (! ib_ucm_file_open ( filp ) ) ) return - EBADF ; result = ib_ucm_check_hdrs ( file ) ; if ( result < 0 ) return result,0
292,"<S2SV_ModStart> * fpath = NULL <S2SV_ModEnd>, * cgdir <S2SV_ModStart> if (! fc_may_access <S2SV_ModEnd> ( fc, <S2SV_ModStart> O_RDWR ) ) { printf ( ""cgfs_mkdir <S2SV_blank> returned <S2SV_blank> -EACCES <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> -EACCES <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; goto out ; } ret = cgfs_create ( controller, cgroup, fc -> uid, fc -> gid ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> -EACCES <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; goto out ; } ret = cgfs_create ( controller, cgroup, fc -> uid, fc -> gid ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; out : free ( cgdir ) ; return ret <S2SV_ModEnd> ; } <",0
293,<S2SV_ModStart> queue ) ) { kfree ( disk ) ; <S2SV_ModStart> queue = NULL <S2SV_ModEnd> ; continue ;,0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
295,<S2SV_ModStart> break ; case VFF_TYP_BIT : case VFF_TYP_1_BYTE : case VFF_TYP_2_BYTE : case VFF_TYP_4_BYTE : case VFF_TYP_DOUBLE : case VFF_TYP_DOUBLE : <S2SV_ModStart> break ; case VFF_TYP_BIT : case VFF_TYP_1_BYTE : case VFF_TYP_2_BYTE : case VFF_TYP_4_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP_DOUBLE : case VFF_TYP_DOUBLE : <S2SV_ModStart> break ; case VFF_TYP_BIT : case VFF_TYP_1_BYTE : case VFF_TYP_2_BYTE : case VFF_TYP_4_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP,0
296,<S2SV_ModStart> ) pktnum ; if ( avio_feof ( s -> pb ) ) { goto end ; },0
297,"<S2SV_ModStart> ( srp -> lun [ 0 ], srp -> lun [ 1 ], srp -> lun <S2SV_ModStart> srp -> lun [ 0 ], srp -> lun <S2SV_ModStart> srp ) ; if ( srp -> lun [ 1 ] == 0 && srp -> lun [ 2 ] == 0 && srp -> lun [ 3 ] == 0 && srp -> lun [ 4 ] == 0 && srp -> lun [ 5 ] == 0 ) return - EINVAL ; if ( srp -> lun [ 1 ] == 0 && srp -> lun [ 2 ] == 0 && srp -> lun [ 3 ] == 0 && srp -> lun [ 3 ] == 0 && srp -> lun [ 2 ] == 0 && srp -> lun [ 3 ] == 0 && srp -> lun [ 4 ] == 0 && srp -> lun [ 5 ] == 0 && srp -> lun [ 5 ] == 0 && srp -> lun [ 5 ] == 0 && srp -> lun [ 3 ] == 0 && srp -> lun [ 3 ] == 0 && srp -> lun [ 4 ] == 0 && sr",0
298,"<S2SV_ModStart> ; # endif # if HAVE_DECL_CLONE_NEWNET <S2SV_ModEnd> install_keyword_root ( ""security_level"" <S2SV_ModStart> ; # endif # if HAVE_DECL_CLONE_NEWNET <S2SV_ModEnd> install_keyword_root ( ""security_level"" <S2SV_ModStart> ; # endif # ifdef HAVE_DECL_CLONE_NEWNET <S2SV_ModEnd> install_keyword_root ( ""security_level"" <S2SV_ModStart> ; # endif # ifdef _WITH_LVS_ install_keyword ( ""security_level"", & security_level_handler ) ; install_keyword_root ( ""security_level"", & security_level_handler ) ; # endif # ifdef _WITH_VRRP_ install_keyword ( ""smtp_alert_vrrp"", & smtp_alert_vrrp_handler ) ; # endif # ifdef _WITH_LVS_ install_keyword ( ""dynamic_interfaces"", & dynamic_interfaces_handler ) ; install_keyword ( ""no_email_faults"", & no_email_faults_handler ) ; install_keyword ( ""default_interface"", & default_interface_handler ) ; # endif # ifdef _",0
299,<S2SV_ModStart> data ) { if ( ctx -> codec_mode & VPX_CODEC_MODE_HIGHBITDEPTH ) { ctx -> codec_mode = VPX_CODEC_MODE_HIGHBITDEPTH ; return encoder_common_init_high ( ctx ) ; } if ( ctx -> codec_mode & VPX_CODEC_MODE_HIGHBITDEPTH ) { ctx -> codec_mode = VPX_CODEC_MODE_HIGHBITDEPTH ; } if ( ctx -> codec_mode & VPX_CODEC_MODE_HIGHBITDEPTH ) { ctx -> codec_mode = VPX_CODEC_MODE_HIGHBITDEPTH ; ctx -> codec_mode = VPX_CODEC_MODE_HIGHBITDEPTH ; } if ( ctx -> codec_mode & VPX_CODEC_MODE_HIGHBITDEPTH ) { ctx -> codec_mode = VPX_CODEC_MODE_HIGHBITDEPTH ; ctx -> codec_mode = VPX_CODEC_MODE_HIGHBITDEPTH ; } else { ctx -> codec_mode = VPX_CODEC_MODE_HIGHBITDEPTH ; ctx -> codec_mode = VPX_CODE,0
300,"<S2SV_ModStart> 0 ) { if ( strlen ( key ) + 2 > tmpbuf ) { kfree ( tmpbuf ) ; return - 1 ; } <S2SV_ModStart> key ) + 2 > tmpbuf ) { kfree ( tmpbuf ) ; return - 1 ; } <S2SV_ModEnd> param = iscsi_check_key <S2SV_ModStart>, sender, param_list ) ; if (! param ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + strlen ( value ) + 2 ; continue ; } if ( IS_PSTATE_PROPOSER ( param ) ) { if ( iscsi_check_proposer_state ( param, value ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } SET_PSTATE_RESPONSE_GOT ( param ) ; }",0
301,"<S2SV_ModStart> ENOENT ) { struct stat st ; if ( stat ( t -> stamp_path, & st ) < 0 ) { t -> last_trigger. realtime = timespec_load ( & st. st_atim ) ; t -> last_trigger. realtime = timespec_load ( & st. st_atim ) ; } else if ( errno == EEXIST ) touch_file ( t -> stamp_path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, 0 ) ; else t -> last_trigger. realtime = timespec_load ( & st. st_atim ) ; }",0
302,"<S2SV_ModStart> = 0 ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; <S2SV_ModEnd> JAS_DBGLOG ( 10 <S2SV_ModStart> ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%",0
303,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
304,"<S2SV_ModStart> ; int copylen <S2SV_ModEnd> ; bool zerocopy <S2SV_ModStart> ; if ( unlikely ( q -> flags & IFF_VNET_HDR ) ) { vnet_hdr. hdr_len = len - ETH_HLEN ; err = - EINVAL ; goto err ; } <S2SV_ModStart> ( m && <S2SV_ModEnd> m -> msg_control <S2SV_ModStart> & q -> sk, SOCK_ZEROCOPY ) ) { skb = macvtap_alloc_skb ( & q -> sk, NET_IP_ALIGN, copylen, GOODCOPY_LEN, noblock, & err ) ; if (! skb ) goto err ; skb = macvtap_alloc_skb ( & q -> sk, NET_IP_ALIGN, copylen, vnet_hdr. hdr_len, noblock, & err ) ; if (! skb ) goto err ; } else { skb = macvtap_alloc_skb ( & q -> sk, NET_IP_ALIGN, copylen, vnet_hdr. hdr_len, noblock, & err ) ; if (! skb ) goto err ;",0
305,<S2SV_ModStart> nexthdr ) { const struct ipv6_opt_hdr * exthdr = <S2SV_ModEnd> ( skb_network_header ( <S2SV_ModStart> + 1 <= ipv6_optlen <S2SV_ModEnd> ( exthdr ) <S2SV_ModStart> offset += ipv6_optlen <S2SV_ModEnd> ( exthdr ) <S2SV_ModStart> offset += ipv6_optlen <S2SV_ModEnd> ( exthdr ),0
306,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
307,"<S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { mv_bias_high ( ref_frame_sign_bias [ refframe ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias_high ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias_high ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; } else { mv_bias_high ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias_high ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame",0
308,<S2SV_ModStart> msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ;,0
309,"<S2SV_ModStart> } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) || ( dj_report -> device_index > DJ_DEVICE_INDEX_MAX ) ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index == DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index == DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index == DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank>",0
310,"<S2SV_ModStart> ) ) { pr_err <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> "" ""ACCEPT/DROP\\n"" )",0
311,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
312,"<S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr <S2SV_ModEnd> ; __u32 serial <S2SV_ModStart> __u32 serial ; sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) ( asconf -> skb -> data + sizeof ( sctp_addip_chunk_t ) ) ; if (! addip ) { sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> skb -> data ; serial = ntohl ( addip -> serial ) ; err_code = sctp_process_asconf_param ( asoc, asconf, addip ) ; if ( err_code!= SCTP_ERROR_NO_ERROR ) all_param_pass = 0 ; if (! all_param_pass ) { err_code = sctp_process_asconf_param ( asoc, asconf, addip ) ; if ( err_code!= SCTP_ERROR_NO_ERROR <S2SV_ModEnd> ) all_param_pass = <S2SV_ModStart>",0
313,"<S2SV_ModStart> 101, ( ""jas_realloc <S2SV_blank> called <S2SV_blank> with <S2SV_blank> %x,%zu\\n"" <S2SV_ModEnd>, ptr,",0
314,<S2SV_ModStart> exit ; } <S2SV_ModEnd> release_sock ( sk,0
315,<S2SV_ModStart> # ifdef CONFIG_KVM_XICS r = 1 ; break ; # ifdef CONFIG_KVM_XICS_64 case KVM_CAP_SPAPR_TCE : case KVM_CAP_SPAPR_TCE_64 : case KVM_CAP_SPAPR_TCE_VFIO : case KVM_CAP_SPAPR_TCE_VFIO_64 : r = 1 ; break ; # endif # if defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) case defined ( CONFIG_KVM_E500MC ) case defined ( CONFIG_KVM_E500MC ) case defined ( CONFIG_KVM_E500MC ) case defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) case KVM_E500MC : # endif r =! hv_enabled ; break ; # if defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) case defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM,0
316,<S2SV_ModStart> msicap ; return pci_populate_msicap <S2SV_ModEnd> ( & msicap,0
317,"<S2SV_ModStart> error ; } memcpy <S2SV_ModEnd> ( kvp_data -> <S2SV_ModStart> 1 ) ; memcpy <S2SV_ModEnd> ( kvp_data -> <S2SV_ModStart> + 1 ) ; memcpy ( kvp_data -> data. key, key_name, keylen ) ; <S2SV_ModStart> + 1 ) ; memcpy <S2SV_ModEnd> ( kvp_data -> <S2SV_ModStart> valuelen = utf8s_to_utf16s <S2SV_ModEnd> ( value, <S2SV_ModStart> valuelen + 1 ) ; memcpy ( kvp_data -> data. value, value, valuelen ) ; memcpy <S2SV_ModEnd> ( kvp_data -> <S2SV_ModStart> valuelen + 1 ) ; memcpy ( kvp_data -> data. value_type, value, valuelen ) ; kvp_data -> data. value_size = 2 * ( valuelen + 1 ) ; icmsghdrp -> status = HV_S_OK ; return ;",0
318,<S2SV_ModStart> -> log_file ; if (! IS_ERR ( d -> log_ctx ) ) { mutex_lock ( & d -> mutex ) ; d -> log_ctx = eventfp? eventfd_ctx_fileget ( d -> log_ctx ) : NULL ; d -> log_ctx = eventfp? eventfd_ctx_fileget ( d -> log_ctx ) : NULL ; } else if (! IS_ERR ( d -> log_file ) ) { r = - EFAULT ; break ; } mutex_unlock ( & d -> mutex ) ; if (! IS_ERR ( d -> log_ctx ) ) { mutex_unlock ( & d -> mutex ) ; d -> log_ctx = eventfp? eventfd_ctx_fileget ( d -> log_ctx ) : NULL ; } else { mutex_unlock ( & d -> mutex ) ; },0
319,"<S2SV_ModStart> return ; } if ( ( img -> color_space & OPJ_CLRSPC_SRGB ) == 0 ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; } if ( ( img -> color_space & OPJ_CLRSPC_GRAY ) == 0 ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; } if ( ( img -> color_space & OPJ_CLRSPC_SRGB ) == 0 ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; } if ( ( img -> color_space & OPJ_CLRSPC_GRAY ) == 0 ) { img -> color_space = OPJ_CLRSPC_GRAY ; return ;",0
320,"<S2SV_ModStart> ; int is_ext_ctrl <S2SV_ModEnd> ; long err <S2SV_ModStart> - EINVAL ; size_t ctrls_size = 0 ; <S2SV_ModStart> case _IOC_NONE : is_ext_ctrl = ( cmd == VIDIOC_S_EXT_CTRLS || cmd == VIDIOC_G_EXT_CTRLS || cmd == VIDIOC_TRY_EXT_CTRLS ) ; if ( is_ext_ctrl ) { <S2SV_ModStart> case _IOC_READ : if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out_ext_ctrl ; p -> error_idx = p -> count ; mbuf = kmalloc ( ctrls_size, GFP_KERNEL ) ; if ( NULL == mbuf ) goto out_ext_ctrl ; p -> controls = mbuf ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out_ext_ctrl ; p -> error_idx =",0
321,"<S2SV_ModStart> return REDIS_OK ; } if ( listLength ( c -> pubsub_channels ) > 0 && listLength ( c -> pubsub_patterns ) > 0 && cmd -> proc!= psubscribeCommand && cmd -> proc!= punsubscribeCommand ) { addReplyError ( c, ""only <S2SV_blank> (P)SUBSCRIBE <S2SV_blank> / <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> QUIT <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" ) ; return REDIS_OK ; } if ( listLength ( c -> pubsub_channels ) > 0 && cmd -> proc!= psubscribeCommand && cmd -> proc!= punsubscribeCommand && cmd -> proc!= punsubscribeCommand && cmd -> proc!= punsubscribeCommand ) { addReplyError ( c, ""only <S2SV_blank> (P)SUBSCRIBE <S2SV_blank> / <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> QUIT <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" ) ; return REDIS_OK ; }",0
322,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( rtl8150_t <S2SV_ModStart> ) { return <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, data <S2SV_ModEnd>, size, <S2SV_ModStart> 500 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
323,"<S2SV_ModStart> { case RESPONSE_RUN : { gtk_widget_get_screen ( GTK_WIDGET ( parameters -> parent_window ) ) ; uri = nautilus_file_get_uri ( parameters -> file ) ; DEBUG ( ""Launching <S2SV_blank> untrusted <S2SV_blank> launcher <S2SV_blank> %s"", uri ) ; nautilus_launch_desktop_file ( screen, uri, NULL, parameters -> parent_window ) ; g_free ( uri ) ; } break ; case RESPONSE_MARK_TRUSTED : { file = nautilus_file_get_location ( parameters -> file ) ; nautilus_file_mark_desktop_file_trusted ( file, parameters -> parent_window, TRUE, NULL, NULL ) ; g_object_unref ( file ) ; } break ; default : { <S2SV_ModEnd> } break ;",0
324,"<S2SV_ModStart> -> port_number ; dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 0, edge_port -> lsr_mask, * data ) ; -- urb -> actual_length ; } if ( urb -> actual_length ) { usb_serial_debug_data ( dev, __func__, urb -> actual_length, data ) ; if ( edge_port -> close_pending ) dev_dbg ( dev, ""%s <S2SV_blank> - <S2SV_blank> close <S2SV_blank> pending, <S2SV_blank> dropping <S2SV_blank> data <S2SV_blank> on <S2SV_blank> the <S2SV_blank> floor\\n"", __func__ ) ; else edge_tty_recv ( edge_port -> port, data, urb -> actual_length ) ; if ( edge_port -> close_pending ) dev_dbg ( dev, ""%s <S2SV_blank> - <S2SV_blank> close <S2SV_blank> pending, <S2SV_blank> dropping <S2SV_blank> data <S2SV_blank> on <S2SV_blank> the <S2SV_blank> floor\\n"", __func",0
325,"<S2SV_ModStart> cifs_find_smb_ses ( struct TCP_Server_Info <S2SV_ModEnd> * server, <S2SV_ModStart> cifs_tcp_ses_lock ) ; if ( list_empty ( & server -> smb_ses_list ) ) { write_unlock ( & cifs_tcp_ses_lock ) ; return NULL ; } <S2SV_ModEnd> ses = list_entry <S2SV_ModStart> smb_ses_list ) ; <S2SV_ModEnd> if ( strncmp <S2SV_ModStart> ( ses -> userName, username, MAX_USERNAME_SIZE ) ) { write_unlock ( & cifs_tcp_ses_lock ) ; return NULL ; } <S2SV_ModEnd> ++ ses ->",0
326,"<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( ( cfg -> g_w!= ctx -> cfg. g_w ) && ( ( cfg -> g_h!= ctx -> cfg. g_h ) ) || ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width",0
327,"<S2SV_ModStart>'<S2SV_blank>') { ptr = strchr ( input,'<S2SV_blank>') ; ptr2 = strchr ( ptr,'<S2SV_blank>') ; if ( ptr2 ) { * ptr2 = 0 ; off = r_num_math ( core -> num, ptr2 + 1 ) ; } if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { ptr = strchr ( input,'<S2SV_blank>') ; if ( ptr2 ) { * ptr2 = 0 ; off = r_num_math ( core -> num, ptr2 + 1 ) ; } if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %",0
328,"<S2SV_ModStart> ( inode ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> return chg ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; if ( ret < 0 ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; else { struct resv_map * resv_map = resv_map_alloc ( ) ; if (! resv_map ) return - ENOMEM ; set_vma_resv_map ( vma, resv_map ) ; set_vma_resv_flags ( vma, HPAGE_RESV_OWNER ) ; } if ( vm_flags &",0
329,<S2SV_ModStart> ) { struct key * keyring ; if ( new -> thread_keyring ) return - EBUSY,0
330,"<S2SV_ModStart> = 0 ; size_t scanned = ( size_t ) 0U ; size_t readnbd = ( size_t ) 0U ; if ( readnbd > ( size_t ) 0U ) { readnbd -= scanned ; memmove ( cmd, cmd + scanned, readnbd ) ; scanned = ( size_t ) 0U ; readnbd = ( size_t ) 0U ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { return - 2 ; } readnbd += readnb ; if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { while ( readnb <= ( ssize_t ) 0 && errno == EINTR ) ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { while ( ( readnb = read ( clientfd, cmd + readnbd, cmdsize - readnbd ) ) < ( ssize_t ) 0 && errno == EINTR ) ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { while ( readnb <= ( ssize_",0
331,"<S2SV_ModStart> orig ) ; if ( orig == NULL ) { mrb_set_args ( mrb, ""o"", & copy ) ; return NULL ; } <S2SV_ModStart> mrb_io * ) mrb_io_alloc ( mrb ) ; DATA_TYPE ( copy ) = & mrb_io_type ; DATA_PTR ( copy ) = fptr_copy ; buf = mrb_iv_get ( mrb, orig, mrb_intern_cstr ( mrb, ""@buf"" ) ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_set ( mrb, copy, mrb_intern_c",0
332,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
333,"<S2SV_ModStart> cpi ) { vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi,",0
334,"<S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return res ; <S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return res ; <S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return res ;",0
335,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; struct x86_emulate_ops * ops = ctxt -> ops ; <S2SV_ModStart> 2 ) ; ops -> get_segment ( ctxt, & old_cs, & old_desc, & old_eip, & new_desc ) ; <S2SV_ModStart> return X86EMUL_CONTINUE ; rc = assign_eip_far ( ctxt, ctxt -> src. val, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_far ( ctxt, ctxt -> src. val, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; ctxt -> src. val = old_eip ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_far ( ctxt, ctxt -> src. val, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_far ( ctxt, ctxt -> src. val, new_desc. l ) ; if ( rc",0
336,"<S2SV_ModStart> ; if ( log2_band_prec_width < 0 || log2_band_prec_height < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""log2_band_prec_width <S2SV_blank> must <S2SV_blank> be <S2SV_blank> %d\\n"", log2_band_prec_width ) ; if ( log2_band_prec_height < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""log2_band_prec_height <S2SV_blank> must <S2SV_blank> be <S2SV_blank> %d\\n"", log2_band_prec_height ) ; return AVERROR ( avctx, AV_LOG_ERROR, ""log2_band_prec_width <S2SV_blank> must <S2SV_blank> be <S2SV_blank> %d\\n"", log2_band_prec_width ) ; if ( log2_band_prec_height < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""log2_band_prec_height <S2SV_blank> must <S2SV_blank> be <S2SV_blank> %d\\n"", log2_band_prec_height ) ; return AVERROR ( avctx, AV_LOG_ERROR, ""log2_band_prec_height <S2SV_blank> must <S2SV_blank>",0
337,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
338,"<S2SV_ModStart> struct reloc_struct_t * got_table = calloc ( 1, n_got * sizeof ( ut32 ) ) ; if (! got_table ) { r_list_free ( list ) ; return NULL ; } obj -> n_got = n_got ; obj -> got_table = got_table ; } } if ( obj -> hdr -> data_start + 4 > obj -> size ) { r_list_free ( list ) ; return NULL ; } obj -> hdr -> data_start += 4 ; offset = 0 ; for ( i = 0 ; i < n_got ; i ++ ) { ut32 got_entry ; if ( obj -> hdr -> data_start + offset + 4 > obj -> size || obj -> hdr -> data_start + offset + 4 < obj -> size || obj -> hdr -> data_start + offset + 4 > obj -> size ) { break ; } len = r_buf_read_at ( obj -> b, obj -> hdr -> data_start + offset, ( ut8 * ) & got_entry, sizeof ( ut32 ) ) ; if (! VALID_GOT_ENTRY ( got_entry ) || len!= sizeof ( ut32",0
339,"<S2SV_ModStart> < 0 ) { info -> si_code = - EPERM ; info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
340,"<S2SV_ModStart> -> tw ; if ( p > 0 ) { * p_tx0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x0 ) ; * p_tx1 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + q * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x1 ) ; * p_ty0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y0 ) ; } else { * p_tx0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x0 ) ; * p_ty1 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 +",0
341,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static unsigned char <S2SV_ModEnd> * create_output_name ( <S2SV_ModStart> fname ) ; if (! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! ( p = ( unsigned char * ) malloc ( 2 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name, ( char * ) dir ) ; strcat ( ( char * ) name, ""/"" ) ; } p = & name [ strlen ( ( char * ) name ) ] ; if (! ( p = & name [ strlen ( ( char * ) name ) ] ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; }",0
342,"<S2SV_ModStart> php_unserialize_data_t var_hash ; <S2SV_ModEnd> HashTable * class_hash <S2SV_ModStart> } } } if (! php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { PHP_VAR_UNSERIALIZE_DESTROY ( var_hash ) ; FREE_HASHTABLE ( class_hash ) ; } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; } <S2SV_ModEnd> if ( class_hash <S2SV_ModStart> } if (! php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { PHP_VAR_UNSERIALIZE_DESTROY ( var_hash ) ; FREE_HASHTABLE ( class_hash ) ; } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; }",0
343,<S2SV_ModStart> goto __err ; <S2SV_ModEnd> tu -> queue,0
344,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; <S2SV_ModEnd> tmp_str = gf_malloc <S2SV_ModStart> tmp_strsize ) { ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_str [ i ] = gf_bs_read_u8 ( bs ) ; tmp_strsize -- ; if (! tmp_str [ i ] ) break ; i ++ ; } if ( i ) { ptr -> movie_identifier = gf_strdup ( tmp_str ) ; } else { ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_str [ i ] = gf_bs_read_u8 ( bs ) ; tmp_strsize -- ; if (! tmp_str [ i ] ) break ; i ++ ; } if ( i ) { ptr -> movie_identifier = gf_strdup ( tmp_str ) ; } if ( i ) { ptr -> movie_identifier = gf_strdup ( tmp_str ) ; } else { ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_str [ i ] = gf_bs_read_u8 ( bs ) ; tmp_strsize -- ; if (! tmp_str [ i ] )",0
345,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
346,<S2SV_ModStart> cmdline_syslog_name ) ; if ( cmdline_syslog_name [ Ustrlen ( cmdline_syslog_name ) - 1 ] == '\\0' || cmdline_syslog_name [ Ustrlen ( cmdline_syslog_name ) - 1 ] == '\\0' || cmdline_syslog_name [ Ustrlen ( cmdline_syslog_name ) - 1 ] == '\\0' || cmdline_syslog_name [ Ustrlen ( cmdline_syslog_name ) - 1 ] == '\\0' || cmdline_syslog_name [ Ustrlen ( cmdline_syslog_name ) - 1 ] == '\\0' || cmdline_syslog_name [ Ustrlen ( cmdline_syslog_name ) - 1 ] == '\\0' || cmdline_syslog_name [ Ustrlen ( cmdline_syslog_name ) - 1 ] == '\\0' || cmdline_syslog_name [ Ustrlen ( cmdline_syslog_name ) - 1 ] == '\\0' || cmdline_syslog_name [ Ustrlen ( cmdline_syslog_name ) - 1 ] == '\\0' || cmdline_syslog_name [ Ustrlen ( cmdline_syslog_name ),0
347,"<S2SV_ModStart> ; s -> seekable = simple_strtol ( p, NULL, 10 ) ; if ( s -> seekable == - 1 ) s -> seekable = simple_strtol ( p, NULL, 10 ) ; if ( s -> filesize == - 1 ) s -> seekable = simple_strtol ( p, NULL, 10 ) ; if ( s -> seekable == - 1 ) s -> seekable = simple_strtol ( p, NULL, 10 ) ; if ( s -> seekable == - 1 ) s -> seekable = simple_strtol ( p, NULL, 10 ) ; if ( s -> filesize == - 1 ) s -> seekable = simple_strtol ( p, NULL, 10 ) ; if ( s -> seekable == - 1 ) s -> seekable = simple_strtol ( p, NULL, 10 ) ; if ( s -> seekable == - 1 ) s -> seekable = simple_strtol ( p, NULL, 10 ) ; if ( s -> seekable == - 1 ) s -> seekable = simple_strtol ( p, NULL, 10 ) ; if ( s -> filesize == - 1 ) s -> seekable = 0 ; else s -> seekable",0
348,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> int offset, upb ; size_t maxw, maxh, max ; size_t <S2SV_ModEnd> offset, upb <S2SV_ModStart> int i, j ; maxw = ( size_t ) img -> comps [ 0 ]. w ; maxh = ( size_t ) img -> comps [ 0 ]. h ; max = maxw * maxh ; y = img -> comps [ 0 ]. data ; cb = img -> comps [ 1 ]. data ; cr = img -> comps [ 2 ]. data ; d0 = r = ( int * ) malloc ( sizeof ( int ) * max ) ; d1 = g = ( int * ) malloc ( sizeof ( int ) * max ) ; d2 = b = ( int * ) malloc ( sizeof ( int ) * max ) ; if ( r == NULL || g == NULL || b == NULL ) goto fails ; d0 = r = ( int * ) malloc ( sizeof ( int ) * max ) ; d1 = g = ( int * ) malloc ( sizeof ( int ) * max ) ; d1 = g = ( int * ) malloc ( sizeof ( int ) *",0
349,"<S2SV_ModStart> nfs4_state_set_mode_locked ( struct nfs4_state * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> FMODE_WRITE )!= fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> FMODE_WRITE ) ) { if ( state -> state & FMODE_WRITE ) list_move ( & state -> open_states, & state -> owner -> so_states ) ; else list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } state -> state = mode ; } else { if ( ( state -> state & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( mode & FMODE_READ ) list_move ( & state -> open_states, & state -> owner -> so_states ) ; else list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } state -> state = mode ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
350,<S2SV_ModStart> ; ptr = kex_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
351,"<S2SV_ModStart> ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
352,"<S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
353,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> char lbase [ <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> char strbase [ <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> char ltest [ <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> char strtest [ <S2SV_ModStart> 256 ] ; printf ( ""******Parameters********* <S2SV_blank> \\n"" ) ; printf ( "" <S2SV_blank> base_filename <S2SV_blank> = <S2SV_blank> %s\\n"", inParam. base_filename ) ; printf ( "" <S2SV_blank> test_filename <S2SV_blank> = <S2SV_blank> %s\\n"", inParam. test_filename ) ; if ( ( fbase = fopen ( inParam. base_filename, ""rb"" ) ) == NULL ) { goto cleanup ; } printf ( ""Ok.\\n"" ) ; while ( fgets ( lbase, sizeof ( lbase ), fbase ) && fgets ( ltest, sizeof ( ltest ), ftest ) ) { int nbase = sscanf ( lbase, ""%255[^\\r\\n]"", strbase ) ; int ntest = sscanf ( ltest, ""%255[^\\r\\n]"", strtest ) ; if ( nbase!= 255 || ntest!= 255 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" )",0
354,"<S2SV_ModStart> intf ) { <S2SV_ModEnd> if ( cdc_ncm_select_altsetting <S2SV_ModStart> - ENODEV ; if ( intf -> altsetting == CDC_NCM_COMM_ALTSETTING_NCM ) return - ENODEV ; <S2SV_ModStart> 0 ) ; if ( intf -> altsetting == CDC_NCM_DATA_ALTSETTING_NCM ) ret = cdc_ncm_bind_common ( dev, intf, CDC_NCM_COMM_ALTSETTING_NCM, 0 ) ; else ret = cdc_ncm_bind_common ( dev, intf, CDC_NCM_DATA_ALTSETTING_NCM, 0 ) ; if ( ret < 0 ) return ret ; if ( intf -> altsetting == CDC_NCM_COMM_ALTSETTING_NCM ) ret = cdc_ncm_bind_common ( dev, intf, CDC_NCM_DATA_ALTSETTING_NCM, 0 ) ; else ret = cdc_ncm_bind_common ( dev, intf, CDC_NCM_DATA_ALTSETTING_NCM, 0 ) ; if ( ret < 0",0
355,"<S2SV_ModStart> 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; }",0
356,"<S2SV_ModStart> ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", i, ( unsigned ) JPC_QCX_GETEXPPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", i, ( unsigned ) JPC_QCX_GETEXPPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms",0
357,"<S2SV_ModStart> - EINVAL ; if ( e -> target_offset!= e -> next_offset ) { duprintf ( ""Bad <S2SV_blank> offset <S2SV_blank> %p\\n"", e, e -> target_offset ) ; return - EINVAL ; }",0
358,"<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME <S2SV_ModEnd> ; } if <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME <S2SV_ModEnd> ; } if <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME <S2SV_ModEnd> ; } if <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME <S2SV_ModEnd> ; } <S2SV_null>",0
359,"<S2SV_ModStart> 1 ) ; } if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; }",0
360,<S2SV_ModStart> q ) { spin_lock_irq ( & q -> use_lock ) ; <S2SV_ModStart> timer ) ; spin_unlock_irq ( & q -> use_lock ) ;,0
361,"<S2SV_ModStart> int error ; pgoff_t start = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; unsigned int start_offset = ( offset & ~ PAGE_CACHE_MASK ) <S2SV_ModEnd> >> PAGE_CACHE_SHIFT ; <S2SV_ModStart> ~ PAGE_CACHE_MASK ; unsigned int end_offset = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; unsigned int from, to ; if (! end_offset ) end_offset = PAGE_CACHE_SIZE ; if ( gfs2_is_stuffed ( ip ) ) { error = gfs2_unstuff_dinode ( ip, NULL ) ; if ( unlikely ( error ) ) goto out ; goto out ; } curr = start ; offset = start << PAGE_CACHE_SHIFT ; from = start_offset ; to = PAGE_CACHE_SIZE ; error = write_empty_blocks ( inode, from, to, mode ) ; if (! error && offset + to > inode -> i_size &&! ( mode & FALLOC_FL_KEEP_SIZE ) ) { i_size_write ( inode, offset + to ) ; } unlock_page ( page ) ; page_cache_release ( page )",0
362,"<S2SV_ModStart> ) ; VipsForeignLoadClassClass <S2SV_ModEnd> class = VIPS_FOREIGN_LOAD_GET_CLASS <S2SV_ModStart> load ) || vips_image_pio_input <S2SV_ModEnd> ( load -> <S2SV_ModStart> out ) ) { g_object_set_qdata ( G_OBJECT ( load -> real ), vips__foreign_load_operation, load ) ; <S2SV_ModStart> load ) || vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; } g_object_set_qdata ( G_OBJECT ( load -> real ), vips__foreign_load_operation, load ) ; if ( class -> load ( load ) || vips_image_pio_input ( load -> real ) ) { g_object_set_qdata ( G_OBJECT ( load -> real ), vips__foreign_load_operation, load ) ; load -> real -> progress_signal = load -> out ; g_object_set_qdata ( G_OBJECT ( load -> real ), vips__foreign_load_operation, load ) ; if ( class -> load ( load ) || vips_image_pio_input ( load -> real ) )",0
363,"<S2SV_ModStart> image_noffset ) { if ( noffset == - FDT_ERR_NOENT ) { printf ( "" <S2SV_blank> error!\\n%s <S2SV_blank> for <S2SV_blank> \'%s\' <S2SV_blank> hash <S2SV_blank> node <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> image <S2SV_blank> node\\n"", err_msg, fit_get_name ( fit, noffset, NULL ), fit_get_name ( fit, image_noffset, NULL ) ) ; return - 1 ; } } if ( noffset == - FDT_ERR_NOENT ) { printf ( "" <S2SV_blank> error!\\n%s <S2SV_blank> for <S2SV_blank> \'%s\' <S2SV_blank> hash <S2SV_blank> node <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> image <S2SV_blank> node\\n"", err_msg, fit_get_name ( fit, noffset, NULL ), fit_get_name ( fit, image_noffset, NULL ) ) ; return - 1 ; } if ( noffset == - FDT_ERR_NOENT ) { printf ( "" <S2SV_blank> error!\\n%s <S2SV_blank> for <S2SV_blank> \'%s\' <S2SV_blank> hash <S2SV_blank> node <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> image <S2SV_blank> node\\n"", err_msg, fit_get_name ( fit, n",0
364,"<S2SV_ModStart> & XFS_ATTR_LOCAL ) { xfs_attr_leaf_name_local_t * name_loc ; cursor -> offset = xfs_attr3_leaf_name_local ( leaf, i ) ; cursor -> flags &= ~ XFS_ATTR_LOCAL ; } else if ( cursor -> flags & XFS_ATTR_INCOMPLETE ) { xfs_attr_leaf_name_local_t * name_loc ; cursor -> flags &= ~ XFS_ATTR_INCOMPLETE ; } else if ( cursor -> flags & XFS_ATTR_LOCAL ) { xfs_attr_leaf_name_local_t * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; cursor -> flags |= XFS_ATTR_LOCAL ; } else if ( cursor -> flags & XFS_ATTR_INCOMPLETE ) { xfs_attr_leaf_name_local_t * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; cursor -> flags &= ~ XFS_ATTR_LOCAL ; } else { xfs_attr_leaf_name_local_t * name_loc = xfs_",0
365,"<S2SV_ModStart> ; if ( state -> rx_kfifo. size < CX23888_IR_RX_KFIFO_SIZE || state -> tx_kfifo. size < CX23888_IR_TX_KFIFO_SIZE ) { ret = - ENOMEM ; cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_read4 ( dev, CX23888_IR_TX_KFIFO_SIZE ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_",0
366,<S2SV_ModStart> service_name_tlv_length ) ; if (! service_name_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if (! miux_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if (! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; },1
367,"<S2SV_ModStart> void ) { <S2SV_ModEnd> struct ssh * <S2SV_ModStart> ssh = active_state <S2SV_ModEnd> ; if ( <S2SV_ModStart>. compression ) { mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_packet_set_compress_hooks ( ssh, mon -> m_zlib, ( ssh_packet_comp_alloc_func * ) mm_zalloc, ( ssh_packet_comp_free_func * ) mm_zfree ) ; } else { mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_packet_set_compress_hooks ( ssh, mon -> m_zlib, ( ssh_packet_comp_alloc_func * ) mm_zalloc, ( ssh_packet_comp_free",0
368,"<S2SV_ModStart> iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> = VPX_CODEC_ABI_MISMATCH ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( (",0
369,<S2SV_ModStart> * chan ; jas_uint16 <S2SV_ModEnd> numchans ; if,0
370,"<S2SV_ModStart> value |= TJA1100_CONFIG1_MII_MODE_LOW ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_MII_MODE_HIGH ; value |= TJA1100_CONFIG1_MII_MODE_LOW ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP <S2SV_ModEnd> ; tja1100WritePhyReg (",0
371,"<S2SV_ModStart> ; if ( iph -> protocol == IPPROTO_ICMP && iph -> frag_off & htons ( IP_OFFSET ) ) { iph = ip_hdr ( skb_in ) ; if ( iph -> frag_off & htons ( IP_OFFSET ) ) { iph = ip_hdr ( skb_in ) ; if ( iph -> frag_off & htons ( IP_OFFSET ) ) goto out ; } } else { iph = ip_hdr ( skb_in ) ; if ( iph -> protocol == IPPROTO_ICMP && iph -> frag_off & htons ( IP_OFFSET ) ) { iph = ip_hdr ( skb_in ) ; if ( iph -> frag_off & htons ( IP_OFFSET ) ) { iph = ip_hdr ( skb_in ) + ( iph -> ihl << 2 ) + offsetof ( struct icmphdr, type ) - skb_in -> data, sizeof ( struct icmphdr ) - skb_in -> data ) ; if ( iph -> frag_off & htons ( IP_OFFSET ) )",0
372,"<S2SV_ModStart> len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> = <S2SV_blank> 6)"" ) ) ; return len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; }",0
373,<S2SV_ModStart> 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
374,<S2SV_ModStart> private ) { crypto_free_skcipher <S2SV_ModEnd> ( private ),0
375,"<S2SV_ModStart> bprm ) { <S2SV_ModEnd> umode_t mode = <S2SV_ModStart> int retval ; bprm -> cred -> euid = current_euid ( ) ; bprm -> cred -> egid = current_egid ( ) ; if (! ( bprm -> file -> f_path. mnt -> mnt_flags & MNT_NOSUID ) &&! task_no_new_privs ( current ) && kuid_has_mapping ( bprm -> cred -> user_ns, bprm -> cred -> euid ) && kgid_has_mapping ( bprm -> cred -> user_ns, bprm -> cred -> egid ) ) { if ( ( mode & ( S_ISUID | S_IXGRP ) ) == ( S_ISUID | S_IXGRP ) ) == ( S_ISUID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_ON_SETID ; bprm -> cred -> euid = inode -> i_uid ; } if ( ( mode & ( S_ISGID | S_IXGRP ) ) == ( S_ISGID | S",0
376,<S2SV_ModStart> = nlogs ; if ( unlikely ( log ) ) * log_num = nlogs ;,0
377,<S2SV_ModStart> ) ) { if ( dlen < 2 ) break ; * pt ++ = '\\\\' ; * pt ++ = * s ; } else if (,0
378,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
379,<S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res,0
380,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
381,<S2SV_ModStart> skb_is_nonlinear ( skb ) ) return 0 ; if ( skb -> len < sizeof ( struct nlattr,1
382,"<S2SV_ModStart> ; encode_share_access ( xdr <S2SV_ModEnd>, arg ->",0
383,"<S2SV_ModStart> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> flags <S2SV_blank> [%u]"", bittok2str ( gre_flag_values, ""none"", flags ) ) ) ; bp += 2 ; len -= 2 ; if ( flags & GRE_CP ) { ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> sum <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; } if ( flags & GRE_KP ) { ND_TCHECK2 ( * bp, 4 ) ; if ( len < 4 ) goto trunc ; ND_PRINT ( ( ndo, "", <S2SV_blank> key=0x%x"", EXTRACT_32BITS ( bp ) ) ) ; bp += 4 ; len -= 4 ; } if ( flags & GRE_SP ) { ND_TCHECK2 ( * bp, 4 ) ; if ( len < 4 ) goto trunc ; ND_PRINT ( ( ndo, "", <S2SV_blank> seq <S2SV_blank> %u""",0
384,"<S2SV_ModStart> ) ) { if ( tile_buffsize == 0 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size"" ) ; exit ( - 1 ) ; } tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ]",0
385,"<S2SV_ModStart> 'u' }, # if defined _WITH_BFD_ { ""no_bfd"", no_argument, NULL, 3 }, { ""log-console"", no_argument, NULL, 2 }, { ""log-detail"", no_argument, NULL, 3 }, { ""log-facility"", optional_argument, NULL, 'g' }, { ""log-file"", optional_argument, NULL, 'l' }, # if defined _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL, 'I' }, { ""dont-fork"", no_argument, NULL, 'n' }, { ""dont-respawn"", no_argument, NULL, 'R' }, { ""dont-fork"", no_argument, NULL, 'n' }, # if defined _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL, 'I' }, # endif { ""dont-respawn"", no_argument, NULL, 'n' }, { ""dont-fork"", no_argument",0
386,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; return <S2SV_ModEnd> EINVAL ; } <S2SV_ModStart> EINVAL ; break <S2SV_ModEnd> ; } <S2SV_null>",0
387,"<S2SV_ModStart> item ) ; <S2SV_ModEnd> unsigned long tmp <S2SV_ModStart> EINVAL ; tmp = node -> nd_num ; if ( tmp == cluster -> cl_has_local && cluster -> cl_local_node!= node -> nd_num ) return - EBUSY ; if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ||! test_bit ( O2NM_NODE_NUM, & node -> nd_set_attributes ) ) return - EINVAL ; node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd",0
388,"<S2SV_ModStart> ; if ( ( n = fscanf ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"", & n, typestr ) )!= 2 ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; <S2SV_ModStart> if ( ( n = fscanf ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"", n, typestr ) )!= 2 ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if ( ( n = fscanf ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"", n, typestr ) )!= 2 ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if ( ( n = fscanf ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n""",0
389,<S2SV_ModStart> case 0x0a : case 0x0b : case 0x0c : case 0x0f : <S2SV_ModStart> case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case,0
390,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> sk ) ; <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { <S2SV_ModEnd> pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"" <S2SV_ModStart> sk ) ; sctp_transport_put ( transport ) ; goto out_unlock ; } error = sctp_do_sm ( net, SCTP_EVENT_T3_RTX, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_T3_RTX ), asoc -> state, asoc -> ep, asoc, transport, GFP_ATOMIC ) ; if ( error ) <S2SV_ModEnd> asoc -> base <S2SV_ModStart> -> sk -> sk_err = - error <S2SV_ModEnd> ; out_unlock : <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;",0
391,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
392,"<S2SV_ModStart> E_NOTHANDLED ; fd = open ( EF_GBL_OPTIONS -> output_file, O_RDWR | O_TRUNC | O_BINARY, 0644 ) ; ON_ERROR ( fd, - 1, ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s"", EF_GBL_OPTIONS -> output_file ) ;",0
393,"<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), lshp -> ls_age, lshp -> ls_length ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), lshp -> ls_age ), lshp -> ls_length ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), lsh",0
394,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
395,"<S2SV_ModStart> ; if (! ND_TTEST2 ( * ( p + offset ), elementlen + 2 ) ) return 0 ; if (! <S2SV_ModStart> ; if (! ND_TTEST2 ( * ( p + offset ), elementlen + 2 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 2 ), elementlen + 2 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 2 ), elementlen + 2 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), elementlen + 2 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), elementlen + 2 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 2 ), elementlen + 2 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 2 ), elementlen + 2 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), elementlen + 2 ) ) return 0 ; if (! ND",0
396,<S2SV_ModStart> } else { if (! <S2SV_ModStart> -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; opipe -> nrbufs ++ ; ibuf -> offset += obuf -> len ; obuf -> len -= obuf -> len ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; opipe -> nrbufs ++ ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; } ret += obuf -> len ; obuf -> len -= obuf -> len ;,0
397,"<S2SV_ModStart> ; r_buf_set_bytes ( tbuf <S2SV_ModEnd>, buf,",0
398,"<S2SV_ModStart> long err ; <S2SV_ModEnd> if (! <S2SV_ModStart> = 0 ; if (! access_ok ( VERIFY_WRITE, & r, sizeof ( r ) ) ) return - EFAULT ; err |= __put_user ( r. ru_utime. tv_sec, & ur -> ru_utime. tv_sec ) ; err |= __put_user ( r. ru_utime. tv_usec, & ur -> ru_utime. tv_usec ) ; err |= __put_user ( r. ru_stime. tv_sec, & ur -> ru_stime. tv_sec ) ; err |= __put_user ( r. ru_stime. tv_usec, & ur -> ru_stime. tv_usec ) ; err |= __put_user ( r. ru_maxrss, & ur -> ru_maxrss ) ; err |= __put_user ( r. ru_ixrss, & ur -> ru_ixrss ) ; err |= __put_user ( r. ru_idrss, & ur -> ru_idrss ) ; err |= __put_user ( r. ru_isrss, & ur -> ru_",0
399,"<S2SV_ModStart> NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/net"", ""%r/proc/net"", NULL, MS_MOVE, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_RW, ""proc"", ""%r/proc"", ""proc"", MS",0
400,"<S2SV_ModStart> { pb_stream pre_sa_pbs = sa_pd -> pbs ; policy = preparse_isakmp_sa_body ( & pre_sa_pbs ) ; if ( policy == LEMPTY ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), ( policy!= LEMPTY )? bitnamesof ( sa_policy_bit_names, policy ) : """", ( policy!= LEMPTY )? bitnamesof ( sa_policy_bit_names, policy ) : """" ) ; } else { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md",0
401,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> { nsc_encode_argb_to_aycocg ( context <S2SV_ModEnd>, bmpdata, <S2SV_ModStart> { nsc_encode_subsampling ( context <S2SV_ModEnd> ) ; }",0
402,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
403,<S2SV_ModStart> { if ( ( <S2SV_ModStart> == ETH_SS_STATS ) && ( g_xgmac_stats_string [ sizeof ( g_xgmac_stats_string ) - 1 ] == '0' || ( g_xgmac_stats_string [ sizeof ( g_xgmac_stats_string ) - 1 ] == '\\0' ) && ( g_xgmac_stats_string [ sizeof ( g_xgmac_stats_string ) - 1 ] == '\\0' || g_xgmac_stats_string [ sizeof ( g_xgmac_stats_string ) - 1 ] == '\\0' || g_xgmac_stats_string [ sizeof ( g_xgmac_stats_string ) - 1 ] == '\\0' || g_xgmac_stats_string [ 0 ] == '\\0' ) && ( g_xgmac_stats_string [ sizeof ( g_xgmac_stats_string ) - 1 ] == '\\0' || g_xgmac_stats_string [ sizeof ( g_xgmac_stats_string ) - 1 ] == '\\0',0
404,<S2SV_ModStart> == 1 ) { size_t columns = GetPSDPacketSize ( image ) ; return ( columns * GetPSDPacketSize ( image ) ) / 8 ; } else { size_t columns = ( image -> columns + 7 ) / 8 ; return ( columns * GetPSDPacketSize ( image ) ) / 8 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
405,"<S2SV_ModStart> = open ( dev_path <S2SV_ModEnd>, O_RDWR | <S2SV_ModStart> O_CLOEXEC ) ; if ( p_dev -> fd == - 1 ) { APPL_TRACE_WARNING ( ""%s: <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, p_dev -> fd ) ; break ; } <S2SV_ModStart> = open ( dev_path <S2SV_ModEnd>, O_RDWR | <S2SV_ModStart> O_CLOEXEC ) ; if ( p_dev -> fd == - 1 ) { APPL_TRACE_WARNING ( ""%s: <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, p_dev -> fd ) ; break ; }",0
406,"<S2SV_ModStart> bMasterInterface0 ) ; if ( alt -> desc. bNumEndpoints < 1 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } <S2SV_ModStart> bSlaveInterface0 ) ; if ( alt -> desc. bNumEndpoints < 1 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } <S2SV_ModStart> -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } if ( alt -> desc. bNumEndpoints < 1 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } if (",0
407,"<S2SV_ModStart> intf ) ; struct device * dev ; <S2SV_ModStart> -> name ; dev = & d -> udev -> dev ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> bInterfaceNumber=%d\\n"", __func__, intf -> cur_altsetting -> desc. bInterfaceNumber, intf -> cur_altsetting -> desc. bInterfaceNumber ) ; dev_info ( & d -> udev -> dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME <S2SV_ModEnd>, name ) <S2SV_ModStart> d ) ; dev_info ( & d -> udev -> dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
408,<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 1 || pirlvl -> prcheightexpn + picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 1 || pirlvl -> prcwidthexpn > JAS_UINTFAST32_NUMBITS - 1 || pirlvl -> prcheightexpn > JAS_UINTFAST32_NUMBITS - 1 || pirlvl -> prcheightexpn > JAS_UINTFAST32_NUMBITS - 1 || pirlvl -> prcheightexpn > JAS_UINTFAST32_NUMBITS - 1 || pirlvl -> prcwidthexpn > JAS_UINTFAST32_NUMBITS - 1 || pirlvl -> prcheightexpn > JAS_UINTFAST32_NUMBITS - 1 || pirlvl -> prcwidthexpn > JAS_UINTFAST32_NUMBITS - 1 || pirlvl -> prcwidthexpn > JAS_U,0
409,"<S2SV_ModStart> target_enc ) { if ( ( cpat = conv_encoding ( ci -> pattern_enc, pattern, pattern_end, & cpat_end, & cpat, & cpat_end ) ) == ONIGERR_ENCODER ) r = ONIGERR_ENCODER_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE ( cpat, cpat_end, ci -> syntax ) ; if ( r!= ONIGERR_ENCODER_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_DECODE_",0
410,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart> exception ) { size_t <S2SV_ModEnd> bit ; ssize_t <S2SV_ModStart> ; ssize_t x <S2SV_ModEnd> ; register Quantum <S2SV_ModStart> ; ssize_t bit <S2SV_ModEnd> ; ssize_t x <S2SV_ModStart> ; ssize_t x <S2SV_ModEnd> ; register Quantum <S2SV_ModStart> ; index = <S2SV_ModEnd> 0 ; switch <S2SV_ModStart> case 1 : { Quantum index ; index = 0 ; if ( ( * p ) & ( 0x80 >> bit ) )!= 0 ) { index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) )!= 0 )? 0x01 : 0x00 ) ; SetPixelIndex ( image, index, q ) ; q += GetPixelChannels ( image ) ; } p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 8 ) ; bit ++ ) { index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) ) )!= 0 )? 0x01 : 0x00 ) ; SetPixelIndex ( image,",0
411,"<S2SV_ModStart> const u_char * tptr, u_int length <S2SV_ModStart> u_int network_addr_type ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return - 1 ; } <S2SV_ModStart> case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break",0
412,"<S2SV_ModStart> ; u64 msr_data = 0 <S2SV_ModEnd> ; int usermode <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; if ( ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_CS, & msr_data )!= 0x0 ) return emulate_gp ( ctxt, 0 ) ; <S2SV_ModStart> = 1 ; if ( ops -> get_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_RDX ) ; * reg_write ( ctxt, VCPU_REGS_RSP ) = reg_read ( ctxt, VCPU_REGS_RSP ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel",0
413,"<S2SV_ModStart> dev ) ; mutex_lock ( & drv_mutex ) ; <S2SV_ModStart> -> driver_override ) ; mutex_unlock ( & drv_mutex ) ; return sprintf ( buf, ""%s\\n"", pdev -> driver_override ) ;",0
414,"<S2SV_ModStart>, i ; BIO * tmpout = NULL ; BIO_set_mem_eof_return ( tmpout, 0 ) ; if ( out == NULL ) tmpout = BIO_new ( BIO_s_null ( ) ) ; else if ( flags & CMS_TEXT ) { tmpout = BIO_new ( BIO_s_mem ( ) ) ; BIO_set_mem_eof_return ( tmpout, 0 ) ; } else tmpout = out ; if (! tmpout ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } for ( ; ; ) { i = BIO_read ( in, buf, sizeof ( buf ) ) ; if ( i <= 0 ) { if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; } if ( i <= 0 ) { if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in )",0
415,"<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( retval == 0 ) rs. respond ( rs. arg, retval, NULL, NULL, NULL ) ;",0
416,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] ; int b ; for ( b = 0 ; b <= 1 ; ++ b ) { const int cc = c + vp9_cost_bit ( prob, b ) ; const vpx_tree_index ii = tree [ i + b ] ; if ( ii <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } }",0
417,<S2SV_ModStart>. st_mode & ( S_IRUSR | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_,0
418,"<S2SV_ModStart> ; switch ( c -> family ) { case AF_INET : ( void ) inet_ntop ( af, & ( ( struct sockaddr_in * ) sock_addr ) -> sin_addr, addr_text, sizeof ( addr_text ) - 1 ) ; port = ntohs ( ( ( struct sockaddr_in * ) sock_addr ) -> sin_port ) ; protoname = ""unix"" ; break ; case AF_INET6 : ( void ) inet_ntop ( af, & ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_addr, addr_text + 1, sizeof ( addr_text ) - 1 ) ; port = ntohs ( ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_port ) ; protoname = ""udp6"" ; break ; case AF_UNIX : ( void ) inet_ntop ( af, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, addr_text, sizeof ( addr_text ) - 1 ) ; port = ntohs ( ( ( struct sockaddr_un * ) sock_addr ) -> sun_",0
419,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
420,"<S2SV_ModStart> & 0xffff ; if ( p + 4 + c > SYNTH_EVENT_BUFSIZE ) return - EINVAL ; <S2SV_ModStart> out ; } if ( ev_code >= 128 ) { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 4 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } ev_size = 8 ; if ( c < ev_size ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 4 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return count - c ; } if ( copy_from_user ( ( char * ) & event_rec [ 4 ], & ( buf ) [ p + 4 ], 4 ) ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 4 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; }",0
421,"<S2SV_ModStart> avoid_reserve ) { struct hugepage_subpool * spool = subpool_vma ( vma ) ; struct hugepage_subpool * spool = subpool_vma ( vma ) ; struct hugepage_subpool * spool <S2SV_ModEnd> = hstate_vma ( <S2SV_ModStart> vma ) ; spin_lock ( & hugetlb_lock ) ; page = dequeue_buddy_huge_page_vma ( h, vma, addr, avoid_reserve ) ; if (! page ) { spin_unlock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { spin_unlock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { spin_unlock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { spin_unlock ( & hugetlb_lock",0
422,"<S2SV_ModStart> ; DPRINTF ( 4 <S2SV_ModEnd>, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s\'\\n"" <S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s\'\\n"", filegen_string, filegen -> prefix, filegen -> basename ) ) ; filegen -> flag |= FGEN_FLAG_ENABLED ; my_node = HEAD_PFIFO ( my_node -> options ) ; for ( ; my_node!= NULL ; my_node = my_node -> options ) ; for ( ; my_node!= NULL ; my_node = my_node -> link ) { switch ( my_opts -> attr ) { case T_File : filegen_file = my_opts -> value. s ; break ; case T_Pid : filegen_type = my_opts -> value. i ; break ; case T_Day : filegen_type = FILEGEN_DAY ; break ; case T_Week : filegen_type = FILEGEN_WEEK ; break ; case T_None : filegen_type = FILEGEN_NONE ; break ; case T_Pid : filegen_type =",0
423,"<S2SV_ModStart> -> stamp_path ) { if (! file_exists ( t -> stamp_path ) ) { log_unit_warning ( UNIT ( t ), ""Failed <S2SV_blank> to <S2SV_blank> queue <S2SV_blank> unit <S2SV_blank> startup <S2SV_blank> job: <S2SV_blank> %s"", bus_error_message ( & error, r ) ) ; timer_enter_dead ( t, TIMER_FAILURE_RESOURCES ) ; return ; }",0
424,"<S2SV_ModStart> fadst16 ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> output ) { tran_low_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> = input [ 15 ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> = input [ 0 <S2SV_ModStart> = input [ 1 ] ; tran_high_t <S2SV_ModEnd> x2 = <S2SV_ModStart> = input [ 2 ] ; tran_",0
425,<S2SV_ModStart> ; # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_EDSP flags |= HAVE_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif,0
426,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
427,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
428,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
429,<S2SV_ModStart> ; length = avio_read_small_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
430,"<S2SV_ModStart> * fpath = NULL <S2SV_ModEnd>, * controller <S2SV_ModStart> out ; } if ( fpath ) { fprintf ( stderr, ""rmdir: <S2SV_blank> verifying <S2SV_blank> access <S2SV_blank> to <S2SV_blank> %s:%s <S2SV_blank> (req <S2SV_blank> path <S2SV_blank> %s)\\n"", controller, cgdir, path ) ; if (! fc_may_access ( fc, fc, controller, cgdir, NULL, O_RDONLY ) ) { ret = - EACCES ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! fc_may_access ( fc, fc, controller, cgdir, NULL, O_WRONLY ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! cgfs_remove ( controller, cgroup ) ) { ret = - EINVAL ; goto out ; } ret = 0 ; out : free ( fpath ) ; return ret ; } <S2SV_ModEnd> <S2SV_null",0
431,"<S2SV_ModStart> ; if ( mnt -> mnt. mnt_flags & MNT_READONLY ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( mnt -> mnt. mnt_flags & MNT_PRIVILEGED ) mnt -> mnt. mnt_flags |= MNT_LOCK_PRIVILEGED ; if ( mnt -> mnt. mnt_flags & MNT_READONLY ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( mnt -> mnt. mnt_flags & MNT_PRIVILEGED ) mnt -> mnt. mnt_flags |= MNT_LOCK_PRIVILEGED ; atomic_inc ( & sb -> s_active ) ; mnt -> mnt. mnt_mountpoint = mnt -> mnt. mnt_mountpoint ; mnt -> mnt_root = dget ( root ) ; mnt -> mnt_parent = mnt ; lock_mount_hash ( ) ; list_add_tail ( & mnt -> mnt_instance, & sb -> s_mounts )",0
432,"<S2SV_ModStart> trans = & rds_loop_transport ; } else if ( trans == NULL ) { kmem_cache_free ( rds_conn_slab, conn ) ; conn = ERR_PTR ( - ENODEV ) ; goto out ; }",0
433,"<S2SV_ModStart> { if ( rdesc [ 104 ] == 0x26 && rdesc [ 105 ] == 0x80 && rdesc [ 110 ] == 0x03 && rdesc [ 111 ] == 0x21 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x03 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; } else { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x03 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; }",0
434,"<S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len - offset ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL <S2SV_blank> key <S2SV_blank> length"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_PARAMETER ; } <S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len - offset ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL <S2SV_blank> key <S2SV_blank> length"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_PARAMETER ; } <S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len - offset ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL <S2SV_blank> key <S2SV_blank> length"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_PARAMETER ; }",0
435,"<S2SV_ModStart> & I8042_STR_AUXERR ) { dbg ( ""AUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; if ( time_before ( jiffies, last_transmit + HZ / 10 ) ) { str = last_str ; break ; } case 0xfe : dfl = SERIO_TIMEOUT ; data = 0xfe ; break ; case 0xff : dfl = ( ( str & I8042_STR_TIMEOUT &&! i8042_notimeout )? SERIO_TIMEOUT : 0 ) | ( ( str & I8042_STR_PARITY )? SERIO_PARITY : 0 ) | ( ( str & I8042_STR_TIMEOUT &&! i8042_notimeout )? SERIO_TIMEOUT : 0 ) ;",0
436,"<S2SV_ModStart> case NFSPROC_GETWCCRES : if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> wccres:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } else if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } else if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ;",0
437,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_translate_to_linux ( uint8_t <S2SV_ModStart> uint8_t * UDFName, int udfLen, uint8_t * <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
438,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( const <S2SV_ModStart> MODE_INFO * const tile_info <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const VP9_COMMON * <S2SV_ModStart> cm = & tile_info <S2SV_ModEnd> -> common ; <S2SV_ModStart> -> common ; int bw, bh ; int bs = num_8x8_blocks_wide_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; bh = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; if ( bw == bs && bh == bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, bs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, h",0
439,<S2SV_ModStart> ; if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) ) { resetClient ( c ) ; if ( server. current_client == NULL ) break ; },0
440,"<S2SV_ModStart> = 0 ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_GET_BLOCKS_READ | EXT4_GET_BLOCKS_WRITE ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; if ( mpd -> b_state & ( 1 << BH_Delay ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_GET_BLOCKS_CREATE ; if ( mpd -> b_state & ( 1 << BH_Delay ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; err = ext4_get_blocks ( handle, mpd -> inode, next, max_blocks, & new, get_blocks_flags ) ; if ( err ) { ext4_msg ( mpd -> inode -> i_sb,",0
441,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; s = <S2SV_ModStart> ; if ( d2i_DSA_SIG <S2SV_ModEnd> ( & s <S2SV_ModStart> sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : if ( s ) <S2SV_ModStart> err : DSA_SIG_free <S2SV_ModEnd> ( s )",0
442,"<S2SV_ModStart> NULL ) ; if (! out ) return NULL ; rv = gdImageGifCtx <S2SV_ModEnd> ( im, <S2SV_ModStart> out ) ; if ( rv ) { <S2SV_ModEnd> rv = gdDPExtractData <S2SV_ModStart> size ) ; }",0
443,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
444,"<S2SV_ModStart> = 0 ; size_t addrlen = 0 ; <S2SV_ModStart>, handle, & addrlen <S2SV_ModEnd>, & p <S2SV_ModStart> ai_flags, & addrlen <S2SV_ModEnd>, & p <S2SV_ModStart> ai_family, & addrlen <S2SV_ModEnd>, & p <S2SV_ModStart> ai_protocol, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL,",0
445,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; if ( separator!= NULL ) { * separator = '\\0' ; strSafeCopy ( connection -> request. auth. user, token, HTTP_SERVER_USERNAME_MAX_LEN ) ; token = separator + 1 ; } <S2SV_ModEnd> } TRACE_DEBUG ( <S2SV_ModStart> ; if ( separator!= NULL ) { * separator = '\\0' ; strSafeCopy ( connection -> request. auth. password, token, HTTP_SERVER_PASSWORD_MAX_LEN ) ; token = separator + 1 ; } } } TRACE_DEBUG ( ""Authorization <S2SV_blank> header:\\r\\n"" ) ; TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> username: <S2SV_blank> %s\\r\\n"", connection -> request. auth. user ) ; token = osStrtok_r ( NULL, "","", & p ) ; if ( token!= NULL ) { * separator = '\\0' ; separator = osStrchr ( token, '=' ) ; if ( separator!= NULL ) { * separator = '\\0' ; strSafeCopy ( connection -> request. auth. password, token, HTTP_SERVER_USERNAME_MAX_LEN ) ; token = separator + 1 ;",0
446,"<S2SV_ModStart> rctx -> rbuf [ 5 ] ) ; rctx -> <S2SV_ModStart> ] ) ; if ( rctx -> image_height > rctx -> image_width ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> LZW <S2SV_blank> image <S2SV_blank> size"" ) ; goto done ; }",0
447,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
448,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart>, 100 ) ; kfree ( buf ) ;",0
449,"<S2SV_ModStart> asdl_seq * body <S2SV_ModEnd>, PyArena * <S2SV_ModStart> ; return p <S2SV_ModEnd> ; } <S2SV_null>",0
450,"<S2SV_ModStart> destroy_list ) ; sas_discover_event ( dev -> port, DISCE_DESTRUCT ) ; sas_unregister_common_dev ( port, dev ) ; return ; } if ( test_bit ( SAS_DEV_UNREGISTERING, & dev -> state ) ) { list_del_init ( & dev -> disco_list_node ) ; sas_rphy_unlink ( dev -> rphy ) ; list_move_tail ( & dev -> disco_list_node, & port -> destroy_list ) ; sas_discover_event ( dev -> port, DISCE_DESTRUCT ) ; sas_unregister_common_dev ( port, dev ) ; return ; } if ( test_bit ( SAS_DEV_DESTROY, & dev -> state ) ) { list_del_init ( & dev -> disco_list_node ) ; list_move_tail ( & dev -> disco_list_node, & port -> destroy_list ) ; sas_discover_event ( dev -> port, DISCE_DESTRUCT ) ; sas_discover_event ( dev -> port, DISCE_DESTRUCT ) ; return ;",0
451,"<S2SV_ModStart> * src, <S2SV_ModEnd> unsigned int flags <S2SV_ModStart> >> 4 ; # if USE_PARTIAL_COPY int row, col, active_end ; # else int row, col, active_end ; int mb_rows = ( src -> y_height + 15 ) >> 4 ; int mb_cols = ( src -> y_width + 15 ) >> 4 ; # endif if ( ctx -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) return 1 ; ctx -> sz ++ ; buf = pop ( ctx, & ctx -> write_idx ) ; # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { for ( ; col < mb_cols ; ++ col ) { if (! active_map [ col ] ) break ; active_end = col ; for ( ; active_end < mb_cols ; ++ active_end ) { if (! active_map [ active_end ] ) break ; } vp9_copy_and_extend_frame ( src, & buf -> img, row << 4",0
452,<S2SV_ModStart> cdev ) ; kfree ( cc ) ;,0
453,"<S2SV_ModStart> return code ; if ( ( * s4u_x509_user ) -> user_id. subject_cert. length == 0 ) { * status = ""INVALID_S4U2SELF_REQUEST"" ; krb5_free_pa_s4u_x509_user ( context, * s4u_x509_user ) ; * s4u_x509_user = NULL ; return KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN ; } code = verify_s4u_x509_user_checksum ( context, tgs_subkey? tgs_subkey : tgs_session, & req_data, request -> nonce, * s4u_x509_user ) ; if ( code ) { * status = ""INVALID_S4U2SELF_CHECKSUM"" ; krb5_free_pa_s4u_x509_user ( context, * s4u_x509_user ) ; * s4u_x509_user = NULL ; return code ; } <S2SV_ModEnd> code = verify_s4u_x509_user_checksum",0
454,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> scsi_disk_emulate_command ( SCSIDiskReq <S2SV_ModStart> scsi_disk_emulate_command ( SCSIDiskReq <S2SV_ModEnd> * r,",0
455,<S2SV_ModStart> cur_pic. f ||! s -> cur_pic. <S2SV_ModEnd> field_picture || s,0
456,"<S2SV_ModStart> off ) { struct rds_header header ; <S2SV_ModStart> 0 ) ; rm -> m_inc. i_hdr. h_len = be32_to_cpu ( rm -> m_inc. i_hdr. h_len ) ; if ( hdr_off || sg || off ) { <S2SV_ModStart> m_inc ) ; rm -> m_inc. i_hdr. h_len = sizeof ( struct rds_header ) + be32_to_cpu ( rm -> m_inc. i_hdr. h_len ) ; } else { rds_inc_init ( & rm -> m_inc, conn, conn -> c_laddr, conn -> c_faddr, & hdr ) ; rds_recv_incoming ( conn, conn -> c_laddr, conn -> c_faddr, & hdr, GFP_KERNEL, KM_USER0 ) ; rds_inc_put ( & rm -> m_inc ) ; } if ( hdr_off || sg || off ) { rds_inc_init ( & rm -> m_inc, conn, conn -> c_laddr, conn -> c_faddr, & hdr ) ; rds_message_addref ( rm )",0
457,"<S2SV_ModStart> ) ) { if ( grub_disk_read_error ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), buf ) ) return 0 ; <S2SV_ModStart> buf ) ) { if ( grub_disk_read_error ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), buf ) ) return 0 ; ext_block = ( struct grub_ext4_extent_header * ) buf ; } else if ( grub_disk_read ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), 0, EXT2_BLOCK_SIZE ( data ), buf ) ) { if ( grub_disk_read_error ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), buf ) ) return 0 ; ext_block = ( struct grub_ext4_extent_header * ) buf ; } else if ( grub_disk_read ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), 0, EXT2_BLOCK_SIZE ( data ), buf ) ) return 0 ; }",0
458,<S2SV_ModStart> ; if ( key -> state == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> ) { ret,0
459,"<S2SV_ModStart> ND_TCHECK2 ( * mh, hlen <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen ] ) ; <S2SV_ModStart> ND_TCHECK_32BITS ( & bp [ hlen + 4 ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> %s <S2SV_blank> Init <S2SV_blank> Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", EXTRACT_32BITS ( & bp [ hlen ] ), EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; } else { ND_TCHECK_32BITS ( & bp [ hlen ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> %s <S2SV_blank> Init <S2SV_blank> Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", EXTRACT_32BITS ( & bp [ hlen ] ), EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; }",0
460,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
461,"<S2SV_ModStart> = hmi_data ; if ( hmi_size < 18 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_INVALID_DATA, WM_ERR_INVALID_DATA, WM_ERR_INVALID_DATA, WM_ERR_INVALID_DATA, WM_ERR_INVALID_DATA, WM_ERR_INVALID_DATA, WM_ERR_INVALID_DATA, WM_ERR_INVALID_DATA, WM_ERR_INVALID_DATA, WM_ERR_INVALID_DATA, WM_ERR_INVALID_DATA, WM_ERR_INVALID_DATA, WM_ERR_INVALID_DATA, WM_ERR_INVALID_DATA, WM_ERR_INVALID_DATA, WM_ERR_INVALID_DATA, WM_ERR_INVALID_DATA, WM_ERR_INVALID_DATA, WM_ERR_INVALID_DATA, WM_ERR_INVALID_DATA, WM_ERR_INVALID_DATA, WM_ERR_INVALID_DATA, WM_ERR_INVALID_DATA, WM_ERR_INVALID_DATA, WM_ERR_INVALID",0
462,<S2SV_ModStart> -> id ; if ( * addr_len < sizeof ( * haddr ) ) * addr_len = sizeof ( * haddr ) ;,0
463,<S2SV_ModStart> i_iget5_offset ; fh32 [ 1 ] = ( __u32 ) ei -> i_iget5_data,0
464,"<S2SV_ModStart> ; if ( server. pw_expiration && server. pw_expiration < kdc_time ) { * status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } if ( server. expiration && server. expiration < kdc_time ) { * status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( server. expiration && server. expiration < kdc_time ) { * status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY",0
465,"<S2SV_ModStart> case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else if ( signed_add_overflows ( dst_reg -> umin_value, umin_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; }",0
466,"<S2SV_ModStart> if ( method == LPF_PICK_FROM_Q ) { const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; } else { const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess -= 4 ; lf -> filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_SUBIMAGE <S2SV_ModEnd> ) ; }",0
467,"<S2SV_ModStart> case BTA_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; <S2SV_ModStart> ) ) ; BT_DBGLOG ( 0x534e4554, ( ""BT_DBGLOG <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
468,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
469,<S2SV_ModStart> : { int <S2SV_ModEnd> a = getnum,0
470,<S2SV_ModStart> void usage_exit ( void,1
471,"<S2SV_ModStart> if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_element_count ) ) ; if ( ( * o_values == NULL ) || ( * o_row_idx == NULL ) || ( * o_values == NULL ) || ( l_row_idx_id == NULL ) || ( l_row_idx_id == NULL ) || ( l_row_idx_id == NULL ) || ( l_row_idx_id == NULL ) ) { fprintf ( stderr,",0
472,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
473,"<S2SV_ModStart> vpx_codec_err_t res ; unsigned int alg_priv_size ; <S2SV_ModStart> ; else { alg_priv_size = get_alg_priv_size ( ctx -> priv -> alg_priv ) ; res = ctx -> iface -> dec. decode ( alg_priv, data, data_sz, user_priv, deadline ) ; if ( res!= VPX_CODEC_OK ) res = VPX_CODEC_ERROR ; else if ( alg_priv_size!= ( unsigned int ) data_sz ) res = VPX_CODEC_DECODE_ERROR ; else if ( alg_priv_size!= get_alg_priv_size ( ctx -> priv -> alg_priv -> alg_priv ) ) res = VPX_CODEC_DECODE_ERROR ; else if ( alg_priv_size!= get_alg_priv_size ( ctx -> priv -> alg_priv -> alg_priv ) ) res = VPX_CODEC_DECODE_ERROR ; else if ( alg_priv_size!= get_alg_priv_size ( ctx -> priv -> alg_priv -> alg_priv ) ) res = VPX_CODEC",0
474,"<S2SV_ModStart> int ret ; ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par -> extradata_size, value ) ; if ( ret < 0 ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return ret ; } par -> extradata_size = 0 ; av_freep ( & par -> extradata ) ; ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par -> extradata_size, value ) ; if ( ret < 0 ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return ret ; } ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par -> extradata_size, value ) ; if ( ret < 0 ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> P",0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int64_t <S2SV_ModEnd> isofs_read_inode ( struct <S2SV_ModStart> inode ) ; if ( de -> name_len > sizeof ( struct iso_directory_record ) ) { if ( de -> name_len > sizeof ( struct iso_directory_record ) ) { if ( de -> name_len > sizeof ( struct iso_directory_record ) ) { if ( de -> name_len > sizeof ( struct iso_directory_record ) ) { if ( de -> name_len > sizeof ( struct iso_directory_record ) ) { if ( de -> name_len > sizeof ( struct iso_directory_record ) ) { ret = - EIO ; goto fail ; } } } else { if ( de -> name_len > sizeof ( struct iso_directory_record ) ) { if ( de -> name_len > sizeof ( struct iso_directory_record ) ) { if ( de -> name_len > sizeof ( struct iso_directory_record ) ) { if ( de -> name_len > sizeof ( struct iso_directory_record ) ) { if ( de -> name_len > sizeof ( struct iso_directory,0
476,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
477,"<S2SV_ModStart> ( ndo, ""%s"", esis_pdu_type, ( esis_pdu_type & ESIS_PDU_TYPE_MASK ) <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( ndo, ""%s"", esis_pdu_type, ( esis_pdu_type & ESIS_PDU_TYPE_MASK ) ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"" ) ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"" ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"" ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"" ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"" ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%",0
478,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> k ) ; }",0
479,"<S2SV_ModStart> else { BUG ( ) ; } } else if ( r -> CRn == 13 && ( r -> CRm & 12 ) == 8 ) { if ( pmu_access_event_counter_el0_disabled ( vcpu ) ) return false ; idx = ( r -> CRm & 3 ) << 3 ) | ( r -> Op2 & 7 ) ; } else if ( r -> Op2 == 0 ) { if ( pmu_access_cycle_counter_el0_disabled ( vcpu ) ) return false ; idx = ARMV8_PMU_CYCLE_IDX ; } else if ( r -> Op2 == 0 ) { if ( pmu_access_cycle_counter_el0_disabled ( vcpu ) ) return false ; idx = ( r -> CRm & 3 ) << 3 ) | ( r -> Op2 & 7 ) ; } if (! pmu_counter_idx_valid ( vcpu, idx ) ) return false ; if ( p -> is_write ) { if ( pmu_access_el0_disabled ( vcpu ) ) return false ; kvm_pmu_set_counter_value ( vcpu, idx, p",0
480,"<S2SV_ModStart> case IS_STRING : if ( zval_affine_elem == NULL ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, "" <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
481,<S2SV_ModStart> self ) { if (! Py_IS_UNDEFINED ( self ) ) { Py_CLEAR ( self -> dict ) ; Py_TYPE ( self ) -> tp_free ( self ) ; return ; } <S2SV_ModEnd> Py_CLEAR ( self,0
482,"<S2SV_ModStart> SQL_DROP ) ; return 0 ; } if ( strlen ( szSepLine ) > sizeof ( szSepLine ) ) { fprintf ( stderr, ""[ISQL]ERROR: <S2SV_blank> Too <S2SV_blank> many <S2SV_blank> separators <S2SV_blank> in <S2SV_blank> SQL <S2SV_blank> string\\n"" ) ; SQLFreeStmt ( hStmt, SQL_DROP <S2SV_ModStart> SQL_DROP ) ; return 0 ; } if ( strlen ( szSepLine ) > sizeof ( szSepLine ) ) { fprintf ( stderr, ""[ISQL]ERROR: <S2SV_blank> Too <S2SV_blank> many <S2SV_blank> separators <S2SV_blank> in <S2SV_blank> SQL <S2SV_blank> string\\n"" ) ; SQLFreeStmt ( hStmt, SQL_DROP ) ; return 0 ; } if ( strlen ( szSepLine ) > sizeof ( szSepLine ) ) { fprintf ( stderr, ""[ISQL]ERROR: <S2SV_blank> Too <S2SV_blank> many <S2SV_blank> separators <S2SV_blank> in <S2SV_blank> SQL <S2SV_blank> string\\n"" ) ; SQLFreeStmt ( hStmt, SQL_DROP ) ; return 0 ; }",0
483,<S2SV_ModStart> - EFAULT ; if ( offset + len > sizeof ( * data ) ) return - EINVAL ;,0
484,"<S2SV_ModStart> argv [ ] ) { printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2015 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n <S2SV_blank> particular <S2SV_blank> purpose.\\n"" ) ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2015 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n <S2SV_blank> particular <S2SV_blank> purpose.\\n"" ) ;",0
485,"<S2SV_ModStart> -> type -> set_termios ) { tty = kzalloc ( sizeof ( * tty ), GFP_KERNEL ) ; if (! tty ) { retval = - ENOMEM ; goto error_set_termios ; }",0
486,<S2SV_ModStart> cpuctx_lock ) ; <S2SV_ModEnd> cpuctx -> ctx <S2SV_ModStart> = cpu_context ; <S2SV_ModEnd> __perf_cpu_hrtimer_init ( cpuctx,0
487,"<S2SV_ModStart> len, struct iovec * iovec ) { if ( unlikely ( len > iovec -> iov_len ) ) return - EINVAL ; <S2SV_ModStart> = 1 ; iovec -> iov_base = NULL ; iovec -> iov_len = 0 ;",0
488,<S2SV_ModStart> ext4_group_t flex_group ; ext4_group_t <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
489,<S2SV_ModStart> ; if ( chunk_length > SCTP_MAX_CHUNK_SIZE ) return 0 ; if (,0
490,"<S2SV_ModStart> count ; for ( ; a && i < count ; ++ i <S2SV_ModEnd> ) { n <S2SV_ModStart> ) ; if (! a ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; }",0
491,"<S2SV_ModStart> first ) { if (! cli_sslclifp ( cptr ) ) sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> SASL"", parv [ 1 ], realhost ) ; else sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> SASL"", parv [ 2 ], realhost ) ; if (! EmptyString ( cli_saslagent ( cptr ) ) ) sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u <S2SV_blank> SASL"", parv [ 1 ], realhost ) ; else sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u <S2SV_blank> SASL"", parv [ 1 ], realhost ) ; if (! EmptyString ( cli_saslagent ( cptr ) ) ) sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u <S2SV_blank> S",0
492,<S2SV_ModStart> # endif # if HAVE_FAST_UNALIGNED if ( ( long ) src2 & ( sizeof ( long ) - 1 ) ) { for ( i = 0 ; i < w - sizeof ( long ) ; i += sizeof ( long ) ) { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( dst + i ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_80 ) ) ^ ( ( a ^ b ^ pb_80 ) & pb_80 ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_7f ) ) ^ ( ( a ^ b ^ pb_80 ) & pb_80 ) ; } for ( ; i < w - sizeof ( long ) ; i += sizeof ( long ) ) { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_80 ) ),0
493,"<S2SV_ModStart> -> forward_matches ; if ( match_length > callback_args -> data_size ) { yr_arena_write_data ( callback_args -> context -> matching_strings_arena, & string, sizeof ( YR_STRING ), NULL ) ; } else { if ( match_length > callback_args -> data_size ) { yr_arena_write_data ( callback_args -> context -> matching_strings_arena, & string, sizeof ( YR_STRING ), NULL ) ; } else { FAIL_ON_ERROR ( yr_arena_allocate_memory ( callback_args -> context -> matches_arena, sizeof ( YR_MATCH ), ( void * * ) & new_match ) ) ; } } else { if ( match_length > callback_args -> data_size ) { yr_arena_write_data ( callback_args -> context -> matching_strings_arena, & string, sizeof ( YR_STRING ), NULL ) ) ; } else { FAIL_ON_ERROR ( yr_arena_allocate_memory ( callback_args -> context -> matches_arena, sizeof ( YR_MATCH ), (",0
494,<S2SV_ModStart>! no_port_forwarding_flag && <S2SV_ModEnd>! options.,0
495,"<S2SV_ModStart> length ) { int r ; if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( length ) { int r ; length ++ ; r = smacker_decode_tree ( bc, hc, prefix, length ) ; if (",0
496,<S2SV_ModStart> return err ; } if ( m -> msg_name ) free_sockaddr_storage ( m -> msg_name ) ;,0
497,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from",0
498,<S2SV_ModStart> int hstartcol ; jas_int64_t <S2SV_ModEnd> m ; n <S2SV_ModStart> 2 ) { jas_int64_t <S2SV_ModEnd> hstartcol = ( <S2SV_ModStart> >> 1 ; n = m ; dstptr = buf ; srcptr = & a [ hstartcol * stride ] ; dstptr = & a [ hstartcol * stride ] ; srcptr = & a [ hstartcol * stride ] ; n = m ; dstptr = buf ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n,0
499,"<S2SV_ModStart> ; iwl_sta_ucode_deactivate ( priv <S2SV_ModEnd>, sta_id )",0
500,"<S2SV_ModStart> instance ) ; if ( log_file ) { int n = fopen ( log_file, ""a"" ) ; fcntl ( n, F_SETFD, FD_CLOEXEC | fcntl ( n, F_GETFD ) ) ; fcntl ( n, F_SETFL, O_NONBLOCK | fcntl ( n, F_GETFL ) ) ; F_SETFD ( n, F_SETFD, FD_CLOEXEC | fcntl ( n, F_GETFD ) ) ; fcntl ( n, F_SETFL, O_NONBLOCK | fcntl ( n, F_GETFL ) ) ; } else if ( log_file ) { int n = fileno ( log_file ) ; fcntl ( n, F_SETFD, FD_CLOEXEC | fcntl ( n, F_GETFD ) ) ; fcntl ( n, F_SETFL, O_NONBLOCK | fcntl ( n, F_GETFL ) ) ; F_SETFD ( n, F_SETFD, FD_CLOEXEC | fcntl ( n, F_GETFD ) ) ; F_SETFL ( n, F_SETFL, O_NONBLOCK | fcntl ( n, F_GETFL",0
501,"<S2SV_ModStart> ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(M|N)iss/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", """,0
502,"<S2SV_ModStart> ) ; if ( hashbin -> hb_type & HB_LOCK ) { spin_lock_irqsave ( & hashbin -> hb_spinlock, flags, hashbin_lock_depth ++ ) ; } for ( i = 0 ; i < HASHBIN_SIZE ; i ++ ) { queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { if ( free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } } <S2SV_ModEnd> hashbin -> hb_current <S2SV_ModStart> ~ HB_MAGIC ; <S2SV_ModEnd> return 0 ;",0
503,"<S2SV_ModStart> EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_EXCL ) &&! ( mnt_flags & MNT_EXCL ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_EXCL ) &&! ( mnt_flags & MNT_EXCL ) ) { return - EPERM ; } err = security_sb_remount ( sb, data ) ; if ( err ) return err ; down_write ( & sb -> s_umount ) ; if ( flags & MS_BIND ) err = change_mount_flags ( path -> mnt, flags ) ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else err = do_remount_sb ( sb, flags, data, 0 ) ; if",0
504,<S2SV_ModStart> ; int copied = 0 <S2SV_ModEnd> ; struct sockaddr_ll <S2SV_ModStart> sockaddr_ll ) ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> out_free ; } <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg -> msg_namelen,0
505,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
506,<S2SV_ModStart> num_ports < 2 ||! serial -> port [ 1 ],0
507,"<S2SV_ModStart> write_junk = 1 <S2SV_ModEnd> ; ChunkHeader ds64hdr <S2SV_ModStart> RiffChunkHeader riffhdr ; DS64Chunk ds64_chunk ; JunkChunk junkchunk ; WaveHeader wavhdr ; uint32_t bcount ; int64_t total_data_bytes, total_riff_bytes ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples > 0x7ffff000 ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header <S2SV_blank> for <S2SV_blank> non-normalized <S2SV_blank> floating <S2SV_blank> data!"" ) ; return FALSE ; } if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples > 0x7ffff000 ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header <S2SV_blank> for <S2SV_blank> non-normalized <S2SV_blank> floating <S2SV_blank> data!""",0
508,"<S2SV_ModStart> msg ) ; err = verify_compat_iovec ( msg_sys, iov, & addr, VERIFY_READ ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; if ( msg_sys -> msg_flags & MSG_CMSG_COMPAT ) msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; else msg_sys -> msg_flags = flags & ( MSG_CMSG_COMPAT | MSG_DONTWAIT ) ; if ( err < 0 ) goto out_freeiov ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; if ( msg_sys -> msg_flags & MSG_CMSG_COMPAT ) msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; else msg_sys -> msg_flags = flags & ( MSG_CMSG_COMPAT | MSG_DONTWAIT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG",0
509,"<S2SV_ModStart> ) ; struct gfs2_meta_inode * ip_ext = & GFS2_I ( inode ) -> i_meta_inode ; struct gfs2_meta_inode * ip_ext = & ip -> i_inode ; struct gfs2_meta_buffer * dibh = mp -> mp_bh [ height - 1 ] <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> unsigned end_of_metadata = <S2SV_ModEnd> height - 1 <S2SV_ModStart> end_of_metadata ) ; if ( ip_ext == NULL ) { struct gfs2_meta_inode * ip_ext = & GFS2_I ( inode ) -> i_meta_inode ; struct gfs2_meta_inode * dip = & GFS2_I ( inode ) -> i_meta_inode ; struct buffer_head * bh = mp -> mp_bh [ end_of_metadata ] ; struct buffer_head * bh ; __be64 * ptr = metapointer ( end_of_metadata, mp ) ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ end_of_metadata ] ) ; if ( ip",0
510,"<S2SV_ModStart> ( global -> codec -> interface ( ) ) ) ; fprintf ( stderr, ""Codec: <S2SV_blank> %s\\n"", vpx_codec_iface_name ( global -> codec -> interface ( ) ) ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; if ( input -> use_i420 ) fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; if ( input -> use_i420 ) fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; if ( input -> use_i420 )",0
511,"<S2SV_ModStart> ; PROFILER_ENTER ( <S2SV_ModEnd> context -> priv <S2SV_ModStart> -> priv -> prof_nsc_rle_decompress_data ) ; context -> priv -> prof_nsc_rle_decompress_data = TRUE ; <S2SV_ModStart> -> priv -> prof_nsc_decode ) ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, 0, NULL, flip ) ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, 0, 0, 0, NULL, flip ) ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, 0, 0,",0
512,"<S2SV_ModStart> == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> attributes <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } <S2SV_ModStart> == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> attributes <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( ( attr -> psvi == XSLT_REFACTORED ) && ( attr -> psvi!= XSLT_NAMESPACE ) ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; }",0
513,"<S2SV_ModStart> 0 ) { if ( safe_copy_file ( ""/etc/skel/.zshrc"", fname, u, g, 0644 ) == 0 ) { fs_logger ( ""clone <S2SV_blank> /etc/skel/.zshrc"" ) ; } <S2SV_ModStart> 0 ) { if ( safe_copy_file ( ""/etc/skel/.cshrc"", fname, u, g, 0644 ) == 0 ) { fs_logger ( ""clone <S2SV_blank> /etc/skel/.cshrc"" ) ; } <S2SV_ModStart> 0 ) { if ( safe_copy_file ( ""/etc/skel/.cshrc"", fname, u, g, 0644 ) == 0 ) { fs_logger ( ""clone <S2SV_blank> /etc/skel/.cshrc"" ) ; } <S2SV_ModStart> 0 ) { if ( safe_copy_file ( ""/etc/skel/.cshrc"", fname, u, g, 0644 ) == 0 ) { fs_logger ( ""clone <S2SV_blank> /etc/skel/.cshrc"" ) ; } <S2SV_ModStart> 0 ) { if ( safe_copy_file ( ""/etc/skel/.cshrc"", fname, u, g, 0644 ) == 0 )",0
514,<S2SV_ModStart> ; if ( fv -> b. nextsame == NULL || fv -> b. sf -> fv!= & fv -> b ) { return ( false ) ; } else if ( fv -> b. sf -> fv!= & fv -> b ) { return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; else if ( sf -> filename!= NULL ) RecentFilesRemember ( sf -> filename ) ; else if ( sf -> origname!= NULL ) RecentFilesRemember ( sf -> origname ) ; else if ( sf -> filename!= NULL ) RecentFilesRemember ( sf -> filename ) ; else if ( sf -> origname!= NULL ) RecentFilesRemember ( sf -> origname ) ; else if ( sf -> filename!= NULL ) RecentFilesRemember ( sf -> filename ) ; else if ( sf -> origname!= NULL ) RecentFilesRemember ( sf -> origname ) ; else if ( sf -> filename!= NULL ) RecentFilesRemember ( sf -> filename ) ; else if ( sf -> origname!= NULL ) RecentFilesRemember ( sf,0
515,<S2SV_ModStart> % 4096 == 0 <S2SV_ModEnd> ) ; bzero,0
516,"<S2SV_ModStart> timr ) ; period = timespec_to_ns ( <S2SV_ModEnd> new_setting -> it_interval <S2SV_ModStart> it_value ) ; if ( period == 0 ) period = timespec_to_ns ( new_setting -> it_interval ) ; if ( when == 0 ) return 0 ; base = kmalloc ( sizeof ( struct mmtimer ), GFP_KERNEL ) ; if ( base == NULL ) return - ENOMEM ; if ( flags & TIMER_ABSTIME ) { timespec n ; now = timespec_to_ns ( n ) ; when -= now ; period = ( period + sgi_clock_period - 1 ) / sgi_clock_period ; if ( when > now ) when -= now ; } when = ( when + sgi_clock_period - 1 ) / sgi_clock_period ; if ( flags & TIMER_ABSTIME ) { struct timespec n ; unsigned long now ; getnstimeofday ( & n ) ; when = timespec_to_ns ( n ) ; now = timespec_to_ns ( n ) ; period = ( period + sgi_clock_period - 1 ) / sgi_",0
517,"<S2SV_ModStart> if (! js_doregexec ( J, <S2SV_ModEnd> re -> prog",1
518,"<S2SV_ModStart> : if ( <S2SV_ModEnd> Int_val ( Field <S2SV_ModStart> ) ) >= 0 <S2SV_ModEnd> ) caml_set_oo_id ( <S2SV_ModStart> case OFreshOID : if ( <S2SV_ModEnd> Int_val ( Field <S2SV_ModStart> ) >= 0 <S2SV_ModEnd> ) caml_set_oo_id ( <S2SV_ModStart> case OReadItems : if ( size == 0 ) { v = Val_hp ( intern_dest ) ; if ( intern_obj_table!= NULL ) intern_obj_table [ obj_counter ++ ] = v ; * intern_dest = Make_header ( size, tag, intern_color ) ; * intern_dest += 1 + size ; if ( tag == Object_tag ) { Assert ( size >= 2 ) ; ReadItems ( & Field ( v, 2 ), size - 2 ) ; PushItem ( ) ; sp -> op = OFreshOID ; sp -> dest = ( value * ) v ; sp -> arg = 1 ; } else { v = Val_int ( code & 0x3F ) ; } } else { v = Val_int ( code & 0x3F ) ; if ( tag == Object_tag ) { Assert ( size >= 2 ) ; ReadItems ( & Field ( v, 2 ), size",0
519,"<S2SV_ModStart> ; struct range <S2SV_ModEnd> * range ; <S2SV_ModStart> ; size_t content_length <S2SV_ModEnd> ; int code <S2SV_ModStart> = 500, fd <S2SV_ModEnd> = - 1 <S2SV_ModStart> ; if ( st -> st_size < 0 ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr = ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; goto abort ; } if ( ( range = parse_range ( range_str, st -> st_size, & nranges ) ) == NULL ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> %lld-%lld/%lld"", range -> start, range -> end, st -> st_size ) ; errstr = ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; goto abort ; } if ( ( fd = open ( path, O_RDONLY ) ) == - 1 ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> %lld-%lld",0
520,"<S2SV_ModStart> ; ier = ksz8851ReadReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, ier ) <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, ier ) <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, ier ) <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, ier ) <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, ier )",0
521,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON * cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
522,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> msglen ) ) ),0
523,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; state -> ptr = tmp ;,0
524,<S2SV_ModStart> FBIOGET_VBLANK : { struct fb_vblank <S2SV_ModEnd> vblank ; vblank,0
525,"<S2SV_ModStart> int flags ) <S2SV_ModEnd> { if ( <S2SV_ModStart> ) ; } else if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_ABSTIME_ON_SET ) ) { spin_lock ( & cancel_lock ) ; spin_unlock ( & cancel_lock ) ; } else if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_ABSTIME_ON_SET ) ) { spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist, & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } else if ( ctx -> might_cancel ) { spin_lock ( & cancel_lock",0
526,"<S2SV_ModStart> i ++ ) { if ( c16 -> Curves [ i ] == NULL ) { c16 -> Curves [ i ] = _cmsMallocZero ( ContextID, sizeof ( cmsUInt16Number ) ) ; if ( c16 -> Curves [ i ] == NULL ) { c16 -> Curves [ i ] = NULL ; return NULL ; } } else { if ( c16 -> Curves [ i ] == NULL ) { c16 -> Curves [ i ] = _cmsMalloc ( ContextID, sizeof ( cmsUInt16Number ) ) ; if ( c16 -> Curves [ i ] == NULL ) { c16 -> Curves [ i ] = _cmsMallocZero ( ContextID, sizeof ( cmsUInt16Number ) ) ; if ( c16 -> Curves [ i ] == NULL ) return NULL ; } else { for ( j = 0 ; j < nElements ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], ( cmsUInt16Number ) j ) ; } } else { for ( j = 0 ; j < nElements ; j ++ ) { c16 -> Curves [ i ] [",0
527,"<S2SV_ModStart> ( dev_name, LOOKUP_FOLLOW, & path ) == NULL ) { error = - ENOMEM ; goto out ; } if ( kern_path ( dev_name, LOOKUP_FOLLOW, & path ) == NULL ) { error = - ENOMEM ; goto out ; } rdev. name = requested_dev_name ; tomoyo_fill_path_info ( & rdev ) ; if (! rdev. name ) { error = - ENOMEM ; goto out ; } rdev. name = requested_dev_name ; tomoyo_fill_path_info ( & rdev ) ; if ( kern_path ( dev_name, LOOKUP_FOLLOW, & path ) == NULL ) { error = - ENOMEM ; goto out ; } rdev. name = requested_dev_name ; tomoyo_fill_path_info ( & rdev ) ; if (! rdev. name ) { error = - ENOMEM ; goto out ; }",0
528,"<S2SV_ModStart> -> m_wMaxReqSize ) { printk ( KERN_ERR ""%s() <S2SV_blank> Exceeded <S2SV_blank> dev->bus.m_wMaxReqSize\\n"", __func__ ) ; return ret ; } if ( ( msg -> size + buf_size ) > dev -> bus. m_wMaxReqSize ) { printk ( KERN_ERR ""%s() <S2SV_blank> Exceeded <S2SV_blank> dev->bus.m_wMaxReqSize\\n"", __func__ ) ; return ret ; } if ( ( msg -> size + buf_size ) > dev -> bus. m_wMaxReqSize ) { printk ( KERN_ERR ""%s() <S2SV_blank> Exceeded <S2SV_blank> dev->bus.m_wMaxReqSize\\n"", __func__ ) ; return ret ; } if ( ( msg -> size + buf_size ) > dev -> bus. m_wMaxReqSize ) { printk ( KERN_ERR ""%s() <S2SV_blank> Exceeded <S2SV_blank> dev->bus.m_wMaxReqSize\\n"", __func__ ) ; return ret ; }",0
529,"<S2SV_ModStart>, double_encode TSRMLS_CC ) ; if ( replaced == NULL ) { php_error_docref ( "" <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
530,"<S2SV_ModStart> ; if ( ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) == 1 && ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == 1 && ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if (! EVP_PKEY_set1_EC_KEY ( peerec, peerrsa ) ) { goto sslerr ; } } else if ( ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) == 1 && ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == 1 && ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if (! EVP_PKEY_set1_EC_KEY ( peerec, peerrsa ) ) { goto sslerr ; } } else if ( ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) == 1 && ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL",0
531,"<S2SV_ModStart> ( ) ; strcpy <S2SV_ModEnd> ( t1_buf_array,",0
532,"<S2SV_ModStart> subsize ) { <S2SV_ModEnd> MACROBLOCKD * xd <S2SV_ModStart> -> e_mbd ; <S2SV_ModEnd> int bsl = <S2SV_ModStart> bsl = b_width_log2_lookup <S2SV_ModEnd> [ bsize ] <S2SV_ModStart> / 4 ; <S2SV_ModEnd> PARTITION_TYPE partition = <S2SV_ModStart> case PARTITION_NONE : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_VERT : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col ) ; if ( mi_col + hbs < cm -> mi_cols ) { set_modeinfo_offsets ( cm, xd, mi_row, mi_",0
533,"<S2SV_ModStart> name ) ; if ( name == NULL ) { data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; free ( name ) ; } else { data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; free ( name ) ; data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; }",0
534,<S2SV_ModStart> ; int block_ptr <S2SV_ModEnd> ; int pixel_x <S2SV_ModStart> pixel_ptr = 0 <S2SV_ModEnd> ; int total_blocks <S2SV_ModStart> break ; case 0xc0 : colorA = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] ) ; colorB = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] ) ; if ( ( s -> buf [ stream_ptr ++ ] & 0x80 )!= 0 ) { colorA = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] ) ; n_blocks = ( s -> buf [ stream_ptr ++ ] & 0x80 )!= 0 ) { colorA = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] ) ; colorB = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] ) ; if ( ( s -> buf [ stream_ptr ++ ] & 0x80 )!= 0 ) { colorA = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] ) ; n_blocks = ( s -> buf [ stream_ptr ++ ] & 0x80 )!= 0 ) { colorA = ( opcode << 8 ),0
535,"<S2SV_ModStart> cnt ) { JAS_DBGLOG ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ) ; JAS_DBGLOG ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ) ;",0
536,"<S2SV_ModStart> ; __be16 type ; if ( skb_is_gso ( skb ) ) { kfree_skb ( skb ) ; return NULL ; } <S2SV_ModStart> -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if ( skb_gro_checksum_simple_validate ( skb ) ) goto out_unlock ; skb_gro_checksum_try_convert ( skb, IPPROTO_GRE, 0, null_compute_pseudo ) ; } else { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if ( skb_gro_checksum_simple_validate ( skb ) ) goto out_unlock ; skb_gro_checksum_try_convert ( skb, IPPROTO_GRE, 0, null_compute_pseudo ) ; } else { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) ->",0
537,"<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { jas_mat_die ( ""numrows <S2SV_blank> = <S2SV_blank> %d, <S2SV_blank> numcols <S2SV_blank> = <S2SV_blank> %d"", numrows, numcols ) ; jas_mat_die ( ""numcols <S2SV_blank> = <S2SV_blank> %d, <S2SV_blank> maxrows <S2SV_blank> = <S2SV_blank> %d"", numrows, numcols, ( int ) jas_mat_die ( ""numcols <S2SV_blank> = <S2SV_blank> %d"", numrows, ( int ) jas_mat_die ( ""numcols <S2SV_blank> = <S2SV_blank> %d"", numcols, numrows ), ( int ) jas_mat_die ( ""numcols <S2SV_blank> = <S2SV_blank> %d"", numcols, numrows ) ) ; jas_mat_die ( ""numrows <S2SV_blank> = <S2SV_blank> %d"", numrows, numcols, ( int ) jas_mat_die ( ""numcols <S2SV_blank> = <S2SV_blank> %d"", ( int ) jas_mat_die ( ""numcols <S2SV_blank> = <S2SV_blank> %d"", numcols, numrows ), ( int ) jas_mat_die ( ""numcols <S2SV_blank> = <S2SV_blank> %",0
538,"<S2SV_ModStart> string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & session -> sessionKey. b ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & session -> salt. b ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & session -> sessionKey. b ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & session -> salt. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & session -> sessionKey. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE",0
539,"<S2SV_ModStart> ; ret = key_permission <S2SV_ModEnd> ( key_ref,",0
540,<S2SV_ModStart> u4_first_slice_in_pic ) { if ( ps_dec_op -> u4_first_slice_in_pic!= 1 ) { ps_dec_op -> u4_first_slice_in_pic = 1 ; ps_dec_op -> u4_first_slice_in_pic = 0 ; ps_dec_op -> u4_first_slice_in_pic = 1 ; ps_dec_op -> u4_first_slice_in_pic = 1 ; } else { if ( ps_dec_op -> u4_first_slice_in_pic!= 1 ) { ps_dec_op -> u4_first_slice_in_pic = 1 ; ps_dec_op -> u4_first_slice_in_pic = 0 ; ps_dec_op -> u4_first_slice_in_pic = 0 ; ps_dec_op -> u4_first_slice_in_pic = 1 ; } else { if ( ps_dec_op -> u4_first_slice_in_pic!= 1 ) { ps_dec_op -> u4_first_slice_in_pic =,0
541,"<S2SV_ModStart> var_off ) ; <S2SV_ModEnd> switch ( opcode <S2SV_ModStart> case BPF_ADD : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = 0 ; } break ; case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } if ( dst_reg -> umin_value + umin_val < umin_val || dst_reg -> umax_value < umax_val ) { dst_reg -> umin_value = 0 ; dst_reg -> umax_value = U64_MAX ; } else",0
542,"<S2SV_ModStart> == NULL ) { cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; cFYI ( 1, ""non-NULL <S2SV_blank> file <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; cFYI ( 1, ""non-NULL <S2SV_blank> file <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", direntry, direntry ) ; cFYI ( 1, ""non-NULL <S2SV_blank> file <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; cFYI ( 1, ""non-NULL <S2SV_blank> file <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %",0
543,<S2SV_ModStart> ; break ; case VFIO_PCI_BAR0_REGION_INDEX : info. offset = VFIO_PCI_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar0_cfg_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar5_cfg_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar5_cfg_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG,0
544,"<S2SV_ModStart>, copied ) ; spin_lock ( & EXT4_I ( inode ) -> i_mmap_lock ) ; <S2SV_ModStart> ext4_test_inode_state ( inode, EXT4_STATE_ORDERED_MODE ) ) { spin_unlock ( & EXT4_I ( inode ) -> i_mmap_lock ) ; ret = ext4_jbd2_file_inode ( handle, inode ) ; if ( ret ) goto errout ; } if ( ext4_test_inode_state ( inode, EXT4_STATE_ORDERED_MODE ) ) { spin_unlock ( & EXT4_I ( inode ) -> i_mmap_lock ) ; goto errout ; } if ( ext4_test_inode_state ( inode, EXT4_STATE_ORDERED_MODE ) ) { ret = ext4_jbd2_file_inode ( handle, inode ) ; if ( ret ) goto errout ; } if ( ext4_test_inode_state ( inode, EXT4_STATE_ORDERED_MODE ) ) { spin_unlock ( & EXT4_I ( inode ) -> i_mmap_lock ) ; goto errout ; }",0
545,"<S2SV_ModStart> = 1 ; if ( uri [ strlen ( uri ) - 1 ] == '\\0' ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) return AVERROR ( ENOMEM ) ; if ( options ) av_dict_copy ( & s -> chained_options, * options, 0 ) ; if ( s -> headers ) { int len = strlen ( s -> headers ) ; if ( len < 2 || strcmp ( ""\\r\\n"", s -> headers + len - 2 ) ) { av_log ( h, AV_LOG_WARNING, ""No <S2SV_blank> trailing <S2SV_blank> CRLF <S2SV_blank> found <S2SV_blank> in <S2SV_blank> HTTP <S2SV_blank> header.\\n"" ) ; ret = av_reallocp ( & s -> headers, len + 3 ) ; if ( ret < 0 ) return ret ; s -> headers [ len ] = '\\r' ; s -> headers [ len ] = '\\n' ; s -> headers",0
546,"<S2SV_ModStart> rcv_wscale ) ; if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) ) { ret = NULL ; goto out ; } <S2SV_ModEnd> rt = rcu_dereference_protected <S2SV_ModStart> ; if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) ) { atomic_sub ( tp -> opt. rcv_mss, rcu_deref ( tp -> opt. rcv_mss ) ) ; if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) ) { atomic_sub ( & tp -> opt. rcv_mss, rcu_dereference_protected ( tp -> opt. rcv_mss, sock_owned_by_user ( sk ) ) ) == 0 ) { atomic_sub ( tp -> opt. rcv_mss, sizeof ( tp -> opt. rcv_mss ) ) ; if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) == 0 ) { atomic_",0
547,"<S2SV_ModStart> char * in, size_t out_size <S2SV_ModStart> += 4 ; len ++ ; if ( digit3!= '=' ) { * out ++ = ( base64val ( digit1 ) << 2 ) | ( base64val ( digit2 ) >> 4 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 4 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit3 ) << 4 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit3 ) << 6 ) & 0xc0 ) | ( base64val ( digit4 ) >> 6 ) ; len ++ ; } } } while ( * in && digit4!= '=' ) { * out ++ = ( base64val ( digit1 ) << 2 ) & 0xf0 ) | ( base64val ( digit2 ) >> 4 ) ; len ++ ; if ( digit3!= '=' ) { * out ++",0
548,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
549,"<S2SV_ModStart>, len, cur_len ; size_t total_copied = 0 <S2SV_ModStart> i ++ ) { total_copied += ( size_t ) get_numpages ( cifs_sb -> wsize, & cur_len ) ; if ( total_copied > ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_RWPIDFORWARD ) ) { total_copied += ( size_t ) get_numpages ( cifs_sb -> wsize, & cur_len ) ; if ( total_copied > ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( cur_len ) ) ) break ; }",0
550,<S2SV_ModStart>! ( quirks & CP_RDESC_SWAPPED_MIN_MAX <S2SV_ModEnd> ) ) return,0
551,"<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> ; int number_of_frames, <S2SV_ModEnd> number_of_keyframes, encode_frame_count <S2SV_ModStart> ; svc_log_reset ( svc_ctx ) ; if ( svc_ctx == NULL || si == NULL ) return NULL <S2SV_ModEnd> ; svc_log_reset ( <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> return vpx_svc_get_message ( <S2SV_ModStart> ""\\n"" ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ i ) { number_of_frames = encode_frame_count ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> psnr_sum [ i ] [ 0 ], ( double ) si -> psnr_sum [ i ] [ 1 ], ( double ) si -> psnr_sum [ i ] [ 2 ], ( double ) si -> psnr_sum [ i ] [ 3 ]",0
552,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> == 5 ) { len = ( UINT32 ) * in ++ ; len = ( UINT32 ) * in ++ ; len = ( UINT32 ) * in ++ ; len = ( UINT32 ) * in ++ ; len = ( UINT32 ) * in ++ ; len += 4 ; } FillMemory ( out, len, value ) ; out += len ; left -= len ; } else { * out ++ = value <S2SV_ModEnd> ; left -- <S2SV_ModStart> } else { if ( value == * in ) { in ++ ; len = ( UINT32 ) * in ++ ; len = ( UINT32 ) * in ++ ; len = ( UINT32 ) * in ++ ; len = ( UINT32 ) * in ++ ; len = ( UINT32 ) * in ++ ; len += 4 ; } FillMemory ( out, len, value ) ; out += len ; left -= len ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
553,"<S2SV_ModStart> = new_cols ; screen -> sb_buffer = realloc_buffer ( screen, screen -> sb_buffer, new_rows, new_cols ) ; if ( screen -> buffers [ 1 ] ) screen -> buffers [ 1 ] = realloc_buffer ( screen, screen -> buffers [ 1 ], new_rows, new_cols ) ; if ( screen -> buffers [ 0 ] ) screen -> buffers [ 0 ] = realloc_buffer ( screen, screen -> buffers [ 0 ], new_rows, new_cols ) ; screen -> buffers [ 1 ] = realloc_buffer ( screen, screen -> buffers [ 1 ], new_rows, new_cols ) ; if ( screen -> buffers [ 1 ] ) screen -> buffers [ 1 ] = realloc_buffer ( screen, screen -> buffers [ 1 ], new_rows, new_cols ) ; if ( screen -> buffers [ 0 ] ) screen -> buffers [ 0 ] = realloc_buffer ( screen, screen -> buffers [ 0 ], new_rows, new_cols ) ; screen -> buffers [ 1 ] = realloc_buffer ( screen, screen -> buffers [ 1 ], new_rows, new_cols ) ; if ( screen ->",0
554,<S2SV_ModStart> n ) { <S2SV_ModEnd> int result = <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> const char * <S2SV_ModStart> char * literal_start <S2SV_ModEnd> ; int in_named_escape <S2SV_ModStart> ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( <S2SV_ModEnd> ch == '{' <S2SV_ModStart> == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto,0
555,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static jas_int <S2SV_ModEnd> mem_resize ( jas_stream_memobj_t <S2SV_ModStart> int bufsize ) { if ( bufsize < 0 ) { JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; if (! ( buf = jas_realloc2 ( m -> buf_, bufsize, sizeof ( unsigned char ) ) ) && bufsize ) { JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; m -> buf_ = buf ; m -> bufsize_ = bufsize ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
556,"<S2SV_ModStart> = create_dump_dir_from_problem_data ( <S2SV_ModEnd> pd, g_settings_dump_location",0
557,"<S2SV_ModStart> ; if (! LookupString <S2SV_ModEnd> ( symInterpretMatchMaskNames, <S2SV_ModStart> pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } expr = expr -> action. args ; } else if ( expr -> expr. op == EXPR_IDENT ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. ident ) ; if (! LookupString ( symInterpretMatchMaskNames, pred_txt, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } else if ( expr -> expr. op == EXPR_IDENT ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. ident ) ; if ( istreq ( pred_txt, ""any"" ) ) { * pred_rtrn = MATCH_ANY ; * mods_rtrn = MOD_REAL_MASK_ALL ; return true ; }",0
558,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pcrypt_free ( struct <S2SV_ModStart> inst ) { <S2SV_ModEnd> struct pcrypt_instance_ctx * <S2SV_ModStart> ctx = crypto_instance_ctx <S2SV_ModEnd> ( inst ),0
559,<S2SV_ModStart> } else { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { h1 = ptr -> height ; } else { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { h1 = ptr -> height ; } else { if ( ( y1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ),0
560,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
561,"<S2SV_ModStart> ; if ( neigh == NULL ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> no <S2SV_blank> neighbour <S2SV_blank> for <S2SV_blank> this <S2SV_blank> packet\\n"" ) ; return ; }",0
562,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
563,<S2SV_ModStart> * up ; int len ; if (! replay_esn ||! rp ) return 0 ; len = nla_len ( rp ) ; if ( len!= xfrm_replay_state_esn_len ( replay_esn ) || len!= xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; if ( len <S2SV_ModEnd>!= xfrm_replay_state_esn_len ( <S2SV_ModStart> up ) ) return - EINVAL ; if ( len <S2SV_ModEnd>!= xfrm_replay_state_esn_len (,0
564,"<S2SV_ModStart> int ret = simple_proc_dointvec ( table, write, buffer, lenp, ppos ) ; if ( ret ||! write ) return ret ; if ( sysctl_perf_cpu_time_max_percent > 100 || sysctl_perf_cpu_time_max_percent == 0 ) { printk ( KERN_WARNING ""perf: <S2SV_blank> Dynamic <S2SV_blank> interrupt <S2SV_blank> throttling <S2SV_blank> disabled, <S2SV_blank> can <S2SV_blank> hang <S2SV_blank> your <S2SV_blank> system!\\n"" ) ; perf_sample_allowed_ns = 0 ; } else if ( sysctl_perf_cpu_time_max_percent > 100 || sysctl_perf_cpu_time_max_percent > 0 ) { printk ( KERN_WARNING ""perf: <S2SV_blank> Dynamic <S2SV_blank> interrupt <S2SV_blank> throttling <S2SV_blank> disabled, <S2SV_blank> can <S2SV_blank> hang <S2SV_blank> your <S2SV_blank> system!\\n"" ) ; perf_sample_allowed_ns = 0 ; }",0
565,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
566,"<S2SV_ModStart> l_step_l ) ; if ( l_step_l > l_max_prec ) { opj_error ( ""opj_pi_create_decode(): <S2SV_blank> too <S2SV_blank> many <S2SV_blank> steps <S2SV_blank> in <S2SV_blank> image\\n"" ) ; return NULL ; }",0
567,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
568,"<S2SV_ModStart> ps ) { u32 <S2SV_ModEnd> prev_legacy, cur_legacy <S2SV_ModStart> -> flags ; memset ( & kvm -> arch. vpit -> pit_state. channels [ 0 ], 0, sizeof ( kvm -> arch. vpit -> pit_state. channels ) ) ; <S2SV_ModStart> -> flags ; memset ( & kvm -> arch. vpit -> pit_state. channels [ 0 ], 0, sizeof ( kvm -> arch. vpit -> pit_state. channels ) ) ;",0
569,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> * const tile, MACROBLOCKD * xd, <S2SV_ModEnd> int mi_row, <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * prev_mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> cm -> prev_mi_grid_visible <S2SV_ModEnd> + idx_str ; <S2SV_ModStart> BLOCK_SIZE bsize ; cpi -> mb. source_variance = UINT_MAX ; vp9_zero ( cpi -> mb. pred_mv ) ; switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi_row, mi_col ) ; nonrd_use_partition ( cpi, tile, mi_row, mi_col, BLOCK_64X64, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64 ) ; set_source_var_based_partition ( cpi",0
570,"<S2SV_ModStart> 1 ) ; if ( nbuf >= opipe -> buffers ) { WARN_ON (! ( opipe -> curbuf + i ) & ( opipe -> buffers - 1 ) ) ; break ; } <S2SV_ModStart>, ibuf ) ; if (! ( opipe -> curbuf + i ) & ( opipe -> buffers - 1 ) ) ) { WARN_ON (! ( opipe -> curbuf + i ) & ( opipe -> buffers - 1 ) ) ; if (! ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) ) ; obuf = opipe -> bufs + nbuf ; * obuf = * ibuf ; } else { obuf = opipe -> bufs + nbuf ; * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; if ( obuf -> len > len ) obuf -> len = len ; opipe -> nrbufs ++ ; ret += obuf -> len ; i ++ ; }",0
571,"<S2SV_ModStart> ; dh = skb_header_pointer ( skb, dataoff, sizeof ( _dh ), & dh ) ; if ( dh == NULL ) { pr_err ( ""nf_ct_dccp: <S2SV_blank> packet <S2SV_blank> has <S2SV_blank> corrupt <S2SV_blank> header"" ) ; goto out_invalid ; } state = dccp_state_table [ CT_DCCP_ROLE_CLIENT ] [ dh -> dccph_type ] [ CT_DCCP_NONE ] ; break ; case CT_DCCP_REQUEST : break ; case CT_DCCP_INVALID : msg = ""nf_ct_dccp: <S2SV_blank> invalid <S2SV_blank> state <S2SV_blank> transition <S2SV_blank> "" ; goto out_invalid ; } ct -> proto. dccp. role [ IP_CT_DIR_ORIGINAL ] = CT_DCCP_ROLE_CLIENT ; ct -> proto. dccp. role [ IP_CT_DIR_REPLY ] = CT_DCCP_ROLE_SERVER ; ct -> proto. dccp. state = CT_DCCP_NONE ; ct -> proto. dccp. last_pkt = DCCP_PKT_REQUEST ; ct -> proto. dccp.",0
572,"<S2SV_ModStart> else { Fp = fopen_safe <S2SV_ModEnd> ( filename, <S2SV_ModStart> ""wb"" ) ; if ( Fp == NULL ) return HTTP_UNAUTHORIZED ; } parser -> position = POS_ENTITY ; do { if ( entity_offset + Data_Buf_Size > parser -> msg. entity. length ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_BAD_REQUEST ; goto ExitFunction ; } if ( entity_offset + Data_Buf_Size > parser -> msg. entity. length ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_BAD_REQUEST ; goto ExitFunction ; } } while ( entity_offset + Data_Buf_Size > parser -> msg. entity. length ) { if ( membuffer_append ( & parser -> msg. msg, Buf, ( size_t ) num_read )!= 0 ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_INTERNAL_SERVER_ERROR ; goto ExitFunction ; } status = parser_parse_entity ( parser ) ; if ( status == PARSE_INCOMPLETE_ENTITY )",0
573,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> fd = xfmkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> dir ) ) == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( tmpname == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; return NULL ; } if ( tmpname [ strlen ( tmpname ) - 1 ]!= tmpname ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
574,<S2SV_ModStart> ( blkg ) ) { spin_lock_irq ( q -> queue_lock ) ; blkg_destroy_all ( q ) ; spin_unlock_irq ( q -> queue_lock ) ; q -> root_blkg = NULL ; q -> root_rl. blkg = blkg ; q -> root_rl. blkg = blkg ; q -> root_rl. blkg = blkg ; ret = blk_throtl_init ( q ) ; if ( ret ) { spin_unlock_irq ( q -> queue_lock ) ; blkg_destroy_all ( q ) ; spin_unlock_irq ( q -> queue_lock ) ; return PTR_ERR ( blkg ) ; } q -> root_blkg = blkg ; q -> root_rl. blkg = blkg ; q -> root_rl. blkg = blkg ; q -> root_rl. blkg = blkg ; ret = blk_throtl_init ( q ) ; if ( ret ) { spin_lock_irq ( q -> queue_lock ) ; blkg_destroy_all ( q ) ; spin_unlock_irq ( q ->,0
575,"<S2SV_ModStart> ; if ( ncolors > XWD_MAX_COLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> in <S2SV_blank> the <S2SV_blank> frame\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( ncolors > XWD_MAX_COLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> in <S2SV_blank> the <S2SV_blank> frame\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( ncolors > XWD_MAX_COLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> in <S2SV_blank> the <S2SV_blank> frame\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( ncolors > XWD_MAX_COLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> in <S2SV_blank> the <S2SV_blank> frame\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( ncolors > XWD_MAX_COLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank>",0
576,<S2SV_ModStart> kvno ; krb5_data <S2SV_ModEnd> rspac ; const <S2SV_ModStart> rspac ) ; if ( rspac ) memcpy <S2SV_ModEnd> ( & opt_str <S2SV_ModStart> opt_str ) ; if ( opt_str [ sizeof ( opt_str ) - 1 ]!= '\\0' ) { if ( opt_str [ sizeof ( opt_str ) - 1 ]!= '\\0' ) { if ( opt_str [ sizeof ( opt_str ) - 1 ]!= '\\0' ) { if ( opt_str [ 0 ]!= '\\0' ) { if ( opt_str [ opt_str. length - 1 ]!= '\\0' ) { if ( opt_str [ opt_str. length - 1 ]!= '\\0' ) { if ( opt_str [ opt_str. length - 1 ]!= '\\0' ) { if ( opt_str [ opt_str. length - 1 ]!= '\\0' ) { if ( opt_str [ opt_str. length - 1 ]!= '\\0' ) { if ( opt_str [ opt_str. length - 1 ]!= '\\0' ) { if ( opt_str [ opt_str. length - 1 ]!= '\\,0
577,"<S2SV_ModStart> mnt ) ; if ( dentry -> d_inode -> i_op -> follow_link ) { dentry -> d_inode -> i_op -> follow_link ( dentry, nd ) ; error = PTR_ERR ( cookie ) ; if (! IS_ERR ( cookie ) ) { char * s = nd_get_link ( nd ) ; error = 0 ; if ( s ) error = __vfs_follow_link ( nd, s ) ; else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } if ( dentry -> d_inode -> i_op ->",0
578,"<S2SV_ModStart> arg ) { struct usbdevfs_connectinfo ci ; return copy_to_user ( arg, & ci, sizeof ( ci ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
579,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> * optp, u32 <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> IPOPT_END ; } if ( opt -> optlen < opt -> optlen ) { kfree ( opt ) ; return - EINVAL ; } if ( ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } if ( optlen && opt_options_compile ( net, opt, NULL ) ) { kfree ( * optp ) ; * optp = opt ; return 0 ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( * optp ) ; * optp = opt ; return 0 ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; * optp = opt ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
580,<S2SV_ModStart> args -> rmtblkcnt2 ; args -> rmtvaluelen2 = args -> rmtvaluelen ; args -> rmtvaluelen2 = args -> rmtvaluelen <S2SV_ModStart> args -> rmtblkcnt2 ; args -> rmtvaluelen2 = args -> rmtvaluelen ; args -> op_flags |= XFS_DA_OP_RENAME ; args -> rmtblkcnt2 = args -> rmtblkcnt ; args -> rmtvaluelen2 = args -> rmtvaluelen ; args -> rmtblkno2 = args -> rmtblkno ; args -> rmtblkcnt2 = args -> rmtblkcnt ; args -> rmtvaluelen2 = args -> rmtvaluelen ; args -> rmtblkcnt2 = args -> rmtblkcnt ; args -> rmtblkcnt2 = args -> rmtblkcnt ; args -> rmtvaluelen2 = args -> rmtvaluelen ; args -> rmtblkcnt = args -> rmtblkcnt ; args -> rmtblkcnt2 = args -> rmtblkcnt,0
581,"<S2SV_ModStart> ; if ( ValidateIOBufferSize ( Irp, sizeof ( LONG ), ValidateOutput ) ) { * ( int * ) Irp -> AssociatedIrp. SystemBuffer = 0 ; * ( int * ) Irp -> IoStatus. Information = sizeof ( LONG ) ; Irp -> IoStatus. Status = STATUS_FAILURE ; } break ; case TC_IOCTL_SET_DEVICE_REFCOUNT : if ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = DeviceObject -> ReferenceCount ; Irp -> IoStatus. Information = sizeof ( int ) ; Irp -> IoStatus. Status = STATUS_SUCCESS ; } break ; case TC_IOCTL_GET_DEVICE_REFCOUNT : if ( ValidateIOBufferSize ( Irp, sizeof ( LONG ), ValidateOutput ) ) { LONG deviceObjectCount = 0 ; * ( int * ) Irp -> AssociatedIrp. SystemBuffer = DeviceObject -> ReferenceCount ; * ( int * ) Irp -> AssociatedIrp. SystemBuffer = DeviceObject ->",0
582,"<S2SV_ModStart> ; if ( connection == NULL ) goto error ; else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, "" <S2SV_blank> "" ) ; if ( strcasecmp ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, "" <S2SV_blank> "" ) ; if ( strcasecmp ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) goto error ; for ( int i = 0 ; i < count ;",0
583,"<S2SV_ModStart> * findalldevs_if ; <S2SV_ModEnd> if ( rpcapd_discard <S2SV_ModStart> return 0 ; } if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { rpcapd_log ( LOGPRIO_ERROR, ""Too <S2SV_blank> many <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."", errbuf ) ; return - 1 ; } for ( d = alldevs ; d!= NULL ; d = d -> next ) { nif ++ ; if ( d -> description ) plen += strlen ( d -> description ) ; if ( d -> name ) plen += strlen ( d -> name ) ; if ( d -> description ) plen += strlen ( d -> description ) ; if ( d -> name ) plen += strlen ( d -> name ) ; <S2SV_ModStart> -> name ) plen += sizeof ( struct rpcap_findalldevs_if ) ; for ( address = d -> addresses ; address!= NULL ; address = address -> next ) { switch ( address -> addr -> sa_family ) { case",0
584,"<S2SV_ModStart> ; struct dump_dir * <S2SV_ModEnd> dd = dd_create <S2SV_ModStart> DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } g_hash_table_remove ( problem_info, ""basename"" ) ; dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } dd_create_basic_files ( dd, client_uid, NULL ) ; dd_save_text ( dd, FILENAME_ABRT_VERSION, VERSION ) ; dd_save_text ( dd, FILENAME_CMDLINE, cmdline ) ; free ( cmdline ) ; g_hash_table_iter_init ( & iter, & gpkey, & gpvalue ) ; g_hash_table_iter_init ( & iter, & gpkey, & gpvalue ) ; g_hash_table_iter_init ( & iter, & gpkey, & gpvalue )",0
585,"<S2SV_ModStart> image ) ; if ( ( image -> columns % 2 )!= 0 ) { index = ConstrainColormapIndex ( image, ( * p >> 6 ) & 0x3 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 2 )!= 0 ) { index = ConstrainColormapIndex ( image, ( * p >> 4 ) & 0x3 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( image -> columns % 2 )!= 0 ) { index = ConstrainColormapIndex ( image, ( * p >> 6 ) & 0x3 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( image -> columns % 2 )!= 0 ) { index = ConstrainColormapIndex ( image, ( * p >> 6 ) & 0x3 ) ; Set",0
586,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
587,"<S2SV_ModStart> * sk, <S2SV_ModEnd> int tstype ) <S2SV_ModStart> ; int err <S2SV_ModEnd> ; serr = <S2SV_ModStart> = SO_EE_ORIGIN_TIMESTAMPING ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= sk -> sk_tskey ; } else { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -=",0
588,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
589,<S2SV_ModStart> = len ; ND_TCHECK2 <S2SV_ModEnd> ( bp [ <S2SV_ModStart> = len ; ND_TCHECK2 <S2SV_ModEnd> ( bp [ <S2SV_ModStart> = len ; ND_TCHECK2 <S2SV_ModEnd> ( bp [ <S2SV_ModStart> = len ; ND_TCHECK2 <S2SV_ModEnd> ( bp [ <S2SV_ModStart> = len ; ND_TCHECK2 <S2SV_ModEnd> ( bp [ <S2SV_ModStart> = len ; ND_TCHECK2 <S2SV_ModEnd> ( bp [ <S2SV_ModStart> = len ; ND_TCHECK2 <S2SV_ModEnd> ( bp [ <S2SV_ModStart> = len ; ND_TCHECK2 <S2SV_ModEnd> ( bp [ <S2SV_ModStart> = len ; ND_TCHECK2 <S2SV_ModEnd> ( bp [ <S2SV_ModStart> = len ; ND_TCHECK2 <S2SV_ModEnd> ( bp [ <S2SV_ModStart> = len ; ND_TCHECK2 <S2SV_ModEnd> ( bp [ <S2SV_ModStart> = len ; ND_TCHECK2 <S2SV_ModEnd> ( bp [ <S2SV_ModStart> = len ; ND_TCHECK2 <S2SV_ModEnd> ( bp [ <S2SV_ModStart> = len ; ND_TCHECK2 <S2SV_ModEnd> ( bp [ <S2SV_ModStart> = len ; ND_TCHECK2 <S2SV_ModEnd> ( bp [ <S2SV_ModStart> = len ; ND_TCHECK2 <S2SV_ModEnd> ( bp [ <S2SV_ModStart> = len ; ND_TCHECK2 <S2SV_ModEnd> ( bp [ <S2SV_ModStart> = len ; ND_TCHECK2 <S2SV_ModEnd> ( bp [ <S2SV_ModStart> =,0
590,"<S2SV_ModStart>, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ), CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc?d="" ), CONST_STR_LEN ( ""/abc?d="" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc?d=e"" ), CONST_STR_LEN ( ""/abc?d=e&"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc?d=e&"" ), CONST_STR_LEN ( ""/abc?d=e&"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc?d=e&"" ), CONST_STR_LEN ( ""/abc?d=e&"" ) ) ; run_burl_normalize ( psrc, ptmp, flags,",0
591,"<S2SV_ModStart>! dumpable && task -> group_leader && task -> group_leader -> euid == tcred -> euid && task -> group_leader -> suid == tcred -> sgid && task -> group_leader -> gid == tcred -> gid ) { rcu_read_unlock ( ) ; return - EPERM ; } rcu_read_unlock ( ) ; if ( task -> group_leader -> euid == tcred -> euid && uid_eq ( cred -> uid, tcred -> uid ) && uid_eq ( cred -> uid, tcred -> uid ) && gid_eq ( cred -> gid, tcred -> gid ) ) goto ok ; if ( ptrace_has_cap ( task -> group_leader -> user_ns, mode ) ) { rcu_read_unlock ( ) ; return - EPERM ; } <S2SV_ModEnd> rcu_read_unlock ( )",0
592,"<S2SV_ModStart> long ) ) { if ( i + sizeof ( long ) > w ) { rdp_protocol_error ( ""add_bytes_l2_c"", ( void * ) dst, ( void * ) src1, ( void * ) src2, ( void * ) w ) ; return ; } for ( i = 0 ; i <= w - sizeof ( long ) ; i += sizeof ( long ) ) { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( a & pb_7f ) + ( b & pb_7f ) ) ^ ( a & pb_80 ) ; * ( long * ) ( dst + i ) = ( ( a ^ b ) & pb_80 ) ; } for ( ; i < w ; i ++ ) { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( a & pb_7f ) + ( b & pb_7f ) ; * ( long *",0
593,<S2SV_ModStart> ( flags & ( __GFP_DMA | __GFP_HIGHMEM ) <S2SV_ModEnd> ) memset (,0
594,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
595,<S2SV_ModStart> SEI_USER_DATA_REGISTERED_ITU_T_T35 : { ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_params_present_flags = 1 ; ps_parse -> s_sei_params. i1_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i1_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i1_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei,0
596,<S2SV_ModStart> ; priv = kzalloc <S2SV_ModEnd> ( sizeof (,0
597,<S2SV_ModStart> -> num_sdma_engines ; if ( num_engines > SDMA_MAX_ENGINES ) { ret = - EINVAL ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> -> num_sdma_engines > SDMA_MAX_ENGINES ) { ret = - EINVAL ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> -> num_sdma_engines > SDMA_MAX_ENGINES ) { ret = - EINVAL ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> -> num_sdma_engines ; if ( num_engines > SDMA_MAX_ENGINES ) { ret = - EINVAL ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> -> num_sdma_engines > SDMA_MAX_ENGINES ) { ret = - EINVAL ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> -> num_sdma_engines > SDMA_MAX_ENGINES ) { ret = - EINVAL ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> -> num_sdma_engines ; if ( num_engines > SDMA_MAX_ENGINES ) { ret = - EINVAL ; goto cleanup <S2SV_ModEnd> ; } },0
598,<S2SV_ModStart> device_data ; if ( dev ),0
599,"<S2SV_ModStart> int rep_quick ) { <S2SV_ModEnd> DBUG_ENTER ( ""mi_repair_parallel"" <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; printf <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; printf <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; printf <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; printf <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; printf <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; printf <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank>",0
600,"<S2SV_ModStart> q, 10 ) ; if ( size > ( size_t ) MAX_SIZES ) { return ( DestroyImageList ( images ) ) ; } p = q ; sizes [ i ++ ] = size ; while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) || ( * p == ',' ) ) ) p ++ ; } if ( i == 0 ) i = 10 ; for ( i = 0 ; i < * count ; i ++ ) { resized = ResizeImage ( image, sizes [ i ], sizes [ i ], image -> filter, exception ) ; if ( resized == ( Image * ) NULL ) return ( DestroyImageList ( images ) ) ; if ( images == ( Image * ) NULL ) return ( DestroyImageList ( images ) ) ; if ( images == ( Image * ) NULL ) return ( DestroyImageList ( images ) ) ; if ( images == ( Image * ) NULL ) return ( DestroyImageList ( images ) ) ; if ( images == ( Image * ) NULL ) return ( DestroyImageList ( images ) ) ; if ( images == ( Image * ) NULL ) return ( DestroyImageList ( images ) ) ; if ( images == ( Image *",0
601,<S2SV_ModStart> } else { xfs_dablk_t <S2SV_ModEnd> dblocks = XFS_B_TO_FSB <S2SV_ModStart> valuelen ) ; xfs_dablk_t <S2SV_ModEnd> dblocks = XFS_NEXTENTADD_SPACE_RES,0
602,"<S2SV_ModStart> ) ; } if ( pcount > MAX_HSTORE_PAIRS ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount ) )",0
603,"<S2SV_ModStart> val ) ; if (! strcmp ( var, ""command"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> command"", r -> name ) ; if (! strcmp ( var, ""rspfile"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if (! strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ;",0
604,<S2SV_ModStart> ; if ( RE_YY_INPUT ( yyscanner ) ; <S2SV_ModStart> ; if ( RE_YY_INPUT ( yyscanner ) ; <S2SV_ModStart> ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; <S2SV_ModStart> ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( <S2SV_ModStart> ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if (,0
605,"<S2SV_ModStart> if ( clen > sizeof ( path ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), ( unsigned long long ) c -> id, c -> buf ) ; return HEAD_AGAIN ; } <S2SV_ModStart> if ( clen > sizeof ( query ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), ( unsigned long long ) c -> id, c -> buf ) ; return HEAD_AGAIN ; } <S2SV_ModStart> case 'R' : if ( 4 == b - c -> buf && 0 == strncmp ( ""GET"", c -> buf, 4 ) ) { method = AGOO_GET ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""PUT"", c -> buf, 4 ) ) { method = AGOO_PUT ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""POST"", c ->",0
606,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> int i, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",1
607,"<S2SV_ModStart> g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) <S2SV_ModEnd> ) goto out",0
608,"<S2SV_ModStart> fh_dentry ) ; fh_lock ( fh ) ; error = fh_want_write ( fh ) ; if ( error ) goto out_errno ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access ) ; if ( error ) goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_lock <S2SV_ModEnd> ; fh_drop_write ( <S2SV_ModStart> fh ) ; out_drop_lock : fh_unlock ( fh ) ; <S2SV_ModEnd> fh_drop_write ( fh",0
609,"<S2SV_ModStart> * ue ; if ( tree_root == NULL ) { fprintf ( stdout, "" <S2SV_blank> Unfolding <S2SV_blank> the <S2SV_blank> meta-tree <S2SV_blank> "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout, "" <S2SV_blank> done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue, & unfolded_tree, next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array, i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ], & ue -> fop, sizeof ( struct filter_op ) ) ; i ++ ; } } else { SAFE_REALLOC ( array, i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ], & ue -> fop, sizeof ( struct filter_op ) ) ; i ++ ; } }",0
610,"<S2SV_ModStart> char * temp_filename = osi_calloc ( <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( section -> entries ) ; node!=",0
611,<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) + pc -> lengthComponentIdent ; <S2SV_ModStart> > 0 ) { elen += sizeof ( struct pathComponent ) + pc -> lengthComponentIdent ; <S2SV_ModStart> break ; } elen += sizeof ( struct pathComponent ) + pc -> lengthComponentIdent ; } if ( elen > fromlen ) { return - EIO ; } <S2SV_ModEnd> if ( p,0
612,"<S2SV_ModStart> case NFSPROC_GETATTR : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsproc_str, ""proc-%u"", proc ) ) ) ; goto trunc ; } <S2SV_ModStart> if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsproc_str, ""proc-%u"", proc ) ) ) ; goto trunc ; } <S2SV_ModStart> case NFSPROC_GETATTR : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsproc_str, "" <S2SV_blank> %s"", tok2str ( nfsproc_str, ""proc-%u""",0
613,"<S2SV_ModStart> case VTP_SUMMARY_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> Config <S2SV_blank> Rev <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_32BITS ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Updater <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_32BITS ( <S2SV_ModStart> ( ndo, "" <S2SV_blank> Timestamp <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_32BITS ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Timestamp <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_32BITS",0
614,"<S2SV_ModStart> userData, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" <S2SV_ModEnd> ) ; ctxt <S2SV_ModStart>, NULL, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" <S2SV_ModEnd> ) ; ctxt <S2SV_ModStart>, NULL, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" <S2SV_ModEnd> ) ; ctxt <S2SV_ModStart>, target, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" <S2SV_ModEnd> ) ; ctxt <S2SV_ModStart>, NULL, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" <S2SV_ModEnd> ) ; ctxt <S2SV_ModStart>, NULL, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" <S2SV_ModEnd> ) ; ctxt <S2SV_ModStart>, NULL, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" <S2SV_ModEnd> ) ; ctxt",0
615,<S2SV_ModStart> ) ; bool checksum_valid = false <S2SV_ModStart> sin ) ; if (! checksum_valid ||! msg -> msg_name ) * addr_len = sizeof ( * sin ) ; if ( flags & MSG_TRUNC ) { if ( UDP_SKB_CB ( skb ) -> partial_cov ) { checksum_valid = true ; } else { if ( UDP_SKB_CB ( skb ) -> partial_cov ) { if (! UDP_SKB_CB ( skb ) -> partial_cov ) { if (! UDP_SKB_CB ( skb ) -> partial_cov ) { if (! UDP_SKB_CB ( skb ) -> partial_cov ) { if ( UDP_SKB_CB ( skb ) -> partial_cov ) { if (! UDP_SKB_CB ( skb ) -> partial_cov ) { if (! UDP_SKB_CB ( skb ) -> partial_cov ) { if (! UDP_SKB_CB ( skb ) -> partial_cov ) { if (! UDP_SKB_CB ( skb ) -> partial_cov ) { if (! UDP_SKB_CB (,0
616,"<S2SV_ModStart> len ) { ND_TCHECK2 ( * pptr, sizeof ( rpki_rtr_pdu ) ) ; <S2SV_ModStart> } while ( tlen >= sizeof ( rpki_rtr_pdu ) ) { ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; pdu_header = ( const rpki_rtr_pdu * ) tptr ; tlen -= sizeof ( rpki_rtr_pdu ) ; if (! tlen ) { ND_PRINT ( ( ndo, ""\\n\\t%s"", tstr ) ) ; break ; } if ( tlen < sizeof ( rpki_rtr_pdu ) ) { ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; pdu_type = pdu_header -> pdu_type ; pdu_len = EXTRACT_32BITS ( pdu_header -> length ) ; if (! pdu_len ) { break ; } if ( rpki_rtr_pdu_print ( ndo, tptr, 8 ) ) goto trunc ; t",0
617,"<S2SV_ModStart> int tagval ; struct stream packet <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> tsrequest <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> tsrequest <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> tsrequest <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
618,"<S2SV_ModStart> = 0 ; register u_int <S2SV_ModEnd> chars_processed ; int <S2SV_ModStart> int elt ; register u_int <S2SV_ModEnd> data_size ; int <S2SV_ModStart> * cp ++ ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return ( NULL ) ; } continue ; } if ( ( i = * cp ++ ) & INDIR_MASK ) == INDIR_MASK ) { if (! compress ) { rp = cp + 1 ; compress = 1 ; } if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; cp = bp + ( ( i << 8 ) | * cp ) & 0x3fff ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return ( NULL ) ; } if ( ( i & INDIR_MASK",0
619,<S2SV_ModStart> valuelen ) ; if ( valuelen > args -> valuelen ) return XFS_ERROR ( EFSCORRUPTED <S2SV_ModStart> valuelen ) ; if ( valuelen > args -> valuelen ) return XFS_ERROR ( EFSCORRUPTED <S2SV_ModStart> valuelen ) ; if ( valuelen > args -> valuelen ) return XFS_ERROR ( EFSCORRUPTED <S2SV_ModStart> valuelen ) ; if ( valuelen > args -> valuelen ) return XFS_ERROR ( EFSCORRUPTED,0
620,"<S2SV_ModStart> int rv = Socket_print <S2SV_ModEnd> ( S, <S2SV_ModStart> ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0 <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s""",0
621,"<S2SV_ModStart> } pid_t child ; if ( is_link ( dest ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", dest ) ; exit ( 1 ) ; } if ( copy_file_as_user ( src, dest, getuid ( ), getgid ( ) ) < 0 ) errExit ( ""copy_file_as_user"" ) ; if ( copy_file_as_user ( src, dest, getuid ( ), getgid ( ) ) < 0 ) errExit ( ""chown"" ) ; if ( chmod ( dest, S_IRUSR | S_IWUSR ) < 0 ) errExit ( ""chmod"" <S2SV_ModStart> ( dest, S_IRUSR | S_IWUSR <S2SV_ModEnd> ) < 0 <S2SV_ModStart> ""chmod"" ) ; unlink ( src ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
622,"<S2SV_ModStart> flags ) ; rc = bfa_port_get_stats ( BFA_FCPORT ( & bfad -> bfa ), fcstats, bfad_hcb_comp, & fcomp ) ; if ( rc!= BFA_STATUS_OK ) { kfree ( fcstats ) ; kfree ( fcstats ) ; return NULL ; } <S2SV_ModEnd> hstats -> seconds_since_last_reset <S2SV_ModStart> secs_reset ; hstats -> tx_frames = fcstats -> fc. tx_frames ; hstats -> tx_words = fcstats -> fc. tx_words ; hstats -> rx_frames = fcstats -> fc. rx_frames ; hstats -> tx_words = fcstats -> fc. rx_words ; hstats -> lip_count = fcstats -> fc. lip_count ; hstats -> nos_count = fcstats -> fc. nos_count ; hstats -> error_frames = fcstats -> fc. error_frames ; hstats -> dumped_frames = fcstats -> fc. dropped_frames ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_sync_count = fcstats ->",0
623,"<S2SV_ModStart> value ) { if ( value -> x > 1.0f ) { value -> x = 1.0f ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> x ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; } else { value -> x = 1.0f ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
624,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_clear ( ) ; * out = line ; return 0 ; } if ( len == 0 ) { * out = line ; return flush_pkt ( head ) ; } if ( len == 0 ) { * out = line ; return flush_pkt ( head ) ; } len -= PKT_LEN_SIZE ; if ( * line == GIT_SIDE_BAND_DATA ) ret = data_pkt ( head, line, len ) ; else if ( * line == GIT_SIDE_BAND_PROGRESS ) ret = sideband_progress_pkt ( head, line, len ) ; else if ( * line == GIT_SIDE_BAND_ERROR ) ret = sideband_error_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""NAK"" ) ) ret = nak_pkt ( head ) ; else if (! git__prefixcmp ( line, ""ERR <S2SV_blank> "" ) ) ret = err_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""OK"" ) ) ret = ok_pkt",0
625,"<S2SV_ModStart> ; if ( unlikely (! mmget_still_valid ( mm ) ) ) return VM_FAULT_SIGSEGV <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( flags & FAULT_FLAG_WRITE ) &&! mm_forbids_zeropage ( mm ) ) { entry = pte_mkspecial ( my_zero_pfn ( address ), vma -> vm_page_prot ) ) ; page_table = pte_offset_map_lock ( mm, pmd, address, & ptl ) ; if (! pte_none ( * page_table ) ) goto unlock ; } if (! ( flags & FAULT_FLAG_WRITE ) &&! mm_forbids_zeropage ( mm ) ) { entry = pte_mkwrite ( my_zero_pfn ( address ), vma -> vm_page_prot ) ) ; page_table = pte_offset_map_lock ( mm, pmd, address, & ptl ) ; if (! pte_none ( * page_table ) ) goto unlock ; }",0
626,<S2SV_ModStart> -> sasl_mechanism ; if ( rec -> usermode == NULL ) rec -> usermode = g_strdup ( src -> usermode ) ; if ( rec -> alternate_nick == NULL ) rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; if ( rec -> usermode == NULL ) rec -> usermode = g_strdup ( src -> usermode ) ; if ( rec -> alternate_nick == NULL ) rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; if ( rec -> usermode == NULL ) rec -> usermode = g_strdup ( src -> usermode ) ; if ( rec -> alternate_nick == NULL ) rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; if ( rec -> usermode == NULL ) rec -> usermode = g_strdup ( src -> usermode ) ; if ( rec -> alternate_nick == NULL ) rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; if ( rec -> usermode == NULL ) rec -> usermode = g_strdup ( src -> usermode ) ; if ( rec -> usermode == NULL ),0
627,"<S2SV_ModStart> { struct bpf_insn_aux_data <S2SV_ModEnd> * new_data, <S2SV_ModStart> ) ) ; memcpy ( new_data, old_data, sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; <S2SV_ModStart> ) ) ; memcpy ( new_data, old_data, sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; memcpy ( new_data + off + cnt - 1, old_data + off, sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1, sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off, sizeof ( struct bpf_insn_aux",0
628,"<S2SV_ModStart> ) bp2 ; ND_TCHECK_32BITS ( & dp -> ip6f_offlg ) ; <S2SV_ModStart> dp -> ip6f_offlg ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_16BITS ( & ip6 -> ip6_plen ) - ( long ) ( bp - bp2 ) - sizeof ( struct ip6_frag ) ) ) ; } else { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_16BITS ( & ip6 -> ip6_plen ) - ( long ) ( bp - bp2 ) - sizeof ( struct ip6_frag ) ) ) ) ; }",0
629,"<S2SV_ModStart> trunc ; } if ( len - i < IP6MOPT_REFRESH_MINLEN ) { ND_PRINT ( ( ndo, ""(refresh: <S2SV_blank> %u)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; goto trunc ; } if ( len - i < IP6MOPT_ALTCOA_MINLEN ) { ND_PRINT ( ( ndo, ""(altcoa: <S2SV_blank> trunc)"" ) ) ; goto trunc ; } if ( len - i < IP6MOPT_ALTCOA_MINLEN ) { ND_PRINT ( ( ndo, ""(altcoa: <S2SV_blank> trunc)"" ) ) ; goto trunc ; } if ( len - i < IP6MOPT_NONCEID_MINLEN ) { ND_PRINT ( ( ndo, ""(ni: <S2SV_blank> ho=0x%x)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""(ni: <S2SV_blank> ho=0x%x)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; break ; case",0
630,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
631,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""DecodeTileFailed"" ) ; return 0 ; } <S2SV_ModStart> 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""DecodeTileFailed"" ) ; return 0 ; } <S2SV_ModEnd> occ0 -= rowsize <S2SV_ModStart> 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""DecodeTileFailed"" ) ; if ( ( * sp -> decodepfunc ) ( tif, op0, rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""DecodeTileFailed"" ) ; return 0 ; } assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 && ( * sp -> decodepfunc ) ( tif, op0, rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""DecodeTileFailed"" ) ; if ( ( * sp -> decodepfunc ) ( tif, op0, rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""DecodeTileFailed"" ) ; return",0
632,"<S2SV_ModStart>, o, datao ; if ( CHECKOVERFLOW ( buf, buf_size, 6 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + 6, n -> order ) ; datao += 2 ; if ( CHECKOVERFLOW ( datao, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. tag = exif_get_short ( buf + o + 2, n -> order ) ; n -> entries [ tcount ]. format = exif_get_short ( buf + o + 4, n -> order ) ; n -> entries [ tcount ]. components = exif_get_long ( buf + o + 4, n -> order ) ; n -> entries [ tcount ]. order = n -> order ; n -> entries [ tcount ]. order = n -> order ; n",0
633,"<S2SV_ModStart> ; if ( ctx -> ctx_id_offset + iov_count > KG_CTX_MAX_IOV ) { * minor_status = KG_CTX_INCOMPLETE ; return GSS_S_NO_CONTEXT ; } if ( ctx -> ctx_id_offset + iov_count > KG_CTX_MAX_IOV ) { * minor_status = KG_CTX_INCOMPLETE ; return GSS_S_NO_CONTEXT ; } if ( ctx -> ctx_id_offset + iov_count > KG_CTX_MAX_IOV ) { * minor_status = KG_CTX_INCOMPLETE ; return GSS_S_NO_CONTEXT ; } if ( kg_locate_iov ( iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM )!= NULL ) { code = kg_unseal_stream_iov ( minor_status, ctx, conf_state, qop_state, iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM ) ; } else { * minor_status = KG_CTX_INCOMPLETE ;",0
634,<S2SV_ModStart> = NULL ; hugepage_put_cache ( sbi -> hugepage_cache ) ;,0
635,"<S2SV_ModStart> HA_ERR_CRASHED : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> does <S2SV_blank> not <S2SV_blank> have <S2SV_blank> a <S2SV_blank> correct <S2SV_blank> index <S2SV_blank> definition. <S2SV_blank> You <S2SV_blank> need <S2SV_blank> to <S2SV_blank> recreate <S2SV_blank> it <S2SV_blank> before <S2SV_blank> you <S2SV_blank> can <S2SV_blank> do <S2SV_blank> a <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_NOT_A_TABLE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank>",0
636,<S2SV_ModStart> len ) { CURLcode res <S2SV_ModEnd> ; char * <S2SV_ModStart> long hex ; int alloc = ( length? length : ( int ) strlen ( string ) ) + 1 <S2SV_ModStart> CURLcode res ; if ( alloc <= 0 ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; if ( alloc <= 0 ) { free ( ns ) ; return NULL ; } ns [ strindex ++ ] = 0 ; if ( alloc <= 0 ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( alloc <= 0 ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
637,<S2SV_ModStart> ) ; RAnalOp <S2SV_ModEnd> next_op ; avr_op_analyze,0
638,"<S2SV_ModStart> again ; } iov_iter_advance ( i, bytes ) ; pos += copied ; written += copied ; balance_dirty_pages_ratelimited ( mapping ) ; } while ( iov_iter_count ( i ) ) { pgoff_t index = pos >> PAGE_CACHE_SHIFT ; bytes = min_t ( unsigned long, PAGE_CACHE_SIZE - offset, iov_iter_single_seg_count ( i ) ) ; if ( unlikely ( iov_iter_fault_in_readable ( i, bytes ) ) { status = - EFAULT ; break ; } status = a_ops -> write_begin ( file, mapping, pos, bytes, flags, & page, & fsdata ) ; if ( status < 0 ) break ; status = a_ops -> write_end ( file, mapping, pos, bytes, flags, & page, & fsdata ) ; if ( status < 0 ) break ; status = - EFAULT ; flush_dcache_page ( page ) ; pagefault_enable ( ) ; flush_dcache_page ( page ) ; pagefault_enable ( ) ; flush_dcache_page ( page ) ; pagefault_enable",0
639,"<S2SV_ModStart> } if ( unlikely ( len < ring -> rx_buffersize ) ) { b43err ( ring -> dev -> wl, ""DMA <S2SV_blank> RX <S2SV_blank> too <S2SV_blank> large <S2SV_blank> "" ""(len: <S2SV_blank> %u, <S2SV_blank> buffersize: <S2SV_blank> %u, <S2SV_blank> ringsize: <S2SV_blank> %u)"", len, ring -> rx_buffersize, ring -> rx_buffersize ) ; dmaaddr = meta -> dmaaddr ; goto drop_recycle_buffer ; } if ( unlikely ( len > ring -> rx_buffersize ) ) { int cnt = 0 ; s32 tmp = len ; while ( 1 ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; cnt ++ ; tmp -= ring -> rx_buffersize ; if ( tmp <= 0 ) break ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; * slot = next_slot ( ring, * slot",0
640,<S2SV_ModStart> -> pdu_free_state_ref = usm_free_usmStateReference <S2SV_ModEnd> ; def ->,0
641,"<S2SV_ModStart> |= SEEN ; if ( obj -> type == OBJ_TAG ) { <S2SV_ModStart> obj, NULL <S2SV_ModEnd>, name, <S2SV_ModStart>, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TREE ) { process_tree ( revs, ( struct tree * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TREE ) { process_tree ( revs, ( struct tree * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_B",0
642,"<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) sub -> flags |= prog -> flags ; else if ( prog -> flags & eflags ) sub -> flags &= ~ prog -> flags ; else if ( prog -> flags & eflags ) sub -> flags |= prog -> flags ; else if ( prog -> flags & eflags ) sub -> flags |= prog -> flags ; else if ( prog -> flags & eflags ) sub -> flags |= prog -> flags ; else if ( prog -> flags & eflags ) sub -> flags |= eflags ; if (! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ) sub -> flags |= prog -> flags ; else if (! match ( prog -> start, sp, prog -> flags | eflags, sub ) ) sub -> flags |= prog -> flags ; else if ( prog -> flags & eflags ) sub -> flags |= prog -> flags ; else if ( prog -> flags & eflags ) sub -> flags |= prog -> flags ; else if ( prog -> flags & eflags ) sub -> flags |= prog -> flags ; else if ( prog -> flags & eflags ) sub -> flags |= prog -> flags ; else if ( prog -> flags & eflags )",0
643,<S2SV_ModStart> 0 ) { if ( zsize!= c -> tile_width * c -> tile_height ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 3 ) ; if ( zsize!= c -> tile_height * c -> tile_width * c -> tile_height ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 3 ) ; if ( zsize!= c -> tile_height * c -> tile_width * c -> tile_height * c -> tile_height * c -> tile_height * c -> tile_width * c -> tile_height * c -> tile_width * c -> tile_height ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 3 ) ; if ( zsize!= c -> tile_height * c -> tile_height * c -> tile_height * c -> tile_width * c -> tile_height * c -> tile_height * c -> tile_height * c -> tile_height * c -> tile_height * c -> tile_width * c -> tile_height * c -> tile_height * c -> tile_height * c -> tile_height * c -> tile_height * c -> tile_height * c -> tile_height * c -> tile_height * c ->,0
644,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
645,"<S2SV_ModStart> ] ; # ifdef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= 1 ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; }",0
646,<S2SV_ModStart> ; break ; case 3 : { CheckNumberPixels ( 4 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; } break ; case 4 : { CheckNumberPixels ( 8 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 7 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = (,0
647,"<S2SV_ModStart> timer ) ; spin_lock ( & timeri -> lock ) ; list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & timeri -> lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & timeri -> slave_active_lock ) ; timeri -> timer = NULL ; mutex_unlock ( & timeri -> lock ) ; } list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & timeri -> lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; slave -> master = NULL ; slave -> timer = NULL ; spin_unlock_irq ( & timeri -> lock ) ; mutex_unlock ( & timeri -> lock",0
648,"<S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6",0
649,"<S2SV_ModStart> ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config, ""io.va"", ( binobj -> info )? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config, ""bin.baddr"", baseaddr ) ; r_config_set_i ( r -> config, ""asm.bits"", bits ) ; r_config_set ( r -> config, ""anal.arch"", arch ) ; r_config_set ( r -> config, ""anal.cpu"", * info -> cpu ) ; r_asm_use ( r -> assembler, arch ) ; r_core_bin_info ( r, R_CORE_BIN_ACC_ALL, R_CORE_BIN_SET, va, NULL, NULL ) ; r_core_bin_set_cur ( r, binfile ) ; return true ; } <S2SV_ModEnd> return false ;",0
650,"<S2SV_ModStart> void sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart> * dev, * n ; list_for_each_entry_safe ( dev, n, & port -> dev_list, disco_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_add_tail ( & dev -> dev_list_node, & port -> dev_list ) ; spin_unlock_irq ( & port -> dev_list_lock ) ; } sas_probe_sata ( port ) ; list_for_each_entry_safe ( dev, n, & port -> disco_list, disco_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_add_tail ( & dev -> dev_list_node, & port -> dev_list ) ; spin_unlock_irq ( & port -> dev_list_lock ) ; sas_probe_sata ( port ) ; list_for_each_entry_safe ( dev, n, & port -> disco_list, disco_list_node ) { spin_",0
651,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
652,"<S2SV_ModStart> ; int pkt_len ; gchar line [ NETSCREEN_LINE_LENGTH + NETSCREEN_MAX_INT_NAME_LENGTH <S2SV_ModEnd> ] ; char <S2SV_ModStart> ; char line [ NETSCREEN_LINE_LENGTH + NETSCREEN_MAX_INT_NAME_LENGTH <S2SV_ModEnd> ] ; char <S2SV_ModStart> ; if ( pkt_len > NETSCREEN_MAX_INT_NAME_LENGTH ) return FALSE ; <S2SV_ModStart> ( wth -> frame_buffer, pkt_len, err, err_info ) ; if ( wth -> file_encap == WTAP_ENCAP_UNKNOWN ) wth -> file_encap = WTAP_ENCAP_UNKNOWN ; else if ( wth -> file_encap == WTAP_ENCAP_PER_PACKET ) { if ( wth -> file_encap == WTAP_ENCAP_UNKNOWN ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; else if ( wth -> file_encap == WTAP_ENCAP_PER_PACKET ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; else if ( wth -> file_encap == W",0
653,"<S2SV_ModStart> 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> processed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; <S2SV_ModStart> 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ;",0
654,<S2SV_ModStart> { int_fast32_t widthOverflow = ( gifFilePtr -> Image. Width * gifFilePtr -> Image. Width ) >> 3 ; int_fast32_t heightOverflow = ( gifFilePtr -> Image. Height * gifFilePtr -> Image. Height ) >> 3 ; if ( widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } else { int_fast32_t widthOverflow = ( gifFilePtr -> Image. Width * gifFilePtr -> Image. Height * gifFilePtr -> Image. Width ) >> 3 ; int_fast32_t heightOverflow = ( gifFilePtr -> Image. Height * gifFilePtr -> Image. Height ) >> 3 ; if ( widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } else { int_fast32_t widthOverflow = ( gifFilePtr -> Image. Width * gifFilePtr -> Image. Height * gifFilePtr -> Image. Width ) >> 3 ; int_fast32_t heightOverflow = ( gifFilePtr -> Image. Height * gif,0
655,"<S2SV_ModStart> can_read_key : if ( key -> state == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> ) { ret <S2SV_ModStart> EOPNOTSUPP ; } if ( key -> state == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> ) { ret <S2SV_ModStart> - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } else { ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } if ( ret == 0 ) { ret = - EOPNOTSUPP ; if ( key -> type -> read ) { ret = - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } } else { ret = - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = - EOPNOTSUP",0
656,"<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> & conn -> <S2SV_ModStart> user ) ) { ret = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; if ( size!= props -> user. len ) return ret_error ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) { LOG_ERROR ( CHEROKEE_ERROR_VALIDATOR_LDAP_SEARCH, props -> basedn. buf, LDAP_SCOPE_SUBTREE, props -> filter. buf, attrs, 0, & message ) ; if ( re!= 1 ) { ret = ret_not_found ; } dn =",0
657,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""Ins",0
658,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - 1 ; <S2SV_ModEnd> * val = <S2SV_ModStart> val = ( tmp & 0x7fffffff <S2SV_ModEnd> ) + 1,0
659,<S2SV_ModStart> ; break ; case RDS_CMSG_ATOMIC_FADD : rm -> atomic. op_m_fadd. add = args -> fadd. add ; rm -> atomic. op_m_fadd. nocarry_mask = args -> m_fadd. nocarry_mask ; break ; case RDS_CMSG_MASKED_ATOMIC_FADD : rm -> atomic. op_type = RDS_ATOMIC_TYPE_FADD ; rm -> atomic. op_m_fadd. add = args -> fadd. add ; rm -> atomic. op_m_fadd. nocarry_mask = args -> m_fadd. nocarry_mask ; break ; case RDS_CMSG_MASKED_ATOMIC_CSWP : rm -> atomic. op_type = RDS_ATOMIC_TYPE_CSWP ; rm -> atomic. op_m_cswp. compare = args -> cswp. compare ; rm -> atomic. op_m_cswp. swap = args -> cswp. swap ; rm -> atomic. op_m_cswp. nocarry_mask = args -> m_cswp. nocarry_,0
660,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
661,"<S2SV_ModStart> ( ""size <S2SV_blank> %zu <S2SV_blank> flags <S2SV_blank> 0x%x <S2SV_blank> timeo <S2SV_blank> %ld\\n"", size <S2SV_ModEnd>, msg_flags,",0
662,"<S2SV_ModStart> if ( snprintf ( spath, sizeof ( spath ), var, iface ) < 0 <S2SV_ModEnd> ) return -",0
663,"<S2SV_ModStart> 0 ) { const char * s = ++ s ; while ( isspace ( * s ) && <S2SV_ModStart> ) ) t ++ ; if ( * s == '/' ) { const char * t = ++ s ; while (! isspace ( * t ) ) t ++ ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; memcpy ( font_name, s, t - s ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; } } else if ( * s == '/' ) { const char * t = ++ s ; while (! isspace ( * t ) ) t ++ ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; memcpy ( font_name, s, t - s ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_",0
664,"<S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data ) ; <S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data ) ; mutt_hcache_delete ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ) ) ; mutt_hcache_store ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ), ctx -> hdrs [ i ], 0 ) ; } <S2SV_ModEnd> } # ifdef <S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data ) ; mutt_hcache_delete ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ) ) ; mutt_hcache_store ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ), ctx -> hdrs [ i ], 0 ) ; } # ifdef USE_HCACHE if ( ctx -> hdrs [ i",0
665,"<S2SV_ModStart> objp ) ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if ( p ) free ( p ) ; <S2SV_ModStart> objp ) ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p",0
666,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart> NULL, NULL )",0
667,"<S2SV_ModStart> return 1 ; if ( sk -> sk_state == DCCP_LISTEN ) { dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ; return 1 ; } <S2SV_ModStart> goto discard ; if ( sk -> sk_state == DCCP_REQUESTING && dh -> dccph_type == DCCP_PKT_RESPONSE ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( sk -> sk_state == DCCP_RESPOND && dh -> dccph_type == DCCP_PKT_DATA ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role!= DCCP_ROLE_SERVER && dh -> dccph_type == DCCP_PKT_REQUEST ) || ( dp -> dccps_role == DCCP_ROLE_SERVER && dh -> dccph_type == DCCP_PKT_RESPOND && dh -> dccph_type == DC",0
668,"<S2SV_ModStart> struct msixcap msixcap ; if ( msgnum < 1 || msgnum > MAX_MSIX_TABLE_ENTRIES ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> msix <S2SV_blank> table <S2SV_blank> index <S2SV_blank> %d\\n"", __func__, msgnum ) ; return - EINVAL ; } <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> msgnum ) ; pci_populate_msixcap ( & msixcap, barnum, tab_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; return ( pci_emul_add_capability ( dev, ( u_char * ) & msixcap, sizeof ( msixcap",0
669,"<S2SV_ModStart> ; upperdentry = d_find_upperdentry ( dentry ) ; if (! upperdentry ) { mutex_lock ( & upperdentry -> d_inode -> i_mutex ) ; err = notify_change ( upperdentry, attr, NULL ) ; mutex_unlock ( & upperdentry -> d_inode -> i_mutex ) ; } else { mutex_unlock ( & dentry -> d_inode -> i_mutex ) ; }",0
670,<S2SV_ModStart> while ( isspace ( ( unsigned char ) <S2SV_ModStart> p ) ) p ++ ; if ( p [ 0 ] == '/' && p [ 1 ] == 'u' && p [ 2 ] == 'p' ) return ( p [ 0 ] == 'd' && p [ 1 ] == 'u' && p [ 2 ] == 'p' || ( p [ 0 ] == 'd' && p [ 1 ] == 'u' && p [ 2 ] == 'p' ) ) ) return ( p [ 0 ] == 'd' && p [ 1 ] == 'u' && p [ 2 ] == 'p' || ( p [ 0 ] == 'd' && p [ 1 ] == 'u' && p [ 2 ] == 'p' ) || ( p [ 0 ] == 'd' && p [ 1 ] == 'u' && p [ 1 ] == 'p' && p [ 2 ] == 'p' ) ),0
671,"<S2SV_ModStart> ; if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; }",0
672,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
673,"<S2SV_ModStart> ; for ( i = 0 ; i < ctx -> hdrmax && <S2SV_ModStart> ++ ) { if ( i >= ctx -> hdrmax && ctx -> hdrs [ i ] -> data ) { mutt_debug ( 1, ""duplicate <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; ctx -> hdrmax -- ; ctx -> hdrs [ i ] -> data = mutt_str_strdup ( line ) ; } else if ( ctx -> hdrs [ i ] -> data ) { mutt_debug ( 1, ""duplicate <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; ctx -> hdrs [ i ] -> data = mutt_str_strdup ( line ) ; } else if ( i >= ctx -> hdrmax && ctx -> hdrs [ i ] -> data ) { mutt_debug ( 1, ""duplicate <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; } else if ( ctx -> hdrs [ i ] -> data ) { mutt_debug ( 1, ""duplicate <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; ctx -> hdrs [ i ] -> data = mutt_str_strdup (",0
674,"<S2SV_ModStart> NULL ) { pkiDebug ( ""No <S2SV_blank> valid <S2SV_blank> kdcPkId <S2SV_blank> in <S2SV_blank> AS <S2SV_blank> REQ\\n"" ) ; return retval ; } status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ; } retval = 0 ; if ( status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ; } retval = 0 ; <S2SV_ModEnd> cleanup : X509_NAME_free <S2SV_ModStart> 0 ; cleanup : if ( status ) { status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status )",0
675,<S2SV_ModStart> precno ++ ) { if ( precno >= reslevel -> num_precincts_x * reslevel -> num_precincts_y ) { av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> cblkincl ) ; av_freep ( & prec -> cblk ) ; } if ( precno >= reslevel -> num_precincts_x * reslevel -> num_precincts_y ) { if ( precno >= reslevel -> num_precincts_x * reslevel -> num_precincts_y ) { av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> cblkincl ) ; av_freep ( & prec -> cblk ) ; },0
676,<S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
677,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
678,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> lossless ) { const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> } else { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL || cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X,0
679,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
680,"<S2SV_ModStart> printval ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> break ; case CF_MINIMUM : printval = max ( printval, im -> gdes [ vidx ]. data [ ii ] ) ; <S2SV_ModStart> break ; case CF_MAXIMUM : printval = max ( printval, im -> gdes [ vidx ]. data [ ii ] ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> case CF_MAXIMUM : printval = max ( printval, im -> gdes [ vidx ]. data [ ii ] ) ; break ; case CF_MINIMUM : printval = min ( printval, im -> gdes [ vidx ]. data [ ii ] ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> break ; case CF_MAXIMUM : printval = max ( printval, im -> gdes [ vidx ]. data [ ii ] ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> case CF_MAXIMUM : printval = max ( printval, im -> gdes [ vidx ]. data [ ii ] ) ; break ; case CF_MINIMUM : printval = min ( printval, im -> gdes [ vidx ]. data [ ii ] ) <S2SV_ModEnd> ; break ;",0
681,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX <S2SV_ModStart> NULL ; } sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ),0
682,<S2SV_ModStart> ; if ( buf1 -> size > buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; },0
683,"<S2SV_ModStart> if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & dir ) ) == - 1 ) { expn = ""Cannot <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out3 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & dir ) ) == - 1 ) { expn = ""Cannot <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out4 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & dir ) ) == - 1 ) { expn = ""Cannot <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out5 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & dir ) ) == - 1 ) { expn = ""Cannot <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out4 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sat, & dir, & sst, & dir ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ;",0
684,"<S2SV_ModStart> ( * info ) + size ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY | __GFP_NORETRY ) ; if (! info ) { info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY | __GFP_NORETRY | __GFP_NORETRY ) ; if (! info ) return NULL ; } info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY | __GFP_NORETRY ) ; if (! info ) return",0
685,"<S2SV_ModStart> } } } if (! vars -> cnt ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Input <S2SV_blank> variables <S2SV_blank> exceeded <S2SV_blank> %"" PRIu64 "". <S2SV_blank> "" ""To <S2SV_blank> increase <S2SV_blank> the <S2SV_blank> limit <S2SV_blank> change <S2SV_blank> max_input_vars <S2SV_blank> in <S2SV_blank> php.ini."", max_vars ) ; return FAILURE ; }",0
686,<S2SV_ModStart> ; if ( protocol < 0 || protocol > AX25_P_MAX ) return - EINVAL,0
687,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
688,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val, false",0
689,"<S2SV_ModStart> list. name, true",1
690,"<S2SV_ModStart> secret, void * <S2SV_ModStart> * th ; <S2SV_ModEnd> int dlen ; <S2SV_ModStart> char is_enc ; struct ceph_crypto_key old_key ; void * tp, * tpend <S2SV_ModEnd> ; struct ceph_timespec <S2SV_ModStart> validity ; struct ceph_crypto_key new_session_key ; struct ceph_buffer * new_ticket_blob ; unsigned long new_expires, new_renew_after ; u64 new_secret_id ; int ret ; dlen = ceph_x_decrypt ( secret, p, end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } dlen = ceph_x_decrypt ( secret, p, end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( tkt_struct_v!= 1 ) { ret = dlen ; goto out ; } dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; dp = dbuf ; dend = dp + dlen ; tkt_struct_v = ceph_decode_8 ( & dp ) ; tkt_struct_",0
691,"<S2SV_ModStart> / 2 ; if ( count > SIZE_MAX / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, ( int ) ( SIZE_MAX / sizeof ( Pairs ) ) ) )",0
692,<S2SV_ModStart> rq ) ; prev -> se. on_rq = 0 ;,0
693,"<S2SV_ModStart> -> tlsext_tick_lifetime_hint ) ; if (! s -> session -> tlsext_tick ) { al = SSL_AD_DECODE_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, SSL_R_LENGTH_MISMATCH ) ; goto f_err ; }",0
694,"<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ), TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ), TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ), TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ), TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ), TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ), TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ), TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ), TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ), TEMP_FAILURE_RETRY (",0
695,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
696,"<S2SV_ModStart> ; return ( * field_rtrn!= NULL ) ; case EXPR_ARRAY_REF : * elem_rtrn = NULL ; * field_rtrn = xkb_atom_text ( ctx, expr -> array_ref. element ) ; * field_rtrn = xkb_atom_text ( ctx, expr -> array_ref. field ) ; * index_rtrn = xkb_atom_text ( ctx, expr -> array_ref. entry ) ; return ( * field_rtrn!= NULL ) ; case EXPR_NULL : * elem_rtrn = NULL ; * field_rtrn = xkb_atom_text ( ctx, expr -> ident. ident ) ; * field_rtrn = xkb_atom_text ( ctx, expr -> ident. field ) ; * index_rtrn = NULL ; return ( * field_rtrn!= NULL ) ; case EXPR_IDENT : * elem_rtrn = NULL ; * field_rtrn = xkb_atom_text ( ctx, expr -> ident. ident ) ; * field_rtrn = xkb_atom_text ( ctx,",0
697,<S2SV_ModStart> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),0
698,"<S2SV_ModStart>, end_col_offset ; if ( TYPE ( CHILD ( n, name_i + 1 ) ) == TYPE_COMMENT ) { return NULL ; } <S2SV_ModStart> += 2 ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) { type_comment ( CHILD ( n, name_i + 3 ) ) ; body = ast_for_comment ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; } else { get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; name_i += 2 ; } if ( TYPE ( CHILD ( n, name_i + 4 ) ) == TYPE_COMMENT ) { type_comment ( CHILD ( n, name_i + 4 ) ) ; body = ast_for_comment ( c, CHILD ( n, name_i + 4 ) ) ; if (! body ) return NULL ; type_comment ( c, CHILD ( n,",0
699,<S2SV_ModStart> ; int err ; mutex_lock ( & sock -> sk_wmem_lock ) ; <S2SV_ModStart> = 0 ; mutex_unlock ( & sock -> sk_wmem_lock,0
700,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
701,"<S2SV_ModStart> ; lock_sock ( sk ) ; if ( sk -> sk_state!= SS_UNCONNECTED ) { err = - ENOTCONN ; goto out ; } if ( flags & MSG_OOB ) { err = - EOPNOTSUPP ; goto out ; } if ( sk -> sk_state!= SS_CONNECTED ) { if ( sock_flag ( sk, SOCK_DONE ) ) err = - ENOTCONN ; goto out ; } if ( sk -> sk_state!= SS_UNCONNECTED ) { if ( sock_flag ( sk, SOCK_DONE ) ) err = - ENOTCONN ; goto out ; } if ( flags & MSG_TRUNC ) { msg -> msg_flags |= MSG_TRUNC ; msg -> msg_namelen = sizeof ( msg -> msg_name ) ; msg -> msg_namelen = sizeof ( msg -> msg_name ) ; msg -> msg_namelen = sizeof ( msg -> msg_name ) ; msg -> msg_namelen = sizeof ( msg -> msg_name ) ; msg -> msg_namelen = sizeof ( msg -> msg_name ) ; msg -> msg_namelen = sizeof ( msg -> msg_namel",0
702,"<S2SV_ModStart> { if ( my_sscanf <S2SV_ModEnd> ( l_line, <S2SV_ModStart> == 3 ) { if ( my_sscanf <S2SV_ModEnd> ( l_line, <S2SV_ModStart> == 3 ) { if ( my_sscanf <S2SV_ModEnd> ( l_line, <S2SV_ModStart> == 3 ) { if ( my_sscanf <S2SV_ModEnd> ( l_line, <S2SV_ModStart> == 3 ) { if ( my_sscanf <S2SV_ModEnd> ( l_line, <S2SV_ModStart> == 3 ) { if ( my_sscanf <S2SV_ModEnd> ( l_line, <S2SV_ModStart> == 3 ) { if ( my_sscanf <S2SV_ModEnd> ( l_line, <S2SV_ModStart> == 3 ) { if ( my_sscanf <S2SV_ModEnd> ( l_line, <S2SV_ModStart> == 3 ) { if ( my_sscanf <S2SV_ModEnd> ( l_line, <S2SV_ModStart> == 3 ) { if ( my_sscanf <S2SV_ModEnd> ( l_line, <S2SV_ModStart> == 3 ) { if ( my_sscanf <S2SV_ModEnd> ( l_line, <S2SV_ModStart> == 3 ) { if ( my_sscanf <S2SV_ModEnd> ( l_line, <S2SV_ModStart> == 3 ) { if ( my_sscanf <S2SV_ModEnd> ( l_line, <S2SV_ModStart> == 3 ) { if ( my_sscanf <S2SV_ModEnd> ( l_line, <S2SV_ModStart> == 3 ) {",0
703,<S2SV_ModStart> ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
704,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,1
705,,1
706,<S2SV_ModStart> 0 ) ; if (! res ) return - ENODEV ; <S2SV_ModEnd> freq_reg += HI3660_STUB_CLOCK_DATA,0
707,"<S2SV_ModStart> case SEEK_SET : psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; case <S2SV_ModStart> case SEEK_CUR : psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; } ; <S2SV_ModStart> case SEEK_END : psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; <S2SV_ModEnd> } ; case <S2SV_ModStart> case SEEK_CUR : psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; case SEEK_SET : psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; case SEEK_SET : psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; case SEEK_SET : psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; case SEEK_CUR :",0
708,"<S2SV_ModStart> out_mutex ; } if ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) { ret = - EOPNOTSUPP ; goto out_mutex ; } <S2SV_ModStart> ioffset ) ; ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; handle = ext4_journal_start ( inode, EXT4_HT_TRUNCATE, credits ) ; if ( IS_ERR ( handle ) ) { ret = PTR_ERR ( handle ) ; goto out_mutex ; } if ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) { ret = - EOPNOTSUPP ; goto out_mutex ; } if ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) { ret = - EOPNOTSUPP ; goto out_mutex ; } if ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) { ret = - EOPNOTSUPP ; goto out_mutex ; } if (",0
709,"<S2SV_ModStart> uint32_t track_size ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; }",0
710,"<S2SV_ModStart> |= SOCK_SNDBUF_LOCK ; sk -> sk_sndbuf = min_t ( u32, <S2SV_ModEnd> val * 2 <S2SV_ModStart> val * 2, SOCK_MIN_SNDBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_RCVBUF : val = min_t ( u32, val, sysctl_rmem_max ) ; set_rcvbuf : sk -> sk_userlocks |= SOCK_RCVBUF_LOCK ; sk -> sk_rcvbuf = max_t ( u32, <S2SV_ModEnd> val * 2 <S2SV_ModStart> val * 2, SOCK_MIN_RCVBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_RCVBUFSIZE : val = min_t ( u32, val, sysctl_rmem_max ) ; set_rcvbuf : sk -> sk_userlocks |= SOCK_RCVBUF_LOCK ; sk -> sk_rcvbuf = max_t ( u32, <S2SV_ModEnd> val * 2 <S2SV_ModStart> val * 2, SOCK_MIN_RCVBUF ) ; sk -> sk_rcvbuf = max_t ( u",0
711,"<S2SV_ModStart> * bh ; uint32_t mapTableLength ; <S2SV_ModStart> TAG_IDENT_LVD ) ; mapTableLength = le32_to_cpu ( lvd -> mapTableLength ) ; for ( i = 0 ; i < sbi -> s_partitions && offset < mapTableLength ; i ++, offset += gpm -> partitionMapLength ) { struct udf_part_map * map = & sbi -> s_partmaps [ i ] ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gpm1 -> partitionNum ) ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gpm1 -> partitionNum ) ; map -> s",0
712,"<S2SV_ModStart> long n ; jas_eprintf ( ""invalid <S2SV_blank> option <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
713,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
714,<S2SV_ModStart> u4_ofst ) ; if ( ps_cabac -> u4_nxt_word > ps_cabac -> u4_range ) { return ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; },0
715,"<S2SV_ModStart> ; save_text_from_text_view ( <S2SV_ModEnd> g_tv_comment, FILENAME_COMMENT",0
716,"<S2SV_ModStart> media_pad_desc pad ; if ( entity -> num_pads > 1 ) { struct media_pad_desc pad ; if ( copy_to_user ( & links -> pads [ p ], & pad, sizeof ( pad ) ) ) return - EFAULT ; } } if ( links -> pads ) { struct media_pad_desc pad ; if ( entity -> num_pads > 1 ) { struct media_pad_desc pad ; if ( entity -> pads [ p ]. source -> entity!= entity ) continue ; media_device_kpad_to_upad ( & entity -> pads [ p ], & pad ) ; if ( copy_to_user ( & links -> pads [ p ], & pad, sizeof ( pad ) ) ) return - EFAULT ; } } if ( links -> links ) { struct media_link_desc link ; if ( entity -> links [ l ]. source -> entity!= entity ) continue ; media_device_kpad_to_upad ( & entity -> links [ l ]. source, & link. source ) ; media_device_kpad_to_upad ( & entity -> links [ l ]. sink",0
717,<S2SV_ModStart> -> indent ; if ( line -> indent > 0 ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; } else { line -> type = MD_LINE_EMPTY ; ctx -> last_line_has_list_loosening_effect = 0 ; },0
718,"<S2SV_ModStart>, extent ; size_t <S2SV_ModEnd> width, height <S2SV_ModStart> height, length ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
719,"<S2SV_ModStart> client, krb5_enctype krbtgt_etype <S2SV_ModEnd>, hdb_entry_ex * <S2SV_ModStart> client_principal, krbtgt, krb5_enctype krbtgt_etype <S2SV_ModEnd>, const krb5_principals <S2SV_ModStart> trpolicy == TRPOLICY_ALWAYS_CHECK ) # define GLOBAL_ALLOW_PER_PRINCIPAL ( config -> trpolicy == TRPOLICY_ALLOW_PER_PRINCIPAL ) # define GLOBAL_ALLOW_DISABLE_TRANSITED_CHECK ( config -> trpolicy == TRPOLICY_ALLOW_PER_PRINCIPAL ) # define GLOBAL_ALLOW_DISABLE_TRANSITED_CHECK ( config -> trpolicy == TRPOLICY_ALWAYS_CHECK ) # define GLOBAL_ALLOW_PER_PRINCIPAL ( config -> trpolicy == TRPOLICY_ALLOW_PER_PRINCIPAL ) # define GLOBAL_ALLOW_DISABLE_TRANSITED_CHECK ( config -> trpolicy == TRPOLICY_ALLOW_DISABLE_TRANSITED_CHECK ) # define GLOBAL_ALLOW_PER_PRINCIPAL ( config -> trpolicy == TRPOLICY_ALLOW_PER_PRINCIPAL ) # define GLOBAL_ALLOW_",0
720,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
721,"<S2SV_ModStart> -> loc_addr ; ireq -> opt. opt = NULL ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> inet_id = jiffies ; dccp_sync_mss ( newsk, dst_mtu ( dst ) ) ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> mc_id = jiffies ;",0
722,<S2SV_ModStart> struct xmlparser parser ; data -> xml_start = buffer ; data -> xmlsize = bufsize ; parser. xml_end = buffer ; parser. xml_starteltfunc = NameValueParserEndElt ; parser. xml_starteltfunc = NameValueParserStartElt ; parser. xmlsize = bufsize ; parser. <S2SV_ModStart> = NameValueParserGetData ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
723,"<S2SV_ModStart> CHECKSUM_COMPLETE ) return ; skb -> csum = csum_partial ( skb_transport_header ( skb ) + tlen, <S2SV_ModEnd> offset, 0 <S2SV_ModStart> 0 ) ) ; if ( msg -> msg_namelen == 0 ) { put_cmsg ( msg, SOL_IP, IP_CHECKSUM, sizeof ( __wsum ), & csum ) ; } else { put_cmsg ( msg, SOL_IP, IP_CHECKSUM, sizeof ( __wsum ), & csum ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
724,"<S2SV_ModStart> pfn ) ; r = - EINVAL ; goto unmap_pages <S2SV_ModEnd> ; } gfn <S2SV_ModStart> unmap_pages : if ( r ) { printk ( KERN_ERR ""kvm_iommu_map_address:"" ""iommu <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> map <S2SV_blank> pfn=%llx\\n"", pfn ) ; r = - EINVAL ; goto unmap_pages <S2SV_ModEnd> ; } gfn <S2SV_ModStart> ; unmap_pages : if ( r ) { printk ( KERN_ERR ""kvm_iommu_map_address:"" ""iommu <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> map <S2SV_blank> pfn=%llx\\n"", pfn ) ; r = - EINVAL ; goto unmap_pages <S2SV_ModEnd> ; } gfn <S2SV_ModStart> ; unmap_pages : if ( r ) { printk ( KERN_ERR ""kvm_iommu_map_address:"" ""iommu <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> unmap <S2SV_blank> pfn=%llx\\n"", pfn ) ; r = - EINVAL ; goto unmap_pages <S2SV_ModEnd> ; } gfn",0
725,"<S2SV_ModStart> ; memcpy ( & b [ 0 ], cmd -> msg, cmd -> msg_len ) ; state -> config -> send_command ( fe, 0x72, sizeof ( b ) - ( 6 - cmd -> msg_len ), b, NULL, NULL ) ;",0
726,<S2SV_ModStart> perf_event_context * ctx ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> event ) ; perf_event_ctx_unlock <S2SV_ModEnd> ( event ),0
727,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] ) ; return ( <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] ) ; return ( <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; },0
728,"<S2SV_ModStart> ; struct free_nid <S2SV_ModEnd> * i ; <S2SV_ModStart> ; int err <S2SV_ModEnd> ; if ( <S2SV_ModStart> return false ; <S2SV_ModEnd> i = f2fs_kmem_cache_alloc <S2SV_ModStart> GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) { spin_lock ( & nm_i -> nid_list_lock ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; radix_tree_preload_end ( ) ; if ( err ) { kmem_cache_free ( free_nid_slab, i ) ; return true ; } spin_lock ( & nm_i -> nid_list_lock ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm_i",0
729,<S2SV_ModStart> ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) ; flags -> <S2SV_ModStart> noise_level ; # if CONFIG_POSTPROC_VISUALIZER flags -> display_ref_frame_flag = ctx -> dbg_color_ref_frame_flag ; flags -> display_mb_modes_flag = ctx -> dbg_color_mb_modes_flag ; flags -> display_b_modes_flag = ctx -> dbg_color_b_modes_flag ; flags -> display_mv_flag = ctx -> dbg_display_mv_flag ; # endif } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
730,"<S2SV_ModStart> 0 ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; return - EBADR ; } memcpy ( & extra, RING_GET_REQUEST ( & vif -> tx, cons ), sizeof ( extra ) ) ; if ( unlikely ( extra. flags & XEN_NETIF_EXTRA_FLAG_MORE ) ) { netdev_err ( vif -> dev, ""Invalid <S2SV_blank> extra <S2SV_blank> flags: <S2SV_blank> %d\\n"", extra. flags ) ; return - EINVAL ; } memcpy ( & extras [ extra. type - 1 ], & extra, sizeof ( extra ) ) ;",0
731,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ;,1
732,<S2SV_ModStart> ) return ; if ( tu -> flags & SNDRV_TIMER_FLAG_TIMED_OUT ) { if ( tu -> flags & SNDRV_TIMER_FLAG_TIMED_OUT ) { if ( tu -> flags & SNDRV_TIMER_FLAG_TIMED_OUT ) tu -> flags &= ~ SNDRV_TIMER_FLAG_TIMED_OUT ; r1. tstamp = * tstamp ; r1. val = resolution ; } else if ( tu -> flags & SNDRV_TIMER_FLAG_TIMED_OUT ) { if ( tu -> flags & SNDRV_TIMER_FLAG_TIMED_OUT ) { if ( tu -> flags & SNDRV_TIMER_FLAG_TIMED_OUT ) tu -> flags &= ~ SNDRV_TIMER_FLAG_TIMED_OUT ; r1. tstamp = * tstamp ; r1. val = resolution ; } else if ( tu -> flags & SNDRV_TIMER_FLAG_TIMED_OUT ) { if ( tu -> flags & SNDRV_TIMER_FLAG_TIMED_OUT,0
733,"<S2SV_ModStart> - 1 ; luaL_checkstack ( L, 1, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; <S2SV_ModStart> 1, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; switch ( * fmt ) { case * fmt ++ ; size_t size = optsize ( L, opt, & fmt ) ; pos += gettoalign ( pos, & h, size ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_checkstack ( L, 1, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; switch ( opt ) { case 'b' : case 'B' : case 'B' : case 'H' : case 'H' : case 'L' : case 'T' : case 'I' : { lua_Number res = getinteger ( data + pos, h. endian, issigned, size ) ; lua_pushnumber ( L, res ) ; break ; } case 'x' : { float f ; memcpy ( & f, data + pos, size ) ; correctbytes ( ( char * ) & f, sizeof ( f ), h. endian ) ; lua_pushnumber ( L, f",0
734,"<S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg6 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; ND_PRINT ( ( ndo, ""OLSR",0
735,"<S2SV_ModStart> ; int n ; if ( len < sizeof ( struct oz_multiple_fixed ) + 1 ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; return ; } <S2SV_ModEnd> n = ( <S2SV_ModStart> + 1 ) / body -> unit_size ; while ( n -- ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } } break ; case OZ_DATA_F_ISOC_FIXED : { struct oz_isoc_fixed * body = ( struct oz_isoc_fixed * ) data_hdr ; int data_len = len - sizeof ( struct oz_isoc_fixed ) + 1 ; int count ; int i ; if (! unit_size ) break ; count = data_len / unit_size ; for ( i = 0 ; i < count ; i ++ ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, data_len ) ; data += data_len ; }",0
736,"<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> ; # if CONFIG_TEMPORAL_DENOISING vpx_usec_timer_start ( & timer ) ; if ( cpi -> oxcf. lag_in_frames < 2 ) { assert ( cpi -> oxcf. lag_in_frames < 2 ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; } else { assert ( cpi -> oxcf. lag_in_frames < 2 ) ; dealloc_raw_frame_buffers ( cpi ) ; } if ( vp8_lookahead_push ( cpi -> lookahead, sd, time_stamp, end_time, frame_flags, cpi -> active_map_enabled? cpi -> active_map : NULL ) ) res = - 1 ; vpx_usec_timer_mark ( & timer ) ; cpi -> time_receive_data += vpx_usec_timer_elapsed ( & timer ) ; cpi -> time_receive_data += vpx_usec_timer_elapsed ( & timer ) ;",0
737,"<S2SV_ModStart> ) ) { int rv = copy_file_as_user ( src, dest, getuid ( ), getgid ( ) ) ; if ( rv ) fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> link <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> link <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_",0
738,<S2SV_ModStart> IMAP_FATAL ; return ; } if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { idata -> status = IMAP_FATAL ; return ; } if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { idata -> status = IMAP_FATAL ; return ; } mailbox = idata -> buf ; s = mailbox + litlen ; SKIPWS ( s ) ; },0
739,"<S2SV_ModStart> return res ; if ( dev -> dev_type == SAS_END_DEVICE ) { sas_discover_event ( dev -> port, DISCE_PROBE ) ; return 0 ; } if ( dev -> dev_type == SAS_END_DEVICE ) { sas_discover_event ( dev -> port, DISCE_PROBE ) ; return 0 ; } if ( dev -> dev_type == SAS_END_DEVICE ) { sas_discover_event ( dev -> port, DISCE_PROBE ) ; if ( dev -> dev_type == SAS_END_DEVICE ) { sas_discover_event ( dev -> port, DISCE_PROBE ) ; return 0 ; } if ( dev -> dev_type == SAS_END_DEVICE ) { sas_discover_event ( dev -> port, DISCE_UNPROBE ) ; return 0 ; } if ( dev -> dev_type == SAS_END_DEVICE ) { sas_discover_event ( dev -> port, DISCE_UNPROBE ) ; return 0 ; } if ( dev -> dev_type == SAS_END_DEVICE ) { sas_discover_event ( dev -> port, DISCE_PRO",0
740,"<S2SV_ModStart> ; if ( depth >= EXT_MAX_EXTENT ( path [ depth ]. p_hdr ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if (",0
741,<S2SV_ModStart> 3 ) { memset <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> 3 ) { memcpy <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> 3 ) { memcpy <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> 3 ) { memcpy <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> 3 ) { memcpy <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> 3 ) { memcpy <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> 3 ) { memcpy <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> 3 ) { memcpy <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> 3 ) { memcpy <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> 3 ) { memcpy <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> 3 ) { memcpy <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> 3 ) { memcpy <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> 3 ) { memcpy <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> 3 ) { memcpy <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> 3 ) { memcpy <S2SV_ModEnd> ( ptr_hbe_txposer ->,0
742,"<S2SV_ModStart> [ 2 ] ; image_w = get_ushort ( & tga [ 5 ] ) ; image_h = get_ushort ( & tga [ 7 ] ) ; pixel_depth = tga [ 4 ] ; * bits_per_pixel = ( unsigned int ) image_w ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if ( id == 0 ) { fprintf ( stderr, ""tga_readheader: <S2SV_blank> memory <S2SV_blank> out\\n"" ) ; return 0 ; } if (! fread ( id, id_len, 1, fp )!= 1 ) { fprintf ( stderr, ""\\nError: <S2SV_blank> fread <S2SV_blank> return <S2SV_blank> a <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> different <S2SV_blank> from <S2SV_blank> the <S2SV_blank> expected.\\n"" ) ; return 0 ; } if (! fread ( id, id_len, 1, fp )!= 1 ) { fprintf ( stderr, ""\\nError: <S2SV_blank> fread <S2SV_blank> return <S2SV_blank> a <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> different <S2SV_blank> from <S2SV_blank> the <S2SV_blank> expected.\\n",0
743,<S2SV_ModStart> ssize_t ret ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) return - EPERM,0
744,"<S2SV_ModStart> tp ) { struct timespec old ; <S2SV_ModStart> ; if ( CPUCLOCK_WHICH ( which_clock ) == CPUCLOCK_SCHED ) { old = div_u64_rem ( cpu. sched, NSEC_PER_SEC, & tp -> tv_sec ) ; if ( old ) { cputime_to_timespec ( & old -> cpu, tp ) ; } else { cputime_to_timespec ( & cpu. cpu, tp ) ; } } else { cputime_to_timespec ( & cpu. cpu, tp ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
745,<S2SV_ModStart> tif_dir ; uint32 <S2SV_ModEnd> nstrips ; if,0
746,"<S2SV_ModStart> lua_module ) ; lua_authz_provider_spec_t <S2SV_ModEnd> * prov_spec = <S2SV_ModStart> r ) ; luaL_checkstack ( L, prov_spec -> args -> nelts ) ; if ( lua_checkstack ( L, prov_spec -> args -> nelts ) ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; } lua_getglobal ( L, spec -> function_name ) ; if (! lua_isfunction ( L, - 1 ) ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank>",0
747,"<S2SV_ModStart> * prev ; unsigned long stack_guard_gap ; <S2SV_ModStart> address & PAGE_MASK ; stack_guard_gap = ( vma -> vm_flags & VM_GROWSDOWN )? ( vma -> vm_flags & VM_GROWSDOWN ) : ( vma -> vm_flags & VM_WRITE | VM_READ | VM_EXEC ) ; if ( error ) return error ; prev = vma -> vm_prev ; if (! ( prev -> vm_flags & VM_GROWSDOWN ) && ( prev -> vm_flags & VM_WRITE | VM_READ | VM_EXEC ) ) { if ( address - vma -> vm_start < stack_guard_gap ) return - ENOMEM ; grow = ( vma -> vm_end - address ) >> PAGE_SHIFT ; if ( grow <= vma -> vm_pgoff ) { spin_lock ( & mm -> page_table_lock ) mm -> locked_vm += grow ; vm_stat_account ( mm, vma -> vm_flags, grow ) ; anon_vma_interval_tree_pre_update_vma ( vma ) ; anon_vma_interval_tree_post_update_",0
748,"<S2SV_ModStart> { umode_t mode ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart> & mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> error = xfs_set_mode <S2SV_ModStart> error ; } <S2SV_ModEnd> set_acl : return",0
749,"<S2SV_ModStart> int optional, <S2SV_ModEnd> struct statvfs sb <S2SV_ModStart> # endif if ( mount ( fsname, target, fstype, mountflags & ~ MS_REMOUNT, data ) ) { INFO ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target, strerror ( errno ) ) ; return 0 ; } if ( mount ( fsname, target, fstype, mountflags & ~ MS_BIND, data ) ) { INFO ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target ) ; return 0 ; } if ( ( mountflags & MS_BIND ) && ( sb. f_flag & MS_RDONLY ) required_flags |= MS_RDONLY ; if ( sb. f_flag & MS_NOSUID ) required_flags |= MS_NOSUID ; if ( sb. f_flag & MS_NODEV ) required_flags |= MS_NODEV ; if ( sb. f_flag & MS_RDONLY ) required_flags |= MS_RDONLY ; if ( sb. f_flag &",0
750,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
751,<S2SV_ModStart> -> it_overrun = 0 <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> -> it_requeue_pending ; <S2SV_ModEnd> } unlock_timer (,0
752,<S2SV_ModStart> ; if ( proto_end == NULL || proto_end - url < 3,0
753,"<S2SV_ModStart> done, struct static_key <S2SV_ModEnd> * done_key ) <S2SV_ModStart> flags ) ; <S2SV_ModEnd> return true ;",0
754,<S2SV_ModStart> -> actual ; <S2SV_ModEnd> if ( io_data <S2SV_ModStart> -> ffs_eventfd &&! ( io_data -> kiocb -> ki_flags & IOCB_EVENTFD ) ) <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> io_data -> kiocb <S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
755,"<S2SV_ModStart> ; if ( IPCB ( skb ) -> opt. <S2SV_ModEnd> srr &&! <S2SV_ModStart> &&! skb_sec_path ( skb ) ) goto drop ; iph = ip_hdr ( skb ) ; rt = skb_rtable ( skb ) ; if ( rt -> rt_flags & RTCF_DOREDIRECT &&! opt -> srr && rt -> rt_flags & RTCF_DOREDIRECT &&! skb_sec_path ( skb ) ) ip_rt_send_redirect ( skb ) ; skb -> priority = rt_tos2priority ( iph -> tos ) ; skb -> priority = rt_tos2priority ( iph -> tos ) ; return NF_HOOK ( NF_INET_PRE_ROUTING, NF_INET_FORWARD, skb ) <S2SV_ModEnd> ; } <S2SV_null>",0
756,"<S2SV_ModStart> GLOBALS_ARE_RESET ( ) ; if ( e!= e ) { complete_v2_state_transition ( & dh -> md, e ) ; if ( dh -> md ) release_md ( dh -> md ) ; ikev2_parent_inR1outI2_tail ( pcrc, r ) ; return ; } if ( e!= e ) { complete_v2_state_transition ( & dh -> md, e ) ; if ( dh -> md ) release_md ( dh -> md ) ; ikev2_parent_inR1outI2_tail ( pcrc, r ) ; if ( dh -> md ) release_md ( dh -> md ) ; ikev2_parent_inR1outI2_tail ( pcrc, r ) ; return ; } if ( e!= e ) { complete_v2_state_transition ( & dh -> md, e ) ; if ( dh -> md ) release_md ( dh -> md ) ; release_md ( dh -> md ) ; ikev2_parent_inR1outI2_tail ( pcrc, r ) ; }",0
757,"<S2SV_ModStart> prep ) { struct trusted_key_options * new_o ; size_t datalen = prep -> datalen ; char * datablob = kmalloc ( datalen + 1, GFP_KERNEL ) ; if (! datablob ) return - ENOMEM ; memcpy ( datablob, prep -> data, datalen ) ; datablob [ datalen ] = '\\0' ; ret = datablob_parse ( datablob, new_p, new_o ) ; if ( ret!= Opt_update ) { ret = - EINVAL ; kfree ( new_p ) ; goto out ; } if (! new_o -> keyhandle ) { ret = - EINVAL ; kfree ( new_p ) ; goto out ; } new_p -> migratable = p -> migratable ; new_p -> key_len = p -> key_len ; memcpy ( new_p -> key, p -> key, p -> key_len ) ; dump_payload ( new_p ) ; dump_payload ( new_p ) ; dump_payload ( new_p ) ; dump_payload ( new_o ) ;",0
758,<S2SV_ModStart> } v |= ( uint_fast32_t ) <S2SV_ModEnd> c ; if,0
759,"<S2SV_ModStart> int lci_o ; mutex_lock ( & rose_loopback_queue_lock ) ; <S2SV_ModStart> 2 ] ; mutex_unlock ( & rose_loopback_queue_lock ) ; skb = skb_dequeue ( & loopback_queue ) ; while ( ( skb = skb_dequeue ( & loopback_queue ) )!= NULL ) { lci_i = ( ( skb -> data [ 0 ] << 8 ) & 0x0FF ) ; frametype = skb -> data [ 1 ] ; dest = ( rose_address * ) ( skb -> data + 4 ) ; lci_o = ROSE_DEFAULT_MAXVC + 1 - lci_i ; skb_reset_transport_header ( skb ) ; sk = rose_find_socket ( lci_o, rose_loopback_neigh ) ; if ( sk ) { if ( rose_process_rx_frame ( sk, skb ) == 0 ) kfree_skb ( skb ) ; continue ; } if ( frametype == ROSE_CALL_REQUEST ) { if ( ( dev = rose_dev_get ( dest )",0
760,"<S2SV_ModStart> old_memslots ) { kvm_iommu_unmap_pages ( kvm, old_memslots, mem -> guest_phys_addr, npages ) ; kvm_iommu_unmap_pages ( kvm, old_memslots, mem -> guest_phys_addr, npages ) ; kvm_iommu_unmap_pages ( kvm, old_memslots, mem -> guest_phys_addr, npages ) ; } <S2SV_ModEnd> r = - <S2SV_ModStart> r ) { kvm_iommu_unmap_pages ( kvm, old_memslots, mem -> guest_phys_addr, mem -> memory_size ) ; kvm_iommu_unmap_pages ( kvm, old_memslots, mem -> guest_phys_addr, npages ) ; kvm_iommu_unmap_pages ( kvm, old_memslots, mem -> guest_phys_addr, mem -> memory_size ) ; kvm_iommu_unmap_pages ( kvm, old_memslots, mem -> guest_phys_addr, mem -> memory_size ) ; kvm_iommu",0
761,<S2SV_ModStart> dev ) ; <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
762,"<S2SV_ModStart> fdt ) ; if ( base >= path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> nextoffset ; switch ( tag ) { case FDT_END_NODE : depth -- ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 >= path_len ) return - FDT_ERR_",0
763,"<S2SV_ModStart> if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
764,"<S2SV_ModStart> NULL ) { if ( EVP_EMPTY_ALGOR ( evp_md ) ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_EMPTY_ALGOR ) ; goto err ; }",0
765,"<S2SV_ModStart> ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; } else { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ) ) ; redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ) ) ; } else { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ) ) ; redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", list",0
766,"<S2SV_ModStart> ( options -> flags & UV_PROCESS_SETRESUID ) && setresuid ( options -> resuid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setresuid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETRESUID ) && setresuid ( options -> resuid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setresuid()"" ) ; _exit ( 127 ) ; } if ( options -> flags & UV_PROCESS_GETRESUID ) { uv__write_int ( error_fd, - errno ) ; perror ( ""getresuid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETRESUID ) && setresuid ( options -> resuid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setresuid()"" ) ; _exit ( 127 ) ; } if ( options -> flags & UV_PROCESS_GETRESUID ) { uv__write_int ( error_fd, - errno ) ; p",0
767,"<S2SV_ModStart> -> priv ; struct dvb_usb_device * dev = d -> usbdev ; <S2SV_ModStart> EOPNOTSUPP ; } if ( wbuf == NULL || wlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EINVAL ; } if ( rbuf == NULL || rlen == 0 ) { warn ( ""i2c <S2SV_blank> r: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EINVAL ; } mutex_lock ( & d -> data_mutex ) ; st -> data [ 0 ] = cmd ; memcpy ( & st -> data [ 1 ], wbuf, wlen ) ; if ( wo ) ret = dvb_usb_generic_write ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; else ret = dvb_usb_generic_rw ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; mutex_unlock ( & d -> data_mutex ) ; return ret <S2SV_ModEnd> ; } <S2SV_",0
768,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> set_description ( client,1
769,<S2SV_ModStart> - 1 ; if ( i + book -> dim > n ) return - 1 ;,0
770,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ;",0
771,<S2SV_ModStart> ; if ( btrfs_dir_item_is_readonly ( dir_item ) ) { ret = btrfs_check_dir_item_readonly ( dir_item ) ; if ( ret ) { ret = btrfs_check_dir_item_readonly ( dir_item ) ; if ( ret ) { ret = btrfs_check_dentry_readonly ( dir_item ) ; if ( ret ) { ret = btrfs_check_dentry_readonly ( dir_item ) ; } else if ( btrfs_dir_item_is_readonly ( dir_item ) ) { ret = btrfs_check_dentry_readonly ( dir_item ) ; if ( ret ) { ret = btrfs_check_dentry_readonly ( dir_item ) ; if ( ret ) { ret = btrfs_check_dentry_readonly ( dir_item ) ; if ( ret ) { ret = btrfs_check_dentry_readonly ( dir_item ) ; } else if ( btrfs_dir_item_is_readonly ( dir_item ) ) { ret = btrfs_check_dentry_readonly,0
772,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> s ) ; <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; unix_tot_inflight <S2SV_ModStart> -- ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
773,"<S2SV_ModStart> channel_map!= NULL ) { size_t chanmap_size = map_info -> num_channels * sizeof ( psf -> channel_map [ 0 ] ) ; if ( chanmap_size > sizeof ( psf -> channel_map [ 0 ] ) ) return SFE_MALLOC_FAILED ; <S2SV_ModStart> channel_map!= NULL ) { size_t chanmap_size = map_info -> num_channels * sizeof ( psf -> channel_map [ 0 ] ) ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; memcpy ( psf -> channel_map, map_info -> channel_map, chanmap_size",0
774,"<S2SV_ModStart> this_h ) { if ( check_scale_factors ( other_w, other_h, this_w, this_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if ( check_scale_factors ( other_w, other_h, this_w, this_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf )",0
775,<S2SV_ModStart> { int32_t nestsize ; if ( ms -> buffer_size_longs < size ) return GPMF_ERROR_BAD_STRUCTURE ;,0
776,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
777,"<S2SV_ModStart> ( e -> target_offset == sizeof ( struct ip6t_entry ) && <S2SV_ModStart> verdict < 0 && unconditional ( & e -> ipv6 ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target",0
778,"<S2SV_ModStart> -> xrefs = safe_calloc ( <S2SV_ModEnd> pdf -> n_xrefs <S2SV_ModStart> -> n_xrefs ) ; if (! pdf -> xrefs ) { ERR ( ""Failed <S2SV_blank> to <S2SV_blank> locate <S2SV_blank> the <S2SV_blank> startxref <S2SV_blank> token. <S2SV_blank> "" ""This <S2SV_blank> might <S2SV_blank> be <S2SV_blank> a <S2SV_blank> corrupt <S2SV_blank> PDF.\\n"" ) ; return - 1 ; }",0
779,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
780,"<S2SV_ModStart> ) ; opt = rcu_dereference_protected ( np -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> NULL ) ; rcu_assign_pointer ( np -> inet_opt, NULL ) ; <S2SV_ModStart> ( opt ) rcu_dereference_protected ( opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> ( opt ) rcu_assign_pointer ( np -> inet_opt, NULL ) ;",0
781,"<S2SV_ModStart> = 0 ; BIO * cmsbio = NULL, * tmpin = NULL ; if (! dcont && check_content ( cms ) ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_CONTENT_TYPE_MISMATCH ) ; goto err ; } cmsbio = tmpin ; if (! cmsbio ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_CONTENT_TYPE_MISMATCH ) ; goto err ; } for ( i = 0 ; i < sk_CMS_SignerInfo_num ( sinfos ) ; i ++ ) { si = sk_CMS_SignerInfo_value ( sinfos, i ) ; if ( si ) scount += CMS_set1_signers_certs ( cms, certs, flags ) ; if ( scount!= sk_CMS_SignerInfo_num ( sinfos ) ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_SIGNER_CERTIFICATE_NOT_FOUND ) ; goto err ; } if ( scount!= sk_CMS_SignerInfo_num ( sinfos ) ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_SIGNER_CERTIFICATE_",0
782,"<S2SV_ModStart> 0 ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> 0 ) { opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> 0 ) { opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; if ( opt!= NULL ) { atomic_set ( & sk -> sk_omem_alloc, 1 ) ; atomic_set ( & sk -> sk_omem_alloc, 1 ) ; } else { atomic_set ( & sk -> sk_omem_alloc, 1 ) ; } } <S2SV_ModEnd> break ; case <S2SV_ModStart> 0 ) { opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; if ( opt!= NULL ) { atomic_set ( & sk -> sk_omem_alloc, 1 ) ; atomic_set ( & sk -> sk_omem_alloc, 1 ) ; } else { atomic_set (",0
783,<S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ) ; sctp_protosw_exit <S2SV_ModEnd> ( ) ;,0
784,"<S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""dissector"", <S2SV_ModStart> cs_dissector ) ; service_named_bind_command <S2SV_ModEnd> ( ""dissector"", <S2SV_ModStart> cs_dissector ) ; service_named_bind_command <S2SV_ModEnd> ( ""dissector"", <S2SV_ModStart> cs_dissector ) ; service_named_bind_command ( ""dissector"", & dissector ) ; service_named_bind_command ( ""dissector"", & dissector ) ; service_named_bind_command ( ""dissector"", & dissector ) ; service_named_bind_command ( ""dissector"", & dissector ) ; service_named_bind_command ( ""dissector"", & dissector ) ; service_named_bind_command ( ""dissector"", & dissector ) ; service_named_bind_command ( ""dissector"", & dissector ) ; service_named_bind_command ( ""dissector"", & dissector )",0
785,"<S2SV_ModStart> ptr ) { <S2SV_ModEnd> struct netdev_notifier_info info <S2SV_ModStart> netdev_notifier_info info ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; <S2SV_ModStart> & info, dev ) ; if ( dev -> priv_flags & IFF_TX_SKB_SHARING ) return masq_device_event ( this, event, & info ) ; if ( dev -> priv_flags & IFF_TXSKB_SHARING ) return masq_device_event ( this, event, & info ) ; if ( dev -> priv_flags & IFF_TXSKB_SHARING ) return masq_device_event ( this, event, & info ) ; if ( dev -> priv_flags & IFF_TXSKB_SHARING ) return masq_device_event ( this, event, & info ) ; if ( dev -> priv_flags & IFF_TXSKB_SHARING ) return masq_device_event ( this, event, & info ) ; if ( dev -> priv_flags & IFF_TXSKB_SHARING ) return masq_device_event ( this",0
786,"<S2SV_ModStart> ; if (! mmget_still_valid ( mm ) ) { leave_mm ( smp_processor_id ( ) ) ; <S2SV_ModStart> ) ) ; } if ( ( end!= TLB_FLUSH_ALL ) &&! ( vmflag & VM_HUGETLB ) ) base_pages_to_flush = ( end - start ) >> PAGE_SHIFT ; if ( base_pages_to_flush > tlb_single_page_flush_ceiling ) { base_pages_to_flush = TLB_FLUSH_ALL ; count_vm_tlb_event ( NR_TLB_LOCAL_FLUSH_CEILING, base_pages_to_flush ) ; local_flush_tlb ( ) ; } else { base_pages_to_flush = ( end - start ) >> PAGE_SHIFT ; if ( base_pages_to_flush > tlb_single_page_flush_ceiling ) { base_pages_to_flush = TLB_FLUSH_ALL ; count_vm_tlb_event ( NR_TLB_LOCAL_FLUSH_CEILING, base_pages_to_flush )",0
787,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; return <S2SV_ModEnd> sse_to_psnr ( (,0
788,"<S2SV_ModStart> val ) { const char * temp = kmalloc ( sizeof ( temp ), GFP_KERNEL ) <S2SV_ModEnd> ; int i <S2SV_ModStart> ) { char * ret ; temp [ i ] = fgetc ( fp ) ; if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) { temp [ i ] = 0 ; ret = malloc ( strlen ( temp ) + 10 ) ; free ( temp ) ; return ret ; } switch ( temp [ i ] ) { case 0 : temp [ i ] = 0 ; ret = malloc ( strlen ( temp ) + 10 ) ; free ( temp ) ; return ret ; } temp [ i ] = 0 ; if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) { temp [ i ] = 0 ; ret = malloc ( strlen ( temp ) + 10 ) ; free ( temp ) ; return ret ; } if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) { temp [ i ] = 0 ; ret = malloc ( strlen ( temp ) + 10 ) ; free ( temp )",0
789,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
790,"<S2SV_ModStart> ) { dst_name = safe_calloc <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> 16 ) ) ; if (! dst_name ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; }",0
791,"<S2SV_ModStart> ; if ( addr_str_length > sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> in <S2SV_blank> receive <S2SV_blank> LLDP <S2SV_blank> PDU <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1 ; } <S2SV_ModStart> ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> in <S2SV_blank> receive <S2SV_blank> LLDP <S2SV_blank> PDU <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; if ( addr_str_length > sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> in <S2SV_blank> receive <S2SV_blank> LLDP <S2SV_blank> PDU <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1 ; } <S2SV_ModStart> ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> in <S2SV_blank> receive <S2SV_blank> LLDP <S2SV_blank> PDU <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; if ( addr_str_length > sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> in <S2SV_blank> receive <S2SV_blank> LLDP <S2SV_blank> PDU <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname",0
792,"<S2SV_ModStart> case BPLIST_TRUE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = TRUE ; data -> length = 1 ; return node_create ( NULL, data ) ; } case BPLIST_FALSE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = FALSE ; data -> length = 1 ; return node_create ( NULL, data ) ; } case BPLIST_TRUE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = TRUE ; data -> length = 1 ; return node_create ( NULL, data ) ; } case BPLIST_FALSE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = FALSE ; data -> length = 1 ; return node_create ( NULL, data ) ; } case BPLIST_ZERO : { plist_data_t data = plist_new_plist_",0
793,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> TRACE_DEBUG ( ""CIDER=0x%04"" <S2SV_ModStart> ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { memPoolFree ( context -> txBuffer ) ; memPoolFree ( context -> rxBuffer ) ; memPoolFree ( context -> txBuffer ) ; memPoolFree ( context -> rxBuffer ) ; return ERROR_OUT_OF_MEMORY ; } ksz8851WriteReg ( interface, KSZ8851_MARH, htons ( interface -> macAddr. w [ 0 ] ) ) ; ksz8851WriteReg ( interface, KSZ8851_MARM, htons ( interface -> macAddr. w [ 1 ] ) ) ; ksz8851WriteReg ( interface, KSZ8851_MARL, htons",0
794,<S2SV_ModStart> all_channels_lock ) ; <S2SV_ModEnd> wake_up_interruptible ( &,0
795,"<S2SV_ModStart> flags ) { struct btrfs_dir_item * di ; <S2SV_ModStart> - ENOMEM ; di = btrfs_lookup_dir_item ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } ret = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( ret ) goto out ; if (! di ) { ret = - ENODATA ; goto out ; } ret = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } ret = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } ret = btrfs_insert_xattr_item ( trans, root, path, btrfs_ino ( inode ), name, name_",0
796,"<S2SV_ModStart> ; if ( buf_len < 1 ) { ALOGE ( ""b/26366256"" ) ; return - 1 ; } <S2SV_ModStart> case WASM_OP_I64EQZ : case WASM_OP_I64EQ : case WASM_OP_I64NE : case WASM_OP_I64LTU : case WASM_OP_I64GTU : case WASM_OP_I64LEU : case WASM_OP_I64GEU : { ALOGE ( ""b/26366256"" ) ; return - 1 ; } <S2SV_ModStart> case WASM_OP_I64EQZ : case WASM_OP_I64EQ : case WASM_OP_I64EQ : case WASM_OP_I64LEU : case WASM_OP_I64GTS : case WASM_OP_I64GTU : case WASM_OP_I64GEU : { ALOGE ( ""b/26366256"" ) ; return - 1 ; } <S2SV_ModStart> case WASM_OP_I64EQZ : case WASM_",0
797,<S2SV_ModStart> client ) ; g_object_unref ( & client -> proxy ) ;,0
798,"<S2SV_ModStart>. skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
799,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY <S2SV_ModEnd> ; p = <S2SV_ModStart> 0 ) { pr_info ( ""trusted_key: <S2SV_blank> key <S2SV_blank> seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kzfree ( new_p ) ; goto out ; } ret = key_seal ( new_p, new_o ) ; if ( ret < 0 ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kzfree ( new_p ) ; goto out ; } ret = key_seal ( new_p, new_o ) ; if ( ret < 0 ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kzfree ( new_p ) ; goto out ; } ret = key_seal ( new_p, new_o ) ; if ( ret < 0 ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kzfree (",0
800,"<S2SV_ModStart> NEED_IP ( 1, <S2SV_ModEnd> HAVE_OP ( t <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> HAVE_IP ( t <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> HAVE_OP ( t <S2SV_ModStart> HAVE_IP ( t, <S2SV_ModEnd> HAVE_OP ( t <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> HAVE_OP ( t <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> HAVE_OP ( t <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> HAVE_OP ( t <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> HAVE_OP ( t <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> HAVE_IP ( t <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> HAVE_OP ( t <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> HAVE_OP ( t, <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> HAVE_OP ( t",0
801,"<S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; }",0
802,<S2SV_ModStart> len ) {vpn_packet_t <S2SV_ModEnd> outpkt ; outpkt,0
803,<S2SV_ModStart>! vmx_msr_bitmap_nested ) { r = - ENOMEM ; kvm_unregister_driver ( & vmx_msr_driver ) ; if ( r ) { kvm_unregister_driver ( & vmx_msr_driver ) ; kvm_unregister_driver ( & vmx_msr_driver ) ; kvm_unregister_driver ( & vmx_msr_driver ) ; } else { r = - ENOMEM ; kvm_unregister_driver ( & vmx_msr_bitmap_driver ) ; kvm_unregister_driver ( & vmx_msr_bitmap_driver ) ; if ( r ) { kvm_unregister_driver ( & vmx_msr_bitmap_driver ) ; kvm_unregister_driver ( & vmx_msr_bitmap_driver ) ; kvm_unregister_driver ( & vmx_msr_bitmap_driver ) ; kvm_unregister_driver ( & vmx_msr_bitmap_driver ) ; kvm_unregister_driver ( & vmx_msr_bitmap,0
804,"<S2SV_ModStart> 0 ) ; if ( ( shdr -> sh_size + 1 ) > SIZE_MAX ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( shdr -> sh_size + 1 ) > SIZE_MAX ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( shdr -> sh_size + 1 ) > SIZE_MAX ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( shdr -> sh_size + 1 ) > SIZE_MAX ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( shdr -> sh_size + 1 ) > SIZE_MAX ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; }",0
805,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ),0
806,<S2SV_ModStart> -> is_src_frame_alt_ref )? ( rc -> av_per_frame_bandwidth * rc -> baseline_gf_interval * ( rc -> baseline_gf_interval + af_ratio - 1 ) ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) : ( rc -> av_per_frame_bandwidth * rc -> baseline_gf_interval + af_ratio - 1 ) ; # else target = ( rc -> av_per_frame_bandwidth * rc -> baseline_gf_interval * ( rc -> baseline_gf_interval + af_ratio - 1 ) ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) ; # else target = rc -> av_per_frame_bandwidth <S2SV_ModEnd> ; # endif,0
807,"<S2SV_ModStart> i ++ ) { struct group * gr = getgrnam ( argv [ i ] ) ; if ( gr == NULL ) errx ( 1, ""%s: <S2SV_blank> Group <S2SV_blank> not <S2SV_blank> found"", ABUILD_GROUP ) ; if ( gr == NULL ) errx ( 1, ""%s: <S2SV_blank> Group <S2SV_blank> not <S2SV_blank> found"", ABUILD_GROUP ) ; } else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) { errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; if ( gr == NULL ) errx ( 1, ""%s: <S2SV_blank> group <S2SV_blank> name <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> member <S2SV_blank> of <S2SV_blank> group <S2SV_blank> %s\\n"", gr -> gr_name, gr -> gr_gid ) ; } else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; argv [ 0 ] = path ; setuid ( 0 ) ; setgid ( 0 ) ; execv ( path, ( char * const * ) argv ) ;",0
808,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
809,<S2SV_ModStart> INDENT_INCR ; } else if ( cmd == HTML_DT ) { if ( mode -> indent_level > 0 && mode -> indent_level <= MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; <S2SV_ModStart> -= INDENT_INCR ; },0
810,"<S2SV_ModStart> ; if ( sst -> sst_len < CDF_SEC_SIZE ( h ) * sst -> sst_len ) { DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> [%"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> > <S2SV_blank> %"" ) ; errno = EFTYPE ; return - 1 ; } } DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> > <S2SV_blank> %"" ) ; errno = EFTYPE ; return - 1 ;",0
811,<S2SV_ModStart> } # endif # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; <S2SV_ModStart> : # define YYSTACK ( N ) ( yyssp -= ( N ) ) int yylen = 0 ; <S2SV_ModStart> : # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; <S2SV_ModStart> : # define YYSTACK ( N ) ( yyssp -= ( N ) ) int yylen = 0 ; <S2SV_ModStart> : # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; <S2SV_ModStart> : # define YYSTACK ( N ) ( yyssp -= ( N ) ) int yylen = 0 ; <S2SV_ModStart> : # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; <S2SV_ModStart> : # define YYSTACK ( N ) ( yyssp -= ( N ) ) int yylen = 0 ; <S2SV_ModStart> : # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; # define YYSTACK ( N ) (,0
812,<S2SV_ModStart> ib ] ; dequant_ptr = d -> dequant ; coeff_ptr = d -> coeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; else rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; else rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; else rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; else rdmult = ( rdmult * 9 ) >> 4,0
813,"<S2SV_ModStart> FN_REFLEN ] ; if ( opt_basedir ) strncat ( buff, opt_basedir, sizeof ( buff ) - 1 ) ; else strncat ( buff, ""/"", sizeof ( buff ) - strlen ( buff ) - 1 ) ; # ifdef __WIN__ strncat ( buff, FN_DIRSEP, sizeof ( buff ) - strlen ( buff ) - 1 ) ; # else strncat ( buff, FN_DIRSEP, sizeof ( buff ) - strlen ( buff ) - 1 ) ; # endif",0
814,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) )",0
815,"<S2SV_ModStart> hci_filter * f ; if ( copy_to_user ( & uf, optval, sizeof ( uf ) ) ) err = - EFAULT ; else { uf. type_mask = * ( ( u32 * ) f -> type_mask + 0 ) ; uf. opcode = * ( ( u32 * ) f -> event_mask + 1 ) ; uf. event_mask [ 0 ] = * ( ( u32 * ) f -> event_mask + 0 ) ; uf. event_mask [ 1 ] = * ( ( u32 * ) f -> event_mask + 1 ) ; } else { uf. type_mask = f -> type_mask ; uf. opcode = f -> opcode ; uf. event_mask [ 0 ] = * ( ( u32 * ) f -> event_mask + 0 ) ; uf. event_mask [ 1 ] = * ( ( u32 * ) f -> event_mask + 1 ) ; } len = min_t ( unsigned int, len, sizeof ( uf ) ) ; if ( copy_to_user ( optval, & uf, len ) ) err = - EFAULT ;",0
816,"<S2SV_ModStart> int n = MIN ( <S2SV_ModStart> - data ) ; if ( n > 10 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; }",0
817,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
818,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
819,"<S2SV_ModStart> cleanup ; } status = aac_fib_map_sg ( dev, srbfib, sizeof ( struct aac_srb ), sg_list, sizeof ( struct aac_srb ) ) ; if ( status ) { dprintk ( ( KERN_INFO ""aacraid: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> copy <S2SV_blank> data <S2SV_blank> size <S2SV_blank> from <S2SV_blank> user\\n"" ) ) ; rcode = - EFAULT ; goto cleanup ; } if ( status ) { dprintk ( ( KERN_INFO ""aacraid: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> copy <S2SV_blank> data <S2SV_blank> size <S2SV_blank> from <S2SV_blank> user\\n"" ) ) ; rcode = - EFAULT ; goto cleanup ; } if ( status ) { dprintk ( ( KERN_INFO ""aacraid: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> copy <S2SV_blank> data <S2SV_blank> size <S2SV_blank> from <S2SV_blank> user\\n"" ) ) ; rcode = - EFAULT ; goto cleanup ; } if ( status ) { dprintk ( ( KERN_INFO ""aacraid: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> copy <S2SV_blank> data <S2SV_blank> size <S2SV_blank> from <S2SV_blank> user\\n"" ) ) ; rcode = - EFAULT ; goto cleanup",0
820,"<S2SV_ModStart> 0 ) ; if ( cc0 < rowsize ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""cc0 <S2SV_blank> must <S2SV_blank> be <S2SV_blank> %d <S2SV_blank> bytes"", ( int ) ( cc0 / rowsize ) ), ""cc0 <S2SV_blank> must <S2SV_blank> be <S2SV_blank> %d <S2SV_blank> bytes"", ( int ) ( cc0 / rowsize ) ) ; return 0 ; }",0
821,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> sk ) ; <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> goto out_unlock ; <S2SV_ModEnd> sctp_do_sm ( net <S2SV_ModStart> SCTP_EVENT_T_OTHER, SCTP_ST_OTHER ( SCTP_EVENT_ICMP_PROTO_UNREACH ), asoc -> state, asoc -> ep, asoc, transport, GFP_ATOMIC ) ; out_unlock : sctp_do_sm ( net, SCTP_EVENT_T_OTHER, SCTP_ST_OTHER ( SCTP_EVENT_ICMP_PROTO_UNREACH ), asoc -> state, asoc -> ep, asoc, transport, GFP_ATOMIC ) ; out_unlock : sctp_do_sm ( net, SCTP_EVENT_T_OTHER, SCTP_ST_OTHER ( SCTP_EVENT_ICMP_PROTO_UNREACH ), asoc -> state, asoc",0
822,"<S2SV_ModStart> input_data, size_t input_start, size_t input_end <S2SV_ModStart> # define ACTION_KILL_TAIL <S2SV_ModEnd> 3 # define <S2SV_ModStart> ; # define fail_if_error ( e ) { case ERROR_INSUFFICIENT_MEMORY : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } if ( _yr_re_alloc_storage ( & storage )!= ERROR_SUCCESS ) return - 2 ; if ( flags & RE_FLAGS_BACKWARDS ) { input -= character_size ; input_incr = - input_incr ; } max_bytes_matched = max_bytes_matched / character_size ; if ( flags & RE_FLAGS_BACKWARDS ) { input -= character_size ; input_incr = - input_incr ; } if ( flags & RE_FLAGS_BACKWARDS ) { input -= character_size ; input_incr = - input_incr ; } if ( flags & RE_FLAGS_BACKWARDS ) { input -= character_size ; input_incr = - input_incr ; } max_bytes_matched = max_bytes_matched",0
823,"<S2SV_ModStart> * returnrate, int * returndistortion, int * returnintra ) { BLOCK * b = & x -> block [ 0 ] ; BLOCKD * d = & x -> e_mbd. block [ 0 ] ; <S2SV_ModStart> INT_MAX, best_rd_sse = INT_MAX, <S2SV_ModEnd> zero_mv_sse = INT_MAX <S2SV_ModStart>, best_rd_sse = INT_MAX, <S2SV_ModEnd> zero_mv_sse = INT_MAX <S2SV_ModStart>, zero_mv_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart> INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart> = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, <S2SV_ModEnd> best_sse = INT_MAX <S2SV_ModStart> = INT_MAX ; <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best",0
824,"<S2SV_ModStart> svm, UD_VECTOR ) ; set_exception_intercept ( svm, MC_VECTOR ) ; set_intercept ( svm, INTERCEPT_INTR ) ; set_intercept ( svm, INTERCEPT_NMI ) ; set_intercept ( svm, INTERCEPT_SMI ) ; set_intercept ( svm, INTERCEPT_SELECTIVE_CR0 ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVLPG ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVLPG ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm,",0
825,<S2SV_ModStart> goto error ; if ( h -> hdr -> magic [ 0 ] == 'r' ) { h -> hdr -> magic [ 0 ] = 'r' ; h -> hdr -> magic [ 1 ] = 'e' ; h -> hdr -> magic [ 2 ] = 'e' ; h -> hdr -> magic [ 3 ] = 'e' ; } else { h -> hdr -> magic [ 0 ] = 'r' ; h -> hdr -> magic [ 1 ] = 'e' ; h -> hdr -> magic [ 2 ] = 'e' ; h -> hdr -> magic [ 3 ] = 'e' ; h -> hdr -> magic [ 4 ] = 'r' ; h -> hdr -> magic [ 5 ] = 'e' ; h -> hdr -> magic [ 6 ] = 'e' ; h -> hdr -> magic [ 7 ] = '0' ; },0
826,"<S2SV_ModStart> const cdf_stream_t * <S2SV_ModEnd> sst, const <S2SV_ModStart>, const uint64_t <S2SV_ModEnd> clsid [ 2 <S2SV_ModStart> break ; } if ( cdf_file_property_info ( ms, info, count, clsid ) == - 1 ) return - 2 ;",0
827,"<S2SV_ModStart> ; UWORD8 u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id ; UWORD16 i2_max_frm_num ; UWORD32 * pu4_bitstrm_buf = & ps_bitstrm -> u4_buffer ; UWORD32 * pu4_bitstrm_ofst = & ps_bitstrm -> u4_ofst ; UWORD32 u4_cropped_wd = 0 ; UWORD32 u2_frm_wd_y = 0 ; UWORD32 u2_frm_ht_uv = 0 ; UWORD32 u2_crop_offset_y = 0 ; UWORD32 u2_crop_offset_uv = 0 ; WORD32 u4_num_reorder_frames ; WORD32 i4_i ; UWORD8 u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_rect_left_ofst, u1_frame_cropping_rect_right_ofst, u1_frame_cropping_rect_top_ofst",0
828,<S2SV_ModStart> -> length ) ; if ( err ) return - EFAULT,1
829,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ; vpx_svc_parameters_t * const svc_params <S2SV_ModEnd> ; VP9_COMP * <S2SV_ModStart> * ) ; svc_params = <S2SV_ModEnd> va_arg ( args <S2SV_ModStart> ; if ( svc_params <S2SV_ModEnd> == NULL ) <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; <S2SV_ModEnd> cpi -> svc <S2SV_ModStart>. spatial_layer_id = svc_params -> spatial_layer ; <S2SV_ModEnd> cpi -> svc <S2SV_ModStart> temporal_layer ; cpi -> lst_fb_idx = svc_params -> lst_fb_idx ; cpi -> gld_fb_idx = svc_params -> gld_fb_idx ; cpi -> alt_fb_idx = svc_params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = svc_params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = svc_params -> min_quantizer ; set_encoder_config ( & ctx -> oxcf,",0
830,"<S2SV_ModStart> ; if ( fhdr -> frag_off & htons ( IP6_MF ) ) { if ( fq -> q. last_in & INET_FRAG_LAST_IN ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ) ; fq -> q. last_in |= INET_FRAG_LAST_IN ; } else { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ) ; fq -> q. last_in |=",0
831,"<S2SV_ModStart> out ) { <S2SV_ModEnd> copyFunc cf ; <S2SV_ModStart> uint16 input_compression, input_photometric ; if ( compression!= ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_COMPRESSION, compression ) ; else if ( compression == ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_COMPRESSION, compression ) ; else if ( compression == ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_COMPRESSION, compression ) ; else if ( compression == COMPRESSION_JPEG ) { uint16 subsamplinghor, subsamplingver ; TIFFGetFieldDefaulted ( in, TIFFTAG_YCBCRSUBSAMPLING, & subsamplinghor, & subsamplingver ) ; TIFFSetField ( out, TIFFTAG_JPEGCOLORMODE, & subsamplinghor ) ; TIFFSetField ( out, TIFFTAG_YCBCRSUBSAMPLING, & subsamplingver ) ; if ( subsamplinghor!= 1 || subsamplingver!= 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> copy/convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"", TIFFFileName ( in )",0
832,"<S2SV_ModStart> ) { int rc <S2SV_ModEnd> ; char * <S2SV_ModStart> = '\\0' ; rc = lstat ( a -> name, & st ) ; if ( rc!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( S_ISLNK ( st. st_mode ) ) { if ( c == '\\0' ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ;",0
833,"<S2SV_ModStart> ) ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL )!= 0 ) { SYSERROR ( ""Failed <S2SV_blank> mount <S2SV_blank> mounting <S2SV_blank> device <S2SV_blank> %s <S2SV_blank> from <S2SV_blank> host <S2SV_blank> into <S2SV_blank> container"", d -> name ) ; return - 1 ; } } umask ( cmask ) ; INFO ( ""Populated <S2SV_blank> container <S2SV_blank> /dev"" ) ;",0
834,"<S2SV_ModStart> sbi ) ; <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if (! ie ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( ident == TAG_IDENT_IE ) { struct buffer_head * nbh = NULL ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if ( ie -> indirectICB. extLength && ( nbh = udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ) { if ( ident == TAG_IDENT_FE || ident == TAG_IDENT_EFE ) { memcpy ( & iinfo -> i_location",0
835,"<S2SV_ModStart> -> tx_size ; const int filter_level = get_filter_level ( lfi_n, mbmi, shift_y, shift_uv ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint64_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx",0
836,"<S2SV_ModStart> dst_size ) { const <S2SV_ModStart> data < data_end? ff_amf_tag_size ( data, data_end ) : - 1 ; <S2SV_ModStart> data < data_end? ff_amf_tag_size ( data, data_end ) : - 1 ; data += len ; } if ( data_end - data < 3 ) return - 1 ; data += 3 ; for ( ; ; ) { int size = bytestream_get_be16 ( & data ) ; if (! size ) break ; if ( size == namelen &&! memcmp ( data - size, name, namelen ) ) { switch ( * data ++ ) { case AMF_DATA_TYPE_NUMBER : snprintf ( dst, dst_size, ""%g"", av_int2double ( AV_RB64 ( data ) ) ) ; break ; case AMF_DATA_TYPE_BOOL : snprintf ( dst, dst_size, ""%s"", * data? ""true"" : ""false"" ) ; break ; case AMF_DATA_TYPE_STRING : len = ff_amf_tag_size ( data, data_end ) ; if ( len < 0 )",0
837,"<S2SV_ModStart> mq_ops ) { list_for_each_entry_safe ( rq, n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; WARN_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error ) ; } if ( q -> mq_ops ) spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ; fq -> flush_running_idx ^= 1 ; if (! q -> mq_ops ) spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ; flush_rq -> tag = - 1 ; } else { list_for_each_entry_safe ( rq, n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; BUG_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error",0
838,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
839,"<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) sub -> flags |= prog -> flags ; else if ( prog -> flags & eflags ) sub -> flags &= ~ prog -> flags ; else if ( prog -> flags & eflags ) sub -> flags |= prog -> flags ; else if ( prog -> flags & eflags ) sub -> flags |= prog -> flags ; else if ( prog -> flags & eflags ) sub -> flags |= prog -> flags ; else if ( prog -> flags & eflags ) sub -> flags |= eflags ; if (! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ) sub -> flags |= prog -> flags ; else if (! match ( prog -> start, sp, prog -> flags | eflags, sub ) ) sub -> flags |= prog -> flags ; else if ( prog -> flags & eflags ) sub -> flags |= prog -> flags ; else if ( prog -> flags & eflags ) sub -> flags |= prog -> flags ; else if ( prog -> flags & eflags ) sub -> flags |= prog -> flags ; else if ( prog -> flags & eflags ) sub -> flags |= prog -> flags ; else if ( prog -> flags & eflags )",0
840,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; return <S2SV_ModStart> wc ) ;,0
841,"<S2SV_ModStart> ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; }",0
842,"<S2SV_ModStart> __be32 daddr ; struct ip_options_rcu * inet_opt ; <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt ) { struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; rt = ip_route_output_ports ( sock_net ( sk ), sk, inet_opt -> opt. <S2SV_ModEnd> faddr, inet_opt <S2SV_ModStart> -> opt. <S2SV_ModEnd> srr ) ;",0
843,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
844,<S2SV_ModStart> p_hsm_com_client_hdl_t * mgr_hdl ; pid_t pid <S2SV_ModEnd> ; memset ( <S2SV_ModStart> ) ) ; pid = getpid ( ) ; switch ( mgr ) { case FM_MGR_PM : mgr_prefix = HSM_FM_SCK_PM ; mgr_hdl = & hdl -> pm_hdl ; break ; case FM_MGR_FE : mgr_prefix = HSM_FM_SCK_FE ; mgr_hdl = & hdl -> fe_hdl ; break ; case FM_MGR_SM : mgr_prefix = HSM_FM_SCK_PM ; mgr_hdl = & hdl -> pm_hdl ; break ; case FM_MGR_PM : mgr_prefix = HSM_FM_SCK_FE ; mgr_hdl = & hdl -> fe_hdl ; break ; case FM_MGR_FE : mgr_prefix = HSM_FM_SCK_FE ; mgr_hdl = & hdl -> fe_hdl ; break ; default : return FM_CONF_INIT_,0
845,"<S2SV_ModStart> == NULL || * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } * ( effect_param_t * ) pReplyData = session_get_param ( effect -> session, ( effect_param_t * ) pCmdData ) ; if ( * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; }",0
846,"<S2SV_ModStart> ) break ; if ( extent > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( extent > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( extent > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( extent > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) break ; if ( extent > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( extent > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( extent > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""Insufficient",0
847,"<S2SV_ModStart> 0 ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> 0 ) { opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> 0 ) { opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; if ( opt!= NULL ) { atomic_set ( & sk -> sk_omem_alloc, 1 ) ; atomic_set ( & sk -> sk_omem_alloc, 1 ) ; } else { atomic_set ( & sk -> sk_omem_alloc, 1 ) ; } } <S2SV_ModEnd> break ; case <S2SV_ModStart> 0 ) { opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; if ( opt!= NULL ) { atomic_set ( & sk -> sk_omem_alloc, 1 ) ; atomic_set ( & sk -> sk_omem_alloc, 1 ) ; } else { atomic_set (",0
848,"<S2SV_ModStart> ; err = k5_berval_add ( ret [ j ], sizeof ( struct berval ) ) ; if ( err!= KRB5_EINVAL ) { err = k5_berval_add ( ret [ j ], sizeof ( struct berval ) ) ; if ( err!= KRB5_EINVAL ) { err = k5_berval_add ( ret [ j ], sizeof ( struct berval ) ) ; if ( err!= KRB5_EINVAL ) { err = k5_berval_add ( ret [ j ], sizeof ( struct berval ) ) ; if ( err!= KRB5_EINVAL ) { err = k5_berval_add ( ret [ j ], sizeof ( struct berval ) ) ; if ( err!= KRB5_EINVAL ) { err = k5_berval_add ( ret [ j ], sizeof ( struct berval ) ) ; if ( err!= KRB5_EINVAL ) { err = k5_berval_add ( ret [ j ], sizeof ( struct berval ) ) ; if ( err!= KRB5_EINVAL ) {",0
849,"<S2SV_ModStart> ; L3 = checkfutureword ( J, F, catchvar ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, F, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, F, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, F, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, F, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, F, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is",0
850,"<S2SV_ModStart> { if ( ( l_i + 1 ) > l_line_length ) { LIBXSMM_LOG ( LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSM",0
851,"<S2SV_ModStart> ; memcpy ( sbuf <S2SV_ModEnd>, crgram,",0
852,"<S2SV_ModStart> uint8 result ; uint32 <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> length ; STREAM <S2SV_ModEnd> s ; RD_BOOL <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"" ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"" ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"" ) ; return False ; }",0
853,<S2SV_ModStart> ; if ( stkt_server!= NULL && stkt_server -> entry_type == KDC_REP_STK ) { if ( stkt_server -> entry_type == KDC_REP_STK ) { if ( stkt_server -> entry_type == KDC_REP_STK ) { if ( stkt_server -> entry_type == KDC_REP_STK ) { if ( stkt_server -> entry_type == KDC_REP_STK ) { if ( stkt_server -> entry_type == KDC_REP_STK ) { if ( stkt_server -> entry_type == KDC_REP_STK ) { if ( stkt_server -> entry_type == KDC_REP_STK ) { if ( stkt_server -> entry_type == KDC_REP_STK ) { if ( stkt_server -> entry_type == KDC_REP_STK ) { if ( stkt_server -> entry_type == KDC_REP_STK ) { if ( stkt_server -> entry_type == KDC_REP_STK ) { if ( stkt_,0
854,"<S2SV_ModStart> ; if ( ( len > XML_MAX_NAME_LEN ) || ( len > XML_MAX_NAME_LEN ) ) { xmlParseError ( ctxt, ""Name <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( int ) ( XML_MAX_NAME_LEN ) ) ; return ( NULL ) ; } if ( ( len > XML_MAX_NAME_LEN ) ) { xmlParseError ( ctxt, ""Name <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( int ) ( XML_MAX_NAME_LEN ) ) ; if ( ( len > XML_MAX_NAME_LEN ) ) { xmlParseError ( ctxt, ""Name <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( int ) ( XML_MAX_NAME_LEN ) ) ) ; return ( NULL ) ; } if ( ( len > XML_MAX_NAME_LEN ) ) { xmlParseError ( ctxt, ""Name <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( int ) ( XML_MAX_NAME_LEN ) ) ) ; return ( NULL ) ; }",0
855,"<S2SV_ModStart> ( ret ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> macvlan <S2SV_blank> count: <S2SV_blank> %d\\n"", vsi -> num_queue_pairs ) ; return ret ; } <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> ch ) ; if ( ret ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> macvlan <S2SV_blank> count: <S2SV_blank> %d\\n"", vsi -> num_queue_pairs ) ; return ret ; } if ( ch ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> macvlan <S2SV_blank> count: <S2SV_blank> %d\\n"", vsi -> num_queue_pairs ) ; return ret ; } <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> ch ) ; if (! ch ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> macvlan <S2SV_blank> count: <S2SV_blank> %d\\n"", vsi -> num_queue_pairs ) ; return ret ; } if (! ch ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> macvlan <S2SV_blank> count: <S2SV_blank> %d\\n"", vsi -> num_queue_pairs ) ; return ret ; }",0
856,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
857,<S2SV_ModStart> ; if ( idx >= map -> nr_extents ) { ret = - EINVAL ; goto out ; },0
858,"<S2SV_ModStart> } } } strtok ( g -> data, "";"" ) ; if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } while ( action = strtok ( NULL, "";"" ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; switch ( action [ 0 ] ) { case's' : if ( cmd_cb ( core_ptr, ""ds"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } return send_msg ( g, ""OK"" ) ; } <S2SV_ModStart> ""E01"" ) ; } while ( action = strtok ( NULL, "";"" ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; switch ( action [ 0 ] ) { case 'c' : if ( cmd_cb ( core_ptr, ""dc"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } return send_msg ( g, ""E01""",0
859,"<S2SV_ModStart> sr ) { struct smb2fid_t smb2fid ; <S2SV_ModStart> ) ; } if ( smb2fid. persistent == 0 || smb2fid. temporal == 0 ) { smb2sr_put_error ( sr, status ) ; return ( SDRC_ERROR ) ; } <S2SV_ModStart> ) ; } if ( smb2fid. persistent == 0 ) { smb2sr_put_error ( sr, status ) ; return ( SDRC_SUCCESS ) ; } of = sr -> fid_ofile ; if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_node ) ; ( void ) smb_mbc_encodef ( & sr -> reply, ""wwl"", 4, 0 ) ; return ( SDRC_SUCCESS ) ; }",0
860,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
861,<S2SV_ModStart> 6 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 6 ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 6 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 6 ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 6 ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 6 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 6 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 6 ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 6 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 6 ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 6 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 6 ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 6 ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 6 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 6 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 6 ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 6 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 6 ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 6 ) { memcpy <S2SV_ModEnd> ( lf_mic ->,0
862,"<S2SV_ModStart> = AF_TIPC ; memset ( addr, 0, sizeof ( * addr ) ) ;",0
863,<S2SV_ModStart> -> userspace_addr & ( PAGE_SIZE - 1 ) ) ) goto out ; if ( mem -> slot >= KVM_MEMORY_SLOTS + KVM_PRIVATE_MEM_SLOTS ) goto out ; if ( mem -> guest_phys_addr + mem -> memory_size < mem -> guest_phys_addr ) goto out ; if ( mem -> guest_phys_addr + mem -> memory_size < mem -> guest_phys_addr ) goto out ; if ( mem -> guest_phys_addr + mem -> memory_size < mem -> guest_phys_addr ) goto out ;,0
864,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> } quantum_info =,0
865,"<S2SV_ModStart> ; if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> header, <S2SV_blank> aborting"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> header, <S2SV_blank> aborting"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> header, <S2SV_blank> aborting"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> header, <S2SV_blank> aborting"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> header, <S2SV_blank> aborting"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank>",0
866,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> * buf ; <S2SV_ModEnd> char * p <S2SV_ModStart> char * p ; PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = p - buf ; s = buf ; return PyUnicode_DecodeUnicodeEscape ( s, len, NULL ) ; } if ( * s & 0x80 ) { int kind ; void * data ; Py_ssize_t len ; i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = decode_utf8 ( c, & s, end ) ;",0
867,"<S2SV_ModStart> if ( data_size < 0 ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."", function ) ; return ( - 1 ) ; } if ( data_size < 0 ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."", function ) ; return ( - 1 ) ; } if ( data_size < 0 ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."", function ) ; return ( - 1 ) ; } if ( data_size < 0 ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_",0
868,"<S2SV_ModStart> ; uint32_t bcount ; if (! DoReadFile ( infile, & WaveHeader, sizeof ( WaveHeader ), & bcount ) || bcount!= sizeof ( WaveHeader ) || memcmp ( WaveHeader. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( WaveHeader. formType, wave_guid, sizeof ( wave_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! ( config -> qmode & QMODE_NO_STORE_WRAPPER ) &&! WavpackAddWrapper ( wpc, & filehdr, sizeof ( filehdr ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if ( bcount!= sizeof ( Wave64FileHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR",0
869,"<S2SV_ModStart> if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
870,"<S2SV_ModStart> ~ SNDRV_TLG_RUNNING ; spin_unlock_irqrestore ( & timeri -> lock, flags ) ; goto __end ; } timer = timeri -> timer ; if (! timer ) { spin_lock_irqsave ( & timeri -> lock, flags ) ; timeri -> flags &= ~ ( SNDRV_TIMER_IFLG_RUNNING | SNDRV_TIMER_IFLG_START ) ; spin_unlock_irqrestore ( & timeri -> lock, flags ) ; goto __end ; } if ( timeri -> flags & SNDRV_TIMER_IFLG_RESCHED ) { timer -> flags &= ~ SNDRV_TIMER_FLG_RESCHED ; timer -> flags &= ~ SNDRV_TIMER_FLG_RESCHED ; timer -> hw. stop ( timer ) ; if ( timer -> flags & SNDRV_TIMER_FLG_CHANGE ) timer -> flags &= ~ SNDRV_TIMER_FLG_CHANGE ; timer -> hw. start ( timer ) ; }",0
871,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart>, wrerrno ; <S2SV_ModEnd> int setimes, <S2SV_ModStart>, omode, mask ; <S2SV_ModEnd> int setimes, <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ; char ch <S2SV_ModStart> ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> %s"", __func__, targ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> pattern"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> %s"", __func__, targ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> %s"", __func__, targ, stb. st_mode ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> pattern"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> %s"",",0
872,"<S2SV_ModStart> } else if ( strcmp ( target, ""LIST"" ) && myentity_find_ext ( target ) == NULL ) { do_list ( si, mc, 0 ) ; free ( target ) ; return ; } else if ( strcasecmp ( target, ""CLEAR"" ) && myentity_find_ext ( target ) == NULL ) { do_clear ( si, mc, 0 ) ; free ( target ) ; return ; } else if ( strcasecmp ( target, ""CLEAR"" ) && myentity_find_ext ( target ) == NULL ) { do_clear ( si, mc, 0 ) ; free ( target ) ; return ; } else if ( strcmp ( target, ""CLEAR"" ) && myentity_find_ext ( target ) == NULL ) { do_clear ( si, mc, 0 ) ; free ( target ) ; return ; } else if ( strcmp ( target, ""CLEAR"" ) && myentity_find_ext ( target ) == NULL ) { do_clear ( si, mc, 0 ) ; free ( target ) ; return ; } else if ( strcmp ( target, ""CLEAR"" ) && myentity_find_ext ( target ) == NULL ) { do_",0
873,<S2SV_ModStart> ; ghash_flush ( ctx <S2SV_ModEnd> ) ; memcpy,0
874,"<S2SV_ModStart> -> sub_ctx = av_freep ( & pd. buf ) ; if (! ast -> sub_ctx ) { av_freep ( & pd. buf ) ; goto error ; } <S2SV_ModEnd> if ( ff_copy_whiteblacklists <S2SV_ModStart> -> sub_ctx = av_freep ( & pd. buf ) ; if (! ast -> sub_ctx ) goto error ; ast -> sub_ctx -> pb = pb ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; ast -> sub_ctx -> pb = pb ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; ast -> sub_ctx -> pb = pb ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0",0
875,"<S2SV_ModStart> ; int need_error_free <S2SV_ModEnd> ; int local_rcache <S2SV_ModStart> ; if ( flags & KRB5_RECVAUTH_BADAUTHVERS ) { problem = KRB5_SENDAUTH_BADAUTHVERS ; response = 1 ; } if ( appl_version && strcmp ( inbuf. data, appl_version ) ) { if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } if ( ( retval = krb5_read_message ( context, fd, & inbuf ) ) ) return ( retval ) ; if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if (! problem ) { problem = KRB5_SENDAUTH_",0
876,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
877,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
878,"<S2SV_ModStart> ++ = frametype ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE",0
879,"<S2SV_ModStart> = new_ns ; q = next_mnt ( q, old ) ; if (! q ) break ; while ( p -> mnt. mnt_root!= q -> mnt. mnt_root ) { if ( & p -> mnt == new_fs -> root. mnt ) { new_fs -> root. mnt = mntget ( & q -> mnt ) ; rootmnt = & p -> mnt ; pwdmnt = & p -> mnt ; } if ( & p -> mnt == new_fs -> pwd. mnt ) { new_fs -> pwd. mnt = mntget ( & q -> mnt ) ; pwdmnt = & p -> mnt ; } if ( & p -> mnt == new_fs -> root. mnt ) { new_fs -> root. mnt = mntget ( & q -> mnt ) ; rootmnt = & p -> mnt ; pwdmnt = & p -> mnt ; } if ( & p -> mnt == new_fs -> pwd. mnt ) { new_fs -> pwd. mnt = mntget ( & q -> mnt ) ; pwdmnt = & p -> m",0
880,<S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES,0
881,<S2SV_ModStart> ; zip_object_handlers. get_properties = php_zip_get_properties ; zip_object_handlers. read_property = php_zip_read_property ; zip_object_handlers. has_property = php_zip_has_property ;,0
882,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if ( iova + length > mem -> iova + mem -> length ) return - EFAULT <S2SV_ModEnd> ; default :,0
883,"<S2SV_ModStart> case ICMP6_NI_NODEINFO : if ( siz < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( siz < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> node <S2SV_blank> information <S2SV_blank> query <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", siz ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( siz < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> node <S2SV_blank> information <S2SV_blank> query <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"" <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ) ) ; if ( siz < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> node <S2SV_blank> information <S2SV_blank> query <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", siz ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( siz < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> node <S2SV_blank> information <S2SV_blank> query <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", siz ) ) ; break ; }",0
884,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
885,"<S2SV_ModStart> ; * sent = 0 ; if ( n_vec > 15 ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ; break ; } <S2SV_ModEnd> smb_msg. msg_namelen <S2SV_ModStart> smb_msg. msg_namelen = sizeof ( smb_msg. msg_name ) ; smb_msg. msg_control = NULL ; smb_msg. msg_controllen = sizeof ( smb_msg. msg_control ) ; if (! server -> noblocksnd ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ; break ; } if ( rc == - EAGAIN ) { WARN_ON_ONCE ( rc == - ENOSPC ) ; i ++ ; if ( i >= 14 || (! server -> noblocksnd && ( i > 2 ) ) ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket",0
886,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; return <S2SV_ModEnd> ref -> ref <S2SV_ModStart> -> ref ++ ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
887,"<S2SV_ModStart> ; if ( cluster < 0 || cluster >= fs -> clusters ) die ( ""Invalid <S2SV_blank> cluster <S2SV_blank> number: <S2SV_blank> %u, <S2SV_blank> cluster <S2SV_blank> %u, <S2SV_blank> cluster <S2SV_blank> %u"", cluster, fs -> clusters, ( int ) cluster ) ; else if ( cluster >= fs -> clusters ) die ( ""Invalid <S2SV_blank> cluster <S2SV_blank> number: <S2SV_blank> %u, <S2SV_blank> cluster <S2SV_blank> %u, <S2SV_blank> cluster <S2SV_blank> %u"", cluster, fs -> clusters - 1, ( int ) cluster ) ; else subseqEntry. value = 0 ; data [ 0 ] = new & 0xff ; data [ 1 ] = ( new >> 8 ) | ( ( 0xff & subseqEntry. value ) << 4 ) ; size = 2 ; break ; case 8 : data = fs -> fat + cluster * 2 ; offs = fs -> fat_start + cluster * 2 ; size = 2 ; break ; case 16 : { FAT_ENTRY curEntry ; get_fat ( & curEntry, fs -> fat, cluster, fs ) ; data = fs -> fat + cluster * 2 ; size = 2 ; break ; case 32 : { FAT_ENTRY curEntry ; get_fat ( & curEntry, fs ->",0
888,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
889,<S2SV_ModStart> sk_nulls_node ) ; isk -> inet_num = 0 ; isk -> inet_sport = 0 ;,0
890,<S2SV_ModStart> u2_total_mbs_coded ; } if ( ps_dec -> ps_dec_err_status -> u2_total_mbs_coded > ps_dec -> ps_cur_slice -> u1_num_mbs_coded ) { ps_dec -> ps_dec_err_status -> u2_total_mbs_coded = ps_dec -> ps_cur_slice -> u1_num_mbs_coded ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded = ps_dec -> ps_cur_slice -> u1_num_mbs_coded ; ps_dec -> ps_cur_slice -> u1_num_mbs_nby2 = ps_dec -> ps_cur_slice -> u1_num_mbs_nby2 ; ps_dec -> ps_cur_slice -> u1_num_mbs_nby2 = ps_dec -> ps_cur_slice -> u1_num_mbs_nby2 ; ps_dec -> ps_cur_slice,0
891,<S2SV_ModStart> ; if ( unlikely ( src >= ( env_end - env_start ) ) ) { ret = - EINVAL ; goto free ; },0
892,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int result = <S2SV_ModEnd> parse_rock_ridge_inode_internal ( de <S2SV_ModStart> ; if ( ISOFS_SB ( inode -> i_sb ) -> s_rock_offset == - 1 ) { result = parse_rock_ridge_inode_internal ( de, inode, 0 ) ; } else if ( ISOFS_SB ( inode -> i_sb ) -> s_rock == 2 ) { result = parse_rock_ridge_inode_internal ( de, inode, 14 ) ; } return result ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
893,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct fsnotify_group * <S2SV_ModEnd> inotify_new_group ( struct <S2SV_ModStart> = 0 ; <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart>. user = NULL ; group -> inotify_data. fa = NULL ;,0
894,<S2SV_ModStart> in -> data [ p ] && in -> linesize [ p ],0
895,"<S2SV_ModStart> ; if ( screen -> buffers [ 0 ] && screen -> buffers [ 0 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] -> flags ) ; if ( screen -> buffers [ 1 ] && screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 1 ] -> flags ) ;",0
896,"<S2SV_ModStart> { verbose ( env, ""dereference <S2SV_blank> of <S2SV_blank> modified <S2SV_blank> ctx <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d+%d, <S2SV_blank> ctx+const <S2SV_blank> is <S2SV_blank> allowed, <S2SV_blank> ctx+const <S2SV_blank> is <S2SV_blank> not\\n"" <S2SV_ModEnd>, regno,",0
897,"<S2SV_ModStart> uint16 strip, nstrips ; if ( TIFFGetFieldDefaulted ( in, TIFFTAG_NUMSTRIPS, & nstrips ) == 0 ) { TIFFError ( """", ""TIFF <S2SV_blank> number <S2SV_blank> of <S2SV_blank> strip <S2SV_blank> tags <S2SV_blank> is <S2SV_blank> zero!"" ) ; return 0 ; } if ( nstrips == 0 ) { TIFFError ( """", ""TIFF <S2SV_blank> number <S2SV_blank> of <S2SV_blank> strip <S2SV_blank> tags <S2SV_blank> is <S2SV_blank> zero!"" ) ; return 0 ; } nstrips = TIFFNumberOfStrips ( in ) ; if ( nstrips == 0 ) { TIFFError ( """", ""TIFF <S2SV_blank> number <S2SV_blank> of <S2SV_blank> strip <S2SV_blank> tags <S2SV_blank> is <S2SV_blank> zero!"" ) ; return 0 ; } for ( strip = 0 ; strip < nstrips ; strip ++ ) { bytes_read = TIFFReadEncodedStrip ( in, strip, bufp, - 1 ) ; rows = bytes_read / scanline_size ; if ( bytes_read < 0 &&! ignore ) { TIFFError ( """", ""Error <S2SV_blank> reading <S2SV_blank> strip <S2SV_blank> %lu <S2SV_blank> after <S2SV_blank> %lu <S2SV_blank> rows"", ( unsigned long ) rows ) ; return 0 ; }",0
898,"<S2SV_ModStart> base_name ) ; <S2SV_ModEnd> struct search_domain * <S2SV_ModStart> const char need_to_append_dot = base_name [ base_len <S2SV_ModEnd> - 1 ] <S2SV_ModStart> 1 ; struct search_domain * const dom ; for ( dom = state -> head ; dom ; dom = dom -> next ) { if (! n -- ) { const u8 * const postfix = ( ( u8 * ) dom ) + sizeof ( struct search_domain ) ; const int postfix_len = dom -> len ; if ( need_to_append_dot ) newname [ base_len ] = '.' ; memcpy ( newname + base_len + need_to_append_dot, postfix, postfix_len ) ; if ( need_to_append_dot ) newname [ base_len ] = 0 ; memcpy ( newname + base_len + need_to_append_dot, postfix, postfix_len ) ;",0
899,"<S2SV_ModStart> do { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay, TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY ) ; TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_",0
900,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = -,1
901,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; else status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( exception!= ( ExceptionInfo * ) NULL ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
902,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if (! context ) return FALSE <S2SV_ModStart> -> Planes ; if (! rle ) return FALSE <S2SV_ModStart> < originalSize ) { if (! CopyMemory ( context -> priv -> PlaneBuffers [ i ], rle, originalSize ) ) return FALSE ; <S2SV_ModStart> < originalSize ) { if (! CopyMemory ( context -> priv -> PlaneBuffers [ i ], rle, originalSize ) ) return FALSE ; <S2SV_ModStart> < originalSize ) { if (! CopyMemory ( context -> priv -> PlaneBuffers [ i ], rle, originalSize ) ) return FALSE ; nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; rle += planeSize ; } else if ( planeSize > originalSize ) { if (! CopyMemory ( context -> priv -> PlaneBuffers [ i ], rle, originalSize ) ) return FALSE ; nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], rle",0
903,"<S2SV_ModStart> policy ) { struct fscrypt_context * context ; <S2SV_ModStart> policy ) ; context = fscrypt_alloc_context ( inode ) ; if (! context ) return - ENOMEM ; if (! inode_has_encryption_context ( inode ) ) { if (! inode -> i_sb -> s_cop -> empty_dir ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ) return - ENOTEMPTY ; if (! is_encryption_context_consistent_with_policy ( inode, policy ) ) return 0 ; printk ( KERN_WARNING ""%s: <S2SV_blank> Policy <S2SV_blank> inconsistent <S2SV_blank> with <S2SV_blank> encryption <S2SV_blank> context\\n"", __func__ ) ; return - EINVAL ; } if (! inode_has_encryption_context ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ) return - ENOTEMPTY ; if (! is_encryption_context_consistent_with_policy ( inode, policy ) ) return 0 ; if ( is_encryption_context_consistent_with_policy ( inode, policy ) ) return 0 ;",0
904,"<S2SV_ModStart> value ) { if ( strlen ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) == 0 ) { httpSetHostName ( state -> host, stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) ; } else if ( strlen ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) == 0 ) { httpSetHostName ( state -> host, stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) ; httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ; } else if ( strlen ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) == 0 ) { httpSetHostName ( state -> host, stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) ; httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = stok ( sclone ( value ), "" <S2SV_blank>",0
905,"<S2SV_ModStart>. cmp = key_cmp_and_cmp <S2SV_ModEnd>,. match_data <S2SV_ModStart> match_data ) ; if ( ctx. match_data. cmp == key_cmp_and_cmp ) ctx. match_data. lookup_type = KEYRING_SEARCH_LOOKUP_DIRECT ; else if ( ctx. match_data. lookup_type!= KEYRING_SEARCH_LOOKUP_DIRECT ) { ret = ERR_PTR ( - EPERM ) ; goto error_free ; } ret = construct_key_and_link ( & ctx, callout_info, callout_len, aux, dest_keyring, flags ) ; if ( ret < 0 ) { key = ERR_PTR ( ret ) ; goto error_free ; } key = key_ref_to_ptr ( key_ref ) ; if ( dest_keyring ) { construct_get_dest_keyring ( & dest_keyring ) ; ret = construct_get_dest_keyring ( & dest_keyring ) ; ret = construct_key_and_link ( & ctx, callout_info, callout_len, aux, dest_keyring, flags ) ; if (",0
906,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; if (,0
907,<S2SV_ModStart>! job_id ||! prev_hash ||! coinbase1 ||! coinbase2 ||! bbversion ||! nbit ||! ntime ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; if ( pool -> swork. job_id!= job_id ) { free ( pool -> swork. job_id ) ; pool -> swork. job_id = job_id ; free ( pool -> swork. job_id ) ; pool -> swork. job_id = job_id ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; if ( pool -> swork. job_id!= job_id ) { free ( pool -> swork. job_id ) ; pool -> swork. job_id = job_id ; free ( pool -> swork. job_id ) ; pool -> swork. job_id = job_id,0
908,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
909,"<S2SV_ModStart> size ) { size_t alloc_size = ( size + 1 ) / size ; if ( alloc_size < 0 ) { return NULL ; } <S2SV_ModStart> { memset ( & alloc_size <S2SV_ModEnd>, '\\0', <S2SV_ModStart> * size ) ) ; memset ( & alloc_size <S2SV_ModEnd>, '\\0', <S2SV_ModStart> * size ) ) ; memset ( & alloc_size <S2SV_ModEnd>, '\\0', <S2SV_ModStart> * size ) ) ; return alloc_size <S2SV_ModEnd> ; } <S2SV_null>",0
910,<S2SV_ModStart> ioc ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
911,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> __dict__ ) ; <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> ; PyObject * dict ; if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } dict = _PyObject_GetAttrId ( self, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } res = Py_BuildValue ( ""O()"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res <S2SV_ModEnd> ; } <S2SV_null>",0
912,"<S2SV_ModStart> & desc ) ; if (! desc ) { dev_err ( & udev -> dev, ""descriptor <S2SV_blank> for <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %sHNP <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; return 0 ; } if (! desc ) { dev_err ( & udev -> dev, ""descriptor <S2SV_blank> for <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %sHNP <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; return 0 ; } if ( desc -> bDescriptorType == USB_DT_OTG ) { dev_info ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %sHNP <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; return 0 ; } if ( port1 == bus -> otg_port ) { dev_info ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %sHNP <S2SV_blank> port\\n"", ( port1 == bus -> otg",0
913,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> ) ; case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_ID : return perf_event_id ( event ) ; } case PERF_EVENT_SET_OUTPUT : { int ret ; if ( arg!= - 1 ) { struct perf_event * output_event ; struct fd output ; ret = perf_event_set_output ( event, output_event ) ; fdput ( output ) ; } else { ret = perf_event_set_output ( event, output_event ) ; fdput ( output ) ; } return ret ; } <S2SV_ModEnd> case PERF_EVENT_IOC_SET_FILTER :",0
914,"<S2SV_ModStart> -> sacked_out ) ; if ( delta < 0 ) { u64 dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd - 1 ; sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; } else if ( flag & FLAG_RETRANS_DATA_ACKED ) { u64 dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd - 1 ; sndcnt = div_u64 ( dividend, tp -> prr_out ) - tp -> prr_out ; } else { sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; }",0
915,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return uv_mode ;",0
916,"<S2SV_ModStart> mask ) { return crypto_alloc_skcipher ( name <S2SV_ModEnd>, type, <S2SV_ModStart> mask ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
917,"<S2SV_ModStart> EINVAL ; } if ( sha -> type == CCP_SHA_TYPE_256 ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd -> ccp -> vdata ->",0
918,<S2SV_ModStart> tile_height ) { av_clear ( c -> synth_tile ) ; av_clear ( c -> jpeg_tile ) ; c -> synth_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> jpeg_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> kempf_flags = av_mallocz ( c -> tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; if (! c -> synth_tile ) return AVERROR ( ENOMEM ) ; c -> synth_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> jpeg_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> kempf_flags = av_mallocz ( c -> tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; if (! c -> synth_tile ) return AVERROR ( ENOMEM ) ; c -> synth_tile = av_mallocz ( c -> tile_stride * aligned_,0
919,"<S2SV_ModStart> sizeof iv ) ; if ( key [ sizeof key ] > EVP_MAX_KEY_LENGTH ) ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", key. length ) ;",0
920,"<S2SV_ModStart> { jas_fix3 ( buf, JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( <S2SV_ModStart> ) ) ), JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL ( JAS_MUL",0
921,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
922,"<S2SV_ModStart> ) { register u_int <S2SV_ModEnd> length = h <S2SV_ModStart> length ) ; if ( length > CHDLC_HDRLEN ) { ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( length ) ; } ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( length ) ; }",0
923,"<S2SV_ModStart> ; if ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_NOSUID ) { cFYI ( 1, ""No <S2SV_blank> mnt <S2SV_blank> specified"" ) ; volume_info -> mnt_cifs_flags &= ~ CIFS_MOUNT_NOSUID ; cFYI ( 1, ""No <S2SV_blank> mnt <S2SV_blank> specified"" ) ; volume_info -> mnt_cifs_flags |= CIFS_MOUNT_NOSUID ; } else if ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_NOSUID ) { cFYI ( 1, ""No <S2SV_blank> mnt <S2SV_blank> specified"" ) ; volume_info -> mnt_cifs_flags &= ~ CIFS_MOUNT_NOSUID ; cFYI ( 1, ""No <S2SV_blank> mnt <S2SV_blank> specified"" ) ; volume_info -> mnt_cifs_flags |= CIFS_MOUNT_NOSUID ; }",0
924,<S2SV_ModStart> len && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS || sk -> sk_tsflags & SOF_TIMESTAMPING_HARDWARE || sk -> sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE <S2SV_ModStart> len && ( sk -> sk_tsflags & SOF_TIMESTAMPING_HARDWARE || sk -> sk_tsflags & SOF_TIMESTAMPING_HARDWARE || sk -> sk_tsflags & SOF_TIMESTAMPING_HARDWARE || shhwtstamps && ( sk -> sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE || sk -> sk_tsflags & SOF_TIMESTAMPING_HARDWARE || sk -> sk_tsflags & SOF_TIMESTAMPING_HARDWARE || shhwtstamps && skb -> sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE || skb -> sk_tsflags & SOF_TIMESTAMPING_HARDWARE || shhwtstamps && skb -> sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE || skb -> sk_tsflags & SOF_TIMESTAMPING,0
925,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ) ;",1
926,"<S2SV_ModStart> ; if ( alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_a & ( SSL_kECDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_a & ( SSL_kECDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL",0
927,"<S2SV_ModStart> versionMinor == NULL ) { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE || encJoinAcceptSize <S2SV_ModStart> SECURE_ELEMENT_ERROR_NPE ; } if ( SecureElementVerifyAesCmac ( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY )!= SECURE_ELEMENT_SUCCESS ) { return SECURE_ELEMENT_FAIL_CMAC ; }",0
928,"<S2SV_ModStart> case NGHTTP2_IB_READ_SETTINGS : DEBUGF ( ""recv: <S2SV_blank> [IB_READ_SETTINGS]\\n"" ) ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - first ; }",0
929,<S2SV_ModStart> = ucounts ; if (! new_ns -> user_ns ) { kfree ( new_ns ) ; dec_mnt_namespaces ( ucounts ) ; return ERR_PTR ( - ENOMEM ) ; },0
930,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
931,"<S2SV_ModStart> ; if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES ) ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. capabilities = capabilities ; } else if ( cpu_has ( & boot_cpu_data, X86_FEATURE_I386_PERF ) ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. capabilities = capabilities ; } else if ( version > 1 ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. capabilities = capabilities ; } else if ( version > 1 ) { u64 capabilities ; rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. capabilities = capabilities ; }",0
932,"<S2SV_ModStart>. dimensions ; # ifdef STB_VORBIS_DIVIDES_IN_RESIDUE uint16 * * part_classdata = ( uint16 * * * ) temp_block_array ( f, f -> channels, r -> part_size * sizeof ( * * part_classdata ) ) ; # else int * * classifications = ( int * * ) temp_block_array ( f, f -> channels, r -> part_size * sizeof ( * * classifications ) ) ; # endif CHECK ( f ) ; for ( i = 0 ; i < n ; ++ i ) if ( do_not_decode [ i ] ) memset ( residue_buffers [ i ], 0, sizeof ( float ) * n ) ) memset ( residue_buffers [ i ], 0, sizeof ( float ) * n ) ; for ( j = 0 ; j < ch ; ++ j ) if ( do_not_decode [ i ] ) memset ( residue_buffers [ i ], 0, sizeof ( float ) * n ) ; for ( j = 0 ; j < n ; ++ j ) if ( do_not_decode [ i ] ) memset ( residue_buffers",0
933,"<S2SV_ModStart> ) ; u32 last_oow_ack_time <S2SV_ModEnd> ; if ( <S2SV_ModStart> challenge_timestamp ) { last_oow_ack_time = jiffies / HZ ; tp -> last_oow_ack_time = now ; challenge_count = 0 ; } else if ( tcp_oow_rate_limited ( sock_net ( sk ), skb, LINUX_MIB_TCPACKSKIPPEDCHALLENGE, & last_oow_ack_time ) ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; tp -> last_oow_ack_time = now ; } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; tp -> last_oow_ack_time = last_oow_ack_time ; tp -> last_oow_ack_time = now ; }",0
934,<S2SV_ModStart> struct llc_pktinfo info ; msg -> msg_namelen = sizeof ( info ),0
935,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, const TOKENEXTRA * <S2SV_ModEnd> tp, const <S2SV_ModStart> ] ; const vpx_token <S2SV_ModEnd> * const a <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> t ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) & 1 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int i = 2 * p -> skip_eob_node ; if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits =",0
936,"<S2SV_ModStart>, uncompressed_hdr_size ; <S2SV_ModEnd> write_uncompressed_header ( cpi <S2SV_ModStart> struct vp9_write_bit_buffer wb <S2SV_ModEnd> ; write_uncompressed_header ( <S2SV_ModStart> ; struct vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
937,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
938,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; int n <S2SV_ModStart> - ENODEV ; } if ( interface -> desc. bNumEndpoints < 1 ) { dbg_hid ( ""number <S2SV_blank> endpoints <S2SV_blank> must <S2SV_blank> be <S2SV_blank> 1\\n"" ) ; return - EINVAL ; } if ( le16_to_cpu ( dev -> descriptor. bNumEndpoints ) < 1 ) { dbg_hid ( ""number <S2SV_blank> endpoints <S2SV_blank> must <S2SV_blank> be <S2SV_blank> 1\\n"" ) ; return - EINVAL ; } for ( n = 0 ; n < hdesc -> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if ( rsize < 0 ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - EINVAL ; }",0
939,"<S2SV_ModStart> struct ikev2_id id <S2SV_ModEnd> ; int id_len <S2SV_ModStart> ND_TCHECK ( * <S2SV_ModEnd> ext ) ; <S2SV_ModStart> ( * ext ) ; if ( id_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> len=%d"", id_len ) ) ; goto trunc ; } <S2SV_ModStart> * typedata ; if ( id_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> len=%d"", id_len ) ) ; goto trunc ; } id_len = id_len - sizeof ( id ) ; ND_TCHECK ( * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; id_len = ntohs ( id. h. len ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4",0
940,<S2SV_ModStart> group_dead ) ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> ( unlikely ( tsk -> robust_list ) ) exit_robust_list ( tsk ) ; # ifdef CONFIG_COMPAT if ( unlikely ( tsk -> compat_robust_list ) ) compat_exit_robust_list ( tsk ) ; # endif,0
941,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> data ) { <S2SV_ModEnd> char * name <S2SV_ModStart> = path_name ( <S2SV_ModEnd> path, last <S2SV_ModStart> last ) ; if (! strcmp ( name, obj -> oid. name ) ) { pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> object <S2SV_blank> name <S2SV_blank> %s\\n"", __func__, obj -> oid. name ) ; return ; } <S2SV_ModEnd> obj -> flags <S2SV_ModStart> |= OBJECT_ADDED ; if (! strcmp ( name, obj -> oid. name ) ) { pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> object <S2SV_blank> name <S2SV_blank> %s\\n"", obj -> oid. name, obj -> oid. hash ) ; free ( name ) ; return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
942,<S2SV_ModStart> ) ) { if ( atoi ( jas_tvparser_getval ( tvp ) ) < 0 || atoi ( cmpt -> width ) < 0 || atoi ( cmpt -> height ) < 0 || atoi ( cmpt -> width ) > jas_tvparser_getval ( tvp ) <S2SV_ModStart> ) ) { if ( atoi ( jas_tvparser_getval ( tvp ) ) < 0 || atoi ( cmpt -> height ) < 0 ) { goto error ; } cmpt -> width = atoi ( jas_tvparser_getval ( tvp ) ) ; cmpt -> height = atoi ( jas_tvparser_getval ( tvp ) ) ; cmpt -> width = atoi ( jas_tvparser_getval ( tvp ) ) ; cmpt -> height = atoi ( jas_tvparser_getval ( tvp ) ) ; cmpt -> width = atoi ( jas_tvparser_getval ( tvp ) ) ; cmpt -> height = atoi ( jas_tvparser_getval ( tvp ) ) ; },0
943,<S2SV_ModStart> urb ) ; usb_unanchor_urb ( urb ) ;,0
944,"<S2SV_ModStart>, yt0_0, yt1_0, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l1_1, x_l2_0, x_l2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l1_1, x_l2_0, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l1_1",0
945,<S2SV_ModStart> ; if ( ( tag & 0x80 ) == 0 ) { if ( datalen == dp ) goto data_overrun_error ; goto data_overrun_error ; } len = data [ dp ++ ] ; if ( len <= 0x7f ) { if ( data [ dp ++ ]!= 0 ) goto invalid_eoc ; if ( -- indef_level <= 0 ) { * _len = dp - * _dp ; * _dp = dp ; goto error ; } if ( unlikely ( len == ASN1_INDEFINITE_LENGTH ) ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } if ( unlikely ( len == ASN1_INDEFINITE_LENGTH ) ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } n = len - 0x80 ; if ( unlikely ( n > sizeof ( size_t,0
946,<S2SV_ModStart> val ; } <S2SV_ModEnd> return ptr ;,0
947,<S2SV_ModStart> mnt_dir ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ; if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ;,0
948,"<S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ) ; return FAILURE ; } if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ) ; return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ) ; return FAILURE ; }",0
949,"<S2SV_ModStart> n ] >= min && value [ n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD <S2SV_ModEnd> ) goto exit <S2SV_ModStart> n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD <S2SV_ModEnd> ) goto exit <S2SV_ModStart> n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && field -> usage [ value [ n ] <S2SV_ModEnd> <= max && <S2SV_ModStart> <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && search ( field -> value, value [ n ], count ) ) hid_process_event ( hid, field, & field -> usage [ value [ n ] - min ], 0, interrupt ) ; if ( value [ n ] >= min && value [ n ] <= max && field -> usage [ value [ n ] - min ]. hid && search ( field -> value, value [ n ], count ) ) hid_process_event ( hid, field, & field -> usage",0
950,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
951,"<S2SV_ModStart> = true ; <S2SV_ModEnd> p4 = r_uleb128 <S2SV_ModStart> ( p4, p4_end - ins_size, & line_start ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; if (! ( debug_positions = r_list_newf ( ( RListFree ) free ) ) ) { return ; } if (! ( emitted_debug_locals = r_list_newf ( ( RListFree ) free ) ) ) { return ; } if (! ( debug_positions = r_list_newf ( ( RListFree ) free ) ) ) { return ; } if (! ( emitted_debug_locals = r_list_newf ( ( RListFree ) free ) ) ) { return ; } if (! ( debug_positions = r_list_newf ( ( RListFree ) free ) ) ) { return ;",0
952,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; rb_hash_aset ( env, ipv4_addr_val, req_ipv4_addr ( req ) ) ; rb_hash_aset ( env, ipv6_addr_val, req_ipv6_addr ( req ) ) ; rb_hash_aset ( env, ipv6_addr_val, req_ipv6_addr ( req ) ) ; rb_hash_aset ( env, ipv6_addr_val, req_ipv6_addr ( req ) ) ; rb_hash_aset ( env, ipv4_addr_val, req_ipv4_addr ( req ) ) ; rb_hash_aset ( env, ipv6_addr_val, req_ipv6_addr ( req ) ) ; rb_hash_aset ( env, ipv6_addr_val, req_ipv6_addr ( req ) ) ; rb_hash_aset ( env, ipv6_addr_val, req_ipv6_",0
953,"<S2SV_ModStart> 0 ) ; if ( args -> flags & ATTR_KERNOVAL ) { args -> valuelen = valuelen ; return XFS_ERROR ( ERANGE ) ; } args -> rmtvaluelen = valuelen ; memcpy ( args -> value, & name_rmt -> value [ args -> namelen ], valuelen ) ;",0
954,"<S2SV_ModStart> endif # endif MYSQL_BIND * bind, * bind_end <S2SV_ModEnd> ; imp_sth_phb_t * <S2SV_ModStart>, prepare_retval ; # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = imp_dbh -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare ; if ( imp_sth -> use_server_side_prepare ) imp_sth -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare ; if ( imp_sth -> use_server_side_prepare ) imp_sth -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare ; if ( imp_sth -> use_server_side_prepare ) imp_sth -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side",0
955,"<S2SV_ModStart> ; if ( key -> type -> destroy ) key -> type -> destroy ( key ) ; if ( test_bit ( KEY_FLAG_IN_QUOTA, & key -> flags ) ) { spin_lock ( & key -> user -> lock ) ; key -> user -> qnkeys -- ; key -> user -> qnbytes -= key -> quotalen ; spin_unlock ( & key -> user -> lock ) ; } atomic_dec ( & key -> user -> nkeys ) ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; kfree ( key -> description ) ;",0
956,"<S2SV_ModStart> ) ) ; if ( state. num > MAXQUERY ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> queries <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", state. num ) ) ) ;",0
957,"<S2SV_ModStart> int need = 0 ; if ( screen -> screen_type!= SCREEN_2D ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = NULL ; return ; } <S2SV_ModStart> screen, { if ( screen -> screen_type!= SCREEN_1D ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( 1 ) ; free ( scp -> data_buffer ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( 1 ) ; free ( scp -> data_buffer ) ;",0
958,"<S2SV_ModStart> ; if (! EXT4_SB ( inode -> i_sb ) -> s_journal <S2SV_ModEnd> ) return 0 <S2SV_ModStart> i_orphan ) ; mutex_unlock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ; err = ext4_reserve_inode_write ( handle, inode, & iloc ) ; if ( err ) goto out_err ; if ( prev == & sbi -> s_orphan ) { jbd_debug ( 4, ""superblock <S2SV_blank> will <S2SV_blank> point <S2SV_blank> to <S2SV_blank> %u\\n"", ino_next ) ; BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_brelse ; sbi -> s_es -> s_last_orphan = cpu_to_le32 ( ei -> i_orphan. next ) ; BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_handle_dirty_super ( handle, inode -> i_",0
959,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline size_t <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> = 0.0000001 ; size_t <S2SV_ModEnd> len = ( <S2SV_ModStart> val ) ) { if ( len <= 0 ) { * str = 0 ; return ; } <S2SV_ModEnd> } else { <S2SV_ModStart> val < 0 ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) ) ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) ) == ( 1 + ( JsVarInt ) val ) ) ; d = 1 ; while ( d >= 1 ) { int v = ( int ) ( val / d ) ; val -= v * d ; d = ( int ) ( val / d ) ; val -= v * d ;,0
960,"<S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d%[ <S2SV_blank> \\t]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp,",0
961,"<S2SV_ModStart> size < 6 && result!= NULL <S2SV_ModStart> ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; if ( size < 6 ) ASSERT ( result!= buf ) ; ASSERT ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) == 0 ) ; if ( result!= buf ) free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length ==",0
962,<S2SV_ModStart> cycles ) ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> ( crng_init == 0 <S2SV_ModEnd> ) ) {,0
963,"<S2SV_ModStart> EX_ID ) { jsl_snprintf <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; jsl_snprintf <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; jsl_snprintf <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; jsl_snprintf <S2SV_ModEnd> ( str,",0
964,"<S2SV_ModStart> if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; } else if ( ( st. st_mode & S_IFMT ) == S_IFLNK ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; } else if ( ( st. st_mode & S_IFMT ) == S_IFDIR ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; } else if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; } else if ( ( st. st_mode & S_IFMT ) == S_IFLNK ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; } else if ( ( st",0
965,,1
966,"<S2SV_ModStart> * output ; <S2SV_ModEnd> if ( ExpandFilenames <S2SV_ModStart> ) ; } input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { fprintf ( stderr, ""DEBUG: <S2SV_blank> Concatenate <S2SV_blank> Image: <S2SV_blank> \\""%s\\""\\n"", argv [ i ] ) ; continue ; } for ( i = 2 ; i < ( ssize_t ) ( argc - 1 ) ; i ++ ) { input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( c = fgetc ( input ) ; c!= EOF ; c = fgetc ( input ) ) fputc ( ( char ) c, output ) ; ( void ) fclose ( input ) ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> ( void ) remove_utf8 ( argv [ i ] ) ; } ( void ) fclose ( input ) ; return ( MagickTrue ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
967,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
968,"<S2SV_ModStart> ; fail : if ( IS_ERR ( bdev ) ) { ext3_msg ( sb, ""error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s: <S2SV_blank> %ld"", __bdevname ( dev, b ), PTR_ERR ( bdev ) ) ; return NULL ; }",0
969,"<S2SV_ModStart> passwd * pwd, const char * prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> ( fp = safe_mkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> atomic_dir ) ) == NULL ) return - 1 ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; namelen = strlen ( pwd -> pw_name ) ; while ( fgets ( linebuf, buflen, pwf )!= NULL ) { contlen = strlen ( linebuf ) ; if (",0
970,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
971,"<S2SV_ModStart> s2 ) { size_t len = <S2SV_ModEnd> strlen ( s1 <S2SV_ModStart> 1U ) ; return memcmp ( s1, s2, len <S2SV_ModEnd> ) ; }",0
972,"<S2SV_ModStart> TRUE ; } Jid * jid_from = jid_create ( from ) ; Jid * jid_to = jid_create ( to ) ; if (! jid_from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> stanza <S2SV_blank> name <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } <S2SV_ModStart> from ) ; if (! jid_to ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> stanza <S2SV_blank> name <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } <S2SV_ModStart> jid_to ) ; if (! jid_to ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> stanza <S2SV_blank> name <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } if ( ( g_strcmp0 ( name, ""received"" )!= 0 ) && ( g_strcmp0 ( name, ""sent"" )!= 0 ) && ( g_strcmp0 ( name, ""received"" )!= 0 ) && ( g_strcmp0 ( name, ""received"" )!= 0 ) && ( g_strcmp0 ( name, ""sent"" )!= 0 ) && ( g_strcmp0 ( name, ""received"" )!= 0 ) && ( g_",0
973,"<S2SV_ModStart> badfmt ; } if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { addReplyError ( c, ""The <S2SV_blank> operating <S2SV_blank> system <S2SV_blank> is <S2SV_blank> not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> handle <S2SV_blank> the <S2SV_blank> specified <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients, <S2SV_blank> try <S2SV_blank> with <S2SV_blank> %d"", server. maxclients ) ; return ; } zfree ( server. rdb_filename ) ; server. rdb_filename = zstrdup ( o -> ptr ) ; } if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { addReplyError ( c, ""The <S2SV_blank> operating <S2SV_blank> system <S2SV_blank> is <S2SV_blank> not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> handle <S2SV_blank> the <S2SV_blank> specified <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients, <S2SV_blank> try <S2SV_blank> with <S2SV_blank> %d"", server. maxclients ) ; return ; } if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { addReplyError ( c, ""The <S2SV_blank> operating <S2SV_blank> system <S2SV_blank> is <S2SV_blank> not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> handle <S2SV_blank> the <S2SV_blank> specified <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients, <S2SV_blank> try <S2SV_blank> with <S2SV_blank> %d"", server. maxclients )",0
974,"<S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP <S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> name <S2SV_blank> \\""%s\\"""", name ) ; ioerror ( ""version"" ) ; return 1 ; } if ( type == CONF_FILE ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> name <S2SV_blank> \\""%s\\"""", name ) ; ioerror ( ""realpath"" ) ; return 1 ; } configuration_file = str_dup ( name",0
975,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; msg ->,0
976,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
977,"<S2SV_ModStart> st_v1_new_iv ) ; if ( st -> st_v1_iv. len < e -> enc_blocksize ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; st -> st_v1_iv. len = e -> enc_blocksize ; } else if ( st -> st_v1_iv. len < e -> enc_blocksize ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> decryption <S2SV_blank> blocksize"" ) ; st -> st_v1_iv. len = e -> enc_blocksize ; } else if ( st -> st_v1_iv. len < e -> enc_blocksize ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> decryption <S2SV_blank> blocksize"" ) ; st -> st_v1_iv. len = e -> enc_blocksize ; st -> st_v1_iv. len = e -> enc_blocksize",0
978,<S2SV_ModStart> u4_num_Bytes ) { if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else { if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; },0
979,"<S2SV_ModStart> int x, y, i <S2SV_ModEnd> ; old_width = <S2SV_ModStart> ]. height ; tilemap = malloc ( x_size * y_size * sizeof ( struct map_tile ) ) ; if (! tilemap ) return false ; for ( x = 0 ; x < x_size ; ++ x ) { for ( y = 0 ; y < y_size ; ++ y ) { if ( x < old_width && y < old_height ) { tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; } else { tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * y_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tile",0
980,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ) ; ND_TCHECK ( ( length + 1 ) & 3 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK ( ( length + 1 ) & 3 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK ( ( length + 1 ) & 3 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK ( ( length + 1 ) & 3 ) ; return 0 ;,0
981,<S2SV_ModStart> <S2SV_null> static char <S2SV_ModEnd> * print_string ( <S2SV_ModStart> item ) { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> valuestring ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
982,"<S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img,",1
983,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> ++ ; ret = <S2SV_ModStart> + 1, ""prestring=%s <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
984,"<S2SV_ModStart> * buf ; unsigned int chunk_size = chunk_num * chm -> chunk_size ; if ( chunk_size > chm -> chunk_size ) { self -> error = MSPACK_ERR_OVERFLOW ; return NULL ; } chunk_size = chunk_num * chm -> chunk_size ; if ( chunk_size > chm -> chunk_size ) { self -> error = MSPACK_ERR_OVERFLOW ; return NULL ; } if ( chunk_size > chm -> chunk_size ) { self -> error = MSPACK_ERR_OVERFLOW ; return NULL ; } if ( sys -> read ( fh, buf, chunk_size )!= ( int ) chunk_size ) { self -> error = MSPACK_ERR_READ ; sys -> free ( buf ) ; return NULL ; } if ( sys -> seek ( fh, chunk_size, MSPACK_SYS_SEEK_START ) ) { self -> error = MSPACK_ERR_SEEK ; sys -> free ( buf ) ; return NULL ; } if ( sys -> read ( fh, buf, chunk_size )!= ( int ) chunk_size ) ) { self -> error = MSPACK_ERR_SEEK ;",0
985,"<S2SV_ModStart> = fake_used_mask ; list_for_each_entry ( leader, & leader -> sibling_list, group_entry ) { if ( sibling -> group_leader!= leader ) return - EINVAL ; list_for_each_entry ( sibling, & sibling -> sibling_list, group_entry ) { if ( sibling -> group_leader!= leader ) return - EINVAL ; list_for_each_entry ( sibling, & sibling -> sibling_list, group_entry ) { if (! validate_event ( & fake_pmu, sibling ) ) return - EINVAL ; } if (! validate_event ( & fake_pmu, sibling ) ) return - EINVAL ; } list_for_each_entry ( sibling, & sibling -> sibling_list, group_entry ) { if (! validate_event ( & fake_pmu, sibling ) ) return - EINVAL ; } list_for_each_entry ( sibling, & sibling -> sibling_list, group_entry ) { if (! validate_event ( & fake_pmu, sibling ) ) return - EINVAL ; } if (! validate_event ( & fake_pmu",0
986,<S2SV_ModStart> cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; term. rows0 = rows0 ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; term. rows0 = rows0 ; term. cols0 = rows0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; term. rows0 = rows0 ; term. rows0 = rows0 ; term. cols0 =,0
987,"<S2SV_ModStart> ; if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_DEBUG, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported"" ) ; s -> avctx -> studio_profile = 0 ; } else if ( s -> avctx -> studio_profile ) { av_log ( s -> avctx, AV_LOG_DEBUG, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported"" ) ; s -> avctx -> studio_profile = 1 ; } else { if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_DEBUG, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported"" ) ; s -> avctx -> studio_profile = 0 ; } else if ( s -> avctx -> studio_profile ) { av_log ( s -> avctx, AV_LOG_DEBUG, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported"" ) ; s -> avctx -> studio_profile = 0 ; } else if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_DEBUG, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported"" ) ; s -> avctx",0
988,<S2SV_ModStart> ; if ( nsops > INT_MAX / sizeof ( * sops ) ) return - EINVAL ; if (,0
989,<S2SV_ModStart> ] ; for ( r = 0 ; r < rows ; r ++ ) s [ i ] = s [ r - 1 ] ; for ( r = 0 ; r < rows ; r ++ ) s [ i ] = s [ r - 1 ] ; for ( r = 0 ; r < rows ; r ++ ) s [ i ] = s [ r - 1 ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] - s [ c - 8 ] ; int sumsq = s [ c + 7 ] + s [ c - 8 ] ; sum += s [ c ] ; sum += s [ c ] ; sum += s [ c ] ; sumsq += x * y ; d [ c & 15 ] = d [ ( c - 8 ) & 15 ] ; if ( sumsq * 15 < flimit ) { d [ c & 15 ],0
990,"<S2SV_ModStart> blksz ) ; if ( fileblock >= ( grub_disk_addr_t ) EXT2_BLOCK_SIZE ( data ) ) { grub_error ( GRUB_ERR_BAD_FS, ""file <S2SV_blank> block <S2SV_blank> too <S2SV_blank> large"" ) ; return - 1 ; }",0
991,"<S2SV_ModStart> parent ) ; if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX = i -> parent -> width - i -> width ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif i -> posY = i -> parent -> height - i -> height ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX =",0
992,"<S2SV_ModStart> ; if ( nelements > CDF_MAX_ENTRIES ) { DPRINTF ( ( ""CDF_MAX_ENTRIES <S2SV_blank> exceeded: <S2SV_blank> %u\\n"", nelements ) ) ; goto out ; } <S2SV_ModStart> ; if ( nelements > CDF_MAX_ENTRIES ) { DPRINTF ( ( ""CDF_MAX_ENTRIES <S2SV_blank> exceeded: <S2SV_blank> %u\\n"", nelements ) ) ; goto out ; } nelements = CDF_GET_ENTRIES ( p ) ; if ( nelements > CDF_MAX_ENTRIES ) { DPRINTF ( ( ""CDF_MAX_ENTRIES <S2SV_blank> exceeded: <S2SV_blank> %u\\n"", nelements ) ) ; goto out ; } if ( nelements > CDF_MAX_ENTRIES ) { DPRINTF ( ( ""CDF_MAX_ENTRIES <S2SV_blank> exceeded: <S2SV_blank> %u\\n"", nelements ) ) ; goto out ; } <S2SV_ModStart> ) ) ; if ( nelements > CDF_MAX_ENTRIES ) { DPRINTF ( ( ""CDF_MAX_ENTRIES <S2SV_blank> exceeded: <S2SV_blank> %u\\n"", n",0
993,"<S2SV_ModStart> ; if ( ( flags & RE_FLAGS_BACKWARDS ) && ( input < input_data ) ) { FAIL_ON_ERROR ( callback ( input + 1, bytes_matched, flags, callback_args ) ) ; break ; } <S2SV_ModStart> ; if ( ( flags & RE_FLAGS_BACKWARDS ) && ( input < input_data ) ) { FAIL_ON_ERROR ( callback ( input + 1, bytes_matched, flags, callback_args ) ) ; break ; } if ( ( flags & RE_FLAGS_BACKWARDS ) && ( input < input_data ) ) { FAIL_ON_ERROR ( callback ( input + 1, bytes_matched, flags, callback_args ) ) ; break ; } <S2SV_ModStart> ; if ( ( flags & RE_FLAGS_BACKWARDS ) && ( input < input_data ) ) { FAIL_ON_ERROR ( callback ( input + 1, bytes_matched, flags, callback_args ) ) ; break ; } if ( ( flags & RE_FLAGS_BACKWARDS ) && ( input < input_data ) ) { FAIL_ON_ERROR ( callback ( input + 1, bytes_matched, flags, callback_args ) ) ; break",0
994,"<S2SV_ModStart> char * str, size_t len <S2SV_ModStart> { case LEX_EOF : strncpy ( str, ""EOF"", len ) ; return ; case LEX_ID : strncpy ( str, ""ID"", len ) ; return ; case LEX_INT : strncpy ( str, ""INT"", len ) ; return ; case LEX_FLOAT : strncpy ( str, ""FLOAT"", len ) ; return ; case LEX_STR : strncpy ( str, ""STRING"", len ) ; return ; case LEX_TEMPLATE_LITERAL : strncpy ( str, ""TEMPLATE <S2SV_blank> LITERAL"", len ) ; return ; case LEX_REGEX : strncpy ( str, ""REGEX"", len ) ; return ; case LEX_UNFINISHED_TEMPLATE_LITERAL : strncpy ( str, ""UNFINISHED <S2SV_blank> TEMPLATE <S2SV_blank> LITERAL"", len ) ; return ; case LEX_REGEX : strncpy ( str, ""REGEX"", len ) ; return ; case LEX_UNFINISHED_REGEX : strncpy ( str, ""UNFINISHED <S2SV_blank> REGEX"", len ) ; return ; case LEX_UNFINISHED_COMMENT",0
995,"<S2SV_ModStart> mnt_instance ) ; if ( unlikely (! ( mnt -> mnt. mnt_flags & MNT_INTERNAL ) ) ) { init_task_work ( & mnt -> mnt_rcu, __cleanup_mnt ) ; if (! task_work_add ( task, & mnt -> mnt_rcu, true ) ) return ; } init_task_work ( & mnt -> mnt_rcu, __cleanup_mnt ) ; if (! ( task -> flags & PF_KTHREAD ) ) { init_task_work ( & mnt -> mnt_rcu, __cleanup_mnt ) ; if (! task_work_add ( & mnt -> mnt_rcu, true ) ) return ; } if ( llist_add ( & mnt -> mnt_llist, & delayed_mntput_list ) ) schedule_delayed_work ( & delayed_mntput_work, 1 ) ;",0
996,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
997,"<S2SV_ModStart> return 0 ; } if ( jas_stream_peekc ( pkthdrstream )!= EOF ) { jas_eprintf ( ""bad <S2SV_blank> packet <S2SV_blank> offset <S2SV_blank> %08ld\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_prg ( pi ), jpc_pi_cmptno ( pi ), jpc_pi_rlvlno ( pi ), jpc_pi_prcno ( pi ) ) ; } if ( jas_stream_peekc ( pkthdrstream )!= EOF ) { jas_eprintf ( ""bad <S2SV_blank> packet <S2SV_blank> offset <S2SV_blank> %08ld\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_prg ( pi ), jpc_pi_cmptno ( pi ), jpc_pi_rlvlno ( pi ), jpc_pi_prcno ( pi ), jpc_pi_lyrno ( pi ) ) ) ; return - 1 ; }",0
998,"<S2SV_ModStart> int err = - EIO <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> * iinfo ; struct udf_inode * udf_inode = UDF_I ( inode ) ; struct udf_inode * udf_inode = UDF_I ( inode ) ; <S2SV_ModStart> ; out : if ( PageError ( page ) ) { up_read ( & iinfo -> i_data_sem ) ; SetPageError ( page ) ; kunmap ( page ) ; return err ; } up_read ( & iinfo -> i_data_sem ) ; SetPageUptodate ( page ) ; unlock_page ( page ) ; return 0 ; } up_read ( & iinfo -> i_data_sem ) ; SetPageError ( page ) ; if ( UDF_I ( inode ) -> i_alloc_type == ICBTAG_FLAG_AD_IN_ICB ) { symlink = iinfo -> i_ext. i_data + iinfo -> i_lenEAttr ; } else { bh = sb_bread ( inode -> i_sb, pos ) ; if (! bh ) goto out ; symlink = bh -> b_data ; } brelse ( bh ) ; up_read ( &",0
999,<S2SV_ModStart> else if ( vcpu -> arch. x2apic_base & X2APIC_DISABLED ) { if ( is_noncanonical_address ( vcpu -> arch. apic_base ) ) msr_bitmap = vmx_msr_bitmap_noncanonical_x2apic ; else if ( is_noncanonical_address ( vcpu -> arch. apic_base ) ) msr_bitmap = vmx_msr_bitmap_noncanonical_x2apic ; else if ( vcpu -> arch. apic_base & X2APIC_ENABLE ) { if ( is_noncanonical_address ( vcpu -> arch. apic_base ) ) msr_bitmap = vmx_msr_bitmap_noncanonical_x2apic ; else if ( is_noncanonical_address ( vcpu -> arch. apic_base ) ) msr_bitmap = vmx_msr_bitmap_noncanonical ; else if ( is_noncanonical_address ( vcpu -> arch. apic_base ) ) msr_bitmap = vmx_msr_bitmap_noncanonical_x,0
1000,"<S2SV_ModStart> ( ent!= NULL && * ent!= NULL <S2SV_ModStart> cleanup ; } st = populate_policy ( context, ld, ent, pol_name, * policy ) ; if ( st!= 0 ) { if ( * policy!= NULL ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; goto cleanup ; } ldap_msgfree ( result ) ; if ( st!= 0 ) { krb5_ldap_put_handle_to_pool ( ldap_context, ldap_server_handle ) ; return st ; } st = populate_policy ( context, ld, ent, pol_name, * policy ) ; if ( st!= 0 ) { if ( * policy!= NULL ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; goto cleanup ; } ldap_msgfree ( result ) ; if ( st!= 0 ) { krb5_ldap_free_handle_to_pool ( ldap_context, ldap_server_handle ) ; return st ; } <S2SV_ModEnd> cleanup : ldap_msgfree",0
1001,"<S2SV_ModStart> ) ) { if ( ps_codec -> i4_pps_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; else ps_pps -> i1_sps_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 2 ) ; ps_pps -> i1_sps_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 2 ) ; ps_pps -> i1_sps_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 2 ) ; ps_pps -> i1_sps_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 2 ) ; ps_pps -> i1_sps_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 2 ) ; ps_pps -> i",0
1002,"<S2SV_ModStart> ) ) { switch ( c ) { case'<S2SV_blank>': psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'e' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'E' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'T' : trunc_8to4 = SF_FALSE ; break ; case 'T' : trunc_8to4 = va_arg ( argptr, unsigned int ) ; header_put_marker ( psf, data ) ; count += 1 ; break ; case '3' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_3byte ( psf, data ) ; } else { header_put_le_3byte ( psf, data ) ; } ; count += 3 ; break ; case '4' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_3byte ( psf, data ) ; } else { header",0
1003,<S2SV_ModStart> ; if ( d -> msg_len < CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) { return - EINVAL ; } if ( d -> msg_len > ( CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) ) return - EINVAL ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGOFS + i ] = d -> msg [ i ] ; state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN ] = d -> msg_len ; if ( toneburst == CX24116_DISEQC_TONEOFF ) state -> dsec_cmd. args [ CX24116_DISEQC_BURST ] = 0 ; else state -> dsec_cmd. args [ CX24116_DISEQC_BURST ] = 0 ; else if ( toneburst == CX24116_DISEQC_TONECACHE ) state -> dsec_cmd. args [ CX,0
1004,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
1005,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1006,"<S2SV_ModStart> 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> link <S2SV_blank> file\\n"" ) ; return 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } if ( copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; }",0
1007,"<S2SV_ModStart> int num_items_scanned ; guint <S2SV_ModEnd> pkt_len ; int <S2SV_ModStart> 0 ) ; if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len > WTAP_MAX_PACKET_LEN ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len > WTAP_MAX_PACKET_LEN ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len > WTAP_MAX_PACKET_LEN ) { * err = WTAP_ERR_BAD_FILE ;",0
1008,"<S2SV_ModStart> * cskb ; struct iucv_message_info * info ; <S2SV_ModStart> = 0 ; info = msg -> msg_name ; if ( info ) { atomic_sub ( len, & iucv -> msg_namelen ) ; memset ( info, 0, sizeof ( info ) ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ) { atomic_sub ( len, & iucv -> msg_namelen ) ; if (! ( flags & MSG_PEEK ) ) skb_queue_head ( & sk -> sk_receive_queue, skb ) ; return - EFAULT ; } if ( flags & MSG_TRUNC ) { msg -> msg_flags |= MSG_TRUNC ; msg -> msg_flags |= MSG_EOR ; } if (! ( flags & MSG_PEEK ) ) skb_queue_head ( & sk -> sk_receive_queue, skb ) ; if ( err ) { atomic_sub ( len, & iucv -> msg_namelen ) ; if (! ( flags & MSG_PEEK ) ) skb_queue_head ( & sk -> sk_receive_queue, skb ) ; return err ; }",0
1009,"<S2SV_ModStart> case IS_STRING : if ( zend_symtable_find ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_symtable_update ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, & data, sizeof ( data ), NULL ) ; break ; case IS_LONG : if ( zend_hash_index_find ( ht, Z_LVAL_P ( key ), ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_hash_index_update ( ht, Z_LVAL_P ( key ), Z_STRLEN_P ( key ) + 1, & data, sizeof ( data ), NULL ) ; break ; case IS_LONG : if ( zend_hash_index_find ( ht, Z_LVAL_P ( key ), ( void * * ) & old_",0
1010,<S2SV_ModStart> ) ) ; strncpy <S2SV_ModEnd> ( link_info.,0
1011,<S2SV_ModStart> } else { if (! <S2SV_ModStart> ) ) { if (! ( flags & SPLICE_F_NONBLOCK ) ) { ret = - EAGAIN ; break ; } <S2SV_ModStart> } else { if (! ( flags & SPLICE_F_GIFT ) ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; obuf -> len = len ; opipe -> nrbufs ++ ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; obuf -> len = len ; opipe -> nrbufs ++ ; opipe -> curbuf = ( opipe -> buffers - 1 ) & ( opipe -> buffers - 1 ) ; } } else { * obuf = * obuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; obuf -> len = len ; opipe -> nrbufs ++ ; opipe -> curbuf = ( opipe -> buffers - 1 ) & ( opipe -> buffers - 1 ) ; },0
1012,"<S2SV_ModStart> ) ; if (! jv_mem_realloc_safe ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ) { jv_err ( ""Couldn't <S2SV_blank> realloc <S2SV_blank> tokenbuf\\n"" ) ; p -> tokenlen = sizeof ( p -> tokenbuf ) ; p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ; return ; } if (! jv_mem_realloc_safe ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ) { jv_err ( ""Couldn't <S2SV_blank> realloc <S2SV_blank> tokenbuf\\n"" ) ; p -> tokenlen = sizeof ( p -> tokenbuf ) ; p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ; return ; } if (! jv_mem_realloc_safe ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ) { jv_err ( ""Couldn't <S2SV_blank> realloc <S2SV_blank> tokenbuf\\n"" )",0
1013,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> : return vp9_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> : return vp9_mse16x8 <S2SV_ModEnd> ; default : <S2SV_ModStart> : return vp9_mse8x8 <S2SV_ModEnd> ; } },0
1014,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1015,"<S2SV_ModStart> ; if ( ff_get_extradata ( s, st -> codecpar, pb, st -> codecpar -> extradata_size ) < 0 ) return AVERROR ( ENOMEM ) ; if ( ff_get_extradata ( s, st -> codecpar, pb, st -> codecpar -> extradata_size ) < 0 ) return AVERROR ( ENOMEM <S2SV_ModStart> ENOMEM ) ; if ( ff_get_extradata ( s, st -> codecpar, pb, st -> codecpar -> extradata_size ) < 0 ) return AVERROR ( ENOMEM <S2SV_ModStart> ENOMEM ) ; if ( ff_get_extradata ( s, st -> codecpar, pb, st -> codecpar -> extradata_size ) < 0 ) return AVERROR ( ENOMEM <S2SV_ModStart> ENOMEM ) ; if ( ff_get_extradata ( s, st -> codecpar, pb, st -> codecpar -> extradata_size ) < 0 ) return AVERROR ( ENOMEM <S2SV_ModStart> ENOMEM ) ; if ( ff_get_extradata ( s, st -> codecpar, pb, st -> codecpar -> extrad",0
1016,<S2SV_ModStart> { if ( comp -> dx < 0 || comp -> dy < 0 || comp -> dx > ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dy >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dy >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dy >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dy >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dy >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dy >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dy >> ( OPJ_UINT32 ) ( comp -> dx >>,0
1017,<S2SV_ModStart> ; } } if ( padata -> pa_type == KRB5_PADATA_DHKEY_INFO ) { char * encoded_dhkey_info = NULL ; krb5_data * encoded_dhkey_info = NULL ; if ( dhkey_info ) { encoded_dhkey_info = & padata -> pa_dhkey_info [ i ] ; if (! encoded_dhkey_info ) retval = KRB5_ERR_DHKEY_INFO ; if ( retval!= KRB5_ERR_DHKEY_INFO ) retval = KRB5_ERR_DHKEY_INFO ; if ( retval!= KRB5_ERR_DHKEY_INFO ) retval = KRB5_ERR_DHKEY_INFO ; if ( encoded_dhkey_info ) retval = KRB5_ERR_DHKEY_INFO ; if ( retval!= KRB5_ERR_DHKEY_INFO ) retval = KRB5_ERR_DHKEY_INFO ; if ( retval!= KRB5_ERR_DHKEY_INFO ) retval = KRB5_ERR_DHKEY_INFO ; if ( retval!= KRB5_ERR_DHKEY_INFO ) retval,0
1018,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1019,"<S2SV_ModStart> -> stratum_port ; if ( strchr ( url, ':' ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> url <S2SV_blank> without <S2SV_blank> port <S2SV_blank> \'%s\'"", url ) ; return false ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ( address, ""%s:%s"", url, port ) ; if (! extract_sockaddr ( address, & sockaddr_url, & stratum_port ) ) return false ; applog ( LOG_WARNING, ""Stratum <S2SV_blank> reconnect <S2SV_blank> requested <S2SV_blank> from <S2SV_blank> pool <S2SV_blank> %d <S2SV_blank> to <S2SV_blank> %s"", pool -> pool_no, address ) ; clear_pool_work ( pool ) ; applog ( LOG_WARNING, ""Stratum <S2SV_blank> reconnect <S2SV_blank> requested <S2SV_blank> from <S2SV_blank> pool <S2SV_blank> %d <S2SV_blank> to <S2SV_blank> %s"", pool -> pool_no, address ) ; free ( tmp ) ; pool -> stratum_port = stratum_port ;",0
1020,"<S2SV_ModStart> ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_invalid_setup ) ; <S2SV_ModStart> ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_invalid_setup ) ; <S2SV_ModStart> -> blocksize_0 ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_invalid_setup ) ; <S2SV_ModStart> -> blocksize_0 ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_invalid_setup ) ; <S2SV_ModStart> -> blocksize_0 ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_invalid_setup ) ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_invalid_setup ) ;",0
1021,<S2SV_ModStart> return 0 ; if ( head -> iov_len + hdr > rqstp -> rq_arg. page_len ) return 0 ; dlen = head -> iov_len + rqstp -> rq_arg. page_len - hdr ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; rqstp -> rq_vec [ 0 ]. iov_base = ( void * ) p ; rqstp -> rq_vec [ 0 ]. iov_len = dlen ; v = 0 ; while ( len > rqstp -> rq_vec [ v ]. iov_len ) { len -= rqstp -> rq_vec [ v ]. iov_len ; v ++ ; len -= rqstp -> rq_vec [ v ]. iov_len ; len -= rqstp -> rq_vec [ v ]. iov_len ; v ++ ; rqstp -> rq_vec [ v ]. iov_len = PAGE_SIZE ; },0
1022,<S2SV_ModStart> item ) ; <S2SV_ModEnd> unsigned long tmp <S2SV_ModStart> - EINVAL ; spin_lock_irq ( & cluster -> cl_nodes_lock ) ; <S2SV_ModStart> cl_nodes_lock ) ; spin_unlock_irq ( & cluster -> cl_nodes_lock ) ;,0
1023,"<S2SV_ModStart> flags ) ; <S2SV_ModEnd> v4l2_buf = to_vb2_v4l2_buffer <S2SV_ModStart> vb2_buf ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame",0
1024,<S2SV_ModStart> size ) { if ( size > ZMALLOC_MAX_SIZE ) { zmalloc_oom_handler ( ZMALLOC_MAX_SIZE ) ; update_zmalloc_stat_alloc ( ZMALLOC_MAX_SIZE ) ; return NULL ; },0
1025,"<S2SV_ModStart> ssize_t count ; size_t written = 0 ; <S2SV_ModStart> ssize_t count ; written = write ( psf -> file. filedes, ( ( const char * ) ptr ) + total, written ) ; if ( written > ( SENSIBLE_SIZE - total ) ) count = write ( psf -> file. filedes, ( ( const char * ) ptr ) + total, written ) ; if ( count > 0 ) count = write ( psf -> file. filedes, ( ( const char * ) ptr ) + total, count ) ; if ( count > 0 ) count = write ( psf -> file. filedes, ( ( const char * ) ptr ) + total, count ) ; if ( count == - 1 ) break ; psf_log_syserr ( psf, errno ) ; count = write ( psf -> file. filedes, ( ( const char * ) ptr ) + total, count ) ; if ( count > 0 ) count = write ( psf -> file. filedes, ( ( const char * ) ptr ) + total, count ) ; if ( count > 0 ) count = write ( psf -> file. filedes, ( ( const char * ) ptr ) + total, count )",0
1026,<S2SV_ModStart> == sip &&<extra_id_1>serviceId == EXTRACT_32BITS ( <S2SV_ModStart> -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> dport == sport ) { rx_cache_hint = i ; * opcode = rxent -> opcode ; return ( 1 ) ; } if ( ++ i >= RX_CACHE_SIZE ) i = 0 ; while ( i!= rx_cache_hint ) { if ( rxent -> callnum == EXTRACT_32BITS ( & rxh -> callNumber ) && rxent -> server. s_addr == sip && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> dport == sport ) { rx_cache_hint = i ; * opcode = rxent -> opcode ; return ( 0 ) ; } if ( ++ i >= RX_CACHE_SIZE ) i = 0 ; while ( i!= rx_cache_hint ) { if ( rxent -> callnum == EXTRACT_32BITS ( & rxh -> callNumber ) && rxent -> client. s_addr == clip && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent ->,0
1027,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, INFO, ""info: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> = <S2SV_blank> %s\\n"", adhoc_start -> ssid ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ;",0
1028,"<S2SV_ModStart> ) ) { xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED, XFS_RANDOM_ATTR_SHORTFORM ) ) ; xfs_trans_log_inode ( dp, XFS_ERROR ( EFSCORRUPTED, XFS_RANDOM_ATTR_SHORTFORM ), dp, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, dp, XFS_ERROR ( EFSCORRUPTED, dp, XFS_ERROR ( EFSCORRUPTED, XFS_RANDOM_ATTR_SHORTFORM ) ) ) ; xfs_trans_log_inode ( dp, XFS_ERROR ( EFSCORRUPTED, XFS_RANDOM_ATTR_SHORTFORM ), dp, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, X",0
1029,"<S2SV_ModStart> r ) { int rc ; if ( a -> signature == NULL ) return ( - 1 ) ; rc = ASN1_item_verify ( ASN1_ITEM_rptr ( X509_CINF ), a -> signature, a -> cert_info, r ) ; if ( rc!= 1 ) return rc ; return ( ASN1_item_verify ( ASN1_ITEM_rptr ( X509_CINF ), a -> sig_alg, a -> signature, a -> cert_info, r ) ) ;",0
1030,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> hrtimer_start ( &,0
1031,"<S2SV_ModStart> ; struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; void * <S2SV_ModStart> ) ; switch ( req -> mode ) { case L2CAP_MODE_STREAMING : rfc. mode = L2CAP_MODE_STREAMING ; rfc. txwin_size = L2CAP_DEFAULT_TX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) ; break ; } <S2SV_ModEnd> req -> dcid",0
1032,"<S2SV_ModStart> r ) { if ( r < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1033,"<S2SV_ModStart> = 0 ; if ( s -> chunksize == - 1 ) { av_log ( h, AV_LOG_ERROR, ""No <S2SV_blank> chunk <S2SV_blank> in <S2SV_blank> HTTP <S2SV_blank> request\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
1034,<S2SV_ModStart> return ERROR_INCOMPLETE_FRAME ; } if ( ( ps_dec -> u4_total_mbs_coded == 0 ) || ( ( ps_dec -> u4_total_mbs_coded > ps_dec -> u4_max_mbs_coded ) || ( ( ps_dec -> u4_total_mbs_coded > ps_dec -> u4_max_mbs_coded ) || ( ( ps_dec -> u4_total_mbs_coded > ps_dec -> u4_max_mbs_coded ) || ( ( ps_dec -> u4_total_mbs_coded == 0 ) || ( ps_dec -> u4_total_mbs_coded > ps_dec -> u4_max_mbs_coded ) || ( ( ps_dec -> u4_total_mbs_coded > ps_dec -> u4_max_mbs_coded ) || ( ps_dec -> u4_total_mbs_coded > ps_dec -> u4_max_mbs_coded ) || ( ps_dec -> u4_total_mbs_coded > ps_dec -> u4,0
1035,<S2SV_ModStart> tok ) ; if ( pair == NULL ) return ;,0
1036,"<S2SV_ModStart> = buf ; } if ( seed ) { err = crypto_rng_set_seed ( tfm, seed ) ; if ( err < 0 ) { err = - EINVAL ; crypto_rng_set_seed ( tfm, NULL, slen ) ; if ( err < 0 ) { err = - EINVAL ; crypto_rng_set_seed ( tfm, NULL, slen ) ; if ( err < 0 ) { err = - EINVAL ; crypto_rng_set_seed ( tfm, NULL, slen ) ; } } else err = crypto_rng_set_seed ( tfm, seed, slen ) ; crypto_rng_set_seed ( tfm, NULL, slen ) ; if ( err < 0 ) { err = - EINVAL ; crypto_rng_set_seed ( tfm, NULL, slen ) ; if ( err ) crypto_rng_set_seed ( tfm, NULL, slen ) ; crypto_rng_set_seed ( tfm, NULL, slen ) ; }",0
1037,<S2SV_ModStart> = uid ; <S2SV_ModEnd> spin_lock_irq ( & <S2SV_ModStart> new -> count = 1 <S2SV_ModEnd> ; spin_lock_irq ( <S2SV_ModStart> } if ( <S2SV_ModEnd> ucounts -> count <S2SV_ModStart> ucounts -> count == INT_MAX ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; return ucounts ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1038,<S2SV_ModStart> ; if ( msg_sys. msg_namelen > msg_sys. msg_namelen ) { err = - EINVAL ; break ; },0
1039,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1040,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> prefetch_table ( const <S2SV_ModStart> len ) { return <S2SV_ModEnd> ( void ) <S2SV_ModStart> 32 ] ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1041,"<S2SV_ModStart> ) ; } if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank> %d, <S2SV_blank> depth: <S2SV_blank> %d"", inode -> i_ino, depth ) ; goto out2 ; }",0
1042,"<S2SV_ModStart> * open_stateid, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode &= ( FMODE_READ | FMODE_WRITE ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) ) { rcu_read_lock ( ) ; deleg_cur = rcu_dereference ( nfsi -> delegation ) ; if ( deleg_cur == NULL ) goto no_delegation ; spin_lock ( & deleg_cur -> lock ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE )!= fmode ) goto no_delegation_unlock ; nfs_mark_delegation_referenced ( deleg_cur ) ; __update_open_stateid ( state, open_stateid, & deleg_cur -> stateid, fmode ) ; ret = 1 ; no_delegation_unlock : spin_unlock ( & deleg_cur -> lock ) ; no_delegation : rcu_read_unlock ( ) ; if ( ret && open_stateid!= NULL ) { __update_open_stateid ( state, open_stateid, & deleg_cur -> stateid,",0
1043,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1044,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1045,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> oidc_scrub_headers ( request_rec,0
1046,"<S2SV_ModStart> int * out_rate_sum, int64_t * out_dist_sum ) { int i ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; <S2SV_ModStart> int sse ; if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { * out_rate_sum = ( int ) 0 ; * out_dist_sum = ( int ) 0 ; * out_dist_sum = ( int ) 0 ; } else { * out_rate_sum = ( int ) 0 ; * out_dist_sum = ( int ) 0 ; } if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { int64_t rate ; int64_t dist ; int64_t square_error ; int quantizer ; if ( pd -> dequant [ 1 ] >> 3 ) rate = ( sse * pd -> dequant [ 1 ] >> 3 ) ; else rate = 0 ; dist = ( sse * pd -> dequant [ 1 ] >> 3 ) ; else rate = 0 ; dist = ( sse * pd -> dequant [ 1 ] >> 3 ) ; if ( cpi -> speed",0
1047,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1048,"<S2SV_ModStart> ( ndo, ""%s"", esis_pdu_type, ( esis_pdu_type & ESIS_PDU_TYPE_MASK ) <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( ndo, ""%s"", esis_pdu_type, ( esis_pdu_type & ESIS_PDU_TYPE_MASK ) ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"" ) ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"" ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"" ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"" ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"" ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%",0
1049,"<S2SV_ModStart>!= '\\0' ) { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; <S2SV_ModStart> } if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; <S2SV_ModStart> } if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; <S2SV_ModStart> ) strcpy ( <S2SV_ModEnd> * ret_username, <S2SV_ModStart> ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; * ret_username = username",0
1050,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { return vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> -> tree_probs ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1051,<S2SV_ModStart> uint32_t backup_handle ; if ( unlikely ( req -> mip_levels > DRM_VMW_MAX_MIP_LEVELS ) ) return - EINVAL ; size = ttm_round_pot ( sizeof ( * user_srf ) ) + 128 ; backup_handle = ttm_round_pot ( sizeof ( * backup_handle ) ) + 128 ; if ( unlikely ( backup_handle > ( tfile -> f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_,0
1052,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct desc_struct <S2SV_ModEnd> * get_desc ( <S2SV_ModStart> SEGMENT_LDT ) { <S2SV_ModEnd> struct desc_struct * <S2SV_ModStart> struct desc_struct * desc <S2SV_ModEnd> ; mutex_lock ( <S2SV_ModStart> ldt && sel < current -> mm -> context. ldt -> nr_entries ) desc = & current -> mm -> context. ldt -> entries [ sel ] ; mutex_unlock ( & current -> active_mm -> context. lock ) ; return desc <S2SV_ModEnd> ; } # <S2SV_ModStart> SEGMENT_LDT ) { <S2SV_ModEnd> struct desc_struct * <S2SV_ModStart> ( ldt && sel < current -> mm -> context. ldt -> nr_entries ) desc = & ldt -> entries [ sel ] ; mutex_unlock ( & current -> active_mm -> context. lock ) ; return desc <S2SV_ModEnd> ; } <S2SV_null>,0
1053,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
1054,"<S2SV_ModStart> struct sctp_sockaddr_entry * laddr <S2SV_ModEnd> ; union sctp_addr <S2SV_ModStart> ; __u8 matchlen <S2SV_ModEnd> ; __u8 bmatchlen <S2SV_ModStart> ; } dst = ip6_dst_lookup_flow ( sk, fl6, NULL, false ) ; if (! dst ) { pr_debug ( ""%s: <S2SV_blank> dst=%pI6 <S2SV_blank> - <S2SV_blank> "", __func__, & fl6 -> saddr ) ; goto out ; } if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_MULTICAST ) fl6 -> flowi6_oif = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_MULTICAST ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6",0
1055,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1056,"<S2SV_ModStart> buf2 = smb_fdata2 <S2SV_ModEnd> ( ndo,",0
1057,<S2SV_ModStart> ; if ( client -> priv -> connection_lost ) { g_source_remove ( client -> priv -> connection_lost ) ; client -> priv -> connection_lost = 0 ; } else if ( client -> priv -> connection_lost ) { g_source_remove ( client -> priv -> connection_lost ) ; client -> priv -> connection_lost = 0 ; } g_source_add ( client -> priv -> connection_lost ) ; g_source_add ( client -> priv -> connection_lost ) ; g_source_add ( client -> priv -> connection_lost ) ; g_source_add ( client -> priv -> connection_lost = 0 ; * mask_ret |= SmsSaveYourselfRequestProcMask ; callbacks_ret -> save_yourself_phase2_request. callback = save_yourself_phase2_request_callback ; callbacks_ret -> save_yourself_phase2_request. manager_data = client ; * mask_ret |= SmsSaveYourselfP2RequestProcMask ; callbacks_ret -> save_yourself_phase2_request. manager_data = client ; * mask_ret,0
1058,"<S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> ; for ( ie = io + ps -> nid ; ie < ps -> nid &&! ND_TTEST ( * ie ) ; ++ ie ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & ie -> id ), EXTRACT_32BITS ( & ie -> off ) ) ) ; io = ( struct id_off * ) ie ; ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & ie -> page. p_sid ), EXTRACT_32BITS ( & ie -> page. p_uid ) ) ) ; io = ( struct id_off * ) ie ; ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & ie -> off ) ) ) ; io = ( struct id_off * ) ie ; ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & ie -> id ), EXTRACT_32",0
1059,"<S2SV_ModStart> ERROR_INVALID_LENGTH ; } header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> length ) ; ksz8851SetBit ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK",0
1060,"<S2SV_ModStart> NULL ) ; rb_ary_push ( self, rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ), rb_",0
1061,"<S2SV_ModStart> assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> slot <S2SV_blank> %d\\n"", i ) ; edit -> dead_leaf = node -> slots [ i ] ; edit -> adjust_count_on = node ; return true ; } <S2SV_ModStart> assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> slot <S2SV_blank> %d\\n"", i ) ; edit -> dead_leaf = node -> slots [ i ] ; edit -> adjust_count_on = node ; pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [replace]\\n"", __func__ ) ; return true ; }",0
1062,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
1063,<S2SV_ModStart> ; # endif # ifdef MONO_HAS_SEMAPHORES g_mutex_lock ( & finalizer_sem ) ; # else g_mutex_unlock ( & finalizer_sem ) ;,0
1064,"<S2SV_ModStart> x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_0, x_1, x_2, x_3 ; WORD32 x_4, x_5, x_6, x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; x_0 = * x0 ++ ; x_1 = * x0 ++ ; x_2 = * x0 ++ ; x_3 = * x0 ++ ; x_4 = * x0 ++ ; x_5 = * x0 ++ ; x_6 = * x0 ++ ; x_7 = * x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_a = x_0 + x_2 ; x_b = x_1 + x_3 ; n01 = x_0 - x_2 ; n02 = x_1 + x_3 ; n12 = x_0 - x_",0
1065,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
1066,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1067,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1068,"<S2SV_ModStart> ; if ( i + size > len ) { r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; r_anal_esil_set_pc ( esil, core -> offset ) ; return ; } <S2SV_ModStart> ; if ( i + size > len ) { r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; r_anal_esil_set_pc ( esil, core -> offset ) ; r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; r_anal_esil_set_pc ( esil, core -> offset ) ; return ; } <S2SV_ModStart> ; if ( i + size > len ) { r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; r_anal_esil_set_",0
1069,"<S2SV_ModStart> int width, height, target_width, target_height ; printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fp",0
1070,"<S2SV_ModStart> ; while ( readw ( chip -> DSPQ + JQS_wTail )!= readw ( chip -> DSPQ + JQS_wHead ) ) { u16 wTmp ; snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wHead ) ) ) ; wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp < readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( w",0
1071,"<S2SV_ModStart> OPCODE_DESC * opcode_desc ; if ( len < 1 ) { r_strbuf_setf ( & op -> esil, """" ) ; return NULL ; } <S2SV_ModStart> 0 ) { if ( len < 1 ) { r_strbuf_setf ( & op -> esil, ""\\0"" ) ; return NULL ; } <S2SV_ModStart> 0 ) { if ( len < 1 ) { r_strbuf_setf ( & op -> esil, ""\\0"" ) ; return NULL ; } <S2SV_ModStart> 1 ) { r_strbuf_setf ( & op -> esil, ""\\0"" ) ; opcode_desc -> cycles = 2 ; op -> size = 2 ; op -> type = R_ANAL_OP_TYPE_UNK ; op -> nopcode = ( op -> type == R_ANAL_OP_TYPE_UNK ) ; t = r_strbuf_get ( & op -> esil ) ; if ( t && strlen ( t ) > 1 ) { t = strlen ( t ) - 1 ; if ( * t == ',' ) { * t = '\\0' ; } }",0
1072,"<S2SV_ModStart> status ; ACPI_FUNCTION_TRACE ( ns_terminate ) ; <S2SV_ModStart> prev ; union acpi_operand_object <S2SV_ModEnd> * next ; <S2SV_ModStart> next ; } status = acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node ) ; if ( ACPI_FAILURE ( status ) ) { ACPI_DEBUG_PRINT ( ( ACPI_DB_INFO, ""Namespace <S2SV_blank> freed\\n"" ) ) ; return_VOID ; } status = acpi_ut_acquire_mutex ( ACPI_MTX_NAMESPACE ) ; if ( ACPI_FAILURE ( status ) ) { ACPI_DEBUG_PRINT ( ( ACPI_DB_INFO, ""Namespace <S2SV_blank> freed\\n"" ) ) ; return_VOID ; } status = acpi_ut_release_mutex ( ACPI_MTX_NAMESPACE ) ; if ( ACPI_FAILURE ( status ) ) { return_VOID ; } status = acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node ) ; if ( ACPI_FAILURE ( status ) ) { ACPI_DEBUG_PRINT ( ( ACPI_DB_INFO, ""Namespace",0
1073,<S2SV_ModStart> = GF_FALSE ; if ( the_url [ strlen ( the_url ) - 1 ] == '\\0' || the_url [ strlen ( the_url ) - 1 ] == '\\0' || the_url [ strlen ( the_url ) - 1 ] == '\\0' || the_url [ strlen ( the_url ) - 1 ] == '\\0' || the_url [ strlen ( the_url ) - 1 ] == '\\0' || the_url [ 0 ] == '\\0' || the_url [ strlen ( the_url ) - 1 ] == '\\0' || the_url [ strlen ( the_url ) - 1 ] == '\\0' || the_url [ strlen ( the_url ) - 1 ] == '\\0' || the_url [ strlen ( the_url ) - 1 ] == '\\0' || the_url [ strlen ( the_url ) - 1 ] == '\\0' || the_url [ 0 ] == '\\0' || the_url [ strlen ( the_url ) - 1 ] == '\\0' || the_url [ strlen ( the_url ) - 1 ] == '\\0' || the_url [ strlen ( the,0
1074,<S2SV_ModStart> num_fields ) { <S2SV_ModEnd> _Py_IDENTIFIER ( _attributes,0
1075,"<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_alg_priv_t <S2SV_ModEnd> * priv ; <S2SV_ModStart> ) { priv = vpx_calloc ( <S2SV_ModEnd> 1, sizeof <S2SV_ModStart> ) ) ; if (! priv ) { return VPX_CODEC_MEM_ERROR ; } ctx -> priv = priv ; ctx -> priv -> sz = sizeof ( * ctx -> priv ) ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> init_flags = ctx -> init_flags ; } cfg = & ctx -> config ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage ; i ++ ) ; priv -> cfg = * cfg ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg. pkt_list = & priv -> pkt_list. head ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h * priv -> cfg. g_w * priv -> cfg. g_h ; priv -> vp8_cfg. pkt_list = & priv -> pkt_list. head ; priv ->",0
1076,"<S2SV_ModStart> ( args, 0, bp ) ; if ( error ) { xfs_da_shrink_inode ( args, 0, bp ) ; xfs_idata_realloc ( dp, - size, XFS_ATTR_FORK ) ; memcpy ( ifp -> if_u1. if_data, tmpbuffer, size ) ; sf = ( xfs_attr_shortform_t * ) tmpbuffer ; } else { error = xfs_da_shrink_inode ( args, 0, bp ) ; if ( error ) { xfs_da_shrink_inode ( args, 0, bp ) ; xfs_idata_realloc ( dp, - size, XFS_ATTR_FORK ) ; memcpy ( ifp -> if_u1. if_data, tmpbuffer, size ) ; sf = ( xfs_attr_shortform_t * ) tmpbuffer ; xfs_bmap_local_to_extents_empty ( dp, XFS_ATTR_FORK ) ; xfs_bmap_local_to_extents_empty ( dp, XFS_ATTR_FORK ) ;",0
1077,<S2SV_ModStart> } if ( ( c = x * 16 ; c < 256 ) { pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_c + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_c + step ; pixel -> total_freq = totfr ; return ret ; } pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_c + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_c + step ; pixel -> total_freq = totfr ;,0
1078,"<S2SV_ModStart> err ; err = nla_parse_nested ( sock, TIPC_NLA_SOCK_MAX, attrs [ TIPC_NLA_SOCK ], tipc_nl_sock_policy ) ; if ( err ) return err ; if (! sock [ TIPC_NLA_SOCK_REF ] ) return - EINVAL ; tsk_portid = nla_get_u32 ( sock <S2SV_ModEnd> [ TIPC_NLA_SOCK_REF ] <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> err = __tipc_nl_list_sk_publ",0
1079,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void,0
1080,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1081,"<S2SV_ModStart> ) buffer ; if ( total_len < length ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor <S2SV_blank> set\\n"" ) ; goto err ; } <S2SV_ModStart> -> bLength ; if ( total_len < length ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor <S2SV_blank> set\\n"" ) ; goto err ; } <S2SV_ModStart> -> bLength ; if ( total_len < length ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor <S2SV_blank> set\\n"" ) ; goto err ; }",0
1082,<S2SV_ModStart> ) ) { <S2SV_ModEnd> file_sb_list_del ( file,0
1083,<S2SV_ModStart> EIO ; } if ( link_count > <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1084,"<S2SV_ModStart> data ) { uint16_t status ; <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & ENC28J60_MISTAT_BUSY",0
1085,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { BOOL <S2SV_ModEnd> n = 0 <S2SV_ModStart> 0 ; ptr = fmt ; while ( * ptr!= '\\0' ) if ( * ptr == '%' ) ptr ++ ; else if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } else if ( * ptr == 'S' ) { n = 1 ; ptr ++ ; } else if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr <= '9' ) ptr ++ ; if ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; else return 1 ; ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; else return 1 ; },0
1086,"<S2SV_ModStart> sk_forward_alloc ) ; rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ;",0
1087,<S2SV_ModStart> ) ) { ND_TCHECK ( * bp ) ; <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart> goto invalid ; break ; } c -= '0' ; if ( result > INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result += c ; } bp ++ ; len -- ; if ( len == 0 ) goto trunc ; } if (! saw_digit ) { if (! saw_digit ) { goto invalid ; break ; } c -= '0' ; if ( result > ( INT_MAX / 10 ) ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; },0
1088,<S2SV_ModStart> ; if ( args -> flags & XFS_DA_OP_OKNOENT ) { args -> index = probe ; return XFS_ERROR ( EEXIST ) ; } if ( args -> flags & XFS_DA_OP_OKNOENT ) { args -> index = probe ; return XFS_ERROR ( EEXIST ) ; } if ( args -> flags & XFS_DA_OP_OKNOENT ) { args -> index = probe ; return XFS_ERROR ( EEXIST ) ; } if ( args -> flags & XFS_DA_OP_OKNOENT ) { args -> index = probe ; return XFS_ERROR ( EEXIST ) ; } if ( args -> flags & XFS_DA_OP_OKNOENT ) { args -> index = probe ; return XFS_ERROR ( EEXIST ) ; } if ( args -> flags & XFS_DA_OP_OKNOENT ) { args -> index = probe ; return XFS_ERROR ( EEXIST ) ; } if ( args -> flags & XFS_DA_OP_OKNOENT ) { args -> index = probe ; return XFS_ERROR ( EEXIST ) ; },0
1089,"<S2SV_ModStart> ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest <S2SV_ModEnd> ) ; UtRegisterTest <S2SV_ModStart> ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest <S2SV_ModEnd> ) ; UtRegisterTest <S2SV_ModStart>, IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakWindowsTest"", IPV6DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakFirstTest"", IPV6DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLastTest"", IPV6DefragSturgesNovakLastTest ) ; UtRegisterTest ( ""IPV6DefragIPv4TooLargeTest"", IPV6DefragIPv4TooLargeTest ) ;",0
1090,<S2SV_ModStart> ; if ( object_length > sizeof ( new_object. data ) - add_v1_record ) { sc_cardctl_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t,0
1091,"<S2SV_ModStart> 0 ) ; if ( ( int ) shdr -> sh_size > SIZE_MAX ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_size > SIZE_MAX ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_size > SIZE_MAX ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } <S2SV_ModStart> ; if ( ( int ) shdr -> sh_size > SIZE_MAX ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_size > SIZE_MAX ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; }",0
1092,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart>, '=' ) ; if ( separator == NULL ) { return ERROR_INVALID_SYNTAX ; } name = strTrimWhitespace ( token ) ; value = strTrimWhitespace ( separator + 1 ) ; n = osStrlen ( value ) ; if ( n > 0 && value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ 0 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ 0 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ 0 ] == \'\\""\' ) value [ 0 ] = '\\0' ; if ( value [ 0 ] == \'\\""\' ) value [ 0 ] = '\\0' ; if ( n > 0 && value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ 0 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ 0 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ 0 ] == \'\\""",0
1093,"<S2SV_ModStart> ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > end ) return - 1 ; if ( cp >= end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; j += label_len ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; if ( j + label_len >= end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; j += label_len ; j += label_len ;",0
1094,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> ( cc % ( tif -> tif_dir. td_bitspersample <S2SV_ModEnd> ) ) == <S2SV_ModStart>! tmp ) { TIFFErrorExt ( tif -> tif_dev -> tif_clientdata, ""fpAcc"", ""%s"", ""%s"" ) ) ; return 0 ; } <S2SV_ModEnd> while ( count <S2SV_ModStart> stride ) ) { REPEAT4 ( stride, cp [ 0 ] ) ; cp ++ ; count -= stride ; } _TIFFmemcpy ( tmp, cp0, cc ) ; cp = ( uint8 * ) cp0 ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for",0
1095,"<S2SV_ModStart> ) ) { if ( unlikely ( vma -> vm_ops -> fault ) ) return do_fault ( mm, vma, address, pte, pmd, flags, entry ) ; } return do_anonymous_page ( mm, vma, address, pte, pmd, flags ) ; } if ( pte_protnone ( entry ) ) return do_numa_page ( mm, vma, pmd, ptl, entry ) ; if ( flags & FAULT_FLAG_WRITE ) { if (! pte_write ( entry ) ) return do_wp_page ( mm, vma, vma, address, pte, pmd, ptl, entry ) ; entry = pte_mkyoung ( entry ) ; if ( ptep_set_access_flags ( vma, address, pte, entry, flags & FAULT_FLAG_WRITE ) ) { update_mmu_cache ( vma, address, pte ) ; } else { if ( flags & FAULT_FLAG_WRITE ) flush_tlb_fix_spurious_fault ( vma, vma, address, pte ) ; }",0
1096,<S2SV_ModStart> s ) { return <S2SV_ModEnd> pool_alloc ( strlen <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1097,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1098,<S2SV_ModStart> -> nr_extents ++ ; if ( idx >= map -> nr_extents ) { ret = - EINVAL ; goto out ; },0
1099,"<S2SV_ModStart> -> length ]. attr_values [ i ] = r_uleb128 ( buf, buf_end - buf, & abbr_code ) ; if (! cu -> length ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> capacity <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } <S2SV_ModStart> -> length ]. attr_values [ i ] = r_uleb128 ( buf, buf_end - buf, & abbr_code ) ; if (! buf ) { return NULL ; } r_bin_dwarf_init_die ( & cu -> dies [ cu -> length ] ) ; if (! cu -> length ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> capacity <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } <S2SV_ModStart> -> length ]. attr_values [ i ] = r_uleb128 ( buf, buf_end - buf, & abbr_code ) ; if (! buf ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> values <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; }",0
1100,"<S2SV_ModStart> NULL ; } if ( p_enc -> fmt_in. i_codec < 0 || p_enc -> fmt_in. i_codec > UINT16_MAX ) { msg_Err ( p_enc, ""Bad <S2SV_blank> codec <S2SV_blank> index: <S2SV_blank> %d"", p_enc -> fmt_in. i_codec ) ; return NULL ; } <S2SV_ModStart> p_enc -> fmt_in. i_codec ) ; if ( p_enc -> fmt_in. i_codec > UINT16_MAX ) { msg_Err ( p_enc, ""Bad <S2SV_blank> codec <S2SV_blank> index: <S2SV_blank> %d"", p_enc -> fmt_in. i_codec ) ; return NULL ; } <S2SV_ModStart> p_enc -> fmt_in. i_codec ) ; if ( p_enc -> fmt_in. i_codec < 0 || p_enc -> fmt_in. i_codec > UINT16_MAX ) { msg_Err ( p_enc, ""Bad <S2SV_blank> codec <S2SV_blank> index: <S2SV_blank> %d"", p_enc -> fmt_in. i_codec ) ; return NULL ; }",0
1101,"<S2SV_ModStart> ) ) { if (! mp_path_exists ( mf -> names ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ] ) ; break ; } <S2SV_ModStart> ) ) { if (! mp_path_exists ( mf -> names [ mf -> nr_of_files - 1 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ] ) ; break ; } if (! mp_path_exists ( mf -> names [ mf -> nr_of_files - 1 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ] ) ; break ; } if (! mp_path_exists ( mf -> names [ mf -> nr_of_files - 1 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_",0
1102,"<S2SV_ModStart> if ( flow & 0xf0000000 ) ND_PRINT ( ( ndo, ""class <S2SV_blank> 0x%02x, <S2SV_blank> "", flow & 0xf0000000 ) ) ; if ( flow & 0x00ffffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x00ffffff ) ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x000fffff ) ) ; if ( flow & 0x00ffffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x00ffffff ) ) ; if ( flow & 0x00ffffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x00ffffff ) ) ; if ( flow & 0x00ffffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x00ffffff ) ) ; if ( flow & 0x00ffffff ) ND_PRINT (",0
1103,"<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) { android_errorWriteLog ( 0x534e4554, ""26366256"" ) ; return NULL ; } <S2SV_ModStart> len ) ; if ( idx + 4 + a -> num_names > len ) { android_errorWriteLog ( 0x534e4554, ""26366256"" ) ; return NULL ; } <S2SV_ModStart> len ) ; if ( idx + 4 + a -> num_names > len ) { android_errorWriteLog ( 0x534e4554, ""26366e4554"" ) ; return NULL ; } <S2SV_ModStart> len ) ; if ( idx + 4 + a -> num_names > len ) { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len )",0
1104,<S2SV_ModStart> EIO ; } if ( link_count > <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1105,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1106,<S2SV_ModStart> int sse ; memset <S2SV_ModEnd> ( x ->,0
1107,"<S2SV_ModStart> ; strcpy ( t1_buf_array <S2SV_ModEnd>, t1_line_array )",0
1108,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ) ; if ( ctx -> frame_parallel_decode ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; YV12_BUFFER_CONFIG * fb ; yuvconfig2image ( & data -> img, fb, NULL ) ; return VPX_CODEC_OK ; } else { return VPX_CODEC_INVALID_PARAM ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1109,"<S2SV_ModStart> ctxt ) ; if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { ops -> get_msr ( ctxt, MSR_EFER, & efer ) ; ops -> get_msr ( ctxt, & cs, & ss ) ; ops -> get_msr ( ctxt, MSR_STAR, & msr_data ) ; msr_data >>= 32 ; cs_sel = ( u16 ) ( msr_data & 0xfffc ) ; ss_sel = ( u16 ) ( msr_data & 0xfffc ) ; if ( efer & EFER_LMA ) { cs. d = 0 ; cs. l = 1 ; } ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ops",0
1110,"<S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOI.\\n"", marker ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOI.\\n"", marker ) ; return AVERROR_INVALIDDATA ; }",0
1111,"<S2SV_ModStart> ) == 1 && TYPE ( CHILD ( n, 0 ) ) == testlist ) expr1 = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; else expr1 = ast_for_expr ( c, ch ) ; if (! expr1 ) return NULL ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; ch = CHILD ( n, 2 ) ; if ( TYPE ( CHILD ( n, 1 ) ) == testlist ) expr2 = ast_for_testlist ( c, ch ) ; else expr2 = ast_for_expr ( c, ch ) ; if (! expr2 ) return NULL ; newoperator = ast_for_augassign ( expr1, newoperator, expr2, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; if (! newoperator ) return NULL ; return AugAssign ( expr1, newoperator, expr2, LINENO ( n ), n -> n_col_offset, n -> n_end",0
1112,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y, int mc_avg_y_stride, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * running_avg_y, int avg_y_stride, <S2SV_ModEnd> int r, <S2SV_ModStart> -> y_stride ; <S2SV_ModEnd> int c, <S2SV_ModStart> int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; i ++ ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = mc_running_avg_y [ c ] - sig [ c ] ; absdiff = abs ( diff ) ; if ( absdiff >= 4 && absdiff <= 7 ) adjustment = adj_val [ 0 ] ; else adjustment = adj_val [ 1 ] ; else if ( absdiff >= 8 && absdiff <= 15 ) adjustment = adj_val [ 2 ] ; else",0
1113,"<S2SV_ModStart>!= 0u ) { Ns_Log ( Ns_LogRequestDebug <S2SV_ModEnd>, ""honoring <S2SV_blank> 100-continue"" ) <S2SV_ModStart>!= 0u ) { Ns_Log ( Ns_LogRequestDebug <S2SV_ModEnd>, ""honoring <S2SV_blank> 100-continue"" ) <S2SV_ModStart>!= 0u ) { Ns_Log ( Ns_LogRequestDebug <S2SV_ModEnd>, ""honoring <S2SV_blank> 100-continue"" ) <S2SV_ModStart>!= 0u ) { Ns_Log ( Ns_LogRequestDebug <S2SV_ModEnd>, ""honoring <S2SV_blank> 100-continue"" ) <S2SV_ModStart>!= 0u ) { Ns_Log ( Ns_LogRequestDebug <S2SV_ModEnd>, ""honoring <S2SV_blank> 100-continue"" ) <S2SV_ModStart>!= 0u ) { Ns_Log ( Ns_LogRequestDebug <S2SV_ModEnd>, ""honoring <S2SV_blank> 100-continue"" ) <S2SV_ModStart>!= 0u ) { Ns_Log ( Ns_LogRequestDebug <S2SV_ModEnd>, ""honoring <S2SV_blank> 100-continue"" ) <S2SV_ModStart>!= 0u ) { Ns_Log ( Ns_LogRequestDebug <S2SV_ModEnd>, ""honoring <S2SV_blank> 100-continue"" )",0
1114,"<S2SV_ModStart> int ret = 0 ; if ( xtregs -> cp0 & XTREGS_CP0_BITSP ) { ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs -> cp0 ) ) ; }",0
1115,<S2SV_ModStart> size ) ; # if ( ETH_SUPPORT == ENABLED ) message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; message -> destMacAddr = queueItem -> ancillary. destMacAddr ; message -> ttl = queueItem -> ancillary. ttl ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif if ( ( flags & SOCKET_FLAG_PEEK ) == 0 ) { socket -> receiveQueue = queueItem -> next ; netBufferFree ( queueItem -> buffer ) ; },0
1116,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> if ( xop <S2SV_ModStart> == XCOL_DESTINATION_RECV_OP ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & xop -> dev_group. cg_item ) ; } else { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for""",0
1117,"<S2SV_ModStart> - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close_sock ; }",0
1118,"<S2SV_ModStart> int error ; struct mb2_cache * ext2_mb_cache = EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> new_bh ) ; mb2_cache_insert_block ( ext2_mb_cache, new_bh, EXT2_I ( inode ) -> i_block_group, new_bh -> b_blocknr <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( new_bh ) ; mb2_cache_insert_block ( ext2_mb_cache, new_bh, EXT2_I ( inode ) -> i_block_group, new_bh -> b_blocknr ) ; mb2_cache_insert_block ( ext2_mb_cache, new_bh, EXT2_I ( inode ) -> i_block_group, new_bh -> b_blocknr, new_bh -> b_blocknr ) ; mb2_cache_insert_block ( ext2_mb_cache, new_bh, EXT2_I ( inode ) -> i_block_group, new_bh -> b_blocknr ) ; mb2_cache_insert_block ( ext2_mb",0
1119,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1120,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> { if ( ctx -> frame_workers > 0 ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data2 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_",0
1121,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; inode -> i_ctime = CURRENT_TIME ; mark_inode_dirty ( inode ) ; <S2SV_ModEnd> } break ;",0
1122,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1123,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1124,"<S2SV_ModStart> TSRMLS_DC ) { const char * ptr = str ; <S2SV_ModStart> len ) ; if (! state -> ptr ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> string: <S2SV_blank> \'%s\'"", state -> ptr ) ; efree ( state ) ; return NULL ; } <S2SV_ModStart> NULL ; } if (! parse_path ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> path: <S2SV_blank> \'\'"", state -> ptr ) ; efree ( state ) ; return NULL ; } if (! parse_query ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> query: <S2SV_blank> \'\'"", state -> ptr ) ; efree ( state ) ; return NULL ; } if (! parse_fragment ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> fragment: <S2SV_blank> \'\'"", state ->",0
1125,"<S2SV_ModStart> SUCCESS ) { if ( var == NULL ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""You <S2SV_blank> must <S2SV_blank> give <S2SV_blank> at <S2SV_blank> least <S2SV_blank> one <S2SV_blank> point"" ) ; RETURN_FALSE ; } <S2SV_ModStart> var ) ; } <S2SV_ModStart> SUCCESS ) { if ( var == NULL ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""You <S2SV_blank> must <S2SV_blank> give <S2SV_blank> at <S2SV_blank> least <S2SV_blank> one <S2SV_blank> point"" ) ; RETURN_FALSE ; } <S2SV_ModStart> var ) ; if ( var == NULL ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""You <S2SV_blank> must <S2SV_blank> give <S2SV_blank> at <S2SV_blank> least <S2SV_blank> one <S2SV_blank> point"" ) ; RETURN_FALSE ; } <S2SV_ModStart> SUCCESS ) { if ( var == NULL ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""You <S2SV_blank> must <S2SV_blank> give <S2SV_blank> at <S2SV_blank> least <S2SV_blank> one <S2SV_blank> point"" ) ; RETURN_FALSE ; } <S2SV_ModStart> var ) ; if ( var == NULL ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""You <S2SV_blank> must <S2SV_blank> give",0
1126,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1127,<S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart>,0
1128,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { <S2SV_ModEnd> if ( args <S2SV_ModStart> * ) ; if ( ctx -> frame_parallel_decode ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = frame -> frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_",0
1129,"<S2SV_ModStart>. path ; int err ; err = curl_easy_unescape <S2SV_ModEnd> ( data, <S2SV_ModStart> NULL ) ; if ( err ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> -> mailbox ) { err = curl_easy_unescape ( data, path, 0, NULL ) ; if ( err ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> return CURLE_OUT_OF_MEMORY ; } <S2SV_ModStart> -> mailbox ) { err = curl_easy_unescape ( data, path, 0, NULL ) ; if ( err ) return CURLE_OUT_OF_MEMORY ; if ( err ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> -> mailbox ) { err = curl_easy_unescape ( data, path, 0, NULL ) ; if ( err ) return CURLE_OUT_OF_MEMORY ; } <S2SV_ModEnd> return CURLE_OK ;",0
1130,"<S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; }",0
1131,"<S2SV_ModStart> ; sh -> pps_id = get_ue_golomb_long ( gb ) ; if ( sh -> pps_id >= HEVC_MAX_PPS_COUNT ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> id <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> %d\\n"", sh -> pps_id ) ; return AVERROR_INVALIDDATA ; } if (! sh -> first_slice_in_pic_flag ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> id <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> %d\\n"", sh -> pps_id ) ; return AVERROR_INVALIDDATA ; } s -> ps. pps = ( HEVCPPS * ) s -> ps. pps_list [ sh -> pps_id ] -> data ; if ( s -> ps. pps!= ( HEVCSPS * ) s -> ps. pps_list [ sh -> pps_id ] -> data ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> changed <S2SV_blank> between <S2SV_blank> slices.",0
1132,<S2SV_ModStart> u2_total_mbs_coded ; } if ( ps_dec -> ps_dec_err_status -> u2_total_mbs_coded > ps_dec -> ps_cur_slice -> u1_num_mbs_coded ) { ps_dec -> ps_dec_err_status -> u2_total_mbs_coded = ps_dec -> ps_cur_slice -> u1_num_mbs_coded ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded = ps_dec -> ps_cur_slice -> u1_num_mbs_coded ; ps_dec -> ps_cur_slice -> u1_num_mbs_nby2 = ps_dec -> ps_cur_slice -> u1_num_mbs_nby2 ; ps_dec -> ps_cur_slice -> u1_num_mbs_nby2 = ps_dec -> ps_cur_slice -> u1_num_mbs_nby2 ; ps_dec -> ps_cur_slice,0
1133,"<S2SV_ModStart>, u4_y_offset ; if ( ps_dec -> u2_total_mbs_coded > ps_dec -> u2_total_mbs_coded ) { return IMPEG2D_ERROR_BAD_FRAME ; } <S2SV_ModStart> B_PIC ) { if ( ps_dec -> u2_total_mbs_coded > ps_dec -> u2_total_mbs_coded ) { return IMPEG2D_ERROR_BAD_FRAME ; } <S2SV_ModStart> == B_PIC ) { if ( ps_dec -> u2_total_mbs_coded > ps_dec -> u2_total_mbs_coded ) { return IMPEG2D_ERROR_BAD_FRAME ; } <S2SV_ModStart> == B_PIC ) { if ( ps_dec -> u2_total_mbs_coded > ps_dec -> u2_total_mbs_coded ) { return IMPEG2D_ERROR_BAD_FRAME ; } <S2SV_ModStart> == B_PIC ) { if ( ps_dec -> u2_total_mbs_coded > ps_dec -> u2_total_mbs_coded ) { return IMPEG2D_ERROR_BAD_FRAME",0
1134,"<S2SV_ModStart> VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_",0
1135,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1136,<S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> const TX_SIZE tx_size <S2SV_ModStart> ) ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_,0
1137,<S2SV_ModStart> random_factor ) ; <S2SV_ModEnd> if ( mmap_is_legacy,0
1138,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst,",0
1139,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> L, fmt <S2SV_ModStart> case 'c' : { luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sizeof ( int ) ) ; return 0 ; } case 'u' : case 'U' : { luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sizeof ( int ) ) ; return 0 ; } case 'u' : case 'U' : { luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sizeof ( int ) ) ; return 0 ; } default : luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sizeof ( int ) ) ; return 0 ; }",0
1140,"<S2SV_ModStart> nrow ) { if ( ( row + img -> row_offset ) % rowsperstrip > h ) { TIFFErrorExt ( tif, ""GT_STRIP_SHARING_OVERFLOW"" ) ; return ( 0 ) ; } <S2SV_ModStart> % rowsperstrip ; if ( ( row + img -> row_offset ) % rowsperstrip > h ) { TIFFErrorExt ( tif, ""GT_STRIP_SHARING_OVERFLOW"" ) ; return ( 0 ) ; } <S2SV_ModStart> % rowsperstrip ; if ( ( row + img -> row_offset ) % rowsperstrip > h ) { TIFFErrorExt ( tif, ""GT_STRIP_SHARING_OVERFLOW"" ) ; return ( 0 ) ; } <S2SV_ModStart> % rowsperstrip ; if ( ( row + img -> row_offset ) % rowsperstrip > h ) { TIFFErrorExt ( tif, ""GT_STRIP_SHARING_OVERFLOW"" ) ; return ( 0 ) ; } <S2SV_ModStart> % rowsperstrip ; if ( ( row + img -> row_offset ) % rowsperstrip > h ) { TIFFErrorExt ( tif, ""GT",0
1141,"<S2SV_ModStart> } } } if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 3 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 3 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 3 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 3 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 3 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 3 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 3 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n",0
1142,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1143,"<S2SV_ModStart> - EINVAL ; if ( upid < 0 ) { type = PIDTYPE_MAX ; } else if ( upid == 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, PIDTYPE_PID ) ; } else if ( upid == 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, PIDTYPE_PGID ) ; } else if ( upid == 0 ) { type = PIDTYPE_MAX ; if ( pid == NULL ) { type = PIDTYPE_MAX ; } else if ( upid == 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, PIDTYPE_PID ) ; } else if ( upid == 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, PIDTYPE_PGID ) ; } else if ( upid == 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, PIDTYPE_PID ) ; }",0
1144,<S2SV_ModStart> ( ) ; if ( msg -> msg_namelen ) { err = - EINVAL ; goto out_err ; } if ( msg -> msg_namelen ) { err = - EOPNOTSUPP ; if ( msg -> msg_namelen ) { err = - EOPNOTSUPP ; goto out_err ; } } else if ( msg -> msg_namelen ) { err = - EOPNOTSUPP ; if ( msg -> msg_flags & MSG_OOB ) goto out_err ; if ( msg -> msg_namelen ) { err = - EOPNOTSUPP ; goto out_err ; },0
1145,<S2SV_ModStart> ( num & ( 1U << ( number - 1 ) ) ) ) return num - ( 1U << ( number - 1 ) ) ; if ( num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) ; if ( num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) ; if ( num & ( 1U << ( number - 1 ) ) return num - ( 1U << ( number - 1 ) ) ; if ( num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) ; if ( num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) ; else return num ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1146,"<S2SV_ModStart> [ plane ] ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int cols = vpx_img_plane_cols ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int cols = vpx_img_plane_cols ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int cols = vpx_img_plane_cols ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; int y ; for ( y = 0 ; y < rows ; ++ y ) { if ( fread ( buf, 1, rows, file )!= rows ) return 0 ; buf += stride ; } return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1147,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; if ( avp -> length < 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( <S2SV_ModStart> + 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < attr_len ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if (",0
1148,<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; return __blkdev_driver_ioctl <S2SV_ModEnd> ( dev ->,0
1149,<S2SV_ModStart> ; case EVP_CTRL_AEAD_SET_TAG : if ( arg < 0 ) return 0 ; actx -> tag [ 0 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 2 ) ; actx -> tag [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 3 ) ; actx -> tag [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 4 ) ; actx -> tag [ 3 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 5 ) ; actx -> tag [ 4 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx -> tag [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 7 ) ; actx -> tag [ 3 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx -> tag [ 4 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx -> tag [,0
1150,"<S2SV_ModStart> alg ) { if (! try_module_get ( <S2SV_ModEnd> ""crypto_%s"", name <S2SV_ModStart> ) ) { if (! try_module_get ( <S2SV_ModEnd> ""crypto_%s-all"", name <S2SV_ModStart> mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! try_module_get ( <S2SV_ModEnd> ""crypto_%s-all"", name <S2SV_ModStart> mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! try_module_get ( <S2SV_ModEnd> ""crypto_%s-all"", name <S2SV_ModStart> mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! request_module_get ( <S2SV_ModEnd> ""crypto_%s-all"", name <S2SV_ModStart> mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! request_module_get ( <S2SV_ModEnd> ""crypto_%s-all"", name <S2SV_ModStart> mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! request_module_get ( <S2SV_ModEnd> ""crypto_%s"", name",0
1151,"<S2SV_ModStart>. header. size <S2SV_ModEnd>, 0,",0
1152,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1153,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock,",0
1154,"<S2SV_ModStart> { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; <S2SV_ModStart> cpkt. length ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } } else if ( cpkt. c",0
1155,<S2SV_ModStart> | NTLMSSP_NEGOTIATE_UNICODE | NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC ; if ( ses -> server -> sign ) { flags |= NTLMSSP_NEGOTIATE_SIGN ; if (! ses -> ntlmssp -> session_estab || ses -> ntlmssp -> sesskey_per_smbsess ) flags |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC ; },0
1156,"<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> ) ) ; mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> ) ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc!= IMAP_EXEC_ERROR ) { mutt_socket_empty ( adata -> conn ) ; if ( rc!= IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_ERROR ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc!= IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_ERROR ) { mutt_socket_empty ( adata -> conn ) ; if ( rc!= IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_ERROR ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc",0
1157,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1158,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> * cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""cc"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc",0
1159,<S2SV_ModStart> -> sect > ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1160,"<S2SV_ModStart> ; if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) ==",0
1161,"<S2SV_ModStart>, & rlen, 0",1
1162,"<S2SV_ModStart> ; read_userfile ( <S2SV_ModEnd> ) ; if <S2SV_ModStart> 0 ] = 0 <S2SV_ModEnd> ; strncpy ( <S2SV_ModStart> ; memcpy ( <S2SV_ModEnd> md5data + 1 <S2SV_ModStart> 82 ) ; memcpy ( md5data + 1 + strlen ( user -> password ), curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, 0 ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, 0 ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_END_AUTH, NULL, 0 ) ; if ( user == NULL || user -> password ==",0
1163,"<S2SV_ModStart> 1 ; } if ( strlen ( path ) > sizeof ( path ) - 1 ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } if ( strlen ( path ) - offset > sizeof ( path ) - 1 ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } if ( strlen ( path ) - offset > sizeof ( path ) - 1 ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } if ( strlen ( path ) - offset > sizeof ( path ) - 1 ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } if ( strlen ( path ) - offset > sizeof ( path ) - offset ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return -",0
1164,"<S2SV_ModStart> ) ) ; if ( PyUnicode_CompareWithASCIIString ( name, ""__debug__"" ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank>",0
1165,<S2SV_ModStart> bio ) ; if ( ret < 0 ) { ret = - EFAULT ; goto out_unmap ; },0
1166,<S2SV_ModStart> -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; } <S2SV_ModEnd> actualnumcolors = hdr,1
1167,"<S2SV_ModStart> -> pp ; <S2SV_ModEnd> int len ; <S2SV_ModStart> ""localhost"" ; } <S2SV_ModEnd> * done =",0
1168,<S2SV_ModStart> i < sizeof ( buf ) <S2SV_ModEnd> && str [,0
1169,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1170,<S2SV_ModStart> ) + RDS_CONG_MAP_BYTES <S2SV_ModEnd> ; } if,0
1171,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1172,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1173,"<S2SV_ModStart> ) ) { if ( * prclyrno >= JAS_CAST ( int, pchg -> pirlvl -> numprclyrnos ) ) { JAS_ERR ( ""numprclyrnos <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> range: <S2SV_blank> %d\\n"", pi -> pirlvl -> numprclyrnos ) ) ; return JAS_ERROR ( ""numprclyrnos <S2SV_blank> exceeds <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> range: <S2SV_blank> %d\\n"", pi -> pirlvl -> numprclyrnos ) ) ; return JAS_ERROR ( ""numprclyrnos <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> range: <S2SV_blank> %d\\n"", pi -> prcno, pi -> pirlvl -> numprclyrnos ) ) ; return JAS_ERROR ( ""numprclyrnos <S2SV_blank> exceeds <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> range: <S2SV_blank> %d\\n"", pi -> pirlvl -> numprclyrnos ) ) ; }",0
1174,"<S2SV_ModStart> ""Num <S2SV_blank> Paddr <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
1175,"<S2SV_ModStart> goto out ; status = decode_getacl_nolock <S2SV_ModEnd> ( xdr,",0
1176,"<S2SV_ModStart> sizeof iv ) ; if ( key [ sizeof key ] > EVP_MAX_KEY_LENGTH ) ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", key. length ) ;",0
1177,<S2SV_ModStart> KDC_OPT_ENC_TKT_IN_SKEY ) ) { return KRB5KDC_ERR_BADOPTION <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { return KRB5KDC_ERR_SERVER_NOMATCH <S2SV_ModEnd> ; } if,0
1178,"<S2SV_ModStart> & CLONE_SETTLS ) { struct pt_regs oldregs = * current_pt_regs ( ) ; if ( oldregs -> ARM_r3!= oldregs -> ARM_r3 ) { memset ( & oldregs -> ARM_r3, 0, sizeof ( oldregs -> ARM_r3 ) ) ; childregs -> ARM_r3 = oldregs -> ARM_r3 ; } thread -> tp_value = childregs -> ARM_r3 ; thread_notify ( THREAD_NOTIFY_COPY, thread ) ; return 0 ; } if ( clone_flags & CLONE_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1179,"<S2SV_ModStart> ) ) ; JAS_DBGLOG ( 100, ( ""jas_stream_memopen(%p, <S2SV_blank> %d)\\n"", buf, bufsize ) ) ; <S2SV_ModStart> JAS_DBGLOG ( 100, ( ""jas_stream_memopen(%p, <S2SV_blank> %d)\\n"", buf, bufsize ) ) ; stream -> openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY ; jas_stream_initbuf ( stream, JAS_STREAM_FULLBUF, 0, 0 ) ) ; stream -> ops_ = & jas_stream_memops ; if (! stream ) { jas_stream_destroy ( stream ) ; return 0 ; } stream -> openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY ; jas_stream_initbuf ( stream, JAS_STREAM_FULLBUF, 0, 0 ) ; obj -> obj_ = ( void * ) obj ; obj -> myalloc_ = 1 ; obj -> buf_ = jas_malloc ( obj -> bufsize_ ) ; obj -> my",0
1180,"<S2SV_ModStart> -> pw ; <S2SV_ModEnd> struct sshkey * <S2SV_ModStart> sshkey * key <S2SV_ModEnd> ; char * <S2SV_ModStart> char * pkalg <S2SV_ModEnd>, * userstyle <S2SV_ModStart> ; u_char * pkblob <S2SV_ModEnd> ; size_t blen <S2SV_ModStart> ; u_char * sig <S2SV_ModEnd> ; int r <S2SV_ModStart> ; if ( authctxt -> valid && authctxt -> user!= NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & blen, & slen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & blen, & slen ) )!= 0 || ( r = sshpkt_get_u",0
1181,"<S2SV_ModStart> ; uint32_t bcount ; if (! DoReadFile ( infile, & chunk_header, sizeof ( Wave64ChunkHeader ), & bcount ) || bcount!= sizeof ( Wave64ChunkHeader ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! ( config -> qmode & QMODE_NO_STORE_WRAPPER ) &&! WavpackAddWrapper ( wpc, & filehdr, sizeof ( filehdr ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_",0
1182,"<S2SV_ModStart> mech ) ; ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ) ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ) ; _sx_nad_write ( s, _sasl_failure ( s, _sasl_err",0
1183,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1184,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entry_size = exif_get_long ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entry_type = exif_get_short ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ].",0
1185,"<S2SV_ModStart> ; if ( db_count > EXT2_MAX_DB_ENTRIES ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> DB <S2SV_blank> count <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", db_count ) ; goto failed_sbi ; }",0
1186,<S2SV_ModStart> bd_addr ) { if ( btif_dm_interface_ready ( ) == FALSE ) return BT_STATUS_NOT_READY ; if (,0
1187,"<S2SV_ModStart> ; if ( tcp_hdrlen + TCPOLEN_MSS > len ) return - 1 ; if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", minlen ) ; return - 1 ; } if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", minlen ) ; return - 1 ; } if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", minlen ) ; return - 1 ; } if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", minlen ) ; return - 1 ;",0
1188,"<S2SV_ModStart> ; if ( numrows > JAS_MATRIX_MAX_ROWS || numcols > JAS_MATRIX_MAX_COLS ) { return 0 ; } if ( numrows > JAS_MATRIX_MAX_ROWS ) { return 0 ; } if ( numcols > JAS_MATRIX_MAX_COLS ) { return 0 ; } if ( <S2SV_ModStart> ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } matrix -> flags_ = 0 ; matrix -> numrows_ = numrows ; matrix -> numcols_ = numcols ; matrix -> rows_ = 0 ; matrix -> maxrows_ = 0 ; matrix -> data_ = 0 ; matrix -> datasize_ = numrows * numcols ; if ( matrix -> maxrows_ > 0 ) { if (! ( matrix -> rows_ = jas_alloc2 ( matrix -> maxrows_, sizeof ( jas_seqent_t * ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } } if ( matrix -> datasize_ > 0 ) { if (! ( matrix -> data_ = jas_alloc2 ( matrix -> datasize_, sizeof ( jas_seqent",0
1189,<S2SV_ModStart> ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1190,"<S2SV_ModStart> * req ; struct scsi_disk_req * r ; if ( scsi_disk_req_alloc ( & s -> qdev, tag, lun, hba_private ) ) return NULL <S2SV_ModEnd> ; req = <S2SV_ModStart> scsi_disk_reqops, & s -> qdev -> dev, tag, lun, hba_private ) ; if (! req ) return NULL <S2SV_ModEnd> ; r -> <S2SV_ModStart> r -> iov. iov_base = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ;",0
1191,"<S2SV_ModStart> int i ; int <S2SV_ModEnd> avail ; int <S2SV_ModStart> 4 ) ; if ( nxip < 0 || nxip > buf -> len || buf -> cursor >= buf -> len ) goto bad_format ; expect = 8 + 8 + nxip * 8 ; if ( expect < 0 || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> xmin = xmin ; snap -> xmax = xmax ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( snap ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; }",0
1192,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> 3 ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header,0
1193,"<S2SV_ModStart> ; if (! ret || cm_id -> device ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; rdma_destroy_id ( cm_id ) ; return ret ; } <S2SV_ModEnd> ret = -",0
1194,"<S2SV_ModStart> sk ) ; <S2SV_ModEnd> struct xfrm_dump_info info <S2SV_ModStart> struct xfrm_dump_info info <S2SV_ModEnd> ; BUILD_BUG_ON ( <S2SV_ModStart> cb -> args [ 0 ] ) ; info. in_skb = cb -> skb ; info. out_skb = skb ; info. nlmsg_flags = cb -> nlh -> nlmsg_flags ; info. nlmsg_seq = cb -> nlh -> nlmsg_seq ; info. nlmsg_flags = NLM_F_MULTI <S2SV_ModStart> ; if ( cb -> args [ 0 ] ) { xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; cb -> args [ 0 ] = 1 ; xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; } ( void ) xfrm_policy_walk ( net, walk, dump_one_policy, & info ) ; return skb -> len ;",0
1195,<S2SV_ModStart> = - 1 <S2SV_ModEnd> ; oe_errno = <S2SV_ModStart> = 0 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1196,"<S2SV_ModStart> -> d_inode ; struct ovl_dentry_upper * upper = ovl_dentry_upper ( dentry ) ; int err <S2SV_ModEnd> ; inode_lock_nested ( <S2SV_ModStart> I_MUTEX_PARENT ) ; if ( upper -> d_parent == upperdir ) { dget ( upper ) ; if ( is_dir ) err = vfs_rmdir ( dir, upper, NULL ) ; else err = vfs_unlink ( dir, upper, NULL ) ; ovl_dentry_version_inc ( dentry -> d_parent ) ; } else { dput ( upper ) ; err = vfs_unlink ( dir, upper, NULL ) ; ovl_dentry_version_inc ( dentry -> d_parent ) ; } if (! err ) d_drop ( dentry ) ; inode_unlock ( dir ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
1197,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", errstr ) ; return 1 ; } if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s""",0
1198,<S2SV_ModStart> (! * ptrptr <S2SV_ModEnd> &&! (,0
1199,<S2SV_ModStart> ; if ( a -> type == MAPI_BODY_HTML ) { body. html_bodies = get_html_data ( a ) ; html_size = a -> num_values ; } else if ( a -> type == MAPI_BODY_RTF ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> type == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> type == MAPI_BODY_TEXT ) { body. text_body = get_text_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_HTML ) { body. html_bodies = get_html_data ( a ) ; html_size = a -> num_values ; } else if ( a -> type == MAPI_BODY_HTML ) { body. html_bodies = get_html_data ( a ) ; rtf_,0
1200,"<S2SV_ModStart> parent ) ; if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX = i -> parent -> width - i -> width ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif i -> posY = i -> parent -> height - i -> height ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX =",0
1201,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_DIR_MAX : * ( size_t * ) val = ms -> elf_dir_max ; return 0 ; case MAGIC_PARAM_NAME_MAX : * ( size_t * ) val = ms -> name_max ; return 0 ; case MAGIC_PARAM_ELF_PHNUM_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ;,0
1202,"<S2SV_ModStart> 1 ) { jas_eprintf ( ""bad <S2SV_blank> image <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1203,,1
1204,<S2SV_ModStart> ) { journal_t <S2SV_ModEnd> * journal =,0
1205,"<S2SV_ModStart> ++ ) { writer = GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STBL ) ; if (! writer -> stbl ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stbl ) return GF_OUT_OF_MEM ;",0
1206,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_encode ( BYTE,0
1207,"<S2SV_ModStart> [ 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> 0 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> ; strncpy ( <S2SV_ModEnd> md5data + 1 <S2SV_ModStart> = '\\0' ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> strlen ( password ), pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; plen = add_control_packet ( & data, MT_CPTYPE_USERNAME, username, strlen ( username ) ) ; if ( is_a_tty && get_terminal_size ( & width, & height )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height ) ; width = htole16 ( height ) ; height = htole16 ( height ) ; } if ( is_a_tty && get_terminal_size ( & width, & height )!= - 1 ) { width = ht",0
1208,"<S2SV_ModStart> useSystemLib ) { const char * topDir ; char libPath [ MAX_OSPATH ] ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * basePath ) basePath = ""."" ; if ( FS_FilenameCompare ( topDir, basePath ) ) { Com_Printf ( ""Trying <S2SV_blank> to <S2SV_blank> load <S2SV_blank> \\""%s\\"" <S2SV_blank> from <S2SV_blank> \\""%s\\""...\\n"", name, basePath ) ; dllhandle = Sys_LoadLibrary ( libPath ) ; } else if (! * basePath ) basePath = ""."" ; if ( FS_FilenameCompare ( topDir, basePath ) ) { Com_Printf ( ""Trying <S2SV_blank> to <S2SV_blank> load <S2SV_blank> \\""%s\\"" <S2SV_blank> from <S2SV_blank> \\""%s\\""...\\n"", name, basePath ) ; dllhandle = Sys_LoadLibrary ( libPath ) ; } if (! dllhandle",0
1209,<S2SV_ModStart> = NULL ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindexes = NULL ; },0
1210,"<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> n ) { \\\n} <S2SV_ModEnd> typedef struct PCDTable <S2SV_ModStart> ) AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; buffer = ( unsigned char * ) AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ;",0
1211,<S2SV_ModStart> ; if ( asdl_typ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1212,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1213,"<S2SV_ModStart> HAVE_IPV6 char * <S2SV_ModEnd> p ; if <S2SV_ModStart> 2 ) ; if ( * ( str + 1 ) == '[' ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; return NULL ; } * portno = atoi ( p + 2 ) ; return estrndup ( str + 1, str_len - 1 ) ; } else { * portno = atoi ( p + 1 ) ; host = estrndup ( str, str_len - 1 ) ; } else { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } # else if ( str_len ) { colon = memchr ( str, ':', str_len - 1 ) ; } else { colon = NULL ; } if ( colon ) { * portno = atoi ( colon + 1 ) ; host = estrndup ( str, colon - str ) ; } else { if ( get_err ) { * err = strpprintf",0
1214,"<S2SV_ModStart> -> y_buffer ; memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
1215,<S2SV_ModStart> cblk_style = bytestream2_get_byteu <S2SV_ModEnd> ( & s <S2SV_ModStart> g ) ; if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( c -> transform == FF_DWT97 ) ) c -> transform = FF_DWT97_INT ; if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( c -> transform == FF_DWT97 ) ) c -> transform = FF_DWT97_INT ; if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( c -> transform == FF_DWT97 ) ) c -> transform = FF_DWT97_INT ; if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( c -> transform == FF_DWT97 ) ) c -> transform = FF_DWT97_INT ; if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( c -> transform == FF_DWT97 ) ) c -> transform = FF_DWT97_INT ; if ( ( s -> avctx -> flags &,0
1216,<S2SV_ModStart> { if ( 0 == <S2SV_ModEnd> curl_easy_getinfo ( curl <S2SV_ModStart> ; if ( 0 == <S2SV_ModEnd> curl_easy_getinfo ( curl <S2SV_ModStart> ; if ( 0 == <S2SV_ModEnd> curl_easy_getinfo ( curl <S2SV_ModStart> ; if ( 0 == <S2SV_ModEnd> curl_easy_getinfo ( curl <S2SV_ModStart> ; if ( 0 == <S2SV_ModEnd> curl_easy_getinfo ( curl <S2SV_ModStart> ; if ( 0 == <S2SV_ModEnd> curl_easy_getinfo ( curl <S2SV_ModStart> ; if ( 0 == <S2SV_ModEnd> curl_easy_getinfo ( curl <S2SV_ModStart> ; if ( 0 == <S2SV_ModEnd> curl_easy_getinfo ( curl <S2SV_ModStart> ; if ( 0 == <S2SV_ModEnd> curl_easy_getinfo ( curl <S2SV_ModStart> ; if ( 0 == <S2SV_ModEnd> curl_easy_getinfo ( curl <S2SV_ModStart> ; if ( 0 == <S2SV_ModEnd> curl_easy_getinfo ( curl <S2SV_ModStart> ; if ( 0 == <S2SV_ModEnd> curl_easy_getinfo ( curl <S2SV_ModStart> ; if ( 0 == <S2SV_ModEnd> curl_easy_getinfo ( curl <S2SV_ModStart> ; if ( 0 == <S2SV_ModEnd> curl_easy_getinfo ( curl <S2SV_ModStart> ; if ( 0 == <S2SV_ModEnd> curl_easy_getinfo ( curl <S2SV_ModStart> ; if ( 0 == <S2SV_ModEnd> curl_easy_getinfo ( curl <S2SV_ModStart> ; if ( 0 == <S2SV_ModEnd> curl_easy_getinfo (,0
1217,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> dummy_rate ; int64_t dummy_dist ; MACROBLOCK * x = & cpi -> mb ; if ( sf -> adaptive_pred_interp_filter ) { for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 4, num_4x4_blocks_wide_lookup [ i ] ) ; const int num_4x4_blk = MAX ( 4, num_4x4_blk ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> mb_index = 0",0
1218,"<S2SV_ModStart>, obj_tlen ; u_int <S2SV_ModEnd> hexdump ; u_int <S2SV_ModStart> ; if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> object <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> object <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> object <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> object <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> object <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> object <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> object <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ;",0
1219,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inc_mvs ( const <S2SV_ModStart> ++ i ) { MV diff = { mvs [ i ]. as_mv. row - mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ] [ 0 ]. as_mv. row, mvs [ i ]. as_mv. col - mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ] [ 0 ]. as_mv. col - mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ]",0
1220,<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1221,"<S2SV_ModStart> ; if ( size < skb -> len ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; hlist_for_each_entry ( entry, chain, list ) { size = entry -> skb -> len - hdr_size ; memcpy ( skb_put ( skb_out, size ), entry -> skb -> data + hdr_size, size ) ; size = entry -> skb -> len - hdr_size ; memcpy ( skb_put ( skb_out, size ), entry -> skb -> data + hdr_size, size ) ; }",0
1222,"<S2SV_ModStart> ; spin_lock_init ( & sta -> ampdu_mlme. lock ) ; INIT_WORK ( & sta -> drv_unblock_wk, sta_unblock ) ; INIT_WORK ( & sta -> ampdu_mlme. work, ieee80211_ba_session_work ) ;",0
1223,<S2SV_ModStart> tp_event ) &&! perf_paranoid_kernel ( ) &&! capable ( CAP_SYS_ADMIN ) ) return - EPERM ; if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } if ( perf_paranoid_tracepoint_raw ( ) &&! capable ( CAP_SYS_ADMIN ) ) return - EPERM ; if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } if ( perf_paranoid_kernel ( ) &&! capable ( CAP_SYS_ADMIN ) ) return - EPERM ; if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_,0
1224,"<S2SV_ModStart> 1 ) ; if (! data_interface ) { dev_err ( & intf -> dev, ""No <S2SV_blank> data <S2SV_blank> interfaces <S2SV_blank> for <S2SV_blank> this <S2SV_blank> device\\n"" ) ; return - ENODEV ; } <S2SV_ModStart> 0 ) ; if (! control_interface ) { dev_err ( & intf -> dev, ""No <S2SV_blank> control <S2SV_blank> interfaces <S2SV_blank> for <S2SV_blank> this <S2SV_blank> device\\n"" ) ; return - ENODEV ; } if (! epread ) { dev_err ( & intf -> dev, ""No <S2SV_blank> data <S2SV_blank> endpoints <S2SV_blank> for <S2SV_blank> this <S2SV_blank> device\\n"" ) ; return - ENODEV ; } if (! epread ) { dev_err ( & intf -> dev, ""No <S2SV_blank> data <S2SV_blank> endpoints <S2SV_blank> for <S2SV_blank> this <S2SV_blank> device\\n"" ) ; return - ENODEV ; } if (! epread ) { dev_err ( & intf -> dev, ""No <S2SV_blank> data <S2SV_blank> endpoints <S2SV_blank> for <S2SV_blank> this <S2SV_blank> device\\n"" ) ; return - ENODEV ; } if (! epwrite ) { dev_err ( & intf -> dev, ""No <S2SV_blank> data <S2SV_blank> endpoints <S2SV_blank> for <S2SV_blank> this <S2SV_blank> device\\n"" ) ; return - ENODEV ; }",0
1225,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1226,"<S2SV_ModStart> return ; DEBUGMSGTL ( ( ""init_mib"", ""Seen <S2SV_blank> MIBDIRS: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> dirs <S2SV_blank>...\\n"", env_var ) ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var",0
1227,"<S2SV_ModStart> * head ; sctp_skb_for_each ( skb, & assoc -> ulpq. reasm, & tmp ) { sctp_skb_copy_descendant ( skb, oldsk ) ; memcpy ( & tmplist, & newsp -> auto_asconf_list, sizeof ( tmplist ) ) ; inet_sk_copy_descendant ( newsk, oldsk ) ; newsp -> ep = newep ; sctp_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; spin_lock ( & head -> lock ) ; pp = sctp_sk ( oldsk ) -> bind_hash ; sk_add_bind_node ( newsk, & pp -> owner ) ; sctp_sk ( newsk ) -> bind_hash = pp ; sctp_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; sctp_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; sctp_sk ( newsk ) -> bind_hash = pp ; sctp_sk ( newsk )",0
1228,"<S2SV_ModStart> open ( uinput_dev_path [ x ], O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } if ( x == MAX_UINPUT_PATHS ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } if ( write ( fd, & dev, sizeof ( dev ) ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } if ( write ( fd, & dev, sizeof ( dev ) ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } if ( write ( fd, & dev, sizeof ( dev ) ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> device <S2SV_blank>",0
1229,"<S2SV_ModStart> regs ) { <S2SV_ModEnd> short sel ; <S2SV_ModStart> return sel ; <S2SV_ModEnd> if ( v8086_mode <S2SV_ModStart> return sel ; <S2SV_ModEnd> desc = get_desc <S2SV_ModStart> sel ) ; if (! desc ) return - EINVAL ; <S2SV_ModEnd> switch ( ( <S2SV_ModStart> << 1 ) | desc -> l ) { case 0 : return INSN_CODE_SEG_PARAMS ( 2, 2 ) ; case 1 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 2 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; case 3 : return INSN_CODE_SEG_PARAMS ( 2, 3 ) ; case 4 : return INSN_CODE_SEG_PARAMS ( 2, 4 ) ; case 5 : return INSN_CODE_SEG_PARAMS ( 2, 5 ) ; case 6 : return INSN_CODE_SEG_PARAMS ( 2, 6 ) ; case 7 : return INSN_CODE_SEG_PARAMS ( 4, 6 ) ; case 8 : return INSN_CODE_SEG_PARAMS ( 4, 6 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1230,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
1231,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
1232,<S2SV_ModStart> return ret ; <S2SV_ModEnd> out_free_uid : free_uid,0
1233,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_ctx_id_t <S2SV_ModEnd> * pctx ) <S2SV_ModStart> ; code = krb5_gss_init_context <S2SV_ModEnd> ( & ctx,0
1234,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; bitmapDC = CreateCompatibleDC ( hDC ) ; if ( bitmapDC == ( HDC ) NULL ) { DeleteDC ( hDC ) ; ThrowReaderException ( CoderError, ""UnableToCreateDC"" ) ; }",0
1235,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
1236,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { kfree ( string ) ; return - EINVAL ; }",0
1237,<S2SV_ModStart> imethod ) ; if ( inflated ) { <S2SV_ModStart> imethod ) ; },0
1238,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; unsigned long tmp <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( buf, buffer, count ) ) return - EFAULT ; tmp = simple_strtol ( buf, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ; uml_exitcode = tmp ;",0
1239,"<S2SV_ModStart>, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"" <S2SV_ModEnd>, ctxt ->",0
1240,"<S2SV_ModStart> 1 ; } if ( le32_to_cpu ( raw_super -> log_blocks_per_seg ) > F2FS_MAX_LOG_BLOCKS || le32_to_cpu ( raw_super -> log_sectorsize ) > F2FS_MIN_LOG_SECTOR_SIZE ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> blocks <S2SV_blank> per <S2SV_blank> segment <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> log_blocks_per_seg ) ) ; return 1 ; } if ( le32_to_cpu ( raw_super -> log_sectorsize ) > F2FS_MAX_LOG_SECTOR_SIZE ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> sectorsize <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> log_sectorsize ) ) ; return 1 ; }",0
1241,"<S2SV_ModStart> ) { char <S2SV_ModEnd> * last_elem, <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN}"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM}"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_origin ) : _dl_platform ) ; if ( repl",0
1242,<S2SV_ModStart> } pDecCont = ( decContainer_t * ),0
1243,"<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_space <S2SV_ModEnd> ; DECLARE_SOCKADDR ( <S2SV_ModStart> final_p ) ; opt_space = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) <S2SV_ModStart> final_p ) ; rcu_assign_pointer ( np -> opt, opt_space ) ;",0
1244,"<S2SV_ModStart> } if ( unlikely ( iph -> ihl > IP_OPTION_MAX / 4 ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } <S2SV_ModStart> ( iph -> ihl > IP_OPTION_MAX / 4 ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen > IP_OPTION_MAX / 4 ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if",0
1245,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1246,"<S2SV_ModStart> ; if ( table_id == RT_TABLE_MAIN ) { rt = rcu_dereference_protected ( net -> ipv4. rt_table, lockdep_is_held ( & net -> ipv4. rt_table, lockdep_is_held ( & net -> ipv4. rt_table ) ) ; if ( rt == NULL ) { err = - EINVAL ; goto errout ; } else if ( table_id == RT_TABLE_MAIN ) { rt = rcu_dereference_protected ( net -> ipv4. rt_table, lockdep_is_held ( & net -> ipv4. rt_table, lockdep_is_held ( & net -> ipv4. rt_table ), lockdep_is_held ( & net -> ipv4. rt_table ) ) ; if ( rt == NULL ) { err = - EINVAL ; goto errout ; } else if ( table_id == RT_TABLE_MAIN ) { rt = rcu_dereference_protected ( net -> ipv4. rt_table, lockdep_is_held ( & net -> ipv4. rt_table )",0
1247,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1248,<S2SV_ModStart> goto errout ; if ( ci -> num_stagemasks < info -> partitions || ci -> num_stagemasks < info -> partitions || ci -> num_stagemasks < info -> partitions || ci -> num_stagemasks < info -> partitions || ci -> num_stagemasks < info -> partitions || ci -> num_stagemasks < info -> partitions || ci -> num_stagemasks < info -> partitions ) goto errout ; <S2SV_ModStart> goto errout ; if ( ci -> num_stagemasks < info -> partitions || ci -> num_stagemasks < info -> partitions || ci -> num_stagemasks < info -> partitions || ci -> num_stagemasks < info -> partitions || ci -> num_stagemasks < info -> partitions || ci -> num_stagemasks < info -> partitions || ci -> num_stagemasks < info -> partitions || ci -> num_stagemasks < info -> partitions || ci -> num_stagemasks < info -> partitions || ci -> num_stagemasks,0
1249,"<S2SV_ModStart> if (! js_doregexec ( J, <S2SV_ModEnd> re -> prog",1
1250,"<S2SV_ModStart> ) break ; if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; }",0
1251,"<S2SV_ModStart> ; krb5_key_data * key_data = NULL <S2SV_ModStart> ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key",0
1252,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
1253,<S2SV_ModStart> ] ) ; if ( nByte < 0 ) return SQLITE_INVALID ;,0
1254,<S2SV_ModStart> filp ) { mutex_unlock ( & SOCKET_I ( inode ) -> io_mutex ) ;,0
1255,"<S2SV_ModStart> * orelse, string type_comment, int <S2SV_ModEnd> lineno, int <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",1
1256,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> mi_sort_index ( register <S2SV_ModStart> ""Can\'t <S2SV_blank> sort <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> sorted <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ;",0
1257,"<S2SV_ModStart> } } return rcu_dereference_protected ( inet_sk ( sk ) -> inet_opt, sock_owned_by_user ( sk ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
1258,"<S2SV_ModStart> ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) ) { kvm_queue_exception ( vcpu, KVM_EXIT_INTERNAL_ERROR ) ; vcpu -> run -> exit_reason = KVM_EXIT_INTERNAL_ERROR ; vcpu -> run -> internal. suberror = KVM_INTERNAL_ERROR_SIMUL_EX ; } else { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) ) { kvm_queue_exception ( vcpu, KVM_EXIT_INTERNAL_ERROR ) ; vcpu -> run -> exit_reason = KVM_EXIT_INTERNAL_ERROR ; vcpu -> run -> internal. suberror = KVM_INTERNAL_ERROR_SIMUL_EX ; } else { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { kvm_queue_exception ( vcpu, KVM",0
1259,"<S2SV_ModStart> ; case NGHTTP2_ERR_STREAM_ID_NOT_SUPPORTED : return ""No <S2SV_blank> more <S2SV_blank> Stream <S2SV_blank> ID <S2SV_blank> available"" ; case NGHTTP2_ERR_STREAM_SHUT_WR : return ""The <S2SV_blank> transmission <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case <S2SV_ModStart> ""The <S2SV_blank> transmission <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_INVALID_STREAM_ID : return ""Stream <S2SV_blank> ID <S2SV_blank> is <S2SV_blank> invalid"" ; case NGHTTP2_ERR_INVALID_STREAM_ID : return ""Stream <S2SV_blank> ID <S2SV_blank> is <S2SV_blank> invalid"" ; case NGHTTP2_ERR_INVALID_STREAM_ID : return ""Stream <S2SV_blank> ID <S2SV_blank> is <S2SV_blank> invalid"" ; case NGHTTP2_ERR_DEFERRED_DATA_EXIST : return ""Another <S2SV_blank> DATA <S2SV_blank> frame <S2SV_blank> has <S2SV_blank> already <S2SV_blank> been <S2SV_blank> deferred"" ; case NGHTTP2_START_STREAM_NOT_ALLOWED : return ""request <S2SV_blank> HEADERS <S2SV_blank> is <S2SV_blank> not <S2SV_blank> not <S2SV_blank> allowed"" ; case NGHTTP2_GOAWAY_ALREADY_SENT : return ""GOAWAY <S2SV_blank> has <S2SV_blank> already <S2SV_blank> been <S2SV_blank> sent",0
1260,"<S2SV_ModStart> UINT error ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""rdpei_recv_pdu <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> too <S2SV_blank> short <S2SV_blank> eventId: <S2SV_blank> %"" PRIu16 "" <S2SV_blank> (%u) <S2SV_blank> length: <S2SV_blank> %"" PRIu32 """", ( unsigned int ) <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1261,"<S2SV_ModStart> - 1 ) zsocket_set_multicasthops ( pData -> socket, pData -> multicastHops ) ; if ( pData -> maxMsgSize > - 1 ) zsocket_set_maxmsgsize ( pData -> socket, pData -> maxMsgSize ) ; if ( pData -> recoveryIVL > - 1 ) zsocket_set_recovery_ivl ( pData -> socket, pData -> recoveryIVL ) ; if ( pData -> maxMsgSize > - 1 ) zsocket_set_multicasthops ( pData -> socket, pData -> multicastHops ) ; if ( pData -> rcvTimeout > - 1 ) zsocket_set_rcvtimeo ( pData -> socket, pData -> rcvTimeout ) ; if ( pData -> sndTimeout > - 1 ) zsocket_set_sndtimeo ( pData -> socket, pData -> sndTimeout ) ; if ( pData -> rcvTimeout > - 1 ) zsocket_set_rcvtimeo ( pData -> socket, pData -> rcvTimeout ) ; if ( pData -> sndTimeout > - 1 ) zsocket_set_sndtimeo ( pData ->",0
1262,"<S2SV_ModStart> return chg ; if ( hugepage_subpool_get_pages ( spool, chg ) ) return - ENOSPC ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ;",0
1263,"<S2SV_ModStart> sk ) ; struct ipv6_txoptions * opt <S2SV_ModStart> struct flowi6 fl6 ; if ( ipv6_addr_type ( & fl6. saddr ) & IPV6_ADDR_LINKLOCAL ) fl6. flowlabel = np -> flow_label ; else if ( ipv6_addr_type ( & fl6. saddr ) & IPV6_ADDR_LINKLOCAL ) fl6. flowi6_oif = sk -> sk_bound_dev_if ; else if ( ipv6_addr_type ( & fl6. saddr ) & IPV6_ADDR_LINKLOCAL ) fl6. flowlabel = np -> flow_label ; IP6_ECN_flow_xmit ( sk, & fl6. flowlabel ) ; if ( ipv6_addr_type ( & fl6. saddr ) & IPV6_ADDR_LINKLOCAL ) fl6. flowi6_oif = sk -> sk_bound_dev_if ; if ( ipv6_addr_type ( & fl6. saddr ) & IPV6_ADDR_LINKLOCAL ) fl6. flowlabel = np -> flow_label ; if ( ipv6_addr_type ( &",0
1264,"<S2SV_ModStart> out_free ; } if ( path. dentry -> d_sb -> s_type == & ecryptfs_fs_type ) { rc = - EINVAL ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; } if ( path. dentry -> d_sb -> s_type == & ecryptfs_fs_type ) { rc = - EINVAL ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; } if ( path. dentry -> d_sb -> s_type == & ecryptfs_fs_type ) { rc = - EINVAL ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\",0
1265,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1266,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
1267,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; if (! Stream_SafeSeek ( s, length ) ) { WLog_ERR ( TAG, ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if (! Stream_SafeSeek ( s, length ) ) { WLog_ERR ( TAG, ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"" ) ; return ; }",0
1268,"<S2SV_ModStart> kadm5_policy_ent_rec pol ; osa_princ_rec hist_princ ; <S2SV_ModStart>, last_pwd ; if ( keepold ) return KADM5_PROTECT_PRINCIPAL ; for ( hist_princ = adb. hist_princ ; hist_princ!= NULL ; hist_princ ++ ) { if (! kdb_principal_compare ( handle -> context, principal, hist_princ ) ) return KADM5_PROTECT_PRINCIPAL ; new_n_ks_tuple = 1 ; } ret = apply_keysalt_policy ( handle, adb. policy, n_ks_tuple, ks_tuple, & new_n_ks_tuple, & new_n_ks_tuple ) ; if ( ret ) return KADM5_PROTECT_PRINCIPAL ; if ( keepold ) return KADM5_PROTECT_PRINCIPAL ;",0
1269,<S2SV_ModStart> ; int result = RLC_ERR ; bn_t t ; bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY,0
1270,<S2SV_ModStart> ] ) ; if ( mem [ r1. i ] == 0 ) mem [ r1. i ] = ( uint64_t ) yr_malloc ( MEM_SIZE ) ; if ( mem [ r1. i ] == 0 ) mem [ r1. i ] = ( uint64_t ) yr_malloc ( MEM_SIZE ) ; if ( mem == NULL ) mem = ( uint64_t ) yr_malloc ( MEM_SIZE ) ; if ( mem == NULL ) mem = ( uint64_t ) yr_malloc ( MEM_SIZE ) ; if ( mem == NULL ) mem = ( uint64_t ) yr_malloc ( MEM_SIZE ) ; if ( mem == NULL ) mem [ r1. i ] = ( uint64_t ) yr_malloc ( MEM_SIZE ) ; if ( mem == NULL ) mem = ( uint64_t ) yr_malloc ( MEM_SIZE ) ; if ( mem == NULL ) mem = ( uint64_t ) yr_malloc ( MEM_SIZE ) ; if ( mem == NULL ) mem = ( uint64_t ) yr_malloc ( MEM_SIZE ) ; if ( mem ==,0
1271,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1272,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1273,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1274,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> ++ j ) count [ i ] += cm -> counts. <S2SV_ModEnd> switchable_interp [ j,0
1275,"<S2SV_ModStart> { token ++ ; } if ( token [ 0 ] =='<S2SV_blank>'|| token [ 0 ] == '[' || token [ 0 ] == ']' ) { token ++ ; } op -> operands [ operand ]. type = ARM_GPR ; op -> operands [ operand ]. reg = r_num_math ( NULL, token + 1 ) ; if ( op -> operands [ operand ]. reg > 31 ) { return false ; } op -> operands [ operand ]. reg = r_num_math ( NULL, token + 1 ) ; if ( op -> operands [ operand ]. reg > 31 ) { return false ; } op -> operands [ operand ]. type = ARM_GPR ; op -> operands [ operand ]. reg_type = ARM_REG64 ; op -> operands [ operand ]. reg = r_num_math ( NULL, token + 1 ) ; if ( op -> operands [ operand ]. reg > 31 ) { return false ; } op -> operands [ operand ]. type = ARM_GPR ; op -> operands [ operand ]. reg_type = ARM_REG64 ; op -> operands [ operand ]. reg = r_num_math ( NULL, token +",0
1276,"<S2SV_ModStart> cpi ) { VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModStart> -> act_zbin_adj = 0 <S2SV_ModEnd> ; vpx_setup_src_planes ( <S2SV_ModStart> = 0 ; vpx_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_dst_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; vpx_memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_cols ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1277,"<S2SV_ModStart> ) ; if (! htc_request_check_host_hdr ( hp ) ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { WSPR <S2SV_ModEnd> ( sp, <S2SV_ModStart> SLT_Error, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_URL, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_REQ, HTTP_HDR_URL, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = htc_request_check_host_hdr ( hp ) ; if ( retval!= 0 ) { WSPR ( sp,",0
1278,"<S2SV_ModStart> 0x07 # define NoMemoryError <S2SV_ModEnd> 0x08 Image * <S2SV_ModStart> ) ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ) ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( Corrupt",0
1279,"<S2SV_ModStart> - ENODEV ; if ( idx < 0 ) idx = get_slot_from_bitmask ( idx, module_slot_match, module ) ; if ( idx < 0 ) idx = get_slot_from_bitmask ( idx, check_empty_slot, module ) ; if ( idx < 0 ) idx = get_slot_from_bitmask ( idx, check_empty_slot, module ) ; if ( idx < 0 ) idx = get_slot_from_bitmask ( idx, module_slot_match, module ) ; if ( idx < 0 ) err = - ENODEV ; else if ( idx >= SNDRV_CARDS ) err = - ENODEV ; if ( err < 0 ) { mutex_unlock ( & snd_card_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> (range <S2SV_blank> 0-%i), <S2SV_blank> error: <S2SV_blank> %d\\n"", idx, snd_cards_lock ) ; kfree ( card ) ; return err ; }",0
1280,"<S2SV_ModStart> ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } if ( padlen + 3 > sig_len ) { return ""4"" ""SIG <S2SV_blank> padding <S2SV_blank> failed; <S2SV_blank> too <S2SV_blank> many <S2SV_blank> octets"" ; }",0
1281,"<S2SV_ModStart> len ) ; if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len + sizeof ( tETH_HDR ) ) ; return - 1 ; } <S2SV_ModStart> len ) ; if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len + sizeof ( tETH_HDR )",0
1282,<S2SV_ModStart> u1_field_pic_flag ) { if ( ps_prev_poc -> i4_delta_pic_order_cnt_lsb!= ps_cur_poc -> i4_delta_pic_order_cnt_lsb || ps_prev_poc -> i4_delta_pic_order_cnt_msb!= ps_cur_poc -> i4_delta_pic_order_cnt_msb ) { ps_dec -> i4_delta_pic_order_cnt_bottom = ps_cur_poc -> i4_delta_pic_order_cnt_bottom ; ps_dec -> i4_delta_pic_order_cnt_lsb = ps_cur_poc -> i4_delta_pic_order_cnt_lsb ; ps_dec -> i4_delta_pic_order_cnt_msb = ps_cur_poc -> i4_delta_pic_order_cnt_msb ; ps_dec -> i4_delta_pic_order_cnt_bottom = ps_cur_poc -> i4_delta_pic_order_cnt_bottom ; ps_dec ->,0
1283,"<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; SSLerr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; <S2SV_ModStart> item ) ; SSLerr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ;",0
1284,"<S2SV_ModStart> int ret ; if ( args -> buffer_count > I915_NUM_BUFFERS ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } if ( args -> buffer_count > I915_NUM_BUFFERS ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } ret = copy_from_user ( exec2_list, args -> buffers_ptr, sizeof ( * exec2_list ) * args -> buffer_count ) ; if ( ret!= 0 ) { DRM_DEBUG ( ""failed <S2SV_blank> to <S2SV_blank> copy <S2SV_blank> %d <S2SV_blank> exec <S2SV_blank> entries <S2SV_blank> back <S2SV_blank> to <S2SV_blank> user <S2SV_blank> (%d)\\n"", args -> buffer_count, ret ) ; drm_free_large ( exec2_list ) ; return - EFAULT ; }",0
1285,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; struct pci_dev <S2SV_ModStart> * pdev ; <S2SV_ModEnd> int cim_rev ; <S2SV_ModStart> PTR_ERR ( karg <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; return <S2SV_ModEnd> PTR_ERR ( karg <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart>. maxDataSize!= data_size ) { printk ( MYIOC_s_ERR_FMT ""%s@%d <S2SV_blank> - <S2SV_blank> "" ""Structure <S2SV_blank> size <S2SV_blank>!= <S2SV_blank> %d\\n"", __FILE__, __LINE__, karg -> hdr. maxDataSize ) ; kfree ( karg ) ; return - ENODEV ; } if ( karg -> hdr. maxDataSize!= data_size ) { printk ( MYIOC_s_ERR_FMT ""%s@%d <S2SV_blank> - <S2SV_blank> "" ""Structure <S2SV_blank> size <S2SV_blank>!= <S2SV_blank> %d\\n"", MYIOC_s_ERR_FMT ""%s@%d\\n"", __FILE__, __LINE__, karg -> hdr. max",0
1286,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
1287,"<S2SV_ModStart> const char * path <S2SV_ModEnd> ) { unsigned <S2SV_ModStart> mnt_type, mntent -> mnt_flags <S2SV_ModEnd>, mntdata,",0
1288,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1289,"<S2SV_ModStart> ab ) { <S2SV_ModEnd> size_t i, <S2SV_ModStart> = 0 ; <S2SV_ModEnd> char * buf <S2SV_ModStart> * ab, ""argc=%d"", context -> execve. argc ) ; char * buf ; size_t len_sent = 0 ; <S2SV_ModStart> -> arg_start ; buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if ( len <= 0 ) break ; buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve",0
1290,"<S2SV_ModStart>, O_WRONLY | O_CREAT <S2SV_ModEnd> | O_CLOEXEC |",0
1291,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> NETSCREEN_LINE_LENGTH ] ; char line [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; gboolean cap_dir ; char cap_dst [ 13 ] ; if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = WTAP_ERR_SHORT_READ ; } return FALSE ; } if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = file_error ( wth -> random_fh, err_info ) ; if ( * err == 0 ) { * err = WTAP_ERR_SHORT_READ ; } return FALSE ; } if ( parse_netscreen_hex_dump ( wth -> random_fh, pkt_len, cap_int, & cap_dir, cap_dst, phdr, buf, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> random_fh, pkt_len, cap",0
1292,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ; u64 irq_time ; if ( rq -> skip_clock_update ) return <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1293,"<S2SV_ModStart> else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * argv ) ; exit ( 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * argv ) ; exit ( 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * argv ) ; exit ( 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * argv ) ; exit ( 1 <S2SV_ModEnd> ) ; }",0
1294,"<S2SV_ModStart> st ) { union blkif_back_rings * blk_rings ; struct blkif_response resp <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> int notify ; memset ( & resp, 0, sizeof ( resp ) ) ; <S2SV_ModStart> case BLKIF_PROTOCOL_NATIVE : memcpy ( RING_GET_RESPONSE ( & blk_rings -> native, blk_rings -> native. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_32 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_32, blk_rings -> x86_32. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_64 : memcpy ( & blk_rings -> x86_64, blk_rings -> x86_64. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; default : BUG ( ) ; } <S2SV_ModEnd> blk_rings -> common",0
1295,<S2SV_ModStart> ; if ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) { if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( mask & KADM5_ATTRIBUTES ) && ( entry ->,0
1296,"<S2SV_ModStart> ; if ( 2 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteDataFuji"", sizeof ( MnoteF",0
1297,"<S2SV_ModStart> ; if ( strlen ( fname ) >= sizeof ( htmlstring ) ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } fname = strrchr ( fname, '\\0' ) ; if ( strlen ( fname ) >= sizeof ( htmlstring ) ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } fname = strrchr ( fname, '\\0' ) ; if ( strlen ( fname ) >= sizeof ( htmlstring ) ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } if ( strlen ( fname ) >= sizeof ( htmlstring ) ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } fname = strrchr ( fname, '\\0' ) ; if ( strlen ( fname ) >= sizeof ( htmlstring ) ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName",0
1298,"<S2SV_ModStart> case ICMP_ECHO_REPLY : ND_TCHECK_16BITS ( & dp -> icmp_seq ) ; <S2SV_ModStart> ""echo <S2SV_blank> %s, <S2SV_blank> id <S2SV_blank> %u, <S2SV_blank> seq <S2SV_blank> %u"", dp -> icmp_type, dp -> icmp_seq, EXTRACT_16BITS ( & dp -> icmp_id ), EXTRACT_16BITS ( & dp -> icmp_seq ) ) ; break ; case ICMP_ECHOREPLY : ND_TCHECK_16BITS ( & dp -> icmp_seq ) ; <S2SV_ModStart> ) snprintf ( buf, sizeof ( buf ), ""echo <S2SV_blank> %s, <S2SV_blank> id <S2SV_blank> %u, <S2SV_blank> seq <S2SV_blank> %u"", dp -> icmp_type, dp -> icmp_seq, EXTRACT_16BITS ( & dp -> icmp_id ), EXTRACT_16BITS ( & dp -> icmp_seq ) ) ; break ; default : ND_TCHECK_16BITS ( & dp -> icmp_seq ) ; <S2SV_ModStart> ) snprintf ( buf, sizeof ( buf ), ""echo <S2SV_blank> %s, <S2SV_blank> id <S2SV_blank> %u, <S2SV_blank> seq <S2SV_blank> %u"", dp ->",0
1299,"<S2SV_ModStart> flags ) { <S2SV_ModEnd> int dir_has_key, <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> d_lock ) ; <S2SV_ModEnd> dir_has_key = ( <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL )",0
1300,"<S2SV_ModStart> void unbind_ports ( <S2SV_ModEnd> void ) { <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> CRYPTO_THREAD_write_lock ( stunnel_locks <S2SV_ModStart> LOCK_SECTIONS ] ) ; opt = service_options. next ; service_options. next = NULL ; service_free ( & service_options ) ; while ( opt ) { unsigned i ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names ) { opt -> option. retry = 0 ; } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names ) { opt -> option. retry = 0 ; }",0
1301,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( <S2SV_ModEnd> argc > MAX_PACK_ARGS <S2SV_ModStart> argc > MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } } if ( argc < 2 ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Not <S2SV_blank> enough <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } result = ( * pack ) ( argc, numbers, & error ) ; if ( error!= NULL ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""%s"", error ) ; return ARCHIVE_WARN ; } if ( argc < 1 ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Not <S2SV_blank> enough <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } result = ( dev_t ) mtree_atol ( & p ) ; if ( error!= NULL ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_",0
1302,<S2SV_ModStart> parent ) ; if ( i -> width > <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1303,"<S2SV_ModStart> n ) ; if ( l > buf + n ) { <S2SV_ModEnd> syslog ( LOG_WARNING <S2SV_ModStart> ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( l == 0 && type!= MINISSDPD_SEARCH_ALL && type!= MINISSDPD_GET_VERSION && type!= MINISSDPD_NOTIF ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0, <S2SV_blank> type=%d)"", type ) ; goto error ; } if ( l == 0 && type!= MINISSDPD_GET_VERSION && type!= MINISSDPD_NOTIF ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0, <S2SV_blank> type=%d)"", type ) ; goto error ; } if ( l == 0 && type!= MINISSDPD_GET_VERSION && type!= MINISSDPD_NOTIF ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0, <S2SV_blank> type=%d)"", type ) ; goto error ; }",0
1304,"<S2SV_ModStart> ; RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, len - op -> size, cpu ) ; if (! avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ) { FATAL ( ""AVR_OP_ANALYSIS: <S2SV_blank> AVR_OP_ANALYSIS: <S2SV_blank> AVR_OP_ANALYSIS: <S2SV_blank> AVR_OP_ANALYSIS: <S2SV_blank> AVR_OP_ANALYSIS: <S2SV_blank> AVR_OP_ANALYSIS: <S2SV_blank> AVR_OP_ANALYSIS: <S2SV_blank> AVR_OP_ANALYSIS: <S2SV_blank> AVR_OP_ANALYSIS: <S2SV_blank> AVR_OP_ANALYSIS: <S2SV_blank> AVR_OP_ANALYSIS: <S2SV_blank> AVR_OP_ANALYSIS: <S2SV_blank> AVR_OP_ANALYSIS: <S2SV_blank> AVR_OP_ANALYSIS: <S2SV_blank> AVR_OP_ANALYSIS: <S2SV_blank> AVR_OP_ANALYSIS: <S2SV_blank> AVR_OP",0
1305,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart>. scale!= ( Quantum * ) NULL ) info. scale = ( Quantum * ) RelinquishMagickMemory ( info. scale ) ; if ( data!= ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( info. scale!= ( Quantum * ) NULL ) info. scale = ( Quantum * ) RelinquishMagickMemory ( info. scale ) ; if ( info. scale!= ( Quantum * ) NULL ) info. scale = ( Quantum * ) RelinquishMagickMemory ( info. scale ) ; if ( data!= ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( info. scale!= ( Quantum * ) NULL ) info. scale = ( Quantum * ) RelinquishMagickMemory ( info. scale ) ; if ( info. scale!= ( Quantum * ) NULL ) info. scale = ( Quantum * ) RelinquishMagickMemory ( info. scale ) ; if",0
1306,<S2SV_ModStart> void ) { if ( recovery_mode == RECOVERY_MODE_SIMPLE ) { recovery_mode = RECOVERY_MODE_SIMPLE ; switch ( recovery_mode ) { case RECOVERY_MODE_SIMPLE : mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; break ; case RECOVERY_MODE_SIMPLE : mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; break ; case RECOVERY_MODE_SIMPLE : mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; break ; case RECOVERY_MODE_SIMPLE : mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; break ; case RECOVERY_MODE_SIMPLE : mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; break ; case RECOVERY_MODE_SIMPLE : mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; break ; case RECOVERY_MODE_SIMPLE : mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; break ; case RECOVERY_MODE_SIMPLE : mnemonic [ strlen ( mnemonic ),0
1307,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT7 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT8 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT9 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT10 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT11 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT12 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT13 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT14 <S2SV_ModEnd> )",0
1308,"<S2SV_ModStart> == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1309,"<S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read <S2SV_blank> of <S2SV_blank> service <S2SV_blank> list <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read <S2SV_blank> of <S2SV_blank> service <S2SV_blank> list <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read <S2SV_blank> of <S2SV_blank> service <S2SV_blank> list <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read <S2SV_blank> of <S2SV_blank> service <S2SV_blank> list <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read <S2SV_blank> of <S2SV_blank> service <S2SV_blank> list <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read <S2SV_blank> of <S2SV_blank> service <S2SV_blank> list <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" <S2SV_ModEnd>, req ->",0
1310,"<S2SV_ModStart> ) { WORD32 st_rps_idx, ai4_num_st_curr_before, u4_num_st_curr_after, u4_num_st_curr_foll, u4_num_lt_curr, u4_num_total_curr, u4_num_ref_curr_before, u4_num_ref_curr_after, u4_num_ref_curr_foll, ai4_num_st_curr_before, u4_num_st_curr_after, u4_num_st_curr_after, u4_num_st_curr_before, u4_num_st_curr_foll, u4_num_lt_curr, u4_num_total_curr, u4_num_ref_curr_added, u4_num_ref_curr_added, u4_num_ref_curr_added, u4_num_st_curr_after, u4_num_st_curr_before, u4_num_st_curr_after, u4_num_st_curr_after, u4_num_",0
1311,"<S2SV_ModStart> PTRACE_GET_THREAD_AREA : if ( request == PTRACE_GETREGS ) { ret = copy_regset_to_user ( child, & user_arm_view, REGSET_GPR, 0, sizeof ( struct pt_regs ), datap ) ; break ; } else if ( request == PTRACE_SETREGS ) { ret = copy_regset_to_user ( child, & user_arm_view, REGSET_GPR, 0, sizeof ( union fp_state ), datap ) ; break ; } else if ( request == PTRACE_SETFPREGS ) { ret = copy_regset_from_user ( child, & user_arm_view, REGSET_FPR, 0, sizeof ( union fp_state ), datap ) ; break ; } else if ( request == PTRACE_GETWMMXREGS ) { ret = ptrace_getwmmxregs ( child, datap ) ; break ; } else if ( request == PTRACE_SETWMMXREGS ) { ret = ptrace_setwmmxregs ( child, datap ) ; break ; } else",0
1312,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ; goto fail <S2SV_ModEnd> ; } temp",0
1313,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart>, int fmt, printbuffer * p <S2SV_ModStart> 0 ; while ( child ) { ++ numentries ; child = child -> next ; } if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; memset ( entries, 0, sizeof ( char * ) * numentries ) ; memset ( names, 0, sizeof ( char * ) * numentries ) ; memset ( names, 0, sizeof ( char * ) * numentries ) ; memset ( entries, 0, sizeof ( char * ) * numentries ) ; memset ( entries, 0, sizeof ( char * ) * numentries ) ) ; memset ( entries, 0, sizeof ( char * ) * numentries ) ; memset ( entries, 0, sizeof ( char * ) * numentries ) ; memset ( names, 0, sizeof ( char * ) * numentries ) ; memset ( entries, 0, sizeof ( char * ) * numentries ) ; memset ( entries, 0, sizeof ( char * ) * numentries ) ;",0
1314,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
1315,"<S2SV_ModStart> sk ) ; if (! writable ) { if ( unix_peer ( sk )!= sk ) { sock_poll_wait ( file, & unix_sk ( sk ) -> peer_wait, wait ) ; writable = 0 ; } else if ( unix_recvq_full ( sk ) ) writable = 0 ; } sock_put ( sk ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask ; } if ( writable ) { mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask ; } if ( unix_writable ( sk ) ) { if ( unix_peer ( sk )!= sk ) { sock_poll_wait ( file, & unix_sk ( sk ) -> peer_wait, wait ) ; if ( unix_peer ( sk )!= sk ) { sock_poll_wait ( file, & unix_sk ( sk ) -> peer_wait, wait )",0
1316,<S2SV_ModStart> [ 4 ] ; size_t <S2SV_ModEnd> value ; if <S2SV_ModStart> ] ; size_t <S2SV_ModEnd> value ; if <S2SV_ModStart> ] << 24 ; value |= buffer [ 0 ] << 16 ; value |= buffer [ 1 ] << 8 ; value |= buffer [ 2 ] << 16 ; value |= buffer [ 3 ] << 8 ; value |= buffer [ 4 ] <S2SV_ModEnd> ; quantum. <S2SV_ModStart>. unsigned_value = <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ; return (,0
1317,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",0
1318,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; task_lock ( task <S2SV_ModEnd> ) ; ioc <S2SV_ModStart> ; ioc = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context ; task <S2SV_ModEnd> -> io_context = <S2SV_ModStart> ; task_unlock ( task <S2SV_ModEnd> ) ; if,1
1319,"<S2SV_ModStart> int ret = 0 ; if ( xtregs -> cp0 & XTREGS_CP0_BITSP ) { ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs -> cp0 ) ) ; }",0
1320,<S2SV_ModStart> 0 ) { if ( header -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( header -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( header -> buffer. length < token_wrapper_len ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length,0
1321,<S2SV_ModStart> data ) { unsigned int <S2SV_ModEnd> i ; int <S2SV_ModStart> int ret ; * value = 0 ; for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; } return ret ; } for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; } return ret ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1322,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { <S2SV_ModEnd> if ( frame <S2SV_ModStart> NULL ) { YV12_BUFFER_CONFIG * fb ; vp9_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1323,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1324,"<S2SV_ModStart> plug ) ; if ( unlikely (! kioctx_batch_ok ( & batch ) ) ) { pr_debug ( ""EINVAL: <S2SV_blank> io_submit: <S2SV_blank> invalid <S2SV_blank> context <S2SV_blank> id\\n"" ) ; return - EINVAL ; }",0
1325,<S2SV_ModStart> -> dwc ; <S2SV_ModEnd> list_del ( & <S2SV_ModStart> lock ) ; <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> lock ) ; <S2SV_ModEnd> usb_gadget_giveback_request ( & <S2SV_ModStart> -> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1326,<S2SV_ModStart> } # endif # define YYSTACK_RELOCATE ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; <S2SV_ModStart> : # define YYSTACK_RELOCATE ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; <S2SV_ModStart> : # define YYSTACK_RELOCATE ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; <S2SV_ModStart> : # define YYSTACK_RELOCATE ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; <S2SV_ModStart> : # define YYSTACK_RELOCATE <S2SV_ModEnd> ( N ) <S2SV_ModStart> : # define YYSTACK_RELOCATE ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; <S2SV_ModStart> : # define YYSTACK_RELOCATE ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; <S2SV_ModStart> : # define YYSTACK_RELOCATE ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; # define YYSTACK_RELOCATE ( N ) ( yyvsp -= ( N ) ) int,0
1327,"<S2SV_ModStart> = sas_revalidate_domain, <S2SV_ModEnd> [ DISCE_PROBE ] <S2SV_ModStart>, [ DISCE_SUSPEND ] = sas_suspend_devices, [ DISCE_RESUME ] = sas_resume_devices, [ DISCE_DESTRUCT ] = sas_destruct_devices, } ; <S2SV_ModEnd> for ( i",0
1328,"<S2SV_ModStart> * info, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart>! rep_quick && init_io_cache ( & info -> read_cache, info -> dfile, ( uint ) param -> read_buffer_length, READ_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, READ_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_",0
1329,"<S2SV_ModStart> s } ; wordcount_t num_words = curve -> num_words ; bitcount_t num_n_bits = curve -> num_n_bits ; <S2SV_ModStart> curve ) ; if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, num_n_words ) ) { return 0 ; } uECC_vli_modMult ( tmp, tmp, curve -> n, num_n_words ) ; uECC_vli_modInv ( tmp, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( tmp, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( tmp, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( tmp, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( tmp, k, curve -> n, num_n_words )",0
1330,"<S2SV_ModStart> : ND_PRINT ( <S2SV_ModEnd> ( ndo,",0
1331,"<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; int copied <S2SV_ModStart> ; if (! msg -> msg_name ) { pr_debug ( ""ping_recvmsg(sk=%p,sk->num=%u)\\n"", isk, isk -> inet_num ) ; return - EINVAL ; } if ( flags & MSG_TRUNC ) { msg -> msg_flags |= MSG_TRUNC ; } copied = skb -> len ; if ( copied > len ) { msg -> msg_flags |= MSG_TRUNC ; } err = skb_copy_datagram_iovec ( skb, 0, msg -> msg_iov, copied ) ; if ( copied > len ) { msg -> msg_flags |= MSG_TRUNC ; copied = len ; } err = - EINVAL ; if ( flags & MSG_TRUNC ) { msg -> msg_flags |= MSG_TRUNC ; } else if ( family == AF_INET ) { sin = ( struct sockaddr_in * ) msg -> msg_name ; sin -> sin_family = AF_INET ; sin -> sin_port = 0 ; memset ( sin -> sin_zero, 0, sizeof ( sin -> sin_zero )",0
1332,<S2SV_ModStart> ; flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN | EXT4_EX_NOCACHE ; <S2SV_ModStart> | EXT4_GET_BLOCKS_KEEP_SIZE ; mutex_lock ( & EXT4_I ( inode ) -> i_mmap_mutex <S2SV_ModEnd> ) ; if <S2SV_ModStart> EXT4_GET_BLOCKS_KEEP_SIZE ; mutex_unlock ( & EXT4_I ( inode ) -> i_mmap_mutex <S2SV_ModEnd> ) ; if <S2SV_ModStart> & FALLOC_FL_KEEP_SIZE ) <S2SV_ModEnd> flags |= EXT4_GET_BLOCKS_KEEP_SIZE <S2SV_ModStart> | EXT4_GET_BLOCKS_KEEP_SIZE ; mutex_unlock ( & EXT4_I ( inode ) -> i_mmap_mutex <S2SV_ModEnd> ) ; if,0
1333,"<S2SV_ModStart> ; } else { uint32_t new_free_total = pool -> free_total * 2 ; void * new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total ; pool -> free_arr = new_arr ; } else { free ( buf ) ; } }",0
1334,"<S2SV_ModStart> map ; map = bpf_map_inc <S2SV_ModEnd> ( map,",0
1335,"<S2SV_ModStart> { while ( cp < tp ) { int cval = 0, meta = 0 ; <S2SV_ModStart> 2 ] ) { NESTDATA const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; const char * dp ; int dcount = 0 ; cp ++ ; if ( * cp == 'x' || * cp == 'X' ) { for ( ++ cp ; * cp && ( index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10 ) + ( * cp - '0' ) ;",0
1336,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1337,"<S2SV_ModStart> ; if ( size_left < 4 ) { LogError ( ""Process_ipfix <S2SV_blank> [%u] <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } <S2SV_ModEnd> table_id = ntohs <S2SV_ModStart> ( ipfix_template_record -> TemplateID ) ; count = ntohs ( ipfix_template_record -> FieldCount ) ; memset ( ( void * ) cache. common_extensions, 0, count ) ; memset ( ( void * ) cache. lookup_info, 0, 65536 * sizeof ( struct element_param_s ) ) ; for ( i = 1 ; i < count ; i ++ ) { uint32_t Type = ipfix_element_map [ i ]. id ; if ( ipfix_element_map [ i ]. id == ipfix_element_map [ i - 1 ]. id ) { uint32_t Type = ipfix_element_map [ i ]. id ; if ( ipfix_element_map [ i ]. id == ipfix_element_map",0
1338,"<S2SV_ModStart> * lined ; l_uint32 <S2SV_ModEnd> * pixc, <S2SV_ModStart> * pixc, * pixm, * pixg, * pixd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if ( ( pixc = pixFewColorsOctcubeQuant2 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; if ( ( pixm = pixFewColorsOctcubeQuant1 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; if ( ( pixc = pixFewColorsOctcubeQuant3 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; if ( ( pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; if ( ( pixc = pixFewColorsOct",0
1339,"<S2SV_ModStart> { int i, ubits, vbits ; if ( BN_num_bits ( u ) > BN_num_bits ( v ) ) goto err ; for ( i = 0 ; i < ubits ; i ++ ) { tmp = u ; u = v ; v = tmp ; tmp = b ; b = c ; c = tmp ; } if (! BN_GF2m_add ( u, u, v ) ) goto err ; if (! BN_GF2m_add ( u, u, v ) ) goto err ; if (! BN_num_bits ( u ) > BN_num_bits ( v ) ) goto err ; for ( i = 0 ; i < vbits ; i ++ ) { if ( BN_num_bits ( u ) > BN_num_bits ( v ) ) goto err ; if (! BN_GF2m_is_zero ( u ) ) goto err ; if ( BN_is_zero ( u ) ) goto err ; if ( BN_num_bits ( u ) > BN_num_bits ( v ) ) goto err ; if ( BN_",0
1340,"<S2SV_ModStart> vf = vp8_mse16x16 <S2SV_ModEnd> ; xd -> <S2SV_ModStart> pre. y_buffer = recon_buffer -> y_buffer + recon_yoffset ; tmp_mv. as_int = 0 ; ref_mv_full. as_mv. row = 0 ; ref_mv_full. as_mv. col = 0 ; ref_mv_full. as_mv. row = 0 ; ref_mv_full. as_mv. col = 0 ; tmp_err = cpi -> diamond_search_sad ( x, b, d, & tmp_mv, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> mvcost, ref_mv ) ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_",0
1341,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1342,"<S2SV_ModStart> = alloc ; size_t strindex = 0 ; size_t length ; CURLcode res ; ns = malloc ( alloc ) ; if (! ns ) return NULL ; length = ( size_t ) strlen ( string ) ; while ( length -- ) { in = * string ; if ( Curl_isunreserved ( in ) ) ns [ strindex ++ ] = in ; else { newlen += 2 ; if ( newlen > alloc ) { alloc *= 2 ; testing_ptr = realloc ( ns, alloc ) ; if (! testing_ptr ) { free ( ns ) ; return NULL ; } ns = testing_ptr ; } } res = Curl_convert_to_network ( handle, & in, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } snprintf ( & ns [ strindex ], 4, ""%%%02X"", in ) ; strindex += 3 ; } else { snprintf ( & ns [ strindex ], 4, ""%%%02X"", in ) ; strindex += 3 ; } string ++ ; }",0
1343,"<S2SV_ModStart> ; value = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> qfalse ; } <S2SV_ModEnd> if ( msg <S2SV_ModStart> msg -> oob ) { nbits = msg -> bit >> 3 ; for ( i = 0 ; i < nbits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << ( i + nbits ) ) ; } bits = bits - nbits ; } if ( bits ) { for ( i = 0 ; i < bits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << ( i + nbits ) ) ; } bits = bits & 7 ; for ( i = 0 ; i < nbits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << ( i + nbits ) ) ; } bits = bits - nbits ; } if ( bits ) { for ( i = 0 ; i < bits ; i += 8 ) { Huff_offsetReceive ( msgHuff. decompressor. tree, & get, msg -> data, & msg -> bit ) ; value |= ( get << ( i + nbits ) ) ; } msg -> read",0
1344,"<S2SV_ModStart> int err ; struct snd_ctl_elem_id id <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> count ; for ( idx = 0 ; idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ;",0
1345,"<S2SV_ModStart> ; if ( interface -> desc. bNumEndpoints < 1 ) { dev_err ( & udev -> dev, ""interface <S2SV_blank> %s <S2SV_blank> has <S2SV_blank> no <S2SV_blank> endpoints\\n"", name ) ; status = - ENODEV ; goto out ; } if ( interface -> desc. bNumEndpoints < 1 ) { dev_err ( & udev -> dev, ""interface <S2SV_blank> %s <S2SV_blank> has <S2SV_blank> no <S2SV_blank> endpoints\\n"", name ) ; status = - ENODEV ; goto out ; } if ( interface -> desc. bNumEndpoints < 1 ) { dev_err ( & udev -> dev, ""interface <S2SV_blank> %s <S2SV_blank> has <S2SV_blank> no <S2SV_blank> endpoints\\n"", name ) ; status = - ENODEV ; goto out ; } if ( interface -> desc. bNumEndpoints < 1 ) { dev_err ( & udev -> dev, ""interface <S2SV_blank> %s <S2SV_blank> has <S2SV_blank> no <S2SV_blank> endpoints\\n"", name ) ; status = - ENODEV ; goto out ; } if ( interface -> desc. bNumEndpoints < 1 ) { dev_err ( & udev -> dev, ""interface <S2SV_blank> %s <S2SV_blank> has <S2SV_blank> no <S2SV_blank> endpoints\\n"", name ) ; status = -",0
1346,"<S2SV_ModStart> char * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> = overhead ; if ( ( flags & MONGO_CONTINUE_ON_ERROR ) && ( size > conn -> max_bson_size ) ) { return MONGO_ERROR ; } mm = mongo_message_create ( size, 0, 0, MONGO_OP_INSERT ) ; data = & mm -> data ; if ( flags & MONGO_CONTINUE_ON_ERROR ) data = mongo_data_append ( data, ns, strlen ( ns ) + 1 ) ; for ( i = 0 ; i < count ; i ++ ) { data = mongo_data_append ( data, bsons [ i ] -> data, size ) ; } data = & mm -> data ; if ( flags & MONGO_CONTINUE_ON_ERROR ) data = mongo_data_append32 ( data, & ZERO ) ; else data = mongo_data_append32 ( data, ns, strlen ( ns ) + 1 ) ; for ( i = 0 ; i < count ; i ++ ) { data = mongo_data_append ( data, bsons [ i ] -> data, bson_size ( bsons [",0
1347,<S2SV_ModStart> ) ) { <S2SV_ModEnd> gtk_widget_destroy ( scrolled <S2SV_ModStart> FALSE ) { <S2SV_ModEnd> gtk_window_destroy ( GTK_WINDOW <S2SV_ModStart> FALSE ) { <S2SV_ModEnd> gtk_window_destroy ( GTK_WINDOW <S2SV_ModStart> FALSE ) { <S2SV_ModEnd> gtk_window_destroy ( GTK_WINDOW <S2SV_ModStart> FALSE ) { <S2SV_ModEnd> gtk_window_destroy ( GTK_WINDOW <S2SV_ModStart> FALSE ) { <S2SV_ModEnd> gtk_window_destroy ( GTK_WINDOW <S2SV_ModStart> FALSE ) { gtk_window_destroy ( GTK_WINDOW ( g_wnd_assistant ) ) ; } } <S2SV_ModEnd> } else { <S2SV_ModStart> FALSE ) { <S2SV_ModEnd> gtk_window_destroy ( GTK_WINDOW <S2SV_ModStart> FALSE ) { <S2SV_ModEnd> gtk_window_destroy ( GTK_WINDOW <S2SV_ModStart> FALSE ) { <S2SV_ModEnd> gtk_window_destroy ( GTK_WINDOW <S2SV_ModStart> FALSE ) ; <S2SV_ModEnd> gtk_window_destroy ( GTK_WINDOW <S2SV_ModStart> FALSE ) { <S2SV_ModEnd> gtk_window_destroy ( GTK_WINDOW <S2SV_ModStart> FALSE ) { gtk_window_destroy ( GTK_WINDOW ( g_wnd_assistant ) ) ; },0
1348,<S2SV_ModStart> - 2 ; if ( plen < 0 ) return 0 ;,1
1349,"<S2SV_ModStart> { umode_t mode ; retval = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart> err_out ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> case ACL_TYPE_DEFAULT : retval = v9fs_vfs_setattr_dotl ( dentry, & iattr ) ; if ( retval ) goto err_out ; break ; case ACL_TYPE_ACCESS_READ : retval = v9fs_vfs_setattr_dotl ( dentry, & iattr ) ; if ( retval ) goto err_out ; break ; case ACL_TYPE_ACCESS_WRITE : retval = v9fs_vfs_setattr_dotl ( dentry, & iattr ) ; break ; case ACL_TYPE_ACCESS_READ : retval = v9fs_vfs_setattr_dotl ( dentry, & iattr ) ; break ; case ACL_TYPE_READ_ONLY : retval = v9fs_vfs_setattr_dotl ( dentry, & iattr ) ; break ; case ACL_TYPE_WRITE : retval = v9fs_vfs_setattr_dotl ( dentry, & iattr ) ; break ; case ACL",0
1350,<S2SV_ModStart> class_name ) ; if ( class_name [ sizeof ( * class_name ) - 1 ]!= '\\0' ) { r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; return false ; } if ( bin -> header. class_size > bin -> header. class_size ) { r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin ->,0
1351,<S2SV_ModStart> case NPPVpluginDescriptionString : type = RPC_TYPE_STRING ; break ; case NPPVpluginWindowSize : case NPPVpluginTimerInterval : type = RPC_TYPE_INT32 ; break ; case NPPVpluginNeedsXEmbed : case NPPVpluginTransparentBool : case NPPVjavascriptPushCallerBool : case NPPVpluginKeepLibraryInMemory : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginWindowBool : type = RPC_TYPE_INT32 ; break ; case NPPVpluginWindowBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginTransparentBool : case NPPVjavascriptPushCallerBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginKeepLibraryInMemory : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginScriptableNPObject : type = RPC_TYPE_NP_OBJECT ; break ;,0
1352,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> state = NEGO_STATE_FAIL <S2SV_ModEnd> ; return ; <S2SV_ModStart> = NEGO_STATE_FINAL ; return ;,0
1353,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor_mult = get_rate_correction_factor ( cpi ) ; const double correction_factor_mult = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; i = active_best_quality ; do { const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor_mult ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } else { last_error = bits_per_mb_at_this_q - target_bits_per",0
1354,<S2SV_ModStart> value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
1355,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1356,<S2SV_ModStart> data ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1357,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ;,0
1358,"<S2SV_ModStart> TX_SIZE tx_size, PREDICTION_MODE <S2SV_ModEnd> mode, int <S2SV_ModStart> plane ] ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> uint8_t, left_col, 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> uint8_t, above_data, 128 + 16 ) ; uint8_t * const_above_row = above_data + 128 ; const int bs = 4 << tx_size ; if ( plane == 0 ) { frame_width = xd -> cur_buf -> y_width ; frame_height = xd -> cur_buf -> y_height ; } else { frame_width = xd -> cur_buf -> uv_width ; frame_height = xd -> cur_buf -> uv_height ; } if ( left_available ) { if ( xd -> mb_to_bottom_edge < 0 ) { if ( y0 + bs <= frame_height ) { for ( i = 0 ; i < bs ; ++ i ) left_col [ i ] = ref [ i * ref_stride - 1 ] ; } else { for ( i = 0 ; i < bs ; ++ i ) left_col [ i ] = ref [ i",0
1359,"<S2SV_ModStart> else end ++ ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> empty <S2SV_blank> pattern\\n"" ) ; goto error ; }",0
1360,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> jas_iccprof_t <S2SV_ModEnd> * jas_iccprof_createfrombuf (,0
1361,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
1362,"<S2SV_ModStart> BUG ( ) ; mutex_lock ( & memcg -> thresholds_lock ) ; <S2SV_ModStart> synchronize_rcu ( ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; size = 0 ; for ( i = 0 ; i < thresholds -> primary -> size ; i ++ ) { <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1363,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> lock ) ; mutex_lock ( & client -> lock ) ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> lock ) ; <S2SV_ModEnd> return handle?",0
1364,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
1365,"<S2SV_ModStart> ; if ( strchr <S2SV_ModEnd> ( col_nam, <S2SV_ModStart> col_nam, '\\0' ) ) strchr ( col_nam, '\\0' ) ; if ( strchr ( col_nam, '\\0' ) ) strchr ( col_nam, '\\0' ) ) strchr ( col_nam, '\\0' ) ; if ( strchr ( col_nam, '\\0' ) ) strcpy ( col_nam, '\\0' ) ; if ( strchr ( col_nam, '\\0' ) ) strcpy ( col_nam, '\\0' ) ) strcpy ( col_nam, '\\0' ) ; if ( strchr ( col_nam, '\\0' ) ) strcpy ( col_nam, '\\0' ) ; strcpy ( col_nam, '\\0' ) ; if ( strchr ( col_nam, '\\0' ) ) strcpy ( col_nam, '\\0' ) ; strcpy ( col_nam, '\\0' ) ; strcpy ( col_nam, '\\0' ) ; strcpy ( col_nam, '\\0' ) ; strcpy ( col_nam, '\\",0
1366,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
1367,<S2SV_ModStart> ; if ( asdl_typ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1368,"<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ; memset ( xd -> mode_lf_deltas, 0, sizeof ( xd -> mode_lf_deltas ) ) ; pc -> refresh_golden_frame = 1 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ REFREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign",0
1369,"<S2SV_ModStart> error ; uint16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA, sizeof ( uint8_t ) ) ; context -> nextPacket = letoh16 ( context -> nextPacket ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, sizeof ( uint8_t ) ) ; status = letoh32 ( status ) ; context -> nextPacket = letoh16 ( context -> nextPacket ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & status, sizeof (",0
1370,"<S2SV_ModStart> == 0x01 ) { if ( i + 1 + objlen > GEMSAFE_MAX_OBJLEN ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_SIZE_T ""u"", objlen ) ; return SC_ERROR_INTERNAL ; } <S2SV_ModStart> == 0x01 ) { if ( i + 1 + objlen > GEMSAFE_MAX_OBJLEN ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_SIZE_T ""u"", objlen ) ; return SC_ERROR_INTERNAL ; }",0
1371,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1372,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass ) { VALUE content ; VALUE parse_options ; <S2SV_ModStart> ; xmlSchemaParserCtxtPtr ctx <S2SV_ModEnd> ; xmlSchemaPtr schema <S2SV_ModStart> ; xmlSchemaParserCtxtPtr ctx <S2SV_ModEnd> ; VALUE rb_schema <S2SV_ModStart> errors ) ; parse_options = rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( mNokogiriXml, ""ParseOptions"" ), argv ) ) ; if ( parse_options ) rb_const_set ( rb_const_get ( mNokogiriXml, ""ParseOptions"", rb_const_get ( mNokogiriXml, ""ParseOptions"" ), rb_const_get ( mNokogiriXml, ""ParseOptions"" ), rb_const_get ( mNokogiriXml, ""ParseOptions"" ), rb_const_get ( mNokogiriXml, ""ParseOptions"" ) ) ) ; if ( parse_options ) rb_const_set ( rb_const_get ( mNokogiriXml, ""ParseOptions"", rb_const_get ( mNokogiriXml,",0
1373,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> unsigned long start <S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> au1200fb_device * fbdev = info -> par ; if ( fbdev -> fb_phys & ~ PAGE_MASK ) { return - EINVAL ; } start = vma -> vm_start ; len = PAGE_ALIGN ( ( start & ~ PAGE_MASK ) + fbdev -> fb_len ) >> PAGE_SHIFT ; off = vma -> vm_pgoff << PAGE_SHIFT ; if ( ( vma -> vm_end - vma -> vm_start ) > len ) { return - EINVAL ; } vma -> vm_pgoff = PAGE_ALIGN ( ( start & ~ PAGE_MASK ) + fbdev -> fb_len ) >> PAGE_SHIFT ; vma -> vm_page_prot = pgprot_val ( vma -> vm_page_prot ) ; pgprot_val ( vma -> vm_page_prot ) |= _CACHE_MASK ; return io_remap_pfn_range ( vma, vma -> vm_start, len >> PAGE_SHIFT, vma -> vm_end - vma -> vm",0
1374,"<S2SV_ModStart> ] ) ; if ( strlen ( config_opt ) < 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> name"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> ] ) ; if ( strlen ( config_opt ) < 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option <S2SV_blank> name"" ) ; print_syntax ( ) ; return 1 ; }",0
1375,"<S2SV_ModStart> / 2 ] ; ptr += 4 ; bytes -= chunk ; } out = state -> buffer ; for ( x = 0 ; x < state -> xsize ; x ++ ) { out [ 0 ] = ptr [ x + state -> xsize ] ; out [ 1 ] = ptr [ x + 4 * state -> xsize ] ; out [ 2 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; ptr += 4 ; bytes -= chunk ; } state -> shuffle ( ( UINT8 * ) im -> image [ state -> y ], state -> buffer, state -> xsize ) ; if ( ++ state -> y >= state -> ysize ) return - 1 ; out = state -> buffer ; for ( x = 0 ; x < state -> xsize ; x ++ ) { out [ 0 ] = ptr [ x + state -> xsize ] ; out [ 1 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; ptr += 4 ; bytes -= chunk ; } state -> shuffle ( ( UINT8 * ) im -> image [ state -> y ], state -> buffer, state -> xsize ) ; if ( ++ state -> y >= state -> ysize ) return - 1",0
1376,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1377,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1378,"<S2SV_ModStart> ; err = - EBUSY <S2SV_ModEnd> ; if ( <S2SV_ModStart> goto out ; if ( type == PACKET_FANOUT_HASH || type == PACKET_FANOUT_LB || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_QM || type == PACKET_FANOUT_EBPF ) { atomic_long_set ( & rollover -> num, 0 ) ; atomic_long_set ( & rollover -> num_huge, 0 ) ; atomic_long_set ( & rollover -> num_failed, 0 ) ; po -> rollover = rollover ; }",0
1379,<S2SV_ModStart> poll ) ; <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1380,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int len, wchar_t <S2SV_ModEnd> * pwcs ) <S2SV_ModStart> 0 ) { size = <S2SV_ModEnd> utf8_to_utf32 ( s <S2SV_ModStart> - EINVAL ; * op ++ = ( wchar_t ) <S2SV_ModEnd> ( SURROGATE_PAIR | <S2SV_ModStart> SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u & SURROGATE_BITS ) ) ; } s += size ; len -= size ; } return op - pwcs <S2SV_ModEnd> ; } <S2SV_null>",0
1381,"<S2SV_ModStart> length ) { uint32_t <S2SV_ModEnd> v, i <S2SV_ModStart> 2 ) || ( s -> color_type == PNG_COLOR_TYPE_RGB && length!= 6 ) ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( & s -> transparent_color_be [ 2 * i ], s -> bit_depth ) ; if ( s -> bit_depth > 8 ) av_WB16 ( & s -> transparent_color_be [ 2 * i ], v ) ; else s -> transparent_color_be [ 2 * i ] = v ; } } else if ( s -> color_type == PNG_COLOR_TYPE_GRAY ) { if ( s -> color_type == PNG_COLOR_TYPE_RGB && length!= 6 ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( & s -> transparent_color_be [ 2 * i ], s -> bit_depth ) ; if ( s -> bit_depth > 8 ) av_WB16 ( & s",0
1382,"<S2SV_ModStart> EPROTONOSUPPORT ) { <S2SV_ModEnd> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModStart> ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> del_notify_callback ( cib, T_CIB_DIFF_NOTIFY, crm_diff_update ) ;",0
1383,<S2SV_ModStart> = AF_INET6 ; } if ( PKT_GET_VLAN_ID ( p ) == 0 || PKT_GET_VLAN_ID ( p ) == 0 || PKT_GET_VLAN_ID ( p ) == 0 || PKT_GET_VLAN_ID ( p ) == 0 || PKT_GET_VLAN_ID ( p ) == 0 || PKT_GET_VLAN_ID ( p ) == 0 || PKT_GET_VLAN_ID ( p ) == 0 || PKT_GET_VLAN_ID ( p ) == 0 || PKT_GET_VLAN_ID ( p ) == 0 || PKT_GET_VLAN_ID ( p ) == 0 || PKT_GET_VLAN_ID ( p ) == 0 || PKT_GET_VLAN_ID ( p ) == 0 || PKT_GET_VLAN_ID ( p ) == 0 || PKT_GET_VLAN_ID ( p ) == 0 || PKT_GET_VLAN_ID ( p ) == 0 || PKT_GET_VLAN_ID ( p ) == 0 || PKT_GET,0
1384,"<S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_RXFHSR ) ; if ( ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXRF | KSZ8851_RXCE ) ) == 0 ) { if ( ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXFHSR_RXRF | KSZ8851_RXCE ) ) == 0 ) { ksz8851WriteReg ( interface, KSZ8851_RXFDPR, RXFDPR_RXFPAI ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, RXQCR_SDA ) ; nicProcessPacket ( interface, context -> rxBuffer, n, & ancillary ) ; return ERROR_INVALID",0
1385,"<S2SV_ModStart> const node * node <S2SV_ModEnd>, asdl_seq * <S2SV_ModStart>, int is_async, asdl_seq * decorator_seq <S2SV_ModStart> is_async ) { identifier name ; arguments_ty args ; expr_ty returns = NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 2 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } if ( TYPE ( CHILD ( n, name_i + 3 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3 ) ) ; if (! type_comment ) return NULL ; n -> n_col_offset = c -> n_col_offset ; } else if ( TYPE ( CHILD ( n, name_i + 3 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3 ) ) ; if (",0
1386,"<S2SV_ModStart> int i ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pmd = pmd_offset ( pmd, 0xA0000 ) ; split_huge_page_pmd ( pmd, 0 ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ; pte = pte_offset_map_lock ( mm, pmd, 0xA0000, & ptl ) ; if ( pte_none_or_clear_bad ( pte ) ) goto out ;",0
1387,"<S2SV_ModStart> - EINVAL ; error = aa_audit ( AUDIT_APPARMOR_DENIED, & sa, GFP_KERNEL, & sa, NULL ) ; } else if ( strcmp ( name, ""rebind"" ) == 0 ) { error = aa_setprocattr_rebind ( args, arg_size,! AA_ONEXEC,! AA_DO_TEST ) ; } else if ( strcmp ( name, ""rebind"" ) == 0 ) { error = aa_audit ( AUDIT_APPARMOR_DENIED, NULL, GFP_KERNEL, & sa, NULL ) ; } else if ( strcmp ( name, ""rebind"" ) == 0 ) { error = aa_audit ( AUDIT_APPARMOR_DENIED, NULL, GFP_KERNEL, & sa, NULL ) ; } else if ( strcmp ( name, ""rebind"" ) == 0 ) { error = aa_audit ( AUDIT_APPARMOR_DENIED, NULL, GFP_KERNEL, & sa, NULL ) ; } else if ( strcmp ( name, ""rebind"" ) == 0 )",0
1388,"<S2SV_ModStart> uint_fast8_t tmp ; if (! siz -> caps ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } <S2SV_ModStart> numcomps ) ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" )",0
1389,"<S2SV_ModStart> ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } dst_coap_msg_ptr -> token_ptr = NULL ; if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options",0
1390,"<S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __",0
1391,"<S2SV_ModStart> ; size_t total_len <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) return - EINVAL <S2SV_ModEnd> ; do_wakeup = <S2SV_ModStart> ) ) return - EINVAL <S2SV_ModEnd> ; ret = <S2SV_ModStart> ; size_t chars = min_t ( size_t, buf -> len, nr_segs ) ; if ( unlikely ( chars > total_len ) ) { ret = - EINVAL ; break ; } error = ops -> confirm ( pipe, buf ) ; if ( error ) { if (! ret ) ret = error ; break ; } if ( unlikely ( error ) ) { if (! ret ) ret = error ; break ; } atomic =! iov_fault_in_pages_write ( iov, chars ) ; redo : if ( atomic ) kunmap_atomic ( addr ) ; else kunmap ( addr ) ; else kunmap ( kmap ( addr ) ; else kunmap ( kmap ( addr ) ) ; kunmap ( kunmap ( addr ) ; kunmap ( addr ) ; kunmap ( addr ) ; kunmap ( addr ) ; kunmap ( addr ) ; kunmap ( addr ) ; kunmap ( addr ) ;",0
1392,"<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ; } \\\n} <S2SV_ModEnd> IndexPacket index ; <S2SV_ModStart> ; if ( displacement > data_size ) { MagickError ( MagickErrorType. CorruptImageError, ""InsufficientImageDataInFile"" ) ; return MagickFalse ; } <S2SV_ModStart> ; if ( displacement > data_size ) { MagickError ( MagickErrorType. CorruptImageError, ""InsufficientImageDataInFile"" ) ; return MagickFalse ; } if ( displacement > data_size ) { MagickError ( MagickErrorType. CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ( MagickErrorType. CorruptImageError, ""InsufficientImageDataInFile"" ) ; return MagickFalse ; } if ( displacement > data_size ) { MagickError ( MagickErrorType. CorruptImageError, ""InsufficientImageDataInFile"" ) ; return MagickFalse ; } <S2SV_ModStart> ; if ( displacement > data_size ) { MagickError ( MagickErrorType. CorruptImageError, ""InsufficientImageDataInFile"" ) ; return MagickFalse ; }",0
1393,"<S2SV_ModStart> GLOBALS_ARE_RESET ( ) ; if ( st -> st_calculating == FALSE ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; release_md ( dh -> md ) ; return ; } if ( st -> st_calculating == FALSE ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; release_md ( dh -> md ) ; return ; } if ( st -> st_calculating == FALSE ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; return ; } if ( st -> st_calculating == TRUE ) { int v2_notify_num = e - STF_FAIL ; DBG_log ( ""ikev2_parent_inI2outR2_tail <S2SV_blank> returned <S2SV_blank> STF_FAIL <S2SV_blank> with <S2SV_blank> %s"", enum_name ( & ikev2_notify_names, v2_notify_num ) ) ;",0
1394,"<S2SV_ModStart> ) { p_fm_config_conx_hdlt <S2SV_ModEnd> hdl ; int <S2SV_ModStart> ) ) ; res = <S2SV_ModEnd> fm_mgr_config_init ( & <S2SV_ModStart> ) ) ; res = <S2SV_ModEnd> fm_mgr_config_connect ( hdl <S2SV_ModStart> ) ) ; res = <S2SV_ModEnd> fm_mgr_config_get_error ( res <S2SV_ModStart> ) ) ; res = <S2SV_ModEnd> fm_mgr_get_error_str ( res <S2SV_ModStart> ) ) ; res = <S2SV_ModEnd> fm_mgr_get_error_str ( res <S2SV_ModStart> ) ) ; if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; res = <S2SV_ModEnd> fm_mgr_get_error ( res <S2SV_ModStart> ) ) ; res = <S2SV_ModEnd> fm_mgr_get_error_str ( res <S2SV_ModStart> ) ) ; res = <S2SV_ModEnd> fm_mgr_get_error_str ( res <S2SV_ModStart> ) ) ; if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_",0
1395,"<S2SV_ModStart> ; if (! jas_safe_init <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ] ; infile = NULL ; verbose = 0 ; debug = 0 ; # if defined ( JAS_DEFAULT_MAX_MEM_USAGE ) max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; # endif while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_VERBOSE : verbose = 1 ; break ; case OPT_DEBUG : debug = atoi ( jas_optarg ) ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_HELP : break ; case OPT_INFILE : infile = jas_optarg ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_",0
1396,"<S2SV_ModStart> ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> stack <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
1397,"<S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { if ( ( j = pana_bits ( 8 ) ) ) { if ( ( pred [ i & 1 ] -= 0x80 << sh ) < 0 || sh == 4 ) pred [ i & 1 ] &= ~ ( ( ~ 0u ) << sh ) ; nonz [ i & 1 ] += j << sh ; } } else if ( ( j = pana_bits ( 8 ) ) || i > 11 ) pred [ i & 1 ] = nonz [ i & 1 ] << 4 | pana_bits ( 4 ) ; if ( ( j = pana_bits ( 8 ) ) ) || i > 11 ) pred [ i & 1 ] =",0
1398,"<S2SV_ModStart> needed ) ; if ( nl == NULL ) { param -> flags |= DM_BUFFER_EMPTY_FLAG ; goto out ; } <S2SV_ModStart> len < needed ) { param -> flags |= DM_BUFFER_FULL_FLAG ; goto out ; } param -> data_size = len ; nl -> dev = 0 ; for ( i = 0 ; i < NUM_BUCKETS ; i ++ ) { list_for_each_entry ( hc, _name_buckets + i, name_list ) { if ( old_nl ) old_nl -> next = ( uint32_t ) ( ( void * ) nl - ( void * ) old_nl ) ; disk = dm_disk ( disk ) ; nl -> next = 0 ; old_nl = nl ; event_nr = align_ptr ( nl -> name + strlen ( hc -> name ) + 1 ) ; * event_nr = dm_get_event_nr ( hc -> md ) ; nl = align_ptr ( nl -> name + strlen ( hc -> name ) + 1 ) ; * event_nr = dm_get_event_nr ( hc -> md ) ; } }",0
1399,<S2SV_ModStart> ; quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == ( QuantumInfo * ) NULL ) quantum_info = ( QuantumInfo * ) RelinquishQuantumInfo ( quantum_info ) ; if ( quantum_info == ( QuantumInfo * ) NULL ) quantum_info = ( QuantumInfo * ) RelinquishQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == ( QuantumInfo * ) NULL ) quantum_info = ( QuantumInfo * ) RelinquishQuantumInfo ( quantum_info ) ; if ( quantum_info == ( QuantumInfo * ) NULL ) quantum_info = ( QuantumInfo * ) RelinquishQuantumInfo ( quantum_info ) ; if ( quantum_info == ( QuantumInfo * ) NULL ) quantum_info = ( QuantumInfo * ) RelinquishQuantumInfo ( quantum_info ) ;,0
1400,"<S2SV_ModStart> int idx, ret ; hlist_for_each_entry ( e, & irq_rt -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; if ( e -> type!= KVM_IRQ_ROUTING_LAPIC ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! hlist_for_each_entry ( e, & irq_rt -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! kvm_intr_is_single_vcpu ( kvm, & irq, & vcpu ) ) { ret = irq_set_vcpu_affinity ( host_irq, NULL ) ; if ( ret < 0 ) { printk ( KERN_ERR ""failed <S2SV_blank> to <S2SV_blank> back <S2SV_blank> to <S2SV_blank> remapped <S2SV_blank> mode, <S2SV_blank> irq:",0
1401,<S2SV_ModStart> bfqq ) { hrtimer_try_to_cancel ( timer <S2SV_ModEnd> ) ; return,0
1402,"<S2SV_ModStart> } else { return rold -> umin_value == 0 && rold -> umax_value == 0 && rold -> smin_value == 0 && rold -> smax_value == 0 && tnum_is_unknown ( rold -> var_off ) ; } case SCALAR_VALUE_OR_NULL : if ( rcur -> type!= PTR_TO_MAP_VALUE_OR_NULL ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) == 0 && range_within ( rold, rcur ) && tnum_in ( rold -> var_off, rcur -> var_off ) == 0 && rold -> umin_value == 0 && rold -> umax_value == 0 && rold -> smin_value == 0 && rold -> smax_value == 0",0
1403,<S2SV_ModStart> ; if (! handle ||! SecIsValidHandle ( handle ) ) return NULL ; pointer = ( void * ) ~ ( ( size_t ) handle -> dwUpper & ( size_t ) SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC_SEC,0
1404,"<S2SV_ModStart> += PRIMARY_DRAWING_ORDER_FIELD_BYTES [ ( int ) <S2SV_ModStart> orderInfo -> orderType ] ; length += update_prepare_bounds ( context, orderInfo ) ;",0
1405,<S2SV_ModStart> out ; } if ( ovl_dentry_lower ( old ) -> d_inode == ovl_dentry_lower ( new ) -> d_inode ) { if ( new -> d_inode == ovl_dentry_lower ( old ) -> d_inode ) { if ( new -> d_inode == ovl_dentry_lower ( new ) -> d_inode ) { if ( new -> d_inode == ovl_dentry_lower ( old ) -> d_inode ) { if ( new -> d_inode == ovl_dentry_lower ( new ) -> d_inode ) { if ( new -> d_inode == ovl_dentry_lower ( old ) -> d_inode ) { if ( new -> d_inode == ovl_dentry_lower ( new ) -> d_inode ) { if ( new -> d_inode == ovl_dentry_lower ( old ) -> d_inode ) { if ( new -> d_inode == ovl_dentry_lower ( new ) -> d_inode ) { cleanup_whiteout = true ;,0
1406,"<S2SV_ModStart> ; if ( s >= end ) { fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> start: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", ( int ) str, ( int ) sstart, ( int ) sprev ) ; fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", ( int ) end, ( int ) sstart, ( int ) sprev ) ; fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> start <S2SV_blank> offset: <S2SV_blank> %d\\n"", ( int ) sstart, ( int ) sprev ) ; fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", ( int ) s, ( int ) sstart, ( int ) sprev ) ; fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> start <S2SV_blank> offset: <S2SV_blank>",0
1407,"<S2SV_ModStart> int plane ; switch ( bsize ) { case BLOCK_SIZE_8X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_10X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_12X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_8X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_10X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_12X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_8X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_10",0
1408,"<S2SV_ModStart> ; int error ; msg -> msg_namelen = 0 ; if ( size > 0 ) { pr_debug ( ""%d <S2SV_blank> -= <S2SV_blank> %d\\n"", atomic_read ( & sk -> sk_rmem_alloc ), skb -> truesize ) ; atm_return ( vcc, skb -> truesize ) ; }",0
1409,<S2SV_ModStart> = hash ; if ( ht -> av_slots <= 0 ) { ht -> av_slots -- ; sr -> vhost_fdt_id = id ; sr -> vhost_fdt_hash = hash ; if ( ht -> av_slots <= 0 ) { ht -> av_slots -- ; sr -> vhost_fdt_id = id ; sr -> vhost_fdt_hash = hash ; sr -> vhost_fdt_hash = hash ; return fd ; } ht -> av_slots -- ; sr -> vhost_fdt_hash = hash ; if ( ht -> av_slots <= 0 ) { ht -> av_slots -- ; sr -> vhost_fdt_id = id ; sr -> vhost_fdt_hash = hash ; if ( ht -> av_slots <= 0 ) { ht -> av_slots -- ; sr -> vhost_fdt_id = id ; sr -> vhost_fdt_hash = hash ; return fd ; } ht -> av_slots -- ; sr -> vhost_fdt_id = id ; sr -> vhost_fdt_hash = hash ; if ( ht -> av_slots <= 0 ) { ht -> av_slots -- ; sr -> vhost_fdt,0
1410,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> x -> e_mbd, <S2SV_ModEnd> int mi_row, <S2SV_ModStart> bsize ) ; return <S2SV_ModEnd> vp9_pick_inter_mode ( cpi <S2SV_ModStart> ) ) { if ( frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else if ( frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col ) ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1411,<S2SV_ModStart> { dev -> priv_flags &= ~ ( IFF_TX_SKB_SHARING | IFF_TX_SKB_SHARING | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> csum ) dev -> priv_flags &= ~ ( IFF_TX_SKB_SHARING | IFF_TX_SKB_SHARING | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> csum ) dev -> priv_flags |= ( IFF_TX_SKB_SHARING | IFF_TX_SKB_SHARING | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> csum ) dev -> priv_flags &= ~ ( IFF_TX_SKB_SHARING | IFF_TX_SKB_SHARING | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> csum ) dev -> priv_flags |= ( IFF_TX_SKB_SHARING | IFF_TX_SKB_SHARING | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ;,0
1412,"<S2SV_ModStart> = NULL ; MYSOFA_SUPERBLOCK * superblock = NULL ; <S2SV_ModStart> reader, & superblock ) ; if (! superblock ) { log ( ""superblock <S2SV_blank> read <S2SV_blank> failed\\n"" ) ; return NULL ; } if ( reader. superblock == NULL ) { log ( ""superblock <S2SV_blank> read <S2SV_blank> failed\\n"" ) ; return NULL ; } hrtf = getHrtf ( & reader, err ) ; gcolFree ( reader. gcol ) ; if ( strcmp ( filename, ""-"" ) ) fclose ( reader. fhd ) ; if ( strcmp ( filename, ""-"" ) ) fclose ( reader. fhd ) ; if ( strcmp ( filename, ""-"" ) ) fclose ( reader. fhd ) ; return NULL ; } if ( reader. superblock == NULL ) { log ( ""superblock <S2SV_blank> read <S2SV_blank> failed\\n"" ) ; return NULL ; }",0
1413,"<S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""Insufficient",0
1414,"<S2SV_ModStart> = 1 ; memset ( pMap -> ranges, 0, sizeof ( MappedRange ) ) ;",0
1415,"<S2SV_ModStart> case 0 : fa = xfs_dinode_verify_fork ( dip, mp ) ; if ( fa ) return fa ; break ; case 1 : fa = xfs_dinode_verify_fork_nolock ( dip, mp ) ; if ( fa ) return fa ; break ; case 2 : fa = xfs_dinode_verify_fork_nolock ( dip, mp ) ; if ( fa ) return fa ; break ; case 3 : fa = xfs_dinode_verify_fork_nolock ( dip, mp ) ; if ( fa ) return fa ; break ; case 3 : fa = xfs_dinode_verify_fork_nolock ( dip, mp ) ; if ( fa ) return fa ; break ; case 4 : fa = xfs_dinode_verify_fork_nolock ( dip, mp ) ; if ( fa ) return fa ; break ; case 5 : fa = xfs_dinode_verify_fork_nolock ( dip, mp ) ; if ( fa ) return fa ; break ; default : fa = xfs_dinode_verify_fork_nolock (",0
1416,<S2SV_ModStart> ; if ( flags & VP8_EFLAG_NO_UPD_GF <S2SV_ModEnd> ) && ( <S2SV_ModStart> VP8_EFLAG_FORCE_ARF ) ) { int ref = 7 ; if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_,0
1417,<S2SV_ModStart> 1 ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) quantum_info = ( QuantumInfo * ) NULL ; if ( quantum_info == ( QuantumInfo * ) NULL ) quantum_info = ( QuantumInfo * ) NULL ; if ( quantum_info == ( QuantumInfo * ) NULL ) quantum_info = ( QuantumInfo * ) NULL ; if ( quantum_info!= ( QuantumInfo * ) NULL ) quantum_info = ( QuantumInfo * ) RelinquishQuantumInfo ( quantum_info ) ; if ( quantum_info == ( QuantumInfo * ) NULL ) quantum_info = ( QuantumInfo * ) RelinquishQuantumInfo ( quantum_info ) ; if ( quantum_info == ( QuantumInfo * ) NULL ) quantum_info = ( QuantumInfo * ) RelinquishQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) quantum_info = ( QuantumInfo * ) Relinquish,0
1418,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
1419,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> case BGP_IPV4_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; }",0
1420,"<S2SV_ModStart> ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</td>"" ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>""",0
1421,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
1422,"<S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ) ; bn_from_bytes ( msg -> data_initial_chunk. bytes + 4 + 2 * 32, 32, & tokenMinAmount ) ; bn_from_bytes ( msg -> data_initial_chunk. bytes + 4 + 3 * 32, 32, & ethMinAmount ) ; <S2SV_ModStart> ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ) ; bn_from_bytes ( msg -> data_initial_chunk. bytes + 4 + 2 * 32, 32, 32, & tokenMinAmount ) ; bn_from_bytes ( msg -> data_initial_chunk. bytes + 4 + 3 * 32, 32, & tokenMinAmount ) ; <S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ) ; bn_from_bytes ( msg -> data_initial_chunk. bytes + 4 + 6 * 32, 32, 32, & tokenMinAmount ) ; bn_from_bytes ( msg -> data_initial_chunk. bytes + 6 * 32, 32, & tokenMinAmount ) ; bn_from_bytes ( msg -> data_initial_chunk. bytes + 6 * 32, 32, & tokenMinAmount )",0
1423,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1424,"<S2SV_ModStart>, & len, <S2SV_ModEnd> iovec ) ; <S2SV_ModStart>, & len, <S2SV_ModEnd> iovec ) ;",0
1425,"<S2SV_ModStart> ; } } if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Read <S2SV_blank> binary <S2SV_blank> protocol <S2SV_blank> data:"", c -> sfd ) ; for ( ii = 0 ; ii < sizeof ( c -> binary_header ) ; ++ ii ) { if ( ii % 4 == 0 ) { fprintf ( stderr, ""\\n<%d <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", c -> sfd ) ; } fprintf ( stderr, "" <S2SV_blank> 0x%02x"", req -> bytes [ ii ] ) ; } fprintf ( stderr, ""%d: <S2SV_blank> Read <S2SV_blank> binary <S2SV_blank> protocol <S2SV_blank> data:"", c -> sfd ) ; for ( ii = 0 ; ii < sizeof ( req -> bytes ) ; ++ ii ) { fprintf ( stderr, ""\\n<%d <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", c -> sfd ) ; for ( ii = 0 ; ii < sizeof ( req -> bytes ) ; ++ ii ) { fprintf ( stderr, "" <S2SV_blank> 0x%02x"", req -> bytes [ ii ] ) ; } fprintf ( stderr, ""%d: <S2SV_blank> Read <S2SV_blank> binary <S2SV_blank> protocol <S2SV_blank> data:"", c -> sfd ) ; for ( ii = 0 ; ii < sizeof",0
1426,"<S2SV_ModStart> config ) ; if ( config -> desc. bNumInterfaces > USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, nintf, USB_MAXINTERFACES ) ; nintf = nintf_orig ; } else if ( size2 > sizeof ( struct usb_descriptor_header ) ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> "" ""byte%s, <S2SV_blank> ignoring\\n"", cfgno, size2, sizeof ( struct usb_descriptor_header ) ) ; size2 = sizeof ( struct usb_descriptor_header ) ; if ( size2 < sizeof ( struct usb_descriptor_header ) ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> "" ""byte%s, <S2SV_blank> ignoring\\n"", cfgno, size2, sizeof ( struct usb_descriptor_header ) ) ;",0
1427,"<S2SV_ModStart> ; if ( info -> count < 1 ) return - EINVAL ; access = info -> access == 0? SNDRV_CTL_ELEM_ACCESS_READWRITE : ( info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ) ; info -> id. numid = 0 ; memset ( & kctl, 0, sizeof ( kctl ) ) ;",0
1428,"<S2SV_ModStart> { exit_client ( <S2SV_ModEnd> client_p, client_p <S2SV_ModStart> client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( len < 2 ) { sendto_one ( source_p, form_str ( ERR_SASLABORTED ), me. name, EmptyString ( source_p -> name )? ""*"" : source_p -> name ) ; return 0 ; } if ( len < 2 ) { sendto_one ( source_p, form_str ( ERR_SASLABORTED ), me. name, EmptyString ( source_p -> name )? ""*"" : source_p -> name ) ; return 0 ; } if ( len < 2 ) { sendto_one ( source_p, form_str ( ERR_SASLABORTED ), me. name, EmptyString ( source_p -> name )? ""*"" : source_p -> name ) ; return 0 ; } if ( len < 3 ) { sendto_one ( source_p, form_str ( ERR_SASLABORTED ), me. name, EmptyString ( source_p -> name )? ""*"" :",0
1429,<S2SV_ModStart> ; if ( ctxt -> mode == X86EMUL_MODE_PROT16 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT32 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT32 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT32 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT32 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) {,0
1430,"<S2SV_ModStart>. header. size <S2SV_ModEnd>, 0,",0
1431,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1432,"<S2SV_ModStart> 16 ) ; switch ( mode ) { case DC_PRED : xd -> mode_info_context -> mbmi. mode = B_PRED ; break ; case TM_PRED : xd -> mode_info_context -> mbmi. mode = B_PRED ; break ; case TM_PRED : xd -> mode_info_context -> mbmi. mode = B_PRED ; break ; case TM_PRED : xd -> mode_info_context -> mbmi. mode = mode ; vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; this_rd = RDCOST ( x -> rdmult, x -> rddiv, rate, distortion ) ; if ( error16x16 > this_rd ) { error16x16 = this_rd ; best_mode = mode ; best_sse = sse ; } } xd -> mode_info_context -> mbmi. mode = best_mode ;",0
1433,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 ) ; interface -> macAddr. w [ 0 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR2 ) ; interface -> macAddr. w [ 1 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR3 ) ; interface -> macAddr. w [ 2 ] = letoh16 ( temp ) ; macAddrToEui64 ( & interface -> macAddr, & interface -> eui64 ) ; } else { temp = htole16 ( interface -> macAddr. w [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR1, temp ) ; temp = htole16 ( interface -> macAddr. w [ 1 ] ) ; enc624j600Write",0
1434,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; va_start ( argptr, format ) ; vsnprintf ( start, maxlen, format, argptr ) ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header ) ; <S2SV_ModEnd> return ; }",0
1435,"<S2SV_ModStart> ; if ( unconditional ( e ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && t -> verdict < 0 && unconditional ( & e -> arp ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( t -> verdict < - NF_MAX_VERDICT - 1 ) && unconditional ( & e -> arp ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u.",0
1436,<S2SV_ModStart> alg_priv ) { if ( ctx -> iface -> destroy ) ctx -> iface -> destroy ( ctx -> priv -> alg_priv ) ; else ctx -> priv -> iface = NULL ; ctx -> name = NULL ; ctx -> priv = NULL ; } else if ( ctx -> priv -> name ) { if ( ctx -> iface -> destroy ) ctx -> iface -> destroy ( ctx -> priv -> name ) ; ctx -> priv -> name = NULL ; ctx -> priv = NULL ; } else { if ( ctx -> priv -> iface ) ctx -> iface -> destroy ( ctx -> priv -> iface ) ; ctx -> priv -> iface = NULL ; ctx -> name = NULL ; ctx -> priv = NULL ; res = VPX_CODEC_OK ; } else if ( ctx -> priv -> name ) { if ( ctx -> iface -> destroy ) ctx -> iface -> destroy ( ctx -> priv -> name ) ; ctx -> priv -> name = NULL ; ctx -> priv = NULL ; } else { if ( ctx -> priv -> alg_priv ) ctx -> priv -> alg_priv = NULL ; res = VPX_CODEC_ERROR ; },0
1437,"<S2SV_ModStart> ) ) ; if ( exit_reason == EXIT_REASON_RDPMC ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmcs_read32 ( VM_INSTRUCTION_ERROR ) ) ; return 1 ; } <S2SV_ModEnd> switch ( exit_reason <S2SV_ModStart> case EXIT_REASON_RDTSC : return nested_cpu_has ( vmcs12, CPU_BASED_RDTSC_EXITING ) ; if ( exit_reason == EXIT_REASON_RDPMC ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmcs_read32 ( VM_INSTRUCTION_ERROR ) ) ; return 1 ; } else if ( exit_reason == EXIT_REASON_RDTSC ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmcs_read32 ( VM_INSTRUCTION_ERROR ) ) ; return 1 ; }",0
1438,"<S2SV_ModStart> { sf -> <S2SV_ModEnd> adaptive_rd_thresh = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> use_square_partition_only =! <S2SV_ModStart> cm ) ; <S2SV_ModEnd> sf -> less_rectangular_check <S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> = vp9_frame_is_boosted ( cpi )? USE_FULL_RD : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = DISABLE_ALL_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; sf -> mode_skip_start = 10 ; sf -> adaptive_pred_interp_filter = 1 ; sf -> recode_loop = ALLOW_RECODE_KFARFGF ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] =",0
1439,"<S2SV_ModStart> ct_dccp_roles role ; unsigned int len ; <S2SV_ModStart> ; dh = * skb_header_pointer ( skb, dataoff, sizeof ( _dh ), & dh ) ; len = ntohs ( dh -> dccph_len ) ; if ( len < sizeof ( _dh ) ) return NF_DROP ; type = dh -> dccph_type ; if ( type == DCCP_PKT_RESET &&! test_bit ( IPS_SEEN_REPLY_BIT, & ct -> status ) ) { nf_ct_kill_acct ( ct, ctinfo, skb ) ; return NF_ACCEPT ; } spin_unlock_bh ( & ct -> lock ) ; role = ct -> proto. dccp. role [ dir ] ; new_state = ct -> proto. dccp. state [ dir ] ; if ( old_state == CT_DCCP_RESPOND && type == DCCP_PKT_ACK && dccp_ack_seq ( dh ) == ct -> proto. dccp. handshake_seq ) set_bit ( IPS_ASSURED_BIT, & ct -> status )",0
1440,<S2SV_ModStart> struct compat_timex tx32 ; txc -> modes = tx32. modes ; txc ->,0
1441,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
1442,"<S2SV_ModStart> ; int goodsize ; if ( inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { }, { }, { } ) ;",0
1443,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1444,"<S2SV_ModStart> n ) ; <S2SV_ModEnd> int quote = <S2SV_ModStart> * s = STR ( CHILD ( n, 0 ) ) ; char * raw = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; char * ch, s_kind [ 3 ] ; while ( * raw && * raw!= '\\'' && * raw!= \'""\' ) { * ch ++ = * raw ++ ; } kind = s_kind ; raw = s ; while ( * raw && * raw!= '\\'' && * raw!= \'""\' ) { * ch ++ = * raw ++ ; } kind = s_kind ; * ch ++ = * raw ++ <S2SV_ModEnd> ; while (",0
1445,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> } if ( strcmp ( ""keyframes"", option_name ) == 0 ) { svc_ctx -> keyframes = atoi ( option_value ) ; } else if ( strcmp ( ""keyframes"", option_name ) == 0 ) { svc_ctx -> keyframes = atoi ( option_value ) ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) { svc_log ( svc_ctx",0
1446,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
1447,"<S2SV_ModStart> ; if ( ( mask & KADM5_PRINCIPAL ) || ( mask & KADM5_LAST_PWD_CHANGE ) || ( mask & KADM5_MOD_TIME ) || ( mask & KADM5_MOD_NAME ) || ( mask & KADM5_MKVNO ) || ( mask & KADM5_MKVNO ) || ( mask & KADM5_MKVNO ) || ( mask & KADM5_KEY_DATA ) ) return KADM5_BAD_MASK ; if ( entry == ( kadm5_principal_ent_t ) NULL ) return EINVAL ; if ( mask & KADM5_TL_DATA ) { tl_data_orig = entry -> tl_data ; while ( tl_data_orig ) { if ( tl_data_orig -> tl_data_type < 256 ) return KADM5_BAD_TL_TYPE ; tl_data_orig = tl_data_orig -> tl_data_next ; } } ret = get_entry ( handle, entry -> principal, & kdb, & adb ) ; if ( ret ) return ret ;",0
1448,"<S2SV_ModStart> -> log2_chroma_h ; if ( frame -> data [ plane ] && frame -> linesize [ plane ] ) { int64_t linesize = av_image_get_linesize ( frame -> format, frame -> width, plane ) ; int h = plane == 1 || plane == 2? FF_CEIL_RSHIFT ( inlink -> h, vsub ) : inlink -> h ; if ( linesize < 0 ) return linesize ; for ( i = 0 ; i < h ; i ++ ) { plane_checksum [ plane ] = av_adler32_update ( plane_checksum [ plane ], data, linesize ) ; data += linesize [ plane ] ; } }",0
1449,"<S2SV_ModStart> ) ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; } fprintf ( mvs, ""Mb <S2SV_blank> mv <S2SV_blank> ref <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. ref_frame ) ; mb_index ++ ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row",0
1450,<S2SV_ModStart> self ) { <S2SV_ModEnd> return NULL ;,0
1451,,1
1452,"<S2SV_ModStart> imp_dbh ) ) { imp_dbh -> stats. mysql_errors ++ ; if ( imp_dbh -> stats. mysql_errors > 0 ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; imp_dbh -> stats. mysql_errors ++ ; if ( imp_dbh -> stats. mysql_errors > 0 ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; imp_dbh -> stats. mysql_errors ++ ; if ( imp_dbh -> stats. mysql_errors > 0 ) do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_error ( imp_dbh",0
1453,<S2SV_ModStart> size = 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> == 0 && TEMP_FAILURE_RETRY ) <S2SV_ModStart> == 0 && TEMP_FAILURE_RETRY ) <S2SV_ModStart> == 0 && TEMP_FAILURE_RETRY ) <S2SV_ModStart> == 0 && TEMP_FAILURE_RETRY ) <S2SV_ModStart> == 0 && TEMP_FAILURE_RETRY ) <S2SV_ModStart> == 0 && TEMP_FAILURE_RETRY ) <S2SV_ModStart> == 0 && TEMP_FAILURE_RETRY ) <S2SV_ModStart> == 0 && TEMP_FAILURE_RETRY ) <S2SV_ModStart> == 0 && TEMP_FAILURE_RETRY ) temp_temp_temp_temp_temp_temp_temp_temp_temp_temptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemptemp,0
1454,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; if ( mpdu_str == NULL ) { mpdu_str = kmalloc ( len_remain, GFP_ATOMIC ) ; if ( mpdu_str == NULL ) { mpdu_str = kmalloc ( len_remain, GFP_ATOMIC ) ; } <S2SV_ModStart> len_remain ) ; if ( mpdu_str == NULL ) { mpdu_str = kmalloc ( len_remain, GFP_ATOMIC ) ; } <S2SV_ModStart> len_remain ) ; if ( mpdu_str == NULL ) { mpdu_str = kmalloc ( len_remain, GFP_ATOMIC ) ; if ( mpdu_str == NULL ) { mpdu_str = kmalloc ( len_remain, GFP_ATOMIC ) ; } <S2SV_ModStart> len_remain ) ; if ( mpdu_str == NULL ) { mpdu_str = kmalloc ( len_remain, GFP_ATOMIC ) ; }",0
1455,<S2SV_ModStart> ; sh = s_malloc0 <S2SV_ModEnd> ( hdrlen +,0
1456,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> = context -> ColorLossLevel <S2SV_ModEnd> ; for ( <S2SV_ModStart> = context -> ChromaSubsamplingLevel ; y < context -> height ; y ++ ) { src = data + ( context -> height - 1 - y ) * scanline ; coplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane ++ ; for ( x = 0 ; x < context -> width ; x ++ ) { switch ( context -> format ) { case PIXEL_FORMAT_BGR24 : b_val = * src ++ ; g_val = * src ++ ; r_val = * src ++ ; b_val = * src ++ ; r_val = * src ++ ; a_val = * src ++ ; break ; case PIXEL_FORMAT_RGB24 : b_val = * src ++ ; g_val = * src ++,0
1457,"<S2SV_ModStart> + 1 ; } if ( end_offset < offset ) { end_offset = offset ; } <S2SV_ModStart> hf_keybuffer ) ; if ( end_offset < offset ) { end_offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( end_offset < offset ) { end_offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; }",0
1458,"<S2SV_ModStart> ) return ERR_PTR ( <S2SV_ModEnd> - EINVAL ) <S2SV_ModStart> - EINVAL ) ; if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; }",0
1459,<S2SV_ModStart> cpi ) { VP9EncoderConfig <S2SV_ModEnd> * rc = <S2SV_ModStart> = ( ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) : ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) : ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf.,0
1460,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1461,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_bit_depth_t <S2SV_ModEnd> read_tx_mode ( vpx_reader <S2SV_ModStart> r ) { vpx_bit_depth_t <S2SV_ModEnd> tx_mode = vpx_read_literal <S2SV_ModStart> 2 ) ; vpx_bit_depth_t <S2SV_ModEnd> tx_mode = vpx_read_bit <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r ),0
1462,"<S2SV_ModStart> struct hello6 * hellop ; ND_TCHECK_32BITS ( & hellop -> hello_options ) ; if ( EXTRACT_32BITS ( & hellop -> hello_options )!= 0 ) ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Options <S2SV_blank> [%s]"", bittok2str ( ospf6_option_values, ""none"", EXTRACT_32BITS ( & hellop -> hello_options ) ) ) ) ; if ( EXTRACT_32BITS ( & hellop -> hello_deadint )!= 0 ) ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Hello <S2SV_blank> Timer <S2SV_blank> %us, <S2SV_blank> Dead <S2SV_blank> Timer <S2SV_blank> %us, <S2SV_blank> Interface-ID <S2SV_blank> %u, <S2SV_blank> Priority <S2SV_blank> %u"", hellop -> hello_deadint, hellop -> hello_priority ) ) ) ; ND_TCHECK_32BITS ( & hellop -> hello_dr ) ; if ( EXTRACT_32BITS ( & hellop -> hello_dr )!= 0 ) ND_PRINT ( ( ndo, "", <S2SV_blank> Backup <S2SV_blank> <S2SV_blank> Designated <S2SV_blank> Router <S2SV_blank> %s"", ipaddr_string ( ndo, & hello",0
1463,<S2SV_ModStart> datalen ) { if ( datalen < 1 ) return - EINVAL ;,0
1464,"<S2SV_ModStart> rc ) { mutex_lock ( & rc -> uwbd. mutex ) ; <S2SV_ModStart> ""uwbd"" ) ; mutex_unlock ( & rc -> uwbd. mutex ) ; <S2SV_ModStart> ""uwbd"" ) ; mutex_unlock ( & rc -> uwbd. mutex ) ;",0
1465,"<S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1051 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1058 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1058 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1058 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1058 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1058 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1058 <S2SV_ModEnd> """,0
1466,<S2SV_ModStart> : idx ; if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_MSB ) { char c = ( char ) ( ( existing & ~ mask ) << bitIdx ) ; pixelCount = ( short ) ( pixelCount + 1 ) ; if ( wholeBytes ) { char c = ( char ) ( wholeBytes * 8 / gfx -> data. bpp ) ; pixelCount = ( short ) ( pixelCount + 1 - ( wholeBytes * 8 / gfx -> data. bpp ) ) ; pixelCount = ( short ) ( pixelCount + 1 ) ; if ( wholeBytes ) { char c = ( char ) ( col? 0xFF : 0 ) ; pixelCount = ( short ) ( pixelCount + 1 ) ; if ( wholeBytes ) { char c = ( char ) ( wholeBytes * 8 / gfx -> data. bpp ) ; pixelCount = ( short ) ( pixelCount + 1 - ( wholeBytes * 8 / gfx -> data. bpp ) ) ; pixelCount = ( short ) ( pixelCount + 1 ) ; if ( wholeBytes ) { char c = ( char ) ( col? 0xFF : 0 ) ; pixelCount = ( short ) ( pixelCount + 1 ),0
1467,"<S2SV_ModStart> = args -> cpi <S2SV_ModEnd> ; TOKENEXTRA * <S2SV_ModStart> 32 ] ; MACROBLOCK * const td = & cpi -> td. <S2SV_ModEnd> plane [ plane <S2SV_ModStart> plane ] ; MB_MODE_INFO * const mbmi = & td -> mb. mi [ 0 ] -> mbmi ; const int16_t * qcoeff = BLOCK_OFFSET ( td -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const int ref = is_inter_block ( mbmi ) ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = cpi -> fc. coef_counts [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; vpx",0
1468,<S2SV_ModStart> ; SrcList * const pSrc = pSelect -> pSrc ; if ( pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
1469,<S2SV_ModStart> ( shmflg & SHM_RND ) addr &= ~ ( shmlba - 1 ) ; else if ( ( addr & ( shmlba - 1 ) ) == ( shmlba - 1 ) ) { if ( addr & ( shmflg & SHM_RND ) ) addr &= ~ ( shmlba - 1 ) ; else addr &= ~ ( shmlba - 1 ) ; else if ( addr & ( shmflg & SHM_REGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREGREG,0
1470,"<S2SV_ModStart> users ) ; if ( cb_info -> serv ) { printk ( KERN_WARNING ""nfs_callback_create_svc: <S2SV_blank> no <S2SV_blank> kthread, <S2SV_blank> %d <S2SV_blank> users??\\n"", cb_info -> users ) ; cb_info -> serv = serv ; return ERR_PTR ( - ENOMEM ) ; }",0
1471,"<S2SV_ModStart> * point, const CurveZZ_p * curve ) { PointZZ_p R0, R1, tmp ; mpz_inits ( R0. x, R0. y, tmp. x, tmp. y, NULL ) ; mpz_inits ( R1. x, R1. y, tmp. x, tmp. y, NULL ) ; mpz_init_set ( R0. x, R0. y ) ; mpz_init_set ( R0. x, R0. y ) ; mpz_inits ( R1. x, R1. y, tmp. x, tmp. y, NULL ) ; mpz_clears ( R0. x, R0. y, R1. x, R1. y, tmp. x, tmp. y, NULL ) ; mpz_clears ( R0. x, R0. y, R1. x, R1. y ) ; mpz_clears ( R0. x, R0. y, R1. y, R1. x, R1. y, tmp. x, tmp. y, NULL ) ;",0
1472,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1473,<S2SV_ModStart> NPNVSupportsXEmbedBool : case NPNVSupportsWindowless :,0
1474,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
1475,"<S2SV_ModStart> s ) { if ( s < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1476,"<S2SV_ModStart> = NULL ; if ( crm_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ) ; break",0
1477,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> NULL ; return ( SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,0
1478,"<S2SV_ModStart> mq_ops ) { list_for_each_entry_safe ( rq, n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; WARN_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error ) ; } if ( q -> mq_ops ) spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ; fq -> flush_running_idx ^= 1 ; if (! q -> mq_ops ) spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ; flush_rq -> tag = - 1 ; } else { list_for_each_entry_safe ( rq, n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; BUG_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error",0
1479,"<S2SV_ModStart> { int length ; struct stream packet = * s ; <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & packet ) ; if (! s_check ( s ) ) return RD_FALSE <S2SV_ModStart> length ) ; if (! s_check ( s ) ) return RD_FALSE <S2SV_ModStart> length ) ; if (! s_check ( s ) ) return RD_FALSE <S2SV_ModStart> length ) ; if (! s_check ( s ) ) return RD_FALSE <S2SV_ModStart> length ) ; if (! s_check ( s ) ) return RD_FALSE <S2SV_ModStart> length ) ; if (! s_check ( s ) ) return RD_FALSE <S2SV_ModStart> length ) ; if (! s_check ( s ) ) return RD_FALSE <S2SV_ModStart> length ) ; if (! s_check ( s ) ) return RD_FALSE <S2SV_ModStart> length ) ; if (! s_check ( s ) ) return RD_FALSE <S2SV_ModStart> length ) ; if (! s_check ( s ) ) return RD_FALSE",0
1480,"<S2SV_ModStart> ) ; } if ( hkey. type == HASH_KEY_IS_STRING ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""params <S2SV_blank> = <S2SV_blank> "" ) ; zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""params <S2SV_blank> = <S2SV_blank> "" ) ; zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""params <S2SV_blank> = <S2SV_blank> "" ) ; zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; }",0
1481,<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> = VPX_IMG_FMT_I420 ; _y4m -> vpx_bps = DEFAULT_VPX_BPS <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> vpx_bps = DEFAULT_VPX_BPS <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_bps = DEFAULT_CHROMA_BPS <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_bps = DEFAULT_CHROMA_BPS <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_bps = DEFAULT_CHROMA_BPS <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_bps = DEFAULT_CHROMA_BPS <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_bps = DEFAULT_CHROMA_BPS <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_bps = DEFAULT_CHROMA_BPS <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_bps = DEFAULT_CHROMA_BPS <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_bps = DEFAULT_CHROMA_BPS <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_bps = DEFAULT_CHROMA_BPS <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_b,0
1482,"<S2SV_ModStart> obj * otmp ; if ( strlen ( buf ) >= sizeof ( struct obj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
1483,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> 0 ) return FALSE <S2SV_ModEnd> ; if ( <S2SV_ModStart> FALSE ) return FALSE <S2SV_ModEnd> ; if ( <S2SV_ModStart> FALSE ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( read_inode_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_directory_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( no_xattrs ) sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BL",0
1484,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static u_int <S2SV_ModEnd> createenv ( const <S2SV_ModStart> root ) ; if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; size_t len ; char keybuf [ 1024 ] ; if ( len > sizeof ( keybuf ) - 1 ) continue ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } return env ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1485,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; vp9_clear_segmentation ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vp9_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; } } for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_",0
1486,"<S2SV_ModStart> ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; <S2SV_ModStart> ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 5 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"", stmt_type, ClassDef_fields, 5 ) ; if (! ClassDef_type )",0
1487,<S2SV_ModStart> ) ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> } write
1488,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 2 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 2 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 2 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 2 ; <S2SV_ModEnd> break ; },0
1489,<S2SV_ModStart> ) ; } ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ;,0
1490,"<S2SV_ModStart> ) ; } if ( sr -> tid_tree == NULL ) { smbsr_error ( sr, NT_STATUS_INVALID_HANDLE, ERRDOS, ERRbadtid ) ; return ( SDRC_ERROR ) ; }",0
1491,<S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if (,0
1492,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, <S2SV_ModEnd> * t, <S2SV_ModStart> * t, <S2SV_ModEnd> * StartClean ; <S2SV_ModStart> * s, <S2SV_ModEnd> * t, <S2SV_ModStart> * t, <S2SV_ModEnd> * StartClean ; <S2SV_ModStart> outpos = outputbuffer <S2SV_ModEnd> ; if ( <S2SV_ModStart> == '0' && s [ 1 ] == '[' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; free ( argbuf ) ; return ( - 1 ) ; } } StartClean = outpos ; nameobject = t ; while ( * t!='<S2SV_blank>'&& * t!= '\\n' && * t!= ']' ) { * t ++ = 0 ; * t ++ = 0 ; * t ++ = 0 ; * t ++ = 0 ;",0
1493,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart>, id ; hash = jhash_3words ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, ( __force u32 ) iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( segs ) <S2SV_ModEnd> ; } <S2SV_null>",0
1494,"<S2SV_ModStart> expr_ty step ; int res <S2SV_ModEnd> ; int res <S2SV_ModStart> int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( exists_not_none ( obj, & PyId_lower ) ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( exists_not_none ( obj, & PyId_upper ) ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( exists_not_none ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } if ( exists_not_none ( obj, & PyId_",0
1495,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
1496,"<S2SV_ModStart> ; if ( ctl -> pw -> pw_gid!= ctl -> pw -> pw_gid ) { warn ( ""setpwnam <S2SV_blank> failed"" ) ; # endif printf ( _ ( ""Finger <S2SV_blank> information <S2SV_blank> *NOT* <S2SV_blank> changed. <S2SV_blank> <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ) ; return - 1 ; }",0
1497,<S2SV_ModStart> vns ) { struct ieee80211_radiotap_header * radiotap_header = ( struct ieee80211_radiotap_header * ) iterator -> _rtheader ; if ( radiotap_header -> it_len < sizeof ( * radiotap_header ) ) return - EINVAL ; if ( max_length < get_unaligned_le16 ( & radiotap_header -> it_len ) ) return - EINVAL ; iterator -> _arg = ( uint8_t * ) radiotap_header + sizeof ( * radiotap_header ) ; iterator -> _arg_index = 0 ; iterator -> _bitmap_shifter = get_unaligned_le32 ( & radiotap_header -> it_present ) ; iterator -> _arg = ( uint8_t * ) radiotap_header + sizeof ( * radiotap_header ) ; iterator -> _arg += sizeof ( uint8_t ) ; iterator -> _reset_on_ext = 1 ; iterator -> current_namespace = & radiotap_ns ; iterator -> is_radiotap_ns = 1 ; if ( iterator ->,0
1498,"<S2SV_ModStart> int err ; list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; err = - EOPNOTSUPP ; goto err_delete ; } mask = be32_to_cpu ( knode -> sel -> keys [ 0 ]. mask ) >> tos_off & 0xff ; val = be32_to_cpu ( knode -> sel -> keys [ 0 ]. val ) >> tos_off & 0xff ; if ( iter -> handle == knode -> handle ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } cmask = iter -> mask & mask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } match -> handle = knode -> handle ; match -> band = knode",0
1499,"<S2SV_ModStart> FAILURE ) { return ; } <S2SV_ModEnd> if ( gdImageTrueColor <S2SV_ModStart>, le_gd ) ; <S2SV_ModEnd> if ( gdImageTrueColor <S2SV_ModStart> ) ) { int x, y, c ; for ( x = 0 ; x < gdImageSX ( im ) ; x ++ ) { c = gdImageGetPixel ( im, x, y ) ; gdImageSetPixel ( im, x, y, c ) ; gdImageSetPixel ( im, x, y, c ) ; } } RETURN_TRUE ; } for ( i = 0 ; i < gdImageColorsTotal ( im ) ; i ++ ) { im -> red [ i ] = ( int ) ( ( pow ( ( pow ( ( im -> red [ i ] / 255.0 ), input ) ), 1.0 / output ) * 255 ) +.5 ) ; im -> green [ i ] = ( int ) ( ( pow ( ( im -> green [ i ] / 255.0 ) ), 1.0 / output ) * 255 ) +.5 ) ; im -> blue [ i ] = ( int ) ( ( pow ( ( im -> blue [ i ] / 255.0 ) ), 1.0 / output ) * 255",0
1500,"<S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } if ( stream -> config. cfg. g_pass == 2 ) { stream -> config. cfg. g_pass = pass? VPX_RC_LAST_PASS : VPX_RC_FIRST_PASS ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } else { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1501,"<S2SV_ModStart> g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) <S2SV_ModEnd> ) goto out",0
1502,"<S2SV_ModStart> data_end ) { const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; TileBuffer tile_buffers [ 4 ] [ 1 << 6 ] ; int tile_row, tile_col ; memset ( cm -> above_context, 0, sizeof ( * cm -> above_context ) * MAX_MB_PLANE * 2 * aligned_cols ) ; memset ( cm -> above_seg_context, 0, sizeof ( * cm -> above_seg_context ) * aligned_cols ) ; memset ( cm -> above_seg_context, 0, sizeof ( * cm -> above_seg_context ) * aligned_cols ) ; for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) { for ( tile_col = 0 ; tile_col < tile_cols ; ++ tile_col ) { const int last_tile = tile_row ==",0
1503,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP9Decoder <S2SV_ModEnd> * vp9_decoder_create ( <S2SV_ModStart> ) ) { const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> ) ) ; const VP9Decoder * const pbi = vpx_memalign ( 32, sizeof ( * pbi ) ) ; const VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if ( setjmp ( cm -> error. setjmp ) ) { cm -> error. setjmp = 1 ; vp9_initialize_dec ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; pbi -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; cm -> error. setjmp = 0 ; vp9_loop_filter_init ( & cm -> lf_worker ) ; return pbi ;",0
1504,"<S2SV_ModStart> -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1505,<S2SV_ModStart> -> count ; kfree ( new_fpl ) ;,0
1506,"<S2SV_ModStart> req ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> ( opt == NULL || opt -> opt. cipso == 0 ) return ; opt = rcu_dereference_protected ( req_inet -> opt, sock_owned_by_user ( req ) ) ; if ( opt == NULL || opt -> opt.",0
1507,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_token <S2SV_ModEnd> tree2tok ( struct <S2SV_ModStart> { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tokens [ - j ]. len = l ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1508,<S2SV_ModStart> ; if ( flags & VP8_EFLAG_NO_REF_LAST ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP,0
1509,"<S2SV_ModStart> wqh ) ; init_waitqueue_func_entry ( & ctx -> wqe, timerfd_wake_func ) ;",0
1510,"<S2SV_ModStart> ; struct hlist_node <S2SV_ModEnd> * n ; <S2SV_ModStart> int err ; lock_mount_hash ( ) ; err = propagate_mnt ( dest_mnt, dest_mp, source_mnt, & tree_list ) ; if ( err ) goto out_cleanup_ids ; for ( p = source_mnt ; p ; p = next_mnt ( p, source_mnt ) ) set_mnt_shared ( p ) ; } else { lock_mount_hash ( ) ; } if ( parent_path ) { detach_mnt ( source_mnt, parent_path ) ; attach_mnt ( source_mnt, parent_path ) ; touch_mnt_namespace ( source_mnt -> mnt_ns ) ; } else { mnt_set_mountpoint ( dest_mnt, dest_mp, source_mnt ) ; commit_tree ( source_mnt, NULL ) ; } hlist_for_each_entry_safe ( child, n, & tree_list, mnt_hash ) { struct mount * q ; hlist_del_init ( & child -> mnt_hash ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt,",0
1511,"<S2SV_ModStart> { ret = get_raw_tag <S2SV_ModEnd> ( asn1, <S2SV_ModStart>, & len ) ; if ( ret ) goto error ; if ( check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; if ( ret ) goto error ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; ret = decode_atype ( & t, contents, clen, elemtype, elem ) ; if ( ret ) goto error ; count ++ ; }",0
1512,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = pair_set_epi16 ( ( int16_t ),0
1513,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> ) rc -> avg_frame_bandwidth <S2SV_ModEnd> * ( int64_t,0
1514,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN <S2SV_ModStart> MIF_MAGICLEN ] ; char buf [ 4096,0
1515,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> Huff_transmit ( huff_t <S2SV_ModStart> NULL ) { return - 1 ; } <S2SV_ModStart> { send ( <S2SV_ModEnd> huff -> loc <S2SV_ModStart> [ ch ] <S2SV_ModEnd>, NULL,",0
1516,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> -> common ; MACROBLOCK * const x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> -> mbmi ; PICK_MODE_CONTEXT * ctx = get_block_context ( x, bsize ) ; unsigned int segment_id = cm -> mi_stride ; const int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; x -> skip_recode =! x -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 && cpi -> oxcf. aq_mode!= COMPLEXITY_AQ && cpi -> oxcf. aq_mode!= CYCLIC_REFRESH_AQ && cpi -> sf. allow_skip_recode ; x -> skip",0
1517,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> crypto_skcipher * tfm_des <S2SV_ModEnd> ; struct scatterlist <S2SV_ModStart> 8 ] ; <S2SV_ModEnd> crypto_skcipher * tfm_des <S2SV_ModStart> crypto_alloc_skcipher ( ""ecb(des)"" <S2SV_ModStart> 0, CRYPTO_ALG_ASYNC ) ; if ( IS_ERR ( tfm_des ) ) { rc = PTR_ERR ( tfm_des ) ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } req = skcipher_request_alloc ( ""ecb(des)"", 0, CRYPTO_ALG_ASYNC ) ; if (! req ) { rc = - ENOMEM ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } crypto_skcipher_setkey ( tfm_des, key2, 8 ) ; sg_init_one ( & sgin, in, 8 ) ; skcipher_request_set_callback ( req, 0, NULL, NULL ) ; skcipher_request_",0
1518,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> 4 ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header,0
1519,"<S2SV_ModStart> range_max ) { <S2SV_ModEnd> int position, <S2SV_ModStart>, i, j ; char bits [ 65 ] ; int position, zeroes, i, j ; if ( ctx -> trace_enable ) position = get_bits_count ( gbc ) ; zeroes = i = 0 ; while ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits1 ( gbc ) ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ;",0
1520,<S2SV_ModStart> delta ; else { if ( i < pos && i + insn -> off + 1 < pos ) insn -> off -= delta ; else if ( i > pos && i + insn -> off + 1 < pos ) insn -> off += delta ; else if ( i > pos && i + insn -> off + 1 < pos ) insn -> off -= delta ; else if ( i > pos && i + insn -> off + 1 < pos ) insn -> off -= delta ; else if ( i > pos && i + insn -> off + 1 < pos && i + insn -> off + 1 < pos ) insn -> off += delta ; else if ( i > pos && i + insn -> off + 1 < pos ) insn -> off += delta ; else if ( i > pos && i + insn -> off + 1 < pos ) insn -> off -= delta ; else if ( i > pos && i + insn -> off + 1 < pos ) insn -> off -= delta ; else if ( i > pos && i + insn -> off + 1 < pos ) insn -> off += delta ; else if ( i > pos && i + insn -> off + 1 < pos ),0
1521,"<S2SV_ModStart>, KVM_ISA_VMX ) <S2SV_ModEnd> ) { pr_info_ratelimited <S2SV_ModStart>, KVM_ISA_VMX ) <S2SV_ModEnd> ) { pr_info_ratelimited <S2SV_ModStart> ) ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmcs_read32 ( VM_INSTRUCTION_ERROR ) ) ; return 1 ; } <S2SV_ModEnd> switch ( exit_reason <S2SV_ModStart> exit_reason ) { case EXIT_REASON_NMI_WINDOW : if ( kvm_register_read ( vcpu, KVM_ISA_VMX ) ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> idt_vectoring_info ) ; return 1 ; } else { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> idt_vectoring_info ) ; return 1 ; }",0
1522,"<S2SV_ModStart> { } else if ( <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 )",0
1523,"<S2SV_ModStart> = 0, packet -> connection_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1524,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1525,"<S2SV_ModStart> ++ r ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ; return r ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1526,"<S2SV_ModStart> += 4 ) { if ( ( x + 4 ) > dds_info -> width || ( y + 4 ) > dds_info -> height ) || ( y + 4 ) > dds_info -> height ) return MagickFalse ; <S2SV_ModStart> dds_info, 8, exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBLong ( image ) ; bits = ReadBlobLSBLong ( image ) ; CalculateColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { if ( ( x + j ) < ( ssize_t ) dds_info -> width ) && ( y + j ) < ( ssize_t ) dds_info -> height ) { if ( ( x + j ) < ( ssize_t ) dds_info -> width ) && ( y + j ) < ( ssize_t ) dds_info -> height ) ) { code = ( unsigned char ) ( ( bits >> ( ( j * 4 + i ) * 2 ) ) )",0
1527,"<S2SV_ModStart> } if ( unlikely ( iph -> ihl > IP_OPTION_MAX / 4 ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } <S2SV_ModStart> ( iph -> ihl > IP_OPTION_MAX / 4 ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen > IP_OPTION_MAX / 4 ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if",0
1528,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> EINTR ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ),0
1529,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ;",0
1530,"<S2SV_ModStart> cfg ) { <S2SV_ModEnd> memset ( cfg <S2SV_ModStart> ) cfg -> debug_file = fdopen ( fdopen ( fdopen ( fdopen ( fdopen ( fdopen ( fdopen ( fdopen ( fdopen ( 1 ), O_RDONLY ), O_WRONLY ), O_WRONLY ), O_WRONLY ), O_WRONLY | O_APPEND | O_CLOEXEC | O_CLOEXEC | O_NOFOLLOW ), O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_CLOEXEC | O_NOCTTY ) ; if ( cfg -> debug_file == NULL ) ) cfg -> debug_file = fdopen ( fdopen ( fdopen ( 1 ), O_WRONLY ) ) == 0 ) cfg -> debug_file = fdopen ( fdopen ( fdopen ( 1 ), O_WRONLY | O_APPEND | O_CLOEXEC | O_CLOEXEC | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_CLOEXEC | O_NOCTTY ) ; if ( cfg -> debug_file == NULL ) cfg -> debug_file = fdopen ( fdopen ( fdopen ( 1 ), O",0
1531,"<S2SV_ModStart> = DEF_MIN_FSYNC_BLOCKS ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_",0
1532,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",0
1533,"<S2SV_ModStart> ; WLog_VRB ( AUTODETECT_TAG <S2SV_ModEnd>, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" )",0
1534,<S2SV_ModStart> ; # endif # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_ONTHEFLY_BITPACKING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # endif # endif # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # endif # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMP,0
1535,"<S2SV_ModStart> pvc ) ; dev = alloc_netdev ( 0, ""pvceth%d"", ether_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if ( type == ARPHRD_ETHER ) dev = alloc_netdev ( 0, ""pvceth%d"", pvc_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; }",0
1536,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
1537,"<S2SV_ModStart> -> b_multithreaded_rd ) vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
1538,<S2SV_ModStart> case FORM_INPUT_RADIO : if ( form -> type == FORM_INPUT_CHECKBOX : if ( form -> checked ) buf -> currentLine -> lineBuf [ spos ] = '*' ; else buf -> currentLine -> lineBuf [ spos ] ='<S2SV_blank>'; else if ( form -> type == FORM_INPUT_FILE ) buf -> currentLine -> lineBuf [ spos ] ='<S2SV_blank>'; else if ( form -> type == FORM_INPUT_PASSWORD ) buf -> currentLine -> lineBuf [ spos ] ='<S2SV_blank>'; else if ( form -> type == FORM_INPUT_FILE ) buf -> currentLine -> lineBuf [ spos ] ='<S2SV_blank>'; else if ( form -> type == FORM_INPUT_PASSWORD ) buf -> currentLine -> lineBuf [ spos ] ='<S2SV_blank>'; else if ( form -> type == FORM_INPUT_PASSWORD ) buf -> currentLine -> lineBuf [ spos ] ='<S2SV_blank>'; else if ( form -> type == FORM_INPUT_FILE ) buf -> currentLine -> lineBuf [ spos ] ='<S2SV_blank>'; else if ( form -> type == FORM_INPUT_PASSWORD ) buf -> currentLine -> lineBuf [ spos ] ='<S2SV_blank>'; else,0
1539,<S2SV_ModStart> { if ( ( <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize + xHeapStructSize ) > xWantedSize ) { <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize + xHeapStructSize ) > xWantedSize ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } } if ( ( xWantedSize > 0 ) && ( xWantedSize + xHeapStructSize ) > xWantedSize ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize,0
1540,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1541,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1542,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> ( cc % ( tif -> tif_dir. td_bitspersample <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( cc % ( tif -> tif_dir. td_bitspersample <S2SV_ModEnd> ) ) == <S2SV_ModStart> ) return 0 ; tmp = ( uint8 * ) _TIFFmalloc ( cc ) ; assert ( ( cc % ( bps * stride ) ) == 0 ) ; if (! tmp ) return ; _TIFFmemcpy ( tmp, cp0, cc ) ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint",0
1543,"<S2SV_ModStart> STREAM s ) { struct stream packet = * s ; <S2SV_ModStart> int i ; if (! s_check_rem ( s, 2 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> bitmap <S2SV_blank> updates <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s, 2 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> bitmap <S2SV_blank> updates <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } else { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> bitmap <S2SV_blank> updates <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s, 2 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> bitmap <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } else { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume",0
1544,"<S2SV_ModStart> } else { if ( smatch ( option, ""filename"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Filename <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } else if ( smatch ( option, ""backup"" ) ) { flags |= MPR_LOG_BACKUP ; } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { stamp = atoi ( ovalue ) ; } else if ( smatch ( option, ""path"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Filename <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Filename <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR",0
1545,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> ] ; vpx_coeff_count <S2SV_ModEnd> * coef_counts =",0
1546,"<S2SV_ModStart> { } ; struct termios old_tc = { } ; <S2SV_ModStart> name ) ; if ( tcgetattr ( fd, & old_tc ) < 0 ) return log_warning_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = tcsetattr ( fd, & old_tc, & tc ) ; if ( r < 0 ) return log_warning_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( tcgetattr ( fd, & old_tc ) < 0 ) return log_warning_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( tcgetattr ( fd, & old_tc ) < 0 ) return log_warning_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"",",0
1547,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> data [ 0 ] = 0xe ; d -> data [ 1 ] = 0x80 ; d -> data [ 2 ] = 0 ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> data [ 0 ] = 0xe ; d -> data [ 1 ] = 0x83 ; d -> data [ 2 ] = 0 ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> data [ 0 ] = 0xe ; d -> data [ 1 ] = 0x83 ; d -> data [ 2 ] = 0 ; d -> data",0
1548,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface",0
1549,"<S2SV_ModStart> int stride, <S2SV_ModEnd> int mv_row, <S2SV_ModStart> int uv_block_size, vpx_bit_depth_t * bit_depth <S2SV_ModStart> const kernel = vpx_get_kernel ( <S2SV_ModEnd> xd -> mi <S2SV_ModStart> 0 ] -> mbmi. interp_filter ) <S2SV_ModEnd> ; enum mv_precision <S2SV_ModStart> mv_precision_uv ; int uv_stride ; if ( stride < 2 ) { vpx_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, MV_PRE",0
1550,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) < 4 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } <S2SV_ModEnd> bufp = find_optparam <S2SV_ModStart> bufp ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( origbuf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') bufp = find_optparam ( origbuf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( origbuf ) ; if (! bufp ) { config_",0
1551,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static cJSON * <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> 0 ; a && i < count ; ++ i ) { <S2SV_ModStart> cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } <S2SV_ModEnd> return a ;",0
1552,"<S2SV_ModStart> tk_status ) ; if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_unlock ; } if ( status == NLM_LCK_DENIED_REBIND_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_rebind ; } if ( status == NLM_LCK_GRANTED ) printk ( KERN_WARNING ""lockd: <S2SV_blank> unexpected <S2SV_blank> unlock <S2SV_blank> status: <S2SV_blank> %d\\n"", status ) ;",0
1553,"<S2SV_ModStart>, n ) ; if ( n <= 0 ) n = f -> channels ; for ( i = 0 ; i < f -> channels ; ++ i ) { for ( j = 0 ; j < n ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * w [ j ] + f -> previous_window [ i ] [ j ] * w [ n - 1 - j ] ; } prev = f -> previous_length ; f -> previous_length = len - right ; for ( i = 0 ; i < f -> channels ; ++ i ) { for ( j = 0 ; j < n ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * w [ j ] + f -> previous_window [ i ] [ j ] * w [ n - 1 - j ] ; } prev = f -> previous_length ; f -> previous_length = len - right ; for ( i = 0 ; i < f -> channels ; ++ i ) for ( j = 0 ; j < n ; ++ j ) f -> channel_buffers",0
1554,"<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) { android_errorWriteLog ( 0x534e4554, ""26366256"" ) ; return NULL ; } <S2SV_ModStart> len ) ; if ( idx + 4 + a -> num_names > len ) { android_errorWriteLog ( 0x534e4554, ""26366256"" ) ; return NULL ; } <S2SV_ModStart> len ) ; if ( idx + 4 + a -> num_names > len ) { android_errorWriteLog ( 0x534e4554, ""26366e4554"" ) ; return NULL ; } <S2SV_ModStart> len ) ; if ( idx + 4 + a -> num_names > len ) { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len )",0
1555,"<S2SV_ModStart> data_end ) { const VP9EncoderConfig <S2SV_ModEnd> * const cm <S2SV_ModStart> const cm = & pbi -> oxcf ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int num_workers = MIN ( pbi -> oxcf. max_threads <S2SV_ModEnd>, tile_cols ) <S2SV_ModStart> tile_cols ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int final_worker = - 1 ; if ( pbi -> num_tile_workers == 0 ) { CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_workers * sizeof ( * pbi -> tile_workers ) ) ) ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_workers * sizeof ( * pbi -> tile_workers ) ) ) ; pbi -> num_tile_workers = 0 ; for ( i = 0 ; i < num_threads ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; CHECK_MEM_ERROR ( cm, worker -> data",0
1556,"<S2SV_ModStart> * 0x101 ; if ( order > SIZE_MAX / 8 ) {
1557,"<S2SV_ModStart> struct segmentation * const seg = cm -> seg ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; const int segment_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; RDMULT_RATIO ( i ) = 1 ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vp9_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex",0
1558,"<S2SV_ModStart> int bychunk ; if ( bitspersample > 8 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( bitspersample > 8 && samplesperpixel > 1 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> samples/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( bitspersample > 8 && samplesperpixel > 1 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> samples/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; }",0
1559,<S2SV_ModStart> error_code ) { if ( error -> has_detail ) ctx -> base. err_detail = error -> has_detail ; else ctx -> base. err_detail = NULL ; return error -> error_code <S2SV_ModEnd> ; } <S2SV_null>,0
1560,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1561,"<S2SV_ModStart> ""dotquery.bson"", BSON_VALIDATE_DOLLAR_KEYS | BSON_VALIDATE_DOT_KEYS, 3, BSON_VALIDATE_DOLLAR_KEYS, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart> ""dotquery.bson"", BSON_VALIDATE_DOLLAR_KEYS | BSON_VALIDATE_DOT_KEYS, 3, BSON_VALIDATE_DOLLAR_KEYS, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 4, BSON_VALIDATE_DOLLAR_KEYS, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart> ""dotquery.bson"", BSON_VALIDATE_DOLLAR_KEYS | BSON_VALIDATE_DOT_KEYS, 3, BSON_VALIDATE_DOLLAR_KEYS, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ;",0
1562,"<S2SV_ModStart> * ps_cur_slice ; pocstruct_t <S2SV_ModEnd> * ps_prev_poc, <S2SV_ModStart> * ps_cur_poc ; memset ( ps_dec -> ps_prev_poc, 0, sizeof ( pocstruct_t ) )",0
1563,<S2SV_ModStart> goto out_unlock ; if (! ( vma -> vm_flags & VM_MAYWRITE ) ) { if (! ( vma -> vm_flags & VM_MAYWRITE ) ) { if (! ( vma -> vm_flags & VM_MAYWRITE ) ) { if (! ( vma -> vm_flags & VM_MAYWRITE ) ) { if (! ( vma -> vm_flags & VM_MAYWRITE ) ) { if (! ( vma -> vm_flags & VM_MAYWRITE ) ) { if (! ( vma -> vm_flags & VM_MAYWRITE ) ) { ret = - ENOMEM ; goto out_unlock ; } } else { if (! ( vma -> vm_flags & VM_MAYWRITE ) ) { if (! ( vma -> vm_flags & VM_MAYWRITE ) ) { if (! ( vma -> vm_flags & VM_MAYWRITE ) ) { if (! ( vma -> vm_flags & VM_MAYWRITE ) ) { if (! ( vma -> vm_flags & VM_MAYWRITE ) ) goto out_unlock ;,0
1564,"<S2SV_ModStart> ssize_t ret ; if ( GKI_get_buf_size ( buffer ) < sizeof ( btpan_cb. congest_packet ) ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; GKI_freebuf ( buffer ) ; return ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; GKI_freebuf ( buffer ) ; btsock_thread_add_fd ( pan_pth, fd, 0, SOCK_THREAD_FD_RD, 0 ) ; return ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; GKI_freebuf ( buffer ) ; btsock_thread_add_fd ( pan_pth, fd, 0, SOCK_THREAD_FD_RD, 0 ) ;",0
1565,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> getnum ( const <S2SV_ModStart> int df ) { if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; a = a * 10 + * ( ( * fmt ) ++ ) - '0' ;,0
1566,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> survival ) ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> allgc, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; g -> allgc = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; markold ( g, g -> allgc, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = g -> allgc ; g -> allgc = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold =",0
1567,"<S2SV_ModStart> = 0 ; else { ret = - EIO ; deb_info ( ""Unknown <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
1568,"<S2SV_ModStart> { 'S' } <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok ) ; return NULL ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception (",0
1569,"<S2SV_ModStart> int cib_tls_signon ( cib_t <S2SV_ModEnd> * cib, <S2SV_ModStart> cib -> variant_opaque ; struct sockaddr_in <S2SV_ModEnd> addr ; int <S2SV_ModStart> = 0 ; <S2SV_ModEnd> int rc = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> static struct mainloop_fd_callbacks <S2SV_ModStart> cib_fd_callbacks = { } ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } bzero ( & hints, sizeof ( struct addrinfo ) ) ; hints. ai_flags = AI_CANONNAME ; hints. ai_family = AF_INET ; hints. ai_socktype = SOCK_RAW ; if ( hints. ai_family == AF_",0
1570,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; cpi -> frames_till_gf_update_due = 0 ; cpi -> gf_bitrate_adjustment = 0 ; cpi -> prob_last_coded = 128 ; cpi -> prob_gf_coded = 63 ; cpi -> prob_intra_coded = 63 ; cpi -> recent_ref_frame_usage [ LAST_FRAME ] = 1 ; cpi -> recent_ref_frame_usage [ GOLDEN_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ ALTREF_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ ALTREF_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ ALTREF_FRAME ] = 1 ; cpi -> recent_ref_frame_usage [ LAST_FRAME ] = 1 ; cpi -> recent_ref_frame_usage [ GOLDEN_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ LAST_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ GOLD",0
1571,"<S2SV_ModStart> __FAIL_ADDR_MASK ; perf_sw_event <S2SV_ModEnd> ( PERF_COUNT_SW_PAGE_FAULTS, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MAJ, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MAJ, 1 <S2SV_ModEnd>, regs,",0
1572,"<S2SV_ModStart> ) ) ; ND_TCHECK2 ( bp [ 26 ], sizeof ( struct icmp6_hdr ) ) ; <S2SV_ModStart> ], sizeof ( struct in6_addr ) ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 26 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 26 ] & 0x08 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag",0
1573,"<S2SV_ModStart> case EXPR_NOT : switch ( expr -> expr. op ) { case EXPR_ADD : case EXPR_SUBTRACT : case EXPR_DIVIDE : ok = ExprResolveBoolean ( ctx, expr, set_rtrn ) ; if (! ok ) * set_rtrn =! * set_rtrn ; break ; case EXPR_UNARY_PLUS : log_err ( ctx, ""%s <S2SV_blank> of <S2SV_blank> boolean <S2SV_blank> values <S2SV_blank> not <S2SV_blank> permitted\\n"", expr_op_type_to_string ( expr -> expr. op ) ) ; * set_rtrn =! * set_rtrn ; break ; case EXPR_UNARY_MINUS : case EXPR_UNARY_MINUS : log_err ( ctx, ""%s <S2SV_blank> of <S2SV_blank> boolean <S2SV_blank> values <S2SV_blank> not <S2SV_blank> permitted\\n"", expr_op_type_to_string ( expr -> expr. op ) ) ; break ; case EXPR_UNARY_MINUS : log_err ( ctx, ""%s <S2SV_blank> of <S2SV_blank> boolean <S2SV_blank> values <S2SV_blank> not <S2SV_blank> permitted\\n"", expr_op_type_to_string ( expr -> expr.",0
1574,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1575,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_command karg ; <S2SV_ModEnd> int rc ; <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command <S2SV_ModStart> return rc ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1576,"<S2SV_ModStart> ] ; Image image <S2SV_ModEnd> ; MagickBooleanType status <S2SV_ModStart>, length, padding, value, version <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } image = AcquireImageList ( image ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image -> debug!= MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image_info -> debug!= MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image_info -> debug!= MagickFalse",0
1577,"<S2SV_ModStart> ; if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"", bandno ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"", bandno, cp -> refgrdwidth ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"", bandno, cp -> refgrdheight ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"", bandno, cp -> refgrdheight ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"", bandno ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"", bandno, cp -> refgrdwidth ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"", bandno, cp -> refgrdheight ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"", bandno, cp -> refgrdwidth ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number",0
1578,"<S2SV_ModStart> = '\\0' ; memcpy <S2SV_ModEnd> ( new_modes, <S2SV_ModStart> = '\\0' ; memcpy <S2SV_ModEnd> ( new_args,",0
1579,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - 191 ; vpx_reader <S2SV_ModEnd> ( r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> 1 ) ; vpx_reader <S2SV_ModEnd> ( r )",0
1580,"<S2SV_ModStart> * cert ; giterr_t <S2SV_ModEnd> is_valid ; if <S2SV_ModStart> error ; is_valid = error!= GIT_ECERTIFICATE ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) return error ; if ( error!= GIT_ECERTIFICATE ) { error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) return error ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) return error ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) return error ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t ->",0
1581,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1582,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> ) ; if <S2SV_ModEnd> (! cm <S2SV_ModStart> frame_parallel_decoding_mode ) ++ <S2SV_ModEnd> cm -> counts",0
1583,"<S2SV_ModStart>! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; if (! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; <S2SV_ModStart>! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; if ( prev ) { memcpy ( stream, prev, sizeof ( * stream ) ) ; prev -> next = stream ; } else { vpx_codec_err_t res ; res = vpx_codec_enc_config_default ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_timebase. den = 1000 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ;",0
1584,"<S2SV_ModStart> case ND_OPT_ADVERTISE_INTERVAL : if ( op -> nd_opt_len < 4 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""advertising"", op -> nd_opt_len ), op -> nd_opt_len ) ) ; break ; }",0
1585,<S2SV_ModStart> = 0 ; ( ( RE_AST * ) yr_malloc ( 1 ) ) ; if ( ( ( RE_AST * ) yr_malloc ( 1 ) ) == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( ( RE_AST * ) yr_malloc ( 2 ) ) ; if ( ( ( RE_AST * ) yr_malloc ( 1 ) ) == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( ( * re_ast ) -> root_node = yr_malloc ( 1 ) ) ) return ERROR_INSUFFICIENT_MEMORY ; if ( ( ( RE_AST * ) yr_malloc ( 1 ) ) == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( ( * re_ast ) -> flags = 0 ; ( ( RE_AST * ) yr_malloc ( 1 ) ) ) == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( ( * re_ast ) -> root_node = yr_malloc ( 1 ) ) ; if ( * re_ast ) -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY,0
1586,"<S2SV_ModStart> ) ) ; if ( iter -> var_expand_table ) { <S2SV_ModStart>, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } <S2SV_ModStart> 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found, <S2SV_blank> using <S2SV_blank> default <S2SV_blank> value <S2SV_blank> %s"", str_c ( path ), key -> key -> default_value ) ; key -> value = key -> key -> default_value ; } else if ( dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error )",0
1587,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) { kfree_skb ( skb ) ; return 0 ; } <S2SV_ModStart> A ] ; if ( nla -> nla_len > skb -> len ) { kfree_skb ( skb ) ; return 0 ; } <S2SV_ModEnd> nla = nla_find_nested,0
1588,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1589,"<S2SV_ModStart> ( ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost/mobile\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost/mobile\'>""",0
1590,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1591,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> alterror <S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> altwarning <S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> alterror <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1592,"<S2SV_ModStart> ; } } if ( av1 -> av1_config ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> dataLength ) ; gf_odf_av1_cfg_del ( av1_cfg ) ; }",0
1593,"<S2SV_ModStart> -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1594,"<S2SV_ModStart> r ] = '\\0' ; if ( r < 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; if ( r < 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; if ( r < 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; if ( r < 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; if ( r < 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; r = SC_TEST_RET ( card -> ctx, SC",0
1595,"<S2SV_ModStart> maxFrameNum ) ; dpb -> maxLongTermFrameIdx = NO_LONG_TERM_FRAME_INDICES ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; dpb -> maxRefFrames = MAX ( dpb -> maxRefFrames, 1 ) ; if ( noReordering ) dpb -> dpbSize = dpb -> maxRefFrames ; else dpb -> dpbSize = dpb -> maxRefFrames ;",0
1596,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ; if ( addrlen_in > OE_SSIZE_MAX ) addrlen_in = * addrlen ; if ( ret > ( int ) OE_SSIZE_MAX ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_in > addrlen_out ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( oe_syscall_getpeername_ocall ( & ret, sock -> host_fd, addr, addrlen_in, addrlen_out, addrlen_out )!= OE_OK ) { OE_RAISE_ERRNO ( OE_",0
1597,,1
1598,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) < 6 ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> TPDU <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; }",0
1599,"<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> ) ) { opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt = & opt_space ; } } else { opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ) ; if ( opt == NULL ) { opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt = & opt_space ; } } }",0
1600,"<S2SV_ModStart>, at ; size_t <S2SV_ModEnd> hdr_size ; size_t <S2SV_ModStart>, fsize ; size_t <S2SV_ModEnd> valign, hdr_size <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; struct cli_exe_section <S2SV_ModStart>, dsize, dll <S2SV_ModEnd> ) = NULL <S2SV_ModStart>, dsize, dll <S2SV_ModEnd> )!= CL_CLEAN <S2SV_ModStart>, dsize, dll <S2SV_ModEnd> )!= CL_CLEAN <S2SV_ModStart>, dsize, dll <S2SV_ModEnd> )!= CL_CLEAN <S2SV_ModStart>, dsize, dll <S2SV_ModEnd> )!= CL_ENULLARG <S2SV_ModStart> )!= CL_ENULLARG <S2SV_ModEnd> ) { cli_errmsg <S2SV_ModStart> ""cli_scanpe: <S2SV_blank> pe_json <S2SV_blank> == <S2SV_blank> NULL\\n"" ) ; return CL_ENULLARG ; } # if HAVE_JSON if ( cli_json_timeout_cycle_check ( ctx, & toval )!= CL_CLEAN ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> pe_json <S2SV_blank> == <S2SV_blank> NULL\\n"" ) ; return CL_ENULLARG ; } if ( cli_json_timeout_cycle_check ( ctx, & toval )!= CL_ENULLARG ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank>",0
1601,"<S2SV_ModStart> address ) { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ; while ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> 5 ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; }",0
1602,"<S2SV_ModStart> = 0 ; if ( t2p -> tiff_datasize < 0 ) { TIFFError ( TIFF2PDF_MODULE, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> in <S2SV_blank> the <S2SV_blank> PDF <S2SV_blank> file: <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } <S2SV_ModStart> if ( t2p -> tiff_datasize < 0 ) { TIFFError ( TIFF2PDF_MODULE, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> in <S2SV_blank> the <S2SV_blank> PDF <S2SV_blank> file: <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( t2p -> tiff_datasize < 0 ) { TIFFError ( TIFF2PDF_MODULE, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> in <S2SV_blank> the <S2SV_blank> PDF <S2SV_blank> file: <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; }",0
1603,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1604,"<S2SV_ModStart> pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( hello, F_CIB_CLIENTNAME, name ) ; free_xml ( hello ) ; free_xml ( hello ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, CRM_OP_REGISTER, NULL, NULL, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( hello, F_CIB_CLIENTNAME, name ) ; free_xml ( hello ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, CRM_OP_REGISTER, NULL, NULL, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; free_xml ( hello ) ; free",0
1605,"<S2SV_ModStart> = ubuf ; if (! access_ok ( VERIFY_WRITE, ubuf, size ) ) err = - EFAULT ; else if (! access_ok ( VERIFY_READ, ubuf, size ) ) err = - EFAULT ; else if (! access_ok ( VERIFY_WRITE, ubuf, size ) ) err = - EFAULT ; else if (! access_ok ( VERIFY_WRITE, ubuf, size ) ) err = - EFAULT ; else if (! access_ok ( VERIFY_WRITE, ubuf, size ) ) err = - EFAULT ; else if (! access_ok ( VERIFY_READ, ubuf, size ) ) err = - EFAULT ; else if (! access_ok ( VERIFY_WRITE, ubuf, size ) ) err = - EFAULT ; else if (! access_ok ( VERIFY_READ, ubuf, size ) ) err = - EFAULT ; else if (! access_ok ( VERIFY_WRITE, ubuf, size ) ) err = - EFAULT ; else if (! access_ok ( VERIFY_WRITE, ubuf, size ) ) err = - EFAULT ;",0
1606,"<S2SV_ModStart> >> 3 } ; int tmp_err, n, sr = 0, step_param = 3 ; int further_steps = ( MAX_MVSEARCH_STEPS - 1 ) - step_param ; <S2SV_ModEnd> int step_param = <S2SV_ModStart> bsize ] ; const int new_mv_mode_penalty = MIN ( cpi -> common. width, cpi -> common. height ) ; const int quart_frm = MIN ( cpi -> common. height, cpi -> common. width ) ; while ( ( sr << step_param ) < MAX_FULL_PEL_VAL ) ++ sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err",0
1607,"<S2SV_ModStart> ; if ( h -> size == 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; }",0
1608,<S2SV_ModStart> ; merged -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit == NOT_SET? parent -> reqbody_no_files_limit : child -> reqbody_no_files_limit ) ; merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit == NOT_SET? parent -> reqbody_no_files_limit : child -> reqbody_no_files_limit ) ; merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit == NOT_SET? parent -> reqbody_no_files_limit : child -> reqbody_no_files_limit ) ; merged -> resbody_access = ( child -> resbody_access == NOT_SET? parent -> resbody_access : child -> resbody_access ) ;,0
1609,"<S2SV_ModStart> ; if ( msg_sys -> msg_name ) memcpy ( msg_sys -> msg_name, msg_compat -> msg_name, sizeof ( msg_sys -> msg_name ) ), sizeof ( msg_sys -> msg_name ) ) memcpy ( msg_sys -> msg_name, sizeof ( msg_sys -> msg_name ) ) ; else memcpy ( msg_sys -> msg_name, sizeof ( msg_sys -> msg_name ) ) ; if ( msg_sys -> msg_name ) memcpy ( msg_sys -> msg_name, msg_sys -> msg_name, sizeof ( msg_sys -> msg_name ) ), sizeof ( msg_sys -> msg_namelen ) ) memcpy ( msg_sys -> msg_name, sizeof ( msg_sys -> msg_namelen ) ) ; else memcpy ( msg_sys -> msg_name, sizeof ( msg_sys -> msg_name ) ) ; if ( msg_sys -> msg_name ) memcpy ( msg_sys -> msg_name, msg_sys -> msg_namelen ) ) memcpy ( msg_sys -> msg_name",0
1610,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; else status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( exception!= ( ExceptionInfo * ) NULL ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
1611,"<S2SV_ModStart> 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0",0
1612,"<S2SV_ModStart> ) ) { sscanf ( option, "" <S2SV_blank> =\\t,"", & ovalue ) ; if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""content"" ) ) { httpSetTraceContentSize ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace",0
1613,"<S2SV_ModStart> user_data ) { if ( client == NULL ) { return ; } crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"", crm_str ( client -> name ), client -> id ) ; if ( client -> id == NULL ) { crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> the <S2SV_blank> hashtable"", client -> name ) ; crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> the <S2SV_blank> hashtable"", client -> name ) ; } <S2SV_ModEnd> free ( client <S2SV_ModStart> client ) ; crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client"" ) ; if ( cib_shutdown_flag ) { cib_shutdown ( 0 ) ; } return ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1614,"<S2SV_ModStart> * uv ; if ( thread -> twups == NULL ) { thread -> twups = NULL ; continue ; } <S2SV_ModEnd> thread -> twups <S2SV_ModStart> uv ) { if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; } else { markvalue ( g, uv -> v ) ; } <S2SV_ModEnd> } } <S2SV_null>",0
