,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,"<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen > skb -> len - frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; } unfrag_ip6hlen = min_t ( unsigned int, unfrag_ip6hlen, skb -> len - frag_hdr_sz ) ; if ( unlikely ( unfrag_ip6hlen > skb -> len - frag_hdr_sz - unfrag_ip6hlen ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; } unfrag_ip6hlen = min_t ( unsigned int, unfrag_ip6hlen, skb -> len - frag_hdr_sz ) ; if ( unlikely ( unfrag_ip6hlen > skb -> len - frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; }",0
2,"<S2SV_ModStart> ) ) { GF_Box * stco = ( GF_Box * ) gf_list_get ( writers, 0 ) ; GF_Box * stsc = ( GF_Box * ) gf_list_get ( writers, 1 ) ; gf_isom_box_del ( stco ) ; gf_isom_box_del ( stsc",0
3,<S2SV_ModStart> item ) { return <S2SV_ModEnd> cJSON_GetArrayItem ( array <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
4,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void __perf_sw_event ( <S2SV_ModStart>, event_id, <S2SV_ModEnd> & data,",0
5,"<S2SV_ModStart> { # ifndef _MSC_VER <S2SV_ModEnd> char buf [ <S2SV_ModStart> ( data ) ] ; # else char * buf = grub_malloc ( EXT2_BLOCK_SIZE ( data ) ) ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } leaf = grub_ext4_find_leaf ( data, buf, ( struct grub_ext4_extent * ) ( leaf + 1 ) ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; fileblock -= grub_le_to_cpu32 ( ext [ i ]. block ) ; if ( fileblock >= grub_le_to_cpu32 ( ext [ i ].",0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t * in, tran_low_t <S2SV_ModEnd> * out ) <S2SV_ModStart> out ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step4 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step5 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step7 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step4 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step4 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> t0, t1 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> t1, t2 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> t3 ; tran_high_t <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> t0, t1 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> t3 ; tran_high_t <S2SV_ModStart> 8 ] ; tran_high_",0
7,<S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { #,0
8,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> partial_frame ) { VP9_COMMON * const cm = & cpi -> common <S2SV_ModEnd> ; struct loopfilter <S2SV_ModStart> lf = & cpi <S2SV_ModEnd> -> lf ; <S2SV_ModStart> ; int best_err, <S2SV_ModEnd> filt_best ; int <S2SV_ModStart> ; int filt_direction <S2SV_ModEnd> ; int filt_mid <S2SV_ModStart> / 4 ; if ( cpi -> twopass. section_intra_rating < 20 ) bias = bias * cpi -> twopass. section_intra_rating / 20 ; if ( cpi -> twopass. section_intra_rating < 20 ) bias = ( best_err >> ( 15 - ( cpi -> twopass. section_intra_rating / 20 ) ) ) * filter_step ; if ( cpi -> twopass. section_intra_rating < 20 ) bias = bias * cpi -> twopass. section_intra_rating / 20 ; <S2SV_ModStart> 0 ) { if ( cpi -> twopass. section_intra_rating < 20 ) bias = bias * cpi -> twopass. section_in",0
9,"<S2SV_ModStart> left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 2, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",0
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> i ] ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, mv_class == MV_CLASS_0? mvcomp -> class0_fp : mvcomp -> fp ) ; vpx_write ( w, mv_class == MV_CLASS_0? mvcomp -> class0_hp : mvcomp -> hp ) ; vpx_write_token ( w, vpx_mv_class0_tree, mvcomp -> class0, & mv_class0_encodings [ d ] ) ; vpx_write ( w, mv_class == MV_CLASS_0? mvcomp -> class0_fp : mvcomp -> fp ) ; vpx_write ( w, mv_class == MV_CLASS_0? mvcomp -> class0_hp : mvcomp -> hp ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; },0
12,"<S2SV_ModStart> ) dat ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> (",0
13,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct key * construct_get_dest_keyring ( struct key * <S2SV_ModStart> * authkey ; if ( dest_keyring ) { <S2SV_ModStart> dest_keyring ) ; } else { key_put ( dest_keyring ) ; } <S2SV_ModEnd> switch ( cred <S2SV_ModStart> KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : if ( cred -> request_key_auth ) { authkey = cred -> request_key_auth ; up_read ( & authkey -> sem ) ; dest_keyring = key_get ( authkey -> dest_keyring ) ; if ( dest_keyring ) break ; } <S2SV_ModEnd> case KEY_REQKEY_DEFL_GROUP_KEYRING : <S2SV_ModStart> KEY_REQKEY_DEFL_USER_SESSION_KEYRING : dest_keyring = key_get ( cred -> user -> session_keyring ) ; break ; case KEY_REQKEY_DEFL_GROUP_SESSION_KEYRING : dest_keyring = key_get ( cred -> user -> group_keyring ) ; if ( dest_keyring ),0
14,<S2SV_ModStart> = create_spnego_ctx ( ) ; if ( sc == NULL ) return GSS_S_FAILURE ;,0
15,<S2SV_ModStart> ; tm = g_time_sub ( <S2SV_ModEnd> t ) ;,0
16,"<S2SV_ModStart> length ) ; if ( strlen ( password ) > AUTH_PASS_LEN ) { printf ( ""Password <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d) <S2SV_blank> (%d)"", length, AUTH_PASS_LEN ) ; return ; }",0
17,"<S2SV_ModStart> ; if (! e ) goto not_found ; r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; r = sd_bus_call_method ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_bus_message_read ( reply, ""u"", & mapped ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_bus_message_read ( reply",0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> inode, CAP_CHOWN <S2SV_ModEnd> ) ) return <S2SV_ModStart> inode, CAP_FSETID ) ) attr -> ia_mode &= ~ S_ISGID ; if ( ia_valid & ATTR_MODE ) { if (! inode_owner_or_capable ( inode ) ) return - EPERM ; if (! in_group_p ( ( ia_valid & ATTR_GID )? attr -> ia_gid : inode -> i_gid ) &&! capable_wrt_inode_gid ( inode, CAP_FSETID ) ) return - EPERM ; } if ( ia_valid & ( ATTR_MTIME_SET | ATTR_ATIME_SET | ATTR_TIMES_SET ) ) { if (! inode_owner_or_capable ( inode ) ) return - EPERM ; if (! in_group_p ( ( ia_valid & ATTR_MODE )? attr -> ia_mode : inode -> i_mode ) &&! capable_wrt_inode_",0
19,"<S2SV_ModStart> = 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP",0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool detect_transition_to_still ( TWO_PASS * twopass, const FIRSTPASS_STATS * stats, int frame_interval, int still_interval, double loop_decay_rate, double last_decay_rate ) { if ( frame_interval > MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 ) frame_interval = MIN_GF_INTERVAL ; if ( frame_interval < MIN_GF_INTERVAL ) frame_interval = MIN_GF_INTERVAL ; const FIRSTPASS_STATS * position = twopass -> stats_in ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; <S2SV_ModEnd> if ( tmp_next_frame <S2SV_ModStart> pcnt_inter - tmp_next_frame. <S2SV_ModEnd> pcnt_motion < 0.999 <S2SV_ModStart> pcnt_motion < 0.999 ) break ; } <S2SV_ModEnd> reset_fpf_position ( twopass <S2SV_ModStart> position ) ; <S2SV_ModEnd> return trans_to",0
21,"<S2SV_ModStart> ; if ( unlikely ( offset + size > i_size_read ( inode ) ) ) { ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; } io -> flag = 0 ; ret = ext4_commit_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> commit <S2SV_blank> unwritten"" ""extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ;",0
22,<S2SV_ModStart> alg ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ),0
23,"<S2SV_ModStart> = GIT_PKT_NG ; if ( strlen ( line ) > len ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; * out = ( git_pkt * ) pkt ; return - 1 ; } <S2SV_ModStart> += 3 ; if ( strlen ( line ) > len ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; * out = ( git_pkt * ) pkt ; return - 1 ; } <S2SV_ModEnd> len = ptr <S2SV_ModStart> + 1 ; if ( strlen ( line ) > len ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; * out = ( git_pkt * ) pkt ; return - 1 ; } <S2SV_ModEnd> len = ptr <S2SV_ModStart> + 1 ; if ( strlen ( line ) > len ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; * out = ( git_pkt * ) pkt ; return - 1 ; }",0
24,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { return ; } <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
25,"<S2SV_ModStart> num_video ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num_video ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num_video ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num_video ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num_video ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num_video ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num_video ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks",0
26,"<S2SV_ModStart> } return mount_entry_on_generic <S2SV_ModEnd> ( mntent,",0
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
28,<S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ),0
29,<S2SV_ModStart> ) ) ; if ( ret ) { btif_storage_del_bonded_device ( remote_bd_addr ) ; btif_storage_free_bonded_devices ( remote_bd_addr ) ; return BT_STATUS_FAIL ; } ret = btif_config_flush ( ) ; if ( ret ) { btif_storage_del_bonded_devices ( remote_bd_addr ) ; btif_storage_free_bonded_devices ( remote_bd_addr ) ; btif_storage_del_bonded_devices ( remote_bd_addr ) ; btif_storage_free_bonded_devices ( remote_bd_addr ) ; return BT_STATUS_FAIL ; } ret = btif_config_flush ( ) ; if ( ret ) { btif_storage_del_bonded_devices ( remote_bd_addr ) ; btif_storage_free_bonded_devices ( remote_bd_addr ) ; return BT_STATUS_FAIL ; },0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map <S2SV_ModEnd> ; if ( <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; for ( map = iface -> enc. cfg_maps ; map -> usage >= 0 ; map ++ ) { if (! ( map -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( map -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INVALID_PARAM ; else if (! ( map -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INVALID_PARAM ; else if (! ( map -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( map -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INVALID_PARAM ; else if (! ( map -> caps & VPX_CODEC_CAP_ENCODER ) ),0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
33,"<S2SV_ModStart> ; if ( imp_sth -> num_rows > imp_sth -> num_cols ) { do_error ( sth, JW_ERR_SEQUENCE, ""number <S2SV_blank> of <S2SV_blank> rows <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", imp_sth -> num_cols, imp_sth -> num_cols ) ; return Nullav ; }",0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXNDL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXNDH, MSB ( ENC28J60_TX",0
35,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_expr ( o ->",0
36,"<S2SV_ModStart> ( page && ( file_access <S2SV_ModEnd> ( page, <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0",0
37,<S2SV_ModStart> flag ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cm -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { <S2SV_ModStart>.5 ) ; # endif <S2SV_ModStart> int mb_rows = ( cm -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH )? source -> y_width : source -> y_height ; int mb_cols = ( cm -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH )? source -> y_height : source -> y_width ; int mb_cols = ( cm -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH )? source -> y_height : ( cm -> cur_buf -> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
38,"<S2SV_ModStart> void ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; mb2_cache_entry * ce ; ce = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS ) ; if (! ce ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } error = mb2_cache_entry_insert ( ce, bh -> b_bdev, bh -> b_blocknr, hash ) ; if ( error <S2SV_ModEnd> ) { ea_bdebug <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } <S2SV_null>",0
39,"<S2SV_ModStart> ) ) ; if (! r_socket_http_answer ( s, code, rlen ) ) { free ( uri ) ; return NULL ; } r_socket_printf ( s, ""GET <S2SV_blank> /%s <S2SV_blank> HTTP/1.0\\r\\n"" ""User-Agent: <S2SV_blank> radare2 <S2SV_blank> "" R2_VERSION ""\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n"" ""Content-Length: <S2SV_blank> %i\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"", path, host ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s, ""GET <S2SV_blank> /%s <S2SV_blank> HTTP/1.0\\r\\n"" ""User-Agent: <S2SV_blank> radare2 <S2SV_blank> "" R2_VERSION ""\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n"" ""Content-Length: <S2SV_blank> %i\\r\\n"", path, host ) ; free ( uri ) ;",0
40,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct ip_options_rcu <S2SV_ModEnd> * ip_options_get_from_user ( <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> if ( optlen && copy_from_user ( & opt -> __data, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } <S2SV_ModEnd> return ip_options_get_finish (",0
41,"<S2SV_ModStart> ; trunc : if (! ND_TTEST ( * dio ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; goto trunc ; } <S2SV_ModStart> : if (! ND_TTEST ( * dio ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; goto trunc ; } <S2SV_ModStart> : if (! ND_TTEST ( * dio ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; goto trunc ; } <S2SV_ModStart> : if (! ND_TTEST ( * dio ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; goto trunc ; } <S2SV_ModStart> : if (! ND_TTEST ( * dio ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; goto trunc ; }",0
42,"<S2SV_ModStart> } else { if ( ( * varp ) [ 0 ] == NUL ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; else if ( ( * varp ) [ 0 ] == NUL ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( ( * varp ) [ 0 ] == NUL ) errmsg = ( char_u * ) N_ ( ""E532: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( ( * varp ) [ 0 ] == NUL ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( ( * varp ) [ 0 ] == NUL ) errmsg = ( char_u * ) N_ ( ""E532: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if (",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret ) goto out ; } break ; case ACL_TYPE_DEFAULT : if (! S_ISDIR ( inode -> i_mode ) ) { ret = - EINVAL ; goto out ; } name = XATTR_NAME_POSIX_ACL_DEFAULT ; value = kmalloc ( size, GFP_NOFS ) ; if (! value ) { ret = - ENOMEM ; goto out_free ; } ret = posix_acl_to_xattr ( & init_user_ns, acl, value, size ) ; if ( ret < 0 ) goto out_free ; } if ( new_mode!= old_mode ) { newattrs. ia_mode = new_mode ; newattrs. ia_valid = ATTR_MODE ; ret = __ceph_setattr ( inode, name, value, size, 0 ) ; if ( ret ) goto out_free ; } if ( new_mode!= old_mode ) { newattrs. ia_mode = new_mode ; newattrs. ia_valid = ATTR_MODE ; ret",0
44,"<S2SV_ModStart> size_t size ; if ( width <= 0 || height <= 0 ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) { goto error ; } if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) {",0
45,<S2SV_ModStart> flags & FLAG_MATCHED <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_LAST_MATCHED <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_LAST_MATCHED <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_LAST_MATCHED <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_MATCHED <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE,0
46,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart>, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_op_hdr ( xdr, OP_GETACL ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen <S2SV_ModStart> ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen <S2SV_ModStart> ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen <S2SV_ModStart>",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart>, "":"", & perms ) ; if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else { uid = userToID ( owner ) ; } } if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else { gid = groupToID ( group ) ; } } if ( perms && smatch ( owner, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = 0 ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; }",0
49,"<S2SV_ModStart> NULL ; # if CONFIG_MEM_MANAGER int number_aau ; if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ) ; <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr",0
50,"<S2SV_ModStart> int res ; <S2SV_ModEnd> long long export_index_table <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) <S2SV_ModEnd> ] ; res <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) <S2SV_ModEnd> ] ; res <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) ] ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table",0
51,<S2SV_ModStart> HASH_DISABLED ; } <S2SV_ModEnd> return apr_psprintf (,0
52,"<S2SV_ModStart> = 0 ; # if CONFIG_VP8_ENCODER if ( strcmp ( global -> codec -> name, ""vp8"" ) == 0 ) { ctrl_args = vp8_args ; ctrl_args_map = vp8_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif <S2SV_ModStart> } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & arg, & fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm = 0 ; } else if ( arg_match ( & arg, & threads, argi ) ) { config -> cfg. g_threads = arg_parse_uint ( & arg ) ; } else if ( arg_match ( & arg, & profile, argi )",0
53,"<S2SV_ModStart> if ( verify_checks <S2SV_ModEnd> ( c, <S2SV_ModStart> callback_ctx ) ) { SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if (! sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } if (! c -> opt -> option. client || c -> opt -> protocol ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } else { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; }",0
54,"<S2SV_ModStart> ; if ( fixed_length < AT91_AES_BLOCK_SIZE_BYTE || fixed_length > AT91_AES_BLOCK_SIZE_MAX ) { rc = - 1 ; goto exit ; } if ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) goto exit ; } if ( at91_aes_cmac ( data_length, data, fixed_length, key_size, cipher_key, iv ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cmac ( data_length, data, fixed_length, key_size, cipher_key, iv ) ) { rc = - 1 ; goto exit ; } <S2SV_ModEnd> if ( at91_aes_cbc",0
55,"<S2SV_ModStart> cpi ) { # ifdef DISABLE_RC_LONG_TERM_MEM const uint64_t bits_used = cpi -> rc. this_frame_target ; # else const uint64_t bits_used = cpi -> rc. projected_frame_size ; # endif <S2SV_ModStart> cpi -> twopass. bits_left -= bits_used ; cpi -> twopass. bits_left = MAX ( cpi -> twopass. bits_left, 0 ) ; if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. kf_group_bits += cpi -> rc. this_frame_target - bits_used ; } else { cpi -> twopass. kf_group_bits += cpi -> rc. this_frame_target - bits_used ; } cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
56,"<S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> do { image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> num_altsetting < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> interface <S2SV_blank> number\\n"" ) ; error = - ENODEV ; goto err_free_devs ; } dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting",0
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> = ""/etc"" ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> dir ) ) ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> dir ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> dir ) ) ; TEMP_FAILURE_RETRY (",0
60,<S2SV_ModStart> = value ; if ( ps_sps -> i1_sps_valid ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ret!= ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ret!= ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ret!= ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ) IHEVCD_INVALID_HEADER ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ret!= ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; },0
61,"<S2SV_ModStart> ] ) ; if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ] ) ; if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ] ) ; if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ] ) ; if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ] ) ; if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ] ) ; if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ] ) ; if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
62,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp9_setup_dst_planes ( MACROBLOCKD <S2SV_ModStart> ) { uint8_t <S2SV_ModEnd> * const buffers <S2SV_ModStart> src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_x, pd -> subsampling_y ) ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> == READ ) { <S2SV_ModStart> = ocfs2_get_block ; } else { <S2SV_ModStart> = ocfs2_dio_get_block ; },0
65,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %s\\n"" <S2SV_ModEnd>, def,",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> ; char * str <S2SV_ModEnd> ; PyCompilerFlags cf <S2SV_ModStart> ; PyObject * o <S2SV_ModEnd> ; Py_ssize_t len <S2SV_ModStart> expr_end == ':' ) ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = PyUnicode_GET_LENGTH ( o ) ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! Py_UNICODE_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } } cf. cf_flags = PyCF_ONLY_AST ; str [ 0 ] = '(' ; memcpy ( str + 1, expr_start, len ) ; Py_DECREF ( str ) ; if ( all_whitespace ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL",0
67,"<S2SV_ModStart> string ) { while ( c && cJSON_strcasecmp ( c -> string, string ) ) c = c -> next ;",0
68,<S2SV_ModStart> size ) ; <S2SV_ModEnd> px -> ft,0
69,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> l2tp_call_errors_print ( netdissect_options <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,"<S2SV_ModStart> int i ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; const uint8_t * const buffers [ 4 ] = { src -> y_stride, src -> uv_stride, src -> v_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_y, pd ->",0
72,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> for ( iov,0
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> user ) { if (! user ) return - EINVAL ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
75,"<S2SV_ModStart> ; int sl = cursor -> seen + 1 ; int limit = 0 ; if ( limit > 0 ) { mm = mongo_message_create ( 16 + 4 + 4 + 4 + 4 + 8, 0, 0, MONGO_OP_GET_MORE ) ; data = & mm -> data ; data = mongo_data_append32 ( data, & ZERO ) ; data = mongo_data_append ( data, cursor -> ns, sl ) ; data = mongo_data_append32 ( data, & limit ) ; data = mongo_data_append32 ( data, & ZERO ) ; data = mongo_data_append ( data, cursor -> reply -> fields. cursorID ) ; data = mongo_data_append64 ( data, & cursor -> reply -> fields. cursorID ) ; if ( res!= MONGO_OK ) { mongo_cursor_destroy ( cursor ) ; return MONGO_ERROR ; } res = mongo_read_response ( cursor -> conn, & ( cursor -> reply ) ) ; if ( res!= MONGO_OK ) { mongo_cursor_destroy ( cursor ) ; return MONGO_ERROR ; }",0
76,"<S2SV_ModStart> * for_ch ; int <S2SV_ModEnd> is_async = 0 <S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } <S2SV_ModEnd> if ( is_async <S2SV_ModStart> ; if ( NCH ( n ) == ( 3 + is_async ) ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 3 ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( first, expression, NULL, is_async, c -> c_arena ) ; else comp = comprehension ( Tuple ( t, Store, first -> lineno, first ->",0
77,<S2SV_ModStart> NULL ; } <S2SV_ModEnd> dst_state -> curframe,0
78,"<S2SV_ModStart> void write_mb_modes_kf ( <S2SV_ModEnd> const VP9_COMP * <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> w ) { const MACROBLOCKD * const xd = & cpi -> mb. e_mbd ; const <S2SV_ModStart> 0 ] ; const MODE_INFO * const above_mi = xd -> above_mi ; const MODE_INFO * const left_mi = xd -> left_mi ; const MB_MODE_INFO * const mbmi = mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ] ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ] ; for ( idx = 0 ; idx < num_4x4_w ; idx += num_4x4_",0
79,"<S2SV_ModStart> maxn ) { # ifdef DEBUG fprintf ( stderr, ""%d:\\tACTION[%3.3d]: <S2SV_blank> %s\\n"", n, actionName ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) ) ; # endif <S2SV_ModEnd> switch ( actions <S2SV_ModStart>. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; case SWFACTION_GOTOFRAME : decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME2 : decompileGOTOFRAME2 ( n, actions, maxn, 0 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETPROPERTY : decompileGETPROPERTY ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn )",0
80,<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & prep -> pp_n ) ; <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> char * ) * ( 2 + pTable -> nModuleArg ) ; sqlite3_int64 * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return 0 ; }",0
83,<S2SV_ModStart> 1 ) { if ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ]!= 0 ) { ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] = 0 ; } <S2SV_ModStart> 1 ) { if ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ]!= 0 ) { ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] = 0 ; } <S2SV_ModStart> 1 ) { if ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ]!= 0 ) { ptr,0
84,<S2SV_ModStart> -> dmin ; if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc,0
85,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_data <S2SV_ModEnd> * bfqd, <S2SV_ModStart> bfqd = bfqq <S2SV_ModEnd> -> bfqd ; <S2SV_ModStart> unsigned long flags ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else if ( bfqq -> queued [ 0 ] == 0 && bfqq -> queued [ 1 ] == 0 ) reason = BFQQE_TOO_IDLE ; else goto schedule_dispatch ;",0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,"<S2SV_ModStart> + x > diffBlock <S2SV_ModEnd> + diffBlockLength || <S2SV_ModStart> NULL ; } if ( diffPtr + x > <S2SV_ModStart> + diffBlockLength || extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } <S2SV_ModStart> + x > diffBlock <S2SV_ModEnd> + diffBlockLength || <S2SV_ModStart> + diffBlockLength || extraPtr + y <S2SV_ModEnd> > extraBlock + <S2SV_ModStart> extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } <S2SV_ModStart> extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } <S2SV_ModStart> + x > diffBlock <S2SV_ModEnd> + diffBlockLength || <S2SV_ModStart> + diffBlockLength || extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
89,"<S2SV_ModStart> pktopts ) ; rcu_read_lock ( ) ; <S2SV_ModStart>, fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
90,"<S2SV_ModStart> ; if ( MagickMax ( number_pixels, number_data_bands ) > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( MagickMax ( number_pixels, number_data_bands ) > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( MagickMax ( number_pixels, number_data_bands, number_data_bands ) > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( MagickMax ( number_pixels, number_data_bands ) > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( MagickMax ( number_data_bands, number_data_bands ) > MagickMax ( number_data_bands, number_data_bands ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageData",0
91,<S2SV_ModStart> data ) { vpx_codec_priv_enc_mr_cfg_t * priv_enc_mr_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) data ; if ( priv_enc_mr_cfg -> flags & VPX_CODEC_PRIV_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCODER_ENCOD,0
92,"<S2SV_ModStart> int _Unpickler_ResizeMemoList ( UnpicklerObject <S2SV_ModEnd> * self, <S2SV_ModStart> new_size ) { <S2SV_ModEnd> assert ( new_size",0
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
94,"<S2SV_ModStart>, refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], ref_frame_sign_bias",0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,<S2SV_ModStart> msicap ; pci_populate_msicap <S2SV_ModEnd> ( & msicap,0
98,"<S2SV_ModStart> REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( ( cmd -> flags & REDIS_CMD_DENYOOM ) && zmalloc_used_memory ( ) > server. maxmemory ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( ( cmd -> flags & REDIS_CMD_DENYOOM ) && zmalloc_used_memory ( ) > server. maxmemory ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( ( cmd -> flags & REDIS_CMD_DENYOOM ) && zmalloc_used_memory ( ) > server. maxmemory ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'max",0
99,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( & ctx -> vp8_cfg, 0, sizeof ( ctx -> vp8_cfg ) ) ; if ( ( cfg -> g_w!= ctx -> cfg. g_w ) || ( cfg -> g_h!= ctx -> cfg. g_h ) ) { ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; return VPX_CODEC_ERROR ; } if ( ( cfg -> g_w!= ctx -> cfg. g_w ) || ( cfg -> g_h!= ctx -> cfg. g_h ) ) { ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; return VPX_CODEC_ERROR ; } if ( ( cfg -> g_w!= ctx -> cfg. g_w ) || ( cfg -> g_h!= ctx -> cfg. g_h ) ) { ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; return VPX_CODEC_ERROR ; }",0
100,<S2SV_ModStart> cpi ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) cpi -> cur_buf -> flags |= YV12_FLAG_HIGHBITDEPTH ; # else cpi -> cur_buf -> flags &= ~ YV12_FLAG_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) cpi -> cur_buf -> flags &= ~ YV12_FLAG_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) cpi -> cur_buf -> flags |= YV12_FLAG_HIGHBITDEPTH ; # else cpi -> cur_buf -> flags &= ~ YV12_FLAG_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) cpi -> cur_buf -> flags &= ~ YV12_FLAG_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) cpi -> cur_buf -> flags |= YV12_FLAG_HIGH,0
101,"<S2SV_ModStart> info -> si_code < 0 <S2SV_ModEnd> ) return - <S2SV_ModStart> - EPERM ; if ( info -> si_code >= 0 && info -> si_signo >= sig ) { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } if ( info -> si_code >= 0 && info -> si_signo >= sig ) { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } info -> si_code = 0 ; if ( info -> si_code >= 0 && info -> si_signo >= sig ) { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } if ( info -> si_code >= 0 && info -> si_code >= 0 && info -> si_signo >= sig ) { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; }",0
102,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> size > ( u32 ) ptr -> size - 8 ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR ) ; return GF_ISOM_INVALID_FILE ; } <S2SV_ModStart> tmp_strsize ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR ) ) ; return GF_ISOM_INVALID_FILE ; } <S2SV_ModStart> tmp_strsize ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_",0
103,<S2SV_ModStart> alg_priv ) ; if (! ctx -> iface -> enc. get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> iface -> enc. caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> iface -> enc. caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> iface -> enc. caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> iface -> enc. caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> iface -> enc. get_glob_hdrs ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> iface -> enc. get_glob_,0
104,"<S2SV_ModStart> <S2SV_null> <S2SV_null> void nfs4_state_set_mode_locked ( fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> == mode ) return ; if ( ( fmode & FMODE_WRITE )!= ( state -> state & FMODE_WRITE ) ) { if (! list_empty ( & state -> open_states ) ) list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } <S2SV_ModEnd> state -> state <S2SV_ModStart> = mode ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
105,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, pwp_image -> columns, pwp_image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, pwp_image -> columns, pwp_image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, pwp_image -> columns, pwp_image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent""",0
106,"<S2SV_ModStart> 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { return 0 ; } memcpy ( elem. in_sg [ 0 ]. iov_base, buf, len ) ; virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return len ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { memcpy ( elem. in_sg [ 0 ]. iov_base, buf, len ) ; return 0 ; } memcpy ( elem. in_sg [ 0 ]. iov_base, buf, len ) ; virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return len ;",0
107,"<S2SV_ModStart> ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( int ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( int ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) <S2SV_ModEnd> ) ; }",0
108,"<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == BIT_PLANAR ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == BIT_LINE ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; }",0
109,"<S2SV_ModStart> 1 ) ; } ND_TCHECK ( * p ) ; if ( length < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( - 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( - 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; if ( length < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( - 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( - 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; if ( length < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( - 1 ) ; }",0
110,"<S2SV_ModStart> { const char * name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; } else { puts ( ""+ <S2SV_blank> "" ) ; } }",0
111,"<S2SV_ModStart> ; if ( kfifo_alloc ( & state -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL ) ) return - ENOMEM ; state -> dev = dev ; sd = & state -> sd ; v4l2_subdev_init ( sd, & cx23888_ir_controller_ops ) ; v4l2_set_subdevdata ( sd, state ) ; ret = v4l2_device_register_subdev ( & dev -> v4l2_dev, sd ) ; if ( ret == 0 ) { cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> rx_params_lock ) ; default_params = default_rx_params ; v4l2_subdev_call ( sd, ir, rx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ; mutex_init ( & state -> tx_params_lock ) ; mutex_init ( & state -> tx_params_",0
112,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> cfg, vpx_codec_flags_t <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX",0
113,"<S2SV_ModStart> ~ TJA1100_CONFIG1_MII_MODE ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1",0
114,<S2SV_ModStart> icmp_param ) ; if ( icmp_pointers [ type ]. code == code ) { struct icmphdr iph ; iph = ip_hdr ( skb_in ) ; if ( iph -> protocol == IPPROTO_ICMP ) { iph = ip_hdr ( skb_in ) ; itp = icmp_pointers [ type ]. itp ; if ( itp == NULL || * itp > NR_ICMP_TYPES || icmp_pointers [ * itp ]. error > NR_ICMP_TYPES || icmp_pointers [ * itp ]. error > NR_ICMP_TYPES || icmp_pointers [ * itp ]. error > NR_ICMP_TYPES ) { if ( icmp_pointers [ * itp ]. error > NR_ICMP_TYPES || icmp_pointers [ * itp ]. error > NR_ICMP_TYPES || icmp_pointers [ * itp ]. error > NR_ICMP_TYPES || icmp_pointers [ * itp ]. error > NR_ICMP_TYPES,0
115,<S2SV_ModStart> else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,<S2SV_ModStart> -> open_flags ) ; if ( arg -> fmode & FMODE_READ ) { WRITE32 ( arg -> fmode ) ; if ( arg -> fmode & FMODE_WRITE ) { WRITE32 ( arg -> fmode ) ; if ( arg -> fmode & FMODE_WRITE ) { WRITE32 ( arg -> fmode ) ; if ( arg -> fmode & FMODE_WRITE ) { WRITE32 ( arg -> fmode ) ; if ( arg -> fmode & FMODE_WRITE ) { if ( arg -> fmode & FMODE_WRITE ) { WRITE32 ( arg -> fmode ) ; if ( arg -> fmode & FMODE_WRITE ) { WRITE32 ( arg -> fmode ) ; if ( arg -> fmode & FMODE_WRITE ) { WRITE32 ( arg -> fmode ) ; if ( arg -> fmode & FMODE_WRITE ) { WRITE32 ( arg -> fmode ) ; if ( arg -> fmode & FMODE_WRITE ) { if ( arg -> fmode & FMODE_WRITE ) { WRITE32 ( arg -> fmode ) ; if ( arg -> fmode & FMODE_WRITE ) { WRITE32 ( arg -> fmode ) ; },0
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int modify_bar_registration ( <S2SV_ModStart> ) ; return <S2SV_ModEnd> 0 ; } <S2SV_ModStart> break ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
119,<S2SV_ModStart> : case 0x0a : case 0x0b : case 0x0c : case 0x0f : <S2SV_ModStart> : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case,0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,"<S2SV_ModStart> goto trunc ; if ( ( u_int ) lshp -> ls_length < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
122,<S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; opipe -> nrbufs ++ ; ibuf -> offset += ibuf -> len ; obuf -> len = len ; opipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; } * obuf = * obuf ; obuf -> len = len ; opipe -> nrbufs ++ ; ipipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; opipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ) ; ibuf -> ops = NULL ; ipipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; opipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ),0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd =,0
125,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_tree <S2SV_ModEnd> prob = probs <S2SV_ModStart> b ) ; vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,"<S2SV_ModStart> & 0xffff ; if ( synth_devs [ dev ] -> load_patch ) err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; else err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ; if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 2 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } if ( ev_code >= 128 ) { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 4 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } ev_size = 8 ; if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return count - c ; } if ( copy_from_user ( ( char * ) event_rec, &",0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 1 ] ; tran_high_t <S2SV_ModEnd> x11 = input <S2SV_ModStart> 2 ] ; tran_high_t <S2SV_ModEnd> x12 = input <S2SV_ModStart> 3 ] ; tran_high_t <S2SV_ModEnd> x15 =",0
129,<S2SV_ModStart> mask ) ; <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> ; # endif <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> ; # endif <S2SV_ModEnd> flags |= HAS_NEON,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( VP9_COMP <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> BLOCK_SIZE bsize ) { <S2SV_ModEnd> const VP9_COMMON * <S2SV_ModStart> ; bh = num_8x8_blocks_wide_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ] ; if ( bw == bs && bh == bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count",0
132,<S2SV_ModStart> ; if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) ) { if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) ) { if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) ) { if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) ) break ; } else { if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) ) break ; } } else { if ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) { if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) ) { if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) ) { if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) ) break ; } else { if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) ) break ; } } },0
133,"<S2SV_ModStart> = 0 ; if (! ( mpd -> b_state & ( 1 << BH_Mapped ) ) ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> at <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks <S2SV_blank> %zd <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %d\\n"", mpd -> inode -> i_ino, ext4_count_free_blocks ( mpd -> inode -> i_sb ) ) ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> at <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks <S2SV_blank> %zd <S2SV_blank> with <S2SV_blank> "" ""error <S2SV_blank> %d\\n"", mpd -> inode -> i_blkbits, err ) ; mpd -> retval = err ; return 0 ; }",0
134,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( oe_syscall_getaddrinfo_read_ocall <S2SV_ModStart>, handle, <S2SV_ModEnd> & p -> <S2SV_ModStart> & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & p -> ai_addrlen, NULL, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval == - 1 || oe_errno == OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval == - 1 || oe_errno == OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval == - 1 || oe_errno == OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { int ret ; ret = usb_control_msg ( pegasus -> usb, 0, PEGASUS_REQ_SET_REGS, PEGASUS_REQT_WRITE, 0, indx, data, size, 100 ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
138,"<S2SV_ModStart> asdl_seq * body <S2SV_ModEnd>, PyArena * <S2SV_ModStart> ; return p <S2SV_ModEnd> ; } <S2SV_null>",0
139,"<S2SV_ModStart> src, int64_t <S2SV_ModEnd> ts_start, int64_t <S2SV_ModStart> >> 4 ; int active_map = 0 ; <S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { for ( ; col < mb_cols ; ++ col ) { if (! active_map [ active_end ] ) break ; } vp9_copy_and_extend_frame_with_rect ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; active_map += mb_cols ; } } else { for ( row = 0 ; row < mb_rows ; ++ row ) { for ( ; col < mb_cols ; ++ col ) { if (! active_map [ col ] ) break ; } vp9_copy_and_extend_frame_with_rect ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ), ( active_end - col ) <<",0
140,"<S2SV_ModStart>. sharpness ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; lf -> sharpness_level = clamp ( lf -> sharpness_level, min_filter_level, max_filter_level ) ; <S2SV_ModStart> else { search_filter_level <S2SV_ModEnd> ( sd,",0
141,<S2SV_ModStart> } break ; case BTA_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; status = btif_storage_remove_adapter_property ( & bdname ) ; if ( status == BT_STATUS_SUCCESS ) { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } # if defined ( BLE_INCLUDED ) && ( BLE_INCLUDED == TRUE ) ) BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_ENABLED ) ; if ( status == BT_STATUS_SUCCESS ) { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } # if defined ( BLE_INCLUDED ) && ( BLE_INCLUDED == TRUE ) ) BTA_DmBleConfigLocalPriv,0
142,"<S2SV_ModStart> : { int a = getnum ( fmt, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } case '!' : { int a = getnum ( fmt, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } default : { const char * msg = luaL_pushfstring ( L, ""invalid <S2SV_blank> format <S2SV_blank> option <S2SV_blank> \'%c\'"", opt ) ; luaL_argerror ( L, 1, msg ) ; } }",0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( <S2SV_ModStart> dec. decode ( & ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_",0
145,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int isofs_read_inode (,0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> k ) ; }",0
147,<S2SV_ModStart> self ) { if ( self -> dict ),0
148,"<S2SV_ModStart> < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; } <S2SV_ModEnd> return a ;",0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == Py_None ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_Format ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> list, <S2SV_blank> not <S2SV_blank> a <S2SV_blank> %.200s"", tmp -> ob_type -> tp_name ) ; goto failed ; } len = PyList_GET_SIZE ( tmp ) ; if ( len!= PyList_GET_SIZE ( tmp ) ) { PyErr_SetString ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""type",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> msg_sys -> msg_flags <S2SV_ModStart> msg_flags & ( MSG_CMSG_COMPAT | MSG_TRUNC ) ) { err = compat_verify_iovec ( msg_sys, iov, & addr, VERIFY_WRITE ) ; if ( err < 0 ) goto out_freeiov ; } else { err = <S2SV_ModEnd> verify_iovec ( msg_sys <S2SV_ModStart> msg_control ; } <S2SV_ModEnd> total_len = err <S2SV_ModStart> ( err < 0 <S2SV_ModEnd> ) goto out_freeiov",0
152,<S2SV_ModStart> ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * gfs2_inode = GFS2_I ( inode ) ; struct gfs2_meta_inode * gfs2_inode = GFS2_I ( inode ) ; struct gfs2_meta_inode * gfs2_inode = GFS2_I ( inode ) ; struct gfs2_meta_inode * gfs2_inode = GFS2_I ( inode ) ; struct gfs2_meta_inode * gfs2_inode = GFS2_I ( inode ) ; struct gfs2_meta_inode * gfs2_inode = GFS2_I ( inode ) ; struct gfs2_meta_inode * gfs2_inode = GFS2_I ( inode ) ;,0
153,"<S2SV_ModStart> -> codec -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next ) ; if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; if ( input -> use_i420 ) fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; if ( input -> use_i420 ) fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; if ( input -> use_i420 ) fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input",0
154,"<S2SV_ModStart> ; if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } <S2SV_ModStart> ; if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> a <S2SV_blank> literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> a <S2SV_blank> literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the",0
155,"<S2SV_ModStart> 0 ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; <S2SV_ModStart> 0 ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } <S2SV_ModEnd> } else { <S2SV_ModStart> 0 ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } <S2SV_ModEnd> free ( fname <S2SV_ModStart> } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } <S2SV_ModEnd>",0
156,<S2SV_ModStart> msix_tab_size % 4096 <S2SV_ModEnd> == 0 ),0
157,"<S2SV_ModStart>! js_regexec ( J, <S2SV_ModEnd> re -> prog <S2SV_ModStart> 0 ) ) { if ( js_isnumber ( J, m. sub [ 0 ]. sp ) ) js_pushnumber ( J, js_utfptrtoidx ( text, m. sub [ 0 ]. sp ) ) ; else js_pushnumber ( J, js_utfptrtoidx ( text, m. sub [ 0 ]. sp ) ) ; return ; } if ( js_isnumber ( J, m. sub [ 0 ]. sp ) ) js_pushnumber ( J, js_utfptrtoidx ( text, m. sub [ 0 ]. sp ) ) ; else js_pushnumber ( J, js_utfptrtoidx ( text, m. sub [ 0 ]. sp ) ) ; if ( js_isnumber ( J, m. sub [ 0 ]. sp ) ) js_pushnumber ( J, js_utfptrtoidx ( text, m. sub [ 0 ]. sp ) ) ; else js_pushnumber ( J, js_utfptrtoidx ( text, m. sub [ 0 ]. sp ) ) ;",0
158,"<S2SV_ModStart> case OFreshOID : <S2SV_ModEnd> caml_set_oo_id ( ( <S2SV_ModStart> ) dest ) ; break ; case OSetOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) caml_set_oo_id ( ( value ) dest ) ; break ; case OSetOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) caml_set_oo_id ( ( value ) dest ) ; break ; case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) caml_set_oo_id ( ( value ) dest ) ; break ; case OSetOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) caml_set_oo_id ( ( value ) dest ) ) >= 0 ) caml_set_oo_id ( ( value ) dest ) ; break ; case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) caml_set_oo_id ( ( value ) dest ) ; break ; case OSetOID : if (",0
159,"<S2SV_ModStart> = FALSE ; ( void ) interface ; <S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_IER ) ; ( void ) interface ; <S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) ; if ( ( isr & KSZ8851_ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_",0
160,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON * cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { write_delta_q ( wb, cm -> y_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_ac_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> y_dc_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> uv_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_ac_delta_q ) ; }",0
161,"<S2SV_ModStart> if ( write ( uipc_main. ch [ ch_id ]. fd, p_buf, msglen ) < 0 ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> (%s)"", strerror ( errno ) ) ; }",0
162,"<S2SV_ModStart> ; if ( ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { goto sslerr ; } else if ( ( localrsa = d2i_RSA_pubkey_bio ( rawcert, NULL ) ) == NULL ) { goto sslerr ; } else if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { goto sslerr ; } } else if ( ( localrsa = d2i_RSA_pubkey_bio ( rawcert, NULL ) ) == NULL ) { goto sslerr ; } else if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { goto sslerr ; } else if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { goto sslerr ; }",0
163,"<S2SV_ModStart> t1_getline ( ) ; strcpy ( t1_buf_array, charstringname ) ; strcpy ( t1_line_array, charstringname ) ; t1_line_ptr = eol ( t1_buf_array ) ; } else { strcpy ( t1_buf_array, charstringname ) ; strcpy ( t1_line_array, charstringname ) ; strcpy ( t1_buf_array, charstringname ) ; strcpy ( t1_line_array, charstringname ) ; strcpy ( t1_line_array, charstringname ) ; t1_line_ptr = eol ( t1_line_array ) ; }",0
164,"<S2SV_ModStart> BLOCK_SIZE subsize, int partition_type <S2SV_ModEnd> ) { MACROBLOCKD <S2SV_ModStart> -> e_mbd ; # if CONFIG_VP9_HIGHBITDEPTH switch ( partition_type ) { case PARTITION_NONE : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; <S2SV_ModStart> break ; case PARTITION_VERT : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; <S2SV_ModStart> break ; case PARTITION_HORZ : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; <S2SV_ModStart> break ; case PARTITION_NONE : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) ->",0
165,"<S2SV_ModStart> ret = key_permission ( key_ref, KEY_NEED_READ ) ; if ( ret == 0 ) goto can_read_key ; if (! is_key_possessed ( key_ref ) ) { ret = - EOPNOTSUPP ; goto error2 ; } ret = key_read_state ( key ) ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP",0
166,<S2SV_ModStart> u4_first_slice_in_pic ) { if ( ps_dec -> u4_first_slice_in_pic!= 0 ) { if ( ps_dec -> u4_first_slice_in_pic!= 0 ) { if ( ps_dec -> u4_first_slice_in_pic!= 0 ) { if ( ps_dec -> u4_first_slice_in_pic!= 0 ) { if ( ps_dec -> u4_first_slice_in_pic!= 0 ) { if ( ps_dec -> u4_first_slice_in_pic!= 0 ) { if ( ps_dec -> u4_first_slice_in_pic!= 0 ) { if ( ps_dec -> u4_first_slice_in_pic!= 0 ) { if ( ps_dec -> u4_first_slice_in_pic!= 0 ) { if ( ps_dec -> u4_first_slice_in_pic!= 0 ) { if ( ps_dec -> u4_first_slice_in_pic!= 0 ) { if ( ps_dec -> u4_first_slice_in_pic!= 0 ) { ps,0
167,"<S2SV_ModStart> ; dst_known = tnum_is_const <S2SV_ModEnd> ( dst_reg -> <S2SV_ModStart> case BPF_ADD : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ;",0
168,"<S2SV_ModStart> ; if ( direntry -> d_name. len > CIFS_MAX_NAME_LEN ) { cFYI ( 1, ""Invalid <S2SV_blank> file <S2SV_blank> name"" ) ; rc = - EINVAL ; goto lookup_out ; } cfile = cifs_lookup_file ( full_path, pTcon, cfile, direntry -> d_name. name, direntry -> d_inode ) ; if (! cfile ) { cFYI ( 1, ""Invalid <S2SV_blank> file <S2SV_blank> name"" ) ; rc = - EINVAL ; goto lookup_out ; } cFYI ( 1, ""Invalid <S2SV_blank> file <S2SV_blank> name"" ) ; rc = - EINVAL ; goto lookup_out ; } if ( direntry -> d_name. len > CIFS_MAX_NAME_LEN ) { cFYI ( 1, ""Invalid <S2SV_blank> file <S2SV_blank> name"" ) ; rc = - EINVAL ; goto lookup_out ; } cfile = cifs_lookup_file ( full_path, pTcon, cfile, direntry -> d_name. name, direntry -> d_name",0
169,"<S2SV_ModStart> = rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) ; if ( rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) == NULL ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIESFAILED ) ; goto out ; } rcu_assign_pointer ( tp -> inet_opt, & tcp_opt ) ; if ( rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) == NULL ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIESFAILED ) ; goto out ; }",0
170,"<S2SV_ModStart> ) { int number_of_frames <S2SV_ModEnd>, number_of_keyframes, <S2SV_ModStart> double y_scale ; SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> = get_svc_internal ( svc_ctx ) ; if ( svc_ctx == NULL || si == NULL ) return NULL ; svc_log_reset ( svc_ctx ) ; number_of_frames = si -> number_of_frames ; number_of_keyframes = si -> number_of_keyframes <S2SV_ModEnd> ; for ( <S2SV_ModStart> i ) { number_of_frames = si -> number_of_frames ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> psnr_sum [ i ] [ 0 ], ( double ) si -> psnr_sum [ i ]",0
171,"<S2SV_ModStart> ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( new_cols > old_cols ) { VTermRect rect ; rect. start_row = 0 ; rect. start_col = 0 ; rect. end_row = 0 ; rect. end_col = 0 ; } else { VTermRect rect ; rect. start_row = 0 ; rect. start_col = 0 ; } screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, rect ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, rect ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, rect ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt,",0
172,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int in_named_escape = <S2SV_ModStart> ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ( * str ) - literal_start >= 2 && * ( * str ) - literal_start >= 2 && * ( * str ) - literal_start >= 2 && * ( * str ) - literal_start >= 2 && * ( * str ) - literal_start >= 2 && * ( * str ) - literal_start >= 2 && * ( * str ) - literal_start >= 2 && * ( * str ) - 2 == '\\\\' && * ( * str - 1 ) == 'N' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { ast_error ( c, n, ""f-",0
173,"<S2SV_ModStart> = create_dump_dir_from_problem_data ( pd <S2SV_ModEnd>, g_settings_dump_location )",0
174,<S2SV_ModStart> height ) ; if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> width ) ) { if ( ( y1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > (,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvs",0
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; MACROBLOCKD * xd = & cpi -> mb. e_mbd ; <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> + mi_col ; <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * prev_mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> + idx_str ; BLOCK_SIZE bsize ; cpi -> mb. source_variance = UINT_MAX ; vp9_zero ( cpi -> mb. pred_mv ) ; switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64 ) ; set_source_var_based_partition ( cpi, tile, mi_row, mi_col, BLOCK_64X64, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64",0
178,"<S2SV_ModStart> = skb_header_pointer ( skb, dataoff, sizeof ( _dh ), & dh ) ; BUG_ON ( dh == NULL ) ; state = dccp_state_table [ CT_DCCP_ROLE_CLIENT ] [ dh -> dccph_type ] [ CT_DCCP_NONE ] ; break ; case CT_DCCP_REQUEST : break ; case CT_DCCP_INVALID : msg = ""nf_ct_dccp: <S2SV_blank> invalid <S2SV_blank> state <S2SV_blank> transition <S2SV_blank> "" ; goto out_invalid ; } ct -> proto. dccp. role [ IP_CT_DIR_ORIGINAL ] = CT_DCCP_ROLE_CLIENT ; ct -> proto. dccp. state = CT_DCCP_NONE ; ct -> proto. dccp. last_pkt = DCCP_PKT_REQUEST ; ct -> proto. dccp. last_dir = CT_CT_DIR_REPLY ; ct -> proto. dccp. handshake_seq = 0 ; if ( LOG_INVALID ( net, IPPROTO_DCCP ) ) nf_log_packet ( net, nf_ct_l3num ( ct )",0
179,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct ip_options_rcu <S2SV_ModEnd> * ip_options_get_finish ( <S2SV_ModStart> int optlen ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ ] = IPOPT_END ; <S2SV_ModEnd> if ( opt <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ ] = IPOPT_END ; <S2SV_ModEnd> if ( opt <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ ] = IPOPT_END ; if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } kfree ( * optp ) ; * optp = NULL ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
180,"<S2SV_ModStart> ; if ( strlen ( connection ) == 0 ) goto error ; else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdsstrim ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( count == 0 ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdsstrim ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) { bool found_upgrade = false ; sds * tokens =",0
181,"<S2SV_ModStart> uint16 nif = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ; } if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } <S2SV_ModStart> -> description ) { if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } <S2SV_ModStart> -> name ) { if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } <S2SV_ModStart> -> description ) { if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } <S2SV_ModStart> -> name ) { if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ;",0
182,"<S2SV_ModStart> ; struct dump_dir <S2SV_ModEnd> * dd = <S2SV_ModStart> DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } g_hash_table_remove ( problem_info, ""basename"" ) ; dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } if (! dd_create_basic_files ( dd, client_uid, NULL ) ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> basic <S2SV_blank> files <S2SV_blank> \'%s\'"", path ) ; } dd_create_basic_files ( dd, client_uid, NULL ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; }",0
183,"<S2SV_ModStart> image ) ; if ( ( image -> columns % 2 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 2 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit ) )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 2 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 2 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit ) )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( image -> columns % 2 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 2 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit ) )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q",0
184,"<S2SV_ModStart> a ) { BN_ULONG <S2SV_ModEnd> t1, t2 <S2SV_ModStart>, t2 ) ; r [ 6 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 5, 0, c1, c2 ) ; r [ 7 ] = c2 ; c2 = 0 ; sqr_add_c ( a, 6, 0, c1, c2 ) ; r [ 8 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 7, 0, c1, c2 ) ; r [ 9 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 10, 0, c1, c2 ) ; r [ 10 ] = c2 ; c2 = 0 ; sqr_add_c ( a, 11, 0, c1, c2 ) ; r [ 11 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 12, 0, c1, c2 ) ; r [ 12 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 11, 0, c1, c2 ) ; r [",0
185,"<S2SV_ModStart> = NoCompression ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) { ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; } <S2SV_ModStart> = NoCompression ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; } if ( status == MagickFalse ) { ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; } if ( status == MagickFalse ) { ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; } <S2SV_ModStart> = NoCompression ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; } if ( status == MagickFalse ) { ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; }",0
186,"<S2SV_ModStart> = len ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> %u)"", len ) ) ; goto trunc ; } <S2SV_ModStart> = len ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> %u)"", len ) ) ; goto trunc ; } <S2SV_ModStart> = len ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> %u)"", len ) ) ; goto trunc ; } <S2SV_ModStart> = len ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> %u)"", len ) ) ; goto trunc ; } <S2SV_ModStart> = len ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> %u)"", len ) ) ; goto trunc ; } <S2SV_ModStart> = len ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> %u)"", len ) ) ; goto trunc ; } <S2SV_ModStart> = len ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> %u)"", len ) )",0
187,<S2SV_ModStart> ; if ( task -> ptrace && task -> ptrace -> user_ns ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE,0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> SEI_USER_DATA_REGISTERED_ITU_T_T35 : ps_parse -> s_sei_params. i4_sei_user_data_registration_display_colour_vol_params_present_flag = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registration_display_colour_vol_params_present_flags = ps_parse -> s_sei_params. i4_sei_user_data_registration_display_colour_vol_params_present_flag = ps_parse -> s_sei_params. i4_sei_user_data_registration_display_colour_vol_params_present_flag = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registration_display_colour_vol_params_present_flags = ps_parse -> s_sei_params. i4_sei_user_data_registration_display_colour_vol_params_present_flags = ps_parse -> s_sei_params. i4_sei_user_data_registration,0
190,"<S2SV_ModStart> = kcalloc ( num_engines, sizeof ( * dd -> per_sdma ), GFP_KERNEL ) ; if (! dd -> per_sdma ) { kfree ( dd -> per_sdma ) ; kfree ( dd -> per_sdma ) ; kfree ( dd -> per_sdma ) ; kfree ( dd -> per_sdma ) ; }",0
191,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> mi_repair_parallel ( MI_CHECK <S2SV_ModStart>, rep_quick ) ; if ( param -> testflag & T_UNPACK ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; } else { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; } if (! ( param -> testflag & T_SILENT ) ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; } else { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ) ; }",0
192,"<S2SV_ModStart> ) ; } if ( pcount > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ) ;",0
193,"<S2SV_ModStart> val ) ; if (! strcmp ( var, ""command"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> command"", r -> name ) ; if (! strcmp ( var, ""rspfile"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile <S2SV_blank> content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile <S2SV_blank> content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile <S2SV_blank> content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ;",0
194,"<S2SV_ModStart> ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> kind, c -> id, c -> buf ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> kind, c -> id, c -> buf ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> buf, c -> bind -> id, c -> buf ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> kind, c -> id, c -> buf ) ; agoo_log_cat ( & agoo_req_cat, c -> buf ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %",0
195,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> j ; int16_t <S2SV_ModEnd> temp_out [ 16 <S2SV_ModStart> ++ j ) out [ j * 16 + i ] = ( temp_out [ j ] + 1 ) >> 2 ; } for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) out [ j * 16 + i ] = ( temp_out [ j ] + 1 ) >> 2 ; } for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) out [ j * 16 + i ] = ( temp_out [ j ] + 1 ) >> 2 ; } for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) out [",0
196,"<S2SV_ModStart> new_data_len ) ; if ( dbus_name == NULL ) { g_log ( G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG ( G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR ) ) ; goto out ; } if ( g_str_has_prefix ( dbus_name, "".service"" ) ) { g_log ( G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G",0
197,"<S2SV_ModStart> ; char * temp_filename <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } temp_filename = osi_calloc ( strlen ( filename ) + 5, sizeof ( temp_filename ) ) ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; if ( chmod ( temp_filename, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP ) == - 1 ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> change <S2SV_blank> file <S2SV_blank> permissions <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ) fputc ( '\\n'",0
198,"<S2SV_ModStart> tlv_len ) ; if ( tlv_len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %d]"", tlv_len ) ) ; return ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %d]"", tlv_len ) ) ; return ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %d]"", tlv_len ) ) ; return ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %d]"", tlv_len ) ) ; return ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %d]"", tlv_len ) ) ; return ;",0
199,"<S2SV_ModStart> userData, target, NULL ) ; ctxt -> instate = state ; return ; } if ( ( RAW == '?' ) && ( NXT ( 1 ) == '>' ) ) { if ( input!= ctxt -> input ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } skip ( 2 ) ; if ( ( input!= ctxt -> input ) ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } skip ( 2 ) ; if ( ( input!= ctxt -> input ) ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } skip ( 2 ) ; if ( ( input!= ctxt -> input ) ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'",0
200,"<S2SV_ModStart> ; int rv = Socket_print ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" <S2SV_ModEnd> ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" <S2SV_ModStart> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s""",0
201,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, <S2SV_ModEnd> dest ) ; <S2SV_ModStart> ( dest, <S2SV_ModEnd> S_IRUSR | S_IWUSR <S2SV_ModStart> ( dest, <S2SV_ModEnd> S_IRUSR | S_IWUSR <S2SV_ModStart> ( dest, <S2SV_ModEnd> S_IRUSR | S_IWUSR <S2SV_ModStart> ( dest, <S2SV_ModEnd> S_IRUSR | S_IWUSR",0
202,<S2SV_ModStart> flags ) ; <S2SV_ModEnd> hstats -> seconds_since_last_reset <S2SV_ModStart> comp ) ; kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; <S2SV_ModEnd> hstats -> lip_count <S2SV_ModStart> fcstats -> fc. lip_count ; hstats -> nos_count = fcstats -> fc. nos_count ; hstats -> error_count = fcstats -> fc. error_count ; hstats -> dumped_count = fcstats -> fc. dropped_count ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_sync_count = fcstats -> fc. loss_of_syncs ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_sync_count = fcstats -> fc. loss_of_syncs ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_sync_count = fcstats -> fc. loss_of_syncs ; hstats -> link_failure_count = fcstats -> fc. link_,0
203,"<S2SV_ModStart> value ) { if ( value -> x < 0.0f || value -> y < 0.0f || value -> y > 1.0f || value -> z < 0.0f ) { value -> x = ZeroF ( 1.0f, MaxF ( 0.0f, value -> x ) ) ; value -> y = ZeroF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = ZeroF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; } else { value -> x = ZeroF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> y = ZeroF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = ZeroF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
204,<S2SV_ModStart> -> sasl_mechanism ; rec -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> sasl_password = g_strdup ( src -> sasl_password ) ;,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart>, o, datao ; if ( CHECKOVERFLOW ( buf_size, 6 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( ne -> log, ""ExifMnoteCanon"", sizeof ( MnoteCanonEntry ) * c ) ; break ; } n -> entries [ tcount ]. tag = exif_get_short ( buf + o + 2, n -> order ) ; n -> entries [ tcount ]. format = exif_get_short ( buf + o + 4, n -> order ) ; n -> entries [ tcount ]. components = exif_get_long ( buf + o + 4, n -> order ) ; n -> entries [ tcount ]. order = n -> order ; n -> entries [ tcount ]. order = n -> order ; n -> entries [ tcount ]. order = n ->",0
207,"<S2SV_ModStart> HA_ERR_CRASHED : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> a <S2SV_blank> correct <S2SV_blank> index <S2SV_blank> definition. <S2SV_blank> You <S2SV_blank> need <S2SV_blank> to <S2SV_blank> recreate <S2SV_blank> it <S2SV_blank> before <S2SV_blank> you <S2SV_blank> can <S2SV_blank> do <S2SV_blank> a <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED_ON_USAGE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param,",0
208,"<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; CURLcode <S2SV_ModEnd> res ; if <S2SV_ModStart> ; res = Curl_convert_from_network <S2SV_ModEnd> ( handle, <S2SV_ModStart>, 1 ) ; if (! res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ;",0
209,"<S2SV_ModStart> ; RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, len - op -> size, cpu ) ;",0
210,"<S2SV_ModStart> = usm_secmod_process_in_msg ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_POST_PREMIB_WRITE_CONFIG, init_usm_rgenerate_out_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_rgenerate_out_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_rgenerate_out_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_rgenerate_out_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_rgenerate_out_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_",0
211,"<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; if (! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; if (! prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; if (! match ( prog -> start, sp, prog -> flags | eflags, sub ) ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; if (! prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) match ( prog -> start, sp",0
212,"<S2SV_ModStart> ; # ifndef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= - 1 ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if ( idx!= - 1 ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if (! exten ||! exten -> efix_entry ) { snmp_log ( LOG_ERR, ""No <S2SV_blank> command <S2SV_blank> to <S2SV_blank> run\\n"" ) ; return SNMP_ERR_GENERR ; } if (! exten ||! exten -> efix_entry ) { snmp_log ( LOG_ERR, ""No <S2SV_blank> command <S2SV_blank> to <S2SV_blank> run\\n""",0
213,<S2SV_ModStart> ; break ; case 3 : { CheckNumberPixels ( 4 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 2 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; break ; } case 4 : { CheckNumberPixels ( 8 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 7 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = (,0
214,"<S2SV_ModStart> timer ) ; list_for_each_entry ( slave, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; slave -> master = NULL ; slave -> timer = NULL ; list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; slave -> timer = NULL ; spin_unlock_irq ( & slave_active_lock ) ; mutex_unlock ( & register_mutex ) ; list_del ( & slave -> open_list ) ; spin_lock_irq ( & slave_active_lock",0
215,<S2SV_ModStart> -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1,0
216,<S2SV_ModStart> { int_fast32_t widthOverflow = ( gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ) >> 3 ; int_fast32_t heightOverflow = ( gifFilePtr -> Image. Height * gifFilePtr -> Image. Width ) >> 3 ; if ( widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } SavedImage * sp = & gifFilePtr -> SavedImages [ gifFilePtr -> ImageCount - 1 ] ; SavedImage * sp = & gifFilePtr -> SavedImages [ gifFilePtr -> ImageCount - 1 ] ; int_fast32_t topOverflow = ( gifFilePtr -> Image. Top + gifFilePtr -> Image. Left ) >> 3 ; if ( topOverflow > 0 || leftOverflow > 0 ) { gifFilePtr -> SWidth += topOverflow ; gifFilePtr -> SHeight += leftOverflow ; } SavedImage * sp = & gifFilePtr -> SavedImages [ gifFilePtr -> ImageCount - 1 ] ; SavedImage * sp = & gifFilePtr -> SavedImages [ gifFilePtr -> ImageCount -,0
217,"<S2SV_ModStart> || cherokee_buffer_is_empty ( & <S2SV_ModStart> -> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; ret = validate_dn ( props, dn, conn -> validator -> passwd. buf ) ; if ( ret!= ret_ok ) return ret ; re = ldap_count_entries ( ldap -> conn, message ) ; if ( re!= 1 ) { LOG_ERROR ( CHEROKEE_ERROR_VALIDATOR_LDAP_SEARCH, props -> basedn. buf ) ; return ret_not_found ; } first = ldap_first_entry ( ldap -> conn, first ) ; if ( first == NULL ) { ldap_msgfree ( message ) ; return ret_not_found ; } dn = ldap_get_dn ( ldap -> conn, first ) ; if ( dn == NULL ) { ret_error ( message ) ; return ret_not_found ; } dn = ldap_get_dn ( ldap -> conn, first ) ; if ( dn == NULL ) { ret_error",0
218,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> no <S2SV_blank> bus <S2SV_blank> info\\n"", __func__, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",0
219,"<S2SV_ModStart> ; rdsdebug ( ""size <S2SV_blank> %zu <S2SV_blank> flags <S2SV_blank> 0x%x <S2SV_blank> timeo <S2SV_blank> %ld\\n"" <S2SV_ModEnd>, size,",0
220,<S2SV_ModStart> 0 ) { if ( strlen ( s ) > 9 ) { if ( strlen ( s ) > 9 ) { if ( strlen ( s ) > 9 ) { if ( strlen ( s ) > 9 ) { if ( strlen ( s ) > 9 ) { if ( strlen ( s ) > 9 ) { if ( strlen ( s ) > 9 ) { if ( strlen ( s ) > 9 ) { if ( strlen ( s ) > 9 ) { if ( strlen ( s ) > 9 ) { if ( strlen ( s ) > 9 ) { if ( strlen ( s ) > 9 ) { if ( strlen ( s ) > 9 ) { if ( strlen ( s ) > 9 ) { if ( strlen ( s ) > 9 ) { if ( strlen ( s ) > 9 ) { if ( strlen ( s ) > 9 ) { if ( strlen ( s ) > 9 ) { if ( strlen ( s ) > 9 ) { if ( strlen ( s ) > 9 ) { if ( strlen ( s ) > 9 ) { if ( strlen ( s ) > 9 ) { if ( strlen ( s ) > 9 ) { if ( strlen ( s ) > 9 ) { if ( strlen ( s ) > 9 ) {,0
221,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. read_set, TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. read_set, TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. read_set, TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. read_set, TEMP_FAILURE_RETRY (",0
222,"<S2SV_ModStart> msixcap msixcap ; if <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> msgnum <= MAX_MSIX_TABLE_ENTRIES ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> msix_table <S2SV_blank> entries\\n"", __func__ ) ; return - EINVAL ; } <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> msgnum ) ; pci_populate_msixcap ( & msixcap, msgnum, barnum, tab_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix",0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,"<S2SV_ModStart> == NULL ) { retval = KRB5KDC_ERR_PREAUTH_FAILED ; goto cleanup ; } status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_subject_name ( kdc_cert ), is -> subject ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_subject_name ( kdc_cert ), is -> subject ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> subject ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_subject_name ( kdc_cert ), is -> subject ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_subject_name ( kdc_cert",0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> oxcf. tx_size_search_method == USE_LARGESTALL || cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> sf. tx_size_search,0
226,<S2SV_ModStart> ; if (! finite ( im -> gdes [ vidx ]. val ) ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> ; if (! finite ( im -> gdes [ vidx ]. val ) ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> ; if (! finite ( im -> gdes [ vidx ]. val ) ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> ; if (! finite ( im -> gdes [ vidx ]. val ) ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> ; if (! finite ( im -> gdes [ vidx ]. val ) ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> ; if (! finite ( im -> gdes [ vidx ]. val ) ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> ; if (! finite ( im -> gdes [ vidx ]. val ) ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> ; if (! finite ( im -> gdes [ vidx ]. val ) ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> ; if (! finite ( im -> gdes [ vidx ]. val ) ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> ; if (! finite ( im -> gdes [ vidx ]. val ) ) {,0
227,<S2SV_ModStart> < buf2 -> size ) { return - 1 ; } else if ( buf1 -> size > buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; },0
228,"<S2SV_ModStart> ; size_t sz ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) { info = vmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; } if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) { info = vmalloc ( sz ) ; if (! info ) return NULL ; } if (! info ) { info = vmalloc ( sz ) ; if (! info ) return NULL ; }",0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol >= AX25_MAX_PROTOCOL ) return - EINVAL ; if (,0
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
231,<S2SV_ModStart> b ) ; <S2SV_ModEnd> r = sd_event_add_io,0
232,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
233,<S2SV_ModStart> lun ) sas_eh_defer_cmd <S2SV_ModEnd> ( cmd ),0
234,"<S2SV_ModStart> ; REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i ), 0 ) ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 1 ) ) == TYPE_COMMENT ) { if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) { if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) { returns = ast_for_comment ( c, CHILD ( n, name_i + 3 ) ) ; if (! returns ) return NULL ; } <S2SV_ModStart> ; if ( is_async ) return AsyncFunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; else return FunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImage <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,"<S2SV_ModStart> ( position > <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> header + psf -> headerend + position <= psf -> header -> headend ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> header + psf -> headerend + position > psf -> header -> headend ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> header + psf -> headerend + position <= psf -> header -> headend ) { psf_fseek ( psf, position, whence ) ; return ; } ;",0
240,<S2SV_ModStart> u4_ofst ) ; if ( ps_cabac -> u4_range > UINT32_MAX / ps_cabac -> u4_range ) { IHEVCD_ERROR_T e ; ps_cabac -> u4_range = UINT32_MAX ; ps_cabac -> u4_ofst = UINT32_MAX ; return ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; } <S2SV_ModStart> ) IHEVCD_SUCCESS ) ; if ( ps_cabac -> u4_ofst > UINT32_MAX / ps_cabac -> u4_range ) { IHEVCD_ERROR_T e ; ps_cabac -> u4_ofst = UINT32_MAX ; ps_cabac -> u4_ofst = UINT32_MAX ; return ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; },0
241,<S2SV_ModStart> off ) ; if ( line -> type == MD_LINE_BLANK ) { if ( prev_line_has_list_loosening_effect ) line -> type = MD_LINE_LIST_LOOSEING_EFFECT ; } else if ( line -> type == MD_LINE_LIST_LOOSE_EFFECT ) { if ( prev_line_has_list_loosening_effect ) line -> type = MD_LINE_LIST_LOOSE_EFFECT ; } else if ( line -> type == MD_LINE_BLANK ) { if ( prev_line_has_list_loosening_effect ) line -> type = MD_LINE_LIST_LOOSE_EFFECT ; } else if ( line -> type == MD_LINE_LIST_LOOSE_EFFECT ) { if ( prev_line_has_list_loosening_effect ) line -> type = MD_LINE_LIST_LOOSE_EFFECT ; } else if ( prev_line_has_list_loosening_effect ) { if ( prev_line_has_list_loosening_effect ) line -> type = MD_LINE_,0
242,<S2SV_ModStart> perf_event_context * ctx ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } raw_spin_unlock_irq,0
243,<S2SV_ModStart> ; # if CONFIG_POSTPROC_VISUALIZER ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ) ; # endif <S2SV_ModStart> noise_level ; # if CONFIG_POSTPROC_VISUALIZER ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_,0
244,"<S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg6 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; } ND_TCHECK2 ( * tptr, sizeof ( struct olsr_msg6 ) ) ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg6 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )",0
245,"<S2SV_ModStart> end_time ) { VP8_COMMON * const cm = & cpi -> common ; <S2SV_ModStart> = 0 ; # if HAVE_NEON if ( cm -> cpu_caps & HAS_NEON ) # endif { vp8_push_neon ( store_reg ) ; } # endif vpx_usec_timer_start ( & timer ) ; if ( sd -> y_width!= cpi -> oxcf. Width || sd -> y_height!= cpi -> oxcf. Height ) { assert ( cpi -> oxcf. lag_in_frames < 2 ) ; dealloc_raw_frame_buffers ( cpi ) ; } if ( vp8_lookahead_push ( cpi -> lookahead, sd, time_stamp, end_time, frame_flags, cpi -> active_map_enabled? cpi -> active_map : NULL ) ) res = - 1 ; vpx_usec_timer_mark ( & timer ) ; cpi -> time_receive_data += vpx_usec_timer_elapsed ( & timer ) ; cpi -> time_receive_data += vpx_usec_timer_elapsed ( &",0
246,"<S2SV_ModStart> ) ) { <S2SV_ModEnd> fprintf ( stderr <S2SV_ModStart> ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } <S2SV_ModEnd> pid_t child = <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( chown <S2SV_ModStart> ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""fchmod"" ) ; <S2SV_ModEnd> return 1 ;",0
247,<S2SV_ModStart> k_start ; } if ( ptr_hbe_txposer -> k_start > 24 ) { if ( ptr_hbe_txposer -> k_start > 16 ) { if ( ptr_hbe_txposer -> k_start > 24 ) { if ( ptr_hbe_txposer -> k_start > 16 ) { if ( ptr_hbe_txposer -> k_start > 16 ) { if ( ptr_hbe_txposer -> k_start > 24 ) { if ( ptr_hbe_txposer -> k_start > 24 ) { if ( ptr_hbe_txposer -> k_start > 16 ) { if ( ptr_hbe_txposer -> k_start > 24 ) { if ( ptr_hbe_txposer -> k_start > 16 ) { if ( ptr_hbe_txposer -> k_start > 24 ) { if ( ptr_hbe_txposer -> k_start > 24 ) { if ( ptr_hbe_txposer -> k_start > 24 ) { if ( ptr_hbe_txposer -> k_start > 24 ) { if ( ptr_hbe_txposer ->,0
248,"<S2SV_ModStart> lua_module ) ; luaLuaFile * lua_file = ap_get_module_config ( r -> per_dir_config, & lua_module ) ; <S2SV_ModStart> r ) ; luaL_file = ap_get_module_config ( r -> per_dir_config, & lua_module ) ; <S2SV_ModStart> r ) ; luaL_file = ap_get_module_config ( r -> per_dir_config, & lua_file ) ; <S2SV_ModStart> r ) ; luaL_file = ap_get_module_config ( r -> per_dir_config, & lua_file ) ; <S2SV_ModStart> r ) ; luaL_file = ap_get_module_config ( r -> per_dir_config, & lua_module ) ; <S2SV_ModStart> r ) ; luaL_file = ap_get_module_config ( r -> per_dir_config, & lua_file ) ; <S2SV_ModStart> r ) ; luaL_file = ap_get_module_config ( r -> per_dir_config, & lua_module ) ; <S2SV_ModStart> r ) ; luaL_file = ap_get_module_config ( r -> per_dir_config, & lua_module )",0
249,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,"<S2SV_ModStart> ; if (! proto_end ) { printk ( KERN_WARNING ""Malformed <S2SV_blank> credential <S2SV_blank> URL: <S2SV_blank> %s\\n"", url ) ; exit ( EXIT_FAILURE ) ; } cp = url ; at = strchr ( cp, '@' ) ; colon = strchr ( cp, ':' ) ; slash = strchrnul ( cp, '/' ) ; if (! at || slash <= at ) { host = cp ; } else if (! colon || slash <= colon ) { host = cp ; } else { c -> username = url_decode_mem ( cp, at - cp ) ; c -> password = url_decode_mem ( colon + 1, slash - colon ) ; } if ( proto_end - url < 3 ) { printk ( KERN_WARNING ""Malformed <S2SV_blank> credential <S2SV_blank> URL: <S2SV_blank> %s\\n"", url ) ; exit ( EXIT_FAILURE ) ; }",0
251,"<S2SV_ModStart> fdt ) ; const struct fdt_tag * const tag = fdt_next_tag ( fdt, offset, & nextoffset ) ; <S2SV_ModStart> = nextoffset ; <S2SV_ModEnd> switch ( tag <S2SV_ModStart> case FDT_PROP : include = want >= 2 ; stop_at = offset ; break ; case FDT_NOP : include = want >= 2 ; stop_at = offset ; break ; case FDT_BEGIN_NODE : depth ++ ; <S2SV_ModStart> FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + len >= path_",0
252,"<S2SV_ModStart> ) ) { if (! ( loops % 50 ) ) { redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys ) ; redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> expires <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys ) ; redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys, size ) ; } if (! ( loops % 50 ) ) { redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> expires <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys, size ) ; redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j",0
253,"<S2SV_ModStart> -> protocol_timeout = g_timeout_add_seconds <S2SV_ModEnd> ( 5,",0
254,<S2SV_ModStart> book -> dim && i < n,1
255,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
256,"<S2SV_ModStart> { if (! check_scale_factors ( other_w, other_h, sf -> x_w, sf -> y_w, sf -> y_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if (! check_scale_factors ( other_w, other_h, sf -> x_w, sf -> y_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if (! check_scale_factors ( other_w, other_h, sf -> x_scale_fp, sf -> y_scale_fp ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> scale_value_x",0
257,<S2SV_ModStart> ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if (,0
258,"<S2SV_ModStart> 0 ) { struct ipv6_txoptions * rcu = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) ; rcu = rcu_dereference_protected ( sk -> sk_omem_alloc, sock_owned_by_user ( sk ) ) ; if ( rcu < 0 ) return - EINVAL ; rcu_assign_pointer ( sk -> sk_omem_alloc, sizeof ( * rcu ) ) ; rcu = rcu_dereference_protected ( sk -> sk_omem_alloc, sock_owned_by_user ( sk ) ) ; rcu = rcu_dereference_protected ( sk -> sk_omem_alloc, sock_owned_by_user ( sk ) ) ; if ( rcu < 0 ) return - EINVAL ; rcu_assign_pointer ( sk -> sk_omem_alloc, rcu ) ; rcu = rcu_dereference_protected ( sk -> sk_omem_alloc, sk -> sk_omem_alloc",0
259,<S2SV_ModStart> ( ) ; unregister_pernet <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ( ) ; unregister_pernet <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ( ) ; unregister_pernet <S2SV_ModEnd> ( & sctp_net_ops,0
260,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void show_psnr ( <S2SV_ModStart> index ) ; if ( stream -> psnr_sse_total > 0.0 ) ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; else ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", stream -> psnr_totals [ i ] / stream -> psnr_count ) ; }",0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ( ) ; # if KSZ8851_SPI_SUPPORT == ENABLED ) interface -> extIntDriver -> init ( ) ; # endif <S2SV_ModStart> ( ""CIDER=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_CIDER ) ) ; <S2SV_ModStart> ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { memPoolFree ( context -> txBuffer ) ; memPoolFree ( context -> rxBuffer ) ; return ERROR_OUT_",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_FORMAT ) ; return - ENOEXEC ; } bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; type_ok = fit_check_format ( fit, IMAGE_SIZE_INVAL ) ; if (! type_ok ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_FORMAT_OK ) ; if ( fit_uname ) { bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_UNIT_NAME ) ; noffset = fit_image_get_node ( fit, fit_uname ) ; } else {",0
265,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ),0
266,"<S2SV_ModStart> refresh_alt_ref_frame ) )? ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * ( rc -> avg_frame_bandwidth - rc -> baseline_gf_interval ) ) / ( rc -> avg_frame_bandwidth - rc -> baseline_gf_interval ) : ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * ( rc -> avg_frame_bandwidth - rc -> baseline_gf_interval ) ) ; # else target = rc -> avg_frame_bandwidth * ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * ( rc -> avg_frame_bandwidth - rc -> baseline_gf_interval ) ) / ( rc -> avg_frame_bandwidth - rc -> baseline_gf_interval ) ; # endif return vp9_rc_clamp_pframe_target_size ( cpi, target ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
267,"<S2SV_ModStart> ++ ) { if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) { errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; } else { errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; } }",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,"<S2SV_ModStart> ib ] ; memset ( d, 0, sizeof ( BLOCKD ) ) ;",0
270,<S2SV_ModStart> FN_REFLEN ] ; if ( strlen ( opt_basedir ) > FN_REFLEN ) { error = - 1 ; goto exit ; },0
271,"<S2SV_ModStart> pbi -> decrypt_cb ( pbi -> decrypt_state, data, clear_buffer, 10 ) ; if ( n > ( int ) ( data_end - data ) ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } <S2SV_ModStart> ) { int n = ( int ) ( data_end - data ) ; if ( n > ( int ) ( data_end - data ) ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } <S2SV_ModStart> } if ( pbi -> decrypt_cb ) { int n = ( int ) ( data_end - data ) ; if ( n > ( int ) ( data_end - data ) ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } pbi -> decrypt_cb ( pbi -> decrypt_state, data, clear_buffer, n ) ; clear = clear_buffer ; }",0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
273,"<S2SV_ModStart> * returnrate, RATE_DISTORTION <S2SV_ModEnd> * returndistortion, <S2SV_ModStart> * returnintra ) { # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX, zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif mode_mv = best_ref_mv_sb [ sign_bias ] ; # endif mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int = 0 ;",0
274,<S2SV_ModStart> goto error ; if ( statbuf. st_size > UINT64_MAX / sizeof ( struct ntreg_header ) ) { h -> size = UINT64_MAX ; goto error ; } <S2SV_ModStart>. st_size ; if ( h -> size > UINT64_MAX / sizeof ( struct ntreg_header ) ) { h -> size = UINT64_MAX / sizeof ( struct ntreg_header ) ; goto error ; } if ( h -> size > UINT64_MAX / sizeof ( struct ntreg_header ) ) { h -> size = UINT64_MAX / sizeof ( struct ntreg_header ) ; } if ( h -> size > UINT64_MAX / sizeof ( struct ntreg_header ) ) { h -> size = UINT64_MAX / sizeof ( struct ntreg_header ) ; } if ( h -> size > UINT64_MAX / sizeof ( struct ntreg_header ) ) { h -> size = UINT64_MAX ; goto error ; } if ( h -> size > UINT64_MAX / sizeof ( struct ntreg_header ) ) { h -> size = UINT64_MAX ; } if ( h -> size > UINT64_MAX / sizeof ( struct ntreg_header,0
275,"<S2SV_ModStart> ; UWORD8 u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id <S2SV_ModEnd> ; UWORD16 i2_max_frm_num <S2SV_ModStart> ; u1_level_idc = ps_dec -> u1_level_idc ; u1_seq_parameter_set_id = ps_dec -> u1_level_idc ; u1_seq_parameter_set_id = 0 ; i2_max_frm_num = ih264d_get_max_frm_num ( ps_bitstrm ) ; i2_max_frm_num = ih264d_get_max_frm_num ( ps_bitstrm ) ; i2_max_frm_num = ih264d_get_max_frm_num ( ps_bitstrm ) ; <S2SV_ModStart> ps_bitstrm, i2_max_frm_num, u2_max_frm_num, u2_pic_wd, u2_pic_ht, u2_crop_offset_y, u2_crop_offset_uv, u2",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> cpi ; vpx_svc_parameters_t <S2SV_ModEnd> * const params <S2SV_ModStart> * ) ; vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height ) ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ;",0
277,"<S2SV_ModStart> out ) { uint32 width, length ; uint16 bitspersample, samplesperpixel ; uint16 <S2SV_ModEnd> input_compression, input_photometric <S2SV_ModStart> uint16 input_compression, input_photometric <S2SV_ModEnd> ; copyFunc cf <S2SV_ModStart> copyFunc cf ; if ( width!= ( uint32 ) - 1 ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; TIFFSetField ( out, TIFFTAG_IMAGELENGTH, length ) ; return FALSE ; } if ( width!= ( uint32 ) - 1 ) { TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; } else { if ( width!= ( uint32 ) - 1 ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, length ) ; return FALSE ; } if ( length!= ( uint32 ) - 1 ) { TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; }",0
278,"<S2SV_ModStart> a ) { if ( a -> pst == NULL ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } <S2SV_ModStart> = '\\0' ; if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else { archive_set_error ( & a -> archive, 0, ""Removing <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ;",0
279,"<S2SV_ModStart> inode -> i_sb ) <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> -> i_sb, & iinfo -> i_location, 0, & ident ) ; if (! bh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( ident == TAG_IDENT_IE && ibh ) { struct buffer_head * nbh = NULL ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if ( ie -> indirectICB. extLength && ( nbh = udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ) { if ( ident == TAG_IDENT_FE || ident == TAG_IDENT_EFE ) { memcpy ( & iinfo -> i_location, & loc, sizeof ( struct indirectEntry ) ) ) { memcpy ( & i",0
280,"<S2SV_ModStart> -> tx_size ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y",0
281,"<S2SV_ModStart> mq_ops ) { spin_lock_irqsave ( & fq -> mq_flush_lock, flags ) ; flush_rq -> tag = - 1 ; } running = & fq -> flush_queue [ fq -> flush_running_idx ] ; BUG_ON ( fq -> flush_pending_idx == fq -> flush_running_idx ) ; if (! q -> mq_ops ) elv_completed_request ( q, flush_rq ) ; if (! q -> mq_ops ) spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ;",0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,"<S2SV_ModStart> ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; }",0
284,"<S2SV_ModStart> == NULL || * replySize > ( int ) sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( * replySize > ( int ) sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( * replySize > ( int ) sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( * replySize > ( int ) sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( * replySize > ( int ) sizeof ( effect_param_t ) ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - E",0
285,<S2SV_ModStart> berval ) ; if ( j >= num_versions ) err = KRB5_ERR_INVALID_PARAMETER ; if ( err!= KRB5_ERR_INVALID_PARAMETER ) err = KRB5_ERR_INVALID_PARAMETER ; <S2SV_ModStart> berval ) ; if ( err!= KRB5_ERR_INVALID_PARAMETER ) { err = KRB5_ERR_INVALID_PARAMETER ; if ( err!= KRB5_ERR_INVALID_PARAMETER ) err = KRB5_ERR_INVALID_PARAMETER ; if ( j >= num_versions ) err = KRB5_ERR_INVALID_PARAMETER ; if ( err!= KRB5_ERR_INVALID_PARAMETER ) err = KRB5_ERR_INVALID_PARAMETER ; <S2SV_ModStart> berval ) ; if ( err!= KRB5_ERR_INVALID_PARAMETER ) { err = KRB5_ERR_INVALID_PARAMETER ; if ( err!= KRB5_ERR_INVALID_PARAMETER ) err = KRB5_ERR_INVALID_PARAMETER ; if ( j >= num_versions ) err = KRB5_ERR_INVALID_PARAMETER ; if ( err!= KRB5_ERR_INVALID_PARAMETER ) err = KRB5_ERR,0
286,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > 0 && crgram_len < SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", crgram_len ) ; } else if ( crgram_len > 0 && crgram_len < SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", crgram_len ) ; } else { if ( crgram_len > 0 && crgram_len < SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; } else { r = sc_transmit_apdu ( card, & apdu ) ; } }",0
287,"<S2SV_ModStart> < 0 ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> MAC <S2SV_blank> vlan <S2SV_blank> number: <S2SV_blank> %d\\n"", vsi -> num_queue_pairs ) ; return ret ; } <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> ch ) ; if (! ch ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> MAC <S2SV_blank> vlan <S2SV_blank> number: <S2SV_blank> %d\\n"", vsi -> num_queue_pairs ) ; return - ENOMEM ; }",0
288,"<S2SV_ModStart> } } } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok",0
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,<S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & Y,0
291,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> } quantum_info =,0
292,"<S2SV_ModStart> len ) { <S2SV_ModEnd> if ( len <S2SV_ModStart> char * p ; PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; u = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( u ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; Py_DECREF ( w ) ; } if ( p - buf <= Py_SIZE ( u ) ) { Py_DECREF ( w ) ; return NULL ; } assert ( p - buf",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ; int setimes <S2SV_ModStart>, omode, mask <S2SV_ModEnd>, wrerrno = <S2SV_ModStart>, omode, mask <S2SV_ModEnd> )!= 0 <S2SV_ModStart>, omode, mask <S2SV_ModEnd> )!= 0 <S2SV_ModStart>, omode, mask <S2SV_ModEnd> )!= 0 <S2SV_ModStart>, omode, mask <S2SV_ModEnd> )!= 0 <S2SV_ModStart>, omode, mask <S2SV_ModEnd> )!= 0 <S2SV_ModStart>, omode, mask <S2SV_ModEnd> )!= 0 <S2SV_ModStart>, omode, mask <S2SV_ModEnd> )!= 0 <S2SV_ModStart>, omode, mask <S2SV_ModEnd> )!= 0 <S2SV_ModStart>, omode, mask <S2SV_ModEnd> )!= 0 <S2SV_ModStart>, omode, mask <S2SV_ModEnd> )!= 0 <S2SV_ModStart>, omode, mask <S2SV_ModEnd> )!= 0 <S2SV_ModStart>, omode, mask <S2SV_ModEnd> )!= 0 <S2SV_ModStart>, omode, mask <S2SV_ModEnd> )!= 0 <S2SV_ModStart>, omode, mask <S2SV_ModEnd> )!= 0 <S2SV_ModStart>, omode, mask <S2SV_ModEnd> )!= 0 <S2SV_ModStart>, omode, mask <S2SV_ModEnd> )!= 0 <S2SV_ModStart>, omode, mask <S2SV_ModEnd> )!= 0 <S2SV_ModStart>, omode, mask <S2SV_ModEnd> )!= 0 <S2SV_ModStart>, mask, <S2SV_ModEnd> 1 ) ;",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,"<S2SV_ModStart> 1 ) ; memset ( oci -> mode_info, 0, sizeof ( MODE_INFO ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> lst_fb, 0, sizeof ( oci -> lst_fb ) ) ; memset ( oci -> alt_fb, 0, sizeof ( oci -> alt_fb ) ) ; memset ( oci -> alt_fb, 0, sizeof ( oci -> alt_fb ) ) ; memset ( oci -> lst_fb, 0, sizeof ( oci -> lst_fb ) ) ; memset ( oci -> alt_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> lst_fb, 0, sizeof ( oci -> lst_fb ) ) ; memset ( oci -> alt_fb, 0, sizeof ( oci -> alt_fb ) ) ; memset ( oci -> alt_fb, 0, sizeof ( oci -> alt_fb ) ) ; memset ( oci -> alt_fb, 0, sizeof ( oci -> alt_fb ) ) ; memset ( oci ->",0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,"<S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, u1_num_mbsNby2, u1_tfr_n_mb, u1_slice_end, <S2SV_ModEnd> u1_is_idr_slice, u1_is_idr_slice <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_tfr_n_mb, u1_is_idr_slice, u1_is_idr_slice, u1_num_mbsNby2, u1_num_mbsNby2, u1_tfr_n_mb, u1_slice_end, u1_is_idr_slice, u1_is_idr_slice, u1_tfr_n_mb, u1_slice_end, u1_tfr_n_mb, u1_is_idr_slice, u1_is_idr_slice, u1_num_mbsNby2, u1_num_mbsNby2, u1_end_of_row,",0
298,<S2SV_ModStart> [ 1 ] && screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_HIGHBITDEPTH ) { if ( screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_HIGHBITDEPTH ) { if ( screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_HIGHBITDEPTH ) { if ( screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_HIGHBITDEPTH ) { if ( screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_HIGHBITDEPTH ) { if ( screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_HIGHBITDEPTH ) { if ( screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_HIGHBITDEPTH ) { if ( screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_HIGHBITDEPTH ) { if ( screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_HIGHBITDEPTH ) { if ( screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_HIGHBITDEPTH ) { if ( screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_HIGHBITDEPTH ) { if ( screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_HIGHBITDEPTH ),0
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart> one, offset ; size_t pixel_info_length ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; pixel_info = ( MemoryInfo * ) alloc ( pixel_info_length ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) alloc ( pixel_info_length ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) alloc ( pixel_info_length ) ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; pixel_info = ( MemoryInfo * ) alloc ( pixel_info_length ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) alloc ( pixel_info_length ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) alloc ( pixel_info_length ) ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException",0
301,"<S2SV_ModStart> { httpSetHostName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } if ( value ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; }",0
302,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
303,<S2SV_ModStart>! job_id || <S2SV_ModEnd>! prev_hash || <S2SV_ModStart>! prev_hash || <S2SV_ModEnd>! coinbase1 || <S2SV_ModStart>! coinbase2 || <S2SV_ModEnd>! bbversion || <S2SV_ModStart>! ntime ) { free ( header ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ;,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { _Py_IDENTIFIER ( __dict__ ) ; <S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart>, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } <S2SV_ModStart> dict ) { if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; return NULL ; } <S2SV_ModStart> dict ) { if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } } if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } <S2SV_ModStart> dict ) { if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; return NULL ; } if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; }",0
306,"<S2SV_ModStart> USB_DT_OTG, ( struct usb_descriptor * ) & desc ) ; if (! desc ) return 0 ; if (! ( desc -> bmAttributes & USB_OTG_HNP ) ) { dev_info ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %s <S2SV_blank> HNP <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; if ( port1 == bus -> otg_port ) { err = usb_control_msg ( udev, usb_sndctrlpipe ( udev, 0 ), USB_REQ_SET_FEATURE, 0, USB_DEVICE_B_ALT_HNP_SUPPORT, 0, NULL, 0, USB_CTRL_SET_TIMEOUT ) ; if ( err < 0 ) dev_err ( & udev -> dev, ""set <S2SV_blank> a_alt_hnp_support <S2SV_blank> failed: <S2SV_blank> %d\\n"", err ) ; } else { err = usb_control_msg ( udev, usb_sndctrlpipe ( udev, 0 ), USB_REQ_SET_",0
307,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> ) ; case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_IOC_ID : { u64 id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_IOC_SET_OUTPUT : { int ret ; if ( arg!= - 1 ) { struct fd output ; ret = perf_event_set_output ( event, output_event ) ; if ( ret ) return ret ; output_event = output. file -> private_data ; ret = perf_event_set_output ( event, output_event ) ; } else { ret = perf_event_set_output ( event, NULL ) ; } return ret ; } <S2SV_ModEnd> case PERF_EVENT_IOC_SET_FILTER :",0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE uv_mode = read_intra_mode ( cm, <S2SV_ModEnd> cm -> fc <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
309,"<S2SV_ModStart> - EINVAL ; if (! sha -> digest ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4",0
310,"<S2SV_ModStart> iv ) ; if ( strlen ( key ) > EVP_MAX_KEY_LENGTH ) ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( unsigned int ) sizeof ( key ) ) ) { ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( unsigned int ) sizeof ( key ) ) ; ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( unsigned int ) ( sizeof ( key ) - 1 ) ) ) ) { ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( unsigned int ) sizeof ( key ) ) ) ; ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( unsigned int ) sizeof ( key ) ) ) ; }",0
311,"<S2SV_ModStart> s ) ; memory_region_init_io ( & s -> mmio, & s -> irq, OBJECT ( s ), & stellaris_enet_ops, s, ""stellaris_enet"", 0x1000 ) ; sysbus_init_irq ( sbd, & s -> irq ) ; memory_region_init_io ( & s -> mmio, & s -> irq, OBJECT ( s ), & stellaris_enet_ops, s, ""stellaris_enet"", 0x1000 ) ; sysbus_init_mmio ( sbd, & s -> mmio ) ; sysbus_init_irq ( sbd, & s -> irq ) ; s -> nic = NULL ; qemu_format_nic_info_str ( qemu_get_queue ( s -> nic ), ""stellaris_enet_info"" ) ; qemu_format_nic_info_str ( qemu_get_queue ( s -> nic ), s -> conf. macaddr. a ) ; qemu_format_nic_info_str ( qemu_get_queue ( s -> nic ), s ->",0
312,<S2SV_ModStart> case NGHTTP2_IB_READ_CLIENT_ID : if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_ID ; } <S2SV_ModStart> case NGHTTP2_IB_READ_CLIENT_ID : if ( iframe -> payloadleft < NGHTTP2_CLIENT_ID_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_ID ; } iframe -> payloadleft -= NGHTTP2_CLIENT_ID_LEN ; if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_ID ; } <S2SV_ModStart> case NGHTTP2_IB_READ_CLIENT_ID : if ( iframe -> payloadleft < NGHTTP2_CLIENT_ID_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_ID ; } iframe -> state = NGHTTP2_IB_READ_CLIENT_ID ; if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_ID ; } iframe -> state,0
313,"<S2SV_ModStart> x86_pmu. max_pebs_events = max_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. max_pebs_events = max_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. max_counters = max_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. max_counters = max_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. max_counters = max_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. max_counters = max_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. max",0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_reader <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> t ] ; vpx_writer <S2SV_ModEnd> * const b <S2SV_ModStart> & vp9_extra_bits [ t ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) ; int i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) ;",0
315,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer saved_wb ; write_uncompressed_header <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> 16 ) ; vpx_clear_system_state ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,"<S2SV_ModStart> ) { struct ikev2_id <S2SV_ModEnd> id ; int <S2SV_ModStart> * typedata ; <S2SV_ModEnd> ND_TCHECK ( * <S2SV_ModStart> * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } id_len = ntohs ( id. h. len ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) ) goto trunc ; } switch ( id. type ) { case ID_IPV4_ADDR : ND_PRINT ( ( ndo",0
318,"<S2SV_ModStart> ; if (! jas_safe_size_mul3 ( cmpt -> width, cmpt -> height ) ) { goto error ; } <S2SV_ModEnd> jas_tvparser_settag ( tvp <S2SV_ModStart> ; if (! jas_safe_size_mul3 ( cmpt -> width, cmpt -> height, cmpt -> width ) ) { goto error ; } <S2SV_ModEnd> jas_tvparser_settag ( tvp <S2SV_ModStart> ; if (! jas_safe_size_mul3 ( cmpt -> width, cmpt -> height, cmpt -> width, cmpt -> height ) ) ) { goto error ; } <S2SV_ModEnd> jas_tvparser_settag ( tvp <S2SV_ModStart> ; if (! jas_safe_size_mul3 ( cmpt -> width, cmpt -> height, cmpt -> width ) ) ) { goto error ; } <S2SV_ModEnd> jas_tvparser_settag ( tvp <S2SV_ModStart> ; if (! jas_safe_size_mul3 ( cmpt -> width, cmpt -> height, cmpt -> width, cmpt -> height ) ) { goto error ; } <S2SV_ModEnd> jas_tvparser_settag ( tvp",0
319,"<S2SV_ModStart> urb ) ; if ( ret < 0 ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_urb ( urb ) ; ret = - EINVAL ; goto err_free_urb_to_pipe ; }",0
320,"<S2SV_ModStart>, fft_jmp ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1 ; WORD32 x_l2_0, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1 ; WORD32 x_l1_0, x_l1_1 ; WORD32 x_l2_0, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_l1_0, x_l1_1 ; WORD32 x_l1_0, x_l1_1 ; WORD32 x_l1_0, x_l1_1 ; WORD32 x_l1_0, x_l",0
321,<S2SV_ModStart> mntent ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ;,0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( req ) ) ; rb_hash_aset ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; rb_hash_aset ( env, rack_name_val, req_rack_name ( req ) ) ; rb_hash_aset ( env, rack_url_scheme_val, rack_url_scheme_val ) ; rb_hash_aset ( env, rack_input_val, req_rack_input ( req ) ) ; rb_hash_aset ( env, rack_errors_val, req_rack_errors ( req ) ) ; rb_hash_aset ( env, rack_multiprocess_val, Qfalse ) ; rb_hash_aset ( env, rack_run_once_val, Qfalse ) ; rb_hash_aset ( env, rack_logger_val, req_rack_logger ( req ) ) ; rb_hash_aset ( env, rack_hijackq_val, self ) ; rb_hash_aset ( env, rack_hijack_io_val, self ) ;",0
324,"<S2SV_ModStart> endif # endif MYSQL_BIND * bind, * bind_end ; imp_sth_phb_t * fbind <S2SV_ModStart> ; # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = FALSE ; if ( attribs ) { svp = DBD_ATTRIB_GET_SVP ( attribs, ""mysql_server_prepare"", 20 ) ; if ( svp ) { do_error ( sth, 2000, ""MySQL <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000"" ) ; return 0 ; } } # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = TRUE ; if ( attribs ) { svp = DBD_ATTRIB_GET_SVP ( attribs, ""async"", 5 ) ; if ( svp ) { do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000"" ) ; return 0 ; } # if MYSQL_VERSION_ID >=",0
325,"<S2SV_ModStart> int need = 0 <S2SV_ModEnd> ; char * <S2SV_ModStart> screen, { if ( need > screen -> max_width / 4 ) { SysError ( ERROR_BMALLOC2 ) ; return ; } <S2SV_ModStart> *= 4 ; if ( need > screen -> max_width / 4 ) { SysError ( ERROR_BMALLOC2 ) ; return ; } <S2SV_ModStart> screen, { if ( need > screen -> max_width / 4 ) { SysError ( ERROR_BMALLOC2 ) ; return ; } <S2SV_ModStart> *= 4 ; if ( need > screen -> max_width / 4 ) { SysError ( ERROR_BMALLOC2 ) ; return ; } <S2SV_ModStart> Screen, { if ( need > screen -> max_width / 4 ) { SysError ( ERROR_BMALLOC2 ) ; return ; } <S2SV_ModStart> Screen, { if ( need > screen -> max_width / 4 ) { SysError ( ERROR_BMALLOC2 ) ; return ; }",0
326,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> = 0.0000001 ; # if defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined,0
327,"<S2SV_ModStart> cycles ) ; if ( unlikely ( crng_init == 0 ) ) { if ( ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; } <S2SV_ModEnd> if ( (",0
328,"<S2SV_ModStart> ( str, jslGetTokenValueAsString <S2SV_ModEnd> ( ), <S2SV_ModStart> ( str, jslGetTokenValueAsString <S2SV_ModEnd> ( ), <S2SV_ModStart> ( str, jslGetTokenValueAsString <S2SV_ModEnd> ( ),",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_tree <S2SV_ModEnd> convert_distribution ( unsigned <S2SV_ModStart>, tree, branch_ct, num_events ) { if ( tree [ i ] <= 0 ) left = num_events [ - tree [ i ] ] ; else left = num_events [ - tree [ i ] ] ; if ( tree [ i + 1 ] <= 0 ) right = num_events [ - tree [ i + 1 ] ] ; else right = num_events [ - tree [ i + 1 ] ] ; if ( tree [ i ] <= 0 ) left = num_events [ - tree [ i ] ] ; else left = convert_distribution ( tree [ i ], tree, branch_ct, num_events ) ; if ( tree [ i + 1 ] <= 0 ) right = num_events [ - tree [ i + 1 ] ] ; if ( tree [ i + 1 ] <= 0 ) right = num_events [ - tree [ i + 1 ] ] ; else right = num_events [ - tree [ i + 1 ] ] ; if ( tree [ i ] <= 0 ) left = num_events [ - tree [ i ] ] ; else left",0
332,<S2SV_ModStart> s2 ) { if ( strlen ( s1 )!= strlen ( s2 ) ) return - 1 ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
333,"<S2SV_ModStart> ) ) { if ( strlen ( arg1 ) > 20 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> name <S2SV_blank> \\""%s\\"""", arg1 ) ; ioerror ( ""help"" ) ; return 1 ; } <S2SV_ModStart> ) ) { if ( strlen ( arg1 ) > 20 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> name <S2SV_blank> \\""%s\\"""", arg1 ) ; ioerror ( ""help"" ) ; return 1 ; } <S2SV_ModStart> ) ) { if ( strlen ( arg1 ) > 20 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> name <S2SV_blank> \\""%s\\"""", arg1 ) ; ioerror ( ""help"" ) ; return 1 ; } <S2SV_ModStart> ) ) { if ( strlen ( arg1 ) > 20 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> name <S2SV_blank> \\""%s\\"""", arg1 ) ; ioerror ( ""help"" ) ; return 1 ; } <S2SV_ModStart> ) ) { if ( strlen ( arg1 ) > 20 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> name <S2SV_blank> \\""%s\\"""",",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,"<S2SV_ModStart> md -> raw_packet, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs",0
336,<S2SV_ModStart> u4_num_Bytes ) ; if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_Bytes = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else { if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_Bytes = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else { if ( ps_op -> s_ivd_video_decode_op_t. u4_num_Bytes > ps_ip -> s_ivd_video_,0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_string ( cJSON <S2SV_ModStart> { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> valuestring ) ; } <S2SV_null> <S2SV_null>,0
338,"<S2SV_ModStart> 1 ) res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ; else if (! ( ctx -> iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ; else if (! ( ctx -> iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ; else if (! ( ctx -> iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ; else { int i ; for ( i = num_enc - 1 ; i >= 0 ; i -- ) { if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) ) break ; ctx --",0
339,"<S2SV_ModStart> cols0 ) ; } else if ( arg1 == 1 ) { win_maximise ( - 1 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( - 1 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( <S2SV_ModStart> ) ; } else if ( arg1 == 1 ) { win_maximise ( - 1 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( - 1 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( - 1 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 1 ) { win_maximise ( - 1 ) ; win_set_chars ( rows0, rows0 ) ; } else if ( arg1 == 0 ) { win_maximise ( - 1 ) ; win_set_chars ( rows0,",0
340,<S2SV_ModStart> ; i < <S2SV_ModEnd> cols + 17 <S2SV_ModStart> ++ ) s [ i ] = 0 ; for ( i = cols ; i < cols + 17 ; i ++ ) s [ i ] = s [ cols - 1 ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { d [ c & 15 ] = 0 ; d [ c & 15 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] - s [ c - 8 ] ; int sumsq = s [ c ] * s [ c ] ; if ( sumsq * 15 - sum * 15 < flimit ) { d [ c & 15 ] = ( 8 + sum + s [ c ] ) >> 4 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [,0
341,"<S2SV_ModStart> height ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif i -> posX = i -> parent -> width ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX = i -> parent -> width - i -> width ; # endif i -> posY = i -> parent -> height ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank>",0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
343,<S2SV_ModStart> = value ; if ( ps_sps -> i1_sps_valid ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ret!= ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ret!= ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ret!= ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ) IHEVCD_INVALID_HEADER ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ret!= ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; },0
344,"<S2SV_ModStart> ) ) { switch ( c ) { case'<S2SV_blank>': break ; case 'e' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'E' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'T' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case'm' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_marker ( psf, data ) ; } ; count += 1 ; break ; case '2' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else { header_put_le_long ( psf, data ) ; } ; count += 2 ; break ; case '3' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_3byte ( psf, data ) ; } else",0
345,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
346,"<S2SV_ModStart> 0 ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",1
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> : return vp9_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> : return vp9_mse16x8 <S2SV_ModEnd> ; default : <S2SV_ModStart> : return vp9_mse8x16 <S2SV_ModEnd> ; } },0
348,"<S2SV_ModStart> ) ; } if ( padata -> pa_type == KRB5_PA_PK_AS_REQ ) { retval = return_pkinit_req ( context, request, reply, padata, reqp, reqp9, cb, moddata, modreq ) ; if ( retval == 0 ) retval = return_pkinit_req ( context, request, reply, reqp9, cb, rock, moddata, modreq ) ; if ( retval == 0 ) retval = return_pkinit_req ( context, request, reply, reqp9, cb, rock, moddata, modreq ) ; if ( retval == 0 ) retval = return_pkinit_req ( context, request, reply, reqp9, cb, moddata, modreq ) ; if ( retval == 0 ) retval = return_pkinit_req ( context, request, reply, reqp9, cb, rock, moddata, modreq ) ; if ( retval == 0 ) retval = return_pkinit_req ( context, request, reply, reqp9, cb, rock, moddata, modreq, moddata, modreq ) ; if ( retval == 0 ) retval = return_",0
349,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_",0
350,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
351,<S2SV_ModStart> serviceId == EXTRACT_32BITS <S2SV_ModEnd> ( & rxh,0
352,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, INFO, ""info: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> = <S2SV_blank> %s\\n"", adhoc_start -> ssid ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; } else { memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX",0
353,"<S2SV_ModStart> sfe -> valuelen > XFS_ATTR_SF_MAXNAMELEN ) { error = context -> put_listent ( context, sfe -> flags, NULL, 0, & sfe -> nameval [ 0 ] ) ; if ( context -> put_listent ) { error = context -> put_listent ( context, sfe -> flags, NULL, 0, & sfe -> nameval [ 0 ] ) ; if ( context -> put_listent ( context, sfe -> flags, NULL, 0, & sfe -> valuelen ) ; if ( context -> put_listent ( context, sfe -> flags, NULL, 0, & sfe -> nameval [ 0 ] ) ; if ( context -> put_listent ) { error = context -> put_listent ( context, sfe -> flags, NULL, 0, & sfe -> nameval [ 0 ] ) ; if ( context -> put_listent ( context, sfe -> flags, NULL, 0, & sfe -> valuelen ) ; if ( context -> put_listent ( context, sfe -> flags, NULL, 0, & sfe -> nameval [ 0 ] ) ; if",0
354,"<S2SV_ModStart> = data ; struct l2cap_conf_rfc rfc ; BT_DBG ( ""sk <S2SV_blank> %p"", sk ) ; req -> dcid = cpu_to_le16 ( pi -> dcid ) ; req -> max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; req -> retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; req -> monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; req -> max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; req -> max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; req -> retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; req -> retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; req -> max_pdu_size = cpu",0
355,"<S2SV_ModStart> { do { if ( r <= 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_WAITALL ) ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } }",0
356,<S2SV_ModStart> u1_nal_ref_idc ) ; if ( ( u1_nal_ref_idc < 0 ) || ( u1_nal_ref_idc > ps_dec -> u1_nal_ref_idc_max ) || ( u1_nal_ref_idc > ps_dec -> u1_nal_ref_idc_max ) || ( u1_nal_ref_idc > ps_dec -> u1_nal_ref_idc_max ) || ( u1_nal_ref_idc > ps_dec -> u1_nal_ref_idc_max ) || ( u1_nal_ref_idc_max > ps_dec -> u1_nal_ref_idc_max ) || ( u1_nal_ref_idc_max > ps_dec -> u1_nal_ref_idc_max ) || ( u1_nal_ref_idc_max > ps_dec -> u1_nal_ref_idc_max ) ) { return ERROR_INCOMPLETE_FRAME,0
357,"<S2SV_ModStart>!= 0 ) { mprAddItem ( app -> formData, sclone ( pair ) ) ; pair = stok ( 0, ""&"", & tok ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
358,"<S2SV_ModStart> * open_stateid, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode = fmode & ( FMODE_READ | FMODE_WRITE ) ; <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, & deleg_cur <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, & deleg_cur <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, & deleg_cur <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, & deleg_cur",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> * xd, int64_t * out_rate_sum, int64_t * out_dist_sum ) { # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ; } else { vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], & rate, & dist ) ; } } else { int64_t rate ; int64_t dist ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist",0
361,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
362,"<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( <S2SV_ModStart>'<S2SV_blank>') || ( * ptr == '\\t' ) ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; <S2SV_ModStart> } } if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; ( void ) strcpy ( * ret_username, username ) ; return ( PAM_SUCCESS ) ; }",0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { vpx_reader <S2SV_ModEnd> * r = <S2SV_ModStart> return vpx_read_tree ( r <S2SV_ModEnd>, vp9_segment_tree,",0
364,"<S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; src_ptr2 += src_stride ; } } src_ptr1 = src - extend_left ; src_ptr2 = src + src_stride * ( height - 1 ) - extend_left ; dst_ptr1 = src + src_stride * ( height - 1 ) - extend_left ; dst_ptr2 = src + src_stride * ( height - 1 ) - extend_left ; for ( i = 0 ; i < extend_right ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_top ; ++ i ) { memcpy ( dst_ptr2, src_ptr2, linesize ) ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_bottom ; ++ i ) { memcpy ( dst",0
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,"<S2SV_ModStart> depth ++ ; if ( depth == 0 ) { ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) sizeof ( s ) ) ) ; return ( buf ) ; } buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) { ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"" ) ) ; return ( NULL ) ; } ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) sizeof ( s ) ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) sizeof ( s ) ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) sizeof ( s ) ) ) ; return ( buf ) ; } if (! depth && buf < maxbuf ) { ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"" ) ) ; return (",0
367,"<S2SV_ModStart> ; } n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n < ( length + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; } return ERROR_FAILURE ; } netBufferRead ( context -> txBuffer, buffer, offset, length ) ; header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE <S2SV_ModEnd> ) ; if",0
368,"<S2SV_ModStart> ; # endif # ifdef MONO_HAS_SEMAPHORES mono_semaphore_lock ( ) ; if ( domains_to_finalize ) { g_assert ( g_slist_remove ( domains_to_finalize, req ) == 0 ) ; g_assert ( g_slist_empty ( domains_to_finalize ) == 0 ) ; g_assert ( g_slist_empty ( domains_to_finalize ) == 0 ) ; g_assert ( g_slist_empty ( domains_to_finalize ) == 0 ) ; g_assert ( g_slist_empty ( domains_to_finalize ) == 0 ) ; g_assert ( g_slist_empty ( domains_to_finalize ) == 0 ) ; g_assert ( g_slist_empty ( domains_to_finalize ) == 0 ) ; g_assert ( g_slist_empty ( domains_to_finalize ) == 0 ) ; g_assert ( g_slist_empty ( domains_to_finalize ) == 0 ) ; g_assert ( g_slist_empty ( domains_to_finalize ) == 0 ) ; g_assert ( g",0
369,"<S2SV_ModStart>, x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_10, x_11, x_12, x_13, x_14, x_15, <S2SV_ModStart> x0 ++ ; x_10 = x_0 + x_2 ; x_11 = x_1 + x_3 ; x_12 = x_4 + x_6 ; x_11 = x_5 + x_7 ; x_12 = x_1 + x_3 ; x_11 = x_4 + x_6 ; x_12 = x_5 + x_7 ; x_13 = x_4 + x_7 ; x_14 = x_5 + x_6 ; x_15 = x_5 + x_7 ; x_12 = x_1 + x_3 ; x13 = x_4 + x_6 ; x13 = x_5 + x_7 ; x13 = x_1 + x_3 ; x14 = x_4 + x_6 ; x14 = x_5 +",0
370,<S2SV_ModStart> ( unlikely ( pmd_trans_huge <S2SV_ModEnd> ( * pmd,0
371,"<S2SV_ModStart>, frames ; int width, height, target_width, target_height ; if ( argc < 5 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open",0
372,<S2SV_ModStart> num_fields ) { <S2SV_ModEnd> _Py_IDENTIFIER ( _attributes,0
373,"<S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> VPX_CODEC_MEM_ERROR ; } priv = vpx_calloc ( 1, sizeof ( struct vpx_codec_alg_priv ) ) ; if (! priv ) { return VPX_CODEC_MEM_ERROR ; } ctx -> priv -> sz = sizeof ( * ctx -> priv ) ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> init_flags = 0 ; cfg = & ctx -> config ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage ; i ++ ) { priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg. pkt_list = & priv -> pkt_list. head ; if ( priv -> cx_data_sz < 32768 ) priv -> cx_data_sz = 32768 ; if ( priv -> cx_data_sz < 32768 ) priv -> cx_data_sz = 32768 ; if ( priv -> cx_data_sz < 32768 ) priv -> cx_data_sz = 32768 ;",0
374,"<S2SV_ModStart> ; } if ( ( ret = s -> decode ( gb, rc, cumfr, cnt_c, totfr ) ) < 0 ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 16 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; pixel -> lookup [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; for ( i = 0 ; i < 16 ; i ++ ) { unsigned",0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> sizes ) ) ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ ctx -> fragments. count ] = data ; ctx -> fragments. sizes [ ctx -> fragments. count ] = data_sz ; ctx -> fragments. count ++ ; if ( ctx -> fragments. count > ( 1 << EIGHT_PARTITION ) + 1 ) { ctx -> fragments. count = 0 ; * res = VPX_CODEC_INVALID_PARAM ; return - 1 ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ ctx -> fragments. count ] = data ; ctx -> fragments. sizes [ ctx -> fragments. count ] = data_sz ; ctx -> fragments. count ++ ; if ( ctx -> fragments. count > ( 1 << EIGHT_PARTITION ) + 1 ) { ctx -> fragments. count = 0 ; * res = VPX_CODEC_INVALID_PARAM ; return - 1 ; } return 0 ; } <S2SV_ModEnd> if (!,0
376,"<S2SV_ModStart> ; if ( udf_lookup_entry ( fe, efe ) < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino ) ; goto out ; } if ( udf_lookup_entry ( efe, fe ) < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino ) ; goto out ; } if ( udf_lookup_entry ( fe, efe ) < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino ) ; goto out ; } if ( udf_lookup_entry ( fe, efe ) < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino ) ; goto out ; } if ( udf_lookup_entry ( fe, efe ) < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>",0
377,"<S2SV_ModStart> data ) { uint16_t status ; <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { int n = 0 ; ptr = fmt ; while ( * ptr!= '\\0' ) if ( * ptr == '%' ) ptr ++ ; else if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } else { if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; else return 1 ; } } else { if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr ==,0
379,"<S2SV_ModStart> ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakWindowsTest"", IPV6DefragSturgesNovakWindowsTest ) ; U",0
380,"<S2SV_ModStart> ( object_data ) { new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( object_length + add_v1_record > sizeof ( new_object. data ) ) { r = SC_ERROR_OUT_OF_MEMORY ; } if ( object_length + add_v1_record > sizeof ( new_object. data ) ) { r = SC_ERROR_OUT_OF_MEMORY ; } if ( object_length + add_v1_record > sizeof ( new_object. data ) ) { r = SC_ERROR_OUT_OF_MEMORY ; } if ( add_v1_record ) { new_object. data [ 0 ] = COOLKEY_V1_OBJECT ; new_object. length ++ ; } memcpy ( & new_object. data [ add_v1_record ], object_data, object_length ) ; }",0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,"<S2SV_ModStart> ; } } if ( p_sys -> p_format -> interlaced ) { p_sys -> p_format -> interlaced =! p_sys -> p_format -> interlaced ; p_sys -> p_format -> top_field_first =! p_sys -> p_format -> top_field_first ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""top_field_first"",! p_sys -> p_format -> interlaced ) ; if (! p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""top_field_first"",! p_sys -> p_format -> top_field_first ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""top_field_first"",! p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, """,0
384,"<S2SV_ModStart> ; if (! mp_path_exists ( mf -> names [ 0 ] ) ) { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ 0 ] ) ; } else if (! mp_path_exists ( mf -> names [ 0 ] ) ) { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ 0 ] ) ; } mp_tarray_append ( mf -> names, mf -> names [ 0 ] ) ; if (! mp_path_exists ( mf -> names [ 0 ] ) ) { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ 0 ] ) ; } else { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ 0 ] ) ; } if (! mp_path_exists ( mf -> names [ 0 ] ) ) { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ 0 ] ) ; } else { mp",0
385,"<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> len ) ; if ( a -> num_names > 0 ) { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. len = GETINT32 ( buf + idx ) ; idx += 4 ; a -> names [ i ]. data = CHECKED_XMALLOC ( unsigned char, a -> names [ i ]. len ) ; for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; } } else { size_t i ; a -> names = CHECKED_XMALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i",0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; YV12_BUFFER_CONFIG * fb ; # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { yuvconfig2image ( & data -> img, NULL, NULL ) ; return VPX_CODEC_OK ; } else { return VPX_CODEC_INVALID_PARAM ; } # endif <S2SV_ModStart> * fb ; # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( ctx -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { yuvconfig2image ( & data -> img, fb, NULL ) ; return VPX_CODEC_OK ; } else { return VPX_CODEC_INVALID_PARAM ; } # endif <S2SV_ModStart> * fb ; # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( ctx -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH )",0
388,"<S2SV_ModStart> return AVERROR_INVALIDDATA ; } if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_",0
389,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) expr1 = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; else expr1 = ast_for_expr ( c, CHILD ( n, 0 ) ) ; if (! expr1 ) return NULL ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; switch ( TYPE ( CHILD ( n, 1 ) ) ) { expr_ty e = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; if (! e ) return NULL ; return Expr ( e, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; } ch = CHILD ( n, 2 ) ; if ( TYPE ( CHILD ( n, 3 ) ) == type_comment ) expr1 = ast_for_testlist ( c, CHILD ( n, 3 ) ) ; if (! expr1 ) return NULL ; switch ( expr1 -> kind ) { case Name_kind : case Attribute",0
390,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y <S2SV_ModEnd>, int mc_avg_y_stride <S2SV_ModStart> unsigned char * running_avg_y <S2SV_ModEnd>, int avg_y_stride <S2SV_ModStart> unsigned char * mc_avg_y <S2SV_ModEnd>, int avg_y_stride <S2SV_ModStart> unsigned char * mc_avg_y <S2SV_ModEnd>, int avg_y_stride <S2SV_ModStart> char * running_avg_y <S2SV_ModEnd>, int i <S2SV_ModStart> ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = mc_running_avg_y [ c ] - mc_running_avg_y [ c ] ; int absdiff = abs ( diff ) ; if ( absdiff >= 4 && absdiff <= 7 ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ; } else { if ( absdiff >= 8",0
391,"<S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" <S2SV_ModEnd> ) ; if",0
392,<S2SV_ModStart> = 0 ; # if XTENSA_HAVE_COPROCESSORS coprocessor_flush_all ( ti ) ; coprocessor_release_all ( ti ) ;,0
393,<S2SV_ModStart> size ) ; <S2SV_ModEnd> message -> srcIpAddr <S2SV_ModStart> -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; # if ( ETH_SUPPORT == ENABLED ) message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; message -> destMacAddr = queueItem -> ancillary. destMacAddr ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif,0
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> if ( xop <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) { struct se_device <S2SV_ModEnd> * remote_dev ; <S2SV_ModStart> = xop -> src_dev ; pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; } else { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; }",0
395,"<S2SV_ModStart> int error ; struct ext2_xattr_entry * ei = EXT2_I ( inode ) -> i_mb_cache ; <S2SV_ModStart> get_bh ( new_bh ) ; ei -> i_mb_cache = EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> new_bh ) ; if ( ei -> i_mb_cache == EXT2_SB ( sb ) -> s_mb_cache ) { get_bh ( new_bh ) ; ei -> i_mb_cache = EXT2_SB ( sb ) -> s_mb_cache ; } else if ( ei -> i_mb_cache == EXT2_SB ( sb ) -> s_mb_cache ) { get_bh ( new_bh ) ; ei -> i_mb_cache = NULL ; } <S2SV_ModStart> cleanup : if ( ei -> i_mb_cache == EXT2_SB ( sb ) -> s_mb_cache ) { ext2_xattr_cache_delete_block ( EXT2_SB ( sb ) -> s_mb_cache, ei -> i_mb_cache, ei -> i_mb_cache, ei -> i_mb_cache,",0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> map ) { vpx_active_map_t * const active_map = va_arg ( args, vpx_active_map_t * ) <S2SV_ModEnd> ctx -> cpi <S2SV_ModStart> cpi, active_map <S2SV_ModEnd>, map ->",0
397,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> rows, image -> columns ) ; ( void ) SetImageExtent ( image, image -> rows, image -> columns ) ; ( void ) SetImageExtent ( image, image -> rows, image -> columns ) ; ( void ) SetImageExtent ( image, image -> rows, image -> columns ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image ->",0
398,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
399,"<S2SV_ModStart> ; imsy = 2048 ; dmbuf = ( unsigned char * ) AcquireQuantumMemory ( imsx * imsy, 1 ) ; if ( dmbuf == NULL ) { return ( MagickFalse ) ; } for ( n = 0 ; n < 16 ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 255, 255, 255 ) ; } for ( i = 0 ; i < 24 ; i ++ ) { sixel_palet [ n ] = SIXEL_RGB ( r * 51, g * 51, b * 51 ) ; } for ( i = 0 ; i < 24 ; i ++ ) { sixel_palet [ n ] = SIXEL_RGB ( r * 51, g * 51, b * 51 ) ; } for ( i = 0 ; i < 24 ; i ++ ) { sixel_palet [ n ] = SIXEL_RGB ( r * 51, g * 51, b * 51 ) ; } for ( i = 0 ; i < 24 ; i ++ ) { sixel_palet [ n ] = SIXEL_RGB ( r * 51, g * 51, b * 51 )",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; YV12_BUFFER_CONFIG sd ; if ( ctx -> frame_parallel_decode ) { return vpx_copy_reference_dec ( ctx -> pbi, ( VP9_REFFRAME ) frame -> frame_type, & sd ) ; } else { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
401,"<S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, u1_num_mbsNby2, u1_tfr_n_mb, u1_slice_end, <S2SV_ModEnd> u1_is_idr_slice, u1_is_idr_slice <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_tfr_n_mb, u1_is_idr_slice, u1_is_idr_slice, u1_num_mbsNby2, u1_num_mbsNby2, u1_tfr_n_mb, u1_slice_end, u1_is_idr_slice, u1_is_idr_slice, u1_tfr_n_mb, u1_slice_end, u1_tfr_n_mb, u1_is_idr_slice, u1_is_idr_slice, u1_num_mbsNby2, u1_num_mbsNby2, u1_end_of_row,",0
402,"<S2SV_ModStart>, u4_y_offset ; IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; <S2SV_ModStart> B_PIC ) { if ( ps_dec -> u2_mb_x < ps_dec -> u2_frame_width ) { ps_dec -> u2_mb_x = ps_dec -> u2_frame_width ; ps_dec -> u2_mb_y = ps_dec -> u2_frame_width ; } else { ps_dec -> u2_mb_x = ps_dec -> u2_frame_width ; } } if ( ps_dec -> e_pic_type == B_PIC ) { if ( ps_dec -> u2_mb_x < ps_dec -> u2_frame_width ) { ps_dec -> u2_mb_x = ps_dec -> u2_frame_width ; ps_dec -> u2_mb_y = ps_dec -> u2_frame_width ; } } else { ps_dec -> u2_mb_x = ps_dec -> u2_frame",0
403,"<S2SV_ModStart> VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vpx_yv12_copy_frame ( cfg, sd ) ; } else if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; }",0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,"<S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> const TX_SIZE tx_size <S2SV_ModStart> = plane? get_uv_tx_size ( mbmi ) : mbmi -> tx_size ; const BLOCK_SIZE plane_bsize = get_plane_block_size ( bsize, pd ) ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ plane_bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ plane_bsize ] ; int max_blocks_wide = num_4x4_w * num_4x4_h ; int max_blocks_high = num_4x4_w * num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling",0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
407,"<S2SV_ModStart> nrow ) { if ( row + rowsperstrip > h ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"", ""%s"", ""row <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
408,"<S2SV_ModStart> } } } if ( TYPE ( CHILD ( n ) )!= TYPE_COMMENT ) { Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n ) ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n ) ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n ) ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n ) ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n ) ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n ) ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n ) ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n ) ) ) ; assert ( 0 ) ; return 0 ; }",0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
410,<S2SV_ModStart> number ) ; if ( num & ( 1 << ( number - 1 ) ) ) return num - ( 1 << ( number - 1 ) ) ; else return num ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
411,"<S2SV_ModStart> plane ] ; unsigned int x = vpx_img_plane_x ( img, plane ) ; unsigned int y = vpx_img_plane_y ( img, plane ) ; unsigned int y2 = vpx_img_plane_y ( img, plane ) ; unsigned int w = vpx_img_plane_width ( img, plane ) ; unsigned int h = vpx_img_plane_height ( img, plane ) ; unsigned int x = vpx_img_plane_x ( img, plane ) ; unsigned int y2 = vpx_img_plane_y ( img, plane ) ; unsigned int w = vpx_img_plane_width ( img, plane ) ; unsigned int h = vpx_img_plane_height ( img, plane ) ; unsigned int y2 ; for ( y2 = 0 ; y2 < h ; ++ y2 ) { if ( fread ( buf, 1, x, file )!= x ) return 0 ; buf += stride ; } } return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
412,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; MD5_Init ( & md5_ctx ) ; MD5_Update ( & md5_ctx, & avp -> type, sizeof ( avp ->",0
413,"<S2SV_ModStart> 0 ) { if ( arg < 0 || arg > EVP_CTR_SIZE ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_INVALID_PARAMETER ) ; return 0 ; } <S2SV_ModStart> 1 ) { if ( arg < 0 || arg > EVP_CTR_SIZE ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_INVALID_PARAMETER ) ; return 0 ; } <S2SV_ModStart> 0 ) { if ( arg < 0 || arg > EVP_CTR_SIZE ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_INVALID_PARAMETER ) ; return 0 ; } <S2SV_ModStart> 1 ) { if ( arg < 0 || arg > EVP_CTR_SIZE ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_INVALID_PARAMETER ) ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_INVALID_PARAMETER ) ; return",0
414,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
415,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock,",0
416,"<S2SV_ModStart> cpkt. data ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; } } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ) ; signal ( SIGWINCH, sig_win",0
417,<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> ) ) ; mutt_socket_empty ( adata -> conn ) ;,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,"<S2SV_ModStart> 0 ) { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"" <S2SV_ModEnd>, 32 ) <S2SV_ModStart> 0 ) { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"" <S2SV_ModEnd>, 32 ) <S2SV_ModStart> 0 ) { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } } else { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } } else { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gps",0
420,"<S2SV_ModStart>, & rlen, 0",1
421,"<S2SV_ModStart> ; read_userfile ( <S2SV_ModEnd> ) ; if <S2SV_ModStart> 0 ] = 0 ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) mlock ( md5data, sizeof ( md5data ) ) ; if ( user -> password!= NULL ) { mlock ( md5data, sizeof ( md5data ) ) ; if ( user -> password!= NULL ) { strncpy ( md5data + 1, user -> password, 82 ) ; memcpy ( md5data + 1, user -> password, 82 ) ; memcpy ( md5data + 1 + strlen ( user -> password ), curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr ->",0
422,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
423,"<S2SV_ModStart> } ; for ( ; i < sizeof ( buf ) && str [ i ] ; i ++ ) { buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } for ( i = j = 0 ; i < sizeof ( buf ) - 1 && str [ i ] ; i ++, j ++ ) { if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } for ( i = j = 0 ; i < sizeof ( buf ) - 1 ; i ++, j ++ ) { if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } buf [ i ] = 0 ; aop. off = off ; if ( thumb < 0 || thumb > 1 ) { return - 1 ; }",0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,"<S2SV_ModStart> ) ; return ( connectErrorCode == AUTHENTICATIONERROR ) <S2SV_ModStart> TRUE ; } if ( connectErrorCode == AUTHENTICATIONERROR ) { fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; connectErrorCode = AUTHENTICATIONERROR ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; credssp_free ( transport -> credssp ) ; connectErrorCode = AUTHENTICATIONERROR ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; credssp_free ( transport -> credssp ) ; return FALSE ; }",0
426,"<S2SV_ModStart> size_t s ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } s = exif_get_short ( buf + o + 12, EXIF_BYTE_ORDER_INTEL ) ; if ( CHECKOVERFLOW ( o, buf_size, 2 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; }",0
427,<S2SV_ModStart> bd_addr ) { if ( interface_ready ( ) == FALSE ) return BT_STATUS_NOT_READY ;,0
428,"<S2SV_ModStart> int i ; size_t <S2SV_ModEnd> avail ; int <S2SV_ModStart> 4 ) ; if ( nxip < 0 || nxip > buf -> len - buf -> cursor ) goto bad_format ; expect = 8 + 8 + nxip * 8 ; if ( expect < 0 || expect > avail ) goto bad_format ; xmin = 0 ; xmax = 0 ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap -> xmin = xmin ; snap -> xmax = xmax ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; } SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( snap, TXID_SNAPSHOT_SIZE ( snap -> nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) {",0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
430,<S2SV_ModStart> - 1 ; struct oe_epoll * epoll ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; <S2SV_ModStart> = 0 ; if ( ret > ( ssize_t ) count ) { ret = - EINVAL ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
431,"<S2SV_ModStart> { errstr = parse_global_option <S2SV_ModEnd> ( CMD_INITIALIZE, <S2SV_ModStart> eof ) { s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_CACHE_MAX : * ( size_t * ) val = ms -> elf_cache_max ; return 0 ; case MAGIC_PARAM_ELF_CACHE_MAX : * ( size_t * ) val = ms -> elf_cache_max ; return 0 ; case MAGIC_PARAM_ELF_CACHE_MAX : * ( size_t * ) val = ms -> elf_cache_max ; return 0 ; case MAGIC_PARAM_ELF_CACHE_MAX : * ( size_t * ) val = ms -> elf_cache_max ; return 0 ; case MAGIC_PARAM_ELF_CACHE_MAX : * ( size_t * ) val = ms -> elf_cache_max ; return 0 ; case MAGIC_PARAM_ELF_CACHE_MAX : * ( size_t * ) val = ms -> elf_cache_max ; return 0 ;,0
433,<S2SV_ModStart> * journal = EXT4_JOURNAL <S2SV_ModEnd> ( page ->,0
434,"<S2SV_ModStart> ++ ) { if ( i + 1 >= trackCount ) {
435,"<S2SV_ModStart> ] ; int <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> ; # endif strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> = '\\0' ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> = '\\0' ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password ), pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; init_packet ( & data, MT_PTYPE_PASSWORD, md5data, 17 ) ; plen += add_control_packet ( & data, MT_CPTYPE_USERNAME, username, strlen ( username ) ) ; if ( is_a_tty && get_terminal_size ( & width, & height, & width, & height )!= - 1 ) { width = htole16 ( width, height ) ; height = htole16 ( height ) ; } if ( is_a_tty && get_terminal_size ( & width, & height )!= - 1",0
436,<S2SV_ModStart> ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; if ( _mibindexes [ i ] -> label ) SNMP_FREE ( _mibindexes [ i ] -> label ) ; if ( _mibindexes [ i ] -> label ) SNMP_FREE ( _mibindexes [ i ] -> label ) ; if ( _mibindexes [ i ] -> label ) SNMP_FREE ( _mibindexes [ i ] -> label ) ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] -> label ) ; if ( _mibindexes [ i ] -> label ) SNMP_FREE ( _mibindexes [ i ] -> label ) ; if ( _mibindexes [ i ] -> label ) SNMP_FREE ( _mibindexes [ i ] -> label ) ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_,0
437,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error",0
438,"<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=3;k=blah"" ) ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached ( ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=4;k=blah"" ) ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached ( ) ; g_hash_table_remove_all ( headers ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=3;k=blah"" ) ) ; if ( cockpit_auth_check_cookie ( test -> auth",0
439,<S2SV_ModStart> -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH,0
440,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { memset ( & xd -> left_context, 0, sizeof ( xd -> left_context ) ) ; memset ( & xd -> left_seg_context, 0, sizeof ( xd -> left_seg_context ) ) ; for ( int i = 0 ; i < BLOCK_4X4 ; ++ i ) { const int num_4x4_w = MAX ( 4, num_4x4_blocks_wide_lookup [ i ] ) ; const int num_4x4_h = MAX ( 4, num_4x4_blocks_high_lookup [ i ] ) ; const int num_4x4_blk = MAX ( 4, num_4x4_blocks_high_lookup [ i ] ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for (",0
441,"<S2SV_ModStart>, obj_tlen ; u_int <S2SV_ModEnd> hexdump ; u_int <S2SV_ModStart> hexdump ) ; if ( tlen < sizeof ( struct lmp_common_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", tlen ) ) ; return ; } if ( tlen < sizeof ( struct lmp_object_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", tlen ) ) ; return ; } if ( tlen < sizeof ( struct lmp_common_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", tlen ) ) ; return ; } if ( tlen < sizeof ( struct lmp_object_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", tlen ) ) ; return ; } if ( tlen < sizeof ( struct lmp_object_header ) ) { ND_PRINT ( ( ndo",0
442,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inc_mvs ( const <S2SV_ModStart> ) { const MV * ref = mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ] [ 0 ]. as_mv ; const int_mv diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col } ; vp9_inc_mv ( & diff, counts ) ; for ( i = 0 ; i < 2 ; ++ i ) { const MV * diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col } ; vp9_inc_mv ( & diff, counts ) ; } for ( i = 0 ; i < 2 + has_second_ref ( mbmi ) ; ++ i ) { const MV * diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col } ; vp9_inc_mv ( & diff, counts ) ;",0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,"<S2SV_ModStart> ; if ( pskb_expand_head <S2SV_ModEnd> ( skb_out,",0
445,"<S2SV_ModStart> return ; netsnmp_mibindex_load ( ) ; DEBUGMSGTL ( ( ""init_mib"", ""Seen <S2SV_blank> MIBDIRS: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> dirs <S2SV_blank>...\\n"", env_var ) ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var + 1, ENV_",0
446,"<S2SV_ModStart> ], O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } <S2SV_ModEnd> fd = open <S2SV_ModStart>, O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } <S2SV_ModStart>, EV_KEY ) ; ioctl ( fd, UI_SET_EVBIT, EV_KEY ) ; ioctl ( fd, UI_SET_EVBIT, EV_REL ) ; ioctl ( fd, UI_SET_EVBIT, EV_SYN ) ; for ( x = 0 ; key_map [ x ]. name!= NULL ; x ++ ) ioctl ( fd, UI_SET_KEYBIT, key_map [ x ]. mapped_id ) ; if ( ioctl ( fd, UI_DEV_CREATE, NULL ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> create <S2SV_blank> uinput <S2SV_blank> device"", __FUNCTION__ ) ; close",0
447,<S2SV_ModStart> ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,0
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
449,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_ctx_id_t <S2SV_ModEnd> * pctx ) <S2SV_ModStart> = 0 ; <S2SV_ModEnd> code = krb5_gss_init_context,0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; bitmapDC = CreateCompatibleDC ( hDC ) ; if ( bitmapDC == ( HDC ) NULL ) { DeleteDC ( hDC ) ; ThrowReaderException ( CoderError, ""UnableToCreateDC"" ) ; }",0
451,<S2SV_ModStart>!= START_CODE_PREFIX ) { if ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ) { if ( ps_stream -> u4_offset >= ps_stream -> u4_max_offset ) { if ( ps_stream -> u4_offset >= ps_stream -> u4_max_offset ) { if ( ps_stream -> u4_offset >= ps_stream -> u4_max_offset ) { ps_stream -> u4_offset = 0 ; } else { if ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ) { if ( ps_stream -> u4_offset >= ps_stream -> u4_max_offset ) { if ( ps_stream -> u4_offset >= ps_stream -> u4_max_offset ) { if ( ps_stream -> u4_offset >= ps_stream -> u4_max_offset ) { ps_stream -> u4_offset = 0 ; } } else { if ( ps_stream -> u4_offset >= ps_stream -> u4_max_offset ) { if ( ps_stream -> u4,0
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { kfree ( string ) ; return - EINVAL ; }",0
453,"<S2SV_ModStart> imethod ) ; if ( inflated ) { mono_reflection_inflate_generic_method ( inflated, & tmp_context ) ; mono_class_inflate_generic_method ( inflated, & tmp_context ) ; mono_class_inflate_generic_method ( inflated, & tmp_context ) ; mono_class_inflate_generic_method ( inflated, & tmp_context ) ; } else { mono_reflection_inflate_generic_method ( inflated, & tmp_context ) ; mono_reflection_inflate_generic_method ( inflated, & tmp_context ) ; mono_class_inflate_generic_method ( inflated, & tmp_context ) ; mono_reflection_inflate_generic_method ( inflated, & tmp_context ) ; mono_class_inflate_generic_method ( inflated, & tmp_context ) ; }",0
454,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; unsigned long tmp ; count = min_t ( unsigned long, count, sizeof ( buf ) ) ; if ( count > sizeof ( buf ) ) return - EINVAL ; <S2SV_ModStart> tmp ; if ( tmp < 0 ) return - EINVAL ; tmp = simple_strtol ( buf, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL",0
455,"<S2SV_ModStart> char * last_elem <S2SV_ModEnd>, * wp <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN}"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM}"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 ) ) || ( strncmp ( & name [ 2 ], ""O' )? ( __libc_enable_secure? NULL : l -> l_origin ) : _dl_platform ) ; if ( repl!= NULL && repl!= ( const char * ) -",0
456,"<S2SV_ModStart> decContainer_t ) ) ; if ( H264SwDecMalloc ( sizeof ( decContainer_t ) ) == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; }",0
457,"<S2SV_ModStart> ; } if ( iph -> ihl >= IP_OPTIONS_MAX / sizeof ( struct iphdr ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( unlikely (! opt -> optlen ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto",0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,"<S2SV_ModStart> goto errout ; if ( info -> groupbook >= ci -> books ) { int cascade = 0 ; if ( oggpack_read ( opb, 3 ) ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ;",0
460,"<S2SV_ModStart> = 0 ; krb5_key_data <S2SV_ModEnd> * key_data ; <S2SV_ModStart> err ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_length [ 1 ] = 0 ; } } for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ].",0
461,"<S2SV_ModStart> int _Unpickler_MemoPut ( <S2SV_ModEnd> UnpicklerObject * self <S2SV_ModStart> value ) { if ( idx >= self -> memo_size ) { if ( _Unpickler_ResizeMemoList ( self, idx * 2 ) < 0 ) return - 1 ; } Py_DECREF ( value ) ;",0
462,"<S2SV_ModStart> ] ) ; sqlite3_int64 <S2SV_ModEnd> zInput = sqlite3_malloc <S2SV_ModStart> nByte + 1 ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else { rc = pTab -> pMod -> xOpen ( pTab -> pTok, pCsr -> zInput, nByte, & pCsr -> pCsr ) ; if ( rc == SQLITE_NOMEM ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; if ( rc == SQLITE_NOMEM ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; if ( rc == SQLITE_OK ) { pCsr -> pCsr -> pTokenizer = pTab -> pTok ; } } else { rc = pTab -> pTok -> xOpen ( pTab -> pTok, pCsr -> zInput, nByte, & pCsr -> pCsr ) ; if ( rc == SQLITE_NOMEM ) { rc = SQLITE_NOMEM ; } }",0
463,<S2SV_ModStart> filp ) { if ( IS_ERR ( filp ) ) return PTR_ERR ( filp ) ;,0
464,"<S2SV_ModStart> * orelse, string type_comment, int <S2SV_ModEnd> lineno, int <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",1
465,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int mi_sort_index ( <S2SV_ModStart> name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf (",0
466,"<S2SV_ModStart> case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> protocol"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> protocol"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ;",0
467,"<S2SV_ModStart> UINT error ; # ifdef WITH_DEBUG_RDPEI WLog_DBG ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" PRIu16 "" <S2SV_blank> (%s) <S2SV_blank> length: <S2SV_blank> %"" PRIu32 """", eventId, rdpei_eventid_string ( eventId ), pduLength ) ; # endif",0
468,"<S2SV_ModStart> - 1 ) { <S2SV_ModStart> - 1 ) { <S2SV_ModStart> - 1 ) { <S2SV_ModStart> - 1 ) { <S2SV_ModStart> - 1 ) { <S2SV_ModStart> - 1 ) { <S2SV_ModStart> - 1 ) { <S2SV_ModStart> - 1 ) { <S2SV_ModStart> - 1 ) { <S2SV_ModStart> - 1 ) { <S2SV_ModStart> - 1 ) { <S2SV_ModStart> - 1 ) { <S2SV_ModStart> - 1 ) { <S2SV_ModStart> - 1 ) { <S2SV_ModStart> - 1 ) { <S2SV_ModStart> - 1 ) { <S2SV_ModStart> - 1 ) { zsocket_set_multicasthops ( pData -> socket, pData -> multicastHops, pData -> multicastHops, pData -> multicastHops, pData -> multicastHops, pData -> multicastHops, pData -> multicastHops, pData -> multicastHops, pData -> multicastHops, pData -> multicastHops, pData -> multicastHops, pData -> multicastHops, pData -> multicastHops, pData -> multicastHops, pData -> multicastHops, pData -> multicastHops, pData -> multicastHops, pData -> multicastHops, pData -> multicastHops, pData -> multicastHops, pData -> multicastHops, pData -> multicastHops, pData -> multicastHops,",0
469,"<S2SV_ModStart> ) ; struct ipv6_txoptions * opt <S2SV_ModStart> ) ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; fl6. flowlabel = np -> flow_label ; if ( ipv6_addr_type ( & fl6. saddr ) & IPV6_ADDR_UNICAST ) fl6. flowi6_proto = sk -> sk_protocol ; fl6. saddr = transport -> ipaddr. v6. sin6_addr ; fl6. flowlabel = np -> flow_label ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; if ( np -> opt && np -> opt -> srcrt ) { struct rt0_hdr * rt0 = ( struct rt0_hdr * ) np -> opt -> srcrt ; fl6. daddr = * rt0 -> addr ; } pr_debug ( ""%s: <S2SV_blank> skb:%p, <S2SV_blank> len:%d, <S2SV_blank> src:%pI6 <S2SV_blank> dst:%pI6\\n"", __func__, skb, fl6. saddr, fl6. daddr ) ; <S2SV_ModStart>",0
470,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
471,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> UINT32 failureCode ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read\\n"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read\\n"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read\\n"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read\\n"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Not <S2SV_blank> enough <S2SV_blank> bytes",0
472,"<S2SV_ModStart> = 0 ; bn_t t ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; switch ( operation ) { case RSA_ENC : bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { rand_bytes ( & pad, 1 ) ; } bn_add_dig ( m, m, 0 ) ; } bn_lsh ( m, m, 8 ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_ERR ; } do { m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } while ( pad!= 0 && m_len > 0 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,"<S2SV_ModStart> ; if ( ( psf = psf_allocate ( <S2SV_ModEnd> sizeof ( SF_PRIVATE <S2SV_ModStart> sf_PRIVATE ) ) ) == NULL ) { sf_errno = SFE_MALLOC_FAILED ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf -> file. mode = mode ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf -> file. mode = mode ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ;",0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> ++ j ) <S2SV_ModEnd> count [ i,0
476,"<S2SV_ModStart> cpi ) { VP9_COMMON * const cm = & cpi -> td. cm ; <S2SV_ModStart> -> act_zbin_adj = 0 ; vpx_setup_src_planes ( x, cpi -> Source, 0, 0 ) ; vpx_setup_dst_planes ( xd, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; vpx_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; vpx_memset ( xd -> above_seg_context",0
477,"<S2SV_ModStart> ; retval = htc_request_check_host_hdr <S2SV_ModEnd> ( hp ) <S2SV_ModStart> 0 ) { if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_REQ, HTTP_HDR_URL, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } if ( retval!= 0 ) { WSPR ( sp,",0
478,"<S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
479,<S2SV_ModStart> len ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> tETH_HDR ) ),0
480,<S2SV_ModStart> ; if ( ps_dec -> u4_first_slice_in_pic == 1 ) { ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 1 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 1 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; struct mpt_ioctl_iocinfo <S2SV_ModStart> MPT_ADAPTER * ioc <S2SV_ModEnd> ; struct pci_dev <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> ( MYIOC_s_ERR_FMT ""%s@%d <S2SV_blank> - <S2SV_blank> ioc%d <S2SV_blank> not <S2SV_blank> found!\\n"", MYIOC_s_ERR_FMT ""%s@%d <S2SV_blank> - <S2SV_blank> ioc%d <S2SV_blank> not <S2SV_blank> found!\\n"", MYIOC_s_ERR_FMT ""%s@%d <S2SV_blank> - <S2SV_blank> ioc%d <S2SV_blank> not <S2SV_blank> found!\\n"", MYIOC_s_ERR_FMT ""%s@%d <S2SV_blank> - <S2SV_blank> ioc%d <S2SV_blank> not <S2SV_blank> found!\\n"", MYIOC_s_ERR_FMT ""%s@%d <S2SV_blank> - <S2SV_blank> ioc%d <S2SV_blank> not <S2SV_blank> found!\\n"", MYIOC_s_ERR_FMT ""%s@%d",0
482,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
483,"<S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"",",0
484,"<S2SV_ModStart> offset ; if ( datao + 12 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; if ( datao + 2 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; if (! c ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteFuji"", sizeof ( MnoteFujiEntry ) * c ) ; return ; } n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteFuji"", sizeof",0
485,"<S2SV_ModStart>! outname ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName ) ; return 1 ; } <S2SV_ModStart>! outname ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName ) ; return 1 ; } <S2SV_ModStart>! outname ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName ) ; return 1 ; } <S2SV_ModStart>! outname ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName ) ; return 1 ; } <S2SV_ModStart>! outname ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName ) ; return 1 ; } <S2SV_ModStart>! outname ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName ) ; return 1 ; } <S2SV_ModStart>! outname ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName ) ; return 1 ; } <S2SV_ModStart>! outname ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %",0
486,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 1 ) ; crypto_thread_write_lock <S2SV_ModEnd> ( stunnel_locks [ <S2SV_ModStart> LOCK_SECTIONS ] ) ; opt = service_options. next ; service_options. next = NULL ; service_free ( & service_options ) ; while ( opt ) { unsigned i ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names ) { opt -> option. retry = 0 ; } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt ->",0
487,<S2SV_ModStart> void ) { recovery_started = 1 ;,0
488,"<S2SV_ModStart> { enc624j600WriteReg ( interface, ENC624J600_EHT0, hashTable [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT1, hashTable [ 1 ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT2, hashTable [ 2 ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT3, hashTable [ 3 ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT4, hashTable [ 3 ] ) ; TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> EHT0 <S2SV_blank> = <S2SV_blank> %04"" PRIX16 ""\\r\\n"", enc624j600ReadReg ( interface, ENC624J600_EHT0 ) ) ; TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> EHT1 <S2SV_blank> = <S2SV_blank> %04"" PRIX16 ""\\r\\n"", enc624j600ReadReg ( interface, ENC624J600_EHT1 ) ) ; TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> EHT2 <S2SV_blank> = <S2SV_blank> %04""",0
489,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> image ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
490,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> WORD32 ihevcd_ref_list ( codec_t * ps_codec, pps_t * ps_pps, sps_t * ps_sps, slice_header_t * ps_slice_hdr ) { WORD32 <S2SV_ModEnd> st_rps_idx ; WORD32 <S2SV_ModStart> st_rps_idx ) ; ps_dpb_mgr -> ai4_max_poc_lsb_present_flag [ u4_num_total_curr ] = 1 ; ps_dpb_mgr -> ai4_max_poc_lsb_present_flag [ u4_num_total_curr ] = 1 ; ps_mv_buf_mgr -> ai4_max_poc_lsb_present_flag [ u4_num_total_curr ] = 1 ; ps_dpb_mgr -> ai4_num_st_curr_before [ u4_num_st_curr_before ] = 0 ; ps_dpb_mgr -> ai4_num_st_curr_after [ u4_num_st",0
491,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart> 0 ; while ( child ) { ++ numentries ; child = child -> next ; } if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) ) return 0 ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( len ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; for ( i = 0 ; i < numentries ; ++ i ) { if ( names [ i ] ) cJSON_free ( names [ i ] ) ; if ( names [ i ] ) cJSON_free ( names [ i ] ) ; cJSON_free ( names ) ; cJSON_,0
492,"<S2SV_ModStart> ; other = rcu_dereference_protected ( sk -> sk_user_data, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> { if ( rcu_dereference_protected ( sk -> sk_user_data, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ), sock_owned_by_user ( sk ), sock_owned_by_user ( sk ), sock_owned_by_user ( sk ), sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) )!= sk ) { sock_poll_wait ( file, & sk -> sk_user_data -> peer_wait, wait ) ; writable = 0 ; } sock_put ( other ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; mask |= POLLOUT | POLLWRNORM | POLLWR",0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",0
494,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return GSS_S_DEFECTIVE_TOKEN ; <S2SV_ModStart> return GSS_S_DEFECTIVE_TOKEN ; } if ( header -> buffer. length < token_wrapper_len ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if (,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { <S2SV_ModEnd> vp9_ref_frame_t * frame <S2SV_ModStart> NULL ) { YV12_BUFFER_CONFIG * fb ; vpx_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
496,<S2SV_ModStart> plug ) ; if ( unlikely ( ret ) ) { ret = - EINVAL ; break ; },0
497,"<S2SV_ModStart> * info, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> ) ) || init_io_cache ( & param -> write_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || init_io_cache ( & param -> read_cache, info -> dfile, ( uint ) param -> read_buffer_length, WRITE_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || init_io_cache ( & param -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || init_io_cache ( & param -> read_cache, info -> dfile, ( uint ) param -> read_buffer_length, WRITE_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || init_io_cache ( & param -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE,",0
498,"<S2SV_ModStart> s } ; if ( uECC_vli_isZero ( signature, curve -> num_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, curve -> n, num_n_words ) ) { return 0 ; } uECC_vli_modMult ( k, k, tmp, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC",0
499,"<S2SV_ModStart> trunc : ND_TCHECK2 ( * bp, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) { ND_TCHECK2 ( * bp, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) { ND_TCHECK2 ( * bp, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) { ND_TCHECK2 ( * bp, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) { ND_TCHECK2 ( * bp, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) goto trunc ; }",0
500,<S2SV_ModStart> buf ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
501,"<S2SV_ModStart> tp ; { NESTDATA <S2SV_ModEnd> const char hex <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> cp ++ ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( * <S2SV_ModStart> == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10 ) + ( * cp - '0' )",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart> * lined ; PIXC * pixc, * pixm, * pixg, * pixd ; PIXCMAP * cmap, * cmapd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if ( pixc == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; pixc = pixFewColorsOctcubeQuant2 ( pixs, level ) ; if ( pixc == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; cmap = pixGetColormap ( pixc ) ; ncolors = pixcmapGetCount ( cmap ) ; cmapd = pixcmapCreate ( ncolors ) ; for ( i = 0 ; i < ncolors ; i ++ ) { lut [ i ] = - 1 ; lut [ i ] = - 1 ; lut [ i ] = - 1 ; lut [ i ] = - 1 ; lut [ i ] = - 1 ; lut [ i ] = - 1 ; lut [ i ] = - 1 ; lut [ i ] = - 1 ; lut [ i ] = - 1 ; lut",0
504,<S2SV_ModStart> = 256 ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { cpi -> cur_buf -> flags |= YV12_FLAG_HIGHBITDEPTH ; } else { cpi -> cur_buf -> flags &= ~ YV12_FLAG_HIGHBITDEPTH ; } # endif <S2SV_ModStart> vf = vp8_mse16x16 ; } # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { cpi -> cur_buf -> flags |= YV12_FLAG_HIGHBITDEPTH ; } else { cpi -> cur_buf -> flags |= YV12_FLAG_HIGHBITDEPTH ; } # endif,0
505,"<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> = overhead ; if ( ( flags & MONGO_CONTINUE_ON_ERROR ) ) { return MONGO_ERROR ; } mm = mongo_message_create ( size, 0, 0, MONGO_OP_INSERT ) ; if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { return MONGO_ERROR ; } mm = mongo_message_create ( size, 0, 0, MONGO_OP_INSERT ) ; if ( flags & MONGO_CONTINUE_ON_ERROR ) { return MONGO_ERROR ; } data = & mm -> data ; if ( flags & MONGO_CONTINUE_ON_ERROR ) { return MONGO_ERROR ; } data = & mm -> data ; if ( flags & MONGO_CONTINUE_ON_ERROR ) { return MONGO_ERROR ; }",0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_response ( rdpNego <S2SV_ModStart> NEGO_STATE_FAIL ; return FALSE <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;,0
507,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; i = active_best_quality ; do { const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( target_bits_per_mb - bits_per_mb_at_this_q ) <= last_error ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } else { last_error = bits_per_mb_at_this_q -",0
508,<S2SV_ModStart> value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ;,0
510,"<S2SV_ModStart> TX_SIZE tx_size, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> plane ] ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> uint8_t, left_col <S2SV_ModEnd>, 64 ) <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> uint8_t, above_col <S2SV_ModEnd>, 128 +",0
511,"<S2SV_ModStart> ++ ; } else if ( end >= pattern [ end ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ end ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ end ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ end ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ end ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; }",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; write_profile ( cm -> profile, wb ) ; vpx_wb_write_bit ( wb, 0 ) ; vpx_wb_write_bit ( wb, cm -> frame_type ) ; vpx_wb_write_bit ( wb, cm -> show_frame ) ; vpx_wb_write_bit ( wb, cm -> error_resilient_mode ) ; if ( cm -> frame_type == KEY_FRAME ) { const COLOR_SPACE cs = UNKNOWN ; write_sync_code ( wb ) ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vpx_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } vp9_wb_write_literal ( wb, cs, 3 ) ; if ( cs!= SRGB ) { vpx_wb_write_bit ( wb, 0 ) ; if ( cm -> profile >= PROFILE_1 ) { vpx_wb_write_bit ( wb, cm -> subsampling_x ) ; v",0
514,"<S2SV_ModStart> 'l' }, <S2SV_ModEnd> { ""units-length"", <S2SV_ModStart> { ""units-length"", <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> ; q = osStrchr <S2SV_ModEnd> ( p +,0
516,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error",0
517,<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( pc ->,0
518,"<S2SV_ModStart> uint16_t n ; uint32_t <S2SV_ModEnd> status ; Enc624j600Context <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { if <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( uint16_t ) ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; context -> nextPacket = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) &",0
519,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv ) { VALUE klass = rb_const_get_const ( rb_const_get ( rb_const_get ( rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( rb_const_get ( ), rb_const_get ( ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( rb_const_get ( rb_const_get ( ), rb_const_",0
520,"<S2SV_ModStart> ++ ) { if ( strlen ( config_arg ) < 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> argument"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> ++ ) { if ( strlen ( config_arg ) < 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> argument"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> ++ ) { if ( strlen ( config_arg ) < 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> argument"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> ++ ) { if ( strlen ( config_arg ) < 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> argument"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> ++ ) { if ( strlen ( config_arg ) < 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> argument"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> ++ ) { if ( strlen ( config_arg ) < 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> argument"" ) ; print_syntax ( ) ; return 1",0
521,<S2SV_ModStart> / 2 ] ; if ( x + state -> xsize ) % 4!= 0 ) { return - 1 ; } <S2SV_ModStart> / 2 ] ; if ( x + state -> xsize ) % 4!= 0 ) { return - 1 ; } <S2SV_ModStart> / 2 ] ; if ( x + state -> xsize ) % 4!= 0 ) { return - 1 ; } <S2SV_ModStart> / 2 ] ; if ( x + state -> xsize ) % 4!= 0 ) { return - 1 ; } <S2SV_ModStart> / 2 ] ; if ( x + state -> xsize ) % 4!= 0 ) { return - 1 ; } <S2SV_ModStart> / 2 ] ; if ( x + state -> xsize ) % 4!= 0 ) { return - 1 ; } <S2SV_ModStart> / 2 ] ; if ( x + state -> xsize ) % 4!= 0 ) { return - 1 ; },0
522,<S2SV_ModStart> fanout_mutex ) ; if (! po -> running ) goto out ; err = - EBUSY ; if ( type == PACKET_FANOUT_HASH || type == PACKET_FANOUT_LB || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_QM || type == PACKET_FANOUT_CBPF || type == PACKET_FANOUT_EBPF ) { err = - EINVAL ; goto out ; } if ( type == PACKET_FANOUT_HASH || type == PACKET_FANOUT_LB || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT,0
523,<S2SV_ModStart> ; if ( <S2SV_ModEnd> handle -> nmi <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = pwcs ; size = 0 ; <S2SV_ModStart> PLANE_SIZE ) { size = utf8_to_utf32 ( s, len, & u ) ; if ( size < 0 ) return - EINVAL ; <S2SV_ModStart> PLANE_SIZE ; * op ++ = ( wchar_t ) <S2SV_ModEnd> ( SURROGATE_PAIR | <S2SV_ModStart> SURROGATE_LOW | ( <S2SV_ModEnd> ( u >> <S2SV_ModStart> & SURROGATE_BITS ) <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( wchar_t ) <S2SV_ModEnd> ( SURROGATE_PAIR | <S2SV_ModStart> SURROGATE_LOW | ( <S2SV_ModEnd> ( u >> <S2SV_ModStart> & SURROGATE_BITS ) <S2SV_ModEnd> ) ) ; <S2SV_ModStart> } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( <S2SV_ModEnd> u & SURROGATE_BITS <S2SV_ModStart> ) ) ; } s += size ; len -= size ; } return op - pwcs ; } <S2SV_null> <S2SV_null>",0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { <S2SV_ModEnd> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure""",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXFHSR_RXRF | KSZ8851_RXFHSR_RXCE <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_RRXEF <S2SV_ModEnd> ) ; return",0
527,"<S2SV_ModStart> const node * n, const asdl_seq * decorator_seq <S2SV_ModEnd>, int is_async <S2SV_ModStart> is_async ) { if ( TYPE ( CHILD ( n, name_i + 1 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 2 ) ) ; <S2SV_ModStart> returns, type_comment, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3 ) ) ; body = ast_for_suite ( c, CHILD ( n, name_i + 3 ), 1 ) ; if (! body ) return NULL ; <S2SV_ModStart> returns, type_comment, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; if ( TYPE ( CHILD ( n, name_i + 4 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 4 ) ) ;",0
528,<S2SV_ModStart> int i ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; <S2SV_ModEnd> pmd = pmd_offset <S2SV_ModStart> ptl ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
529,"<S2SV_ModStart> - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } dst_coap_msg_ptr -> token_ptr = NULL ; if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_",0
530,"<S2SV_ModStart> ) ) { if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } <S2SV_ModStart> ) ) { if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } <S2SV_ModStart> ) ) { if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } } else { if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ;",0
531,<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY,0
532,<S2SV_ModStart> ; if ( <S2SV_ModEnd> len < needed <S2SV_ModStart> needed ) { struct dm_dev * dev = dm_disk ( hc -> md ) ; if ( dev -> bd_dev < 0 || dev -> bd_dev >= huge_encode_dev ( dev -> bd_dev ) || dev -> bd_dev >= huge_encode_dev ( dev -> bd_dev ) ) { struct dm_dev * dev = dm_disk ( hc -> md ) ; if ( dev -> bd_dev >= huge_encode_dev ( dev -> bd_dev ) ) { struct dm_dev * dev = dm_disk ( hc -> md ) ; if ( dev -> bd_dev < 0 || dev -> bd_dev >= huge_encode_dev ( dev -> bd_dev ) || dev -> bd_dev >= huge_encode_dev ( dev -> bd_dev ) ) { struct dm_dev * dev = dm_disk ( hc -> md ) ; if ( dev -> bd_dev >= huge_encode_dev ( dev -> bd_dev ) ) { struct dm_dev * dev = huge_encode_dev ( dev -> bd_dev ) ; if ( dev -> bd_dev >= 0,0
533,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
534,<S2SV_ModStart> bfqq ) { hrtimer_try_to_cancel <S2SV_ModEnd> ( & bfqq,0
535,<S2SV_ModStart> += 1 ; if ( orderInfo -> orderType >= PRIMARY_DRAWING_ORDER_FIELD_COUNT ) return - 1 ;,0
536,<S2SV_ModStart> if ( OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) ) { if (! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_,0
537,"<S2SV_ModStart> int plane ; # if CONFIG_VP9_HIGHBITDEPTH switch ( bsize ) { case BLOCK_SIZE_8X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_10X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_12X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_8X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_10X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_12X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_8X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg",0
538,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> -> e_mbd ; # if CONFIG_VP9_HIGHBITDEPTH switch ( bsize ) { case BLOCK_SIZE_8X8 : xd -> mi [ 0 ] -> mbmi. sb_type = BLOCK_SIZE_8X8 ; break ; case BLOCK_SIZE_8X8 : xd -> mi [ 0 ] -> mbmi. sb_type = BLOCK_SIZE_8X8 ; break ; case BLOCK_SIZE_8X10 : xd -> mi [ 0 ] -> mbmi. sb_type = BLOCK_SIZE_8X10 ; break ; case BLOCK_SIZE_8X10 : xd -> mi [ 0 ] -> mbmi. sb_type = BLOCK_SIZE_8X10 : xd -> mi [ 0 ] -> mbmi. sb_type = BLOCK_SIZE_8X10 ; xd -> mi [ 0 ] -> mbmi. sb_type = BLOCK_SIZE_8X10 ; break ; case BLOCK_SIZE_8X10 : xd -> mi [ 0 ] -> mbmi. sb_type =,0
539,"<S2SV_ModStart> = NULL ; if (! ( * err = SUPERBLOCK_READ ( & reader, & reader. superblock ) ) ||! ( * err = SUPERBLOCK_READ_ERR ( & reader. superblock ) ) ) * err = SUPERBLOCK_READ_ERR ( & reader. superblock ) ; if (! ( * err = SUPERBLOCK_READ_ERR ( & reader. superblock ) ) ||! ( * err = SUPERBLOCK_READ_ERR ( & reader. superblock ) ) ) * err = SUPERBLOCK_READ_ERR ( & reader. superblock ) ; if (! ( * err = SUPERBLOCK_READ_ERR ( & reader. superblock ) ) ) * err = SUPERBLOCK_READ_ERR ( & reader. superblock ) ; if (! ( * err = SUPERBLOCK_READ_ERR ( & reader. superblock ) ) ||! ( * err = SUPERBLOCK_READ_ERR ( & reader. superblock ) ) ) * err = SUPERBLOCK_READ_ERR ( & reader. superblock ) ; if (! ( * err = SUPERBLOCK_READ_ERR ( & reader.",0
540,"<S2SV_ModStart> = 1 ; memset ( pMap -> ranges, 0, sizeof ( MappedRange ) ) ;",0
541,"<S2SV_ModStart> ; if ( flags & VP8_EFLAG_NO_UPD_GF ) || ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_AL",0
542,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
543,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( & <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart>, const u_char * p <S2SV_ModEnd>, u_int len <S2SV_ModStart> len ) ; if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_VPN_ADDRESS : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_VPN_ADDRESS : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_VPN_ADDRESS : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_VPN_ADDRESS : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_VPN_ADDRESS : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_VPN_ADDRESS : if ( tlen < 4 ) { ND_TCHECK (",0
545,"<S2SV_ModStart> res -> outputbuffer, ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""</tr>"" ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Environment</td>"" ""<td>%s</td>"", Run. Env. env ) ; if ( Run. Env. user ) StringBuffer_append ( res -> outputbuffer, ""<tr><td>Effective <S2SV_blank> user <S2SV_blank> running <S2SV_blank> Monit</td>"" ""<td>%s</td>"", Run. Env. user ) ; if ( Run. Env. log ) StringBuffer_append ( res -> outputbuffer, ""<tr><td>Logfile</td><td>%s</td></tr>"", Run. files. log ) ; if ( Run. files. control ) StringBuffer_append ( res -> outputbuffer, ""<tr><td>Controlfile</td><td>%s</td></tr>"", Run. files. control ) ; if ( Run. files. log ) StringBuffer_append ( res -> outputbuffer, ""<tr><td>Logfile</td><td>%s</td></tr>"", Run.",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart>, constr1, sizeof ( constr1 ) ) ; strncpy ( constr2, constr1, sizeof ( constr2 ) ) ; strncpy ( constr1, ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"", sizeof ( constr1 ) ) ; strncpy ( constr2, ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", sizeof ( constr2 ) ) ; strncpy ( constr1, ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"", sizeof ( constr1 ) ) ; strncpy ( constr2, ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", sizeof ( constr2 ) ) ; strncpy ( constr1, ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"", sizeof ( constr1 ) ) ; strncpy ( constr2, ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", sizeof ( constr2 ) ) ; strncpy ( constr2, ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", sizeof ( constr2 ) ) ; strncpy ( constr1, ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"", sizeof ( constr1 ) ) ; strncpy ( constr2, ""un",0
548,"<S2SV_ModStart> iad_num ) ; if ( iad_num >= USB_MAXINTERFACES ) { dev_warn ( ddev, ""too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", iad_num, USB_MAXINTERFACES ) ; nintf = nintf_orig ; } else if ( iad_num >= USB_MAXINTERFACES ) { dev_warn ( ddev, ""too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", iad_num, USB_MAXINTERFACES ) ; nintf = nintf_orig ; } if ( iad_num >= USB_MAXINTERFACES ) { dev_warn ( ddev, ""too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", iad_num, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; }",0
549,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
550,"<S2SV_ModStart> 16 ) ; for ( mode = DC_PRED ; mode <= TM_PRED ; mode ++ ) { vp8_build_intra_predictors_mby_s ( xd, x -> rdmult, x -> rddiv, rate, distortion ) ; error16x16 = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16 ) ; distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = RDCOST ( x -> rdmult, x -> rddiv, rate, distortion ) ; if ( error16x16 > this_rd ) { error16x16 = this_rd ; best_mode = mode ; best_sse = sse ; } }",0
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR6 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600",0
552,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; vsnprintf ( start, maxlen, format, argptr ) ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> = 0 ; <S2SV_ModEnd> va_end ( argptr <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
553,<S2SV_ModStart> alg_priv ) { vpx_alg_destroy_priv <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> alg_priv ) ; vpx_alg_destroy_priv <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> -> destroy ( vpx_alg_destroy_priv ( vpx_alg_destroy_priv ( vpx_alg_destroy_priv ( vpx_alg_destroy_priv ( vpx_alg_destroy_priv ( vpx_alg_destroy_priv ( vpx_alg_destroy_priv ( vpx_alg_destroy_priv ( vpx_alg_destroy_priv ( vpx_alg_destroy_priv ( vpx_alg_destroy_priv ( vpx_alg_destroy_priv ( vpx_alg_destroy_priv ( vpx_alg_destroy_priv ( vpx_alg_destroy_priv ( vpx_alg_destroy_priv ( vpx_alg_destroy_priv ( vpx_alg_destroy_priv ( vpx_alg_destroy_priv ( vpx_alg_destroy_priv ( vpx_alg_destroy_priv ( vpx_alg_destroy_priv ( vpx_alg_destroy_priv ( vpx_alg_destroy_,0
554,"<S2SV_ModStart> speed ) { <S2SV_ModEnd> sf -> adaptive_rd_thresh <S2SV_ModStart> 1 ) { <S2SV_ModEnd> sf -> use_square_partition_only <S2SV_ModStart> -> less_rectangular_check = vp9_frame_is_boosted ( cpi )? USE_FULL_RD : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = cm -> show_frame? DISABLE_ALL_SPLIT : DISABLE_ALL_INTER_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; sf -> recode_loop = ALLOW_RECODE_KFARFGF ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ;",0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
556,"<S2SV_ModStart> ; int goodsize ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) ) goodsize = LUAI_MAXSTACK ; if ( goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { }, { }, { } ) ;",0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart> n ) ; # ifdef HAVE_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { PyErr_Fetch ( & type, & value, & tback ) ; errstr = PyObject_Str ( value ) ; if ( errstr ) { char * s = """" ; char buf [ 128 ] ; s = _PyUnicode_AsString ( errstr ) ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", s ) ; ast_error ( n, buf ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } # endif return NULL ; } # ifdef HAVE_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { PyErr_Fetch ( & type, & value, & tback ) ; errstr = PyObject_Str ( value ) ; if ( errstr ) { char * s = """" ; char buf [ 128 ] ; s = _PyUnicode_AsString ( errstr ) ; } else { PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECRE",0
559,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> } else if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) { res = parse_quantizers_keyframe ( svc_ctx, option_value, 0 )",0
560,"<S2SV_ModStart> ) ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; mb_index = 0 ; fprintf ( mvs, ""Mb <S2SV_blank> mv <S2SV_blank> ref <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. ref_frame ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index ++ ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs,",0
561,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
562,,1
563,"<S2SV_ModStart> ) ) { D_imp_dberr ( imp_dbh, mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; <S2SV_ModStart> ) ) { D_imp_dberr ( imp_dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; <S2SV_ModStart> ) ) { D_imp_dberr ( imp_dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql )",0
564,<S2SV_ModStart> (! ( <S2SV_ModEnd> flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModStart> ) || ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) == TEMP_FAILURE_RETRY ( <S2SV_ModStart> size )!= TEMP_FAILURE_RETRY ( <S2SV_ModStart> size )!= TEMP_FAILURE_RETRY ( <S2SV_ModStart> size )!= TEMP_FAILURE_RETRY ( <S2SV_ModStart> size )!= TEMP_FAILURE_RETRY ( <S2SV_ModStart> size )!= TEMP_FAILURE_RETRY ( <S2SV_ModStart> size )!= TEMP_FAILURE_RETRY ( <S2SV_ModStart> size )!= TEMP_FAILURE_RETRY ( <S2SV_ModStart> size )!= TEMP_FAILURE_RETRY ( <S2SV_ModStart> size )!= TEMP_FAILURE_RETRY ( <S2SV_ModStart> size )!= TEMP_FAILURE_RETRY ( <S2SV_ModStart> size )!= TEMP_FAILURE_RETRY ( <S2SV_ModStart> size )!= TEMP_FAILURE_RETRY ( <S2SV_ModStart> size )!= TEMP_FAILURE_RETRY ( <S2SV_ModStart> size )!= TEMP_FAILURE_RETRY ( <S2SV_ModStart> size )!= TEMP_FAILURE_RETRY (,0
565,"<S2SV_ModStart> ; struct ieee_802_11_phdr <S2SV_ModEnd> phdr ; col_clear <S2SV_ModStart> ampdu_len = 0 ; mpdu_str = kmalloc ( len_remain, GFP_NOFS ) ; if ( mpdu_str == NULL ) mpdu_str = kmalloc ( len_remain, GFP_NOFS ) ; if ( mpdu_str == NULL ) mpdu_str = kmalloc ( len_remain, GFP_NOFS ) ; if ( mpdu_str == NULL ) mpdu_str = kmalloc ( len_remain, GFP_NOFS ) ; if ( mpdu_str == NULL ) mpdu_str = kmalloc ( len_remain, GFP_NOFS ) ; if ( mpdu_str == NULL ) mpdu_str = kmalloc ( len_remain, GFP_NOFS ) ; if ( mpdu_str == NULL ) mpdu_str = kmalloc ( len_remain, GFP_NOFS ) ;",0
566,<S2SV_ModStart> ; sh = s_malloc0 <S2SV_ModEnd> ( hdrlen +,0
567,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> ; UINT32 tempWidth ; if (! context ) { return FALSE ; } tempWidth = ROUND_UP_TO ( context -> width, 8 ) ; rw = ( context -> ChromaSubsamplingLevel? tempWidth : context -> width ) ; ccl = context -> ColorLossLevel ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * context -> width ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * context -> width ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * context -> width ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * context -> width ; for ( x = 0 ; x < context -> width ; x ++ ) { switch ( context -> format ) { case PIXEL_FORMAT_BGR24 : b_val = * src ++ ; g_val = * src ++ ; r_val = * src ++ ; b_val = * src ++ ; r_val = * src ++ ;",0
568,"<S2SV_ModStart> nr_parens ) return ERR_PTR <S2SV_ModEnd> ( - EINVAL <S2SV_ModStart> - EINVAL ) ; if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; }",0
569,<S2SV_ModStart> cpi ) { RATE_CONTROL <S2SV_ModEnd> * rc = <S2SV_ModStart> / 2 ) > INT_MAX? INT_MAX : <S2SV_ModEnd> ( int ) <S2SV_ModStart> / 2 ) ; if ( rc -> frames_since_key < <S2SV_ModEnd> cpi -> output_framerate <S2SV_ModStart> / 2 ) > INT_MAX ) return INT_MAX ; if ( rc -> frames_since_key < <S2SV_ModEnd> cpi -> output_framerate <S2SV_ModStart> / 2 ) > INT_MAX ) return INT_MAX ; if ( rc -> frames_since_key < <S2SV_ModEnd> cpi -> output_framerate <S2SV_ModStart> / 2 ) > INT_MAX ) return INT_MAX ; if ( rc -> frames_since_key < <S2SV_ModEnd> cpi -> output_framerate <S2SV_ModStart> cpi -> output_framerate <S2SV_ModEnd> / 2 ) <S2SV_ModStart> / 2 ) > INT_MAX ) return INT_MAX ; if ( rc -> frames_since_key < <S2SV_ModEnd> cpi -> output_framerate <S2SV_ModStart> / 2 ) > INT_MAX ) return INT_MAX ; if ( rc -> frames_since_key < <S2SV_ModEnd> cpi -> output_framerate <S2SV_ModStart> / 2 ) > INT_MAX ) return INT_MAX ; if ( rc -> frames_since_,0
570,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE <S2SV_ModEnd> read_tx_mode ( vpx_reader <S2SV_ModStart> ) tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> == ALLOW_32X32 ) tx_mode = vpx_read_bit <S2SV_ModEnd> ( r )",0
571,"<S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd>",0
572,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const xd = args -> xd ; <S2SV_ModStart> 32 ] ; MACROBLOCK * const p = & cpi -> mb. plane [ plane ] ; MB_MODE_INFO * const mbmi = & xd -> mi [ 0 ] -> mbmi ; <S2SV_ModStart> plane_type ; const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const scan_order * so = mbmi -> scan_order ; const int ref = is_inter_block ( mbmi ) ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = cpi -> fc -> coef_counts [ tx_size ] [ type ] [ ref ] ; vpx_prob <S2SV_ModEnd> ( * const <S2SV_ModStart> UNCONSTRAINED_NODES ] = cpi -> common. fc -> coef_probs [ tx_size ] [ ref ] ; unsigned int ( * const eob_branch ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. <S2SV_ModEnd> eob_branch [ tx_size <S2SV_ModStart> tx_",0
573,<S2SV_ModStart> pSelect -> pSrc ; if ( pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
574,"<S2SV_ModStart> users ) ; switch ( minorversion ) { case 0 : cb_info -> serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; break ; case 1 : cb_info -> serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; break ; case 2 : cb_info -> serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; break ; case 3 : cb_info -> serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; break ; case 4 : cb_info -> serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; break ; case 5 : cb_info -> serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; break ; }",0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> s ) { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
579,"<S2SV_ModStart> xIter = crm_first_attr <S2SV_ModEnd> ( xml ) <S2SV_ModStart> ; if ( strcmp ( xIter -> name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%",0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> NULL ; return ( SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,0
581,"<S2SV_ModStart> ) ; } if ( hkey. type == HASH_KEY_IS_STRING ) { zend_hash_update ( params, hkey. str, sizeof ( hkey. str ), ( void * ) & tmp, sizeof ( zval * ), ( void * ) & ptr, sizeof ( zval * ), ( void * ) & args, sizeof ( zval * ), ( void * ) & * current_param TSRMLS_DC ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. str, hkey. len, ( void * ) & args, sizeof ( zval * ), ( void * ) & tmp, sizeof ( zval * ), ( void * ) & ptr ), sizeof ( zval * ), ( void * ) & args, sizeof ( zval * ) ) ; * current_param = tmp ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. num, hkey. len, ( void * ) & args, sizeof ( zval * ), ( void *",0
582,"<S2SV_ModStart> only_420 ) { int ret <S2SV_ModEnd> ; int i <S2SV_ModStart> = VPX_IMG_FMT_I420 ; ret = vpx_open ( _y4m, _fin, _skip, _nskip, only_420 ) ; if ( ret < 0 ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> header; <S2SV_blank> not <S2SV_blank> a <S2SV_blank> YUV2MPEG <S2SV_blank> file?\\n"" ) ; return ret ; } _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; ret = vpx_open ( _y4m, _fin, _skip, _nskip, only_420 ) ; if ( ret < 0 ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> YUV4MPEG2 <S2SV_blank> header.\\n"" ) ; return ret ; } _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; ret = vpx_open ( _y4m, _fin, _skip, _nskip, only_420 ) ; if ( ret < 0 ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank>",0
583,"<S2SV_ModStart> obj * otmp ; if ( strlen ( buf ) > 1024 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
584,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> 0 ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk.",0
585,"<S2SV_ModStart> * createenv ( <S2SV_ModEnd> const struct rule <S2SV_ModStart> root ) ; for ( i = 0 ; i < env -> count ; i ++ ) { struct envnode * node ; if ( RB_GET ( envtree, & env -> root ) == NULL ) err ( 1, NULL ) ; if ( RB_GET ( envtree, & env -> root ) == NULL ) err ( 1, NULL ) ; if ( RB_GET ( envtree, & env -> root ) == NULL ) err ( 1, NULL ) ; if ( RB_GET ( envtree, & env -> root ) == NULL ) err ( 1, NULL ) ; if ( RB_GET ( envtree, & env -> root ) == NULL ) err ( 1, NULL ) ; if ( RB_GET ( envtree, & env -> root ) == NULL ) err ( 1, NULL ) ; if ( RB_GET ( envtree, & env -> root ) == NULL ) err ( 1, NULL ) ; if ( RB_GET ( envtree, & env -> root ) == NULL ) err ( 1, NULL ) ; if ( RB_GET ( envtree, & env -> root ) == NULL ) err",0
586,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ] ) ; vpx_clear_segmentation ( seg ) ; vpx_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vpx_compute_qdelta_by_rate ( & cpi -> rc, cm -> base_qindex, cm -> in_frame_q_adj_ratio [ segment ] ) ; vpx_set_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vpx_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; } vpx_clear_segmentation ( seg ) ; vp9_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_",0
587,"<S2SV_ModStart> 0 ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 1 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 1 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"", stmt_type, ClassDef_fields, 5 ) ; if (! ClassDef_type ) return",0
588,"<S2SV_ModStart> O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IWGRP | S_IROTH <S2SV_ModEnd> ) ; if <S2SV_ModStart> return ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart> 16 ), TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY ) ) TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_",0
589,<S2SV_ModStart> 16 ) ; } if ( m == Y_PRED ) { ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; } else { ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
590,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * t, <S2SV_ModEnd> * StartClean ; <S2SV_ModStart> * StartClean ; <S2SV_ModEnd> SetDefaults ( ) <S2SV_ModStart> = outputbuffer ; sprintf ( outputbuffer <S2SV_ModEnd>, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", <S2SV_ModStart> = 1 ; sprintf ( outputbuffer <S2SV_ModEnd>, ""\\\\axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", <S2SV_ModStart> = 1 ; if ( * s == '0' && s [ 1 ] == ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { if ( ( argbuf = ReadArray ( t, & num1, & num2 ) ) == 0 ) { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; free ( argbuf ) ; return ( - 1 ) ; } } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; free ( arg",0
591,"<S2SV_ModStart> expr_ty step ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_lower ) ; if ( tmp == NULL ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id ( obj, & PyId_upper ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_upper ) ; if ( tmp == NULL ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id ( obj, & PyId_step ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_step ) ; if ( tmp == NULL ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } if ( lookup_attr_id ( obj, & PyId_step ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_step ) ; if ( tmp == NULL ) goto failed ; Py",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,"<S2SV_ModStart> int err ; if (! nfp_abm_u32_check_knode ( alink -> abm, knode, proto, extack ) ) goto err_delete ; val = be32_to_cpu ( knode -> sel -> keys [ 0 ]. val ) >> tos_off & 0xff ; mask = htons ( knode -> sel -> keys [ 0 ]. mask ) >> tos_off & 0xff ; val = be32_to_cpu ( knode -> sel -> keys [ 0 ]. val ) >> tos_off & 0xff ; val = be32_to_cpu ( knode -> sel -> keys [ 0 ]. val ) >> <S2SV_ModEnd> tos_off & 0xff <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; match -> handle = knode -> handle ; match -> band = knode -> res -> classid ; match -> val = val ; err = nfp_abm_update_band_map ( alink ) ; if ( err ) goto err_delete ;",0
594,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( pass <S2SV_ModStart> ( pass ) <S2SV_ModEnd> stream -> config <S2SV_ModStart> rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
595,"<S2SV_ModStart> new_data_len ) ; if ( dbus_name == NULL ) { g_log ( G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG ( G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR ) ) ; goto out ; } if ( g_str_has_prefix ( dbus_name, "".service"" ) ) { g_log ( G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G",0
596,"<S2SV_ModStart> ) { VP9_COMMON <S2SV_ModEnd> * const cm <S2SV_ModStart> tile_col ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; TileBuffer tile_buffers [ 4 ] [ tile_row ] ; TileBuffer * const buf = & tile_buffers [ tile_row ] [ tile_col ] ; int last_tile = tile_row == tile_rows - 1 && tile_col == tile_cols - 1 ; const size_t size = get_tile ( data_end, last_tile, & cm -> error, & data )",0
597,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9Decoder <S2SV_ModEnd> * vp9_decoder_create ( <S2SV_ModStart> ( 32, sizeof ( * pbi ) <S2SV_ModEnd> ) ; VP9_COMMON <S2SV_ModStart> pbi? & pbi -> common : NULL ; if ( setjmp ( cm -> error. jmp ) ) { vp9_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vpx_initialize_dec ( ) ; vpx_rtcd ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; vpx_init_dequantizer ( cm ) ; cm -> error. setjmp = 0 ; vpx_worker_init ( & pbi -> lf_worker ) ; return pbi ; } <S2SV_null> <S2SV_null>",0
598,"<S2SV_ModStart> ) ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> ) ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ;",0
599,"<S2SV_ModStart> req ) { <S2SV_ModEnd> struct ip_options * <S2SV_ModStart> -> opt ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( req -> inet_opt, sock_owned_by_user ( req ) ) ; if ( inet_opt <S2SV_ModEnd> == NULL || <S2SV_ModStart> == NULL || inet_opt <S2SV_ModEnd> -> cipso ==",0
600,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> tree2tok ( struct <S2SV_ModStart> ) { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> i ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tokens [ - j ]. len = l ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
601,"<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_pkt_list_init ( & ctx -> pkt_list ) ; <S2SV_ModStart> } if ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) && ( flags & VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if",0
602,"<S2SV_ModStart> len ) ; if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; ret = decode_atype ( & t, contents, clen, elemtype, elem ) ; if ( ret ) goto error ; } ret =",0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> },0
604,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int frame_max_bits ( const RATE_CONTROL * rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) rc -> avg_frame_bandwidth <S2SV_ModEnd> * ( (",0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> int mi_width = <S2SV_ModStart> ] ; const int mi_height = num_8x8_blocks_wide_lookup [ mbmi -> sb_type ] ; const int mi_width = num_8x8_blocks_high_lookup [ mbmi -> sb_type ] ; const int mi_width = num_8x8_blocks_wide_lookup [ mbmi -> sb_type ] ; const int mi_height = num_8x8_blocks_high_lookup [ mbmi -> sb_type ] ; x -> skip_recode =! x -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 && cpi -> oxcf. aq_mode!= COMPLEXITY_AQ && cpi -> oxcf. aq_mode!= CYCLIC_REFRESH_AQ && cpi -> sf. allow_skip_recode ; x -> skip_optimize = ctx -> is_",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
608,"<S2SV_ModStart> { uint32_t value ; int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable && get_bits_left ( gbc ) < 65 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits1 ( gbc ) < zeroes + 1 ) { av_log (",0
609,"<S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c )",0
610,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> http_contentlen. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. ptr = NULL, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> content_line. ptr = NULL, packet -> content_line. len = 0, packet -> accept_line. ptr = NULL, packet -> accept_line. len = 0, packet -> user_agent_line. ptr = NULL, packet -> user_agent_line. len = 0, packet -> http_url_name. ptr = NULL, packet -> http_url_name. len = 0, packet -> http_encoding. ptr = NULL, packet -> http_transfer_encoding. len = 0, packet -> http_contentlen. ptr = NULL, packet -> http_contentlen. len = 0, packet -> user_agent_line. ptr = NULL, packet -> user_agent_line. len = 0, packet ->",0
611,"<S2SV_ModStart> += 4 ) { if ( ( ssize_t ) x + 4 > dds_info -> width || ( ssize_t ) x + 4 > dds_info -> height ) || ( ssize_t ) y + 4 > dds_info -> height ) { return MagickFalse ; } <S2SV_ModStart> ) ) { if ( ( ssize_t ) x + 4 > dds_info -> width || ( ssize_t ) x + 4 ) > dds_info -> height ) { return MagickFalse ; } <S2SV_ModStart> } } } if ( ( ssize_t ) dds_info -> width && ( ssize_t ) dds_info -> height ) { q = ( PixelPacket * ) NULL ; for ( j = 0 ; j < 4 ; j ++ ) { if ( ( ssize_t ) x + i ) < ( ssize_t ) dds_info -> width ) { if ( ( ssize_t ) x + i ) < ( ssize_t ) dds_info -> width ) { SetPixelRed ( q, ScaleCharToQuantum ( colors. r [ code ] ) ) ; SetPixelBlue ( q, ScaleChar",0
612,<S2SV_ModStart> length ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL ) ),0
613,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
614,"<S2SV_ModStart> ) ) { send ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; send ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; } else { send ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; }",0
615,"<S2SV_ModStart> FALSE ; WLog_VRB ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; Stream_Read_UINT32 ( s, rdp -> autodetect -> bandwidthMeasureTimeDelta ) ; Stream_Read_UINT32 ( s, rdp -> autodetect -> bandwidthMeasureByteCount ) ;",0
616,<S2SV_ModStart> ; # endif # if CONFIG_TEMPORAL_DENOISING if ( cpi -> cur_buf -> flags & YV12_FLAG_TEMPORAL_DENOISING ) if ( cpi -> cur_buf -> flags & YV12_FLAG_TEMPORAL_DENOISING ) if ( cpi -> cur_buf -> flags & YV12_FLAG_TEMPORAL_DENOISING ) if ( cpi -> cur_buf -> flags & YV12_FLAG_TEMPORAL_DENOISING ) if ( cpi -> cur_buf -> flags & YV12_FLAG_TEMPORAL_DENOISING ) if ( cpi -> cur_buf -> flags & YV12_FLAG_TEMPORAL_DENOISING ) if ( cpi -> cur_buf -> flags & YV12_FLAG_TEMPORAL_DENOISING ) if ( cpi -> cur_buf -> flags & YV12_FLAG_TEMPORAL_DENOISING ) if ( cpi -> cur_buf -> flags & YV12_FLAG_TEMPORAL_DENOISING ) if ( cpi,0
617,"<S2SV_ModStart> b_multithreaded_rd ) { vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
618,<S2SV_ModStart> 0 ) { xWantedSize += xHeapStructSize ; if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize = 0 ; } } if ( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) ) { pxPreviousBlock = & xStart ; pxBlock = xStart. pxNextFreeBlock ; while ( ( pxBlock -> xBlockSize < xWantedSize ) && ( pxBlock -> pxNextFreeBlock!= NULL ) ) { pxPreviousBlock = pxBlock ; pxBlock = pxBlock -> pxNextFreeBlock ; } if ( ( pxBlock -> xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE ) { pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize ) ) ; pxBlock -> xBlockSize = xWantedSize ; pxBlock -> pxNextFreeBlock = pxBlock -> pxNext,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> STREAM s ) { struct stream packet = * s ; <S2SV_ModStart> int i ; struct stream packet = * s ; <S2SV_ModStart> ++ ) { if (! s_check_rem ( s, 2 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> bitmap <S2SV_blank> data <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } else { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> bitmap <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s, 2 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> bitmap_updates(), <S2SV_blank> consume <S2SV_blank> bitmap <S2SV_blank> data <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } else { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> bitmap <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s, 2 ) ) { rdp_protocol_error ( ""process_bitmap_updates",0
621,"<S2SV_ModStart> } else { if ( smatch ( option, ""filename"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Filename <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Filename <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( ovalue == 0 ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Filename <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Filename <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX",0
622,"<S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> tx_size ] ; vpx_coeff_count * coef_counts = & cpi -> coef_counts [ tx_size ] ; unsigned int ( * eob_branch_ct ) [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] ; vpx_tree_probs_from_distribution ( vp9_coef_tree, coef_counts [ i ] [ j ] [ k ] [ l ] ) ; for ( i = 0 ; i < PLANE_TYPES ; ++ i ) { for ( j = 0 ; j < REF_TYPES ; ++ j ) { for ( k = 0 ; k < COEF_BANDS ; ++ k ) { for ( l = 0 ; l < BAND_COEFF_CONTEXTS ( k ) ; ++ l ) { for ( m = 0 ; m < UNCONSTRAINED_NODES ; ++ m ) coef_probs [ i ] [ j ] [ k ] [ l ] = get_binary_prob ( coef_branch_ct [ i ] [ j ] [ k ] [ l",0
623,"<S2SV_ModStart> { } ; if (! TEMP_FAILURE_RETRY ( <S2SV_ModStart> name ) ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> UTF-8 <S2SV_blank> kbdmode <S2SV_blank> %sd <S2SV_blank> on <S2SV_blank> %s"", log_debug ( ""UTF-8 <S2SV_blank> kbdmode <S2SV_blank> %sd <S2SV_blank> on <S2SV_blank> %s"", log_debug ( ""UTF-8 <S2SV_blank> kbdmode <S2SV_blank> %sd <S2SV_blank> on <S2SV_blank> %s"", log_debug ( ""UTF-8 <S2SV_blank> kbdmode <S2SV_blank> %sd <S2SV_blank> on <S2SV_blank> %s"", log_debug ( ""UTF-8 <S2SV_blank> kbdmode <S2SV_blank> %sd <S2SV_blank> on <S2SV_blank> %s"", log_debug ( ""UTF-8 <S2SV_blank> kbdmode <S2SV_blank> %sd <S2SV_blank> on <S2SV_blank> %s"", log_debug ( ""UTF-8 <S2SV_blank> kbdmode <S2SV_blank> %sd <S2SV_blank> on <S2SV_blank> %s"", log_debug ( ""UTF-8 <S2SV_blank> kbdmode <S2SV_blank> %sd <S2SV_blank> on <S2SV_blank> %s"", log_debug ( ""UTF-8 <S2SV_blank> kbdmode <S2SV_blank> %sd <S2SV_blank> on <S2SV_blank> %s"", log_debug ( ""UTF-8 <S2SV_blank> kbdmode <S2SV_blank> %sd <S2SV_blank> on <S2SV_blank> %s"", log_debug ( ""UTF-8 <S2SV_blank> kbdmode <S2SV_blank> %",0
624,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> ) ; if ( <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart>, 3, ibuf <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, ibuf <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, ibuf <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, ibuf <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, ibuf <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, ibuf <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, ibuf <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, ibuf <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, ibuf <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, ibuf <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, ibuf <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, ibuf <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, ibuf <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, ibuf <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, ibuf <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, ibuf <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, ibuf <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, ibuf <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, ibuf <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, ibuf <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, ibuf <S2SV_ModEnd>, 1, <S2SV_ModStart>",0
625,"<S2SV_ModStart> cfg, vpx_codec_enc_cfg_t <S2SV_ModEnd> flags, int <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps &",0
626,"<S2SV_ModStart> stride, int uv_stride <S2SV_ModEnd>, int mv_row <S2SV_ModStart> const kernel = vp9_filter_kernels [ xd -> mi [ 0 ] -> mbmi. interp_filter ] <S2SV_ModEnd> ; enum mv_precision <S2SV_ModStart> ; if ( uv_stride <S2SV_ModEnd> == 8 ) <S2SV_ModStart> = MV_PRECISION_Q3 ; vp9_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q4, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_stride, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_stride, & mv, scale, uv_block_size, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predict",0
627,"<S2SV_ModStart> = TRUE ; if ( strchr ( buf,'<S2SV_blank>') ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( buf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( buf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'""",0
628,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> cJSON <S2SV_ModEnd> * cJSON_CreateFloatArray ( <S2SV_ModStart> ) ; for ( ; i < count ; ++ i ) { n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; } <S2SV_ModEnd> return a ;",0
629,"<S2SV_ModStart> { VP9_COMMON * const cm = & pbi -> common ; const int log2_tile_cols = MIN ( pbi -> oxcf. max_tiles, cm -> mi_cols ) ; const int log2_tile_rows = MIN ( pbi -> oxcf. max_tiles, cm -> log2_tile_rows ) ; const int num_workers = MIN ( pbi -> oxcf. max_threads, tile_cols ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int n ; int final_worker = - 1 ; if ( cm -> num_tile_workers == 0 ) { CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_threads * sizeof ( * pbi -> tile_workers ) ) ) ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_threads * sizeof ( * pbi -> tile_workers ) ) ) ; for ( i = 0 ; i < num_workers ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; CHECK_MEM_ERROR",0
630,"<S2SV_ModStart> 0x101 ; offset = base + get4 ( ) + 8 ; while ( ( save = ftell ( ifp ) ) < offset ) { if ( ( save = ftell ( ifp ) ) < offset ) break ; <S2SV_ModStart> ( ) ; if ( ( save = ftell ( ifp ) ) < offset ) break ; <S2SV_ModStart> case 0x524946 : if ( strncasecmp ( model, ""DSLR-A100"", 9 ) ) { fseek ( ifp, 8, SEEK_CUR ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 0 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 1 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 2 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 3 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_",0
631,"<S2SV_ModStart> common ; struct segmentation_data * seg = cm -> seg ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const double base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; const int qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, base_q * Q_RATIO ( i ) ) ; vpx_set_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q )",0
632,<S2SV_ModStart> -> error_code ) { if ( error -> has_detail ) ctx -> base. err_detail = error -> detail ; else ctx -> base. err_detail = NULL ; },0
633,"<S2SV_ModStart> * ps_cur_slice ; pocstruct_t <S2SV_ModEnd> * ps_prev_poc, <S2SV_ModStart> * ps_cur_poc ; memset ( ps_dec -> ps_pps, 0, ( sizeof ( dec_pic_params_t ) ) * MAX_NUM_PIC_PARAMS ) ) ; memset ( ps_dec -> ps_sps, 0, ( sizeof ( dec_seq_params_t ) ) * MAX_NUM_SEQ_PARAMS ) ) ; ps_dec -> ps_prev_poc = NULL ; ps_dec -> ps_cur_poc = NULL ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; ps_dec",0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( btpan_cb. congest_packet ) ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> = 0 ; if (! isdigit ( * ( fmt ) ++ ) ) return df ; else { int a = 0 ; while ( isdigit ( * ( fmt ) ++ ) ) { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; },0
636,"<S2SV_ModStart> ) ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ;",0
637,<S2SV_ModStart> else return - ENODEV <S2SV_ModEnd> ; deb_info (,0
638,"<S2SV_ModStart> ; ( void ) phase <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModStart> ) ; if (! safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok ) ; return NULL ; } s_write ( c, c -> local_rfd. fd, buffer, sizeof buffer ) ; if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok ) ;",0
639,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> variant_opaque ; struct sockaddr_in <S2SV_ModEnd> addr ; int <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct mainloop_fd_callbacks cib_fd_callbacks <S2SV_ModStart> = {. <S2SV_ModEnd> dispatch = cib_remote_dispatch <S2SV_ModStart> destroy = cib_remote_connection_destroy <S2SV_ModEnd> } ; connection <S2SV_ModStart> NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ;",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ; cpi -> gf_bitrate_adjustment = 0 ; cpi -> frames_till_gf_update_due = 0 ; cpi -> non_gf_bitrate_adjustment = 0 ; cpi -> prob_last_coded = 128 ; cpi -> prob_gf_coded = 128 ; cpi -> prob_intra_coded = 63 ; cpi -> recent_ref_frame_usage [ LAST_FRAME ] = 1 ; cpi -> recent_ref_frame_usage [ GOLDEN_FRAME ] = 1 ; cpi -> recent_ref_frame_usage [ LAST_FRAME ] = 1 ; cpi -> recent_ref_frame_usage [ GOLDEN_FRAME ] = 1 ; cpi -> recent_ref_frame_usage [ LAST_FRAME ] = 1 ; cpi -> recent_ref_frame_usage [ GOLDEN_FRAME ] = 1 ; cpi -> recent_ref_frame_usage [ GOLDEN_FRAME ] = 1 ; cpi -> recent_ref_frame_usage [ LAST_FRAME ] = 1 ; cpi -> recent_ref_frame",0
641,"<S2SV_ModStart> ] ) ; ND_TCHECK_16BITS ( & icp -> icmp6_data16 [ 0 ] ) ; if ( mrc < 32768 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [mrt <S2SV_blank> delay=%d]"", mrt ) ) ; } else { ND_TCHECK_16BITS ( & icp -> icmp6_data16 [ 0 ] ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"",",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; if ( <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command <S2SV_ModStart> MF ) ; <S2SV_ModEnd> return rc ;",0
643,"<S2SV_ModStart> ] ; Image * image <S2SV_ModEnd> ; MagickBooleanType status <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } image = AcquireImage ( image ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } image = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } image = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
644,"<S2SV_ModStart> = 0 ; if (! jas_safe_size_mul3 ( siz -> width, siz -> height ) ) { jas_eprintf ( ""cannot <S2SV_blank> compute <S2SV_blank> mainhdr <S2SV_blank> size\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if (! jas_safe_size_mul3 ( siz -> width, siz -> height ) ) { jas_eprintf ( ""cannot <S2SV_blank> compute <S2SV_blank> mainhdr <S2SV_blank> size\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if (! jas_safe_size_mul3 ( siz -> width, siz -> height ) ) { jas_eprintf ( ""cannot <S2SV_blank> compute <S2SV_blank> mainhdr <S2SV_blank> size\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if (! jas_safe_size_mul3 ( siz -> width, siz -> height ) ) { jas_eprintf ( ""cannot <S2SV_blank> compute <S2SV_blank> mainhdr <S2SV_blank> size\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if (! jas_safe_size_mul3 ( siz -> width, siz -> height ) ) { jas_eprintf ( ""cannot <S2SV_blank>",0
645,"<S2SV_ModStart> = '\\0' ; str_temp = strndup ( str_modes, strlen ( str_modes ) + 1, NULL, WEECHAT_STRING_SPLIT_STRIP_LEFT | WEECHAT_STRING_SPLIT_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS, 0, & argc ) ; if (! str_temp ) return ; str_temp = strndup ( str_modes, strlen ( str_modes ) + 1, NULL, WEECHAT_STRING_SPLIT_STRIP_LEFT | WEECHAT_STRING_SPLIT_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS, 0, & argc ) ; if (! str_temp ) return ; str_temp = strndup ( str_modes, strlen ( str_modes ) + 1, NULL, WEECHAT_STRING_SPLIT_STRIP_LEFT | WEECHAT_STRING_SPLIT_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS, 0, & argc ) ; if (! ptr_",0
646,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_bit_t <S2SV_ModEnd> decode_uniform ( vpx_reader <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> int v = vpx_read_bit <S2SV_ModEnd> ( r )",0
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> if (! cm -> fc -> parallel_decoding_mode ) ++ cm -> counts -> <S2SV_ModEnd> comp_inter [ ctx",0
649,"<S2SV_ModStart>! stream ) <S2SV_ModEnd> fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" <S2SV_ModStart> ; res = vpx_codec_enc_config_default <S2SV_ModEnd> ( global -> <S2SV_ModStart> ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_timebase. den = 1000 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; # if CONFIG_WEBM_IO stream -> ebml. last_pts_ms = - 1 ; # endif stream -> ebml. debug = global -> debug ; stream -> config. cfg. g_lag_in_frames = 0 ; stream -> config. out_fn = NULL ; stream -> next = NULL ; return stream ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
650,"<S2SV_ModStart> nd_opt_rdnss * oprd ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""dnssl"" ), op -> nd_opt_mtu ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_rdnssl, ""dnssl"" ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""rdnssl"" ), op -> nd_opt_mtu ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""rdnssl"" ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt",0
651,<S2SV_ModStart> = 0 ; if ( ( * re_ast ) -> root_node == NULL ) { yr_error ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror (,0
652,"<S2SV_ModStart> ) ) ; if ( iter -> var_expand_table ) { <S2SV_ModStart>, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } <S2SV_ModStart> 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found, <S2SV_blank> using <S2SV_blank> default <S2SV_blank> value <S2SV_blank> %s"", str_c ( path ), key -> key -> default_value ) ; key -> value = key -> key -> default_value ; } else { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank>",0
653,<S2SV_ModStart> = 0 ; tok -> type_comments = 0 ;,0
654,"<S2SV_ModStart> maxBitrate ; } if ( av1 -> av1_config ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> dataLength ) ; av1 -> av1_config = NULL ; }",0
655,<S2SV_ModStart> maxFrameNum ) ; if ( dpbSize <= MAX_NUM_REF_PICS ) { return ( MEMORY_ALLOCATION_ERROR ) ; } <S2SV_ModStart> dpbSize ) ; if ( dpb -> numRefFrames > MAX_NUM_REF_PICS ) { return ( MEMORY_ALLOCATION_ERROR ) ; },0
656,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out <S2SV_ModStart> ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL,0
657,,1
658,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) >= 4 ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } <S2SV_ModStart> s ) ; if ( type == TYPE_RDP_NEG_REQ ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> type <S2SV_blank> %"" PRIu8 """", type ) ; return FALSE ; } <S2SV_ModStart> s ) ; if ( type == TYPE_RDP_NEG_REQ ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> type <S2SV_blank> %"" PRIu8 """", type ) ; return FALSE ; } <S2SV_ModStart> s ) ; if ( type == TYPE_RDP_NEG_REQ ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> type <S2SV_blank> %"" PRIu8 """", type ) ; return FALSE ; } <S2SV_ModStart> s ) ; if ( type == TYPE_RDP_NEG_REQ ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> type <S2SV_blank> %"" PRIu8 """", type ) ; return FALSE ; }",0
659,"<S2SV_ModStart> ipv6_pinfo * np = rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ( sk ) ) <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> ) ) { opt = rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt = rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ) ; opt = rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ( sk ) ) ; } else { opt = rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ( sk ) ) ) ; if ( opt == NULL ) { opt = rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ) ; opt = rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ( sk ) ) ; } }",0
660,"<S2SV_ModStart>, at ; size_t <S2SV_ModEnd> hdr_size, j <S2SV_ModStart>, hdr_size, opt_size <S2SV_ModEnd> ; unsigned int <S2SV_ModStart>, hdr_size, opt_size <S2SV_ModEnd>, j ; <S2SV_ModStart>, hdr_size, opt_size <S2SV_ModEnd>, j ; <S2SV_ModStart>, hdr_size, opt_size <S2SV_ModEnd>, j ; <S2SV_ModStart>, hdr_size, opt_size <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, hdr_size, opt_size <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, hdr_size, opt_size <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, hdr_size, opt_size <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, hdr_size, opt_size <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, hdr_size, opt_size <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, hdr_size, opt_size <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, hdr_size, opt_size <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, hdr_size, opt_size <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, hdr_size, opt_size <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, hdr_size, opt_size <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, hdr_size, opt_size <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, hdr_size, opt_size",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> address ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; } <S2SV_ModStart> 5 ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; }",0
662,"<S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> rc = cib_tls_signon <S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> rc = cib_tls_signon <S2SV_ModStart> ) ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. session, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. session, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CR",0
663,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
664,"<S2SV_ModStart> 3 } ; vp9_int64_t <S2SV_ModEnd> new_mv_mode_penalty = 256 <S2SV_ModStart> bsize ] ; vp9_int64_t <S2SV_ModEnd> sr = 0 <S2SV_ModStart> bsize ) ; vp9_int64_t <S2SV_ModEnd> new_mv_mode_penalty = 256 <S2SV_ModStart> bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_",0
665,"<S2SV_ModStart> ntreg_header ) ; if ( h -> size == 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; }",0
666,<S2SV_ModStart> ) ; } if ( child -> reqbody_limit == NOT_SET ) { if ( parent -> reqbody_limit == NOT_SET ) { if ( parent -> reqbody_limit == NOT_SET ) { if ( parent -> reqbody_limit == NOT_SET ) { if ( parent -> reqbody_limit == NOT_SET ) { if ( parent -> reqbody_limit == NOT_SET ) { if ( parent -> reqbody_limit == NOT_SET ) { if ( parent -> reqbody_limit == NOT_SET ) { if ( parent -> reqbody_limit == NOT_SET ) { if ( parent -> reqbody_limit == NOT_SET ) { if ( parent -> reqbody_limit == NOT_SET ) { if ( parent -> reqbody_limit == NOT_SET ) { if ( parent -> reqbody_limit == NOT_SET ) { if ( parent -> reqbody_limit == NOT_SET ) { if ( parent -> reqbody_limit == NOT_SET ) { if ( parent -> reqbody_limit == NOT_SET ) { if ( parent -> reqbody_limit == NOT_SET ) { if ( parent -> reqbody_limit == NOT_SET,0
667,"<S2SV_ModStart> one, offset, pixel_info_length <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""Insufficient",0
668,"<S2SV_ModStart>!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> key, comp -> key_len ) )!= 0 || ( r = sshbuf_put_string ( b, m -> data, m -> data_len ) )!= 0 || ( r = sshbuf_put_string ( b, m -> data, m -> data_len ) )!= 0 || ( r = sshbuf_put_string ( b, m -> data, m -> data_len ) )!= 0 || ( r = sshbuf_put_string ( b, m -> data, m -> data_len ) )!= 0 || ( r = sshbuf_put_string ( b, m -> data, m -> data_len ) )!= 0 || ( r = sshbuf_put_string ( b, m -> data, m -> data_len ) )!= 0 || ( r = ssh",0
669,"<S2SV_ModStart> tok ) ) { smatch ( option, "" <S2SV_blank> =\\t,"", & ovalue ) ; ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, ( ssize ) getnum ( ovalue ) ) ; } else { httpSetTraceEventLevel ( route -> trace, option, ( ssize ) getnum ( ovalue ) ) ; } if ( smatch ( option, ""content"" ) ) { httpSetTraceContentSize ( route -> trace, ( ssize ) getnum ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, ( ssize ) getnum ( ovalue ) ) ; } else { httpSetTraceEventLevel ( route -> trace, option, ( ssize ) getnum ( ovalue ) ) ; }",0
670,"<S2SV_ModStart> user_data ) { <S2SV_ModEnd> g_hash_table_remove ( client_list <S2SV_ModStart> num_clients ) ; g_hash_table_remove ( client_list, client -> id ) ; <S2SV_ModEnd> free ( client <S2SV_ModStart> user ) ; g_hash_table_remove ( client_list, client -> id ) ; g_hash_table_remove ( client_list, client -> name ) ; g_hash_table_remove ( client_list, client -> id ) ; g_hash_table_remove ( client_list, client -> id ) ; g_hash_table_remove ( client_list, client -> id ) ; g_hash_table_remove ( client_list, client -> id ) ; free ( client ) ; crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client"" ) ; if ( cib_shutdown_flag ) { cib_shutdown ( 0 ) ; } return ; } g_hash_table_remove ( client_list, client -> id ) ; free ( client_list ) ; g_hash_table_remove ( client_list, client -> id ) ; free ( client_list ) ; g_hash_table_remove ( client_",0
671,"<S2SV_ModStart> * uv ; for ( uv = thread -> openupval ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; markvalue ( g, uv -> v ) ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
