,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,"<S2SV_ModStart> ; if ( unfrag_ip6hlen < 0 || unfrag_ip6hlen > skb -> len - frag_hdr_sz ) { unfrag_ip6hlen = skb -> len - frag_hdr_sz ; goto out ; } unfrag_ip6hlen = min_t ( u32, unfrag_ip6hlen, skb -> len - frag_hdr_sz ) ; unfrag_ip6hlen = min_t ( u32, unfrag_ip6hlen, skb -> len - frag_hdr_sz ) ; unfrag_ip6hlen = min_t ( u32, unfrag_ip6hlen, skb -> len - frag_hdr_sz ) ; unfrag_len = min_t ( u32, unfrag_ip6hlen, skb -> len - frag_hdr_sz ) ; unfrag_ip6hlen = min_t ( u32, unfrag_ip6hlen, skb -> len - frag_hdr_sz ) ; unfrag_ip6hlen = max_t ( u32, unfrag_ip6hlen, skb",0
2,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
3,<S2SV_ModStart> item ) { return <S2SV_ModEnd> cJSON_GetArrayItem ( array <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
4,"<S2SV_ModStart> perf_sw_event ( u32 <S2SV_ModEnd> event_id, u64 <S2SV_ModStart>, event_id, <S2SV_ModEnd> & data,",0
5,"<S2SV_ModStart> { # ifndef _MSC_VER char * buf ; int i ; <S2SV_ModStart> { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModEnd> leaf = grub_ext4_find_leaf <S2SV_ModStart> { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) leaf + 1 ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; if ( fileblock >= grub_le_to_cpu16 ( ext [ i ]. len ) ) break ; <S2SV_ModStart> 0 ; } else { grub_disk_addr_t start ; start = grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le",0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ) { tran_high_t step1 [ 8 ] ; tran_high_t step2 [ 8 ] ; tran_high_t step3 [ 8 ] ; tran_high_t step4 [ 8 ] ; tran_high_t step5 [ 8 ] ; tran_high_t step6 [ 8 ] ; tran_high_t <S2SV_ModEnd> step4 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 0 <S2SV_ModStart> 15 ] ; { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7 ; tran_high_t t0, t1, t2, t3 ; tran_high_t x0, x1, x2, x3 ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 13 ] ; input [ 3 ] = in [ 3 ] + in [ 10 ] ; input [ 4 ] = in [",0
7,"<S2SV_ModStart> ( ) == 0x48454150 ) { imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; } else { # ifdef LIBRAW_LIBRARY_BUILD <S2SV_ModStart> = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; }",0
8,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> ) { VP9_COMMON * const cm = & cpi -> common ; struct loopfilter * const lf = & cm -> lf ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; int best_err ; int filt_mid ; int filter_step = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int ss_err [ MAX_LOOP_FILTER + 1 ] ; memset ( ss_err, 0xFF, sizeof ( ss_err ) ) ; vp9_yv12_copy_y ( cm -> frame_to_show, & cpi -> last_frame_uf ) ; while ( filter_step > 0 ) { const int",0
9,"<S2SV_ModStart> left ; luaL_checkstack ( L, 2, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, limit ) ; <S2SV_ModStart> left ; luaL_checkstack ( L, 2, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, limit ) ;",0
10,"<S2SV_ModStart> encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, mv_class == MV_CLASS_0? mvcomp -> class0_hp : mvcomp -> hp ) ; vpx_write_token ( w, vp9_mv_class_tree, mvcomp -> classes, & mv_class_encodings [ mv_class ] ) ; if ( usehp ) vpx_write ( w, hp, mv_class == MV_CLASS_0? mvcomp -> class0_hp : mvcomp -> hp ) ; } else { int i ; for ( i = 0 ; i < n ; ++ i ) vpx_write ( w, ( d >> i ) & 1, mvcomp -> bits [ i ] ) ; } vpx_write_token ( w, vp9_mv_fp_tree, mv_class == MV_CLASS_0? mvcomp -> class0_fp [ d ] : mvcomp -> fp, & mv_fp_encodings [ fr ] ) ; if ( usehp ) vpx_write ( w, hp, mv_class == MV_CLASS_",0
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> ( ) ) { <S2SV_ModStart> ( ) ; },1
12,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ( ndo, ""%s"", tok2str ( l2tp_cc_direction2str, ""Direction-#%u"", * ( ( const u_char * ) ptr ++ ) ) ) ; if ( length < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModEnd> if ( length <S2SV_ModStart> 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; print_string ( ndo, ptr, 5 ) ; return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
13,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct key * construct_get_dest_keyring ( struct key * dest_keyring ) { const struct cred * cred = current_cred ( ) ; <S2SV_ModStart> ; } else { <S2SV_ModStart> ) ; } <S2SV_ModEnd> } case KEY_REQKEY_DEFL_DEFAULT <S2SV_ModStart> case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : if ( cred -> request_key_auth ) { authkey = cred -> request_key_auth ; up_read ( & authkey -> sem ) ; if (! test_bit ( KEY_FLAG_REVOKED, & authkey -> flags ) ) dest_keyring = key_get ( authkey -> dest_keyring ) ; break ; } case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( cred -> process_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_",0
14,<S2SV_ModStart> = create_spnego_ctx ( 0,0
15,<S2SV_ModStart> tm = localtime <S2SV_ModEnd> ( & t,0
16,"<S2SV_ModStart> length ) ; md5_init ( & md5_secret ) ; MD5Update ( & md5_secret, password, strlen ( password ) ) ; my_md5 = md5_secret ; MD5Update ( & my_md5, vector, AUTH_VECTOR_LEN ) ; MD5Final ( misc, & my_md5 ) ; xor ( hashed, misc, AUTH_PASS_LEN ) ; for ( i = 1 ; i < length >> 4 ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5, vector, AUTH_VECTOR_LEN ) ; MD5Final ( misc, & my_md5 ) ; xor ( hashed, misc, AUTH_PASS_LEN ) ; for ( i = 1 ; i < ( length >> 4 ) ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5, vector, AUTH_VECTOR_LEN ) ; MD5Final ( misc, & my_md5 ) ; xor ( hashed, misc, AUTH_PASS_LEN ) ; }",0
17,"<S2SV_ModStart> ; if ( e == NULL ) { * errnop = ENOMEM ; return NSS_STATUS_NOMEM ; } r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) goto not_found ; r = sd_bus_call_method ( bus, ""org.freedesktop/machine1"", ""org.freedesktop/machine1.Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) goto not_found ; r = sd_bus_message_read ( reply, ""u"", & mapped ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; }",0
18,"<S2SV_ModStart> ( inode, CAP_CHOWN <S2SV_ModEnd> ) ) return <S2SV_ModStart> ( inode, CAP_CHOWN <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if ( ia_valid & ATTR_MODE ) { if (! inode_owner_or_capable ( inode ) ) return - EPERM ; if (! in_group_p ( ( ia_valid & ATTR_MODE )? attr -> ia_mode : inode -> i_mode ) &&! capable ( CAP_FSETID ) ) attr -> ia_mode &= ~ S_ISGID ; } if ( ia_valid & ATTR_MTIME_SET ) { if (! inode_owner_or_capable ( inode ) ) return - EPERM ; if (! inode_owner_or_capable ( inode ) ) return - EPERM ; if (! in_group_p ( ( ia_valid & ATTR_MODE )? attr -> ia_mode : inode -> i_mode ) &&! capable ( CAP_FSETID ) ) attr -> ia_mode &= ~ S_ISGID ; } if ( ia_valid & ATTR_MTIME_SET ) { if (! inode_owner_or_capable ( inode ) ) return",0
19,"<S2SV_ModStart> NULL, NULL, & timeout ) ; if (! FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return FALSE ; } <S2SV_ModStart>, & read_fds, NULL, NULL, & timeout ) ; if (! FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return FALSE ; }",0
20,"<S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> int j ; TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> twopass -> stats_in ; FIRSTPASS_STATS tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; } reset_fpf_position ( twopass, position ) ; return trans_to_still ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
21,"<S2SV_ModStart> return ret ; ret = ext4_convert_unwritten_extents_nolock ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; }",0
22,<S2SV_ModStart> alg ) { if ( type & ( <S2SV_ModEnd> mask & CRYPTO_ALG_NEED_FALLBACK <S2SV_ModStart> ) ) { if ( type & ( <S2SV_ModEnd> mask & CRYPTO_ALG_NEED_FALLBACK <S2SV_ModStart> ) ) { if ( type & ( <S2SV_ModEnd> mask & CRYPTO_ALG_NEED_FALLBACK <S2SV_ModStart> ) ) { if ( type & ( <S2SV_ModEnd> mask & CRYPTO_ALG_NEED_FALLBACK <S2SV_ModStart> ) ) { <S2SV_ModStart> ) ) { if ( type & ( <S2SV_ModEnd> mask & CRYPTO_ALG_NEED_FALLBACK <S2SV_ModStart> ) ) { if ( type & ( <S2SV_ModEnd> mask & CRYPTO_ALG_NEED_FALLBACK <S2SV_ModStart> ) ) { if ( type & ( <S2SV_ModEnd> mask & CRYPTO_ALG_NEED_FALLBACK <S2SV_ModStart> ) ) { if ( type & ( <S2SV_ModEnd> mask & CRYPTO_ALG_NEED_FALLBACK <S2SV_ModStart> ) ) { <S2SV_ModStart> ) ) { if ( type & ( <S2SV_ModEnd> mask & CRYPTO_ALG_NEED_FALLBACK <S2SV_ModStart> ) ) { if ( type & ( <S2SV_ModEnd> mask & CRYPTO_ALG_NEED_FALLBACK <S2SV_ModStart> ) ) { if (,0
23,"<S2SV_ModStart> = GIT_PKT_NG ; ptr = line ; if (! ( ptr = strchr <S2SV_ModEnd> ( line, <S2SV_ModStart>'<S2SV_blank>') ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' ; line = ptr + 1 ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg,",0
24,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read <S2SV_blank> negotiation <S2SV_blank> request"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read <S2SV_blank> negotiation <S2SV_blank> request"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> RequestedProtocol <S2SV_blank> 0x%08"" PRIX32 """", nego -> RequestedProtocols ) ; return ; }",0
25,"<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; num = avio_r8 ( pb ) ; avio_seek ( pb, off, SEEK_SET ) ; if ( num > size ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"", num ) ; return AVERROR_PATCHWELCOME ; } num = avio_r8 ( pb ) ; avio_seek ( pb, off, SEEK_SET ) ; if ( num > size ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"", num ) ; return AVERROR_PATCHWELCOME ; } if ( den > size ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"", den ) ; return AVERROR_PATCHWELCOME ; }",0
26,"<S2SV_ModStart> 1 ; } ret = safe_mount ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount <S2SV_blank> entry <S2SV_blank> failed"" ) ; return - 1 ; }",0
27,"<S2SV_ModStart> - ENODEV ; io -> inputb = intf_mem_inb ; io -> outputb = intf_mem_outl ; break ; case 1 : io -> inputb = intf_mem_inb ; io -> outputb = intf_mem_outb ; break ; case 2 : io -> inputb = intf_mem_inw ; io -> outputb = intf_mem_outw ; break ; case 4 : io -> inputb = intf_mem_inl ; io -> outputb = intf_mem_outl ; break ; case 8 : io -> inputb = mem_inq ; io -> outputb = mem_outq ; break ; default : dev_warn ( io -> dev, ""Invalid <S2SV_blank> register <S2SV_blank> size: <S2SV_blank> %d\\n"", io -> regsize ) ; return - EINVAL ; } for ( idx = 0 ; idx < io -> io_size ; idx ++ ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME ) == NULL ) { mem_region_cleanup ( io, idx ) ; return - EIO ; } } mapsize = ( ( addr",0
28,<S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = ( 0.0 ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = ( 0.0 ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = ( 0.0 ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = ( 0.0 ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = ( 0.0 ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = ( 0.0 ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = ( 0.0 ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = ( 0.0 ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = ( 0.0 ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = ( 0.0 ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = ( 0.0 ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = ( 0.0 ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = ( 0.0 ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = ( 0.0 ) <S2SV_ModEnd> ; break ;,0
29,<S2SV_ModStart> ) ) ; if ( ret < 0 ) { btif_storage_del_bonded_device ( remote_bd_addr ) ; return BT_STATUS_FAIL ; } <S2SV_ModStart> ) ) ; if ( ret < 0 ) { btif_storage_del_bonded_device ( remote_bd_addr ) ; return BT_STATUS_FAIL ; },0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if ( ( iface -> caps & VPX_CODEC_CAP_ENCODER ) && ( iface -> caps & VPX_CODEC_CAP_RAW_DATA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( iface -> caps & VPX_CODEC_CAP_ENCODER ) && ( iface -> caps & VPX_CODEC_CAP_RAW_DATA ) ) res = VPX_CODEC_INVALID_PARAM ; else if ( ( iface -> caps & VPX_CODEC_CAP_ENCODER ) && ( iface -> caps & VPX_CODEC_CAP_RAW_DATA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( iface -> caps & VPX_CODEC_CAP_ENCODER ) && ( iface -> caps & VPX_CODEC_CAP_RAW_DATA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( iface -> caps & VPX_CODEC_CAP_ENCODER ) && (,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> uint64_t dx_time ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out ) ; fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out",0
33,"<S2SV_ModStart> ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> all <S2SV_blank> fields\\n"" ) ; <S2SV_ModEnd> if ( imp_dbh <S2SV_ModStart> ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> all <S2SV_blank> fields\\n"" ) ; <S2SV_ModEnd> if ( imp_dbh <S2SV_ModStart> ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> all <S2SV_blank> fields\\n"" ) ; <S2SV_ModEnd> if ( imp_dbh <S2SV_ModStart> ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> all <S2SV_blank> fields\\n"" ) ; <S2SV_ModEnd> if ( imp_dbh <S2SV_ModStart> ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> all <S2SV_blank> fields\\n"" ) ; <S2SV_ModEnd> if ( imp_dbh <S2SV_ModStart> ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> all <S2SV_blank> fields\\n"" ) ; <S2SV_ModEnd> if ( imp_dbh <S2SV_ModStart> ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> all <S2SV_blank> fields\\n""",0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteBuffer ( interface, buffer, offset ) ; enc28j60WriteBuffer ( interface, buffer, offset ) ; enc28",0
35,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o ->",0
36,"<S2SV_ModStart> ; if (! access ( req, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ; if (! access ( req, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ; if (! access ( req, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ; if (! access ( req, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ; if (! access ( req, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ; if (! access ( req, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ; if (! access ( req, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ; if (! access ( req, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ; if (! access ( req, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ; if (! access ( req, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ; if (! access ( req, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ; if (! access ( req, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ; if (! access ( req, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ; if (! access ( req, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ; if (! access ( req, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ; if (! access ( req, R_OK <S2SV_ModEnd> )",0
37,"<S2SV_ModStart> flag ) { ( void ) low_var_thresh ; ( void ) post ; ( void ) low_var_thresh ; ( void ) low_var_thresh ; ( void ) flag ; int mb_rows = source -> y_width >> 4 ; int mb_cols = source -> y_height >> 4 ; unsigned char * limits = cm -> pp_limits_buffer ; int mbr, mbc ; ( void ) low_var_thresh ; ( void ) flag ; memset ( limits, ( unsigned char ) ppl, 16 * mb_cols ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; for ( mbr = 0 ; mbr < mb",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> ce = mb_cache_entry_alloc <S2SV_ModStart> int error ; ce = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS ) ; if (! ce ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } error = mb2_cache_entry_insert ( ext4_mb_cache, bh -> b_bdev, bh -> b_blocknr, hash ) ; <S2SV_ModEnd> if ( error <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } <S2SV_null>",0
39,"<S2SV_ModStart> ) ) ; if (! r_socket_http_answer ( s, code, rlen ) ) { free ( uri ) ; return NULL ; } <S2SV_ModStart> rlen ) ; if (! r_socket_http_answer ( s, code, rlen ) ) { free ( uri ) ; return NULL ; }",0
40,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> = ip_options_get_alloc ( <S2SV_ModEnd> optlen ) ; <S2SV_ModStart> if ( optlen && copy_from_user ( & opt -> __data, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } return ip_options_get_finish ( net, optp, opt, optlen ) <S2SV_ModEnd> ; } <S2SV_null>",0
41,"<S2SV_ModStart> ; trunc : if ( dio -> rpl_mopprf & RPL_DIO_TRUNC ) { <S2SV_ModStart> ndo, "" <S2SV_blank> [|truncated]"" ) ; } else if ( dio -> rpl_mopprf & RPL_DIO_TRUNC ) { if ( dio -> rpl_mopprf & RPL_DIO_TRUNC ) { if ( dio -> rpl_mopprf & RPL_DIO_TRUNC ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; } else if ( dio -> rpl_mopprf & RPL_DIO_TRUNC ) { if ( dio -> rpl_mopprf & RPL_DIO_TRUNC ) { if ( dio -> rpl_mopprf & RPL_DIO_TRUNC ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; } else { ND_PRINT ( ( ndo,",0
42,"<S2SV_ModStart> ; } else { if ( * varp == NUL ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; else if ( term_is_gui ( T_NAME ) ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( term_is_gui ( T_NAME ) ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( term_is_gui ( T_NAME ) ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( set_termname ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E522: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> termcap"" ) ; else if (",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
44,"<S2SV_ModStart> size_t size ; if ( width < 0 || height < 0 || hstep <= 0 || vstep <= 0 ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_intfast32_add ( tly, hstep, 0 ) ) { goto error ; } if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } cmpt -> stream_ = ( inmem )? jas_stream_memopen2 ( 0, size ) : jas_stream_tmpfile ( ) ; if (! cmpt -> stream_ ) { goto error ; } if (",0
45,<S2SV_ModStart> == datalen && ( pc + asn1_op_lengths [ op ] > datalen ) ) { flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; } if ( ( op & ASN1_OP_MATCH__COND && flags & FLAG_MATCHED ) || ( dp + asn1_op_lengths [ op ] > datalen ) ) { flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; },0
46,"<S2SV_ModStart> * req, __be32 * acl_data <S2SV_ModEnd> ) { struct <S2SV_ModStart> int status ; struct kvec * iov = req -> rq_rcv_buf. head ; struct kvec * iov_base = req -> rq_rcv_buf. head ; uint32_t attrlen, bitmap [ 3 ] ; if ( ( status = decode_op_hdr ( xdr, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen <S2SV_ModStart> ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen <S2SV_ModStart> ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart> ) ; } if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = HTTP -> uid ; } else { uid = 0 ; } } if ( group && * group ) { if ( smatch ( owner, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = groupToID ( group ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; }",0
49,"<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER int number_aau ; if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; if ( hmm_alloc ( & hmm_d, number_aau ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ) ; addr = VPX_MALLOC_L ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr",0
50,"<S2SV_ModStart> int res ; read_fs_blocks ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } <S2SV_ModStart> long long export_index_table [ indexes ] ; res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table, indexes ) ; * table_start = export_index_table [ 0 ] ; return TRUE ; } <S2SV_ModEnd> <SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table",0
51,"<S2SV_ModStart> ; } else return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"" <S2SV_ModEnd>, p1 )",0
52,"<S2SV_ModStart> = 0 ; # if CONFIG_VP8_ENCODER if ( strcmp ( global -> codec -> name, ""vp8"" ) == 0 ) { ctrl_args = vp8_args ; ctrl_args_map = vp8_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif <S2SV_ModStart> } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & arg, & fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm = 0 ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm",0
53,"<S2SV_ModStart> 1 ; } s_log ( LOG_INFO, ""Certificate <S2SV_blank> verification <S2SV_blank> enabled"" ) ; return 1 ; } <S2SV_ModEnd> if ( verify_checks <S2SV_ModStart> preverify_ok, callback_ctx ) ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } if ( c -> opt -> option. client || c -> opt -> protocol ) return 0 ; if ( c -> opt -> redirect_addr. names &&! verify_checks ( c, preverify_ok, callback_ctx ) ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } return 1 ; } <S2SV_ModEnd> return 0 ;",0
54,"<S2SV_ModStart> ; if ( fixed_length < AT91_AES_BLOCK_SIZE_BYTE ) { rc = - EINVAL ; goto exit ; } if ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { rc = - EINVAL ; goto exit ; } } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { rc = - EINVAL ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { at91_aes_cleanup ( ) ; memset ( cmac_key, 0, sizeof ( cmac_key ) ) ; memset ( cipher_key, 0, sizeof ( cipher_key ) ) ; memset ( iv, 0, sizeof ( iv ) ) ; memset ( cipher_key, 0, sizeof ( cipher_key ) ) ; memset (",0
55,"<S2SV_ModStart> cpi ) { ( void ) cpi ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> ; if ( <S2SV_ModEnd> cpi -> common <S2SV_ModStart> KEY_FRAME ) { cpi -> twopass. gf_group_bits += cpi -> rc. this_frame_target - bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } else { cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } } else { cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } }",0
56,"<S2SV_ModStart> EOFOp 0x07 return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
57,"<S2SV_ModStart> err_free_urbinfo ; } dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg (",0
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",0
59,"<S2SV_ModStart> = ""/tmp"" ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> fd = mkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> dir ) ) == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
60,<S2SV_ModStart> = value ; if ( ps_sps -> i1_sps_valid == 0 ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ps_sps -> i1_sps_valid == 1 ) { ps_codec -> i4_pps_done = 1 ; ps_codec -> i4_pps_done = 0 ; ps_codec -> i4_sps_done = 1 ; ps_codec -> i4_pps_done = 1 ; ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ps_sps -> i1_sps_valid == 1 ) { ps_codec -> i4_pps_done = 1 ; ps_codec -> i4_pps_done = 1 ; ps_codec -> i4_sps_done = 1 ; ps_codec -> i4_pps_done = 1 ; ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; },0
61,"<S2SV_ModStart> ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( <S2SV_ModStart> ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
62,"<S2SV_ModStart> void vp9_setup_dst_planes ( <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> int mi_col ) { const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; const int buffers [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_x, pd -> subsampling_y, NULL, pd -> subsampling",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,"<S2SV_ModStart> == READ ) { ssize_t ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; if ( ret < 0 ) return ret ; ret = min_t ( ssize_t, ret, inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize ) ; if ( ret < 0 ) return ret ; get_block = ocfs2_get_block ; ret = min_t ( ssize_t, ret, inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize ) ; if ( ret < 0 ) return ret ; ret = min_t ( ssize_t, ret, inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize ) ; if ( ret < 0 ) return ret ; ret = min_t ( ssize_t, ret, inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - inode -> i_sb ->",0
65,"<S2SV_ModStart> if ( fscanf ( f, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == 2 ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strcpy ( newstring, strparm + 1 ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( strparm [ 1 ] == 'x' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm, ""%i"", & parm ) ; for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) { if (! isstring ) * defaults [ i ]. location = parm ; else * defaults [ i ]. location = scantokey [ parm ] ;",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> ; int kind <S2SV_ModEnd> ; void * <S2SV_ModStart> ; PyCompilerFlags cf <S2SV_ModEnd> ; char * <S2SV_ModStart> * str ; PyObject * o, * fstring_name <S2SV_ModStart> ; Py_ssize_t i <S2SV_ModEnd> ; assert ( <S2SV_ModStart> expr_end == ':' ) ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = PyUnicode_GET_LENGTH ( o ) ; kind = PyUnicode_GET_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! PyUnicode_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } } str [ 0 ] = '(' ; memcpy ( str + 1, expr_start, len ) ; str [ len + 1 ] = ')' ; str [ len + 2 ] = 0 ; cf. cf_flags = PyCF_ONLY_AST ; fstring_",0
67,<S2SV_ModStart> string ) { <S2SV_ModEnd> while ( c,0
68,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE,0
69,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> val_l ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> val_l ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> val_l ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> val_l ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too",0
70,"<S2SV_ModStart> void ) { test_checkout_fails <S2SV_ModEnd> ( ""refs/heads/git_tilde1"", <S2SV_ModStart> "".git/foobar"" ) ; test_checkout_fails <S2SV_ModEnd> ( ""refs/heads/git_tilde1"", <S2SV_ModStart> "".git/foobar"" ) ; test_checkout_fails <S2SV_ModEnd> ( ""refs/heads/git_tilde1"",",0
71,"<S2SV_ModStart> int i ; const int strides [ MAX_MB_PLANE ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_x, pd -> subsampling_y ) ; setup_pred_plane ( & pd -> pre [ idx ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_y, pd -> subs",0
72,<S2SV_ModStart> ; lock_sock ( sk ) ; msg -> msg_namelen = sizeof ( * sgl ),0
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,"<S2SV_ModStart> user ) { struct ipmi_hba * hba = container_of ( user, struct ipmi_hba, user ) ; if ( hba -> hba_type!= IPMI_HBA_TYPE_NONE && hba -> hba_type!= IPMI_HBA_TYPE_NONE && hba -> hba_type!= IPMI_HBA_TYPE_NONE && hba -> hba_type!= IPMI_HBA_TYPE_NONE ) hba -> hba_type = IPMI_HBA_TYPE_NONE ; cleanup_srcu_struct ( & hba -> release_barrier ) ; if ( hba -> hba_type!= IPMI_HBA_TYPE_NONE && hba -> hba_type!= IPMI_HBA_TYPE_NONE && hba -> hba_type!= IPMI_HBA_TYPE_NONE && hba -> hba_type!= IPMI_HBA_TYPE_NONE ) hba -> hba_type = IPMI_HBA_TYPE_NONE ;",0
75,"<S2SV_ModStart> ; int sl = 0 ; int limit = 0 ; mongo_message * mm ; if ( cursor -> seen >= cursor -> limit ) { cursor -> err = MONGO_CURSOR_EXHAUSTED ; return MONGO_ERROR ; } mm = mongo_message_create ( 16 + 4, 0, 0, 0, MONGO_OP_GET_MORE ) ; data = & mm -> data ; data = mongo_data_append32 ( data, & limit ) ; mongo_data_append32 ( data, & ZERO ) ; mongo_data_append64 ( data, & cursor -> reply -> fields. cursorID ) ; mongo_data_append32 ( data, & limit ) ; mongo_data_append64 ( data, & cursor -> reply -> fields. num ) ;",0
76,"<S2SV_ModStart> * for_ch ; type_ty type = TYPE ( CHILD ( n, 0 ) ) ; if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } if ( c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } if ( is_async && c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ;",0
77,"<S2SV_ModStart> NULL ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst_state -> frame [ i ] = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } dst_state -> frame [ i ] = dst ; } err = copy_func_state ( dst, src -> frame [ i ] ) ; if ( err ) return err ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst_state",0
78,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> write_mb_modes_kf ( const <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> -> above_mi ; const MODE_INFO * const above_mi = mi_8x8 [ - xd -> mi_stride <S2SV_ModEnd> ] ; const <S2SV_ModStart> ; const MODE_INFO * const left_mi = mi_8x8 [ - 1 ] ; const MB_MODE_INFO * const mbmi = mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id ) ; write_skip ( cpi, mbmi -> tx_size, bsize, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; else { const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4",0
79,"<S2SV_ModStart> maxn ) { # ifdef DEBUG fprintf ( stderr, ""%d:\\tACTION[%3.3d]: <S2SV_blank> %s\\n"", n, actionName ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) ) ; # endif <S2SV_ModStart>. SWF_ACTIONRECORD. ActionCode ) ) { case SWFACTION_END : return 0 ; case SWFACTION_GOTOFRAME : return decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME2 : return decompileGOTOFRAME ( n, actions, maxn, 0 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETPROPERTY : decompileGETPROPERTY ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : return decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n, actions, maxn",0
80,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> len < sizeof <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS <S2SV_ModStart> n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", ps -> slot, ps -> page. p_uid ) ) ; ps = ( const struct pgstate * ) ( ps + 1 ) ; for ( ie = io + ps -> nid ; ie < ie && ND_TTEST ( * io ) ; ++ ie ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) ie ; for ( ie = io + ps -> nid ; ie < ie && ND_TTEST ( * io ) ; ++ ie ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io ->",0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return - 1 ; } <S2SV_ModEnd> pTable -> nModuleArg",0
83,<S2SV_ModStart> ] ; } if ( idx + HBE_OPER_WIN_LEN > sizeof ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] ) || idx + HBE_OPER_WIN_LEN > sizeof ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] ) || idx + HBE_OPER_WIN_LEN > sizeof ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] ) || idx + HBE_OPER_WIN_LEN > sizeof ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] ) || idx + HBE_OPER_WIN_LEN > sizeof ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] ) ) { return idx,0
84,"<S2SV_ModStart> -> dmin ; if ( p - reg -> dmin < s ) { retry_gate : pprev = p ; p += enclen ( reg -> enc, p ) ; goto retry ; } <S2SV_ModStart> -> dmin ; if ( p - reg -> dmin < s ) { retry_gate : pprev = p ; p += enclen ( reg -> enc, p ) ; goto retry ; } <S2SV_ModStart> ONIG_OPTIMIZE_BM_NOT_REV : p = bm_search_notrev ( reg, reg -> exact, reg -> exact_end, p, end, range ) ; break ; case ONIG_OPTIMIZE_BM_NOT_REV : p = bm_search_notrev ( reg, reg, reg -> exact, reg -> exact_end, p, end, range ) ; break ; case ONIG_OPTIMIZE_BM_NOT_REV : p = bm_search_notrev ( reg, reg, reg -> exact, reg -> exact_end, p, end, range ) ; break ; case ONIG_OPTIMIZE_BM_NOT_REV : p = bm_search_notrev ( reg",0
85,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct bfq_queue * <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> struct bfq_data * <S2SV_ModEnd> bfqd = bfqq <S2SV_ModStart> flags ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ;,0
86,,1
87,"<S2SV_ModStart> PERF_COUNT_SW_ALIGNMENT_FAULTS, 1 <S2SV_ModEnd>, address )",0
88,"<S2SV_ModStart> + x > ( Py_ssize_t ) <S2SV_ModStart> + x > ( Py_ssize_t ) <S2SV_ModStart> NULL ; } if ( diffPtr + x > ( Py_ssize_t ) ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( extraPtr + y > ( Py_ssize_t ) ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( extraPtr + y > ( Py_ssize_t ) ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
89,"<S2SV_ModStart> pktopts ) ; rcu_read_lock ( ) ; <S2SV_ModStart>, fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
90,"<S2SV_ModStart> ; if ( MagickMax ( number_data_bands, number_pixels ) > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ; if ( MagickMax ( number_data_bands, number_pixels ) > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ; if ( MagickMax ( number_data_bands, number_data_bands, number_pixels ) > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ; if ( MagickMax ( number_data_bands, number_data_bands ) > MagickMax ( number_data_bands, number_data_bands ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ; if ( MagickMax ( number_data_bands, number_data_bands ) > MagickMax ( number_data_bands, number_data_bands ) ) ThrowReaderException (",0
91,<S2SV_ModStart> data ) { # if CONFIG_VP9_HIGHBITDEPTH switch ( ctx -> codec_flags & VPX_CODEC_FLAG_HIGHBITDEPTH ) { case VPX_CODEC_FLAG_HIGHBITDEPTH : ctx -> codec_flags |= VPX_CODEC_FLAG_HIGHBITDEPTH ; break ; case VPX_CODEC_FLAG_HIGHBITDEPTH : ctx -> codec_flags |= VPX_CODEC_FLAG_HIGHBITDEPTH ; break ; } # if CONFIG_VP9_HIGHBITDEPTH switch ( ctx -> codec_flags & VPX_CODEC_FLAG_HIGHBITDEPTH ) { case VPX_CODEC_FLAG_HIGHBITDEPTH : ctx -> codec_flags |= VPX_CODEC_FLAG_HIGHBITDEPTH ; break ; case VPX_CODEC_FLAG_HIGHBITDEPTH : ctx -> codec_flags |= VPX_CODEC_FLAG_HIGHBITDEPTH ; break ; } # endif # if CONFIG_VP9_HIGHBITDEPTH switch ( ctx -> codec_flags & VPX_CODEC_FLAG_HIGHBITDEPTH ) { case VPX_CODEC_FLAG_,0
92,"<S2SV_ModStart> int _Unpickler_ResizeMemoList ( UnpicklerObject <S2SV_ModEnd> * self, <S2SV_ModStart> new_size ) { <S2SV_ModEnd> assert ( new_size <S2SV_ModStart> new_size ) { <S2SV_ModEnd> Py_ssize_t i ; <S2SV_ModStart> * * memo_new = self -> memo ; PyMem_RESIZE ( memo_new, PyObject *, new_size ) ; if ( memo_new == NULL ) { PyErr_NoMemory ( ) ; return - 1 ; } for ( i = self -> memo_size ; i < new_size ; i ++ ) { PyMem_RESIZE ( memo_new, PyObject *, new_size ) ; if ( memo_new == NULL ) { PyErr_NoMemory ( ) ; return - 1 ; } memo_new = self -> memo ; PyMem_RESIZE ( memo_new, PyObject *, new_size ) ; if ( memo_new == NULL ) { PyErr_NoMemory ( ) ; return - 1 ; } self -> memo = memo_new ; PyMem_RESIZE ( memo_new, PyObject *, new_size ) ; if ( memo_new == NULL ) { PyErr_NoMemory ( ) ; return -",0
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,"<S2SV_ModStart>, refframe, & near_mvs [ vcnt <S2SV_ModEnd> ], ref_frame_sign_bias <S2SV_ModStart>, refframe, & near_mvs [ vcnt <S2SV_ModEnd> ], ref_frame_sign_bias <S2SV_ModStart>, refframe, & near_mvs [ vcnt <S2SV_ModEnd> ], ref_frame_sign_bias <S2SV_ModStart>, refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; vcnt ++ ; if ( left -> mbmi. ref_frame!= INTRA_FRAME ) { near_mvs [ vcnt ]. as_int = left -> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; } vcnt ++ ; if ( left -> mbmi. ref_frame!= INTRA_FRAME ) { near_mvs [ vcnt ]. as_int = left -> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, &",0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart> msicap ; pci_read_config_dword <S2SV_ModEnd> ( dev,",0
98,"<S2SV_ModStart> return REDIS_OK ; } if ( server. replstate == REDIS_REPL_CONNECTED && server. replstate!= REDIS_REPL_CONNECTED && cmd -> proc!= infoCommand && cmd -> proc!= slaveofCommand ) { addReplyError ( c, ""link <S2SV_blank> with <S2SV_blank> MASTER <S2SV_blank> is <S2SV_blank> down <S2SV_blank> and <S2SV_blank> slave-serve-data <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; return REDIS_OK ; }",0
99,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( & ctx -> vp8_cfg, 0, sizeof ( ctx -> vp8_cfg ) ) ; if ( ( ( cfg -> g_w!= ctx -> cfg. g_w ) && ( ( cfg -> g_h!= ctx -> cfg. g_h ) ) && ( cfg -> g_lag_in_frames > 1 || cfg -> g_pass!= VPX_RC_ONE_PASS ) ) ) { ctx -> vp8_cfg. g_w = ctx -> cfg. g_w ; ctx -> vp8_cfg. g_h = ctx -> cfg. g_h ; } else { if ( ( ( cfg -> g_w!= ctx -> cfg. g_w ) && ( ( cfg -> g_h!= ctx -> cfg. g_h ) ) && ( cfg -> g_pass!= VPX_RC_ONE_PASS ) ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; } res = validate_config ( ctx, cfg, & ctx -> vp8_cfg, 0 ) ; if (! res ) { ctx -> cfg = *",0
100,"<S2SV_ModStart> cpi ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { cpi -> cur_buf -> flags &= ~ YV12_FLAG_HIGHBITDEPTH ; cpi -> cur_buf -> flags &= ~ YV12_FLAG_HIGHBITDEPTH ; } # endif <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> flags & YV12_FLAG_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) cpi -> cur_buf -> flags &= ~ YV12_FLAG_HIGHBITDEPTH ; # endif vp9_init_plane_quantizers ( cpi, & cpi -> mb ) ; # endif } # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> flags & YV12_FLAG_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) cpi -> cur_buf ->",0
101,"<S2SV_ModStart> info -> si_code < 0 || info -> si_code <S2SV_ModStart> - EPERM ; if ( info -> si_code == SIGSEGV ) <S2SV_ModStart> - EPERM ; if ( info -> si_code == SIGSEGV ) { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } else { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
102,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ( u32 ) ptr -> size > sizeof ( GF_AdobeBootstrapInfoBox ) ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_TEXT, GF_LOG_TEXT ( GF_LOG_TEXT, GF_LOG_TEXT ( GF_LOG_TEXT, GF_LOG_TEXT ( GF_LOG_TEXT, GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_TEXT ( GF_AdobeBootstrapInfoBox ) ) ) ) ; return GF_ISOM_INVALID_FILE ; } if ( ( u32 ) ptr -> size > sizeof ( GF_AdobeBootstrapInfoBox ) ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_TEXT, GF_LOG_TEXT ( GF_LOG_TEXT, GF_LOG_TEXT, GF_LOG_TEXT ( GF_LOG_TEXT, GF_LOG_TEXT ( GF_LOG_TEXT ) ) ) ; return GF_ISOM_INVALID",0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> == mode ) return ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> FMODE_WRITE )!= fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> FMODE_WRITE ) ) { if ( state -> state & FMODE_WRITE ) list_move ( & state -> open_states, & state -> owner -> so_states ) ; else list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } else state -> state = mode ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
105,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( ( Image * ) NULL ) ; }",0
106,"<S2SV_ModStart> 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } <S2SV_ModStart> len ) ; if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; }",0
107,"<S2SV_ModStart> i ] ), ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i",0
108,"<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; }",0
109,"<S2SV_ModStart> 1 ) ; } if ( * p == '\\0' ) { ND_PRINT ( ( ndo, ""\\n"" ) ) ; return ( 0 ) ; } <S2SV_ModStart> 1 ) ; if ( * p == '\\0' ) { ND_PRINT ( ( ndo, ""\\n"" ) ) ; return ( 0 ) ; } <S2SV_ModStart> 1 ) ; if ( * p == '\\0' ) { ND_PRINT ( ( ndo, ""\\n"" ) ) ; return ( 0 ) ; } <S2SV_ModStart> 1 ) ; if ( * p == '\\0' ) { ND_PRINT ( ( ndo, ""\\n"" ) ) ; return ( 0 ) ; } <S2SV_ModStart> 1 ) ; if ( * p == '\\0' ) { ND_PRINT ( ( ndo, ""\\n"" ) ) ; return ( 0 ) ; }",0
110,"<S2SV_ModStart> image_noffset ) { if ( noffset < 0 ) { printf ( "" <S2SV_blank> error!\\n%s <S2SV_blank> for <S2SV_blank> \'%s\' <S2SV_blank> hash <S2SV_blank> node <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> image <S2SV_blank> node\\n"", err_msg, fit_get_name ( fit, noffset, NULL ), fit_get_name ( fit, image_noffset, NULL ) ) ; return - 1 ; } <S2SV_ModStart> noffset, NULL ) ; if ( noffset < 0 ) { printf ( "" <S2SV_blank> error!\\n%s <S2SV_blank> for <S2SV_blank> \'%s\' <S2SV_blank> hash <S2SV_blank> node <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> image <S2SV_blank> node\\n"", err_msg, fit_get_name ( fit, image_noffset, NULL ) ) ; return - 1 ; }",0
111,"<S2SV_ModStart> ; if ( kfifo_alloc <S2SV_ModEnd> ( & state <S2SV_ModStart> state -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE, <S2SV_ModEnd> GFP_KERNEL ) ) <S2SV_ModStart> - ENOMEM ; state -> sd = & state -> sd ; v4l2_subdev_init ( sd, & cx23888_ir_controller_ops ) ; v4l2_set_subdevdata ( sd, state ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters, & default_params ) ; } else { ret = cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd,",0
112,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) && ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) && ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) && ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS",0
113,"<S2SV_ModStart> |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ;",0
114,"<S2SV_ModStart> ) ) { struct ip_options_rcu * opt = rcu_dereference_protected ( net -> ipv4. ip_options, sock_owned_by_user ( sk ) ) ; if ( opt && opt -> opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. optu ) opt = & net -> ipv4. ip_options_rcu ; opt = rcu_dereference ( net -> ipv4. ip_options ) ; if ( opt && opt -> opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. optu ) opt = & net -> ipv4. ip_options_rcu ; opt = rcu_dereference ( net -> ipv4. ip_options ) ; if ( opt && opt -> opt. opt. opt. opt. opt. opt. opt",0
115,<S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart> ; encode_share_access ( xdr <S2SV_ModEnd>, arg ->",0
118,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; return - ENODEV <S2SV_ModEnd> ; } switch <S2SV_ModStart> break ; } return <S2SV_ModEnd> error ; }",0
119,"<S2SV_ModStart> : if ( len < 8 ) { r_strbuf_append ( & op -> esil, '\\0' ) ; return - 1 ; } <S2SV_ModStart> : if ( len < 8 ) { r_strbuf_append ( & op -> esil, '\\0' ) ; return - 1 ; } <S2SV_ModStart> : if ( len < 8 ) { r_strbuf_append ( & op -> esil, '\\0' ) ; return - 1 ; } <S2SV_ModStart> : if ( len < 8 ) { r_strbuf_append ( & op -> esil, '\\0' ) ; return - 1 ; } <S2SV_ModStart> : if ( len < 8 ) { r_strbuf_append ( & op -> esil, '\\0' ) ; return - 1 ; } <S2SV_ModStart> : if ( len < 8 ) { r_strbuf_append ( & op -> esil, '\\0' ) ; return - 1 ; } <S2SV_ModStart> : if ( len < 8 ) { r_strbuf_append ( & op -> esil, '\\0' ) ; return - 1 ; }",0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,"<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), EXTRACT_32BITS ( & lshp -> ls_seq ), EXTRACT_16BITS ( & lshp -> ls_length ) ) ; goto trunc ; } if ( lshp -> ls_length < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), EXTRACT_32BITS ( & lshp -> ls_age ), EXTRACT_16BITS ( & lshp -> ls_length ) ) ; goto trunc ; }",0
122,<S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf ) ; opipe -> nrbufs ++ ; ibuf -> offset += ibuf -> len ; ibuf -> len -= ibuf -> len ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf ) ; } <S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf ) ; opipe -> nrbufs ++ ; ipipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; opipe -> nrbufs ++ ; opipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers - 1,0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY (,0
125,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_tree <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] <S2SV_ModEnd> ; int b <S2SV_ModStart> b ) ; vpx_tree_index ii = tree [ i + b ] ; if ( ii <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } } <S2SV_null> <S2SV_null>",0
126,"<S2SV_ModStart> write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",0
127,<S2SV_ModStart> & 0xffff ; if ( p + 4 + c > sizeof ( event_rec ) - 4 ) return - EINVAL ;,0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t x0 = input [ 15 ] ; tran_high_t x1 = input [ 0 ] ; tran_high_t x2 = input [ 1 ] ; tran_high_t x3 = input [ 2 ] ; tran_high_t x4 = input [ 3 ] ; tran_high_t x5 = input [ 4 ] ; tran_high_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 10 ] ; tran_high_t <S2SV_ModEnd> x12 = input <S2SV_ModStart> 12 ] ; tran_high_t <S2SV_ModEnd> x13 = input <S2SV_ModStart> 1 ] ; tran_high_t <S2SV_ModEnd> x15 = input <S2SV_ModStart>",0
129,<S2SV_ModStart> ; # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_EDSP flags |= HAVE_EDSP ; # endif # if HAVE_MEDIA flags |= HAVE_MEDIA ; # endif # if HAVE_EDSP flags |= HAVE_EDSP ; # endif # if HAVE_MEDIA flags |= HAVE_MEDIA ; # endif # if HAVE_NEON flags |= HAVE_NEON ; # endif,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( VP9_COMMON <S2SV_ModStart> * cm = & cpi -> td. <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const int bs <S2SV_ModStart> ] ; bh = num_8x8_blocks_wide_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_cols ) return ; bw = num_8x8_blocks_wide_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; bh = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; if ( bw == bs && bh == bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, mi_row, mi_col ) ; } else if ( bw == bs && bh < bs ) { count_segs ( cpi, tile,",0
132,<S2SV_ModStart> break ; if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) && clientsArePaused ( ),0
133,"<S2SV_ModStart> = 0 ; if ( ( mpd -> b_state & ( 1 << BH_Mapped ) ) &&! ( mpd -> b_state & ( 1 << BH_Unwritten ) ) ) get_blocks_flags |= EXT4_GET_BLOCKS_RESERVE ; err = ext4_journal_get_blocks ( handle, mpd -> inode, next, max_blocks, & new, get_blocks_flags ) ; if ( err ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> at <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks <S2SV_blank> %zd\\n"", mpd -> inode -> i_ino, ( unsigned long long ) next, mpd -> b_size >> mpd -> inode -> i_blkbits, err ) ; if ( err ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> at <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank>",0
134,"<S2SV_ModStart> = 0 ; uint64_t ai_flags = 0 ; uint64_t ai_family = 0 ; uint64_t ai_socktype = 0 ; uint64_t ai_protocol = 0 ; if (! ( p = oe_calloc ( 1, sizeof ( struct oe_addrinfo ) ) ) ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } if ( p -> ai_family || p -> ai_socktype || p -> ai_protocol ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } if ( oe_syscall_getaddrinfo_read_ocall ( & retval, handle, & ai_flags, & ai_family, & ai_socktype, & ai_protocol, & ai_addrlen, & ai_addrlen, NULL, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> * pegasus, const <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart>, size, buf <S2SV_ModEnd> ) ; if <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
138,"<S2SV_ModStart> asdl_seq * module_body <S2SV_ModEnd>, PyArena * <S2SV_ModStart> ; return p <S2SV_ModEnd> ; } <S2SV_null>",0
139,"<S2SV_ModStart> * src, vpx_bit_depth_t bit_depth, vpx_bit_depth_t bit_depth <S2SV_ModStart> 4 ; # endif # if CONFIG_VP9_HIGHBITDEPTH switch ( bit_depth ) { case VPX_BITS_8 : # endif # if CONFIG_VP9_HIGHBITDEPTH switch ( bit_depth ) { case VPX_BITS_10 : # endif <S2SV_ModStart> write_idx ) ; # if CONFIG_VP9_HIGHBITDEPTH switch ( bit_depth ) { case VPX_BITS_8 : # if CONFIG_VP9_HIGHBITDEPTH switch ( bit_depth ) { case VPX_BITS_10 : # if CONFIG_VP9_HIGHBITDEPTH switch ( bit_depth ) { case VPX_BITS_8 : # if CONFIG_VP9_HIGHBITDEPTH switch ( bit_depth ) { case VPX_BITS_10 : # endif vp9_copy_and_extend_frame ( src, & buf -> img ) ; # else vp9_copy_and_extend_frame ( src, & buf -> img ) ; # else vp9_copy_and_extend_frame ( src",0
140,"<S2SV_ModStart>. sharpness ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; if ( method == LPF_PICK_FROM_Q ) { const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK",0
141,<S2SV_ModStart> } break ; case BT_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; status = btif_storage_remove_adapter_property ( & bdname ) ; if ( status == BT_STATUS_SUCCESS ) { BT_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_DISABLED ) ; } else { BT_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_DISABLED ) ; },0
142,"<S2SV_ModStart> : { int <S2SV_ModEnd> a = getnum <S2SV_ModStart> MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } case '!' : { int a = getnum ( fmt, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } default : { const char * msg = lua_pushfstring ( L, ""invalid <S2SV_blank> format <S2SV_blank> option <S2SV_blank> \'%c\'"", opt ) ; luaL_argerror ( L, 1, msg ) ; } }",0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_INVALID_PARAM ; else if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_ERROR ; else if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else res = ctx -> iface,0
145,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int isofs_read_inode ( struct inode * inode ) { int ret = - EIO ; if ( de -> name_len > inode -> i_sb -> s_blocksize - offset ) { ret = - EIO ; goto fail ; } if ( de -> name_len > inode -> i_sb -> s_blocksize - offset ) { ret = - EIO ; goto fail ; } if ( de -> name_len > inode -> i_sb -> s_blocksize - offset ) { if ( de -> name_len > inode -> i_sb -> s_blocksize - offset ) { if ( de -> name_len > inode -> i_sb -> s_blocksize - offset ) { ret = - EIO ; goto fail ; } if ( de -> name_len > inode -> i_sb -> s_blocksize - offset ) { ret = - EIO ; goto fail ; } if ( de -> name_len > inode -> i_sb -> s_blocksize - offset ) { if ( de -> name_len > inode -> i_sb ->,0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> k ) ; }",0
147,<S2SV_ModStart> self ) { if ( self -> dict ) <S2SV_ModStart> dict ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
148,"<S2SV_ModStart> ; for ( ; a && i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } return a ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,"<S2SV_ModStart> ( msg ) ; err = - EINVAL ; if ( err ) goto out_freeiov ; <S2SV_ModStart> & flags ) <S2SV_ModEnd> err = verify_compat_iovec <S2SV_ModStart>, & addr, VERIFY_WRITE ) ; else err = verify_iovec ( msg_sys, iov, & addr, VERIFY_READ ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ;",0
152,<S2SV_ModStart> inode ) ; struct metapath * mp2 = metapath ( mp ) ; struct buffer_head * dibh = gfs2_meta_inode ( ip ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip2 = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = ip -> i_meta ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip2 = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip,0
153,"<S2SV_ModStart> -> codec -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> filename, input -> use_i420 <S2SV_ModEnd>? ""I420"" : <S2SV_ModStart> ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next ) ; if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; if ( input -> use_i420 ) fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; if ( input -> use_i420 ) fprintf ( stderr, ""\\nSource <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; if ( input -> use_i420 ) fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"",",0
154,"<S2SV_ModStart> ; if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } valueAVT = ( xmlChar * ) value ; if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> a <S2SV_blank> literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } valueAVT = ( xmlChar * ) valueAVT ; if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> a <S2SV_blank> literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } valueAVT = ( xmlChar * ) valueAVT ; if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent,",0
155,"<S2SV_ModStart> 0 ) { if ( safe_chmod ( ""/etc/skel/.zshrc"", 0666 <S2SV_ModEnd> ) == 0 <S2SV_ModStart> 0 ) { if ( safe_chmod ( ""/etc/skel/.zshrc"", 0666 <S2SV_ModEnd> ) == 0 <S2SV_ModStart> 0 ) { if ( safe_chmod ( ""/etc/skel/.cshrc"", 0666 <S2SV_ModEnd> ) == 0 <S2SV_ModStart> 0 ) { if ( safe_chmod ( ""/etc/skel/.cshrc"", 0666 <S2SV_ModEnd> ) == 0 <S2SV_ModStart> 0 ) { if ( safe_chmod ( ""/etc/skel/.cshrc"", 0666 <S2SV_ModEnd> ) == 0 <S2SV_ModStart> 0 ) { if ( safe_chmod ( ""/etc/skel/.cshrc"", 0666 <S2SV_ModEnd> ) == 0 <S2SV_ModStart> 0 ) { if ( safe_chmod ( ""/etc/skel/.cshrc"", 0666 <S2SV_ModEnd> ) == 0 <S2SV_ModStart> 0 ) { if ( safe_chmod ( ""/etc/skel/.cshrc"", 0666 <S2SV_ModEnd> ) == 0 <S2SV_ModStart> 0 ) { if ( safe_chmod ( ""/etc/skel/.cshrc"", 0666 <S2SV_ModEnd> ) == 0 <S2SV_ModStart> 0",0
156,<S2SV_ModStart> msix_tab_size % 4096 <S2SV_ModEnd> == 0 ),0
157,"<S2SV_ModStart> ; if ( js_isnumber ( J, 1 ) ) js_pushnumber ( J, js_utfptrtoidx ( text, m. sub [ 0 ]. sp ) ) ; else if ( js_isundefined ( J, 1 ) ) js_newregexp ( J, """", 0 ) ; else if ( js_regexec ( J, re -> prog, text, & m, 0 ) ) js_pushnumber ( J, - 1 ) ; if ( js_isnumber ( J, 1 ) ) js_pushnumber ( J, js_utfptrtoidx ( text, m. sub [ 0 ]. sp ) ) ; else js_pushnumber ( J, - 1 ) ; if ( js_isnumber ( J, 1 ) ) js_newregexp ( J, """", 0 ) ; else if ( js_regexec ( J, re -> prog, text, & m, 0 ) ) js_pushnumber ( J, - 1 ) ; if ( js_isnumber ( J, 1 ) ) js_pushnumber ( J, js_utfptrtoidx ( text, m. sub [ 0 ]. sp ) ; else js_pushnumber (",0
158,"<S2SV_ModStart> case OFreshOID : if ( caml_set_oo_id ( ( value ) dest ) < 0 <S2SV_ModStart> case OFreshOID : if ( caml_set_oo_id ( ( value ) dest ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; } if ( Int_val ( Field ( ( value ) dest, 1 ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { v = Val_hp ( intern_dest ) ; if ( intern_obj_table!= NULL ) intern_obj_table [ obj_counter ++ ] = v ; } * intern_dest = Make_header ( size, tag, intern_color ) ; * intern_dest += 1 + size ; if ( tag == Object_tag ) { Assert ( size >= 2 ) ; ReadItems ( & Field ( v, 2 ), size - 2 ) ; PushItem ( ) ; sp -> op = OFreshOID ; sp -> dest = ( value * ) v ; } else { v = Make_header ( size, tag, intern_color ) ; } * intern_dest += 1 + size",0
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & KSZ8851_ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart>",0
160,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON * cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb )",0
161,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> msglen ) ) ),0
162,"<S2SV_ModStart> ; if ( ( localrsa = d2i_RSA_pubkey_bio ( rawcert, NULL ) ) == 1 && ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == 1 && ( localrsa = d2i_RSA_pubkey_bio ( rawcert, NULL ) ) ) { if (! EVP_PKEY_set1_EC ( peerec, localrsa ) ) { goto sslerr ; } } else if ( ( localrsa = d2i_RSA_pubkey_bio ( rawcert, NULL ) ) == 1 && ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == 1 && ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if (! EVP_PKEY_set1_EC ( peerec, localrsa ) ) { goto sslerr ; } } else if ( ( localrsa = d2i_RSA_pubkey_bio ( rawcert, NULL ) ) == 1 && ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ==",0
163,"<S2SV_ModStart> t1_getline ( ) ; strcpy ( t1_buf_array, t1_line_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; t1_buf_array = eol ( t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; } else { strcpy ( t1_buf_array, t1_line_array ) ; t1_line_ptr = eol ( t1_line_array ) ; t1_buf_array = eol ( t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; t1_getline ( ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; t1_line_ptr = eol ( t1_line_array ) ; }",0
164,"<S2SV_ModStart> BLOCK_SIZE subsize, int partition <S2SV_ModStart> int bsl = b_width_log2_lookup [ bsize ] <S2SV_ModEnd>, hbs = <S2SV_ModStart> bsl = b_width_log2_lookup [ bsize ] <S2SV_ModEnd> ; partition = <S2SV_ModStart> case PARTITION_NONE : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_VERT : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_HORZ : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context (",0
165,<S2SV_ModStart> key_ref ) ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; goto error2 ; },0
166,<S2SV_ModStart> u4_first_slice_in_pic ) { ps_dec -> u4_first_slice_in_pic = 1 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 1 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 1 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 1 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 1 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec,0
167,"<S2SV_ModStart> var_off ) ; if (! src_known &&! dst_known ) return 0 <S2SV_ModStart> case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_SUB2 : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_SUB3 : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S",0
168,"<S2SV_ModStart> { cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is <S2SV_blank> %s"", parent_dir_inode -> i_sb -> s_id, direntry -> d_name. name ) ; cFYI ( 1, ""non-NULL parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode -> i_sb -> s_id, direntry -> d_name. name ) ; cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is <S2SV_blank> %s"", parent_dir_inode -> i_sb -> s_id, direntry -> d_name. name ) ; cFYI ( 1, ""non-NULL parent_inode <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode -> i_sb -> s_id, direntry -> d_name. name ) ; cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode -> i_sb -> s_id, direntry",0
169,"<S2SV_ModStart> ; if ( rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ) ) == NULL ) { ret = NULL ; goto out ; } if ( rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ) ) == NULL ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIESFAILED ) ; goto out ; } if ( rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ) ) == NULL ) { ret = NULL ; goto out ; } if ( rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ) ) == NULL ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIESFAILED ) ; goto out ; }",0
170,"<S2SV_ModStart> int number_of_frames, number_of_keyframes, encode_frame_count ; SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> = get_svc_internal ( svc_ctx ) ; if ( svc_ctx == NULL || si == NULL ) return NULL ; svc_log_reset ( svc_ctx ) ; number_of_frames = 0 ; number_of_keyframes = 0 ; encode_frame_count = si -> encode_frame_count ; if ( encode_frame_count <= 0 ) return vpx_svc_get_message ( svc_ctx ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""\\n"" ) ; for ( i = 0 ; i < si -> layers ; ++ i ) { number_of_frames = encode_frame_count ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank>",0
171,"<S2SV_ModStart> = new_cols ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] ) ; screen -> buffers [ 0 ] = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_rows ) ; screen -> buffers [ 1 ] = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( screen -> buffers [ 0 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] ) ; screen -> buffers [ 0 ] = vterm_allocator_malloc ( screen -> vt, screen -> buffers [ 0 ] ) ; screen -> buffers [ 1 ] = vterm_allocator_malloc ( screen -> vt, screen -> buffers [ 1 ] ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, screen -> buffers [ 0 ] ) ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, screen -> buffers [",0
172,<S2SV_ModStart> { const char * literal_start = * str ; const char * literal_end = * str ; int in_named_escape = 0 ; int result = 0 ; assert ( * literal == NULL ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '{' && * ( * str - 1 ) == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } },0
173,"<S2SV_ModStart> = create_dump_dir_from_problem_data ( pd <S2SV_ModEnd>, g_settings_dump_location )",0
174,<S2SV_ModStart> ; if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( y1 + h1 ) > ( ptr -> height - h1 ) ) { if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( y1 + h1 ) > ( ptr -> height - h1 ) ) { if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( y1 + h1 ) > ( ptr -> height - h1 ) ) { if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( y1 + h1 ) > ( ptr -> height - h1 ) ) { if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( y1 + h1 ) > ( ptr -> height - h1 ) ) { if ( ( x1 + w1 ) > ( ptr,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + sad_per_bit <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + sad_per_bit <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + sad_per_bit <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + sad_per_bit <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + sad_per_bit <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + sad_per_bit <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + sad_per_bit <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + sad_per_bit <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + sad_per_bit <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + sad_per_bit <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + sad_per_bit <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + sad_per_bit <S2SV_ModStart> check_here, in_",0
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMMON <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * prev_mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> idx_str = cm -> prev_mi_grid_visible ; const int mi_col_start = tile -> mi_col_start ; const int mi_col_end = tile -> mi_col_end ; const int idx_str = tile -> mi_stride * mi_row + mi_col ; MODE_INFO * * prev_mi_8x8 = cm -> prev_mi_grid_visible + idx_str ; BLOCK_SIZE bsize ; cpi -> mb. source_variance = UINT_MAX ; vp9_zero ( cpi -> mb. pred_mv ) ; switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi_row, mi_col ) ; nonrd_use_partition ( cpi, tile, mi_row, mi_col, BLOCK_64X64,",0
178,"<S2SV_ModStart> ; dh = skb_header_pointer ( skb, dataoff, sizeof ( _dh ), & _dh ) ; if ( dh == NULL ) { nf_log_packet ( net, nf_ct_l3num ( ct ), 0, NULL, NULL, NULL, ""%s"", ""null <S2SV_blank> packet"" ) ; goto out_invalid ; } state = dccp_state_table [ CT_DCCP_ROLE_CLIENT ] [ dh -> dccph_type ] [ CT_DCCP_NONE ] ; break ; case CT_DCCP_REQUEST : break ; case CT_DCCP_REPLY : break ; } ct -> proto. dccp. role [ IP_CT_DIR_ORIGINAL ] = CT_DCCP_ROLE_SERVER ; ct -> proto. dccp. last_pkt = DCCP_PKT_REQUEST ; ct -> proto. dccp. last_dir = IP_CT_DIR_REPLY ; ct -> proto. dccp. handshake_seq = 0 ; if ( LOG_INVALID ( net, IPPROTO_DCCP ) ) nf_log_packet ( net, nf_ct_l3",0
179,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> * optp, u32 <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ ] <S2SV_ModEnd> = IPOPT_END ; <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ ] = IPOPT_END ; opt -> optlen = optlen ; if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( * optp ) ; return - EINVAL ; } * optp = NULL ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
180,"<S2SV_ModStart> ; if ( http_request_get_header ( info -> request, ""Sec-WebSocket-Connection"" ) == NULL ) goto error ; else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) goto error ; for ( i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, "" <S2SV_blank> "" ) ; if ( strcasecmp ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) goto error ;",0
181,<S2SV_ModStart> * findalldevs_if ; size_t <S2SV_ModEnd> nif = 0 <S2SV_ModStart> 0 ; } nif = 0 ; for ( d = alldevs ; d!= NULL ; d = d -> next ) { nif ++ ; if ( d -> description ) nif += strlen ( d -> description ) ; if ( d -> name ) nif += strlen ( d -> name ) ; if ( d -> description ) nif += strlen ( d -> description ) ; if ( d -> name ) nif += strlen ( d -> name ) ; if ( d -> description ) nif += strlen ( d -> description ) ; if ( d -> name ) nif += strlen ( d -> name ) ; if ( d -> description ) nif += strlen ( d -> description ) ; if ( d -> name ) nif += strlen ( d -> name ) ; if ( d -> description ) nif += strlen ( d -> description ) ; if ( d -> name ) nif += strlen ( d -> name ) ; <S2SV_ModStart> struct rpcap_findalldevs_if ) ; for ( address = d -> addresses ; address!= NULL ; address = address -> next ) { switch ( address -> addr -> sa_family ) { case AF_,0
182,"<S2SV_ModStart> ; struct dump_dir * <S2SV_ModEnd> dd = dd_create <S2SV_ModStart> DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } dd_create_basic_files ( dd, client_uid, NULL ) ; dd_save_text ( dd, FILENAME_ABRT_VERSION, VERSION ) ; dd_save_text ( dd, FILENAME_UID, uid_str ) ; g_hash_table_iter_init ( & iter, problem_info, & gpkey, & gpvalue ) ; while ( g_hash_table_iter_next ( & iter, & gpkey, & gpvalue ) ) { dd_save_text ( dd, FILENAME_UID, ( gchar * ) gpkey, ( gchar * ) gpvalue ) ; }",0
183,"<S2SV_ModStart> ; x < <S2SV_ModEnd> ( ( ssize_t <S2SV_ModStart> 1 ) ; x += 2 ) { index = ConstrainColormapIndex ( image, ( * p >> 6 ) & 0x3 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 2 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 2 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 2 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 2 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO ( q,",0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2 <S2SV_ModStart> c2, c3 ; r [ 6 ] = c1 ; c1 = 0 ; c2 = 0 ; c3 = 0 ; r [ 7 ] = c2 ; c2 = 0 ; sqr_add_c ( a, 8, 0, c1, c2 ) ; r [ 8 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 9, 0, c2, c3 ) ; r [ 10 ] = c2 ; c2 = 0 ; sqr_add_c ( a, 8, 0, c1, c2 ) ; r [ 11 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 9, 0, c2, c3 ) ; r [ 12 ] = c1 ; c2 = 0 ; sqr_add_c ( a, 10, 0, c1, c2, c3 ) ; r [ 11 ] = c2 ; c3 = 0 ; sqr_add_c ( a, 9, 0, c1, c2 ) ; r [ 12 ] = c1 ; c",0
185,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
186,"<S2SV_ModStart> = len ; if ( len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> < <S2SV_blank> 1"" ) ) ; return ; } <S2SV_ModStart> = len ; if ( len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> < <S2SV_blank> 1"" ) ) ; return ; } <S2SV_ModStart> = len ; if ( len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> < <S2SV_blank> 1"" ) ) ; return ; } <S2SV_ModStart> = len ; if ( len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> < <S2SV_blank> 1"" ) ) ; return ; } <S2SV_ModStart> = len ; if ( len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> < <S2SV_blank> 1"" ) ) ; return ; } <S2SV_ModStart> = len ; if ( len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> < <S2SV_blank> 1"" ) ) ; return ; } <S2SV_ModStart> = len ; if ( len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> < <S2SV_blank> 1"" ) ) ; return ; } <S2SV_ModStart> = len ; if ( len < 1 ) { ND_PRINT (",0
187,"<S2SV_ModStart> &&! ptrace_has_cap ( task_cred ( task ) -> user_ns, mode ) ) { rcu_read_unlock ( ) ; return - EPERM ; } rcu_read_unlock ( ) ;",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> i4_payload_size ) ; if (! ps_parse -> s_sei_params. i1_sei_parameters_present_flag ) { ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flag = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour,0
190,<S2SV_ModStart> -> per_sdma ) ; if (! dd -> per_sdma ) { kfree ( dd -> per_sdma ) ; <S2SV_ModStart> -> sdma_descq_cnt ) ; kfree ( dd -> per_sdma ) ; <S2SV_ModStart> -> sdma_descq_cnt ) ; kfree ( tmp_sdma_rht ) ; <S2SV_ModStart> -> sdma_descq_cnt ) ; },0
191,"<S2SV_ModStart> * info, myisam_table * myisam_table <S2SV_ModStart>, int rep_quick, myisam_table * myisam_table <S2SV_ModStart>, myisam_table, myisam_table <S2SV_ModEnd>, MY_MUTEX_INIT_FAST ) <S2SV_ModStart>, myisam_table, myisam_table <S2SV_ModEnd>, MY_MUTEX_INIT_FAST ) <S2SV_ModStart>, myisam_table, myisam_table, MY_MUTEX_INIT_FAST, MY_MUTEX_INIT_FAST, MY_MUTEX_INIT_FAST, MY_MUTEX_INIT_FAST, MY_MUTEX_INIT_FAST, MY_MUTEX_INIT_FAST, MY_MUTEX_INIT_FAST, MY_MUTEX_INIT_FAST, MY_MUTEX_INIT_FAST, MY_MUTEX_INIT_FAST, MY_MUTEX_INIT_FAST, MY_MUTEX_INIT_FAST, MY_MUTEX_INIT_FAST, MY_MUTEX_INIT_FAST, MY",0
192,"<S2SV_ModStart> ) ; } if ( pcount > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) )",0
193,"<S2SV_ModStart> val ) ; if (! val ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value"", r -> name ) ;",0
194,"<S2SV_ModStart> ) ) { if ( mlen > sizeof ( c -> buf ) - 1 ) { return bad_request ( c, 431, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( mlen > sizeof ( c -> buf ) - 1 ) { return bad_request ( c, 431, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( mlen > sizeof ( c -> buf ) - 1 ) { return bad_request ( c, 431, __LINE__ ) ; } mlen = sizeof ( c -> buf ) - 1 ; if ( mlen > sizeof ( c -> buf ) - 1 ) { return bad_request ( c, 431, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( mlen > sizeof ( c -> buf ) - 1 ) { return bad_request ( c, 431, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( mlen > sizeof ( c -> buf ) - 1 ) { return bad_request ( c, 431, __LINE__ ) ; } mlen = sizeof ( c -> buf ) - 1 ; if ( mlen > sizeof ( c -> buf ) - 1 ) { return bad_request ( c, 431",0
195,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void vp9_fht16x16_c ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_low_t <S2SV_ModEnd> outptr = & <S2SV_ModStart> out [ 0 <S2SV_ModEnd> ] ; int <S2SV_ModStart>, j ; tran_low_t temp_in [ 16 ], temp_out [ 16 ] ; const transform_2d ht = FHT_16 [ tx_type ] ; for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) temp_in [ j ] = input [ j * stride + i ] * 4 ; ht. cols ( temp_in, temp_out ) ; for ( j = 0 ; j < 16 ; ++ j ) outptr [ j * 16 + i ] = ( temp_out [ j ] + 1 + ( temp_out [ j ] < 0 ) ) >> 2 ; } for ( i = 0 ; i < 16 ; ++ i ) { for ( j",0
196,"<S2SV_ModStart> = g_strdup_printf ( ""%s.%s"", tmpfile_name, "".desktop"" ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s.%s"", tmpfile_name, "".desktop"" ) ; g_autoptr ( GString ) groups = NULL ; g_auto ( GStrv ) groups = NULL ; g_autoptr ( GString ) groups = NULL ; g_autoptr ( GString ) new_data = g_strdup_printf ( ""%s.%s"", tmpfile_name, "".desktop"" ) ; g_autoptr ( GString ) new_data = g_strdup_printf ( ""%s.%s"", tmpfile_name, "".desktop"" ) ; g_autoptr ( GString ) new_argv = NULL ; g_auto ( GStrv ) new_exec = NULL ; g_autoptr ( GString ) groups = NULL ; g_autoptr ( GString ) new_exec = g_strdup_printf ( ""%s.%s"", tmpfile_name, "".desktop"" ) ; g_autoptr ( GString ) new",0
197,"<S2SV_ModStart> char * temp_filename = osi_calloc ( <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * enode = list_begin ( section -> entries ) ; enode!= list_end ( section -> entries ) ) { const entry_t * entry = ( const entry_t * ) list_node ( enode ) ; fprintf ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s\\n"", entry -> key, entry -> value ) ; } if ( list_next ( node )!= list_end ( config -> sections ) ) fputc ( '\\n', fp )",0
198,"<S2SV_ModStart> tlv_len ) ; if ( tlv_len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> VTP <S2SV_blank> Len <S2SV_blank> %u]"", tlv_len ) ) ; return ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> VTP <S2SV_blank> Len <S2SV_blank> %u]"", tlv_len ) ) ; return ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> VTP <S2SV_blank> Len <S2SV_blank> %u]"", tlv_len ) ) ; return ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> VTP <S2SV_blank> Len <S2SV_blank> %u]"", tlv_len ) ) ; return ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> VTP <S2SV_blank> Len <S2SV_blank> %u]"", tlv_len ) ) ; return ; } <S2SV_ModStart> case VTP",0
199,"<S2SV_ModStart> userData, target, ctxt <S2SV_ModStart> ) ) { xmlFree ( buf ) ; ctxt -> instate = state ; return ; } if ( ctxt -> input == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } if ( ctxt -> input == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } if ( ctxt -> input == NULL ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } if ( ctxt -> input == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } if ( ctxt -> input == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } if ( ctxt -> input == NULL ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; }",0
200,"<S2SV_ModStart> ; int rv <S2SV_ModEnd> = Socket_print ( <S2SV_ModStart> ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""Authorization: <S2SV_blank> %s"" <S2SV_ModStart> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""Authorization: <S2SV_blank> %s"" ""\\r\\n"" <S2SV_ModEnd>, request,",0
201,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", src ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", src ) ; exit ( 1 ) ; } child = fork ( ) ; if ( child == 0 ) { drop_privs ( 1 ) ; int rv = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } waitpid ( child, NULL, 0 ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) < 0 ) errExit ( ""chown"" ) ; if ( chmod ( dest, S_IRUSR | S_IWUSR ) < 0 ) errExit ( ""chmod"" ) ; unlink ( src )",0
202,<S2SV_ModStart> flags ) ; wait_for_completion ( & fcomp. comp ) ; hstats -> seconds_since_last_reset = fcstats -> fc. secs_reset ; hstats -> tx_frames = fcstats -> fc. tx_frames ; hstats -> tx_words = fcstats -> fc. tx_words ; hstats -> rx_frames = fcstats -> fc. rx_frames ; hstats -> rx_words = fcstats -> fc. rx_words ; hstats -> lip_count = fcstats -> fc. lip_count ; hstats -> nos_count = fcstats -> fc. nos_count ; hstats -> error_count = fcstats -> fc. error_frames ; hstats -> dumped_frames = fcstats -> fc. dumped_frames ; hstats -> dropped_frames = fcstats -> fc. dropped_frames ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_sync_count = fcstats -> fc. loss_of_syncs ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_syncs = fcstats,0
203,"<S2SV_ModStart> value ) { value -> r = MinF ( 1.0f, MaxF ( 0.0f, value -> r ) ) ; <S2SV_ModStart> -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> r = MinF ( 1.0f, MaxF ( 0.0f, value -> r ) ) ; <S2SV_ModStart> -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; value -> r = MinF ( 1.0f, MaxF ( 0.0f, value -> r ) ) ; <S2SV_ModStart> -> x = MinF ( 1.0f, MaxF ( 0.0f, value -> x ) ) ; value -> r = MinF ( 1.0f, MaxF ( 0.0f, value -> r ) ) ; <S2SV_ModStart> -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> r = MinF ( 1.0f, MaxF ( 0.0f, value -> r ) ) ; value -> r = MinF ( 1.0f, MaxF ( 0",0
204,<S2SV_ModStart> -> sasl_mechanism ; rec -> <S2SV_ModEnd> sasl_username = src <S2SV_ModStart> -> sasl_username ; rec -> <S2SV_ModEnd> sasl_password = src <S2SV_ModStart> -> sasl_password ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup (,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart>, o, datao ; if ( CHECKOVERFLOW ( 6, 6 + n -> offset, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + 6, n -> order ) ; o += 2 ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. tag = exif_get_short ( buf + o + 2, n -> order ) ; n -> entries [ tcount ]. format = exif_get_short ( buf + o + 4, n -> order ) ; n -> entries [ tcount ]. components = exif_get_long ( buf + o + 8, n -> order ) ; n -> entries [ tcount ]. order = n -> order ; n -> entries [ tcount ]. order = n -> order ; n",0
207,"<S2SV_ModStart> ; break ; case HA_ERR_NO_SUCH_FILE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; break ; case HA_ERR_NO_SUCH_FILE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; break ; case HA_ERR_NO_SUCH_FILE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; break ; case HA_ERR_NO_SUCH_FILE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; break ; case HA_ERR_NO_SUCH_FILE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; break ; case HA_ERR_NO_SUCH_FILE :",0
208,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * ns <S2SV_ModStart> = 0 ; <S2SV_ModEnd> while ( -- <S2SV_ModStart> long hex ; <S2SV_ModEnd> if (! <S2SV_ModStart> curl_convert_from_network ( handle <S2SV_ModEnd>, & in <S2SV_ModStart> 1 ) ; if (! res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; } <S2SV_ModEnd> ns [ strindex <S2SV_ModStart> strindex ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
209,"<S2SV_ModStart> 4 ) ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, len - op -> size, cpu ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d )",0
210,"<S2SV_ModStart> = usm_secmod_process_in_msg ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_POST_PREMIB_READ_CONFIG, init_usm_post_config, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ; register_config_handler ( ""snmp"", ""defPrivType"", snmpv3_privtype_conf, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ;",0
211,"<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if (! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags,",0
212,"<S2SV_ModStart> idx ] ; # ifdef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= 1 ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; }",0
213,<S2SV_ModStart> : 255U ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >>,0
214,"<S2SV_ModStart> timer ) ; list_for_each_entry_safe <S2SV_ModEnd> ( slave, <S2SV_ModStart> slave_list_head, open_list ) { list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { <S2SV_ModEnd> _snd_timer_stop ( slave <S2SV_ModStart> NULL ; } list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail",0
215,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands ( ps_dec ) ; if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) return ERROR_INV_MMCO_COMMANDS ; if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) return ERROR_INV_MMCO_COMMANDS ; if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) return ERROR_INV_MMCO_COMMANDS ; if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) return ERROR_INV_MMCO_COMMANDS ; if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) return ERROR_INV_MMCO_COMMANDS ; if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) return ERROR_INV_MMCO_COMMANDS,0
216,<S2SV_ModStart> decode ) { uint_fast32_t <S2SV_ModEnd> widthOverflow = gifFilePtr <S2SV_ModStart> -> originalWidth ; uint_fast32_t <S2SV_ModEnd> heightOverflow = gifFilePtr <S2SV_ModStart> -> originalHeight ; uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> SWidth += newRasterSize ; gifFilePtr -> SHeight += newRasterSize ; } else { uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } <S2SV_ModStart> uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; },0
217,"<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator <S2SV_ModStart> -> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; ret = validate_dn ( props, dn, conn -> validator -> passwd. buf ) ; if ( ret!= ret_ok ) return ret ; ret = validate_dn ( props, dn, conn -> validator -> user. buf ) ; if ( ret!= ret_ok ) return ret_error ; ret = validate_dn ( props, dn, conn -> validator -> passwd. buf ) ; if ( ret!= ret_ok ) return ret ; ret = validate_dn ( props, dn, conn -> validator -> user. buf ) ; if ( ret!= ret_ok ) return ret_error ;",0
218,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
219,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = sizeof ( * sin )",0
220,"<S2SV_ModStart> 0 ) { if ( ( len -= 9 ) < 1 ) { t1mac_output_data ( ( byte * ) s, len ) ; return ; } <S2SV_ModStart> = ++ s ; if ( ( len -= 9 ) < 1 ) { t1mac_output_data ( ( byte * ) s, len ) ; return ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> = ++ s ; if ( ( len -= 9 ) < 1 ) { t1mac_output_data ( ( byte * ) s, len ) ; return ; } if ( ( len -= 9 ) < 1 ) { t1mac_output_data ( ( byte * ) s, len ) ; return ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> = ++ s ; if ( ( len -= 9 ) < 1 ) { t1mac_output_data ( ( byte * ) s, len ) ; return ; } <S2SV_ModEnd> if ( *",0
221,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, NULL )",0
222,"<S2SV_ModStart> msixcap msixcap ; if <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> <= MAX_MSIX_TABLE_ENTRIES ) { pr_err ( ""%s: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> msix_table_entries <S2SV_blank> (%d) <S2SV_blank> > <S2SV_blank> MAX_MSIX_TABLE_ENTRIES <S2SV_blank> (%d) <S2SV_blank> > <S2SV_blank> MAX_MSIX_TABLE_ENTRIES <S2SV_blank> (%d)"", __func__, msgnum, MAX_MSIX_TABLE_ENTRIES ) ; return - EINVAL ; } <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> msgnum ) ; if ( msgnum > MAX_MSIX_TABLE_ENTRIES ) { pr_err ( ""%s: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> msix_table_entries <S2SV_blank> (%d) <S2SV_blank> > <S2SV_blank> MAX_MSIX_TABLE_ENTRIES <S2SV_blank> (%d) <S2SV_blank> > <S2SV_blank> MAX_MSIX_TABLE_ENTRIES <S2SV_blank> (%d) <S2SV_blank> > <S2SV_blank> MAX_MSIX_TABLE_ENTRIES <S2SV_blank> (%d) <S2SV_blank> > <S2SV_blank> MAX_MSIX_TABLE_ENTRIES <S2SV_blank> (%d) <S2SV_blank> > <S2SV_blank> MAX_MSIX_TABLE_ENTRIES <S2SV_blank> (%d)",0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,"<S2SV_ModStart> == NULL ) { retval = KRB5KDC_ERR_INVALID_PARAMETER ; goto cleanup ; } if ( is -> issuer == NULL || is -> issuer == NULL || is -> serial == NULL ) { retval = KRB5KDC_ERR_INVALID_PARAMETER ; goto cleanup ; } status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_",0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame,0
226,"<S2SV_ModStart> = min ( <S2SV_ModEnd> im -> gdes <S2SV_ModStart> im -> gdes [ vidx ]. data [ ii ], MIN ( im -> gdes [ vidx ]. ds_cnt, MAX ( im -> gdes [ vidx ]. ds, MIN ( im -> gdes [ vidx ]. ds, MAX ( im -> gdes [ vidx ]. ds, MIN ( im -> gdes [ vidx ]. ds, MAX ( im -> gdes [ vidx ]. ds, MIN ( im -> gdes [ vidx ]. ds, MIN ( im -> gdes [ vidx ]. ds, MAX ( im -> gdes [ vidx ]. ds, MAX ( im -> gdes [ vidx ]. ds, MIN ( im -> gdes [ vidx ]. ds, MAX ( im -> gdes [ vidx ]. ds, MAX ( im -> gdes [ vidx ]. ds, MAX ( im -> gdes [ vidx ]. ds, MIN ( im -> gdes [ vidx ]. ds, MAX ( im -> gdes [ vidx ]. ds, MAX ( im -> gdes [ vidx ]. ds, MAX ( im -> gdes [",0
227,<S2SV_ModStart> ; if ( buf1 -> num_tiles < buf2 -> num_tiles ) { return - 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return - 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return - 1 ; } else if ( buf1 -> num_tiles < buf2 -> num_tiles ) { return 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return - 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return - 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return - 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return - 1 ; } else if ( buf1 ->,0
228,"<S2SV_ModStart> ; size_t sz ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; sz = ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY | __GFP_NORETRY ) ; if (! info ) { info = vmalloc ( sz ) ; if (! info ) return NULL ; }",0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > AX25_MAX_PROTOCOL,0
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
231,<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; r = TEMP_FAILURE_RETRY (,0
232,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
233,<S2SV_ModStart> lun ) sas_eh_defer_cmd <S2SV_ModEnd> ( cmd ),0
234,"<S2SV_ModStart> ; REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 1 ) ) == TYPE_COMMENT ) { if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; } else if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) { if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; } body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; if ( is_async ) return AsyncFunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; else return",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,<S2SV_ModStart> : if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) &&,0
240,"<S2SV_ModStart> u4_ofst ) ; if ( ps_cabac -> u4_ofst >= ps_cabac -> u4_max_ofst ) { IHEVCD_ERROR_T e ; ps_cabac -> u4_ofst = 0 ; ps_cabac -> u4_max_ofst = 0 ; ps_cabac -> u4_ofst = 0 ; ps_cabac -> u4_range = ( UWORD32 ) 510 ; BITS_GET ( ps_cabac -> u4_ofst, ps_bitstrm -> u4_bit_ofst, ps_bitstrm -> u4_cur_word, ps_bitstrm -> u4_nxt_word, 9 ) ; return ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; }",0
241,<S2SV_ModStart> off ) ; if ( off < p_end ) { if ( line -> type == MD_LINE_BLANK ) { if ( prev_line_has_list_loosening_effect ) line -> type = MD_LINE_LIST_LOOSEING_EFFECT ; } else { if ( line -> type == MD_LINE_LIST_LOOSEING_EFFECT ) { if ( prev_line_has_list_loosening_effect ) line -> type = MD_LINE_LIST_LOOSE_EFFECT ; } else if ( line -> type == MD_LINE_LIST ) { if ( prev_line_has_list_loosening_effect ) line -> type = MD_LINE_LIST_LOOSE_EFFECT ; } else if ( line -> type == MD_LINE_LIST_LOOSEING_EFFECT ) { if ( prev_line_has_list_loosening_effect ) line -> type = MD_LINE_LIST_LOOSE_EFFECT ; } else if ( line -> type == MD_LINE_BLANK ) { if ( prev_line_has_list_loosening_effect ),0
242,<S2SV_ModStart> perf_event_context * ctx ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } raw_spin_unlock_irq,0
243,<S2SV_ModStart> flags -> post_proc_flag ; flags -> deblocking_level = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) ; flags -> noise_level = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) ; flags -> noise_level = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_BLK_MODES,0
244,"<S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, ( int ) EXTRACT_16BITS ( ptr. common -> packet_seq ) ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, ( int ) EXTRACT_16BITS ( ptr. msg4 -> packet_seq ) ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", (",0
245,"<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; # if HAVE_NEON if ( cm -> cpu_caps & HAS_NEON ) # endif { vp8_push_neon ( store_reg ) ; } # endif vpx_usec_timer_start ( & timer ) ; if ( sd -> y_width!= cpi -> oxcf. Width || sd -> y_height!= cpi -> oxcf. Height ) { assert ( cpi -> oxcf. lag_in_frames < 2 ) ; dealloc_raw_frame_buffers ( cpi ) ; } if ( vp8_lookahead_push ( cpi -> lookahead, sd, time_stamp, end_time, frame_flags, cpi -> active_map_enabled? cpi -> active_map : NULL ) ) res = - 1 ; vpx_usec_timer_mark ( & timer ) ; cpi -> time_receive_data += vpx_usec_timer_elapsed ( & timer ) ; cpi -> time_receive_data += vpx_usec_timer_elapsed ( & timer ) ; <S2SV_ModEnd> return res",0
246,"<S2SV_ModStart> { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } pid_t child = fork ( ) ; if ( child == 0 ) { drop_privs ( 0 ) ; int rv = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } waitpid ( child, NULL, 0 ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""chmod",0
247,<S2SV_ModStart> p_num_sfb [ LOW ] ; if ( ptr_hbe_txposer -> end_band!= ptr_hbe_txposer -> start_band ) { if ( ptr_hbe_txposer -> end_band!= ptr_hbe_txposer -> start_band ) { if ( ptr_hbe_txposer -> end_band!= ptr_hbe_txposer -> start_band ) { if ( ptr_hbe_txposer -> end_band!= ptr_hbe_txposer -> start_band ) { if ( ptr_hbe_txposer -> end_band!= ptr_hbe_txposer -> start_band ) { if ( ptr_hbe_txposer -> end_band!= ptr_hbe_txposer -> start_band ) { if ( ptr_hbe_txposer -> end_band!= ptr_hbe_txposer -> start_band ) { if ( ptr_hbe_txposer -> end_band!= ptr_hbe_txposer -> start_band ) { if ( ptr_hbe_txposer -> end_band!= ptr_hbe_txposer -> start_band ),0
248,"<S2SV_ModStart> lua_module ) ; luaLuaFile * file = ap_lua_file_get_cfg ( r -> per_dir_config, & lua_module ) ; lua_authz_provider_spec * prov_spec = parsed_require_line <S2SV_ModStart> r ) ; luaLuaFile * file = ap_lua_file_get_cfg ( r -> per_dir_config, & lua_module ) ; lua_getglobal ( L, file_name ) ; if (! lua_isfunction ( L, - 1 ) ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, file ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; } lua_getglobal ( L, file ) ; if (! lua_isfunction ( L, - 1 ) ) { ap_log_rerror ( APLOG_MARK",0
249,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> ; if ( proto_end == NULL ) return 0 ; if (,0
251,"<S2SV_ModStart> fdt ) ; if ( end == path ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> = nextoffset ; if ( end == path ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> case FDT_PROP : include = want >= 2 ; stop_at = offset ; prop = fdt_get_property_by_offset ( fdt, offset, NULL ) ; str = fdt_string ( fdt, fdt32_to_cpu ( prop -> nameoff ) ) ; if (! str ) return - FDT_ERR_BADSTRUCTURE ; if ( str_in_list ( str, exc_prop, exc_prop_count ) ) return - FDT_ERR_BADSTRUCTURE ; if ( str_in_list ( str, exc_prop, exc_prop_count ) ) include = 0 ; break ; case FDT_BEGIN_NODE : depth -- ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_",0
252,"<S2SV_ModStart> ) ) { redisLog <S2SV_ModEnd> ( REDIS_VERBOSE, <S2SV_ModStart> ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) <S2SV_ModStart> ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> clients), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) <S2SV_ModStart> ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) <S2SV_ModStart> ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), zmalloc_used_memory ( )",0
253,"<S2SV_ModStart> -> protocol_timeout = g_timeout_add_seconds <S2SV_ModEnd> ( 5,",0
254,<S2SV_ModStart> book -> dim && i < n,1
255,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
256,"<S2SV_ModStart> this_h ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if (! check_scale_factors ( other_w, other_h, this_w, this_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> predict [ 0 ] [ 0 ] = vp9_convolve_copy ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve8_horiz ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve8_horiz ; sf -> predict [ 1 ] [ 0 ] = vp9_convolve8_horiz ; sf -> predict [ 1 ] [ 1 ] = vp9_conv",0
257,<S2SV_ModStart> ; if ( count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
258,"<S2SV_ModStart> ) ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; if ( opt ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; if ( opt ) rcu_assign_pointer ( np -> txopt, opt ) ; } else if ( opt ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; if ( opt ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; if ( opt ) rcu_assign_pointer ( np -> txopt, opt ) ; } } else { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; if ( opt ) { struct ipv6_txoptions",0
259,<S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_ops <S2SV_ModStart> ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_ops,0
260,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_samples_total > 0.0 && stream -> psnr_sse_total > 0.0 ) ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; else ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", stream -> psnr_totals [ i ] / stream -> psnr_count ) ; fprintf ( stderr, ""\\n"" ) ; }",0
261,"<S2SV_ModStart> name ) { if (! ( dst = fopen ( name, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", name ) ; return ; } <S2SV_ModEnd> dst_name = malloc <S2SV_ModStart> 2 + 16 ) ; if (! ( dst = fopen ( dst_name, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"" ) ; return ; } dst_name = malloc ( strlen ( name ) * 2 + 16 ) ; if (! ( dst = fopen ( dst_name, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } dst_name = malloc ( strlen ( name ) * 2 + 16 ) ; if (! ( dst = fopen ( dst_name, ""w"" ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"" ) ; return ; }",0
262,"<S2SV_ModStart> ; TRACE_DEBUG ( ""CIDER=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { memPool",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> ; if ( fit_check_format <S2SV_ModEnd> ( fit, <S2SV_ModStart> ; if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; if ( fit_check_format ( fit, IMAGE_SIZE_INVAL <S2SV_ModStart> ) ) { if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE",0
265,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ),0
266,<S2SV_ModStart> refresh_alt_ref_frame ) )? ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) : ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval + af_ratio - 1 ) ; # else target = ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) ; # else target = ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) ; # else target = rc -> avg_frame_bandwidth ; # endif,0
267,"<S2SV_ModStart> ++ ) { struct group * gr = getgrnam ( argv [ i ] ) ; if ( gr == NULL ) errx ( 1, ""%s: <S2SV_blank> Group <S2SV_blank> not <S2SV_blank> found"", ABUILD_GROUP ) ; if ( gr == NULL ) errx ( 1, ""Group <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> member <S2SV_blank> of <S2SV_blank> group <S2SV_blank> %s\\n"", ABUILD_GROUP ) ; } else if ( gr -> gr_gid!= gr -> gr_gid ) errx ( 1, ""%s: <S2SV_blank> Group <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> member <S2SV_blank> of <S2SV_blank> group <S2SV_blank> %s\\n"", ABUILD_GROUP, grent -> gr_gid ) ; if ( gr == NULL ) errx ( 1, ""Group <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> member <S2SV_blank> of <S2SV_blank> group <S2SV_blank> %s\\n"", ABUILD_GROUP, grent -> gr_gid ) ; else if ( gr -> gr_gid!= gr -> gr_gid ) errx ( 1, ""Group <S2SV_blank> %s: <S2SV_blank> Group <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> member <S2SV_blank> of <S2SV_blank> group <S2SV_blank> %s\\n"", grent -> gr_gid,",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; const short * dequant_ptr = b -> dequant ; const short * coeff_ptr = b -> coeff ; const short * qcoeff_ptr = b -> qcoeff ; const short * dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; # if CONFIG_VP8_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) dequant_ptr = b -> dequant ; coeff_ptr = b -> coeff ; qcoeff_ptr = b -> qcoeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; # if CONFIG_VP8_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) dequant_ptr = d -> dequant ; coeff_ptr = d -> coeff ; qcoeff_ptr = d -> qcoeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; # endif,0
270,"<S2SV_ModStart> FN_REFLEN ] ; if ( i == 0 ) { error = - 1 ; goto exit ; } strncat ( buff, opt_basedir, sizeof ( buff ) - 1 ) ; # ifdef __WIN__ strncat ( buff, ""/"", sizeof ( buff ) - 1 ) ; # else strncat ( buff, FN_DIRSEP, sizeof ( buff ) - 1 ) ; # endif buff [ sizeof ( buff ) - 1 ] = 0 ; opt_basedir = my_strdup ( opt_basedir ) ; my_free ( opt_basedir ) ; opt_basedir = my_strdup ( buff, MYF ( MY_FAE ) ) ; } if ( opt_verbose ) { printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> basedir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_basedir ) ; printf ( ""# <S2SV_blank> datadir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_datadir ) ; printf ( ""# <S2SV_blank> datadir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_datadir ) ; printf ( ""# <S2SV_blank> datadir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_datadir ) ; }",0
271,"<S2SV_ModStart> int n = min_t ( int, data_end - data ) ; if ( n > 10 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } <S2SV_ModStart> int n = min_t ( int, data_end - data ) ; if ( n > 10 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } pbi -> decrypt_state = pbi -> decrypt_cb ( pbi -> decrypt_state, data, clear_buffer, n ) ; clear = clear_buffer ; } if ( pbi -> decrypt_cb ) { int n = ( int ) ( data_end - data ) ; if ( n > 10 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } pbi -> decrypt_cb ( pbi -> decrypt_state, data, clear_buffer, n ) ; clear = clear_buffer ; }",0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
273,"<S2SV_ModStart> * returnrate, int <S2SV_ModEnd> returndistortion, int <S2SV_ModStart> returnintra ) { # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DEN",0
274,<S2SV_ModStart> goto error ; if ( statbuf. st_size < 0 ) goto error ; <S2SV_ModStart>. st_size ; if (! h -> writable ) { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; } else { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; },0
275,"<S2SV_ModStart> u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id ; WORD32 i4_max_frm_num ; WORD32 pic_height_in_map_units_minus1 = 0 ; WORD32 u2_pic_wd = 0 ; UWORD32 u2_pic_ht = 0 ; UWORD32 u2_crop_offset_y = 0 ; UWORD32 u2_crop_offset_uv = 0 ; u4_num_reorder_frames = 0 ; u1_frame_cropping_flag = 0 ; u1_frame_cropping_flag = 0 ; u1_frame_cropping_rect_left_ofst, u1_frame_cropping_rect_right_ofst, u1_frame_cropping_rect_top_ofst, u1_frame_cropping_rect_bottom_ofst ; SWITCHONTRACE ; u1_level_idc = ih264d_get_bits_h264 ( ps_bitstrm, 8 ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> level_idc"", u1",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_svc_parameters_t * ) { <S2SV_ModEnd> VP9_COMP * const <S2SV_ModStart> * const params = va_arg ( args, vpx_svc_parameters_t * ) ; if ( params == NULL ) return VPX_CODEC_INVALID_PARAM ; cpi -> svc. spatial_layer_id = params -> spatial_layer ; cpi -> svc. temporal_layer_id = params -> temporal_layer ; cpi -> lst_fb_idx = params -> lst_fb_idx ; cpi -> gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc",0
277,"<S2SV_ModStart> out ) { uint32 width, length ; uint32 bitspersample ; uint32 samplesperpixel ; uint16 input_compression, input_photometric ; copyFunc cf ; uint32 width, length ; CopyField ( TIFFTAG_WIDTH, width ) ; CopyField ( TIFFTAG_LENGTH, length ) ; CopyField ( TIFFTAG_BITSPERSAMPLE, bitspersample ) ; CopyField ( TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; if ( input_compression == COMPRESSION_JPEG ) { uint16 subsamplinghor, subsamplingver ; TIFFGetFieldDefaulted ( in, TIFFTAG_JPEGCOLORMODE, & subsamplinghor, & subsamplingver ) ; if ( subsamplinghor!= 1 || subsamplingver!= 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> copy/convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } } if ( input_photometric == PHOTOMETRIC_RGB && jpegcolormode == JPEGCOLORMODE_RGB ) TIFFSetField ( out, TIFFTAG_PHOTOMETRIC, input_",0
278,"<S2SV_ModStart> a ) { int rc ; <S2SV_ModStart> = '\\0' ; rc = stat ( a -> name, & st ) ; if ( r!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else",0
279,"<S2SV_ModStart> -> i_sb ) <S2SV_ModEnd> ; bh = <S2SV_ModStart> ibh ) { struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if (! loc ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!loc\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if (! nbh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 1, & ident ) ) { if ( ident == TAG_IDENT_FE || ident == TAG_IDENT_EFE ) { memcpy ( & iinfo -> i_location, & loc, sizeof ( struct kernel_lb_addr ) ) ; brelse ( bh ) ; return ;",0
280,"<S2SV_ModStart> -> tx_size ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y ; uint16_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm ->",0
281,"<S2SV_ModStart> mq_flush_lock, flags ) ; flush_rq -> tag = - 1 ; } running = & fq -> flush_queue [ fq -> flush_running_idx ] ; if (! q -> mq_ops ) elv_completed_request ( q, flush_rq ) ; if (! q -> mq_ops ) { spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ; return ; } fq -> flush_running_idx ^= 1 ; if (! q -> mq_ops ) spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ;",0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,"<S2SV_ModStart> ) ) { if (! smatch ( option, ""name"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; }",0
284,"<S2SV_ModStart> == NULL || ( uint32_t ) <S2SV_ModStart> == NULL || ( uint32_t ) <S2SV_ModStart> return - EINVAL ; } if ( ( uint32_t ) * replySize > sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( ( uint32_t ) * replySize > sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( ( uint32_t ) * replySize > sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( ( uint32_t ) * replySize > sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; }",0
285,<S2SV_ModStart> berval ) ; if ( ret [ j ] == NULL ) { err = EINVAL ; goto cleanup ; } <S2SV_ModStart> berval ) ; if ( ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!=,0
286,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 - sbuf [ 0 ] ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""SC_MAX_APDU_BUFFER_SIZE <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", crgram_len, SC_MAX_APDU_BUFFER_SIZE - 1 ) ; r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""SC_MAX_APDU_BUFFER_SIZE <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", crgram_len, SC_MAX_APDU_BUFFER_SIZE - 1 ) ; r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""SC_MAX_APDU_BUFFER_SIZE <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", crgram_len, SC_MAX_APDU_BUFFER_SIZE ) ; }",0
287,"<S2SV_ModStart> { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> MAC <S2SV_blank> VLAN <S2SV_blank> number <S2SV_blank> %d\\n"", vsi -> num_queue_pairs ) ; return ret ; } <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> ch ) ; if (! ch ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> MAC <S2SV_blank> VLAN <S2SV_blank> number <S2SV_blank> %d\\n"", vsi -> num_queue_pairs ) ; return - ENOMEM ; } <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> ch ) ; if (! ch ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> MAC <S2SV_blank> VLAN <S2SV_blank> number <S2SV_blank> %d\\n"", vsi -> num_queue_pairs ) ; return - ENOMEM ; } if (! ch ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> MAC <S2SV_blank> VLAN <S2SV_blank> number <S2SV_blank> %d\\n"", vsi -> num_queue_pairs ) ; return - ENOMEM ; } <S2SV_ModStart> ch ) ; if (! ch ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> MAC <S2SV_blank> VLAN <S2SV_blank> number <S2SV_blank> %d\\n"", vsi -> num",0
288,"<S2SV_ModStart> ; } } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ;",0
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,"<S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col, yv12_fb_new -> u_buffer, yv12_fb_new -> v_buffer <S2SV_ModEnd> ) ; mb_row <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col, yv12_fb_new -> v_buffer <S2SV_ModEnd> ) ; mb_row <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col, yv12_fb_new -> y_buffer, yv12_fb_new -> u_buffer, uvv12_fb_new -> v_buffer <S2SV_ModEnd> ) ; mb_row <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col, yv12_fb_new -> v_buffer <S2SV_ModEnd> ) ; mb_row <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col, yv12_fb_new -> u_buffer, yv12_fb_new -> v_buffer, uvv12_fb_new -> v_buffer",0
291,"<S2SV_ModStart> NULL ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
292,"<S2SV_ModStart> len ) { PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr ; Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; } } if ( * s & 0x80 ) { PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart>, wrerrno = 0 <S2SV_ModEnd> ; char ch <S2SV_ModStart> = 0 ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> directory"", __func__, targ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> directory"", __func__, targ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> a <S2SV_blank> directory"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> directory"", __func__, targ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> directory"", __func__, targ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> a <S2SV_blank> directory"", __func__ ) ; if ( stat ( targ, & stb )",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,"<S2SV_ModStart> 0 ) { memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> lst_fb_idx, 0, sizeof ( oci -> lst_fb_idx ) ) ; memset ( oci -> alt_fb_idx, 0, sizeof ( oci -> alt_fb_idx ) ) ; memset ( oci -> alt_fb_idx, 0, sizeof ( oci -> alt_fb_idx ) ) ; memset ( oci -> lst_fb_idx, 0, sizeof ( oci -> lst_fb_idx ) ) ; } memset ( oci -> alt_fb_idx, 0, sizeof ( oci -> alt_fb_idx ) ) ; memset ( oci -> alt_fb_idx, 0, sizeof ( oci -> alt_fb_idx ) ) ; memset ( oci -> alt_fb_idx, 0, sizeof ( oci -> alt_fb_idx ) ) ; memset ( oci -> lst_fb_idx, 0, sizeof ( oci -> lst_fb_idx ) ) ; memset ( oci -> alt_fb_idx, 0, sizeof ( oci -> alt_fb_idx ) )",0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> u1_num_mbs ++ ; if ( u1_num_mbs > ps_dec -> u1_max_mbs_coded ) { ps_dec -> u1_num_mbs = 0 ; ps_dec -> u1_num_mbsNby2 = ps_dec -> u1_max_mbs_coded ; ps_dec -> u1_num_mbs = 0 ; ps_dec -> u1_num_mbs = 0 ; ps_dec -> u1_num_mbsNby2 = ps_dec -> u1_max_mbs_coded ; ps_dec -> u1_num_mbsNby2 = 0 ; ps_dec -> u1_num_mbsNby2 = ps_dec -> u1_max_mbs_coded ; ps_dec -> u1_num_mbsNby2 = 0 ; ps_dec -> u1_num_mbsNby2 = 0 ; ps_dec -> u1_num_mbsNby2 = ps_dec -> u1_num_mbsNby2 ; ps_dec -> u1_num_,0
298,"<S2SV_ModStart> [ 1 ] && screen -> buffers [ 0 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) ; if ( screen -> buffers [ 1 ] && screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 1 ] -> flags ) ; if ( screen -> buffers [ 0 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] -> flags & ~ VTERM_SCREEN_FLAG_HIGHBITDEPTH ) ; if ( screen -> buffers [ 0 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] -> flags ) ; if ( screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 1 ] -> flags ) ;",0
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart>, one ; size_t pixel_info_length ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; pixel_info_length = GetBlobSize ( image ) ; pixel_info = ( MemoryInfo * ) malloc ( pixel_info_length ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) malloc ( pixel_info_length ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) malloc ( pixel_info_length ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) malloc ( pixel_info_length ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) malloc ( pixel_info_length ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) malloc ( pixel_info_",0
301,"<S2SV_ModStart> { httpSetHostName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
302,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
303,"<S2SV_ModStart> ||! prev_hash ||! coinbase1 ||! coinbase2 ||! bbversion ||! nbit ||! ntime ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; free ( pool -> swork. job_id ) ; pool -> swork. job_id = job_id ; snprintf ( pool -> bbversion, 9, ""%s"", pool -> bbversion ) ; snprintf ( pool -> nbit, 9, ""%s"", pool -> nbit ) ; snprintf ( pool -> ntime, 9, ""%s"", ntime ) ; if ( clean ) { if ( job_id ) free ( job_id ) ; free ( coinbase1 ) ; free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; free ( pool -> swork. job_id ) ; pool -> swork. job_id = job_id ; free ( pool -> swork. prev_hash ) ; free ( pool -> prev_hash",0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { _Py_IDENTIFIER ( __dict__ ) ; <S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart>, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; return NULL ; } <S2SV_ModStart> dict ) { Py_DECREF ( dict ) ; return res ; } res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } if ( dict ) { res = _PyObject_GetAttrId ( self, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; return NULL ; } if ( dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } <S2SV_ModEnd> return res ;",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,"<S2SV_ModStart> -> private_data ; u64 <S2SV_ModEnd> flags = arg <S2SV_ModStart> ) ; case PERF_EVENT_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_SET_PERIOD : return perf_event_set_period ( event, ( void __user * ) arg ) ; case PERF_EVENT_SET_FILTER : return perf_event_set_filter ( event, ( void __user * ) arg ) ; case PERF_EVENT_GET_ID : { u64 id ; ret = perf_event_get_id ( event ) ; if ( ret ) return ret ; id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_SET_OUTPUT : { int ret ; if ( arg!= - 1 ) { struct perf_event * output_event ; fdput ( output ) ; ret = perf_event_set_output ( event, output_event ) ; } else { ret = perf_event_set_output ( event, NULL ) ;",0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE uv_mode ; const PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> ] ) ; if (! cm -> frame_parallel_decoding_mode ) ++ cm -> counts -> uv_mode [ y_mode ] [ uv_mode ] ; else ++ cm -> counts -> uv_mode [ y_mode ] [ uv_mode ] ;",0
309,"<S2SV_ModStart> ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp",0
310,<S2SV_ModStart> ; return Qnil ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> case NGHTTP2_IB_WRITE_CLIENT_MAGIC : if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } <S2SV_ModStart> case NGHTTP2_IB_WRITE_CLIENT_MAGIC : if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } <S2SV_ModStart> case NGHTTP2_IB_READ_CLIENT_MAGIC : if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } <S2SV_ModStart> case NGHTTP2_IB_WRITE_CLIENT_MAGIC : if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> payloadleft -= readlen ; if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; },0
313,"<S2SV_ModStart> cpuid10_edx edx ; if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON ) ||! cpu_has ( & boot_cpu_data, X86_FEATURE_INTEL_FEATURES ) ||! cpu_has ( & boot_cpu_data, X86_FEATURE_INTEL_FEATURES ) ||! cpu_has ( & boot_cpu_data, X86_FEATURE_INTEL_FEATURES ) ||! cpu_has ( & boot_cpu_data, X86_FEATURE_INTEL_FEATURES ) ||! cpu_has ( & boot_cpu_data, X86_FEATURE_INTEL_FEATURES ) ||! cpu_has ( & boot_cpu_data, X86_FEATURE_INTEL_FEATURES ) ||! cpu_has ( & boot_cpu_data, X86_FEATURE_INTEL_FEATURES ) ||! cpu_has ( & boot_cpu_data, X86_FEATURE_INTEL_FEATURES ) ||! cpu_has ( & boot_cpu_data, X86_FEATURE_IN",0
314,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pack_mb_tokens ( vpx_writer <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * tp, vpx_writer <S2SV_ModEnd> * stop ) <S2SV_ModStart> * stop ) { TOKENEXTRA * p = * tp ; while ( p < stop && p -> token!= EOSB_TOKEN ) { const int t = p -> token ; const struct vpx_token * const a = & vpx_coef_encodings [ t ] ; const struct vpx_token * const b = & vpx_extra_bits [ t ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; } else {",0
315,"<S2SV_ModStart>, uncompressed_hdr_size ; write_uncompressed_header ( cpi, & wb ) ; write_uncompressed_header ( cpi, & wb ) ; write_uncompressed_header ( cpi, & wb ) ; write_uncompressed_header ( cpi, & wb ) ; write_uncompressed_header ( cpi, & wb ) ; write_uncompressed_header ( cpi, & saved_wb ; write_uncompressed_header ( cpi, & wb ) ; write_literal ( & wb, 0, 16 ) ; uncompressed_hdr_size = vp9_rb_bytes_written ( & wb ) ; data += uncompressed_hdr_size ; vpx_compute_update_table ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal ( & saved_wb, ( int ) first_part_size, 16 ) ; data += encode_tiles ( cpi, data ) ; * size = data - dest ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,"<S2SV_ModStart> struct ikev2_id id <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> * typedata ; ND_TCHECK2 ( * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; } id_len = ntohs ( id. h. len ) ; if ( id_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> len=%d"", id_len - 4 ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } <S2SV_ModStart> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) ) goto",0
318,<S2SV_ModStart> ) ) { if ( atoi ( jas_tvparser_getval ( tvp ) ) < 0 || atoi ( jas_tvparser_getval ( tvp ) ) < 0 || atoi ( jas_tvparser_getval ( tvp ) ) < 0 || atoi ( jas_tvparser_getval ( tvp ) ) <S2SV_ModStart> ) ) { if ( atoi ( jas_tvparser_getval ( tvp ) ) < 0 || atoi ( jas_tvparser_getval ( tvp ) ) < cmpt -> width ) { if ( atoi ( jas_tvparser_getval ( tvp ) ) < 0 || atoi ( jas_tvparser_getval ( tvp ) ) < 0 || atoi ( jas_tvparser_getval ( tvp ) ) < 0 ) { if ( atoi ( jas_tvparser_getval ( tvp ) ) < 0 || atoi ( jas_tvparser_getval ( tvp ) ) < cmpt -> width ) { if ( atoi ( jas_tvparser_getval ( tvp ) ) < 0 || atoi,0
319,"<S2SV_ModStart> urb ) ; if ( ret == - EINVAL ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_urb ( urb ) ; <S2SV_ModStart> err_free_urb_to_pipe ; } if ( ret == - EINVAL ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_urb ( urb ) ; ret = - EINVAL ; goto err_free_urb_to_pipe ; }",0
320,"<S2SV_ModStart>, yt0_0, xt1_0, yt1_0, xt2_0, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_l1_0, x_l1_1, x_l2_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_1 ; WORD32 x_0, x_1, x_l1_1, x_l1_1, x_",0
321,<S2SV_ModStart> mntent ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ; if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ;,0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; fill_headers ( req, env ) ; rb_hash_aset ( env, rack_version_val, rack_version_val_val ) ; rb_hash_aset ( env, rack_url_scheme_val, rack_url_scheme_val_val ) ; rb_hash_aset ( env, rack_input_val, req_rack_input ( req ) ) ; rb_hash_aset ( env, rack_errors_val, Qfalse ) ; rb_hash_aset ( env, rack_logger_val, req_rack_logger ( req ) ) ; rb_hash_aset ( env, rack_upgrade_val, Qfalse ) ; rb_hash_aset ( env, rack_hijackq_val, self ) ; rb_hash_aset ( env, rack_hijack_io_val, self ) ; rb_hash_aset ( env, rack_hijack_val, Qnil ) ;",0
324,"<S2SV_ModStart> endif # endif int <S2SV_ModEnd> prepare_retval ; # <S2SV_ModStart>, prepare_retval ; # endif D_imp_xxh ( sth ) ; if ( DBIc_TRACE_LEVEL ( imp_xxh ) >= 3 ) PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t-> <S2SV_blank> dbd_st_prepare <S2SV_blank> MYSQL_VERSION_ID <S2SV_blank> %d, <S2SV_blank> SQL <S2SV_blank> statement: <S2SV_blank> %s\\n"", MYSQL_VERSION_ID, statement ) ; # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = imp_dbh -> use_server_side_prepare ; svp = DBD_ATTRIB_GET_SVP ( attribs, ""async"", 5 ) ; if ( svp && SvTRUE ( * svp ) ) { # if MYSQL_ASYNC imp_sth -> is_async = TRUE ; imp_sth -> use_server_side_prepare = FALSE ; # else do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000",0
325,"<S2SV_ModStart> ; int need <S2SV_ModEnd> ; if_OPT_WIDE_CHARS ( <S2SV_ModStart>, { need = Length ( screen, first. row, first. col ) ; if ( need < 0 ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_limit = ( size_t ) need + 1 ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ) need + 1 ) ; if ( need < 0 ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_limit = ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_",0
326,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> if ( isnan ( val ) ) strncpy ( str, ""-NaN"", len ) ; else strncpy ( str, ""Infinity"", len ) ; else if (! isfinite ( val ) ) { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) ) val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) { if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) ) val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) ) == ( 1 + ( JsVarInt ) val ) ) ) val = - val ;",0
327,"<S2SV_ModStart> ; if ( unlikely ( irq_flags & IRQF_ONESHOT ) ) { if ( ( fast_pool -> count >= 64 ) && crng_fast_load ( & fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; }",0
328,"<S2SV_ModStart> str, ""ID:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len )",0
329,,1
330,<S2SV_ModStart> const si = svc_ctx_to_svc_internal <S2SV_ModEnd> ( svc_ctx ),0
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,<S2SV_ModStart> s2 ) { size_t len = <S2SV_ModEnd> strlen ( s1 <S2SV_ModStart> 1U ) ; if ( len < strlen ( s2 ) ) return - 1 ; return len <S2SV_ModEnd> ; } <S2SV_null>,0
333,"<S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL, NULL ) ; log_flush ( LOG_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; log_flush ( LOG_INFO ) ; return 2 ; } else { <S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; log_flush ( LOG_INFO ) ; return 2 ; }",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,"<S2SV_ModStart> md -> st_v1_new_iv, <S2SV_ModEnd> st -> st_v1_new_iv <S2SV_ModStart> st -> st_v1_new_iv, <S2SV_ModEnd> st -> st_v1_skeyid_e_nss <S2SV_ModStart> md -> st_v1_skeyid_e_nss, st -> st_v1_skeyid_e_nss <S2SV_ModStart> md -> st_v1_skeyid_e_nss, st -> st_v1_skeyid_e_nss <S2SV_ModStart> md -> st_v1_new_iv, st -> st_v1_skeyid_e_nss <S2SV_ModStart> md -> st_v1_skeyid_e_nss, st -> st_v1_skeyid_e_nss, st -> st_v1_skeyid_e_nss <S2SV_ModStart> md -> st_v1_skeyid_e_nss, st -> st_v1_skeyid_e_nss, st -> st_v1_skeyid_e_nss, st -> st_v1_skeyid_e_nss",0
336,<S2SV_ModStart> ; if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes,0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_string ( cJSON <S2SV_ModStart> item ) { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> valuestring ) ; } <S2SV_null>,0
338,"<S2SV_ModStart> 1 ) res = enc_encode_one ( ctx -> priv -> enc_priv, img, pts, duration, flags, deadline ) ; else if ( res == VPX_CODEC_OK ) res = enc_encode_one ( ctx -> priv -> enc_priv, img, pts, duration, flags, deadline ) ; else if ( res == VPX_CODEC_ERROR ) res = enc_encode_one ( ctx -> priv -> enc_priv, img, pts, duration, flags, deadline ) ; else res = enc_encode_one ( ctx -> priv -> enc_priv, img, pts, duration, flags, deadline ) ; if ( res == VPX_CODEC_OK ) res = enc_encode_one ( ctx -> priv -> enc_priv, img, pts, duration, flags, deadline ) ; else if ( res == VPX_CODEC_ERROR ) res = enc_encode_one ( ctx -> priv -> enc_priv, img, pts, duration, flags, deadline ) ; else res = enc_encode_one ( ctx -> priv -> enc_priv, img, pts, duration, flags, deadline ) ;",0
339,"<S2SV_ModStart> ; } } when 10 : { int rows, cols ; win_get_screen_chars ( & rows, & cols ) ; if ( arg2? : def2? rows : term. rows, & cols ) ; win_set_chars ( rows, cols ) ; } when 11 : { int rows, cols ; win_get_screen_chars ( & rows, & cols ) ; if ( arg2? : def2? rows : term. rows, & cols ) ; if ( arg1 == 3 ) { win_set_geom ( 0, - 1, - 1, 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( - 1 ) ; win_set_chars ( rows, cols0 ) ; } else if ( arg1 == 1 ) { win_maximise ( - 1 ) ; win_set_geom ( 0, - 1, - 1, 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( - 1 ) ; win_set_chars (",0
340,<S2SV_ModStart> ++ ) s [ i ] = 0 ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] + s [ c,0
341,"<S2SV_ModStart> ; # endif if ( ( i -> posX + i -> width ) > i -> parent -> width || ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX = i -> parent -> width - i -> width ; # endif if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX = i -> parent -> width - i -> width ; # endif if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> ***",0
342,"<S2SV_ModStart> encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 16 ) ) vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 32 ) ) vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) vpx_write_literal <S2SV_ModEnd> ( w,",0
343,<S2SV_ModStart> = value ; if ( ps_sps -> i1_sps_valid == 0 ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ps_sps -> i1_sps_valid == 1 ) { ps_codec -> i4_pps_done = 1 ; ps_codec -> i4_pps_done = 0 ; ps_codec -> i4_sps_done = 1 ; ps_codec -> i4_pps_done = 1 ; ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ps_sps -> i1_sps_valid == 1 ) { ps_codec -> i4_pps_done = 1 ; ps_codec -> i4_pps_done = 1 ; ps_codec -> i4_sps_done = 1 ; ps_codec -> i4_pps_done = 1 ; ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; },0
344,<S2SV_ModStart> ) ) { if ( count >= SF_MAX_WRITEF_COUNT ) return - 1 ; <S2SV_ModStart> ++ ) { if ( count >= SF_MAX_WRITEF_COUNT ) return - 1 ; <S2SV_ModStart> ++ ) { if ( count >= SF_MAX_WRITEF_COUNT ) return - 1 ; <S2SV_ModStart> ++ ) { if ( count >= SF_MAX_WRITEF_COUNT ) return - 1 ; <S2SV_ModStart> ++ ) { if ( count >= SF_MAX_WRITEF_COUNT ) return - 1 ; <S2SV_ModStart> break ; } if ( count >= SF_MAX_WRITEF_COUNT ) return - 1 ; <S2SV_ModStart> ++ ) { if ( count >= SF_MAX_WRITEF_COUNT ) return - 1 ; <S2SV_ModStart> ++ ) { if ( count >= SF_MAX_WRITEF_COUNT ) return - 1 ; <S2SV_ModStart> ++ ) { if ( count >= SF_MAX_WRITEF_COUNT ) return - 1 ; <S2SV_ModStart> ++ ) { if ( count >= SF_MAX_WRITEF_COUNT ) return - 1 ; <S2SV_ModStart> break ; } if ( count >= SF_MAX_WRITEF_COUNT ) return - 1 ;,0
345,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
346,"<S2SV_ModStart> 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } if ( copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } if ( copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; }",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> : return vp9_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> : return vp9_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> : return vp9_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> : return vp9_mse8x16 <S2SV_ModEnd> ; } <S2SV_null>,0
348,"<S2SV_ModStart> } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, padata, cb, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REP ) { return return_pkinit_rep ( context, request, reply, padata, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, padata, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, padata, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, padata, cb, rock, moddata,",0
349,"<S2SV_ModStart> flags ) ; <S2SV_ModEnd> v4l2_buf = to_vb2_v4l2_buffer <S2SV_ModStart> vb2_buf ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame_len, frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to",0
350,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
351,<S2SV_ModStart> -> serviceId == EXTRACT_32BITS <S2SV_ModEnd> ( & rxh,0
352,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, INFO, ""info: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> = <S2SV_blank> %s\\n"", adhoc_start -> ssid ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; mem",0
353,"<S2SV_ModStart> sfe -> valuelen > XFS_ATTR_SF_MAXNAME ) { error = context -> put_listent ( context, sfe -> flags, NULL, 0, & sfe -> nameval [ 0 ] ) ; if ( error ) return error ; <S2SV_ModEnd> sfe = XFS_ATTR_SF_NEXTENTRY <S2SV_ModStart> sfe -> valuelen > XFS_ATTR_SF_MAXNAME ) { error = context -> put_listent ( context, sfe -> flags, NULL, 0, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> put_listent ( context, sfe -> flags, NULL, 0, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> put_listent ( context, sfe -> flags, NULL, 0, 0, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> put_listent ( context, sfe -> flags, NULL, 0, 0, & sfe -> nameval [ sfe -> valuelen ] ) ; if ( context -> put_listent ( context, sfe -> flags, NULL",0
354,"<S2SV_ModStart> = data ; <S2SV_ModEnd> BT_DBG ( ""sk <S2SV_blank> %p"" <S2SV_ModStart> ) ; switch ( pi -> mode ) { case L2CAP_MODE_ERTM : rfc. mode = L2CAP_MODE_BASIC ; rfc. txwin_size = L2CAP_DEFAULT_RX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ), ( unsigned long ) & rfc ) ; break ; } req -> dcid = cpu_to_le16 ( pi -> dcid ) ; req -> flags = cpu_to_le16 ( 0 ) ; l2cap_add_conf_opt (",0
355,"<S2SV_ModStart> { do { if ( r < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
356,<S2SV_ModStart> u1_nal_ref_idc ) ; if ( u1_nal_ref_idc > IDR_SLICE_NAL ) { return ERROR_INCOMPLETE_FRAME ; },0
357,"<S2SV_ModStart>!= 0 ) { if ( pair == NULL ) { fprintf ( stderr, ""Malformed <S2SV_blank> form-data: <S2SV_blank> %s\\n"", buf ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> tok ) ; if ( pair == NULL ) { fprintf ( stderr, ""Malformed <S2SV_blank> form-data: <S2SV_blank> %s\\n"", buf ) ; exit ( EXIT_FAILURE ) ; }",0
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModStart> = 0 ; fmode_t fmode = fmode & ( FMODE_READ | FMODE_WRITE ) ; <S2SV_ModStart> = 0 ; fmode = fmode & ( FMODE_READ | FMODE_WRITE <S2SV_ModEnd> ) ; rcu_read_lock <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, & deleg_cur <S2SV_ModStart> stateid, fmode <S2SV_ModEnd> ) ; ret",0
359,"<S2SV_ModStart> ""btif_hl_select_close_connected"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
360,"<S2SV_ModStart> * xd, vpx_bit_depth_t bit_depth <S2SV_ModStart> int sse ; vpx_bit_depth_t bit_depth <S2SV_ModStart> ) ; ( void ) cpi <S2SV_ModEnd> -> fn_ptr [ <S2SV_ModStart> ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; x -> pred_sse [ ref ] = sse ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblock_plane * const p = & x -> plane [ i ] ; struct macroblockd_plane * const pd = & x -> plane [ i ] ; int64_t rate ; int64_t dist ; int64_t square_error ; int quantizer ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ; * out_rate_sum = ( int ) rate_sum ; *",0
361,<S2SV_ModStart> } } if <S2SV_ModEnd> ( pmd_none_or_trans_huge_or_trans_huge_or_clear_bad (,0
362,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR <S2SV_ModStart> ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; <S2SV_ModStart> * ret_username = malloc ( index + 1 ) ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ;,0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { # if CONFIG_VP9_HIGHBITDEPTH if ( seg -> flags & VP9_FLAG_HIGHBITDEPTH ) return vpx_read_tree ( r, vpx_segment_tree, seg -> tree_probs ) ; # else return vpx_read_tree ( r, vpx_segment_tree, seg -> tree_probs ) ; # endif # if CONFIG_VP9_HIGHBITDEPTH if ( seg -> flags & VPX_FLAG_HIGHBITDEPTH ) return vpx_read_tree ( r, vpx_segment_tree, seg -> tree_probs ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( seg -> flags & VPX_FLAG_HIGHBITDEPTH ) return vpx_read_tree ( r, vpx_segment_tree, seg -> tree_probs ) ; # endif # if CONFIG_VP9_HIGHBITDEPTH if ( seg -> flags & VPX_FLAG_HIGHBITDEPTH ) return vpx_read_tree ( r, vpx_segment_tree, seg -> tree_probs ) ; # endif",0
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> extend_right ) ; memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_top ; ++ i ) { memcpy ( dst_ptr2, src_ptr2, linesize ) ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_bottom ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_top ; ++ i ) { memcpy ( dst_ptr2, src_ptr2, linesize ) ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_bottom ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for (",0
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,"<S2SV_ModStart> buf2 ; depth -- ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf2 == NULL ) return ( NULL ) ; if ( depth == 0 ) { ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) sizeof ( s ) ) ) ; smb_print_data ( ndo, buf, 0 ) ; return ( buf ) ; } ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) sizeof ( s ) ) ) ; smb_print_data ( ndo, buf, 0 ) ; return ( buf ) ; } if ( depth && buf < maxbuf ) { size_t len = PTR_DIFF ( maxbuf, buf ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) sizeof ( s ) ) ) ; smb_print_data ( ndo, buf, 0 ) ; return ( buf + len ) ; }",0
367,"<S2SV_ModStart> ; } n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_INVALID_LENGTH ; } <S2SV_ModStart> = htole16 ( <S2SV_ModEnd> TX_CTRL_TXIC | ( <S2SV_ModStart> TX_CTRL_TXFID ) ) ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } netBufferRead ( context -> txBuffer, buffer, offset, length ) ; header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_TXQCR, TXQCR_METFE ) ; netBufferRead",0
368,<S2SV_ModStart> ; # endif # ifdef MONO_HAS_SEMAPHORES mono_semaphore_init ( ) ;,0
369,"<S2SV_ModStart>, x_7 ; WORD32 x_0, x_1, x_2, x_3, x_4, x_5, x_6, x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_9, x_a, x_b, x_c, x_d, x_e, x_f ; x0 = ptr_x ; x2 = ptr_x + ( WORD32 ) npoints ; x3 = ptr_x + ( WORD32 ) npoints ; x4 = ptr_x + ( WORD32 ) npoints ; x5 = ptr_x + ( WORD32 ) npoints ; x3 = ptr_x + ( WORD32 ) npoints ; x0 = ptr_x + ( WORD32 ) npoints ; x2 = ptr_x + ( WORD32 ) npoints ; x3 = ptr_x + ( WORD32 ) npoints ; y2 = ptr_y + ( WORD32 ) npoints ; y3 = ptr_y + (",0
370,<S2SV_ModStart> ; if ( <S2SV_ModEnd> pmd_trans_huge ( *,0
371,"<S2SV_ModStart>, target_width, target_height ; usage ( argv [ 0 ] ) ; return 1 ; } if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( """,0
372,"<S2SV_ModStart>, result ; if ( num_fields < 0 ) { return 0 ; } _Py_IDENTIFIER ( _attributes ) ; PyObject * s, * l = PyTuple_New ( num_fields ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; Py_DECREF ( l ) ; result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; Py_DECREF ( l ) ; result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; Py_DECREF ( l ) ; return result <S2SV_ModEnd> ; } <S2SV_null>",0
373,"<S2SV_ModStart> = VPX_CODEC_OK ; <S2SV_ModEnd> struct vpx_codec_alg_priv * <S2SV_ModStart> priv ) { memset ( & priv, 0, sizeof ( struct vpx_codec_alg_priv ) ) ; <S2SV_ModStart> return VPX_CODEC_MEM_ERROR ; } <S2SV_ModStart> enc ) { memset ( & priv -> base, 0, sizeof ( struct vpx_codec_alg_priv ) ) ; <S2SV_ModStart> enc = & priv <S2SV_ModEnd> -> cfg ; <S2SV_ModStart> i ++ ) ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg. pkt_list = & priv -> pkt_list. head ; priv -> vp8_cfg. pkt_list = & priv -> pkt_list. head ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h * 3 / 2 * 2 ; priv -> cx_data_sz = 32768 ; priv -> cx_data_sz = 32768 ; priv -> cx_data = malloc ( priv -> cx_data_sz ) ; if (! priv -> cx_data ) { return VPX_CODEC_MEM_ERROR ;",0
374,<S2SV_ModStart> ; } if ( cnt_c > BOT ) { pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_c + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] =,0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,"<S2SV_ModStart> == TAG_IDENT_FE && efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; }",0
377,"<S2SV_ModStart> data ) { uint16_t status ; <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { int n = 0 ; char * ptr ; while ( * ptr!= '\\0' ) if ( * ptr == '%' ) return 1 ; ptr ++ ; while ( * ptr!= '%' ) if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } else if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u,0
379,"<S2SV_ModStart> ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragIPv4TooLargeTest"", DefragIPv4TooLargeTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLinuxTest"", IPV6DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakWindowsTest"", IPV6DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakFirstTest"", IPV6DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLastTest"", IPV6",0
380,"<S2SV_ModStart> ; if ( object_length > sizeof ( new_object. data ) - add_v1_record ) { sc_cardctl_coolkey_object_t new_object ; r = coolkey_add_object_to_list ( & priv -> objects_list, & new_object ) ; if ( r!= SC_SUCCESS ) { free ( new_object. data ) ; new_object. data = NULL ; return SC_ERROR_OUT_OF_MEMORY ; } if ( object_length > sizeof ( new_object. data ) - add_v1_record ) { r = coolkey_add_object_to_list ( & priv -> objects_list, & new_object ) ; if ( r!= SC_SUCCESS ) { free ( new_object. data ) ; return SC_ERROR_OUT_OF_MEMORY ; } if ( add_v1_record ) { new_object. data [ 0 ] = COOLKEY_V1_OBJECT ; new_object. length ++ ; } memcpy ( & new_object. data [ add_v1_record ], object_data, object_length ) ; }",0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,"<S2SV_ModStart> NULL ; } if ( p_sys -> p_format -> interlaced ) { p_sys -> p_format -> interlaced = p_sys -> p_format -> interlaced ; p_sys -> p_format -> top_field_first = p_sys -> b_top_field_first ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"",! p_sys -> b_auto_field_coding ) ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""top_field_first"",! p_sys -> b_progressive ) ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""top_field_first"",! p_sys -> b_auto_field_coding ) { schro_encoder_setting_set_double ( p_sys -> p",0
384,"<S2SV_ModStart> { bstr fname ; if (! fname. len ) { mp_err ( log, ""file <S2SV_blank> name <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> file\\n"", fname ) ; break ; } fname = bstrchr ( fname, '\\0' ) ; if (! fname. len ) { mp_err ( log, ""file <S2SV_blank> name <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> file\\n"", fname ) ; break ; } <S2SV_ModStart> bfname. len ) { if (! bstrchr ( fname, '\\0' ) ) { mp_err ( log, ""file <S2SV_blank> name <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> file\\n"", fname ) ; break ; } char * entry = bstrto0 ( mf, fname ) ; if (! mp_path_exists ( entry ) ) { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", entry ) ; } else { MP_TARRAY_APPEND ( mf, mf -> names, mf -> nr_of_files, entry ) ; } }",0
385,"<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) { abort ( ) ; } <S2SV_ModStart> ) ; for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) { a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; } } else { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; idx += pad_to_4byte ( a -> names [ i ]. len ) ;",0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; YV12_BUFFER_CONFIG * fb ; memset ( & fb, 0, sizeof ( YV12_BUFFER_CONFIG ) ) ; yuvconfig2image ( & fb, NULL, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
388,"<S2SV_ModStart> ++ ) { if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Truncated <S2SV_blank> JPEG <S2SV_blank> image.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ++ ) { if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Truncated <S2SV_blank> JPEG <S2SV_blank> image.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ++ ) { if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Truncated <S2SV_blank> JPEG <S2SV_blank> image.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ++ ) { if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Truncated <S2SV_blank> JPEG <S2SV_blank> image.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ++ ) { if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Truncated <S2SV_blank> JPEG <S2SV_blank>",0
389,"<S2SV_ModStart> ; if (! TYPE ( CHILD ( n, 0 ) ) ) return NULL ; ch = CHILD ( n, 0 ) ; if (! TYPE ( ch ) == testlist ) expr1 = ast_for_testlist ( c, ch ) ; else expr1 = ast_for_expr ( c, ch ) ; if (! expr1 ) return NULL ; switch ( expr1 -> kind ) { case Name_kind : case Attribute_kind : case Subscript_kind : break ; default : ast_error ( c, ch, ""illegal <S2SV_blank> expression <S2SV_blank> for <S2SV_blank> augmented <S2SV_blank> assignment"" ) ; return NULL ; } ch = CHILD ( n, 2 ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; switch ( expr1 -> kind ) { case Name_kind : case Attribute_kind : expr2 = ast_for_expr ( c, ch ) ; if (! expr2 ) return NULL ; newoperator = ast_for_augassign ( c, expr1, newoperator, expr2, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_",0
390,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp8_denoiser_filter_c ( YV12_BUFFER_CONFIG <S2SV_ModStart> unsigned char * mc_running_avg_y = mc_running_avg -> y_buffer + y_offset ; int mc_avg_y_stride = mc_running_avg -> y_stride ; unsigned char * running_avg_y = running_avg -> y_buffer + y_offset ; int avg_y_stride = running_avg -> y_stride ; int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; ++ i ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { int diff = 0 ; diff = mc_running_avg_y [ c ] - sig [ c ] ; absdiff = abs ( diff ) ; if ( absdiff >= 0 && absdiff <= 7 ) { running_avg_y [ c ] = mc",0
391,"<S2SV_ModStart> ) ) { if ( reqPtr -> avail < 1 ) { Ns_Log ( Ns_LogRequestDebug, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short"" ) ; } else { if ( ( reqPtr -> avail < 1 ) ) { Ns_Log ( Ns_LogRequestDebug, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short"" ) ; } else { if ( ( reqPtr -> avail < 1 ) ) { Ns_Log ( Ns_LogRequestDebug, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short"" ) ; } else { Ns_Log ( Ns_LogRequestDebug, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short"" ) ; } } else { if ( ( reqPtr -> avail < 1 ) ) { Ns_Log ( Ns_LogRequestDebug, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short"" ) ; } else { if ( ( reqPtr -> avail < 1 ) ) { Ns_Log ( Ns_LogRequestDebug, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short"" ) ; } else { if ( ( reqPtr -> avail < 1 ) ) { Ns_Log ( Ns_LogRequestDebug, """,0
392,<S2SV_ModStart> ret = 0 ; if ( xtregs -> cp0 >= sizeof ( xtregs_coprocessor_t ) ) return - EINVAL,0
393,<S2SV_ModStart> size ) ; <S2SV_ModEnd> message -> srcIpAddr <S2SV_ModStart> -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; # if ( ETH_SUPPORT == ENABLED ) message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; message -> destMacAddr = queueItem -> ancillary. destMacAddr ; # endif # if ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif,0
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> if ( xop <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) { <S2SV_ModStart> -> dst_dev ; } <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_ModStart> ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; } else { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" ""remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; } }",0
395,"<S2SV_ModStart> ; if (! buffer_unhashed ( new_bh ) ) { new_bh = sb_getblk ( sb, EXT2_I ( inode ) -> i_block_group ) ; new_bh = sb_getblk ( sb, EXT2_I ( inode ) -> i_block_group, new_bh -> b_blocknr ) ; new_bh = sb_getblk ( sb, EXT2_I ( inode ) -> i_block_group ) ; new_bh = sb_getblk ( sb, EXT2_I ( inode ) -> i_block_group, new_bh -> b_blocknr <S2SV_ModStart> ( new_bh ) ; sb_getblk ( sb, EXT2_I ( inode ) -> i_block_group, new_bh -> b_blocknr ) ; new_bh = sb_getblk ( sb, EXT2_I ( inode ) -> i_block_group ) ; new_bh = sb_getblk ( sb, EXT2_I ( inode ) -> i_block_group, new_bh -> b_blocknr <S2SV_ModStart>",0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_active_map_t * const map = va_arg ( args, vpx_active_map_t * ) ; if ( map ) { if (! vp9_set_active_map ( ctx -> cpi, map -> active_map, map -> rows, map -> cols ) ) return VPX_CODEC_INVALID_PARAM ; else return VPX_CODEC_INVALID_PARAM ; } else { return VPX_CODEC_INVALID_PARAM ; } }",0
397,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,<S2SV_ModStart> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
399,"<S2SV_ModStart> = 2048 ; dmbuf = ( unsigned char * ) AcquireQuantumMemory ( imsx * imsy, 1 ) ; if ( dmbuf == NULL ) { return ( MagickFalse ) ; } <S2SV_ModStart> ) ResetQuantumMemory ( dmbuf <S2SV_ModEnd> ) ; for <S2SV_ModStart> ) ResetQuantumMemory ( dmbuf <S2SV_ModEnd> ) ; for <S2SV_ModStart> ) ResetQuantumMemory ( dmbuf <S2SV_ModEnd> ) ; for <S2SV_ModStart> ) ResetQuantumMemory ( dmbuf <S2SV_ModEnd> ) ; for <S2SV_ModStart> ) ResetQuantumMemory ( dmbuf <S2SV_ModEnd> ) ; for <S2SV_ModStart> ) ResetQuantumMemory ( dmbuf <S2SV_ModEnd> ) ; for <S2SV_ModStart> n ] = SIXEL_RGB ( 255, 255, 255 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 255, 255, 255 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 255, 255, 255 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_ref_frame_t * const frame = ( vpx_ref_frame_t * ) ctx -> frame_cache [ frame -> frame_type ] <S2SV_ModEnd> ; if ( <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; const VPxWorker * const worker = ( VPxWorker * ) ctx -> frame_workers [ frame -> frame_type ]. worker ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame -> frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * )",0
401,<S2SV_ModStart> u1_num_mbs ++ ; if ( u1_num_mbs > ps_dec -> u1_max_mbs_coded ) { ps_dec -> u1_num_mbs = 0 ; ps_dec -> u1_num_mbsNby2 = ps_dec -> u1_max_mbs_coded ; ps_dec -> u1_num_mbs = 0 ; ps_dec -> u1_num_mbs = 0 ; ps_dec -> u1_num_mbsNby2 = ps_dec -> u1_max_mbs_coded ; ps_dec -> u1_num_mbsNby2 = 0 ; ps_dec -> u1_num_mbsNby2 = ps_dec -> u1_max_mbs_coded ; ps_dec -> u1_num_mbsNby2 = 0 ; ps_dec -> u1_num_mbsNby2 = 0 ; ps_dec -> u1_num_mbsNby2 = ps_dec -> u1_num_mbsNby2 ; ps_dec -> u1_num_,0
402,"<S2SV_ModStart>, u4_y_offset ; WORD8 * pu1_out_p ; WORD8 * pu1_pred ; WORD32 u4_pred_strd ; IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; if ( ps_dec -> e_pic_type == B_PIC ) { ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_prev_intra_mb = 0 ; } else { if ( ps_dec -> e_pic_type == B_PIC ) { if ( ps_dec -> u2_prev_intra_mb == 1 ) { ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_prev_intra_mb = 2 ; ps_dec -> u2_prev_intra_mb = 1 ; } } else { if ( ps_dec -> e_pic_type == B_PIC ) { if ( ps_dec -> u2_prev",0
403,"<S2SV_ModStart> VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> reference <S2SV_blank> frame"" ) ; } if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = & cm -> frame_bufs [ 0 ] ] ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; }",0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,<S2SV_ModStart> -> mbmi ; int i ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x,0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; # if! defined ( CONFIG_FAST_UNALIGNED ) || defined ( CONFIG_HIGHBITDEPTH ) dst [ 0 ] = src [ 0 ] ; dst [ 1 ] = src [ 1 ] ; # else ( ( uint32_t * ) dst ) [ 0 ] = ( ( uint32_t * ) src ) [ 0 ] ; ( ( uint32_t * ) dst ) [ 1 ] = ( ( uint32_t * ) src ) [ 1 ] ; ( ( uint32_t * ) dst ) [ 0 ] = ( ( uint32_t * ) src ) [ 0 ] ; ( ( uint32_t * ) dst ) [ 1 ] = ( ( uint32_t * ) src ) [ 1 ] ; ( ( uint32_t * ) dst ) [ 2 ] = ( ( uint32_t * ) src ) [ 2 ] ; ( ( uint32_t * ) dst ) [ 3 ] = ( ( uint32_t * ) src ) [ 3 ] ; dst += dst_stride ; }",0
407,<S2SV_ModStart> nrow ) { if ( img -> row_offset + nrow > h - img -> row_offset ) { return ( 0 ) ; } <S2SV_ModStart> img -> row_offset + nrow > h - img -> row_offset? nrow : rowsperstrip ; if ( img -> row_offset + nrow > h - img -> row_offset ) { return ( 0 ) ; } <S2SV_ModStart> img -> row_offset + nrow > h - img -> row_offset <S2SV_ModStart> img -> row_offset + nrow ; if ( img -> row_offset + nrow > h - img -> row_offset ) { return ( 0 ) ; } <S2SV_ModStart> img -> row_offset + nrow > h - img -> row_offset? nrow : rowsperstrip ; if ( img -> row_offset + nrow > h - img -> row_offset ) { return ( 0 ) ; },0
408,"<S2SV_ModStart> } } } if ( TYPE ( CHILD ( n, 1 ) )!= TYPE_COMMENT ) { Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 1 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 1 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", CHILD ( n, 2 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 1 ) ), CHILD ( n, 2 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 1 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 2 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 1 ) ) ;",0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
410,<S2SV_ModStart> ( num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) ; else return num ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
411,"<S2SV_ModStart> [ plane ] ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int cols = vpx_img_plane_cols ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int cols = vpx_img_plane_cols ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int rows = vpx_img_plane_cols ( img, plane ) ; const int cols = vpx_img_plane_cols ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; for ( y = 0 ; y < rows ; ++ y ) { if ( fread ( buf, 1, rows <S2SV_ModEnd>, file ) <S2SV_ModStart> file )!= rows <S2SV_ModEnd> ) return 0",0
412,"<S2SV_ModStart> = NULL ; uint32_t <S2SV_ModEnd> attr_len ; uint16_t <S2SV_ModStart> if ( avp -> length < sizeof ( struct l2tp_avp_t ) + 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; MD5_Init ( & md5_ctx ) ; MD5_Update ( & md5_ctx, & avp -> type, sizeof ( avp -> type ) ) ; MD5_Update ( & md5_ctx, secret, secret_len ) ; MD5_Final ( p1, & md5_ctx ) ; if ( attr_len <= MD5_DIGEST_LENGTH ) { memcpy ( avp -> val, p1, MD5_DIGEST_LENGTH ) ; return 0 ; } memxor ( p1, avp -> val, MD5",0
413,"<S2SV_ModStart> ; if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_MEMORY_ERROR ) ; return 0 ; } ctx -> cipher_data = OPENSSL_malloc ( ctx -> cipher_data_size ) ; if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_MEMORY_ERROR ) ; return 0 ; } <S2SV_ModStart> ; if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_MEMORY_ERROR ) ; return 0 ; } ctx -> cipher_data = OPENSSL_malloc ( ctx -> cipher_data_size ) ; if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_MEMORY_ERROR ) ; return 0 ; }",0
414,"<S2SV_ModStart>. size, comm_event -> task -> group_leader -> group_leader -> group_leader -> group_leader <S2SV_ModStart> -> event_id. pid, comm_event -> task -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader",0
415,"<S2SV_ModStart> sk ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock,",0
416,"<S2SV_ModStart> ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } }",0
417,"<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> err_close_conn ; } if ( ans == MUTT_NO ) { enum ImapExecResult rc = imap_exec ( adata, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; goto err_close_conn ; } else { if ( mutt_ssl_starttls ( adata -> conn ) ) { enum ImapExecResult rc = imap_exec ( adata, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; goto err_close_conn ; }",0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,"<S2SV_ModStart> { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModStart> } else { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModStart> } else { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModStart> } else { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModStart> } else { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; }",0
420,"<S2SV_ModStart>, & rlen, 0",1
421,"<S2SV_ModStart> ; read_userfile ( & slavename ) ; if ( slavename == NULL ) { syslog ( LOG_NOTICE, _ ( ""(%d) <S2SV_blank> Invalid <S2SV_blank> login <S2SV_blank> by <S2SV_blank> %s\\r\\n"" ), curconn -> seskey, curconn -> username ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ) ; abort_connection ( curconn, pkthdr, _ ( ""Invalid <S2SV_blank> login <S2SV_blank> by <S2SV_blank> %s\\r\\n"" ) ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; abort_connection ( curconn, pkthdr, _ ( ""Invalid <S2SV_blank> login <S2SV_blank> by <S2SV_blank> %",0
422,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString ( name, ""__debug__"" ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
423,"<S2SV_ModStart> off } ; if ( i >= sizeof ( buf ) ) { return - 1 ; } for ( i = j = 0 ; i < sizeof ( buf ) - 1 && str [ i ] ; i ++, j ++ ) { if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } buf [ i ] = 0 ; arm_opcode_parse ( & aop, buf ) ; for ( j = 0 ; j < sizeof ( buf ) - 1 ; j ++ ) { if ( str [ j ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } buf [ i ] = 0 ; } buf [ i ] = 0 ; arm_opcode_parse ( & aop, buf ) ; if ( thumb < 0 || thumb > 1 ) { return - 1 ; }",0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,"<S2SV_ModStart> ; return FALSE ; } if ( credssp_verify ( transport -> credssp ) < 0 ) { fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; credssp_free ( transport -> credssp ) ; connectErrorCode = AUTHENTICATIONERROR ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; credssp_free ( transport -> credssp ) ; return FALSE ;",0
426,"<S2SV_ModStart> size_t s ; if ( o + 12 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( o + 12 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( o + 12 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; }",0
427,<S2SV_ModStart> bd_addr ) { if ( interface_ready ( ) == FALSE ) return BT_STATUS_NOT_READY ;,0
428,"<S2SV_ModStart> int i ; long <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; if ( buf -> len < buf -> cursor ) { elog ( ERROR, ""buffer <S2SV_blank> too <S2SV_blank> short"" ) ; return ( Datum ) NULL ; } <S2SV_ModEnd> nxip = pq_getmsgint <S2SV_ModStart> buf -> cursor ; if ( nxip < 0 || nxip > MAX_TXID ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> xmin = xmin ; snap -> xmax = xmax ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; }",0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart>,0
430,"<S2SV_ModStart> = - 1 ; if ( count > OE_SSIZE_MAX <S2SV_ModStart> = 0 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - EINVAL ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } ret = oe_syscall_write_ocall ( & ret, epoll -> host_fd, buf, count ) ; if ( ret > ( ssize_t ) count ) { ret = - EINVAL ; OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
431,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options || eof ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_DIR_MAX : * ( size_t * ) val = ms -> elf_dir_max ; return 0 ; case MAGIC_PARAM_NAME_MAX : * ( size_t * ) val = ms -> name_max ; return 0 ; case MAGIC_PARAM_ELF_PHNUM_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ;,0
433,<S2SV_ModStart> * journal = EXT4_JOURNAL ( page_file_mapping ( page ) -> host ),0
434,<S2SV_ModStart> { trak = GF_GET_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
435,"<S2SV_ModStart> int plen ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) strncpy ( md5data, password, 82 ) ; strncpy ( md5data + 1, password, 82 ) ; strncpy ( md5data + 1 + strlen ( password ), pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; md5sum [ 0 ] = 0 ; init_packet ( & data, MT_PTYPE_DATA, srcmac, dstmac, sessionkey, outcounter ) ; init_packet ( & data, MT_PTYPE_PASSWORD, md5data, 82 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md",0
436,<S2SV_ModStart> ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindexes = NULL ; },0
437,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && <S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && <S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i",0
438,"<S2SV_ModStart> g_hash_table_destroy ( headers ) ; headers = web_socket_util_new_headers ( ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=3;k=blah"" ) ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached ( ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=4;k=blah"" ) ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached ( ) ; g_hash_table_remove_all ( headers ) ; g_hash_table_destroy ( headers ) ;",0
439,<S2SV_ModStart> -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) ) { # if CONFIG_VP9_HIGHBITDEPTH if ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) ) { # if CONFIG_VP9_HIGHBITDEPTH if ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && (,0
440,"<S2SV_ModStart> * cpi, TileDataEnc * tile_data, TileDataEnc * tile_data, <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ( mi_col = tile_data -> mi_col_start <S2SV_ModEnd> ; mi_col < <S2SV_ModStart> mi_col_end ; mi_col += MI_BLOCK_SIZE ) { int dummy_rate ; int64_t dummy_dist ; MACROBLOCK * x = & cpi -> mb ; if ( sf -> adaptive_pred_interp_filter ) { for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 4, num_4x4_blk ) ; for ( x -> sb_index = 0 ; x -> mb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index < 16 ; ++ x ->",0
441,"<S2SV_ModStart> ; int hexdump ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; tptr = pptr ; ND_TCHECK ( * bw ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } if ( tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } obj_tlen = EXTRACT_32BITS ( obj_tptr ) ; if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; obj_tlen = EXTRACT_32BITS",0
442,"<S2SV_ModStart> mbmi, const MV * mvs <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ++ i ) { MV diff = { mvs [ i ]. as_mv. row - mbmi -> ref_mvs [ i ]. as_mv. row, mvs [ i ]. as_mv. col - mbmi -> ref_mvs [ i ]. as_mv. col } ; vp9_inc_mv ( & diff, counts ) ; } for ( i = 0 ; i < 2 ; ++ i ) { const MV * ref = & mbmi -> ref_mvs [ i ]. as_mv ; const MV diff = { mvs [ i ]. as_mv. row - mbmi -> ref_frame [ i ]. as_mv. row, mvs [ i ]. as_mv. col - mbmi -> ref_mvs [ i ]. as_mv. col } ; vp9_inc_mv ( & diff, counts ) ; } for ( ; i < 2 ; ++ i ) { const MV * ref = & mbmi -> ref_mvs [ i ] ]. as_mv ; const MV diff = { mvs [ i ]. as_mv",0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,"<S2SV_ModStart> ; if ( pskb_expand_head ( skb_out, size - skb -> len, GFP_ATOMIC ) < 0 ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } <S2SV_ModStart> ; if ( pskb_expand_head ( skb_out, size - skb -> len, GFP_ATOMIC ) < 0 ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_reset_network_header ( skb_out ) ; skb_reset_transport_header ( skb_out ) ; hlist_for_each_entry ( entry, chain, list ) { struct batadv_frag_list_entry * entry ; struct batadv_frag_list_",0
445,"<S2SV_ModStart> return ; netsnmp_mibindex_load ( ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; } env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; } env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile",0
446,"<S2SV_ModStart> ( uinput_dev_path [ x ], O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> path <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"", __FUNCTION__, uinput_dev_path [ x ] ) ; return - 1 ; } <S2SV_ModStart> 0x0000 ; if ( open ( uinput_dev_path [ x ], O_RDWR ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } fd = open ( uinput_dev_path [ x ], O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> device <S2SV_blank> path <S2SV_blank> %s"", __FUNCTION__, uinput_dev_path [ x ] ) ; return - 1 ; } fd = open ( uinput_dev_path [ x ], O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank>",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
449,"<S2SV_ModStart> * pctx ) { iakerb_ctx_id_t ctx ; krb5_error_code code ; if ( * pctx!= NULL ) return * pctx ; ctx = k5alloc ( sizeof ( * ctx ), & code ) ; if ( ctx == NULL ) goto cleanup ; <S2SV_ModEnd> ctx -> count <S2SV_ModStart> = 0 ; <S2SV_ModEnd> code = krb5_gss_init_context",0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; bitmapDC = CreateCompatibleDC ( hDC ) ; if ( bitmapDC == ( HDC ) NULL ) { DeleteDC ( hDC ) ; ThrowReaderException ( CoderError, ""UnableToCreateDC"" ) ; }",0
451,<S2SV_ModStart> )!= START_CODE_PREFIX && ps_stream -> u4_offset < ps_stream -> u4_max_offset,0
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = - EINVAL ; goto out ; }",0
453,<S2SV_ModStart> imethod ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
454,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; unsigned long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> copy_from_user ( buf <S2SV_ModEnd>, buffer, <S2SV_ModStart> count ) ) return - EFAULT ; tmp = simple_strtol <S2SV_ModEnd> ( buf,",0
455,"<S2SV_ModStart> * last_elem, * <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN}"", 6 ) == 0 && ( len = 7 )!= 0 ) && ( ( strncmp ( & name [ 1 ], ""PLATFORM}"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 7 )!= 0 ) && ( ( strncmp ( & name [ 2 ], ""PLATFORM}"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 7 )!= 0 ) && ( ( strncmp ( & name [",0
456,"<S2SV_ModStart> } pDecCont = ( decContainer_t * ) Malloc ( <S2SV_ModEnd> sizeof ( decContainer_t <S2SV_ModStart> ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; }",0
457,"<S2SV_ModStart> goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), & opt -> opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen < sizeof ( struct iphdr ) ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), & opt -> opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen < sizeof ( struct iphdr ) ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; }",0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> goto errout ; if ( info -> groupbook >= ci -> books ) goto errout ;,0
460,"<S2SV_ModStart> ; krb5_key_data * key_data ; if ( n_key_data <= 0 ) return NULL ; key_data = k5calloc ( n_key_data, sizeof ( * key_data ), & err ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_length [ 1 ] = 0 ; } } for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]",0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
462,"<S2SV_ModStart> 0 ] ) ; if ( pCsr -> zInput == 0 ) { pCsr -> pCsr -> pTokenizer = NULL ; return SQLITE_NOMEM ; } <S2SV_ModStart> 1 ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; pCsr -> zInput [ nByte ] = 0 ; rc = pTab -> pMod -> xOpen ( pTab -> pTok, pCsr -> zInput, nByte, & pCsr -> pCsr ) ; if ( rc == SQLITE_NOMEM ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; } }",0
463,<S2SV_ModStart> filp ) { if ( filp ) fput ( filp ) ;,0
464,"<S2SV_ModStart> * orelse, string type_comment, int <S2SV_ModEnd> lineno, int <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",1
465,<S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
466,"<S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ;",0
467,"<S2SV_ModStart> UINT error ; # ifdef WITH_DEBUG_RDPEI WLog_DBG ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" PRIu16 """", rdpei_eventid_string ( eventId ) ) ; WLog_DBG ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" PRIu16 "" <S2SV_blank> (%s) <S2SV_blank> length: <S2SV_blank> %"" PRIu32 """", eventId, rdpei_eventid_string ( eventId ), pduLength ) ; # ifdef WITH_DEBUG_RDPEI if ( ( error = rdpei_recv_sc_ready_pdu ( callback, s ) ) ) { WLog_ERR ( TAG, ""rdpei_recv_sc_ready_pdu <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %"" PRIu32 ""!"", error ) ; return error ; } break ; case EVENTID_CS_READY : if ( ( error = rdpei_send_cs_ready_pdu ( callback ) ) ) { WLog_ERR ( TAG, ""rdpei_send_cs_ready_pdu <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %"" PRI",0
468,"<S2SV_ModStart> ) ; } if ( pData -> socket == NULL ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; }",0
469,"<S2SV_ModStart> ( sk ) ; struct ipv6_txoptions * opt <S2SV_ModStart> struct flowi6 fl6 ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; fl6. flowlabel = np -> flow_label ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; if ( ipv6_addr_type ( & fl6. saddr ) & IPV6_ADDR_LINKLOCAL ) fl6. flowi6_oif = sk -> sk_bound_dev_if ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; <S2SV_ModStart> = 1 ; rcu_read_lock ( ) ; <S2SV_ModStart> = 1 ; rcu_read_unlock ( ) ; <S2SV_ModStart> = 1 ; rcu_read_unlock ( ) ; <S2SV_ModStart> = 1 ; rcu_read_unlock ( ) ;",0
470,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
471,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> UINT32 failureCode ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read <S2SV_blank> RDP <S2SV_blank> NEG_FAILURE <S2SV_blank> bytes"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read <S2SV_blank> RDP <S2SV_blank> NEG_FAILURE"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read <S2SV_blank> RDP <S2SV_blank> NEG_FAILURE"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read <S2SV_blank> RDP <S2SV_blank> NEG_FAILURE"" ) ; return ;",0
472,"<S2SV_ModStart> = 0 ; bn_t t ; bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( i = 0 ; i < * p_len ; i ++ ) { bn_rsh ( t, m, 8 * m_len ) ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } while ( pad!= 0 && m_len > 0 ) { bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_ERR ; } do { m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } while ( pad!= 0 && m",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,"<S2SV_ModStart> ( psf = psf_calloc <S2SV_ModEnd> ( 1,",0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> ++ j ) <S2SV_ModEnd> count [ i,0
476,"<S2SV_ModStart> cpi ) { MACROBLOCK * const x = & cpi -> td. <S2SV_ModStart> x -> act_zbin_adj <S2SV_ModEnd> ; vp9_setup_src_planes ( <S2SV_ModStart> = 0 ; vp9_setup_pre_planes ( x, cpi -> Source, 0, 0, NULL ) ; vp9_setup_dst_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; xd -> mi [ 0 ] -> mbmi. mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; vpx_memset ( xd -> above_context, 0, sizeof ( * xd -> above_context ) * aligned_mi_cols ) ; vpx_memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_cols ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null",0
477,"<S2SV_ModStart> ( hp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } if ( retval!= 0 ) { WSP ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; }",0
478,"<S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) )",0
479,"<S2SV_ModStart> len ) ; if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len + sizeof ( tETH_HDR ) ) ; return - 1 ; } <S2SV_ModStart> ) ) ; if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len + sizeof ( tETH_HDR ) ) ; return - 1 ; }",0
480,<S2SV_ModStart> = u2_frame_num ; if ( ps_dec -> u4_last_slice_in_pic == 1 ) { ps_dec -> u4_last_slice_in_pic = 0 ; ps_dec -> u4_last_slice_in_pic = 1 ; ps_dec -> u4_last_slice_in_pic = 0 ; ps_dec -> u4_last_slice_in_pic = 1 ; ps_dec -> u4_last_slice_in_pic = 0 ; ps_dec -> u4_last_slice_in_pic = 1 ; ps_dec -> u4_last_slice_in_pic = 0 ; ps_dec -> u4_last_slice_in_pic = 0 ; ps_dec -> u4_last_slice_in_pic = 0 ; ps_dec -> u4_last_slice_in_pic = 0 ; ps_dec -> u4_last_slice_in_pic = 0 ; ps_dec -> u4_last_slice_in_pic = 0 ; ps_dec -> u4_last_slice_in_pic = 0 ; ps_dec ->,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; struct pci_dev <S2SV_ModStart> * pdev ; <S2SV_ModEnd> int port ; <S2SV_ModStart> return PTR_ERR ( karg ) ; } if ( data_size < sizeof ( struct mpt_ioctl_iocinfo ) || data_size > sizeof ( struct mpt_ioctl_iocinfo_rev0 ) || ( data_size > sizeof ( struct mpt_ioctl_iocinfo_rev1 ) || ( data_size < sizeof ( struct mpt_ioctl_iocinfo_rev0 ) || ( data_size > sizeof ( struct mpt_ioctl_iocinfo_rev0 ) + 12 ) ) ) return - EFAULT ; karg = memdup_user ( uarg, data_size ) ; if ( karg ) { printk ( KERN_ERR MYNAM ""%s@%d::mpt_ioinfo() <S2SV_blank> - <S2SV_blank> memdup_user <S2SV_blank> returned <S2SV_blank> error <S2SV_blank> [%ld]\\n"", __FILE__, __LINE__, PTR_ERR",0
482,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
483,"<S2SV_ModStart> } else { <S2SV_ModEnd> raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModStart> } else { <S2SV_ModEnd> raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModStart> } else { <S2SV_ModEnd> raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModStart> } else { <S2SV_ModEnd> raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModStart> } else { <S2SV_ModEnd> raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s""",0
484,"<S2SV_ModStart> ; if ( datao > buf_size - 12 ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; if ( datao + 2 > buf_size - 2 ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifM",0
485,"<S2SV_ModStart> fname ) ; if ( fname == NULL ) { L_ERROR ( ""filename <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"", procName ) ; return 1 ; } <S2SV_ModStart> fname ) ; if ( fname == NULL ) { L_ERROR ( ""filename <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"", procName ) ; return 1 ; } <S2SV_ModStart> fname ) ; if ( fname == NULL ) { L_ERROR ( ""filename <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"", procName ) ; return 1 ; } <S2SV_ModStart> fname ) ; if ( fname == NULL ) { L_ERROR ( ""filename <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"", procName ) ; return 1 ; } <S2SV_ModStart> fname ) ; if ( fname == NULL ) { L_ERROR ( ""filename <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"", procName ) ; return 1 ; } <S2SV_ModStart> fname ) ; if ( fname == NULL ) { L_ERROR ( ""filename <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"", procName ) ; return 1 ; } <S2SV_ModStart> fname ) ; if ( fname == NULL ) { L_ERROR ( ""filename <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"", procName ) ; return 1 ; }",0
486,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> for ( opt <S2SV_ModStart>. next ; opt = opt -> next ; opt -> next = NULL ; service_free ( & service_options ) ; while ( opt ) { unsigned i ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names ) { SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
487,"<S2SV_ModStart> void ) { if ( strchr ( mnemonic, '\\0' ) ) { mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; } else if ( strchr ( mnemonic, '\\0' ) ) { mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; } if ( strlen ( mnemonic ) > 0 ) { mnemonic [ strlen ( mnemonic ) - 1 ] == '\\0' ) { mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; } if ( strlen ( mnemonic ) > 0 ) { mnemonic [ strlen ( mnemonic ) - 1 ] == '\\0' ) { mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; } else { mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; } if ( strlen ( mnemonic ) > 0 ) { mnemonic [ strlen ( mnemonic ) - 1 ] == '\\0' ) { mnemonic [ strlen ( mnemonic ) - 1 ] == '\\0' ) { mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; } else { mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0",0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT7 ) ) ; enc624j600WriteReg ( interface, ENC624J600_EHT8 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT8 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_",0
489,"<S2SV_ModStart> packets ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,<S2SV_ModStart> { WORD32 i <S2SV_ModEnd> ; WORD32 st_rps_idx <S2SV_ModStart> st_rps_idx ) { ps_dpb_mgr -> ai4_num_st_curr_before ++ ; ps_dpb_mgr -> ai4_num_st_curr_after ++ ; ps_dpb_mgr -> ai4_num_lt_curr_before ++ ; ps_dpb_mgr -> ai4_num_lt_curr_after ++ ; ps_mv_buf_mgr -> u4_num_lt_curr_after ++ ; } for ( i = 0 ; i < ps_dpb_mgr -> ai4_num_st_curr_before ; i ++ ) { ps_dpb_mgr -> ai4_num_st_curr_after ++ ; ps_dpb_mgr -> ai4_num_lt_curr_before ++ ; ps_dpb_mgr -> ai4_num_lt_curr_after ++ ; ps_mv_buf_mgr -> u4_num_lt_curr_after ++ ; } for ( i = 0 ; i < ps_dpb_mgr -> ai4_num_st_curr_before,0
491,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart> 0 ; while ( child ) { ++ numentries ; child = child -> next ; } if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) ) return 0 ; while ( child ) { ++ numentries ; child = child -> next ; } if (! fail ) { out = ( char * ) cJSON_malloc ( len ) ; if (! out ) fail = 1 ; for ( i = 0 ; i < numentries ; ++ i ) { if ( names [ i ] ) cJSON_free ( names [ i ] ) cJSON_free ( names [ i ] ) ; cJSON_free ( entries [ i ] ) ; cJSON_free ( names [ i ] ) ; cJSON_free (,0
492,"<S2SV_ModStart> = unix_peer_get ( sk ) ; if (! writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLOUT | POLLWRBAND ; else mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; if ( writable ) mask |= POLLOUT | POLLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE",0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
494,<S2SV_ModStart> 0 ) { if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } <S2SV_ModStart> ; if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } ptr = ( unsigned char * ) header -> buffer. value + token_wrapper_len ; signalg = ptr [ 0 ] ; sealalg = ptr [ 1 ] ; signalg |= ptr [ 2 ] ; sealalg |= ptr [ 3 ] ; if ( ptr [ 4 ]!= 0xFF || ptr [ 5 ]!= 0xFF ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; },0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * frame = va_arg <S2SV_ModEnd> ( args, <S2SV_ModStart> * ) ; YV12_BUFFER_CONFIG * fb ; vpx_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> if ( frame <S2SV_ModStart> NULL ) { YV12_BUFFER_CONFIG * fb ; vpx_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; vp9_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_OK <S2SV_ModEnd> ; } <S2SV_null>",0
496,<S2SV_ModStart> plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { ret = - EPERM ; break ; },0
497,"<S2SV_ModStart> * info, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> ) ) { if ( param -> testflag & T_UNPACK ) { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; } else { if ( ( param -> testflag & T_SILENT ) ) { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; } else { if ( ( param -> testflag & T_SILENT ) ) { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; } else { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; }",0
498,"<S2SV_ModStart> s } ; uECC_word_t carry ; wordcount_t num_words = curve -> num_words ; bitcount_t num_n_bits = curve -> num_n_bits ; if ( uECC_vli_isZero ( k, num_words ) ) { return 0 ; } <S2SV_ModStart> curve ) ; if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; uECC_generate_random_int ( tmp, curve -> n, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, curve -> n, num_n_words ) ) { return 0 ; } uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k,",0
499,"<S2SV_ModStart> trunc : ND_TCHECK2 ( * bp, ND_RPL_DAOACK_MAX_LEN ) ; if ( length < ND_RPL_DAOACK_MAX_LEN ) goto trunc ; <S2SV_ModStart> ) ) ; return ; trunc : ND_TCHECK2 ( * bp, ND_RPL_DAOACK_MAX_LEN ) ; if ( length < ND_RPL_DAOACK_MAX_LEN ) goto tooshort ; bp += ND_RPL_DAOACK_MAX_LEN ; length -= ND_RPL_DAOACK_MAX_LEN ; if ( RPL_DAOACK_D ( daoack -> rpl_flags ) ) { ND_TCHECK2 ( * bp, ND_RPL_DAOACK_MAX_LEN ) ; if ( length < ND_RPL_DAOACK_MAX_LEN ) goto tooshort ; dagid_str = ip6addr_string ( ndo, daoack -> rpl_dagid ) ; length -= ND_RPL_DAOACK_MAX_LEN ; }",0
500,"<S2SV_ModStart> = buf ; return ; } if ( pool -> free_total == UINT_MAX / 2 ) { uint32_t new_free_total = pool -> free_total * 2 ; void * new_arr ; if ( new_arr ) { pool -> free_total = new_free_total * sizeof ( nw_buf * ) ; new_arr = pool -> free_arr ; pool -> free_arr = new_arr ; } else { free ( buf ) ; } } } else { uint32_t new_free_total = pool -> free_total * 2 ; void * new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total ; pool -> free_arr = new_arr ; pool -> free_arr = new_arr ; pool -> free_arr = new_arr ; } else { free ( buf ) ; } }",0
501,"<S2SV_ModStart> { while ( * cp ) { int cval = 0, meta = 0 ; if ( * cp == '\\\\' && cp [ 1 ] && index ( ""0123456789"", cp [ 1 ] ) && cp [ 2 ] ) { meta = 1 ; cp += 2 ; } else { const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; const char * dp ; int dcount = 0 ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) &&",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart> * pixc, * pixm, * pixg, * pixd <S2SV_ModStart> if ( ( pixm = pixFewColorsOctcubeQuant2 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; pixg = pixGetColormap ( pixc ) ; ncolors = pixcmapGetCount ( cmap ) ; if ( ncolors <= 0 ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; cmap = pixGetColormap ( pixc ) ; ncolors = pixcmapGetCount ( cmap ) ; ncolors = pixcmapGetCount ( cmap ) ; ncolors = pixcmapGetCount ( cmap ) ; ncolors = pixcmapGetCount ( cmap ) ; ncolors = pixcmapGetCount ( cmap ) ; ncolors = pixcmapGetCount ( cmap ) ; ncolors = pixcmapGetCount ( cmap ) ; ncolors = pixcmapGetCount ( cmap ) ; ncolors = pixcmapGetCount ( cmap ) ; ncolors = pixcmapGetCount ( cmap ) ; ncolors = pixcmapGetCount ( cmap ) ; n",0
504,"<S2SV_ModStart> vf = vp8_mse16x16 ; xd -> pre. y_buffer = recon_buffer -> y_buffer + recon_yoffset ; tmp_mv. as_int = 0 ; ref_mv_full. as_mv. row = 0 ; ref_mv_full. as_mv. col = 0 ; ref_mv_full. as_mv. row = 0 ; ref_mv_full. as_mv. col = 0 ; tmp_err = cpi -> diamond_search_sad ( x, b, d, & ref_mv_full, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> mvcost, ref_mv ) ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_",0
505,"<S2SV_ModStart> * data ; size_t size ; size = overhead ; if ( mongo_validate_ns ( conn, ns )!= MONGO_OK ) return MONGO_ERROR ; for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; }",0
506,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; return ; } if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""Invalid <S2SV_blank> RDP_NEG_RSP"" ) ; <S2SV_ModStart> = NEGO_STATE_FINAL ; return ;",0
507,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; i = active_best_quality ; do { const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( target_bits_per_mb - bits_per_mb_at_this_q <= last_error ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } else { last_error = bits_per_mb_at_this_q - target",0
508,"<S2SV_ModStart> |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_COMM_CTRL ) ; value |= TJA1101_COMM_CTRL_AUTO_OP ; tja1101WritePhyReg ( interface, TJA1101_COMM_CTRL, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_CONFIG1 ) ; value |= TJA1101_CONFIG1_AUTO_OP ; tja1101WritePhyReg ( interface, TJA1101_COMM_CTRL, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_COMM_CTRL ) ; value |= TJA1101_COMM_CTRL_AUTO_OP ; tja1101WritePhyReg ( interface, TJA1101_COMM_CTRL, value ) ; value =",0
509,"<S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; <S2SV_ModStart> ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; <S2SV_ModStart> ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; <S2SV_ModStart> ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; <S2SV_ModStart> ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; <S2SV_ModStart> ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; <S2SV_ModStart> ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) )",0
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> TX_SIZE tx_size, int up_available, int left_available, int right_available, int plane ) { DECLARE_ALIGNED_ARRAY ( 16, uint8_t, left_col, 64 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; uint8_t * above_row = above_data + 16 ; const uint8_t * const above_row = above_data + 16 ; const int bs = 4 << pd -> subsampling_x ; const int bs = 4 << pd -> subsampling_y ; if ( plane == 0 ) { frame_width = xd -> cur_buf -> uv_width ; frame_height = xd -> cur_buf -> uv_height ; } else { frame_width = xd -> cur_buf -> uv_width ; } if ( plane == 0 ) { x0 = ( - xd -> mb_to_left_edge >> ( 3 + pd -> subsampling_x ) ) + x ; y0 = ( - xd -> mb_to_top_edge >>",0
511,"<S2SV_ModStart> } end ++ ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long\\n"" ) ; goto error ; }",0
512,<S2SV_ModStart> i_completed_io_list ) ; <S2SV_ModEnd> ei -> cur_aio_dio <S2SV_ModStart> cur_aio_dio = NULL ; ei -> i_datasync_tid = 0 ; ei -> i_sync_tid = 0 ; ei -> i_datasync_tid = 0 ; ei -> i_datasync_tid = 0 ; return & ei -> vfs_inode ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal ( wb, VP9_FRAME_MARKER, 2 ) ; write_profile ( cm -> profile, wb ) ; vpx_wb_write_bit ( wb, 0 ) ; vpx_wb_write_bit ( wb, cm -> frame_type ) ; vpx_wb_write_bit ( wb, cm -> show_frame ) ; vpx_wb_write_bit ( wb, cm -> error_resilient_mode ) ; if ( cm -> frame_type == KEY_FRAME ) { const COLOR_SPACE cs = UNKNOWN ; write_sync_code ( wb ) ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vp9_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } vp9_wb_write_literal ( wb, cs, 3 ) ; if ( cs!= SRGB ) { vp9_wb_write_bit ( wb, 0 ) ; if ( cm -> profile > PROFILE_1",0
514,<S2SV_ModStart> ; if ( stroff < 0 ) exit ( EXIT_FAILURE ) ; <S2SV_ModEnd> if ( stroff <S2SV_ModStart> ; if ( stroff < 0 ) exit ( EXIT_FAILURE ) ; <S2SV_ModEnd> if ( stroff <S2SV_ModStart> ; if ( stroff < 0 ) exit ( EXIT_FAILURE ) ; <S2SV_ModEnd> if ( stroff <S2SV_ModStart> ; if ( stroff < 0 ) exit ( EXIT_FAILURE ) ; <S2SV_ModEnd> if ( stroff <S2SV_ModStart> ; if ( stroff < 0 ) exit ( EXIT_FAILURE ) ; <S2SV_ModEnd> if ( stroff <S2SV_ModStart> ; if ( stroff < EXIT_SUCCESS ) { exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ; if ( stroff < 0 ) exit ( EXIT_FAILURE ) ; <S2SV_ModEnd> if ( stroff <S2SV_ModStart> ; if ( stroff < 0 ) exit ( EXIT_FAILURE ) ; <S2SV_ModEnd> if ( stroff <S2SV_ModStart> ; if ( stroff < 0 ) exit ( EXIT_FAILURE ) ; <S2SV_ModEnd> if ( stroff <S2SV_ModStart> ; if ( stroff < 0 ) exit ( EXIT_FAILURE ) ; <S2SV_ModEnd> if ( stroff <S2SV_ModStart> ; if ( stroff < EXIT_FAILURE ) { exit ( EXIT_FAILURE ) ; <S2SV_ModEnd> if ( stroff,0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
516,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && <S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && <S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i",0
517,"<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ; memset ( xd -> ref_lf_deltas, 0, sizeof ( xd -> ref_lf_deltas ) ) ; memset ( xd -> mode_lf_deltas, 0, sizeof ( xd -> mode_lf_deltas ) ) ; pc -> refresh_golden_frame = 1 ; pc -> copy_buffer_to_arf = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_ar",0
518,"<S2SV_ModStart> error ; uint16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT <S2SV_ModEnd> ) & ESTAT_PKTCNT <S2SV_ModStart> ( interface, ENC624J600_ESTAT <S2SV_ModEnd> ) & ESTAT_PKTCNT <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT, context -> nextPacket ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof",0
519,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_memory ( VALUE <S2SV_ModStart> VALUE content ; <S2SV_ModEnd> xmlSchemaPtr schema ; <S2SV_ModStart> ; xmlSchemaParserCtxtPtr ctx = xmlSchemaNewMemParserCtxt ( ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; xmlSchemaParse ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; xmlSchemaFreeParserCtxt ( ctx ) ; return Qnil ; } schema = Data_Wrap_Struct ( klass, 0, dealloc, schema ) ; rb_iv_set ( rb_schema, ""@errors"", errors ) ; return rb_schema ; } <S2SV_null>",0
520,"<S2SV_ModStart> ; if ( strlen ( errstr ) < 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> line"" ) ; print_syntax ( ) ; return 1 ; } errstr = strchr ( errstr,'<S2SV_blank>') ; if ( errstr ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> line"" ) ; print_syntax ( ) ; return 1 ; } errstr = strchr ( errstr,'<S2SV_blank>') ; if ( errstr ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> line"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> ; if ( strlen ( errstr ) < 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> line"" ) ; print_syntax ( ) ; return 1 ; } errstr = strchr ( errstr,'<S2SV_blank>') ; if ( errstr ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> line"" ) ; print_syntax ( ) ; return 1 ; } errstr = strchr ( errstr,'<S2SV_blank>') ; if ( errstr ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> line"" ) ; print_syntax ( ) ; return 1 ; }",0
521,<S2SV_ModStart> / 2 ] ; out [ 3 ] <S2SV_ModStart> / 2 ] ; out [ 5 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; <S2SV_ModStart> / 2 ] ; out [ 3 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; <S2SV_ModStart> / 2 ] ; out [ 6 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; <S2SV_ModStart> / 2 ] ; out [ 7 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 8 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 9 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 10 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 6 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 8 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 9 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 10 ] = ptr [ ( x + 5 * state -> x,0
522,"<S2SV_ModStart> ; err = - EBUSY ; if (! list_empty ( & po -> fanout_list ) ) { list_add_tail ( & po -> fanout_list, & fanout_list ) ; err = - EINVAL ; goto out ; } if ( type == PACKET_FANOUT_LB || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_QM || type == PACKET_FANOUT_CBPF || type == PACKET_FANOUT_EBPF ) { list_for_each_entry ( f, & fanout_list, list ) { struct packet_rollover * rollover ; rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) goto out ; rollover -> num = 0 ; atomic_long_set ( & rollover -> num_huge, 0 ) ; atomic_long_set ( & rollover -> num_failed, 0 ) ;",0
523,<S2SV_ModStart> -> nmi ) <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> pending ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> utf8s_to_utf16s ( const <S2SV_ModStart> * s, size_t <S2SV_ModEnd> len, wchar_t <S2SV_ModStart> * s, size_t <S2SV_ModEnd> size ) { <S2SV_ModStart> - EINVAL ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } s += size ; len -= size",0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { if (! need_pass ) { <S2SV_ModStart> ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; } else { <S2SV_ModStart> ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; }",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & ( KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXFHSR_RXRF | KSZ8851_RXFHSR_RXCE ) <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( interface, KSZ8851_RXFDPR <S2SV_ModEnd>, RXFDPR_RXFPAI ) <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ancillary <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851ReadFifo <S2SV_ModStart> n ) ; ksz8851ClearBit ( interface, KSZ8851_RXQCR, RXQCR_RRXEF ) ; nicProcessPacket ( interface, context -> rxBuffer, n",0
527,"<S2SV_ModStart> const node * n, const asdl_seq * decorator_seq, bool <S2SV_ModEnd> is_async ) { <S2SV_ModStart>, is_async ) { identifier name ; arguments_ty args ; expr_ty returns = NULL ; name_i = 1 ; if ( TYPE ( CHILD ( n, name_i + 1 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 2 ) ) ; if (! args ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; if (! type_comment && NCH ( CHILD ( n, name_i + 4 ) ) > 1 ) { tc = CHILD ( n, name_i + 4 ) ; if ( TYPE ( CHILD ( n, name_i + 5 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 5 )",0
528,"<S2SV_ModStart> int i ; if ( mm_context ( mm ) -> pgd ) { if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pud = pud_offset ( mm, 0xA0000 ) ; if ( pud_none_or_clear_bad ( pud ) ) goto out ; } pte = pte_offset_map_lock ( mm, pmd, 0xA0000, & ptl ) ; for ( i = 0 ; i < 32 ; i ++ ) { if ( pte_present ( * pte ) ) set_pte ( pte, pte_wrprotect ( * pte ) ) ; pte ++ ; } pte_unmap_unlock ( pte, ptl ) ; out :",0
529,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> dst_coap_msg_ptr -> token_len <S2SV_ModStart> dst_coap_msg_ptr -> token_len < 0 ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> len <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", dst_coap_msg_ptr -> token_len ) ; return - 1 ; } if ( <S2SV_ModEnd> dst_coap_msg_ptr -> token_len <S2SV_ModStart> dst_coap_msg_ptr -> token_len < 0 ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> len <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", dst_coap_msg_ptr -> token_len ) ; return - 1 ; } if ( <S2SV_ModEnd> dst_coap_msg_ptr -> token_len <S2SV_ModStart> dst_coap_msg_ptr -> token_len <S2SV_ModStart> dst_coap_msg_ptr -> token_len < 0 ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> len <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%",0
530,"<S2SV_ModStart> ) ) { if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } <S2SV_ModStart> ) ) { if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
531,<S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( i = 0 ; i < 14 ; i ++ ) { if ( ( j = pana_bits ( 8 ) )!= 0 ) { if ( ( j = pana_bits ( 8 ) )!= 0 ) { if ( ( j = pana_bits ( 8 ) )!= 0 ) { if ( ( j = pana_bits ( 8 ) )!= 0 ) { if ( ( j = pana_bits ( 8 ) )!= 0 ) { if ( ( j = pana_bits ( 8 ) )!= 0 ) { if ( ( j = pana_bits ( 8 ) )!= 0 ) { if ( ( j = pana_bits ( 8 ) )!= 0 ) { if ( ( j = pana_bits ( 8 ) )!= 0 ) { if (,0
532,<S2SV_ModStart> len < needed || len > param -> data_size,0
533,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
534,<S2SV_ModStart> bfqq ) return <S2SV_ModEnd> bfq_idle_slice_timer_body ( bfqq,0
535,<S2SV_ModStart> ; length += <S2SV_ModEnd> PRIMARY_DRAWING_ORDER_FIELD_BYTES [ orderInfo,0
536,<S2SV_ModStart> -> d_inode ) { if (! ( flags & RENAME_EXCHANGE ) &&! ( flags & RENAME_NOREPLACE ) ) { err = - EPERM ; goto out ; } if (! ( flags & RENAME_EXCHANGE ) &&! ( flags & RENAME_NOREPLACE ) ) { err = - EPERM ; goto out ; } if (! ( flags & RENAME_EXCHANGE ) &&! ( flags & RENAME_NOREPLACE ) ) { err = - EPERM ; if (! ( flags & RENAME_EXCHANGE ) &&! ( flags & RENAME_NOREPLACE ) ) { err = - EPERM ; goto out ; } if (! ( flags & RENAME_EXCHANGE ) &&! ( flags & RENAME_NOREPLACE ) ) { err = - EPERM ; goto out ; } if (! ( flags & RENAME_EXCHANGE ) &&! ( flags & RENAME_NOREPLACE ) ) { err = - EPERM ; if (! ( flags & RENAME_EXCHANGE ) &&! ( flags & RENAME_NOREPLACE ) ) { err = - EPERM ; goto out ; } if (,0
537,"<S2SV_ModStart> int plane ; # if CONFIG_VP9_HIGHBITDEPTH switch ( xd -> mb_order ) { case VPX_BITS_8 : vp9_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; break ; case VPX_BITS_10 : vp9_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; break ; case VPX_BITS_12 : vp9_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; break ; case VPX_BITS_8 : vp9_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; break ; } # else vp9_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; # endif vp9_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; }",0
538,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMMON <S2SV_ModStart> -> e_mbd ; const TileInfo * const tile_info = & tile -> tile_info ; int mi_row = x -> mi_rows [ mi_row ] ; int mi_col = x -> mi_cols [ mi_col ] ; BLOCK_SIZE bsize = xd -> mi [ 0 ] -> mbmi. sb_type ; if ( frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile_info, mi_row, mi_col, rate, dist, bsize ) ; } else if (! frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile_info, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; }",0
539,"<S2SV_ModStart> = NULL ; if ( reader. superblock == NULL ) { log ( ""cannot <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s\\n"", filename ) ; return NULL ; }",0
540,<S2SV_ModStart> = malloc ( <S2SV_ModEnd> sizeof ( MappedRange,0
541,<S2SV_ModStart> ; if ( flags & ( VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF ) ) { int ref = 7 ; if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) ref ^= VP8_ALTR_FRAME ; if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_,0
542,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
543,<S2SV_ModStart> event ) ; WARN_ON_ONCE ( swhash -> online ) ; <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> case BGP_IPV4_ADDRESS : if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV4_ADDRESS : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV4_ADDRESS : if ( tlen < 4 ) { ND_",0
545,"<S2SV_ModStart> ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""</tr>"" ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Process <S2SV_blank> id</td>"" ""<td>%d</td></tr>"", Run. system -> id ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Pidfile</td><td>%s</td></tr>"", Run. files. pid ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>State <S2SV_blank> file</td><td>%s</td></tr>"", Run. files. state ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Debug</td><td>%d</td></tr>"", Run. debug ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Pidfile</td><td>%s</td></tr>"", Run. files. debug ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>State <S2SV_blank> file</td><td>%s</td></tr>"", Run. files. state )",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,<S2SV_ModStart> ) ) ; if ( tokenAmount < 0 || tokenAmount > UINT32_MAX / 32 || tokenMinAmount < 0 || tokenMinAmount > UINT32_MAX / 32 || tokenMinAmount > UINT32_MAX / 32 || tokenMinAmount > UINT32_MAX / 32 || tokenMinAmount > UINT32_MAX / 32 || tokenMinAmount > UINT32_MAX / 32 || tokenMinAmount > UINT32_MAX / 32 || tokenMinAmount > UINT32_MAX / 32 || tokenMinAmount > UINT32_MAX / 32 || tokenMinAmount > UINT32_MAX / 32 || tokenMinAmount > UINT32_MAX / 32 || tokenMinAmount > UINT32_MAX / 32 || tokenMinAmount > UINT32_MAX / 32 || tokenMinAmount > UINT32_MAX / 32 || tokenMinAmount > UINT32_MAX / 32,0
548,"<S2SV_ModStart> - EINVAL ; } if ( config -> desc. bNumInterfaces > USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, USB_MAXINTERFACES ) ; nintf = nintf_orig ; } for ( iad_num = 0 ; iad_num < nintf ; i ++ ) { if ( iad_num >= USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; } for ( iad_num = 0 ; iad_num < nintf ; i ++ ) { if ( iad_num >= nalts ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed:",0
549,"<S2SV_ModStart> header. size, <S2SV_ModEnd> 0, 0",0
550,"<S2SV_ModStart> 16 ) ; # if CONFIG_VP8_HIGHBITDEPTH vp8_highbitdepth_build_intra_predictors_mby_s ( xd, b -> base_src, b -> src_stride, xd -> predictor, 16, & sse ) ; # else vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; # endif vp8_highbitdepth_build_intra_predictors_mby_s ( xd, b -> base_src, b -> src_stride, xd -> predictor, 16, & sse ) ; # if CONFIG_VP8_HIGHBITDEPTH vp8_highbitdepth_build_intra_predictors_mby_s ( xd, b -> base_src, b -> src_stride, xd -> predictor, 16, & sse ) ; # endif vp8_highbitdepth_build_intra_predictors_mby_s ( xd, b -> base_src, b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ x",0
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 ) ; interface -> macAddr. w [ 0 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR2 ) ; interface -> macAddr. w [ 1 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR3 ) ; interface -> macAddr. w [ 2 ] = letoh16 ( temp ) ; macAddrToEui64 ( & interface -> macAddr, & interface -> eui64 ) ; } else { temp = htole16 ( interface -> macAddr. w [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR1, temp ) ; temp = htole16 ( interface -> macAddr. w [ 1 ] ) ; enc624j600Write",0
552,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; vsnprintf ( start, maxlen, format, argptr ) ; <S2SV_ModEnd> va_end ( argptr <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header ) ; return ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
553,"<S2SV_ModStart> else { if <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> alg_priv ) { vpx_codec_alg_destroy ( ctx -> priv -> alg_priv ) ; ctx -> priv -> alg_priv = NULL ; } else { ctx -> iface -> destroy ( ctx -> priv -> iface ) ; } ctx -> priv = NULL ; ctx -> name = NULL ; ctx -> priv = NULL ; return SAVE_STATUS ( ctx, res ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
554,<S2SV_ModStart> speed ) { <S2SV_ModEnd> sf -> adaptive_rd_thresh <S2SV_ModStart> ; sf -> <S2SV_ModEnd> use_square_partition_only =! <S2SV_ModStart> ; sf -> <S2SV_ModEnd> less_rectangular_check = 1 <S2SV_ModStart> = 1 ; <S2SV_ModEnd> sf -> auto_mv_step_size <S2SV_ModStart> = 1 ; <S2SV_ModEnd> sf -> adaptive_rd_thresh <S2SV_ModStart> = 2 ; <S2SV_ModEnd> sf -> mode_skip_start <S2SV_ModStart> = 10 ; <S2SV_ModEnd> sf -> adaptive_pred_interp_filter <S2SV_ModStart> = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16,0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
556,<S2SV_ModStart> ; int goodsize ; if ( inuse < 0 || inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart> * s = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; if ( quote < 0 ) { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; if ( str ) { PyObject * type, * value, * tback, * errstr ; if ( errstr ) { char buf [ 128 ] ; s = """" ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", _PyUnicode_AsString ( errstr ) ) ; ast_error ( n, buf ) ; Py_DECREF ( type ) ; Py_DECREF ( value ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; Py_DECREF",0
559,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> } else if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { res = parse_layers ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) { SvcInternal *",0
560,"<S2SV_ModStart> ) ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; mb_index = 0 ; fprintf ( mvs, ""Mb <S2SV_blank> mv <S2SV_blank> ref <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. ref_frame ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs,",0
561,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
562,,1
563,"<S2SV_ModStart> ) ) { if ( imp_dbh -> pmysql -> mysql_error ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; }",0
564,"<S2SV_ModStart> ; if ( ( <S2SV_ModStart> & SOCK_THREAD_FD_EXCEPTION ) && TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY )",0
565,<S2SV_ModStart> struct ieee_802_11_phdr phdr ; if ( mpdu_count > MAX_FRAME_SIZE ) { mpdu_count = MAX_FRAME_SIZE ; mpdu_str = g_malloc ( sizeof ( struct ieee_802_11_phdr ) ) ; } <S2SV_ModStart> phdr ) ; if ( mpdu_count > MAX_FRAME_SIZE ) mpdu_str = g_malloc ( sizeof ( struct ieee_802_11_phdr ) ) ; if ( mpdu_str == NULL ) mpdu_str = g_malloc ( sizeof ( struct ieee_802_11_phdr ) ) ; if ( mpdu_str == NULL ) mpdu_str = g_malloc ( sizeof ( struct ieee_802_11_phdr ) ) ; if ( mpdu_count > MAX_FRAME_SIZE ) mpdu_str = g_malloc ( sizeof ( struct ieee_802_11_phdr ) ; if ( mpdu_str == NULL ) mpdu_str = g_malloc ( sizeof ( struct ieee_802_11_phdr ) ; if,0
566,<S2SV_ModStart> = s_malloc ( <S2SV_ModEnd> hdrlen + initlen,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> UINT32 tempWidth ; if (! context ) return FALSE <S2SV_ModStart> ; y < <S2SV_ModEnd> context -> height <S2SV_ModStart> -> height ; y ++ ) { src = data + ( context -> height - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * context -> width ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y *,0
568,"<S2SV_ModStart> nr_parens ) return ERR_PTR ( - EINVAL ) ; if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; } * ( ++ top ) = invert ; continue ; case '!' : if (! is_not ( next ) ) break ; invert =! invert ; continue ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; }",0
569,"<S2SV_ModStart> cpi ) { RATE_CONTROL * const rc = & cpi -> td. rc <S2SV_ModEnd> ; int target <S2SV_ModStart> 0 ) { const int initial_boost = 32 ; int kf_boost = MAX ( initial_boost, ( int ) ( 2 * cpi -> output_framerate - 16 ) ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = MAX ( initial_boost, ( int ) ( rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; } else if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; } else if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) {",0
570,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_bit_depth_t <S2SV_ModEnd> read_tx_mode ( vpx_reader <S2SV_ModStart> r ) { vpx_bit_depth_t <S2SV_ModEnd> tx_mode = vpx_read_literal <S2SV_ModStart> 2 ) ; vpx_bit_depth_t <S2SV_ModEnd> tx_mode = vpx_read_bit <S2SV_ModStart> == ALLOW_32X32 ) vpx_read_bit <S2SV_ModEnd> ( r ),0
571,"<S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> ) ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node",0
572,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const mb = & cpi -> mb ; MACROBLOCKD * const xd = & cpi -> td. <S2SV_ModEnd> plane [ plane <S2SV_ModStart> 32 ] ; MACROBLOCK * const p = & cpi -> td. plane [ plane ] ; MB_MODE_INFO * const pd = & p -> mbmi [ 0 ] -> mbmi [ 0 ] -> mbmi [ 0 ] -> mbmi [ 0 ] -> mbmi [ 0 ] -> mbmi ; const int segment_id = mbmi -> segment_id ; const int ref = is_inter_block ( mbmi ) ; const int seg_eob = get_tx_eob ( & cpi -> common. seg, segment_id, tx_size ) ; const uint8_t * const band = get_band_translate ( tx_size ) ; const int seg_eob = get_tx_eob ( & cpi -> common. seg, segment_id, tx_size ) ; const int aoff, loff ; txfrm_block_to_raster_xy ( plane_bsize, tx_size, block, & aoff, & loff ) ; pt =",0
573,"<S2SV_ModStart> pSelect -> pSrc ; if ( pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = & pSrc -> a [ i ] ; if ( pItem -> pTab == p -> pTab ) { renameTokenFind ( pWalker -> pParse, p, pItem -> zName ) ; } }",0
574,"<S2SV_ModStart> ) ; serv = kzalloc ( NFS4_CALLBACK_BUFSIZE, GFP_KERNEL ) ; if (! serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; }",0
575,"<S2SV_ModStart> point, const CurveZZ_p curve ) { PointZZ_p R0, R1 ; mpz_inits ( R0. x, R0. y, R1. x, R1. y, NULL ) ; mpz_init_set ( R0. x, R0. y ) ; mpz_init_set ( R0. y, R1. y ) ; mpz_clears ( R0. x, R0. y, <S2SV_ModEnd> R1. x",0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,<S2SV_ModStart> = fd ; if ( msg. msg_controllen > sizeof ( control_buf ) ) return - EMSGSIZE,0
578,"<S2SV_ModStart> s ) { if ( s < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> s:%d, <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
579,"<S2SV_ModStart> xIter = crm_first_attr ( xml ) ; xIter!= NULL ; xIter = xIter -> next ) { const char * prop_name = ( const char * ) xIter -> name ; if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; }",0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> NULL ; return ( SvcInternal_t * ) <S2SV_ModEnd> svc_ctx -> internal,0
581,"<S2SV_ModStart> ) ; } if ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_index_exists ( params, hkey. num ) ) { zval tmp ; MAKE_STD_ZVAL ( tmp ) ; array_init ( tmp ) ; add_assoc_zval_ex ( tmp, ZEND_STRS ( ""value"" ), * ptr ) ; MAKE_STD_ZVAL ( tmp ) ; array_init ( tmp ) ; zend_hash_update ( params, hkey. num, hkey. len, ( void * ) & tmp, sizeof ( zval * ), ( void * ) & tmp, sizeof ( zval * ), ( void * ) & tmp ) ; * current_param = tmp ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. num, hkey. len, ( void * ) & tmp, sizeof ( zval * ), ( void * ) & ptr ) ) ; MAKE_STD_ZVAL ( tmp ) ; array_init ( tmp ) ; Z_ADDREF_PP ( tmp ) ;",0
582,<S2SV_ModStart> char buffer [ 79 <S2SV_ModEnd> ] ; int <S2SV_ModStart> = VPX_IMG_FMT_I420 ; if ( only_420 && _y4m -> vpx_fmt == VPX_IMG_FMT_I420 ) { _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; } else { _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; } <S2SV_ModStart> -> vpx_bps = ( _y4m -> vpx_fmt == VPX_IMG_FMT_I420 && _y4m -> vpx_fmt == VPX_IMG_FMT_I420 ) { _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; } else { <S2SV_ModStart> -> vpx_bps = ( _y4m -> vpx_fmt == VPX_IMG_FMT_I420 && _y4m -> vpx_fmt == VPX_IMG_FMT_I420 && _y4,0
583,"<S2SV_ModStart> obj * otmp ; if ( strlen ( buf ) >= sizeof ( struct obj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
584,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> 0 ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( parse_inode_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return",0
585,"<S2SV_ModStart> * rule ) { RB_INIT ( & env -> root ) ; <S2SV_ModStart> count = 0 ; if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; if ( RB_INSERT ( envtree, & env -> root, NULL ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } else { if ( RB_INSERT ( envtree, & env -> root, NULL ) ) { freenode ( node ) ; } else { env -> count ++ ; } } }",0
586,"<S2SV_ModStart> -> seg ; int segment ; memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; memset ( cpi -> complexity_map, 0, cm -> mi_cols ) ; vp9_enable_segmentation ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vp9_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; } } for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi ->",0
587,"<S2SV_ModStart> ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; <S2SV_ModStart> ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; stmt_type = make_type",0
588,"<S2SV_ModStart> ; } logfile_fd = open ( log_path, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IWGRP | S_IROTH ) ; if ( logfile_fd == INVALID_FD ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) ) ; is_logging = false ; return ; } write ( logfile_fd, ""btsnoop\\0\\0\\0\\1\\0\\0\\x3\\xea"", 16 ) ; }",0
589,<S2SV_ModStart> ) ; } ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ;,0
590,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, * <S2SV_ModStart>, * t, * StartClean <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> ; SetDefaults ( ) ; outpos = outputbuffer ; outpos += sprintf ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", s, t, TERMCHAR ) ; if ( * s == '0' && s [ 1 ] == '[' ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else { if ( * s == '0' && s [ 1 ] == ']' ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0",0
591,"<S2SV_ModStart> expr_ty step ; int res ; <S2SV_ModStart> int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_lower ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( exists_not_none ( obj, & PyId_upper ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_upper ) ; if ( tmp == NULL ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( exists_not_none ( obj, & PyId_step ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_step ) ; if ( tmp == NULL ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } if ( exists_not_none ( obj, & PyId_step ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_step ) ; if",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,"<S2SV_ModStart> int err ; list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; if ( iter -> handle == knode -> handle ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } mask = iter -> mask & 0xff ; val = iter -> val & 0xff ; if ( iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } } } if (! match ) { match = kzalloc ( sizeof ( * match ), GFP_KERNEL ) ; if (! match ) return - ENOMEM ; list_add ( & match -> list, & alink -> dscp_map ) ; } match -> handle = knode -> handle ; match -> band = knode -> res -> classid ; match -> val = val ; err = nfp_abm_u32_knode_delete ( alink, knode ) ;",0
594,"<S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } if ( global -> passes == 2 ) stream -> config. cfg. g_pass = pass? VPX_RC_LAST_PASS : VPX_RC_FIRST_PASS ; if ( pass ) stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; else stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } else { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; }",0
595,"<S2SV_ModStart> = g_strdup_printf ( ""%s.%s"", tmpfile_name, "".desktop"" ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s.%s"", tmpfile_name, "".desktop"" ) ; g_autoptr ( GString ) groups = NULL ; g_auto ( GStrv ) groups = NULL ; g_autoptr ( GString ) groups = NULL ; g_autoptr ( GString ) new_data = g_strdup_printf ( ""%s.%s"", tmpfile_name, "".desktop"" ) ; g_autoptr ( GString ) new_data = g_strdup_printf ( ""%s.%s"", tmpfile_name, "".desktop"" ) ; g_autoptr ( GString ) new_argv = NULL ; g_auto ( GStrv ) new_exec = NULL ; g_autoptr ( GString ) groups = NULL ; g_autoptr ( GString ) new_exec = g_strdup_printf ( ""%s.%s"", tmpfile_name, "".desktop"" ) ; g_autoptr ( GString ) new",0
596,"<S2SV_ModStart> data_end ) { <S2SV_ModEnd> const int aligned_cols <S2SV_ModStart> int tile_row, tile_col ; TileBuffer tile_buffers [ 4 ] [ 1 << 6 ] ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; TileBuffer tile_buffers [ 4 ] [ tile_rows ] ; int tile_row, tile_col ; uint8_t * end = NULL ; vpx_reader r ; memset ( cm -> above_context, 0, sizeof ( * cm -> above_context ) * MAX_MB_PLANE * 2 * aligned_cols ) ; memset ( cm -> above_seg_context, 0, sizeof ( * cm -> above_seg_context ) * aligned_cols ) ; for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) { const int last_tile = tile",0
597,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9Decoder <S2SV_ModEnd> * vp9_decoder_create ( <S2SV_ModStart> * oxcf ) { const VP9_COMMON * const cm = vpx_calloc ( 1, sizeof ( * cm ) ) ; if ( setjmp ( cm -> error. jmp ) ) { vp9_zero ( * cm -> error. jmp ) ; return NULL ; } cm -> error. setjmp = 1 ; vpx_initialize_dec ( ) ; vpx_rtcd ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; pbi -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_init ( & pbi -> lf_worker ) ; return pbi",0
598,"<S2SV_ModStart> -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
599,"<S2SV_ModStart> req ) { <S2SV_ModEnd> struct inet_request_sock * <S2SV_ModStart> -> opt ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( req_inet -> inet_opt, sock_owned_by_user ( req ) ) ; if ( inet_opt <S2SV_ModEnd> == NULL || <S2SV_ModStart> == NULL || inet_opt <S2SV_ModEnd> -> cipso ==",0
600,"<S2SV_ModStart> * tokens, vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> ; do { vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tree2tok ( tokens, tree, i, v, l ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
601,"<S2SV_ModStart> ; if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_UPD_LAST | VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF | VP8_EFLAG_FORCE_GF | VP8_EFLAG_FORCE_ARF ) ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi",0
602,"<S2SV_ModStart>, & len, 0",1
603,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> __m128i k__cospi_p01_p31 ; const __m128i k__cospi_p05_p27 = pair_set_epi16 ( cospi_27_64, - cospi_5_64 ) ; const __m128i k__cospi_p27_m05 = pair_set_epi16 ( cospi_27_64, - cospi_5_64 ) ; const __m128i k__cospi_p23_m09 = pair_set_epi16 ( cospi_23_64, - cospi_9_64 ) ; const __m128i k__cospi_p17_p15 = pair_set_epi16 ( cospi_17_64, - cospi_15_64 ) ; const __m128i k__cospi_p17_m17 = pair_set_epi16 ( cospi_17_64, - cospi_17_64 ) ; const __m128i k__cospi_p15_m17 = pair_set_",0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> OCXF * oxcf ) { int64_t max_bits ; max_bits = ( rc -> avg_frame_bandwidth * oxcf -> two_pass_vbrmax_section ) / 100 ; if ( max_bits < 0 || max_bits > rc -> max_frame_bandwidth ) max_bits = rc -> max_frame_bandwidth ; else max_bits = ( ( int64_t ) rc -> av_per_frame_bandwidth * oxcf -> two_pass_vbrmax_section ) / 100 ; if ( max_bits > rc -> max_frame_bandwidth ) max_bits = rc -> max_frame_bandwidth ;,0
605,"<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN <S2SV_ModStart> MIF_MAGICLEN ] ; char buf [ 4096 ] ; if ( jas_stream_read ( in, buf, sizeof ( buf ) )!= MIF_MAGICLEN ) { goto error ; } JAS_DBGLOG ( 10, ( ""header <S2SV_blank> line: <S2SV_blank> len=%d; <S2SV_blank> %s\\n"", strlen ( buf ), buf ) ) ; if ( jas_taginfo_nonull ( mif_tags2, jas_tvparser_gettag ( tvp ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> record <S2SV_blank> type\\n"" ) ; goto error ; } id = jas_taginfo_nonull ( mif_tags2, jas_tvparser_gettag ( tvp ) ) ) -> id ; if ( jas_taginfo_nonull ( mif_tags2, jas_tvparser_gettag ( tvp ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> record <S2SV_blank> type\\n"" ) ; goto error ; }",0
606,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> int mi_row, ThreadData * td_data <S2SV_ModEnd>, BLOCK_SIZE bsize <S2SV_ModStart> BLOCK_SIZE bsize ) { ThreadData * const td = & td_data -> td_mb ; <S2SV_ModStart> x = & td_data <S2SV_ModEnd> -> mb ; <S2SV_ModStart> = get_block_context ( td_data <S2SV_ModEnd>, bsize ) <S2SV_ModStart> = get_block_context ( td_data <S2SV_ModEnd>, bsize ) <S2SV_ModStart> = get_block_context ( td_data <S2SV_ModEnd>, bsize ) <S2SV_ModStart> -> skip_recode =! td_data -> select_txfm_size && td_data -> aq_mode!= COMPLEXITY_AQ && td_data -> aq_mode!= CYCLIC_REFRESH_AQ && cpi -> sf. allow_skip_recode ; x -> skip_optimize = ctx -> is_coded ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fdct ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fdct ; x -> use_lp32x32fdct = cpi -> sf",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart>,0
608,"<S2SV_ModStart> uint32_t value ; int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) position = get_bits_count ( gbc ) ; zeroes = i = 0 ; while ( 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR",0
609,"<S2SV_ModStart> { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) ||",0
610,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> http_contentlen. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> http_method. ptr = NULL, packet -> http_method. len = 0, packet -> http_response. ptr = NULL, packet -> http_response. len = 0, packet ->",0
611,"<S2SV_ModStart> += 4 ) { if ( ( x + 4 ) > ( ssize_t ) dds_info -> width || ( y + 4 ) > ( ssize_t ) dds_info -> height || ( y + 4 ) > ( ssize_t ) dds_info -> height ) || ( x + 4 ) > ( ssize_t ) dds_info -> width || ( y + 4 ) > ( ssize_t ) dds_info -> height ) || ( x + 4 ) > ( ssize_t ) dds_info -> width || ( y + 4 ) > ( ssize_t ) dds_info -> height ) ) return MagickFalse ; q = ( PixelPacket * ) NULL ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBShort ( image ) ; bits = ReadBlobLSBLong ( image ) ; CalculateColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { if ( ( j + i ) < ( ssize_t )",0
612,"<S2SV_ModStart> length ) { int ret ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> EINTR ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY )",0
613,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",1
615,"<S2SV_ModStart>, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; if ( Stream_GetRemainingLength ( s ) < 4 ) { return FALSE ; }",0
616,<S2SV_ModStart> ; # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) { if ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) { if ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) { if ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) { if ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) { if ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) { if ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) { if ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) { if ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOIS,0
617,"<S2SV_ModStart> -> b_multithreaded_rd ) vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
618,<S2SV_ModStart> { if ( <S2SV_ModEnd> ( xWantedSize > <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } } } else { xWantedSize += xHeapStructSize ; if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { struct stream packet = * s ; <S2SV_ModStart> int i ; for ( i = 0 ; i < num_updates ; i ++ ) { <S2SV_ModStart>, left ) ; in_uint16_le ( s, top ) ; in_uint16_le ( s, right ) ; in_uint16_le ( s, bottom ) ; in_uint16_le ( s, width ) ; in_uint16_le ( s, height ) ; in_uint16_le ( s, bpp ) ; Bpp = ( bpp + 7 ) / 8 ; if (! compress ) { int y ; bmpdata = ( uint8 * ) xmalloc ( width * height * Bpp ) ; for ( y = 0 ; y < height ; y ++ ) { ui_paint_bitmap ( left, top, cx, cy, width, height, bmpdata [ ( height - y - 1 ) * ( width * Bpp ) ], width * Bpp ) ; } ui_paint_bitmap ( left, top, cx, cy, width, height, bmpdata ) ; } for ( i = 0 ; i < num_updates ; i ++ ) { if",0
621,"<S2SV_ModStart> } else { if (! smatch ( option, ""filename"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Missing <S2SV_blank> filename"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( option, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""backup"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Backup <S2SV_blank> is <S2SV_blank> too <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Backup <S2SV_blank> is <S2SV_blank> too <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; }",0
622,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model * coef_probs = cpi -> frame_coef_probs [ tx_size ] ; vpx_coeff_count * coef_counts = cpi -> coef_counts [ tx_size ] ; unsigned int ( * eob_branch_ct ) [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ] ; vp9_tree_probs_from_distribution ( vp9_coef_tree, coef_probs, coef_counts ) ; for ( i = 0 ; i < PLANE_TYPES ; ++ i ) { for ( j = 0 ; j < REF_TYPES ; ++ j ) { vp9_tree_probs_from_distribution ( vp9_coef_tree, coef_branch_ct [ i ] [ j ] [ k ] [ l ], eob_branch_ct [ i ] [ j ] [ k ] [ l ] - coef_branch_ct [ i ] [ j ] [",0
623,<S2SV_ModStart> } ; assert ( fd >= 0 ) ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY (,0
624,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> 0 } ; int ret = 0 ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0",0
625,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface ->",0
626,"<S2SV_ModStart> int stride, <S2SV_ModEnd> int uv_block_size, <S2SV_ModStart> const kernel = vp9_filter_kernels [ which_mv ] <S2SV_ModEnd> ; enum mv_precision <S2SV_ModStart> mv_precision_uv ; int uv_stride ; if ( uv_block_size == 8 ) { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q4 ; } else { uv_stride = stride ; } vp9_build_inter_predictor ( y_mb_ptr, uv_stride, & pred [ 0 ], 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vp9_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vp9_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size, & mv, scale, uv_block_size, uv",0
627,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) < 4 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( buf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ;",0
628,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> ; for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = cJSON_CreateFloat ( numbers [ i ] ) ; if (! i ) a -> child = n ; else suffix_object ( p, n ) ; } return a ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
629,"<S2SV_ModStart> data_end ) { <S2SV_ModEnd> const int aligned_mi_cols <S2SV_ModStart> int num_workers = MIN ( pbi -> oxcf. max_threads, cm -> mi_cols ) ; const int tile_cols = MIN ( pbi -> oxcf. max_tiles - 1, tile_cols ) ; const int tile_rows = MIN ( pbi -> oxcf. max_tiles - 1, tile_rows ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int final_worker = - 1 ; if ( tile_cols <= ( 1 << 6 ) ) ) { int i ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_threads * sizeof ( * pbi -> tile_workers ) ) ) ; for ( i = 0 ; i < num_threads ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; ++ pbi -> num_tile_workers ; vp9_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM",0
630,<S2SV_ModStart> + 8 ; if ( fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' ) { fputc ( ifp ) ; return ; } <S2SV_ModStart> ( ) ; if ( fgetc ( ifp ) < 'S' ) { fputc ( ifp ) ; return ; } <S2SV_ModStart> ( ) ; if ( fgetc ( ifp ) < 'S' || fgetc ( ifp ) < 'S' ) { fputc ( ifp ) ; return ; } <S2SV_ModStart> ( ) ; if ( fgetc ( ifp ) < 'S' ) { fputc ( ifp ) ; return ; } <S2SV_ModStart> ( ) ; if ( fgetc ( ifp ) < 'S' ) { fputc ( ifp ) ; return ; } <S2SV_ModStart> ( ) ; if ( fgetc ( ifp ) < 'S' || fgetc ( ifp ) < 'S' ) { fputc ( ifp ) ; return ; },0
631,"<S2SV_ModStart> -> common ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; RDMULT_RATIO ( cm -> y_dc_delta_q ) ; <S2SV_ModStart> segment_rdmult ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vp9_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vp9_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q )",0
632,<S2SV_ModStart> error_code ) { if ( error -> has_detail ) ctx -> base. err_detail = error -> detail ; else ctx -> base. err_detail = NULL ; },0
633,<S2SV_ModStart> * ps_cur_slice ; pocstruct_t * ps_prev_poc = ps_dec -> ps_prev_poc ; dec_pps_t * ps_pps = ps_dec -> ps_pps ; dec_seq_params_t * ps_sps = ps_dec -> ps_sps ; dec_dpb_mgr_t * ps_dpb_mgr = ps_dec -> ps_dpb_mgr ; ps_dec -> ps_sei = NULL ; ps_dec -> u4_num_cores = 0 ; ps_dec -> u2_pic_ht = 0 ; ps_dec -> u2_pic_wd = 0 ; ps_dec -> u2_pic_wd = 0 ; ps_dec -> u4_dec_skip_pics = 0 ; ps_dec -> u4_num_fld_in_frm = 0 ; ps_dec -> s_cab_dec_env. pv_codec_handle = ps_dec ; ps_dec -> s_cab_dec_env. pv_codec_handle = ps_dec ; ps_dec -> s_cab_,0
634,"<S2SV_ModStart> ssize_t ret ; if ( btpan_cb. congest_packet_size > UINT32_MAX - sizeof ( btpan_cb. congest_packet ) ) { BTIF_TRACE_WARNING ( ""%s <S2SV_blank> packet <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", __func__, UINT32_MAX - sizeof ( btpan_cb. congest_packet ) ) ; break ; } ret = read ( fd, btpan_cb. congest_packet, sizeof ( btpan_cb. congest_packet ) ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; GKI_freebuf ( buffer ) ; btsock_thread_add_fd ( pan_pth, fd, 0, SOCK_THREAD_FD_RD, 0 ) ; return ; }",0
635,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> getnum ( const <S2SV_ModStart>, int df ) { if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; return a ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
636,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> reallyold ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ;",0
637,"<S2SV_ModStart> = 0 ; else { ret = - EINVAL ; goto err ; } <S2SV_ModEnd> deb_info ( ""Identify <S2SV_blank> state <S2SV_blank> cold <S2SV_blank> = <S2SV_blank> %d\\n""",0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModStart> buffer ) ; if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok ) ; return NULL ; } s_write ( c, c -> local_rfd. fd, buffer, sizeof buffer ) ; if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; }",0
639,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> -> variant_opaque ; <S2SV_ModEnd> int rc = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct mainloop_fd_callbacks cib_fd_callbacks <S2SV_ModStart> cib_fd_callbacks = { <S2SV_ModEnd>. dispatch = <S2SV_ModStart>. destroy = cib_remote_connection_destroy, } ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_err ( ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; }",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ; cpi -> gf_bitrate_adjustment = 0 ; cpi -> frames_till_gf_update_due = 0 ; cpi -> non_gf_bitrate_adjustment = 0 ; cpi -> prob_last_coded = 128 ; cpi -> prob_gf_coded = 63 ; cpi -> prob_intra_coded = 63 ; cpi -> recent_ref_frame_usage [ ALTREF_FRAME ] = 1 ; cpi -> recent_ref_frame_usage [ ALTREF_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ ALTREF_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ ALTREF_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ ALTREF_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ ALTREF_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ ALTREF_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ ALTREF_FRAME",0
641,"<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( & bp [ 26 ] ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( ndo -> ndo_vflag ) { ND_TCHECK ( bp [ 26 ] ) ; if ( bp [ 26 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 26 ] & 0x08 ) ) ; } if ( bp [ 26 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 26 ] & 0x07 ) ) ; } if ( ndo -> ndo_vflag ) { ND_TCHECK ( bp [ 26 ] ) ; if ( bp [ 26 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 26 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 26 ] & 0x07 )",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } if ( copy_from_user ( & karg, uarg, sizeof ( struct mpt_ioctl_command ) ) ) { printk ( KERN_ERR MYNAM ""%s@%d::mptctl_mpt_command <S2SV_blank> - <S2SV_blank> "" ""Unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> in <S2SV_blank> mpt_ioctl_command <S2SV_blank> struct <S2SV_blank> @ <S2SV_blank> %p\\n"", __FILE__, __LINE__, uarg ) ; return - EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,<S2SV_ModStart> Image <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
644,"<S2SV_ModStart> = 0 ; if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> for <S2SV_blank> this <S2SV_blank> codec\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> for <S2SV_blank> this <S2SV_blank> codec\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> for <S2SV_blank> this <S2SV_blank> codec\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> for <S2SV_blank> this <S2SV_blank> codec\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> for <S2SV_blank> this <S2SV_blank> codec\\n"" ) ; return - 1 ; }",0
645,"<S2SV_ModStart>, NULL, WEECHAT_STRING_STRIP_LEFT | WEECHAT_STRING_STRIP_RIGHT <S2SV_ModEnd>, WEECHAT_STRING_COLLAPSE_SEPS, <S2SV_ModStart>, NULL, WEECHAT_STRING_STRIP_LEFT | WEECHAT_STRING_STRIP_RIGHT <S2SV_ModEnd>, WEECHAT_STRING_COLLAPSE_SEPS, <S2SV_ModStart>, NULL, WEECHAT_STRING_COLLAPSE_SEPS, WEECHAT_STRING_STRIP_LEFT | WEECHAT_STRING_STRIP_RIGHT <S2SV_ModEnd>, WEECHAT_STRING_COLLAPSE_SEPS, <S2SV_ModStart>, WEECHAT_STRING_STRIP_LEFT | WEECHAT_STRING_STRIP_RIGHT <S2SV_ModEnd>, WEECHAT_STRING_COLLAPSE_SEPS,",0
646,"<S2SV_ModStart> decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> 1 ) ; vpx_read_bit <S2SV_ModEnd> ( r )",0
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ; REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> ] ) ; ++ cm -> counts -> <S2SV_ModEnd> comp_inter [ ctx",0
649,"<S2SV_ModStart> ) ) ; if (! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; <S2SV_ModStart> ; res = vpx_codec_enc_config_default ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; stream -> ebml. debug = global -> debug ; stream -> ebml. debug = global -> debug ; if ( global -> deadline == VPX_DL_REALTIME ) stream -> config. cfg. g_lag_in_frames = 0 ; stream -> ebml. debug = global -> debug ; if ( global -> deadline == VPX_DL_REALTIME ) stream -> config. cfg. g_lag_in_frames =",0
650,"<S2SV_ModStart> nd_opt_mtu ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opp -> nd_opt_type ), opp -> nd_opt_type ) ) ; break ; case ND_OPT_ADVERTISE_INTERVAL : l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp + 2, l ) ; break ; case ND_OPT_ADVERTISE_INTERVAL : l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp + 2, l ) ; break ; case ND_OPT_ADVERTISE_INTERVAL : l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp + 2, l ) ; break ; case ND_OPT_ADVERTISE_INTERVAL : l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp + 2, l",0
651,<S2SV_ModStart> = 0 ; if ( ( * re_ast ) -> root_node == NULL ) { yr_error ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( ) ) ) ) ) ) ) ) ) ) ) ) { yr_error ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( ) ) ) ) ) ) ) ) ) ) ) ) ; },0
652,"<S2SV_ModStart> ) ) ; if ( iter -> var_expand_table ) { <S2SV_ModStart> ; auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } <S2SV_ModStart> 0 ) { <S2SV_ModEnd> auth_request_log_error ( iter <S2SV_ModStart> iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( key -> key -> default_value!= NULL ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %",0
653,<S2SV_ModStart> = 0 ; # ifndef PGEN tok -> filename = NULL ; tok -> decoding_readline = NULL ; tok -> decoding_buffer = NULL ; # endif <S2SV_ModStart> = 0 ; # ifdef HAVE_ALTWARNING tok -> alttabsize = 1 ; tok -> alttabsize = 1 ; tok -> alttindstack [ 0 ] = 0 ; tok -> altindstack [ 0 ] = 0 ; tok -> altwarning = 1 ; tok -> alterror = 1 ; tok -> alttabsize = 1 ; tok -> alttabsize = 1 ; tok -> alttabsize = 1 ; tok -> alttabsize = 1 ; tok -> alttabsize = 1 ; tok -> alttabsize = 1 ; tok -> alttindstack [ 0 ] = 0 ; tok -> decoding_state = STATE_INIT ; tok -> decoding_erred = 0 ; tok -> read_coding_spec = 0 ; tok -> encoding = NULL ; tok -> cont_line = 0 ; # endif,0
654,"<S2SV_ModStart> ; } if ( av1 -> av1_config && av1 -> av1_config -> config ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> dataLength, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> dataLength ) ; av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_del ( av1_cfg ) ; av1_cfg = av1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> dataLength, & av1 ->",0
655,"<S2SV_ModStart> maxFrameNum ) ; if ( dpbSize > 0 ) { dpb -> maxLongTermFrameIdx = NO_LONG_TERM_FRAME_INDICES ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; dpb -> dpbSize = dpbSize ; } else { dpb -> maxLongTermFrameIdx = MAX ( maxRefFrames, 1 ) ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; } if ( dpb -> buffer == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; H264SwDecMemset ( dpb -> buffer, 0, ( MAX_NUM_REF_PICS + 1 ) * sizeof ( dpbPicture_t ) ) ; for ( i = 0 ; i < dpb -> dpbSize + 1 ; i ++ ) { if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; H264SwDecMemset ( dpb -> buffer [ i ]. pAllocatedData, ( picSizeInMbs * 384 + 32 + 15 ), u8 ) ; if ( dpb -> buffer [ i ].",0
656,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addr && addr -> sa_family!= AF_HOST ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ; if ( addrlen && addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_in = addrlen_out ; if ( addrlen_in > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart>, addrlen_in, & addrlen_out ) ; if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
657,,1
658,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) < 8 ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> %"" PRIu8 """", length ) ; return FALSE ; }",0
659,"<S2SV_ModStart> ipv6_pinfo * np = rcu_dereference_protected ( sk -> sk_prot, sock_owned_by_user ( sk ) ) ; struct ipv6_txoptions * opt <S2SV_ModStart> ) ) { opt = rcu_dereference_protected ( np -> ipv6_txopt, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference_protected ( np -> ipv6_txopt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> ipv6_txopt, sock_owned_by_user ( sk ) ) ; } else { opt = rcu_dereference_protected ( np -> ipv6_txopt, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference_protected ( np -> ipv6_txopt, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference_protected ( np -> ipv6_txopt, sock_owned_by_user ( sk ) ) ; } }",0
660,"<S2SV_ModStart> ; unsigned int <S2SV_ModEnd> found, upx_success <S2SV_ModStart>, found, upx_success <S2SV_ModEnd> ; unsigned int <S2SV_ModStart>, found, upx_success <S2SV_ModEnd> ; unsigned int <S2SV_ModStart>, found, upx_success <S2SV_ModEnd> ; unsigned int <S2SV_ModStart>, found, upx_success <S2SV_ModEnd> )!= CL_CLEAN <S2SV_ModStart>, found, upx_success <S2SV_ModEnd> )!= CL_CLEAN <S2SV_ModStart>, found, upx_success <S2SV_ModEnd> )!= CL_CLEAN <S2SV_ModStart>, found, upx_success <S2SV_ModEnd> )!= CL_CLEAN <S2SV_ModStart>, upx_success, downxfn, downxfn, downxfn, downxfn, downxfn, downxfn, downxfn, downxfn, downxfn, downxfn, downxfn, downxfn, downxfn, downxfn, downxfn, downack <S2SV_ModEnd> )!= CL_CLEAN <S2SV_ModStart>, downxfn, downxfn, downack <S2SV_ModEnd> )!= CL_CLEAN <S2SV_ModStart>, downxfn, downack <S2SV_ModEnd> )!= CL_CLEAN <S2SV_ModStart>, downxfn, downxfn, downxfn, downxfn, downxfn, downxfn, downxfn, downxfn, downxfn",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR ) & DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> 5 ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000ReadReg ( DM9000_EPDRH ) ; dm9000ReadReg ( DM9000_EPDRL ) ; }",0
662,"<S2SV_ModStart> pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, F_CIB_CLIENTNAME, name ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( hello, private -> command. encrypted ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, F_CIB_CLIENTNAME, name ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, F_CIB_CLIENTNAME, name ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, F_CIB_CLIENTNAME, name ) ; crm_xml_add ( hello, F_CIB_CLIENT",0
663,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ; <S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
664,"<S2SV_ModStart> >> 3 } ; int <S2SV_ModEnd> sr = 0 <S2SV_ModStart> int new_mv_mode_penalty = MIN ( cpi -> common. width, cpi -> common. height ) ; const int quart_frm = MIN ( cpi -> common. height, cpi -> common. width ) ; while ( ( quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; tmp_err = cpi -> diamond_search_sad ( x, & ref_mv_full, & tmp_mv, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> nmvjointcost, x -> mvcost, ref_mv ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = INT_MAX ; best_mv -> row = tmp_mv. row ; best",0
665,"<S2SV_ModStart> ntreg_header ) ; if ( h -> size == 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } <S2SV_ModStart> ntreg_header ) ; if ( h -> size == 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" ) ; goto error ; } <S2SV_ModStart> ntreg_header ) ; if ( h -> size == 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" ) ; goto error ; } <S2SV_ModStart> ntreg_header ) ; if ( h -> size == 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" ) ; goto error ; }",0
666,<S2SV_ModStart> -> reqbody_no_files_limit ; merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_buffering = ( child -> reqbody_buffering == NOT_SET? parent -> reqbody_buffering : child -> reqbody_buffering ) ; merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit == NOT_SET? parent -> reqbody_no_files_limit : child -> reqbody_no_files_limit ) ; merged -> resbody_access = ( child -> resbody_access == NOT_SET? parent -> resbody_access : child -> resbody_access ) ; merged -> if_limit_action = ( child -> if_limit_action == NOT_,0
667,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t pixel_info_length <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
668,"<S2SV_ModStart> 0 || ( r = sshbuf_put_u32 ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> type ) )!= 0",0
669,"<S2SV_ModStart> ) ) { if ( smatch ( option, ""name"" ) ) { ovalue = strim ( option, ""\\""\'"", MPR_TRIM_BOTH ) ; } else if ( smatch ( option, ""level"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ( int ) getnum ( ovalue ) ) ) ; } else { httpSetTraceEventLevel ( route -> trace, option, atoi ( ( int ) getnum ( ovalue ) ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ( int ) getnum ( ovalue ) ) ) ; } } else if ( smatch ( option, ""level"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ( int ) getnum ( ovalue ) ) ) ; } else { httpSetTraceEventLevel ( route -> trace, option, atoi ( ( int ) getnum ( ovalue ) ) ) ; } else { httpSetTraceEventLevel ( route -> trace, option, atoi ( ( int ) getnum ( ovalue ) ) ) ; }",0
670,"<S2SV_ModStart> user_data ) { <S2SV_ModEnd> crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"" <S2SV_ModStart> num_clients ) ; <S2SV_ModEnd> client -> id <S2SV_ModStart> user ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
671,"<S2SV_ModStart> * uv ; thread -> twups = NULL ; for ( uv = thread -> openupval ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; markvalue ( g, uv -> v ) ; } } } else { thread -> twups = thread ; for ( uv = thread -> openupval ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; markvalue ( g, uv -> v ) ; } for ( uv = uv -> u. open. next ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; } } if ( thread -> twups!= NULL ) { lua_assert (! iswhite ( thread ) ) ; thread -> twups = NULL ; for ( uv = uv -> u. open. next ; uv!= NULL ; uv = uv -> u. open. next ; uv = uv -> u. open. next ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; }",0
