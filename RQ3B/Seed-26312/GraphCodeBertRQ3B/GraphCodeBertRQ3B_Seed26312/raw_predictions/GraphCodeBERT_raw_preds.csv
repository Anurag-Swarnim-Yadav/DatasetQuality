,raw_predictions,correctly_predicted
0,<S2SV_ModStart> wtm_conn ) ; if (! wmi ) return - ENOMEM ;,0
1,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
2,,0
3,<S2SV_ModStart> c ) { <S2SV_ModEnd> const char *,0
4,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, regs",0
5,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
6,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> * input = <S2SV_ModStart> 0 ] ; tran_low_t ( tran_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) tran_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_t ) <S2SV_ModStart> 0 [ 1 ] = ( tran_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_t ) ; tran_t",0
7,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
8,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> intra_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> log2SV_null> <S2SV_null> static <S2SV_ModStart> intra_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null>,0
9,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
10,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_writer <S2SV_ModEnd> ( vpx_writer <S2SV_ModStart> { vpx_writer <S2SV_ModEnd> ( w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> ( w,",0
11,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_1024 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_256 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_256 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_SIZE_1024 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_256 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_256 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_256 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_1024 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_SIZE_SIZE_1024 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE ( ) ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_SIZE_SIZE_SIZE_1024 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_SIZE_BLOCK_SIZE_SIZE_SIZE ( ) ; } <S2SV_ModStart> = COAP_BLOCK,0
12,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ) { ND_PRINT ( ( ( ndo, 2 ) ) ; if ( length < 2 ) { ND_PRINT ( ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> too <S2SV_blank> short"" ) ) ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ;",0
13,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
14,<S2SV_ModStart> = 0 ;,0
15,,0
16,,0
17,,0
18,"<S2SV_ModStart> ; if ( inode_gid <S2SV_ModEnd> ( inode,",0
19,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> S2S2SV_null> <S2SV_null> static <S2SV_ModStart> intra_inter_inter_inter_inter_inter ( twopass, FIRSTPASS_STATS * twopass, <S2SV_ModStart> double * twopass, const FIRSTPASS_STATS * twopass, const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * twopass, <S2SV_ModStart> 0 ) { const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * twopass = 0 ; const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * next_frame = 0 ; <S2SV_ModStart> prev_frame_frame_stats ( twopass, twopass, twopass ) ; if ( next_frame == FIRSTPASS_STATS * next_frame_frame ) { const FIRSTPASS_STATS * twopass = 1 ; } else { if ( next_frame == FIRSTPASS_STATS * next_frame == FIRSTPASS_STATS * twopass",0
21,<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY (,0
22,"<S2SV_ModStart> name ) ; strncpy <S2SV_ModEnd> ( name,",0
23,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> goto out,0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
26,,0
27,<S2SV_ModStart> ; if ( io_cleanup <S2SV_ModEnd> ( io ->,0
28,,0
29,,0
30,,0
31,,0
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
33,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
34,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, ENC28J60_START <S2SV_ModEnd> ( interface, ENC28J60_START <S2SV_ModEnd> ) ; enc28J60_START <S2SV_ModStart> ( interface, ENC28J60_START <S2SV_ModEnd>, ENC28J60_START ) <S2SV_ModStart> ( interface, ENC28J60_START, ENC28J60_START <S2SV_ModEnd> ) ; ENC28J60_START <S2SV_ModStart> ( interface, ENC28J60_START <S2SV_ModEnd> ) ; }",0
35,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,0
36,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
37,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mb_stride_stride_stride <S2SV_ModEnd> ( vpx_stride, <S2SV_ModStart> int mb_stride ) <S2SV_ModEnd> ( vpx_stride, <S2SV_ModStart> -> mb_stride ) ; memset <S2SV_ModEnd> ( ( <S2SV_ModStart>, 0, <S2SV_ModEnd>, 0, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( <S2SV_ModStart>, 0, 0, 0, <S2SV_ModEnd> ) ; }",0
38,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct <S2SV_ModStart> int error ; struct mb2_cache_cache_entry * bh ; struct mb2_cache * bh = mb2_cache_cache_cache ( bh ) ; <S2SV_ModStart> int mb2_cache_cache_entry_cache ( bh, bh -> mb2_cache, bh ) ; <S2SV_ModStart> ( bh ) ; <S2SV_ModEnd> ( bh, <S2SV_ModStart> ( bh -> b_cache, <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( bh <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( bh <S2SV_ModStart> ( bh, <S2SV_ModEnd> ) ; }",0
39,,0
40,<S2SV_ModStart> { struct ip_options_rcu <S2SV_ModEnd> * opt =,0
41,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
42,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode",0
44,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
45,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
46,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ipv_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> ipv_null> <S2SV_null>,0
47,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
48,,0
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( addr,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_table_table_table_table_table_table ( int,0
51,,0
52,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
53,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> if (!,0
54,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
55,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> log2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; if ( twopass -> twopass -> twopass. twopass. twopass. twopass. twopass. gf_buffer ) { <S2SV_ModStart> = 0 ; } <S2SV_ModEnd> = 0 ; <S2SV_ModStart> -> twopass -> twopass. gf_bit_buffer ; if ( twopass -> twopass. twopass. gf_bits ) { <S2SV_ModStart> = 0 ; } <S2SV_ModEnd> = 0 ;,0
56,"<S2SV_ModStart> -> rows = MagickMax ( number_planes_filled, number_planes_filled, number_planes_filled ) <S2SV_ModEnd> ; number_filled =",0
57,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
58,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd>, state,",0
59,<S2SV_ModStart> dirname = NULL <S2SV_ModEnd> ; if (,0
60,,0
61,,0
62,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> const PREDICTION_MODE <S2SV_ModStart> src_stride ) { const PREDICTION_MODE <S2SV_ModEnd> const PREDICTION_MODE <S2SV_ModEnd> ( src, <S2SV_ModStart> src -> uv_stride, src -> uv_stride <S2SV_ModEnd> src_stride, <S2SV_ModStart> src -> uv_stride, src_stride, src_stride <S2SV_ModEnd> ) ; const <S2SV_ModStart> src -> uv_stride <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,"<S2SV_ModStart> -> inode, fmode_t fmode <S2SV_ModEnd> ) ; int",0
65,,0
66,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> NULL ) { Py_decode_string ( NULL, NULL, NULL, NULL, NULL, NULL, NULL ) <S2SV_ModStart> ; if ( fmode == NULL ) { Py_RETURN_NOMEMORY <S2SV_ModEnd> ; if ( <S2SV_ModStart> goto out ; } <S2SV_ModEnd> if (! <S2SV_ModStart> goto out ; if ( len == NULL ) { if ( len == NULL ) { Py_CLEAR ( fmode == NULL ) ; return NULL ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( len",0
67,,0
68,,0
69,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ) { ND_PRINT ( ( 2 ) ) ; ND_PRINT ( ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) { ND_PRINT ( ( ndo, EXTRACT_16BITS ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ptr ++ ; length -= 2 ; length -= 2 ; length -= 2 ; length <S2SV_ModEnd> ; length <S2SV_ModStart> ) ) { ND_PRINT ( ( ndo, EXTRACT_16BITS ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ndo, EXTRACT_16BITS ( ndo, EXTRACT_16BITS_16BITS ( ptr ) ) ) ; ptr ) ; ptr = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ptr = EXTRACT_16BITS (",0
70,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
71,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
72,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0 ;,0
73,<S2SV_ModStart> ; memcpy <S2SV_ModEnd> ( cpi ->,0
74,,0
75,,0
76,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> n_async_async_async ) { <S2SV_ModStart> if ( CHILD ( CHILD ( CHILD ( CHILD <S2SV_ModEnd> ) ) <S2SV_ModStart> == 0 ) { <S2SV_ModStart> } if ( CHILD ( CHILD ( n, CHILD ( CHILD ( CHILD ( n, 0 ) ) == 0 ) { n = CHILD ( CHILD ( n, 0 ), sizeof ( CHILD ( CHILD ( n ) ), CHILD ( CHILD ( CHILD ( n ) ) ) ) ; if ( CHILD ( CHILD ( CHILD ( n, CHILD ( n, 0 ) ) == 0 ) { n = CHILD ( n, 0 ) ; } else { n = CHILD ( n, 0 ) ; } if ( CHILD ( CHILD ( CHILD ( CHILD ( n, 0 ) ) ) == 0 ) { n = CHILD ( n, 0 ) ; } else { n = CHILD ( CHILD ( CHILD ( CHILD ( n, 0 ), 0 ) ; if ( CHILD ( CHILD ( CHILD ( n, 0 ) == 0 ) ) ) ) )",0
77,,0
78,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const VP9_COMMON * const VP9_COMMON * const MACROBLOCKD * const MACROBLOCKD * xd = xd -> mbmi ; MACROBLOCKD * const MACROBLOCKD * const xd = xd -> mbmi ; const xd -> mbmi = xd -> mbmi. mb_mode ; const int xd = xd -> mbmi_ext = xd -> mbmi. mbmi ; const int xd -> mbmi_ext = xd -> mbmi. mbmi ; const int segment_mode = xd -> mbmi_ext = xd -> mbmi_ext ; const int xd -> mbmi_ext = MIN ( xd -> mbmi, xd -> mbmi, xd -> mb_MODE_MODE_mode, xd -> mb_mode ) ; const int xd -> mbmi_ext = MIN ( cm -> mbmi, xd -> mbmi, xd",0
79,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
80,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
81,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
82,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
83,<S2SV_ModStart> ) ) { TEMP_FAILURE_RETRY (,0
84,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
85,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
89,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ;,0
90,<S2SV_ModStart> { if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( image ->,0
91,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, NULL )",0
92,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
93,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_wb_wb_wb_write_bit ( wb ) vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; vpx_wb_wb_write_bit <S2SV_ModEnd> ( wb,",0
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> m -> msg_namelen = 0,0
97,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
98,,0
99,<S2SV_ModStart>. cfg ; # if CONFIG_VP9_HIGHBITDEPTH if ( cfg -> cfg. g_pass == VPX_HIGHBITDEPTH if ( cfg -> g_mode == VPX_HIGHBITDEPTH ) || ( cfg -> g_pass == VPX_HIGHBITDEPTH ) || ( cfg -> g_mode == VPX_HIGHBITDEPTH ) || ( ctx -> g_mode == VPX_HIGHBITDEPTH ) || ( ctx -> g_mode == ( ctx -> g_mode == 0 ) || ( ctx -> g_mode == 0 ) cfg -> g_pass == 0 || ( cfg -> g_pass == VPX_HIGHBITDEPTH ) || ( ctx -> g_mode == 0 ) || ( ctx -> g_mode == 0 ) || ( ctx -> g_mode == 0 ) || ( cfg -> g_pass!= ctx -> g_pass!= ctx -> g_pass || ( ctx -> oxcf. g_mode!= ctx -> g_pass ) || ( ctx -> g_mode!= ctx -> g_pass,0
100,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
101,<S2SV_ModStart> ) return - EINVAL <S2SV_ModEnd> ; if (,0
102,,0
103,,0
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> * state = fmode_t fmode <S2SV_ModEnd> ( state,",0
105,,0
106,,0
107,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
108,<S2SV_ModStart> 0 ) { if ( c -> height > 8 ) return AVERROR_INVALIDDATA ;,0
109,<S2SV_ModStart> length ) ; if ( length < 1 ) return ;,0
110,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
111,<S2SV_ModStart> state ) ; <S2SV_ModEnd> return ret ;,0
112,<S2SV_ModStart>,0
113,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
114,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
115,<S2SV_ModStart>,0
116,<S2SV_ModStart> goto err ; <S2SV_ModEnd> msg -> msg_namelen,0
117,,0
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
119,<S2SV_ModStart> 0x00 ) { <S2SV_ModEnd> return 0 ;,0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,"<S2SV_ModStart> ndo ) ; ND_TCHECK_32BITS ( ndo, 0 ) ;",0
122,<S2SV_ModStart> } else { if (!,0
123,,0
124,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
125,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
126,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
127,"<S2SV_ModStart>, buf_size, 0",0
128,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> static <S2SV_ModStart> 8x8_8_8 ( tran_t * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_t, tran_low_t <S2SV_ModEnd> x8_t <S2SV_ModStart> 0 ] ; tran_t ( tran_t ) <S2SV_ModStart> 8 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_t ) <S2SV_ModStart> 0 ] = ( tran_t ) <S2SV_ModStart> 8 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_t ) <S2SV_ModStart> x8 ] = ( tran_t ) <S2SV_ModStart> x8 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_t ) <S2SV_ModStart> 8 ] = ( tran_low_t ) <S2SV_ModStart> 8 ] = ( tran_t ) tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_t ) <S2SV_ModStart> 0 ] = ( tran_t",0
129,,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
131,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> log2SV_null> <S2SV_null> <S2SV_null>,0
132,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
133,<S2SV_ModStart> -> m_blocksize = 0 <S2SV_ModEnd> ; if (,0
134,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> struct oe_sockaddr_sockaddr_t * p ; size_t <S2SV_ModEnd> ; struct oe_sockaddr_sockaddr_t <S2SV_ModStart> -> oe_sockaddr ; size_t <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> oe_sockaddr = 0 ; size_t <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> oe_addr_len = sizeof ( struct oe_sockaddr_t * oe_addr_addr_addr ) ; if ( p -> oe_addr_t ) { ret = - 1 ; } if ( * sizeof ( * ) ) { ret = - ENOMEM ; goto out ; } <S2SV_ModEnd> ; } if <S2SV_ModStart> -> namelen = sizeof ( struct oe_sockaddr_sockaddr_sockaddr_sockaddr ) ; if ( ret > sizeof ( * ) ) { ret = - 1 ; goto out ; } if ( * ) goto out ; } <S2SV_ModEnd> ; } if (,0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
136,,0
137,"<S2SV_ModStart> * data ; int ret ; int ret ; int ret = kmalloc ( size, GFP_NOIO ) ; if (! data ) return - ENOMEM ; ret = kmalloc ( size, GFP_NOIO, GFP_NOIO ) ; if (! ret ) return - ENOMEM ; <S2SV_ModStart> ret ) { ret = - ENOMEM ; return ret ; }",0
138,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
139,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vp9_null> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_null> <S2SV_null>,0
140,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
141,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
142,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if (,0
145,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
146,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
147,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
148,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_ty, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == NULL ) { PyErr_SetString ( PyExc_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> from <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> \\"", & tmp ) ; return 1 ; } <S2SV_ModStart> ) ; } else { int res <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto failed ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; } if ( tmp == NULL || tmp == NULL || tmp == NULL ) { Py_CLEAR ( tmp ) ; } if ( tmp == NULL || tmp == NULL || tmp == NULL || tmp == NULL || tmp == NULL ) { Py_CLEAR ( tmp ) ; return 1 ; } if ( tmp == NULL || tmp == NULL || tmp == NULL ) { Py_CLEAR ( tmp ) ; } if ( tmp == NULL || tmp == NULL || tmp == NULL || tmp == NULL || tmp == NULL || tmp == Py_CLEAR ( tmp == NULL ) { Py_CLEAR ( tmp ) ; } else { Py_SetString",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
152,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip = GFP_BLOCK,0
153,"<S2SV_ModStart> ) ; const VP9EncoderConfig <S2SV_ModEnd> * oxcf = <S2SV_ModStart>, oxcf -> oxcf, sizeof ( rc_t ) ) <S2SV_ModEnd> ; rc ->",0
154,,0
155,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
156,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
157,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
158,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
159,"<S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( status & KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR, KSZ8851_ERR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_SZ8851_ISR <S2SV_ModEnd> ) ; if",0
160,"<S2SV_ModStart> cm, struct vpx_writer * wb <S2SV_ModEnd> * wb, <S2SV_ModStart> w ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
162,,0
163,,0
164,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 1_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> log2SV_null> <S2SV_null>,0
165,<S2SV_ModStart> ; if ( key_read <S2SV_ModEnd> ( key ),0
166,,0
167,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
168,,0
169,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
170,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const VP9_COMP * const VP9EncoderConfig * const VP9_COMMON * const VP9EncoderConfig * const VP9EncoderConfig * const VP9EncoderConfig * const VP9_COMMON * const VP9EncoderConfig * const VP9_CODEC_COMMON * const VP9Encoder_COMMON * const VPX_COUNTS * const svc ; svc_ctx = & svc_ctx -> svc_ctx -> svc_ctx -> svc_ctx ; svc_ctx = ( svc_ctx, svc_ctx, svc_ctx -> svc_layer_id, svc_id, svc_id, svc_ctx, size_t ) ; if ( svc_t ) { svc_frame_count = ( svc_ctx -> svc_ctx -> size_t ) ; svc_t = ( svc_frame_t ) ; if ( svc_ctx -> size_t ) { svc_t <S2SV_ModEnd> ( svc_t",0
171,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
172,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * end_null> <S2S2SV_null> <S2SV_null> static <S2SV_ModStart> NULL ) { const char * end_null> <S2SV_null> <S2SV_null> <S2SV_null> static_null>,0
173,,0
174,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vp9_null> static PREDICTION_MODE_MODE_INFO * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const MACROBLOCKD * const MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const tile_mode = & cpi -> td. mb ; MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const xd = & cpi -> td. mb ; MACROBLOCKD * const MACROBLOCKD * const uint8_t * const int64_t * const int64_t * xd = & cpi -> mb ; int64_t <S2SV_ModEnd> -> mb ; <S2SV_ModStart> -> mb, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_",0
178,,0
179,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_options_options_options_init ( struct ip_options_options_options_rcu <S2SV_ModEnd> * opt, <S2SV_ModStart> ( opt ) { struct ip_options_options_rcu <S2SV_ModEnd> * opt =",0
180,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
181,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
182,,0
183,<S2SV_ModStart> 1 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,,0
186,<S2SV_ModStart> len ; } ND_TCHECK ( bp [ 0 ] ) ;,0
187,,0
188,<S2SV_ModStart> * row ; jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_t,0
189,,0
190,,0
191,"<S2SV_ModStart>, int ret <S2SV_ModEnd> ; if (",0
192,,0
193,"<S2SV_ModStart> ; if ( rmt_name <S2SV_ModEnd> ( r,",0
194,"<S2SV_ModStart> } else { memcpy ( c, 0, sizeof ( c -> data ) ) ;",0
195,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ip_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_null> <S2S2SV_null>,0
196,,0
197,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
198,<S2SV_ModStart> length ) ; ND_TCHECK_16BITS ( tptr + 2 ) ;,0
199,,0
200,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
201,"<S2SV_ModStart> ) ; } copy_as_user <S2SV_ModEnd> ( src,",0
202,<S2SV_ModStart> FAILURE_RETRY ( fc ),0
203,"<S2SV_ModStart> ( 1.0f, MagickMin <S2SV_ModEnd> ( 1.0f,",0
204,,0
205,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
206,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
207,<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY (,0
208,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
209,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
210,,0
211,,0
212,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
213,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
214,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
215,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
216,<S2SV_ModStart> ( size_t ) size_t <S2SV_ModEnd> ; if (,0
217,"<S2SV_ModStart> } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, NULL )",0
218,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return ;,0
219,<S2SV_ModStart> msg ) ; msg -> msg_namelen = 0,0
220,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
221,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
222,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
223,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
224,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ;,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> cpi ) { if ( cpi -> oxcf. tx_mode == VP9_COMMON * cpi -> oxcf. tx_mode == VPX_SELECT ) { cpi -> oxcf = cpi -> sf_mode = cpi -> oxcf. tx_mode ; return 1 ; } else if ( cpi -> oxcf. tx_mode == 0 ) { cpi -> sf_mode = cpi -> sf_mode ; } else if ( cpi -> oxcf. tx_mode == 0 ) { cpi -> sf_mode = cpi -> oxcf. use_mode = cpi -> oxcf. use_mode ; } else if ( cpi -> oxcf. tx_mode == VPX_MAX_MODE ) { cpi -> sf_mode = cpi -> sf_mode ; } else if ( cpi -> oxcf. use_mode == VPX_SELECT ) { cpi -> sf_mode = cpi -> sf_mode ; } else if ( cpi -> oxcf.,0
226,<S2SV_ModStart> { if ( bad_format_print <S2SV_ModEnd> ( im ->,0
227,,0
228,<S2SV_ModStart> ; if ( size_t <S2SV_ModEnd> size < 0,0
229,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
230,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
231,<S2SV_ModStart> b ) ; <S2SV_ModEnd> if ( b,0
232,,0
233,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
234,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,,0
237,,1
238,<S2SV_ModStart> res ) ; ret = malloc ( res ) ;,0
239,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( psf -> header. indx <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> + psf -> header <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd>, psf -> <S2SV_ModStart> + psf -> header. indx <S2SV_ModEnd> + psf -> <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd>, psf -> <S2SV_ModStart> + psf -> header. indx <S2SV_ModEnd>, psf -> <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd>, psf -> <S2SV_ModStart> + psf -> header. indx <S2SV_ModEnd>, psf -> <S2SV_ModStart> + psf -> header. indx <S2SV_ModEnd> + psf -> <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd>, psf -> <S2SV_ModStart> + psf -> header. indx <S2SV_ModEnd> ) ; }",0
240,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
241,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
242,<S2SV_ModStart> perf_event * event <S2SV_ModEnd> ) { struct perf_event_event_context * event <S2SV_ModStart> event ) ; <S2SV_ModEnd> event_unlock ( event,0
243,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
244,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
245,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
246,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
247,,0
248,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
249,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,,0
251,"<S2SV_ModStart> end, end <S2SV_ModEnd> ) ; break",0
252,,0
253,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
256,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( sf ->,0
257,,0
258,<S2SV_ModStart> = 0 ; skb_read_lock ( sk ) ;,0
259,,0
260,,0
261,,0
262,"<S2SV_ModStart> ( interface,S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
263,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
264,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
265,,0
266,<S2SV_ModStart> = rc -> avg_bandwidth <S2SV_ModEnd> ; if (,0
267,<S2SV_ModStart> ( err = 0 <S2SV_ModEnd> ; if (,0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
270,,0
271,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat,0
273,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> intra_mode_mode_pick_mode ( VP9_COMMON <S2SV_ModStart> intra_y, int mode_y, PREDICTION_MODE <S2SV_ModEnd> mode, PREDICTION_MODE <S2SV_ModStart> intra_mode, PREDICTION_MODE <S2SV_ModEnd> mode, PREDICTION_MODE <S2SV_ModStart> intra_mode, PREDICTION_MODE <S2SV_ModEnd> mode, PREDICTION_MODE <S2SV_ModStart> intra_mode, PREDICTION_MODE <S2SV_ModEnd> mode, PREDICTION_MODE <S2SV_ModStart> mode, best_mode, PREDICTION_mode, PREDICTION_mode, PREDICTION_MODE <S2SV_ModStart>, best_mode, PREDICTION_mode, PREDICTION_mode, PREDICTION_MODE <S2SV_ModEnd> ) ; PREDICTION_MODE <S2SV_ModStart>, best_mode, PREDICTION_mode, best_mode, PREDICTION_mode_mode_mode, PREDICTION_mode, PREDICTION_mode, PREDICTION_mode, PREDICTION_",0
274,<S2SV_ModStart> ; h = safe_calloc <S2SV_ModEnd> ( h ->,0
275,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> WORD32 i2SV_null>,0
276,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args <S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
277,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
278,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
279,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> inode ) { if (! inode_sb ( inode ) goto out_sb ; if ( inode ) goto out_sb ; if ( inode -> i_sb ) goto out ; if ( bh_sb -> i_len > bsize_len ) goto out ; if ( bh_len > b_len ) goto out ; if ( bh_len > bsize_len ) goto out ; if ( inode -> i_sb -> i_len > b_len ) goto out ; if ( b_len > bsize_len ) goto out ; if ( i_len ) goto out ; if ( i_len > b_len ) goto out ; if ( bh_len > bsize_len ) goto out ; if ( b_len > bsize_len ) goto out_len ; if ( i_len > b_len ) goto out ; if ( bsize_len > b_len ) goto out ; if ( b_len > b_len ) goto out ; if (,0
280,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
281,<S2SV_ModStart> flags ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
282,<S2SV_ModStart> if ( addr + <S2SV_ModEnd> sizeof ( addr,0
283,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
284,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
285,,0
286,"<S2SV_ModStart>, rbuf, sizeof ( * )",0
287,<S2SV_ModStart> - ENOMEM ; if (! ctxt ) goto err ;,0
288,,0
289,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
290,,0
291,<S2SV_ModStart> ) ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
292,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> y2SV_null> <S2SV_null> static <S2SV_ModStart> len ) { if ( len <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> decode_null>,0
293,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> chrv = 0 <S2SV_ModStart> unsigned char * strchr <S2SV_ModEnd> ; char * <S2SV_ModStart> = 0 ; unsigned char * <S2SV_ModEnd> char * <S2SV_ModStart> = 0 ; unsigned char * strchr = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( buf, & buf, & buf, & buf <S2SV_ModEnd>, 0, <S2SV_ModStart>, sizeof ( * <S2SV_ModStart> ) ) ; if (! strcmp ( stderr, ""%s"", & buf ) ) ) ; if (! strlen ( buf ) ) { pr_err ( ""Error: <S2SV_blank> to <S2SV_blank> to <S2SV_blank> "" ) ; return - 1 ; } <S2SV_ModStart> 0 ) ; } <S2SV_ModEnd> if (! strlen ( strlen ( line, ""%s"", strlen ( strlen ( buf, ""%s"", insn"", sizeof ( * ) ) ) ) ; if (! strlen ( strlen ( strlen ( strlen ( buf, 0 ) ) )!= 0 ) { pr_err ( ""Error: <S2SV_blank> to <S2SV_blank> to <S2SV_blank> to <S2SV_blank> to <S2SV_blank> "" ) ; return - 1 ; } <S2SV_ModEnd> ; }",0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
295,,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,,0
298,<S2SV_ModStart> buffer ) ; if <S2SV_ModEnd> ( screen ->,0
299,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
300,"<S2SV_ModStart> -> rows = MagickMax ( number_planes_filled, number_planes_filled, number_planes_filled, number_planes_planes_filled, number_planes_planes_filled <S2SV_ModEnd>, number_planes_planes_planes_filled,",0
301,,0
302,,0
303,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ;,0
304,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
305,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
306,<S2SV_ModStart> 0 ) ; if (! desc -> desc. bNumEndpoints < 0 ) return - ENOMEM ;,0
307,<S2SV_ModStart> arg ) { <S2SV_ModEnd> return ret ; <S2SV_ModStart> return ret ; } <S2SV_ModEnd> return ret ;,0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> intra_mode_mode ( VP9_COMMON <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> * r, <S2SV_ModStart> intra_mode ) { PREDICTION_MODE <S2SV_ModEnd> const PREDICTION_MODE <S2SV_ModStart> intra_mode ) { PREDICTION_MODE <S2SV_ModEnd> y_mode = vp9_mode <S2SV_ModStart> ( r, counts -> <S2SV_ModEnd> y_mode_mode <S2SV_ModStart> intra_mode_mode_mode ) ; if ( counts -> uv_mode == PREDICTION_MODE <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> y_mode = vp9_mode <S2SV_ModStart> y_mode_mode_mode_mode ( counts -> uv_mode, counts -> uv_mode, counts -> uv_mode, counts -> uv_mode_intra_mode, counts -> uv_intra_mode, counts -> uv_intra_mode, counts -> uv_mode_intra_mode ) ; if ( counts -> uv_mode == PREDICTION_mode == PREDICTION_mode",0
309,<S2SV_ModStart> ; if (! ctx -> data_size ) return - EINVAL ; if (,0
310,,0
311,,0
312,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
313,,0
314,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const vpx_writer <S2SV_ModEnd> * wb ; <S2SV_ModStart> int i ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> t ) { vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> t ) { vpx_write_bit <S2SV_ModEnd> ( w,",0
315,"<S2SV_ModStart> write_buffer ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_write_bit <S2SV_ModEnd> ( wb,",0
316,,0
317,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
318,,0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
321,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_wb_write_bit <S2SV_ModEnd> ( wb,",0
323,,0
324,,0
325,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
326,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
327,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
328,,0
329,,1
330,,0
331,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
332,,0
333,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
336,,0
337,,0
338,,0
339,,0
340,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> 0,0
341,,0
342,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int w ) { vpx_write_bit_bit_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> 16 ) ; vpx_write_bit <S2SV_ModEnd> ( w,",0
343,,0
344,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
345,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; break ; }",0
346,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
348,<S2SV_ModStart> return ret ; <S2SV_ModEnd> } if (,0
349,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
350,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
351,<S2SV_ModStart> rx = 0 <S2SV_ModEnd> ; if (,0
352,"<S2SV_ModStart> = 0 ; memset ( & dev, sizeof ( priv ) ;",0
353,,0
354,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2S2SV_null> <S2SV_null>,0
355,,0
356,,0
357,,0
358,"<S2SV_ModStart> * fmode, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> -> fmode, fmode, fmode <S2SV_ModEnd> ) ; fmode",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> sse_null> <S2SV_null> <S2SV_null> <S2SV_null> static int64_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> sse_null> <S2S2SV_null> static PRED_null> <S2SV_null> static int64_null> <S2SV_null>,0
361,,0
362,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
363,"<S2SV_ModStart> * r, vpx_reader <S2SV_ModEnd> * r,",0
364,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1,",0
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,,0
367,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
368,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
369,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> n2SV_null> <S2SV_null> <S2S2SV_null>,0
370,,0
371,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> log2SV_null> <S2SV_null> <S2SV_null>,0
372,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
373,<S2SV_ModStart> vpx_codec_alg_priv_t * priv ; vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; vpx_codec_alg_priv_t * <S2SV_ModStart> priv_t * priv <S2SV_ModEnd> ; vpx_codec_alg_t * <S2SV_ModStart> priv_t * priv <S2SV_ModEnd> ; ctx -> <S2SV_ModStart> priv_t * priv <S2SV_ModEnd> ; vpx_codec_alg_priv_t * <S2SV_ModStart> -> priv <S2SV_ModEnd> ; vpx_alg_priv_t * <S2SV_ModStart> -> cfg_priv_t * priv <S2SV_ModEnd> ; if (,0
374,,0
375,<S2SV_ModStart> ctx ) { memset <S2SV_ModEnd> ( ctx ->,0
376,,0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd> ) ; status",0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
379,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
380,,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,,0
384,,0
385,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
386,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
388,<S2SV_ModStart> ; if ( <S2SV_ModEnd> av_size < 0,0
389,,0
390,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> y_null> <S2SV_null> <S2SV_null> <S2SV_null> static int motion_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> y_null> <S2SV_null> <S2SV_null>,0
391,<S2SV_ModStart> ( s ) <S2SV_ModEnd> ; if (,0
392,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
393,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
394,<S2SV_ModStart> <S2SV_null> <S2SV_null> static PRED,0
395,<S2SV_ModStart> ( new_bh ) { <S2SV_ModEnd> if ( new_bh,0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,,0
398,,0
399,"<S2SV_ModStart> decode ) ; memset ( 0, 0, sizeof ( * 3 ) ) ;",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
401,,0
402,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> UINT32,0
403,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
404,<S2SV_ModStart> * row ; jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_t,0
405,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> block_null> <S2SV_null> <S2SV_null> static PRED_null> <S2SV_null> <S2SV_null> <S2S2SV_null> static int <S2SV_ModEnd> tx_null>,0
406,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst,",0
407,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
408,,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx ; <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
411,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
412,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
413,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
414,,0
415,,0
416,,0
417,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
418,,0
419,,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,<S2SV_ModStart> & 0 ) <S2SV_ModEnd> ; if (,0
422,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
423,,0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
426,"<S2SV_ModStart> size_t s ; memset ( & tcount, 0, sizeof ( tcount ) ) ;",0
427,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
428,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx ; <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
430,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
431,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( section_options,0
432,,0
433,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
434,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
435,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
436,,0
437,<S2SV_ModStart> ; if (! arg ) return NULL ; if (,0
438,,0
439,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_stride,",0
440,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> int mi_row * <S2SV_ModStart> int mi_col ) { VP9_COMMON * const int mi_col = & cpi -> mi_col ; int mi_cols = & cpi -> mbmi_col ; MACROBLOCKD * x -> mb ; MACROBLOCKD * x -> mb ; MACROBLOCKD * x -> mb = & cpi -> mb ; MACROBLOCKD * x -> mb ; int mi_col = MIN ( x -> mbmi_col, x -> mbmi_cols ) ; int i = MIN ( x -> mi_row, x -> mbmi_col ) ; if (! x -> mbmi_cols [ i ] ) { int i = MIN ( x -> mi_row, x -> mbmi_col, x -> mi_cols, x -> mb_col, x -> mbmi_col, x -> mbmi_col, x -> mb_col ) ; if ( x ->",0
441,"<S2SV_ModStart> int u_int length ; u_int length ; u_int length ; if ( length < 4 ) { ND_PRINT ( ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ND_PRINT ( ( ndo, ( ndo, ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; }",0
442,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
443,<S2SV_ModStart> ( decoder -> codec_interface <S2SV_ModEnd> ( ) ),0
444,<S2SV_ModStart> == 0 ) <S2SV_ModEnd> ; if (,0
445,<S2SV_ModStart> str ) ; <S2SV_ModEnd> } if (,0
446,<S2SV_ModStart> * fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> mode ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_RETRY ( fd,0
447,<S2SV_ModStart> ctx ) { vpx_free ( ctx ) ;,0
448,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
449,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
450,"<S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
451,,0
452,,0
453,,0
454,<S2SV_ModStart> count = 0 <S2SV_ModEnd> ; if (,0
455,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
456,,0
457,<S2SV_ModStart> ; if ( skb -> opt.,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> ; if ( info -> length > 0 ||,0
460,<S2SV_ModStart> key_data ; struct key_data * key = NULL ; if (! key_data ) return - ENOMEM <S2SV_ModEnd> ; if (,0
461,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
462,,0
463,,0
464,,0
465,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
466,,0
467,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
468,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
469,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
470,<S2SV_ModStart> ) break ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> n_null> <S2SV_null> RLC_S2SV_null> <S2SV_null>,0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
476,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
477,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
478,<S2SV_ModStart> -> rows = MagickMax ( image -> rows ) <S2SV_ModEnd> ; image ->,0
479,"<S2SV_ModStart> ) ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
480,,0
481,"<S2SV_ModStart> int mptctl_init ( MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
482,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
483,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
484,"<S2SV_ModStart> ; if ( data_size_t buf_size <S2SV_ModEnd> ( buf_size, <S2SV_ModStart>, & buf_size, & buf_size <S2SV_ModEnd> ) { if",0
485,"<S2SV_ModStart> ( fname, ""%s"",",0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> opt_null> <S2S2SV_null>,0
487,,0
488,"<S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, ENC624J600_EIR_EIR, ENC624J600_EIR, ENC624J600_EIR <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_EIR_EIR, ENC624J600_EIR <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_EIR_EIR, ENC624J600_EIR_EIR <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_EIR_EIR <S2SV_ModEnd> ) ; }",0
489,<S2SV_ModStart> ) break ; if ( status == MagickFalse ) break,0
490,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
491,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> static <S2SV_ModStart> NULL ) { int len ; int len = 0 ; int len ; int len ; int len = 0 ; <S2SV_ModStart> ) ) { if ( len > 0 ) { goto out ; } <S2SV_ModEnd> if ( len <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( len <S2SV_ModStart> ++ ) { if ( len >= len ) return 0 ; <S2SV_ModStart> ) ) { goto out ; } <S2SV_ModEnd> if ( len <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( len <S2SV_ModEnd> if ( len <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( len <S2SV_ModStart> + 1 ) { <S2SV_ModEnd> if ( len <S2SV_ModStart> ) ) ; return <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( len <S2SV_ModStart> ++ ) { <S2SV_ModEnd> return 0 ;,0
492,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
493,<S2SV_ModStart> w ) { sprintf ( outputbuffer <S2SV_ModEnd> ) ; },0
494,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
496,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
497,"<S2SV_ModStart>, int ret <S2SV_ModEnd> ; if (",0
498,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
499,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
500,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
501,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char * cp <S2SV_ModStart> ] ) { if ( cp == 0 ) { char * cp ++ ; char * cp ++ ; char * cp = 0 ; char * cp ++ ; char * cp = 0 ; char * cp ++ ; char * cp = 0 ; char * cp ++ ; char * cp = 0 ; char * cp ++ ; if ( cp == '\\0' && cp == '\\0' || cp == '\\0' || cp == '\\0' ) { if ( cp == '\\"" ) { if ( cp == '\\0' || cp == '\\"" ) return 0 ; } if ( cp == '\\"" ) { if ( cp == '\\0' || cp == '\\0' || cp == '\\"" ) { if ( cp == '\\"" ) { if ( cp == '\\0' || cp == '\\"" ) return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { if ( cp ++ ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) return 0 ; } <S2SV_ModEnd> if ( cp ++ <S2SV_ModStart> ( cp ++ ; } <S2SV_ModEnd> if ( cp",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart> pix1, 0, 0, <S2SV_ModStart>, 0, 0, <S2SV_ModEnd> ) ; }",0
504,<S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( & cpi,0
505,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
507,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
508,,0
509,,0
510,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> VP9_HIGHBITS2SV_null> <S2SV_null>,0
511,,0
512,,0
513,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
514,<S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; },1
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
516,<S2SV_ModStart> ; if (! type_comment ) return NULL ; if (,0
517,<S2SV_ModStart> 0 ) ; memset <S2SV_ModEnd> ( x ->,0
518,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, ENC624J600_MACROBLOCKD * interface, ENC624J600_ST <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_ST <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_TESTAT_ST <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_STREAM <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface, ENC624J600_RSTREAM <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_STREAM <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_ST <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_STREAM <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface, ENC624J600_TEST <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_STREAM <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface, ENC624J600_STREAM <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_STREAM <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624",0
519,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
520,,0
521,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
522,<S2SV_ModStart> ) ) ; if (! err ) return - EINVAL ;,0
523,<S2SV_ModStart> event ) { <S2SV_ModEnd> event -> event,0
524,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip2SV_null> <S2SV_null>,0
525,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
526,"<S2SV_ModStart> <S2SV_null> <S2SV_SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, KSZ8851_S2SV_SV_SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, KSZ8851_S2SV_SV_SV_SV_null> <S2SV_null> <S2SV_null>",0
527,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
528,,0
529,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
530,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
531,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
532,,0
533,<S2SV_ModStart> ) ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
534,,0
535,,0
536,<S2SV_ModStart> dentry ) { err = - ENOMEM ; },0
537,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
538,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
539,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
540,,0
541,<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if (,0
542,<S2SV_ModStart> ) ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
543,<S2SV_ModStart> goto out ; spin_lock_lock ( & event -> hh_lock ) ;,0
544,<S2SV_ModStart> * tptr ; ND_TCHECK_16BITS ( tptr + 3 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_16BITS ( tptr + 4 ) ; <S2SV_ModStart> ) ; } ND_TCHECK_16BITS ( tptr + 4 ) ;,0
545,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
546,,0
547,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
548,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
549,<S2SV_ModStart> size ) ; <S2SV_ModEnd> return ret,0
550,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
551,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, ENC624J600_MACON2SV_MACON2S2SV_null> <S2SV_null> <S2SV_null>",0
552,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> psf -> header,0
553,,0
554,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> S2SV_null> SV_null> <S2SV_null> S2SV_null> S2SV_null> <S2SV_null> <S2SV_null> SV_null> SV_null> S2S2SV_null>,0
555,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
556,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
559,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> svc_null> <S2SV_null> S2SV_null> <S2SV_null> static int res_null>,0
560,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
561,,0
562,,1
563,,0
564,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
565,<S2SV_ModStart> ; if (! data_len ) return - ENOMEM ;,0
566,,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_decode_decode_val ; BYTE <S2SV_ModStart> ; if (! context ) return ERROR_INVALIDDATA ; if (! context ) return ERROR_INVALIDDATA ; <S2SV_ModStart> ; } } if (! context ) return ERROR_INVALIDDATA ;,0
568,<S2SV_ModStart> ; if (,0
569,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vp9_null> <S2S2SV_null> static int <S2SV_ModEnd> int64_null> <S2S2SV_null> <S2SV_null> <S2SV_null>,0
570,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_mode ( vpx_read_mode <S2SV_ModEnd> * r ) <S2SV_ModStart> intra_mode ) { vpx_read_bit <S2SV_ModEnd> ( r,",0
571,"<S2SV_ModStart> : # line 7 <S2SV_ModEnd> ""hex_grammar.y"" { yr_grammar.y"" { yr_node_grammar.y"" { yr_node_grammar.y"" { yr_node_grammar.y"" { yr_node_grammar.y"" { yr_node_node_grammar.y"" { yr_node_node_node ( * yyvaluep ) ; <S2SV_ModStart> } # line 1034 <S2SV_ModEnd> ""hex_grammar.y"" { yr_node_grammar.y"" { yr_node_node_grammar.y"" { yr_node_node_node <S2SV_ModStart> : # line 1034 <S2SV_ModEnd> ""hex_grammar.y"" { yr_node_node_grammar.y"" { yr_node_node_grammar.y"" { yr_node_node_grammar.y"" { yr_node_node_node_grammar.re_node_node_node_grammar.y"" { yr_node_node_grammar.re_node_node_node_node_node ( * yyvaluep ) ; } # line_node_node_node_node_node_",0
572,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const xd = & td -> mb ; MACROBLOCKD * const MACROBLOCKD * const mb ; MACROBLOCKD * const x = & td -> mb ; MACROBLOCKD * const mb ; MACROBLOCKD * const mb ; MACROBLOCKD * const MACROBLOCKD * const uint8_t * const mb ; MACROBLOCKD * const uint8_t * const uint8_t * const uint8_t * mbmi = xd -> mb ; MACROBLOCKD * const uint8_t * const uint8_t * const uint8_t * mb ; MACROBLOCKD * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t,0
573,,0
574,,0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
577,"<S2SV_ModStart>, ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_DONTWAIT )",0
578,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
579,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
581,,0
582,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
583,,0
584,<S2SV_ModStart> ; if (! s_entry_entry <S2SV_ModEnd> ( s.,0
585,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
586,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cm ->,0
587,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> SV_TYPE_TYPE_TYPE ( NULL, SV_TYPE_TYPE_TYPE_TYPE ( NULL, 0, 0, 0, 0 ) ; if ( type == NULL ) return 0 ; <S2SV_ModStart> ; if ( type_type == NULL ) { if ( type_type == NULL ) return 0 ; <S2SV_ModStart> return 0 ; } if ( type_type == TYPE_TYPE_TYPE_TYPE_TYPE_TYPE_TYPE_TYPE_TYPE ) { if ( type == NULL ) return 0 ; <S2SV_ModStart> } else { if ( type_type == TYPE_TYPE_TYPE_TYPE_TYPE_TYPE_TYPE_TYPE ) { if ( type == NULL ) return 0 ; } <S2SV_ModStart> } else { if ( type == TYPE_TYPE_TYPE_TYPE_TYPE_TYPE_TYPE_TYPE ) { if ( type == NULL )",0
588,"<S2SV_ModStart> mode = TEMP_FAILURE_RETRY ( <S2SV_ModStart> mode, 0 )",0
589,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
590,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModStart> char * s2SV_null> <S2SV_null> static char * s2SV_null> <S2SV_null> <S2SV_null>,0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
592,"<S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w,",0
593,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
594,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
595,,0
596,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
597,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vp9_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> p9_null>,0
598,,0
599,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
600,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
601,<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if ( <S2SV_ModStart> VP9_HIGHBITDEPTH_HIGHBITDEPTH ) { vpx_debug ( & VPX_IMG_F_HIGHBITDEPTH ) ; <S2SV_ModStart> VP9_HIGHBITDEPTH_HIGHBITDEPTH ) ; <S2SV_ModEnd> if ( ( & <S2SV_ModStart> VP9_HIGHBITDEPTH_HIGHBITDEPTH ) { vpx_debug ( & VPX_IMG_F_HIGHBITDEPTH ) ; <S2SV_ModStart> VP9_HIGHBITDEPTH if ( ( ( ctx -> flags & VPX_HIGHBITDEPTH ) ) { VPX_IMG_F_HIGHBITDEPTH_HIGHBITDEPTH ) ; },0
602,"<S2SV_ModStart>, & len, 0",1
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
605,<S2SV_ModStart> char * buf <S2SV_ModEnd> ; if (,0
606,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> static <S2SV_ModStart> int mi_null> <S2S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> log2SV_null> <S2SV_null>,0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx ; <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
608,<S2SV_ModStart> uint8_t bit_depth ; uint8_t bit_depth ; uint8_t bit_depth ; bit_depth = 0 ; if ( bit_depth < 8 ) return AVERROR_INVALID_INVALIDDATA ; <S2SV_ModStart> 0 ) { if ( len < 8 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 0 ) { if ( len < 8 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 0 ) { if ( len < 8 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 0 ) { if ( length > 0 ) return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 0 ) { if ( len < 8 ) return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 0 ) { if ( len < 8 ) return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 0 ) { if ( length > 0 ) return AVERROR_INVALIDDATA ;,0
609,<S2SV_ModStart> { if ( p == 0 ||,0
610,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
611,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
612,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
613,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
614,<S2SV_ModStart> y2 ) { sprintf ( outputbuffer <S2SV_ModEnd> ) ; },0
615,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
616,<S2SV_ModStart> cm ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
617,"<S2SV_ModStart> pbi ) { memset <S2SV_ModEnd> ( pbi,",0
618,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,,0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,<S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> coef_probs [ tx_size,0
623,<S2SV_ModStart> { r = TEMP_FAILURE_RETRY (,0
624,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> static <S2SV_ModStart> = 0 ; state -> data [ 0 ] ; mutex_lock ( & d -> data, d -> data_mutex ) ; mutex_unlock ( & d -> dev -> data_usb_mutex ) ; mutex_unlock ( & d -> data_mutex ) ; mutex_unlock ( & d -> data -> data -> data_mutex ) ; mutex_unlock ( & d -> data_mutex ) ; mutex_unlock ( & d -> data -> data -> data -> data_mutex ) ; mutex_unlock ( & d -> data_usb_mutex ) ; state -> data_mutex_unlock ( & d -> data_mutex ) ; mutex_unlock ( & d -> data_usb_mutex ) ; state -> data_mutex_unlock ( & d -> data_mutex ) ; mutex_unlock ( & d -> data_mutex ) ; mutex_unlock ( & d -> dev, d ->",0
625,<S2SV_ModStart>,0
626,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
627,"<S2SV_ModStart> ; bufbuf = '\\0' <S2SV_ModEnd> ( buf,",0
628,,0
629,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> p9_null> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> p9_null> <S2SV_null>,0
630,<S2SV_ModStart> ; if ( len < 4 ) return - 1 ;,0
631,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP9_COMMON * const VP9_COMMON * const VP9_COMMON * cm, MACROBLOCKD * cm, MACROBLOCKD * xd <S2SV_ModEnd>, seg, <S2SV_ModStart> ) { vpx_writer <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) { vpx_writer_bit <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ; } else { vpx_writer_bit <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ; } else { vpx_rdcpy <S2SV_ModEnd> ( seg,",0
632,,0
633,,0
634,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
636,,0
637,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
638,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> S2SV_null> S2SV_null> <S2SV_null> S2SV_null>,0
639,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NULL ; int <S2SV_ModEnd> ipv_null> <S2SV_null> <S2SV_null>,0
640,<S2SV_ModStart> 0 ) ; memset <S2SV_ModEnd> ( & cpi,0
641,"<S2SV_ModStart> ( ndo, ""%s"", len <S2SV_ModEnd> ) ) ;",0
642,,0
643,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
644,<S2SV_ModStart> ; jas_eprintf <S2SV_ModEnd> ; if (,0
645,,0
646,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int vpx_read_bit ( vpx_read_bit <S2SV_ModEnd> * r, <S2SV_ModStart> int ) { vpx_read_bit <S2SV_ModEnd> ( r,",0
647,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
648,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_inter_mode ( vpx_reader <S2SV_ModStart> * r, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> cm -> fc = vpx_reader <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> NULL ) { struct stream packet = 0 ; struct stream packet = 0 ; void * stream -> codec_interface = 0 ; struct stream -> codec_interface ( & stream -> codec_interface ) ; <S2SV_ModStart> ( ) ; if (! stream -> codec_interface ( & stream -> codec_interface ) ) { stream -> codec_interface ( & stream -> codec_interface <S2SV_ModEnd>, stream -> <S2SV_ModStart>, stream -> codec_interface <S2SV_ModEnd>, stream -> <S2SV_ModStart>, stream -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, stream -> codec_interface <S2SV_ModEnd> ) ; }",0
650,"<S2SV_ModStart> ) ) { ND_TCHECK_16BITS ( ndo, 2 ) ;",0
651,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
652,<S2SV_ModStart> key ) ; <S2SV_ModEnd> return 0 ;,0
653,<S2SV_ModStart> = 0 ; # endif,0
654,,0
655,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
656,"<S2SV_ModStart> = 0 ; size_t addrlen_in = 0 ; <S2SV_ModStart>, & addrlen_in, addrlen_t addrlen_out <S2SV_ModEnd> ; if (",0
657,,1
658,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
659,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
660,<S2SV_ModStart> = 0 ; size_t data_size = 0 ; <S2SV_ModStart> - 1 ; goto fail ; <S2SV_ModEnd> ; if ( <S2SV_ModStart> - EIO ; goto done <S2SV_ModEnd> ; if <S2SV_ModStart> - 1 ; goto done <S2SV_ModEnd> ; if <S2SV_ModStart> - 1 ; } if ( <S2SV_ModStart> - 1 ) { if ( <S2SV_ModEnd> - EINVAL <S2SV_ModStart> - 1 ; goto fail ; } <S2SV_ModStart> - 1 ; if ( <S2SV_ModEnd> - 1 ) { <S2SV_ModStart> - EINVAL ; goto fail ; } <S2SV_ModStart> - EINVAL ; goto out_free <S2SV_ModEnd> ; } <S2SV_ModEnd> ; if <S2SV_ModStart> - EINVAL ; },0
661,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = dm9000WriteReg ( DM9000WriteReg ( DM9000ReadReg ( DM9000_EPCR ) <S2SV_ModEnd> ; dm9000WriteReg ( <S2SV_ModStart> ; dm9000WriteReg ( DM9000WriteReg ( DM9000_EPCR, DM9000_EPCR ) <S2SV_ModEnd> ; dm9000WriteReg ( <S2SV_ModStart> ; dm9000WriteReg ( DM9000WriteReg ( DM9000_EPCR <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPR <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR ) ; dm9000WriteReg ( DM9000WriteReg ( DM9000WriteReg ( DM9000WriteReg ( DM9",0
662,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
663,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> size = 0,0
664,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
665,<S2SV_ModStart> h -> fmode <S2SV_ModEnd> ; h =,0
666,,0
667,"<S2SV_ModStart> -> rows = MagickMax ( number_planes_filled, number_planes_planes_filled, number_planes_planes_filled, number_planes_filled ) <S2SV_ModEnd> ; number_planes_filled =",0
668,<S2SV_ModStart> ssh_set_string ( b ) <S2SV_ModEnd> ; if (,0
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
671,,0
