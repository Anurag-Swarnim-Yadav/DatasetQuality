,raw_predictions,correctly_predicted
0,<S2SV_ModStart> if ( n2size < 1 ) <S2SV_ModEnd> { applog (,0
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : ND_TCHECK_8BITS ( tptr ) ; <S2SV_ModStart> * ( tptr ) ; ND_TCHECK_8BITS ( tptr + 5 <S2SV_ModStart> 2 ) { ND_TCHECK_8BITS ( tptr + 4 ) ; <S2SV_ModStart>, ""unknown"", subtype ), subtype <S2SV_ModEnd> ) ) ; <S2SV_ModStart> len ) { ND_TCHECK_8BITS ( tptr + 6 ) ; <S2SV_ModStart> case EAP_TYPE_TTLS : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_TTLS : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_TTLS : ND_TCHECK_8BITS ( tptr + 5 ) ;",0
2,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ( ret ),0
3,<S2SV_ModStart> ; if ( <S2SV_ModEnd> == 0 ),0
4,<S2SV_ModStart> if ( ( skb_hdr <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) < 0,0
5,"<S2SV_ModStart>, offset ; if ( avio_feof ( f ) ) { index -> item_count = 0 ; av_freep ( & index -> items ) ; return AVERROR_INVALIDDATA ; }",1
6,<S2SV_ModStart> * tpg ; u16 <S2SV_ModEnd> tpgt ; int <S2SV_ModStart> ; if ( kstrtou16 <S2SV_ModEnd> ( name + <S2SV_ModStart> ) || tpgt >= VHOST_SCSI_MAX_TARGET <S2SV_ModEnd> ) return ERR_PTR,1
7,"<S2SV_ModStart>, WRITE_list ) <S2SV_ModEnd> ) ; }",0
8,"<S2SV_ModStart> { u32 data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; kvm_read_guest_cached ( vcpu -> kvm, & <S2SV_ModEnd> vcpu -> arch <S2SV_ModStart>. apic -> vapic_cache, & data, sizeof ( u32 ) <S2SV_ModEnd> ) ; apic_set_tpr",1
9,<S2SV_ModStart> src ) ; __switch_to_tm ( src ) ; tm_recheckpoint_new_task ( src ) ;,1
10,<S2SV_ModStart> string ) { <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; <S2SV_ModEnd> return item ;,0
11,"<S2SV_ModStart> ( sb, KERN_ERR,",1
12,"<S2SV_ModStart> ipv6_select_ident ( fptr, ( struct rt6_info * ) skb_dst ( skb )",1
13,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct perf_sample_data *",0
14,"<S2SV_ModStart> < 0 ) { <S2SV_ModStart> ) ) { return 0 ; } <S2SV_ModStart> ) ) ; } grub_malloc <S2SV_ModEnd> ( buf,",0
15,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> ( tran_low_t <S2SV_ModEnd>, input, <S2SV_ModStart> 8 ) { tran_low_t <S2SV_ModEnd>, input, <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> x7 ; tran_low_t <S2SV_ModStart> 8 ] = ( tran_low_t ) <S2SV_ModStart> 8 ] = ( tran_low_t ) <S2SV_ModStart> 8 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t )",0
16,<S2SV_ModStart> == 0 ) sanitize_dead_code ( env ) ; if ( ret == 0 ),1
17,"<S2SV_ModStart> int i ; if (! config -> sample_rate ) { strcpy ( wpc -> error_message, ""sample <S2SV_blank> rate <S2SV_blank> cannot <S2SV_blank> be <S2SV_blank> zero!"" ) ; return FALSE ; }",1
18,"<S2SV_ModStart> = 0 ; unsigned char sense_buffer [ SCSI_SENSE_BUFFERSIZE ], * senseptr = NULL ; <S2SV_ModStart> cd -> senseptr, * senseptr, * senseptr, * senseptr",0
19,<S2SV_ModStart> ( image ) &&,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int allow_filter_filter_filter_level ( VP9_COMMON * cpi, <S2SV_ModEnd> ) { const <S2SV_ModStart> -> sf_filter_filter_level = & cpi -> common ; const <S2SV_ModStart> -> sf_err_err ; const int filt_err = & cpi -> common <S2SV_ModEnd> -> sf_err ; <S2SV_ModStart> -> sf. <S2SV_ModStart> ; filt_err = vp9_filter_level_level_filter_level_level_level_level_level ( cm, td, filt_level <S2SV_ModEnd>, & cpi <S2SV_ModStart>!= MAX_FRAME ) ) { <S2SV_ModEnd> if ( filt_err <S2SV_ModStart> = filt_err ; filt_err = get_err <S2SV_ModEnd> ( sd, <S2SV_ModStart> MAX_FRAME ], filt_err, <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( sf, filt_err, filt_err, <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
21,"<S2SV_ModStart>, offset += 1,",0
22,"<S2SV_ModStart> void write_mv_class ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> i ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> i ) ; vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write_literal <S2SV_ModEnd> ( w,",0
23,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ralg -> seedsize,1
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (,1
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } else { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; },0
26,<S2SV_ModStart> char * fmtname ; int debug <S2SV_ModStart> = 0 ; debug = 0 ; <S2SV_ModStart> break ; case OPT_DEBUG : debug = atoi ( jas_optarg ) ; break ; case <S2SV_ModStart> ; } } jas_setdbglevel ( debug ) ; <S2SV_ModStart> ) ) { jas_stream_close ( instream ) ;,1
27,"<S2SV_ModStart> esr ) { siginfo_t info ; void __user * pc = ( void __user * ) instruction_pointer ( regs ) ; <S2SV_ModStart> esr ) ; __show_regs ( regs ) ; info. si_signo = SIGILL ; info. si_errno = 0 ; info. si_signo = ILL_ILLOPC ; info. si_addr = pc ; info. si_addr = pc ; info. si_addr = pc ; info. si_signo = 0 ; info. si_signo = SIGILL ; info. si_errno = 0 ; info. si_errno = 0 ; info. si_errno = SIGILL ; exit <S2SV_ModEnd> ( ""Oops <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> %s"",",0
28,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * <S2SV_ModEnd> alt ; alt <S2SV_ModStart> ; if (! alt ) return - ENODEV <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart> ( udev, alt -> <S2SV_ModEnd> desc. bInterfaceNumber <S2SV_ModStart> bInterfaceNumber, alt -> desc. bAlternateSetting",1
30,<S2SV_ModStart>,0
31,<S2SV_ModStart> == - 1 || class == sslerr,0
32,<S2SV_ModStart> unsigned long flags ; if ( qid > NVMET_NR_QUEUES ) return NULL,1
33,<S2SV_ModStart> -> bNumEndpoints ; <S2SV_ModEnd> result = interface,0
34,<S2SV_ModStart> < 1 || vstart + vdaux < vstart <S2SV_ModEnd> ) { sdb_free,1
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const char * dest_keyring <S2SV_ModStart> dest_keyring ) { const char * dest_keyring = dest_keyring <S2SV_ModEnd> ; if ( <S2SV_ModStart> dest_keyring ) ) goto cleanup_dest_keyring <S2SV_ModEnd> ; if ( <S2SV_ModStart> case 0 : kkey_put ( dest_keyring <S2SV_ModEnd> ) ; break,0
36,<S2SV_ModStart> = create_spnego_ctx ( 0,0
37,"<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if ( addr -> l2tp_family!= AF_INET <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> ret = - <S2SV_ModStart> ( sk ) ; if (! sock_flag ( sk, SOCK_ZAPPED ) ) goto out",1
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> random_random_size ( unsigned <S2SV_ModStart> int max_random_size ( unsigned long ) { unsigned int max_random_size = 0 ; unsigned int max_random_random_random_size ( 1 ) ; unsigned int max_random_size = 0 ; if ( new_max > 1 ) { return 0 ; },0
39,"<S2SV_ModStart>, _ ( ""_Cancel"" ), GTK_RESPONSE_CANCEL ) ; gtk_dialog_set_",0
40,<S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ) ; },0
41,"<S2SV_ModStart>, strlen ( nonce ) <S2SV_ModEnd> ) ; }",0
42,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x51 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd> -> i2c_adap )",0
43,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
44,<S2SV_ModStart> } } } fix_google_param ( google_param ) ; fix_google_param ( outFileName ) ;,0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
46,"<S2SV_ModStart> tsample_t s ; uint16 bps = 0 ; ( void ) TIFFGetField ( in, TIFFTAG_BITSPERSAMPLE, & bps ) ; if ( bps!= 8 ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can <S2SV_blank> only <S2SV_blank> handle <S2SV_blank> BitsPerSample=8 <S2SV_blank> in <S2SV_blank> %s"", ""cpContig2SeparateByRow"" ) ; return 0 ; }",1
47,"<S2SV_ModStart> ) ; struct hugepage_subpool * spool = ( struct hugepage_subpool <S2SV_ModEnd> * ) page_private <S2SV_ModStart> hugetlb_lock ) ; hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, 1 )",1
48,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) { return AVERROR_EOF ; } if (,1
49,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return try_get_page <S2SV_ModEnd> ( buf ->,1
51,"<S2SV_ModStart>, cp, ep2, map, nmap ) ; } else cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> < ep2 ) <S2SV_ModEnd> ND_PRINT ( (",1
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart> NULL, NULL <S2SV_ModEnd> ) ; return",0
54,<S2SV_ModStart> config -> pm_max_requests ; fpm_globals. listening_socket = dup ( wp -> listening_socket ),1
55,<S2SV_ModStart>,0
56,<S2SV_ModStart> 0 ; } err = handle -> h_err ; <S2SV_ModStart> h_transaction ) { rc <S2SV_ModEnd> = jbd2_journal_stop ( <S2SV_ModStart> ) ; return err? err : rc <S2SV_ModEnd> ; } sb <S2SV_ModStart> t_journal -> j_private <S2SV_ModEnd> ; rc =,1
57,<S2SV_ModStart> ; if ( size < 0 ) return - EIO ; if (,0
58,<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = args -> valuelen ;,1
59,<S2SV_ModStart> (! name ) ||! capable (,0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> len - 2 ; if ( len < stlv_len ) goto trunc",0
61,"<S2SV_ModStart> ( c, ""%s"",",0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,<S2SV_ModStart> == 12 && ( <S2SV_ModStart> flags & TH_SYN ),1
64,"<S2SV_ModStart> -> ipc_socket ; <S2SV_ModEnd> lxc_attach_options_t * options <S2SV_ModStart> int fd ; int lsm_labelfd ; <S2SV_ModStart> { ERROR ( ""Error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> receive <S2SV_blank> process <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0): <S2SV_blank> %s."", strerror ( errno ) <S2SV_ModEnd> ) ; shutdown <S2SV_ModStart> { ERROR ( ""Error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> IPC <S2SV_blank> notify <S2SV_blank> process <S2SV_blank> (0): <S2SV_blank> IPC <S2SV_blank> (0): <S2SV_blank> %s."", strerror ( errno ) <S2SV_ModEnd> ) ; shutdown <S2SV_ModStart> { ERROR ( ""Error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> process <S2SV_blank> privileges."" ) ; shutdown ( errno ) ; } status = procfd ; shutdown ( ipc_socket, SHUT_RDWR ) ; if ( ret == - 1 ) <S2SV_ModEnd> { ERROR ( <S2SV_ModStart> ( ""Error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> IPC <S2SV_blank> privileges."" ) ; shutdown ( - 1 ) <S2SV_ModEnd> } error =",0
65,<S2SV_ModStart> ; while ( ( line == 0 <S2SV_ModEnd> ) ) return,0
66,"<S2SV_ModStart> ( header -> biBitCount == 0 ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> biBitCount <S2SV_blank> %d\\n"", 0 ) ; return OPJ_FALSE ; } if ( header ->",1
67,<S2SV_ModStart> NULL ; } sas_probe_devices ( port ) ;,1
68,<S2SV_ModStart> 0 ) { if ( image -> colors < tga_info. colormap_index ) image -> colors = tga_info. colormap_index ;,1
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> ENOBUFS ; } memset ( & line, 0, sizeof ( line ) ) ;",1
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_blk_ioctl ( bd, cmd ) ; if ( ret < 0 ) return ret ;",1
72,<S2SV_ModStart> * s ; size_t <S2SV_ModEnd> flags ) { <S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> ndo_null> <S2SV_null>,0
73,<S2SV_ModStart> * ureq ; unsigned <S2SV_ModStart> return - EFAULT ; if ( req_len > ( QETH_BUFSIZE - IPA_PDU_HEADER_SIZE - sizeof ( struct,0
74,"<S2SV_ModStart> int m ; if ( n < 0 ) { jas_deprecated ( ""negative <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_pad"" ) ; }",1
75,<S2SV_ModStart> j ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; },0
76,<S2SV_ModStart> av_log ( mxf -> fc,1
77,"<S2SV_ModStart>, path, rootfs -> mount <S2SV_ModEnd> ) ; return",0
78,<S2SV_ModStart> + 10 ; if ( psf -> fileoffset < psf -> filelength ) { <S2SV_ModStart> ; } ; } ;,1
79,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( p + l2info -> cookie_len ) ;,1
80,<S2SV_ModStart> NF_STOLEN ; return err == 0? NF_ACCEPT : NF_DROP <S2SV_ModEnd> ; } <S2SV_null>,1
81,"<S2SV_ModStart> * up ; int klen, ulen ; <S2SV_ModStart> rta ) ; klen = <S2SV_ModEnd> xfrm_replay_state_esn_len ( up <S2SV_ModStart> ( up ) ; ulen = nla_len ( rta ) >= klen? klen : sizeof ( * up ) ; p = <S2SV_ModEnd> ; memcpy (",0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> ; } } io -> io_cleanup = io_cleanup ;,0
83,<S2SV_ModStart> ; break ; } else {,0
84,"<S2SV_ModStart>, fdstr ) ; if ( ret == NULL ) return ret ;",0
85,"<S2SV_ModStart> ( buf = jas_alloc3 ( bufsize, numcols <S2SV_ModEnd>, sizeof (",1
86,<S2SV_ModStart> map ) { ( void ) map ;,0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> gso. type ) ; netbk_fatal_tx_err ( vif",1
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> < 0 ) <S2SV_ModEnd> bitmap_pos = ext_index_add_object <S2SV_ModStart> name ) ; <S2SV_ModEnd> bitmap_set ( base",1
89,"<S2SV_ModStart> xfr_cmd, fname <S2SV_ModEnd> ) ; free",1
90,<S2SV_ModStart> mixer ) { snd_usb_mixer_disconnect ( mixer ) ;,1
91,<S2SV_ModStart> ) { struct packet_rollover * rollover = NULL ; struct <S2SV_ModStart> EINVAL ; } mutex_lock ( & fanout_mutex ) ; err = - ENOMEM ; <S2SV_ModStart> -> running ) goto out ; err = - EBUSY <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> fanout ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto out <S2SV_ModEnd> ; err = <S2SV_ModStart> } if (! rollover ) goto out <S2SV_ModEnd> ; atomic_long_set ( <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_huge <S2SV_ModStart> atomic_set ( & <S2SV_ModEnd> rollover -> num_huge <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_set ( & <S2SV_ModEnd> rollover -> num_long_set,0
92,<S2SV_ModStart> ; inet_opt <S2SV_ModEnd> = (,0
93,<S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
95,<S2SV_ModStart> pmh == INT_MAX <S2SV_ModEnd> ) { if,0
96,<S2SV_ModStart>,0
97,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } value,0
98,<S2SV_ModStart> ) ) { if ( page_name_is_good ( page <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ) { if (! page_str <S2SV_ModEnd> ( page ) <S2SV_ModStart> ) ) { return <S2SV_ModEnd> = strlen ( <S2SV_ModStart> ) ) ; } else if ( page_count == NULL ) { if (! page_count ; return ; },0
99,"<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { ret = <S2SV_ModStart> inode, EXT4_STATE_DIO_UNWRITTEN ) ; if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result <S2SV_ModStart> } if ( ( flags & EXT4_GET_BLOCKS_CONVERT ) <S2SV_ModEnd> ) { ret",1
100,<S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ;,1
101,"<S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, cgroup ) ) { ret = - ENOENT ; goto out ; } if (!",1
102,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vp8_null> 0, vpx_writer <S2SV_ModEnd> ( source_alloc_buffer, <S2SV_ModStart> int i, vpx_writer * s, <S2SV_ModEnd> ) { int <S2SV_ModStart> int i <S2SV_ModEnd> ; vp8_add_rows =",0
103,<S2SV_ModStart> ) ) { if ( ptr -> buffer ) return - EFAULT,0
104,"<S2SV_ModStart> : if (! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) bprm -> per_clear |= PER_CLEAR_ON_SETID ; if (",1
105,"<S2SV_ModStart> header, struct mb2_cache_entry <S2SV_ModEnd> * cache, <S2SV_ModStart> int error ; <S2SV_ModEnd> if ( error <S2SV_ModStart> error ; } <S2SV_ModEnd> if ( error <S2SV_ModStart> bh ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ) ; } <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> bh ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ) ; }",0
106,"<S2SV_ModStart> r, rlen <S2SV_ModEnd> ) ; }",0
107,<S2SV_ModStart> tf = ( <S2SV_ModEnd> luaY_parser ) (,1
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.",1
110,"<S2SV_ModStart> ; dl = kzalloc <S2SV_ModEnd> ( size,",1
111,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static u_int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> * tptr, const u_int len, const u_int len, const <S2SV_ModStart> * msg ; ND_TCHECK_8BITS ( tptr ) ; ND_TCHECK_8BITS ( tptr ) ; if ( * tptr == 0 ) { ND_PRINT ( ( ndo, ""%sRPKI-RTRv%u <S2SV_blank> decode)"", * tptr ) ) ; return len ; } ND_TCHECK_8BITS ( tptr + 8 ) ; if ( * tptr!= 0 ) { ND_PRINT ( ( ndo, sizeof ( rpki_rtr_pdu ) ) ; return len ; } ND_PRINT ( ndo, sizeof ( rpki_rtr_pdu ) ) ; <S2SV_ModStart> length ) ; <S2SV_ModEnd> hexdump = NULL <S2SV_ModStart> pdu_len ) ; if ( pdu_len < sizeof ( rpki_rpki_pdu ) || pdu_len > len ) goto invalid <S2SV_ModStart> case RPKI_RTR_DATA_LEN ) { ND_PRINT ( ( ndo, ""%",0
113,"<S2SV_ModStart> ; int n <S2SV_ModEnd> ; skb -> <S2SV_ModStart> rose_facilities_struct ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> data + ROSE_CALL_REQ_FACILITIES_OFF, skb -> len - ROSE_CALL_REQ_FACILITIES_OFF, <S2SV_ModEnd> & facilities )",1
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } else {,0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",0
117,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; int ret <S2SV_ModStart> ) ; } o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
118,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",1
119,"<S2SV_ModStart> == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> is <S2SV_blank> absolute"" ) ; return ( ARCHIVE_FAILED ) ; } separator = * src ++ ; } <S2SV_ModEnd> for ( ;",1
120,"<S2SV_ModStart> TPM_RC tpm_MD ( <S2SV_ModEnd>  TPM_RC_RC_HASH hashAlg, <S2SV_ModStart> ) { TPM2B_DIGEST <S2SV_ModEnd> tpm2bAlg ) { <S2SV_ModStart> = 0 ; TPM_RC_SUCCESS ; const EVP_MD * md = TPM_RC_RC_HASH ; if (! md ) { LOG_ERR ( ""HMAC <S2SV_blank> not <S2SV_blank> failed: <S2SV_blank> %s"", hashAlg ) ; return TPM_RC_DIGEST ; } <S2SV_ModStart> bytes ) { TPM2B_DIGEST ( hashAlg ) ; return TPM2B_DIGEST ;",0
121,"<S2SV_ModStart> inmem )? jas_stream_memopen2 <S2SV_ModEnd> ( 0,",0
122,<S2SV_ModStart> s ) { if ( s == 0 ) return ( ( void * ) NULL ) ;,1
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! ib_safe_file_access ( fp ) ) ) return - EACCES ; if (,1
124,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; ( void ) ResetMagickMemory ( BImgBuff, 0, ldblk * sizeof ( double ) ) ;",1
125,<S2SV_ModStart> ( peer ) peer = maybe_get_net <S2SV_ModEnd> ( peer ),1
126,<S2SV_ModStart> } while ( ( i < ( int ) header_buf_used ) && ( <S2SV_ModStart> ] == '\\n' ),1
127,<S2SV_ModStart> m_family ) ; if ( proto == LLDP_MGMT_ADDR_NONE ) continue <S2SV_ModEnd> ; if (,1
128,<S2SV_ModStart> & strlen ( dp <S2SV_ModEnd> ) ) {,0
129,<S2SV_ModStart> default_auto_asconf ) { spin_lock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ; <S2SV_ModStart> do_auto_asconf = 1 ; spin_unlock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) <S2SV_ModStart> ; } else { <S2SV_ModStart> = 0 ; },1
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> return 0 ; if ( ( s -> avctx -> avctx ) == 0 ) { if ( <S2SV_ModEnd> profile == 0 ) return 0 ; <S2SV_ModStart> ) ; } return 0 ;,0
131,<S2SV_ModStart> ; size = TEMP_FAILURE_RETRY ( <S2SV_ModStart> + 1 ) ) <S2SV_ModEnd> ; spin_unlock ( <S2SV_ModStart> ) ; if <S2SV_ModEnd> ( ++,0
132,<S2SV_ModStart> rule ) ; if (! entry -> lsm [ lsm_rule ]. rule ) return - EINVAL ;,1
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\n"" ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\n"" ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\n"" ""\\n"" ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\n"" ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> {\\n"" ""\\n"" ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\n"" ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\n"" <S2SV_ModEnd>, poll_interval )",0
136,"<S2SV_ModStart> * req, size_t <S2SV_ModEnd> len, int <S2SV_ModStart> - EINVAL ; if ( xdrlen > SIZE_MAX ) { err = - 1 ; goto out ; } <S2SV_ModStart> ) ) ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> - EPERM ) ) goto out <S2SV_ModEnd> ; } if ( <S2SV_ModStart> acl_len ) ) return - EACCES <S2SV_ModEnd> ; out :",0
137,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,1
138,<S2SV_ModStart> ; while ( ( i < to_read ) && <S2SV_ModStart>!= 0 ) <S2SV_ModEnd> ) { i,1
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,<S2SV_ModStart> [ plane ] && in -> linesize [ plane ],1
141,"<S2SV_ModStart> ( szFileName, pszFileName, <S2SV_ModStart> ) - 5 <S2SV_ModEnd> ) ; }",1
142,"<S2SV_ModStart> { if ( rootgid <S2SV_ModEnd> ( name,",0
143,<S2SV_ModStart> 1 ) ; if ( q + o >= e ) goto out ;,0
144,"<S2SV_ModStart> __be32 new_saddr ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. srr ) daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",1
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> return ; } if ( len < sizeof ( struct eigrp_common_header ) ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> %u <S2SV_blank> (too <S2SV_blank> short, <S2SV_blank> short, <S2SV_blank> short, <S2SV_blank> %u)"", eigrp_common_header ), ( u_int ) sizeof ( struct eigrp_common_header ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( tlv_tlen < sizeof ( struct eigrp_common_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short, <S2SV_blank> < <S2SV_blank> %u)"", ( u_int ) sizeof ( struct eigrp_common_header ) ) ; return ; }",0
147,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
148,"<S2SV_ModStart> int res ; unsigned long long long, table_table_table ( long long long long long long long long, sBlk ; long long long long long long long long long long long long, sBlk ; int index = SQUASHFS_BLOCKS_BLOCKS_BLOCKS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( sBlk == SQUASHFS_BLOCKS_BLOCKS_BYTES ( long long ) sBlk. sBlk. sBlk ; long long long long long long long long long long long long long long long long long long long long long, table_table_table = SQUASHFS_BLOCKS_BLOCKS_BLOCK_BYTES ( sBlk -> sBlk ) ; if ( lookup_table == NULL ) return FALSE",0
149,"<S2SV_ModStart>, '/' ) ; if ( ptr == NULL ) return ( ENOENT ) ; ptr ++ <S2SV_ModEnd> ; rw_exit (",1
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; if ( flags & EXT4_GET_BLOCKS_CONVERT ) split_flag |= EXT4_EXT_DATA_VALID2 ;,1
151,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",0
152,<S2SV_ModStart> ) ; return NULL ; },0
153,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), & final ) ; rcu_read_unlock ( <S2SV_ModEnd> ) ; dst",1
154,"<S2SV_ModStart> = 0.0 ; uint32 nstrips = 0, ntiles = 0 ; uint16 <S2SV_ModEnd> planar = 0 <S2SV_ModStart>! read_buff ) { if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return ( - 1 ) ; } <S2SV_ModStart> 3 ) ; } <S2SV_ModStart> buffsize ) { if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return ( - 1 ) ; }",1
155,"<S2SV_ModStart> ; # endif memset ( & arg, 0, sizeof ( arg ) ) ; <S2SV_ModStart> ; # else if CONFIG_VP9_HIGHBITDEPTH if (! ( args == 0 ) ) { return - 1 ; } else { arg = args = args ; } else { arg_match ( arg, & arg, & arg, & arg_max ) ; } else { arg_match ( & arg, & arg, & argi ) ; } else { arg_match ( & arg, & arg, & argi ) ; } else if ( arg_type == 0 ) { arg_match ( & arg, & arg, arg, & argi ) ) ; } else if (! ( arg_type == 0 ) ) { return - 1 ; } else { arg_match ( & arg_match ( & arg, & arg, & arg, & arg, & argi ) ; } else if CONFIG_VP9_HIGHBITDEPTH ) { return 0 ; }",0
156,<S2SV_ModStart> options. disable_forwarding ||! use_privsep,1
157,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
158,"<S2SV_ModStart> ) ; } if ( ( ( MagickSizeType ) image -> columns * image -> rows ) > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",1
159,"<S2SV_ModStart> errout ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ""xxxx"" ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart> -> gr_ctx. length = 4 <S2SV_ModEnd> ; gr ->",1
160,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; <S2SV_ModStart> -> i_data, ext_size ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size <S2SV_ModEnd> ) ; neh",1
161,<S2SV_ModStart> ) { return 0 <S2SV_ModEnd> ; SSL_assert0 ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 1 ;,0
162,<S2SV_ModStart> ; int ret ; if ( current_chrooted ( ) ) return - EPERM,1
163,<S2SV_ModStart> if ( CHECK_AES_KEY_SIZE!= 0 ) goto failure ; if (,0
164,"<S2SV_ModStart> c -> nreslevels <= <S2SV_ModEnd> s -> reduction_factor <S2SV_ModStart> -> reduction_factor ) { av_log ( s -> avctx, AV_LOG_ERROR, ""reduction_factor <S2SV_blank> too <S2SV_blank> large <S2SV_blank> for <S2SV_blank> this <S2SV_blank> bitstream, <S2SV_blank> max <S2SV_blank> is <S2SV_blank> %d\\n"", c -> nreslevels - 1 ) ; s -> reduction_factor = c -> nreslevels - 1 ; return AVERROR ( EINVAL ) ; } <S2SV_ModEnd> c -> nreslevels2decode",1
165,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
166,<S2SV_ModStart> ; bool is_drop_n_account = false ; bool do_vnet <S2SV_ModStart> -> has_vnet_hdr ) { <S2SV_ModStart> virtio_net_hdr ) ; do_vnet = true ; } <S2SV_ModStart> < 0 ) { <S2SV_ModStart> = 0 ; do_vnet = false ; } <S2SV_ModStart> -> max_frame_len ; do_vnet = false ; <S2SV_ModStart> ; if ( do_vnet <S2SV_ModEnd> ) { if,1
167,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> sctp_auth_asoc_init_active_key ( asoc,1
168,<S2SV_ModStart> return false ; if ( ndp_msg_type_info ( msg_type ) -> addrto_validate ) return ndp_msg_type_info ( msg_type ) -> addrto_validate ( & msg -> addrto ) ; else,1
169,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int on_labelfd <S2SV_ModEnd> = - 1 <S2SV_ModStart> = - 1 <S2SV_ModEnd> ; const char <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> write <S2SV_blank> profile"" ) ; <S2SV_ModEnd> goto out ; <S2SV_ModStart> ""Failed <S2SV_blank> write <S2SV_blank> profile"" ) ; <S2SV_ModEnd> goto out ; <S2SV_ModStart> ( write ( lsm_labelfd, command ) ;",0
170,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
171,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
172,<S2SV_ModStart> NULL ) { const VP9EncoderConfig <S2SV_ModEnd> * const cpi <S2SV_ModStart> -> common ; <S2SV_ModEnd> if ( cpi <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> 0 ) { if ( cpi -> twopass. gf_group == 0 ) { cpi -> twopass. gf_group = & cpi -> twopass. gf_group. flags ; } else { cpi -> twopass. gf_group. gf_group = & cpi -> twopass. gf_group. gf_group ; } else { cpi -> twopass. gf_group = & cpi -> twopass. gf_group ; } else { cpi -> twopass. gf_group = & cpi -> gf_group ; } else { cpi -> twopass. gf_group. gf_group = & cpi -> <S2SV_ModEnd> ; } <S2SV_ModStart> ( cpi -> <S2SV_ModEnd> _group,0
173,"<S2SV_ModStart> } num ++ ; if ( num > MaxAllocSize / ITEMSIZE ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> levels <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num, ( int ) ( MaxAllocSize / ITEMSIZE ) ) ) )",1
174,"<S2SV_ModStart> header, struct mb2_cache_entry <S2SV_ModEnd> * * pce <S2SV_ModStart> ) ; struct mb2_cache_entry * ce ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> hash ) ; ce = mb2_cache_entry_find_first <S2SV_ModEnd> ( ext4_mb_cache, <S2SV_ModStart> ( ext4_mb_cache, <S2SV_ModEnd>  hash,",0
175,"<S2SV_ModStart> { gint64 offset <S2SV_ModEnd> ; char line <S2SV_ModStart> = offset ; return parse_cosine_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> -> phdr, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> wth -> frame_buffer, line",1
176,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
177,<S2SV_ModStart> if ( left == 0 && extend ) return 0 ; if ( left,1
178,"<S2SV_ModStart> < 0 ) { <S2SV_ModStart> ) ) { return 0 ; } <S2SV_ModStart> ) ) ; } grub_malloc <S2SV_ModEnd> ( buf,",0
179,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
180,"<S2SV_ModStart> - ENOMEM ; * ( ( struct vbg_ioctl_hdr * ) buf ) = hdr ; <S2SV_ModStart> copy_from_user ( buf + sizeof ( hdr ) <S2SV_ModStart> * ) arg + sizeof ( hdr ), hdr. size_in - sizeof ( hdr ) <S2SV_ModEnd> ) ) {",1
181,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) { hstartrow <S2SV_ModEnd> = ( numrows <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; n = <S2SV_ModStart> & a [ hstartrow <S2SV_ModEnd> * stride ],0
182,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
183,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
184,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_mb_cache ) { ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ; sbi -> s_mb_cache = NULL ; } <S2SV_ModEnd> if (!,1
185,<S2SV_ModStart> file -> desc. bNumEndpoints < 0,0
186,"<S2SV_ModStart> ""setregid"" ) ; <S2SV_ModEnd> char * arg <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [",1
187,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) <S2SV_ModStart> ci_parent ) ; else return NULL ;,1
188,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
189,<S2SV_ModStart> ( pb ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA,1
190,<S2SV_ModStart> if ( q < p || q,1
191,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = &,1
192,<S2SV_ModStart> char * dir <S2SV_ModEnd> ; dir =,0
193,<S2SV_ModStart> prev ) ; n -> mounts += n -> pending_mounts ; n -> pending_mounts = 0 ;,1
194,"<S2SV_ModStart> ; savesegment ( fs, ds <S2SV_ModEnd> ) ; savesegment",0
195,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
196,<S2SV_ModStart> } else { return ret <S2SV_ModEnd> ; } if,0
197,<S2SV_ModStart> 1u << DB_VECTOR ) | ( 1u << AC_VECTOR,1
198,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> 1 ] ; u_int stringlen ; stringlen = len ; if ( stringlen > NFSX_V3FHMAX ) stringlen = NFSX_V3FHMAX ; <S2SV_ModStart>, sfsname, stringlen <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ; temp [ stringlen <S2SV_ModEnd> ] = '\\0'",1
199,"<S2SV_ModStart> unsigned int flags, struct rt6_info * rt <S2SV_ModStart> ( & fhdr, rt",1
200,<S2SV_ModStart> ( res ) goto err_add_port <S2SV_ModEnd> ; res = <S2SV_ModStart> port ) ; err_add_port : hsr_del_node ( & hsr -> self_node_db ) ;,1
201,<S2SV_ModStart> endif # endif <S2SV_ModEnd> if ( ( strlen,0
202,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const <S2SV_ModStart> int plane_stride, const <S2SV_ModStart> int strides [ 3 <S2SV_ModEnd> ] = { const <S2SV_ModStart> src -> uv_stride <S2SV_ModEnd> ] = { const <S2SV_ModStart> src -> uv_stride <S2SV_ModEnd> } ; const <S2SV_ModStart> int strides [ 3 <S2SV_ModEnd> ] = { int",0
203,<S2SV_ModStart> ; if ( len < 4 ) return 0,0
204,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { return assign_eip_far ( ctxt, dst, ctxt -> mode == X86EMUL_MODE_PROT64 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
205,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
206,"<S2SV_ModStart> ; remaining = tvb_reported_length_remaining <S2SV_ModEnd> ( tvb,",1
207,<S2SV_ModStart> ( iter ) <S2SV_ModEnd> ; if (,0
208,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
209,"<S2SV_ModStart> ( fval, <S2SV_ModEnd> )!= 0",0
210,<S2SV_ModStart> ; if ( pmc_overflow ( val ) <S2SV_ModEnd> ) write_pmc (,1
211,"<S2SV_ModStart> ( * b + len, * avail - len <S2SV_ModEnd>, nl )",1
212,"<S2SV_ModStart> * o = NULL <S2SV_ModEnd> ; char * <S2SV_ModStart> 0 ) { return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart>, str ) ) { return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart> 0 ) { return NULL ; } <S2SV_ModEnd> if (! PyUnicode",0
213,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
214,<S2SV_ModStart> string ) ) { <S2SV_ModEnd> c = c,0
215,"<S2SV_ModStart> == 0 ) mark_key_instantiated ( key, 0 <S2SV_ModEnd> ) ; up_write",1
216,<S2SV_ModStart> <= * len && plen > 0,1
217,<S2SV_ModStart> ; args. rmtvaluelen = valuelen ; args.,1
218,<S2SV_ModStart> ; if ( <S2SV_ModEnd> timeout == NULL <S2SV_ModStart> ; if ( compat_get_timespec <S2SV_ModEnd> ( & ktspec <S2SV_ModStart> > 0 && compat_put_timespec <S2SV_ModEnd> ( & ktspec,1
219,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
220,<S2SV_ModStart> ndev ) ; <S2SV_ModEnd> assert ( skb <S2SV_ModStart> q_num ) ; return <S2SV_ModEnd> hns_nic_net_xmit_hw ( skb <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
221,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
222,<S2SV_ModStart> } if ( <S2SV_ModEnd> udp_specified && settings,1
223,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
224,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> else {,0
225,<S2SV_ModStart> found = 0 <S2SV_ModEnd> ; const char <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( found,1
226,"<S2SV_ModStart> int validate_event ( struct pmu * pmu, <S2SV_ModStart> arm_pmu * armpmu <S2SV_ModEnd> ; struct hw_perf_event <S2SV_ModStart> -> pmu!= pmu ) return 0 ; if ( event -> pmu!= <S2SV_ModStart> return 1 ; armpmu = to_arm_pmu ( event -> pmu ) ;",1
227,"<S2SV_ModStart> bool new_idmap_permitted ( const struct file * file, <S2SV_ModStart>, cap_setid ) && file_ns_capable ( file, ns -> parent, cap_setid )",1
228,<S2SV_ModStart> j ++ ) { if ( a -> type == szMAPI_BINARY ) <S2SV_ModStart> ) ; } },1
229,"<S2SV_ModStart> hx ; u8 * buf <S2SV_ModEnd> ; int ret <S2SV_ModStart> = 0 ; u16 cpu_cs_register = <S2SV_ModEnd> cypress [ <S2SV_ModStart> ]. cpu_cs_register ; buf = kmalloc ( sizeof ( * hx ), GFP_KERNEL ) ; if (! buf ) return - ENOMEM ; buf [ 0 ] = 1 ; if ( <S2SV_ModEnd> usb_cypress [ 0 ] <S2SV_ModStart> ; kfree ( buf <S2SV_ModEnd> ) ; return",0
230,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; if ( ptr ) { ND_PRINT ( ( ptr ) ) ; ND_PRINT ( ( ndo, ""AVP <S2SV_blank> short"" ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; val_h : if ( ptr ) < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ptr ++ ; val_h = EXTRACT_16BITS ( ptr ) ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ) ; ptr ++ ; val_h = EXTRACT_16BITS ( ptr ) ; val_h = EXTRACT_16BITS ( ptr ) ; val_h = EXTRACT_16BITS ( ptr )",0
231,"<S2SV_ModStart> princ ) ; success = data_eq_string ( * realm, <S2SV_ModEnd> handle -> params <S2SV_ModStart> params. realm ) && data_eq_string ( * c1, ""kadmin"" ) &&! data_eq_string ( * c2, ""history"" ) ; <S2SV_ModEnd> fail_princ : if",1
232,<S2SV_ModStart> ; if ( shader_rec_offset < args -> bin_cl_size ||,1
233,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
234,<S2SV_ModStart> vma -> vm_file ) ; down_read ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModStart> ; out : up_read ( & EXT4_I ( inode ) -> i_mmap_sem ) ;,1
235,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
236,<S2SV_ModStart> arg ) { char ch = * arg ; switch ( ch <S2SV_ModEnd> ) { case <S2SV_ModStart> ';' : case '=' : case <S2SV_ModStart> b ++ = ch <S2SV_ModEnd> ; break ;,1
237,"<S2SV_ModStart> && nmap ) <S2SV_ModEnd> cp = ikev1_attrmap_print <S2SV_ModStart>, cp, ep2, map, nmap ) ; else cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> < ep2 ) <S2SV_ModEnd> ND_PRINT ( (",1
238,<S2SV_ModStart> } GsmIceConnectionS2SV_null> <S2SV_null> <S2SV_null>,0
239,<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) < skb -> head +,1
240,<S2SV_ModStart>,0
241,<S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ;,0
242,<S2SV_ModStart> & RCV_SHUTDOWN ) return 0 ; <S2SV_ModEnd> return err ; <S2SV_ModStart> msg_namelen ) ; <S2SV_ModEnd> } skb_free_datagram (,1
243,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
244,<S2SV_ModStart> int strides [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> uv_buffer <S2SV_ModEnd> } ; int,0
245,"<S2SV_ModStart>, j ; * md_out = NULL ; md = calloc ( 1, sizeof ( <S2SV_ModEnd> * md ) <S2SV_ModStart> goto cleanup ; ret = rfc2253_name <S2SV_ModEnd> ( X509_get_subject_name ( <S2SV_ModStart> cert ), & <S2SV_ModEnd>  md ) ; if",0
246,<S2SV_ModStart> (! npages || base_gfn!= old. base_gfn,1
247,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ru,1
248,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
249,<S2SV_ModStart> * ni ; unsigned int length_left ; u_int j ; ND_TCHECK ( rp -> rip6_cmd <S2SV_ModEnd> ) ; switch <S2SV_ModStart> case RIP6_REQUEST : length_left = length ; if ( length_left < ( sizeof ( struct rip6 ) - sizeof ( struct rip6 ) ) ) goto trunc ; length_left -= ( sizeof ( struct rip6 ) - sizeof ( struct rip6 ) ) ; j = length_left <S2SV_ModEnd> / sizeof ( <S2SV_ModStart> j == 1 ) { ND_TCHECK ( rp -> rip6_nets ) ; if ( length_left!= length_left ) goto trunc ; } <S2SV_ModStart> case RIP6_REQUEST : length_left = length_left <S2SV_ModEnd> ; j += <S2SV_ModStart> ni -> rip6_nets ; length_left = length_left <S2SV_ModEnd> ; break ; <S2SV_ModStart> ni -> rip6_left <S2SV_ModEnd> ; } } else <S2SV_ModStart> -> rip6_nets ; length_left <S2SV_ModEnd> <S2SV_null>,0
250,<S2SV_ModStart> < 0 ) goto error ; <S2SV_ModEnd> goto set ;,1
251,<S2SV_ModStart> -> mb_map ; memset <S2SV_ModEnd> ( cpi ->,0
252,"<S2SV_ModStart> argc ++ ; retval = bprm_change_interp ( iname, bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> ; interp_file =",1
253,<S2SV_ModStart> ; int iSrc <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> res -> ContribRow <S2SV_ModStart> u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ].,1
254,<S2SV_ModStart> user ) { memset_user * user ;,0
255,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".cfg\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n""",1
256,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> len = strlen,0
257,"<S2SV_ModStart> ( mobj ) { size_t granularity = BIT ( tee_mm_sec_ddr. shift ) ; <S2SV_ModStart>, 0, ROUNDUP ( size, granularity ) ) ; } <S2SV_ModEnd> return mobj ;",1
258,<S2SV_ModStart> -> it_overrun += 1LL <S2SV_ModEnd> << i ;,1
259,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( NCH ( <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { n <S2SV_ModStart> } else { n = CHILD ( n, 1 ) ; if ( strcmp ( CHILD ( n, 0 ) ) == CHILD ( n, ""async"" ) == 0 ) { n = CHILD ( n, 1 ) ; if (! n, 1 ) return NULL ; } else if ( <S2SV_ModStart> ( n, n, n, true <S2SV_ModEnd> )!= <S2SV_ModStart> ) ) { n = CHILD ( n, 1 ) ; if ( n = CHILD ( n, 1 ) == TYPE ( n, 1 ) ) { n = CHILD ( n, 1 ) ; if (! TYPE ( n, ""async"" ) ) { n = CHILD ( n, 1 ) ; if ( n = CHILD ( n, 1 ) ) == TYPE ( n, 1 ) ; } if ( <S2SV_ModStart> = NULL <S2SV_ModEnd> ( n,",0
260,<S2SV_ModStart> curframe -> frame_state [ i ] = 0 ;,0
261,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static const VP9_COMMON * const VP9_COMMON * const cm, const MACROBLOCKD * const x, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> mi -> mbmi_ext ; const MACROBLOCKD * const mbmi_ext = xd -> mbmi_ext ; const MODE_INFO * const mbmi_INFO * const mbmi_ext = xd -> mbmi_ext ; const MB_INFO * const MB_INFO * const MB_MODE <S2SV_ModEnd> mi -> mbmi <S2SV_ModStart> mbmi_ext = vp9_get_mi <S2SV_ModEnd> ( cm, <S2SV_ModStart>, w ) ; vpx_write <S2SV_ModEnd> ( w,",0
262,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
263,"<S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; n <S2SV_ModStart> = r -> qiov. size <S2SV_ModEnd> / 512 ; <S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; }",1
264,<S2SV_ModStart> if ( cs >= <S2SV_ModEnd> CQSPI_MAX_CHIPSELECT ) {,1
265,<S2SV_ModStart> case SWIO : if ( WARN_ON ( n == 0 ) ) return 0 ;,0
266,<S2SV_ModStart> ) break ; if ( l > ll ) l = ll ;,1
267,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
268,<S2SV_ModStart> < 0 || <S2SV_ModEnd> ND_TTEST ( *,0
269,<S2SV_ModStart> = rq -> task <S2SV_ModEnd> ; } <S2SV_null>,0
270,"<S2SV_ModStart> ret ; uint8_t * buffer ; uint8_t * buffer ; int ret ; buffer = kmalloc ( 1, GFP_KERNEL ) ; if (! buffer ) return - ENOMEM <S2SV_ModEnd> ret <S2SV_ModStart>, reg, buffer <S2SV_ModEnd>, 1, <S2SV_ModStart> ret ) ; if ( <S2SV_ModEnd> ret >= 0 <S2SV_ModStart> ret >= 0 ) { value = buffer [ 0 ] ; kfree ( buffer ) ; return value ; } else { kfree ( buffer ) ; return <S2SV_ModEnd> ret ; } <S2SV_ModStart> ret ; } }",0
271,<S2SV_ModStart>,0
272,"<S2SV_ModStart> ; } } s -> append_char ( s, 0 ) ; strncpy <S2SV_ModEnd> ( outbuffer,",1
273,<S2SV_ModStart> ( ) ) <S2SV_ModEnd> return NULL ;,0
274,<S2SV_ModStart> = 0 ; ( i + 3 ) <S2SV_ModEnd> < sec -> <S2SV_ModStart> = 0 ; ( i + 7 ) <S2SV_ModEnd> < sec ->,1
275,<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_BW_OLD : if ( subl == 0 ) break ; <S2SV_ModStart> ++ ) { <S2SV_ModEnd> bw. i,0
276,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ) ( ptr,0
277,"<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> low ) ; }",0
278,<S2SV_ModStart> unsigned short flags ; <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
279,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
280,"<S2SV_ModStart> ) continue ; if ( vif -> tx. sring -> req_prod - vif -> tx. req_cons > XEN_NETIF_TX_RING_SIZE ) { netdev_err ( vif -> dev, ""Impossible <S2SV_blank> size <S2SV_blank> of <S2SV_blank> requests. <S2SV_blank> "" ""req_prod <S2SV_blank> %d, <S2SV_blank> req_cons <S2SV_blank> %d, <S2SV_blank> size <S2SV_blank> %ld\\n"", vif -> tx. sring -> req_prod, vif -> tx. req_cons, XEN_NETIF_TX_RING_SIZE ) ; netbk_fatal_tx_err ( vif ) ; continue ; } <S2SV_ModStart> 0 ) ) continue ; <S2SV_ModEnd> } ret =",0
281,<S2SV_ModStart> endif # endif <S2SV_ModEnd> if ( ( strlen,0
282,<S2SV_ModStart> args ) ; <S2SV_ModEnd> return 0 ;,0
283,<S2SV_ModStart> conn ) ; if ( <S2SV_ModStart> ( conn )!= 0 ) return,1
284,"<S2SV_ModStart> ) ; struct <S2SV_ModEnd> skb_shared_info * shinfo <S2SV_ModStart> err ) ) xen_netbk_idx_release ( netbk, pending_idx <S2SV_ModEnd>, XEN_NETIF_RSP_ERROR ) <S2SV_ModStart> netbk, pending_idx <S2SV_ModEnd>, XEN_NETIF_RSP_NETIF_RSP_ERROR ) <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_NETIF_RSP_OKAY <S2SV_ModStart> netbk, pending_idx <S2SV_ModEnd>, XEN_NETIF_RSP_NETIF_RSP_OKAY <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_RSP_OKAY",0
285,,1
286,"<S2SV_ModStart> ) NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ) NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ;",1
287,"<S2SV_ModStart> len < 0 <S2SV_ModEnd> ) { syslog <S2SV_ModStart> 1 ; } if ( addr. nl_pid ) { syslog ( LOG_WARNING, ""Received <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> untrusted <S2SV_blank> pid:%u"", addr. nl_pid ) ; continue ; }",1
288,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
289,<S2SV_ModStart> ipc == NULL && client -> session == NULL,1
290,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> return NULL ;,0
291,"<S2SV_ModStart>, nameptr, lfi, fname, UDF_NAME_LEN <S2SV_ModEnd> ) ; if",1
292,"<S2SV_ModStart> ip_vs_timeout_user t ; memset ( & t, 0, sizeof ( t ) ) ;",1
293,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> np -> opt ) ; rcu_read_unlock (",0
294,<S2SV_ModStart> ; ssize_t result ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
295,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, path1, & next <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ) { if ( fpath && strcmp ( next, fpath ) == 0 ) ret = - EEXIST ; else ret = - ENOENT <S2SV_ModEnd> ; goto out <S2SV_ModStart> if (! fc_may_access ( fc, controller, path1, NULL, O_RDWR ) ) { ret = - EACCES ; goto out ; } if (! <S2SV_ModStart> cgdir ) ; free ( next ) ;",1
296,<S2SV_ModStart> ) ) { put_disk ( disk ) ;,1
297,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
298,"<S2SV_ModStart> { if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( ( image <S2SV_ModStart> { if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( number_pixels,",1
299,<S2SV_ModStart> ; int i <S2SV_ModEnd> ; if (,0
300,<S2SV_ModStart> ; rinfo = kzalloc <S2SV_ModEnd> ( SZ_SG_REQ_INFO *,1
301,"<S2SV_ModStart> ; # endif install_keyword ( ""umask"", & umask_handler ) ;",1
302,<S2SV_ModStart> data ) { ( void ) ctx ;,0
303,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> kfree ( tmpbuf,1
304,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; }",1
305,<S2SV_ModStart> ( box = jp2_box_create0 ( ) ) ) { goto error ; } <S2SV_ModEnd> if ( jp2_box,0
306,"<S2SV_ModStart> * new, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> * new, size_t <S2SV_ModEnd> new_size ) {",0
307,"<S2SV_ModStart> ; int copylen = 0 <S2SV_ModStart> goto err ; err = - EMSGSIZE ; if ( unlikely ( count > UIO_MAXIOV ) ) goto err ; <S2SV_ModStart> zerocopy ) { if ( count > MAX_SKB_FRAGS ) { copylen = iov_length ( iv, count - MAX_SKB_FRAGS ) ; if ( copylen < vnet_hdr_len ) copylen = 0 ; else copylen -= vnet_hdr_len ; } if ( copylen < vnet_hdr. hdr_len )",1
308,<S2SV_ModStart> ( struct ipv6hdr <S2SV_ModEnd> ) ; unsigned <S2SV_ModStart> while ( offset <S2SV_ModEnd> <= packet_len ) <S2SV_ModStart> packet_len ) { struct ipv6_opt_hdr * exthdr ; <S2SV_ModStart> offset ; } if ( offset + sizeof ( struct ipv6_opt_hdr ) > packet_len ) return - EINVAL ; exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + offset ) ; <S2SV_ModStart> -> nexthdr ; } return - EINVAL <S2SV_ModEnd> ; } <S2SV_null>,1
309,"<S2SV_ModStart> write_bit_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_write_bit <S2SV_ModEnd> ( wb,",0
310,<S2SV_ModStart> i ++ ) { <S2SV_ModEnd> if (!,0
311,<S2SV_ModStart>! vnet_hdr ) { <S2SV_ModEnd> if (!,0
312,<S2SV_ModStart> } if ( <S2SV_ModEnd> djrcv_dev -> paired_dj_devices,1
313,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
314,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
315,<S2SV_ModStart>,0
316,"<S2SV_ModStart> 101, ( ""jas_realloc(%x, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",1
317,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
318,<S2SV_ModStart> CPU_FTR_TM_COMP ) && hv_enabled <S2SV_ModEnd> ; break ;,1
319,<S2SV_ModStart> ms_msap_reset ( struct msap ),0
320,"<S2SV_ModStart> key_name ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. key, HV_KVP_EXCHANGE_MAX_KEY_SIZE / 2 <S2SV_ModStart> value ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. value, HV_KVP_EXCHANGE_MAX_VALUE_SIZE / 2",1
321,<S2SV_ModStart> -> log_ctx ; if ( event ) return - EINVAL ;,0
322,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
323,"<S2SV_ModStart> * parg = ( void * ) arg ; long err = - EINVAL ; if ( _IOC_SIZE ( _IOC_SIZE ( cmd ) < _IOC_SIZE - sizeof ( cmd ) ) ) return - EINVAL ; parg = - EINVAL ; if ( _IOC_DIR ( _IOC_SIZE ( cmd ) & _IOC_SIZE ( cmd ) & _IOC_SIZE ( cmd ) arg, _IOC_SIZE ( cmd ) ) ) = - EINVAL ; if ( _IOC_DIR ( cmd ) < _IOC_SIZE ( cmd ) & _IOC_SIZE ( cmd ) & _IOC_SIZE ( cmd ) ) ) { uint8_t * ) memset ( _IOC_SIZE ( cmd ), 0, _IOC_SIZE ( cmd ), _IOC_SIZE ( cmd ), _IOC_SIZE ( cmd ) ) ; } else { unsigned char * ) ; if ( _IOC_SIZE ( cmd ) & _IOC_SIZE ( cmd ) & _IOC_SIZE ( cmd ) & _IOC_SIZE ( cmd ) - n ) <S2SV_ModEnd> ) ;",0
324,<S2SV_ModStart>,0
325,"<S2SV_ModStart> u16 size, const <S2SV_ModStart> data ) { void * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, buf <S2SV_ModEnd>, size, <S2SV_ModStart> 500 ) ; kfree ( buf ) ; return ret ;",1
326,<S2SV_ModStart> file -> desc. bNumEndpoints < 0,0
327,"<S2SV_ModStart> ) { case GTK_RESPONSE_OK : { file = nautilus_file_get_metadata ( parameters -> file ) ; nautilus_file_get_metadata ( parameters -> file ) ; nautilus_file_get_metadata ( parameters -> current ) ; nautilus_file_get_metadata ( parameters -> file, NAUTILILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED, NULL, ""yes"" ) ; nautilus_file_get_metadata ( parameters -> file ) ; <S2SV_ModEnd> screen = gtk_screen <S2SV_ModStart> uri ) ; <S2SV_ModEnd> g_unref ( file",0
328,<S2SV_ModStart> ; if ( urb -> actual_length > 0 &&,1
329,"<S2SV_ModStart> * server, struct smb_vol * vol ) { <S2SV_ModEnd> struct cifsSesInfo * <S2SV_ModStart> cifs_ses_lock ) { list_for_each_entry ( ses <S2SV_ModEnd>, & server <S2SV_ModStart> server -> smb_ses_list, ses <S2SV_ModEnd> ) ; if",0
330,<S2SV_ModStart> vpx_codec_err_t res ; if ( cfg -> g_w!= NULL || cfg -> g_h == ( cfg -> g_h ) || cfg -> g_h!= VPX_RC_PASS <S2SV_ModEnd> ) || <S2SV_ModStart> ( cfg -> g_h!= VPX_PASS <S2SV_ModEnd> ) || <S2SV_ModStart> g_pass == VPX_PASS <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( cfg -> g_h!= NULL && ( int,0
331,"<S2SV_ModStart> =='<S2SV_blank>') { input ++ ; } <S2SV_ModEnd> ptr = strchr <S2SV_ModStart> off ) ) { <S2SV_ModStart> ) ; } } <S2SV_ModStart> ) ) ) { <S2SV_ModStart> ""Unknown <S2SV_blank> filesystem <S2SV_blank> type\\n"" ) ; } <S2SV_ModStart> offset ) ) { <S2SV_ModStart> input ) ; }",1
332,"<S2SV_ModStart> inode ) ; struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> ; if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",1
333,<S2SV_ModStart> key * keyring ; if ( new -> thread_keyring ) return 0,1
334,<S2SV_ModStart> ; size_t max_rfd = 0 ; <S2SV_ModStart> return - 1 ; <S2SV_ModEnd> copy ++,0
335,"<S2SV_ModStart> orig ) ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; <S2SV_ModStart> mrb_io_alloc ( mrb <S2SV_ModEnd> ) ; DATA_TYPE",1
336,"<S2SV_ModStart>, int ret <S2SV_ModEnd> ; if (",0
337,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
338,"<S2SV_ModStart> return res ; res = utee_param_to_param ( utc, <S2SV_ModEnd> param, callee_params <S2SV_ModStart>, callee_params ) ; if ( res!= TEE_SUCCESS ) return res",1
339,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; const struct x86_emulate_ops * ops = ctxt -> ops -> cpl ( ctxt ) ; old_eip = ctxt -> ops -> ops -> cpl ( ctxt ) ; ops -> get_segment ( ctxt, & old_cs, NULL <S2SV_ModEnd>, VCPU_SREG_CS ) <S2SV_ModStart>, VCPU_SREG_CS ) <S2SV_ModEnd> ; rc = <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> return X86EMUL_CONTINUE ;",0
340,<S2SV_ModStart> -> band = av_calloc <S2SV_ModEnd> ( reslevel -> <S2SV_ModStart> -> prec = av_calloc <S2SV_ModEnd> ( reslevel ->,1
341,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
342,<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( obj -> <S2SV_ModStart> * ) ; memset <S2SV_ModEnd> ( obj ->,0
343,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) { WARN_ON_ONCE ( info -> si_code < 0 ) ; <S2SV_ModEnd> return - EPERM <S2SV_ModStart> - EPERM ; },1
344,"<S2SV_ModStart> * p_tx0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdx, <S2SV_ModEnd> p_image -> x0 <S2SV_ModStart> * p_ty0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdx, <S2SV_ModEnd> p_image -> x1 <S2SV_ModStart> * p_ty0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdx, <S2SV_ModEnd> p_image -> y1",0
345,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * create_output_name <S2SV_ModStart> *,0
346,"<S2SV_ModStart> classes = NULL ; zval * retval <S2SV_ModStart> ; } } retval = var_tmp_var ( & var_hash ) ; <S2SV_ModStart>! php_var_unserialize_ex ( retval <S2SV_ModEnd>, & p <S2SV_ModStart> ) ; } <S2SV_ModEnd>  if",0
347,<S2SV_ModStart> goto __err ; tu -> qhead = tu -> qtail = tu -> qused = 0 ;,1
348,<S2SV_ModStart> char ) ; if (! zfound ) return GF_ISOM_INVALID_FILE ; zfound = GF_FALSE <S2SV_ModStart> j ] ) { zfound = GF_ISOM_INVALID_FILE ; break ; } <S2SV_ModStart> j ] ) ; if (! zfound ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> j ++ ; } <S2SV_ModEnd> j ++ ;,0
349,<S2SV_ModStart>. get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },0
350,"<S2SV_ModStart> == 0 ) if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; }",0
351,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) { WARN_ON_ONCE ( info -> si_code < 0 ) ; <S2SV_ModEnd> return - EPERM <S2SV_ModStart> - EPERM ; },1
352,"<S2SV_ModStart> -> off = strtoull <S2SV_ModEnd> ( p, <S2SV_ModStart> -> filesize = strtoull <S2SV_ModEnd> ( slash +",1
353,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> maxw, max, offx, loopmaxh <S2SV_ModStart>, upb ; size_t i <S2SV_ModEnd> ; upb = <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxh = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> goto fails ; offx = img -> x0 & 1U ; loopmaxw = img -> comps [ 0 ]. data ; loopmaxw = img -> comps [ 0 ]. w = img -> comps [ 0 ]. w ; d2 = img -> comps [ 0 ]. w = img -> comps [ 0 ]. data ; d2 = img -> comps [ 1 ]. w = img -> comps [ 0 ]. w = img -> comps [ 0 ]. w ; loopmaxw = img -> comps [ 0 ]. w = img -> comps [ 0 ]. data ; d2 = img -> comps [ 0 ]. w = img -> comps [ 1 ]. w ; <S2SV_ModEnd> img -> comps <S2SV_ModStart> & ~ ( size_t <S2SV_ModEnd> max ) <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart>",0
354,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = mode_null> <S2SV_null> <S2SV_null>",0
355,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; ssh_dispatch_set ( ssh, SSH2_MSG_KEXINIT, NULL ) ;",1
356,"<S2SV_ModStart> { assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.constants.two <S2SV_blank> 1 <S2SV_blank> == <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\""tests\\""tests\\""tests\\""tests\\"" <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.empty() <S2SV_blank> ==",0
357,<S2SV_ModStart> read_info ) ; <S2SV_ModEnd> if ( EOFBlob,1
358,"<S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strtest [ 512 <S2SV_ModEnd> ] ; if <S2SV_ModStart> ( ltest, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( ltest, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( ntest!= 511 <S2SV_ModEnd> && ntest!= <S2SV_ModStart> && ntest!= 511 <S2SV_ModEnd> ) ; if",0
359,<S2SV_ModStart> intf ) { <S2SV_ModEnd> if ( cdc_ncm_select_altsetting <S2SV_ModStart> - ENODEV ; return <S2SV_ModEnd> cdc_ncm_bind_common ( dev <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
360,<S2SV_ModStart> len ) ; if ( len < len ) return - 1 ;,0
361,"<S2SV_ModStart> i ++, jsize <S2SV_ModEnd> ) ) {",0
362,"<S2SV_ModStart>, e -> elems, e ->",1
363,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
364,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
365,<S2SV_ModStart> q ) { mutex_lock ( & q -> timer_mutex ) ; <S2SV_ModStart> snd_seq_timer_close ( q ) ; mutex_unlock ( & q -> timer_mutex,1
366,"<S2SV_ModStart> int error ; unsigned int nr_blks ; inode_t lblock <S2SV_ModEnd> = offset >> <S2SV_ModStart> = offset >> inode -> i_blks ; if ( unlikely ( error ) ) return error ; error = gfs2_get ( ip -> i_blkbits ) ; if ( unlikely ( error ) ) { error = gfs2_add_buffer ( ip, & bh_map ( ip, inode, & bh_map ) ) ; if ( error ) goto out ; } if ( unlikely ( error ) ) { error = gfs2_add ( ip -> i_map. b_map. b_size, & bh_size ) ; error = gfs2_add ( ip -> i_map, & bh_map. b_size ) ; if ( unlikely ( error ) ) ) goto out ; } bh_map = bh_size = gfs2_map ( & bh_map, 1 ) ; len = gfs2_map. b_map. b_size = gfs2_map. b_map. b_size ; len = bh_map. b_size -= bh_size ; if ( unlikely ( error ) ) goto out ; nr_map = bh_map. b_map. b_",0
367,<S2SV_ModStart> VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; if ( load -> error ) return ( NULL <S2SV_ModStart> -> real ) || <S2SV_ModEnd> vips_foreign_load_iscompat ( load <S2SV_ModStart> out ) ) { vips_operation_invalidate ( VIPS_OPERATION ( load ) ) ; load -> error = TRUE ; return ( NULL ) ; } <S2SV_ModEnd> vips_image_pipelinev ( load,1
368,<S2SV_ModStart> ) ) ; if ( name == NULL ) { err_msg = - EITERR ; return ; },0
369,<S2SV_ModStart> ; if (! retval ) <S2SV_ModEnd> retval = context,1
370,<S2SV_ModStart> = - ENOMEM <S2SV_ModEnd> ; state ->,0
371,<S2SV_ModStart> service_name_tlv_length ) ; if (! service_name_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if (! miux_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if (! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; },1
372,"<S2SV_ModStart> * sock, size_t <S2SV_ModEnd> ) ; if",0
373,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, cfg, <S2SV_ModStart> ; if (! ( cfg ) <S2SV_ModEnd> ) return VPX_CODEC_OK <S2SV_ModStart> ; } else { get_codec_alg_priv ( ctx, & cfg ) ;",0
374,<S2SV_ModStart> char * chable <S2SV_ModEnd> ; if (,0
375,"<S2SV_ModStart> ( interface, 0",0
376,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; if (,0
377,<S2SV_ModStart> len ; } ND_TCHECK_32BITS <S2SV_ModEnd> ( p + <S2SV_ModStart> p + 2 <S2SV_ModEnd> ) ; ND_PRINT,1
378,<S2SV_ModStart> 0 ; } if ( unlikely ( IPCB ( skb ) -> opt. optlen ) ) skb_dst_force ( skb ) ; else,1
379,<S2SV_ModStart> private ) { struct skcipher_tfm * tfm = private ; crypto_free_skcipher ( tfm -> skcipher ) ; kfree ( tfm <S2SV_ModEnd> ) ; },1
380,<S2SV_ModStart> bprm ) { <S2SV_ModEnd> int retval ; <S2SV_ModStart> int retval ; bprm_fill_uid ( bprm ) ; <S2SV_ModEnd> retval = security_bprm_set_creds,1
381,<S2SV_ModStart> : vcount = 1 <S2SV_ModEnd> ; if (,0
382,<S2SV_ModStart> ; dlen -= 3 <S2SV_ModEnd> ; for (,0
383,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
384,<S2SV_ModStart>,0
385,<S2SV_ModStart> - EOPNOTSUPP ; msg -> msg_namelen = 0 ;,0
386,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nla ) ) return 0 ; if (,0
387,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; }",0
388,"<S2SV_ModStart> bp, len ) ; break ; case ETHERTYPE_TEB : ether_print ( ndo, bp, len <S2SV_ModStart> ndo_snapend - bp <S2SV_ModEnd>, NULL,",1
389,"<S2SV_ModStart> ; } } if ( tile_buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size."" ) ; exit ( - 1 ) ; } <S2SV_ModStart> _TIFFmalloc ( tile_buffsize + 3 <S2SV_ModStart> 0 ) return 0 ; tilebuf [ tile_buffsize ] = 0 ; tilebuf [ tile_buffsize + 1 ] = 0 ; tilebuf [ tile_buffsize + 2 ] =",1
390,<S2SV_ModStart> O_APPEND | O_CREAT | O_NOFOLLOW,1
391,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ; } <S2SV_null>,0
392,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> -> nd_num ) { ret = <S2SV_ModEnd> - EBUSY ; <S2SV_ModStart> - EBUSY ; goto out ; } <S2SV_ModStart> ( ret ) goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> nd_num ; } ret = count ; out : o2nm_unlock_subsystem ( ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>,1
393,<S2SV_ModStart> ( fp ) <S2SV_ModEnd> < 2 ),0
394,<S2SV_ModStart> 0 ) ; if ( len!= 0 ) { <S2SV_ModStart> op ) ; },0
395,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
396,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
397,<S2SV_ModStart> return - E_NOTHANDLED ; if ( ninst == 0 ) return - E_INVALID,1
398,<S2SV_ModStart> len - 1 <S2SV_ModEnd> ; if (,0
399,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
400,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( &,0
401,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",0
402,<S2SV_ModStart> ( ) ; if (! tbuf ) { return NULL ; },1
403,"<S2SV_ModStart> int err ; memset ( & r, 0, sizeof ( r ) ) ;",0
404,<S2SV_ModStart> <S2SV_null> <S,0
405,<S2SV_ModStart> 0 ) ; if ( c -> port == NULL ) { <S2SV_ModStart> } } },0
406,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> rowstride ) { if (! context ||! bmpdata || ( rowstride == 0 ) ) return FALSE ; if (! <S2SV_ModStart>, rowstride ) ) return FALSE <S2SV_ModStart> ChromaSubsamplingLevel ) { if (! <S2SV_ModStart> ( context ) ) return FALSE ; } return TRUE ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
407,"<S2SV_ModStart> void vp9_tree_probs ( const vpx_tree_probs <S2SV_ModEnd> * tree,",0
408,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS,1
409,<S2SV_ModStart> return ( ( ( <S2SV_ModStart> ) / 8 ) * GetPSDPacketSize ( image ),1
410,"<S2SV_ModStart> 1, ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> p ) )",0
411,<S2SV_ModStart> bMasterInterface0 ) ; if (! pcu -> ctrl_intf ) return - EINVAL ; <S2SV_ModStart> bSlaveInterface0 ) ; if (! pcu -> data_intf ) return - EINVAL ;,1
412,"<S2SV_ModStart> const char * devname = kstrdup ( dev_name ( & <S2SV_ModEnd> d -> udev <S2SV_ModStart> udev -> dev ), GFP_KERNEL ) ; const char * drvname = d -> name <S2SV_ModStart> d ), GFP_KERNEL ) ; kfree ( devname <S2SV_ModEnd> ) ; kfree",0
413,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpx ) <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpy )",1
414,<S2SV_ModStart> target_enc ) { return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION <S2SV_ModEnd> ; } else,1
415,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static MagickBooleanType <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart> image, ssize_t bit <S2SV_ModEnd>, unsigned char <S2SV_ModStart> image ) { int bit ; Quantum index <S2SV_ModEnd> ; register Quantum <S2SV_ModStart> ; register Quantum * q ; ssize_t x ; q = SetPixelInfo ( image, image -> columns, image -> columns, y, exception ) ; if ( q == ( ssize_t ) index = ( ssize_t ) index <S2SV_ModEnd> ) return ( <S2SV_ModStart> 0x80 >> bit <S2SV_ModEnd> ) { index <S2SV_ModStart> index = ( ssize_t ) index <S2SV_ModEnd> ( * p <S2SV_ModStart> 0x80 >> bit <S2SV_ModEnd> )? 0x80 >> bit <S2SV_ModStart> q ) ; if ( index < image -> colors ) SetPixelViaPixelInfo ( image, image -> colormap + ( ssize_t ) index, q ) ; <S2SV_ModStart> bit < ( ssize_t ) ( <S2SV_ModEnd> ) index",0
416,"<S2SV_ModStart> u_char * tptr, const u_int length ) { u_int length ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> case AFNUM_INET : if ( length < 1 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> type)"" ) ) ; return hexdump ; } <S2SV_ModStart> case AFNUM_INET : if ( length!= 1 + <S2SV_ModEnd> ) { ND_PRINT (",0
417,"<S2SV_ModStart> ; u64 msr_data, rcx, rdx <S2SV_ModStart> = X86EMUL_MODE_PROT64 ; rcx = reg_read ( ctxt, VCPU_REGS_RDX ) ; rdx = reg_read ( ctxt, VCPU_REGS_RDX ) ; <S2SV_ModStart> = 1 ; <S2SV_ModEnd> if (",0
418,<S2SV_ModStart> dev ) ; ssize_t len ; device_lock ( dev ) ; len = <S2SV_ModEnd> sprintf ( buf <S2SV_ModStart> driver_override ) ; device_unlock ( dev ) ; return len ;,1
419,"<S2SV_ModStart> BIO * tmpout ; tmpout = cms_get_bio ( out, flags ) ; if (! tmpout ) { if (! tmpout ) { CMSerr ( CMS_F_CMS_CMS_TEXT ) ; goto err ; } for ( ; ) ; ) { i = BIO_read ( in, buf, sizeof ( buf ) ) ; if ( i < 0 ) goto err ; } if ( <S2SV_ModStart> CMS_TEXT ) { <S2SV_ModEnd> if (!",0
420,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( retval == 0 ) rs. enc_tkt_reply -> flags |= TKT_FLG_PRE_AUTH ;,1
421,"<S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> tree ) {",0
422,"<S2SV_ModStart> = ""/tmp"" ; # ifdef HAVE_MKDTEMP tmp_dir = mkdtemp ( Strnew_m_charp ( tmp_dir, ""/w3m-XXXXXX"", NULL ) -> ptr ) ; if ( tmp_dir == NULL ) tmp_dir = rc_dir ; # endif",1
423,"<S2SV_ModStart> = 0 ; size_t pathlen = 0 ; <S2SV_ModStart> case AF_UNIX : pathlen = sizeof ( <S2SV_ModEnd> ( ( struct <S2SV_ModStart> ) -> sun_path ) ; if ( MAXPATHLEN <= pathlen ) { pathlen = MAXPATHLEN - 1 ; } strncpy ( addr_text, ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, pathlen ) ; addr_text [ pathlen <S2SV_ModEnd> ] = '\\0'",1
424,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output,",0
425,"<S2SV_ModStart> ; err : memset ( dev, 0, sizeof ( dev ) ) ;",0
426,"<S2SV_ModStart> ) { struct hugepage_subpool * spool = subpool_vma ( vma ) ; struct <S2SV_ModStart> page * page <S2SV_ModEnd> ; long chg <S2SV_ModStart> ) if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> page ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> unsigned long ) spool <S2SV_ModEnd> ) ; vma_put_pages",0
427,"<S2SV_ModStart> filegen_string ) ; if ( NULL == filegen ) { msyslog ( LOG_ERR, ""stats <S2SV_blank> %s <S2SV_blank> unrecognized"", filegen_string ) ; continue ; } <S2SV_ModStart> filegen_file ) ; if ( NULL == filegen ) { msyslog ( LOG_ERR, ""filegen <S2SV_blank> category <S2SV_blank> \'%s\' <S2SV_blank> unrecognized"", filegen_file ) ; continue ; }",1
428,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; timer_set_state",1
429,<S2SV_ModStart>,0
430,<S2SV_ModStart> endif # endif # ifdef HAVE_FDS2SV_null> <S2SV_null> # endif,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
433,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
434,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> AVINDEX_KEYFRAME ) ; },1
435,<S2SV_ModStart> & strlen ( dp <S2SV_ModEnd> ) ) {,0
436,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> out ; } <S2SV_ModEnd> if (! <S2SV_ModStart>, cgroup, & next ) ) { if (! fpath || strcmp ( next, fpath ) == 0 ) ret = - EACCES ; else ret = - ENOENT ; goto out ; } if (! fc_may_access ( fc, controller, controller, cgdir, NULL ) ) { ret = - EACCES ; goto out ; } if (! <S2SV_ModStart> cgdir ) ; free ( next ) ;",0
437,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flag & CL_UNPRIVILEGED <S2SV_ModStart> & CL_UNPRIVILEGED ) { mnt -> mnt. mnt_flags |= MNT_LOCK_NODEV ; if <S2SV_ModEnd> ( mnt -> <S2SV_ModStart> mnt_flags & MNT_READONLY <S2SV_ModEnd> ) mnt -> <S2SV_ModStart> ; if ( mnt -> mnt. mnt_flags & MNT_NODEV ) mnt -> mnt. mnt_flags |= MNT_LOCK_NODEV ; if ( mnt -> mnt. mnt_flags & MNT_NOSUID ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOSUID ; if ( mnt -> mnt. mnt_flags & MNT_NOSUID ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOEXEC ; } if (,0
438,<S2SV_ModStart> rds_loop_transport ; } <S2SV_ModEnd> } conn ->,1
439,<S2SV_ModStart> * rsize >= 112 <S2SV_ModEnd> && rdesc [,1
440,<S2SV_ModStart> if ( ( ( <S2SV_ModStart> ) < bodyLength ) || ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ),1
441,<S2SV_ModStart> ( likely ( serio <S2SV_ModEnd> &&! filtered,1
442,"<S2SV_ModStart>! er ) { ND_TCHECK ( <S2SV_ModEnd> dp [ 0 <S2SV_ModStart> 0 ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> c <S2SV_blank> %04x"", EXTRACT_32BITS ( & dp [ 0 ] ) ) ) ; } <S2SV_ModEnd> return ; case",1
443,"<S2SV_ModStart> * newName, int newLen, <S2SV_ModStart> * udfName, int udfLen, <S2SV_ModEnd> uint8_t * fidName <S2SV_ModStart> ( newIndex < newLen <S2SV_ModEnd> ) newName [ <S2SV_ModStart> } newLen = newLen - CRC_LEN <S2SV_ModEnd> - newLen",0
444,"<S2SV_ModStart> <S2SV_null> <S2SV_nullnull> static const VP9_COMMON * const VP9_COMMON * const cm, MACROBLOCKD * const xd, <S2SV_ModEnd> int mi_cols, <S2SV_ModStart> * mi_cols, MACROBLOCKD * const xd, <S2SV_ModEnd> int mi_cols ) { <S2SV_ModStart> mi_cols, mi_cols ) { <S2SV_ModEnd> int mi_cols + <S2SV_ModStart> 1_cols, mi_cols ) ; <S2SV_ModEnd> if ( mi_cols <S2SV_ModStart> ( mi_cols, mi_row, mi_cols ) ; vpx_read <S2SV_ModEnd> ( cpi, <S2SV_ModStart> * mi, mi_cols, mi_col, mi_cols, mi_cols ) ; <S2SV_ModEnd> } else const <S2SV_ModStart> cm -> mi_cols + mi_cols + mi_cols + mi_col + mi_cols - mi_cols ) { <S2SV_ModEnd> -> mi_cols + <S2SV_ModStart> 0 ; vpx_read <S2SV_ModEnd> ( cpi,",0
445,<S2SV_ModStart> ) break ; <S2SV_ModEnd> if (!,0
446,<S2SV_ModStart> = 0 ; unsigned long b_blocks = 0 ; <S2SV_ModStart> -> b_state = ext4_blocks <S2SV_ModEnd> ; if (,0
447,"<S2SV_ModStart> * s ; const unsigned char * p = sigbuf ; unsigned char * der = NULL ; int derlen = - 1 ; <S2SV_ModStart> s, & p <S2SV_ModEnd>, siglen ) <S2SV_ModStart> == NULL ) goto err ; derlen = i2d_DSA_SIG ( s, & der ) ; if ( derlen!= siglen || memcmp ( sigbuf, der, derlen ) ) <S2SV_ModStart> ; err : if ( derlen > 0 ) { OPENSSL_cleanse ( der, derlen ) ; OPENSSL_free ( der ) ; }",1
448,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> rv =! <S2SV_ModStart> NULL ) ; } else { rv = NULL ; },0
449,<S2SV_ModStart> ) ; } if ( bprm -> interp!= bprm -> filename ) kfree ( bprm -> interp ) ;,1
450,"<S2SV_ModStart> (! p -> ai_addr, <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; OE_EINVAL ; } if ( <S2SV_ModEnd> p -> ai <S2SV_ModStart>, & p -> ai_namelen, 0 ) > OE_SS_MAX <S2SV_ModStart> ) ) return retval <S2SV_ModEnd> ; } if",0
451,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
452,"<S2SV_ModStart> ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> image <S2SV_blank> dimensions"" ) ; goto done ; }",1
453,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
454,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; else if ( ret <= size ) memcpy ( data, buf, ret ) ; kfree ( buf ) ;",0
455,"<S2SV_ModStart> * body, size_t <S2SV_ModEnd> p -> type <S2SV_ModStart> * body ; if (",0
456,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
457,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> write_frame_size ( const int64_t <S2SV_ModEnd> src, int <S2SV_ModStart> flags & ctx -> ts_start <S2SV_ModEnd> ) { int <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> flags & 1 ) { vpx_write_buffer_depth = 1 ; break ; } # endif <S2SV_ModStart> } # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> mb + 1 ) > 0 ) { # endif <S2SV_ModStart> = 0 ; } # endif <S2SV_ModEnd> } # endif <S2SV_ModStart> ; # endif # if CONFIG_VP9_HIGHBITDEPTH",0
458,<S2SV_ModStart> ) ; } fuse_conn_put ( & cc -> fc ) ;,1
459,"<S2SV_ModStart> ( code ) { * status = ""DECODE_PA_S4U_X509_USER"" ; return code ; } <S2SV_ModEnd> code = verify_s4u_x509_user_checksum",1
460,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
461,<S2SV_ModStart> cur_pic. field_picture <S2SV_ModEnd> ) return 0,1
462,"<S2SV_ModStart> off ) { struct rds_header * sgp = & rm -> type ; int ret = sizeof ( struct rds_header ) ; <S2SV_ModStart> 0 ) ; ret = min_t ( int, ret, ret, ret, ret <S2SV_ModEnd> ; } <S2SV_null>",0
463,<S2SV_ModStart> buf ) ) { return 0 ; } <S2SV_ModEnd> ext_block = (,1
464,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,1
465,<S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },0
466,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
467,"<S2SV_ModStart> ; uint8_t data_siz ; uint32_t data_siz ; uint32_t data_siz = 0 ; <S2SV_ModStart> } * data_siz ; if ( hmi_siz < hmi_tmp ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __FUNCTION__, __LINE__, ""file <S2SV_blank> too <S2SV_blank> short"", 0 ) ; goto _hmi_end ; } data_siz = data_siz ; <S2SV_ModStart> += 4 ; if ( hmi_siz < hmi_tmp ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, __LINE__, __LINE__, __LINE__, __LINE__, WM_ERR_NOT_HMI, WM_HMI, ""file <S2SV_blank> too <S2SV_blank> short"", 0 ) ; goto _hmi_end ; } data_siz -= data_siz <S2SV_ModStart> += 4 ; data_siz = data_siz ; <S2SV_ModStart> += 4 ; if ( length > data_siz ) { hmi_siz -= 4 ; goto _hmi_tmp ; } data_siz -= hmi_tmp ; <S2SV_ModStart> += 4 ; } data_siz -= hmi_tmp ; <S2SV_ModStart> += setup_tmp ; data_siz",0
468,<S2SV_ModStart> -> id ; haddr -> hci_channel = 0 ;,1
469,<S2SV_ModStart> -> i_iget5_offset ; fh16 [ 3 ] = 0 ;,1
470,"<S2SV_ModStart> ( kdc_active_realm, client. princ <S2SV_ModEnd>, request ->",1
471,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> = S64_MAX ; <S2SV_ModEnd> if ( src_known,1
472,"<S2SV_ModStart> -> oxcf ; const VP9_COMMON * const oxcf = & cpi -> oxcf ; const <S2SV_ModStart> = vp9_filter_level_level_level_level ( cpi -> oxcf, <S2SV_ModEnd> ) ; const <S2SV_ModStart> = 1 ; const int max_frame_level = vp9_get_frame_level ( cm, cm -> oxcf, cm -> bit_depth, cm -> bit_depth ) ; # if CONFIG_P_VP9_HIGHBITDEPTH if ( qindex > MAXQ ) { vp9_get_frame_level ( sd, cm -> bit_depth, cm -> bit_level ) ; } else { <S2SV_ModStart> = 0 ; } } else { <S2SV_ModEnd> if ( sf <S2SV_ModStart> } else {",0
473,<S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; },0
474,"<S2SV_ModStart> ) length ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModStart> ""UnableToReadImageData"" ) ; }",0
475,"<S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, MAXALIGN",0
476,<S2SV_ModStart> void usage_exit ( void,1
477,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
478,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
479,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
480,"<S2SV_ModStart>. data_sz, get_alg_priv ( ctx ) <S2SV_ModEnd>, data, <S2SV_ModStart> ; if (! get_alg_priv ( data ) <S2SV_ModEnd>, data )",0
481,<S2SV_ModStart> ; if ( * value == 0 ||,1
482,<S2SV_ModStart> int ret ; <S2SV_ModEnd> S2SV_null> <S2SV_null>,0
483,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
484,"<S2SV_ModStart> ; if ( snpal == 6 ) ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> %u) <S2SV_blank> %u) <S2SV_blank> %u) <S2SV_blank> (length: <S2SV_blank> %u) <S2SV_blank> %s"", netal, netal, <S2SV_ModEnd> 0 ) ) ;",0
485,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> c"", <S2SV_ModStart> c ) ; sendClean ( outputbuffer ) ;",0
486,<S2SV_ModStart> } else { return false ; } else if <S2SV_ModEnd> } else if <S2SV_ModStart> } else { return false <S2SV_ModEnd> ; } else if <S2SV_ModStart> } else { return false <S2SV_ModEnd> ; idx =,0
487,<S2SV_ModStart> case IS_STRING : { zval dval ; dval = * * zval_affine_elem ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> ) ; affine <S2SV_ModStart> i ] = Z_DVAL ( dval ) ; } <S2SV_ModEnd> break ; default <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { rect. x = <S2SV_ModStart> ) ; } } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { rect. y = <S2SV_ModStart> ) ; } } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval l,1
488,<S2SV_ModStart> ( self ) <S2SV_ModEnd> return NULL ;,0
489,<S2SV_ModStart> SQL_DROP ) ; <S2SV_ModEnd> return 0 ;,1
490,"<S2SV_ModStart> ; r = __copy_from_user <S2SV_ModEnd> ( data,",1
491,"<S2SV_ModStart>, * q <S2SV_ModEnd> ; Clp_Parser * <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I"" ) <S2SV_ModStart> ) ; } if ( isdigit ( unsigned char ) <S2SV_ModStart> ; isspace ( unsigned char )",0
492,<S2SV_ModStart> = 0 ; info -> port = NULL ;,1
493,<S2SV_ModStart> -> ctx. <S2SV_ModEnd> pmu = pmu,1
494,"<S2SV_ModStart> iovec * iovec, struct iov_iter * iter ) { if ( len > MAX_RW_COUNT ) len = MAX_RW_COUNT ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> = 1 ; iov_iter_init ( iter, rw, iovec, * nr_segs, len ) ;",1
495,<S2SV_ModStart> ext4_group_t flex_group ; unsigned <S2SV_ModStart> -> s_log_groups_per_flex ; if ( sbi -> s_log_groups_per_flex < 1 || sbi -> s_log_groups_per_flex > 31 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } <S2SV_ModStart> -> s_log_groups_per_flex ; <S2SV_ModEnd> flex_group_count = (,1
496,<S2SV_ModStart> ( unlikely ( chunk -> pdiscard ) ) return 0 ; if ( unlikely (,1
497,"<S2SV_ModStart> == 0 ) i ++,",0
498,"<S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; if ( <S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; if (",1
499,<S2SV_ModStart> <= w - ( int ),1
500,<S2SV_ModStart> callback_args -> forward_matches ; assert ( match_offset + match_length <= callback_args -> data_size ),1
501,<S2SV_ModStart> options. disable_forwarding && use_privsep,1
502,"<S2SV_ModStart> { if ( length > SMKTREE_DECODE_MAX_RECURSION ) { av_log ( NULL, AV_LOG_ERROR, ""Maximum <S2SV_blank> tree <S2SV_blank> recursion <S2SV_blank> level <S2SV_blank> exceeded.\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",1
503,<S2SV_ModStart> err ; } if ( m -> msg_name ),1
504,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_ignores <S2SV_ModEnd>, & tmp <S2SV_ModStart> ) ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""item"" ) ; return 1 ; } else <S2SV_ModEnd> { int res <S2SV_ModStart> ; res = obj2ast_int i <S2SV_ModEnd> ( PyId_ignores <S2SV_ModEnd>, arena ) <S2SV_ModStart> ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores <S2SV_ModEnd>, & PyId_type_ignores <S2SV_ModStart> tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; type_ignores <S2SV_ModEnd> ) ; return 1 ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( lookup_attr_id ( obj, & PyId_type_ignores <S2SV_ModEnd>, arena ) <S2SV_ModStart> ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores <S2SV_ModEnd>, i,",0
505,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) { hstartrow <S2SV_ModEnd> = ( numrows <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; n = <S2SV_ModStart> & a [ hstartrow <S2SV_ModEnd> * stride ],1
506,"<S2SV_ModStart> ""REPLY_ADD_STA <S2SV_blank> PASSED\\n"" ) ; ret = iwl_sta_ucode_activate ( priv, sta_id ) <S2SV_ModEnd> ; break ;",1
507,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
508,"<S2SV_ModStart> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> x"" ) ; assert_regexp_syntax_error ( ""\\\\x0"" ) ; assert_regexp_syntax_error ( ""\\\\x"" ) ;",0
509,"<S2SV_ModStart> & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ) { while ( 1 ) { <S2SV_ModStart> ] ) ; if (! queue ) break ; <S2SV_ModEnd> if ( free_func <S2SV_ModStart> ( free_func ) spin_unlock_irq ( & hashbin -> hb_lock, flags ) ; if ( hashbin -> hb_spinlock, flags ) spin_unlock_irqrestore ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModEnd> } 1",0
510,<S2SV_ModStart> EPERM ; return - EPERM <S2SV_ModEnd> ; } if,0
511,"<S2SV_ModStart> copied, err <S2SV_ModEnd> ; int vnet_hdr_len <S2SV_ModStart> out_free ; } copied = skb -> len ; if ( copied > len ) { copied = len ; msg -> msg_namelen = len ; } copied = skb_copy_datagram_iov ( skb, 0, copied ) ; if ( err ) goto out_free ; <S2SV_ModEnd> } if (",0
512,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
513,"<S2SV_ModStart> ( serial -> num_bulk_out <S2SV_ModEnd> < 2 ) <S2SV_ModStart> < 2 ) { dev_err ( & serial -> interface -> dev, ""missing <S2SV_blank> bulk <S2SV_blank> out <S2SV_blank> endpoints\\n"" ) ; return - ENODEV ; } <S2SV_ModEnd> port = serial",1
514,"<S2SV_ModStart> write_junk = 1, table_length = 0 <S2SV_ModStart> ; DS64Chunk ds64_chunk ; CS64Chunk cs64_chunk <S2SV_ModStart> ds64_chunk ) ; ds64_chunk += table_length * sizeof ( cs64Chunk ) ;",0
515,"<S2SV_ModStart> NULL ; } <S2SV_ModEnd> if ( msg_namelen <S2SV_ModStart> -> msg_namelen, & addr_len <S2SV_ModEnd> ) ; if",0
516,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> unsigned int <S2SV_ModEnd> maxh, int <S2SV_ModStart> = 0 ; int bh_blocks <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 1 ; if ( ext2SV_null> <S2SV_null> int ) { ext2SV_null>",0
517,"<S2SV_ModStart>, input -> codec <S2SV_ModEnd> ) ; }",0
518,<S2SV_ModStart> return FALSE ; { BOOL rc ; <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) rc = <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) if (! rc ) return FALSE ; } { BOOL rc ; <S2SV_ModStart> -> prof_nsc_decode ) rc = <S2SV_ModStart> -> prof_nsc_decode ) if (! rc ) return FALSE ; },1
519,"<S2SV_ModStart> -> dict ) && xmlDictOwns ( ctxt -> dict, value )",1
520,"<S2SV_ModStart> ; if ( is_link ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> %s <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> ) ; } copy_file_as_user ( fname, fname,",0
521,"<S2SV_ModStart> * req, size_t <S2SV_ModEnd> len, int <S2SV_ModStart> - EINVAL ; if ( xdrlen > SIZE_MAX ) { err = - 1 ; goto out ; } <S2SV_ModStart> ) ) ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> - EPERM ) ) goto out <S2SV_ModEnd> ; } if ( <S2SV_ModStart> acl_len ) ) return - EACCES <S2SV_ModEnd> ; out :",0
522,<S2SV_ModStart> f ) return false <S2SV_ModEnd> ; } if,0
523,<S2SV_ModStart> = msix + <S2SV_ModEnd> ) ; if,0
524,<S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( &,1
525,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
526,<S2SV_ModStart> ( d ) + 1 <S2SV_ModEnd> ) ; if,0
527,"<S2SV_ModStart> multipart_media ; struct range_data * r = & clt -> clt_ranges ; struct range * range <S2SV_ModEnd> ; size_t content_length <S2SV_ModStart> ; size_t content_length = 0 <S2SV_ModStart> if ( nranges = ( ( nranges, nranges, & clt -> st_ranges [ 0 ] ) ) { range = & r -> clt -> clt_ranges [ i ] ; range_length = & clt -> clt -> range [ 0 ] ; for ( i = 0 ; i < nranges ; i ++ ) { range = & r -> range [ i ] ; r -> range [ i ] ; for ( i < nranges ; i ++ ) { range [ i ] ; i ] = & r -> clt_boundary ; for ( i < 0 ; i ++ ) { range = & r -> range [ i ] ; for ( i = 0 ; i < nranges ; for ( i ++ ) { range = & r -> range [ i ] ; for ( i < 0 ; i ++ ) { range = & r -> range [ i ] ; for ( i ++ ) { range = & r -> range [ i ] ; for ( i < 0 ; i ++ ) {",0
528,<S2SV_ModStart>,0
529,"<S2SV_ModStart> void write_bit_buffer ( const VP9_COMMON * cm, struct vpx_wb_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm, vpx_wb_write_bit_buffer <S2SV_ModEnd> ( wb,",0
530,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
531,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
532,<S2SV_ModStart> tmp ) { goto softfail <S2SV_ModEnd> ; } case <S2SV_ModStart> ) ) { goto softfail <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; softfail : state -> offset = 0 ;,1
533,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
534,<S2SV_ModStart> flags ) { spin_lock ( & ctx -> cancel_lock ) ; <S2SV_ModStart> } } else { __timerfd_remove_cancel <S2SV_ModEnd> ( ctx ) <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> cancel_lock ) ;,1
535,"<S2SV_ModStart> ) ) ; if ( c16 -> Curves [ i ] == NULL ) { for ( j = 0 ; j < i ; j ++ ) { _cmsFree ( ContextID, c16 -> Curves [ j ] ) ; } _cmsFree ( ContextID, c16 -> Curves ) ; _cmsFree ( ContextID, c16 ) ; return NULL ; }",1
536,<S2SV_ModStart> { if (! dev_name ||,1
537,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
538,"<S2SV_ModStart> data ) ; memcpy ( msg, & msg_tmp, sizeof ( * msg ) ) ; <S2SV_ModStart> -> m_pdwGetRing + sizeof ( * msg ) - space_rem <S2SV_ModEnd> ) ; memcpy_fromio",0
539,<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { efree ( replaced ) ; RETURN_FALSE ; },1
540,<S2SV_ModStart> ; if ( length > 0 ||,0
541,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
542,<S2SV_ModStart>,0
543,"<S2SV_ModStart> name ) ; if (! strcmp ( key, ""url"" ) && value && looks_like_command_line_option ( value ) ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_URL, ""disallowed <S2SV_blank> submodule <S2SV_blank> url: <S2SV_blank> %s"", value ) ;",1
544,"<S2SV_ModStart> i ] ; int row_ptr ; int row_ptr = 0 ; <S2SV_ModStart> -> buffer_ptr == 0 ) { av_log ( s -> buf_ptr, av_log ( s -> buf_ptr, AV_LOG_ERROR ) ; }",0
545,<S2SV_ModStart> cnt ) { ssize_t <S2SV_ModEnd> n ; assert,1
546,<S2SV_ModStart> ; __be16 type ; if ( NAPI_GRO_CB ( skb ) -> encap_mark ) goto out ; NAPI_GRO_CB ( skb ) -> encap_mark = 1,1
547,<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { return 0 ; } if (,1
548,<S2SV_ModStart> ; if ( session == NULL ) {,0
549,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,0
550,<S2SV_ModStart> -> u4_first_slice_in_pic = 1 <S2SV_ModEnd> ; ps_dec ->,0
551,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> = S64_MAX ; <S2SV_ModEnd> if ( src_bitness,0
552,<S2SV_ModStart> ) ; goto out_mount <S2SV_ModEnd> ; } if,0
553,"<S2SV_ModStart> vfio_irq_set hdr ; size_t size ; <S2SV_ModStart> NULL ; int max, <S2SV_ModStart> NULL ; size = 0 ; size_t size = 0 ; size_t size_t size_t size ; <S2SV_ModStart> NULL ) { if ( hdr. count > max ) return - EINVAL ; case VFIO_IRQ_SET_SET_DATA_DATA_MASK : size = 0 ; break ; case VFIO_IRQ_SET_SET_DATA_SET_SIZE : size = sizeof ( int32_t ) ; break ; case VFIO_IRQ_SET_DATA_NONE : size = sizeof ( uint8_t ) ; break ; default : size = sizeof ( int32_t ) ; default : return - EINVAL ; } if ( size",0
554,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ext4_has_inline_data ( inode,1
555,<S2SV_ModStart> -> filesize = UINT64_MAX <S2SV_ModEnd> ; s ->,1
556,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
557,"<S2SV_ModStart> char * in, size_t olen <S2SV_ModStart> += 4 ; if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ;",1
558,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
559,"<S2SV_ModStart> i ; size_t bytes, <S2SV_ModStart> ++ ) { bytes <S2SV_ModEnd> = MIN ( <S2SV_ModStart>, 0, bytes <S2SV_ModEnd> ) ; if",0
560,<S2SV_ModStart> & CP_RDESC_SWAPPED_MIN_MAX ) ) return rdesc ; if ( * rsize < 4,1
561,"<S2SV_ModStart> int current_frame, vpx_reader <S2SV_ModEnd> * svc_ctx <S2SV_ModStart> int i, twopass, twopass <S2SV_ModStart> ; i ; int i ; for ( i = 0 ; i < svc_ctx -> svc_layers ; i ++ i ) { int i ; for ( i = 0 ; i < 2 ; i -> svc_ctx -> svc_layers ; i ++ i ++ i ) { int i ; ++ i ; ++ i ++ i ; ++ i ++ i ++ i ++ i ++ i ; for ( i = 0 ; i < num_layers ; i ++ i ++ i ++ i ++ i ) { int i ; ++ i ++ i ; i ++ i ++ i ++ i ++ i ++ i ; for ( i = 0 ; i < get_svc -> svc_ctx -> svc_ctx -> svc_context [ i ] ; i ] = ( svc_ctx, svc_ctx -> svc_ctx -> svc_layer_id, i ) ; for ( i < 1 ; i ++ i ++ i ++ i ++ i ++ i ++ i ++ i ++ i ++ ; ++ i ++ i ++ i ++ i ++ i ++ i ++ i ; for ( i < number_layers ; i ++ i ++ i ++",0
562,<S2SV_ModStart>,0
563,<S2SV_ModStart> ; if ( screen -> sb_rows == NULL ) return NULL ; if (,0
564,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> char * str, char * end <S2SV_ModEnd>, char * <S2SV_ModStart>, end, char * end_end - end <S2SV_ModEnd> ) { char * <S2SV_ModStart> * str ; char * end_end = 1 ; char * end_end <S2SV_ModEnd> ; const char * <S2SV_ModStart> * str ; char * end_end = str ; if ( * end == end && <S2SV_ModStart> ) { if ( * end == ']' && * end_end ) { if ( * end_start_end = 1 ; return 1 ; } } return 0 ; if ( * end_end == end_end && <S2SV_ModStart> ) { const char * str = str ; return 0 ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> ; } } return 0 ;",0
565,"<S2SV_ModStart> * m, size_t <S2SV_ModEnd> bufsize ) { <S2SV_ModStart> * buf ; <S2SV_ModEnd> JAS_DBGLOG ( 100 <S2SV_ModStart> 100, ( ""mem_resize(%p, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, m,",0
566,<S2SV_ModStart> g_data ) ; <S2SV_ModEnd> char * dd,0
567,<S2SV_ModStart> pred ) { return <S2SV_ModEnd> ; } else,0
568,<S2SV_ModStart> pcrypt_free ( struct aead_instance <S2SV_ModEnd> * inst ) <S2SV_ModStart> * ctx = aead_instance_ctx <S2SV_ModEnd> ( inst ),1
569,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> int w ;,0
570,"<S2SV_ModStart> } if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if (",1
571,<S2SV_ModStart> icmp6_hop_limit ) { if ( <S2SV_ModStart> icmph. icmp6_hop_limit < <S2SV_ModEnd> ra,0
572,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
573,<S2SV_ModStart> * up ; int ulen ; <S2SV_ModStart> rp ) ; ulen = xfrm_replay_state_esn_len ( up ) ; if ( nla_len ( rp ) < ulen || <S2SV_ModEnd> xfrm_replay_state_esn_len ( replay_esn <S2SV_ModStart> replay_esn )!= ulen <S2SV_ModEnd> ) return -,1
574,"<S2SV_ModStart> int ret = proc_dointvec_minmax <S2SV_ModEnd> ( table,",1
575,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
576,<S2SV_ModStart> opj_calloc ( ( size_t ) ( <S2SV_ModStart> -> numlayers + 1U <S2SV_ModEnd> ) * l_step_l,0
577,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
578,"<S2SV_ModStart> = 0 ; int i <S2SV_ModEnd> ; clear_state ( <S2SV_ModStart>, ps, i <S2SV_ModEnd> ) ) ; if",0
579,"<S2SV_ModStart> const tile, MACROBLOCKD * const cm, MACROBLOCKD * const td, MACROBLOCKD * const xd, <S2SV_ModStart> -> common ; <S2SV_ModEnd> MODE_INFO * <S2SV_ModStart> MODE_INFO * mi_row, int mi_row, int mi_row, int mi_col <S2SV_ModEnd> ; MODE_INFO * <S2SV_ModStart> mi_INFO * const mi_col ; int mi_col ; int mi_col ; int mi_col = MIN ( mi_row, mi_row, mi_col + mi_col + mi_col ) ; <S2SV_ModStart> ( xd, mi_col, mi_col, <S2SV_ModEnd>, mi_col, <S2SV_ModStart>, mi_row, mi_row, mi_row, mi_col, mi_row <S2SV_ModEnd>, & mi_row <S2SV_ModStart> mi_col ) { <S2SV_ModStart> mi_col ) ; <S2SV_ModEnd> if ( mi_col > BLOCK_64_64_SIZE <S2SV_ModStart> ( cpi, mi_row, mi_col ) ; # if CONFIG_VP9_VP9_VP9_BASE <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ( cpi, tile_data, mi_col + mi_col + mi_row <S2SV_ModEnd>, mi_col + <S2SV_ModStart> mi_row, mi_row, mi_col )",0
580,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",1
581,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
582,<S2SV_ModStart> } else { # ifdef UPNP_ENABLE_POST_WRITE <S2SV_ModStart> return HTTP_UNAUTHORIZED ; # else return HTTP_NOT_FOUND ; # endif,1
583,<S2SV_ModStart> char * dir <S2SV_ModEnd> ; dir =,0
584,<S2SV_ModStart> blkg ) ) <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> blkg ) ; <S2SV_ModEnd> q -> root_blkg,1
585,<S2SV_ModStart> ; if ( bpp == 1 && <S2SV_ModStart> else if ( bpp == 8 &&,1
586,"<S2SV_ModStart> ; krb5_data rspac ; const char * tgt_realm = krb5_principal_get_realm ( context, krbtgt -> entry. principal ) <S2SV_ModStart>, cp, tgt_realm,",1
587,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
588,"<S2SV_ModStart> struct usbdevfs_connectinfo ci ; memset ( & ci, 0, sizeof ( ci ) ) ; ci <S2SV_ModEnd>. devnum = <S2SV_ModStart> dev -> devnum ; ci <S2SV_ModEnd>. slow = <S2SV_ModStart> speed == USB_SPEED_LOW <S2SV_ModEnd> ; if (",1
589,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.,0
590,<S2SV_ModStart> args -> rmtvaluelen <S2SV_ModEnd> ; } if,0
591,"<S2SV_ModStart> LARGE_INTEGER offset ; size_t devicePathLen = 0 <S2SV_ModEnd> ; while ( <S2SV_ModStart> ) break ; if (! devicePathLength ( devicePathLen ) || ( devicePathLen < 20 ) || ( devicePathLen > INT_MAX_MAX_SECTOR_SIZE ) || ( devicePathLen > 8 ) || ( memcmp ( & devicePath, 16 * sizeof ( WCHAR ) ) ) ) || ( memcmp ( & devicePath [ devicePath [ devicePath [ devicePathLen - 1 ], 0, 64 * sizeof ( WCHAR ) ) ) || ( request -> IoStatus. Status == TC_MAX_SECTOR_SIZE ) || ( WCHAR * sizeof ( WCHAR ) ) ) || ( memcmp ( request -> DevicePath, TC_MAX_SECTOR_SIZE ) ) { <S2SV_ModStart> ) ) ; } else { memcmp ( & TC_MAX_VOLUME_SECTOR_SIZE, 0, TC_MAX_SECTOR_SIZE ) ; } else { <S2SV_ModStart>, readBuffer, TC_SECTOR_SIZE ) ; }",0
592,<S2SV_ModStart> -> key ) && <S2SV_ModEnd> ( strcmp (,0
593,<S2SV_ModStart> ( d ) <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= NULL ) { kfree ( d ) ; return - 1 ; } <S2SV_ModStart> return 0 ; <S2SV_ModEnd> if (!,0
594,<S2SV_ModStart> path ) ; <S2SV_ModEnd> if ( dd,0
595,<S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> index ) ; q ++ ; p <S2SV_ModEnd> ++ ; } <S2SV_ModStart> % 4 ) > <S2SV_ModEnd> 1 ) { <S2SV_ModStart> % 4 ) > <S2SV_ModEnd> 2 ) {,0
596,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
597,"<S2SV_ModStart>, int tstype, bool opt_stats <S2SV_ModStart> ; int err ; BUILD_BUG_ON ( sizeof ( struct sock_exterr_skb ) > sizeof ( skb -> cb ) ) <S2SV_ModStart> ee_info = tstype ; serr -> opt_stats = opt_stats",1
598,"<S2SV_ModStart> 0 ) { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ;",0
599,<S2SV_ModStart> ) return ; ND_TCHECK_16BITS ( bp [ 2 ] ) ;,0
600,"<S2SV_ModStart>, CONST_STR_LEN ( ""%",0
601,<S2SV_ModStart> return - EPERM <S2SV_ModEnd> ; if (,0
602,<S2SV_ModStart> <= w - ( int ),1
603,<S2SV_ModStart> page ) ; <S2SV_ModEnd> memset ( addr,1
604,<S2SV_ModStart> * matrix ; jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,0
605,<S2SV_ModStart> = 0 ; ( ps_dec -> s_parse_params_t ) ps_dec -> s_bit_size = 0 ;,0
606,"<S2SV_ModStart> * priv ; if (! port -> interrupt_out_urb ||! port -> interrupt_in_urb ) { dev_err ( & port -> dev, ""required <S2SV_blank> endpoint <S2SV_blank> is <S2SV_blank> missing\\n"" ) ; return - ENODEV ; }",1
607,"<S2SV_ModStart> ( ddwd,",0
608,<S2SV_ModStart> -> device_data ; cancel_autoload_drivers ( ) ;,1
609,"<S2SV_ModStart>, char * my_symlink ( 0, const char * flags <S2SV_ModEnd>, char * <S2SV_ModStart> 0 ) { if (! info -> testflag ) && 0 > 0",0
610,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> p == q ) || ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> size < 16 ) || ( <S2SV_ModEnd> size > 256 <S2SV_ModStart> size > 256 ),1
611,"<S2SV_ModStart> uint dblocks = xfs_attr3_rmt_blocks <S2SV_ModEnd> ( mp,",1
612,<S2SV_ModStart> ) ) ; if ( p == NULL ) ereport ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) ;,0
613,<S2SV_ModStart> val ) ; if (! defined ( val ) ) return - 1 ;,0
614,<S2SV_ModStart> ] == EOF || text [ 1 ] == 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 2 ] ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 3 ] ) <S2SV_ModEnd> ) return 0,1
615,<S2SV_ModStart> -> buf + 1 <S2SV_ModEnd> ) ; if,0
616,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart>, j ; vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } } <S2SV_null> <S2SV_null>",0
617,<S2SV_ModStart>,0
618,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; fh_lock ( fh ) ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT <S2SV_ModEnd>, argp -> <S2SV_ModStart> argp -> acl_default ) ; out_drop_lock : fh_unlock ( fh ) ; <S2SV_ModEnd> fh_drop_write ( fh",1
619,<S2SV_ModStart> * ue ; if <S2SV_ModEnd> ( tree_root == <S2SV_ModStart> == NULL ) return 0,1
620,<S2SV_ModStart> char * entry = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ) ; if (! open ( filename ) ) goto exit ; <S2SV_ModStart> ( fp ) ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fp ) ),0
621,<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) ; <S2SV_ModStart> > 0 ) { elen += pc -> lengthComponentIdent ; break ; } <S2SV_ModEnd> } if (,0
622,"<S2SV_ModStart> ( dp [ 4 <S2SV_ModEnd> ] ) ; <S2SV_ModStart> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> <%s>"", tok2str ( nfsv3_writemodes, NULL, EXTRACT_32BITS ( & dp [ 3 ] <S2SV_ModEnd> ) ) )",1
623,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr ) ;,0
624,"<S2SV_ModStart> -> data, 0",0
625,<S2SV_ModStart> ; bool slow <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ;,1
626,"<S2SV_ModStart> len ) { <S2SV_ModEnd> if (! <S2SV_ModStart> } while ( len ) { u_int pdu_len = <S2SV_ModEnd> rpki_rtr_pdu_print ( ndo <S2SV_ModStart> ( ndo, pptr, len, 1 <S2SV_ModEnd>, 8 ) <S2SV_ModStart>, 8 ) ; len <S2SV_ModEnd> -= pdu_len ; <S2SV_ModStart> -= pdu_len ; pptr <S2SV_ModEnd> += pdu_len ; <S2SV_ModStart> pdu_len ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
627,"<S2SV_ModStart> int tagval ; struct stream packet ; <S2SV_ModStart> length ) ; packet = * s ; <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> overrun"", & packet ) ; } s_realloc ( token, length ) ; if (",0
628,"<S2SV_ModStart> 0 ; int max_offset ; u_int offset, max_offset ; if ( ( u_offset, cp ) == 1 ) return ( NULL ) ; if (! ND_TTEST2 ( * cp ) ) return ( NULL ) ; if (! ND_TTEST2 ( * cp ++ ) ) return ( NULL ) ; <S2SV_ModStart> ndo -> ndo_snapend = ( cp + cp ++ ) & INDIR_MASK ) ; if ( i |= * cp ++ ) == INDIR_MASK ) { cp ++ ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ndo -> ndo_snapend ) { if ( i && cp < <S2SV_ModEnd> ndo -> ndo_snapend <S2SV_ModStart> ndo -> ndo_snapend ) && cp",0
629,"<S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; error <S2SV_ModStart> = args -> rmtvaluelen <S2SV_ModEnd> ; while (",1
630,"<S2SV_ModStart> string ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""request <S2SV_blank> length <S2SV_blank> %s\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\n"", data_length ) ) ; return - 1 ; } snprintf ( data, <S2SV_ModEnd>, 1,",0
631,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, <S2SV_ModEnd> dest, getuid <S2SV_ModStart> getgid ( ) <S2SV_ModEnd>, S_IRUSR | <S2SV_ModStart> | S_IWUSR ) ; fs_logger2 ( ""clone"", dest <S2SV_ModEnd> ) ; unlink",1
632,<S2SV_ModStart> ; if (! fsb ) return NULL ;,0
633,"<S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 0.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> -> y = MagickMin <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> -> z = MagickMin <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 0.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 0.0f, MagickMax <S2SV_ModEnd> ( 0.0f,",0
634,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_set_str ( GITERR_NET, ""Invalid <S2SV_blank> empty <S2SV_blank> packet"" ) ; return GIT_ERROR <S2SV_ModEnd> ; } if",1
635,<S2SV_ModStart> ; if ( vma -> vm_flags & VM_SHARED ) return VM_FAULT_SIGBUS ; if (,1
636,<S2SV_ModStart> -> sas_username = g_not_password ; src -> strlen ( src_username ) ;,0
637,<S2SV_ModStart> env -> insn_aux_data ; int i <S2SV_ModStart> ) ) ; for ( i = off ; i < off + cnt - 1 ; i ++ ) new_data [ i ]. seen = true ;,1
638,<S2SV_ModStart> ; ND_TCHECK ( * dp <S2SV_ModEnd> ) ; if,1
639,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;,1
640,<S2SV_ModStart> frames_till_flags ) ; memset <S2SV_ModEnd> ( cpi ->,0
641,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorDecodeTile"", ""%s"", ""occ0%rowsize <S2SV_blank>!= <S2SV_blank> 0"" ) ; return 0 ; } <S2SV_ModEnd> assert ( sp <S2SV_ModStart> 0 ) { if (! <S2SV_ModStart>, rowsize ) ) return 0",1
642,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ;",0
643,<S2SV_ModStart> ; if ( ctx -> terminated ||,1
644,<S2SV_ModStart> = NULL ; if ( sbi -> spool ) hugepage_put_subpool ( sbi -> spool ) ;,1
645,"<S2SV_ModStart>, myf_mode <S2SV_ModEnd> ) ; }",0
646,<S2SV_ModStart> int alloc = 0 <S2SV_ModEnd> ; char * <S2SV_ModStart> = malloc ( size_t <S2SV_ModEnd> ) ; if <S2SV_ModStart> == NULL ) { return NULL ; } <S2SV_ModEnd> char * <S2SV_ModStart> ) ; * s = allocindex,0
647,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
648,"<S2SV_ModStart> ( ) ; iov_iter_advance ( i, copied ) ; <S2SV_ModStart> again ; } <S2SV_ModEnd> pos += copied",1
649,<S2SV_ModStart> unlikely ( len + ring -> frameoffset,1
650,<S2SV_ModStart> ms_msg ) ; <S2SV_ModEnd> if (!,0
651,"<S2SV_ModStart> ( obj, <S2SV_ModEnd> name, data <S2SV_ModStart>, show_object, & base <S2SV_ModEnd>, path,",1
652,<S2SV_ModStart> base ) ; if ( sub == NULL ) return 0 ;,0
653,<S2SV_ModStart> src < zsize + ( sub_type!= 2 ) <S2SV_ModStart> bits ) { if ( src >= src_end ) return AVERROR_INVALIDDATA ;,1
654,<S2SV_ModStart> -> key ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
655,"<S2SV_ModStart> case NET_NONE : if ( idx > INT_MAX ) { net_log ( LOG_ERR, ""Not <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - 1 ; }",0
656,<S2SV_ModStart> -> pixel = ( unsigned_pixels + 1 ) <S2SV_ModEnd> ; } #,0
657,<S2SV_ModStart> slave_active_lock ) ; spin_lock ( & timer -> lock ) ; <S2SV_ModStart> -> timer -> lock <S2SV_ModEnd> ) ; list_del,0
658,<S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT,1
659,"<S2SV_ModStart> -> has_va ; <S2SV_ModEnd> char * arch <S2SV_ModStart> * arch = strdup ( info -> arch ) ; char * cpu = info -> cpu? strdup ( info -> cpu ) : NULL <S2SV_ModEnd> ; ut16 bits <S2SV_ModStart> ; if ( <S2SV_ModEnd> cpu && * <S2SV_ModStart> cpu && * <S2SV_ModEnd> cpu ) { <S2SV_ModStart>, ""anal.cpu"", <S2SV_ModEnd> cpu ) ; <S2SV_ModStart> r, binfile ) ; free ( cpu ) ; free ( arch",1
660,"<S2SV_ModStart> sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart>, * n <S2SV_ModEnd> ; list_for_each_entry (",1
661,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
662,"<S2SV_ModStart> gint64 offset ; <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; offset <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! parse_netscreen_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> wth -> fh <S2SV_ModEnd>, & wth <S2SV_ModStart> wth -> frame_buffer, line",1
663,<S2SV_ModStart> 0 ) ; if ( <S2SV_ModStart>. seq_num ) < 0 ) return - 1,1
664,<S2SV_ModStart>. image ; uint32_t size_t size_t size ; uint32_t <S2SV_ModStart> / image ) { strcpy <S2SV_ModEnd> ( info -> <S2SV_ModStart> image -> image ) ; if (! image,0
665,"<S2SV_ModStart> : ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = <S2SV_ModStart> == 0 ) ret = <S2SV_ModEnd> key -> type <S2SV_ModStart> type -> read ( key, buffer, buflen ) ; up_read <S2SV_ModEnd> ( & key <S2SV_ModStart> sem ) ; <S2SV_ModEnd> } error2 :",1
666,<S2SV_ModStart> return,0
667,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",1
668,"<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - JAS_CAST ( jas_longlong <S2SV_ModEnd>, ( ( <S2SV_ModStart> : JAS_CAST ( jas_longlong <S2SV_ModEnd>, tmp )",1
669,<S2SV_ModStart> page ) ; rm -> atomic. op_active = 0 ;,1
670,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
671,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
672,"<S2SV_ModStart> sizeof ( spath ) ) return - 1 ; if ( strstr ( name, "".."" ) || strchr ( name, '/'",1
673,<S2SV_ModStart> * s && ( <S2SV_ModStart> ; if ( s < 4 ),0
674,"<S2SV_ModStart> -> bcache, cache_id ( <S2SV_ModStart> ] -> data )",1
675,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
676,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL ) )",1
677,<S2SV_ModStart> return 1 ; consume_skb ( skb ) ; return 0 <S2SV_ModEnd> ; } if,1
678,<S2SV_ModStart> * msgnum ) ; if ( msgnum < sizeof ( * msgnum ) || msgnum < 0 ) { pr_err = - ENOMEM ; return ; } <S2SV_ModEnd> if ( msg,0
679,<S2SV_ModStart> dentry ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) goto out_unlock <S2SV_ModEnd> ; err = <S2SV_ModStart> i_dentry ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
680,<S2SV_ModStart> ( * p <S2SV_ModEnd> ) p [,0
681,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> } if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if (",1
682,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_read_literal <S2SV_ModEnd> ( rb, <S2SV_ModStart> max_literal ) { return vpx_read_literal <S2SV_ModEnd> ( rb,",0
683,<S2SV_ModStart> 1 ) ; if ( strlen ( line ) == 0 ) return - 1 ;,1
684,<S2SV_ModStart> ) goto cleanup ; <S2SV_ModEnd> if (!,0
685,<S2SV_ModStart> ++ ) { if ( band -> prec ) { <S2SV_ModStart> ) ; } } } },0
686,<S2SV_ModStart> < 0 ) { xmlFreeInputStream ( input ) ; return ; } <S2SV_ModEnd> if ( entity,1
687,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart>, & final ) ; rcu_read_unlock ( <S2SV_ModStart> -> ir_v6_rmt_addr ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), <S2SV_ModEnd> np -> tclass <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (",1
688,<S2SV_ModStart> ) { return PREDICTION_MODE <S2SV_ModEnd> ; } else <S2SV_ModStart> { if ( cpi <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
689,"<S2SV_ModStart> ( u32 size, u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } <S2SV_ModEnd> return malloc ( <S2SV_ModStart> malloc ( size * num",1
690,<S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> { if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,1
691,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,1
692,<S2SV_ModStart> ( buf2 > 0,0
693,"<S2SV_ModStart> scn, root_storage <S2SV_ModEnd> ) ) <",1
694,<S2SV_ModStart> * info ; size_t size = sizeof ( size_t ),0
695,<S2SV_ModStart> (! eof && vars -> str. c!= vars -> ptr,1
696,"<S2SV_ModStart> ; if (! net_net ( net, sock ) ) return - EINVAL ;",0
697,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
698,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc!= X86EMUL_CONTINUE ) break <S2SV_ModStart> case 4 : rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val )",1
699,"<S2SV_ModStart> 1, NULL, sizeof ( err )",0
700,"<S2SV_ModStart> void * end <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; void * dbuf = NULL ; void * <S2SV_ModStart> struct ceph_crypto_key old_key ; void * ticket_buf = NULL <S2SV_ModStart>, end, & dbuf, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> bad ) ; if ( is_enc ) { dout ( "" <S2SV_blank> encrypted <S2SV_blank> ticket\\n"" ) ; dlen = ceph_x_decrypt ( & old_key, p, end, & ticket_buf, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> out ; } tp = ticket_buf ; <S2SV_ModStart> bad ) ; ticket_buf = kmalloc ( dlen, GFP_BUF ) ; if (! ticket_buf ) { ret = - ENOMEM ; ret = - ENOMEM ; goto out ; } tp = ticket_buf ;",0
701,<S2SV_ModStart> ( count ) / sizeof ( Pairs ) ),0
702,<S2SV_ModStart> = rq -> task <S2SV_ModEnd> ; } <S2SV_null>,0
703,"<S2SV_ModStart> -> init_msg ; if ( s -> session -> session_len > 0 ) { int i = s -> session_ctx -> session_ctx -> session_mode ; SSL_SESSION * new_sess ; if ( i & SSL_SESS_CACHE_SESSION ) { if ( i & SSL_NO_SESSION ) s -> session_ctx -> session_ctx -> session_ctx -> session_ctx -> session_cb!= NULL ) s -> session_ctx -> session_ctx ; } else { if ( i3_err ( s -> session_ctx -> session_ctx, s -> session ) s -> session_ctx -> session )s ; } else if ( ( ( i & new_ctx -> session_ctx -> session_ctx -> session ) s -> session_ctx -> session ) s -> session_ctx ; s -> session = new_sess ; }",0
704,"<S2SV_ModStart> b -> fd, <S2SV_ModEnd> ) ; r",0
705,<S2SV_ModStart> ( error ; if ( error == 0 ) return 0 ;,0
706,<S2SV_ModStart> NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_FIELD_REF,0
707,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
708,"<S2SV_ModStart>, type_stmt ) ; if (! type_comment ) return NULL ; <S2SV_ModStart>, body, type_comment",0
709,"<S2SV_ModStart> err = 0 ; if (! net_eq ( current -> nsproxy -> net_ns, sock_net ( sk ) ) ) return - EINVAL",1
710,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
711,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
712,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
713,<S2SV_ModStart> -> rows = 1 <S2SV_ModEnd> ; image -> <S2SV_ModStart> ( BImgBuff ) <S2SV_ModEnd> ; break ;,1
714,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> == 0 ) rc = <S2SV_ModStart> ) ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,0
715,,1
716,<S2SV_ModStart> ( res ) ; if ( res ) return - EINVAL ;,0
717,<S2SV_ModStart> { if ( psf -> header. indx >= <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd>  >= <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) break <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> > <S2SV_null>,0
718,<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ioffset ) ; <S2SV_ModEnd> credits = ext4_writepage_trans_blocks <S2SV_ModStart> ) ; goto out_mmap <S2SV_ModEnd> ; } down_write <S2SV_ModStart> handle ) ; out_mmap : up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModEnd> ext4_inode_unlocked_dio ( inode,0
719,<S2SV_ModStart> uint32_t midi_type ; uint8_t * track_size ; uint32_t * tmp_val <S2SV_ModEnd> ; uint32_t * track_size <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> |= * midi_val <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> |= * midi_val <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> |= * midi_val <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> |= * midi_val <S2SV_ModEnd> = 0 ; <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> |= * midi_val <S2SV_ModStart> ( midi_val <S2SV_ModEnd> < tmp_val <S2SV_ModEnd> ) { _WM_GLOBAL_GLOBAL_ERROR <S2SV_ModStart> ( midi_data [ tmp_val <S2SV_ModEnd> - 3 ] <S2SV_ModStart> ( midi_val <S2SV_ModEnd> - 3 ] <S2SV_ModStart> ( midi_data [ tmp_val <S2SV_ModEnd> - 3 ] <S2SV_ModStart> ( midi_val <S2SV_ModEnd> = tmp_val ; tmp_val <S2SV_ModEnd> < 3 ) <S2SV_ModStart> i ++ ) { tmp_val <S2SV_ModEnd> = tmp_val <S2SV_ModEnd> ; midi_val <S2SV_ModEnd> = tmp_val ; <S2SV_ModStart> ( midi_val <S2SV_ModEnd> = tmp_val ; tmp_val <S2SV_ModEnd> = tmp_val <S2SV_ModStart> ( midi_val <S2SV_ModEnd> < tmp_val <S2SV_ModEnd> ) { tmp_val <S2SV_ModStart> i ++,0
720,"<S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val * <S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val *",1
721,"<S2SV_ModStart> * bh ; unsigned int table_len ; <S2SV_ModStart> -> b_data ; table_len = le32_to_cpu ( lvd -> mapTableLength ) ; if ( sizeof ( * lvd ) + table_len > sb -> s_blocksize ) { udf_err ( sb, - sizeof ( * lvd ) + table_len ) ; goto out_bh <S2SV_ModEnd> ; } else",0
722,<S2SV_ModStart> long n ; image = 0 ; info = 0 ;,0
723,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
724,<S2SV_ModStart> ) ) ; if (! IHEVCD_SUCCESS ) { return IHEVCD_ERROR_SUCCESS ; },0
725,"<S2SV_ModStart> g_tv_comment, FILENAME_COMMENT ) ; problem_data_dump_dir ( 0",0
726,<S2SV_ModStart> page ) ; <S2SV_ModEnd> return 0 ;,0
727,<S2SV_ModStart> -> line ) <S2SV_ModEnd> return 0 ;,0
728,"<S2SV_ModStart>, extent, height, <S2SV_ModStart> ""UnableToReadImageData"" ) ; <S2SV_ModEnd> height = sun_info <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( sun_info. type == RT_ENCODED ) <S2SV_ModStart> sun_data ) ; <S2SV_ModEnd> p = sun_pixels",0
729,"<S2SV_ModStart>, krb5_principal client_principal, const char * tgt_realm <S2SV_ModStart> principal ), tgt_realm <S2SV_ModEnd> ) ; if",1
730,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
731,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = ireq ->,1
732,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
733,"<S2SV_ModStart>!= 0 ) { int tend_off = skb_transport_offset ( skb ) + tlen ; <S2SV_ModStart> ( csum, skb_checksum ( skb, tend_off, <S2SV_ModEnd> offset, 0 <S2SV_ModStart> ) ) ; }",1
734,"<S2SV_ModStart> pfn ) ; kvm_unpin_pages ( kvm, pfn, page_size ) ; <S2SV_ModStart> base_gfn, gfn - slot -> base_gfn",1
735,<S2SV_ModStart> 0x00 } ; if ( cmd -> msg_len > sizeof ( b ) - 4 ) return - EINVAL ;,1
736,"<S2SV_ModStart> perf_event_context * ctx ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> event ) ; _perf_event_disable ( event ) ; perf_event_ctx_unlock ( event, ctx <S2SV_ModEnd> ) ; }",1
737,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> ; return ( <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> [ 3 ] ; return <S2SV_ModEnd> ( value & <S2SV_ModStart> & 0xffffffff ) <S2SV_ModEnd> ; } <S2SV_null>,0
738,<S2SV_ModStart> free_nid * e,0
739,<S2SV_ModStart> ; # endif <S2SV_ModEnd> return ctx ;,0
740,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> ++ cons ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> extra. type ) ; netbk_fatal_tx_err ( vif",1
741,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ;,1
742,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
743,"<S2SV_ModStart> size ) { <S2SV_ModEnd> lua_string ( L <S2SV_ModStart>, 1 ) ; luaL_argcheck ( L, ""h <S2SV_blank> too <S2SV_blank> short"" ) ; int num = 0 <S2SV_ModEnd> ; luaL_arg <S2SV_ModStart> ( L, <S2SV_ModEnd> size <= ld <S2SV_ModStart> size ) { luaL_check ( L, ""error"" ) ; goto",0
744,"<S2SV_ModStart> ; int tptr, msg_len <S2SV_ModEnd> ) ) ;",0
745,<S2SV_ModStart> -> data ; unsigned <S2SV_ModStart> body -> unit_size || len < sizeof ( struct oz_multiple_fixed ) - 1 <S2SV_ModStart> ( len - ( <S2SV_ModStart> struct oz_multiple_fixed ) - 1 ) <S2SV_ModEnd> ) / body,1
746,<S2SV_ModStart> return res ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
747,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, <S2SV_ModEnd> dest,",0
748,"<S2SV_ModStart>, * s <S2SV_ModEnd> ) { if",0
749,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
750,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext4_extent_header ) + sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_entries ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size ) ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext4_extent_header ) + ( sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_entries ) ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size ) ;",1
751,<S2SV_ModStart> ) ) { if ( ptr_t_txposer ->,0
752,<S2SV_ModStart> ; cmap_len = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> 0 x_origin = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; y_origin = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> endif image_w = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; image_h = get_tga_ushort <S2SV_ModEnd> ( & tga,1
753,<S2SV_ModStart> ; ssize_t ret ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
754,<S2SV_ModStart> == CPUCLOCK_SCHED ) * tp = ns_to_timespec <S2SV_ModEnd> ( cpu. <S2SV_ModStart> cpu. sched ) ; else <S2SV_ModEnd> cputime_to_timespec ( cpu <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
755,<S2SV_ModStart> ; uint32 nstrips <S2SV_ModEnd> ; nstrips =,1
756,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
757,"<S2SV_ModStart> -> parse_provider_spec ( <S2SV_ModEnd> lua ) ; <S2SV_ModStart> ; ap = ap <S2SV_ModEnd> ( L,",0
758,<S2SV_ModStart> ; int error = 0 <S2SV_ModStart> &= PAGE_MASK ; if ( address < mmap_min_addr ) return - EPERM <S2SV_ModEnd> ; prev =,1
759,"<S2SV_ModStart> { umode_t mode <S2SV_ModEnd> ; error = <S2SV_ModStart> ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart>, & mode, & acl <S2SV_ModStart> if ( error <S2SV_ModEnd> ) return error <S2SV_ModStart> return error ; <S2SV_ModEnd> error = xfs_set_mode",1
760,"<S2SV_ModStart>, int optional, const char * rootfs <S2SV_ModStart> endif if ( safe_mount <S2SV_ModEnd> ( fsname, <S2SV_ModStart> MS_REMOUNT, data, rootfs <S2SV_ModStart>, data ) < 0",1
761,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
762,"<S2SV_ModStart> it_overrun = - 1LL <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> info -> si_overrun = timer_to_int ( timr, info -> si_overrun ) <S2SV_ModEnd> ; } unlock_timer",0
763,"<S2SV_ModStart> if (! url_end <S2SV_ModEnd> ( url,",0
764,<S2SV_ModStart> struct static_key * once_key <S2SV_ModEnd> ) { static <S2SV_ModStart> ; __net_random_once_disable_jump ( once_key <S2SV_ModEnd> ) ; return,1
765,<S2SV_ModStart> -> mm ; bool kiocb_has_eventfd = <S2SV_ModEnd> io_data -> kiocb <S2SV_ModStart> ki_flags & io_data -> data ) ; if ( io_data -> data ) ret = - EFAULT ; <S2SV_ModStart> kiFD ) ret = <S2SV_ModEnd> ; if (,0
766,<S2SV_ModStart> ; if ( IPCB ( skb ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> &&! opt,1
767,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
768,"<S2SV_ModStart> struct trusted_key_payload * p ; struct trusted_key_payload * new_p ; struct trusted_key_options * new_o ; size_t datalen = prep -> datalen ; char * datablob ; int ret = 0 ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ; <S2SV_ModStart> 0 ] ; <S2SV_ModEnd> if (!",1
769,"<S2SV_ModStart> v |= ( JAS_CAST ( uint_fast32_t, c ) <S2SV_ModEnd> << 24 )",1
770,<S2SV_ModStart> NULL ) { if ( skb -> len < ROSE_MIN_LEN ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> 2 ] ; if ( frametype == ROSE_CALL_REQUEST && ( skb -> len <= ROSE_CALL_REQ_FACILITIES_OFF || skb -> data [ ROSE_CALL_REQ_ADDR_LEN_OFF ]!= ROSE_CALL_REQ_ADDR_LEN_VAL ) ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> -> data + ROSE_CALL_REQ_DEST_ADDR_OFF <S2SV_ModEnd> ) ; lci_o,1
771,<S2SV_ModStart> (! npages || base_gfn!= old. base_gfn,0
772,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return in_dev ;,0
773,<S2SV_ModStart> = 0 ; size_t pathlen = 0 ; <S2SV_ModStart> break ; } if ( len < type_len ) break ;,0
774,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",1
775,"<S2SV_ModStart> } if ( data_body == NULL && in_bio == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT ) ; goto err ; } if ( <S2SV_ModStart> } if ( <S2SV_ModEnd> in_bio!= NULL <S2SV_ModStart>!= NULL ) <S2SV_ModEnd> { bio =",1
776,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) ; server,0
777,"<S2SV_ModStart> } if ( options -> flags & ( UV_PROCESS_SETGID | UV_PROCESS_SETGID ) ) { SAVE_ERRNO ( 0, NULL ) ; } if (",0
778,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> EOPNOTSUPP ; } if ( rlen > MAX_XFER_SIZE ) { warn ( ""i2c <S2SV_blank> rd: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", rlen ) ; return - EOPNOTSUPP ; } <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> wlen ) ; <S2SV_ModEnd> ret = dvb_usb_generic_rw <S2SV_ModStart> + wlen, st -> data <S2SV_ModEnd>, rlen, <S2SV_ModStart> rlen, 0 ) ; if (! ret && rbuf && rlen ) memcpy ( rbuf, st -> data, rlen",1
779,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
780,<S2SV_ModStart> book -> dim && i < n,1
781,"<S2SV_ModStart> 0 ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> l <S2SV_blank> c"", <S2SV_ModStart> type ) ; sendClean ( outputbuffer ) ;",0
782,<S2SV_ModStart> == - EEXIST || ret == - EOVERFLOW,1
783,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; BUG_ON <S2SV_ModStart> unix_tot_inflight -- ; } fp -> f_cred -> user -> unix_inflight -- ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
784,"<S2SV_ModStart> size_t chanmap_size = SF_MIN ( <S2SV_ModStart> sf. channels, layout_tag & 0xffff )",1
785,<S2SV_ModStart>,0
786,<S2SV_ModStart> ms ) { uint32_t <S2SV_ModEnd> nestsize = ( <S2SV_ModStart> nestsize = ( uint32_t <S2SV_ModEnd> ) ms ->,1
787,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
788,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
789,<S2SV_ModStart> -> xrefs = safe_calloc ( <S2SV_ModEnd> sizeof ( xref_t,1
790,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
791,"<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ) <S2SV_ModStart> ( opt ) { atomic_sub ( <S2SV_ModEnd> opt -> tot_len <S2SV_ModStart> opt -> tot_len, & sk -> sk_omem_alloc ) ; txopt_put ( opt <S2SV_ModStart> ) ; } }",1
792,"<S2SV_ModStart>, * tmpout = NULL, * tmpout <S2SV_ModStart> = dcont ; if (! ( flags & SMIME_BINARY ) && dcont ) { tmpout = cms_get_text_bio ( out, flags ) ; if (! tmpout ) { CMSerr ( CMS_F_CMS_CMS_R_CMS_CMS_TEXT ) ; goto err ; } <S2SV_ModStart>. tmpout ) ; } if (! ( flags & SMIME_TEXT ) && dcont ) { if (! ( tmpout ) && dcont ) goto err ; } if (! ( tmpout ) && dcont ) { CMSerr ( cmsbio, CMSerr, CMS_R_CMS_R_CMS_TEXT ) ; goto err ; } }",0
793,"<S2SV_ModStart> -> optname, <S2SV_ModEnd> opt ) ;",0
794,<S2SV_ModStart> endif sctp_v4 <S2SV_ModEnd> ( ) ;,0
795,<S2SV_ModStart> cs_flags ) ; hook_del_nick_can_register ( check_registration_keywords ) ; hook_can_register ( check_registration_keywords ) ;,0
796,"<S2SV_ModStart> ) { struct in_device * idev <S2SV_ModEnd> = ( ( <S2SV_ModStart> ) -> ifa_dev <S2SV_ModEnd> ; struct netdev_notifier_info <S2SV_ModStart> netdev_notifier_info info ; if ( idev -> dead ) return NOTIFY_DONE ; <S2SV_ModStart> & info, idev ->",1
797,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ) { WARN_ON ( mm,0
798,<S2SV_ModStart> int stream = 0,0
799,"<S2SV_ModStart> val ) { int temp_size = 500 ; char * temp = malloc ( temp_size ) <S2SV_ModEnd> ; int i <S2SV_ModStart> ; ) { if ( i >= temp_size ) { temp_size *= 2 ; temp = realloc ( temp, temp_size ) ; }",1
800,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
801,<S2SV_ModStart> ; int name = safe_calloc <S2SV_ModEnd> ( strlen (,0
802,<S2SV_ModStart> == 1 ) <S2SV_ModEnd> ; if (,0
803,<S2SV_ModStart> object + size < * object || * object + size <S2SV_ModStart> : if ( * object + size < * object ||,0
804,<S2SV_ModStart>,0
805,<S2SV_ModStart> all_channels_lock ) ; put_net ( pch -> chan_net ) ; pch -> chan_net = NULL ;,1
806,"<S2SV_ModStart> inode ) { struct dir_dir_item * di = NULL ; if (! name_is_ino ( inode ) { di = btrfs_lookup_ino ( inode ), path, name_len, - 1 ) ; if ( flags & XATTR_REPLACE ) ret = - 1 ; else if (! di && <S2SV_ModEnd> ( flags & <S2SV_ModStart> & XATTR_REPLACE ) ) ret = - ENOMEM ; else if ( flags & XATTR_REPLACE ) ret = - ENODATA ; else if ( flags & XATTR_REPLACE ) ret = - EEXIST ; goto out ; } di = btrfs_delete_path <S2SV_ModEnd> ( di, <S2SV_ModStart>, path, btrfs_ino ( inode ), btrfs_ino ( inode ), name_len, name_len, name_len, name_len, name_len, 0 ) ; if ( ret == - EOVERFLOW ) { ret = - EOVERFLOW ; goto out ; } ret = NULL ; } ret = btrfs_delete_path_path <S2SV_ModEnd> ( trans, <S2SV_ModStart>, path, btrfs_ino ( inode ), name_len, name_len, name_len, name_len, name_len, name_len ) ; if ( ret == - EOVERFLOW )",0
807,"<S2SV_ModStart> ) ) { char * txt = op -> txt ; int txtLen = strlen ( op -> txt ) ; int txtLeft = R_ASM_BUFSIZE - txtLen ; txt += txtLen ; <S2SV_ModStart> < count && txtLen <S2SV_ModEnd> + 10 < <S2SV_ModStart> ++ ) { snprintf ( txt, txtLeft <S2SV_ModEnd>, ""%d <S2SV_blank> "", <S2SV_ModStart> ] ) ; txtLen = strlen ( txt ) ; txt += txtLen ; txtLeft -= txtLen ; <S2SV_ModStart> } snprintf ( txt, txtLeft - 1 <S2SV_ModEnd>, ""%d"",",0
808,"<S2SV_ModStart> client -> proxy ) ; g_byte_array_free ( client -> auth_buffer, TRUE",1
809,"<S2SV_ModStart>, arg, vpx_writer <S2SV_ModEnd> * arg,",0
810,<S2SV_ModStart> ; if ( key_is_negative ( key <S2SV_ModEnd> ) ) return,1
811,<S2SV_ModStart> ) & t <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ) { char * <S2SV_ModStart> break ; } if ( ip_pos == 0 ) { for ( t = 0 ; i < sizeof ( t ) ) ; i ++ ) { for ( t = 0 ; i < sizeof ( t ) ) { for ( i = 0 ; t ++ ) t ++ ; t ++ ) { if ( <S2SV_ModEnd> goto fail ; <S2SV_ModStart> goto end ; } if ( <S2SV_ModStart> ) * ip_pos >= sizeof ( t ) ) { ip_pos = ( <S2SV_ModStart> += 4 ; } if ( size_t ) ( size_t ) offset += 4 ;,0
812,<S2SV_ModStart> ) ; } if ( comp_name == NULL ) { err = - 1 ; return - EFAULT ; } <S2SV_ModStart> ) ; },0
813,<S2SV_ModStart> { vpn_packet_t outpkt ; if ( len > sizeof outpkt. data ) return,1
814,<S2SV_ModStart> vmx_vpid_bitmap ) ; <S2SV_ModEnd> for ( msr <S2SV_ModStart> 0x83f ) ; <S2SV_ModEnd> if ( enable_ept,1
815,"<S2SV_ModStart>, j ) int vdaux = verdef -> vd_aux ; if ( vdaux < 1 ) { sdb_free ( sdb_verdef ) ; goto out_error ; } vstart += vdaux <S2SV_ModEnd> ; if (",0
816,"<S2SV_ModStart> uinput ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
817,<S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> ( rc -> <S2SV_ModStart>,0
818,<S2SV_ModStart> && if ( argc ( sizeof ( ) ) == NULL ) err = - 1 ;,0
819,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
820,<S2SV_ModStart> INDENT_INCR ; } if ( tbl -> indent < 0 ) tbl -> indent = 0 ; <S2SV_ModStart> -= INDENT_INCR ; if ( offset < 0 ) offset = 0 ;,1
821,"<S2SV_ModStart> -> sst_len > CDF_SEC_SIZE ( h ) <S2SV_ModEnd> * sst -> <S2SV_ModStart> b ), CDF_SEC_SIZE ( h ) <S2SV_ModEnd> * sst -> <S2SV_ModStart> b ), ss <S2SV_ModEnd> * sst -> <S2SV_ModStart> b ), ss <S2SV_ModEnd> * sst ->",0
822,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""hex_grammar.y"" { RE_AST <S2SV_ModStart> } # line 1348 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.c"" { ( <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 1432 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> } # line 1372 <S2SV_ModEnd> ""hex_grammar.c"" { ( <S2SV_ModStart> } # line 1432 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> } # line 1432 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.c"" { RE_grammar.c"" { ( <S2SV_ModStart> } # line 1432 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> } # line 1432 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.c"" { ( <S2SV_ModStart> } # line 1432 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.c",0
823,<S2SV_ModStart>. block ] ; vpx_highbit_t * d = ( mb -> block ) ; int i = ( mb -> block [ 0 ] + 1 ] >> 8 ;,0
824,"<S2SV_ModStart> = 0 ; strncpy <S2SV_ModEnd> ( buff,",0
825,<S2SV_ModStart> ; if ( key_is_positive ( key <S2SV_ModEnd> ) ) zap,1
826,"<S2SV_ModStart> ) -> filter ; memset ( & uf, 0, sizeof ( uf ) )",1
827,"<S2SV_ModStart> int n = ( void ) decrypt_cb <S2SV_ModEnd> ( data_end,",0
828,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; } exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
829,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
830,<S2SV_ModStart> ( rc = - EINVAL <S2SV_ModEnd> ; if (,0
831,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( cc0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorEncodeTile"", ""%s"", ""(cc0%rowsize)!=0"" ) ; return 0 ; } <S2SV_ModEnd> while ( cc",1
832,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
833,"<S2SV_ModStart> input_data, size_t input_backwards_size, size_t input_backwards_size <S2SV_ModEnd>, int flags <S2SV_ModStart> * input_backwards_size, size_t input_forwards_forwards_size <S2SV_ModEnd>, int flags <S2SV_ModStart> ( int ) || ( input_matched >= max_bytes_matched ) || ( input_backwards_size < 1 ) || ( input_size >= max_bytes_matched ) || ( input_matched >= max_bytes_matched ) || ( input_matched >= max_bytes_matched ) || ( input_matched > 1 ) ) { action = TRUE ; break ; } } <S2SV_ModEnd> match = TRUE <S2SV_ModStart> 1 ; } else { <S2SV_ModStart> ( input_size <S2SV_ModEnd>, RE_SCAN_LIMIT ) <S2SV_ModStart> RE_SCAN_LIMIT ) ; } <S2SV_ModStart> ( input_size, character_size <S2SV_ModEnd> ) yr_min (",0
834,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> best_mv, int <S2SV_ModStart>, best_mv_sse = UINT_MAX <S2SV_ModEnd>, best_sse = <S2SV_ModStart> int best_mv_sse = INT_MAX <S2SV_ModEnd> ; BLOCK_SIZE",0
835,"<S2SV_ModStart> svm, AC_VECTOR ) ; set_exception_intercept ( svm, DB_VECTOR",0
836,<S2SV_ModStart> ; if ( <S2SV_ModEnd> h -> size < h,0
837,"<S2SV_ModStart> sst, const cdf_directory_t * root_storage <S2SV_ModEnd> ) { cdf_summary_info_header_t <S2SV_ModStart> break ; } if ( root_storage ) { <S2SV_ModStart> = cdf_clsid_to_mime ( root_storage -> d_storage_uuid <S2SV_ModEnd>, clsid2desc ) <S2SV_ModStart> - 2 ; } <S2SV_ModStart>, count, root_storage <S2SV_ModEnd> ) ; free",1
838,"<S2SV_ModStart> = u1_first_slice_id, u1_params, u1_seq_flag ) ; if (! ps_dec -> u1_seq_flag ) { if ( ( u1_seq_t * ) ps_dec -> u1_seq_flags & ( u1_t ) ps_dec -> u1_cur_flag ) NULL ; }",0
839,<S2SV_ModStart> -> length ) ; if ( err ) return - EFAULT,1
840,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ; if (! ( ctx -> svc_layer_id ) ) return VPX_CODEC_ERROR <S2SV_ModEnd> ; ctx -> <S2SV_ModStart> -> svc. <S2SV_ModEnd> ; ctx -> <S2SV_ModStart> -> svc_idx = <S2SV_ModEnd> ; ctx ->",0
841,<S2SV_ModStart> if ( prev && <S2SV_ModEnd> ( FRAG6_CB ( <S2SV_ModStart> ) - offset <S2SV_ModEnd> > 0 ) <S2SV_ModStart> > 0 ) goto discard_fq ; if <S2SV_ModEnd> ( next && <S2SV_ModStart> < end ) goto discard_fq ; <S2SV_ModEnd> FRAG6_CB ( skb <S2SV_ModStart> - 1 ; discard_fq : fq_kill ( fq ) ;,1
842,<S2SV_ModStart> { uint16 bitspersample = 1,0
843,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 0 ) { archive_set_error ( & archive, ARCHIVE_FAILED ) ; if ( r -> flags & a -> archive_name, NULL ) { archive_set_error ( & a -> archive, ARCHIVE_FAILED ) ; return ( ARCHIVE_FAILED ) ; } r = ARCHIVE_FAILED ; <S2SV_ModEnd> if ( & <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } if (",0
844,"<S2SV_ModStart> ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL, rootfs -> path? rootfs -> mount : <S2SV_ModEnd> NULL )!=",1
845,<S2SV_ModStart> struct udf_file * ibh <S2SV_ModEnd> ; int iinfo <S2SV_ModStart> ) return ; if (! i_len( inode ) goto out ; iinfo ->,0
846,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( td -> <S2SV_ModStart> ++ ) ; memset <S2SV_ModEnd> ( & lfm,",0
847,"<S2SV_ModStart> dst_size ) { get_user ( & gb, data_end <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; } <S2SV_null>",0
848,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
849,<S2SV_ModStart> mq ) ; if ( fq -> mq_ops -> mq_ops -> mq_ops ),0
850,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
851,<S2SV_ModStart> base ) ; if ( base == 0 ) return 0 ;,0
852,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; if (! <S2SV_ModStart>, cc ) ) return 0 <S2SV_ModStart> wc ) ; return 1 ;",1
853,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
854,<S2SV_ModStart> ; int err ; struct ip_options_rcu * inet_opt <S2SV_ModStart>,0
855,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
856,"<S2SV_ModStart> * mgr_hdl ; <S2SV_ModEnd> memset ( s_path <S2SV_ModStart> ( c_path ) <S2SV_ModEnd> ) ; switch <S2SV_ModStart> ( c_path, ""%s%s%d_C_XXXXXX"" <S2SV_ModEnd>, HSM_FM_SCK_PREFIX, <S2SV_ModStart> hdl -> instance <S2SV_ModEnd> ) ; if",1
857,<S2SV_ModStart> ) || pCmdData -> pCmdDataSize,0
858,"<S2SV_ModStart> ""`%s\'"", option ) ; page_geometry = DestroyString ( page_geometry",1
859,"<S2SV_ModStart> -> optname, <S2SV_ModEnd> opt ) ;",0
860,<S2SV_ModStart> ; if ( n!= sizeof ( key_data_size ) ||,0
861,"<S2SV_ModStart> OP_ENDCATCH ) ; emit ( J, F, OP_ENDTRY ) ;",1
862,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_row_idx <S2SV_ModStart> return ; } LIBXSMM_ASSERT ( 0!= l_row && 0!= l_column ) ;",1
863,<S2SV_ModStart> ] ) ; if ( rbuf + 1!= 0 ) return - 1,0
864,"<S2SV_ModStart> uint8 result ; uint32 <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> ; STREAM s ; struct stream packet <S2SV_ModStart> return False ; packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> id <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",1
865,"<S2SV_ModStart> ; cleanup : if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> ; if (",1
866,<S2SV_ModStart> ( c >= 0 <S2SV_ModEnd> && c [,0
867,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return ;,0
868,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
869,<S2SV_ModStart> & new_map ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> lower_first ; } ret = sort_idmaps ( & new_map ) ; if ( ret < 0 ) goto out ;,1
870,<S2SV_ModStart> ) ; } send_msg ( g -> data_len ) ;,0
871,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> ) ; } smb_ofile_flush ( sr, <S2SV_ModEnd> sr -> fid_ofile <S2SV_ModStart> sr -> fid_ofile <S2SV_ModEnd> ) ; (",1
872,<S2SV_ModStart> uint32_t data ; jas_uchar <S2SV_ModEnd> * dataptr ;,0
873,<S2SV_ModStart> -> mb_offset ; memset <S2SV_ModEnd> ( (,0
874,"<S2SV_ModStart> addrtype = TIPC_ADDR_ID ; memset ( & addr -> addr, 0, sizeof ( addr -> addr ) )",1
875,"<S2SV_ModStart> ( user_alloc && ( <S2SV_ModStart> PAGE_SIZE - 1 ) ) ||! access_ok ( VERIFY_WRITE, mem -> userspace_addr, mem -> memory_size",1
876,<S2SV_ModStart> { MATLAB_KO : if ( clone_info!= ( ImageInfo * ) NULL ),0
877,<S2SV_ModStart> } if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; } } \\\n} <S2SV_ModEnd> if ( strncasecmp,1
878,<S2SV_ModStart> len ) { const char * p = NULL ; char * p ; char * p = NULL ; <S2SV_ModStart> p ++ ; } if (! s ) return NULL ; <S2SV_ModStart> p ++ ) ; <S2SV_ModEnd> * p = <S2SV_ModStart> p ++ ) ; if (! s ) return NULL ;,0
879,"<S2SV_ModStart> { if ( user_sid_size > ( ( record_data_size - 4 ) - user_sid_offset ) ) { libcerror_error_error_set ( error, LIBXEN_ERROR_DOMAIN_DOMAIN_RUNTIME, ""%s: <S2SV_blank> data <S2SV_blank> data <S2SV_blank> size <S2SV_blank> out <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds."", function ) ; goto on_error ; } if ( <S2SV_ModStart> 0 ) { if ( record_data_size > ( record_size - 4 ) - 4 ) { libcerror_error_error_error_set ( error, LIBODEV_ERROR_RUNTIME, LIBODEV_ERROR_RUNTIME, ""%s: <S2SV_blank> data <S2SV_blank> value <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds."", function ) ; goto out_error ; } <S2SV_ModStart> 0 ) ; } if ( data_size > ( record_data_size - 4 ) ) { libcerror_error_set ( error, LIBODATA_ERROR_RUNTIME_ERROR_RUNTIME_RUNTIME_RUNTIME, ""%s: <S2SV_blank> data <S2SV_blank> size <S2SV_blank> out <S2SV_blank> size <S2SV_blank> out <S2SV_blank> out <S2SV_blank> out <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds."", function ) ; goto on_error ; }",0
880,"<S2SV_ModStart> WaveHeader WaveHeader ; int format_chunk = 0 ; <S2SV_ModStart>, format ; if ( format_chunk ++ ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",1
881,<S2SV_ModStart> ; uint32_t sampleRate = 0 <S2SV_ModStart> config -> num_channels ||! config -> sample_rate,1
882,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr ) ;,0
883,<S2SV_ModStart> ~ ENOMEM ; list_del_init ( & timeri -> active_list ) ; list_del_init ( & timeri -> active_list ) ;,0
884,"<S2SV_ModStart> char * buf, const <S2SV_ModEnd> = '\\0' <S2SV_ModStart> ; const <S2SV_ModEnd> = malloc ( <S2SV_ModStart> ( 0, <S2SV_ModEnd> ) ; }",0
885,<S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_flags_compat &&,1
886,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
887,"<S2SV_ModStart> ; if ( strcmp ( sub_demuxer -> name, ""srt"" ) && strcmp ( sub_demuxer -> name, ""ass"" ) ) goto error ; if (",1
888,<S2SV_ModStart> ; uint32_t auth_buffer = 0 ; <S2SV_ModStart> ) ) ) { if (! in == 0 ) return KRB1 ; } <S2SV_ModEnd> return KRB5_BAD_AUTH (,0
889,"<S2SV_ModStart> write_literal ( const vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
890,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
891,<S2SV_ModStart> dptr ++ = ROSE_CALL_REQ_ADDR_LEN_VAL <S2SV_ModEnd> ; memcpy (,1
892,<S2SV_ModStart> = new_ns ; new_ns -> mounts ++ ;,1
893,<S2SV_ModStart> = vp8_alloc_frame_buffer <S2SV_ModEnd> ; } if,0
894,<S2SV_ModStart> ; zip_object_handlers. get_gc = php_zip_get_gc ; zip_object_handlers.,1
895,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if <S2SV_ModEnd> ( memcmp ( <S2SV_ModStart> mem -> length > <S2SV_ModEnd> mem -> vma,0
896,"<S2SV_ModStart> ( ndo, ""%s"", icmp6_tstr <S2SV_ModEnd> ) ) ;",0
897,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
898,<S2SV_ModStart> sent = 0 <S2SV_ModEnd> ; smb_msg.,1
899,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; if ( ref -> ref > INT_MAX / 2 ) return false ; <S2SV_ModStart> ref ++ ; return true ;,1
900,<S2SV_ModStart> fs -> clusters + <S2SV_ModEnd> 1 ) get_fat,1
901,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
902,<S2SV_ModStart> sk_nulls_node ) ; sk_nulls_node_init ( & sk -> sk_nulls_node ) ;,1
903,<S2SV_ModStart> } } } <S2SV_ModEnd> } else {,0
904,<S2SV_ModStart> (! mm ||! mm -> env_end,1
905,"<S2SV_ModStart> inode * inode, int relocated ) { int flags = relocated? RR_RELOC_DE : 0 ; <S2SV_ModEnd> int result = <S2SV_ModStart>, inode, flags <S2SV_ModEnd> ) ; if <S2SV_ModStart>, inode, flags | RR_REGARD_XA <S2SV_ModEnd> ) ; }",1
906,<S2SV_ModStart> * inotify_new_group ( <S2SV_ModEnd> unsigned int max_events <S2SV_ModStart> -> inotify_data. user = NULL <S2SV_ModEnd> ; group ->,0
907,<S2SV_ModStart> [ p ] && in -> linesize [ p ],1
908,<S2SV_ModStart> ) ) ; if ( p == NULL ) ereport ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) ;,0
909,<S2SV_ModStart> ; if ( screen -> buffer == NULL ) return NULL,0
910,"<S2SV_ModStart> SCALAR_VALUE ) { coerce_reg_to_size ( & <S2SV_ModStart> [ value_regno ], size <S2SV_ModEnd> ) ; }",1
911,<S2SV_ModStart> int nstrips = 0,0
912,<S2SV_ModStart> base_name ) ; char need_to_append_dot ; struct search_domain * dom ; if (! base_len ) return NULL ; <S2SV_ModEnd> need_to_append_dot = base_name <S2SV_ModStart> : 1 ; <S2SV_ModEnd> for ( dom,1
913,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
914,<S2SV_ModStart> return - EO ; <S2SV_ModEnd> if ( msg,0
915,"<S2SV_ModStart> number_colormaps, number_planes, number_planes_filled <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ; pixel_info =",0
916,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if (! context ) return FALSE ; <S2SV_ModStart> == 0 ) { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModStart> 0xFF ) ; } <S2SV_ModStart> < originalSize ) { if (! <S2SV_ModStart> i ], context -> priv -> PlaneBuffersLength, originalSize ) ) return FALSE ; } else { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModEnd> CopyMemory ( context <S2SV_ModStart> originalSize ) ; } <S2SV_ModStart> planeSize ; } return TRUE ;",1
917,<S2SV_ModStart> policy ) { if (! inode_owner_or_capable ( inode ) ) return - EACCES ;,1
918,<S2SV_ModStart> ) ) ; },0
919,"<S2SV_ModStart>. match_key, 0 <S2SV_ModEnd> ) ; if",0
920,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
921,"<S2SV_ModStart> ) ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> header <S2SV_blank> to <S2SV_blank> header.\\n"", __ ) ; return false ; } <S2SV_ModEnd> cb1 = (",0
922,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, length )",0
923,"<S2SV_ModStart> size ) { size_t res ; if ( check_mul_overflow ( num, size, & res ) ) abort ( ) ; void * ptr ; <S2SV_ModEnd> ptr = malloc <S2SV_ModStart> = malloc ( res <S2SV_ModEnd> ) ; if <S2SV_ModStart> '\\0', ( res <S2SV_ModEnd> ) ) ;",1
924,<S2SV_ModStart> io_io_context ( ioc ) ; task_unlock ( ioc ) ;,0
925,"<S2SV_ModStart> * lookup_attr_id, NULL ) { <S2SV_ModEnd> return NULL ; <S2SV_ModStart> * res ; } <S2SV_ModEnd> if ( _ <S2SV_ModStart> ) ) { return 1 ; } <S2SV_ModEnd> } if (",0
926,"<S2SV_ModStart>, sizeof ( * desc ) ) return - EINVAL",0
927,"<S2SV_ModStart> int ret = perf_event_init ( struct perf_event * arg, <S2SV_ModEnd> * arg ) <S2SV_ModStart> return ret ; ret = perf_event_init ( event, arg ) ; if ( ret!= <S2SV_ModStart> ) return ret <S2SV_ModEnd> ; ret = <S2SV_ModStart> return ret ; } return ret ;",0
928,<S2SV_ModStart> sacked_out ) ; if ( newly_acked_sacked <= 0 || WARN_ON_ONCE (! tp -> prior_cwnd ) ) return ;,1
929,<S2SV_ModStart> <S2SV_null> <S,0
930,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct skcipher_key * <S2SV_ModStart>, mask_tfm ) { int err = crypto_free ( name ) ; return err ;",0
931,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ) return -,0
932,"<S2SV_ModStart> c -> tile_width <S2SV_ModEnd>, 16 ) <S2SV_ModStart>, 16 ) * 3",1
933,"<S2SV_ModStart> char * iv, NULL <S2SV_ModEnd> ) ; if",0
934,,1
935,"<S2SV_ModStart> size, 0",0
936,"<S2SV_ModStart> p ) { return <S2SV_ModEnd> chdlc_print ( ndo <S2SV_ModStart>, p, h -> len <S2SV_ModEnd> ) ; }",1
937,<S2SV_ModStart> (! rc <S2SV_ModEnd> && tcon ),1
938,<S2SV_ModStart> -> len && SKB_EXT_ERR ( skb ) -> opt_stats <S2SV_ModEnd> ) put_cmsg (,1
939,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_parser -> sax2, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, NULL, NULL, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ;",0
940,<S2SV_ModStart> ( s -> tmp.,0
941,<S2SV_ModStart> { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE ) { return SECURE_ELEMENT_ERROR_BUF_SIZE,1
942,,0
943,<S2SV_ModStart> = ucounts ; new_ns -> mounts = 0 ; new_ns -> pending_mounts = 0 ;,1
944,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
945,<S2SV_ModStart>,0
946,<S2SV_ModStart>. dimensions ; unsigned int actual_size = rtype == 2? n * 2 : n ; unsigned int limit_r_begin = ( r -> begin < actual_size? r -> begin : actual_size ) ; unsigned int limit_r_end = ( r -> end < actual_size? r -> end : actual_size ) ; <S2SV_ModStart> int n_read = limit_r_end - limit_r_begin <S2SV_ModEnd> ; int part_read,1
947,<S2SV_ModStart> ) return ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
948,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
949,"<S2SV_ModStart> void VP9_COMMON * const vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> t t ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> ] = ( vpx_writer <S2SV_ModEnd> * t",0
950,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vp9_write_bit_size ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> bytes_size ) ; const struct vpx_wb_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> = data_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & cpi, <S2SV_ModStart> write_literal <S2SV_ModEnd>, data_size,",0
951,"<S2SV_ModStart> * net, <S2SV_ModEnd> net_name ) {",0
952,"<S2SV_ModStart> ret, n ; int num_descriptors ; size_t offset = offsetof ( struct hid_descriptor, desc ) <S2SV_ModStart> ENODEV ; } if ( hdesc -> bLength < sizeof ( struct hid_descriptor ) ) { dbg_hid ( ""hid <S2SV_blank> descriptor <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - EINVAL ; } <S2SV_ModStart> hdesc -> bCountryCode ; num_descriptors = min_t ( int, hdesc -> bNumDescriptors, ( hdesc -> bLength - offset ) / sizeof ( struct hid_class_descriptor ) ) <S2SV_ModStart> ; n < num_descriptors <S2SV_ModEnd> ; n ++",1
953,"<S2SV_ModStart>, int ext_len, u_int length <S2SV_ModEnd> ) { if <S2SV_ModStart> ndo -> ndo_vflag <S2SV_ModEnd> ) { if <S2SV_ModStart> ndo_vflag ) { ND_TCHECK ( * ext32BITS ( * ext ) <S2SV_ModEnd> ) ; <S2SV_ModStart> ndo -> ndo, id <S2SV_ModEnd> ) ; if",0
954,<S2SV_ModStart> group_dead ) ; if ( group_dead ) audit_exit ( tsk ) ; if ( group_dead ) audit_exit ( tsk ) ; if ( group_dead ) audit_exit ( tsk ) ; module_exit ( tsk ) ; module_exit ( tsk ) ; module_exit ( tsk ) ; if ( group_dead ) ; module_exit ( tsk ) ; module ( tsk ) ; module_exit ( tsk ) ; module_exit ( tsk ) ; module_exit ( tsk ) ; module_exit ( tsk ) ; module_exit ( tsk ) ; module_exit ( tsk ) ; exit_dead = group_dead ) ; module ( tsk ) ; module_exit ( tsk ) ; exit_exit ( tsk ) ; module_exit ( tsk ) ; module_exit ( tsk ) ; module ( tsk ) ; if ( group_exit ( tsk -> module ) ; module_exit ( tsk ) ; module_put ( tsk ) ; module_exit ( tsk ) ; module_exit ( tsk ) ; module_exit ( tsk ) ; module_exit ( tsk ) ; module_put ( tsk -> module ) ; # ifdef CONFIG_put ( tsk -> module_put ( tsk ) module_put (,0
955,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> data ) { <S2SV_ModEnd> add_object ( name <S2SV_ModStart> |= OBJECT_ADDED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
956,<S2SV_ModStart>!= 0 ) <S2SV_ModEnd> ; if (,0
957,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
958,"<S2SV_ModStart> ; WORD32 x, x1_0, <S2SV_ModStart>, x, x1, x0, <S2SV_ModEnd> x1, x",0
959,<S2SV_ModStart> ( tag == ASN1_EOC <S2SV_ModEnd> ) { if <S2SV_ModStart> <= 0x7f ) goto check_length ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> > sizeof ( len <S2SV_ModEnd> ) - 1 <S2SV_ModStart> goto data_overrun_error ; len = 0 ; for ( <S2SV_ModEnd> ; n > <S2SV_ModStart> ] ; } check_length : if ( len > datalen - dp ) goto data_overrun_error ;,1
960,<S2SV_ModStart> ) val ; <S2SV_ModEnd> memset ( ptr,1
961,<S2SV_ModStart> mnt_dir ) ; if ( unlikely <S2SV_ModEnd> ( mnt ->,0
962,"<S2SV_ModStart> PHP_SHA512_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_SHA256_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD5_CTX context ; if ( sig_len > sizeof ( digest <S2SV_ModEnd> ) ) { <S2SV_ModStart> FAILURE ; } return FAILURE ; }",0
963,<S2SV_ModStart> ] <= max && value [ n ] - min < field -> maxusage <S2SV_ModStart> && field -> maxusage && value [ n ] - min < field -> maxusage &&,0
964,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
965,<S2SV_ModStart> if ( argReg > <S2SV_ModEnd> regsz ) { <S2SV_ModStart> regsz ) { return ;,1
966,<S2SV_ModStart> req ) ; atomic_null> <S2SV_null>,0
967,"<S2SV_ModStart> 0 ) ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> -> i_mount, args -> rmtvaluelen <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; return 0 <S2SV_ModStart> -> valuelen < args -> rmtvaluelen ) { args -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; return XFS_ERROR <S2SV_ModStart> -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; } return",1
968,<S2SV_ModStart> * info ; size_t size = sizeof ( size_t ),0
969,<S2SV_ModStart> while ( col_flag && 0,0
970,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) &&! test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) &&",1
971,"<S2SV_ModStart> ) ) ; if ( LTXTQUERY_TOO_BIG ( state. num, state. sumlen ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""ltxtquery <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ) ) ;",1
972,<S2SV_ModStart> ; int free ( screen <S2SV_ModEnd> ) ; while,0
973,<S2SV_ModStart> ; if (! EXT4_SB ( inode -> i_sb ) -> s_journal <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd>! handle ),1
974,<S2SV_ModStart> len ) { if ( len > 0 ) { return ; },0
975,"<S2SV_ModStart> ( f, ""PG%31[ <S2SV_blank> \\t]"" <S2SV_ModEnd>, temp,",0
976,<S2SV_ModStart> ( size < 5 + 1,0
977,<S2SV_ModStart> ( cr -> count <S2SV_ModEnd> ) return,0
978,"<S2SV_ModStart> len ) { if <S2SV_ModEnd> ( str, <S2SV_ModStart> str ) ) { strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; } strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str ) ; }",0
979,"<S2SV_ModStart> char * to = g. inf, * sufx = """" ; size_t pre = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> g. inf ) { if ( <S2SV_ModEnd> ( g. <S2SV_ModStart> ) ) { pre = justname ( <S2SV_ModEnd> g. hname <S2SV_ModStart> g. inf ) ; } else sufx = justname ( <S2SV_ModEnd> g. inf <S2SV_ModStart> g. hname ) ; } else if ( <S2SV_ModEnd> ( g. hname <S2SV_ModStart>, "".tgz"" ) == 0 ) sufx = justname <S2SV_ModEnd> ; if (",0
980,,1
981,"<S2SV_ModStart> * output ; MagickBooleanType status ; <S2SV_ModStart> ) ; } status = MagickFalse ; <S2SV_ModStart> i ++ ) { <S2SV_ModEnd> output = fopen_utf8 <S2SV_ModStart> input ) if ( fputc ( ( ( char ) c, output )!= c ) status = MagickFalse ; <S2SV_ModStart> ( void ) fclose ( input <S2SV_ModEnd> ) ; ( <S2SV_ModStart> ( void ) fclose ( status <S2SV_ModEnd> ) ; ( <S2SV_ModStart> ( void ) fclose ( status <S2SV_ModEnd> ) ; }",0
982,<S2SV_ModStart> ) { SvcInternal_t <S2SV_ModEnd> * const si,0
983,<S2SV_ModStart> break ; } if ( sb ) return - EFAULT ;,0
984,"<S2SV_ModStart> passwd * pwd, const char * prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> & tmpname, ""/etc"", prefix <S2SV_ModEnd> ) ) ==",1
985,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
986,<S2SV_ModStart> ) ) { if (! <S2SV_ModStart> 2 ) ) { return 0 ; },0
987,"<S2SV_ModStart> TRUE ; } Jid * my_jid = jid_create ( stanza ) ; const char * const stanza_from = xmpp_stanza_get_from ( stanza ) ; Jid * msg_jid = jid * const stanza_get_jid ( stanza_from ) ; Jid * msg_jid = jid_create ( my_jid, msg_jid -> barejid ) ; if (! jid ) { log_warning ( ""Invalid <S2SV_blank> from: <S2SV_blank> %s"", stanza_jid <S2SV_ModEnd> ) ; return <S2SV_ModStart> jid <S2SV_ModEnd> ) ; }",0
988,<S2SV_ModStart> ) ; } if ( server. ptr > 0 ) {,0
989,"<S2SV_ModStart> * net, <S2SV_ModEnd> net_name ) {",0
990,"<S2SV_ModStart> ( arg1, EXIT_FAILURE <S2SV_ModEnd>, NULL )",0
991,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; BT_DBG (,1
992,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
993,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
994,<S2SV_ModStart> = IMPEG2D_UNSUPPORTED_DIMENSIONS ; ps_dec -> u4_max_buffer = 0,0
995,<S2SV_ModStart> * zone ; size_t tilemap_size ; <S2SV_ModStart>. height ; tilemap_size = <S2SV_ModEnd> x_size * y_size <S2SV_ModStart> struct map_tile ) ; if ( x_size == 0 || tilemap_size / x_size / sizeof ( struct map_tile )!= y_size ||! ( tilemap = malloc ( tilemap_size,1
996,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ; return ( 0 ) <S2SV_ModStart>, length ) ) ; ND_TCHECK ( cp [ 2 ] <S2SV_ModStart> 4 ) { ND_TCHECK2 ( cp [ len ], 4 ) ; <S2SV_ModStart> ) ; } return ( 0 ) ; trunc : return ( - 1 ) ;",1
997,<S2SV_ModStart> * item ) { if ( p ) { <S2SV_ModStart> item ) ; return 0 ; } <S2SV_null> <S2SV_null>,0
998,"<S2SV_ModStart>, num, false <S2SV_ModEnd> ) { res",0
999,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> + 1, ""protos"" <S2SV_ModEnd>, buf ) <S2SV_ModStart> ) ) > L_BUFSIZE <S2SV_ModEnd> - 1,",0
1000,<S2SV_ModStart> if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks,1
1001,"<S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu,",1
1002,<S2SV_ModStart> 0 ; } else { <S2SV_ModStart> = args1 ; } <S2SV_ModEnd> return ;,0
1003,<S2SV_ModStart> studio_profile ) { <S2SV_ModEnd> if (!,1
1004,<S2SV_ModStart> nsops < 1 || nsops > SEMOPM,1
1005,<S2SV_ModStart> c < 0 ; i ++ ) s [ i ],0
1006,<S2SV_ModStart> < INDIRECT_BLOCKS ) {,0
1007,<S2SV_ModStart> i ) ; if ( (! i -> parent -> parent -> log ) || ( i -> log ) > i -> parent -> log ) || ( i -> log ) fprintf ( NULL ),0
1008,<S2SV_ModStart> 1 ) ; if ( q + o >= e ) goto out ;,0
1009,"<S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( bytes_matched <S2SV_ModStart> max_bytes_matched ) break ; next_input = input + i * input_incr <S2SV_ModStart> -> min ; bytes_matched = yr_min ( bytes_matched, max_bytes_matched ) ;",1
1010,"<S2SV_ModStart> len ) { assert ( len > 28 ) ; <S2SV_ModStart> case LEX_EOF : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""EOF"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_ID : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_ID : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""FLOAT"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_ID : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""FLOAT"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""FLOAT"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""REGEX"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> REGEX"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> REGEX"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case L",0
1011,"<S2SV_ModStart> mnt_instance ) ; if ( unlikely (! list_empty ( & mnt -> mnt_mounts ) ) ) { struct mount * p, * tmp ; list_for_each_entry_safe ( p, tmp, & mnt -> mnt_mounts, mnt_child ) { umount_mnt ( p ) ; } }",1
1012,"<S2SV_ModStart> writer ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> wb ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> } else { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 8 ) ; vpx_write_literal <S2SV_ModEnd> ( w,",0
1013,,1
1014,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
1015,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> uint32_t pos ; if ( inode -> i_size > inode -> i_sb -> s_blocksize ) { err = - ENAMETOOLONG ; goto out_unmap ; } <S2SV_ModStart>! bh ) { err = - EIO ; goto out_unlock_inode ; } <S2SV_ModEnd> symlink = bh <S2SV_ModStart> return 0 ; out_unlock_inode <S2SV_ModEnd> : up_read ( <S2SV_ModStart> page ) ; out_unmap :,1
1016,<S2SV_ModStart> else if ( cpu_has_secondary_exec_ctrls ( ) && ( vmcs_read32 ( SECONDARY_VM_EXEC_CONTROL ) & SECONDARY_EXEC_VIRTUALIZE_X2APIC_MODE ) <S2SV_ModEnd> ) { if,1
1017,"<S2SV_ModStart> if ( ent == NULL ) { st = KRB5_KDB_NOENTRY ; <S2SV_ModEnd> goto cleanup ; <S2SV_ModStart> cleanup ; } st = populate_policy ( context, ld, ent, pol_name, * policy ) ;",1
1018,<S2SV_ModStart> } else { return ret <S2SV_ModEnd> ; } if,0
1019,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> unsigned int <S2SV_ModEnd> maxh, int <S2SV_ModStart> = 0 ; int bh_blocks <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 1 ; if ( ext2SV_null> <S2SV_null> int ) { ext2SV_null>",0
1020,<S2SV_ModStart> ( psf = 0,0
1021,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( i,1
1022,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
1023,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1024,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",0
1025,"<S2SV_ModStart> int num_items_scanned ; guint pkt_len ; int <S2SV_ModEnd> pktnum, hr <S2SV_ModStart> + 64, ""LEN=%9d"" <S2SV_ModEnd>, & pkt_len <S2SV_ModStart> g_strdup ( ""toshiba: <S2SV_blank> item""",0
1026,<S2SV_ModStart> ; int err = 0 ; msg -> msg_namelen,1
1027,"<S2SV_ModStart> ; if ( zend_hash_find <S2SV_ModEnd> ( ht,",1
1028,"<S2SV_ModStart> ], 0",0
1029,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> ; } } io -> io_cleanup = io_cleanup ;,0
1030,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",0
1031,<S2SV_ModStart> p -> tokenpos >= ( <S2SV_ModEnd> p -> tokenlen <S2SV_ModStart> p -> tokenlen - 1 ),1
1032,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BLOCK_SIZE BLOCK_8x8x8x8x8x8 ( BLOCK_8x8x8 <S2SV_ModEnd> ) { return <S2SV_ModStart> = BLOCK_8x8 <S2SV_ModEnd> ( bsize, <S2SV_ModStart> == BLOCK_8X8X8X8x8 <S2SV_ModEnd> ) { return <S2SV_ModStart> ; } return vp9_mse_group <S2SV_ModEnd> ; } <S2SV_null>",0
1033,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1034,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> & 0xFFFF ; },1
1035,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
1036,<S2SV_ModStart> ; if (! request -> attributes &&,0
1037,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1038,"<S2SV_ModStart> -> stratum_port ; snprintf ( address, 254 <S2SV_ModEnd>, ""%s:%s"",",1
1039,<S2SV_ModStart> ) ) { if ( page_name_is_good ( page <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ) { if (! page_str <S2SV_ModEnd> ( page ) <S2SV_ModStart> ) ) { return <S2SV_ModEnd> = strlen ( <S2SV_ModStart> ) ) ; } else if ( page_count == NULL ) { if (! page_count ; return ; },0
1040,<S2SV_ModStart> + i ; unsigned int actual_size = f -> blocksize_1 / 2 ; unsigned int limit_r_begin = r -> begin < actual_size? r -> begin : actual_size ; unsigned int limit_r_end = r -> end < actual_size? r -> end : actual_size ; <S2SV_ModStart> int n_read = limit_r_end - limit_r_begin <S2SV_ModEnd> ; int part_read,1
1041,<S2SV_ModStart> head -> iov_base ; if ( hdr > head -> iov_len ) return 0,1
1042,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
1043,<S2SV_ModStart> -> buf_buf ; if ( len < 2 ) { dev_buf -> dev_buf ; target_buf_size = - 1 ; return ; } <S2SV_ModStart> -> buf_size ) ; if ( <S2SV_ModStart> < 0 ) { dev_err ( & va_buf -> buf_size ) ; return ; },0
1044,"<S2SV_ModStart> size ) { if ( size_t ) check_overflow ( size, size ) ;",0
1045,<S2SV_ModStart> ; ssize_t count ; if ( bytes == 0 || items == 0 ) return 0,1
1046,<S2SV_ModStart> -> serviceId = EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,0
1047,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,0
1048,<S2SV_ModStart> = 1 ; if ( table_is_good ) return - EINVAL ;,0
1049,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( sb,0
1050,<S2SV_ModStart> ) ) { if (! <S2SV_ModEnd> r ) return,0
1051,<S2SV_ModStart> 0 ) ; hrtimer_try_to_cancel <S2SV_ModEnd> ( & stime,1
1052,"<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> low ) ; }",0
1053,"<S2SV_ModStart> ) { struct l2cap_mode_t req ; struct l2cap_mode_mode_t req ; struct l2cap_conf_mode = req. mode ; struct l2cap_mode_t req. mode = & pi -> mode ; struct l2cap_conf_mode = req. mode ; <S2SV_ModStart> if (! l2cap_mode ) { <S2SV_ModEnd> pi -> mode <S2SV_ModStart> = L2CAP_MODE_ERTM ; resp = cpu_to_rsp |= L2CAP_MODE_32 ( rfc. <S2SV_ModEnd> & pi -> <S2SV_ModStart> * req, & l2cap_conf_mode ) ; <S2SV_ModEnd> if ( rc <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( rc <S2SV_ModStart> ( pi -> <S2SV_ModEnd> & pi -> <S2SV_ModEnd> & pi -> <S2SV_ModStart> ) ; }",0
1054,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, MSG_WAIT )",0
1055,<S2SV_ModStart> -> chunksize = UINT64_MAX <S2SV_ModEnd> ; for (,1
1056,<S2SV_ModStart> -> u1_first_slice_in_pic = 1 <S2SV_ModEnd> ; ps_dec ->,0
1057,<S2SV_ModStart> { while ( key == 0 &&,0
1058,<S2SV_ModStart> } err = crypto_rng_alg ( tfm ) <S2SV_ModEnd> -> seed (,1
1059,<S2SV_ModStart> = uid ; <S2SV_ModEnd> new -> count <S2SV_ModStart> new -> count = 0 <S2SV_ModEnd> ; spin_lock_irq ( <S2SV_ModStart> } if ( <S2SV_ModEnd> ucounts -> count <S2SV_ModStart> ucounts -> count == INT_MAX ) ucounts = NULL ; else ucounts -> count += 1 <S2SV_ModEnd> ; spin_unlock_irq (,1
1060,"<S2SV_ModStart> ) ; } if ( err == 0 ) goto out_put ; if ( datagrams <S2SV_ModEnd> == 0 ) <S2SV_ModStart> == 0 ) { datagrams = err ; goto out_put ; } <S2SV_ModEnd> if ( err <S2SV_ModStart> err ; } out_put : fput_light ( sock -> file, fput_needed ) ; <S2SV_ModStart> datagrams ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
1061,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1062,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> = 0 ; len - i >= 8 * 32 <S2SV_ModEnd> ; i += <S2SV_ModStart> ] ; } for ( ; i < len ; i += 32 ) { ( void ) tab [ i ] ; },1
1063,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { if ( <S2SV_ModStart> ) ; } if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result ) ;,1
1064,"<S2SV_ModStart> * deleg_stateid, fmode_t fmode <S2SV_ModEnd> ) { int <S2SV_ModStart>, open_flags, fmode <S2SV_ModEnd> ) ; if <S2SV_ModStart>. type & fmode_t fmode <S2SV_ModEnd> ) { goto",0
1065,"<S2SV_ModStart> ResourceLimitError, ""MemoryAllocationFailed"" ) ; ( void ) ResetMagickMemory ( global_colormap, 0, 3 * MagickMax ( global_colors, 256 ) * sizeof ( * global_colormap )",1
1066,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1067,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1068,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> init ( MACROBLOCKD <S2SV_ModStart>, int i, int64_t * rate_t <S2SV_ModEnd>, int64_t <S2SV_ModStart> sse ; # if CONFIG_VP9_HIGHBITDEPTH int64_t <S2SV_ModEnd> ) { int <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH int64_t <S2SV_ModEnd> ( sse, <S2SV_ModStart> -> quant_thred [ i ] = 0 ; # if CONFIG_VP9_HIGHBITDEPTH int64_t dequant = 0 ; # endif <S2SV_ModStart> sse = 0 ; # if CONFIG_VP9_VP9_HIGHBIT ( cpi -> common. buf_size == BLOCK_64_t ) xd -> mbmi. buf_size = 0 ; for ( i < sse ) { int64_t rate = 0 ; for ( i = 0 ; ++ ) { for ( i < sse ; i ++ ) { int64_t dist_t rate = 0 ; for ( i = 0 ; ++ ) { int64_t rate = 0 ; } # if ( rate. stride [ 0 ]. stride [ rate. stride ]. tx_size [ i ]. stride [ 1 ].",0
1069,<S2SV_ModStart> if ( vec >= vec ) goto next,0
1070,"<S2SV_ModStart> ; if ( snpal == 6 ) ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> %u) <S2SV_blank> %u) <S2SV_blank> %u) <S2SV_blank> (length: <S2SV_blank> %u) <S2SV_blank> %s"", netal, netal, <S2SV_ModEnd> 0 ) ) ;",0
1071,<S2SV_ModStart> * ptr ++ ; if ( len == '\\0' || <S2SV_ModEnd> ( ptr <S2SV_ModStart>!= '\\0' ) ),0
1072,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { return vpx_read_tree <S2SV_ModEnd> ( r,",1
1073,<S2SV_ModStart> ; uint32_t backup_handle = 0 <S2SV_ModStart> ret == 0 ) { if ( <S2SV_ModEnd> res -> backup <S2SV_ModStart> goto out_unlock ; } else { backup_handle = req -> buffer_handle ; },1
1074,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool get_desc ( <S2SV_ModStart> struct desc_struct * out, <S2SV_ModEnd> unsigned short sel <S2SV_ModStart> SEGMENT_LDT ) { bool success = false <S2SV_ModEnd> ; struct ldt_struct <S2SV_ModStart> -> nr_entries ) { * out = <S2SV_ModEnd> ldt -> entries <S2SV_ModStart> sel ] ; success = true ; } <S2SV_ModStart> ) ; return success <S2SV_ModEnd> ; } # <S2SV_ModStart> size ) return false ; * out = * <S2SV_ModEnd> ( struct desc_struct <S2SV_ModStart> desc_base ) ; return true ;",1
1075,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1 + <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",0
1076,<S2SV_ModStart> bp ; struct ipv6_addr * np = inet6_sk ( sk ) ; struct <S2SV_ModStart> sctp_addr dst_saddr ; struct,0
1077,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1078,<S2SV_ModStart> ) + 1,0
1079,<S2SV_ModStart> client -> protocol_timeout_t <S2SV_ModEnd> ) ; if,0
1080,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> < ie && <S2SV_ModEnd> ND_TTEST ( *,1
1081,<S2SV_ModStart>,0
1082,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1083,<S2SV_ModStart> goto,0
1084,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
1085,<S2SV_ModStart> endif # endif # else # endif # endif,0
1086,"<S2SV_ModStart> * x0, x0, ycount = 0",0
1087,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
1088,<S2SV_ModStart> ; if ( pmd_none_trans_huge_t <S2SV_ModEnd> ( pmd ),0
1089,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1090,"<S2SV_ModStart> 0 ) ; int minsz = R_MIN ( len, 0 ) ; minsz = R_MAX ( minsz, 0 ) ; <S2SV_ModStart> ; j < minsz <S2SV_ModEnd> ; j ++ <S2SV_ModStart> ++ ) { ut8 ch = ( ( len + idx - 1 ) > minsz )? 0xff : <S2SV_ModEnd> buf [ j <S2SV_ModStart> + idx ] ; r_cons_printf ( ""%02x"", ch <S2SV_ModStart>!= UT64_MAX ) { <S2SV_ModStart> ptr ) ; } <S2SV_ModStart>!= UT64_MAX ) { <S2SV_ModStart> ptr ) ; } <S2SV_ModStart> ptr ) { <S2SV_ModStart> ptr ) ; }",0
1091,"<S2SV_ModStart> int height, format_width_height, const <S2SV_ModStart> * ctx ; int height <S2SV_ModEnd> ; argv [ <S2SV_ModStart> ] ; } # endif <S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( f, <S2SV_ModStart> ) ; } if ( height_height > 0 ) { printf ( ""Input <S2SV_blank> <S2SV_blank> (%d ) ; return 0 ; } <S2SV_ModStart> ) ; exit ( <S2SV_ModEnd> mode ) ;",0
1092,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 head, tail, size ; tail = <S2SV_ModEnd> ( chip -> <S2SV_ModStart> + JQS_wHead ) ; if ( head > size || tail > size > size ) goto out ; size = <S2SV_ModEnd> ; out : <S2SV_ModStart> + JQS_w ( head ) ; if ( head > size || tail > size ) goto out ; if ( head > size || head > size || head > size ) goto out ; if ( head > size && head > size ) goto out : <S2SV_ModEnd> ; out :",0
1093,<S2SV_ModStart> * opcode_desc ; if ( len < 2 ) { return NULL ; },1
1094,<S2SV_ModStart> ACPI_mutex ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1095,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
1096,<S2SV_ModStart> [ sizeof ( the_url <S2SV_ModEnd> ) - 1,0
1097,"<S2SV_ModStart> num, & Py_TYPE_NONE <S2SV_ModEnd> ) { return",0
1098,"<S2SV_ModStart>. match_key, 0 <S2SV_ModEnd> ) ; if",0
1099,<S2SV_ModStart> vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; vpx_codec_alg_priv_t * <S2SV_ModStart> ) ) { vpx_priv_t * priv = sizeof ( struct vpx_codec_alg_priv_t * ) <S2SV_ModEnd> ; priv = <S2SV_ModStart> ; priv = sizeof ( priv <S2SV_ModEnd> ) ) ; <S2SV_ModStart> { priv <S2SV_ModEnd> ; priv -> <S2SV_ModStart> ; priv -> si. sz = sizeof ( priv <S2SV_ModEnd> ) ) ;,0
1100,"<S2SV_ModStart> error ) { if ( bp && ( <S2SV_ModEnd> xfs_da_shrink_inode ( args <S2SV_ModStart>, bp )!= 0 ) <S2SV_ModEnd> ) goto out",1
1101,<S2SV_ModStart> if ( cat == 4,0
1102,<S2SV_ModStart> slave_active_lock ) ; spin_lock ( & timer -> lock ) ; <S2SV_ModStart> -> timer -> lock <S2SV_ModEnd> ) ; list_del,0
1103,<S2SV_ModStart> return err ; if (! <S2SV_ModEnd> attrs [,0
1104,"<S2SV_ModStart> data ) { memset ( & data, 0, sizeof ( fragments ) ) ; <S2SV_ModStart> = 1 ; } else { ctx -> fragments [ i ]. fragments [ i ] = 0 ; } <S2SV_ModEnd> } if (",0
1105,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1106,<S2SV_ModStart> ) buffer ; if ( total_len < sizeof ( * cap ) || total_len < <S2SV_ModEnd> cap -> bLength <S2SV_ModStart> cap -> bLength ) { dev -> bos -> bLength = i ; break ; } length = cap -> bLength <S2SV_ModEnd> ; total_len -=,0
1107,<S2SV_ModStart> task = current <S2SV_ModEnd> ; if (,1
1108,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo ->,0
1109,<S2SV_ModStart>,0
1110,<S2SV_ModStart> long flags ; size_t <S2SV_ModEnd> len ; if,0
1111,<S2SV_ModStart> sk_dst_alloc ) ; <S2SV_ModEnd> ( & sk ->,0
1112,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
1113,<S2SV_ModStart>! saw_digit ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\r' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\n' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\r' ) { bp ++ ; <S2SV_ModStart> goto invalid ;,0
1114,"<S2SV_ModStart> ; args -> rmtvaluelen = be32_to_cpu ( name_rmt -> valuelen ) ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ( name_rmt -> <S2SV_ModEnd> valueblk ) ; <S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; return",1
1115,<S2SV_ModStart>,0
1116,<S2SV_ModStart> - 1 ; <S2SV_ModEnd> if ( object,0
1117,"<S2SV_ModStart>, j ) int vdaux = verdef -> vd_aux ; if ( vdaux < 1 ) { sdb_free ( sdb_verdef ) ; goto out_error ; } vstart += vdaux <S2SV_ModEnd> ; if (",0
1118,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
1119,<S2SV_ModStart> u8 label_len ; <S2SV_ModEnd> GET8 ( label_len <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ;,1
1120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( cc % <S2SV_ModStart> * stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpAcc"", ""%s"", ""cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> tmp ) ; return 1 ;",1
1121,"<S2SV_ModStart> -> vm_ops ) <S2SV_ModEnd> return do_fault ( <S2SV_ModStart>, pte, pmd, flags, entry ) ; <S2SV_ModEnd> return do_anonymous_page ( <S2SV_ModStart>, address, pte, pmd, <S2SV_ModEnd> flags ) ;",1
1122,"<S2SV_ModStart> s ) { size_t len = strlen ( s ) + 1 ; <S2SV_ModStart> = pool_alloc ( len ) ; memcpy <S2SV_ModEnd> ( r, <S2SV_ModStart> r, s, len",1
1123,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1124,"<S2SV_ModStart>! new_idmap_permitted ( file,",1
1125,,0
1126,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> if ( i,0
1127,"<S2SV_ModStart> ( bfilename, ""%s"",",0
1128,"<S2SV_ModStart> 0 ) { if ( len < ( u_int ) advance ) goto trunc ; <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) return ; <S2SV_ModStart> case IPPROTO_ROUTING : ND_TCHECK ( * cp ) ; <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) return ; <S2SV_ModStart>, cp ) ; if ( advance < 0 ) return <S2SV_ModStart> padlen ) ; if ( advance < 0 ) return ;",1
1129,<S2SV_ModStart> size_t num + 1,0
1130,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo ->,0
1131,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1132,<S2SV_ModStart> dst. y_stride <S2SV_ModEnd> ) ; },0
1133,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
1134,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) {",0
1135,"<S2SV_ModStart> ctxt ) ; if (! ( em_syscall_is_enabled ( ctxt ) ) ) return emulate_ud ( ctxt ) ; <S2SV_ModStart>, & ss ) ; if (! ( efer & EFER_SCE ) ) return emulate_ud ( ctxt",1
1136,"<S2SV_ModStart>, sizeof ( ctx -> data_size )",0
1137,"<S2SV_ModStart> ), true <S2SV_ModEnd> ) ; if",0
1138,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int shift_avg_avg_y, <S2SV_ModEnd> unsigned int mc_avg_avg_y, <S2SV_ModStart> unsigned char * mc_avg_stride, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> int i, int shift_stride, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> int i, int shift_stride, int shift_stride, <S2SV_ModStart> 0 ) { int increase_d = ( running_avg_y_y_y_y_y_stride + shift_stride - 1 ) <S2SV_ModEnd> ; for ( <S2SV_ModStart> ; i = 0 ; i < avg_y_avg_y <S2SV_ModEnd> ; i <S2SV_ModStart> } else if ( increase_y_avg_y_avg_y_y_y_stride ) <S2SV_ModEnd> ( c, <S2SV_ModStart> + 1 ) <S2SV_ModEnd> } else if ( <S2SV_ModStart> 0 ) { increase_d = ( shift_magnitude - 1 ) <S2SV_ModStart> 0 ; for ( i = 0 ; i < max_magnitude && i ++ ) for ( i = 0 ; i ++ ) for ( i = 0 ; i < delta2SV_null>",0
1139,<S2SV_ModStart> = 0 ; ND_TCHECK ( sockPtr ) ;,0
1140,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; ret =,0
1141,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
1142,<S2SV_ModStart> * xop ; <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1143,"<S2SV_ModStart> ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close_sock ; } val = 1 ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_RECVHOPLIMIT, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_RECVHOPLIMIT,.""",1
1144,<S2SV_ModStart>,0
1145,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1146,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1147,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return - EINVAL <S2SV_ModEnd> ; } break",0
1148,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1149,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1150,<S2SV_ModStart> 3 * len + 8,1
1151,<S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { points [ i ]. x = <S2SV_ModStart> var ) ; } <S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { points [ i ]. y = <S2SV_ModStart> ; } } },1
1152,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1153,"<S2SV_ModStart>, size_t ) - 1",0
1154,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
1155,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) <S2SV_ModEnd> va_list args ;",0
1156,"<S2SV_ModStart>. path ; return Curl_urldecode <S2SV_ModEnd> ( data, <S2SV_ModStart>, 0, & <S2SV_ModEnd> pop3c -> mailbox <S2SV_ModStart> pop3c -> mailbox, NULL, TRUE ) <S2SV_ModEnd> ; } <S2SV_null>",1
1157,<S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ;,1
1158,"<S2SV_ModStart> gb ) ; if ( s -> ref && sh -> first_slice_in_pic_flag ) { av_log ( s -> avctx, AV_LOG_ERROR, ""Two <S2SV_blank> slices <S2SV_blank> reporting <S2SV_blank> being <S2SV_blank> the <S2SV_blank> first <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> frame.\\n"" ) ; return 1 ; }",1
1159,<S2SV_ModStart> } } } <S2SV_ModEnd> } else {,0
1160,<S2SV_ModStart> 0 ) { if ( ps_dec -> u2_num_mbs_offset < ps_dec -> u4_num_height ) { break ; },0
1161,"<S2SV_ModStart> ) { const VP9_COMMON * const cm = & cm -> frame_buffer <S2SV_ModEnd>, cm ->",0
1162,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1163,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> max_block_tx_size ( int <S2SV_ModStart> = get_uv_tx_size ( mbmi -> mbmi, int64_t <S2SV_ModEnd> ) { int <S2SV_ModStart> 1 ) ; int segment_size = 0 ; if ( is_intra_block ( xd -> plane [ 0 ], plane [ 0 ] ) > MAX_MB_SIZE ) { for ( i = 0 ; i < max_tx_size ) { i ++ i ) { for ( i = 0 ; i > max_x4x4x4_block ( xd -> plane, plane, plane, plane, plane, plane [ 0 ) >> 4 ) ; } else { for ( i = 0 ; ++ ) { for ( i = 0 ; i < max_x4x4_block_size ) ; i ++ ) { for ( i ++ ) { for ( i = 0 ; i < max_x4_frame ; i ++ ) { for ( i ++ ) { for ( i = 0 ; i < max_x4x4x4_block_len ; i ++ ) { for ( i = 0 ; i >= max_x4_",0
1164,<S2SV_ModStart> -> mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor <S2SV_ModEnd> ; if (,1
1165,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
1166,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> fmt, 1 <S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, sizeof",1
1167,"<S2SV_ModStart> nrow ) { unsigned int rowsperstrip + img -> row_offset ; <S2SV_ModStart> = ( img -> row_offset, img -> row_offset ) * scanline <S2SV_ModEnd> ; TIFFErrorExt (",0
1168,<S2SV_ModStart> else return NULL <S2SV_ModEnd> ; } },0
1169,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1170,<S2SV_ModStart> ( upid == INT_MIN ) return - ESRCH ; if ( upid ==,1
1171,"<S2SV_ModStart> siocb -> scm, false",1
1172,<S2SV_ModStart> ( num >= 1 <S2SV_ModEnd> ) ) return,0
1173,"<S2SV_ModStart>, plane ) * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? 2 : 1 )",0
1174,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> v2SV_null> <S2SV_null>,0
1175,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; int r = 0 ; if <S2SV_ModEnd> ( lc -> <S2SV_ModStart> ( lc -> start || ti -> len!= i_size_read ( dev -> bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL, cmd ) ; return r? : __blkdev_driver_ioctl ( <S2SV_ModStart> -> bdev, <S2SV_ModEnd> dev -> mode",1
1176,<S2SV_ModStart> ( actx -> len,0
1177,<S2SV_ModStart> (! name ) ||! capable (,0
1178,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; return",0
1179,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1180,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1181,"<S2SV_ModStart> sock, sk ) ; memset ( & sa, 0, sizeof ( sa ) ) ;",0
1182,<S2SV_ModStart> } else { for ( cpkt [ data_len = 0 ; },0
1183,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC | NTLMSSP_NEGOTIATE_SEAL <S2SV_ModStart> -> sign ) <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,1
1184,<S2SV_ModStart> ) ; } mutt_empty ( adata -> conn <S2SV_ModEnd> ) ; mutt_close,0
1185,<S2SV_ModStart> crypto_report_key ) ; strncpy <S2SV_ModEnd> ( skb.,0
1186,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
1187,<S2SV_ModStart> -> head <= 0 || ( unsigned char ) ( ( g -> sect << 2 ) >> FD_SIZECODE ( g ) ) ==,1
1188,<S2SV_ModStart> return - 1,0
1189,"<S2SV_ModStart>, & rlen, 0",1
1190,<S2SV_ModStart> user ) ; <S2SV_ModEnd> if ( user -> password <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> < 0 ) { <S2SV_ModStart> ) ; },0
1191,"<S2SV_ModStart> mntent, path, rootfs -> mount",1
1192,"<S2SV_ModStart>, p, NULL <S2SV_ModEnd> ) ; if",0
1193,<S2SV_ModStart> - offset ; unsigned short prev_bi_vcnt = bio -> bi_vcnt ; <S2SV_ModStart> ) break ; if ( bio -> bi_vcnt == prev_bi_vcnt ) put_page ( pages [ j ] ) ;,1
1194,<S2SV_ModStart> -> depth > 32 <S2SV_ModEnd> ) { jas_eprintf,0
1195,"<S2SV_ModStart> state. path <S2SV_ModEnd> ; char localhost <S2SV_ModStart> ""localhost"" ; } result = Curl_urldecode ( conn -> data, path, 0, & <S2SV_ModStart> smtpc -> domain, NULL, TRUE ) ; if ( result ) return result <S2SV_ModEnd> ; state (",1
1196,"<S2SV_ModStart> len ) { if <S2SV_ModEnd> ( str, <S2SV_ModStart> str ) ) { strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; } strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str ) ; }",0
1197,,0
1198,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1199,<S2SV_ModStart> rds_header ) ; if ( ret == 0 ) return - EINVAL ;,0
1200,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1201,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1202,,1
1203,"<S2SV_ModStart> { r_cons_printf ( ""\\""k <S2SV_blank> bin/pe/%d=%s/%d=%s\\""\\n"" <S2SV_ModEnd>, module, <S2SV_ModStart> { r_cons_printf ( ""\\""k <S2SV_blank> bin/pe/%d=%s\\""\\n"" <S2SV_ModEnd>, module,",0
1204,"<S2SV_ModStart>, rqstp, res <S2SV_ModEnd> ) ; out",1
1205,<S2SV_ModStart> mnt_dir ) ; if ( unlikely <S2SV_ModEnd> ( mnt ->,0
1206,"<S2SV_ModStart> ( iv ), NULL <S2SV_ModEnd> ) ;",0
1207,"<S2SV_ModStart> ) ) { * status = ""INVALID_S4U2PROXY_OPTIONS"" ; <S2SV_ModStart> ) ) { * status = ""EVIDENCE_TICKET_MISMATCH"" ;",1
1208,<S2SV_ModStart> thread -> tp_value [ 0 ] <S2SV_ModStart> childregs -> ARM_r3 ; thread -> tp_value [ 1 ] = get_tpuser ( ),1
1209,"<S2SV_ModStart> bufsize ) { char * new_bufsize ; size_t new_bufsize <S2SV_ModEnd> ; JAS_DBGLOG ( <S2SV_ModStart> ; if ( bufsize < 0 ) { jas_deprecated ( ""negative <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> for <S2SV_blank> jas_stream_memopen"" ) ; } if ( bufsize <= 0 ) { jas_deprecated ( ""invalid <S2SV_blank> jas_stream_memopen <S2SV_blank> "" ) ; new_bufsize <S2SV_ModEnd> ; } if <S2SV_ModStart> } else { new_bufsize <S2SV_ModEnd> = bufsize ; new_bufsize <S2SV_ModEnd> ; } <S2SV_null>",0
1210,"<S2SV_ModStart> sshbuf * b = NULL <S2SV_ModStart> u_char * pkblob = NULL <S2SV_ModStart> kbuf ) ; if (! authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done <S2SV_ModStart> ) ) ; } if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done <S2SV_ModStart> b ) ; <S2SV_ModEnd> auth2 ( __func__ ) ;",0
1211,<S2SV_ModStart> ; uint32_t bcount ; CLEAR ( WaveHeader ),1
1212,<S2SV_ModStart> ( iter ) <S2SV_ModEnd> ; if (,0
1213,<S2SV_ModStart> ( ctx ) <S2SV_ModEnd> return ;,0
1214,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1215,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ;",0
1216,"<S2SV_ModStart> failed_mount3 ; } # ifdef CONFIG_EXT2_FS_XATTR sbi -> s_mb_cache = ext2_xattr_create_cache ( ) ; if (! sbi -> s_mb_cache ) { ext2_msg ( sb, KERN_ERR, ""Failed <S2SV_blank> to <S2SV_blank> create <S2SV_blank> an <S2SV_blank> mb_cache"" ) ; goto failed_mount3 ; } # endif <S2SV_ModStart> ; failed_mount3 : if ( sbi -> s_mb_cache ) ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ;",1
1217,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1218,<S2SV_ModStart> len < tcp_hdrlen || tcp_hdrlen < sizeof ( struct tcphdr ) <S2SV_ModStart> ; if ( tcp_hdrlen >= 15 * 4 ) return 0 ; if (,1
1219,<S2SV_ModStart> int i ; size_t size ; matrix = 0 ; <S2SV_ModStart> 0 ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> -> datasize_ = 0 ; if (! jas_matrix_destroy ( matrix ) ) ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> -> datasize_ = size <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } return matrix,0
1220,"<S2SV_ModStart> ipv6_select_ident ( fh, rt <S2SV_ModStart> ipv6_select_ident ( fh, rt",1
1221,"<S2SV_ModStart> header, struct mb2_cache_entry <S2SV_ModEnd> * cache, <S2SV_ModStart> int error ; <S2SV_ModEnd> if ( error <S2SV_ModStart> error ; } <S2SV_ModEnd> if ( error <S2SV_ModStart> bh ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ) ; } <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> bh ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ) ; }",0
1222,<S2SV_ModStart> * req ; <S2SV_ModEnd> req = scsi_req_alloc <S2SV_ModStart> hba_private ) ; <S2SV_ModEnd> return req ;,1
1223,<S2SV_ModStart> * buf ; int len <S2SV_ModEnd> ) ; int,0
1224,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1225,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
1226,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct xfrm_dump_info <S2SV_ModStart> struct xfrm_dump_info info <S2SV_ModEnd> ; info. <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> ( void ),1
1227,<S2SV_ModStart> (! buf || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1228,"<S2SV_ModStart> dentry * upper <S2SV_ModEnd> ; int err <S2SV_ModStart> I_MUTEX_PARENT ) ; upper = lookup_name_len ( dentry -> d_name. name, upperdir, dentry -> d_name. len ) ; err = PTR_ERR ( upper ) ; if ( IS_ERR ( upper ) ) goto out_unlock ; <S2SV_ModStart> if ( upper == PTR_ERR_ERR ( upper ) ) { <S2SV_ModEnd> if ( IS_ERR <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> ovl_ERR ( upper <S2SV_ModStart> dentry_name. name",0
1229,<S2SV_ModStart>,0
1230,<S2SV_ModStart> * ptrptr && <S2SV_ModEnd> nmemb && size <S2SV_ModStart> nmemb && size <S2SV_ModEnd> ) return AVERROR,1
1231,<S2SV_ModStart> ( a -> type == szMAPI_BINARY && a -> <S2SV_ModStart> else if ( a -> type == szMAPI_BINARY &&,1
1232,<S2SV_ModStart> i ) ; if ( ( i -> posY > i -> parent -> log ) || ( i -> log ) > i -> parent -> log ) || ( i -> log ) fprintf ( NULL ),0
1233,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( const size_t * ) val ; return 0 ;,0
1234,"<S2SV_ModStart> { jas_eprintf ( ""got <S2SV_blank> box <S2SV_blank> type <S2SV_blank> %s\\n"" <S2SV_ModEnd>, box ->",1
1235,,1
1236,"<S2SV_ModStart> ; err : memset ( dev, 0, sizeof ( dev ) ) ;",0
1237,<S2SV_ModStart> page ) { <S2SV_ModEnd> return 0 ;,0
1238,<S2SV_ModStart> ; while ( i < 1 ||,0
1239,<S2SV_ModStart> UINT32 nsc_rle_encode ( const,1
1240,<S2SV_ModStart>,0
1241,"<S2SV_ModStart> * dllhandle ; if ( COM_CompareExtension ( name, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", name ) ; return NULL ; }",1
1242,<S2SV_ModStart> NULL ) { <S2SV_ModEnd> if ( i,0
1243,<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> ++ ; } \\\n} <S2SV_ModEnd> typedef struct,0
1244,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1245,"<S2SV_ModStart>, line, NULL <S2SV_ModEnd> ) ; }",0
1246,"<S2SV_ModStart> # ifdef HAVE_IPV6 <S2SV_ModEnd> if ( * <S2SV_ModStart> 1 ) { char * <S2SV_ModStart> - 2 ), * e = NULL <S2SV_ModStart> * portno = strtol <S2SV_ModEnd> ( p + <S2SV_ModStart> p + 2, & e, 10 ) ; if ( e || * e ) { * e = NULL ; * err = NULL ; * e = sizeof ( str ) ; return NULL ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> NULL ; } <S2SV_ModEnd> return e",0
1247,"<S2SV_ModStart> i ++, jsize <S2SV_ModEnd> ) ) {",0
1248,<S2SV_ModStart> src -> y_width && dst_height,0
1249,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHWELCOME ; }",1
1250,<S2SV_ModStart> == * ptr && ptr [ 1 ],1
1251,"<S2SV_ModStart> const tile_row, MACROBLOCKD * const x, MACROBLOCKD * const x, MACROBLOCKD * const x, <S2SV_ModStart> -> common ; MACROBLOCKD * const x = & tile_context -> td <S2SV_ModEnd> -> mb_context_context_context_context_context <S2SV_ModStart> i ] ; int i ; int i ; int i ; for ( i ; i = 0 ; i < 8 ; i ++ i ; ++ i ++ i <S2SV_ModEnd> [ i ] <S2SV_ModStart> ) { const int i ; for ( i = 0 ; i < tile_type == 0 ; i ++ i ++ i ++ i ; ++ i ++ i ++ i ++ i ++ i ++ i ++ i ++ i ++ ) { for ( i = 0 ; ++ ) { for ( i < tile_type == 0 ; i ++ ) { for ( i = 0 ; i < 4 ; i ++ i ++ i ++ i ++ i ++ ) { for ( i ; i < index ) { for ( i = 0 ; i < 4 ; i ++ i ++ ) { for ( i = i < 4 ; i ++ i ++ i ++ ) { for ( i < 4 ; i ++ i ++ i ++ ) { for ( i ++ i ++ ) {",0
1252,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
1253,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> mv_cm -> mv,0
1254,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1255,<S2SV_ModStart> > - 1 && skb -> len,0
1256,<S2SV_ModStart> sta -> lock ) ; spin_lock_init ( & sta -> ps_lock,1
1257,<S2SV_ModStart> tp_event ) && perf_paranoid_tracepoint_raw <S2SV_ModEnd> ( ) &&,1
1258,<S2SV_ModStart> endif sctp_v4 <S2SV_ModEnd> ( ) ;,0
1259,"<S2SV_ModStart>, 0 ) ; if (! data_interface ||! control_interface ) return - ENODEV",1
1260,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1261,<S2SV_ModStart> = NULL ; if ( env ) continue ;,0
1262,"<S2SV_ModStart> * head ; <S2SV_ModEnd> newsk -> sk_sndbuf <S2SV_ModStart> -> sk_rcvbuf ; sctp_copy_descendant <S2SV_ModEnd> ( newsk,",1
1263,"<S2SV_ModStart> int xinput = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) <S2SV_ModStart> } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) ; if ( <S2SV_ModStart> ( fd ) < 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd ) ) ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1264,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return sel ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! get_desc ( & desc, sel ) <S2SV_ModEnd> ) return - <S2SV_ModStart>! ( desc. <S2SV_ModEnd> d ) {",0
1265,<S2SV_ModStart> ctx ) ; vpx_free <S2SV_ModEnd> ( & ctx,0
1266,<S2SV_ModStart>,0
1267,<S2SV_ModStart> return ret ; fsnotify_put_group ( group ) ;,1
1268,<S2SV_ModStart> kctx = 0 <S2SV_ModEnd> ; if (,0
1269,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> = S64_MAX ; <S2SV_ModEnd> if ( src_bitness,0
1270,<S2SV_ModStart> = DirectResource <S2SV_ModEnd> ; if (,0
1271,<S2SV_ModStart> ) == START_CODE && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),0
1272,<S2SV_ModStart> ( ) ) goto out <S2SV_ModEnd> ; if (,0
1273,<S2SV_ModStart> ( mono ) <S2SV_ModEnd> ; if (,0
1274,"<S2SV_ModStart> * buf, * count ) return - 1",0
1275,"<S2SV_ModStart> input -> cur ), 0",0
1276,"<S2SV_ModStart> } if ( le32_to_cpu ( raw_super -> segment_count ) > F2FS_MAX_SEGMENT ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> segment <S2SV_blank> count <S2SV_blank> (%u)"", le32_to_cpu ( raw_super -> segment_count ) ) ; return 1 ; } if (",1
1277,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( is_path ) && ( strlen ( name [ 6 ] == '\\0' || ( strlen ( name [ 7 ] == '\\0' || ( len == '\\0' || ( len == ':' ) ) && <S2SV_ModStart> ( is_path && ( len == ':' ) && ( len && <S2SV_ModStart> name [ len ] == ':' ) && ( len ++ ] == '\\0' || ( len && <S2SV_ModStart> name [ len ] == ':' ) && ( len ] == '\\0' || ( len -- ) ) && <S2SV_ModStart> )!= '\\0' || ( * name [ len ] == '\\0' || ( len ] == '\\0' || ( name [ len ] == '\\0' || ( len ] == '\\0' || ( len == ':' ) ) ) && ( is_path && <S2SV_ModStart> ( is_path && ( name [ len ] == '\\0' || ( len ] == '\\0' && <S2SV_ModStart> ( is_path && ( is_path && ( is_path && <S2SV_ModStart> ( is_path && ( is_path &&,0
1278,"<S2SV_ModStart> ( pDec ++, ( sizeof ( dec ) )",0
1279,<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart>! opt ) { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) ; txopt_put ( opt_to_free ) ;,1
1280,<S2SV_ModStart> if ( opt -> opthdr &&,0
1281,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1282,<S2SV_ModStart> ] ) ; if ( skb ) {,0
1283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1284,"<S2SV_ModStart> ; if (! ( opb, id ) ) return 0 ; if (",0
1285,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
1286,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; } tp -> copied_seq = seq ;,1
1287,<S2SV_ModStart> ; if ( n_data_size == 0 ) goto cleanup ; if ( <S2SV_ModStart> n_key_data_data_data ) ) { kfree ( key_data ) ; <S2SV_ModStart> key_data_data_data ) ; } kfree ( key_data_data ) ;,0
1288,"<S2SV_ModStart> * value, size_t <S2SV_ModEnd> idx ) {",0
1289,<S2SV_ModStart> ] ) ; if ( sqlite3_malloc < 0 ) return FALSE ;,0
1290,<S2SV_ModStart> inode ) { <S2SV_ModEnd> return 0 ;,0
1291,"<S2SV_ModStart> expr_ty returns, string type_comment, int <S2SV_ModEnd> ; p ->",0
1292,"<S2SV_ModStart> mi -> mi_index, mi_index",0
1293,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
1294,"<S2SV_ModStart> ) { case AC_VECTOR : kvm_queue_exception_e ( vcpu, AC_VECTOR, error_code ) ; return 1 ; case",1
1295,<S2SV_ModStart>,0
1296,<S2SV_ModStart> * s ; size_t <S2SV_ModEnd> end ; if,0
1297,<S2SV_ModStart> -> socket + 1,0
1298,<S2SV_ModStart> < 0 ) { ret = chg ; goto out_err ; } <S2SV_ModEnd> if ( hugepage_subpool_get_pages <S2SV_ModStart> chg ) ) { ret = <S2SV_ModEnd> - ENOSPC ; <S2SV_ModStart> - ENOSPC ; goto out_err ; } <S2SV_ModStart> chg ) ; goto out_err <S2SV_ModEnd> ; } if <S2SV_ModStart> return 0 ; out_err : resv_map_put ( vma ) ; return ret ;,1
1299,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), &",0
1300,"<S2SV_ModStart> = ECRYPTFS_SUPER_MAGIC ; s -> s_stack_depth = path. dentry -> d_sb -> s_stack_depth + 1 ; rc = - EINVAL ; if ( s -> s_stack_depth > FILESYSTEM_MAX_STACK_DEPTH ) { pr_err ( ""eCryptfs: <S2SV_blank> maximum <S2SV_blank> fs <S2SV_blank> stacking <S2SV_blank> depth <S2SV_blank> exceeded\\n"" ) ; goto out_free ; }",1
1301,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1302,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
1303,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> RDP_NEG_FAILURE_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) ; <S2SV_ModStart> ) ; } else return TRUE ;",0
1304,"<S2SV_ModStart> ret, last_pwd, n_new_keys <S2SV_ModStart> keyblocks ) { n_new_keys = count_new_keys ( kdb -> n_keys ) ; <S2SV_ModStart> -> context, n_new_keys <S2SV_ModEnd>, kdb ->",0
1305,"<S2SV_ModStart> int result = RLC_OK ; bn_new ( m ) ; bn_new ( m, m ) ; bn_new ( t = RLC_OK ) ; <S2SV_ModStart> { bn_new ( m, RSA_SIG ) ; bn_new ( m ) ; bn_add_dig ( m, m, m, m, 8 ) ; bn_dig ( m, m, m, RSA_PAD ) ; bn_lsh ( m, m, m_len * 8 ) ; result = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> bn_is_zero ( t <S2SV_ModStart> ) ) { <S2SV_ModEnd> * p_len = <S2SV_ModStart> if ( pad == <S2SV_ModEnd> RSA_PAD ) { <S2SV_ModStart> { result = RLC_OK <S2SV_ModEnd> 2SV_null>",0
1306,"<S2SV_ModStart> -> length, 0,",1
1307,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1308,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1309,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1310,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> ) { int",0
1311,"<S2SV_ModStart> { token ++ ; } if ( operand >= MAX_OPERANDS ) { eprintf ( ""Too <S2SV_blank> many <S2SV_blank> operands\\n"" ) ; return false",1
1312,"<S2SV_ModStart> = cpi -> common ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart>, 0, <S2SV_ModStart> 1 ) ; memset <S2SV_ModEnd> ( xd ->",0
1313,<S2SV_ModStart> ; int name = safe_calloc <S2SV_ModEnd> ( strlen (,0
1314,<S2SV_ModStart> return ; } <S2SV_ModEnd> return 0 ;,0
1315,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1316,<S2SV_ModStart> ctl_files_rwlock ) ; mutex_init ( & card -> user_ctl_lock ) ;,1
1317,"<S2SV_ModStart> ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } ( * psig ) = s + <S2SV_ModEnd> padlen + 2 <S2SV_ModStart> + 2 ; } <S2SV_ModEnd> return NULL ; if",0
1318,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, sizeof ( struct ttp )",0
1319,<S2SV_ModStart> = 0 ; ps_dec -> pu4_wt_ofsts = 0 ;,0
1320,<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },1
1321,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), &",0
1322,<S2SV_ModStart> ; if ( args -> buffer_count > args -> buffers - EINVAL,0
1323,"<S2SV_ModStart> int mptctl_getinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_info karg ; <S2SV_ModEnd> if (! <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
1324,"<S2SV_ModStart>, offset += 1,",0
1325,"<S2SV_ModStart> char * path, const char * rootfs <S2SV_ModStart> mntdata, optional, rootfs",1
1326,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1327,"<S2SV_ModStart> * buf, size_t <S2SV_ModEnd> len, int <S2SV_ModStart> ; int i <S2SV_ModEnd> ; if ( <S2SV_ModStart> sizeof ( context ), GFP_KERNEL ) ; if (! buf ) return - 1 <S2SV_ModStart> sizeof ( * p ) <S2SV_ModEnd> ) ; } buf",0
1328,"<S2SV_ModStart> | O_NOCTTY, ( mode == 0 || mode == MODE_INVALID )? 0644 : mode <S2SV_ModEnd> ) ; if",1
1329,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; if <S2SV_ModStart> FALSE ; } return parse_netscreen_packet ( wth -> random_fh, phdr, buf <S2SV_ModEnd>, line, <S2SV_ModStart>, line, <S2SV_ModEnd> err, err_info <S2SV_ModStart> err_info ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1330,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ; u64 irq_time ; if ( rq -> skip_clock_update ) return <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1331,<S2SV_ModStart> -> pixel = ( unsigned_pixels + 1 ) <S2SV_ModEnd> ; } #,0
1332,<S2SV_ModStart> ; break ; default : if ( strlen ( opt ) == - 1 ) { <S2SV_ModStart> ) ; } # endif <S2SV_ModStart> ; } } # endif strncpy <S2SV_ModEnd> ( ) { <S2SV_ModStart> ) ; } # endif,0
1333,<S2SV_ModStart> { struct blkif_response * <S2SV_ModStart> int notify ; <S2SV_ModEnd> spin_lock_irqsave ( & <S2SV_ModStart> case BLKIF_PROTOCOL_PROTOCOL_X86_PROTOCOL_64 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> x86_RESPONSE ( & <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_X86_64 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart>. rsp_prod_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart>. rsp_prod_prod_pvt ) <S2SV_ModEnd> ; break ; <S2SV_ModStart>,0
1334,<S2SV_ModStart> ; if ( ( entry == KADM5_DATA ) && ( entry -> entry == KADM5_KADM5_DATA ) && (,0
1335,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( datao, buf_size, 8 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, buf_size, 8 ) ) { exif_log ( en -> log, EXIF_CORRUPT_DATA ) ; break ; } n -> entries [ tcount ]. tag = exif_get_short ( buf + 2, buf_size, n -> order ) ; n -> entries [ tcount ]. components = exif_get_short ( buf + 2, n -> entries [ tcount ], n -> entries [ tcount ]. data_size ) ; n -> entries [ tcount ]. data [ tcount ]. entries [ tcount ]. data = exif_get_short ( buf + 2, n -> order ) ; if ( CHECKOVERFLOW ( en -> order ) { exif_log ( en -> log, EXIF_LOG_DEBUG, ""ExifMnoteData"", ""ExifMnote_DATA"", ""ExifMnotePentax"" ) ; break ; } n -> entries [ tcount ]. entries [ tcount ]. data_size_size ) { exif_log ( en -> log, EXIF_LOG_LOG",0
1336,"<S2SV_ModStart> ], 0",0
1337,<S2SV_ModStart> ndo -> ndo_snapend ; ND_TCHECK_16BITS ( & ip -> ip_len ),1
1338,<S2SV_ModStart> dentry * dir <S2SV_ModEnd> ; int dir_has_key <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ),1
1339,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TEMP_FAILURE_RETRY ( <S2SV_ModStart> skb ) ) ; svc_options_free ( opt ) <S2SV_ModStart> ) ; } <S2SV_ModEnd> S2SV_null> <S2SV_null> <S2SV_null>,0
1340,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; <S2SV_ModEnd> } if (",1
1341,"<S2SV_ModStart> parent ) ; if ( ( i -> parent -> parent -> parent -> parent ) > i -> parent -> parent -> parent -> parent -> posY ) { # if! defined ( i -> log ) if! defined ( i -> log ) if ( i -> log ) fprintf ( i -> log, ""*** <S2SV_blank> FILE\\n"" ) ; # endif i -> log, i -> parent -> parent -> parent -> parent -> log ) ; # if! defined ( i -> log ) fprintf ( i -> parent -> parent -> parent -> parent -> log, i -> parent -> parent -> log ) - i -> log ) ; # if! defined ( NGIFLIB_NO_FILE ) if! defined ( i -> log ) fprintf ( i -> parent -> parent -> parent -> parent -> log, i -> parent -> parent -> parent -> parent -> log ) ; # if! defined ( i -> log ) if! defined ( i -> parent -> log ) if! defined ( i -> parent -> parent -> log ) fprintf ( i -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> log ) ; # if! defined! defined ( i -> log ) fprintf ( i -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent",0
1342,<S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ),1
1343,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
1344,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> break ; } if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",0
1345,<S2SV_ModStart> void ) { recovery_started = 0 ;,0
1346,<S2SV_ModStart>,0
1347,<S2SV_ModStart> = MagickFalse ; break <S2SV_ModEnd> ; } image,0
1348,"<S2SV_ModStart> error ; } memset ( newserv, 0, sizeof ( struct service ) ) ;",1
1349,"<S2SV_ModStart> ) { WORD32 i, j",0
1350,<S2SV_ModStart> ) -> tp_value [ 0 ],1
1351,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ;",1
1352,"<S2SV_ModStart>, int fmt, printbuffer * p <S2SV_ModStart> = 0 ; <S2SV_ModEnd> child = cJSON_malloc <S2SV_ModStart> ( child, len ) <S2SV_ModStart> ) ) { for ( i = 0 ; i ++ + 1 ; i ++ ) if (! ptr ) out = ensure ( p, 3 ) ; if ( child -> offset + 1 ) cJSON_malloc ( child, len ) ; if ( out ) strcpy ( out, ""%s"" ) ; return out ; } ptr = ensure_string ( p, len ) ; if (! ptr ) { * ptr = ensure ( char ( p, len ) ; * ptr = ensure ) ; if (! ptr ) return 0 ; * ptr ++ = ensure ( p, ""%s"" ) ; if ( print_string ( child, fmt, fmt ) ; if ( child = ensure ( child -> offset + 1 ) ; p -> offset += len ; if (! ptr ) return 0 ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ++ ++ = ensure ( child",0
1353,"<S2SV_ModStart>, int ext_len, u_int length <S2SV_ModEnd> ) { if <S2SV_ModStart> ndo -> ndo_vflag <S2SV_ModEnd> ) { if <S2SV_ModStart> ndo_vflag ) { ND_TCHECK ( * ext32BITS ( * ext ) <S2SV_ModEnd> ) ; <S2SV_ModStart> ndo -> ndo, id <S2SV_ModEnd> ) ; if",0
1354,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
1355,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> = 0 ; <S2SV_ModStart> if (! unix_dgram_peer_wake_peer <S2SV_ModEnd> ) ; if,0
1356,<S2SV_ModStart> 4 ] ; unsigned int <S2SV_ModEnd> value ; if <S2SV_ModStart> value = ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 <S2SV_ModEnd> ; value |= <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart>. unsigned_value = <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ; return (,1
1357,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> h"", <S2SV_ModStart> y3 ) ; sendClean ( outputbuffer ) ;",0
1358,<S2SV_ModStart> > - 1 && skb -> len,0
1359,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; task_lock ( task <S2SV_ModEnd> ) ; ioc <S2SV_ModStart> ; ioc = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context ; task <S2SV_ModEnd> -> io_context = <S2SV_ModStart> ; task_unlock ( task <S2SV_ModEnd> ) ; if,1
1360,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; ret =,0
1361,<S2SV_ModStart> == KU2SV_null> 0 &&,0
1362,"<S2SV_ModStart> ) { int ret = pci_read_config_word <S2SV_ModEnd> ( dev, <S2SV_ModStart> offset, value ) ; const struct pci_cmd_info * cmd = data ; * value &= PCI_COMMAND_GUEST ; <S2SV_ModEnd> * value |= <S2SV_ModStart> * value |= cmd -> val & ~ PCI_COMMAND_GUEST ; <S2SV_ModEnd> return ret ;",1
1363,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * * frame_parallel_decode ) { VPxWorker * const frame_workers = ( FrameWorkerData * ) worker ; VPxWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker ; FrameWorkerData * const frame_data = ( FrameWorkerData * ) worker -> frame_worker_data = ( FrameWorkerData * ) worker -> frame_data <S2SV_ModEnd> ; if (",0
1364,<S2SV_ModStart> ] ) ; free_uid ( fpl -> user ) ;,1
1365,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
1366,"<S2SV_ModStart> -> dwc ; dwc3_gadget_del_and_unmap_request ( dep, req, status <S2SV_ModEnd> ) ; spin_unlock <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1367,"<S2SV_ModStart> { char prefix <S2SV_ModEnd> ; char * <S2SV_ModStart> } # line 113 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.c"" { ( <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.c"" { ( <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> } # line 1247 <S2SV_ModEnd> ""hex_grammar.c"" { ( <S2SV_ModStart> } # line 1432 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> } # line 1432 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> } # line 1432 <S2SV_ModEnd> ""hex_grammar.c"" { ( <S2SV_ModStart> } # line 1432 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.c"" { ( <S2SV_ModStart> } # line 1432 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> } # line 1432 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.c"" { ( <S2SV_ModStart> } #",0
1368,"<S2SV_ModStart> sas_revalidate_domain, [ <S2SV_ModEnd> DISCE_SUSPEND ] = <S2SV_ModStart> ] = sas_resume_devices <S2SV_ModEnd>, } ;",1
1369,"<S2SV_ModStart>, int rep_quick, my_bool no_copy_stat <S2SV_ModStart> 0 ) { myf flags = 0 ; if ( param -> testflag & T_BACKUP_EXT ) flags |= MY_REDEL_BACKUP ; <S2SV_ModStart>, MY_REDEL_BACKUP ) <S2SV_ModEnd>, flags,",0
1370,<S2SV_ModStart> ] ) { if (! u32_t ) return - 1 ; u8_t * sig_word = 0 ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ; if,0
1371,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1372,<S2SV_ModStart> sk -> sk_family <S2SV_ModEnd> ; struct sk_buff <S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( flags <S2SV_ModStart> AF_INET ) { struct sockaddr_in * <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ; <S2SV_ModStart> skb ) ; <S2SV_ModEnd> struct sockaddr_in6 * <S2SV_ModStart> struct sockaddr_in6 * sin6 = ( struct sockaddr_in6 * <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
1373,"<S2SV_ModStart> -= lblk ; mutex_lock ( & inode -> i_mutex ) ; if (! ( mode & EXT4_GET_BLOCKS_KEEP_SIZE ) ) { ret = - EOPNOTSUPP ; goto out_mutex ; } if (! ( mode & EXT4_GET_BLOCKS_KEEP_SIZE ) ) { ret = - EOPNOTSUPP ; goto out_mutex ; } <S2SV_ModStart> & FALLOC_FL_KEEP_SIZE, <S2SV_ModEnd> ) ; if",0
1374,<S2SV_ModStart> ; } } if ( buf == buf ) free ( buf ) ;,0
1375,<S2SV_ModStart> return map ; map =,1
1376,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ++ ) { char * cp = * cp ++ ; <S2SV_ModStart> - 1 ; char * cp ++ ; char * cp ++ ; if ( cp == '\\0' || cp == '\\0' || cp == '\\0' && cp == '\\0' ) { cp ++ ; } if ( cp == '\\\\' ) { cp ++ ; } if ( cp && cp == '\\0' || cp == '\\0' ) { cp ++ ; cp ++ ; } if ( cp == '0' || cp && cp == '\\0' ) { cp ++ ; return 0 ; } <S2SV_ModEnd> cpi ( cp <S2SV_ModStart> ( cp ),0
1377,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1378,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_left < 4,1
1379,"<S2SV_ModStart> ( pix ) ; <S2SV_ModEnd> if ( pix <S2SV_ModStart> ( pixc == 0 ) goto ERROR,",0
1380,<S2SV_ModStart> { int i ; int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( u ) ; int <S2SV_ModEnd> vbits = BN_num_bits <S2SV_ModStart> ( v ) ; int <S2SV_ModEnd> top = p <S2SV_ModStart> ubits <= BN_BITS2 ) { if ( <S2SV_ModEnd> udp [ 0 <S2SV_ModStart> 0 ] == 0 ) goto err ; if ( udp [ 0 ] == <S2SV_ModStart> ) break ; },1
1381,"<S2SV_ModStart> 1 ) ; memcpy <S2SV_ModEnd> ( vdp,",0
1382,<S2SV_ModStart> crypto_report_key ) ; strncpy <S2SV_ModEnd> ( skb.,0
1383,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1384,"<S2SV_ModStart>, nbits ; if ( msg -> readcount > msg -> cursize ) { return 0 ; } <S2SV_ModStart> oob ) { if ( msg -> readcount + ( bits >> 3 ) > msg -> cursize ) { msg -> readcount = msg -> readcount ; return 0 ; } <S2SV_ModStart> msg -> cursize + nbits",0
1385,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
1386,<S2SV_ModStart> ; out1 : cancel_work_sync ( & dev -> kevent ) ; del_timer_sync ( & dev -> delay ) ;,1
1387,<S2SV_ModStart> ; int count ; size_t <S2SV_ModEnd> 0 ; int,0
1388,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> if (!,0
1389,<S2SV_ModStart> = 0 ; if ( len > sizeof ( * pid ) ) return - 1 ;,0
1390,"<S2SV_ModStart> acl ) { struct iattr iattr ; retval = posix_acl_update_mode ( inode, & iattr. ia_mode, & acl ) ; if ( retval <S2SV_ModEnd> ) goto err_out <S2SV_ModStart> goto err_out ; if (! acl ) { value = NULL ; size = 0 ; } <S2SV_ModEnd> iattr. ia_valid <S2SV_ModStart> iattr ) ; <S2SV_ModEnd> } break ;",1
1391,<S2SV_ModStart> header. types_size <S2SV_ModEnd> ) { continue,1
1392,<S2SV_ModStart> : case NPPVformValue : case NPPVpluginNativeAccessibleAtkPlugId <S2SV_ModStart> case NPPVpluginKeepLibraryInMemory : case NPPVpluginUrlRequestsDisplayedBool : case NPPVpluginWantsAllNetworkStreams : case NPPVpluginCancelSrcStream : case NPPVSupportsAdvancedKeyHandling :,1
1393,<S2SV_ModStart> int alloc = 0 <S2SV_ModEnd> ; char * <S2SV_ModStart> = malloc ( size_t <S2SV_ModEnd> ) ; if <S2SV_ModStart> == NULL ) { return NULL ; } <S2SV_ModEnd> char * <S2SV_ModStart> ) ; * s = allocindex,0
1394,<S2SV_ModStart>,0
1395,"<S2SV_ModStart>, double active_quality ; const VP9EncoderConfig <S2SV_ModEnd> * active_COMMON <S2SV_ModStart> target_bits_per_mb, active_quality = cpi -> active_quality <S2SV_ModStart> i, active_bits_per_quality <S2SV_ModEnd> ) ; }",0
1396,"<S2SV_ModStart> ( interface, 0",0
1397,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1398,<S2SV_ModStart> < 0 || <S2SV_ModEnd> ND_TTEST ( *,0
1399,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> data ) ;",1
1400,<S2SV_ModStart> ( res ) ; if ( res ) return - EINVAL ;,0
1401,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
1402,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart>, int is_intra_filter ) { memset <S2SV_ModEnd> ( xd, <S2SV_ModStart>, left_col, <S2SV_ModEnd> best_col ) ; <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( left_col,",0
1403,<S2SV_ModStart> } while ( ( end < end ) { if (,0
1404,<S2SV_ModStart> len ) { if ( len > 0 ) { return ; },0
1405,"<S2SV_ModStart> * jas_iccprof_createfrombuf ( jas_uchar <S2SV_ModEnd> * buf,",1
1406,<S2SV_ModStart> ; ei -> i_flag = NULL ; ei ->,0
1407,<S2SV_ModStart> memcg ) ; if (! user ) return NULL ;,0
1408,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> ; return handle <S2SV_ModEnd> ; } <S2SV_null>",1
1409,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 3 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
1410,<S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; },1
1411,"<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { p = osStrchr <S2SV_ModEnd> ( p,",0
1412,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1413,<S2SV_ModStart> -> mb_segment ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( rc -> <S2SV_ModStart> -> segment_id.,0
1414,"<S2SV_ModStart> ( interface, ENC624J600_ECON1 ) ; uint16_t status <S2SV_ModEnd> ) { uint16_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) ; uint16_t status = 0 <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ESTAT ) ; enc624J600_t status = 0 <S2SV_ModStart> ( interface, ENC624J600_ESTAT2 <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) <S2SV_ModEnd> ) ; int",0
1415,<S2SV_ModStart> ] == 0x01 && i < gemsafe_cert_max,1
1416,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1417,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VALUE rb_schema ; int scanned_options = 0 ; VALUE rb_intern ( argc, & content ) ; VALUE errors ; int scanned_args = 0 ; scanned_args = rb_get ( argc, & content ) ; if (! content ) { parse_options = rb_get ( rb_intern ( rb_options ), rb_intern ( rb_intern ( ) ) ) ; return NULL ; }",0
1418,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> info -> par <S2SV_ModEnd> ; vma -> <S2SV_ModStart> _CACHE_MASK ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> ( vma, fbdev -> fb_phys, fbdev -> fb_len <S2SV_ModEnd> ) ; }",1
1419,"<S2SV_ModStart> ) ) ; if ( config_file == 0 ) { LOG_WARNING ; s_log ( LOG_WARNING, ""Unexpected <S2SV_blank> line <S2SV_blank> failed"" ) ; return 0 ; }",0
1420,<S2SV_ModStart> += 4 ; out ++ ;,0
1421,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1422,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1423,<S2SV_ModStart> out_mutex ; } err = 0 ; if (! fanout_mutex ) { err = - EINVAL ; goto out ; },0
1424,<S2SV_ModStart> handle ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1425,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static unsigned char <S2SV_ModEnd> uint16_t <S2SV_ModStart> uint8_t * s, u8_size, unsigned <S2SV_ModStart> len, u8 * s ; char * s ; unsigned char * s ; if ( len > SIZE_MAX * s ) return - 1 ; <S2SV_ModStart> buf ) + len <S2SV_ModEnd> ; else { if <S2SV_ModStart> += sizeof ( u32BITS ) + len <S2SV_ModEnd> ; else if <S2SV_ModStart> <S2SV_null> <S2SV_null>",0
1426,"<S2SV_ModStart>, i ; if (! ( s -> state & PNG_IHDR ) ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> before <S2SV_blank> IHDR\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> state & PNG_IDAT ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> after <S2SV_blank> IDAT\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart>!= 6 ) || s -> bit_depth == 1",1
1427,<S2SV_ModStart> ) ) { crm_register ( cib -> disconnected ) ; } <S2SV_ModEnd> if ( c,0
1428,<S2SV_ModStart> } dt -> proto = IP_GET_IPPROTO ( p ) ; dt ->,1
1429,"<S2SV_ModStart> ( interface, KSZ8851_SV_null> <S2SV_null>",0
1430,"<S2SV_ModStart> const node * n0, bool <S2SV_ModEnd> is_async ) { <S2SV_ModStart> is_async ) { const node * const n = is_async? CHILD ( n0, 1 ) : n0 ; <S2SV_ModStart>, LINENO ( n0 ), n0 <S2SV_ModEnd> -> n_seq,",0
1431,<S2SV_ModStart> ;,0
1432,"<S2SV_ModStart> ( AUDIT_APPARMOR_DENIED, __aa_current_profile ( ), GFP_KERNEL, & sa, NULL <S2SV_ModEnd> ) ; }",1
1433,"<S2SV_ModStart> uint_fast8_t tmp ; siz -> comps = 0 ; <S2SV_ModStart> ) ) { goto error ; } if (! siz -> width ||! siz -> width ||! siz -> width ||! siz -> height ) { jas_eprintf ( ""invalid <S2SV_blank> area\\n"" ) ; goto error ; } if (! siz -> numcomps ||! siz -> height ) { jas_eprintf ( ""invalid <S2SV_blank> range\\n"" ) ; goto error ; } if (! siz -> numcomps || siz -> xoff >= siz -> numcomps ) { jas_eprintf ( ""XOsiz <S2SV_blank> range\\n"" ) ; goto error ; } if (! siz -> xoff || siz -> numcomps || siz -> xoff >= siz -> numcomps ) { jas_eprintf ( ""XOsiz <S2SV_blank> not <S2SV_blank> in <S2SV_blank> permissible <S2SV_blank> range\\n"" ) ; goto error ; } if ( siz -> xoff >= siz -> height ) { jas_eprintf ( ""XOsiz <S2SV_blank> not <S2SV_blank> in <S2SV_blank> permissible <S2SV_blank> range\\n"" ) ; goto error ; } if ( siz -> xoff || siz -> xoff >= siz -> xoff || siz -> xoff ||",0
1434,<S2SV_ModStart> } else { return - 1,0
1435,"<S2SV_ModStart>, xmi_data, xmi_size,",1
1436,"<S2SV_ModStart> size_t total_len ; struct iov_iter iter ; <S2SV_ModStart> ) return 0 ; iov_iter_init ( & iter, nr_segs, chars, total_len, 0 ) <S2SV_ModStart> -> ops ; <S2SV_ModEnd> size_t chars = <S2SV_ModStart> buf -> len ; size_t chars = iov_iter_iter ( buf -> page, chars, chars, chars, 0 ) <S2SV_ModStart> ; int error <S2SV_ModEnd> ; if (",0
1437,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> Quantum index ; <S2SV_ModStart> ++ ) { next_pixel = MagickFalse ; displacement = 1 ; <S2SV_ModStart> -= MaxHashTable ; if ( k < 0 ) continue <S2SV_ModEnd> ; if (,0
1438,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1439,<S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } hdl <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } hdl <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> 0 ) { if ( hdl -> c_hdl ) { if ( hdl -> c_hdl ) { if ( hdl -> fe_hdl ) { if ( hdl -> c_hdl -> c_hdl -> c_hdl -> c_hdl -> c_path [ 0 ] ) unlink ( hdl -> c_hdl -> c_path ) ; } if ( hdl -> c_hdl ) { if ( hdl -> c_hdl -> c_hdl -> c_path [ 0 ] ) unlink ( hdl -> c_hdl ) ; } if ( hdl -> c_hdl ) { if ( hdl -> c_hdl -> c_path [ 0 ] ) unlink ( hdl -> c_hdl -> c_path ) ; } <S2SV_ModEnd> free ( hdl <S2SV_ModStart> hdl ) ; },0
1440,"<S2SV_ModStart> size_t max_samples ; size_t max_samples ; size_t max_samples ; <S2SV_ModStart> 0 ] ; max_samples = 64 * JAS_MEBI ; <S2SV_ModStart> break ; case OPT_MAXSAMPLES : max_samples = strtoull ( jas_optarg, 0, 0 ) ; break ; case <S2SV_ModStart> ) ; } snprintf ( optstr, sizeof ( optstr ), ""name <S2SV_blank> %d\\n"", optstr ) ;",0
1441,"<S2SV_ModStart> ) ; } memset ( & tmp, 0 ) ;",0
1442,<S2SV_ModStart> return,0
1443,<S2SV_ModStart>,0
1444,<S2SV_ModStart> hdr ) { <S2SV_ModEnd> if ( len,0
1445,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
1446,<S2SV_ModStart> vcpu ) { if ( kvm_irq_t ) return - EINVAL ; <S2SV_ModStart> 0 ) { mutex_unlock <S2SV_ModEnd> ( & kvm_irq,0
1447,<S2SV_ModStart> if ( unlikely <S2SV_ModEnd> ) ) {,0
1448,<S2SV_ModStart> else { return false <S2SV_ModEnd> ; } case,1
1449,"<S2SV_ModStart> sock, sk ) ; memset ( & sa, 0, sizeof ( sa ) ) ;",0
1450,<S2SV_ModStart> (! handle ||! SecIsValidHandle ( handle ),1
1451,<S2SV_ModStart> -> orderType = ( context -> orderType + 1 ) >>,0
1452,<S2SV_ModStart> old_dentry ) ; if ( err == 0 ) goto out ;,0
1453,<S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> DATA_ENSURE ( 1 <S2SV_ModStart> ++ ; s <S2SV_ModEnd> ++ ; MOP_OUT,1
1454,"<S2SV_ModStart> ( plane, plane <S2SV_ModEnd> ) ; }",0
1455,<S2SV_ModStart> = - EINVAL ; msg -> msg_namelen = 0,0
1456,"<S2SV_ModStart>, path, rootfs -> mount <S2SV_ModEnd> ) ; return",0
1457,<S2SV_ModStart> = NULL ; fd ->,0
1458,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const char * dest_keyring <S2SV_ModStart> dest_keyring ) { const char * dest_keyring = dest_keyring <S2SV_ModEnd> ; if ( <S2SV_ModStart> dest_keyring ) ) goto cleanup_dest_keyring <S2SV_ModEnd> ; if ( <S2SV_ModStart> case 0 : kkey_put ( dest_keyring <S2SV_ModEnd> ) ; break,0
1459,"<S2SV_ModStart> const tile, MACROBLOCK * const x, MACROBLOCKD * const x, MACROBLOCKD * const xd <S2SV_ModEnd>, int mi_row <S2SV_ModStart> mi_row ) { set_offsets <S2SV_ModEnd> ( cpi, <S2SV_ModStart> mi_row, xd <S2SV_ModEnd>, bsize,",0
1460,<S2SV_ModStart> NETIF_F_HW_SG <S2SV_ModEnd> ; if ( <S2SV_ModStart> NETIF_F_HW_HW_SG <S2SV_ModEnd> ; if (,0
1461,<S2SV_ModStart> ; if ( err == NULL ) {,0
1462,"<S2SV_ModStart> pixel_info ) ; ( void ) ResetMagickMemory ( pixels, 0, pixel_info_length ) ;",1
1463,"<S2SV_ModStart> * buf, * count ) return - 1",0
1464,"<S2SV_ModStart> -> ranges = malloc ( <S2SV_ModEnd>, sizeof (",0
1465,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1466,<S2SV_ModStart> if ( cat == 4,0
1467,<S2SV_ModStart>!= 0 ) <S2SV_ModEnd> ; if (,0
1468,<S2SV_ModStart> ; if ( ( ctx -> pass == NULL ) && ( <S2SV_ModEnd> ) ctx,0
1469,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",1
1470,<S2SV_ModStart>! head ) goto out_err <S2SV_ModEnd> ; if (,0
1471,"<S2SV_ModStart> u_char * tptr, int length <S2SV_ModStart> len, tptr <S2SV_ModEnd> ) ; if",0
1472,<S2SV_ModStart> -> outputbuffer ) ; TEMP,0
1473,"<S2SV_ModStart> src ) ; memcpy <S2SV_ModEnd> ( src,",0
1474,<S2SV_ModStart> ( msg ) <S2SV_ModEnd> ) ; if,0
1475,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1476,"<S2SV_ModStart> iovec, compat, & iter <S2SV_ModStart> len, iovec, & iter <S2SV_ModStart> iter_op ) { ret = iter_op ( req, & iter ) ; } else { ret = rw_op ( req, iter. iov, iter. <S2SV_ModEnd> nr_segs, req",1
1477,"<S2SV_ModStart> } if ( ptr - c -> rcurr > 100 || ( strncmp ( ptr, ""get <S2SV_blank> "", 4 ) && strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "", 5 )",0
1478,"<S2SV_ModStart>, sizeof ( * desc ) ) return - EINVAL",0
1479,<S2SV_ModStart> sz = 0 <S2SV_ModEnd> ; if (,0
1480,<S2SV_ModStart> ; uctl_elem_count ; unsigned long <S2SV_ModEnd> count ; ue ->,0
1481,"<S2SV_ModStart> client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) { exit_client ( client_p, client_p, client_p, ""Malformed <S2SV_blank> AUTHENTICATE""",1
1482,<S2SV_ModStart> ctxt -> rip_relative && likely ( ctxt -> memopp ),1
1483,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
1484,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1485,<S2SV_ModStart> 16x16 <S2SV_ModEnd> ( b ->,0
1486,<S2SV_ModStart>,0
1487,<S2SV_ModStart> 0 ) { if ( psf -> header. indx + sizeof ( psf -> header. indx ) > psf -> header. indx <S2SV_ModEnd> sizeof ( char <S2SV_ModStart> ) ) ; if <S2SV_ModStart> ) ) return 0 <S2SV_ModEnd> ; psf ->,0
1488,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
1489,"<S2SV_ModStart> ) ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> header <S2SV_blank> to <S2SV_blank> header.\\n"", __ ) ; return false ; } <S2SV_ModEnd> cb1 = (",0
1490,<S2SV_ModStart>. get_alg_priv_t * priv <S2SV_ModEnd> ; if ( <S2SV_ModStart> ctx -> priv <S2SV_ModEnd> ; } else,0
1491,<S2SV_ModStart> case EXIT_REASON_VMON : case EXIT_REASON_INVEPT :,1
1492,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> switch ( cpi <S2SV_ModStart> ; if ( cpi <S2SV_ModEnd> ) { VP9_COMP * <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if ( cpi <S2SV_ModStart> -> oxcf = ( cpi -> oxcf. height == KEY_FRAME ) &&! cpi -> oxcf. WidthS2SV_null> <S2SV_null>,0
1493,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1494,<S2SV_ModStart> sizeof ( ut32 ) <S2SV_ModEnd> ) ) {,0
1495,"<S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> h, 0 )",0
1496,<S2SV_ModStart> * insize ; int maxstack <S2SV_ModEnd> insize ; if,0
1497,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1498,"<S2SV_ModStart>, char * ch, * ch ; if (! err ) { return NULL ; } char * ch <S2SV_ModStart> ) ) ; if (! errstr ) { return NULL ; }",0
1499,<S2SV_ModStart> ; int option_ctx ; char * options = 0 <S2SV_ModStart> == 1 ) { case VPX_CODEC_OK : <S2SV_ModStart> break ; } else if ( options == VPX_CODEC_OK ) { return VPX_CODEC_OK ; } else { <S2SV_ModStart> break ; } else { case VPX_CODEC_OK : <S2SV_ModEnd> if ( svc_ctx <S2SV_ModStart> break ; } else if ( svc_mode == 1 ) { res = get_spatial_layer_id ( & <S2SV_ModStart> ) ; } else if ( svc_ctx ) == 0 ) { res = svc_ctx -> svc_layer_mode ; } else if ( svc_ctx ) res = get_layers ; } else if ( svc_ctx -> svc_mode == 0 ) return res ;,0
1500,<S2SV_ModStart>! head ) goto out_err <S2SV_ModEnd> ; if (,0
1501,<S2SV_ModStart> * s && ( <S2SV_ModStart> ; if ( s < 4 ),0
1502,<S2SV_ModStart> ; if ( entry == NULL ) return EINVAL ; if ( <S2SV_ModStart> KADM5_POLICY ) && entry -> policy == NULL <S2SV_ModEnd> ) return KADM5_BAD_MASK <S2SV_ModStart> ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK <S2SV_ModEnd> ; if (,1
1503,<S2SV_ModStart> frame -> data [ plane ] && frame -> linesize <S2SV_ModStart> [ plane ] && frame -> linesize [ plane ],1
1504,"<S2SV_ModStart> 1 ; } memset ( mvs, 0, sizeof ( mvs ) ) ;",0
1505,<S2SV_ModStart> self ) { <S2SV_ModEnd> return NULL ;,0
1506,,1
1507,<S2SV_ModStart> 0 ) ; if ( len!= 0 ) { <S2SV_ModStart> op ) ; },0
1508,<S2SV_ModStart> ( imp ) <S2SV_ModEnd> ) ) {,0
1509,<S2SV_ModStart> spin_lock ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> lock ) ) ; <S2SV_ModStart> } else { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; } else { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; },0
1510,"<S2SV_ModStart> = 0 ; int vhdr = NULL, <S2SV_ModStart> len ) ; } if ( pmt_hdr ) { <S2SV_ModStart> whdr ) ; }",0
1511,<S2SV_ModStart> 0 ) + len <S2SV_ModEnd> ; if (,0
1512,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> ; BYTE * context ; if (! context ) return FALSE ;,0
1513,<S2SV_ModStart> while ( offset > 0 && offset <S2SV_ModStart> < end_offset ) { <S2SV_ModStart> hf_keybuffer ) ; },1
1514,<S2SV_ModStart> ) == 0,0
1515,<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const <S2SV_ModStart> = 0 ; const <S2SV_ModStart> = 0 ; if ( cpi -> oxcf. rc -> oxcf. rc_mode == 0 ) { const <S2SV_ModStart> = KEY_MAX_FRAME ; } else if ( cpi -> oxcf. spatial_mode == 0 ) { int target = ( cpi -> oxcf. spatial_level / 100 ) / 100 ; return rc -> avg_frame_level ; } <S2SV_ModStart> = KEY_MAX_FRAME ; if ( rc -> avg_frame == 0 ) { const <S2SV_ModStart> = KEY_FRAME ; } <S2SV_ModEnd> return rc -> <S2SV_ModStart> ; } <S2SV_null>,0
1516,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1517,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; else if ( ret <= size ) memcpy ( data, buf, ret ) ; kfree ( buf ) ;",0
1518,"<S2SV_ModStart> write_mode ) { vpx_read_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> * r, vpx_read_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ; return vpx_read_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ; } <S2SV_null> <S2SV_null>",0
1519,<S2SV_ModStart> op + OSPF6HDR_LEN ) ; ND_TCHECK_32BITS ( & hellop -> hello_options,1
1520,<S2SV_ModStart> { if ( datalen!= 1 ) return - EINVAL ; if (,1
1521,"<S2SV_ModStart> rc ) { struct task_struct * <S2SV_ModEnd> task = kthread_run <S2SV_ModStart> ; if ( IS_ERR ( task ) ) { <S2SV_ModStart> uwbd. task = NULL ; <S2SV_ModEnd> printk ( KERN_ERR <S2SV_ModStart> ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; } else { rc -> uwbd. task = task ; <S2SV_ModEnd> rc -> uwbd <S2SV_ModStart> pid ; } }",1
1522,<S2SV_ModStart>,0
1523,<S2SV_ModStart> : idx ; assert ( ptr >= gfx -> backendData && ptr < ( ( char * ) gfx -> backendData + graphicsGetMemoryRequired ( gfx ) ) ) ;,1
1524,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const MACROBLOCKD * const <S2SV_ModEnd> ; MACROBLOCKD * <S2SV_ModStart> int plane ; const xd = & td -> plane [ plane [ plane ] ] ; const int16_t * const mbmi -> plane [ plane [ plane ] ; const int * const <S2SV_ModStart> ] ; const <S2SV_ModEnd> tx_size ; const <S2SV_ModStart> tx_size ] ; const int16_t * const <S2SV_ModStart> tx_size ] ; const int16_t * const int16_t * const int16_t * const pd <S2SV_ModStart> block ] ; const <S2SV_ModEnd> tx_size ; const int <S2SV_ModStart> tx_size ] ; const int16_t * const int16_t * get_segment_id <S2SV_ModEnd> ; const int <S2SV_ModStart> ] ; const tran_low_t * dequant <S2SV_ModEnd> = get_t <S2SV_ModStart> ] ; const int eob = pd -> fc -> <S2SV_ModEnd> ; const int *,0
1525,<S2SV_ModStart> ; pSelect -> selFlags = 0,0
1526,<S2SV_ModStart> { if ( ( <S2SV_ModStart> shmflg & SHM_RND ) && addr >= shmlba,1
1527,"<S2SV_ModStart> -> serv_mode,",0
1528,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1529,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1530,<S2SV_ModStart> : case NPNVSupportsWindowless : case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling,1
1531,<S2SV_ModStart> ) ; } size_t msg_namelen = NULL ;,0
1532,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
1533,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return ;,0
1534,"<S2SV_ModStart> ], 0",0
1535,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1536,<S2SV_ModStart> mq ) ; if ( fq -> mq_ops -> mq_ops -> mq_ops ),0
1537,"<S2SV_ModStart> s ) { uint32 length ; struct stream packet = * s <S2SV_ModEnd> ; ber_parse_header ( <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> params <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",1
1538,<S2SV_ModStart> ; if ( zend_hashval <S2SV_ModEnd> ( & tmp,0
1539,<S2SV_ModStart>,0
1540,<S2SV_ModStart> ) ) { if (! otmp ) return FALSE,0
1541,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_table_table_table_table_table ( struct <S2SV_ModStart> ) ) return FALSE ; if (! table_start ) return FALSE ; <S2SV_ModStart> -> sblk_table ) return FALSE ; if ( <S2SV_ModEnd> <S2SV_null>,0
1542,<S2SV_ModStart> node ) { struct env * env = env -> env ; env -> env = env -> env ; <S2SV_ModStart> env ) ; <S2SV_ModEnd> } if ( env,0
1543,<S2SV_ModStart> if ( ( skb_hdr <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) < 0,0
1544,<S2SV_ModStart> = seg ; memset <S2SV_ModEnd> ( seg -> <S2SV_ModStart> seg_map ) ; memset <S2SV_ModEnd> ( seg -> <S2SV_ModStart> seg_map ) ; memset <S2SV_ModEnd> ( seg -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( seg ->,0
1545,"<S2SV_ModStart>, obj_type, false <S2SV_ModEnd> ; const <S2SV_ModStart>, true, NULL ) ; if (! lookup_type ( ast_type ( ) ) ) return NULL ; if (! lookup_type ( Module <S2SV_ModEnd>, & <S2SV_ModStart>, NULL, 0 ) ) { return NULL ; } <S2SV_ModStart>, obj_type, sel_type, true <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto failed ; } if (! <S2SV_ModStart> ( obj_type, ""%s\\n"", ast_type ) ) { return false ; } <S2SV_ModStart> if (! lookup_type ( obj_type ( ast_type <S2SV_ModEnd>, annotation, <S2SV_ModStart>, annotation,",0
1546,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ), 0 )",0
1547,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ; break ; } while ( context -> pass > 0 && context -> pass < 4 && context -> curY >= p -> height ) { switch ( ++ context -> pass ) { case 2 : context -> curY = i -> posY + 4 ; break ; case 3 : context -> curY = i -> posY + 2 ; break ; case 4 : context -> curY = i -> posY + 1 ; break ; },1
1548,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1549,"<S2SV_ModStart> ) ; } smb_ofile_flush <S2SV_ModEnd> ( sr, <S2SV_ModStart> f_mutex ) ; smb_ofile_flush <S2SV_ModEnd> ( sr,",1
1550,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static unsigned char <S2SV_ModEnd> uint16_t <S2SV_ModStart> uint8_t * s, u8_size, unsigned <S2SV_ModStart> len, u8 * s ; char * s ; unsigned char * s ; if ( len > SIZE_MAX * s ) return - 1 ; <S2SV_ModStart> buf ) + len <S2SV_ModEnd> ; else { if <S2SV_ModStart> += sizeof ( u32BITS ) + len <S2SV_ModEnd> ; else if <S2SV_ModStart> <S2SV_null> <S2SV_null>",0
1551,"<S2SV_ModStart> ; if ( * cp == '\\0' || <S2SV_ModEnd> strchr ( cp <S2SV_ModStart> )!= NULL || <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ( cp, ""."" ) == 0 || strcmp ( cp, <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { run_err",1
1552,"<S2SV_ModStart> * s, <S2SV_ModEnd> * arg2, <S2SV_ModStart> ; int i <S2SV_ModEnd> ; if ( <S2SV_ModStart> > 0 ) { <S2SV_ModStart> ) ) { return 1 ; } arg = <S2SV_ModEnd> - 1 ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ) ) { return - 1 ; <S2SV_ModStart> } if ( <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1553,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( const size_t * ) val ; return 0 ;,0
1554,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart>, id ; if ( unlikely ( siphash_key_is_zero ( & net -> ipv4. ip_id_key ) ) ) get_random_bytes ( & net -> ipv4. ip_id_key <S2SV_ModEnd>, sizeof ( <S2SV_ModStart>, sizeof ( net -> ipv4. ip_id_key <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ; hash = siphash_3u32 <S2SV_ModEnd> ( ( __force <S2SV_ModStart> iph -> protocol, & net -> ipv4. ip_id_key <S2SV_ModEnd> ) ; id",1
1555,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_base, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\"" <S2SV_blank> \\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> expr"" ) ; return 1 ; } else <S2SV_ModEnd> { int res <S2SV_ModStart> int res ; res = obj2ast_int ( tmp, & lineno, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> obj, & PyId_upper ( tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; type = NULL ; } else { int res ; res = obj2ast_id ( tmp, & tmp ) ; for ( i = 0 ; i = 0 ; i < 0 ; i ++ i <S2SV_ModEnd> ; i ++ ;",0
1556,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
1557,"<S2SV_ModStart> ctl -> pw, "".chfn""",1
1558,<S2SV_ModStart> { if ( max_length < sizeof ( struct ieee80211_radiotap_header ) ) return - EINVAL ; if ( <S2SV_ModStart> iterator -> _rtheader + sizeof ( uint32_t ),1
1559,<S2SV_ModStart> { err = <S2SV_ModEnd> if (! <S2SV_ModStart> == NULL ) { err = - EOPNOTSUPP ; goto err ; } <S2SV_ModStart> err ; } else { err = - EOPNOTSUPP ; goto out ; } <S2SV_ModStart> ) ) ; goto err ; },0
1560,<S2SV_ModStart> curframe -> frame_state [ i ] = 0 ;,0
1561,"<S2SV_ModStart> return ; } if ( input <= 0.0 || output <= 0.0 ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Gamma <S2SV_blank> values <S2SV_blank> should <S2SV_blank> be <S2SV_blank> positive"" ) ; RETURN_FALSE ; }",1
1562,<S2SV_ModStart>. use_pass = VPX_RC_FIRST_PASS <S2SV_ModEnd> ; stream ->,0
1563,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1564,<S2SV_ModStart>,0
1565,<S2SV_ModStart> ) { uint8_t tile_cols ; const <S2SV_ModStart> -> common ; vpx_reader <S2SV_ModEnd> * const tile_context <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> tile_cols ) ; memset <S2SV_ModEnd> ( cm ->,0
1566,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void vp9_decode_decoder ( const VP9_COMMON * const cm ) { VP9_COMMON * const cm = & cm -> common ; MACROBLOCKD * const cm -> common ; <S2SV_ModStart> = NULL ; vpx_free ( cm -> common <S2SV_ModEnd> ) ; <S2SV_ModStart> = NULL ; cm -> frame_worker_id = NULL <S2SV_ModStart> = NULL ; vpx_init <S2SV_ModEnd> return NULL ;,0
1567,<S2SV_ModStart> ) ) { return GF_LOG_CONTAINER ( <S2SV_ModEnd> * dref [ <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> if (,0
1568,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1569,<S2SV_ModStart> -> count ; new_fpl -> user = get_uid ( fpl -> user ) ;,1
1570,<S2SV_ModStart> inet_opt && opt -> opt. <S2SV_ModStart> && opt -> opt.,0
1571,"<S2SV_ModStart> const tree, vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> * tree, vpx_tree <S2SV_ModEnd> * tree )",0
1572,"<S2SV_ModStart> ; if ( ( vpx_codec_alg_priv_t * ) ctx <S2SV_ModEnd> ( ctx, <S2SV_ModStart> |= VPX_CODEC_OK ; if (! ( ctx ) ) return VPX_CODEC_OK ; <S2SV_ModEnd> } if (",0
1573,<S2SV_ModStart> clockid ) ; mutex_unlock ( & ctx -> wid ) ;,0
1574,<S2SV_ModStart> ) ; struct mnt_namespace * ns = dest_mnt -> mnt_ns ; struct <S2SV_ModStart> ; if ( IS_MNT_SHARED ( source_mnt <S2SV_ModEnd> ) ) goto out_mnt,0
1575,"<S2SV_ModStart>, & len, 0",1
1576,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = _mm_set1_epi16 ( ( int16_t ),0
1577,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const VP9EncoderConfig <S2SV_ModEnd> * rc, <S2SV_ModStart> -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf ->",0
1578,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ MIF ( m,0
1579,"<S2SV_ModStart> void * fout, int maxoffset <S2SV_ModStart> NULL ) { if ( len < 0 ) { c ; return ; }",0
1580,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> -> common ; MACROBLOCKD * const x, MACROBLOCKD * const x, <S2SV_ModStart> -> mb ; MB_MODE_INFO * const x = & td -> mbmi. skip_ext ; MB_MODE_INFO * const mbmi = & cpi -> common ; MACROBLOCKD * const x -> mbmi. mbmi_ext ; MACROBLOCKD * const x = & cpi -> mbmi_ext ; MB_MODE_INFO * const x -> mbmi_ext = & cpi -> mbmi. skip_ext ; <S2SV_ModStart> if ( cpi <S2SV_ModEnd>, cpi <S2SV_ModStart> -> skip ; tx_mode == KEY_FRAME ) { <S2SV_ModStart> return ; } } # if CONFIG_VP9_HIGHBITDEPTH if (! cpi -> oxcf. skip && cpi -> oxcf. skip_tx_mode == BLOCK_8X8_SIZE ( cpi ) ) { vp9_set_highbit ( cpi, & cpi, & cpi -> oxcf. skip, 1 ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. skip ) { vp9_system_state ( cpi, & cpi, & cpi -> oxcf.",0
1581,<S2SV_ModStart> sz = 0 <S2SV_ModEnd> ; if (,0
1582,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> ] ; struct crypto_cipher * tfm_des <S2SV_ModEnd> ; str_to_key ( <S2SV_ModStart> ; tfm_des = crypto_alloc_cipher ( ""des"" <S2SV_ModEnd>, 0, <S2SV_ModStart>, 0, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ) { <S2SV_ModEnd> cifs_dbg ( VFS <S2SV_ModStart> ""failed: kfree_des ) ; return PTR_ERR ( tfm_des ) ; } <S2SV_null> <S2SV_null>",0
1583,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1584,"<S2SV_ModStart> { int i <S2SV_ModEnd> = 0 ; <S2SV_ModStart> return AVERROR_INVALIDDATA ; } for ( i = 0 ; i < 2 ; i ++ ) { if (! bits_left ) return AVERROR_INVALIDDATA ; } <S2SV_ModStart> [ i ] ) { av_log ( g, AV_LOG_ERROR, ""Bad <S2SV_blank> value <S2SV_blank> %d\\n"", value, 0 ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ) ) ; if (! bit_max ) return AVERROR_INVALIDDATA ;",0
1585,<S2SV_ModStart> i > pos + delta <S2SV_ModStart> off + 1 <= pos + delta <S2SV_ModEnd> ) insn ->,1
1586,<S2SV_ModStart> case EXIT_REASON_INVEPT : case EXIT_REASON_INVVPID :,1
1587,<S2SV_ModStart> } if ( ( c == NULL &&,0
1588,"<S2SV_ModStart> 0 == NULL, packet. len = 0,",0
1589,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1590,"<S2SV_ModStart> ++ r ; if <S2SV_ModEnd> ( pow ( <S2SV_ModStart>, dim ) <= entries ) return - 1 ; if <S2SV_ModEnd> ( ( int <S2SV_ModStart> dim ) ) > entries ) return - 1 <S2SV_ModEnd> ; return r",1
1591,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> ; } } return ( <S2SV_ModStart> dds_info, 8, exception ) ) <S2SV_ModEnd> ; } <S2SV_null>",1
1592,<S2SV_ModStart> if ( opt -> opthdr &&,0
1593,<S2SV_ModStart> ; if ( zend_hashval <S2SV_ModEnd> ( & tmp,0
1594,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL )",0
1595,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> c"", <S2SV_ModStart> y3 ) ; sendClean ( outputbuffer ) ;",0
1596,"<S2SV_ModStart> cfg ) { struct stat st ; FILE * file = NULL ; int fd = - 1 ; <S2SV_ModStart> } else { fd = open ( fd <S2SV_ModEnd>, & stat",0
1597,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! f2fs_readonly (,1
1598,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1599,"<S2SV_ModStart> y12 ) { sprintf ( outputbuffer <S2SV_ModEnd>, xbuffer ) <S2SV_ModStart> 0 ) ; sprintf ( outputbuffer <S2SV_ModEnd>, x )",0
1600,<S2SV_ModStart> ) ; return FALSE <S2SV_ModEnd> ; } <S2SV_null>,0
1601,<S2SV_ModStart> user ) { memset_user * user ;,0
1602,<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( w ->,0
1603,<S2SV_ModStart> == ARPHRD_ETHER ) { <S2SV_ModStart> ether_setup ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; },1
1604,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (",1
1605,<S2SV_ModStart> pbi ) { memset <S2SV_ModEnd> ( void ),0
1606,<S2SV_ModStart> { if ( l == NULL ) break ; if (,1
1607,<S2SV_ModStart> } if ( ( <S2SV_ModStart> xWantedSize > 0 ) && ( ( xWantedSize + xWantedSize + ( xWantedSize + portBYTE_ALIGNMENT - ( xWantedSize ) ) > xWantedSize ) ) { xWantedSize = 0 ; } else { xWantedSize = 0 ; } else { xWantedSize = 0 ; } else { xWantedSize = 0 ; } } else { xWantedSize = 0 ; } else { xWantedSize = 0 ; } xWantedSize = 0 <S2SV_ModEnd> } if,0
1608,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1609,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1610,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpDiff"", ""%s"", ""(cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> cp -- ) return 1 ;",1
1611,<S2SV_ModStart> void i ; uint32 <S2SV_ModEnd> i ) { <S2SV_ModStart> ) ; } if (!,0
1612,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( sb,0
1613,"<S2SV_ModStart> ; int tptr, msg_len <S2SV_ModEnd> ) ) ;",0
1614,<S2SV_ModStart> { uint16 bitspersample = 1,0
1615,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1616,"<S2SV_ModStart> * cpi, vpx_writer <S2SV_ModEnd> * coef_probs [ <S2SV_ModStart> * coef_probs [ tx_size ] <S2SV_ModEnd> ] ; vpx_prob",0
1617,"<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1618,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 2 ] = 0x80 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x86 ; state -> data [ 2 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state",0
1619,<S2SV_ModStart> inode ) { <S2SV_ModEnd> return 0 ;,0
1620,"<S2SV_ModStart> ( cfg,",0
1621,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> CONFIG_VP9_HIGHBITDEPTH int vp9_filter_stride <S2SV_ModEnd> ( xd, <S2SV_ModStart> int vp9_filter_stride, vp9_filter_stride <S2SV_ModEnd>, int uv_stride, <S2SV_ModStart> vp9_filter_stride, vp9_filter_block_size_stride <S2SV_ModEnd> ( y, <S2SV_ModStart> 8_stride, vp9_filter_stride <S2SV_ModEnd>, uv_stride, <S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( v1 == 0 ) { vpx_get_pixel_plane ( v, v, v, v, v, v1_stride, v, v1, v, v, y_stride ) ; } # if CONFIG_VP9_VP9_HIGHBITDEPTH if (! vp9_filter_pixel_size_ [ 0 ] ) { vpx_get_pixel_buffer ( v, v, v, v, v, v, v, v, v, v, v, v, v, v, v, v, v, v, v, v, v, v, v, v",0
1622,"<S2SV_ModStart>, bufp, true",0
1623,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i, cJSON_AddNumber <S2SV_ModEnd> * n, <S2SV_ModStart> count ) { if ( i > 0 ) { return 0 ; } <S2SV_ModEnd> return 0 ;",0
1624,<S2SV_ModStart> ) ; goto exit <S2SV_ModEnd> ; },0
1625,<S2SV_ModStart> struct udf_file * ibh <S2SV_ModEnd> ; int iinfo <S2SV_ModStart> ) return ; if (! i_len( inode ) goto out ; iinfo ->,0
1626,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
1627,<S2SV_ModStart> size_t num + 1,0
1628,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> vp9_encode ( VP9_COMMON * const <S2SV_ModStart> int i ; const tile_rows = & pbi -> tile_data -> tile_rows ; const <S2SV_ModStart> int i ; vpx_read <S2SV_ModEnd> ( pbi -> <S2SV_ModStart> int i ; const tile_rows = 1 ; # if CONFIG_VP9_HIGHBITDEPTH for ( i < 1 ) { i ; ++ i ; ++ i ) { for ( i ; i = 0 ; ++ i < tile_workers ; ++ i ) { for ( i ; ++ i ; ++ i ) { for ( i ; i = 0 ; ++ i < tile_workers ; ++ ) { for ( i ; ++ i < ( i ) { for ( i ) ; ++ i ; ++ i ; ++ ) [ i ]. num_workers ; ++ ) { for ( i < tile_workers ; ++ ) { for ( i ; i } worker -> tile_data [ i ] = 1 ; ++ ) worker -> tile_data [ i ]. tile_workers ; ++ ) { const uint8_t * const uint8_t * const uint8_t * const,0
1629,<S2SV_ModStart> ) + 8 <S2SV_ModEnd> ; if (,0
1630,<S2SV_ModStart> out_mutex ; } err = 0 ; if (! fanout_mutex ) { err = - EINVAL ; goto out ; },0
1631,"<S2SV_ModStart> * seg ; vpx_read_active_active <S2SV_ModEnd> ( seg, <S2SV_ModStart> i ) ) { memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> i ) ; vpx_set_qindex_qindex ( i, cm -> bit_delta_depth ) ; if ( segfeature_active ( i ) { <S2SV_ModStart> i ] = segfeature_active ( i, cm -> bit_delta_delta_delta_qindex, cm -> bit_delta_delta_delta_depth <S2SV_ModStart> i ) ; } else if ( segfeature_active <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ) ; vpx_read <S2SV_ModEnd> ( seg, <S2SV_ModStart> i ) ; segfeature_active ( i, cm -> bit_delta_delta_delta_delta_active <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } vpx_set_qindex ( i, cm -> bit_delta_delta_delta_delta_qindex, cm -> bit_delta_delta_delta_delta_qindex, cm -> bit_delta_delta_delta_delta_qindex, cm -> bit_delta_delta_delta_qindex ) ; if ( i ) vp9_set_qindex ( i, cm -> bit_delta_depth ) ;",0
1632,"<S2SV_ModStart> ; if (! net_net ( net, sock ) ) return - EINVAL ;",0
1633,"<S2SV_ModStart> ( void ) TIFFGetFieldDefaulted <S2SV_ModEnd> ( in,",1
1634,<S2SV_ModStart> ( error ) <S2SV_ModEnd> return error ;,0
1635,,0
1636,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1637,"<S2SV_ModStart> ""corrupt <S2SV_blank> BSON"" ) ; VALIDATE_TEST ( ""test59.bson"", BSON_VALIDATE_NONE, 9, BSON_VALIDATE_NONE, ""corrupt <S2SV_blank> BSON"" ) ;",1
1638,<S2SV_ModStart>,0
1639,<S2SV_ModStart> ; ps_dec -> ps_cur_slice_params <S2SV_ModEnd> ; ps_dec ->,0
1640,<S2SV_ModStart> ) ; } else,0
1641,<S2SV_ModStart> ; if ( n_data_size == 0 ) goto cleanup ; if ( <S2SV_ModStart> n_key_data_data_data ) ) { kfree ( key_data ) ; <S2SV_ModStart> key_data_data_data ) ; } kfree ( key_data_data ) ;,0
1642,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1643,<S2SV_ModStart> return - EPERM <S2SV_ModEnd> ; if (,0
1644,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 2 ] = 0x80 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x86 ; state -> data [ 2 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state",0
1645,"<S2SV_ModStart> int getnum ( <S2SV_ModEnd>, fmt )",0
1646,<S2SV_ModStart> L ) ; g -> gcstate = GCSswpallgc ;,0
1647,<S2SV_ModStart> return - EIO ; },0
1648,<S2SV_ModStart> ) { int ret = 0 ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1649,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> NULL <S2SV_ModEnd> crm_null> NULL <S2SV_ModStart> int rc ; int auth_buffer = 0 <S2SV_ModStart>, sizeof ( struct sockaddr_in_connection ) ) ; <S2SV_ModEnd> if ( crm_protocol <S2SV_ModStart> ( ""Invalid <S2SV_blank> connection <S2SV_blank> failed. <S2SV_blank> failed"" ) ; memset ( & client -> server. name, 0, sizeof ( * address ) ) ; <S2SV_ModEnd> return - 1 <S2SV_ModStart> ; if ( rc < 0 ) { crm_err ( ""failed: <S2SV_blank> failed"" ) ; return - 1 ; } <S2SV_ModEnd> return 0",0
1650,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
1651,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1652,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",1
1653,"<S2SV_ModStart> ndo, len - 8",0
1654,"<S2SV_ModStart> ctx, expr -> unary. child",1
1655,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1656,"<S2SV_ModStart> int mptctl_mpt_ioctl_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
1657,"<S2SV_ModStart> < 0 ) { data = ( unsigned char * ) NULL, * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModStart> < 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModEnd> bytes = 0 <S2SV_ModStart> < 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModEnd> char *",0
1658,,0
1659,<S2SV_ModStart> else ) ; <S2SV_ModEnd> } else {,0
1660,"<S2SV_ModStart> void encode_unsigned_reader <S2SV_ModEnd> * r, <S2SV_ModStart> int m = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> l ) ; vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ; return vpx_read_literal <S2SV_ModEnd> ( r,",0
1661,<S2SV_ModStart> ; int is_valid = ( error == GIT_OK ) <S2SV_ModStart> giterr_clear ( ) <S2SV_ModEnd> ; error =,1
1662,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1663,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ) return vpx_read_mode <S2SV_ModEnd> ( r,",0
1664,<S2SV_ModStart> ) ; } send_msg ( g -> data_len ) ;,0
1665,"<S2SV_ModStart> ; int res ; # if CONFIG_VP9_HIGHBITDEPTH if (! stream -> codec_mode == 0 ) { return - 1 ; } # if CONFIG_VP9_HIGHBITDEPTH if (! vpx_codec_codec_err ( ) ) { log_error ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> failed\\n"" ) ; return - 1 ; } # endif <S2SV_ModStart> ; } # if CONFIG_VP9_HIGHBITDEPTH if ( VPX_IMG_FMT_I2SV_null>",0
1666,<S2SV_ModStart> ndo ; } ND_TCHECK_16BITS ( * ep ) ;,0
1667,<S2SV_ModStart> source = 0 <S2SV_ModEnd> ; if (,0
1668,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> = 0 ; <S2SV_ModStart> if (! unix_dgram_peer_wake_peer <S2SV_ModEnd> ) ; if,0
1669,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> key -> key ) <S2SV_ModStart> key -> value <S2SV_ModEnd> ) ; if,0
1670,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; if ( <S2SV_ModStart> -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len - A,1
1671,"<S2SV_ModStart> ]. size ; if ( ~ length < 16 ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" )",1
1672,"<S2SV_ModStart> ; stbbr_send ( ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'stabber@localhost\'>""",0
1673,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1674,<S2SV_ModStart> = NULL ; tok -> indent = 0 ;,0
1675,<S2SV_ModStart> ; if ( av1 -> av_cfg -> avg_cfg &&,0
1676,"<S2SV_ModStart> ) ) { return GF_LOG_FILE_CONTAINER, <S2SV_ModEnd> ( sref )",0
1677,<S2SV_ModStart> ) ) ; },0
1678,<S2SV_ModStart> ; if ( dpb == 0 ||,0
1679,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! addr ||! addr ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_in = * addrlen ; if ( addrlen_in < 0 <S2SV_ModStart> OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ;,0
1680,,1
1681,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
1682,"<S2SV_ModStart> final_p, opt <S2SV_ModStart> ) ) ; opt = rcu_dereference ( np -> opt, 0 ) ;",0
1683,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> uint32_t <S2SV_ModStart> uint32_t fsize, size_t <S2SV_ModEnd> size, size_t <S2SV_ModStart> size, off, size_t <S2SV_ModStart> ; uint32_t max_size <S2SV_ModEnd> ; uint32_t <S2SV_ModStart> size = 0? 4 : 0",0
1684,<S2SV_ModStart>,0
1685,"<S2SV_ModStart>, buffer, t2p -> tiff_datasize,",1
1686,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
1687,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> ; BYTE * context ; if (! context ) return FALSE ;,0
1688,<S2SV_ModStart> int ret ; <S2SV_ModEnd> S2SV_null> <S2SV_null>,0
1689,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1690,<S2SV_ModStart> source = 0 <S2SV_ModEnd> ; if (,0
1691,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } rc =,0
1692,<S2SV_ModStart> addr = size ; msg -> msg_namelen = 0 ; <S2SV_ModStart> goto out ; } <S2SV_ModEnd> msg_namelen = sizeof,0
1693,"<S2SV_ModStart> & tmp_mv ; const <S2SV_ModStart> & cpi -> td. <S2SV_ModStart> -> mb_err ; # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> ( cpi, <S2SV_ModStart>, & tmp_mv, tmp_err, NULL <S2SV_ModStart> 1 ) ; memset <S2SV_ModEnd> ( x -> <S2SV_ModStart>, & tmp_mv, 0, <S2SV_ModEnd> ) ; if <S2SV_ModStart> tmp_err ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( tmp_mv_mode == NULL || tmp_mv_mv_start ) { zero_mv ( cpi, & tmp_mv, & tmp_mv, & tmp_mv, & tmp_start, & tmp_cost, & tmp_mv, 0 ) ; tmp_err = 0 ; break <S2SV_ModEnd> ; } else <S2SV_ModStart> tmp, <S2SV_ModEnd> ) ; }",0
1694,<S2SV_ModStart> ; if ( <S2SV_ModEnd> h -> error,0
1695,"<S2SV_ModStart> ( cp, name ) <S2SV_ModEnd> ) ; if",0
1696,<S2SV_ModStart> ( msg_sys <S2SV_ModEnd> ) ; if,0
1697,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
1698,"<S2SV_ModStart> number_colormaps, number_planes, number_planes_filled <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ; pixel_info =",0
1699,<S2SV_ModStart> return r ; <S2SV_ModEnd> if ( r,0
1700,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1701,<S2SV_ModStart> user ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1702,<S2SV_ModStart> = thread ) <S2SV_ModEnd> return NULL ;,0
1703,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> else {,0
1704,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1705,<S2SV_ModStart> old_dentry ) ; if ( err == 0 ) goto out ;,0
