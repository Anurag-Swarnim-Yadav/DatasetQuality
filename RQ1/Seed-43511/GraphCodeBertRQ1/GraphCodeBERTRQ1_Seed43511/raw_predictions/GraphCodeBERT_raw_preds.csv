,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; if ( n2size < 1 ) <S2SV_ModEnd> { applog (,0
1,<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : ND_TCHECK_8BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr ) ; <S2SV_ModStart> case EAP_TYPE_TTLS : ND_TCHECK_8BITS ( subtype ) ; <S2SV_ModStart> case EAP_TYPE_TTLS : if ( subtype == EAP_TYPE_TTLS ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_TTLS : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_TTLS : if ( subtype == EAP_TYPE_TTLS ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_TTLS : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 6 ) ; <S2SV_ModStart> case EAP_TYPE_TLS : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_TLS : ND_TCHECK_,0
2,<S2SV_ModStart> wmm_info ) ; <S2SV_ModEnd> return 0 ;,0
3,<S2SV_ModStart> ; err = - EINVAL ; if (,0
4,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return err ;,0
5,"<S2SV_ModStart>, offset ; if ( avio_feof ( f ) ) { index -> item_count = 0 ; av_freep ( & index -> items ) ; return AVERROR_INVALIDDATA ; }",1
6,<S2SV_ModStart> * tpg ; u16 <S2SV_ModEnd> tpgt ; int <S2SV_ModStart> ; if ( kstrtou16 <S2SV_ModEnd> ( name + <S2SV_ModStart> ) || tpgt >= VHOST_SCSI_MAX_TARGET <S2SV_ModEnd> ) return ERR_PTR,1
7,<S2SV_ModStart> write ) { <S2SV_ModEnd> if (!,0
8,"<S2SV_ModStart> { u32 data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; kvm_read_guest_cached ( vcpu -> kvm, & <S2SV_ModEnd> vcpu -> arch <S2SV_ModStart>. apic -> vapic_cache, & data, sizeof ( u32 ) <S2SV_ModEnd> ) ; apic_set_tpr",1
9,<S2SV_ModStart> src ) ; __switch_to_tm ( src ) ; tm_new_tm ( src ) ;,0
10,"<S2SV_ModStart> ( c ) i ++, <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; <S2SV_ModEnd> return 0 ;",0
11,"<S2SV_ModStart> ( sb, KERN_ERR,",1
12,"<S2SV_ModStart> ipv6_select_ident ( fptr, ( struct rt6_info * ) skb_dst ( skb )",1
13,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct perf_sample_data * <S2SV_ModStart>, 1, <S2SV_ModEnd> data, regs",0
14,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
15,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline tran_low_t <S2SV_ModEnd> step [ 3 <S2SV_ModStart> output [ 3 ] ; tran_low_t <S2SV_ModEnd> step [ 4 <S2SV_ModStart> ] = ( tran_low_t <S2SV_ModEnd> * input [ 4 <S2SV_ModStart> ] [ 3 ] = ( tran_low_t ) <S2SV_ModStart> output [ 3 ] = ( tran_low_t ) <S2SV_ModStart> ; input [ 3 ] = ( tran_low_t ) [ 3 ] = ( tran_low_t ) <S2SV_ModStart> ; input [ 3 ] = ( tran_low_t ) [ 3 ] = ( tran_low_t ) <S2SV_ModStart> output [ 3 ] = ( tran_low_t ) <S2SV_ModStart> output [ 3 ] = ( tran_t ) <S2SV_ModStart> output [ 3 ] = ( tran_low_t ) [ 3 ] [ 3 ] [ 3 ] [ 3 ] = ( tran_low_t ) <S2SV_ModStart> output [ 3 ] = ( tran_low [ 3 ] [ 3 ] [ 3 ] [ 3 ] [ 3 ] = ( tran_low_t ) <S2SV_ModStart> output [ 3 ] [ 3 ] [ 3 ] = ( tran_,0
16,<S2SV_ModStart> == 0 ) sanitize_dead_code ( env ) ; if ( ret == 0 ),1
17,"<S2SV_ModStart> int i ; if (! config -> sample_rate ) { strcpy ( wpc -> error_message, ""sample <S2SV_blank> rate <S2SV_blank> cannot <S2SV_blank> be <S2SV_blank> zero!"" ) ; return FALSE ; }",1
18,"<S2SV_ModStart> = 0 ; unsigned char sense_buffer [ SCSI_SENSE_BUFFERSIZE ], * senseptr = NULL ; <S2SV_ModStart> cgc -> sense ; if ( cgc -> sense ) senseptr = NULL ; if ( cgc -> senseptr, sense ) memcpy ( cgc -> sense, 0, sizeof ( cgc -> sense ), 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> cgc -> sense <S2SV_ModEnd> ) ; if",0
19,<S2SV_ModStart> = 0 ; # ifdef LIBRAW_LIBRARY_BUFFER <S2SV_ModEnd> ; if (,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const MACROBLOCKD * const oxcf = & cpi -> oxcf. mb_level <S2SV_ModStart> -> lf_level ; <S2SV_ModEnd> cpi, int <S2SV_ModStart> if (! cpi <S2SV_ModEnd> ) { VP9_COMMON <S2SV_ModStart> if ( cpi -> lf_level <S2SV_ModStart> = 0 ; int64_t_err ; int64_t * lf_min_size = 0 ; int64_t_min_size = 0 ; if ( cpi -> oxcf. refresh_mode == VP9_COMMON * cpi ) { VP9_COMMON * const int64_t * lf_err = & cpi -> oxcf. refresh_mode ; int64_t * lf_min_size = & cpi -> oxcf. frame_size ; int64_t * lf_min_size ; int64_t * lf_y ; int64_t <S2SV_ModEnd> best_filter_level_level <S2SV_ModStart>",0
21,"<S2SV_ModStart> offset, len - 1",0
22,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_writer <S2SV_ModEnd> read_mv_tree ( <S2SV_ModStart> cpi, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> d = vpx_read_tree <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ ) ; vpx_read_tree <S2SV_ModEnd> ( w,",0
23,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ralg -> seedsize,1
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (,1
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> == 16 ) { <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_128 ; } else { <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } else { <S2SV_ModStart> == 64 ; },0
26,<S2SV_ModStart> char * fmtname ; int debug <S2SV_ModStart> = 0 ; debug = 0 ; <S2SV_ModStart> break ; case OPT_DEBUG : debug = atoi ( jas_optarg ) ; break ; case <S2SV_ModStart> ; } } jas_setdbglevel ( debug ) ; <S2SV_ModStart> ) ) { jas_stream_close ( instream ) ;,1
27,"<S2SV_ModStart> esr ) { siginfo_t info ; void __user * pc = ( void __user * ) instruction_pointer ( regs ) ; <S2SV_ModStart> esr ) ; __user * regs = info. si_errno ; info. si_code = info. si_code ; info. si_notify_user ( regs, regs, 0 <S2SV_ModEnd> ) ; }",0
28,"<S2SV_ModStart> length ) { if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ; ptr ++ ; length -= 2 <S2SV_ModStart> ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * <S2SV_ModEnd> alt ; alt <S2SV_ModStart> ; if (! alt ) return - ENODEV <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart> ( udev, alt -> <S2SV_ModEnd> desc. bInterfaceNumber <S2SV_ModStart> bInterfaceNumber, alt -> desc. bAlternateSetting",1
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_pc_to_char ( struct <S2SV_ModStart> char * to, int tolen <S2SV_ModStart> = 0 ; int comp_len ; if ( tolen == 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 2 : if ( tolen < 2 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 2 : if ( tolen < 2 ) return - ENAMETOOLONG ; <S2SV_ModStart> += 2 ; tolen -= comp_len ; <S2SV_ModStart> case 2 : if ( tolen == 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> = '/' ; tolen -- ; return - ENAMETOOLONG ; <S2SV_ModStart> += 2 ; tolen -= comp_len ; if ( tolen == 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 2 : if ( tolen < 2 ) return - ENAMETOOLONG ;",0
31,<S2SV_ModStart> == - 1 || class == NULL,0
32,<S2SV_ModStart> unsigned long flags ; if ( qid > NVMET_NR_QUEUES ) return NULL,1
33,<S2SV_ModStart> ) ; goto dev_err <S2SV_ModEnd> ; } dev,0
34,<S2SV_ModStart> < 1 || vstart + vdaux < vstart <S2SV_ModEnd> ) { sdb_free,1
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> dest_keyring_key_keyring ( dest_key ) <S2SV_ModEnd> ) { struct <S2SV_ModStart> dest_keyring_keyring ( priv <S2SV_ModEnd> ) ; return,0
36,<S2SV_ModStart> = create_spnego_ctx ( 1,1
37,"<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if ( addr -> l2tp_family!= AF_INET <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> ret = - <S2SV_ModStart> ( sk ) ; if (! sock_flag ( sk, SOCK_ZAPPED ) ) goto out",1
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> random_stack_stack ( uint32_t <S2SV_ModStart> ) { return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
39,"<S2SV_ModStart>, _ ( ""_Cancel"" ), GTK_RESPONSE_CANCEL ) ; gtk_dialog_set_default_response ( GTK_RESPONSE_CANCEL <S2SV_ModEnd> ) ; if <S2SV_ModStart>, _ ( GTK_RESPONSE_CANCEL <S2SV_ModEnd> ) ; }",0
40,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; if (,0
41,<S2SV_ModStart> ; if ( (,0
42,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x51 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd> ) ; if",0
43,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
44,<S2SV_ModStart> } } } fix_google_param ( google_out ) ; fix_google_param ( google_param ) ; fix_google_param ( google_param ) ; fix_google_param ( google_param ) ; fix_google_param ( google_param ) ; fix_google_param ( google_param ) ; fix_google_param ( outFileName ) ;,0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
46,"<S2SV_ModStart> tsample_t s ; uint16 bps = 0 ; ( void ) TIFFGetField ( in, TIFFTAG_BITSPERSAMPLE, & bps ) ; if ( bps!= 8 ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can <S2SV_blank> only <S2SV_blank> handle <S2SV_blank> BitsPerSample=8 <S2SV_blank> in <S2SV_blank> %s"", ""cpContig2SeparateByRow"" ) ; return 0 ; }",1
47,"<S2SV_ModStart> ) ; struct hugepage_subpool * spool = ( struct hugepage_subpool <S2SV_ModEnd> * ) page_private <S2SV_ModStart> hugetlb_lock ) ; hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, 1 )",1
48,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) { return AVERROR_EOF ; } if (,1
49,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return try_get_page <S2SV_ModEnd> ( buf ->,1
51,"<S2SV_ModStart>, cp, ep2, map, nmap ) ; } else cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> < ep2 ) <S2SV_ModEnd> ND_PRINT ( (",1
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
53,<S2SV_ModStart> ; goto read <S2SV_ModEnd> ; } if,0
54,<S2SV_ModStart> config -> pm_max_requests ; fpm_globals. listening_socket = dup ( wp -> listening_socket ),1
55,<S2SV_ModStart> <S2SV_null> <S2SV_null> static PRINT32 <S2SV_ModEnd> read_frame_stats ( <S2SV_ModStart> dist_frame ) { const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * next_frame ; const FIRSTPASS_STATS * next_frame = 0.0 ; const FIRSTPASS_STATS * next_frame = 0.0 ; <S2SV_ModStart> ; int next_frame = 0.0 ; const FIRSTPASS_STREAM_STATS next_frame = 0.0 ; <S2SV_ModStart> = 0.0 ; <S2SV_ModEnd> if (! twopass <S2SV_ModStart> frame ) { const FIRSTPASS_STREAM_STPASS_STATS <S2SV_ModEnd> ; } else <S2SV_ModStart> return next_frame <S2SV_ModEnd> ; } <S2SV_null>,0
56,<S2SV_ModStart> 0 ; } err = handle -> h_err ; <S2SV_ModStart> h_transaction ) { rc <S2SV_ModEnd> = jbd2_journal_stop ( <S2SV_ModStart> ) ; return err <S2SV_ModEnd> ; } <S2SV_null>,0
57,<S2SV_ModStart> ; if (! EXT4_I ( inode ) ) <S2SV_ModEnd> ) return - EINVAL,0
58,<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = args -> valuelen ;,1
59,<S2SV_ModStart> ; if ( <S2SV_ModEnd> type & type <S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; if (,0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> len - 2 ; if ( len < stlv_len ) goto trunc ; ND_TCHECK2 ( * ( tptr ), stlv_len ) <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_TUPLE_LEN ; <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN : if (",0
61,<S2SV_ModStart> ) ; return <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,<S2SV_ModStart> == 12 && ( <S2SV_ModStart> flags & TH_SYN ),1
64,"<S2SV_ModStart> -> ipc_socket ; int procfd ; <S2SV_ModStart> & LXC_ATTACH_LSM ) <S2SV_ModEnd> ; int lsm_label <S2SV_ModStart> init_ctx -> lsm_label <S2SV_ModStart> : 0 ; <S2SV_ModEnd> if ( lsm_label <S2SV_ModStart> : 0 ; if ( lsm_set_label_at ( procfd, on_exec, <S2SV_ModEnd> init_ctx -> lsm_label <S2SV_ModStart> init_ctx -> lsm_label ) <S2SV_ModEnd> < 0 ) <S2SV_ModStart> } } } close ( procfd ) ;",0
65,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> } <S2SV_null>,0
66,"<S2SV_ModStart> ( header -> biBitCount == 0 ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> biBitCount <S2SV_blank> %d\\n"", 0 ) ; return OPJ_FALSE ; } if ( header ->",1
67,<S2SV_ModStart> NULL ; } sas_probe_devices ( port ) ;,1
68,<S2SV_ModStart> 0 ) { if ( image -> colors < tga_info. colormap_index ) image -> colors = 0 ;,0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> ENOBUFS ; } memset ( & line, 0, sizeof ( line ) ) ;",1
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_blk_ioctl ( bd, cmd ) ; if ( ret < 0 ) return ret ;",1
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> s ) { return FALSE <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>,0
73,<S2SV_ModStart> * ureq ; unsigned <S2SV_ModStart> return - EFAULT ; if ( req_len > ( QETH_BUFSIZE - IPA_PDU_HEADER_SIZE - sizeof ( struct qeth_ipacmd_hdr ) - sizeof ( struct qeth_ipacmd_setadpparms_hdr ) ) ) return - EINVAL,1
74,"<S2SV_ModStart> int m ; if ( n < 0 ) { jas_deprecated ( ""negative <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_pad"" ) ; }",1
75,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ) ) ; },0
76,<S2SV_ModStart> av_log ( mxf -> fc,1
77,"<S2SV_ModStart> mntent, pathlen, pathlen",0
78,<S2SV_ModStart> + 10 ; if ( psf -> fileoffset < psf -> filelength ) { <S2SV_ModStart> ; } ; } ;,1
79,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( p + l2info -> cookie_len ) ;,1
80,<S2SV_ModStart> NF_STOLEN ; return err == 0? NF_ACCEPT : NF_DROP <S2SV_ModEnd> ; } <S2SV_null>,1
81,"<S2SV_ModStart> * up ; int klen, up = - EINVAL ; int ulen ; <S2SV_ModStart> rta ) ; if ( up!= up ) return - EINVAL ; memcpy ( up, up, up, ulen ) ; memcpy ( up, up, up ) ; memcpy ( up, up, up, up, ulen ) ; <S2SV_ModStart> ) ; } memcpy ( up, up, up, up ) ;",0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> ; } } io -> io_cleanup = io -> io_cleanup ;,0
83,<S2SV_ModStart> value ) { if ( value == 0 ) break ;,0
84,<S2SV_ModStart> return ret ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
85,"<S2SV_ModStart> ( buf = jas_alloc3 ( bufsize, numcols <S2SV_ModEnd>, sizeof (",1
86,<S2SV_ModStart> ; vpx_codec_alg_priv_t res <S2SV_ModEnd> ; if (,0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> gso. type ) ; netbk_fatal_tx_err ( vif",1
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> < 0 ) <S2SV_ModEnd> bitmap_pos = ext_index_add_object <S2SV_ModStart> name ) ; <S2SV_ModEnd> bitmap_set ( base",1
89,"<S2SV_ModStart> xfr_cmd, fname <S2SV_ModEnd> ) ; free",1
90,<S2SV_ModStart> mixer ) { snd_usb_mixer_disconnect ( mixer ) ;,1
91,<S2SV_ModStart> ) { struct packet_rollover * rollover = NULL ; struct <S2SV_ModStart> EINVAL ; } mutex_lock ( & fanout_mutex ) ; err = - EINVAL ; err = - EINVAL ; <S2SV_ModStart> -> rollover ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> atomic_long_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_long <S2SV_ModStart> -> fanout ) ) { err = - EINVAL ; } <S2SV_ModEnd> rollover = rollover <S2SV_ModStart> atomic_long_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> rollover ) ) { err = - EINVAL ; err = - EINVAL ; goto out ; } <S2SV_ModEnd> rollover = - <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> rollover <S2SV_ModStart> atomic_long_set ( & rollover <S2SV_ModStart> rollover ) ) ) ; <S2SV_ModEnd> rollover = rollover,0
92,<S2SV_ModStart> ; newnp -> ipv6_txoptions = NULL ; newnp ->,0
93,<S2SV_ModStart> } else { kfree ( page ) ;,0
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
95,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
96,"<S2SV_ModStart> ( interface, ENC28J60_ECON1 ) & ENC28J60_ECON1 <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, ENC28J60_ECON1, ENC28J60_ECON1 ) & ENC28J60_ECON1 <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ; ENC28J60_ECON1 <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ) ;",0
97,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
98,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> } else { char * page_str ( page ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
99,"<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { ret = <S2SV_ModStart> inode, EXT4_STATE_DIO_UNWRITTEN ) ; if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result <S2SV_ModStart> } if ( ( flags & EXT4_GET_BLOCKS_CONVERT ) <S2SV_ModEnd> ) { ret",1
100,<S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ;,1
101,"<S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, cgroup ) ) { ret = - ENOENT ; goto out ; } if (!",1
102,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> vp9_stride ( <S2SV_ModStart> -> y_stride ) { const <S2SV_ModStart> ; vpx_writer <S2SV_ModEnd> ( ybf -> <S2SV_ModStart>, y_stride ) ; memset <S2SV_ModEnd> ( yuv_stride, <S2SV_ModStart> ) ; } vpx_delta_stride ) ; memset <S2SV_ModEnd> ( y_stride, <S2SV_ModStart> 8 ) ; memset <S2SV_ModEnd> ( y_stride, <S2SV_ModStart> 8 ) ; memcpy <S2SV_ModEnd> ( qcoeff, <S2SV_ModStart> 8 ) ; memset <S2SV_ModEnd> ( yuv_stride, <S2SV_ModStart> ) ; } ; memcpy <S2SV_ModEnd> ( yv_stride, <S2SV_ModStart> ++ ) ; memcpy <S2SV_ModEnd> ( ybf ->",0
103,<S2SV_ModStart> ) ) ; ret = - EFAULT <S2SV_ModEnd> - EFAULT ;,0
104,"<S2SV_ModStart> : if (! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) bprm -> per_clear |= PER_CLEAR_ON_SETID ; if (",1
105,<S2SV_ModStart> int error ; struct mb2_cache_entry <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> bh ) { <S2SV_ModEnd> int error = <S2SV_ModStart> return error ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
106,<S2SV_ModStart> rlen ) { return FALSE ; } else {,0
107,<S2SV_ModStart> tf = ( <S2SV_ModEnd> luaY_parser ) (,1
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.",1
110,"<S2SV_ModStart> ; dl = kzalloc <S2SV_ModEnd> ( size,",1
111,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static u_int <S2SV_ModEnd> rpdu_len ) { ND_TCHECK ( * tptr ) ; <S2SV_ModStart> * tptr ; if ( len < sizeof ( * tptr ) ) { ND_TCHECK2 ( * tptr ) ; return len ; } ND_TCHECK_8BITS ( * tptr ) ; <S2SV_ModStart> pdu ) ; if ( rpdu ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> bytes <S2SV_blank> (%u)"", len ) ) ; goto trunc ; } if ( len < sizeof ( rpki_rtr_pdu ) ) { ND_PRINT ( ( ndo, ""(%u)"", len ) ) ; return FALSE ; } ND_TCHECK2 ( rpdu ) ; <S2SV_ModStart> pdu ) ; if ( len < sizeof ( rpki_rtr_rtr_rtr_len ) { ND_PRINT ( ( ndo, ""(%u)"", len ) ) ; free ( rpdu ) ) ; return FALSE ; } <S2SV_ModStart> pdu ) ; if ( len < sizeof ( rpdu ) ) ) { ND_PR",0
113,"<S2SV_ModStart> ; int n <S2SV_ModEnd> ; skb -> <S2SV_ModStart> rose_facilities_struct ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> data + ROSE_CALL_REQ_FACILITIES_OFF, skb -> len - ROSE_CALL_REQ_FACILITIES_OFF, <S2SV_ModEnd> & facilities )",1
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,<S2SV_ModStart> ) ; } if (!,0
116,<S2SV_ModStart> ; ret = posix_acl_update_mode ( inode <S2SV_ModEnd> ) ; if,0
117,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; int ret <S2SV_ModStart> ) ; } o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
118,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",1
119,"<S2SV_ModStart> == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> is <S2SV_blank> absolute"" ) ; return ( ARCHIVE_FAILED ) ; } separator = * src ++ ; } <S2SV_ModEnd> for ( ;",1
120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int rc ; int rc = TPM_RC_ALG_HASH hashAlg ; if (! tpm_init ( & ctx, hashAlg, hashAlg ) { if (! md ) { LOG_ERR ( ""HMAC: <S2SV_blank> %s <S2SV_blank> h2x"", hashAlg ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { HMAC_error_init_ex ( & ctx <S2SV_ModStart>, NULL, hashAlg ) ; if (! md ) { LOG_ERR ( ""HMAC <S2SV_blank> failed: <S2SV_blank> %s"", md, md, md, - 1 ) ; return TPM_RC_ALIGNED ) ; } <S2SV_ModStart> ) ) { HMAC_error_init ( & ctx ) ; if (! md ) { LOG_ERR ( ""HMAC <S2SV_blank> Init <S2SV_blank> failed: <S2SV_blank> %s\\n"", md, md, NULL ) ; return NULL ; } <S2SV_ModStart> return rc ; } <S2SV_ModEnd> return rc ;",0
121,"<S2SV_ModStart> inmem )? jas_stream_memopen2 <S2SV_ModEnd> ( 0,",0
122,<S2SV_ModStart> s ) { if ( s == 0 ) return ( ( void * ) NULL ) ;,1
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! ib_safe_file_access ( fp ) ) ) return - EACCES ; if (,1
124,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; ( void ) ResetMagickMemory ( BImgBuff, 0, ldblk * sizeof ( double ) ) ;",1
125,<S2SV_ModStart> ( peer ) peer = maybe_get_net <S2SV_ModEnd> ( peer ),1
126,<S2SV_ModStart> } while ( ( i < ( int ) header_buf_used ) && ( <S2SV_ModStart> ] == '\\n' ),1
127,<S2SV_ModStart> m_family ) ; if ( proto == LLDP_MGMT_ADDR_NONE ) continue <S2SV_ModEnd> ; if (,1
128,"<S2SV_ModStart> ( ndo, 1 <S2SV_ModEnd> ) ; if",0
129,<S2SV_ModStart> default_auto_asconf ) { spin_lock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ; <S2SV_ModStart> do_auto_asconf = 1 ; spin_unlock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) <S2SV_ModStart> ; } else { <S2SV_ModStart> = 0 ; },1
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_matrix_profile ( s <S2SV_ModStart> s -> avctx ) { if ( s -> avctx -> profile == 8 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ( s -> avctx -> profile!= 8 ) { avctx -> avctx -> profile = 0 ; return AVERROR_INVALIDDATA ; } return AVERROR_INVALIDDATA ; <S2SV_ModStart> 0 ) ; } <S2SV_ModEnd> if ( s ->,0
131,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> readw_w ( uint8_t <S2SV_ModStart> read ) ; if (! buf ) return 0 ; <S2SV_ModEnd> readw ( & <S2SV_ModStart> + 8 ; if (!,0
132,<S2SV_ModStart> rule ) ; if (! entry -> rule ) return - EINVAL ;,0
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> ""\\n\\n{ <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> setSession();\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }\\n"" ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> %s\\n"" <S2SV_ModEnd>, int poll_interval <S2SV_ModStart> }\\n"" <S2SV_ModEnd>, int poll_interval,",0
136,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_lp ( struct <S2SV_ModStart> * ext4_hdr ; <S2SV_ModEnd> struct xdr_hdr_len <S2SV_ModStart> * attr, attr, xdr, u_len <S2SV_ModEnd>, & xdr <S2SV_ModStart> ; if ( <S2SV_ModEnd> == NULL ) <S2SV_ModStart> + 1 ) return - EINVAL ; <S2SV_ModEnd> size = xdr_len <S2SV_ModStart> goto out ; <S2SV_ModEnd> mem = xdr_len <S2SV_ModStart> += req_len ; if ( xdr_len == 0 ) return ERROR ;",0
137,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,1
138,<S2SV_ModStart> ; while ( ( i < to_read ) && <S2SV_ModStart>!= 0 ) <S2SV_ModEnd> ) { i,1
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,<S2SV_ModStart> [ plane ] && in -> linesize [ plane ],1
141,"<S2SV_ModStart> ( szFileName, pszFileName, <S2SV_ModStart> ) - 5 <S2SV_ModEnd> ) ; }",1
142,<S2SV_ModStart> ; if ( <S2SV_ModEnd> name == '\\0',0
143,<S2SV_ModStart> if ( q < p || q,0
144,"<S2SV_ModStart> __be32 new_saddr ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. srr ) daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",1
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> return ; } if ( len < sizeof ( struct eigrp_common_header ) ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> %s, <S2SV_blank> < <S2SV_blank> %u)"", ( ndo, eigrp_common_header ) sizeof ( struct eigrp_tlv ) ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < sizeof ( struct eigrp_tlv_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short, <S2SV_blank> short, <S2SV_blank> %u)"", ( ndo, "" <S2SV_blank> (too <S2SV_blank> %u)"", ( u_int ) sizeof ( struct eigrp_tlv_tlv_header ) ) ) ) ; return ; }",0
147,<S2SV_ModStart> = NULL ; size_t addr ; <S2SV_ModStart> ++ ) { <S2SV_ModEnd> memset ( addr,0
148,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_table_start ( int <S2SV_ModStart> = malloc. table_start <S2SV_ModEnd> ; if ( <S2SV_ModStart>, long ) <S2SV_ModEnd> = malloc ( <S2SV_ModStart> = malloc. table_start <S2SV_ModEnd> ; if (",0
149,"<S2SV_ModStart>, '/' ) ; if ( ptr == NULL ) return ( ENOENT ) ; ptr ++ <S2SV_ModEnd> ; rw_exit (",1
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; if ( flags & EXT4_GET_BLOCKS_CONVERT ) split_flag |= EXT4_EXT_DATA_VALID2 ;,1
151,<S2SV_ModStart> ; ret = posix_acl_update_mode ( inode <S2SV_ModEnd> ) ; if,0
152,,0
153,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), & final ) ; rcu_read_unlock ( <S2SV_ModEnd> ) ; dst",1
154,"<S2SV_ModStart> = 0 ; uint32 nstrips = 0 ; uint16 <S2SV_ModEnd> buff = 0 <S2SV_ModStart> 0 ) { if ( buffsize > 0xFFFFU - 3 ) { TIFFError ( ""loadImage"", ""loadImage"" ) ; return ( - 1 ) ; } <S2SV_ModStart> buffsize ) { if ( buffsize > 0xFFFFU - 3 ) { TIFFError ( ""loadImage"", ""loadImage"" ) ; return - 1 ; }",0
155,"<S2SV_ModStart> = NULL ; memset ( & arg, 0, sizeof ( arg_arg ) ) ; <S2SV_ModStart> return - 1 ; <S2SV_ModEnd> # if CONFIG_VP9_HIGHBITDEPTH if <S2SV_ModStart> argp9_HIGHBITDEPTH if ( arg_HIGHBITDEPTH if",0
156,<S2SV_ModStart> options. disable_forwarding ||! use_privsep,1
157,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
158,<S2SV_ModStart> return ( ( ( MagickSizeType ),0
159,"<S2SV_ModStart> errout ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ""xxxx"" ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart> -> gr_ctx. length = 4 <S2SV_ModEnd> ; gr ->",1
160,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; <S2SV_ModStart> -> i_data, ext_size ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size <S2SV_ModEnd> ) ; neh",1
161,<S2SV_ModStart> -> ssl <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) { <S2SV_ModEnd> if (! <S2SV_ModStart> return NULL ; } <S2SV_ModEnd> if ( c <S2SV_ModStart> ) ; } <S2SV_ModEnd> return 0 ;,0
162,<S2SV_ModStart> ; int ret ; if ( current_chrooted ( ) ) return - EPERM,1
163,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
164,"<S2SV_ModStart> c -> nreslevels <= <S2SV_ModEnd> s -> reduction_factor <S2SV_ModStart> -> reduction_factor ) { av_log ( s -> avctx, AV_LOG_ERROR, ""reduction_factor <S2SV_blank> too <S2SV_blank> large <S2SV_blank> for <S2SV_blank> %d\\n"", c -> reduction_factor ) ; return AVERROR ( EINVAL ) ; } <S2SV_ModEnd> c -> nreslevels2decode",0
165,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
166,<S2SV_ModStart> ; bool is_vnet_hdr_vnet = false ; bool do_vnet <S2SV_ModStart> -> max_hdr ) { <S2SV_ModStart> -> max_vnet = false ; do_vnet = false ; } <S2SV_ModStart> < 0 ) { <S2SV_ModStart> = false ; do_vnet = false ; },0
167,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> sctp_auth_asoc_active_key ( asoc,0
168,<S2SV_ModStart> return false ; if ( ndp_msg_type_info ( msg_type ) -> addrto_validate ) return ndp_msg_type_info ( msg_type ) -> addrto_validate ( & msg -> addrto ) ; else,1
169,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> lsm_set_label_at ( int lsm_label <S2SV_ModEnd>, int lsm_label <S2SV_ModStart> = - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return <S2SV_ModEnd> ; } <S2SV_null>",0
170,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
171,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
172,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; # if CONFIG_VP9_TIFF_ENCODING if ( cpi -> oxcf. pass == 2 ) { const double gf_group_group = ( cpi -> oxcf. bit_depth ) ; return 0 ; } <S2SV_ModEnd> } <S2SV_null>,0
173,"<S2SV_ModStart> } num ++ ; if ( num > MaxAllocSize / ITEMSIZE ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> levels <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num, ( int ) ( MaxAllocSize / ITEMSIZE ) ) ) )",1
174,"<S2SV_ModStart> header, struct mb2_cache_entry <S2SV_ModEnd> * * pce <S2SV_ModStart> ) ; struct mb2_cache_entry * ce ; struct mb2_cache_entry * ce = mb2_cache_entry <S2SV_ModEnd> ; struct mb2_cache_entry_first <S2SV_ModStart> ( ext4_mb_cache, <S2SV_ModEnd> bh ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> ext4_mb_cache_find_cache ( ext4_mb_cache,",0
175,"<S2SV_ModStart> { gint64 offset <S2SV_ModEnd> ; char line <S2SV_ModStart> = offset ; return parse_cosine_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> -> phdr, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> wth -> frame_buffer, line",1
176,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
177,<S2SV_ModStart> if ( left == 0 && extend ) return 0 ; if ( left,1
178,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
179,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
180,"<S2SV_ModStart> * hdr ; if ( ( hdr + sizeof ( hdr ) - sizeof ( hdr ) ) ) return - EINVAL ; <S2SV_ModStart> copy_from_user ( hdr, buf + sizeof ( hdr ), hdr )",0
181,<S2SV_ModStart> m = hstartrow <S2SV_ModEnd> ; if (,0
182,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
183,"<S2SV_ModStart> number_colormaps, number_planes_filled <S2SV_ModEnd> ) ; number_planes <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ; number_planes_filled =",0
184,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_mb_cache ) { ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ; sbi -> s_mb_cache = NULL ; } <S2SV_ModEnd> if (!,1
185,<S2SV_ModStart> ; intf -> bNumEndpoints = 0,0
186,"<S2SV_ModStart> ""setregid"" ) ; <S2SV_ModEnd> char * arg <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [",1
187,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) <S2SV_ModStart> ci_parent ) ; else return NULL ;,1
188,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { write_sequnlock <S2SV_ModStart>, fmode_t fmode <S2SV_ModEnd> ) ; fmode_t",0
189,<S2SV_ModStart> ( pb ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA,1
190,<S2SV_ModStart> if ( q < p || q,1
191,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = &,1
192,"<S2SV_ModStart> fd, NULL <S2SV_ModEnd> ) ; char <S2SV_ModStart> fd ) ; <S2SV_ModEnd> if (!",0
193,<S2SV_ModStart> prev ) ; n -> mounts += n -> pending_mounts ; n -> pending_mounts = 0 ;,1
194,"<S2SV_ModStart> ; savesegment ( fs, fsindex ) ; savesegment ( gs, gsindex ) ; load_TLS ( next, cpu ) ; arch_end_context_switch ( next_p ) ; savesegment ( <S2SV_ModStart> next -> ds <S2SV_ModEnd> ) ; if",1
195,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
196,<S2SV_ModStart> 1 ) ; if ( ( UWORD32 ) ) { return ret ; },0
197,<S2SV_ModStart> 1u << DB_VECTOR ) | ( 1u << AC_VECTOR,1
198,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> 1 ] ; u_int stringlen ; stringlen = len ; if ( stringlen > NFSX_V3FHMAX ) stringlen = NFSX_V3FHMAX ; <S2SV_ModStart>, sfsname, stringlen <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ; temp [ stringlen <S2SV_ModEnd> ] = '\\0'",1
199,"<S2SV_ModStart> unsigned int flags, struct rt6_info * rt <S2SV_ModStart> ( & fhdr, rt",1
200,<S2SV_ModStart> ( res ) goto err_add_port <S2SV_ModEnd> ; res = <S2SV_ModStart> port ) ; err_add_port : hsr_del_node ( & hsr -> self_node_db ) ;,1
201,<S2SV_ModStart> ; if ( (,0
202,"<S2SV_ModStart> src, const VP9EncoderConfig <S2SV_ModEnd> * const uint8_t <S2SV_ModStart> int src_stride, vp9_buffer <S2SV_ModEnd> * dst_stride, <S2SV_ModStart> src, vpx_reader <S2SV_ModEnd> * dst_stride, <S2SV_ModStart> src_stride ) { vp9_stride <S2SV_ModEnd> ( src_stride, <S2SV_ModStart> src_stride ) ; vp9_buffer <S2SV_ModEnd> } <S2SV_null>",0
203,<S2SV_ModStart> ; if (! npages ) return 1 ; if (,0
204,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { return assign_eip_far ( ctxt, dst, ctxt -> mode == X86EMUL_MODE_PROT64 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
205,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
206,"<S2SV_ModStart> ; remaining = tvb_reported_length_remaining <S2SV_ModEnd> ( tvb,",1
207,<S2SV_ModStart> = get_dio_block ( inode ) ; if (! iter ) return - ENOMEM ;,0
208,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
209,<S2SV_ModStart> ; if ( (,0
210,<S2SV_ModStart> ; if ( pmc_overflow ( val ) <S2SV_ModEnd> ) write_pmc (,1
211,"<S2SV_ModStart> ( * b + len, * avail - len <S2SV_ModEnd>, nl )",1
212,"<S2SV_ModStart> expr_name ) { <S2SV_ModEnd> char * o <S2SV_ModStart> ; unsigned int err ; size_t o_len <S2SV_ModStart> ; if (! e ) goto out <S2SV_ModEnd> ; Py_CLEAR ( <S2SV_ModStart> ) ) { goto out <S2SV_ModEnd> ; } o <S2SV_ModStart> ++ ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ( o, o <S2SV_ModEnd> sizeof ( c <S2SV_ModStart> ) ) { Py_DECODE_NONE <S2SV_ModEnd> ) ; return",0
213,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
214,,0
215,"<S2SV_ModStart> == 0 ) mark_key_instantiated ( key, 0 <S2SV_ModEnd> ) ; up_write",1
216,<S2SV_ModStart> <= * len && plen > 0,1
217,<S2SV_ModStart> ; args. rmtvaluelen = valuelen ; args.,1
218,<S2SV_ModStart> ; if ( <S2SV_ModEnd> timeout == NULL <S2SV_ModStart> ; if ( compat_get_timespec <S2SV_ModEnd> ( & ktspec <S2SV_ModStart> > 0 && compat_put_timespec <S2SV_ModEnd> ( & ktspec,1
219,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
220,<S2SV_ModStart> ndev ) ; <S2SV_ModEnd> assert ( skb <S2SV_ModStart> q_num ) ; return <S2SV_ModEnd> hns_nic_net_xmit_hw ( ndev <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
221,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
222,<S2SV_ModStart> } if ( <S2SV_ModEnd> udp_specified && settings,1
223,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
224,"<S2SV_ModStart> -> xfs, file",0
225,<S2SV_ModStart> found = 0 <S2SV_ModEnd> ; const char <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( found,1
226,"<S2SV_ModStart> int validate_pmu ( struct pmu * pmu, <S2SV_ModStart> arm_pmu * armpmu <S2SV_ModEnd> ; struct armpmu <S2SV_ModStart> return 1 ; if ( event -> pmu!= pmu ) return 0 ;",0
227,"<S2SV_ModStart> bool new_idmap_permitted ( const struct file * file, <S2SV_ModStart>, cap_setid ) && file_ns_capable ( file, ns -> parent, cap_setid )",1
228,<S2SV_ModStart> j ++ ) { if ( a -> type == szMAPI_BINARY ) <S2SV_ModStart> ) ; } },1
229,"<S2SV_ModStart> hx ; u8 * buf <S2SV_ModEnd> ; int ret <S2SV_ModStart> = 0 ; udev = kmalloc ( sizeof ( udev ), GFP_KERNEL ) ; if (! buf ) return - ENOMEM ; memset ( & cpu_cypress, 0, sizeof ( * buf ), 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> = 0 ; kfree ( buf <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; if (",0
230,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ptr ++ ; length -= 2 ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; if ( length -= 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ; return ; } val_l = EXTRACT_16BITS ( ptr + 2 ) ; ptr ++ ) ; if ( ptr ++ ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; ptr ++ ; if ( ptr ++ ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) )",0
231,"<S2SV_ModStart> princ ) ; success = data_eq_string ( * realm, <S2SV_ModEnd> handle -> params <S2SV_ModStart> params. realm ) && data_eq_string ( * c1, ""kadmin"" ) &&! data_eq_string ( * c2, ""history"" ) ; <S2SV_ModEnd> fail_princ : if",1
232,<S2SV_ModStart> ; if ( shader_rec_offset < args -> bin_cl_size ||,1
233,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
234,<S2SV_ModStart> vma -> vm_file ) ; down_read ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModStart> ; out : up_read ( & EXT4_I ( inode ) -> i_mmap_sem ) ;,1
235,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
236,<S2SV_ModStart> arg ) { char ch = * arg ; switch ( ch <S2SV_ModEnd> ) { case <S2SV_ModStart> ';' : case '=' : case <S2SV_ModStart> b ++ = ch <S2SV_ModEnd> ; break ;,1
237,"<S2SV_ModStart> && nmap ) <S2SV_ModEnd> cp = ikev1_attrmap_print <S2SV_ModStart>, cp, ep2, map, nmap ) ; else cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> < ep2 ) <S2SV_ModEnd> ND_PRINT ( (",1
238,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
239,<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) < skb -> head +,1
240,<S2SV_ModStart> ( ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
241,<S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ;,1
242,<S2SV_ModStart> & RCV_SHUTDOWN ) return 0 ; <S2SV_ModEnd> return err ; <S2SV_ModStart> msg_namelen ) ; <S2SV_ModEnd> } return 0,0
243,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
244,"<S2SV_ModStart> src, const VP9EncoderConfig <S2SV_ModEnd> * const uint8_t <S2SV_ModStart> src, const uint8_t * src_stride <S2SV_ModEnd> ) { const <S2SV_ModStart> src -> vp9_stride <S2SV_ModEnd> ( src_stride, <S2SV_ModStart> src -> ud_stride <S2SV_ModEnd> ) ; const <S2SV_ModStart> src -> vp9_buffer <S2SV_ModEnd> } } <S2SV_null>",0
245,"<S2SV_ModStart> * md ; <S2SV_ModEnd> md -> subject_name <S2SV_ModStart> md -> subject_name = NULL ; md = X509_get_name ( & <S2SV_ModStart> md -> subject_name ) ; if ( ret ) goto cleanup ; ret = rfc2253_name <S2SV_ModEnd> ( X509_get_subject_name ( <S2SV_ModStart> md -> subject_dn, & <S2SV_ModEnd> md -> issuer_dn <S2SV_ModStart> md -> subject_dn ) ; if ( ret ) goto cleanup ; ret = X509_get_name ( & <S2SV_ModEnd> md -> issuer_dn <S2SV_ModStart> md -> subject_dn ) ; if ( ret ) goto cleanup ; ret = rfc2253_name <S2SV_ModEnd> ; ret =",0
246,<S2SV_ModStart> (! npages || base_gfn!= old. base_gfn,1
247,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ru,1
248,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
249,"<S2SV_ModStart> * ni ; u_int length_left ; if ( length_left == sizeof ( struct rip6 ) ) { ND_TCHECK ( rp -> rip6_nets ) ; length_left = sizeof ( struct rip6 ) ; length_left = sizeof ( struct rip6 ) - sizeof ( struct rip6 ) ) ; if ( length_left == 1 ) goto trunc ; length_left = sizeof ( struct rip6 ) - 1 ) goto trunc ; ND_TCHECK ( rp -> rip6_nets ) ; if ( length_left == sizeof ( struct rip6 ) ) goto trunc ; length_left = length_left <S2SV_ModEnd> ; if ( <S2SV_ModStart> ni ) { ND_TCHECK ( rp -> rip6_nets ) ; length_left = sizeof ( struct rip6_nets ) ; if ( length_left < sizeof ( struct rip6 ) goto trunc ; length_left ) ; length_left -= 1 ; if ( length_left == sizeof ( struct rip6 ) goto trunc ; length_left ) ND_TCHECK ( rp -> rip6 ) ) goto trunc ; } if ( length_left == sizeof ( struct rip6 ) ND_PRINT ( ndo, "" <S2SV_blank> %u <S2SV_blank>",0
250,<S2SV_ModStart> < 0 ) goto error ; <S2SV_ModEnd> goto set ;,1
251,<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( cpi ->,0
252,"<S2SV_ModStart> argc ++ ; retval = bprm_change_interp ( iname, bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> ; interp_file =",1
253,<S2SV_ModStart> ; int iSrc <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> res -> ContribRow <S2SV_ModStart> u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ].,1
254,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> return 0 ;,0
255,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".cfg\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n""",1
256,<S2SV_ModStart> ) { int length = 0 <S2SV_ModEnd> ; if (,0
257,"<S2SV_ModStart> ( mobj ) { size_t granularity = BIT ( tee_mm_sec_ddr. shift ) ; <S2SV_ModStart>, 0, ROUNDUP ( size, granularity ) ) ; } <S2SV_ModEnd> return mobj ;",1
258,<S2SV_ModStart> -> it_overrun += 1LL <S2SV_ModEnd> << i ;,1
259,"<S2SV_ModStart> n, expr_async ) { <S2SV_ModEnd> n_seq * n <S2SV_ModStart> ; if (! ( <S2SV_ModEnd> suite ) ) <S2SV_ModStart> == NULL ) { c_async_async = CHILD ( n, 1 ) ; if (! is_async_async ) goto error ; } if ( CHILD ( n, 1 ) ) == TYPE ( CHILD ( n, n ) ) == 2 ) { n = CHILD ( n, 1 ) ; if (! is_async_async"" ) goto error ; } if ( n = CHILD ( n, 1 ) ) == CHILD ( n, n, 1 ) == 2 ) { c -> n = CHILD ( n, 1 ) ; if (! is_async ) goto error ; } if ( <S2SV_ModStart> == NULL ) { WARN_ON ( CHILD ( n, 1 ), ""asdl_asdl_async"" ) ; if (! ( CHILD ( n, 1 ) ) == TYPE ( CHILD ( n, 1 ) ) ) { n = CHILD ( n, 1 ) ; } else if (! ( CHILD ( n, 1 ) ) == TYPE ( CHILD ( n, 1 ) )",0
260,<S2SV_ModStart> src -> frame_state <S2SV_ModEnd> ) ; },0
261,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> * w, <S2SV_ModStart> write ) { const VP9_COMMON * const MACROBLOCKD * const xd = & cm -> mbmi ; const MACROBLOCKD * const xd = & xd -> mi [ mi [ 0 ] -> mi [ mi ] ; const int bw = xd -> mi [ mi_row ] ; const int bw = xd -> mbmi. nbmi ; const int bw = mbmi -> mi [ mi_row ] ; const int bw = mbmi -> mi_cols + mi -> mbmi. mi_cols + mi -> mbmi. mi_cols + mi_row * cm -> mi_cols ; const int bw = xd -> mbmi_ext ; <S2SV_ModStart> ) ; } } <S2SV_ModEnd> if (!",0
262,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
263,"<S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; n <S2SV_ModStart> = r -> qiov. size <S2SV_ModEnd> / 512 ; <S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; }",1
264,<S2SV_ModStart> if ( cs >= <S2SV_ModEnd> CQSPI_MAX_CHIPSELECT ) {,1
265,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
266,<S2SV_ModStart> ) break ; if ( l > ll ) l = ll ;,1
267,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
268,<S2SV_ModStart> <= 0 && <S2SV_ModEnd> ND_TTEST ( *,0
269,<S2SV_ModStart> -> skip_rq ) <S2SV_ModEnd> ; if (,0
270,"<S2SV_ModStart> ret ; uint8_t * buffer ; uint8_t value ; buffer = kmalloc ( 1, GFP_KERNEL ) ; if (! buffer ) return - ENOMEM <S2SV_ModEnd> ; dev_dbg ( <S2SV_ModStart>, reg, buffer <S2SV_ModEnd>, 1, <S2SV_ModStart> ret >= 0 ) { <S2SV_ModEnd> ret = buffer <S2SV_ModStart> ret ; } ; kfree ( buffer ) ; return <S2SV_ModEnd> ret ;",0
271,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
272,"<S2SV_ModStart> ; } } s -> append_char ( s, 0 ) ; strncpy <S2SV_ModEnd> ( outbuffer,",1
273,"<S2SV_ModStart> ( 2, <S2SV_ModEnd> ) ; }",0
274,<S2SV_ModStart> = 0 ; ( i + 3 ) <S2SV_ModEnd> < sec -> <S2SV_ModStart> = 0 ; ( i + 7 ) <S2SV_ModEnd> < sec ->,1
275,<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_BW_CONSTRAINTS_OLD : if ( subl == 0 ) break ; <S2SV_ModStart> ++ ) { <S2SV_ModEnd> bw. i,1
276,"<S2SV_ModStart> ) data ; memset ( ( ptr_hdr, 0, sizeof ( ) ) ) ;",0
277,<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { <S2SV_ModEnd> if ( p,0
278,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void get_lock_irq ( <S2SV_ModStart> flags ) { <S2SV_ModEnd> struct bhdr ( void <S2SV_ModStart> flags ) ; <S2SV_ModEnd> if (!,0
279,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
280,"<S2SV_ModStart> ) continue ; if ( vif -> tx. sring -> req_prod. sring -> tx. req_cons > XEN_NETIF_RING_TX_SIZE ) { netdev_err ( vif -> dev, ""Impossible <S2SV_blank> cons <S2SV_blank> %d, <S2SV_blank> size <S2SV_blank> %d\\n"", vif -> tx. sring -> req_cons, vif -> tx. sring -> req_prod. sring -> req_prod, XEN_NETIF_TX_SIZE ) ; continue ; } <S2SV_ModStart> size ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> ) ) ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> ) ) ; continue ; } <S2SV_ModStart> size ) continue ; <S2SV_ModEnd> continue ; }",0
281,<S2SV_ModStart> ; if ( (,0
282,<S2SV_ModStart> xfrm_walk * ctx <S2SV_ModEnd> ) { struct,0
283,<S2SV_ModStart> conn ) ; if ( <S2SV_ModStart> ( conn )!= 0 ) return,1
284,"<S2SV_ModStart> ) ) { <S2SV_ModEnd> netbk, XEN_NETIF_RSP_OKAY <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> netbk, XEN_NETIF_RSP_OKAY <S2SV_ModEnd> ) ; struct <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> XEN_NETIF_RSP_ERROR ) ; <S2SV_ModEnd> if ( err <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY",0
285,,1
286,"<S2SV_ModStart> ) NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ) NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ;",1
287,"<S2SV_ModStart> len < 0 <S2SV_ModEnd> ) { syslog <S2SV_ModStart> 1 ; } if ( addr. nl_pid ) { syslog ( LOG_WARNING, ""Received <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> untrusted <S2SV_blank> pid:%u"", addr. nl_pid ) ; continue ; }",1
288,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
289,<S2SV_ModStart> ipc == NULL && client -> session == NULL,1
290,"<S2SV_ModStart> } if ( safe_calloc <S2SV_ModEnd> ( newpos, <S2SV_ModStart>, & PyId_type_ignoresize ) < 0 ) { return FALSE ; } if ( tmp == NULL || tmp == NULL ) { PyErr_SetMemory ( ) ; return FALSE ; } <S2SV_ModEnd> } else",0
291,"<S2SV_ModStart>, nameptr, lfi, fname, UDF_NAME_LEN <S2SV_ModEnd> ) ; if",1
292,"<S2SV_ModStart> ip_vs_timeout_user t ; memset ( & t, 0, sizeof ( t ) ) ;",1
293,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) ; rcu_read_lock ( ) ;",0
294,<S2SV_ModStart> ; ssize_t result ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
295,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, & next ) ) { ret = - ENOENT ; goto out ; } if (! fpath ) { ret = - ENOENT ; goto out ; } if (! <S2SV_ModStart> if (! fc_may_access ( fc, path1, path1, NULL, O_RDWR ) ) { ret = - ENOENT <S2SV_ModEnd> ; goto out",0
296,<S2SV_ModStart> ) ) { put_disk ( disk ) ;,1
297,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
298,<S2SV_ModStart> NULL ) { status = MagickFalse ; break <S2SV_ModEnd> ; } image,0
299,<S2SV_ModStart> ; if ( avio_feof ( s ) <S2SV_ModEnd> ) { if,0
300,<S2SV_ModStart> ; rinfo = kzalloc <S2SV_ModEnd> ( SZ_SG_REQ_INFO *,1
301,"<S2SV_ModStart> ; # endif install_keyword ( ""umask"", & umask_handler ) ;",1
302,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
303,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> kfree ( tmpbuf,1
304,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; }",1
305,<S2SV_ModStart> ( box = jp2_box_create0 ( ) ) ) { goto error ; } <S2SV_ModEnd> if (!,0
306,"<S2SV_ModStart> * new_size, size_t new_size",0
307,<S2SV_ModStart> ; int copylen = 0 <S2SV_ModStart> goto err ; err = - EMSGSIZE ; if ( count > MAX_SKB_FRAGS ) goto err ; <S2SV_ModStart> return 0 ; } copylen = count,0
308,<S2SV_ModStart> ( struct ipv6hdr <S2SV_ModEnd> ) ; unsigned <S2SV_ModStart> while ( offset <S2SV_ModEnd> <= packet_len ) <S2SV_ModStart> packet_len ) { struct ipv6_opt_hdr * exthdr ; <S2SV_ModStart> offset ; } if ( offset + sizeof ( struct ipv6_opt_hdr ) > packet_len ) return - EINVAL ; exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + offset ) ; <S2SV_ModStart> -> nexthdr ; } return - EINVAL <S2SV_ModEnd> ; } <S2SV_null>,1
309,"<S2SV_ModStart> filter, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 3 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> = 0 ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
310,<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( & in_mv,0
311,<S2SV_ModStart> skb ) ; <S2SV_ModEnd> return err ;,0
312,<S2SV_ModStart> } if ( <S2SV_ModEnd> djrcv_dev -> paired_dj_devices,1
313,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
314,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
315,"<S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_chunk_t * ) chunk_hdr ; union sctp_addip_chunk_t * addip = sctp_params ( param, addip_hdr. params ) ; if ( err_pass == SCTP_PARAM_ADDRESS || param. addip == SCTP_PARAM_IPV6_ADDRESS || sctp_id == SCTP_PARAM_IPV4_NO_IPV4_IPV6_ADDRESS ) { if ( err_code == SCTP_ERROR_ERROR_IPV4_IPV4_NO_ERROR ) { sctp_process_pass = true ; if ( err_code == SCTP_ERROR_PARAM_IPV4_NO_ERROR ) { if ( err_code == SCTP_ERROR_PARAM_IPV4_IPV4_IPV4_IPV4_ADDRESS ) continue ; if ( err_code == SCTP_ERROR_ERROR_IPV4_",0
316,"<S2SV_ModStart> 101, ( ""jas_realloc(%x, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",1
317,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
318,<S2SV_ModStart> CPU_FTR_TM_COMP ) && hv_enabled <S2SV_ModEnd> ; break ;,1
319,<S2SV_ModStart> msicode ) ; if ( map!= 0 ) return - ENOMEM ;,0
320,"<S2SV_ModStart> key_name ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. key, HV_KVP_EXCHANGE_MAX_SIZE / 2",0
321,<S2SV_ModStart> ( fp ) { <S2SV_ModEnd> if ( err,0
322,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
323,"<S2SV_ModStart> * mbuf, void * _IOC_SIZE ( void ) mbuf ; size_t _IOC_SIZE ( cmd ) ; size_t _IOC_SIZE ( _IOC_DIR, & cmd ) ; if ( _IOC_SIZE ( cmd )!= _IOC_SIZE ) { err = - EFAULT ; goto out ; } memset ( cmd, 0, sizeof ( cmd ) ) ; if ( _IOC_SIZE ( cmd )!= 0 ) return - EFAULT <S2SV_ModEnd> ; memset (",0
324,<S2SV_ModStart> -> server. d_enabled <S2SV_ModEnd> && c.,0
325,"<S2SV_ModStart> u16 size, const <S2SV_ModStart> data ) { void * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, buf <S2SV_ModEnd>, size, <S2SV_ModStart> 500 ) ; kfree ( buf ) ; return ret ;",1
326,<S2SV_ModStart> ; intf -> bNumEndpoints = 0,0
327,"<S2SV_ModStart> ) { case GTK_RESPONSE_OK : { file = nautilus_file_get_metadata ( parameters -> file ) ; nautilus_file_set_metadata ( parameters -> file, NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED, NULL, ""yes"" ) ; nautilus_file_invalidate_attributes ( file ) ; nautilus_file_attributes ( file, NULL, NULL, NULL, NULL, NULL, NULL ) ; nautilus_file_attributes ( file ) ; nautilus_invalidate_screen <S2SV_ModEnd> ) ; break",0
328,<S2SV_ModStart> ; if ( urb -> actual_length > 0 &&,1
329,"<S2SV_ModStart> * server, struct smb_vol * vol ) { <S2SV_ModEnd> struct cifsSesInfo * <S2SV_ModStart> server -> smb_list ) { switch ( server -> smb_list ) { case SERVER_LOCK : if ( ses -> smb_list!= ses -> linux_uid ) continue ; default : if ( vol -> linux_uid!= ses -> linux_uid ) continue ; break ; default : if ( vol -> linux_uid!= ses -> linux_uid ) continue ; <S2SV_ModStart> = ses -> linux_uid <S2SV_ModEnd> ; if (",0
330,<S2SV_ModStart> vpx_codec_err_t res ; if ( cfg -> g_w!= cfg -> g_w || cfg -> g_w!= VPX_IMG_FMT_HIGHBITDEPTH if ( cfg -> g_w == 0 || cfg -> g_w > 0 || cfg -> g_w > 0 || cfg -> g_w!= cfg -> g_h > 1 || cfg -> g_w!= VPX_HIGHBITS - 1 ) || ( cfg -> g_w > 0 || cfg -> g_width || cfg -> g_height == VPX_HIGHBITDEPTH ) { ctx -> cfg. g_width = cfg -> g_height ; if ( cfg -> g_pass == VPX_CODEC_PASS ) || ( cfg -> cfg -> g_width == VPX_PASS ) || ( int ) cfg -> g_width > cfg -> g_width || cfg -> cpi -> initial_height == VPX_HIGHBITDEPTH ) force_width = 1 ; } else if ( cfg -> g_width == VPX,0
331,"<S2SV_ModStart> =='<S2SV_blank>') { input ++ ; } <S2SV_ModEnd> ptr = strchr <S2SV_ModStart> off ) ) { <S2SV_ModStart> ) ; } } <S2SV_ModStart> ) ) ) { <S2SV_ModStart> ""Unknown <S2SV_blank> filesystem <S2SV_blank> type\\n"" ) ; } <S2SV_ModStart> offset ) ) { <S2SV_ModStart> input ) ; }",1
332,"<S2SV_ModStart> inode ) ; struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> ; if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",1
333,<S2SV_ModStart> key * keyring ; if ( new -> thread_keyring ) return 0,1
334,<S2SV_ModStart> int ret = - 1 <S2SV_ModEnd> ; if (,0
335,"<S2SV_ModStart> orig ) ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; <S2SV_ModStart> mrb_io_alloc ( mrb <S2SV_ModEnd> ) ; DATA_TYPE",1
336,<S2SV_ModStart>. key_key = NULL <S2SV_ModEnd> ; if (,0
337,<S2SV_ModStart> cpi ) { const VP9_COMMON * const cpi = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> common ; <S2SV_ModStart> -> common ; vp9_encode_fp = & cpi -> oxcf. <S2SV_ModStart> ; vp9_z_quant_fp = ( cpi -> oxcf. <S2SV_ModStart> ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. pass == 2 ) { vp9_irqp9_set_quant <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ; } },0
338,"<S2SV_ModStart> return res ; res = utee_param_to_param ( utc, <S2SV_ModEnd> param, callee_params <S2SV_ModStart>, callee_params ) ; if ( res!= TEE_SUCCESS ) return res",1
339,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; const struct x86_emulate_ops * ops = ctxt -> ops ; struct x86_emulate_ops * ops = ctxt -> ops -> cpl ( ctxt ) ; if ( ctxt -> ops!= X86EMUL_MODE_PROT64 ) ops -> get_segment ( ctxt, & old_desc, & old_desc, NULL, VCPU_SREG_CS ) <S2SV_ModEnd> ; rc = <S2SV_ModStart> return rc ; rc = __load_segment_descriptor <S2SV_ModEnd> ( ctxt, <S2SV_ModStart> sel, VCPU_SREG_CS, cpl, false, & old_desc ) ; if ( rc!= X86EMUL_CONTINUE <S2SV_ModEnd> ) return X86EMUL_CONTINUE <S2SV_ModStart> return X86EMUL_CONTINUE ; rc = assign_far ( ctxt, ctxt ) ; if ( rc!= X86EMUL_CONTINUE <S2SV_ModEnd> ) return rc",0
340,<S2SV_ModStart> -> band = av_calloc <S2SV_ModEnd> ( reslevel -> <S2SV_ModStart> -> prec = av_calloc <S2SV_ModEnd> ( reslevel ->,1
341,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
342,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
343,<S2SV_ModStart> info = info ; if ( info!= 0 ) return - EPERM <S2SV_ModEnd> ; } <S2SV_null>,0
344,"<S2SV_ModStart> * p_tx0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdx, <S2SV_ModEnd> p_image -> x0 <S2SV_ModStart> * p_tx1 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdx, <S2SV_ModEnd> p_tx1 = ( OPJ_INT32",0
345,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * fname <S2SV_ModStart> char * fname <S2SV_ModEnd> * out, <S2SV_ModStart> char * fname = create_output_name ( fname ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) fname = out ; if ( out == '/' || p [ 2 ] == '\\\\' || p [ 2 ] == '\\\\' || ( outname == '/' ) ) { fprintf ( out, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> name: <S2SV_blank> %s\\n"", out ) ; return out ; } <S2SV_ModEnd> for ( out : <S2SV_ModStart>, fname ) <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; } } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
346,<S2SV_ModStart> ; zval * retval = NULL ; zval <S2SV_ModStart> return retval ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ; retval = php_var_var (! retval <S2SV_ModEnd> ) ; } <S2SV_ModStart> return retval ; } <S2SV_ModEnd> if (!,0
347,<S2SV_ModStart> goto __err ; tu -> qhead = tu -> qtail = tu -> qused = 0 ;,1
348,<S2SV_ModStart> ++ ) { if (! zfound ) break ;,0
349,<S2SV_ModStart>. get_frame ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },0
350,"<S2SV_ModStart> == 0 ) if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; } else <S2SV_ModStart> { uschar * hn ; if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; }",1
351,<S2SV_ModStart> info = info ; if ( info!= 0 ) return - EPERM <S2SV_ModEnd> ; } <S2SV_null>,0
352,"<S2SV_ModStart> -> off = strtoull <S2SV_ModEnd> ( p, <S2SV_ModStart> -> filesize = strtoull <S2SV_ModEnd> ( slash +",1
353,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> maxw, max, offx, loopmaxw, loopmaxh ; size_t i <S2SV_ModEnd> ; upb = <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> maxw = ( size_t <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> goto fails ; loopmaxw = img -> comps [ 0 ]. w ; loopmaxw = img -> comps [ 0 ]. w ; loopmaxw = img -> comps [ 0 ]. w ; loopmaxw = img -> comps [ 0 ]. w ; loopmaxw = img -> comps [ 0 ]. w ; loopmaxw = img -> comps [ 0 ]. w ; loopmaxw = img -> comps [ 1 ]. w ; d2 = img -> comps [ 0 ]. w",0
354,"<S2SV_ModStart> * state, fmode_t state, fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> ( state == fmode <S2SV_ModEnd> ) { atomic_set_mode <S2SV_ModStart> ( state, fmode <S2SV_ModEnd> ) ; }",0
355,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; ssh_dispatch_set ( ssh, SSH2_MSG_KEXINIT, NULL ) ;",1
356,"<S2SV_ModStart> { assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\"" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
357,<S2SV_ModStart> read_info ) ; <S2SV_ModEnd> if ( EOFBlob,1
358,"<S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; if <S2SV_ModStart> ( ltest, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( ltest, ""%511[^\\r\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( ltest, ""%511[^\\n]"" <S2SV_ModEnd> ) ; if",0
359,<S2SV_ModStart> intf ) { <S2SV_ModEnd> if ( cdc_ncm_select_altsetting <S2SV_ModStart> - ENODEV ; return <S2SV_ModEnd> cdc_ncm_bind_common ( dev <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
360,"<S2SV_ModStart> ; if ( memset ( vq, 0, sizeof ( vt ) ) )",0
361,<S2SV_ModStart> ) { return 0 <S2SV_ModEnd> ; } if,0
362,"<S2SV_ModStart>, e -> elems, e ->",1
363,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
364,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",0
365,<S2SV_ModStart> q ) { mutex_lock ( & q -> timer_mutex ) ; <S2SV_ModStart> snd_seq_timer_close ( q ) ; mutex_unlock ( & q -> timer_mutex,1
366,"<S2SV_ModStart> = 0 ; unsigned int i_blks ; unsigned int error ; <S2SV_ModStart> = 0 ; error = gfs2_map. b_map ; if ( unlikely ( unlikely ( error ) ) ) return error ; error = gfs2_init ( & bh_map ) ; if ( unlikely ( error ) ) { error = gfs2_init ( & b_map -> b_map. b_map ) ; if ( unlikely ( error ) ) return error ; error = set_buffer_map ( & b_map, & b_map, 0 ) ; if ( unlikely ( error ) ) { gfs2_init_map ( & b_map. b_map. b_map ) ; if ( unlikely ( b_map ) ) { error = gfs2_map. b_map. b_map. b_map. b_map. b_map. b_map. b_map. b_map. b_map. b_map ) ; if ( unlikely ( error ) ) { error = gfs2_map. b_map. b_map. b_map. b_map. b_map. b_map. b_map. b",0
367,<S2SV_ModStart> VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; if ( load -> error ) return ( NULL <S2SV_ModStart> -> real ) || <S2SV_ModEnd> vips_foreign_pipelinev ( load,0
368,"<S2SV_ModStart>, name, NULL, <S2SV_ModEnd> ) ; }",0
369,<S2SV_ModStart> ; if (! retval ) <S2SV_ModEnd> retval = context,1
370,<S2SV_ModStart> ) ; return ret <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>,0
371,<S2SV_ModStart> service_name_tlv_length ) ; if (! service_name_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if (! service_tlv ) { err = - ENOMEM ; goto error_tlv ; },0
372,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return NULL ;,0
373,<S2SV_ModStart> * get_frame ( vpx_codec_alg_priv_t * ) <S2SV_ModEnd> ; if (,0
374,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ctx,0
375,"<S2SV_ModStart> ( interface, EINVALID <S2SV_ModEnd> ) ; }",0
376,<S2SV_ModStart> ; if ( struct ip_options_rcu * inet_opt &&,0
377,<S2SV_ModStart> len ; } ND_TCHECK_32BITS <S2SV_ModEnd> ( p + <S2SV_ModStart> p + 2 <S2SV_ModEnd> ) ; ND_PRINT,1
378,<S2SV_ModStart> 0 ; } if ( unlikely ( IPCB ( skb ) -> opt. optlen ) ) skb_dst_force ( skb ) ; else,1
379,<S2SV_ModStart> private ) { struct skcipher_tfm * tfm = private ; crypto_free_skcipher ( tfm -> skcipher ) ; kfree ( tfm <S2SV_ModEnd> ) ; },1
380,<S2SV_ModStart> bprm ) { <S2SV_ModEnd> int retval ; <S2SV_ModStart> int retval ; bprm_fill_uid ( bprm ) ; <S2SV_ModEnd> retval = security_bprm_set_creds,1
381,"<S2SV_ModStart>, nq, ncount <S2SV_ModEnd> ) ; if",0
382,<S2SV_ModStart> ; dlen -= 3 <S2SV_ModEnd> ; for (,0
383,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
384,<S2SV_ModStart> : 1 ; ( void ) flags ;,0
385,<S2SV_ModStart> - EOPNOTSUPP ; msg -> msg_namelen = 0 ; <S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( msg,0
386,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct skb ) ) return 0 ; if (,0
387,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; return",0
388,"<S2SV_ModStart> bp, len ) ; break ; case ETHERTYPE_TEB : ether_print ( ndo, bp, len <S2SV_ModStart> ndo_snapend - bp <S2SV_ModEnd>, NULL,",1
389,"<S2SV_ModStart> ; } } if ( tile_buffsize < 0 || tile_buffsize > 0xFFFFFFFFFFFFU - 3 ) { TIFFError ( ""Integer <S2SV_blank> overflow <S2SV_blank> too <S2SV_blank> large"" ) ; return 0 ; }",0
390,<S2SV_ModStart> O_APPEND | O_CREAT | O_NOFOLLOW,1
391,<S2SV_ModStart> dev ) { <S2SV_ModEnd> int err = <S2SV_ModStart> err ; } <S2SV_ModEnd> return err ;,0
392,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> -> nd_num ) { ret = <S2SV_ModEnd> - EBUSY ; <S2SV_ModStart> - EBUSY ; goto out ; } <S2SV_ModStart> ( ret ) goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> nd_num ; } ret = count ; out : o2nm_unlock_subsystem ( ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>,1
393,<S2SV_ModStart> ( fp [ 1 ] <S2SV_ModEnd> ) ; if,0
394,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
395,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
396,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
397,<S2SV_ModStart> return - E_NOTHANDLED ; if ( ninst == 0 ) return - E_INVALID,1
398,"<S2SV_ModStart> nscp, len <S2SV_ModEnd> ) ; return",0
399,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
400,"<S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> p + offset <S2SV_ModEnd>, tim.",0
401,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",0
402,<S2SV_ModStart> ( ) ; if (! tbuf ) { return NULL ; },1
403,"<S2SV_ModStart> -> user, <S2SV_ModEnd> err ) { <S2SV_ModStart> return - EINVAL ; } <S2SV_ModEnd> if (!",0
404,<S2SV_ModStart> ; unsigned long flags ; <S2SV_ModEnd> if (! <S2SV_ModStart> return - 1 <S2SV_ModEnd> ; default :,0
405,<S2SV_ModStart> ) break ; if (,0
406,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> rowstride ) { if (! context ||! rowstride == 0 ) return FALSE ; if (! <S2SV_ModStart>, rowstride ) ) ) return FALSE <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>",0
407,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
408,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS,1
409,<S2SV_ModStart> return ( ( ( <S2SV_ModStart> ) / 8 ) * GetPSDPacketSize ( image ),1
410,"<S2SV_ModStart> } return TEMP_FAILURE_RETRY ( <S2SV_ModStart> dev, 0 )",0
411,<S2SV_ModStart> bMasterInterface0 ) ; if (! pcu -> ctrl_intf ) return - EINVAL ; <S2SV_ModStart> bSlaveInterface0 ) ; if (! pcu -> data_intf ) return - EINVAL ;,1
412,"<S2SV_ModStart> const char * devname = kstrdup ( dev_name ( & <S2SV_ModEnd> d -> udev <S2SV_ModStart> udev -> dev ), GFP_KERNEL ) ; const char * drvname = d -> name <S2SV_ModStart> d ) ; kfree ( dev ) ;",0
413,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpx ) <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpy )",1
414,<S2SV_ModStart> target_enc ) { return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION <S2SV_ModEnd> ; } else,1
415,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static MagickBooleanType <S2SV_ModEnd> unsigned char <S2SV_ModStart> index, image, SetPixelChannels ( image, image, image -> columns, image -> colormap, q, image -> columns, image -> columns, ssize_t ) ; if ( status == MagickFalse ) { SetPixelInfo ( image, image, image -> columns, ssize_t ) ; if ( status == MagickFalse ) { SetPixelViaPixelInfo ( image, exception, image -> colors, exception ) ; return ( MagickFalse ) ; } else <S2SV_ModEnd> return ( <S2SV_ModStart> ) ; } if ( status == MagickFalse ) { status = SetPixelChannels ( image, exception, exception ) ; return ( image -> colormap + ( image -> colors, image -> colormap + ( image -> colors ) ; if ( status == MagickFalse ) SetPixelViaPixelInfo ( image, image -> colors, image -> columns, image -> columns, image -> colormap + 1 ) ; if ( status == MagickFalse ) { SetPixelViaPixelInfo ( image, image, image -> colormap + (",0
416,"<S2SV_ModStart> u_char * tptr, const u_int length ) { u_int length ; u_int length ; if ( length < 1 ) { ND_PRINT ( ( ndo, ""[\\n]"" ) ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> case AFNUM_INET : if ( length!= 4 ) { ND_PRINT ( ( ndo, ""\\n\\n\\t <S2SV_blank> Network <S2SV_blank> Address <S2SV_blank> (invalid <S2SV_blank> %u)"", length - 1 ) ) ; hexdump = TRUE ; break ; }",0
417,"<S2SV_ModStart> ; u64 msr_data, rcx, rdx <S2SV_ModStart> = X86EMUL_MODE_PROT64 ; rcx = reg_read ( ctxt, VCPU_REGS_RDX ) ; rdx = reg_read ( ctxt, VCPU_REGS_RDX ) ; rdx = reg_read ( ctxt, VCPU_RDX ) ; if ( is_noncanonical_address ( rdx ) ) return emulate_noncanonical_address ( ctxt, VCPU_REGS_RDX ) ; <S2SV_ModStart> VCPU_RCX ) ; if ( rcx!= X86EMUL_CONTINUE ) return X86EMUL_CONTINUE <S2SV_ModEnd> ; rcx = <S2SV_ModStart> VCPU_REGS_RSP ) ; <S2SV_ModEnd> return 0 ;",0
418,<S2SV_ModStart> dev ) ; ssize_t len ; device_lock ( dev ) ; len = <S2SV_ModEnd> sprintf ( buf <S2SV_ModStart> driver_override ) ; device_unlock ( dev ) ; return len ;,1
419,"<S2SV_ModStart> BIO * tmpout ; tmpout = cms_get_text_bio ( in, flags ) ; if (! tmpout ) { CMSerr ( CMS_F_CMS_CMS_CONTENT, ERR_MALLOC_FAILURE ) ; goto err ; } if ( i < 0 ) goto err ; if ( flags & BIO_TYPE_MALLOC_FAILURE ) { if ( BIO_get_type ( in, buf, flags ) == BIO_TYPE_CONTINVAL ) goto err ; } if ( flags ) { if ( flags & CMS_CMS_CONTENT ) goto err ; } if ( i < 0 ) goto err ; if ( i ) { if ( BIO_get_text ( in, i )!= 0 ) goto err ; break ; } <S2SV_ModEnd> if ( flags <S2SV_ModStart> CMS_TEXT ) { <S2SV_ModEnd> if (!",0
420,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( retval == 0 ) rs. enc_tkt_reply -> flags |= TKT_FLG_PRE_AUTH ;,1
421,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_tree <S2SV_ModEnd> prob ( const <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> prob, vpx_tree",0
422,"<S2SV_ModStart> = ""/tmp"" ; # ifdef HAVE_MKDTEMP tmp_dir = rc_dir ; # endif",0
423,<S2SV_ModStart> = 0 ; size_t pathlen = 0 ; <S2SV_ModStart> case AF_UNIX : pathlen = sizeof ( struct sockaddr_path * pathlen <S2SV_ModEnd> ) ; if,0
424,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
425,<S2SV_ModStart> return 0 ; if ( len < sizeof ( entry ) ) return - EINVAL ; if (,0
426,"<S2SV_ModStart> ) { struct hugepage_subpool * spool = subpool_vma ( vma ) ; struct <S2SV_ModStart> page * spool = hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> ) ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> page ) ; hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> ) ; vma_commit_reservation",0
427,"<S2SV_ModStart> filegen_string ) ; if ( NULL == filegen ) { msyslog ( LOG_ERR, ""stats <S2SV_blank> %s <S2SV_blank> unrecognized"", filegen_string ) ; continue ; } <S2SV_ModStart> filegen_file ) ; if ( NULL == filegen ) { msyslog ( LOG_ERR, ""filegen <S2SV_blank> category <S2SV_blank> \'%s\' <S2SV_blank> unrecognized"", filegen_file ) ; continue ; }",1
428,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; timer_set_state",1
429,"<S2SV_ModStart> int input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> 1, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> ] = ( tran_low_t <S2SV_ModEnd> * input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x1 = ( tran_low_t <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] ; tran_low_t ) <S2SV_ModEnd> x7 = ( <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 5 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tr",0
430,<S2SV_ModStart> flags ) { if ( flags & CAP_SUPPORTED ) { # endif <S2SV_ModStart> flags ) ; # endif,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_block_mode ( const,0
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
433,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
434,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> AVINDEX_KEYFRAME ) ; },1
435,"<S2SV_ModStart> ( ndo, 1 <S2SV_ModEnd> ) ; if",0
436,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, & next ) ) { ret = - ENOENT ; goto out ; } if (! fc_may_access ( fc -> pid, cgroup, NULL, O_RDWRONLY ) ) { ret = - ENOENT ; goto out ; } if (! <S2SV_ModEnd> ) { ret <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) ret = - EINVAL ; goto out ; } if (!",0
437,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flag & CL_UNPRIVILEGED <S2SV_ModStart> & CL_UNPRIVILEGED ) { mnt -> mnt. mnt_flags |= MNT_LOCK_ATIME ; if <S2SV_ModEnd> ( mnt -> <S2SV_ModStart> mnt_flags & MNT_NOEXEC <S2SV_ModEnd> ) mnt -> <S2SV_ModStart> ; if ( mnt -> mnt. mnt_flags & MNT_NODEV ) mnt -> mnt. mnt_flags |= MNT_LOCK_NODEV ; if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOSUID ; if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOEXEC ; } if (,0
438,<S2SV_ModStart> rds_loop_transport ; } <S2SV_ModEnd> } conn ->,1
439,<S2SV_ModStart> * rsize >= 112 <S2SV_ModEnd> && rdesc [,1
440,<S2SV_ModStart> if ( ( ( <S2SV_ModStart> ) < bodyLength ) || ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ),1
441,<S2SV_ModStart> ( likely ( serio <S2SV_ModEnd> &&! filtered,1
442,"<S2SV_ModStart>! er ) { ND_TCHECK ( <S2SV_ModEnd> dp [ 0 <S2SV_ModStart> 0 ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> c <S2SV_blank> %04x"", EXTRACT_32BITS ( & dp [ 0 ] ) ) ) ; } <S2SV_ModEnd> return ; case",1
443,"<S2SV_ModStart> * newName, int newLen, <S2SV_ModStart> * udfName, int udfLen, <S2SV_ModEnd> uint8_t * fidName <S2SV_ModStart> ( newIndex > newIndex <S2SV_ModEnd> ) newName [",0
444,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE mode_segs ( VP9_COMMON * cm, TileInfo * cm, <S2SV_ModEnd> tile_data, <S2SV_ModStart> * mi_col, TileInfo * mi_cols = mi_cols ( mi_col, mi_col, mi_col, mi_col, mi_col, mi_cols * mi_col, bsize ) ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
445,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! c ->,0
446,<S2SV_ModStart> == 0 ) <S2SV_ModEnd> return 0 ;,0
447,"<S2SV_ModStart> * s ; const unsigned char * p = sigbuf ; unsigned char * derlen = NULL ; int derlen = - 1 ; <S2SV_ModStart> s, & p <S2SV_ModEnd>, siglen ) <S2SV_ModStart> == NULL ) goto err ; derlen = i2d_SIG ( der, derlen ) ; if ( derlen!= siglen || memcmp ( derlen > derlen ) ) { OPENSSL_free ( der, der ) ; OPENSSL_cleanse ( derlen ) ; OPENSSL_free ( derlen ) ; }",0
448,"<S2SV_ModStart> NULL ) ; if (! _gdImageWBMPCtx <S2SV_ModEnd> ( im, <S2SV_ModStart>, out ) ) { <S2SV_ModEnd> rv = gdDPExtractData <S2SV_ModStart> size ) ; } else { rv = NULL ; }",0
449,<S2SV_ModStart> ) ; } if ( bprm -> interp!= bprm -> filename ) kfree ( bprm -> interp ) ;,1
450,<S2SV_ModStart> ; oe_name_len = 0 ; struct oe_sockaddr * oe_sockaddr * oe_name_len <S2SV_ModStart> ; if (! OE_RAISE_ERRNO ( OE_EINVAL ) | OE_EINVAL ) ; if ( addrlen < 0 ) { if ( <S2SV_ModStart> goto out ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } <S2SV_ModEnd> if (!,0
451,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
452,"<S2SV_ModStart> ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> image <S2SV_blank> dimensions"" ) ; goto done ; }",1
453,<S2SV_ModStart> ctx ) { memcpy <S2SV_ModEnd> ( x ->,0
454,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
455,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
456,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
457,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> cpi_frame_parallel_decode ( ctx <S2SV_ModStart> flags ) { # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> common ) { # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> flags & VP9_COMMON * sizeof ( ctx ) ) { vpx_free ( cpi -> common ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> return NULL ; } <S2SV_ModEnd> } } <S2SV_null>,0
458,<S2SV_ModStart> ) ; } fuse_conn_put ( & cc -> fc ) ;,1
459,"<S2SV_ModStart> ( code ) { * status = ""DECODE_PA_S4U_USER"" ; return code ; } <S2SV_ModEnd> code = verify_s4u_checksum",0
460,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
461,<S2SV_ModStart> cur_pic. field_picture <S2SV_ModEnd> ) return 0,1
462,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> uint32_t <S2SV_ModEnd> hdr. data <S2SV_ModStart> size ) { int ret <S2SV_ModEnd> ; ret = <S2SV_ModStart> sz_inc ) ; goto out <S2SV_ModEnd> ; } <S2SV_null>,0
463,<S2SV_ModStart> buf ) ) { return 0 ; } <S2SV_ModEnd> ext_block = (,1
464,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,1
465,<S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },0
466,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
467,"<S2SV_ModStart> = hmi_data ; uint32_t data_siz ; <S2SV_ModStart> += hmi_tmp ; if ( hmi_track_offset [ i ] >= hmi_tmp ) { _WM_GLOBAL_ERROR ( __FUNCTION__, WM_ERR_NOT_HMI, ""file <S2SV_blank> too <S2SV_blank> short"", data_siz, hmi_siz, hmi_siz, hmi_siz, hmi_siz, hmi_siz, hmi_tmp, data_siz, hmi_siz, hmi_siz, hmi_data <S2SV_ModEnd> ) ; } <S2SV_ModStart> += 4 ; hmi_tmp += 4 ; <S2SV_ModStart> += 4 ; hmi_tmp ; if ( hmi_track_size < hmi_size ) { _WM_GLOBAL_ERROR ( __LINE__, WM_ERR_ERR_NOT_HMI, ""file <S2SV_blank> too <S2SV_blank> short"", data_siz, hmi_siz, data_siz, hmi_siz, hmi_siz, data_siz, hmi_siz, hmi_siz, h",0
468,<S2SV_ModStart> -> id ; haddr -> hci_channel = 0 ;,1
469,<S2SV_ModStart> -> i_iget5_offset ; fh16 [ 3 ] = 0 ;,1
470,"<S2SV_ModStart> ( kdc_active_realm, client. princ <S2SV_ModEnd>, request ->",1
471,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> = S64_MAX ; <S2SV_ModEnd> if ( src_known,1
472,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int bit_depth ; const <S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const int <S2SV_ModStart> ) ; const vp9_set_filter_level ( q, cm -> bit_depth <S2SV_ModStart> else if ( q <S2SV_null> <S2SV_null>",0
473,"<S2SV_ModStart> ( ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL ) )",0
474,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
475,"<S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, MAXALIGN",0
476,<S2SV_ModStart> void usage_exit ( void,1
477,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
478,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
479,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
480,"<S2SV_ModStart>. data_sz, res <S2SV_ModEnd>, vpx_codec_alg_priv_t * <S2SV_ModStart>, data ), res <S2SV_ModEnd> ; if (",0
481,<S2SV_ModStart> ; if ( * value == 0 ||,1
482,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inode -> i_len <S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ; if (,0
483,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
484,"<S2SV_ModStart> ; if ( snpal == 6 ) ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> SNPA <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> %s"", snpal, etheraddr_string ( ndo, snpal ) ) ) ; else ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> SNPA <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> %s"", snpal, snpal, netal, snpal ) ) ) ; if ( ndo, snpal ) ND_PRINT ( ( ndo, snpal ) ) ) ; else ND_PRINT ( ndo, ""\\n\\n\\n\\n\\t <S2SV_blank> <S2SV_ModEnd> ) ; break",0
485,<S2SV_ModStart> { sprintf ( outputbuffer <S2SV_ModEnd> ) ; },0
486,<S2SV_ModStart> } else { return false ; } else if ( r -> CRm == 0 && r -> CRm == 0 ) { return false ; } else if (,0
487,<S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; x <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval ; lval = * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval ) ; convert_long ( & lval ) ; <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { rect. y = <S2SV_ModStart> tmp ) ; } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval ) ; <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { rect. y = <S2SV_ModStart> tmp ) ; } <S2SV_ModStart> FAILURE ),0
488,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
489,<S2SV_ModStart> SQL_DROP ) ; <S2SV_ModEnd> return 0 ;,1
490,"<S2SV_ModStart> ; r = __copy_from_user <S2SV_ModEnd> ( data,",1
491,"<S2SV_ModStart>, * q <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\nThis <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\"" <S2SV_ModEnd> ) ; exit <S2SV_ModStart> ; isspace ( ( unsigned char ) <S2SV_ModStart> && isspace ( ( unsigned char ) <S2SV_ModStart> ; isspace ( ( unsigned char ) <S2SV_ModStart> && isdigit ( unsigned char ) <S2SV_ModStart> && isdigit ( ( unsigned char ) <S2SV_ModStart> && isdigit ( ( unsigned char ) <S2SV_ModStart> && isdigit ( unsigned char ) <S2SV_ModStart> && isdigit ( ( unsigned char ) <S2SV_ModStart> && isdigit ( ( unsigned char ) <S2SV_ModStart> && isdigit ( ( unsigned char ) <S2SV_ModStart> && isdigit ( unsigned char ) <S2SV_ModStart> && isdigit ( ( unsigned char ) <S2SV_ModStart> && isdigit ( ( unsigned char ) <S2SV_ModStart> && isdigit ( ( unsigned char ) <S2SV_ModStart> && isdigit ( unsigned char )",0
492,<S2SV_ModStart> = 0 ; info -> port = NULL ;,1
493,<S2SV_ModStart> -> ctx. <S2SV_ModEnd> pmu = pmu,1
494,"<S2SV_ModStart> iovec * iovec, struct iov_iter * iter ) { if ( len > MAX_RW_COUNT ) len = MAX_RW_COUNT ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> = 1 ; iov_iter_init ( iter, rw, iovec, * nr_segs, len ) ;",1
495,<S2SV_ModStart> ext4_group_t flex_group_group ; unsigned <S2SV_ModStart> -> s_log_groups_groups_per_flex ; if ( sbi -> s_log_groups_groups_per_flex < 1 || sbi -> s_log_groups_per_groups_groups_group_groups_per_flex < 1 ) { sbi -> s_groups_groups_per_log_groups_groups_group = 1 ; return 1 ; } <S2SV_ModEnd> flex_log_groups_groups_per_flex ;,0
496,<S2SV_ModStart> ( unlikely ( chunk -> pdiscard ) ) return 0 ; if ( unlikely (,1
497,<S2SV_ModStart> i ) { if ( n < 1 ) return 0 ; <S2SV_ModEnd> } for (,0
498,"<S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; if (",0
499,<S2SV_ModStart> <= w - ( int ),1
500,<S2SV_ModStart> callback_args -> forward_matches ; assert ( match_offset + match_length <= callback_args -> data_size ),1
501,<S2SV_ModStart> options. disable_forwarding && use_privsep,1
502,"<S2SV_ModStart> { if ( length > SMKTREE_DECODE_MAX_RECURSION ) { av_log ( NULL, AV_LOG_ERROR, ""Maximum <S2SV_blank> tree <S2SV_blank> recursion <S2SV_blank> level <S2SV_blank> exceeded.\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",1
503,<S2SV_ModStart> err ; } if ( m -> msg_name ),1
504,"<S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_seq, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""args\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> from <S2SV_blank> stmt"" ) ; return 1 ; } else <S2SV_ModEnd> { int res <S2SV_ModStart> ; res = obj2ast_int ( PyId_t, arena ) ; res <S2SV_ModEnd> ; res = <S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_ty, & tmp ) < 0 ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> field <S2SV_blank> from <S2SV_blank> \\"" ) ; return 1 ; } if ( tmp == Py_None ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> from <S2SV_blank> field <S2SV_blank> \\"" ) ; return 1 ; } else { int res <S2SV_ModEnd> ; res = <S2SV_ModStart> tmp, & PyId_ty <S2SV_ModEnd>, arena ) <S2SV_ModStart> ( obj, & PyId_ty <S2SV_ModEnd>, arena ) <S2SV_ModStart> == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required",0
505,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if (,0
506,"<S2SV_ModStart> ""REPLY_ADD_STA <S2SV_blank> PASSED\\n"" ) ; ret = iwl_sta_ucode_activate ( priv, sta_id ) <S2SV_ModEnd> ; break ;",1
507,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
508,"<S2SV_ModStart> ""a\\0x\\0x\\0"" ) ; assert_true_rule_blob ( ""\\\\b\\0"" ) ; assert_true_rule_blob ( ""\\0"" ) ;",0
509,"<S2SV_ModStart> & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; if ( free_func ) { if ( free_func ( hashbin -> hb_type & HB_LOCK ) spin_unlock_irqrestore ( & hashbin -> hb_type, flags ) ; if ( free_func ) { spin_unlock_irqrestore ( & hashbin -> hb_type, hashbin -> hb_spinlock, flags ) ; } <S2SV_ModEnd> if ( hashbin <S2SV_ModStart> & HB_LOCK ) spin_unlock_irqrestore ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModEnd> if ( hashbin <S2SV_ModStart> & HB_LOCK ) spin_unlock_irqrestore ( & <S2SV_ModStart> flags ) ; <S2SV_ModEnd> if ( hashbin",0
510,<S2SV_ModStart> EPERM ; } if ( ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NODEV ) &&! ( mnt -> mnt. mnt_flags & MNT_LOCK ) ) return - EPERM ; if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOSUID ) &&! ( mnt -> mnt_flags & MNT_LOCK_NOSUID ) ) return - EPERM ;,0
511,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct sockaddr_copy_info <S2SV_ModStart> skb ) { int copied ; <S2SV_ModEnd> msg -> msg_iov <S2SV_ModStart> msg -> msg_flags |= sizeof ( skb ) ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> sock_len ) ; } <S2SV_ModEnd> if ( sock <S2SV_ModStart> msg -> msg_namelen ) { memcpy ( sock, & PACKET_SKB_CB ( skb ), 0 <S2SV_ModEnd> ) ; }",0
512,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ L ],0
513,"<S2SV_ModStart> ( serial -> num_bulk_out <S2SV_ModEnd> < 2 ) <S2SV_ModStart> < 2 ) { dev_err ( & serial -> interface -> dev, ""missing <S2SV_blank> bulk <S2SV_blank> out <S2SV_blank> endpoints\\n"" ) ; return - ENODEV ; } <S2SV_ModEnd> port = serial",1
514,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static table_chunk = sizeof ( CS64Chunk ) <S2SV_ModStart> struct CS64Chunk s64_riff_chunk ) ; table_length = sizeof ( CS64Chunk ) ; if ( cs64Chunk ) ) { error_line ( CS64Chunk ) ; cs64_chunk. ds64_chunk = sizeof ( CS64Chunk ) ) ; cs64_chunk. ds64_chunk. ck ) ; ds64 = table_length * sizeof ( CS64Chunk ) ; if ( cs64_chunk ) ) { cs64_chunk. ck_chunk. table_length = sizeof ( CS64Chunk ) ) ; cs64_chunk. table_length = total_bytes ; cs64_chunk. table_length = sizeof ( CS64Chunk ) ) ; } else if ( cs64_chunk. table_length > sizeof ( CS64_chunk ) ) { error_line ( ""%s"", CS64_riff_chunk ) ; return FALSE ; }",0
515,"<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> msg_name ; if ( msg_name, sizeof ( flags ) ) <S2SV_ModStart> -> msg_name ; <S2SV_ModEnd> if (!",0
516,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int b_blocks <S2SV_ModStart> int bhdr ; int bsize = sizeof ( struct bhdr ) { int i_blocks = 0 ; <S2SV_ModStart> = b_blocks [ i ]. b_blocks = 0 ; <S2SV_ModStart> -> b_data. b_blocks [ i ]. b_blocks = 0 ; <S2SV_ModStart> int nb_blocks [ i ]. b_blocks = 0 ; if ( i ++ ) { if ( nb_blocks >= max_chunk_size ) { map [ i ]. b_data [ i ]. b_blocks = 0 ; break ; } <S2SV_ModStart> = 0 ; if ( i ++ ) { <S2SV_ModStart> -> b_data [ i ]. b_map [ i ]. b_map [ i ]. b_blocksize_data [ i ]. bsize << i ]. b_blocks ++ ; if ( i ]. b_blocks >= max_blocks ) { int bsize = 0 ; ip_data [ i ]. b_blocks = 0 ; ip_data [ i ]. b_blocksize ; ip_data [ i ]. bsize,0
517,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
518,<S2SV_ModStart> return FALSE ; if (! rc && <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) return FALSE ; } if (! rc ) return FALSE ;,0
519,"<S2SV_ModStart> -> dict ) && xmlDictOwns ( ctxt -> dict, value )",1
520,"<S2SV_ModStart> ; if ( is_link ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> %s <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> ; if ( fname ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> ; } } } free ( fname ) ;",0
521,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_lp ( struct <S2SV_ModStart> * ext4_hdr ; <S2SV_ModEnd> struct xdr_hdr_len <S2SV_ModStart> * attr, attr, xdr, u_len <S2SV_ModEnd>, & xdr <S2SV_ModStart> ; if ( <S2SV_ModEnd> == NULL ) <S2SV_ModStart> + 1 ) return - EINVAL ; <S2SV_ModEnd> size = xdr_len <S2SV_ModStart> goto out ; <S2SV_ModEnd> mem = xdr_len <S2SV_ModStart> += req_len ; if ( xdr_len == 0 ) return ERROR ;",0
522,<S2SV_ModStart> ; if ( sf -> sf!= NULL ) return 0,0
523,<S2SV_ModStart> ( 1 ) <S2SV_ModEnd> ; return 0,0
524,<S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( &,0
525,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
526,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> len ; size_t <S2SV_ModStart> = 0 ; size_t end,0
527,"<S2SV_ModStart> int r ; struct range_data * clt <S2SV_ModEnd> ; size_t content_length <S2SV_ModStart> } else { <S2SV_ModEnd> if ( clt <S2SV_ModStart> NULL ) { range = & r -> range [ 0 ] ; <S2SV_ModEnd> if ( clt <S2SV_ModStart> NULL ) { range = & clt_range_range ( clt -> range [ 0 ] ) ; <S2SV_ModEnd> if ( clt_boundary <S2SV_ModStart> } else { range = & clt -> clt_range_range ( clt -> clt_length - 1, sizeof ( clt ) ) ; <S2SV_ModEnd> if ( nranges <S2SV_ModStart> range ) ) ) { range = & clt -> range [ 0 ] ; range = & range [ 0 ] ; range = & clt -> range [ 0 ] ; range = & clt -> clt_boundary ; range = & clt -> clt_boundary - 1 ; if ( nranges [ 1 ]. range [ 1 ] == NULL ) { range = & clt -> range [ 1 ] ; content_length = & r -> range [ 1 ]. range [ 1 ] ; for ( i = 0 ; i < nranges ; i ++ ) { range = & r -> clt_boundary ; i ;",0
528,"<S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_IS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR )!= 0 ) { if ( ( ( <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_TXR, KSZ8851_IS <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_ERR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_R, KSZ8851_IS <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_IER, KSZ8851_IS <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_TX_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ERR, KSZ8851_IS <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_TXR, KSZ8851_IER <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_IER, KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> (",0
529,"<S2SV_ModStart> cm, struct vpx_writer <S2SV_ModEnd> * wb, <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>",0
530,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
531,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
532,<S2SV_ModStart> tmp ) { goto softfail <S2SV_ModEnd> ; } case <S2SV_ModStart> ) ) { goto softfail <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; softfail : state -> offset = 0 ;,1
533,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
534,<S2SV_ModStart> flags ) { spin_lock ( & ctx -> cancel_lock ) ; <S2SV_ModStart> } } else { __timerfd_remove_cancel <S2SV_ModEnd> ( ctx ) <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> cancel_lock ) ;,1
535,"<S2SV_ModStart> ) ) ; if ( Curves [ i ] == NULL ) { _cmsFree ( ContextID, c16 ) ; return NULL ; } <S2SV_ModEnd> if ( c16",0
536,<S2SV_ModStart> { if (! dev_name ||,1
537,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",0
538,"<S2SV_ModStart> msg ) ; memcpy ( msg, sizeof ( * msg ) - sizeof ( * msg ) ) ; <S2SV_ModEnd> memcpy_fromio ( * msg <S2SV_ModStart> -> m_pdwGetRing ) ; memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m_pdwGetRing, sizeof ( * msg ) ) ; <S2SV_ModEnd> memcpy_fromio ( buf <S2SV_ModEnd> ) ; if",0
539,<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { efree ( replaced ) ; RETURN_FALSE ; },1
540,<S2SV_ModStart> ( err = NULL <S2SV_ModEnd> ; if (,0
541,"<S2SV_ModStart> ( ) ; alloc_array ( t1_array, strlen ( t1_line_array ) + strlen ( t1_array ) + strlen ( t1_array ) + strlen ( t1_line_array ) + 1, T1_BUF_SIZE",0
542,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> MACROBLOCK * xd <S2SV_ModEnd>, BLOCK * <S2SV_ModStart> xd ) { <S2SV_ModEnd> int mi_row, <S2SV_ModStart> xd, mi_row, mi_row, xd, bsize, bsize <S2SV_ModStart>, bsize, bsize, b_width, bsize, bsize, bsize, subsize ) ; if ( xd -> none == 0 ) break ; <S2SV_ModStart> MODE_INFO * xd = xd -> mi_row + mi_row, xd -> mi_row, b_row, xd -> mi_row, b_width ) ; if ( xd -> plane [ 0 ]. subsize == 0 && mi_row == BLOCK_SIZE ) { xd -> plane [ 0 ]. subsize = xd -> mi_row [ 0 ]. subsize ; xd -> plane [ 0 ]. subsize = xd -> mi_row + mi_row * mi_row, mi_row, b_cols ) ; if ( xd -> mi_row && mi_row >= mi_row && mi_row && mi_row >=",0
543,"<S2SV_ModStart> value ) ; if (! strcmp ( key, ""path"" ) && value && looks_like_command_line_option ( value ) ) data -> ret |= report ( data -> obj, data -> obj, FSCK_MSG_GITMODULES_PATH, ""disallowed <S2SV_blank> submodule <S2SV_blank> path: <S2SV_blank> %s"", value ) ;",0
544,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int64_t <S2SV_ModEnd> frame_size, int64_t <S2SV_ModStart> image_height ; int64_t <S2SV_ModEnd> height ; int64_t <S2SV_ModStart> plane_height ) { if ( s -> chunk_size > INT_MAX ) { av_assert0 ( s -> plane_log ( s -> width, AV_LOG_ERROR, ""Pixel"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ++ ) { if ( s -> data_ptr == VPX_CODEC_BLOCK_SIZE ) { av_log ( s -> plane_offset, AV_LOG_ERROR, ""Pixel"" ) ; return AVERROR_INVALIDDATA ; }",0
545,<S2SV_ModStart> cnt ) { ssize_t <S2SV_ModEnd> n ; assert,1
546,<S2SV_ModStart> ; __be16 type ; if ( NAPI_GRO_CB ( skb ) -> encap_mark ) goto out ; NAPI_GRO_CB ( skb ) -> encap_mark = 1,1
547,<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { return 0 ; } if (,1
548,<S2SV_ModStart> ( session ) &&! ( session -> sigval ),0
549,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,0
550,<S2SV_ModStart> -> u4_first_slice_in_pic = 1 <S2SV_ModEnd> ; ps_dec ->,0
551,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> = S64_MAX ; <S2SV_ModEnd> if ( src_known,0
552,<S2SV_ModStart> } if ( <S2SV_ModEnd> dentry -> name,0
553,<S2SV_ModStart> vfio_irq_set hdr ; size_t size ; uint32_t size ; <S2SV_ModStart> || hdr. count == U32_MAX / sizeof ( uint32_t ) || size == 0 ) return - EINVAL ; switch ( size ) { case VFIO_SET_DATA_MASK ; break ; case VFIO_SET_DATA_MASK ; default : size = sizeof ( uint32_t ) ; break ; case VFIO_SET_DATA_SIZE : size = sizeof ( uint32_t ) - EINVAL ; break ; case VFIO_SET_DATA_SET_DATA_NONE : size = sizeof ( uint32_t ) ; break ; case VFIO_IRQ_SET_SET_DATA_MASK ) ; break ; default : size = sizeof ( uint32_t ) ; default : size = sizeof ( uint32_t ) ; break ; default : size ; if ( U32_t ) return - EINVAL ; <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> if ( size,0
554,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ext4_has_inline_data ( inode,1
555,<S2SV_ModStart> -> filesize = UINT64_MAX <S2SV_ModEnd> ; s ->,1
556,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
557,"<S2SV_ModStart> char * in, size_t olen <S2SV_ModStart> += 4 ; if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ;",1
558,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
559,"<S2SV_ModStart> i ; size_t bytes, <S2SV_ModStart> ++ ) { bytes <S2SV_ModEnd> = min_t ( <S2SV_ModStart>, 0, bytes <S2SV_ModEnd> ) ; if",0
560,<S2SV_ModStart> & CP_RDESC_SWAPPED_MIN_MAX ) ) return rdesc ; if ( * rsize < 4,1
561,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int svc_ctx_frame_stats ( VP9_COMP <S2SV_ModStart> ) { int svc_ctx_log ( svc_ctx, svc_ctx, <S2SV_ModEnd> * ) <S2SV_ModStart> ; if ( svc_ctx -> svc_ctx_layers > 1 ) { svc_ctx -> spatial_layer_count = 2 ; svc_ctx -> svc_ctx -> temporal_layering [ i ] = 0 ; for ( i = 0 ; i < sizeof ( svc_ctx -> svc_frame_count ) svc_ctx -> svc_frame_count = 0 ; i ++ ) { svc_write_layer ( svc_ctx -> svc_ctx, svc_ctx -> svc_ctx -> svc_ctx -> number_temporal_layers, svc_layers ) ; for ( i = 0 ; i < VPX_CODEC_LOG_ERROR ; for ( i = 0 ; i < 2 ; i ++ ) { svc_log ( svc_ctx -> svc_frame_",0
562,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_rle_decode ( BYTE <S2SV_ModStart> 4 ) { if ( outSize < 4 ) return FALSE ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
563,<S2SV_ModStart> ; if ( screen == NULL ) return 0 ; if (,0
564,"<S2SV_ModStart> char * prefix, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * first_end ) { <S2SV_ModEnd> if ( * <S2SV_ModStart> == '\\\\' ) { <S2SV_ModStart> return NULL ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> == - 1 ) <S2SV_ModEnd> return 0 ; <S2SV_ModStart> if ( * end <S2SV_ModEnd> ) { * <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> == '\\0' ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) break ; } <S2SV_ModEnd> if ( *",0
565,"<S2SV_ModStart> * m, size_t <S2SV_ModEnd> bufsize ) { <S2SV_ModStart> * buf ; <S2SV_ModEnd> JAS_DBGLOG ( 100 <S2SV_ModStart> 100, ( 100 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ) ) { if",0
566,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
567,<S2SV_ModStart> </S2SV_null> <S2SV_null> <S2SV_null> static,0
568,<S2SV_ModStart> pcrypt_free ( struct aead_instance <S2SV_ModEnd> * inst ) <S2SV_ModStart> * ctx = aead_instance_ctx <S2SV_ModEnd> ( inst ),1
569,<S2SV_ModStart> = 0 ; if ( ptr == 0 ) break ; <S2SV_ModStart> length ) ; <S2SV_ModEnd> } return 0,0
570,"<S2SV_ModStart> } if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if (",1
571,<S2SV_ModStart> icmp6_hop_limit ) { if ( <S2SV_ModEnd> ra_msg -> icmp6_hop_limit <S2SV_ModStart> icmph. icmph. icmph. icmph. icmph. icmp6_hop_limit ) { if ( rt -> icmph. icmph. icmp6_hop_limit <S2SV_null>,0
572,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
573,<S2SV_ModStart> * up ; int ulen ; <S2SV_ModStart> rp ) ; ulen = xfrm_replay_state_esn_len ( up ) ; if ( up!= up -> replay_esn_esn ) return - EINVAL ;,0
574,"<S2SV_ModStart> int ret = proc_dointvec_minmax <S2SV_ModEnd> ( table,",1
575,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
576,<S2SV_ModStart> opj_calloc ( ( size_t ) ( <S2SV_ModStart> -> numlayers + 1U <S2SV_ModEnd> ) * l_step_l,0
577,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
578,"<S2SV_ModStart> ( kvm, 1 <S2SV_ModEnd> ) ; for",0
579,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE_INFO * cpi <S2SV_ModEnd>, MACROBLOCKD * <S2SV_ModStart> -> mb ; <S2SV_ModEnd> int mi_row, <S2SV_ModStart> -> mb ; int mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_col ) { VP9_COMMON * const tile = & tile_info -> mi_col ; MACROBLOCKD * const tile_info = & tile_info -> tile_info <S2SV_ModEnd> ; MODE_INFO * <S2SV_ModStart> MODE_INFO * * xd <S2SV_ModEnd> ; MODE_INFO * <S2SV_ModStart> mi_row, xd <S2SV_ModEnd>, mi_row, <S2SV_ModStart> mi_row, mi_row, xd <S2SV_ModEnd>, mi_row, <S2SV_ModStart> mi_row ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> mbmi_stride >= 0 && mi_row && mi_row!= BLOCK_8X8 ) { memset ( xd, mi_row, mi_row, mi_row, 0, mi_row, mi_row, 0, mi_row,",0
580,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",1
581,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
582,<S2SV_ModStart> } else { # ifdef UPNP_ENABLE_POST_WRITE <S2SV_ModStart> return HTTP_UNAUTHORIZED ; # else return HTTP_NOT_FOUND ; # endif,1
583,"<S2SV_ModStart> fd, NULL <S2SV_ModEnd> ) ; char <S2SV_ModStart> fd ) ; <S2SV_ModEnd> if (!",0
584,<S2SV_ModStart> blkg ) ) <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> blkg ) ; <S2SV_ModEnd> q -> root_blkg,1
585,<S2SV_ModStart> ; if ( bpp == 1 && <S2SV_ModStart> else if ( bpp == 8 &&,1
586,"<S2SV_ModStart> ; krb5_data rspac ; const char * tgt_realm = krb5_principal_get_realm ( context, krbtgt -> entry. principal ) <S2SV_ModStart>, cp, tgt_realm,",1
587,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
588,"<S2SV_ModStart> struct usbdevfs_connectinfo ci ; memset ( & ci, 0, sizeof ( ci ) ) ; ci <S2SV_ModEnd>. devnum = <S2SV_ModStart> dev -> devnum ; ci <S2SV_ModEnd>. slow = <S2SV_ModStart> speed == USB_SPEED_LOW <S2SV_ModEnd> ; if (",1
589,<S2SV_ModStart> <S2SV_null> static struct ip_options_rcu <S2SV_ModEnd> * optlen * <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * optlen <S2SV_ModStart> ) { optlen = opt -> opt. <S2SV_ModStart> += optlen ; optlen = opt -> opt.,0
590,<S2SV_ModStart> ; args -> rmtvaluelen <S2SV_ModEnd> = 0 ;,0
591,<S2SV_ModStart> ; if (! Irp -> DevicePathLen || ( TC_MAX_SIZE ) || ( devicePathLen < 11 ) || ( WCHAR * DevicePathLen < 11 ) || ( WCHAR * DevicePathLen > WCHAR * DevicePathLen ) || ( devicePathLen > TC_MAX_MAX_SIZE ) || ( devicePathLen > TC_MAX_SIZE ) ) { Irp -> IoStatus. devicePathLen = STATUS_MAX_SIZE ; Irp -> IoStatus. readBuffer = 0 ; break ; } else { Irp -> DevicePathLen = STATUS_PARAMETER ; } else { Irp -> IoStatus. devicePathLen = 0 ; } else { Irp -> IoStatus. devicePathLen = STATUS_INVALID_SIZE ; if (! devicePathLen ) { Irp -> IoStatus. devicePathLen = STATUS_INVALID_MAX_SIZE ; break ; } else { if (! Irp -> DevicePathLen ) { Irp -> IoStatus. DevicePathLen = STATUS_MAX_SIZE ; break ; } else { Irp -> IoStatus. DevicePathLen = TC_MAX_MAX_SIZE ; } else,0
592,<S2SV_ModStart> ; if ( (,0
593,"<S2SV_ModStart> ) { struct dpcap_device * dev = kmalloc ( 0, sizeof ( d ) ) ; if (! ddev ) return - ENOMEM <S2SV_ModEnd> ; if ( <S2SV_ModStart> r_dev ) { pr_err ( ""Cannot <S2SV_blank> supported <S2SV_blank> al <S2SV_blank> for <S2SV_blank> device <S2SV_blank> in <S2SV_blank> device <S2SV_blank> %s\\n"", __func__, dev -> nr ) ; return - 1 ; } <S2SV_ModStart> 1 ) ; pr_err ( ""%s: <S2SV_blank> %s\\n"", __func__, dev -> dev -> dev ) ; if ( errno!= X86 ) goto fail ; <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> == 0 ) ) <S2SV_ModEnd> return 0 ;",0
594,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( g_settings,0
595,<S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; index,0
596,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
597,"<S2SV_ModStart>, int tstype, bool opt_stats <S2SV_ModStart> ; bool opt_stats",0
598,"<S2SV_ModStart> 0 ) { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ;",0
599,"<S2SV_ModStart> ( bp, len <S2SV_ModEnd> ) ) ;",0
600,"<S2SV_ModStart>, CONST_LEN ( ""%2f?"" ), CONST_LEN ( ""/?"" ) ) ; if (",0
601,"<S2SV_ModStart> -> pmu, mutex_lock <S2SV_ModEnd> ) return",0
602,<S2SV_ModStart> <= w - ( int ),1
603,<S2SV_ModStart> page ) ; <S2SV_ModEnd> memset ( addr,1
604,<S2SV_ModStart> * data ; jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,0
605,,0
606,"<S2SV_ModStart> * priv ; if (! port -> interrupt_out_urb ||! port -> interrupt_in_urb ) { dev_err ( & port -> dev, ""required <S2SV_blank> endpoint <S2SV_blank> is <S2SV_blank> missing\\n"" ) ; return - ENODEV ; }",1
607,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } if (,0
608,<S2SV_ModStart> -> device_data ; cancel_autoload_drivers ( ) ;,1
609,"<S2SV_ModStart>, int ret <S2SV_ModEnd> ; if (",0
610,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> size < 16 ) || ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> size < 16 ) || ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> size > 256 ),0
611,"<S2SV_ModStart> uint dblocks = xfs_attr3_rmt_blocks <S2SV_ModEnd> ( mp,",1
612,<S2SV_ModStart> ; pcount = 0 <S2SV_ModEnd> ; if (,0
613,"<S2SV_ModStart> val ) { if (! strcmp ( rrb, ""FileName"" ) || strcmp ( filename,'<S2SV_blank> '",0
614,<S2SV_ModStart> ] == EOF || text [ 1 ] == 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 2 ] ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 3 ] ) <S2SV_ModEnd> ) return 0,1
615,"<S2SV_ModStart> -> buf, c -> mailen + 1",0
616,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct4x4_c <S2SV_ModEnd> ( input, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> out [ 4 <S2SV_ModStart> ] ) ; tran_low_t <S2SV_ModEnd> * out =",0
617,<S2SV_ModStart> ; gname = g_fd_t new_name <S2SV_ModEnd> ; if (,0
618,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; fh_lock ( fh ) ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT <S2SV_ModEnd>, argp -> <S2SV_ModStart> argp -> acl_default ) ; <S2SV_ModEnd> fh_write ( fh",0
619,<S2SV_ModStart> * ue ; if <S2SV_ModEnd> ( tree_root == <S2SV_ModStart> == NULL ) return 0,1
620,<S2SV_ModStart> * config ; <S2SV_ModEnd> char * fp <S2SV_ModStart> ) ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { goto exit ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { goto exit ; } <S2SV_ModStart> ; } } <S2SV_ModEnd> if (!,0
621,<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) ; <S2SV_ModStart> > 0 ) { elen += pc -> lengthComponentIdent ; break ; } <S2SV_ModEnd> case 2 : <S2SV_ModStart> case 5 : elen += pc -> lengthComponentIdent ; if ( elen > fromlen ) return - EIO ; <S2SV_ModStart> break ; } <S2SV_ModEnd> } if (,1
622,"<S2SV_ModStart> ( dp [ 4 <S2SV_ModEnd> ], NULL <S2SV_ModEnd> ) ; return",0
623,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr ) ;,0
624,<S2SV_ModStart> } else { if ( ( ctxt -> status == 0 ) && ( ( <S2SV_ModStart> == 0 ) ),0
625,<S2SV_ModStart> ; bool slow <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ;,1
626,<S2SV_ModStart> u_len ) { <S2SV_ModEnd> if (! <S2SV_ModStart> = pdu_len ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
627,"<S2SV_ModStart> int tagval ; struct stream packet ; <S2SV_ModStart> length ) ; packet = * s ; <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> version <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; } <S2SV_ModEnd> if (!",0
628,"<S2SV_ModStart> int i ; ND_TCHECK2 ( * l ) ; if (! ND_TTEST ( * cp ) ) { ND_PRINT ( ( ( ndo, INDIR_MASK ) ) ) ; return ( NULL ) ; } if ( <S2SV_ModEnd> ndo -> ndo <S2SV_ModStart> ndo_offset == INDIR_MASK ) { if ( ( i & INDIR_MASK ) == INDIR_MASK ) { if ( i & INDIR_MASK ) == INDIR_MASK ) { ND_PRINT ( ( ndo, INDIR_MASK ) ; compress = 0 ; rp = INDIR_MASK ( i & INDIR_MASK ) & INDIR_MASK ) ; compress = INDIR_MASK ; if ( i < offset ) { ND_PRINT ( ( ndo, INDIR_MASK ) & INDIR_MASK ) ; return ( NULL ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> NULL ) { if ( (! ND_PRINT ( ( ndo, INDIR_MASK ) ) return 0 ;",0
629,"<S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; error <S2SV_ModStart> = args -> rmtvaluelen <S2SV_ModEnd> ; while (",1
630,"<S2SV_ModStart> char * data, const <S2SV_ModStart> "" ) ; if ( data == NULL ) return - 1 ;",0
631,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> S_IWUSR ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; unlink",0
632,<S2SV_ModStart> ( fc = 0 <S2SV_ModEnd> ) ; if,0
633,"<S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = MagickMin <S2SV_ModEnd> ( 1.0f,",0
634,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_set_str ( GITERR_NET, ""Invalid <S2SV_blank> empty <S2SV_blank> packet"" ) ; return GIT_ERROR <S2SV_ModEnd> ; } if",1
635,<S2SV_ModStart> ; if ( vma -> vm_flags & VM_SHARED ) return VM_FAULT_SIGBUS ; if (,1
636,<S2SV_ModStart> src ) { <S2SV_ModEnd> return 0 ;,0
637,<S2SV_ModStart> env -> insn_aux_data ; int i <S2SV_ModStart> ) ) ; for ( i = off ; i < off + cnt - 1 ; i ++ ) new_data [ i ]. seen = true ;,1
638,<S2SV_ModStart> ; ND_TCHECK ( * dp <S2SV_ModEnd> ) ; if,1
639,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;,1
640,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
641,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorDecodeTile"", ""%s"", ""occ0%rowsize <S2SV_blank>!= <S2SV_blank> 0"" ) ; return 0 ; } <S2SV_ModEnd> assert ( sp <S2SV_ModStart> 0 ) { if (! <S2SV_ModStart>, rowsize ) ) return 0",1
642,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ;",0
643,<S2SV_ModStart> ; if ( ctx -> terminated ||,1
644,<S2SV_ModStart> = NULL ; if ( sbi -> spool ) hugepage_put_subpool ( sbi -> spool ) ;,1
645,<S2SV_ModStart> else if ( ret >= 0 &&,0
646,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> inode = { char * in, size_t <S2SV_ModEnd> * strlen ( <S2SV_ModStart> ) ) { size_t <S2SV_ModEnd> = 0 ; <S2SV_ModStart> } else { size_t <S2SV_ModEnd> = malloc (",0
647,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
648,"<S2SV_ModStart> ( ) ; iov_iter_advance ( i, copied ) ; <S2SV_ModStart> again ; } <S2SV_ModEnd> pos += copied",1
649,<S2SV_ModStart> unlikely ( len + ring -> frameoffset,1
650,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
651,"<S2SV_ModStart> ( obj, <S2SV_ModEnd> name, data <S2SV_ModStart>, show_object, & base <S2SV_ModEnd>, path,",1
652,<S2SV_ModStart> ) ) return 0 <S2SV_ModEnd> ; } if,0
653,<S2SV_ModStart> src < zsize + ( sub_type!= 2 ) <S2SV_ModStart> bits ) { if ( src >= src_end ) return AVERROR_INVALIDDATA ;,1
654,<S2SV_ModStart> q ) ; mutex_lock ( & q -> lock ) ;,0
655,<S2SV_ModStart> ) { return 0 <S2SV_ModEnd> ; } if,0
656,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
657,<S2SV_ModStart> list ) ; mutex_lock ( & timeri -> timer_list ) ; list_unlock ( & timeri -> lock ) ;,0
658,<S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT,1
659,<S2SV_ModStart> -> has_va ; <S2SV_ModEnd> char * arch <S2SV_ModStart> * arch = strdup ( info -> cpu ) ; char * cpu = info -> cpu? strdup ( info -> cpu ) : NULL <S2SV_ModEnd> ; ut16 bits <S2SV_ModStart> * * <S2SV_ModEnd> ; if (,0
660,"<S2SV_ModStart> sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart>, * n <S2SV_ModEnd> ; list_for_each_entry (",1
661,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
662,"<S2SV_ModStart> gint64 offset ; <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; offset <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! parse_netscreen_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> wth -> fh <S2SV_ModEnd>, & wth <S2SV_ModStart> wth -> frame_buffer, line",1
663,<S2SV_ModStart> 0 ) ; if ( <S2SV_ModStart>. seq_num ) < 0 ) return - 1,1
664,<S2SV_ModStart> char * data <S2SV_ModEnd> = 0 ; <S2SV_ModStart> return 0 ; } <S2SV_ModEnd> if ( img,0
665,<S2SV_ModStart> == 0 ) ret = - EOPNOTSUPP ; down_read ( & key -> sem ) ; <S2SV_ModStart> == 0 ) ret = <S2SV_ModEnd> - EOPNOTSUPP ;,0
666,<S2SV_ModStart> ( ret!= 0 <S2SV_ModEnd> ) { if,0
667,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",1
668,"<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - JAS_CAST ( jas_longlong <S2SV_ModEnd>, ( ( <S2SV_ModStart> : JAS_CAST ( jas_longlong <S2SV_ModEnd>, tmp )",1
669,<S2SV_ModStart> page ) ; rm -> atomic. op_active = 0 ;,1
670,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
671,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
672,"<S2SV_ModStart> sizeof ( spath ) ) return - 1 ; if ( strstr ( name, "".."" ) || strchr ( name, '/'",1
673,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
674,"<S2SV_ModStart> -> bcache, cache_id ( <S2SV_ModStart> ] -> data )",1
675,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
676,"<S2SV_ModStart> = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
677,<S2SV_ModStart> return 1 ; consume_skb ( skb ) ; return 0 <S2SV_ModEnd> ; } if,1
678,<S2SV_ModStart> pix_size ) ; if ( <S2SV_ModEnd> ( mi + 1,0
679,<S2SV_ModStart> ) { return err <S2SV_ModEnd> ; } <S2SV_null>,0
680,<S2SV_ModStart> ; if ( (,0
681,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> } if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if (",1
682,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
683,<S2SV_ModStart> 1 ) ; if ( strlen ( line ) == 0 ) return - 1 ;,1
684,"<S2SV_ModStart> ""invalid <S2SV_blank> keylen"" ) ; <S2SV_ModEnd> if ( p",0
685,<S2SV_ModStart> ++ ) { if ( band -> prec ) { <S2SV_ModStart> ) ; } },1
686,<S2SV_ModStart> < 0 ) { xmlFreeInputStream ( input ) ; return ; } <S2SV_ModEnd> if ( entity,1
687,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart>, & final ) ; rcu_read_unlock ( <S2SV_ModStart> -> ir_v6_rmt_addr ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), <S2SV_ModEnd> np -> tclass <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock ( ) ; rcu_lock ( <S2SV_ModStart> np -> opt ) ; rcu_read_unlock ( ) ; rcu_lock (",0
688,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> } else { const VP9_COMP * cpi = & cpi -> td. <S2SV_ModStart> ) { return <S2SV_ModEnd> ; } if <S2SV_ModStart> ) { return 0 ; <S2SV_ModEnd> } } <S2SV_null>,0
689,"<S2SV_ModStart> ( u32 size, u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } <S2SV_ModEnd> return malloc ( <S2SV_ModStart> malloc ( size * num",1
690,<S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> { if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,1
691,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,1
692,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
693,"<S2SV_ModStart> scn, root_storage <S2SV_ModEnd> ) ) <",1
694,<S2SV_ModStart> size - 1 <S2SV_ModEnd> ; if (,0
695,<S2SV_ModStart> (! eof && vars -> str. c!= vars -> ptr,1
696,"<S2SV_ModStart> ( sock, EINVAL ; if (",0
697,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
698,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc!= X86EMUL_CONTINUE ) break <S2SV_ModStart> case 4 : rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val )",1
699,<S2SV_ModStart> len = 0 <S2SV_ModEnd> ; if (,0
700,"<S2SV_ModStart> void * ticket_buf, void * ticket_buf <S2SV_ModStart> struct ceph_buf, void * dbuf <S2SV_ModStart> ; void * dbuf = NULL <S2SV_ModStart> struct ceph_buf ; void * ticket_buf = NULL <S2SV_ModStart> ; void * dbuf = NULL ; void * ticket_buf = NULL ; void * ticket_buf = NULL ; void * ticket_buf = NULL ; <S2SV_ModStart> bad ) ; if (! ticket_buf ) { ret = - ENOMEM ; <S2SV_ModStart> out ; } kfree ( dbuf ) ; <S2SV_ModStart> out : kfree ( dbuf ) ;",0
701,"<S2SV_ModStart> + 1 ; if ( count > Pairs ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEED ) ) ) ;",0
702,<S2SV_ModStart> -> skip_rq ) <S2SV_ModEnd> ; if (,0
703,"<S2SV_ModStart> -> session_id ; if ( s -> session_id_sess ) { int i = 0 ; if ( i -> session_mode & new_sess ) { if ( i & SSL_CACHE_NO_CLIENT ) { if ( i & SSL_SESSION ) { if ( i & SSL_SESS_CACHE_NO_CLIENT ) { if ( i & s -> session_mode == 0 ) s -> session_cb [ i ]. session_free ( s -> session ) ; } else { SSL_SESSION_GET_FAILURE = s -> session_sess ; } s -> session = ssl_session_use ( s -> session, ssl_sess, s -> session_sess, 0 ) ; } <S2SV_ModEnd> return 0 ;",0
704,<S2SV_ModStart> error = 0 <S2SV_ModEnd> ; } if,0
705,<S2SV_ModStart> ( )!= NULL <S2SV_ModEnd> ) { if,0
706,<S2SV_ModStart> NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_FIELD_REF,0
707,<S2SV_ModStart> ; if ( cmd -> dev ) return ; if (,0
708,"<S2SV_ModStart>, n_col_offset, string type_comment, <S2SV_ModStart> n_comment, string type_comment, NCH ( n ) ) ; if (! type_comment ) return NULL ; <S2SV_ModStart> n, body_comment",0
709,"<S2SV_ModStart> err = 0 ; if (! net_eq ( current -> nsproxy -> net_ns, sock_net ( sk ) ) ) return - EINVAL",1
710,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
711,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
712,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
713,<S2SV_ModStart> -> rows = 1 <S2SV_ModEnd> ; image -> <S2SV_ModStart> ( BImgBuff ) <S2SV_ModEnd> ; break ;,1
714,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> == 0 ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,0
715,,1
716,<S2SV_ModStart> res ) ; <S2SV_ModEnd> return res ;,0
717,"<S2SV_ModStart> { if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> [ psf -> <S2SV_ModStart> psf_header_allocate <S2SV_ModEnd> ( psf, <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd>, 1, <S2SV_ModStart> + psf -> header. indx <S2SV_ModEnd> + psf -> <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> + psf -> header. indx <S2SV_ModEnd> + psf -> <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd>, 1, <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) ; if <S2SV_ModStart> < psf -> header. ptr <S2SV_ModStart> + psf -> header. indx <S2SV_ModEnd> ) return ; } <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> + psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) ; break",0
718,<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ioffset ) ; <S2SV_ModEnd> credits = ext4_writepage_trans_blocks <S2SV_ModStart> ) ; goto out_mmap <S2SV_ModEnd> ; } down_write <S2SV_ModStart> handle ) ; out_mmap : up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModEnd> ext4_inode_resume_unlocked_dio ( inode,1
719,<S2SV_ModStart> uint32_t * track_size <S2SV_ModEnd> ; uint32_t * <S2SV_ModStart> uint32_t tmp_val <S2SV_ModEnd> ; uint32_t * <S2SV_ModStart> << 8 ; uint32_t * tmp_val <S2SV_ModEnd> ; uint32_t <S2SV_ModStart> = * track_size ; tmp_val <S2SV_ModEnd> = * midi_val <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> = * midi_val <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> |= * midi_val <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> = * midi_val <S2SV_ModStart> = tmp_val ; tmp_val <S2SV_ModEnd> |= * midi_val <S2SV_ModStart> = * midi_val ; tmp_val <S2SV_ModEnd> = * midi_val <S2SV_ModStart> << 24 ; tmp_val <S2SV_ModEnd> |= * midi_val <S2SV_ModStart> ( midi_val <S2SV_ModEnd> ) ; tmp_val,0
720,"<S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val * <S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val *",1
721,<S2SV_ModStart> * bh ; unsigned int table_len ; <S2SV_ModStart> -> b_data ; table_len = le32_to_cpu ( lvd -> s_blocksize ) ; if ( sizeof ( * lvd ) < table_len ) goto out_err ; <S2SV_ModStart> -> b_blocksize = le32_to_cpu ( lvd ) <S2SV_ModEnd> ; if (,0
722,"<S2SV_ModStart> long n ; image = 0 ; info = 0 ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> "" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> 1 ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> 0 ; } JAS_DBGLOG ( ""BMP <S2SV_blank> information: <S2SV_blank> %ld; <S2SV_blank> %ld; <S2SV_blank> numcolors <S2SV_blank> %ld; <S2SV_blank> %ld; <S2SV_blank> numplanes <S2SV_blank> %ld; <S2SV_blank> %ld; <S2SV_blank> %ld; <S2SV_blank> %ld; <S2SV_blank> numcolors <S2SV_blank> %ld; <S2SV_blank> %ld; <S2SV_blank> %ld; <S2SV_blank> %ld\\n"", JAS_CAST ( long <S2SV_ModStart> info -> width ), JAS_CAST ( long, JAS_CAST ( long, JAS_CAST ( long <S2SV_ModEnd> info -> depth <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModEnd> info -> depth <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModStart> info -> depth ), JAS_CAST (",0
723,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
724,<S2SV_ModStart> 1 ) ; if ( ret == 0 ) return EINVAL ;,0
725,"<S2SV_ModStart> g_tv_comment, FILENAME_COMMENT ) ; problem_data_reload_from_dump_dir ( ) ; update_gui_state_from_problem_data ( 0",1
726,<S2SV_ModStart> mask ) { u16 <S2SV_ModEnd> ; if (,0
727,<S2SV_ModStart> while ( nstart == 0 && line,0
728,"<S2SV_ModStart>, extent, height, <S2SV_ModStart> ""UnableToReadImageData"" ) ; <S2SV_ModEnd> height = sun_info <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( sun_info. type == RT_ENCODED ) <S2SV_ModStart> sun_data ) ; <S2SV_ModEnd> p = sun_pixels",0
729,"<S2SV_ModStart>, krb5_principal client_principal, const char * tgt_realm <S2SV_ModStart> principal ), tgt_realm <S2SV_ModEnd> ) ; if",1
730,<S2SV_ModStart> = MagickFalse ; break <S2SV_ModEnd> ; } image,0
731,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = ireq ->,1
732,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
733,"<S2SV_ModStart>!= 0 ) { int tend_off = skb_transport_offset ( skb ) + tlen ; <S2SV_ModStart> ( csum, skb_checksum ( skb, tend_off, <S2SV_ModEnd> offset, 0 <S2SV_ModStart> ) ) ; }",1
734,"<S2SV_ModStart> pfn ) ; kvm_unpin_pages ( kvm, pfn, page_size ) ; <S2SV_ModStart> base_gfn, gfn - slot -> base_gfn",1
735,<S2SV_ModStart> 0x00 } ; if ( cmd -> msg_len > sizeof ( b ) - 4 ) return - EINVAL ;,1
736,"<S2SV_ModStart> perf_event_context * ctx ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> event ) ; _perf_event_disable ( event ) ; perf_event_ctx_unlock ( event, ctx <S2SV_ModEnd> ) ; }",1
737,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> ; return ( <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> [ 3 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> & 0xffffffff ) <S2SV_ModEnd> ; return (,0
738,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool ret <S2SV_ModStart> free_nid_nid_to_nid ( fid, i, GFP_NOFS ) ; spin_lock ( & nm_i -> nid, GFP_NOFS ) ; <S2SV_ModStart> NULL ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) return false ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
739,<S2SV_ModStart> ; # else ( void ) flags ; <S2SV_ModStart> return NULL ; <S2SV_ModEnd> if ( ctx,0
740,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> ++ cons ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> extra. type ) ; netbk_fatal_tx_err ( vif",1
741,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ;,1
742,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
743,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
744,<S2SV_ModStart> case ND_TCHECK2 ( * tptr ),0
745,<S2SV_ModStart> -> data ; unsigned <S2SV_ModStart> body -> unit_size || len < sizeof ( struct oz_multiple_fixed ) - 1 <S2SV_ModStart> ( len - ( <S2SV_ModStart> struct oz_multiple_fixed ) - 1 ) <S2SV_ModEnd> ) / body,1
746,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) { # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> ( & cpi <S2SV_ModStart> ) { # endif <S2SV_ModEnd> return - 1 <S2SV_ModStart> ; } # endif <S2SV_ModEnd> return ;,0
747,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0644 ) ; <S2SV_ModEnd> if (!",0
748,<S2SV_ModStart> size <= 2 <S2SV_ModEnd> ) ; if,0
749,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
750,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext4_extent_header ) + sizeof ( struct ext4_extentries ) * le16_to_cpu ( neh -> eh_entries ) ; memset ( bh -> b_data + ext4_size, 0, inode -> i_sb -> s_blocksize - ext4_size ) ; <S2SV_ModStart> ) ; } ext4_size = sizeof ( struct ext4_extentries ) ;",0
751,<S2SV_ModStart> ; ptr_hdr = ( ptr_t ) <S2SV_ModEnd> ; if (,0
752,<S2SV_ModStart> ; cmap_len = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> 0 x_origin = get_tga_ushort <S2SV_ModEnd> ( & tga,0
753,<S2SV_ModStart> ; ssize_t ret ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
754,<S2SV_ModStart> == CPUCLOCK_SCHED ) * tp = ns_to_timespec <S2SV_ModEnd> ( cpu. <S2SV_ModStart> cpu. sched ) ; <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
755,<S2SV_ModStart> ; uint32 nstrips <S2SV_ModEnd> ; nstrips =,1
756,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
757,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> } else { const VP9_COMPRESS ( lua_cfg, lua_cfg, lua_check_func ( L, 1, sizeof ( lua_func ) ) ; <S2SV_ModStart> == NULL ) { if ( lua_check_devices ( lua_check_id ( L, 1 ) ) < 0 ) { lua_read_func ( L, ""Invalid <S2SV_blank> read <S2SV_blank> packet"" ) ; return - 1 ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
758,<S2SV_ModStart> ; int error = 0 <S2SV_ModStart> &= PAGE_MASK ; if ( address < mmap_min_addr ) return - EPERM <S2SV_ModEnd> ; prev =,1
759,"<S2SV_ModStart> { umode_t mode <S2SV_ModEnd> ; error = <S2SV_ModStart> ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart>, & mode, & acl <S2SV_ModStart> if ( error <S2SV_ModEnd> ) return error <S2SV_ModStart> return error ; <S2SV_ModEnd> error = xfs_set_mode",1
760,"<S2SV_ModStart>, int optional, const char * rootfs <S2SV_ModStart> endif if ( safe_mount <S2SV_ModEnd> ( fsname, <S2SV_ModStart> MS_REMOUNT, data, rootfs <S2SV_ModStart>, data ) < 0",1
761,<S2SV_ModStart> = MagickFalse ; break <S2SV_ModEnd> ; } if,0
762,"<S2SV_ModStart> it_overrun = - 1LL <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> info -> si_overrun = timer_overrun_to_int ( timr, info -> si_overrun ) <S2SV_ModEnd> ; } unlock_timer",1
763,<S2SV_ModStart> ; if ( url == 1 ) return 0 ; if (,0
764,<S2SV_ModStart> struct static_key * once_key <S2SV_ModEnd> ) { static <S2SV_ModStart> ; __net_random_once_disable_jump ( once_key <S2SV_ModEnd> ) ; return,1
765,"<S2SV_ModStart> -> io_data ; struct io_data * io_data = kiocb ; if (! io_data -> data ) ret = - EFAULT ; if ( io_data -> ffs -> data ) ret = - EFAULT ; io_data -> read_mm ( io_data -> data, io_data -> data ) ; if (! io_data -> data ) ret = - EFAULT ; if ( io_data -> data ) ret = - EFAULT ; io_data -> read_mm ( io_data -> data, ret ) ; io_data -> kiocb_data -> read ( io_data -> kiocb, ret, ret ) ; if ( io_data -> ffs -> ffs_eventfd && ret < 0 ) ret = - EFAULT <S2SV_ModEnd> ; if (",0
766,<S2SV_ModStart> ; if ( IPCB ( skb ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> &&! opt,1
767,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
768,<S2SV_ModStart> struct trusted_key_options * datalen <S2SV_ModEnd> ; struct trusted_payload *,0
769,"<S2SV_ModStart> v |= ( JAS_CAST ( uint_fast32_t, c ) <S2SV_ModEnd> << 24 )",1
770,<S2SV_ModStart> NULL ) { if ( skb -> len < ROSE_CALL_REQUEST ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> |= ROSE_CALL_REQUEST ; if ( skb -> len < ROSE_CALL_REQ_OFF || ( skb -> data [ ROSE_CALL_REQ_OFF ] ) ) { kfree_skb ( skb ) ; continue ; },0
771,<S2SV_ModStart> (! npages || base_gfn!= old. base_gfn,0
772,<S2SV_ModStart> if ( ( nr <S2SV_ModEnd> ) ) {,0
773,"<S2SV_ModStart> ( next_offset, end <S2SV_ModEnd> ) ; if",0
774,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",1
775,<S2SV_ModStart> } if ( <S2SV_ModEnd>!= NULL &&,0
776,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) server.,0
777,"<S2SV_ModStart> } if ( options -> flags & ( UV_PROCESS_SETUID | UV_PROCESS_SETGID ) ) { SAVE_ERRNO ( setgroups ( 0, NULL ) ) ; } if (",1
778,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> EOPNOTSUPP ; } if ( rlen > MAX_SIZE ) { mutex_lock ( & rlen ) ; if (! rlen ) return - EOPNOTSUPP ; <S2SV_ModStart> wlen ) ; <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> wlen ) ; <S2SV_ModEnd> mutex_unlock ( &,0
779,<S2SV_ModStart> ( client ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
780,<S2SV_ModStart> book -> dim && i < n,1
781,"<S2SV_ModStart> R3 ) { sprintc ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.4 <S2SV_blank> %12.3 <S2SV_blank> %12.4 <S2SV_blank> %12.3 <S2SV_blank> %12",0
782,<S2SV_ModStart> == - EEXIST || ret == - EOVERFLOW,1
783,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; BUG_ON <S2SV_ModStart> unix_tot_inflight -- ; } fp -> f_cred -> user -> unix_inflight -- ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
784,"<S2SV_ModStart> size_t chanmap_size = SF_MIN ( <S2SV_ModStart> sf. channels, layout_tag & 0xffff )",1
785,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
786,<S2SV_ModStart> ms ) { uint32_t <S2SV_ModEnd> nestsize = ( <S2SV_ModStart> nestsize = ( uint32_t <S2SV_ModEnd> ) ms ->,1
787,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
788,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
789,<S2SV_ModStart> -> xrefs = safe_calloc ( <S2SV_ModEnd> sizeof ( xref_t,1
790,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
791,"<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ) <S2SV_ModStart> ( opt ) { atomic_sub ( <S2SV_ModEnd> opt -> tot_len <S2SV_ModStart> opt -> tot_len, & sk -> sk_omem_alloc ) ; txopt_put ( opt <S2SV_ModStart> ) ; } }",1
792,"<S2SV_ModStart>, * tmpout, * tmpout <S2SV_ModEnd> ) ; if",0
793,<S2SV_ModStart> ) break ; struct ipv6_txoptions_rcu * sk = rcu_dereference ( sk ) ; <S2SV_ModStart> break ; } <S2SV_ModEnd> if (!,0
794,"<S2SV_ModStart> sctp_serial_init ( sctp_enabled, & sctp_lock <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( sctp_exit ( 1 ) <S2SV_ModEnd> ) ; if",0
795,<S2SV_ModStart> ns ) ; <S2SV_ModEnd> return 0 ;,0
796,"<S2SV_ModStart> ) { struct in_device * idev <S2SV_ModEnd> = ( ( <S2SV_ModStart> ) -> ifa_dev <S2SV_ModEnd> ; struct netdev_notifier_info <S2SV_ModStart> netdev_notifier_info info ; if ( idev -> dead ) return NOTIFY_DONE ; <S2SV_ModStart> & info, idev ->",1
797,<S2SV_ModStart> -> mm ) <S2SV_ModEnd> ; if (,0
798,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
799,<S2SV_ModStart> val ) { int temp_size = 500 ; char * temp_size = temp_size * temp_size <S2SV_ModStart> ; int temp_size <S2SV_ModEnd> ; int temp_size,0
800,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
801,<S2SV_ModStart> ; out = safe_calloc <S2SV_ModEnd> ( c ->,0
802,"<S2SV_ModStart> NULL ) { if <S2SV_ModEnd> ( errno == <S2SV_ModStart> == ENOMEM ) <S2SV_ModEnd> log_warn ( ""lldp""",0
803,<S2SV_ModStart> object + size < 0,0
804,"<S2SV_ModStart> ( interface, KSZ8851_MACR ) ; KSZ8851_MACROBLKIF <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, KSZ8851_MACROBLOCK_SIZE <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_P1 <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_MACROBLKIFY <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_MACROBLKIFY <S2SV_ModEnd> ) ; kzRad1 <S2SV_ModStart> ( interface, KSZ8851_CREAT, KSZ8851_ERR ) ; <S2SV_ModStart> ( interface, KSZ8851_ERR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_IER, KSZ8851_MACROBLOCK <S2SV_ModEnd> ) ; }",0
805,<S2SV_ModStart> all_net ) ; put_net ( pch -> chan_net ) ;,0
806,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct btrfs_xattr <S2SV_ModEnd> * inode_ino ( <S2SV_ModStart>, path, name, <S2SV_ModEnd> di ) ; if <S2SV_ModStart> - EINVAL ; if (! di && path. xattr_ino ( inode -> i_len, name_len, name_len ) ) ret = - 1 ; if (! di ) ret ) ret = - ENOMEM ; di = - ENOMEM ; di = btrfs_lookup_lookup_ino ( trans, path, name_len, path. rt ) ; if ( flags & XATTR_REPLACE ) { di = - ENOMEM ; goto out_release_xattr ( path, path, path. xattr ) ; if (! di ) ret = - ENOMEM ; } else <S2SV_ModEnd> if (! <S2SV_ModStart>, name_len, name_len, name_len, name_len <S2SV_ModEnd> ) ; if <S2SV_ModStart> if (! inode ) <S2SV_ModEnd> ( trans, <S2SV_ModStart> out ; } inode ) ; di = NULL ; di = NULL ; di = btrfs_lookup_lookup_",0
807,<S2SV_ModStart> > 0xbf ) { <S2SV_ModStart> return 1 ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto err ; } <S2SV_ModStart> ) ) ) { <S2SV_ModStart> goto err ; },0
808,"<S2SV_ModStart> client -> proxy ) ; g_byte_array_free ( client -> auth_buffer, TRUE",1
809,<S2SV_ModStart> = xd -> plane [ 1 ].,0
810,<S2SV_ModStart> ; if ( key_is_negative ( key <S2SV_ModEnd> ) ) return,1
811,"<S2SV_ModStart> ip_len ) { <S2SV_ModEnd> if ( ( unlikely <S2SV_ModStart>!= 0 ) && ( unlikely ( t_len < 4 ) ) <S2SV_ModStart> NULL ; } else { <S2SV_ModEnd> ip = ip_len <S2SV_ModStart> ( t, op_len <S2SV_ModEnd> ) ; }",0
812,<S2SV_ModStart> ; if ( safe_calloc ( fit_nol_name <S2SV_ModEnd> ( fit ) <S2SV_ModStart> ) ) { ret = - 1 ; if ( ret < 0 ) goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> 2SV_null> <S2SV_null>,0
813,<S2SV_ModStart> { vpn_packet_t outpkt ; if ( len > sizeof outpkt. data ) return,1
814,<S2SV_ModStart> vmx_vpid_bitmap ) ; <S2SV_ModEnd> for ( msr <S2SV_ModStart> 0x83f ) ; <S2SV_ModEnd> if ( enable_ept,1
815,<S2SV_ModStart> = 0 ; i >= 0 && <S2SV_ModStart> out_error ; } <S2SV_ModEnd>  ++ ;,0
816,"<S2SV_ModStart> } else { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
817,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
818,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> == 0 ),0
819,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
820,<S2SV_ModStart> INDENT_INCR ; } if ( tbl -> indent < 0 ) tbl -> indent = 0 ; <S2SV_ModStart> -= INDENT_INCR ; if ( offset < 0 ) offset = 0 ;,1
821,"<S2SV_ModStart> b ) { size_t ss = CDF_SHORT_SEC_SIZE ( h ) ; <S2SV_ModStart> b ) + ss <S2SV_ModEnd> * sst -> <S2SV_ModStart> b ), ss <S2SV_ModEnd>, sst ->",0
822,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""hex_grammar.y"" { RE_AST <S2SV_ModStart> } # line 1337 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 1337 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 126 ""hex_grammar.y"" { incr_ast_levels ( ) ; <S2SV_ModEnd> ( yyval. <S2SV_ModStart> } # line 1348 <S2SV_ModEnd> ""hex_grammar.c""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1337 <S2SV_ModEnd> ""hex_grammar.c"" { incr_levels ( <S2SV_ModStart> ( ) ; incr_levels ( ) ; <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.y"" { incr_levels ( <S2SV_ModStart> ( ) ; <S2SV_ModEnd> ""hex_grammar.c""hex_grammar.y"" { incr_ast_levels ( ) ; <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 137 <S2SV_ModEnd> ""hex_grammar.c"" { incr_levels",0
823,<S2SV_ModStart> = 0 ; ( void ) e ;,0
824,<S2SV_ModStart> ( ret = 0 <S2SV_ModEnd> ; if (,0
825,<S2SV_ModStart> ; if ( key_is_positive ( key <S2SV_ModEnd> ) ) zap,1
826,"<S2SV_ModStart> ) -> filter ; memset ( & uf, 0, sizeof ( uf ) )",1
827,<S2SV_ModStart> ; int n_end ; if ( nb == NULL ) return 0 ; if (,0
828,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; } exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
829,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
830,<S2SV_ModStart> ; if (! ret ) return - EFAULT,0
831,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( cc0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorEncodeTile"", ""%s"", ""(cc0%rowsize)!=0"" ) ; return 0 ; } <S2SV_ModEnd> while ( cc",1
832,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
833,"<S2SV_ModStart> input_data, size_t input_backwards_size, size_t input_backwards_size <S2SV_ModEnd>, int max_bytes_matched <S2SV_ModStart> ( input_backwards_size, MAX_LIMIT ) { <S2SV_ModStart> = 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>",0
834,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd>  PREDICTION_MODE <S2SV_ModStart> rd_rd_rd_sse = UINT_MAX <S2SV_ModEnd> ; int best_sse = <S2SV_ModStart>, best_rd_rd_sse = UINT_MAX <S2SV_ModEnd> ; int best_sse = <S2SV_ModStart>, best_rd_rd_sse = UINT_MAX <S2SV_ModEnd> ; best_rd_rd_rd_sse = <S2SV_ModStart>, best_rd_rd_rd_sse = UINT_MAX <S2SV_ModEnd> ; best_rd_sse = <S2SV_ModStart> = 0 ; int this_rd_rd_sse = UINT_MAX <S2SV_ModEnd> ; best_sse = <S2SV_ModStart> = 0 ; best_rd_sse = UINT_MAX <S2SV_ModEnd> ; best_sse = <S2SV_ModStart>, best_rd_rd_sse = UINT_MAX <S2SV_ModEnd> ; best_sse = <S2SV_ModStart>, best_rd_sse = UINT_MAX <S2SV_ModEnd> ; best_rd_rd_sse = <S2SV_ModStart>, best_rd_y, best_rd_sse <S2SV_ModEnd> ) ; }",0
835,"<S2SV_ModStart> svm, AC_VECTOR ) ; set_exception_intercept ( svm, DB_VECTOR",0
836,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
837,"<S2SV_ModStart> sst, const cdf_directory_t * root_storage <S2SV_ModEnd> ) { cdf_summary_info_header_t <S2SV_ModStart> break ; } if ( root_storage ) { <S2SV_ModStart> = cdf_clsid_to_mime ( root_storage -> d_uuid <S2SV_ModEnd> ) ; return",0
838,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> WORD32 WORD32 WORD32 u4_depth_t <S2SV_ModEnd> ; WORD32 i,0
839,<S2SV_ModStart> -> length ) ; if ( err ) return - EFAULT,1
840,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args <S2SV_ModStart> vpx_codec_err_t * ctx <S2SV_ModEnd>, & ctx <S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args <S2SV_ModStart> ; if ( ctx -> <S2SV_ModEnd> == NULL ) <S2SV_ModStart> == NULL ) return VPX_CODEC_INVALID_PARAMETER ; if ( cpi -> oxcf. pass == 2 ) return VPX_CODEC_ERROR ; if ( ctx -> oxcf. pass == VPX_CODEC_INVALID_FRAME | VPX_CODEC_PASS <S2SV_ModEnd> == NULL ) <S2SV_ModStart> ; if ( cpi -> oxcf. pass == VPX_CODEC_FIRSTREAM && cpi -> frame_id == VPX_CODEC_INVALID_FRAME ) { vpx_codec_error = ( cpi -> oxcf. pass == VPX_CODEC_PASS ) ; if ( cpi -> oxcf. pass == VPX_CODEC_FRAME ) return VPX_CODEC_INVALID_",0
841,<S2SV_ModStart> if ( offset && <S2SV_ModEnd> ( FRAG6_CB ( <S2SV_ModStart> ) - offset <S2SV_ModEnd> > 0 ) <S2SV_ModStart> > 0 ) goto discard_fq ; if <S2SV_ModEnd> ( next && <S2SV_ModStart> < end ) goto discard_fq ; <S2SV_ModEnd> FRAG6_CB ( skb <S2SV_ModStart> - 1 ; discard_fq : fq_kill ( fq ) ;,0
842,<S2SV_ModStart> { uint16 bitspersample = 1,0
843,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> error ) { if ( a -> archive_set_error ( a -> archive, ARCHIVE_ERM ) { archive_set_error ( & a -> archive, EPERM ) ; return ( ARCHIVE_FAILED ) ; } else if ( a -> archive, a -> flags ) { archive_set_error ( & a -> archive, ""%s"", a -> archive, ARCHIVE_FAILED ( a -> archive, ARCHIVE_FAILED ) ) ; return ( ARCHIVE_FAILED ) ; } else if ( error ) { archive_set_error ( & a -> archive, ""%s"", a -> archive, ARCHIVE_FAILED ) ; return ( EPERM ) ; } if ( a -> archive_mode == ARCHIVE_FAILED ) { archive_set_error ( & a -> archive, ARCHIVE_EXECONLY ) ; archive_set_error ( a -> archive, ""%s"", a -> archive_mode ) ; free ( a -> archive, a.",0
844,"<S2SV_ModStart> ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL, rootfs -> path? rootfs -> mount : <S2SV_ModEnd> NULL )!=",1
845,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || inode -> i_lenAlloc > bh ) goto out ; <S2SV_ModStart> ( inode ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( inode ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( inode -> i_sb > bs ) goto out ; if ( iinfo ->,0
846,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( lfm,",0
847,<S2SV_ModStart> dst_size ) { <S2SV_ModEnd> if ( data <S2SV_ModStart> ; if ( data >= data_end <S2SV_ModEnd> ) return - <S2SV_ModStart> ; } <S2SV_null> <S2SV_null>,0
848,"<S2SV_ModStart> ( ) ; alloc_array ( t1_array, strlen ( t1_line_array ) + strlen ( t1_array ) + strlen ( t1_array ) + strlen ( t1_line_array ) + 1, T1_BUF_SIZE",0
849,<S2SV_ModStart> fq ) ; fq -> state = NULL ;,0
850,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
851,<S2SV_ModStart> ) ) return 0 <S2SV_ModEnd> ; } if,0
852,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; if (! <S2SV_ModStart>, cc ) ) return 0 <S2SV_ModStart> wc ) ; return 1 ;",1
853,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
854,"<S2SV_ModStart> ) ; struct ip_options_rcu * inet_opt <S2SV_ModStart> * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> ; nexthop = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",0
855,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
856,"<S2SV_ModStart> * mgr_hdl ; <S2SV_ModEnd> memset ( s_path <S2SV_ModStart> ( c_path ) <S2SV_ModEnd> ) ; switch <S2SV_ModStart> ( c_path, ""%s%s%d_C_XXXXXX"" <S2SV_ModEnd>, HSM_FM_SCK_PREFIX, <S2SV_ModStart> hdl -> instance <S2SV_ModEnd> ) ; if",1
857,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> return - EINVAL ; } <S2SV_ModEnd> if ( cmd,0
858,"<S2SV_ModStart> ""`%s\'"", option ) ; geometry = DestroyString ( geometry",0
859,<S2SV_ModStart> ) break ; struct ipv6_txoptions_rcu * sk = rcu_dereference ( sk ) ; <S2SV_ModStart> break ; } <S2SV_ModEnd> if (!,0
860,<S2SV_ModStart> ; if ( key_data_size < 0 ) goto err ;,0
861,"<S2SV_ModStart> OP_ENDCATCH ) ; emit ( J, F, OP_ENDTRY ) ;",1
862,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_row_idx <S2SV_ModStart> return ; } LIBXSMM_ASSERT ( 0!= l_row && 0!= l_column ) ;",1
863,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
864,"<S2SV_ModStart> uint8 result ; uint32 <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> ; STREAM s ; struct stream packet <S2SV_ModStart> return False ; packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> id <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",1
865,"<S2SV_ModStart> ; cleanup : if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> ; if (",1
866,<S2SV_ModStart> ; while ( ( ( len > 0 &&,0
867,<S2SV_ModStart> : if ( ctxt -> ai == NULL ) return - EINVAL ; if (,0
868,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
869,<S2SV_ModStart> & new_map ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> lower_first ; } ret = sort_idmaps ( & new_map ) ; if ( ret < 0 ) goto out ;,1
870,<S2SV_ModStart> msg ) ; if (! <S2SV_ModStart> ) ) { return 0 ; },0
871,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> ) ; } smb_ofile_flush ( sr, <S2SV_ModEnd> sr -> fid_ofile <S2SV_ModStart> sr -> fid_ofile <S2SV_ModEnd> ) ; (",1
872,<S2SV_ModStart> char * data <S2SV_ModEnd> ; if (,0
873,<S2SV_ModStart> 1 ) ; memcpy <S2SV_ModEnd> ( x -> <S2SV_ModStart> 16 ) ; memcpy <S2SV_ModEnd> ( x ->,0
874,"<S2SV_ModStart> addrtype = TIPC_ADDR_ID ; memset ( & addr -> addr, 0, sizeof ( addr -> addr ) )",1
875,<S2SV_ModStart> ( mem ) && mem -> memory_size >= 0,0
876,<S2SV_ModStart> 1 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
877,<S2SV_ModStart> } if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; } } \\\n} <S2SV_ModEnd> if ( strncasecmp,1
878,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_decode_insert ( struct <S2SV_ModStart> * s, buf, * buf, * buf, size_t <S2SV_ModEnd> u ; int <S2SV_ModStart> len ) { if ( * p == '\\0' ) { if ( * p == '\\0' ) { return 1 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) continue ; } <S2SV_ModEnd> if (! <S2SV_ModStart>, buf, buf, len ) ) { return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
879,"<S2SV_ModStart> { if ( user_sid_offset < 0 || ( record_data_size > ( record_size - 4 ) ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ERROR_RUNTIME, LIBCERROR_RUNTIME, ""Error: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> data <S2SV_blank> size <S2SV_blank> bounds."" ) ; goto error ; } if (",0
880,"<S2SV_ModStart> WaveHeader WaveHeader ; int format_chunk = 0 ; <S2SV_ModStart>, format ; if ( format_chunk ++ ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",1
881,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",0
882,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr ) ;,0
883,<S2SV_ModStart> ~ SNDRV_TIMER_IFLG_RUNNING ; list_del_init ( & timeri -> ack_list ) ; list_del_init ( & timeri -> active_list ) ;,1
884,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> char * cp <S2SV_ModStart> ; int i <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 0 ; * ptr <S2SV_ModEnd> = 0 ; <S2SV_ModStart> break ; } <S2SV_ModEnd> utif (!,0
885,<S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_flags_compat &&,1
886,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
887,"<S2SV_ModStart> ; if ( strcmp ( sub_demuxer -> name, ""srt"" ) && strcmp ( sub_demuxer -> name, ""ass"" ) ) goto error ; if (",1
888,<S2SV_ModStart> ( kbuf ) ; <S2SV_ModEnd> char buf [ <S2SV_ModStart> == NULL ) { <S2SV_ModEnd> if (! <S2SV_ModStart> (! buf ) <S2SV_ModEnd> return NULL ; <S2SV_ModStart> ( buf ) <S2SV_ModEnd> ; err =,0
889,"<S2SV_ModStart> write_literal ( vpx_write_literal <S2SV_ModEnd> * w, <S2SV_ModStart> write ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
890,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
891,<S2SV_ModStart> dptr ++ = ROSE_CALL_REQ_ADDR_LEN_VAL <S2SV_ModEnd> ; memcpy (,1
892,<S2SV_ModStart> = new_ns ; new_ns -> mounts ++ ;,1
893,"<S2SV_ModStart> height ) { memset <S2SV_ModEnd> ( o2,",0
894,<S2SV_ModStart> ; zip_object_handlers. get_gc = php_zip_get_gc ; zip_object_handlers.,1
895,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if <S2SV_ModEnd> ( iova < <S2SV_ModStart> mem -> iova || length > mem -> length || iova > <S2SV_ModEnd> mem -> iova <S2SV_ModStart> mem -> length - length ) return - EFAULT ; return <S2SV_ModEnd> 0 ; default,1
896,"<S2SV_ModStart> = 0 ; ND_TCHECK2 ( * dp, sizeof ( * ni6 ) ) ; <S2SV_ModStart> ) + 4 ; ND_TCHECK ( cp [ 0 ] )",1
897,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
898,<S2SV_ModStart> sent = 0 <S2SV_ModEnd> ; smb_msg.,1
899,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; if ( ref -> ref > INT_MAX / 2 ) return false ; <S2SV_ModStart> ref ++ ; return true ;,1
900,<S2SV_ModStart> fs -> clusters + <S2SV_ModEnd> 1 ) get_fat,1
901,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
902,<S2SV_ModStart> sk_nulls_node ) ; sk_nulls_node_init ( & sk -> sk_nulls_node ) ;,1
903,<S2SV_ModStart> return ret ; <S2SV_ModEnd> } ps_dec ->,0
904,<S2SV_ModStart> (! mm ||! mm -> env_end,1
905,"<S2SV_ModStart> inode * inode, int relocated ) { int flags = relocated? RR_RELOC_DE : 0 ; <S2SV_ModEnd> int flags = <S2SV_ModStart>, inode, flags <S2SV_ModEnd> ) ; if <S2SV_ModStart>, inode, flags <S2SV_ModEnd> ) ; }",0
906,<S2SV_ModStart> * inotify_new_group ( <S2SV_ModEnd> unsigned int max_events <S2SV_ModStart> -> inotify_data. user = get_current_user ( ) <S2SV_ModEnd> -> inotify_data. user =,0
907,<S2SV_ModStart> [ p ] && in -> linesize [ p ],1
908,<S2SV_ModStart> ; pcount = 0 <S2SV_ModEnd> ; if (,0
909,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } < 0,0
910,"<S2SV_ModStart> SCALAR_VALUE ) { coerce_reg_to_size ( & <S2SV_ModStart> [ value_regno ], size <S2SV_ModEnd> ) ; }",1
911,<S2SV_ModStart> int bufp += stripsize <S2SV_ModEnd> ; } return,0
912,<S2SV_ModStart> base_name ) ; char need_to_append_dot ; struct search_domain * dom ; if (! base_len ) return NULL ; <S2SV_ModEnd> need_to_append_dot = base_name <S2SV_ModStart> : 1 ; <S2SV_ModEnd> for ( dom,1
913,"<S2SV_ModStart> ; err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
914,<S2SV_ModStart> = MSG_DONTWAIT ; msg -> msg_namelen = 0 ;,0
915,"<S2SV_ModStart> number_colormaps, number_planes, number_planes_filled <S2SV_ModStart> -> rows ; number_planes_filled = ( number_planes % 2 == 0 )? number_planes : number_planes + 1 ; <S2SV_ModStart> ( number_planes_filled <S2SV_ModEnd> * number_pixels",0
916,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if (! context ) return FALSE ; <S2SV_ModStart> < originalSize ) { if (! <S2SV_ModStart> < originalSize ) return FALSE ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
917,<S2SV_ModStart> policy ) { if (! inode_owner_or_capable ( inode ) ) return - EACCES ;,1
918,<S2SV_ModStart> -> state ) ; <S2SV_ModEnd> } else {,0
919,"<S2SV_ModStart>, & key_data <S2SV_ModEnd> ) ; if",0
920,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
921,"<S2SV_ModStart> ( ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> header <S2SV_blank> to <S2SV_blank> header_bin, <S2SV_blank> got <S2SV_blank> %s"", __func__, header ) ; return false ; } <S2SV_ModEnd> cb1 = (",0
922,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
923,"<S2SV_ModStart> size ) { size_t res ; if ( check_mul_overflow ( num, size, & res ) ) abort ( ) ; <S2SV_ModStart> = malloc ( res <S2SV_ModEnd> ) ; if <S2SV_ModStart> = malloc ( res <S2SV_ModEnd> ) ; }",0
924,<S2SV_ModStart> ; exit ( task_context <S2SV_ModEnd> ) ; },0
925,"<S2SV_ModStart> * obj, <S2SV_ModEnd> int res ; <S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId__, & PyId__ ) == NULL <S2SV_ModEnd> ) { PyErr_SetString",0
926,<S2SV_ModStart> if (! u16 <S2SV_ModEnd> ) return 0,0
927,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_event_context * ctx <S2SV_ModStart> * data ; int ret <S2SV_ModEnd> ; mutex_lock (",0
928,<S2SV_ModStart> sacked_out ) ; if ( newly_acked_sacked <= 0 || WARN_ON_ONCE (! tp -> prior_cwnd ) ) return ;,1
929,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_y ( VP9_COMMON <S2SV_ModStart> * cm, MACROBLOCKD * xd, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> y_mode_prob [ cpi <S2SV_ModStart> ] ) ; FRAME_COUNTS * counts = xd -> counts ; if ( counts ) ++ counts -> <S2SV_ModEnd> y_mode_mode [ size_t",0
930,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> skcipher_setkey ( skcipher <S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
931,<S2SV_ModStart> ) { return 1 <S2SV_ModEnd> ; } if,0
932,"<S2SV_ModStart> c -> tile_width <S2SV_ModEnd>, 16 ) <S2SV_ModStart>, 16 ) * 3",1
933,<S2SV_ModStart> key ) ; if (!,0
934,,1
935,"<S2SV_ModStart> i, NULL <S2SV_ModEnd> ) ; return",0
936,"<S2SV_ModStart> p ) { return <S2SV_ModEnd> chdlc_print ( ndo <S2SV_ModStart>, p, h -> len <S2SV_ModEnd> ) ; }",1
937,<S2SV_ModStart> (! rc <S2SV_ModEnd> && tcon ),1
938,<S2SV_ModStart> -> len && SKB_EXT_ERR ( skb ) -> opt_stats <S2SV_ModEnd> ) put_cmsg (,1
939,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ) ;",1
940,<S2SV_ModStart> { if (! SSL_IS_UNEXPECTED_MESSAGE ) { al = SSLerr ( SSLerr ) ; goto f_err ; } if (,0
941,<S2SV_ModStart> { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE ) { return SECURE_ELEMENT_ERROR_BUF_SIZE,1
942,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
943,<S2SV_ModStart> = ucounts ; new_ns -> mounts = 0 ; new_ns -> pending_mounts = 0 ;,1
944,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
945,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } if (,0
946,<S2SV_ModStart> = r ; unsigned int actual_size = r -> begin < actual_size? r -> begin : 0 ; unsigned int limit_r_begin = r -> begin < actual_size? r -> end : actual_size ; unsigned int limit_r_begin = ( r -> begin < actual_size? r -> begin : actual_size ) ; unsigned int limit_end = r -> begin < actual_size? r -> end : actual_size ; unsigned int limit_r_begin = r -> begin < actual_size? r -> begin : actual_size? r -> end : actual_size ; unsigned int limit_r_begin = r -> begin < actual_size? r -> begin : actual_size? r -> begin : actual_size : actual_size ;,0
947,<S2SV_ModStart>,0
948,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
949,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vp9_write_bit_buffer ( vpx_tree <S2SV_ModEnd> * w, <S2SV_ModStart> int n, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> int n, vpx_writer <S2SV_ModEnd> ) ; const <S2SV_ModStart> p = vpx_wb_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 1 ) ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> t ) ; vpx_write_bit <S2SV_ModEnd> ( w,",0
950,"<S2SV_ModStart> ; vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
951,<S2SV_ModStart> * dev ; <S2SV_ModEnd> const char *,0
952,"<S2SV_ModStart> int num_descriptors ; int num_descriptors ; num_descriptors ; n < sizeof ( struct hid_descriptors ) - EINVAL ; if ( n < sizeof ( struct hid_descriptors ) ) { dev_err ( ""hid <S2SV_blank> descriptor <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - EINVAL ; } <S2SV_ModStart> ; n < num_descriptors <S2SV_ModEnd> ; n ++",0
953,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static ND_PRINT ( ( ndo, sizeof ( struct ipv6_addr_len ) <S2SV_ModEnd> ) { ND_PRINT <S2SV_ModStart> ndo -> ndo_vflag ) ; <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> num + 1 <S2SV_ModEnd> ) ; }",0
954,"<S2SV_ModStart> group_dead ) ; if ( group_dead ) audit_free ( tsk ) ; group_dead = group_dead ; if ( group_dead ) audit2 ( tsk -> audit_context ) ; group_dead = group_dead ; if ( group_dead ) audit_free ( tsk ) ; group_dead = group_dead ; group_dead = group_dead ( ) ; if ( group_dead ) audit_free ( tsk ) ; module_put ( group_dead ) ; exit_dead ( tsk, group_dead ) ; module_put ( group_dead <S2SV_ModEnd> ) ; if <S2SV_ModStart> group_dead ) ; <S2SV_ModEnd> if ( group_dead",0
955,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> data ) { <S2SV_ModEnd> add_preferred_base_object ( name <S2SV_ModStart> |= OBJECT_ADDED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
956,<S2SV_ModStart> ; break ; if (,0
957,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
958,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> i2 ] ; const tran_low_t <S2SV_ModEnd> y1_low_t <S2SV_ModStart> i2 ] ; vpx_codec_err_t x1_hdr_t <S2SV_ModEnd> w = ( <S2SV_ModStart> w1 ) ; <S2SV_ModEnd> x2 = ( w <S2SV_ModStart> ; if ( ( x1_hdr_len < 2 ) <S2SV_ModStart> ++ ) { x0 ] = ( x1, y1_l <S2SV_ModEnd>, i1 ) <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( w1, <S2SV_ModStart> ) ) ; } else { x1 = ( x2, 0.3 ) ; } <S2SV_ModStart> ++ ) { x1_hdr_len = ( x2, x2, x1_l <S2SV_ModEnd>, i1, <S2SV_ModStart> ; } } }",0
959,<S2SV_ModStart> ( tag == ASN1_EOC <S2SV_ModEnd> ) { if <S2SV_ModStart> <= 0x7f ) goto check_overrun_error ; <S2SV_ModEnd> if ( check_length <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( len <S2SV_ModStart> <= 0x7f ) goto check_overrun_error ; <S2SV_ModStart> goto data_length ; <S2SV_ModEnd> if ( len <S2SV_ModStart> goto data_length ; },0
960,<S2SV_ModStart> ) val ; <S2SV_ModEnd> memset ( ptr,1
961,<S2SV_ModStart> mntent * mount <S2SV_ModEnd> ) { return,0
962,"<S2SV_ModStart> PHP_SHA512_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( sig_len < sizeof ( digest ) ) { spprintf ( error, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } } <S2SV_ModStart> PHP_MD5_CTX context ; if ( sig_len < sizeof ( digest <S2SV_ModEnd> ) ) { <S2SV_ModStart> FAILURE ; } if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } return FAILURE ; }",0
963,<S2SV_ModStart> ] <= max && value [ n ] - min < field -> maxusage <S2SV_ModStart> && value [ n ] - min < field -> maxusage &&,0
964,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
965,<S2SV_ModStart> if ( argReg > <S2SV_ModEnd> regsz ) { <S2SV_ModStart> regsz ) { return ;,1
966,"<S2SV_ModStart> ( req, remote_address ( req, false ) <S2SV_ModEnd> ) ; }",0
967,"<S2SV_ModStart> 0 ) ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> -> i_mount, args -> rmtvaluelen <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; return 0 <S2SV_ModStart> -> valuelen < args -> rmtvaluelen ) { args -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; return XFS_ERROR <S2SV_ModStart> -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; } return",1
968,<S2SV_ModStart> size - 1 <S2SV_ModEnd> ; if (,0
969,<S2SV_ModStart> 1 ) { # if CONFIG_VP9_HIGHBITS <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> ) ) { # endif,0
970,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) &&! test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) &&",1
971,"<S2SV_ModStart> ) ) ; if ( LTXTQUERY_TOO_BIG ( state. num, state. sumlen ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""ltxtquery <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ) ) ;",1
972,<S2SV_ModStart> ; if ( line >= 0 &&,0
973,<S2SV_ModStart> ; if (! EXT4_SB ( inode -> i_sb ) -> s_journal <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd>! handle ),1
974,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = str ; if ( str ) { return false ; } <S2SV_ModEnd> if ( str <S2SV_ModStart> == '\\0' ) { <S2SV_ModStart> = str ; return 0 ; } <S2SV_ModEnd> } if (,0
975,"<S2SV_ModStart> ( f, ""PG%31[ <S2SV_blank> \\t%c%31[ <S2SV_blank> \\t]"" <S2SV_ModEnd>, temp,",0
976,<S2SV_ModStart> ( size <= 8 <S2SV_ModEnd> ) ; ASSERT,0
977,<S2SV_ModStart> ) ) return <S2SV_ModEnd> ; if (,0
978,<S2SV_ModStart> len ) { if ( len < str ) { <S2SV_ModStart> str ; return ; },0
979,"<S2SV_ModStart> char * pre ; memset ( pre, 0, sizeof ( * to ) ) ; if ( <S2SV_ModEnd> ( g. <S2SV_ModStart>. outname ) == 0 ) { sufx = pre ; } else memcpy ( pre, to, 0, len ) ; if ( g. inf ) == 0 ) { sufx = sufx ; } else sufx = g. inf ; } else if ( <S2SV_ModEnd> strdup ( <S2SV_ModStart> == 0 ) sufx ) sufx = sufx ; len = pre + pre + len ; memcpy ( pre, <S2SV_ModEnd> strlen ( to <S2SV_ModStart>, pre + pre, <S2SV_ModEnd> strlen ( pre <S2SV_ModStart>. outname ) <S2SV_ModEnd> ; if ( <S2SV_ModStart>. outf + pre ) == 0 ) { sufx = sufx ; } else sufx = pre + len ; <S2SV_ModStart>. outname = pre + len ; memcpy ( pre, to, len + len, <S2SV_ModEnd> strlen ( pre <S2SV_ModStart>. outname ) ; <S2SV_ModEnd> return 0 ;",0
980,,1
981,<S2SV_ModStart> * output ; MagickBooleanType status ; <S2SV_ModStart> ) ; } status = MagickTrue ; <S2SV_ModStart> i ++ ) { <S2SV_ModEnd> input = fopen_utf8 <S2SV_ModStart> ( void ) fopen_utf8 ( void ) fclose ( void ) ; <S2SV_ModStart> ( void ) fclose ( void ) status ; <S2SV_ModStart> ( void ) fclose ( <S2SV_ModEnd> output ) ; <S2SV_ModStart> ( void ) fclose ( void ) fclose ( void ) fclose ( void ) ;,0
982,<S2SV_ModStart> si ) { SvcInternal_t <S2SV_ModEnd> * svcInternal =,0
983,"<S2SV_ModStart> ( bbdev, ""%s <S2SV_blank> invalid <S2SV_blank> "", __func__ )",0
984,"<S2SV_ModStart> passwd * pwd, const char * prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> & tmpname, ""/etc"", prefix <S2SV_ModEnd> ) ) ==",1
985,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
986,<S2SV_ModStart> s ) { return false <S2SV_ModEnd> ; } <,0
987,"<S2SV_ModStart> TRUE ; } Jid * my_jid = jid_create ( stanza_from ) ; const char * msg_jid = jid_create ( stanza_from ) ; if ( stanza_get_from ( stanza -> barejid, stanza_jid -> barejid )!= 0 ) { g_create ( stanza_jid -> barejid, stanza_jid -> barejid, stanza_from ) ; return TRUE ; }",0
988,<S2SV_ModStart> = server. ds_address <S2SV_ModEnd> ; if (,0
989,<S2SV_ModStart> * dev ; <S2SV_ModEnd> const char *,0
990,"<S2SV_ModStart> ; arg_options = fname <S2SV_ModEnd> ( LOG_INFO <S2SV_ModStart> ( LOG_DEBUG, ""Cannot <S2SV_blank> open <S2SV_blank> open <S2SV_blank> %d <S2SV_blank> # <S2SV_blank> %s\\n"", __func__, arg_options ) ; exit ( - 1 ) ; } if ( <S2SV_ModStart> ) ) { if ( is_opt ( ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> a <S2SV_blank> %s\\n"", arg_name ) ; exit ( EXIT_FAILURE ) ; } if ( <S2SV_ModStart> (arg ) ) { log_info ( LOG_DEBUG_DEBUG, ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> %s\\n"", EXIT_FAILURE_FAILURE ) ; exit ( 1 ) ; } } if (",0
991,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; BT_DBG (,1
992,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
993,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> ND_PRINT32 ( (,0
994,<S2SV_ModStart> = e_error ; if ( IMPEG2D_UNSUPPORTED_DIMENSIONS == e_error ) { return IMPEG2D_ERROR_T ; },0
995,<S2SV_ModStart> * zone ; size_t tilemap_size ; <S2SV_ModStart>. height ; tilemap_size = <S2SV_ModEnd> x_size * tilemap_size <S2SV_ModStart> struct map_size ; tilemap_size = malloc ( tilemap_size,0
996,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ; return ( 0 ) <S2SV_ModStart>, length ) ; ND_TCHECK2 ( cp [ 2 ] <S2SV_ModStart> ) ) { ND_TCHECK2 ( cp [ len ], 4 ) ; <S2SV_ModStart> ) ; } return ( 0 ) ;",0
997,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
998,<S2SV_ModStart>. end - 1 <S2SV_ModEnd> ) ; },0
999,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; L_BUFS,0
1000,<S2SV_ModStart> if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks,1
1001,"<S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu,",1
1002,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } else if,0
1003,<S2SV_ModStart> studio_profile ) { <S2SV_ModEnd> if (!,1
1004,<S2SV_ModStart> nsops < 1 || nsops > SEMOPM,1
1005,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( s,",0
1006,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; },1
1007,<S2SV_ModStart> } if ( ( i -> width > 0 || ( i -> width > 4 ) ) { # ifdef CONFIG_VP9_HIGHBITDEPTH if ( ( i -> width > 0 ) fprintf ( NGIFLOW ) - 1 ; # endif,0
1008,<S2SV_ModStart> if ( q < p || q,0
1009,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( bytes_matched <S2SV_ModStart> max_bytes_matched ) break ; bytes_matched = bytes_matched <S2SV_ModEnd> ; break ;,0
1010,"<S2SV_ModStart> len ) { assert ( len < 2 ) ; <S2SV_ModStart> case LEX_EOF : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""EOF"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_ID : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_INT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_FLOAT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_FLOAT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""TEMPLATE <S2SV_blank> STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""TEMPLATE <S2SV_blank> STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""TEM",0
1011,<S2SV_ModStart> mnt_instance ) ; if ( unlikely (! list_empty ( & mnt -> mnt_mounts ) ) ) return ;,0
1012,"<S2SV_ModStart> write_literal ( w, vpx_write_literal <S2SV_ModEnd> * w, <S2SV_ModStart> w ) { vpx_wb_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 8 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( w,",0
1013,,1
1014,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
1015,"<S2SV_ModStart> ; int err <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> uint32_t pos ; if ( inode -> i_size > inode -> i_sb -> s_blocksize ) { err = - ENAMETOOLONG ; goto out_unlock_inode ; } <S2SV_ModStart> ( inode, bh <S2SV_ModEnd>, bh ) <S2SV_ModStart> return 0 ; out_unmap :",0
1016,<S2SV_ModStart> else if ( cpu_has_secondary_exec_ctrls ( ) && ( vmcs_read32 ( SECONDARY_VM_EXEC_CONTROL ) & SECONDARY_EXEC_VIRTUALIZE_X2APIC_MODE ) <S2SV_ModEnd> ) { if,1
1017,<S2SV_ModStart> if ( ent == NULL ) { st = KRB5_NOENTRY ; <S2SV_ModEnd> if ( ent,0
1018,<S2SV_ModStart> 1 ) ; if ( ( UWORD32 ) ) { return ret ; },0
1019,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int b_blocks <S2SV_ModStart> int bhdr ; int bsize = sizeof ( struct bhdr ) { int i_blocks = 0 ; <S2SV_ModStart> = b_blocks [ i ]. b_blocks = 0 ; <S2SV_ModStart> -> b_data. b_blocks [ i ]. b_blocks = 0 ; <S2SV_ModStart> int nb_blocks [ i ]. b_blocks = 0 ; if ( i ++ ) { if ( nb_blocks >= max_chunk_size ) { map [ i ]. b_data [ i ]. b_blocks = 0 ; break ; } <S2SV_ModStart> = 0 ; if ( i ++ ) { <S2SV_ModStart> -> b_data [ i ]. b_map [ i ]. b_map [ i ]. b_blocksize_data [ i ]. bsize << i ]. b_blocks ++ ; if ( i ]. b_blocks >= max_blocks ) { int bsize = 0 ; ip_data [ i ]. b_blocks = 0 ; ip_data [ i ]. b_blocksize ; ip_data [ i ]. bsize,0
1020,"<S2SV_ModStart> ( psf, "" <S2SV_ModEnd> ) ; if",0
1021,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( i,1
1022,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
1023,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1024,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0644 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",0
1025,"<S2SV_ModStart> int num_items_scanned ; guint pkt_len ; int <S2SV_ModEnd> pktnum, hr <S2SV_ModStart> + 64, ""LEN=%9u"" <S2SV_ModEnd>, & pkt_len <S2SV_ModStart> FALSE ; } if ( pkt_len > WTAP_MAX_PACKET_SIZE ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup_printf ( ""toshiba: <S2SV_blank> File <S2SV_blank> has <S2SV_blank> %u-byte <S2SV_blank> packet, <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> maximum <S2SV_blank> of <S2SV_blank> %u"", pkt_len, WTAP_MAX_PACKET_SIZE ) ; return FALSE ; } <S2SV_ModStart> ( buf, pkt_len <S2SV_ModEnd> ) ; if",0
1026,<S2SV_ModStart> ; int err = 0 ; msg -> msg_namelen,1
1027,"<S2SV_ModStart> ; if ( zend_hash_find <S2SV_ModEnd> ( ht,",1
1028,<S2SV_ModStart> ( * target <S2SV_ModEnd> ) ; if,0
1029,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> ; } } io -> io_cleanup = io -> io_cleanup ;,0
1030,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",0
1031,<S2SV_ModStart> p -> tokenpos >= ( <S2SV_ModEnd> p -> tokenlen <S2SV_ModStart> p -> tokenlen - 1 ),1
1032,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> switch ( vpx_mv12_tree <S2SV_ModEnd> ( vpx_mv12_8x8_mv12_8_8_8_t <S2SV_ModEnd> * bw, <S2SV_ModStart> switch ( vpx_mv12_tree <S2SV_ModEnd> ) { case <S2SV_ModStart> case BLOCK_8X8 : case vpx_mv12_8_8_8x8_8_8_8_16 : vpx_tree_mv12_8_mv12_8x16 ( vpx_mv12_8_8_mvs, vpx_mv12_tree <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLOCK_8X8 : vpx_mv12_8X8_8_8X8_8 : <S2SV_ModEnd> return ;",0
1033,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1034,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; },0
1035,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
1036,"<S2SV_ModStart> ( req, EINVAL <S2SV_ModEnd>, NULL,",0
1037,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1038,"<S2SV_ModStart> -> stratum_port ; snprintf ( address, 254 <S2SV_ModEnd>, ""%s:%s"",",1
1039,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> } else { char * page_str ( page ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
1040,<S2SV_ModStart> + i ; unsigned int actual_size = f -> blocksize_1 / 2 ; unsigned int limit_r_begin = r -> begin < actual_size? r -> begin : actual_size ; unsigned int limit_end = r -> end < actual_size? r -> end : actual_size ; unsigned int limit_end = f -> begin < actual_size? r -> end : actual_size ; <S2SV_ModStart> int n_read = limit_end - limit_r_begin <S2SV_ModEnd> ; int limit_end,0
1041,<S2SV_ModStart> head -> iov_base ; if ( hdr > head -> iov_len ) return 0,1
1042,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
1043,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> frame_buf_buf ) { if (! ( vb2 ) ) return 0 ; <S2SV_ModStart> ) break ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1044,"<S2SV_ModStart> size_t ptr, size_t len",0
1045,<S2SV_ModStart> ; ssize_t count ; if ( bytes == 0 || items == 0 ) return 0,1
1046,<S2SV_ModStart> ; if (! rxh ) <S2SV_ModEnd> return 0 ;,0
1047,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,0
1048,<S2SV_ModStart> ; if ( ( priv -> cid == NULL ) return - ENOMEM ;,0
1049,<S2SV_ModStart> ; sval ) <S2SV_ModEnd> ; if (,0
1050,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1051,<S2SV_ModStart> 0 ) ; hrtimer_try_to_cancel <S2SV_ModEnd> ( & stime,1
1052,<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { <S2SV_ModEnd> if ( p,0
1053,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct l2tp_conf_r_t * ptr <S2SV_ModEnd> ; struct rfc <S2SV_ModStart> req ) ; if (! ptr ) return - EINVAL ; memset ( & ptr, 0, sizeof ( rfc ) ) ; ptr = l2cap_interface ( & ptr, 0, sizeof ( rfc ) ) ; if (! rfc. mode ) return - EINVAL ; memset ( & ptr, 0, sizeof ( rfc ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> case L2CAP_DEFAULT_MAX_SUPPORTED : if ( rfc. mode!= sizeof ( rfc ) ) goto done ; rfc. mode = L2CAP_REQ_MODE_MIN_STREAMING ; break ; <S2SV_ModStart> case L2CAP_REQ_REQ : if ( rfc. mode!= sizeof ( rfc ) ) goto done ; rfc. mode = L2CAP_REQ_MODE_REQ_STREAM ; rfc. mode = L2CAP_CONN_REQ ; break ; } <S2SV_ModStart> case L2CAP_REQ_REQ :",0
1054,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1055,<S2SV_ModStart> -> chunksize = UINT64_MAX <S2SV_ModEnd> ; for (,1
1056,<S2SV_ModStart> u1_first_slice_in_pic = 0,0
1057,<S2SV_ModStart> == 0 ) {,0
1058,<S2SV_ModStart> } err = crypto_rng_alg ( tfm ) <S2SV_ModEnd> -> seed (,1
1059,<S2SV_ModStart> = uid ; <S2SV_ModEnd> new -> count <S2SV_ModStart> new -> count = 0 <S2SV_ModEnd> ; spin_lock_irq ( <S2SV_ModStart> } if ( <S2SV_ModEnd> ucounts -> count <S2SV_ModStart> ucounts -> count == INT_MAX ) ucounts = NULL ; else ucounts -> count += 1 <S2SV_ModEnd> ; spin_unlock_irq (,1
1060,<S2SV_ModStart> ) ; } if ( err == 0 ) goto out_put ; if ( datagrams <S2SV_ModEnd> == 0 ) <S2SV_ModStart> == 0 ) { datagrams = err ; goto out_put ; } <S2SV_ModEnd> if ( err <S2SV_ModStart> err ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1061,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1062,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> = 0 ; ( void ) len ;,0
1063,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { if ( <S2SV_ModStart> ) ; } if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result ) ;,1
1064,"<S2SV_ModStart> * fmode_t fmode_t fmode, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> -> state ; mutex_unlock ( & fmode, fmode ) ; <S2SV_ModStart> -> state, fmode <S2SV_ModEnd> ) ; goto",0
1065,"<S2SV_ModStart> ResourceLimitError, ""MemoryAllocationFailed"" ) ; ( void ) ResetMagickMemory ( global_colormap, 0, 256 ) ;",0
1066,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1067,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1068,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int64_t subsampling_y, int64_t <S2SV_ModStart> sse, int64_t bsse, int bsize <S2SV_ModStart>, int64_t bd_thresh, cpi <S2SV_ModEnd> ) { int <S2SV_ModStart> 0 ] ; int64_t cpi <S2SV_ModEnd> ; int64_t <S2SV_ModStart> 0 ] ; int64_t tx_size = cpi -> oxcf. sse ; if ( cpi -> oxcf. mbmi. mbmi. subsampling_y ) { if ( xd -> mbmi. sse == BLOCK_SIZE / 2 ) { if ( cpi -> common. subsampling_y == BLOCK_SIZE / 2 ) return - 1 ; } <S2SV_ModEnd> if ( x <S2SV_ModStart>, bsize, bsize, bsize, pd <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null>",0
1069,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1070,"<S2SV_ModStart> ; if ( snpal == 6 ) ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> SNPA <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> %s"", snpal, etheraddr_string ( ndo, snpal ) ) ) ; else ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> SNPA <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> %s"", snpal, snpal, netal, snpal ) ) ) ; if ( ndo, snpal ) ND_PRINT ( ( ndo, snpal ) ) ) ; else ND_PRINT ( ndo, ""\\n\\n\\n\\n\\t <S2SV_blank> <S2SV_ModEnd> ) ; break",0
1071,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1072,"<S2SV_ModStart> int segment_id, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> <S2SV_null> <S2SV_null>",0
1073,<S2SV_ModStart> ; uint32_t backup_handle = 0 <S2SV_ModStart> ret == 0 ) { if ( <S2SV_ModEnd> res -> backup <S2SV_ModStart> goto out_unlock ; } else { backup_handle = req -> buffer_handle ; },1
1074,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool success <S2SV_ModStart> struct desc_struct desc_struct * out, <S2SV_ModEnd> unsigned short sel <S2SV_ModStart> SEGMENT_LDT ) { bool success = true ; <S2SV_ModEnd> } else { <S2SV_ModStart> ) ; return false <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>",0
1075,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",0
1076,"<S2SV_ModStart> ) ; struct ipv6_addr dst_saddr * final ; struct <S2SV_ModStart> ) ; } final_p = fl6_dst ( np -> opt, np -> opt, final ) ; <S2SV_ModStart> sctp, final ; final_saddr = fl6_dst ( fl6, np -> opt, & final ) ; <S2SV_ModStart> saddr = fl6_update_dst ( fl6, final ) ; <S2SV_ModStart>, false ) ; <S2SV_ModEnd> if ( fl6_update_dst ( np <S2SV_ModStart>, fl6, & final ) ; <S2SV_ModStart>, fl6, np -> opt <S2SV_ModEnd>, false ) <S2SV_ModStart>, false )",0
1077,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1078,<S2SV_ModStart> len ) ; if (! buf ) return 0 ;,0
1079,<S2SV_ModStart> ; register_buffer = NULL <S2SV_ModEnd> ; if (,0
1080,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> < ie && <S2SV_ModEnd> ND_TTEST ( *,1
1081,"<S2SV_ModStart> ( interface, KSZ8851_EV ) ; if ( ( status & KSZ8851_EVENT_TX_SIZE ) ) { <S2SV_ModStart> ( interface, KSZ8851_EVENT_ERROR ) ; } <S2SV_ModStart> ( interface, KSZ8851_TX_SIZE <S2SV_ModEnd> ) ; return",0
1082,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1083,<S2SV_ModStart> return true ; <S2SV_ModEnd> } if (,0
1084,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
1085,<S2SV_ModStart> prefix ) ; <S2SV_ModEnd> return 0 ;,0
1086,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = xdst_4 ( NONE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ++ ) { if ( ndo_y > 0x4 ) return ( - 1 ) <S2SV_ModStart> + 1 ; <S2SV_ModEnd> x4 = ( <S2SV_ModStart> + 1 ) <S2SV_ModEnd> goto out ;,0
1087,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
1088,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1089,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1090,"<S2SV_ModStart> 0 ) ; minsz = R_MAX ( minsz, len, 0 ) ; <S2SV_ModStart> ; j < minsz <S2SV_ModEnd> ; j ++ <S2SV_ModStart> ; j ++ ) { <S2SV_ModStart> ++ ) ; } <S2SV_ModEnd> ptr = R_MAX",0
1091,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> out_width ) { const int frames_to_size ( int ) <S2SV_ModStart> = 0 ; int fprintf ( stderr, ""Usage: <S2SV_blank> %s <S2SV_blank> length <S2SV_blank> %s\\n"", outbuf ) ; return 0 ; } <S2SV_ModEnd> if ( fput <S2SV_ModStart> ) ) { printf ( ""\\n <S2SV_blank> to <S2SV_blank> %s\\n"", out ) ; <S2SV_ModStart> ) ; } return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
1092,<S2SV_ModStart> + DSPQ_DATA_BUFF ; head <S2SV_ModEnd> + tail ; head <S2SV_ModStart> + JQS_wQS_wHead ) ; tail = head <S2SV_ModEnd> ; head = <S2SV_ModStart> + JQS_wHead ) ; if ( head > size ) head = <S2SV_ModEnd> + JQS2SV_null> <S2SV_null>,0
1093,<S2SV_ModStart> * opcode_desc ; if ( len < 2 ) { return NULL ; },1
1094,<S2SV_ModStart> ACPI_STATUS Status ; <S2SV_ModEnd> ACPI_OPERAND_OBJECT * Prev <S2SV_ModStart> ACPI_OPERAND_OBJECT * Prev = NULL <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> if (!,0
1095,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
1096,<S2SV_ModStart> [ sizeof ( the_url <S2SV_ModEnd> ) - 1,0
1097,<S2SV_ModStart> obj ) { Py_RETURN_NONE <S2SV_ModEnd> ; } if,0
1098,"<S2SV_ModStart>, & key_data <S2SV_ModEnd> ) ; if",0
1099,<S2SV_ModStart> vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; priv = <S2SV_ModStart> vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; vpx_codec_alg_priv_t * <S2SV_ModStart> priv = NULL <S2SV_ModEnd> ; vpx_codec_alg_priv_t * <S2SV_ModStart> ctx -> cfg <S2SV_ModEnd> ; ctx -> <S2SV_ModStart> ctx -> cfg ; priv = ( priv -> cfg_t * ) priv <S2SV_ModEnd> -> cfg. <S2SV_ModStart> ctx -> cfg ; priv <S2SV_ModEnd> -> cfg ; <S2SV_ModStart> = NULL ; priv <S2SV_ModEnd> if ( priv <S2SV_ModStart> -> cfg ; priv <S2SV_ModEnd> == NULL &&,0
1100,"<S2SV_ModStart> error ) { if ( bp && ( <S2SV_ModEnd> xfs_da_shrink_inode ( args <S2SV_ModStart>, bp )!= 0 ) <S2SV_ModEnd> ) goto out",1
1101,<S2SV_ModStart> ; } return 0,0
1102,<S2SV_ModStart> list ) ; mutex_lock ( & timeri -> timer_list ) ; list_unlock ( & timeri -> lock ) ;,0
1103,<S2SV_ModStart> return err ; if (! <S2SV_ModEnd> attrs [ TIPC_NLA_NLA_SOCK <S2SV_ModStart> [ TIPC_NLA_SOCK <S2SV_ModEnd> ] ) return <S2SV_ModStart> attrs [ TIPC_NLA_NLA_NLA_SOCK <S2SV_ModEnd> ] ; if <S2SV_ModStart> [ TIPC_NLA_NLA_NLA_SOCK ] = TIPC_NLA_NLA_SOCK <S2SV_ModEnd> [ TIPC_REF ] <S2SV_ModStart> [ TIPC_NLA_NLA_SOCK ] <S2SV_ModEnd> ; if ( <S2SV_ModStart> [ TIPC_NLA_NLA_NLA_NLA_SOCK ] <S2SV_ModEnd> ) return - <S2SV_ModStart> attrs [ TIPC_NLA_NLA_NLA_NLA_NLA_SOCK <S2SV_ModEnd> ] ; if,0
1104,<S2SV_ModStart> ( ) { <S2SV_ModEnd> vpx_codec_alg_priv_t * ctx <S2SV_ModStart> ctx ) ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> == 0 ; <S2SV_ModEnd> if (!,0
1105,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1106,<S2SV_ModStart> ) buffer ; if ( total_len < sizeof ( * cap ) || total_len < <S2SV_ModEnd> cap -> bLength <S2SV_ModStart> cap -> bLength ) { dev -> bos -> desc -> bNumDeviceCaps = i ; break ; } length = cap -> bLength <S2SV_ModEnd> ; total_len -=,1
1107,<S2SV_ModStart> task = current <S2SV_ModEnd> ; if (,1
1108,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo ->,0
1109,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd> ) ; size <S2SV_ModStart> ( interface, ENC28J60_MICMD, ENC28J60_MICMD <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> ) ; }",0
1110,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1111,<S2SV_ModStart> = 0 ; sk_set_opt ( sk ) ;,0
1112,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
1113,<S2SV_ModStart>! saw_digit ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\r' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\n' ) { bp ++ ; <S2SV_ModStart> goto invalid ; },0
1114,"<S2SV_ModStart> ; args -> rmtvaluelen = be32_to_cpu ( name_rmt -> valuelen ) ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ( name_rmt -> <S2SV_ModEnd> valueblk ) ; <S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; return",1
1115,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1116,<S2SV_ModStart> = object_entry ; <S2SV_ModEnd> if (!,0
1117,"<S2SV_ModStart> = 0 ; i >= 0 && <S2SV_ModStart> out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; break ; }",0
1118,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1119,<S2SV_ModStart> u8 label_len ; <S2SV_ModEnd> GET8 ( label_len <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ;,1
1120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( cc % <S2SV_ModStart> * stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpAcc"", ""%s"", ""cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> tmp ) ; return 1 ;",1
1121,"<S2SV_ModStart> -> vm_ops ) <S2SV_ModEnd> return do_fault ( <S2SV_ModStart>, pte, pmd, flags, entry ) ; <S2SV_ModEnd> return do_anonymous_page ( <S2SV_ModStart>, address, pte, pmd, <S2SV_ModEnd> flags ) ;",1
1122,"<S2SV_ModStart> s ) { size_t len = strlen ( s ) + 1 ; <S2SV_ModStart> = pool_alloc ( len ) ; memcpy <S2SV_ModEnd> ( r, <S2SV_ModStart> r, s, len",1
1123,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1124,"<S2SV_ModStart>! new_idmap_permitted ( file,",1
1125,,0
1126,<S2SV_ModStart> p_eprintf ( 0,0
1127,<S2SV_ModStart> ( mf -> fname <S2SV_ModEnd> ) ; if,0
1128,<S2SV_ModStart> 0 ) { if ( advance < 0 ) return ; <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) return ;,0
1129,<S2SV_ModStart> i ] ; size_t i ; if ( len == AVERROR_INVALID_LIMING ) { return NULL ; } <S2SV_ModStart> case MAPI_ERROR : assert ( a -> type == NULL ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> i ++ ;,0
1130,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo ->,0
1131,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1132,"<S2SV_ModStart> sse, cpi <S2SV_ModEnd> ) ; if",0
1133,"<S2SV_ModStart> ( ) + 1, T1_BUF_SIZE <S2SV_ModEnd> ) ; alloc_array",0
1134,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> va_list args ) <S2SV_ModEnd> ; vpx_codec_err_t *",0
1135,<S2SV_ModStart> ctxt ) ; if (! ( efer & EINVAL ) ) return emulate_ud ( ctxt,0
1136,<S2SV_ModStart> + 1 ; if ( c -> data_size >= 8 ) return AVERROR_INVALIDDATA ; if (,0
1137,"<S2SV_ModStart>, expr_type, n, true",0
1138,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int motion_avg_y_y_stride <S2SV_ModEnd> unsigned char * <S2SV_ModStart> int motion_avg, int increase_avg_y, int running_avg_y, int running_avg_y, int increase_avg <S2SV_ModEnd> ) { int <S2SV_ModStart> int i ; unsigned char * running_avg_y = running_avg_y ; unsigned char * running_avg = running_avg_y ; unsigned char * running_avg_y = running_avg ; unsigned char * running_avg_y ; unsigned int increase_avg_y_y = running_avg_y ; unsigned char * running_avg = running_avg_avg_y ; unsigned char * running_avg_y = 0 ; unsigned int shift_y_avg_y_stride ; int increase_avg_y_y = running_avg_y ( arg, increase, motion_avg_y, increase_denoising )? 1 : 1 : 0 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } else <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } else { <S2SV_ModStart>",0
1139,<S2SV_ModStart> + 8 ; if ( len < 2 ) { <S2SV_ModStart> = 16 ; },0
1140,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; if (,0
1141,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
1142,<S2SV_ModStart> * op_dev ; <S2SV_ModEnd> struct xd_dev_dev_t op_dev <S2SV_ModStart> x4_dev_group ) { xd_dev_dev_err ( ) <S2SV_ModEnd> ) ; xop ->,0
1143,"<S2SV_ModStart> ndp, false",0
1144,"<S2SV_ModStart> ; int error ; struct mb2_cache * ext2_mb_cache = EXT2_SB ( inode -> i_sb ) -> s_mb_cache, new_cache ) ; if ( <S2SV_ModEnd> ( new_mb_cache,",0
1145,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1146,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1147,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; rc <S2SV_ModEnd> return rc ;",0
1148,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1149,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1150,<S2SV_ModStart> 3 * len + 8,1
1151,<S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; lval <S2SV_ModEnd> ; } else <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { if ( Z_LVAL ( lval )!= IS_LONG ) { zval lval ; lval = * var ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { points [ i ]. y = <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { points [ i ]. y = <S2SV_ModStart>. y = Z_LVAL ( lval ) ; },0
1152,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1153,"<S2SV_ModStart> ; } } # if CONFIG_PIX_HIGHBITDEPTH if ( img, MagickFalse ) { for ( = 0 ; i < 3 ; i ++ ) { for ( i = 0 ; i < 3 ; i ++ ) { for ( i = 0 ; i < MagickFalse ; ++ ) { for ( i = 0 ; i < MagickFalse ; ++ ) { for ( i = 0 ; i < MagickFalse ; ++ ) { for ( i = 0 ; i < MagickFalse ; ++ ) { for ( = 0 ; i < MagickFalse ; ++ ) { for ( i = 0 ; i < MagickFalse ; ++ ) * MagickFalse ; break ; } <S2SV_ModStart> ; } } }",0
1154,"<S2SV_ModStart> ( ) + 1, T1_BUF_SIZE <S2SV_ModEnd> ) ; alloc_array",0
1155,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; if ( ctx -> frame_parallel_decode ) { set_error_detail ( ctx, ""Not <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> frame <S2SV_blank> parallel <S2SV_blank> decode"" ) ; return VPX_CODEC_INCAPABLE ; } <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModStart> pbi -> data1 ; FrameWorkerData * const frame_worker_data = ( frame_worker_data <S2SV_ModEnd> -> pbi ->",0
1156,"<S2SV_ModStart>. path ; return Curl_urldecode <S2SV_ModEnd> ( data, <S2SV_ModStart>, 0, & <S2SV_ModEnd> pop3c -> mailbox <S2SV_ModStart> pop3c -> mailbox, NULL, TRUE ) <S2SV_ModEnd> ; } <S2SV_null>",1
1157,<S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ;,1
1158,"<S2SV_ModStart> gb ) ; if ( s -> ref && sh -> first_slice_in_pic_flag ) { av_log ( s -> avctx, AV_LOG_ERROR, ""Two <S2SV_blank> slices <S2SV_blank> reporting <S2SV_blank> being <S2SV_blank> the <S2SV_blank> first <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> frame.\\n"" ) ; return 1 ; }",1
1159,<S2SV_ModStart> return ret ; <S2SV_ModEnd> } ps_dec ->,0
1160,<S2SV_ModStart> return IMPEG2D_MB_TEX_DECODE_ERR ; <S2SV_ModEnd> if ( 0,0
1161,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> cm -> cfg <S2SV_ModStart> cpi ) { const VP9_COMMON * const cm = & cm -> cfg ; <S2SV_ModEnd> cm -> cfg <S2SV_ModStart> ; const vpx_get_frame_state ( cm -> frame_state,0
1162,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1163,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> intra_block_boost_block_width ( <S2SV_ModEnd> TX_SIZE bd_width, <S2SV_ModStart> TX_SIZE tx_size, <S2SV_ModEnd> BLOCK_SIZE bd_size, <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1164,<S2SV_ModStart> -> mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor <S2SV_ModEnd> ; if (,1
1165,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
1166,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> fmt, 1 <S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, sizeof",1
1167,<S2SV_ModStart> ; int row <S2SV_ModEnd> = 0 ; <S2SV_ModStart> return 0 ; } <S2SV_ModEnd> if ( tile,0
1168,<S2SV_ModStart> case suite : case func_body_suite :,0
1169,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1170,<S2SV_ModStart> ( upid == INT_MIN ) return - ESRCH ; if ( upid ==,1
1171,"<S2SV_ModStart> siocb -> scm, false",1
1172,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1173,"<S2SV_ModStart>, plane ) * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? 2 : 1 )",0
1174,"<S2SV_ModStart> ; uint16_t len, avp_len <S2SV_ModEnd> ) { uint8_t <S2SV_ModStart> avp ) ; uint16_t len ; uint8_t alt_len = len ; uint8_t len <S2SV_ModStart> avp_len ; uint8_t val_len = sizeof ( struct l2_t * ) <S2SV_ModEnd> ; uint8_t * <S2SV_ModStart> size ) ; if (! buf_size ) return AVERROR_INVALID_LEN <S2SV_ModEnd> ; } <S2SV_null>",0
1175,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; int r = 0 ; if <S2SV_ModEnd> ( lc -> <S2SV_ModStart> ( lc -> start || ti -> len!= i_size_read ( dev -> bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL, cmd ) ; return r? : __blkdev_driver_ioctl ( <S2SV_ModStart> -> bdev, <S2SV_ModEnd> dev -> mode",1
1176,<S2SV_ModStart> == 1 ) return - EINVAL ; if (,0
1177,<S2SV_ModStart> ; if ( <S2SV_ModEnd> type & type <S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; if (,0
1178,"<S2SV_ModStart> ret, 0 <S2SV_ModEnd> ) ; return",0
1179,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1180,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1181,"<S2SV_ModStart> = 0 ; memset ( & sa, 0, sizeof ( sa ) ) ;",0
1182,<S2SV_ModStart> ; if ( ( <S2SV_ModStart>!= NULL ) && (,0
1183,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC | NTLMSSP_NEGOTIATE_SEAL <S2SV_ModStart> -> sign ) <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,1
1184,"<S2SV_ModStart>, ""STARTTLS"" ) ; mutt_socket_empty ( adata -> conn <S2SV_ModEnd> ) ; if",0
1185,<S2SV_ModStart> skb ) ; strncpy <S2SV_ModEnd> ( rq.,0
1186,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
1187,<S2SV_ModStart> -> head <= 0 || ( unsigned char ) ( ( g -> sect << 2 ) >> FD_SIZECODE ( g ) ) ==,1
1188,<S2SV_ModStart> return 0 ; if ( len < 1 ) return 0,0
1189,"<S2SV_ModStart>, & rlen, 0",1
1190,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ; } } <S2SV_ModEnd> if (!,0
1191,"<S2SV_ModStart> mntent, path, rootfs -> mount",1
1192,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! assert (,0
1193,<S2SV_ModStart> - offset ; unsigned short prev_bi_vcnt = bio -> bi_vcnt ; <S2SV_ModStart> ) break ; if ( bio -> bi_vcnt == prev_bi_vcnt ) put_page ( pages [ j ] ) ;,1
1194,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } if,0
1195,"<S2SV_ModStart> state. path <S2SV_ModEnd> ; char localhost <S2SV_ModStart> ""localhost"" ; } result = Curl_urldecode ( conn -> data, path, 0, & <S2SV_ModStart> smtpc -> domain, NULL, TRUE ) ; if ( result ) return result <S2SV_ModEnd> ; state (",1
1196,<S2SV_ModStart> len ) { if ( len < str ) { <S2SV_ModStart> str ; return ; },0
1197,"<S2SV_ModStart> ] ) { strcpy <S2SV_ModEnd> ( buf,",0
1198,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1199,"<S2SV_ModStart> off ) ; memset ( & rs, 0, sizeof ( tmp ) ) ;",0
1200,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1201,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1202,,1
1203,"<S2SV_ModStart> { r_cons_printf ( ""\\""k <S2SV_blank> bin/pe/%s/%d=%s.%s\\""\\n"" <S2SV_ModEnd>, module, <S2SV_ModStart> { r_cons_printf ( ""\\""k <S2SV_blank> bin/pe/%s/%d=%s\\""\\n"" <S2SV_ModEnd>, module,",1
1204,"<S2SV_ModStart>, rqstp, res <S2SV_ModEnd> ) ; out",1
1205,<S2SV_ModStart> mntent * mount <S2SV_ModEnd> ) { return,0
1206,<S2SV_ModStart> key ) ; if (!,0
1207,"<S2SV_ModStart> ) ) { * status = ""INVALID_S4U2PROXY_OPTIONS"" ; <S2SV_ModStart> ) ) { * status = ""EVIDENCE_TICKET_MISMATCH"" ;",1
1208,<S2SV_ModStart> thread -> tp_value [ 0 ] <S2SV_ModStart> childregs -> ARM_r3 ; thread -> tp_value [ 1 ] = get_tpuser ( ),1
1209,<S2SV_ModStart> bufsize ) { char * new_buf ; size_t new_bufsize ; size_t new_bufsize <S2SV_ModEnd> = 0 ; <S2SV_ModStart> } else { new_bufsize <S2SV_ModEnd> = 0 ; <S2SV_ModStart> } if (,0
1210,"<S2SV_ModStart> sshbuf * b = NULL <S2SV_ModStart> char * pkalg = NULL <S2SV_ModStart> r ) ; if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> user"", __func__ ) ; goto done <S2SV_ModStart> b ) ; } if (! authctxt -> valid || authctxt -> valid || authctxt -> valid == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done <S2SV_ModStart> b ) ; free ( sig ) ; <S2SV_ModStart> auth2 ) ; free ( sig ) ; <S2SV_ModStart> b ) ; if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> of <S2SV_blank> user"", __func__ ) ; goto done ; } <S2SV_ModStart> b ) ; free ( sig ) ;",0
1211,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",0
1212,<S2SV_ModStart> = get_dio_block ( inode ) ; if (! iter ) return - ENOMEM ;,0
1213,<S2SV_ModStart> err = 0 <S2SV_ModEnd> ; if (,0
1214,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1215,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteEntry ) ) ;",0
1216,"<S2SV_ModStart> failed_mount3 ; } # ifdef CONFIG_EXT2_FS_XATTR sbi -> s_mb_cache = ext2_xattr_create_cache ( ) ; if (! sbi -> s_mb_cache ) { ext2_msg ( sb, KERN_ERR, ""Failed <S2SV_blank> to <S2SV_blank> create <S2SV_blank> an <S2SV_blank> mb_cache"" ) ; goto failed_mount3 ; } # endif <S2SV_ModStart> ; failed_mount3 : if ( sbi -> s_mb_cache ) ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ;",1
1217,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1218,<S2SV_ModStart> len < tcp_hdrlen || tcp_hdrlen < sizeof ( struct tcphdr ) <S2SV_ModStart> ; if ( tcp_hdrlen >= 15 * 4 ) return 0 ; if (,1
1219,<S2SV_ModStart> int i ; size_t size ; matrix = 0 ; if (! jas_safe_size ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } <S2SV_null>,0
1220,"<S2SV_ModStart> ipv6_select_ident ( fh, rt <S2SV_ModStart> ipv6_select_ident ( fh, rt",1
1221,<S2SV_ModStart> int error ; struct mb2_cache_entry <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> bh ) { <S2SV_ModEnd> int error = <S2SV_ModStart> return error ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1222,<S2SV_ModStart> * req ; <S2SV_ModEnd> req = scsi_req_alloc <S2SV_ModStart> hba_private ) ; <S2SV_ModEnd> return req ;,1
1223,"<S2SV_ModStart> ; unsigned int nmap_size ; buf_size <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } nmap <S2SV_ModStart> goto error ; buf_size = sizeof ( buf ) ; memset ( & buf, 0, sizeof ( buf ) ) ; if ( buflen > MaxAllocSize / sizeof ( buf ) ) { ND_PRINT ( ( ( ( ndo, ""Too <S2SV_blank> many <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> does <S2SV_blank> not <S2SV_blank> (%d)"", ( ndo, ( ndo, & buf ) ) ) ; goto error ; }",0
1224,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1225,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
1226,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct xfrm_dump_info <S2SV_ModStart> struct xfrm_dump_info info <S2SV_ModEnd> ; info. <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> ( void ),1
1227,<S2SV_ModStart> (! ret || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1228,"<S2SV_ModStart> dentry * upper <S2SV_ModEnd> ; int err <S2SV_ModStart> I_MUTEX_PARENT ) ; upper = lookup_one_len ( dentry -> d_name. name, upperdir, dentry -> d_name. len ) ; err = PTR_ERR ( upper ) ; if ( IS_ERR ( upper ) ) goto out_unlock ; <S2SV_ModStart> if ( upper == dentry -> d_name. len && dentry -> d_name. upper ) { <S2SV_ModEnd> if ( upper <S2SV_ModStart> dentry == upper <S2SV_ModEnd> ) { err <S2SV_ModStart> dentry ) ; }",0
1229,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1230,<S2SV_ModStart> * ptrptr && <S2SV_ModEnd> nmemb && size <S2SV_ModStart> nmemb && size <S2SV_ModEnd> ) return AVERROR,1
1231,<S2SV_ModStart> ( a -> type == szMAPI_BINARY && a -> <S2SV_ModStart> else if ( a -> type == szMAPI_BINARY &&,1
1232,<S2SV_ModStart> } if ( ( i -> width > 0 && ( ( i -> height ) ) ) { # ifdef CONFIG_VP9_HIGHBITDEPTH if ( ( i -> width > 0 ) fprintf ( NGIFLOW ) - 1 ; # endif,0
1233,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( const size_t * ) val ; return 0 ;,0
1234,"<S2SV_ModStart> { jas_eprintf ( ""got <S2SV_blank> box <S2SV_blank> type <S2SV_blank> %s\\n"" <S2SV_ModEnd>, box ->",1
1235,,1
1236,<S2SV_ModStart> return 0 ; if ( len < sizeof ( entry ) ) return - EINVAL ; if (,0
1237,<S2SV_ModStart> ( page ) <S2SV_ModEnd> ; if (,0
1238,<S2SV_ModStart> ; if (! entry ) return 0 ; if (,0
1239,<S2SV_ModStart> UINT32 nsc_rle_encode ( const,1
1240,<S2SV_ModStart> * data ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1241,"<S2SV_ModStart> * dllhandle ; if ( COM_CompareExtension ( name, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", name ) ; return NULL ; }",1
1242,"<S2SV_ModStart> i, NULL <S2SV_ModEnd> ) ; }",0
1243,<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> ++ ; } \\\n} <S2SV_ModEnd> typedef struct n,0
1244,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1245,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1246,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> char * e, const char * <S2SV_ModStart> * * e, const char * e ) { char * e = strtol <S2SV_ModEnd> = get_err ( <S2SV_ModStart>, '\\0', * e ) ; if ( e + 1 ) { * e = strpprintf ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> address <S2SV_blank> address <S2SV_blank> %s\\n"", e ) ; return NULL ; } <S2SV_ModEnd> if ( e <S2SV_ModStart> p + 1 ) { char * e = strtol ( e + 1, sizeof ( e ) + 1 ) ; if (! * e ) { char * e = str + 1 ; if ( e + 2 ) { char * e = strpprintf ( ""Failed <S2SV_blank> to <S2SV_blank> extensions: <S2SV_blank> %s\\n"", e ) ; return ; } <S2SV_ModEnd> if ( e <S2SV_ModStart> NULL ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1247,<S2SV_ModStart> ) { return 0 <S2SV_ModEnd> ; } if,0
1248,<S2SV_ModStart> src ) { memcpy <S2SV_ModEnd> ( dst -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( dst ->,0
1249,<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( c -> log2_cblk_cblk_width > 6 || ctx -> log2_cblk_cblk_height > 6 ) { avctx -> log2_sample = 1 ; return AVERROR_INVALIDDATA ; },0
1250,<S2SV_ModStart> == * ptr && ptr [ 1 ],1
1251,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static MACROBLOCKD * const MACROBLOCKD * xd <S2SV_ModEnd>, int mi_row <S2SV_ModStart> -> mb ; MACROBLOCKD * const xd = & x -> mbmi_row ; MACROBLOCKD * const xd = & x -> mbmi_row <S2SV_ModEnd> ; MACROBLOCKD * <S2SV_ModStart> = xd -> mbmi_row <S2SV_ModEnd> ; const MODE_INFO <S2SV_ModStart> = xd ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } } <S2SV_null> <S2SV_null>",0
1252,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
1253,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1254,"<S2SV_ModStart> ; vpx_codec_ctx_t codec <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, ""\\n"" <S2SV_ModEnd> ) ; }",0
1255,<S2SV_ModStart> ) ) ; kfree ( skb ) ;,0
1256,<S2SV_ModStart> sta -> lock ) ; spin_lock_init ( & sta -> ps_lock,1
1257,<S2SV_ModStart> tp_event ) && perf_paranoid_tracepoint_raw <S2SV_ModEnd> ( ) &&,1
1258,"<S2SV_ModStart> sctp_serial_init ( sctp_enabled, & sctp_lock <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( sctp_exit ( 1 ) <S2SV_ModEnd> ) ; if",0
1259,"<S2SV_ModStart>, 0 ) ; if (! data_interface ||! control_interface ) return - ENODEV",1
1260,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1261,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } if (,0
1262,"<S2SV_ModStart> * head ; <S2SV_ModEnd> newsk -> sk_sndbuf <S2SV_ModStart> -> sk_rcvbuf ; sctp_copy_descendant <S2SV_ModEnd> ( newsk,",1
1263,"<S2SV_ModStart> * fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0, fd ) <S2SV_ModStart> ; if ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) ) <S2SV_ModStart> } if ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> dev, 0 ) )",0
1264,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return sel ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! get_desc ( & desc, sel ) <S2SV_ModEnd> ) return - <S2SV_ModStart>! ( desc. <S2SV_ModEnd> d ) {",0
1265,<S2SV_ModStart> ctx ) { <S2SV_ModEnd> i ] ;,0
1266,"<S2SV_ModStart> 1 ) { vpx_lpf_horizontal_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> } else { vpx_lpf_lpf_16 <S2SV_ModEnd> ( s,",0
1267,<S2SV_ModStart> return ret ; fsnotify_put_group ( group ) ;,1
1268,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1269,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> = S64_MAX ; <S2SV_ModEnd> if ( src_known,0
1270,<S2SV_ModStart> = screen ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1271,<S2SV_ModStart> ; } else ( void ),0
1272,<S2SV_ModStart> ( count ) <S2SV_ModEnd> ; ret =,0
1273,<S2SV_ModStart> == 1 ) <S2SV_ModEnd> ; if (,0
1274,"<S2SV_ModStart> * buf, size_t <S2SV_ModEnd> len ) { <S2SV_ModStart> count ) ; if (! buf ) return - EINVAL ; <S2SV_ModStart> - EINVAL ; } <S2SV_ModEnd> if ( buf",0
1275,<S2SV_ModStart> input -> cur ) ; if ( ( ( ctxt -> inputNr > 1024 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) || ( ctxt -> inputNr > 1024 ) ) ) return ( - 1,0
1276,"<S2SV_ModStart> } if ( le32_to_cpu ( raw_super -> segment_count ) > F2FS_MAX_SEGMENT ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> segment <S2SV_blank> count <S2SV_blank> (%u)"", le32_to_cpu ( raw_super -> segment_count ) ) ; return 1 ; } if (",1
1277,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> char * name <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> for ( *,0
1278,<S2SV_ModStart> ) { return 0 <S2SV_ModEnd> ; } if,0
1279,<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart>! opt ) { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) ; txopt_put ( opt_to_free ) ;,1
1280,"<S2SV_ModStart> -> ip_options, optlen <S2SV_ModEnd> ) ; if",0
1281,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1282,"<S2SV_ModStart> rtm_flags ) ; memset ( & tm, 0, sizeof ( rb ) ) ;",0
1283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1284,<S2SV_ModStart> info -> bits!= 0,0
1285,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
1286,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; } tp -> copied_seq = seq ;,1
1287,<S2SV_ModStart> ; if ( k_data_len < sizeof ( key_data ) - 1 ) goto err ; <S2SV_ModStart> goto err ; kfree ( key_data ) ;,0
1288,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx ) {",0
1289,<S2SV_ModStart> + 1 ) <S2SV_ModEnd> ; if (,0
1290,<S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
1291,"<S2SV_ModStart> expr_ty returns, string type_comment, <S2SV_ModStart> returns = type_comment",0
1292,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1293,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
1294,<S2SV_ModStart> ) { return 1 <S2SV_ModEnd> ; } case,0
1295,<S2SV_ModStart> (! NGHTTP2_ERR_INVALID <S2SV_ModEnd> ) { return,0
1296,<S2SV_ModStart> error = 0 <S2SV_ModEnd> ; } if,0
1297,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1298,<S2SV_ModStart> < 0 ) { ret = chg ; goto out_err ; } <S2SV_ModEnd> if ( hugepage_subpool_get_pages <S2SV_ModStart> chg ) ) { ret = <S2SV_ModEnd> - ENOSPC ; <S2SV_ModStart> - ENOSPC ; goto out_err ; } <S2SV_ModStart> chg ) ; goto out_err <S2SV_ModEnd> ; } if <S2SV_ModStart> return 0 ; out_err : resv_map_put ( vma ) ; return ret ;,1
1299,"<S2SV_ModStart> ) ) { struct ipv6_txoptions * opt = rcu_dereference ( <S2SV_ModStart> np -> opt ) ; opt = rcu_dereference ( <S2SV_ModStart> np -> opt ) ; opt = rcu_read_unlock ( ) ; <S2SV_ModStart> & fl6, & final ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt, & final ) <S2SV_ModStart> np -> opt. <S2SV_ModStart> final ) ; rcu_read_lock ( ) ; return ;",0
1300,"<S2SV_ModStart> = ECRYPTFS_SUPER_MAGIC ; s -> s_stack_depth = path. dentry -> d_sb -> s_stack_depth + 1 ; rc = - EINVAL ; if ( s -> s_stack_depth > FILESYSTEM_MAX_STACK_DEPTH ) { pr_err ( ""eCryptfs: <S2SV_blank> maximum <S2SV_blank> fs <S2SV_blank> stacking <S2SV_blank> depth <S2SV_blank> exceeded\\n"" ) ; goto out_free ; }",1
1301,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1302,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
1303,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> read_message ) { return FALSE <S2SV_ModEnd> ; } <S2SV_null> static,0
1304,"<S2SV_ModStart> ret, n_new_pblock_new_keys <S2SV_ModStart> keyblocks ) { n_new_keys = count_new_keys ( kdb -> n_new_keys, kdb -> n_data ) ; <S2SV_ModStart> -> context, n_new_keys <S2SV_ModEnd>, kdb ->",0
1305,"<S2SV_ModStart> int result = RLC_ERR ; switch ( t ) { case RLC_OK : case RSA_SIG : bn_dig ( t ) ; result = RLC_OK ; bn_dig ( t, m ) ; bn_len = RLC_OK <S2SV_ModEnd> ; if ( <S2SV_ModStart> 8 ) ; bn_dig ( t, m, m_len ) ; bn_dig ( t ) ; bn_len = RLC_OK <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { <S2SV_ModStart> 8 ) ; } <S2SV_ModStart> 8 ) { <S2SV_ModEnd> if ( pad <S2SV_ModStart> 8 ) ; } bn_dig ( t, m, m_len * p_len ) ; <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( pad = RLC_OK <S2SV_ModStart> ; } } <S2SV_ModEnd> if ( pad == <S2SV_ModStart> ) ) { <S2SV_ModEnd> break ; } <S2SV_ModStart> ) ; }",0
1306,"<S2SV_ModStart> -> length, 0,",1
1307,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1308,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1309,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1310,"<S2SV_ModStart> * cm, FRAME_COUNTS * counts <S2SV_ModEnd> ) { int",0
1311,"<S2SV_ModStart> { token ++ ; } if ( operand >= MAX_OPERANDS ) { eprintf ( ""Too <S2SV_blank> many <S2SV_blank> operands\\n"" ) ; return false",1
1312,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> cpi ] ; memset <S2SV_ModEnd> ( xd ->,0
1313,<S2SV_ModStart> ; out = safe_calloc <S2SV_ModEnd> ( c ->,0
1314,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret ;,0
1315,<S2SV_ModStart> number_colormaps ) { number_planes_filled <S2SV_ModEnd> ; number_planes_filled = <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ; number_planes_filled =,0
1316,<S2SV_ModStart> ctl_files_rwlock ) ; mutex_init ( & card -> user_ctl_lock ) ;,1
1317,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> s2SV_null> static <S2SV_ModStart> sig ) { if ( cnt_ffs == 0x4_char * s + 3 ) return 0 ; cnt_ffs = s + 2 ; cnt_ffs ++ ; } <S2SV_ModEnd> return s ;,0
1318,"<S2SV_ModStart> ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart> ), 0 )",0
1319,<S2SV_ModStart> ; ps_dec -> u2_cur_slice_num = 0 ; ps_dec ->,0
1320,<S2SV_ModStart> ERR_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> OPENSSL_free ( rdata <S2SV_ModEnd> ) ; OPENSSL_free,0
1321,"<S2SV_ModStart> ) ) { struct ipv6_txoptions * opt = rcu_dereference ( <S2SV_ModStart> np -> opt ) ; opt = rcu_dereference ( <S2SV_ModStart> np -> opt ) ; opt = rcu_read_unlock ( ) ; <S2SV_ModStart> & fl6, & final ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt, & final ) <S2SV_ModStart> np -> opt. <S2SV_ModStart> final ) ; rcu_read_lock ( ) ; return ;",0
1322,<S2SV_ModStart> ( args -> buffer_count + 1,0
1323,"<S2SV_ModStart> int mptctl_do_dev ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_dev ) <S2SV_ModEnd> ; struct mpt_ioctl_dev <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
1324,"<S2SV_ModStart> offset, len - 1",0
1325,"<S2SV_ModStart> char * path, const char * rootfs <S2SV_ModStart> mntdata, optional, rootfs",1
1326,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1327,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int i ; <S2SV_ModStart> char * buf_size <S2SV_ModEnd> ; int len <S2SV_ModStart>, buf_size, 1 <S2SV_ModEnd> ) ; if <S2SV_ModStart> = buf_size ; int len <S2SV_ModEnd> = buf_count ( buf",0
1328,"<S2SV_ModStart> | O_NOCTTY, mode <S2SV_ModEnd> ) ; if",0
1329,<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; if <S2SV_ModStart> FALSE ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1330,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ; u64 irq_time ; if ( rq -> skip_clock_update ) return <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1331,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1332,<S2SV_ModStart> == NULL ) { <S2SV_ModStart> return 1 ; } <S2SV_ModEnd> if ( strlen ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } else if <S2SV_ModStart> ) ; } },0
1333,<S2SV_ModStart> { struct blkif_prod_prob <S2SV_ModEnd> * resp = <S2SV_ModStart> case BLKIF_PROTOCOL_PROTOCOL_XING : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> 1. rsp_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_32 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart>. rsp_pvt. rsp_prod_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_PROTOCOL_X86_32 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart>. rsp_pvt ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> case BLKIF_PROTOCOL_32 : resp = blkf_pvt ; break ;,0
1334,<S2SV_ModStart> ; if ( ( entry == NULL ) return EINVAL ; if (,0
1335,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 8 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 8 <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; n -> entries [ tcount ]. tag = exif_get_short ( buf + n -> entries [ tcount ]. entries [ tcount ]. entries [ tcount ], n -> entries [ tcount ]. order ) ; n -> entries [ tcount ] = exif_get_short ( buf + 2, n -> entries [ tcount ], 8 <S2SV_ModEnd> ; n -> <S2SV_ModStart> ; n -> entries [ tcount ]. order <S2SV_ModEnd> ; if (",0
1336,"<S2SV_ModStart>, fname, 1 <S2SV_ModEnd> ) ; for",0
1337,<S2SV_ModStart> ndo -> ndo_snapend ; ND_TCHECK_16BITS ( & ip -> ip_len ),1
1338,<S2SV_ModStart> dentry * dir <S2SV_ModEnd> ; int dir_has_key <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ),1
1339,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if (!,0
1340,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; <S2SV_ModEnd> } if (",1
1341,"<S2SV_ModStart> i ] ; if ( ( i -> width > i -> width ) || ( NGIFLIB_NO_FILE ) > i -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( ( i -> log ) # if! defined ( ( NGIFLIB_NO_FILE ) ) if ( ( i -> width > i -> width ) { # endif return - 1 ; } if ( ( ( i -> width + i -> width > i -> width ) > i -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> log ) fprintf ( i -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> WARNING <S2SV_blank> WARNING <S2SV_blank> Adjusting <S2SV_blank> position\\n"" ) ; # endif return - 1 ; } # endif",0
1342,<S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ),1
1343,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
1344,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> break ; } if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",0
1345,<S2SV_ModStart> void ) { recovery_started = 0 ;,0
1346,"<S2SV_ModStart> ( interface, ENC624J60_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ) ;",0
1347,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1348,"<S2SV_ModStart> error ; } memset ( newserv, 0, sizeof ( struct service ) ) ;",1
1349,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
1350,<S2SV_ModStart> ) -> tp_value [ 0 ],1
1351,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ;",1
1352,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> pentries ( struct <S2SV_ModStart> printf ( fmt, 3 <S2SV_ModEnd> ) ; if <S2SV_ModStart>! p ) { if ( p ) out = ensure ( p, 2 ) ; * ptr = ensure ( p, 2 ) ; if (! ptr ) return 0 ; if ( p ) out = ensure ( p, 2 ) ; if (! ptr ) return 0 ; * ptr = ensure ( p, 2 ) ; if ( p, len ) ; if ( p ) { len = ensure ( p, 2 ) ; if ( p -> offset + 1 ) ) goto out ; } ptr = ensure ( p, 2 ) ; if ( p -> offset + 2 ) ) { if ( p -> offset + 2 ) == '.' ) { p = ensure ( p, 2 ) ; if ( p ) goto out ; } ptr = ensure ( p, 2 ) ; * ptr = p -> offset + 1 ; if (! ptr ) { len = 0 ; if (! ptr ) return 0 ; * ptr ++ = ensure ( p, 2 ) ; if (! ( p, 2 ) ) return 0 ; * ptr ++",0
1353,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static ND_PRINT ( ( ndo, sizeof ( struct ipv6_addr_len ) <S2SV_ModEnd> ) { ND_PRINT <S2SV_ModStart> ndo -> ndo_vflag ) ; <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> num + 1 <S2SV_ModEnd> ) ; }",0
1354,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
1355,"<S2SV_ModStart> ) ; goto unix_dgram_peer_wake_disconnect <S2SV_ModEnd> ( sk, <S2SV_ModStart> ) ; } <S2SV_ModEnd> * unix_dgram_peer_wakeup ( sk",0
1356,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModStart>. unsigned_value = <S2SV_ModEnd> value & 0xffff <S2SV_ModStart> value & 0xffff <S2SV_ModEnd> ; value |= <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ; return (,0
1357,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> m"", <S2SV_ModStart> y3 ) ; sendClean ( outputbuffer ) ;",0
1358,<S2SV_ModStart> ) ) ; kfree ( skb ) ;,0
1359,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; task_lock ( task <S2SV_ModEnd> ) ; ioc <S2SV_ModStart> ; ioc = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context ; task <S2SV_ModEnd> -> io_context = <S2SV_ModStart> ; task_unlock ( task <S2SV_ModEnd> ) ; if,1
1360,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; if (,0
1361,<S2SV_ModStart> ; if ( ( TWO_PASS < 0 || (,0
1362,"<S2SV_ModStart> ) { int ret = pci_read_config_word <S2SV_ModEnd> ( dev, <S2SV_ModStart> offset, value ) ; const struct pci_cmd_info * cmd = data ; * value &= PCI_COMMAND_GUEST ; <S2SV_ModEnd> * value |= <S2SV_ModStart> * value |= cmd -> val & ~ PCI_COMMAND_GUEST ; <S2SV_ModEnd> return ret ;",1
1363,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_codec_err_t * ctx <S2SV_ModEnd>, va_list args <S2SV_ModStart> p9_frame ) { if ( ctx -> frame_workers!= NULL ) return VPxWorker * const frame_workers = ( FrameWorkerData * ) worker -> frame_worker_data ; FrameWorkerData * const frame_worker_data = frame_worker_data -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_data = ( FrameWorkerData * ) worker -> data1 ; if ( frame_worker_data == NULL ) return VPX_CODEC_USE <S2SV_ModEnd> ; } <S2SV_null>",0
1364,<S2SV_ModStart> ] ) ; free_uid ( fpl -> user ) ;,1
1365,<S2SV_ModStart> ; } } err :,0
1366,"<S2SV_ModStart> -> dwc ; dwc3_gadget_del_and_unmap_request ( dep, req, status <S2SV_ModEnd> ) ; spin_unlock <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1367,<S2SV_ModStart> { char prefix <S2SV_ModEnd> ; char * <S2SV_ModStart> break ; } case '=' : prefix = ( yyvsp [ ( 1 ) - ( yyvsp [ ( 1 ) - ( yyvsp [ ( 1 ) ] ) ; break ; case '=' : prefix = ( yyvsp [ ( 1 ) - ( yyvsp [ ( 1 ) ]. String ) [ ( 1 ) ]. String ) [ ( 1 ) ]. String ) ] = ( yyvsp [ ( 1 ) - ( yyvsp [ ( 1 ) ]. String ) - ( yyval ) - ( yyvsp [ ( 1 ]. String ) ]. String ) [ ( 1 ]. String ) ]. String ) ] = ( yyvsp [ ( yyvsp [ ( 1 ) - ( yyvsp [ ( 1 ) - ( 1 ) - ( 1 ) - ( yyvsp [ ( 1 ]. String ) - ( 1 ) - ( yyvsp [ ( 3 ) - ( 1 ) - ( 1 ) - ( yyvsp [ ( 1 ]. String ) - ( yyvsp [ ( 1 ]. String ) - (,0
1368,"<S2SV_ModStart> sas_revalidate_domain, [ <S2SV_ModEnd> DISCE_SUSPEND ] = <S2SV_ModStart> ] = sas_resume_devices <S2SV_ModEnd>, } ;",1
1369,"<S2SV_ModStart>, int ret <S2SV_ModEnd> ; if (",0
1370,<S2SV_ModStart> return ; } <S2SV_ModEnd> if (!,0
1371,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1372,<S2SV_ModStart> sk -> sk_family <S2SV_ModEnd> ; struct sk_buff <S2SV_ModStart> goto out ; <S2SV_ModEnd> struct sockaddr_in * <S2SV_ModStart> ) ) { struct sockaddr_in6 * <S2SV_ModStart> goto out ; * <S2SV_ModStart> struct sockaddr_in6 * addr_len = sizeof ( * sin ) ; <S2SV_ModStart> goto out ; } <S2SV_ModEnd> if (! <S2SV_ModStart> skb ) { struct sockaddr_in6 * <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,0
1373,<S2SV_ModStart> -= lblk ; mutex_lock ( & inode -> i_mutex ) ; if (! ( EXT4_GET_BLOCKS_SIZE ) ) { ret = - EINVAL ; goto out_mutex ; } if (! inode_mutex_unlock ( & EXT4_GET_BLOCKS_SIZE ) ) { ret = - 1 ; goto out_mutex ; } if (! (! inode_mutex ) { ret = ext4_inode_mutex_unlock ( & EXT4_GET_BLOCKS_SIZE ) ; goto out_mutex ; } <S2SV_ModEnd> } if (,0
1374,<S2SV_ModStart> -> free_data ; } else { memcpy ( buf ) ; },0
1375,<S2SV_ModStart> return map ; map =,1
1376,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char * cp <S2SV_ModStart> ; int i <S2SV_ModEnd> ; int cp <S2SV_ModStart> ; if ( <S2SV_ModEnd> == '\\"" <S2SV_ModStart> ) continue ; <S2SV_ModEnd> if ( cp <S2SV_ModStart> == '\\"" ) { if ( cp ++ <S2SV_ModStart> == '\\"" ) { if ( cp ++ cp ++ <S2SV_ModEnd> == '9' ) <S2SV_ModStart> == '\\\\' ) return ( <S2SV_ModStart> == '\\0' ) <S2SV_ModEnd> ; } <S2SV_null>",0
1377,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1378,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_left < 4,1
1379,"<S2SV_ModStart>, ncols = 0 <S2SV_ModEnd> ; for ( <S2SV_ModStart> char * pix1 <S2SV_ModEnd>, pix1, <S2SV_ModStart>, w, L_BUFSIZE <S2SV_ModEnd>, pix1,",0
1380,<S2SV_ModStart> { int i ; int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( u ) ; int <S2SV_ModEnd> vbits = BN_num_bits <S2SV_ModStart> ( ubits ) ; int <S2SV_ModEnd> vbits = BN_num_bits <S2SV_ModStart> ) ) ; if ( <S2SV_ModEnd> udp [ 0 <S2SV_ModStart> ) break ; },0
1381,"<S2SV_ModStart> bestd, in_sse <S2SV_ModEnd> ) ; }",0
1382,<S2SV_ModStart> skb ) ; strncpy <S2SV_ModEnd> ( rq.,0
1383,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1384,"<S2SV_ModStart>, nbits ; if ( msg -> readcount > msg -> cursize ) { msg -> readcount = msg -> cursize << 3 ; return 0 ; } <S2SV_ModStart> & 7 ; if ( msg -> cursize << 3 ) { msg -> readcount = msg -> cursize << 3 ; return 0 ; } <S2SV_ModStart> & 7 ; if ( msg -> cursize << 3 ) { msg -> readcount = msg -> cursize << 3 ; return 0 ; }",0
1385,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
1386,<S2SV_ModStart> ; out1 : cancel_work_sync ( & dev -> kevent ) ; del_timer_sync ( & dev -> delay ) ;,1
1387,"<S2SV_ModStart> * data, size_t <S2SV_ModEnd> len ) return",0
1388,"<S2SV_ModStart>, gid, GTK_RESPONSE_OK <S2SV_ModEnd> ) ; }",0
1389,<S2SV_ModStart> ; if ( <S2SV_ModEnd> < 0 ) return 0,0
1390,"<S2SV_ModStart> acl ) { struct iattr iattr ; retval = posix_acl_update_mode ( inode, & iattr. ia_mode, & acl ) ; if ( retval <S2SV_ModEnd> ) goto err_out <S2SV_ModStart> goto err_out ; <S2SV_ModEnd> if (! <S2SV_ModStart> goto err_out ; <S2SV_ModEnd> } break ;",0
1391,<S2SV_ModStart> header. types_size <S2SV_ModEnd> ) { continue,1
1392,<S2SV_ModStart> : case NPPVformValue : case NPPVformValue : case NPPVSupportsAdvancedKeyHandling :,0
1393,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> inode = { char * in, size_t <S2SV_ModEnd> * strlen ( <S2SV_ModStart> ) ) { size_t <S2SV_ModEnd> = 0 ; <S2SV_ModStart> } else { size_t <S2SV_ModEnd> = malloc (",0
1394,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> s ) { return FALSE <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>,0
1395,"<S2SV_ModStart> ) { const VP9_COMMON * cpi <S2SV_ModEnd> = cpi -> <S2SV_ModStart>, i, cpi -> bit_depth <S2SV_ModStart> -> bit_depth <S2SV_ModEnd> ) ; }",0
1396,"<S2SV_ModStart> ( interface, EINVALID <S2SV_ModEnd> ) ; }",0
1397,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1398,<S2SV_ModStart> <= 0 && <S2SV_ModEnd> ND_TTEST ( *,0
1399,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> data ) ;",1
1400,<S2SV_ModStart> res ) ; <S2SV_ModEnd> return res ;,0
1401,"<S2SV_ModStart> ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i += 1 ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == TYPE ( CHILD ( n ) ) && TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) && TYPE ( CHILD ( n, i ) == COMMA ) && TYPE_COMMENT ) == COMMA ) i += 1 ; if ( i < NCH ( i ) && TYPE ( CHILD ( n, i ) == COMMA ) && TYPE_COMMENT ( n, i ) == COMMA ) && TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) && TYPE ( CHILD ( n, i ) == COMMA ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i += 1 ; if ( i += 1 ; if ( i < NCH ( n, i ) && TYPE ( CHILD ( n, i ) == TYPE_COMMENT ) i += 1 ; i += 1 ; if ( i < NCH ( n, i ) && TYPE ( CHILD ( n, i ) )",0
1402,"<S2SV_ModStart> int recon_s, const DECLARE_ALIGNED <S2SV_ModEnd> MACROBLOCKD * const <S2SV_ModStart> VP9_HIGHBITDEPTH ) { DECLARE_AL_ALIGNED <S2SV_ModEnd> ( dst_ptr, <S2SV_ModStart> ) ) { DECLARE_AL_AL <S2SV_ModEnd> ( frame_ptr, <S2SV_ModStart> ) ; DECLARE_AL_ALIGNED <S2SV_ModEnd> ( plane, <S2SV_ModStart> 16 ) ; DECLARE_AL_AL_AL ) ; memcpy <S2SV_ModEnd> ( xd,",0
1403,<S2SV_ModStart> } if ( (,0
1404,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = str ; if ( str ) { return false ; } <S2SV_ModEnd> if ( str <S2SV_ModStart> == '\\0' ) { <S2SV_ModStart> = str ; return 0 ; } <S2SV_ModEnd> } if (,0
1405,"<S2SV_ModStart> * jas_iccprof_createfrombuf ( jas_uchar <S2SV_ModEnd> * buf,",1
1406,"<S2SV_ModStart> = 0 ; memset ( ei, 0, sizeof ( ei ) ) ;",0
1407,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
1408,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> ; return handle <S2SV_ModEnd> ; } <S2SV_null>",1
1409,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart>!= 0 ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart>!= 0 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm, & cm, wb, wb, sizeof ( wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> == NULL ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
1410,<S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; },1
1411,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { osStrchr <S2SV_ModEnd> ( context ->,0
1412,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1413,<S2SV_ModStart> = 1 ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,0
1414,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static uint8_t status ; uint16_t status ; <S2SV_ModStart> ( interface, ENC624J600_EUDAST <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & ENC624J600_EIE, ENC624J600_RTS )!= 0 <S2SV_ModEnd> ) { status <S2SV_ModStart> ( interface, ENC624J600_EIR_TXRTS <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface, ENC624J600_EINVALID, ENC624J600_EIR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & ENC624J600_ECON1_TXRTS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_EUDAST <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( interface, ENC624J600_TXRTS <S2SV_ModEnd> )!= ENC624J600_ERRTS <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_TXRX <S2SV_ModEnd> ) ; status <S2SV_ModStart> ; if ( status & ENC624J600_EIR_RTS <S2SV_ModEnd> )!= ENC624J600",0
1415,<S2SV_ModStart> ] == 0x01 && i < gemsafe_cert_max,1
1416,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1417,"<S2SV_ModStart> VALUE parse_document ( int argc, VALUE * argv, VALUE klass ) { VALUE errors ; VALUE parse_options ; xmlRelaxNGParserCtxtPtr schema ; xmlRelaxNGParserCtxtPtr schema ; VALUE errors ; VALUE rb_schema ; VALUE rb_schema = rb_schema ; xmlRelaxNGPtr schema ; VALUE rb_schema = rb_schema ; if ( scanned_args == 0 ) { scanned_args = rb_schema ; VALUE rb_schema_schema = rb_schema_const_schema ( ""ParseOptions"", rb_schema, rb_schema, rb_intern ( ""ParseOptions"" ) ) ; if ( rb_schema, parse_options )!= NULL ) { VALUE kfree ( rb_schema ) ; continue ; } <S2SV_ModEnd> if ( rb_schema <S2SV_ModStart> == NULL ) { xmlRelaxNGNewMemParserCtxt_options ;",0
1418,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> info -> par <S2SV_ModEnd> ; vma -> <S2SV_ModStart> _CACHE_MASK ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> ( vma, fbdev -> fb_phys, fbdev -> fb_len <S2SV_ModEnd> ) ; }",1
1419,<S2SV_ModStart> = 1 ; <S2SV_ModEnd> if (!,0
1420,<S2SV_ModStart> state ) ; if ( state -> x!= 0 ) return 0 ;,0
1421,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1422,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1423,<S2SV_ModStart> out_mutex ) ; if ( err == - EINVAL ) goto out_put ;,0
1424,<S2SV_ModStart> -> event ) <S2SV_ModEnd> = event -> <S2SV_ModStart> event ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1425,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static u16_t <S2SV_ModEnd> u16bit_shift ( u8_t <S2SV_ModStart> u16_char * s, u_t * len, u8 * len, u8 * s, u8 * len ) { if (! u32_t ) return FALSE ; * s = ( u + len ) * s + len ; if (! s ) return ( u32_t ) len = ( u + len ; * len = sizeof ( u + len ) - 1 ; if (! s + len ) ) return - 1 ; if (! s + len ) return - 1 ; if ( len == '\\0' ) { if (! s + len ) return - 1 ; } else { if (! s + 1 ) return FALSE ; } else { if (! ulen ) return ( u + len + len ) * s + len ; * s + len ; * s = u + len ; * s ; * s = u + len ; len ; } else { if (! s == '\\0' ) return TRUE ; } else { if ( u + len >",0
1426,"<S2SV_ModStart>, i ; if (! ( s -> state & PNG_IHDR ) ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> before <S2SV_blank> IHDR\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> state & PNG_IDAT ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> after <S2SV_blank> IDAT\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart>!= 1 ) || s -> bit_depth == 1",0
1427,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } else if,0
1428,<S2SV_ModStart> } dt -> proto = IP_GET_IPPROTO ( p ) ; dt ->,1
1429,"<S2SV_ModStart> ( interface, KSZ8851_ISRX ) ; if ( status & KSZ8851_ISRX <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_RX <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, KSZ8851_RX <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface, KSZ8851_RXST <S2SV_ModEnd> ) ; return",0
1430,"<S2SV_ModStart> const node * n, bool <S2SV_ModEnd> is_async ) { <S2SV_ModStart> is_async ) { const node * const n = is_async? CHILD ( n, 1 ) : 0 ; <S2SV_ModStart>, CHILD ( n, n0 ), n0 <S2SV_ModEnd> ) ; if",0
1431,<S2SV_ModStart> punlock ) { <S2SV_ModEnd> if (!,0
1432,"<S2SV_ModStart> ( AUDIT_APPARMOR_DENIED, __aa_current_profile ( ), GFP_KERNEL, & sa, NULL <S2SV_ModEnd> ) ; }",1
1433,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> image_cannot ( siz <S2SV_ModStart> ) ) { goto error ; } if (! siz -> tileheight ) { jas_eprintf ( ""reference <S2SV_blank> have <S2SV_blank> zero <S2SV_blank> area\\n"" ) ; goto error ; } if (! siz -> tilewidth ||! siz -> tileheight ) { jas_eprintf ( ""image <S2SV_blank> cannot <S2SV_blank> have <S2SV_blank> zero <S2SV_blank> area\\n"" ) ; goto error ; } if (! siz -> numcomps || siz -> numcomps!= siz -> width ) { jas_eprintf ( ""YOsiz <S2SV_blank> not <S2SV_blank> permissible <S2SV_blank> permissible <S2SV_blank> range\\n"" ) ; goto error ; } if ( siz -> width >= siz -> width ) { jas_eprintf ( ""XOsiz <S2SV_blank> not <S2SV_blank> range\\n"" ) ; goto error ; } if (! siz -> height ) { jas_eprintf ( ""YRsiz <S2SV_blank> not <S2SV_blank> permissible <S2SV_blank> permissible <S2SV_blank> area\\n"" ) ; goto error ; } if ( siz -> height ) { jas_ep",0
1434,<S2SV_ModStart> == 0 ) {,0
1435,"<S2SV_ModStart>, xmi_data, xmi_size,",1
1436,"<S2SV_ModStart> size_t total_len ; struct iov_iter iter ; <S2SV_ModStart> ) return 0 ; iov_iter_init ( & iter, iov, nr_segs, total_len, 0 ) <S2SV_ModStart> -> ops ; <S2SV_ModEnd> size_t chars = <S2SV_ModStart> buf -> ops ; size_t written <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> size_t chars",0
1437,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> Quantum index ; <S2SV_ModStart> ++ ) { next_pixel = MagickFalse ; displacement = 1 ; <S2SV_ModStart> -= MaxHashTable ; if ( k < 0 ) continue <S2SV_ModEnd> ; if (,0
1438,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1439,<S2SV_ModStart> { hdl = hdl -> sm_hdl <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> hdl ) { if ( hdl -> sm_hdl ) { if ( hdl -> sm_hdl -> pm_hdl -> sm_hdl ) { if ( hdl -> sm_hdl -> pm_hdl -> sm_hdl ) unlink ( hdl -> sm_hdl -> c_hdl -> pm_hdl ) unlink ( hdl -> sm_hdl ) ; } if ( hdl -> sm_hdl -> pm_hdl -> pm_hdl -> pm_hdl ) { if ( hdl -> fe_hdl -> fe_hdl -> pm_hdl ) unlink ( hdl -> pm_hdl -> c_hdl ) ; } if ( hdl -> fe_hdl -> c_hdl -> c_hdl ) { if ( hdl -> fe_hdl -> fe_hdl -> sm_hdl -> c_hdl -> c_hdl -> c_hdl ) return 0 ; } if ( hdl,0
1440,"<S2SV_ModStart> size_t max_samples ; size_t max_samples ; size_t max_samples ; size_t max_samples ; <S2SV_ModStart> ) ) { jas_eprintf ( ""image <S2SV_blank> max_samples <S2SV_blank> %d <S2SV_blank> %d\\n"", max_samples, max_samples, max_samples, max_samples ) ) ; <S2SV_ModStart> break ; } if (! ( max_samples ) ) { jas_eprintf ( ""max_samples <S2SV_blank> of <S2SV_blank> name <S2SV_blank> %d <S2SV_blank> %d\\n"", max_samples, max_samples, max_samples ) ; return 0 ; }",0
1441,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; } if,0
1442,<S2SV_ModStart> ( ret!= 0 <S2SV_ModEnd> ) { if,0
1443,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1444,<S2SV_ModStart> ; if ( len >= len &&,0
1445,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
1446,<S2SV_ModStart> ; if ( kvm_irq == NULL ) return - EINVAL ; if (,0
1447,<S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; if (,0
1448,<S2SV_ModStart> else { return false <S2SV_ModEnd> ; } case,1
1449,"<S2SV_ModStart> = 0 ; memset ( & sa, 0, sizeof ( sa ) ) ;",0
1450,<S2SV_ModStart> (! handle ||! SecIsValidHandle ( handle ),1
1451,,0
1452,<S2SV_ModStart> old_dentry ) ; <S2SV_ModEnd> if (!,0
1453,<S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> DATA_ENSURE ( 1 <S2SV_ModStart> ++ ; s <S2SV_ModEnd> ++ ; MOP_OUT,1
1454,<S2SV_ModStart> = 1 ; ( void ) plane ;,0
1455,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,0
1456,"<S2SV_ModStart> mntent, pathlen, pathlen",0
1457,<S2SV_ModStart> ( sr ) <S2SV_ModEnd> ; sr ->,0
1458,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> dest_keyring_key_keyring ( dest_key ) <S2SV_ModEnd> ) { struct <S2SV_ModStart> dest_keyring_keyring ( priv <S2SV_ModEnd> ) ; return,0
1459,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> vp9_setup_mode_info ( VP9_COMMON <S2SV_ModStart> * cpi, MACROBLOCKD * x, MACROBLOCKD * xd, xd -> plane [ 0 ] <S2SV_ModEnd>, mi_row, <S2SV_ModStart> mi_row, xd <S2SV_ModEnd>, xd,",0
1460,<S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if ( <S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if (,1
1461,<S2SV_ModStart> ; if ( (,0
1462,"<S2SV_ModStart> pixel_info ) ; ( void ) ResetMagickMemory ( pixels, 0, pixel_info_length ) ;",1
1463,"<S2SV_ModStart> * buf, size_t <S2SV_ModEnd> len ) { <S2SV_ModStart> count ) ; if (! buf ) return - EINVAL ; <S2SV_ModStart> - EINVAL ; } <S2SV_ModEnd> if ( buf",0
1464,<S2SV_ModStart> length ) { if ( map -> len <= 0 ) return - 1 ;,0
1465,<S2SV_ModStart> ) == 0 ) return 0 <S2SV_ModEnd> ; if (,0
1466,<S2SV_ModStart> ; } return 0,0
1467,<S2SV_ModStart> ; break ; if (,0
1468,<S2SV_ModStart> == 1 && ( void ) flags ;,0
1469,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",1
1470,<S2SV_ModStart> h_event ) ; if ( unlikely ( event -> hw_count ) ) return 0 ;,0
1471,"<S2SV_ModStart> uint16_t flags ; ND_TCHECK2 ( tptr, 5 ) ; <S2SV_ModStart> tlen = len <S2SV_ModEnd> ; ND_PRINT (",0
1472,"<S2SV_ModStart> -> outputbuffer, ""%s"", outputbuffer <S2SV_ModEnd> ) ; if",0
1473,"<S2SV_ModStart> src ) { memcpy <S2SV_ModEnd> ( dest_p,",0
1474,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
1475,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1476,"<S2SV_ModStart> iovec, compat, & iter <S2SV_ModStart> len, iovec, & iter <S2SV_ModStart> iter_op ) { ret = iter_op ( req, & iter ) ; } else { ret = rw_op ( req, iter. iov, iter. <S2SV_ModEnd> nr_segs, req",1
1477,"<S2SV_ModStart> } if ( ptr - c -> rcurr > 100 || ( strncmp ( ptr, ""get <S2SV_blank> "", 4 ) && strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "", 5 )",0
1478,<S2SV_ModStart> if (! u16 <S2SV_ModEnd> ) return 0,0
1479,"<S2SV_ModStart> ; if ( ( buf [ 0 ] >= size ) { dev_err ( & config -> dev, ""invalid <S2SV_blank> size <S2SV_blank> interface <S2SV_blank> %d\\n"", ( int ) buf ) ; return - EINVAL ; } if (",0
1480,<S2SV_ModStart> ; ue -> card = card ; ue ->,0
1481,<S2SV_ModStart> client_p ) { return 0 ; } if (,0
1482,<S2SV_ModStart> ctxt -> rip_relative && likely ( ctxt -> memopp ),1
1483,"<S2SV_ModStart> size, size, 0",0
1484,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1485,<S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( x ->,0
1486,"<S2SV_ModStart> ( interface, ENC624J600_EIE, ENC624J600_MACON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_MACON2 <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, ENC624J600_MACON2 <S2SV_ModEnd> ) ; }",0
1487,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> psf_printf ( psf <S2SV_ModStart> ) ) { if ( psf_printf ( psf, header, sizeof ( psf ) ) ) return <S2SV_ModEnd> ; } <S2SV_null>",0
1488,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
1489,"<S2SV_ModStart> ( ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> header <S2SV_blank> to <S2SV_blank> header_bin, <S2SV_blank> got <S2SV_blank> %s"", __func__, header ) ; return false ; } <S2SV_ModEnd> cb1 = (",0
1490,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, get_alg_priv ( <S2SV_ModStart> == NULL ) <S2SV_ModEnd> ; if (",0
1491,<S2SV_ModStart> case EXIT_REASON_VMON : case EXIT_REASON_INVEPT :,1
1492,<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> = get_skippable ( cpi <S2SV_ModEnd> ) ; sf <S2SV_ModStart> ; sf -> segfeature_active = 0.0 ; if ( cpi -> screen == KEY_FRAME ) { if ( cpi -> oxcf. frame_type == KEY_FRAME ) { sf -> seg = 1 ; sf -> frame_speed = 1 ; sf -> frame_speed = 1 ; } else { if ( cpi -> screen == KEY_FRAME ) { cpi -> frame_flags = 1 ; sf -> frame_skip_key = 1 ; sf -> frame_type = 1 ; } else { if ( cpi -> frame_type == KEY_FRAME ) { vp9_rd_skippable = ( cpi -> frame_type == KEY_FRAME ) sf -> frame_type == KEY_FRAME ; sf -> frame_key = 1 ; } else { if ( cpi -> frame_type == KEY_FRAME ) { vp9_skippable = ( cpi -> oxcf. mode == KEY_FRAME ) / 2 ; sf ->,0
1493,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1494,<S2SV_ModStart> ) ) { return ;,0
1495,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, 0 )",0
1496,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ; if",0
1497,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1498,"<S2SV_ModStart> * s ; <S2SV_ModEnd> char * type <S2SV_ModStart> ) { Py_CLEAR ( n, 1 ) ; <S2SV_ModEnd> if (!",0
1499,"<S2SV_ModStart> vpx_codec_ctx_t * s <S2SV_ModEnd>, struct vpx_codec_err_t <S2SV_ModStart> == 0 ) { if ( svc_ctx -> svc_t ) break ; <S2SV_ModStart> } else { svc_ctx -> svc_temporal_layers = 1 ; <S2SV_ModStart> == NULL ) { if ( svc_ctx -> svc_type == 2 ) break ; case VPX_CODEC_ERROR : case VPX_CODEC_PARAMETER : if ( svc_ctx -> temporal_mode == 0 ) { svc_ctx -> svc_type = 1 ; break ; } else { case VPX_CODEC_INVALID : if ( svc_ctx -> temporal_mode == 2 ) { svc_ctx -> temporal_mode = 1 ; break ; } } <S2SV_ModStart> == NULL ) { if ( svc_ctx -> temporal_mode == 0 ) { svc_ctx -> temporal_mode = 1 ; } else if ( svc_type == VPX_CODEC_INVALID_LAYERS ; } else { if ( svc_ctx -> svc_type == NULL ) { svc_",0
1500,<S2SV_ModStart> h_event ) ; if ( unlikely ( event -> hw_count ) ) return 0 ;,0
1501,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1502,<S2SV_ModStart> ; if ( entry == NULL ) return EINVAL ; if ( <S2SV_ModStart> KADM5_POLICY ) && entry -> policy == NULL <S2SV_ModEnd> ) return KADM5_BAD_MASK <S2SV_ModStart> ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK <S2SV_ModEnd> ; if (,1
1503,<S2SV_ModStart> frame -> data [ plane ] && frame -> linesize <S2SV_ModStart> [ plane ] && frame -> linesize [ plane ],1
1504,<S2SV_ModStart> ( mb_cols <S2SV_ModEnd> ) ) ;,0
1505,<S2SV_ModStart> * new_memo ; size_t new_memo,0
1506,,1
1507,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
1508,<S2SV_ModStart> ; int tmp_num = 0 <S2SV_ModEnd> ; # endif,0
1509,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> size, 0 )",0
1510,<S2SV_ModStart> ( wdr ) ; <S2SV_ModEnd> goto out_len ; <S2SV_ModStart> ) ; } if (! phdr ) { return NULL ; },0
1511,<S2SV_ModStart> i + 1 <S2SV_ModEnd> ) ; if,0
1512,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_decode ( NSC_CONTEXT <S2SV_ModStart> ; UINT16 rw ; if ( pos + pos > 0 ) return FALSE ; size_t pos = 0 ; if ( pos + 2 > context -> comps_val ) return FALSE ; <S2SV_ModStart> src ++ ; if ( pos + len > context -> comps_val ) return FALSE ;,0
1513,<S2SV_ModStart> while ( offset > 0 && offset <S2SV_ModStart> < end_offset ) { <S2SV_ModStart> hf_keybuffer ) ; },1
1514,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1515,<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> = cpi -> oxcf ; const <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf ; <S2SV_ModStart> -> oxcf. avg_frame_bandwidth <S2SV_ModEnd> * oxcf -> <S2SV_ModStart> -> avg_frame_bandwidth ; if ( cpi -> oxcf. avg_frame_bandwidth > MAX_FRAME * cpi -> oxcf. avg_frame_bandwidth ) { int max_frame_bandwidth = ( cpi -> avg_frame_bandwidth * cpi -> avg_frame_bandwidth + ( cpi -> avg_frame_bandwidth * cpi -> avg_frame_bandwidth * cpi ) + rc -> avg_frame_bandwidth * 100 ; if ( cpi -> oxcf. avg_frame_bandwidth > MAX_FRAME ) return MAX_FRAME ; } <S2SV_ModStart> -> avg_frame_bandwidth = ( cpi -> avg_frame_bandwidth * cpi -> oxcf. avg_frame_bandwidth * ( cpi -> oxcf. avg_frame_bandwidth + rc -> avg_frame_bandwidth * rc -> avg_frame_bandwidth *,0
1516,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1517,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
1518,"<S2SV_ModStart> void read_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> = vpx_read_lock ( vpx_read_bit <S2SV_ModEnd> ( r ) <S2SV_ModStart> ) ; return vpx_read_literal <S2SV_ModEnd> ( r,",0
1519,<S2SV_ModStart> op + OSPF6HDR_LEN ) ; ND_TCHECK_32BITS ( & hellop -> hello_options,1
1520,<S2SV_ModStart> { if ( datalen!= 1 ) return - EINVAL ; if (,1
1521,<S2SV_ModStart> rc ) { <S2SV_ModEnd> struct * task <S2SV_ModStart> struct * task = NULL ; if ( IS_ERR ( task ) ) { <S2SV_ModStart> rc -> uwbd. task = NULL ; <S2SV_ModEnd> printk ( KERN_ERR <S2SV_ModStart> ) ; },0
1522,"<S2SV_ModStart> : # line 101 ""hex_grammar.y"" { yr_re_node_node_destroy ( * yyvaluep ) ; } # line 1036 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1042 <S2SV_ModEnd> ""hex_grammar.y"" { yr_re_node_node_destroy ( ( * yyvaluep ). re_node ) ; } # line 1042 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 104 ""hex_grammar.y"" { yr_re_node_node_destroy ( ( * yyvaluep ). re_node ) ; } # line 102 ""hex_grammar.y"" { yr_re_node_node_destroy ( ( * yyvaluep ). re_node ) ; } # line 1042 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1042 <S2SV_ModEnd> ""hex_grammar.c"" { yr_re_node_node_node_node_destroy ( ( * yyvaluep ). re_node ) ; } # line 107 ""hex_grammar.y"" { yr_re_node_node",0
1523,<S2SV_ModStart> : idx ; assert ( ptr >= gfx -> backendData && ptr < ( ( char * ) gfx -> backendData + graphicsGetMemoryRequired ( gfx ) ) ) ;,1
1524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const VP9_COMMON * const MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, <S2SV_ModEnd> int mb ; <S2SV_ModStart> struct macroblock ) ; # if CONFIG_VP9_HIGHBITDEPTH * const xd = & xd -> e_mbd ; <S2SV_ModStart> struct macroblock_id ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( xd -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> flags & YV12_FLAG_HIGHBITDEPTH ) { <S2SV_ModStart> VP9_HIGHBITDEPTH vp9_highbd_get_translate ( & cpi -> coeff, & xd -> seg, & cpi -> coeff, tx_size, & cpi -> coeff, tx_size ) ; <S2SV_ModStart> ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( x",0
1525,<S2SV_ModStart> ; if ( p -> selFlags & SF_View ) return 0 ; if (,0
1526,<S2SV_ModStart> { if ( ( <S2SV_ModStart> shmflg & SHM_RND ) && addr >= shmlba,1
1527,"<S2SV_ModStart>, nfs_cnt_state, NULL )",0
1528,<S2SV_ModStart> char * tmp2 <S2SV_ModEnd> ) { int,0
1529,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1530,<S2SV_ModStart> : case NPNVSupportsWindowless : case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling,1
1531,<S2SV_ModStart> ) ; } <S2SV_ModEnd> msg -> msg_size,0
1532,"<S2SV_ModStart>  ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
1533,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> ++ ; } <S2SV_ModEnd> if (!,0
1534,"<S2SV_ModStart>, fname, 1 <S2SV_ModEnd> ) ; for",0
1535,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> ) { return false <S2SV_ModEnd> ; } <S2SV_null>,0
1536,<S2SV_ModStart> fq ) ; fq -> state = NULL ;,0
1537,"<S2SV_ModStart> s ) { uint32 length ; struct stream packet = * s <S2SV_ModEnd> ; ber_parse_header ( <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> params <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",1
1538,<S2SV_ModStart> 0 ; } <S2SV_ModEnd> var_hash_get_var ( & zval <S2SV_ModStart> var_hash ) ; <S2SV_ModEnd> if ( tmp,0
1539,"<S2SV_ModStart> char * filename, int y4m <S2SV_ModStart> ; int bytes_per <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ) { return 0",0
1540,<S2SV_ModStart> char * obj <S2SV_ModEnd> ; if (,0
1541,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> read_disk_table_start ( <S2SV_ModStart> s_table ) ; <S2SV_ModEnd> struct_table_start ( struct xattr_table_start <S2SV_ModStart>. xattr_table_start ; if (! table_start ) return 0 ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ) return 0 ; <S2SV_ModEnd> return 0 ;,0
1542,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_stack_depth ( env <S2SV_ModStart> ) ) { const char * <S2SV_ModEnd> struct env, env <S2SV_ModStart> ) ; } <S2SV_ModEnd> struct env,",0
1543,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return err ;,0
1544,"<S2SV_ModStart> cm ) { memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ) ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ; } vpx_clear_system_state ( ) ; memset <S2SV_ModEnd> ( cm ->",0
1545,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> _type_comment ) <S2SV_ModStart> ( ) ) { <S2SV_ModStart> == NULL ) { <S2SV_ModEnd> return - 1 ; <S2SV_ModStart> } else { if ( <S2SV_ModEnd> _type_comment, <S2SV_ModStart> ( ) ) goto out_err <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) ; if ( _Module ( <S2SV_ModStart> 0 ) ) goto done <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1546,<S2SV_ModStart> = O_NOCTTY <S2SV_ModEnd> ; if (,0
1547,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ; break ; } while ( context -> pass > 0 && context -> pass < 4 && context -> curY >= p -> height ) { switch ( ++ context -> pass ) { case 2 : context -> curY = i -> posY + 4 ; break ; case 3 : context -> curY = i -> posY + 2 ; break ; case 4 : context -> curY = i -> posY + 1 ; break ; },1
1548,<S2SV_ModStart> ) { # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> ( xd ->,0
1549,"<S2SV_ModStart> ) ; } smb_ofile_flush <S2SV_ModEnd> ( sr, <S2SV_ModStart> f_mutex ) ; smb_ofile_flush <S2SV_ModEnd> ( sr,",1
1550,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static u16_t <S2SV_ModEnd> u16bit_shift ( u8_t <S2SV_ModStart> u16_char * s, u_t * len, u8 * len, u8 * s, u8 * len ) { if (! u32_t ) return FALSE ; * s = ( u + len ) * s + len ; if (! s ) return ( u32_t ) len = ( u + len ; * len = sizeof ( u + len ) - 1 ; if (! s + len ) ) return - 1 ; if (! s + len ) return - 1 ; if ( len == '\\0' ) { if (! s + len ) return - 1 ; } else { if (! s + 1 ) return FALSE ; } else { if (! ulen ) return ( u + len + len ) * s + len ; * s + len ; * s = u + len ; * s ; * s = u + len ; len ; } else { if (! s == '\\0' ) return TRUE ; } else { if ( u + len >",0
1551,"<S2SV_ModStart> ; if ( * cp == '\\0' || <S2SV_ModEnd> strchr ( cp <S2SV_ModStart> )!= NULL || <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ( cp, ""."" ) == 0 || strcmp ( cp, <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { run_err",1
1552,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> char * in, int numbuffer <S2SV_ModEnd>, int num2 <S2SV_ModStart> * s2, int num2 <S2SV_ModEnd> ; int num2 <S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == '\\"" ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == '\\"" ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == '\\""\\"" ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0'\\"" ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == '\\"" ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>",0
1553,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( const size_t * ) val ; return 0 ;,0
1554,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart>, id ; if ( unlikely ( siphash_key_is_zero ( & net -> ipv4. ip_id_key ) ) ) get_random_bytes ( & net -> ipv4. ip_id_key <S2SV_ModEnd>, sizeof ( <S2SV_ModStart>, sizeof ( net -> ipv4. ip_id_id_key <S2SV_ModEnd> ) ) ; <S2SV_ModStart>, sizeof ( net -> ipv4. ip_id_id_key <S2SV_ModEnd> ) ; id",0
1555,"<S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lineno, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""lineno\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> stmt"" ) ; return 1 ; } else <S2SV_ModEnd> { int res <S2SV_ModStart> int res ; res = obj2ast_identifier ( tmp ) ; if ( res!= 0 <S2SV_ModEnd> ) goto failed <S2SV_ModStart> goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_val, & PyId_val, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; } else { int res ; res = obj2ast_string ( tmp, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, arena ) < 0 ) { Py_None ; } if ( lookup_attr_id ( obj, & PyId_",0
1556,"<S2SV_ModStart> void write_inter_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",0
1557,"<S2SV_ModStart> ctl -> pw, "".chfn""",1
1558,<S2SV_ModStart> { if ( max_length < sizeof ( struct ieee80211_radiotap_header ) ) return - EINVAL ; if ( <S2SV_ModStart> iterator -> _rtheader + sizeof ( uint32_t ),1
1559,<S2SV_ModStart> ; if (! skb -> alen ) { err = - ENOMEM ; goto out ; } <S2SV_ModStart> ) ; } if (!,0
1560,<S2SV_ModStart> src -> frame_state <S2SV_ModEnd> ) ; },0
1561,"<S2SV_ModStart> return ; } if ( input <= 0.0 || output <= 0.0 ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Gamma <S2SV_blank> values <S2SV_blank> should <S2SV_blank> be <S2SV_blank> positive"" ) ; RETURN_FALSE ; }",1
1562,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_bit_depth = 1,0
1563,<S2SV_ModStart> ; if ( cmd -> dev ) return ; if (,0
1564,<S2SV_ModStart> ; gname = g_fd_t new_name <S2SV_ModEnd> ; if (,0
1565,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> tile_cols ) { VP9_COMMON * const tile_data = & tile_data -> tile_cols ; VP9_COMMON * const tile_info = & tile_data -> tile_info -> tile_data [ tile_col ] ; <S2SV_ModEnd> int segment_idx ] <S2SV_ModStart> ; vpx_read <S2SV_ModEnd> ( cm, <S2SV_ModStart> -> tile_data, <S2SV_ModEnd> tile_cols ) ; vpx_read <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; vpx_read <S2SV_ModEnd> ( tile_data, <S2SV_ModStart> tile_end ) ; vpx_read <S2SV_ModEnd> ( tile_end, <S2SV_ModStart> == NULL ) vpx_read <S2SV_ModEnd> ( cm -> <S2SV_ModStart> -> tile_data, <S2SV_ModEnd> vp9_log2_tile_info,",0
1566,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static vpx_decode_init ( VP9_COMMON * const VP9_COMMON * const MACROBLOCKD * const cm ) vpx_decode = & cm -> frame_parallel_decode ) { VP9_COMMON * const cm = & pbi -> common ; MACROBLOCKD * const cm = & pbi -> common ; vpx_decode = 0 ; vpx_get_system_state ( ) ; vpx_decode_worker_data <S2SV_ModEnd> ; vpx_decode_state <S2SV_ModStart> = 0 ; vpx_get_layer_data <S2SV_ModEnd> ( & cm <S2SV_ModStart> == NULL ) vpx_decode <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ; vpx_free ( cm -> frame_parallel_decode ) vpx_decode <S2SV_ModStart> = 0 ; vpx_free ( cm -> frame_parallel_decode ) vpx_decode = 0 ; vpx_decode_loop_frame_data [ i ] = 0 ; vpx_free ( cm -> frame_bufs [ i ]. frame_,0
1567,<S2SV_ModStart> ) ) { if ( s == NULL ) return GF_IS_INVALID_BITS <S2SV_ModEnd> ; } if,0
1568,<S2SV_ModStart> ( client ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1569,<S2SV_ModStart> -> count ; new_fpl -> user = get_uid ( fpl -> user ) ;,1
1570,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> * opt ; opt = rcu_dereference_protected ( opt ) -> opt.,0
1571,"<S2SV_ModStart> t, const vpx_tree_index <S2SV_ModEnd> * tree )",0
1572,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> : 1 ; vpx_codec_alg_priv_t * sizeof ( flags ) ; if (! ( flags & VPX_IMG_FMT_TH ) ) { if (! ( flags & VPX_IMG_FMT_HIGHBITDEPTH ) ) return VPX_IMG_FALSE ; } if ( flags & VPX_IMG_FMT_THREAD | VPX_IMG_FMT_THREAD | VPX_IMG_FMT_EINVALID_THREAD | VPX_THREAD | VPX_IMG_FALSE ; <S2SV_ModStart> ) ) ; } else { if ( flags & VPX_COMP_IMG_FALSE ) { return VPX_IMG_FALSE ; } <S2SV_ModStart> ) ) ; },0
1573,<S2SV_ModStart> = get_prequeue ( & ctx <S2SV_ModEnd> ) ; if,0
1574,<S2SV_ModStart> ) ; struct mnt_namespace * ns = dest_mnt -> mnt_ns ; struct <S2SV_ModStart> ; if (! parent_mnt <S2SV_ModEnd> ) { err <S2SV_ModStart> = mnt_ns -> mnt_ns -> mnt_ns ; if ( err ) goto out ; <S2SV_ModStart> ; if ( dest_mnt <S2SV_ModEnd> ) { err <S2SV_ModStart> goto out ; },0
1575,"<S2SV_ModStart>, & len, 0",1
1576,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = _mm_set1_epi16 ( ( int16_t ) <S2SV_ModStart> = _mm_set1_epi16 ( ( int16_t ),1
1577,<S2SV_ModStart> int rc ; const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> * oxcf = rc -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf ->,0
1578,<S2SV_ModStart> in ) { <S2SV_ModEnd> if ( hdr,0
1579,"<S2SV_ModStart> int * fout, int maxoffset <S2SV_ModStart> NULL, fout, hunk",0
1580,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> t * cpi <S2SV_ModStart> -> common ; TileInfo * const tile_data = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> td. mbmi ; MACROBLOCKD * const xd = & cpi -> td. mbmi ; MACROBLOCKD * const xd = & cpi -> common. mbmi ; MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const mbmi = & x -> mi_row_row * const mbmi ; <S2SV_ModStart> = x -> mbmi_ext ; if ( x -> mbmi. segment_id == BLOCK_SIZE && x -> plane [ cpi -> mbmi. mbmi. segment_id ] == KEY_FRAME && cpi -> common. segment_id == KEY_FRAME ) { if ( cpi -> common. skip_lookup [ cpi -> common. segment_id ] == BLOCK_8X8X8X,0
1581,"<S2SV_ModStart> ; if ( ( buf [ 0 ] >= size ) { dev_err ( & config -> dev, ""invalid <S2SV_blank> size <S2SV_blank> interface <S2SV_blank> %d\\n"", ( int ) buf ) ; return - EINVAL ; } if (",0
1582,<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> ] ; struct crypto_cipher * tfm_key <S2SV_ModEnd> ; struct crypto_cipher <S2SV_ModStart> ; tfm_des = crypto_cipher_cipher * tfm_key <S2SV_ModEnd> ; tfm_des <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1583,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1584,<S2SV_ModStart> bit_buffer ) { size_t bit_depth = 0 ; <S2SV_ModStart> + 1 ; if (! ctx -> bit_depth ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> + 1 ; } else if ( <S2SV_ModEnd> + 1 ) <S2SV_ModStart> + 1 ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; <S2SV_ModEnd> } else return 0,0
1585,<S2SV_ModStart> i > pos + delta <S2SV_ModStart> off + 1 <= pos + delta <S2SV_ModEnd> ) insn ->,1
1586,<S2SV_ModStart> case EXIT_REASON_INVEPT : case EXIT_REASON_INVVPID :,1
1587,"<S2SV_ModStart> } if ( ( <S2SV_ModStart> i == NULL ) || ( osStrchr <S2SV_ModEnd> ( error,",0
1588,<S2SV_ModStart> ; result = 0 ; if (,0
1589,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1590,"<S2SV_ModStart> ++ r ; if <S2SV_ModEnd> ( pow ( <S2SV_ModStart>, dim ) <= entries ) return - 1 ; if <S2SV_ModEnd> ( ( int <S2SV_ModStart> dim ) ) > entries ) return - 1 <S2SV_ModEnd> ; return r",1
1591,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> dds_info, exception ) <S2SV_ModEnd> ; } <S2SV_null>",0
1592,"<S2SV_ModStart> -> ip_options, optlen <S2SV_ModEnd> ) ; if",0
1593,<S2SV_ModStart> 0 ; } <S2SV_ModEnd> var_hash_get_var ( & zval <S2SV_ModStart> var_hash ) ; <S2SV_ModEnd> if ( tmp,0
1594,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, MSG_NOSIGNAL )",0
1595,"<S2SV_ModStart> w ) { sprintcpy ( outputbuffer <S2SV_ModEnd>, ""\\0 <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> c%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> c%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3 <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12, <S2SV_blank> %12, <S2SV_blank> %12.3f <S2SV_blank> %12.3 <S2SV_blank> %12",0
1596,"<S2SV_ModStart> cfg ) { int fd ; struct stat st ; file = NULL ; fopen ( filename, O_WRONLY | O_WRONLY | O_WRONLY | O_NOFOLLOW | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY ) ; fclose ( fd <S2SV_ModEnd>, file ) <S2SV_ModStart> == 0 ) fclose ( file ) ; <S2SV_ModEnd> if ( fd <S2SV_ModStart> == - 1 ) fclose ( file ) ; fclose ( file ) ;",0
1597,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! f2fs_readonly (,1
1598,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1599,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> c"", <S2SV_ModStart> y1 ) ; sendClean ( outputbuffer ) ;",0
1600,<S2SV_ModStart> rdp ) ; if (! rdp -> length ) return FALSE,0
1601,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> return 0 ;,0
1602,<S2SV_ModStart>. mb_col ; memset <S2SV_ModEnd> ( cm ->,0
1603,<S2SV_ModStart> == ARPHRD_ETHER ) { <S2SV_ModStart> ether_setup ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; },1
1604,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (",1
1605,<S2SV_ModStart> ; # endif vpx_codec_err_t <S2SV_ModEnd> ( pbi ),0
1606,<S2SV_ModStart> { if ( l == NULL ) break ; if (,1
1607,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> xWantedSize <S2SV_ModEnd> ) { if <S2SV_ModStart> { if ( ( xWantedSize & xWantedSize > xWantedSize ) { if ( xWantedSize & xWantedSize + ( xWantedSize & portBYTE_ALIGNMENT_MASK ) > xWantedSize ) ) { xWantedSize = 0 ; } else { xWantedSize = 0 ; } else { xWantedSize = 0 ; } else { xWantedSize = 0 <S2SV_ModEnd> ; } if,0
1608,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1609,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1610,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpDiff"", ""%s"", ""(cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> cp -- ) return 1 ;",1
1611,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1612,<S2SV_ModStart> ; sval ) <S2SV_ModEnd> ; if (,0
1613,<S2SV_ModStart> case ND_TCHECK2 ( * tptr ),0
1614,<S2SV_ModStart> { uint16 bitspersample = 1,0
1615,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1616,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vp_coef_probs ( vp9_coef_coeffs * x, MACROBLOCKD * xd, vpx_reader * xd, vpx_coef_probs [ tx_size ]. tx_size ) { vp9_set_coef_probs ( x, tx_size, tx_size ) ; vpx_coef_probs <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ], xd <S2SV_ModEnd> ) ; }",0
1617,<S2SV_ModStart> { r = mode_t <S2SV_ModEnd> ; r =,0
1618,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 2 ] = 0x87 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0x86 ; state -> data [ 2 ] = 0xe ; if ( dvb_usb_generic_rw ( d, state -> data, 1, 3, 3, state -> data, 1, 1, 3 ) < 0 ) err ( ""command <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 2 ] = 0xe ; state -> data [ 2 ] = 0",0
1619,<S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
1620,"<S2SV_ModStart>, vpx_codec_alg_priv_t * get_alg_priv ( ) <S2SV_ModEnd> ; if (",0
1621,"<S2SV_ModStart> int mv_sb, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> 0 ] ; uint8_t vp9_block_variance <S2SV_ModEnd> ( uv_stride, <S2SV_ModStart> ) ) { vpx_variance <S2SV_ModEnd> ( mv_sb, <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1622,"<S2SV_ModStart> ( bufp, buf <S2SV_ModEnd> ) ; if",0
1623,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int n, <S2SV_ModStart> n ) { if ( c == '\\0' ) { <S2SV_ModEnd> if ( n <S2SV_ModStart>, 1, n, c ) ; } <S2SV_ModEnd> if ( n <S2SV_ModStart> == '\\n"" ) { <S2SV_ModEnd> if ( c <S2SV_ModStart> == '\\n"" ) <S2SV_ModEnd> return 0 ;",0
1624,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, task ) )",0
1625,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || inode -> i_lenAlloc > bh ) goto out ; <S2SV_ModStart> ( inode ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( inode ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( inode -> i_sb > bs ) goto out ; if ( iinfo ->,0
1626,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
1627,<S2SV_ModStart> i ] ; size_t i ; if ( len == AVERROR_INVALID_LIMING ) { return NULL ; } <S2SV_ModStart> case MAPI_ERROR : assert ( a -> type == NULL ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> i ++ ;,0
1628,<S2SV_ModStart> int i ; <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1629,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> h ; if,0
1630,<S2SV_ModStart> out_mutex ) ; if ( err == - EINVAL ) goto out_put ;,0
1631,"<S2SV_ModStart> i, const VP9_COMMON * cpi <S2SV_ModEnd> ) { const <S2SV_ModStart> i ; vpx_reader * cpi <S2SV_ModEnd> = cpi -> <S2SV_ModStart> i ; vpx_clear_delta_system_delta_data <S2SV_ModEnd> ( & cm <S2SV_ModStart> i ) ; if ( segfeature_active ( & cm -> seg, i ) ; for ( i = 0 ; i < segfeature_active ( & cpi ) ) { int i ; i = get_segfeature_active ( & cpi ) ; if ( segfeature_active ( & cm -> seg, segment_delta_thresh, i ) ; if ( segfeature_active ( & cm -> seg, i, i ) ) { memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> segfeature_active ( & cpi <S2SV_ModEnd> ) ) ; <S2SV_ModStart> if (! segfeature_active <S2SV_ModEnd> ) continue ; <S2SV_ModStart> i ] = get_delta_delta_segfeature_active <S2SV_ModEnd> ( & cpi <S2SV_ModStart> i ) ; for ( i = i = i <S2SV_ModEnd> ; i <S2SV_null>",0
1632,"<S2SV_ModStart> ( sock, EINVAL ; if (",0
1633,"<S2SV_ModStart> ( void ) TIFFGetFieldDefaulted <S2SV_ModEnd> ( in,",1
1634,<S2SV_ModStart> ( error_t ) &&! error_code,0
1635,"<S2SV_ModStart> ] ) { strcpy <S2SV_ModEnd> ( buf,",0
1636,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1637,"<S2SV_ModStart> ""corrupt <S2SV_blank> BSON"" ) ; VALIDATE_TEST ( ""corrupt <S2SV_blank> BSON"" ) ;",0
1638,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } if (,0
1639,<S2SV_ModStart> = 0 ; ps_dec ->,0
1640,<S2SV_ModStart> -> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock,0
1641,<S2SV_ModStart> ; if ( k_data_len < sizeof ( key_data ) - 1 ) goto err ; <S2SV_ModStart> goto err ; kfree ( key_data ) ;,0
1642,"<S2SV_ModStart> } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1643,"<S2SV_ModStart> -> pmu, mutex_lock <S2SV_ModEnd> ) return",0
1644,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 2 ] = 0x87 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0x86 ; state -> data [ 2 ] = 0xe ; if ( dvb_usb_generic_rw ( d, state -> data, 1, 3, 3, state -> data, 1, 1, 3 ) < 0 ) err ( ""command <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 2 ] = 0xe ; state -> data [ 2 ] = 0",0
1645,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1646,<S2SV_ModStart> L ) ; g -> gcstate = GCSswpallgc ;,0
1647,<S2SV_ModStart> ; return ret <S2SV_ModEnd> ; } if,0
1648,"<S2SV_ModStart> int ssl_log ( c <S2SV_ModEnd>, NULL, <S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } <S2SV_null>",0
1649,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ipcnto_socket ( struct <S2SV_ModStart> struct sockaddr ; struct sockaddr * cip, <S2SV_ModStart>, server, & addr, <S2SV_ModEnd> ) ; int <S2SV_ModStart>, struct sockaddr_in * <S2SV_ModStart> struct ctx ; if ( server -> ipc_options. o_clients ) { struct sockaddr_in_clients * tmp ; memset ( & server, 0, sizeof ( struct sockaddr_clients ) - 1 ) ; if ( * <S2SV_ModStart>, addr, & <S2SV_ModEnd> sock ) ) { <S2SV_ModStart>, server -> ipcnt_options, & <S2SV_ModStart> 1 ) ; } if ( server -> session ) { <S2SV_ModEnd> if ( server <S2SV_ModStart> -> ipv_options. url, & <S2SV_ModStart>, NULL, <S2SV_ModEnd> ) ; } <S2SV_ModStart> cpy ( client -> ipv_socket <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( client, & addr, <S2SV_ModEnd> ) ; }",0
1650,<S2SV_ModStart> ; # endif memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
1651,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1652,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",1
1653,"<S2SV_ModStart> ( bp, len <S2SV_ModEnd> ) ) ;",0
1654,"<S2SV_ModStart> ctx, expr -> unary. child",1
1655,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1656,"<S2SV_ModStart> int mptctl_do_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
1657,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> image_colormap ) { c = ( unsigned char * ) RelinquishMagickMemory ( CorruptImageError, ""UnexpectedEndOfFile"" ) ; if ( c == 0 ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) <S2SV_ModStart> unsigned char * <S2SV_ModEnd> ; image = ( <S2SV_ModStart> unsigned char * ) c <S2SV_ModEnd> ; image = ( <S2SV_ModStart> unsigned char * ) c <S2SV_ModEnd> ; image = ( <S2SV_ModStart> unsigned char * ) c <S2SV_ModEnd> ; image = ( <S2SV_ModStart> unsigned char * ) c <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { if ( c < 0 ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ; if ( c < 0 ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile""",0
1658,"<S2SV_ModStart> ; if ( jas_eprintf ( ""cannot <S2SV_blank> have <S2SV_blank> image\\n"" ) ) { jas_eprintf ( ""cannot <S2SV_blank> have <S2SV_blank> all\\n"" ) ; return - 1 ; } if (",0
1659,"<S2SV_ModStart> = 0 ; if ( strlen ( name, sizeof ( opt_args ) ) return - 1 ;",0
1660,"<S2SV_ModStart> int vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> int n, vpx_read_literal <S2SV_ModEnd> ( r ) <S2SV_ModStart> ) ; vpx_read_literal <S2SV_ModEnd> ( r,",0
1661,<S2SV_ModStart> ; int is_valid = ( error == GIT_OK ) <S2SV_ModStart> giterr_clear ( ) <S2SV_ModEnd> ; error =,1
1662,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1663,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_inter_mode ( VP9_COMMON <S2SV_ModStart> * cm, MACROBLOCKD * xd, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> int mode_mode = vpx_reader <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> inter_mode_prob",0
1664,<S2SV_ModStart> msg ) ; if (! <S2SV_ModStart> ) ) { return 0 ; },0
1665,<S2SV_ModStart> vpx_codec_err_t <S2SV_ModEnd> = 0 ; <S2SV_ModStart> vpx_codec_err = 0 ; # if CONFIG_VP9_HIGHBITDEPTH # if CONFIG_VP9_HIGHBITDEPTH # if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH # if CONFIG_VP9_HIGHBITDEPTH # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( stream -> flags & VPX_HIGHBITDEPTH ) { vpx_codec_init_internal = ( & VPX_IMG_FMT_HIGHBITDEPTH ) ; # else if CONFIG_VPX_HIGHBITDEPTH switch ( stream -> cfg. fmt & VPX_FMT_HIGHBITDEPTH ) { return 0 ; } # endif <S2SV_ModStart> VPX_IMG_FMT_HIGHBITDEPTH } # endif,0
1666,<S2SV_ModStart> = 0 ; ND_TCHECK2 ( & ep -> s_opt ) ;,0
1667,<S2SV_ModStart> REASON_FAILURE ) { return ERROR ; },0
1668,"<S2SV_ModStart> ) ; goto unix_dgram_peer_wake_disconnect <S2SV_ModEnd> ( sk, <S2SV_ModStart> ) ; } <S2SV_ModEnd> * unix_dgram_peer_wakeup ( sk",0
1669,<S2SV_ModStart> ; int ret <S2SV_ModStart> ; if ( key == NULL ) { ret = - ENOMEM ; goto error ; } if (,0
1670,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; if ( <S2SV_ModStart> -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len - A,1
1671,"<S2SV_ModStart> ]. size ; if ( ~ length < 16 ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" )",1
1672,"<S2SV_ModStart> ; stbbr_send ( ""<message <S2SV_blank> type=\'stabber@localhost\' <S2SV_blank> to=\'stabber@localhost/profanity\'stabber@localhost\' <S2SV_blank> xmlns=\' <S2SV_blank> xmlns=\'stabber:xmpp:carbons:0\' <S2SV_blank> type=\'stabber@localhost/profanity\'stabber@localhost/profanity\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> xmlns=\' <S2SV_blank> xmlns=\' <S2SV_blank> type=\'stabber@localhost/profanity\' <S2SV_blank> type=\'stabber@localhost/profanity\' <S2SV_blank> to <S2SV_blank> type=\'urn:xmpp=\'stabber@localhost/profanity\'>"" <S2SV_ModEnd> ; } < 0",0
1673,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1674,<S2SV_ModStart> = 0 ; if ( tok -> type == NULL ) return NULL ;,0
1675,,0
1676,<S2SV_ModStart> ) ) { if ( s == NULL ) { GF_LOG_TRUE ; return GF_LOG_TRUE ; } <S2SV_ModStart> ) ) ; },0
1677,<S2SV_ModStart> ; rsize = 0 <S2SV_ModEnd> ; if (,0
1678,<S2SV_ModStart> ( dpBUFSIZE <S2SV_ModEnd> ) ; if,0
1679,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! addr ||! addr ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart>, addrlen, & addrlen_in <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; if ( addrlen_out > sizeof ( addrlen_in ) OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_in >= addrlen_out ) { if ( addrlen_out > addrlen_out ) OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
1680,,1
1681,<S2SV_ModStart> return FALSE ; if (! s ) return FALSE ;,0
1682,"<S2SV_ModStart> ipv6_txoptions * opt ; struct ipv6_txoptions * opt <S2SV_ModStart> ) ) ; opt = rcu_dereference ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> & fl6, opt <S2SV_ModEnd> ) ; if <S2SV_ModStart>! opt ) { opt = rcu_read_unlock ( ) ; } <S2SV_ModEnd> if ( fl6_dereference <S2SV_ModStart> flen, np -> opt_to_free ) ;",0
1683,"<S2SV_ModStart>, u32 max_t max_samples, <S2SV_ModEnd> unsigned int max_t <S2SV_ModStart> uint32_t * max_t <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> 0 } ; # if CONFIG_VP9_HIGHBITDEPTH if ( u32_t * sizeof ( u32_t ) - 1 ) >= sizeof ( guint ) - 1 ) { if ( u32_t ) pr_debug_errno = - 1 ; break ; case '\\0' : if ( u32_t ) pr_debug = - 1 ; break ; case '\\0' : if ( ei_data [ i ] == 0 ) { pr_err = - EINVAL ; goto done ; } <S2SV_ModStart> if ( uvsize >= sizeof ( u32_t ) - 1 ) { if ( u32_t ) pr_errno = - 1 ; break ; } <S2SV_ModStart> goto out ; for ( i < sizeof ( uvfile ) - 1 ; i < sizeof ( uint32_t ) - 1 ) { if ( uv4_t ) - 1 ) { if ( stderr_data_data_size >= - 1 ) goto exit ; } for ( i = 0 ; i < sizeof",0
1684,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, dm9000ReadReg ( DM9000_EPOS <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPOS <S2SV_ModEnd> ) ; while <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPDRH <S2SV_ModEnd>, dm9000ReadReg ( DM9000_EPOS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPOS | DM9000_EPDRH <S2SV_ModEnd> ) ; dm9000ReadReg <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPOS <S2SV_ModEnd> ) ; while",0
1685,"<S2SV_ModStart>, buffer, t2p -> tiff_datasize,",1
1686,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
1687,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_decode ( NSC_CONTEXT <S2SV_ModStart> ; UINT16 rw ; if ( pos + pos > 0 ) return FALSE ; size_t pos = 0 ; if ( pos + 2 > context -> comps_val ) return FALSE ; <S2SV_ModStart> src ++ ; if ( pos + len > context -> comps_val ) return FALSE ;,0
1688,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inode -> i_len <S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ; if (,0
1689,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1690,<S2SV_ModStart> REASON_FAILURE ) { return ERROR ; },0
1691,"<S2SV_ModStart> -> private ; <S2SV_ModEnd> cib = ctx <S2SV_ModStart> ( private -> password, NULL <S2SV_ModEnd> ) ; }",0
1692,<S2SV_ModStart> size = 0 ; if ( unlikely (! addr_len ) ) return - EFAULT,0
1693,"<S2SV_ModStart> -> sf, const VP9_COMMON * const x, int projected_mv, <S2SV_ModStart> & cpi -> td. <S2SV_ModStart> -> e_mbd ; const <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } else { <S2SV_ModStart> this_sse = vp9_mv_init <S2SV_ModEnd> ( & best_mv <S2SV_ModStart> &= 0 ; <S2SV_ModEnd> } else { <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> } } <S2SV_null>",0
1694,<S2SV_ModStart> -> base ; if ( <S2SV_ModEnd> h -> h,0
1695,<S2SV_ModStart> - ENOMEM ; } if ( ( * ep == '\\0' ) ) { <S2SV_ModStart> - EINVAL ; },0
1696,"<S2SV_ModStart> ( used_address && msg_sys -> msg_name && <S2SV_ModStart> -> name, msg_sys <S2SV_ModEnd> -> name, <S2SV_ModStart> -> name, msg_sys <S2SV_ModEnd> -> name,",0
1697,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
1698,"<S2SV_ModStart> number_colormaps, number_planes, number_planes_filled <S2SV_ModStart> -> rows ; number_planes_filled = ( number_planes % 2 == 0 )? number_planes : number_planes + 1 ; <S2SV_ModStart> ( number_planes_filled <S2SV_ModEnd> * number_pixels",0
1699,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
1700,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1701,"<S2SV_ModStart> client -> buffer, NULL <S2SV_ModEnd> ) ; }",0
1702,<S2SV_ModStart> -> next = do (,0
1703,"<S2SV_ModStart> -> xfs, file",0
1704,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1705,<S2SV_ModStart> old_dentry ) ; <S2SV_ModEnd> if (!,0
