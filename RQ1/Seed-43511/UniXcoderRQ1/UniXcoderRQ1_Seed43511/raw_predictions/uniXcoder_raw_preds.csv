,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; if ( n2size < 1 ) <S2SV_ModEnd> { applog (,0
1,"<S2SV_ModStart> case EAP_TYPE_PACKET : ND_TCHECK_8BITS ( tptr ) ; <S2SV_ModStart> * ( tptr ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> 2 ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart>, ""unknown"", subtype ), subtype <S2SV_ModEnd> ) ) ; <S2SV_ModStart> len ) { ND_TCHECK_8BITS ( tptr + len ) ; <S2SV_ModStart> case EAP_TYPE_TTLS : case EAP_TYPE_TLS : ND_TCHECK_8BITS ( tptr + 5 ) ; if ( subtype == EAP_TYPE_TTLS ) <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_TTLS : ND_TCHECK_8BITS ( tptr + 5 ) ;",0
2,<S2SV_ModStart> - EFAULT ; return - EINVAL ;,0
3,<S2SV_ModStart> EINVAL ; } if ( (!,0
4,<S2SV_ModStart> if ( ( skb_hdr_len < 0 ) ||,0
5,"<S2SV_ModStart>, offset ; if ( avio_feof ( f ) ) { index -> item_count = 0 ; av_freep ( & index -> items ) ; return AVERROR_INVALIDDATA ; }",1
6,<S2SV_ModStart> * tpg ; u16 <S2SV_ModEnd> tpgt ; int <S2SV_ModStart> ; if ( kstrtou16 <S2SV_ModEnd> ( name + <S2SV_ModStart> ) || tpgt >= VHOST_SCSI_MAX_TARGET <S2SV_ModEnd> ) return ERR_PTR,1
7,<S2SV_ModStart> NULL ) { if (!,0
8,"<S2SV_ModStart> { u32 data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; kvm_read_guest_cached ( vcpu -> kvm, & <S2SV_ModEnd> vcpu -> arch <S2SV_ModStart>. apic -> vapic_cache, & data, sizeof ( u32 ) <S2SV_ModEnd> ) ; apic_set_tpr",1
9,<S2SV_ModStart> src ) ; __switch_to_tm ( src ) ; tm_recheckpoint_new_task ( src ) ;,1
10,<S2SV_ModStart> item ) { <S2SV_ModEnd> return c ; <S2SV_ModStart> item ) ; <S2SV_ModEnd> return c ;,0
11,"<S2SV_ModStart> ( sb, KERN_ERR,",1
12,"<S2SV_ModStart> ipv6_select_ident ( fptr, ( struct rt6_info * ) skb_dst ( skb )",1
13,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct perf_sample_data <S2SV_ModStart>, regs, <S2SV_ModEnd> data, regs",0
14,<S2SV_ModStart> ] ) { <S2SV_ModEnd> char buf [ <S2SV_ModStart> ] ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
15,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
16,<S2SV_ModStart> == 0 ) sanitize_dead_code ( env ) ; if ( ret == 0 ),1
17,"<S2SV_ModStart> int i ; if (! config -> sample_rate ) { strcpy ( wpc -> error_message, ""sample <S2SV_blank> rate <S2SV_blank> cannot <S2SV_blank> be <S2SV_blank> zero!"" ) ; return FALSE ; }",1
18,"<S2SV_ModStart> = 0 ; unsigned char sense_buffer [ SCSI_SENSE_BUFFERSIZE ], * senseptr = NULL ; <S2SV_ModStart> cd -> device ; if ( cgc -> sense ) senseptr = sense_buffer <S2SV_ModStart> -> device ; <S2SV_ModEnd> cgc -> senseptr = sense_buffer",0
19,<S2SV_ModStart> ; if ( ERROR == 0 ||,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> vp9_loop_filter_filter_filter_rate ( VP9_COMP <S2SV_ModStart> const cpi, const VP9_COMMON * s_err_err = & cpi -> td. <S2SV_ModStart> = 0 ; int is_filter_filter_level = - 1 ; memset <S2SV_ModEnd> ( sd, <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( ss_err ) { l_err = - 1 ; memcpy <S2SV_ModEnd> ( sd, <S2SV_ModStart> = 0 ; } else { s_err = <S2SV_ModEnd> ( sd, <S2SV_ModStart> - 1 ; } <S2SV_ModStart> <S2SV_null> <S_null>",0
21,<S2SV_ModStart> len == 0 && len,0
22,"<S2SV_ModStart> void write_hp, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> ) ; vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, vpx_writer <S2SV_ModEnd> * w,",0
23,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ralg -> seedsize,1
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (,1
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> = COAP_SIZE_1024 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> ( ) ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
26,<S2SV_ModStart> char * fmtname ; int debug <S2SV_ModStart> = 0 ; debug = 0 ; <S2SV_ModStart> break ; case OPT_DEBUG : debug = atoi ( jas_optarg ) ; break ; case <S2SV_ModStart> ; } } jas_setdbglevel ( debug ) ; <S2SV_ModStart> ) ) { jas_stream_close ( instream ) ;,1
27,<S2SV_ModStart> esr ) { siginfo_t info ; void __user * info = ( void __user * ) instruction_regs ( regs ) ; <S2SV_ModStart> esr ) ; __user_regs ( regs ) ; info. si_signo = ( regs ) ; info. si_signo = 0 ; info. si_errno = 0 ; info. si_signo = 0 ; info. si_signo = 0 ; info. si_signo = 0 ; info. si_signo = 0 ; info. si_signo = 0 ; info. si_signo = 0 ; info. si_signo = 0 ; info. si_errno = 0 ;,0
28,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; ptr ++ ; length -= 2 <S2SV_ModStart> ) ) { if ( length < 2 ) return ; <S2SV_ModStart> ptr ++ ; length -= 2 ;",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * <S2SV_ModEnd> alt ; alt <S2SV_ModStart> ; if (! alt ) return - ENODEV <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart> ( udev, alt -> <S2SV_ModEnd> desc. bInterfaceNumber <S2SV_ModStart> bInterfaceNumber, alt -> desc. bAlternateSetting",1
30,<S2SV_ModStart> <S2SV_,0
31,<S2SV_ModStart> == - 1 || default,0
32,<S2SV_ModStart> unsigned long flags ; if ( qid > NVMET_NR_QUEUES ) return NULL,1
33,<S2SV_ModStart> -> bNumEndpoints ; <S2SV_ModEnd> if ( retval,0
34,<S2SV_ModStart> < 1 || vstart + vdaux < vstart <S2SV_ModEnd> ) { sdb_free,1
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) return NULL ; } * dest_keyring = dest_keyring ; <S2SV_ModStart> ) ; } * dest_keyring = dest_get_keyring ;,0
36,<S2SV_ModStart> = create_spnego_ctx ( 1,1
37,"<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if ( addr -> l2tp_family!= AF_INET <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> ret = - <S2SV_ModStart> ( sk ) ; if (! sock_flag ( sk, SOCK_ZAPPED ) ) goto out",1
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> static unsigned int <S2SV_ModEnd> max_uv_max_max_size ( unsigned <S2SV_ModStart> int max_random_size = ( sizeof ( unsigned int ) >> PAGE_MASK )? 1 : 0 ; if ( max_MAX ) { return - EINVAL ; },0
39,"<S2SV_ModStart>, _ ( ""Trust <S2SV_blank>",0
40,<S2SV_ModStart> t t ; if ( t == '\\0' ) return,0
41,<S2SV_ModStart> length ) ; if (!,0
42,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_adapter * d = adap -> dev ; struct dw2102_state * state = d -> data ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x51 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1 )",0
43,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
44,<S2SV_ModStart> } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> static,0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
46,"<S2SV_ModStart> tsample_t s ; uint16 bps = 0 ; ( void ) TIFFGetField ( in, TIFFTAG_BITSPERSAMPLE, & bps ) ; if ( bps!= 8 ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can <S2SV_blank> only <S2SV_blank> handle <S2SV_blank> BitsPerSample=8 <S2SV_blank> in <S2SV_blank> %s"", ""cpContig2SeparateByRow"" ) ; return 0 ; }",1
47,"<S2SV_ModStart> ) ; struct hugepage_subpool * spool = ( struct hugepage_subpool <S2SV_ModEnd> * ) page_private <S2SV_ModStart> hugetlb_lock ) ; hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, 1 )",1
48,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) { return AVERROR_EOF ; } if (,1
49,<S2SV_ModStart> ; if ( e - e - p ||,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return try_get_page <S2SV_ModEnd> ( buf ->,1
51,"<S2SV_ModStart>, cp, ep2, map, nmap ) ; } else cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> < ep2 ) <S2SV_ModEnd> ND_PRINT ( (",1
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_uidgid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart>, read_fd, NULL,",0
54,<S2SV_ModStart> config -> pm_max_requests ; fpm_globals. listening_socket = dup ( wp -> listening_socket ),1
55,"<S2SV_ModStart> int pass, const TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart>, int j ; const FIRSTPASS_STATS * tmp_stats = <S2SV_ModEnd> ( twopass, <S2SV_ModStart>. pcnt_decay_rate ) { const FIRSTPASS_STATS * twopass = <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( twopass, pcnt_decay_stats ( <S2SV_ModEnd> )!= 0. 0.0 <S2SV_ModStart> } else { switch ( <S2SV_ModEnd> frame_to_frame ) ) { <S2SV_ModStart> = 0 ; } } }",0
56,<S2SV_ModStart> 0 ; } err = handle -> h_err ; <S2SV_ModStart> h_transaction ) { rc <S2SV_ModEnd> = jbd2_journal_stop ( <S2SV_ModStart> ) ; return err? err : rc <S2SV_ModEnd> ; } sb <S2SV_ModStart> t_journal -> j_private <S2SV_ModEnd> ; rc =,1
57,<S2SV_ModStart> return ret ; <S2SV_ModEnd> if (!,0
58,<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = args -> valuelen ;,1
59,<S2SV_ModStart> ) ; return <S2SV_ModEnd> if ( name,0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> len - 2 ; if ( len < stlv_len ) goto trunc ; ND_TCHECK2 ( * ( tptr ), stlv_len ) <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> case ISIS_SUBTLV_SPB_SPB_INSTANCE_INSTANCE_MIN_LEN : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_INSTANCE_MIN_LEN ) goto trunc ; stlv_len = stlv_len ; stlv_len -= stlv_len ; if ( stlv_len < ISIS_SUBTLV_SPB_SPB_INSTANCE_INSTANCE_INSTANCE_MIN_LEN ) goto trunc ; stlv_len = stlv_len ; stlv_len = stlv_len ; if ( stlv_len < 8 ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> case ISIS_SUBTLV_SPB_SPB_",0
61,<S2SV_ModStart> { if ( size_t <S2SV_ModEnd> length > INT_MAX ) return,0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,<S2SV_ModStart> == 12 && ( <S2SV_ModStart> flags & TH_SYN ),1
64,"<S2SV_ModStart> -> ipc_socket ; <S2SV_ModEnd> lxc_options_t * procfd <S2SV_ModStart> int fd ; int lsm_labelfd = payload -> lsm_labelfd ; <S2SV_ModStart> { ERROR ( ""Error <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> receive <S2SV_blank> %s."", strerror ( errno ) <S2SV_ModEnd> ) ; shutdown <S2SV_ModStart> { ERROR ( ""Error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> process <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> "" ) ; shutdown ( ipc_socket, strerror ( - 1 ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> { ERROR ( ""Error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> process <S2SV_blank> (1 <S2SV_blank> %s."", strerror ( errno ) ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } <S2SV_ModEnd> if (",0
65,<S2SV_ModStart> ; if ( strlen ( line ) ) goto out_err ;,0
66,"<S2SV_ModStart> ( header -> biBitCount == 0 ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> biBitCount <S2SV_blank> %d\\n"", 0 ) ; return OPJ_FALSE ; } if ( header ->",1
67,<S2SV_ModStart> NULL ; } sas_probe_devices ( port ) ;,1
68,<S2SV_ModStart> 0 ) { if ( image -> colors < tga_info. colormap_index ) image -> colors = tga_info. colormap_index ;,1
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> ENOBUFS ; } memset ( & line, 0, sizeof ( line ) ) ;",1
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_blk_ioctl ( bd, cmd ) ; if ( ret < 0 ) return ret ;",1
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> static,0
73,<S2SV_ModStart> * ureq ; unsigned <S2SV_ModStart> return - EFAULT ; if ( req_len > ( qreq_len - EINVAL,0
74,"<S2SV_ModStart> int m ; if ( n < 0 ) { jas_deprecated ( ""negative <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_pad"" ) ; }",1
75,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ) ; },0
76,<S2SV_ModStart> av_log ( mxf -> fc,1
77,"<S2SV_ModStart> mntent, path, NULL",0
78,<S2SV_ModStart> + 10 ; if ( psf -> fileoffset < psf -> filelength ) { <S2SV_ModStart> ; } ; } ;,1
79,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( p + l2info -> cookie_len ) ;,1
80,<S2SV_ModStart> NF_STOLEN ; return err == 0? NF_ACCEPT : NF_DROP <S2SV_ModEnd> ; } <S2SV_null>,1
81,"<S2SV_ModStart> * up ; int klen, ulen ; <S2SV_ModStart> ENOMEM ; } memcpy ( up, ulen ) ;",0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> ; } } io -> io_cleanup = io -> io_cleanup ;,0
83,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } break ;,0
84,<S2SV_ModStart> ) ; return ret = <S2SV_ModEnd> ; if (,0
85,"<S2SV_ModStart> ( buf = jas_alloc3 ( bufsize, numcols <S2SV_ModEnd>, sizeof (",1
86,<S2SV_ModStart> * map ; <S2SV_ModEnd> vpx_codec_cfg_t *,0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> zero.\\n"" ) ; netbk_fatal_tx_err ( vif",0
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> < 0 ) <S2SV_ModEnd> bitmap_pos = ext_index_add_object <S2SV_ModStart> name ) ; <S2SV_ModEnd> bitmap_set ( base",1
89,"<S2SV_ModStart> xfr_cmd, fname <S2SV_ModEnd> ) ; free",1
90,<S2SV_ModStart> mixer ) { snd_usb_mixer_disconnect ( mixer ) ;,1
91,<S2SV_ModStart> ) { struct packet_rollover * rollover = NULL ; struct <S2SV_ModStart> EINVAL ; } mutex_lock ( & fanout_mutex ) ; err = - EINVAL ; <S2SV_ModStart> -> fanout_mutex ) { err = - EINVAL ; } <S2SV_ModStart> ) ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num,0
92,<S2SV_ModStart> ( newnp -> opt ) ; rcu_dereference (,0
93,<S2SV_ModStart> ; } } table = <S2SV_ModEnd> return NULL ;,0
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
95,<S2SV_ModStart> ; # endif <S2SV_ModEnd> d_error ( imp_dbh,0
96,<S2SV_ModStart>,0
97,<S2SV_ModStart> value ) ; value = Py_RETURN_NONE <S2SV_ModEnd> ; } value,0
98,"<S2SV_ModStart> if (! page_name_set ( page <S2SV_ModEnd> ) ) { <S2SV_ModStart> } if (! page_name_print ( req, page <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( page, ""Error: <S2SV_blank> failed"" ) ; } else if (",0
99,"<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { ret = <S2SV_ModStart> inode, EXT4_STATE_DIO_UNWRITTEN ) ; if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result <S2SV_ModStart> } if ( ( flags & EXT4_GET_BLOCKS_CONVERT ) <S2SV_ModEnd> ) { ret",1
100,<S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ;,1
101,"<S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, cgroup ) ) { ret = - ENOENT ; goto out ; } if (!",1
102,"<S2SV_ModStart>, int mb_rows, int mb_rows, <S2SV_ModStart> * mb_rows ; vpx_read_row <S2SV_ModEnd> ( source, <S2SV_ModStart> * mb_cols ) ; memset <S2SV_ModEnd> ( source, <S2SV_ModStart> mb_cols + 16 ) ; memset <S2SV_ModEnd> ( source -> <S2SV_ModStart> * mb, 0,",0
103,<S2SV_ModStart> ) ) { ret = <S2SV_ModEnd> if ( param,0
104,"<S2SV_ModStart> : if (! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) bprm -> per_clear |= PER_CLEAR_ON_SETID ; if (",1
105,"<S2SV_ModStart> int ext4_mb_cache_insert ( struct mb2_cache * ext4_mb_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> bh ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> error ; return error ; error = mb2_cache_put ( bh, bh -> b_hash ) ; <S2SV_ModStart> error ) ; <S2SV_ModEnd> } }",0
106,<S2SV_ModStart> length ) ; return NULL ;,0
107,<S2SV_ModStart> tf = ( <S2SV_ModEnd> luaY_parser ) (,1
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.",1
110,"<S2SV_ModStart> ; dl = kzalloc <S2SV_ModEnd> ( size,",1
111,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static u_int <S2SV_ModEnd> rpki_rtr_rtr_pdu_print ( ndo <S2SV_ModStart> * tptr, const u_int len, const u_int len, const <S2SV_ModStart> * msg ; ND_TCHECK_16BITS ( tptr ) ; if ( * tptr!= 0 ) { ND_PRINT ( ( ndo, ""%sRPKI-RTRv%u <S2SV_blank> (too <S2SV_blank> short"", tptr ) ) ; return len ; } if ( len < sizeof ( rpki_rtr_rtr_pdu ) ) { ND_PRINT ( ( ndo, ""%sRPKI-RTR_R\\n"", sizeof ( rpki_rtr_pdu ) ) ; goto invalid ; } if ( pdu_len < sizeof ( rpki_rtr_rtr_pdu ) ) { ND_PRINT ( ( ndo, ""\\n"", sizeof ( * tptr ) ) ; goto invalid ; } if ( pdu_len < sizeof ( rpki_rtr_pdu ) || pdu_len > sizeof ( rpki_rtr_pdu ) ) { ND_PRINT (",0
113,"<S2SV_ModStart> ; int n <S2SV_ModEnd> ; skb -> <S2SV_ModStart> rose_facilities_struct ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> data + ROSE_CALL_REQ_FACILITIES_OFF, skb -> len - ROSE_CALL_REQ_FACILITIES_OFF, <S2SV_ModEnd> & facilities )",1
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,<S2SV_ModStart> ; } else {,0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & acl,",0
117,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; int ret <S2SV_ModStart> ) ; } o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
118,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",1
119,"<S2SV_ModStart> == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> is <S2SV_blank> absolute"" ) ; return ( ARCHIVE_FAILED ) ; } separator = * src ++ ; } <S2SV_ModEnd> for ( ;",1
120,"<S2SV_ModStart> TPM_RCmkeyAlg, TPM_RCM_DIGEST <S2SV_ModEnd>, TPM2B_DIGEST <S2SV_ModStart> ) { TPM_RC_DIGEST <S2SV_ModEnd> tpm2B_DIGEST <S2SV_ModStart> ; TPM_RC_DIGEST * TPM_RC_DIGEST <S2SV_ModEnd> ; TPM_DIGEST * <S2SV_ModStart> = 1 ; TPM_RC_RC_DIGEST * md = TPM_RC_DIGEST * md ; TPM_RC_DIGEST * md = TPM_RC_DIGEST * hashAlg ; if (! hashAlg ) { LOG_ERR ( ""HMAC <S2SV_blank> failed: <S2SV_blank> not <S2SV_blank> %s"", TPM_RC_DIGEST * hashAlg ) ; return TPM_RC_RC_SUCCESS ; } <S2SV_ModStart> bytes ) { TPM_RC_RC_DIGEST <S2SV_ModEnd> bytes = ( <S2SV_ModStart> bytes ) ; if (! rc ) { TPM_ERR ( ""HMAC <S2SV_blank> init ( & ctx ) ; return TPM_RC_SUCCESS ; }",0
121,"<S2SV_ModStart> size_t )? jas_safe_memopen2 <S2SV_ModEnd> ( 0,",0
122,<S2SV_ModStart> s ) { if ( s == 0 ) return ( ( void * ) NULL ) ;,1
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! ib_safe_file_access ( fp ) ) ) return - EACCES ; if (,1
124,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; ( void ) ResetMagickMemory ( BImgBuff, 0, ldblk * sizeof ( double ) ) ;",1
125,<S2SV_ModStart> ( peer ) peer = maybe_get_net <S2SV_ModEnd> ( peer ),1
126,<S2SV_ModStart> } while ( ( i < ( int ) header_buf_used ) && ( <S2SV_ModStart> ] == '\\n' ),1
127,<S2SV_ModStart> m_family ) ; if ( proto == LLDP_MGMT_ADDR_NONE ) continue <S2SV_ModEnd> ; if (,1
128,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & ASN1_OP_UNONG,0
129,<S2SV_ModStart> default_auto_asconf ) { spin_lock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ; <S2SV_ModStart> do_auto_asconf = 1 ; spin_unlock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) <S2SV_ModStart> ; } else { <S2SV_ModStart> = 0 ; },1
130,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> mb_profile ) { if ( s -> avctx -> avctx, 4 ) return 0 ; <S2SV_ModStart> 1 ) { if (! s -> avctx -> level == Mpeg4 ) return 0 ; <S2SV_ModStart> avctx ) { return 0 ; }",0
131,<S2SV_ModStart>,0
132,<S2SV_ModStart> rule ) ; if (! entry -> lsm [ lsm_rule ]. rule ) return - EINVAL ;,1
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> {\\n"" "" <S2SV_blank> checkSession();\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> checkSession();\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> poll_interval ) ; int poll_poll_interval = s_poll_interval ; int poll_interval = s_poll_poll ( poll_interval, poll_interval, poll_interval, poll_interval, poll_interval, poll_interval <S2SV_ModEnd> ) ; if",0
136,"<S2SV_ModStart> * xdr_len, u8_len <S2SV_ModEnd> ) { struct <S2SV_ModStart> * acl_len ; size_t * acl_len ; size_t rlen = 0 ; <S2SV_ModStart> out ; if ( status == 0 ) { status = - EINVAL ; goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> size ) { size_t iov_len = ( size_len + ( size_t * ) attr_len ; <S2SV_ModStart> ) ) ; if (! r <S2SV_ModEnd> ) goto out <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> ) ; }",0
137,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,1
138,<S2SV_ModStart> ; while ( ( i < to_read ) && <S2SV_ModStart>!= 0 ) <S2SV_ModEnd> ) { i,1
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,<S2SV_ModStart> [ plane ] && in -> linesize [ plane ],1
141,"<S2SV_ModStart> ( szFileName, pszFileName, <S2SV_ModStart> ) - 5 <S2SV_ModEnd> ) ; }",1
142,<S2SV_ModStart> && mode == '\\\\' <S2SV_ModEnd> ) { if,0
143,<S2SV_ModStart> >> 2 ; if ( q + o >= e ) goto out ;,0
144,"<S2SV_ModStart> __be32 new_saddr ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. srr ) daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",1
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> return ; } if ( len < sizeof ( struct eigrp_common_header ) ) { ND_PRINT ( ( ndo, ""EIGrp: <S2SV_blank> (too <S2SV_blank> < <S2SV_blank> %u)"", ( u_int ) sizeof ( struct eigrp_common_header ) ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < sizeof ( struct eigrp_common_header ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> < <S2SV_blank> %u)"", ( u_int ) sizeof ( struct eigrp_common_header ) ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < sizeof ( struct eigrp_common_header ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> < <S2SV_blank> short, <S2SV_blank> < <S2SV_blank> < <S2SV_blank> %u)"", ( u_int ) sizeof ( struct eigrp_tlv_common_header ) ) ) ; break ; } <S2SV_ModStart> ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> < <S2SV_blank> < <S2SV_blank> short, <S2SV_blank> %u)"", ( u_int ) sizeof ( struct eigrp_tlv_tlv_tlv_header ) ) ; return ;",0
147,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> addr = x,0
148,<S2SV_ModStart>,0
149,"<S2SV_ModStart>, '/' ) ; if ( ptr == NULL ) return ( ENOENT ) ; ptr ++ <S2SV_ModEnd> ; rw_exit (",1
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; if ( flags & EXT4_GET_BLOCKS_CONVERT ) split_flag |= EXT4_EXT_DATA_VALID2 ;,1
151,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & acl,",0
152,<S2SV_ModStart> } else { if (! dcfg -> password ) return NULL ; } else,0
153,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), & final ) ; rcu_read_unlock ( <S2SV_ModEnd> ) ; dst",1
154,"<S2SV_ModStart> = 0.0 ; uint32 nstrips = 0, ntiles = 0 ; uint16 <S2SV_ModEnd> planar = 0 <S2SV_ModStart>! read_buff ) { if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return ( - 1 ) ; } <S2SV_ModStart> 3 ) ; } <S2SV_ModStart> buffsize ) { if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return ( - 1 ) ; }",1
155,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } else { <S2SV_ModStart> } else { # if CONFIG_VP9_ENCODER arg = get_args ( arg, arg, arg, argi ) ; if ( arg_match ( & arg, arg, argi ) ) { arg = ( arg = ( arg, arg, argi ) - 1 ) ; } else { <S2SV_ModStart> } else { <S2SV_ModEnd> } else if",0
156,<S2SV_ModStart> options. disable_forwarding ||! use_privsep,1
157,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
158,"<S2SV_ModStart> ) ; } if ( ( ( MagickSizeType ) image -> columns * image -> rows ) > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",1
159,"<S2SV_ModStart> errout ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ""xxxx"" ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart> -> gr_ctx. length = 4 <S2SV_ModEnd> ; gr ->",1
160,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; <S2SV_ModStart> -> i_data, ext_size ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size <S2SV_ModEnd> ) ; neh",1
161,<S2SV_ModStart>,0
162,<S2SV_ModStart> ; int ret ; if ( current_chrooted ( ) ) return - EPERM,1
163,<S2SV_ModStart> { goto exit <S2SV_ModEnd> ; if (,0
164,<S2SV_ModStart> c -> reduction_factor == 1 || c -> reduction_factor > 4,0
165,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
166,<S2SV_ModStart> ; bool is_drop_n_account = false ; bool do_vnet <S2SV_ModStart> == 0 ) { <S2SV_ModStart> -> do_vnet_vnet_hdr ) ; do_vnet = false ; } <S2SV_ModStart> < 0 ) { <S2SV_ModStart> = 0 ; do_vnet = false ; } <S2SV_ModStart> -> max_frame_len ; do_vnet = false ; <S2SV_ModStart> ; if ( do_vnet <S2SV_ModEnd> ) { if,0
167,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> sctp_auth_asoc_init_active_key ( asoc,1
168,<S2SV_ModStart> return false ; if ( ndp_msg_info ( msg_type ) -> addrto_validate ) return ndp_msg_info ( msg_type ) -> addrto_validate ) ; else,0
169,<S2SV_ModStart> <S2SV_,0
170,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
171,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
172,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> } else { cpi -> twopass. gf_group = cpi -> twopass. gf_group ; cpi -> twopass. gf_group = & cpi -> twopass. gf_group ; return ; } else if ( cpi -> twopass. gf_group > <S2SV_ModEnd> cpi -> <S2SV_ModStart> 0 ) { cpi -> twopass. gf_group = cpi -> twopass. gf_group ; return ; } <S2SV_ModEnd> cpi ->,0
173,"<S2SV_ModStart> } num ++ ; if ( num > MaxAllocSize / ITEMSIZE ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> levels <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num, ( int ) ( MaxAllocSize / ITEMSIZE ) ) ) )",1
174,"<S2SV_ModStart> header, struct mb2_cache_entry <S2SV_ModEnd> * * pce <S2SV_ModStart> ) ; struct mb2_cache_entry * ce ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> ( ext4_cache, <S2SV_ModEnd> bh ) ; <S2SV_ModStart> h_mb_cache, ce <S2SV_ModEnd> ) ; }",0
175,"<S2SV_ModStart> { gint64 offset <S2SV_ModEnd> ; char line <S2SV_ModStart> = offset ; return parse_cosine_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> -> phdr, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> wth -> frame_buffer, line",1
176,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
177,<S2SV_ModStart> if ( left == 0 && extend ) return 0 ; if ( left,1
178,<S2SV_ModStart> ] ) { <S2SV_ModEnd> char buf [ <S2SV_ModStart> ] ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
179,<S2SV_ModStart> size_t ) ldblk + 1,0
180,"<S2SV_ModStart> - ENOMEM ; * ( ( struct vbg_ioctl_hdr * ) buf ) = hdr ; <S2SV_ModStart> copy_from_user ( buf + sizeof ( hdr ) <S2SV_ModStart> * ) arg + sizeof ( hdr ), hdr. size_in - sizeof ( hdr ) <S2SV_ModEnd> ) ) {",1
181,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) { hstartrow <S2SV_ModEnd> = numrows - hstartrow,0
182,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
183,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixel_info -> <S2SV_ModStart> -> rows ; if ( number_pixels < 2 ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; break ;",0
184,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_mb_cache ) { ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ; sbi -> s_mb_cache = NULL ; } <S2SV_ModEnd> if (!,1
185,<S2SV_ModStart> break ; } interface -> desc. bcoelength = NULL ;,0
186,"<S2SV_ModStart> ""setregid"" ) ; <S2SV_ModEnd> char * arg <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [",1
187,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) <S2SV_ModStart> ci_parent ) ; else return NULL ;,1
188,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
189,<S2SV_ModStart> ( pb ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA,1
190,<S2SV_ModStart> >> 2 ; if ( q + o >= e ) goto out ;,0
191,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = &,1
192,"<S2SV_ModStart> char * dir <S2SV_ModEnd> = NULL ; <S2SV_ModStart>, dir, dir <S2SV_ModEnd> ) ; if",0
193,<S2SV_ModStart> prev ) ; n -> mounts += n -> pending_mounts ; n -> pending_mounts = 0 ;,1
194,"<S2SV_ModStart> ; savesegment ( fs, fsindex ) ; savesegment ( gs, gsindex ) ; savesegment ( gsindex, gsindex ) ; savesegment ( <S2SV_ModStart> next -> ds <S2SV_ModEnd> ) ; savesegment",0
195,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
196,<S2SV_ModStart> ) ) { if ( ps_codec -> i4_buf == 1 ) { return IHEVCD_INVALID_PARAMETER ; },0
197,<S2SV_ModStart> 1u << DB_VECTOR ) | ( 1u << AC_VECTOR,1
198,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> 1 ] ; u_int stringlen ; stringlen = len ; if ( stringlen > NFSX_V3FHMAX ) stringlen = NFSX_V3FHMAX ; <S2SV_ModStart>, sfsname, stringlen <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ; temp [ stringlen <S2SV_ModEnd> ] = '\\0'",1
199,"<S2SV_ModStart> unsigned int flags, struct rt6_info * rt <S2SV_ModStart> ( & fhdr, rt",1
200,<S2SV_ModStart> ( res ) goto err_add_port <S2SV_ModEnd> ; res = <S2SV_ModStart> port ) ; err_add_port : hsr_del_node ( & hsr -> self_node_db ) ;,1
201,<S2SV_ModStart> ; # endif # endif,0
202,"<S2SV_ModStart> void write_buffer ( MACROBLOCKD * const x, MACROBLOCKD * xd <S2SV_ModEnd>, int <S2SV_ModStart> src -> uv_stride <S2SV_ModEnd> ) { const <S2SV_ModStart> src -> uv_stride <S2SV_ModEnd> = src_stride [ i <S2SV_ModStart> = src -> uv_stride <S2SV_ModEnd> ; const <S2SV_ModStart> = src_buffer -> uv_stride <S2SV_ModEnd> ; src_stride [",0
203,<S2SV_ModStart> p ++ ) ; if ( args -> len < args -> iov_len ) return 0,0
204,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> jmp_near ( struct <S2SV_ModStart> dst ) { return assign_eip_far ( ctxt, ctxt -> mode == X86EMUL_MODE_PROT64 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
205,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
206,"<S2SV_ModStart> ; remaining = tvb_reported_length_remaining <S2SV_ModEnd> ( tvb,",1
207,<S2SV_ModStart> ( iocb -> iov_block <S2SV_ModEnd> ) return 0,0
208,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
209,"<S2SV_ModStart> ; if ( strdigit <S2SV_ModEnd> ( f,",0
210,<S2SV_ModStart> ; if ( pmc_overflow ( val ) <S2SV_ModEnd> ) write_pmc (,1
211,"<S2SV_ModStart> ( * b + len, * avail - len <S2SV_ModEnd>, nl )",1
212,"<S2SV_ModStart> expr_name ) { <S2SV_ModEnd> char * len <S2SV_ModStart> = NULL ; PyUnicode_NULL ; const char * type_name = NULL ; <S2SV_ModStart> i ] ; <S2SV_ModEnd> if (! <S2SV_ModStart>, str ) ) { <S2SV_ModEnd> return NULL ; } <S2SV_ModStart> i ] ; if (! f ) { <S2SV_ModStart> return NULL ; } <S2SV_ModStart>, str_name, <S2SV_ModEnd> len ) ; if",0
213,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
214,<S2SV_ModStart> string ) ) { <S2SV_ModEnd> c = c,0
215,"<S2SV_ModStart> == 0 ) mark_key_instantiated ( key, 0 <S2SV_ModEnd> ) ; up_write",1
216,<S2SV_ModStart> <= * len && plen > 0,1
217,<S2SV_ModStart> ; args. rmtvaluelen = valuelen ; args.,1
218,<S2SV_ModStart> ; if ( <S2SV_ModEnd> timeout == NULL <S2SV_ModStart> ; if ( compat_get_timespec <S2SV_ModEnd> ( & ktspec <S2SV_ModStart> > 0 && compat_put_timespec <S2SV_ModEnd> ( & ktspec,1
219,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
220,<S2SV_ModStart> rcv_num ) ; <S2SV_ModEnd> assert ( skb <S2SV_ModStart> q_num ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
221,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
222,<S2SV_ModStart> } if ( <S2SV_ModEnd> udp_specified && settings,1
223,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
224,<S2SV_ModStart> -> data ; <S2SV_ModEnd> p -> ft_free,0
225,<S2SV_ModStart> found = 0 <S2SV_ModEnd> ; const char <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( found,1
226,"<S2SV_ModStart> int validate_event ( struct pmu * pmu, <S2SV_ModStart> arm_pmu * armpmu <S2SV_ModEnd> ; struct hw_perf_event <S2SV_ModStart> -> pmu!= pmu ) return 0 ; if ( event -> pmu!= <S2SV_ModStart> return 1 ; armpmu = to_arm_pmu ( event -> pmu ) ;",1
227,"<S2SV_ModStart> bool new_idmap_permitted ( const struct file * file, <S2SV_ModStart>, cap_setid ) && file_capable ( file, cap_setid )",0
228,<S2SV_ModStart> j ++ ) { if ( a -> type == szMAPI_BINARY ) <S2SV_ModStart> ) ; } },1
229,"<S2SV_ModStart> hx ; u8 * buf <S2SV_ModEnd> ; int ret <S2SV_ModStart> = 0 ; u16 cpu_cs_register = <S2SV_ModEnd> cypress [ type <S2SV_ModStart> ]. cpu_cs_register ; buf = kmalloc ( sizeof ( * hx ), GFP_KERNEL ) ; if (! buf ) return - ENOMEM ; hx = ( struct hexline * ) buf ; buf [ 0 ] = 1 ; if ( usb_cypress_writemem ( udev, cpu_cs_register, buf, 1 <S2SV_ModEnd> )!= 1 <S2SV_ModStart> ; kfree ( buf <S2SV_ModEnd> ) ; return <S2SV_ModStart> 0 ) { buf [ 0 ] = 0 ; if ( <S2SV_ModEnd> usb_cypress_writemem ( udev <S2SV_ModStart> ( udev, cpu_cs_register, buf <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ; kfree ( buf <S2SV_ModEnd> ) ; return",1
230,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ptr ++ ; length -= 2 ; length -= 2 <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> ) ) ; if ( length < 4 ) { ND_PRINT ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ptr ++ ; ptr ++ ; length -= 2 <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ptr ++ ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ptr ++ ;",0
231,"<S2SV_ModStart> princ ) ; success = data_eq_string ( * realm, <S2SV_ModEnd> handle -> params <S2SV_ModStart> params. realm ) && data_eq_string ( * c1, ""kadmin"" ) &&! data_eq_string ( * c2, ""history"" ) ; <S2SV_ModEnd> fail_princ : if",1
232,<S2SV_ModStart> ; if ( shader_rec_offset < args -> bin_cl_size ||,1
233,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
234,<S2SV_ModStart> vma -> vm_file ) ; down_read ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModStart> ; out : up_read ( & EXT4_I ( inode ) -> i_mmap_sem ) ;,1
235,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
236,<S2SV_ModStart> arg ) { char ch = * arg ; switch ( ch <S2SV_ModEnd> ) { case <S2SV_ModStart> ';' : case '=' : case <S2SV_ModStart> b ++ = ch <S2SV_ModEnd> ; break ;,1
237,"<S2SV_ModStart> && nmap ) <S2SV_ModEnd> cp = ikev1_attrmap_print <S2SV_ModStart>, cp, ep2, map, nmap ) ; else cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> < ep2 ) <S2SV_ModEnd> ND_PRINT ( (",1
238,<S2SV_ModStart> } GsmIceConnectionData ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
239,<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) < skb -> head +,1
240,"<S2SV_ModStart> ) ) { log_debug ( ""Can\\n"", ""\\n"" <S2SV_ModEnd> ) ;",0
241,<S2SV_ModStart>. val =!!!!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ;,0
242,<S2SV_ModStart> & RCV_SHUTDOWN ) return 0 ; <S2SV_ModEnd> return err ; <S2SV_ModStart> msg_namelen ) ; <S2SV_ModEnd> } skb_free_datagram (,1
243,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
244,<S2SV_ModStart> const buffers [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> v_buffer <S2SV_ModEnd> } ; const <S2SV_ModStart> int strides [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> uv_stride <S2SV_ModEnd> } ; int,0
245,"<S2SV_ModStart>, j ; * md_out = NULL ; md = calloc ( 1, sizeof ( <S2SV_ModEnd> * md ) <S2SV_ModStart> goto cleanup ; ret = rfc2253_name <S2SV_ModEnd> ( X509_get_name ( <S2SV_ModStart> cert ), & <S2SV_ModEnd> md -> subject_dn <S2SV_ModStart> md -> subject_dn ) ; if ( ret ) goto cleanup ; <S2SV_ModEnd> ret = rfc2253",0
246,<S2SV_ModStart> (! npages || base_gfn!= old. base_gfn,1
247,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ru,1
248,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
249,"<S2SV_ModStart> * ni ; unsigned int length_left ; u_int j ; ND_TCHECK ( rp -> rip6_cmd <S2SV_ModEnd> ) ; switch <S2SV_ModStart> case RIP6_REQUEST : length_left = length ; if ( length_left < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) goto trunc ; length_left -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; j = length_left <S2SV_ModEnd> -= sizeof ( <S2SV_ModStart> j == 1 ) { ND_TCHECK ( rp -> rip6_nets ) ; if ( <S2SV_ModEnd> rp -> rip6_nets <S2SV_ModStart> break ; } } <S2SV_ModStart> ni )!= length_left ) ND_TCHECK ( rp -> rip6_nets ) ; length_left = length_left ; length_left <S2SV_ModEnd> -= sizeof ( <S2SV_ModStart> ni ) { ND_TCHECK ( rp -> rip6_nets ) ; length_nets = length_left <S2SV_ModEnd> -> rip6_nets ; <S2SV_ModStart> ni ) { ND_TCHECK ( rp -> rip6_nets, j, j, j ) ; length_left <S2SV_ModEnd> ) ;",0
250,<S2SV_ModStart> < 0 ) goto error ; <S2SV_ModEnd> goto set ;,1
251,<S2SV_ModStart> ; memset ( <S2SV_ModEnd> ( cpi ->,0
252,"<S2SV_ModStart> argc ++ ; retval = bprm_change_interp ( iname, bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> ; interp_file =",1
253,<S2SV_ModStart> ; int iSrc <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> res -> ContribRow <S2SV_ModStart> u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ].,1
254,<S2SV_ModStart> user ) ; kreturn 0 ;,0
255,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".cfg\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n""",1
256,<S2SV_ModStart> + 1 ; size_t len = 0 ;,0
257,"<S2SV_ModStart> ( mobj ) { size_t granularity = BIT ( tee_mm_sec_ddr. shift ) ; <S2SV_ModStart>, 0, ROUNDUP ( size, granularity ) ) ; } <S2SV_ModEnd> return mobj ;",1
258,<S2SV_ModStart> -> it_overrun += 1LL <S2SV_ModEnd> << i ;,1
259,"<S2SV_ModStart> ; int is_async, <S2SV_ModEnd> ; if ( <S2SV_ModStart>, CHILD ( n, 1 ) ) ; if (! <S2SV_ModStart>, CHILD ( n, 5 ) ) ) return NULL ; if (! strcmp ( c, CHILD ( n, 0 ) ) ) return NULL ; if (! <S2SV_ModStart>, CHILD ( n, n, n, n, n, n ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return NULL <S2SV_ModEnd> ; } else",0
260,<S2SV_ModStart> ] ) ; if ( src -> cur_state -> curframe ) return - EINVAL ;,0
261,"<S2SV_ModStart> * cpi, ThreadData * td, MACROBLOCKD * xd, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO_INFO * mi <S2SV_ModEnd> ) { const MODE_INFO <S2SV_ModStart> MODE_INFO * const mbmi = xd -> left_mi <S2SV_ModEnd> ; const PREDICTION_MODE <S2SV_ModStart> MODE_INFO * mi <S2SV_ModEnd> ; const int",0
262,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
263,"<S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; n <S2SV_ModStart> = r -> qiov. size <S2SV_ModEnd> / 512 ; <S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; }",1
264,<S2SV_ModStart> if ( cs >= <S2SV_ModEnd> CQSPI_MAX_CHIPSELECT ) {,1
265,"<S2SV_ModStart> { memset ( n, 0,",0
266,<S2SV_ModStart> ) break ; if ( l > ll ) l = ll ;,1
267,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
268,<S2SV_ModStart> ) ) ; ND_TTEST ( * ps ) ;,0
269,<S2SV_ModStart> old ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
270,"<S2SV_ModStart> ret ; uint8_t * buffer ; uint8_t value ; buffer = kmalloc ( 1, GFP_KERNEL ) ; if (! buffer ) return - ENOMEM <S2SV_ModEnd> ; dev_dbg ( <S2SV_ModStart>, reg, buffer <S2SV_ModEnd>, 1, <S2SV_ModStart> 1000 ) ; if ( <S2SV_ModEnd> ret >= 0 <S2SV_ModStart> ret >= 0 ) { value = buffer [ 0 ] ; kfree ( buffer ) ; return value ; } else { kfree ( buffer ) ; return <S2SV_ModEnd> ret ; } <S2SV_ModStart> ret ; } }",1
271,<S2SV_ModStart>,0
272,"<S2SV_ModStart> ; } } s -> append_char ( s, 0 ) ; strncpy <S2SV_ModEnd> ( outbuffer,",1
273,,0
274,<S2SV_ModStart> = 0 ; ( i + 3 ) <S2SV_ModEnd> < sec -> <S2SV_ModStart> = 0 ; ( i + 7 ) <S2SV_ModEnd> < sec ->,1
275,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> ND_PRINT ( (,0
276,<S2SV_ModStart> ; if ( <S2SV_ModEnd>!= NULL ),0
277,"<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> low ) ; }",0
278,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int spin_unlock_wq_queue ( <S2SV_ModStart> flags ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> flags ) return size <S2SV_ModEnd> ) ; if,0
279,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
280,"<S2SV_ModStart> ) continue ; if ( vif -> tx. sring -> tx. req_prod - vif -> tx. sring -> tx. sring -> tx. req_cons > XEN_NETIF_NETIF_TX_SIZE ) { netdev_err ( vif -> dev, ""req_err <S2SV_blank> %d, <S2SV_blank> req_prod <S2SV_blank> %d, <S2SV_blank> size <S2SV_blank> %d, <S2SV_blank> "", vif -> tx. sring -> tx. sring -> req_prod, XEN_NETIF_NETIF_TX_RING_SIZE ) ; netbk_fatal_tx_err ( vif ) ; continue ; } <S2SV_ModStart> 0 ) ) continue ; <S2SV_ModEnd> tx_err ( vif",0
281,<S2SV_ModStart> ; # endif # endif,0
282,<S2SV_ModStart> cb ) { <S2SV_ModEnd> struct xfrm_policy_walk *,0
283,<S2SV_ModStart> conn ) ; if ( <S2SV_ModStart> ( conn )!= 0 ) return,1
284,"<S2SV_ModStart> ) ; struct <S2SV_ModEnd> skb_shared_info * shinfo <S2SV_ModStart> err ) ) xen_netbk_release ( netbk, pending_idx <S2SV_ModEnd>, XEN_NETIF_RSP_ERROR ) <S2SV_ModStart> XEN_RSP_ERROR ) ; <S2SV_ModEnd> if ( err <S2SV_ModStart>, XEN_NETIF_RSP_ERROR ) xen_put_release ( netbk, <S2SV_ModStart>, XEN_NETIF_RSP_ERROR ) ; <S2SV_ModEnd> if ( err <S2SV_ModStart> netbk, XEN_NETIF_RSP_OKAY <S2SV_ModStart> ) ; } xen_release ( netbk, pending_idx <S2SV_ModEnd>, XEN_NETIF_RSP_OKAY <S2SV_ModStart> netbk, XEN_RSP_OKAY",0
285,,1
286,"<S2SV_ModStart> ) NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ) NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ;",1
287,"<S2SV_ModStart> len < 0 <S2SV_ModEnd> ) { syslog <S2SV_ModStart> 1 ; } if ( addr. nl_pid ) { syslog ( LOG_WARNING, ""Received <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> untrusted <S2SV_blank> pid:%u"", addr. nl_pid ) ; continue ; }",1
288,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
289,<S2SV_ModStart> ipc == NULL && client -> session == NULL,1
290,<S2SV_ModStart> 0 ) ; if ( newpos > oldptr + oldptr + size_t oldptr + oldptr + size ) { return NULL ; } <S2SV_ModStart> 0 ) ; },0
291,"<S2SV_ModStart>, nameptr, lfi, fname, UDF_NAME_LEN <S2SV_ModEnd> ) ; if",1
292,"<S2SV_ModStart> ip_vs_timeout_user t ; memset ( & t, 0, sizeof ( t ) ) ;",1
293,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> np -> opt ) ; rcu_dereference (",0
294,<S2SV_ModStart> ; ssize_t result ; if ( WARN_ON_ONCE (! ib_safe_file_access ( skb ) ) ) return - EACCES,0
295,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, path1, & next <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ) { if ( fpath && strcmp ( next, fpath ) == 0 ) ret = - EACCES ; else ret = - ENOENT <S2SV_ModEnd> ; goto out <S2SV_ModStart> if (! fc_may_access ( fc, controller, path1, NULL, O_RDWR ) ) { ret = - EACCES ; goto out ; } if (! <S2SV_ModStart> cgdir ) ; free ( next ) ;",0
296,<S2SV_ModStart> ) ) { put_disk ( disk ) ;,1
297,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
298,"<S2SV_ModStart> { if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( ( image <S2SV_ModStart> { if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( number_pixels,",1
299,<S2SV_ModStart> ; int64_t * pf ; if (! s -> data_size ) return AVERROR_INVALIDDATA ;,0
300,<S2SV_ModStart> ; rinfo = kzalloc <S2SV_ModEnd> ( SZ_SG_REQ_INFO *,1
301,"<S2SV_ModStart> ; # endif install_keyword ( ""umask"", & umask_handler ) ;",1
302,<S2SV_ModStart> data ) { <S2SV_ModEnd> return ctx ;,0
303,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> kfree ( tmpbuf,1
304,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; }",1
305,<S2SV_ModStart> ( box = jp2_box_create0 ( ) ) ) { goto error ; } <S2SV_ModEnd> if ( jp2_box,0
306,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) {",0
307,"<S2SV_ModStart> ; int copylen = 0 <S2SV_ModStart> goto err ; err = - EMSGSIZE ; if ( unlikely ( count > UIO_MAXIOV ) ) goto err ; <S2SV_ModStart> zerocopy ) { if ( count > MAX_SKB_FRAGS ) { copylen = iov_length ( iv, count - MAX_SKB_FRAGS ) ; if ( copylen < vnet_hdr_len ) copylen = 0 ; else copylen -= vnet_hdr_len ; } if ( copylen < vnet_hdr. hdr_len )",1
308,<S2SV_ModStart> ( struct ipv6hdr <S2SV_ModEnd> ) ; unsigned <S2SV_ModStart> while ( offset <S2SV_ModEnd> <= packet_len ) <S2SV_ModStart> packet_len ) { struct ipv6_opt_hdr * exthdr ; <S2SV_ModStart> offset ; } if ( offset + sizeof ( struct ipv6_opt_hdr ) > packet_len ) return - EINVAL ; exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + offset ) ; <S2SV_ModStart> -> nexthdr ; } return - EINVAL <S2SV_ModEnd> ; } <S2SV_null>,1
309,"<S2SV_ModStart> write_delta_q ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
310,<S2SV_ModStart> = 0 ; if (,0
311,<S2SV_ModStart> copied ) ; <S2SV_ModEnd> if ( msg,0
312,<S2SV_ModStart> } if ( <S2SV_ModEnd> djrcv_dev -> paired_dj_devices,1
313,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
314,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
315,"<S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; sctp_chunk_param_chunk_t * addip = ( sctp_param_chunk_t * ) asconf ; sctp_addip = ( sctp_addip_chunk_t * ) asconf_hdr ; if ( param. p -> type == SCTP_PARAM_IPV4_PARAM_ADDRESS || chunk_len!= SCTP_PARAM_ADDRESS ) continue ; <S2SV_ModEnd> err_code = <S2SV_ModStart> goto done ; <S2SV_ModEnd> if ( err_code == SCTP_ERROR <S2SV_ModStart>, asconf, param. p ) { if ( err_code == SCTP_ERROR <S2SV_ModEnd> ) goto done <S2SV_ModStart> goto done ; <S2SV_ModEnd> err_code = SCTP_ERROR <S2SV_ModStart> goto done ; <S2SV_ModEnd> } if ( <S2SV_ModStart> goto done :",0
316,"<S2SV_ModStart> 101, ( ""jas_realloc(%x, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",1
317,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
318,<S2SV_ModStart> CPU_FTR_TM_COMP ) && hv_enabled <S2SV_ModEnd> ; break ;,1
319,"<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if (! <S2SV_ModStart>, msgnum ) ) return NULL",0
320,"<S2SV_ModStart> key_name ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. key, HV_KVP_EXCHANGE_MAX_KEY_SIZE / 2 <S2SV_ModStart> value ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. value, HV_KVP_EXCHANGE_MAX_VALUE_SIZE / 2",1
321,<S2SV_ModStart> = file ; d -> log_file = NULL ;,0
322,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
323,"<S2SV_ModStart> * parg = ( void * ) arg ; size_t user_ptr = - EINVAL ; void __user_ptr = NULL ; void __user_ptr = NULL ; if ( _IOC_SIZE ( cmd ) < sizeof ( cmd ) ) { if ( _IOC_SIZE ( cmd ) == _IOC_SIZE ( cmd ) ) { memset ( cmd, 0, 0, sizeof ( cmd ) ) ; } else { memset ( cmd, 0, _IOC_SIZE ( cmd ), 0, sizeof ( cmd ) ) ; } err = - EINVAL ; if ( _IOC_SIZE ( cmd ) < _IOC_SIZE ( cmd ) ) { memset ( cmd, 0, _IOC_SIZE ( cmd ), 0, _IOC_SIZE ( cmd ) ; } else { memset ( cmd ), 0, _IOC_SIZE ( cmd ) ; } else { memset ( cmd, 0, 0, _IOC_SIZE ( cmd ) - sizeof ( cmd ) ) ; } else { memset ( cmd, _IOC_SIZE ( cmd ) - sizeof ( cmd ) ; } else { memset ( cmd, 0, _IOC_SIZE ( cmd ) - sizeof ( cmd ) ) ; } } else { memset ( cmd,",0
324,"<S2SV_ModStart> ( server -> <S2SV_ModEnd>, server.",0
325,"<S2SV_ModStart> u16 size, const <S2SV_ModStart> data ) { void * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, buf <S2SV_ModEnd>, size, <S2SV_ModStart> 500 ) ; kfree ( buf ) ; return ret ;",1
326,<S2SV_ModStart> break ; } interface -> desc. bcoelength = NULL ;,0
327,"<S2SV_ModStart> ) { case GTK_RESPONSE_OK : { file = nautilus_file_get_metadata ( parameters -> file ) ; nautilus_file_get_metadata ( parameters -> file ) ; nautilus_file_metadata ( parameters -> parent_window, NULL, NULL, NULL, NULL, NULL ) ; nautilus_file_put_metadata ( parameters -> file ) ; nautilus_object_put ( parameters -> file ) ; <S2SV_ModEnd> screen = nautilus_object",0
328,<S2SV_ModStart> ; if ( urb -> actual_length > 0 &&,1
329,"<S2SV_ModStart> * server, struct smb_vol * vol ) { <S2SV_ModEnd> struct cifsSesInfo * <S2SV_ModStart> cifs_tcp_ses_lock ) ; list_for_each_entry ( ses <S2SV_ModEnd>, & server <S2SV_ModStart> server -> smb_ses_list, vol",0
330,<S2SV_ModStart> g ) ; if (! cfg -> g_pass ) || ( cfg -> g_w > 1 ) || ( cfg -> g_w > 1 ) || ( cfg -> g_w > 1 ) ) || ( cfg -> g_pass!= VPX_RC_PASS <S2SV_ModEnd> ) ; },0
331,"<S2SV_ModStart> =='<S2SV_blank>') { input ++ ; } <S2SV_ModEnd> ptr = strchr <S2SV_ModStart> off ) ) { <S2SV_ModStart> ) ; } } <S2SV_ModStart> ) ) ) { <S2SV_ModStart> ""Unknown <S2SV_blank> filesystem <S2SV_blank> type\\n"" ) ; } <S2SV_ModStart> offset ) ) { <S2SV_ModStart> input ) ; }",1
332,"<S2SV_ModStart> inode ) ; struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> ; if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",1
333,<S2SV_ModStart> key * keyring ; if ( new -> thread_keyring ) return 0,1
334,<S2SV_ModStart> ; uint64_t count = 0,0
335,"<S2SV_ModStart> orig ) ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; <S2SV_ModStart> mrb_io_alloc ( mrb <S2SV_ModEnd> ) ; DATA_TYPE",1
336,"<S2SV_ModStart>. cmd. cmp <S2SV_ModEnd>,.",0
337,<S2SV_ModStart> cpi ) { vpx_prob <S2SV_ModEnd> * cpi ) <S2SV_ModStart> = 0 ; vpx_write_plane <S2SV_ModEnd> ( cpi ->,0
338,"<S2SV_ModStart> return res ; res = utee_param_to_param ( utc, <S2SV_ModEnd> param, callee_params <S2SV_ModStart>, callee_params ) ; if ( res!= TEE_SUCCESS ) return res",1
339,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; struct x86_emulate_ops * ops = ctxt -> ops ; int cpl = ctxt -> ops -> ops -> ops ; old_eip = ctxt -> cpl ( ctxt ) ; ops -> get_segment ( ctxt, & old_cs, & old_desc, NULL <S2SV_ModEnd>, VCPU_SREG_CS ) <S2SV_ModStart>, VCPU_SREG_CS ) <S2SV_ModEnd> ; memcpy ( <S2SV_ModStart> 2 ) ; rc = __load_segment_descriptor <S2SV_ModEnd> ( ctxt, <S2SV_ModStart> sel, VCPU_SREG_CS, cpl, false, & new_desc ) ; if ( rc!= X86EMUL_CONTINUE <S2SV_ModEnd> ) return X86EMUL_CONTINUE <S2SV_ModStart> return X86EMUL_CONTINUE ; rc = assign_eip_far ( ctxt, ctxt -> src. val, old_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) goto fail ; ctxt -> src. val = old_cs ; ctxt -> src. val = old_cs ; ctxt -> src. val = X86EMUL_CONTINUE ; if ( rc!= X86EMUL_CONTINUE ) goto fail ; ctxt -> src. val = old_eip ;",0
340,<S2SV_ModStart> -> band = av_calloc <S2SV_ModEnd> ( reslevel -> <S2SV_ModStart> -> prec = av_calloc <S2SV_ModEnd> ( reslevel ->,1
341,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
342,<S2SV_ModStart> ) { goto out_error <S2SV_ModEnd> ; } if,0
343,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) { WARN_ON_ONCE ( info -> si_code < 0 ) ; <S2SV_ModEnd> return - EPERM <S2SV_ModStart> - EPERM ; },1
344,"<S2SV_ModStart> * p_tx0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdx, <S2SV_ModEnd> p_image -> x1",0
345,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * p ++ <S2SV_ModStart> char * p, ( <S2SV_ModEnd> char * p <S2SV_ModStart> char * p, * out, * p <S2SV_ModEnd> ) ) { char * p <S2SV_ModStart> ; if ( * fname == '/' || * p [ 1 ] == '/' || * p [ 1 ] == '/' || * p [ 1 ] == '/' || * p [ 2 ] == '/' || * p [ 1 ] == '/' || * p [ 2 ] == '\\\\' <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; } } if ( p [ 2 ] == '/' || * p [ 1 ] == '\\\\' <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( p [ 0 ] == '\\\\' <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; } } } }",0
346,"<S2SV_ModStart> classes = NULL ; zval * retval <S2SV_ModStart> ; } } retval = var_tmp_var ( retval, retval <S2SV_ModStart> ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( retval",0
347,<S2SV_ModStart> goto __err ; tu -> qhead = tu -> qtail = tu -> qused = 0 ;,1
348,<S2SV_ModStart> ; if ( (! zstr ) ) return GF_ISOM_INVALID_FILE ; if ( <S2SV_ModStart> j ] ) return GF_INVALID_FILE ; } <S2SV_ModEnd> j = GF_ISOM_INVALID_FILE,0
349,<S2SV_ModStart>. get_none ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },0
350,"<S2SV_ModStart> == 0 ) if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; } else <S2SV_ModStart> { uschar * hn ; if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; }",1
351,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) { WARN_ON_ONCE ( info -> si_code < 0 ) ; <S2SV_ModEnd> return - EPERM <S2SV_ModStart> - EPERM ; },1
352,"<S2SV_ModStart> -> off = strtoull <S2SV_ModEnd> ( p, <S2SV_ModStart> -> filesize = strtoull <S2SV_ModEnd> ( slash +",1
353,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> maxh, offx, loopmaxh, loopmaxw <S2SV_ModStart>, upb ; size_t i <S2SV_ModEnd> ; upb = <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) ; offx = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> max ) ; offx = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> goto fails ; offx = img -> x0 & 1U ; loopmaxw = <S2SV_ModEnd> img -> comps <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ;",0
354,"<S2SV_ModStart> * state, fmode_t state, fmode_t fmode <S2SV_ModEnd> ) { int <S2SV_ModStart> = fmode_t fmode <S2SV_ModEnd> ; if <S2SV_ModStart> ( state, fmode <S2SV_ModEnd> ) ; }",0
355,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; ssh_dispatch_set ( ssh, SSH2_MSG_KEXINIT, NULL ) ;",1
356,"<S2SV_ModStart> { assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> { <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> == <S2SV_blank> 1 <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> \\\n <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> == <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> ==",0
357,<S2SV_ModStart> read_info ) ; <S2SV_ModEnd> if ( EOFBlob,1
358,"<S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; if <S2SV_ModStart> ( lbase, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strbase ) <S2SV_ModStart> ( lbase, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( ltest!= 511 <S2SV_ModEnd> && ntest!= <S2SV_ModStart> && ntest!= 511 <S2SV_ModEnd> ) ; if",0
359,<S2SV_ModStart> intf ) { <S2SV_ModEnd> if ( cdc_ncm_active <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
360,<S2SV_ModStart> - len ; if ( len > INT_MAX ) return 0 ;,0
361,<S2SV_ModStart> { j2SV_null> <S2SV_null> <S2SV_null>,0
362,"<S2SV_ModStart>, e -> elems, e ->",1
363,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
364,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; return",0
365,<S2SV_ModStart> q ) { mutex_lock ( & q -> timer_mutex ) ; <S2SV_ModStart> snd_seq_timer_close ( q ) ; mutex_unlock ( & q -> timer_mutex,1
366,<S2SV_ModStart> int error ; unsigned int nr_blks ; sector_t lblock <S2SV_ModEnd> = offset >> <S2SV_ModStart> = offset >> inode -> i_blocksize <S2SV_ModEnd> ; error = <S2SV_ModStart> 0 ) ; error = gfs2_get_blks_blocks <S2SV_ModEnd> ; error = <S2SV_ModStart> 0 ) ; if ( unlikely ( unlikely ( unlikely ( error ) ) ) return error ;,0
367,<S2SV_ModStart> VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; if ( load -> error ) return ( NULL <S2SV_ModStart> -> real ) || <S2SV_ModEnd> vips_operation -> <S2SV_ModStart> out ) return ( NULL <S2SV_ModStart> out ) ) ; if ( load -> error = NULL <S2SV_ModStart> out ) ) return ( NULL,0
368,"<S2SV_ModStart> ) { switch ( fit_noffset, name ) ;",0
369,<S2SV_ModStart> ; if (! retval ) <S2SV_ModEnd> retval = context,1
370,<S2SV_ModStart> = - ENOMEM ; return - EINVAL ;,0
371,<S2SV_ModStart> service_name_tlv_length ) ; if (! service_name_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if (! miux_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if (! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; },1
372,<S2SV_ModStart> sock ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> NULL ; } <S2SV_null> <S2SV_null>,0
373,"<S2SV_ModStart> * cfg, <S2SV_ModEnd> codec_alg_priv_t * cfg <S2SV_ModStart> vp9_codec_cfg_cfg_cfg_priv_t * flags ;",0
374,<S2SV_ModStart> unsigned char * ch ; size_t <S2SV_ModEnd> chans = 0,0
375,"<S2SV_ModStart> ( interface, ENC3 <S2SV_ModEnd> ) ; }",0
376,<S2SV_ModStart> ; if ( ( skb ) <S2SV_ModEnd> == NULL ),0
377,<S2SV_ModStart> len ; } ND_TCHECK_32BITS <S2SV_ModEnd> ( p + <S2SV_ModStart> p + 2 <S2SV_ModEnd> ) ; ND_PRINT,1
378,<S2SV_ModStart> 0 ; } if ( unlikely ( IPCB ( skb ) -> opt. optlen ) ) skb_dst_force ( skb ) ; else,1
379,<S2SV_ModStart> private ) { struct skcipher_tfm * tfm = private ; crypto_free_tfm ( tfm <S2SV_ModEnd> ) ; },0
380,<S2SV_ModStart> bprm ) { <S2SV_ModEnd> int retval ; <S2SV_ModStart> int retval ; bprm_fill_uid ( bprm ) ; <S2SV_ModEnd> retval = security_bprm_set_creds,1
381,<S2SV_ModStart> ; if ( unlikely ( headcount >= headcount ) ) return - EINVAL ;,0
382,<S2SV_ModStart> ; dlen -= 3 <S2SV_ModEnd> ; for (,0
383,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
384,<S2SV_ModStart>,0
385,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
386,<S2SV_ModStart> ; if ( <S2SV_ModEnd> skb -> len,0
387,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; return",0
388,"<S2SV_ModStart> bp, len ) ; break ; case ETHERTYPE_TEB : ether_print ( ndo, bp, len <S2SV_ModStart> ndo_snapend - bp <S2SV_ModEnd>, NULL,",1
389,<S2SV_ModStart> ; } } if ( tile_buffsize > 0xff,0
390,<S2SV_ModStart> O_APPEND | O_CREAT | O_NOFOLLOW,1
391,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> pci_null>,0
392,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> -> nd_num ) { ret = <S2SV_ModEnd> - EBUSY ; <S2SV_ModStart> - EBUSY ; goto out ; } <S2SV_ModStart> ( ret ) goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> nd_num ; } ret = count ; out : o2nm_unlock_subsystem ( ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>,1
393,<S2SV_ModStart> ( fp == NULL <S2SV_ModEnd> ) ; if,0
394,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( op,0
395,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
396,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
397,<S2SV_ModStart> return - E_NOTHANDLED ; if ( ninst == 0 ) return - E_INVALID,1
398,<S2SV_ModStart> l ) ; ND_TCHECK_16BITS ( & lstr ) ;,0
399,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
400,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( &,0
401,"<S2SV_ModStart> 0 ) { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",0
402,<S2SV_ModStart> ( ) ; if (! tbuf ) { return NULL ; },1
403,<S2SV_ModStart> ) ; size_t ret = <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ; return err = <S2SV_ModEnd> - EFAULT,0
404,<S2SV_ModStart>,0
405,<S2SV_ModStart> ( ) == NULL &&,0
406,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> rowstride ) { if (! <S2SV_ModStart> rowstride ) return FALSE ; } return TRUE ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
407,"<S2SV_ModStart> void vp9_tree_probs ( const vpx_tree_probs <S2SV_ModEnd> * tree,",0
408,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS,1
409,<S2SV_ModStart> return ( ( ( <S2SV_ModStart> ) / 8 ) * GetPSDPacketSize ( image ),1
410,<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> + 1 ),0
411,<S2SV_ModStart> bMasterInterface0 ) ; if (! pcu -> ctrl_intf ) return - EINVAL ; <S2SV_ModStart> bSlaveInterface0 ) ; if (! pcu -> data_intf ) return - EINVAL ;,1
412,"<S2SV_ModStart> const char * devname = kfree ( dev_name ( & <S2SV_ModEnd> d -> dev_name <S2SV_ModStart> udev -> devname ), GFP_KERNEL ) ; const char * devname = kfree ( devname <S2SV_ModStart> d ) ; kfree ( devname <S2SV_ModEnd> ) ; }",0
413,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpx ) <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpy )",1
414,<S2SV_ModStart> target_enc ) { return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION <S2SV_ModEnd> ; } else,1
415,<S2SV_ModStart> <S2SV_,0
416,"<S2SV_ModStart> u_char * tptr, const u_int length ) { u_int length ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> = FALSE ; if ( length < 1 ) { ND_PRINT ( ( ndo, ""%s"", tptr ) ) ; return hexdump ; } <S2SV_ModStart> case AFNUM_INET : if ( length!= 1 + length!= 1 ) { ND_PRINT ( ( ( ndo, ""\\n\\t <S2SV_blank> IPv4 <S2SV_blank> <S2SV_blank> IPv6 <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> length <S2SV_blank> (invalid, <S2SV_blank> length <S2SV_blank> %u)"", length - 1 ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> case AFNUM_INET6 : if ( length!= 1 + 4 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> IPv4 <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %u)"", length - 1 ) ) ; hexdump = TRUE ; break ; }",0
417,<S2SV_ModStart>,0
418,<S2SV_ModStart> dev ) ; ssize_t len ; device_unlock ( dev ) ; return len ;,0
419,"<S2SV_ModStart> BIO * tmpout ; tmpout = cms_get_text_bio ( out, flags ) ; if (! tmpout ) { CMSerr ( CMSerr, CMS_F_CMS_TEXT ) ; goto err ; } if ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> if (!",0
420,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( retval == 0 ) rs. enc_tkt_reply -> flags |= 0 ;,0
421,"<S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> * best, <S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> cost =",0
422,<S2SV_ModStart> = rmdir ; <S2SV_ModEnd> if ( tmp,0
423,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> case AF_UNIX = 0,0
424,"<S2SV_ModStart> * output, <S2SV_ModEnd> * input,",0
425,<S2SV_ModStart> ; if ( fmt & 0xffff <S2SV_ModEnd> ) return 0,0
426,"<S2SV_ModStart> ) { struct hugepage_subpool * spool = subpool_vma ( vma ) ; struct <S2SV_ModStart> page * page <S2SV_ModEnd> ; long chg <S2SV_ModStart> ) if ( spool_put_pages ( spool <S2SV_ModEnd>, chg )",0
427,"<S2SV_ModStart> filegen_string ) ; if ( NULL == filegen ) { msyslog ( LOG_ERR, ""stats <S2SV_blank> %s <S2SV_blank> unrecognized"", filegen_string ) ; continue ; } <S2SV_ModStart> filegen_filegen_filegen_filegen ) ; if ( NULL == filegen ) { msyslog ( LOG_ERR, ""filegen <S2SV_blank> unrecognized"" ) ; continue ; }",0
428,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; timer_set_state",1
429,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> output ) { tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> output ) { tran_high_t x4 ; tran_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart>, s1 ] ; tran_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd>, s = input <S2SV_ModStart> 5 ] ; tran_low_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 0 ] = input + ( tran_low_t ) <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 1 ] ; tran_low_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 5 ] = input <S2SV_ModEnd> ( input, <S2SV_ModStart> 5 ] = ( tran_low_t ) <S2SV_ModStart> 5 ] = ( tran_low_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 5 ] = ( tran_low_t ) <S2SV_ModStart> 5 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 5 ] =",0
430,<S2SV_ModStart>,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
433,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
434,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> AVINDEX_KEYFRAME ) ; },1
435,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & ASN1_OP_UNONG,0
436,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> out ; } <S2SV_ModEnd> if (! <S2SV_ModStart>, cgroup, & next ) ) { if (! fpath || strcmp ( next, fpath ) == 0 ) ret = - EACCES ; else ret = - EACCES ; goto out ; } if (! <S2SV_ModStart> cgdir ) ; free ( next ) ;",0
437,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flag & CL_UNPRIVILEGED <S2SV_ModStart> & CL_UNPRIVILEGED ) { mnt -> mnt. mnt_flags |= MNT_LOCK_NOEXEC ; if <S2SV_ModEnd> ( mnt -> <S2SV_ModStart> mnt_flags |= MNT_READONLY <S2SV_ModEnd> ; if (,0
438,<S2SV_ModStart> rds_loop_transport ; } <S2SV_ModEnd> } conn ->,1
439,<S2SV_ModStart> * rsize >= 112 <S2SV_ModEnd> && rdesc [,1
440,<S2SV_ModStart> if ( ( ( <S2SV_ModStart> ) < bodyLength ) || ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ),1
441,<S2SV_ModStart> ( likely ( serio <S2SV_ModEnd> &&! filtered,1
442,"<S2SV_ModStart>! er ) { ND_TCHECK ( <S2SV_ModEnd> dp [ 0 <S2SV_ModStart> 0 ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> c <S2SV_blank> %04x"", EXTRACT_32BITS ( & dp [ 0 ] ) ) ) ; } <S2SV_ModEnd> return ; case",1
443,"<S2SV_ModStart> * newName, int newLen, <S2SV_ModStart> * udfName, int udfLen, <S2SV_ModEnd> uint8_t * fidName <S2SV_ModStart> ( newIndex < newLen <S2SV_ModEnd> ) newName [ <S2SV_ModStart> } maxFilenameLen = newLen - CRC_LEN <S2SV_ModEnd> - localExtIndex ; <S2SV_ModStart> ( newIndex > newLen - CRC_LEN ) newIndex = newLen - CRC_LEN <S2SV_ModEnd> ; newName [",1
444,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const VP9_COMMON * tile, MACROBLOCKD * tile, MACROBLOCK * xd, int mi, int mi_col, int mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi ( mi_col, mi_col, mi_col, mi_col, & mi <S2SV_ModEnd> ) ; <S2SV_ModStart> NULL ) { <S2SV_ModEnd> return ; <S2SV_ModStart> cpi, mi_col ; } <S2SV_ModEnd> ( cpi,",0
445,<S2SV_ModStart> ; if ( true &&,0
446,<S2SV_ModStart> ; if ( 0 &&,0
447,"<S2SV_ModStart> * s ; const unsigned char * p = sigbuf ; unsigned char * der = NULL ; int derlen = - 1 ; <S2SV_ModStart> s, & p <S2SV_ModEnd>, siglen ) <S2SV_ModStart> == NULL ) goto err ; derlen = i2d_DSA_SIG ( s, & der ) ; if ( derlen!= siglen || memcmp ( sigbuf, der, derlen ) ) <S2SV_ModStart> ; err : if ( derlen > 0 ) { OPENSSL_cleanse ( der, derlen ) ; OPENSSL_free ( der ) ; }",1
448,"<S2SV_ModStart> NULL ) ; if (! _gdImageExt ( im, size ) ) { rv = NULL ; }",0
449,<S2SV_ModStart> ) ; } if ( bprm -> interp!= bprm -> filename ) kfree ( bprm -> interp ) ;,1
450,"<S2SV_ModStart>, ret = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart>, ret!= OE_SSIZE_MAX <S2SV_ModEnd> ) ; if",0
451,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
452,"<S2SV_ModStart> ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> image <S2SV_blank> dimensions"" ) ; goto done ; }",1
453,"<S2SV_ModStart> * pc, memset <S2SV_ModEnd> ( pc ->",0
454,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; else if ( ret <= size ) memcpy ( data, buf, ret ) ; kfree ( buf ) ;",0
455,"<S2SV_ModStart> * body, size_t <S2SV_ModEnd> p ) { <S2SV_ModStart> return NULL ; <S2SV_ModEnd> } } <S2SV_null>",0
456,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
457,"<S2SV_ModStart> int flags, <S2SV_ModEnd> flags * <S2SV_ModStart> ; # if ( vpx_write_frame_frame_end <S2SV_ModEnd> ( src, <S2SV_ModStart> flags ) ; <S2SV_ModEnd> } else #",0
458,<S2SV_ModStart> ) ; } fuse_conn_put ( & cc -> fc ) ;,1
459,"<S2SV_ModStart> ( code ) { * status = ""DECODE_PA_S4U_X509_USER"" ; return code ; } <S2SV_ModEnd> code = verify_s4u_x509_user_checksum",1
460,"<S2SV_ModStart> * r, <S2SV_ModEnd> const char *",0
461,<S2SV_ModStart> cur_pic. field_picture <S2SV_ModEnd> ) return 0,1
462,<S2SV_ModStart> off ) { struct rds_info * sgp = & rm -> data. h_len ; int ret = sizeof ( struct rds_inc ) + ret <S2SV_ModEnd> ; goto out <S2SV_ModStart> 0 ) ; out : return ret <S2SV_ModEnd> ; } <S2SV_null>,0
463,<S2SV_ModStart> buf ) ) { return 0 ; } <S2SV_ModEnd> ext_block = (,1
464,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,1
465,<S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },0
466,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
467,"<S2SV_ModStart> = hmi_data ; uint32_t data_siz ; <S2SV_ModStart> } * note <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( hmi_track_offset [ i ] >= hmi_offset ) { _WM_GLOBAL_ERROR ( __FUNCTION__, WM_ERR_NOT_HMI, ""file <S2SV_blank> too <S2SV_blank> short"", 0 ) ; goto _hmi_track_offset [ i ] ; } data_siz += 4 ; <S2SV_ModStart> += 4 ; hmi_tmp += 4 ; <S2SV_ModStart> += 4 ; hmi_tmp -= 4 ; <S2SV_ModStart> += 4 ; if ( hmi_tmp > data_siz ) { _WM_GLOBAL_ERROR ( __FUNCTION__, ""file <S2SV_blank> too <S2SV_blank> short"", 0 ) ; goto _hmi_tmp ; } data_siz += 4 ; <S2SV_ModStart> += 4 ; hmi_tmp = data_siz ; <S2SV_ModStart> += 4 ; if ( hmi_tmp > data_siz ) { _WM_GLOBAL_ERROR ( ""file <S2SV_blank> too <S2SV_blank> short"", 0 ) ; goto _hmi_tmp ; } data_siz -= hmi_tmp ; <S2SV_ModStart> += 4 ; data_siz -= hmi_siz ; <S2SV_ModStart> += 4 ; <S2SV_ModStart> += 4 ; data_",0
468,<S2SV_ModStart> -> id ; haddr -> hci_channel = 0 ;,1
469,<S2SV_ModStart> -> i_iget5_offset ; fh16 [ 3 ] = 0 ;,1
470,"<S2SV_ModStart> ( kdc_active_realm, client. princ <S2SV_ModEnd>, request ->",1
471,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> = S64_MAX ; <S2SV_ModEnd> if ( src_known,1
472,"<S2SV_ModStart> ) ) { const int q ; const <S2SV_ModStart> = vp9_get_filter_level ( sd, cpi <S2SV_ModEnd> ) ; int <S2SV_ModStart> = vp9_to_filter_level ( cpi <S2SV_ModEnd> ) ; } <S2SV_ModStart> = vp9_to_filter_level ( cpi, q, y, y <S2SV_ModEnd> ) ; }",0
473,<S2SV_ModStart> ) ; } btif ( false,0
474,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
475,"<S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, MAXALIGN",0
476,<S2SV_ModStart> void usage_exit ( void,1
477,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
478,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
479,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
480,<S2SV_ModStart> ; if (! <S2SV_ModEnd> data_sz ) return,0
481,<S2SV_ModStart> ; if ( * value == 0 ||,1
482,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> inode ->,0
483,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
484,<S2SV_ModStart> ; if ( snpal!= <S2SV_ModEnd> 0 ) ND_PRINT ( ( ndo,0
485,"<S2SV_ModStart> y ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> c"", <S2SV_ModStart> ) ; } sendClean ( outputbuffer ) ;",0
486,<S2SV_ModStart> } else { return false ; } } else {,0
487,<S2SV_ModStart> case IS_STRING : { zval lval ; dval = * * * tmp ; zval_copy_ctor ( & dval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> i ] = Z_LVAL ( dval ) ; } <S2SV_ModEnd> break ; default <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { rect. x = <S2SV_ModStart> ) ; } } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { rect. y = <S2SV_ModStart> ) ; } } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval l,0
488,"<S2SV_ModStart> * self, <S2SV_ModEnd> object ) ;",0
489,<S2SV_ModStart> SQL_DROP ) ; <S2SV_ModEnd> return 0 ;,1
490,"<S2SV_ModStart> ; r = __copy_from_user <S2SV_ModEnd> ( data,",1
491,"<S2SV_ModStart>, * q <S2SV_ModEnd> ; Clp_Parser * <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> (C) <S2SV_blank> I. <S2SV_blank> Hethering <S2SV_blank> I.\\n\\\nThis <S2SV_ModEnd> ) ; exit <S2SV_ModStart> ; isdigit ( unsigned char )",0
492,<S2SV_ModStart> = 0 ; info -> port = NULL ;,1
493,<S2SV_ModStart> -> ctx. <S2SV_ModEnd> pmu = pmu,1
494,"<S2SV_ModStart> iovec * iovec, struct iov_iter * iter ) { if ( len > MAX_RW_COUNT ) len = MAX_RW_COUNT ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> = 1 ; iov_iter_init ( iter, rw, iovec, * nr_segs, len ) ;",1
495,<S2SV_ModStart> ext4_group_t flex_group ; unsigned <S2SV_ModStart> -> s_log_groups_per_flex ; if ( sbi -> s_log_groups_per_flex < 1 || sbi -> s_log_groups_per_flex > 31 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } <S2SV_ModStart> -> s_log_groups_per_flex ; <S2SV_ModEnd> flex_group_count = (,1
496,<S2SV_ModStart> ( unlikely ( chunk -> pdiscard ) ) return 0 ; if ( unlikely (,1
497,<S2SV_ModStart> count ) ) { <S2SV_ModEnd> for ( i <S2SV_ModStart> = c0 ; <S2SV_ModEnd> if ( i,0
498,"<S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; if ( <S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; if (",1
499,<S2SV_ModStart> <= w - ( int ),1
500,<S2SV_ModStart> callback_args -> forward_matches ; assert ( match_offset + match_length <= callback_args -> data_size ),1
501,<S2SV_ModStart> options. disable_forwarding && use_privsep,1
502,"<S2SV_ModStart> { if ( length > SMKTREE_DECODE_MAX_RECURSION ) { av_log ( NULL, AV_LOG_ERROR, ""Maximum <S2SV_blank> tree <S2SV_blank> recursion <S2SV_blank> level <S2SV_blank> exceeded.\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",1
503,<S2SV_ModStart> err ; } if ( m -> msg_name ),1
504,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_ignores, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; } else <S2SV_ModEnd> if ( tmp <S2SV_ModStart> ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_ignores, & PyId_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> "" ) ; return 1 ; } else <S2SV_ModEnd> { int res <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> obj, & PyId_ignores <S2SV_ModEnd> ) ; } if",0
505,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) { hstartrow <S2SV_ModEnd> = ( numrows <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; n = <S2SV_ModStart> & a [ hstartrow <S2SV_ModEnd> * stride ],1
506,"<S2SV_ModStart> ""REPLY_ADD_STA <S2SV_blank> PASSED\\n"" ) ; ret = iwl_sta_ucode_activate ( priv, sta_id ) <S2SV_ModEnd> ; break ;",1
507,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
508,,0
509,"<S2SV_ModStart> & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ) { if (! hashbin -> hb_type & HB_LOCK ) break ; <S2SV_ModEnd> if ( free_func <S2SV_ModStart> ( free_func ) { if ( hashbin -> hb_type & HB_LOCK ) spin_unlock_irqrestore ( & hashbin -> hb_spinlock, flags ) ; free_func ( queue ) ; if ( hashbin -> hb_type & HB_LOCK ) spin_unlock_irqrestore ( & hashbin -> hb_spinlock, flags ) ; } <S2SV_ModEnd> } } hashbin <S2SV_ModStart> & HB_LOCK ) <S2SV_ModEnd> kfree ( hashbin",0
510,<S2SV_ModStart> EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_ATIME ) ) { return - EPERM ; } if ( ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_ATIME ) ) { return - EPERM ; } if ( ( ( mnt. mnt_flags & MNT_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOSUID ) && ( ( mnt -> mnt. mnt. mnt_flags & MNT_ATIME )!= ( mnt_flags & MNT_ATIME ) ) ) { return - EPERM ; },0
511,"<S2SV_ModStart> copied, err <S2SV_ModEnd> ; int vnet_hdr_len <S2SV_ModStart> out_free ; } err = skb -> len ; if ( copied > len ) { copied = len ; msg -> msg_namelen = - EINVAL ; } err = sizeof ( msg -> msg_namelen ) ; if ( copied < 0 ) goto out_free ; } <S2SV_ModEnd> if ( copied",0
512,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
513,"<S2SV_ModStart> ( serial -> num_bulk_out <S2SV_ModEnd> < 2 ) <S2SV_ModStart> < 2 ) { dev_err ( & serial -> interface -> dev, ""missing <S2SV_blank> bulk <S2SV_blank> out <S2SV_blank> endpoints\\n"" ) ; return - ENODEV ; } <S2SV_ModEnd> port = serial",1
514,"<S2SV_ModStart> write_junk = 1, table_length = 0 <S2SV_ModStart> ; DS64Chunk ds64 = 0 ; cs64Chunk ds64_chunk <S2SV_ModStart> ds64_chunk ) ; total_riff_bytes += table_length * sizeof ( CS64Chunk ) ; cs64 = table_length * sizeof ( cs64Chunk ) <S2SV_ModStart> ( ds64 = table_length * sizeof ( CS64Chunk ) ) <S2SV_ModStart> ds64 = table_length * sizeof ( cs64 = table_length",0
515,<S2SV_ModStart> ( msg_name ) <S2SV_ModEnd> ; err = <S2SV_ModStart> -> msg_name ) <S2SV_ModEnd> ; err =,0
516,"<S2SV_ModStart>, int end <S2SV_ModEnd> ; struct buffer_head <S2SV_ModStart> ) ) ; unsigned int len <S2SV_ModEnd> = 0 ; <S2SV_ModStart>, i ) ; if (! bh ->",0
517,<S2SV_ModStart> ( input -> codec == 0,0
518,<S2SV_ModStart> return FALSE ; { BOOL rc ; <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) rc = <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) if (! rc ) return FALSE ; } { BOOL rc ; <S2SV_ModStart> -> prof_nsc_decode ) rc = <S2SV_ModStart> -> prof_nsc_decode ) if (! rc ) return FALSE ; },1
519,<S2SV_ModStart> ; } else if ( ctxt -> name == NULL ) &&,0
520,"<S2SV_ModStart> ; if ( is_link ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> %s <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> ; if ( is_link ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> invalid <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> ) ) { copy_file_file_as_file <S2SV_ModEnd> ( fname, <S2SV_ModStart> 0 ) ; } free ( fname ) ; } copy_file ) { copy_file_file ( fname, fname ) ;",0
521,"<S2SV_ModStart> * xdr_len, u8_len <S2SV_ModEnd> ) { struct <S2SV_ModStart> * acl_len ; size_t * acl_len ; size_t rlen = 0 ; <S2SV_ModStart> out ; if ( status == 0 ) { status = - EINVAL ; goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> size ) { size_t iov_len = ( size_len + ( size_t * ) attr_len ; <S2SV_ModStart> ) ) ; if (! r <S2SV_ModEnd> ) goto out <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> ) ; }",0
522,<S2SV_ModStart> { if ( f &&,0
523,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,0
524,<S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( &,1
525,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
526,<S2SV_ModStart> ) { return - 1 <S2SV_ModEnd> ; } break,0
527,<S2SV_ModStart> media_media ; struct range_length * r = & clt -> clt_media ; struct range_range_length <S2SV_ModEnd> ; size_t content_length <S2SV_ModStart> ; size_t content_length = 0 <S2SV_ModStart> 1 ; size_t r -> st_length = 0 ; size_t r -> clt_range_length = 0 ; content_length <S2SV_ModEnd> if ( nranges <S2SV_ModStart> } else { range = & clt -> clt_ranges [ 0 ] ; r -> range = & r -> clt -> range [ 1 ] ; struct range = & r -> clt -> range [ 0 ] ; size = & r -> clt -> clt -> range [ 1 ] ; if ( r -> range [ 0 ] ) { error = & r -> clt -> range [ 0 ] ; break ; } r -> range = & r -> range [ 0 ] ; range [ 0 ] = & r -> clt -> clt -> clt -> clt_range [ 1 ] ; size = & r -> clt -> range [ 0 ] ; if ( nranges < nranges ) { error = & r -> clt -> clt_range [ 0 ] ; if (! r -> clt -> c,0
528,"<S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( interface, KSZ8851_ISR, KSZ8851_ISR )!= 0 ) { status = KSZ8851_ISR ( interface, KSZ8851_ISR, KSZ8851_ISR, KSZ8851_ISR ) ; return ; } <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR, KSZ8851_ISR_IER, KSZ8851_LIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR_IER, KSZ8851_IER <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR, KSZ8851_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_IER <S2SV_ModEnd> )!= <S2SV_ModStart> ( interface, KSZ8851_RXIS <S2SV_ModEnd> ) ; }",0
529,"<S2SV_ModStart> write_bit_buffer ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> cm, vpx_wb_write_bit <S2SV_ModEnd> * wb )",0
530,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
531,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
532,<S2SV_ModStart> tmp ) { goto softfail <S2SV_ModEnd> ; } case <S2SV_ModStart> ) ) { goto softfail <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; softfail : state -> offset = 0 ;,1
533,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
534,<S2SV_ModStart> flags ) { spin_lock ( & ctx -> cancel_lock ) ; <S2SV_ModStart> } } else { __timerfd_remove_cancel <S2SV_ModEnd> ( ctx ) <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> cancel_lock ) ;,1
535,"<S2SV_ModStart> ) ) ; if ( c16 -> Curves [ i ] == NULL ) { for ( j = 0 ; j < i ; j ++ ) { _cmsFree ( ContextID, c16 -> Curves [ j ] ) ; } _cmsFree ( ContextID, c16 -> Curves ) ; _cmsFree ( ContextID, c16 ) ; return NULL ; }",1
536,<S2SV_ModStart> { if (! dev_name ||,1
537,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; return",0
538,<S2SV_ModStart> controlcount ) ; <S2SV_ModEnd> if ( msg,0
539,<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { efree ( replaced ) ; RETURN_FALSE ; },1
540,<S2SV_ModStart> (,0
541,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
542,"<S2SV_ModStart>, BLOCK_SIZE bsize, MACROBLOCK * x, <S2SV_ModStart> BLOCK_SIZE bsize ) { <S2SV_ModEnd> int b_width_log2_info <S2SV_ModStart> 0 ) { <S2SV_ModEnd> if ( xd <S2SV_ModStart> ( xd -> mi_col ] == BLOCK_SIZE",0
543,"<S2SV_ModStart> name ) ; if (! strcmp ( key, ""url"" ) && value && looks_like_command_line_option ( value ) ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_URL, ""disallowed <S2SV_blank> submodule <S2SV_blank> url: <S2SV_blank> %s"", value ) ;",1
544,"<S2SV_ModStart> = 0 ; int block_ptr = 0 ; <S2SV_ModStart>, row_ptr, block_ptr <S2SV_ModEnd> ) ; if",0
545,<S2SV_ModStart> cnt ) { ssize_t <S2SV_ModEnd> n ; assert,1
546,<S2SV_ModStart> ; __be16 type ; if ( NAPI_GRO_CB ( skb ) -> encap_mark ) goto out ; NAPI_GRO_CB ( skb ) -> encap_mark = 1,1
547,<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { return 0 ; } if (,1
548,"<S2SV_ModStart> } else { memset ( session, 0, <S2SV_ModEnd> ) ; }",0
549,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_read2,0
550,<S2SV_ModStart> -> u4_first_slice_in_pic = 1 <S2SV_ModEnd> ; ps_dec ->,0
551,"<S2SV_ModStart> ; if ( src_bitness == BPF_ADD ) { coerce_reg_to_size ( dst_reg, 4 ) ; coerce_reg_to_size <S2SV_ModEnd> ( & src_reg <S2SV_ModStart> ( & src_reg, 4",0
552,<S2SV_ModStart> = 0 ; if ( unlikely (,0
553,"<S2SV_ModStart> vfio_irq_set hdr ; size_t size ; <S2SV_ModStart> NULL ; int max, <S2SV_ModStart> ; if ( <S2SV_ModEnd> count > ( U32_MAX - hdr",0
554,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ext4_has_inline_data ( inode,1
555,<S2SV_ModStart> -> filesize = UINT64_MAX <S2SV_ModEnd> ; s ->,1
556,<S2SV_ModStart> & th ) <S2SV_ModEnd> ; if (,0
557,"<S2SV_ModStart> char * in, size_t olen <S2SV_ModStart> += 4 ; if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ;",1
558,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
559,"<S2SV_ModStart> i ; size_t bytes, <S2SV_ModStart> ++ ) { bytes <S2SV_ModEnd> = min_t ( <S2SV_ModStart>, 0, bytes <S2SV_ModEnd> ) ; nr_pages <S2SV_ModStart> copy, bytes <S2SV_ModEnd> ) ; if",0
560,<S2SV_ModStart> & CP_RDESC_SWAPPED_MIN_MAX ) ) return rdesc ; if ( * rsize < 4,1
561,"<S2SV_ModStart> int i, vpx_ctx_init <S2SV_ModEnd> * si, <S2SV_ModStart> 0 ) { <S2SV_ModEnd> i ; svc_ctx <S2SV_ModStart> int i ; svc_ctx -> encode_frame_count ; svc_ctx [ i ] = 0 ; <S2SV_ModStart> 1 ) { if ( svc -> pass == NULL ) { if ( svc_ctx -> frame_count ) { <S2SV_ModStart> = 0 ; ++ i ++ i ++ ; } <S2SV_ModStart> + i ++ ) { if ( i == NULL ) return NULL ; }",0
562,<S2SV_ModStart> <S2SV_,0
563,<S2SV_ModStart> new_cols ) ; if ( screen -> sb_cols == new_cols ) { vterm_free ( screen ) ; return ; },0
564,"<S2SV_ModStart> char * end, int end_end <S2SV_ModEnd> ; const <S2SV_ModStart> == '\\0' || * str_end <S2SV_ModEnd> == '\\n' || <S2SV_ModStart> == NULL ) { char * str_end <S2SV_ModEnd> ; if ( <S2SV_ModStart> == '\\0' || * str2_end == '\\0' || * str ) { if ( * str == '\\0' || * str ) { str [ 1 ] == '\\0'? 1 ; return - 1 ; } end_string_end = * str ; if ( * str ) { if ( * str && * str == '\\0' ) { return - 1 ; } if ( * str == '\\0' ) { * str ; return - 1 ; } end = * str ; if ( * str ) { if ( * str && * str == '\\0' ) { * str ; return - 1 ; } * str ; if ( * str_end + 1 ) { * str = * str ; if ( * str && * str == '\\0' ) { return - 1 ; } end = ( * str + 1 ; } end ) ; if ( * str == NULL ) { char * str = 1 ; if ( * str >= end ) { char * str ; return - 1 ; }",0
565,"<S2SV_ModStart> * m, size_t <S2SV_ModEnd> bufsize ) { <S2SV_ModStart> * buf ; <S2SV_ModEnd> JAS_DBGLOG ( ""mem",0
566,"<S2SV_ModStart>, profile, <S2SV_ModEnd> ) ; if",0
567,<S2SV_ModStart> expr_rtrn = 0,0
568,<S2SV_ModStart> pcrypt_free ( struct aead_instance <S2SV_ModEnd> * inst ) <S2SV_ModStart> * ctx = aead_instance_ctx <S2SV_ModEnd> ( inst ),1
569,,0
570,"<S2SV_ModStart> } if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if (",1
571,<S2SV_ModStart> icmp6_hop_limit ) { if ( <S2SV_ModStart> cnf. hop_hop_limit < <S2SV_ModEnd> ra_msg -> icmph,0
572,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
573,<S2SV_ModStart> * up ; int ulen ; <S2SV_ModStart> rp ) ; ulen = memset_state_len ( up ) ;,0
574,"<S2SV_ModStart> int ret = proc_dointvec_minmax <S2SV_ModEnd> ( table,",1
575,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
576,<S2SV_ModStart> opj_calloc ( ( size_t ) ( <S2SV_ModStart> -> numlayers + 1U <S2SV_ModEnd> ) * l_step_l,0
577,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
578,"<S2SV_ModStart>, start2 ; int i ; <S2SV_ModStart> ) ) ; for ( i = 0 ; i < 3 ; i ++ )",0
579,"<S2SV_ModStart> const tile, MACROBLOCK * x, <S2SV_ModStart> -> mi_col ; <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> ) { const <S2SV_ModStart> -> mi_col ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> mi_col ) ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> mi_col ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> mi_col ) ; memcpy <S2SV_ModEnd> ( cpi, <S2SV_ModStart>, mi_col, & td, <S2SV_ModStart> mi_col ) ; memcpy <S2SV_ModEnd> ( cpi, <S2SV_ModStart>, mi_col, & x <S2SV_ModEnd>, mi_col, <S2SV_ModStart> mi_col ) ; memset ( mi_col ) ;",0
580,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",1
581,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; if",0
582,<S2SV_ModStart> } else { # ifdef UPNP_ENABLE_POST_WRITE <S2SV_ModStart> return HTTP_UNAUTHORIZED ; # else return HTTP_NOT_FOUND ; # endif,1
583,"<S2SV_ModStart> char * dir <S2SV_ModEnd> = NULL ; <S2SV_ModStart>, dir, dir <S2SV_ModEnd> ) ; if",0
584,<S2SV_ModStart> blkg ) ) <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> blkg ) ; <S2SV_ModEnd> q -> root_blkg,1
585,<S2SV_ModStart> ; if ( bpp == 1 && <S2SV_ModStart> else if ( bpp == 8 &&,1
586,"<S2SV_ModStart> ; krb5_data rspac ; const char * tgt_realm = krb5_get_realm ( context, tgt_realm <S2SV_ModStart>, cp, tgt_realm,",0
587,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
588,"<S2SV_ModStart> struct usbdevfs_connectinfo ci ; memset ( & ci, 0, sizeof ( ci ) ) ; ci <S2SV_ModEnd>. devnum = <S2SV_ModStart> dev -> devnum ; ci <S2SV_ModEnd>. slow = <S2SV_ModStart> speed == USB_SPEED_LOW <S2SV_ModEnd> ; if (",1
589,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> * opt, struct ip_options_rcu <S2SV_ModEnd> * optp = <S2SV_ModStart> ( opt -> opt. <S2SV_ModStart> & opt.",0
590,<S2SV_ModStart> ( args -> rmtvaluelen <S2SV_ModEnd> ) ; return,0
591,"<S2SV_ModStart> LARGE_INTEGER offset ; size_t devicePathLen = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) break ; if (! WCHAR * sizeof ( devicePathLen ) || ( devicePathLen > 20 ) || ( devicePathLen * sizeof ( devicePathLen > 20 ) || ( devicePathLen > 20 ) || ( devicePathLen > 16 * sizeof ( devicePathLen ) || ( devicePathLen > INT_MAX_SECTOR_MAX_MAX_SIZE ) || ( request -> DevicePathLen > TC_MAX_SECTOR_MAX_SIZE ) || ( WCHAR * sizeof ( request -> DevicePathLen > TC_MAX_SECTOR_MAX_SIZE ) || ( request -> DevicePathLen > TC_MAX_MAX_SECTOR_MAX_SIZE ) || ( readPathLen > TC_MAX_SECTOR_MAX_MAX_SIZE ) || ( devicePathLen > TC_SECTOR_MAX_MAX_SIZE ) || ( TC_SECTOR_MAX_SECTOR_MAX_SIZE ) || ( read -> IoStatus. Information > TC_MAX_SECTOR_SIZE ) ) { TIFFError, TC_MAX_SECTOR_SIZE_MAX_SECTOR_SIZE ) ; return 0 ; }",0
592,<S2SV_ModStart> ; if ( ci == NULL &&,0
593,"<S2SV_ModStart>, unsigned long <S2SV_ModEnd> d ; uint16 * <S2SV_ModStart> ; if ( <S2SV_ModEnd> d -> name <S2SV_ModStart>. name, sizeof ( * d -> name ) ) ; if ( len > sizeof ( * d -> address ) { devbuf [ 0 ] = - 1 ; goto error ; } if ( <S2SV_ModStart> ) ) { if ( len += sizeof ( <S2SV_ModEnd> ) - 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> ) break",0
594,"<S2SV_ModStart>, problem, ""%s"",",0
595,<S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> index ) ; q ++ ; p <S2SV_ModEnd> ++ ; } <S2SV_ModStart> % 4 ) > <S2SV_ModEnd> 1 ) { <S2SV_ModStart> % 4 ) > <S2SV_ModEnd> 2 ) {,0
596,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
597,"<S2SV_ModStart>, int tstype, bool opt_stats <S2SV_ModStart> ; int err ; BUILD_BUG_ON ( sizeof ( struct sock_exterr_skb ) > sizeof ( skb -> cb ) ) <S2SV_ModStart> ee_info = tstype ; serr -> opt_stats = opt_stats",1
598,"<S2SV_ModStart> 0 ) { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ;",0
599,<S2SV_ModStart> ( len < 2 <S2SV_ModEnd> ) { if <S2SV_ModStart> 2 ) ; },0
600,"<S2SV_ModStart>, CONST_STR_LEN ( ""%2f?"" ), CONST_STR_LEN ( ""/?"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/%2f?"" ), CONST_STR_LEN ( ""//?"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN (",1
601,<S2SV_ModStart> ( task -> user == <S2SV_ModEnd> ) ) return,0
602,<S2SV_ModStart> <= w - ( int ),1
603,<S2SV_ModStart> page ) ; <S2SV_ModEnd> memset ( addr,1
604,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t,0
605,<S2SV_ModStart> = 1 ; if ( ps_parse -> s_num ) { <S2SV_ModStart> = 1 ; } else { i4_parse_coeff_data_size = ps_parse_parse ( ps_parse ) ; },0
606,"<S2SV_ModStart> * priv ; if (! port -> interrupt_out_urb ||! port -> interrupt_in_urb ) { dev_err ( & port -> dev, ""required <S2SV_blank> endpoint <S2SV_blank> is <S2SV_blank> missing\\n"" ) ; return - ENODEV ; }",1
607,<S2SV_ModStart> ) ) ; if ( 1 &&,0
608,<S2SV_ModStart> -> device_data ; cancel_autoload_drivers ( ) ;,1
609,"<S2SV_ModStart>, int ret, test_stat <S2SV_ModStart> < 0 ) { if ( mi_stat == 0 || mi_stat == 0 ) { return - E_BACKUP ; } <S2SV_ModStart>, flags ; }",0
610,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> p == q ) || ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> size < 16 ) || ( <S2SV_ModEnd> size > 256 <S2SV_ModStart> size > 256 ),1
611,"<S2SV_ModStart> uint dblocks = xfs_attr3_rmt_blocks <S2SV_ModEnd> ( mp,",1
612,"<S2SV_ModStart>, sizeof ( pcount ) <S2SV_ModEnd> ) ; }",0
613,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) )",0
614,<S2SV_ModStart> ] == EOF || text [ 1 ] == 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 2 ] ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 3 ] ) <S2SV_ModEnd> ) return 0,1
615,"<S2SV_ModStart> && ( c + 1, sizeof ( c -> buf )",0
616,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { vpx_fdct16 <S2SV_ModEnd> ( input, <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
617,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! key_name ) {,0
618,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; fh_lock ( fh ) ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT <S2SV_ModEnd>, argp -> <S2SV_ModStart> argp -> acl_default ) ; out_drop_lock : fh_unlock ( fh ) ; <S2SV_ModEnd> fh_drop_write ( fh",1
619,<S2SV_ModStart> * ue ; if <S2SV_ModEnd> ( tree_root == <S2SV_ModStart> == NULL ) return 0,1
620,"<S2SV_ModStart> char * file, <S2SV_ModEnd> const char * <S2SV_ModStart>, fp ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) { tmp_filename = TEMP_FAILURE_RETRY ( filename <S2SV_ModStart> ) ) ; } <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if (!",0
621,<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) ; <S2SV_ModStart> > 0 ) { elen += pc -> lengthComponentIdent ; break ; } <S2SV_ModEnd> } if (,0
622,"<S2SV_ModStart> ( dp [ 4 <S2SV_ModEnd> ] ) ; <S2SV_ModStart> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> <%s>"", tok2str ( nfsv3_writemodes, NULL, EXTRACT_32BITS ( & dp [ 3 ] <S2SV_ModEnd> ) ) )",1
623,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ;,0
624,<S2SV_ModStart> ; if ( ( ctxt -> operands!= NULL ) ) <S2SV_ModEnd> ; if (,0
625,<S2SV_ModStart> ; bool slow <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ;,1
626,"<S2SV_ModStart> len ) { <S2SV_ModEnd> if (! <S2SV_ModStart> } while ( len ) { u_int pdu_len = <S2SV_ModEnd> rpki_rtr_pdu_print ( ndo <S2SV_ModStart> ( ndo, pptr, len, 1 <S2SV_ModEnd>, 8 ) <S2SV_ModStart>, 8 ) ; len <S2SV_ModEnd> -= pdu_len ; <S2SV_ModStart> -= pdu_len ; pptr <S2SV_ModEnd> += pdu_len ; <S2SV_ModStart> pdu_len ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
627,"<S2SV_ModStart> int tagval ; struct stream packet ; <S2SV_ModStart> length ) ; packet = * s ; <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> version <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } s_strdup ( token, length ) <S2SV_ModEnd> ; out_uint8p (",0
628,"<S2SV_ModStart> 0 ; int ip_offset ; u_int offset, max_offset ; if ( ( l = ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; max_offset = ( u_int ) ( cp - bp ) ; if ( ( i = * cp ++ ) & INDIR_MASK ) { if ( ( l = * cp < INDIR_MASK )!= INDIR_MASK ) { ND_PRINT ( ndo, NULL ) ; return ( NULL ) ; } if ( ( i = * cp < <S2SV_ModEnd> ndo -> ndo_snapend <S2SV_ModStart> ndo -> ndo_snapend ) { if ( i!= INDIR_MASK ) { if (! bp ) { if ( i = * cp & INDIR_MASK ) { if ( i = * cp & INDIR_MASK )!= INDIR_MASK ) { if ( i!= INDIR_MASK ) { ND_PRINT ( ( ndo, ""%s"", ""%s"", ""\\n"" ) ) ; return ( NULL ) ; } offset = offset ; if ( i & 0 ) { if",0
629,"<S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; error <S2SV_ModStart> = args -> rmtvaluelen <S2SV_ModEnd> ; while (",1
630,"<S2SV_ModStart> ) ; char * data = malloc ( data, sizeof ( data ) + 1",0
631,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> S_IWUSR ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; unlink",0
632,<S2SV_ModStart> & fstats -> fc_stats <S2SV_ModEnd> ) ; int,0
633,<S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1,0
634,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_set_str ( GITERR_NET, ""Invalid <S2SV_blank> empty <S2SV_blank> packet"" ) ; return GIT_ERROR <S2SV_ModEnd> ; } if",1
635,<S2SV_ModStart> ; if ( vma -> vm_flags & VM_SHARED ) return VM_FAULT_SIGBUS ; if (,1
636,<S2SV_ModStart> -> sasl_username ; <S2SV_ModEnd> if ( src -> sas,0
637,<S2SV_ModStart> env -> insn_aux_data ; int i <S2SV_ModStart> ) ) ; for ( i = off ; i < off + cnt - 1 ; i ++ ) new_data [ i ]. seen = true ;,1
638,<S2SV_ModStart> ; ND_TCHECK ( * dp <S2SV_ModEnd> ) ; if,1
639,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;,1
640,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
641,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorDecodeTile"", ""%s"", ""occ0%rowsize <S2SV_blank>!= <S2SV_blank> 0"" ) ; return 0 ; } <S2SV_ModEnd> assert ( sp <S2SV_ModStart> 0 ) { if (! <S2SV_ModStart>, rowsize ) ) return 0",1
642,"<S2SV_ModStart> size_t i ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ;",0
643,<S2SV_ModStart> ; if ( ctx -> terminated ||,1
644,<S2SV_ModStart> = NULL ; if ( sbi -> spool ) hugepage_put_subpool ( sbi -> spool ) ;,1
645,"<S2SV_ModStart>, O_ERR_open_file, O_RDONLY <S2SV_ModEnd> ) ; if",0
646,"<S2SV_ModStart> len ) { <S2SV_ModEnd> int res ; <S2SV_ModStart> - 1 ; size_t res ; size_t len ; size_t len ; <S2SV_ModStart> ( & len, <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( res ) ||! res ) { free ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> char *",0
647,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
648,"<S2SV_ModStart> ( ) ; iov_iter_advance ( i, copied ) ; <S2SV_ModStart> again ; } <S2SV_ModEnd> pos += copied",1
649,<S2SV_ModStart> unlikely ( len + ring -> frameoffset,1
650,<S2SV_ModStart> ; ) { <S2SV_ModEnd> return 0 ;,0
651,"<S2SV_ModStart> ( obj, <S2SV_ModEnd> name, data <S2SV_ModStart>, show_object, & base <S2SV_ModEnd>, path,",1
652,<S2SV_ModStart> ; return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
653,<S2SV_ModStart> src < zsize + ( sub_type!= 2 ) <S2SV_ModStart> bits ) { if ( src >= src_end ) return AVERROR_INVALIDDATA ;,1
654,<S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
655,<S2SV_ModStart> ; # endif MODE_TYPE_WRITE,0
656,,0
657,<S2SV_ModStart> timeri ) ; spin_lock ( & timeri -> lock ) ; <S2SV_ModStart> slave_active_list ) ; spin_unlock ( & timeri -> lock ) ; <S2SV_ModStart> slave_lock ) ; spin_unlock ( & timeri -> lock <S2SV_ModEnd> ) ; },0
658,<S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT,1
659,<S2SV_ModStart> -> cpu ; <S2SV_ModEnd> char * arch <S2SV_ModStart> * arch = strdup ( info -> cpu ) ; char * cpu = info -> cpu? strdup ( info -> cpu ) : NULL <S2SV_ModEnd> ; if <S2SV_ModStart> ; if ( <S2SV_ModEnd> cpu && * <S2SV_ModStart> cpu && * <S2SV_ModEnd> cpu,0
660,"<S2SV_ModStart> sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart>, * n <S2SV_ModEnd> ; list_for_each_entry (",1
661,<S2SV_ModStart> ps_dpb_commands ) { if ( ps_dec -> u4_total_mbs < 0 ) { return ERROR_SUCCESS ; } <S2SV_ModStart> ) ) ; },0
662,"<S2SV_ModStart> gint64 offset ; <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; offset <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! parse_netscreen_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> wth -> fh <S2SV_ModEnd>, & wth <S2SV_ModStart> wth -> frame_buffer, line",1
663,<S2SV_ModStart> 0 ) ; if ( <S2SV_ModStart>. seq_num ) < 0 ) return - 1,1
664,<S2SV_ModStart> ; uint32_t * info <S2SV_ModEnd> = gif ( <S2SV_ModStart> ; uint32_t * info,0
665,"<S2SV_ModStart> : ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = <S2SV_ModStart> == 0 ) ret = <S2SV_ModEnd> key -> type <S2SV_ModStart> type -> read ( key, buffer, buflen ) ; up_read <S2SV_ModEnd> ( & key <S2SV_ModStart> sem ) ; <S2SV_ModEnd> } error2 :",1
666,<S2SV_ModStart> ; if ( ret == NULL ) return ret ; if (,0
667,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",1
668,"<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - JAS_CAST ( jas_longlong <S2SV_ModEnd>, ( ( <S2SV_ModStart> : JAS_CAST ( jas_longlong <S2SV_ModEnd>, tmp )",1
669,<S2SV_ModStart> page ) ; rm -> atomic. op_active = 0 ;,1
670,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return ;,0
671,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
672,"<S2SV_ModStart> sizeof ( spath ) ) return - 1 ; if ( strstr ( name, "".."" ) || strchr ( name, '/'",1
673,<S2SV_ModStart>,0
674,"<S2SV_ModStart> -> bcache, cache_id ( <S2SV_ModStart> ] -> data )",1
675,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
676,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL ) )",1
677,<S2SV_ModStart> return 1 ; consume_skb ( skb ) ; return 0 <S2SV_ModEnd> ; } if,1
678,"<S2SV_ModStart>, msgnum ) ; memset ( msgnum, 0, sizeof ( msgnum ) ) ; <S2SV_ModStart> ) ; if ( msgnum >= MAX_MEM_SIZE ) return <S2SV_ModEnd> ; }",0
679,<S2SV_ModStart> ) ; goto out <S2SV_ModEnd> ; err = <S2SV_ModStart> out ; } out_unlock :,0
680,<S2SV_ModStart> ; if (! p ) return 0 ;,0
681,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> } if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if (",1
682,"<S2SV_ModStart> int read_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb ) <S2SV_ModStart> max = vpx_read_bit <S2SV_ModEnd> ( rb,",0
683,<S2SV_ModStart> 1 ) ; if ( strlen ( line ) == 0 ) return - 1 ;,1
684,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
685,<S2SV_ModStart> ++ ) { if ( band -> prec ) { <S2SV_ModStart> ) ; } } } },0
686,<S2SV_ModStart> < 0 ) { xmlFreeInputStream ( input ) ; return ; } <S2SV_ModEnd> if ( entity,1
687,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> & fl6, <S2SV_ModEnd> ) ; rcu_read_unlock ( <S2SV_ModStart> & fl6, <S2SV_ModEnd> ) ; if",0
688,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ) { return VP9_COMMON_COMP <S2SV_ModEnd> ; } } else <S2SV_ModStart> ) ) { return INSV_null> <S2SV_null>,0
689,"<S2SV_ModStart> ( u32 size, u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } <S2SV_ModEnd> return malloc ( <S2SV_ModStart> malloc ( size * num",1
690,<S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> { if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,1
691,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,1
692,<S2SV_ModStart> { buf2 <S2SV_ModEnd> ; } return,0
693,"<S2SV_ModStart> scn, root_storage <S2SV_ModEnd> ) ) <",1
694,<S2SV_ModStart> size_t size ; if ( info == NULL ) return NULL ;,0
695,<S2SV_ModStart> (! eof && vars -> str. c!= vars -> ptr,1
696,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
697,"<S2SV_ModStart> PERF_COUNT_SW_FAULTS, 1 <S2SV_ModEnd>, regs,",0
698,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc!= X86EMUL_CONTINUE ) break <S2SV_ModStart> case 4 : rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val )",1
699,"<S2SV_ModStart> url. name, sizeof ( url )",0
700,"<S2SV_ModStart> void * end <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; void * dbuf = NULL ; void * <S2SV_ModStart> struct ceph_x_key old_key ; void * ticket_buf = NULL <S2SV_ModStart>, end, end, & dbuf, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> out ; } tp = ticket_buf ; <S2SV_ModStart> ; out : kfree ( ticket_buf ) ;",0
701,"<S2SV_ModStart> ) ) ; if ( count > sizeof ( Pairs ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), ERRCODE_LIMIT_EXCEEDED ) )",0
702,<S2SV_ModStart> = 0 ; rq -> task = 0 ;,0
703,<S2SV_ModStart>,0
704,<S2SV_ModStart> ; r = sd -> fmode <S2SV_ModEnd> ; r =,0
705,<S2SV_ModStart> ; error = test_unsigned char * error <S2SV_ModEnd> ; error =,0
706,<S2SV_ModStart> NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_FIELD_REF,0
707,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
708,"<S2SV_ModStart>, body_type_comment, string type_comment ; string type_comment ; <S2SV_ModStart>, type_comment, type_comment <S2SV_ModStart>, type_comment, type_comment",0
709,"<S2SV_ModStart> err = 0 ; if (! net_eq ( current -> nsproxy -> net_ns, sock_net ( sk ) ) ) return - EINVAL",1
710,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
711,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
712,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
713,<S2SV_ModStart> -> rows = 1 <S2SV_ModEnd> ; image -> <S2SV_ModStart> ( BImgBuff ) <S2SV_ModEnd> ; break ;,1
714,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> == 0 ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,0
715,,1
716,<S2SV_ModStart> ; if ( <S2SV_ModEnd> mutex ) return,0
717,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> > <S2SV_null>,0
718,<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ioffset ) ; <S2SV_ModEnd> credits = ext4_writepage_unlocked_dio ( inode,0
719,<S2SV_ModStart> uint32_t midi_type ; uint32_t * track_size <S2SV_ModEnd> ; uint32_t track_size <S2SV_ModStart> ; uint32_t track_size <S2SV_ModEnd> ; uint32_t track_size <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> |= * midi_val <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> |= * midi_val <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> |= * midi_val <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> |= * midi_val <S2SV_ModStart> ( midi_val <S2SV_ModEnd> = * midi_val ; <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> |= * midi <S2SV_ModStart> } if ( midi_val <S2SV_ModEnd> == 0 ) <S2SV_ModStart> ( midi_val <S2SV_ModEnd> ) { _WM_GLOBAL_ERROR,0
720,"<S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val * <S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val *",1
721,<S2SV_ModStart> * bh ; unsigned int table_len ; <S2SV_ModStart> -> b_data ; table_len = le32_to_cpu ( lvd -> mapTableLength ) ; if ( sizeof ( * lvd ) + table_len > sb -> s_blocksize ) { udf_error = - 1 ; goto out_bh ; } <S2SV_ModStart> ; i < table_len <S2SV_ModEnd> ; i ++,0
722,"<S2SV_ModStart> long n ; image = 0 ; info = 0 ; <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> header\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> 1, ( ""BMP <S2SV_blank> info\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_CAST ( <S2SV_ModStart> info -> len ), JAS_CAST ( long <S2SV_ModStart> info -> len ), ( long <S2SV_ModEnd> info -> len ), JAS_CAST ( long <S2SV_ModStart> info -> width ), JAS_CAST ( long <S2SV_ModStart> info -> width ), JAS_CAST ( long <S2SV_ModStart> info -> width ), ( long <S2SV_ModStart> info -> width ), JAS_CAST ( long <S2SV_ModStart> info -> width ), JAS_CAST ( long <S2SV_ModStart> info -> width ), JAS_CAST ( long <S2SV_ModStart> info -> width ), JAS_CAST ( long <S2SV_ModStart> info -> numplanes ), JAS_CAST ( long <S2SV_ModStart> info -> numplanes ), JAS_CAST ( long <S2SV_ModStart> info -> width ), JAS_CAST ( long <S2SV_ModStart> info -> width ), JAS_CAST ( long <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModStart>",0
723,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
724,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
725,"<S2SV_ModStart> g_tv_comment, FILENAME_COMMENT, FILENAME_COMMENT",0
726,<S2SV_ModStart> p ) { return <S2SV_ModEnd> ; } <S2SV_null>,0
727,,0
728,"<S2SV_ModStart>, extent, height, <S2SV_ModStart> ""UnableToReadImageData"" ) ; <S2SV_ModEnd> height = sun_info <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( sun_info. type == RT_ENCODED ) <S2SV_ModStart> sun_data ) ; <S2SV_ModEnd> p = sun_pixels",0
729,"<S2SV_ModStart>, krb5_principal client_principal, const char * tgt_realm <S2SV_ModStart> principal ), tgt_realm <S2SV_ModEnd> ) ; if",1
730,<S2SV_ModStart> = MagickFalse ; break <S2SV_ModEnd> ; } image,0
731,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = ireq ->,1
732,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
733,"<S2SV_ModStart>!= 0 ) { int tend_off = skb_transport_offset ( skb ) + tlen ; <S2SV_ModStart> ( csum, skb_checksum ( skb, tend_off, <S2SV_ModEnd> offset, 0 <S2SV_ModStart> ) ) ; }",1
734,"<S2SV_ModStart> pfn ) ; kvm_unpin_pages ( kvm, pfn, page_size ) ; <S2SV_ModStart> base_gfn, gfn - slot -> base_gfn",1
735,<S2SV_ModStart> 0x00 } ; if ( cmd -> msg_len > sizeof ( b ) - 4 ) return - EINVAL ;,1
736,<S2SV_ModStart> event ) { struct perf_event_context * ctx ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
737,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> ; return ( <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> [ 3 ] ; return <S2SV_ModEnd> ( value & <S2SV_ModStart> & 0xffffffff ) <S2SV_ModEnd> ; } <S2SV_null>,0
738,"<S2SV_ModStart> free_nid * i, * e <S2SV_ModStart> ; int err = false ; int ret = - EINVAL ; <S2SV_ModStart> return false ; i -> state = __to_nid_nid_i -> nid ; i == NID_NEW ) { <S2SV_ModEnd> return false ; <S2SV_ModStart> return bool <S2SV_ModEnd> ; } <S2SV_null>",0
739,<S2SV_ModStart> flags ) ; <S2SV_ModEnd> return flags ;,0
740,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> ++ cons ; netbk_fatal_tx_err ( vif",0
741,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ;,1
742,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
743,<S2SV_ModStart>,0
744,"<S2SV_ModStart> = 0 ; ND_TCHECK2 ( * tptr, sizeof ( * tptr ) ) ;",0
745,<S2SV_ModStart> -> data ; unsigned <S2SV_ModStart> body -> unit_size || len < sizeof ( struct oz_multiple_fixed ) - 1 <S2SV_ModStart> ( len - ( <S2SV_ModStart> struct oz_multiple_fixed ) - 1 ) <S2SV_ModEnd> ) / body,1
746,<S2SV_ModStart> = 0 ; # if CONFIG_VP8_HIGHBITDEPTH # endif <S2SV_ModStart> = 0 ; # if CONFIG_HIGHBITDEPTH # if CONFIG_HIGHBITDEPTH # endif <S2SV_ModEnd> system_state ( <S2SV_ModStart> ) ) ; # if CONFIG_VP8_HIGHBITDEPTH # if CONFIG_HIGHBITDEPTH # endif <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH # if CONFIG_HIGHBITDEPTH # endif,0
747,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, <S2SV_ModEnd> dest, getuid <S2SV_ModStart> ( ), <S2SV_ModEnd> src,",0
748,<S2SV_ModStart> 0 ) { size_t <S2SV_ModEnd> status = 0,0
749,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
750,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext4_extent_header ) + sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_entries ) ; memset ( bh -> eh_size, 0, inode -> eh_size ) ;",0
751,<S2SV_ModStart> ; if ( ptr_hbe <S2SV_ModEnd> && (,0
752,<S2SV_ModStart> ; cmap_len = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> 0 x_origin = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; y_origin = get_tga_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; y_origin = get_tga_tga_ushort <S2SV_ModEnd> ( & tga,0
753,<S2SV_ModStart> ; ssize_t ret ; if ( WARN_ON_ONCE (! ib_safe_file_access ( skb ) ) ) return - EACCES,0
754,<S2SV_ModStart> == CPUCLOCK_SCHED ) * tp = ns_to_timespec <S2SV_ModEnd> ( cpu. <S2SV_ModStart> cpu. sched ) ; else <S2SV_ModEnd> cputime_to_timespec ( cpu <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
755,<S2SV_ModStart> ; uint32 nstrips <S2SV_ModEnd> ; nstrips =,1
756,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
757,"<S2SV_ModStart> int i ; lua_lua_module ( L, GFP_KERNEL * l, NULL ) ; <S2SV_ModStart> ; if ( ++ ) { ap_log_error ( APLOG_ERR, ""Bad <S2SV_blank> lua_info."" ) ; return APR_EINVAL ; } <S2SV_ModStart> 0 ; }",0
758,<S2SV_ModStart> ; int error = 0 <S2SV_ModStart> &= PAGE_MASK ; if ( address < mmap_min_addr ) return - EPERM <S2SV_ModEnd> ; prev =,1
759,"<S2SV_ModStart> { umode_t mode <S2SV_ModEnd> ; error = <S2SV_ModStart> ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart>, & mode, & acl <S2SV_ModStart> if ( error <S2SV_ModEnd> ) return error <S2SV_ModStart> return error ; <S2SV_ModEnd> error = xfs_set_mode",1
760,"<S2SV_ModStart>, int optional, const char * rootfs <S2SV_ModStart> endif if ( safe_mount <S2SV_ModEnd> ( fsname, <S2SV_ModStart> MS_REMOUNT, data, rootfs <S2SV_ModStart>, data ) < 0",1
761,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
762,"<S2SV_ModStart> it_overrun = - 1LL <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> info -> si_overrun = timer_overrun_to_int ( timr, info -> si_overrun ) <S2SV_ModEnd> ; } unlock_timer",1
763,"<S2SV_ModStart> ; if (! cp, c ->",0
764,<S2SV_ModStart> struct static_key * once_key <S2SV_ModEnd> ) { static <S2SV_ModStart> ; __net_random_once_disable_jump ( once_key <S2SV_ModEnd> ) ; return,1
765,"<S2SV_ModStart> -> actual ; int kiocb_has_eventfd = <S2SV_ModEnd> io_data -> read <S2SV_ModStart> ki_flags & IOCB_EVENTFD ; if ( io_data -> read && ret > 0 ) { ret = - EFAULT ; } io_data -> kiocb_has_eventfd = <S2SV_ModEnd> ( io_data -> <S2SV_ModStart>, & io_data -> data, ret <S2SV_ModEnd> ) ; if",0
766,<S2SV_ModStart> ; if ( IPCB ( skb ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> &&! opt,1
767,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
768,"<S2SV_ModStart> struct trusted_key_payload * p ; struct trusted_key_payload * new_p ; struct trusted_key_options * new_o ; size_t datalen = prep -> datalen ; char * datablob ; int ret = 0 ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ; <S2SV_ModStart> 0 ] ; <S2SV_ModEnd> if (!",1
769,"<S2SV_ModStart> v |= ( JAS_CAST ( uint_fast32_t, c ) <S2SV_ModEnd> << 24 )",1
770,<S2SV_ModStart> NULL ) { if ( skb -> len < ROSE_MIN_LEN ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> 2 ] ; if ( frametype == ROSE_CALL_REQ_ADDR_LEN_OFF || ( skb -> len <= ROSE_CALL_REQ_ADDR_OFF ) ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> -> data + ROSE_CALL_REQ_ADDR_ADDR_LEN_OFF <S2SV_ModEnd> ) ; l,0
771,<S2SV_ModStart> (! npages || base_gfn!= old. base_gfn,0
772,<S2SV_ModStart>,0
773,<S2SV_ModStart> = 0 ; size_t start_len ; <S2SV_ModStart> len ) goto end <S2SV_ModEnd> ; if (,0
774,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",1
775,"<S2SV_ModStart> } if ( data_body == NULL && in_bio == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT ) ; goto err ; } if ( <S2SV_ModStart> } if ( <S2SV_ModEnd> in_bio!= NULL <S2SV_ModStart>!= NULL ) <S2SV_ModEnd> { bio =",1
776,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) ; },0
777,"<S2SV_ModStart> } if ( options -> flags & ( UV_PROCESS_SETUID | UV_PROCESS_SETGID ) ) { SAVE_ERRNO ( setgroups ( 0, NULL ) ) ; } if (",1
778,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> EOPNOTSUPP ; } if ( rlen > MAX_XFER_SIZE ) { warn ( ""i2c <S2SV_blank> rd: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", rlen ) ; return - EOPNOTSUPP ; } <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> wlen ) ; <S2SV_ModEnd> ret = dvb_usb_generic_rw <S2SV_ModStart> + wlen, st -> data <S2SV_ModEnd>, rlen, <S2SV_ModStart> rlen, 0 ) ; if (! ret && rbuf && rlen ) memcpy ( rbuf, st -> data, rlen",1
779,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> if ( client,0
780,<S2SV_ModStart> book -> dim && i < n,1
781,"<S2SV_ModStart> * r, memset ( b ) ;",0
782,<S2SV_ModStart> == - EEXIST || ret == - EOVERFLOW,1
783,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; BUG_ON <S2SV_ModStart> unix_tot_inflight -- ; } fp -> f_cred -> user -> unix_inflight -- ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
784,"<S2SV_ModStart> size_t chanmap_size = SF_MIN ( <S2SV_ModStart> sf. channels, layout_tag & 0xffff )",1
785,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> sf.,0
786,<S2SV_ModStart> ms ) { uint32_t <S2SV_ModEnd> nestsize = ( <S2SV_ModStart> nestsize = ( uint32_t <S2SV_ModEnd> ) ms ->,1
787,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
788,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
789,<S2SV_ModStart> -> xrefs = safe_calloc ( <S2SV_ModEnd> sizeof ( xref_t,1
790,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
791,"<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ) <S2SV_ModStart> ( opt ) { atomic_sub ( <S2SV_ModEnd> opt -> tot_len <S2SV_ModStart> opt -> tot_len, & sk -> sk_omem_alloc ) ; txopt_put ( opt <S2SV_ModStart> ) ; } }",1
792,"<S2SV_ModStart>, * tmpout = NULL, * tmpout <S2SV_ModStart> = dcont ; if (! ( flags & SMIME_BINARY ) && dcont ) { tmpout = cms_get_text_data ( cms, flags ) ; if (! tmpout ) { CMSerr ( CMS_F_CMS_TEXT ) ; goto err ; } else { CMSerr ; } <S2SV_ModStart> = CMSerr ; } <S2SV_ModEnd> if (",0
793,<S2SV_ModStart> ; if ( <S2SV_ModEnd> opt -> sk,0
794,<S2SV_ModStart> sctp_v4_net_ops ) ; struct sctp_v4_dev_net * sctp_dev ; <S2SV_ModStart> ; sctp_v4_ipv4_destroy <S2SV_ModEnd> ( & <S2SV_ModStart> ) ; } sctp_v4_ipv4_destroy <S2SV_ModEnd> ( & sctp_dev,0
795,<S2SV_ModStart> cs_flags ) ; hook_del_user_nick = NULL ;,0
796,"<S2SV_ModStart> ) { struct in_device * idev <S2SV_ModEnd> = ( ( <S2SV_ModStart> ) -> ifa_dev <S2SV_ModEnd> ; struct netdev_notifier_info <S2SV_ModStart> netdev_notifier_info info ; if ( idev -> dead ) return NOTIFY_DONE ; <S2SV_ModStart> & info, idev ->",1
797,<S2SV_ModStart>,0
798,<S2SV_ModStart> ( void stream -> pnr <S2SV_ModEnd> ) {,0
799,<S2SV_ModStart> val ) { char * temp_size = malloc ( temp_size ) <S2SV_ModEnd> ; char *,0
800,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
801,<S2SV_ModStart> ( name_name = safe_calloc <S2SV_ModEnd> ( strlen (,0
802,<S2SV_ModStart> =,0
803,<S2SV_ModStart> object + size < * object || * object + size <S2SV_ModStart>,0
804,"<S2SV_ModStart> ( interface, KSZ8851_CMD1, interface ) ; ksz8851WriteReg ( interface, KSZ8851_CIDR1 <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, KSZ8851_CIDR1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851WriteReg ( interface, KSZ8851_PCIR, KSZ8851_MAADR1 <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_R1 <S2SV_ModEnd> ) ; }",0
805,<S2SV_ModStart> all_channels_lock ) ; put_net ( pch -> chan_net ) ; pch -> chan_net = NULL ;,1
806,"<S2SV_ModStart> btrfs_dir_item * di = NULL <S2SV_ModStart> ; if ( flags & XATTR_REPLACE ) { di = - ENODATA ; if ( flags & XATTR_REPLACE ) { di = btrfs_lookup_xattr ( trans, root, root, root, root_ino ( inode ), name_len, - 1 ) ; if (! di && <S2SV_ModEnd> ( flags & <S2SV_ModStart> & XATTR_REPLACE ) ) ret = - ENODATA ; if ( flags & XATTR_REPLACE ) ret = - ENODATA ; else if ( flags & XATTR_REPLACE ) ret = - ENODATA ; else if ( flags & XATTR_REPLACE ) ret = btrfs_xattr ( inode -> i_ino ( inode, path, name_len, name_len, 0 ) ) ; else if (! di && <S2SV_ModEnd> ( flags & <S2SV_ModStart> & XATTR_REPLACE ) ) ret = - ENODATA ; if (! di ) ret = - ENODATA ; else <S2SV_ModEnd> if (! <S2SV_ModStart> out ; } ret = 0 ;",0
807,"<S2SV_ModStart> count ) ; char * txt = op -> txt ; int txtLen = strlen ( op -> txt ) ; int txtLeft = R_ASM_BUFSIZE - txtLen ; txt += txtLen ; <S2SV_ModStart> < count && txtLen <S2SV_ModEnd> + 10 < <S2SV_ModStart> ++ ) { snprintf ( txt, txtLeft <S2SV_ModEnd>, ""%d <S2SV_blank> "", <S2SV_ModStart> ] ) ; txtLen = strlen ( txt ) ; txt += txtLen ; txtLeft -= txtLen ; <S2SV_ModStart> } snprintf ( txt, txtLeft - 1 <S2SV_ModEnd>, ""%d"",",0
808,"<S2SV_ModStart> client -> proxy ) ; g_byte_array_free ( client -> auth_buffer, TRUE",1
809,"<S2SV_ModStart> = get_plane <S2SV_ModEnd> ( xd,",0
810,<S2SV_ModStart> ; if ( key_is_negative ( key <S2SV_ModEnd> ) ) return,1
811,<S2SV_ModStart> ) { goto out_len ; } if ( unlikely ( t + 1 ) > ( unsigned long ) ) { goto out_pos ; } if (,0
812,<S2SV_ModStart> ( fit_name ) ; <S2SV_ModEnd> if ( fit <S2SV_ModStart> 0 ) { return - EINVAL ; },0
813,<S2SV_ModStart> { vpn_packet_t outpkt ; if ( len > sizeof outpkt. data ) return,1
814,<S2SV_ModStart> vmx_vpid_bitmap ) ; <S2SV_ModEnd> for ( msr <S2SV_ModStart> 0x83f ) ; <S2SV_ModEnd> if ( enable_ept,1
815,"<S2SV_ModStart>, j ) int vdaux = verdef -> vd_aux ; if ( vdaux < 1 ) { sdb_free ( sdb_verdef ) ; goto out_error ; } vstart += vdaux <S2SV_ModEnd> ; if (",0
816,"<S2SV_ModStart> * uinput = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, uinput ) )",0
817,<S2SV_ModStart> 1 ; const VP9EncoderConfig <S2SV_ModEnd> * rc = <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> - 1 ;,0
818,<S2SV_ModStart> ; if ( safe_long (,0
819,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
820,<S2SV_ModStart> INDENT_INCR ; } if ( tbl -> indent < 0 ) tbl -> indent = 0 ; <S2SV_ModStart> -= INDENT_INCR ; if ( offset < 0 ) offset = 0 ;,1
821,"<S2SV_ModStart> + tail ; size_t ss = sst -> sst_dirlen < h -> h_max_size_standard_stream? CDF_SEC_SIZE ( h ) : CDF_SEC_SIZE ( h ) ; <S2SV_ModStart> b ) <= ss <S2SV_ModEnd> * sst -> <S2SV_ModStart> b ), ss <S2SV_ModEnd> * sst -> <S2SV_ModStart> b ), ss <S2SV_ModEnd>, sst ->",0
822,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""hex_grammar.y"" { RE_AST <S2SV_ModStart> } # line 1337 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 137 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 147 <S2SV_ModEnd> ""hex_grammar.c"" { incr_ast_levels ( <S2SV_ModStart> } # line 1455 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> } # line 1247 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1455 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 940 <S2SV_ModEnd> ""hex_grammar.c"" { incr_ast_levels ( <S2SV_ModStart> } # line 1455 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1455 <S2SV_ModEnd> ""hex_grammar.c"" { incr_ast_ast_levels ( <S2SV_ModStart> } # line 1424 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> ( ) ; <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1432 <S2SV_ModEnd> ""re_grammar.y"" { incr_ast_ast_ast_levels ( <S2SV_ModStart> ( ) ; <S2SV_ModEnd> ( yyval. <S2SV_ModStart> : # line 1455 <S2SV_ModEnd> ""hex_grammar.c",0
823,<S2SV_ModStart>,0
824,"<S2SV_ModStart> ; memset ( 2,",0
825,<S2SV_ModStart> ; if ( key_is_positive ( key <S2SV_ModEnd> ) ) zap,1
826,"<S2SV_ModStart> ) -> filter ; memset ( & uf, 0, sizeof ( uf ) )",1
827,<S2SV_ModStart>,0
828,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; } exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
829,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
830,<S2SV_ModStart>,0
831,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( cc0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorEncodeTile"", ""%s"", ""(cc0%rowsize)!=0"" ) ; return 0 ; } <S2SV_ModEnd> while ( cc",1
832,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
833,"<S2SV_ModStart> input_data, size_t input_forwards_size, size_t input_forwards_size, size_t input_forwards_size <S2SV_ModEnd>, int flags <S2SV_ModStart> >= max_bytes_matched ) { if ( ( max_bytes_matched >= max_bytes_matched ) || ( max_bytes_matched > max_bytes_matched ) || ( input + 1 > max_bytes_matched ) || ( input + 1 > max_bytes_matched ) || ( input + 1 > max_bytes_matched ) ) { <S2SV_ModStart> ( * input_backwards_size <S2SV_ModEnd> ) { <S2SV_ModStart> = TRUE ; } } } } else { <S2SV_ModStart> RE_SCAN_SCAN_SCAN_SCAN_SCAN_LIMIT ; } <S2SV_ModStart> < max_bytes_matched ) { if ( ( input_bytes_matched >= max_bytes_matched ) ) { <S2SV_ModStart> = TRUE ; } <S2SV_ModStart> RE_SCAN_SCAN_SCAN_SCAN_LIMIT ; } else { <S2SV_ModStart> RE_SCAN_SCAN_SCAN_SCAN_SCAN_SCAN_SCAN_SCAN_SCAN_LIMIT ; } <S2SV_ModStart> = TRUE ; }",0
834,<S2SV_ModStart> * best_rd = UINT64_MAX <S2SV_ModEnd> ; #,0
835,"<S2SV_ModStart> svm, AC_VECTOR ) ; set_exception_intercept ( svm, DB_VECTOR",0
836,<S2SV_ModStart> ; if ( h -> flags & 0 ) {,0
837,"<S2SV_ModStart> sst, const cdf_directory_t * root_storage <S2SV_ModEnd> ) { cdf_summary_info_header_t <S2SV_ModStart> break ; } if ( root_storage ) { <S2SV_ModStart> = cdf_clsid_to_mime ( root_storage -> d_storage_uuid <S2SV_ModEnd>, clsid2desc ) <S2SV_ModStart> - 2 ; } <S2SV_ModStart>, count, root_storage <S2SV_ModEnd> ) ; free",1
838,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> i1_seq_pic_id = &,0
839,<S2SV_ModStart> -> length ) ; if ( err ) return - EFAULT,1
840,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ; Vpx_CODEC_PARAM ; if ( ctx -> svc. layer_id == NULL ) return VPX_CODEC_OK <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( ctx -> svc. gf_layer_id <S2SV_ModEnd> ) return VPX_CODEC_PARAM ; } else if <S2SV_ModStart> ( ctx -> svc. lld_idx <S2SV_ModEnd> == NULL ) return VPX_CODEC_PARAM ; <S2SV_ModStart> ( ctx -> <S2SV_ModEnd> ) { VPX_CODEC_OK <S2SV_ModStart> = VPX_CODEC_OK ; } <S2SV_ModStart> ; if ( <S2SV_ModEnd> ) return VPX_CODEC_OK <S2SV_ModEnd> ; } <S2SV_null>",0
841,<S2SV_ModStart> if ( next && <S2SV_ModEnd> ( fhdr. <S2SV_ModStart> > 0 ) goto discard_fq ;,0
842,<S2SV_ModStart> { uint16 bitspersample = 1,0
843,"<S2SV_ModStart> -> st ; int status ; <S2SV_ModStart> == 0 ) { if (! archive_set_error ( & a -> name, ARCHIVE_ISPATHS ) ) { archive_set_error ( & a -> archive, ARCHIVE_WARN ) ; } else { archive_set_error ( & a -> path [ 0 ], ARCHIVE_WARN ) ; } else { archive_set_error ( & a -> archive, ARCHIVE_WARN ) ; } else { archive_set_error ( & a -> archive, ARCHIVE_REPLACE ) ; } if ( <S2SV_ModStart> == NULL ) { archive_set_error ( & a -> status <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( & a -> name <S2SV_ModEnd> ) ; } else",0
844,"<S2SV_ModStart> ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL, rootfs -> path? rootfs -> mount : <S2SV_ModEnd> NULL )!=",1
845,"<S2SV_ModStart> * bbh ; struct udf_data <S2SV_ModEnd> * addr ; <S2SV_ModStart>, & iinfo -> iinfo. len <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= NULL ) <S2SV_ModEnd> goto out ; <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if (!",0
846,<S2SV_ModStart> = get_uv_size <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ) { memset <S2SV_ModEnd> ( wfm ->,0
847,"<S2SV_ModStart> dst_size ) { GetBytes ( & gb <S2SV_ModEnd>, name, <S2SV_ModStart> ; if ( data ++ <S2SV_ModEnd> data >= data_size <S2SV_ModStart> - 1 ; return - <S2SV_ModEnd> ; } <S2SV_null>",0
848,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
849,<S2SV_ModStart> mq_ops ) ; q -> mq_ops = NULL ;,0
850,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
851,<S2SV_ModStart> ; return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
852,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; if (! <S2SV_ModStart>, cc ) ) return 0 <S2SV_ModStart> wc ) ; return 1 ;",1
853,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
854,"<S2SV_ModStart> ; int err ; struct ip_options_rcu * inet_opt <S2SV_ModStart> ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, 0 ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr )",0
855,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
856,"<S2SV_ModStart> * mgr_hdl ; <S2SV_ModEnd> memset ( s_path <S2SV_ModStart> ( c_path ) <S2SV_ModEnd> ) ; switch <S2SV_ModStart> ( c_path, ""%s%s%d_C_XXXXXX"" <S2SV_ModEnd>, HSM_FM_SCK_PREFIX, <S2SV_ModStart> hdl -> instance <S2SV_ModEnd> ) ; if",1
857,<S2SV_ModStart> == NULL || replySize == NULL || <S2SV_ModStart> ) || pCmdData == NULL || replySize,0
858,"<S2SV_ModStart> ""`%s\'"", option ) ; page_geometry = DestroyString ( page_geometry",1
859,<S2SV_ModStart> ; if ( <S2SV_ModEnd> opt -> sk,0
860,"<S2SV_ModStart>, key_data, n_keys <S2SV_ModEnd> ) ; if",0
861,"<S2SV_ModStart> OP_ENDCATCH ) ; emit ( J, F, OP_ENDTRY ) ;",1
862,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_row_idx <S2SV_ModStart> return ; } LIBXSMM_ASSERT ( 0!= l_row && 0!= l_column ) ;",1
863,<S2SV_ModStart> 0 ) ; if ( len > sizeof ( * ) ) { <S2SV_ModStart> 0 ) ; },0
864,"<S2SV_ModStart> uint8 result ; uint32 <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> ; STREAM s ; struct stream packet <S2SV_ModStart> return False ; packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> id <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",1
865,"<S2SV_ModStart> ; cleanup : if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> ; if (",1
866,<S2SV_ModStart> l == 0 && len,0
867,<S2SV_ModStart> ; if ( ret < 0 ) return - EINVAL ;,0
868,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
869,<S2SV_ModStart> & new_map ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> lower_first ; } ret = sort_idmaps ( & new_map ) ; if ( ret < 0 ) goto out ;,1
870,<S2SV_ModStart> } else { if ( len > 0 ) return - 1 ;,0
871,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> ) ; } smb_ofile_flush ( sr, <S2SV_ModEnd> sr -> fid_ofile <S2SV_ModStart> sr -> fid_ofile <S2SV_ModEnd> ) ; (",1
872,<S2SV_ModStart> ; size_t dataptr ; jas_uchar <S2SV_ModEnd> ( &,0
873,"<S2SV_ModStart> + 1 ) { memcpy <S2SV_ModEnd> ( pbi, <S2SV_ModStart> 8 ) ; memcpy <S2SV_ModEnd> ( pbi,",0
874,"<S2SV_ModStart> addrtype = TIPC_ADDR_ID ; memset ( & addr -> addr, 0, sizeof ( addr -> addr ) )",1
875,"<S2SV_ModStart> ( user_alloc && ( <S2SV_ModStart> PAGE_SIZE - 1 ) ) ||! access_ok ( VERIFY_WRITE, mem -> userspace_addr, mem -> memory_size",1
876,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
877,<S2SV_ModStart> } if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; } } \\\n} <S2SV_ModEnd> if ( strncasecmp,1
878,<S2SV_ModStart> u ) { size_t <S2SV_ModEnd> p ; char <S2SV_ModStart> * p ; <S2SV_ModEnd> if (! <S2SV_ModStart> * p ) { return NULL ; } * p = buf ; <S2SV_ModStart> ) ; } if (! p ) return NULL ; <S2SV_ModStart> ; if (! p ) return NULL ;,0
879,<S2SV_ModStart> { if (,0
880,"<S2SV_ModStart> WaveHeader WaveHeader ; int format_chunk = 0 ; <S2SV_ModStart>, format ; if ( format_chunk ++ ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",1
881,<S2SV_ModStart> ; uint32_t sampleRate = 0 <S2SV_ModStart> config -> num_channels ||! config -> sample_rate,1
882,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ;,0
883,<S2SV_ModStart> flags ) ; spin_unlock_init ( & timeri -> ack_list ) ;,0
884,<S2SV_ModStart> * st ; <S2SV_ModEnd> char * st <S2SV_ModStart> = 0 ; char * cp = 0 ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> strchr ( st,0
885,<S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_flags_compat &&,1
886,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
887,"<S2SV_ModStart> ; if ( strcmp ( sub_demuxer -> name, ""srt"" ) && strcmp ( sub_demuxer -> name, ""ass"" ) ) goto error ; if (",1
888,<S2SV_ModStart> ; int ret = 0 <S2SV_ModStart> data ) ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } if (,0
889,"<S2SV_ModStart> int test_bit_literal <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
890,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
891,<S2SV_ModStart> dptr ++ = ROSE_CALL_REQ_ADDR_LEN_VAL <S2SV_ModEnd> ; memcpy (,1
892,<S2SV_ModStart> = new_ns ; new_ns -> mounts ++ ;,1
893,<S2SV_ModStart> ; } } memset <S2SV_ModEnd> ( cpi ->,0
894,<S2SV_ModStart> ; zip_object_handlers. get_gc = php_zip_get_gc ; zip_object_handlers.,1
895,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : return <S2SV_ModEnd> 0 ; default,0
896,"<S2SV_ModStart> = 0 ; ND_TCHECK2 ( * dp, sizeof ( * ni6 ) ) ; <S2SV_ModStart> ) + 4 ; ND_TCHECK ( cp [ 0 ] )",1
897,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
898,<S2SV_ModStart> sent = 0 <S2SV_ModEnd> ; smb_msg.,1
899,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; if ( ref -> ref > INT_MAX / 2 ) return false ; <S2SV_ModStart> ref ++ ; return true ;,1
900,<S2SV_ModStart> fs -> clusters + <S2SV_ModEnd> 1 ) get_fat,1
901,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
902,<S2SV_ModStart> sk_nulls_node ) ; sk_nulls_node_init ( & sk -> sk_nulls_node ) ;,1
903,<S2SV_ModStart> } } } <S2SV_ModEnd> } else {,0
904,<S2SV_ModStart> (! mm ||! mm -> env_end,1
905,"<S2SV_ModStart> inode * inode, int relocated ) { int flags = relocated? RR_DE : 0 ; <S2SV_ModEnd> int result = <S2SV_ModStart>, inode, flags <S2SV_ModEnd> ) ; }",0
906,<S2SV_ModStart> * inotify_new_group ( <S2SV_ModEnd> unsigned int max_events <S2SV_ModStart> -> inotify_data. user = NULL <S2SV_ModEnd> ; group -> <S2SV_ModStart> -> inotify_data. user = inotify_new_group ( <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> inotify_data. user -> inotify_data. user -> inotify_devs ) { group = NULL ; } <S2SV_ModEnd> return group ->,0
907,<S2SV_ModStart> [ p ] && in -> linesize [ p ],1
908,"<S2SV_ModStart>, sizeof ( pcount ) <S2SV_ModEnd> ) ; }",0
909,<S2SV_ModStart> ( screen ) ; if ( screen -> buffer == NULL ),0
910,"<S2SV_ModStart> SCALAR_VALUE ) { coerce_reg_to_size ( & <S2SV_ModStart> [ value_regno ], size <S2SV_ModEnd> ) ; }",1
911,<S2SV_ModStart> = 0 ; uint32 nstrips <S2SV_ModEnd> = 0 ;,0
912,<S2SV_ModStart> base_name ) ; char need_to_append_dot ; struct search_domain * dom ; if (! base_len ) return NULL ; <S2SV_ModEnd> need_to_append_dot = base_name <S2SV_ModStart> : 1 ; <S2SV_ModEnd> for ( dom,1
913,"<S2SV_ModStart> ; err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay, 0 )",0
914,<S2SV_ModStart> out ; } <S2SV_ModEnd> if (!,0
915,"<S2SV_ModStart> number_planes_filled, number_planes_filled, number_planes_filled <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ; pixel_info =",0
916,<S2SV_ModStart> <S2SV_,0
917,<S2SV_ModStart> policy ) { if (! inode_capable ( inode ) ) return - EACCES ;,0
918,"<S2SV_ModStart> ( value, <S2SV_ModEnd> ( value ) ;",0
919,"<S2SV_ModStart>. match_data, & key_len",0
920,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
921,"<S2SV_ModStart> ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> to <S2SV_blank> %s"", __func__, header ) ; pool_failed ( pool ) ; return false ; } <S2SV_ModEnd> if (",0
922,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, length, length )",0
923,"<S2SV_ModStart> size ) { size_t res ; if ( check_mul_overflow ( num, size, & res ) ) abort ( ) ; <S2SV_ModEnd> ptr = malloc <S2SV_ModStart> = malloc ( res <S2SV_ModEnd> ) ; if",0
924,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ioc <S2SV_ModStart> ) ; },0
925,"<S2SV_ModStart> args ) { Py_RETURN_NONE <S2SV_ModEnd> ; res <S2SV_ModStart> ( ( PyId_type, type <S2SV_ModEnd> ) ; if",0
926,<S2SV_ModStart> dev ) ; if (! desc -> bLength ) return 0,0
927,"<S2SV_ModStart> int ret ; struct perf_event_context * ctx ; int ret ; <S2SV_ModStart> 0 ) { ret = perf_event_ctx_init ( event, arg, arg, <S2SV_ModEnd> ) ; break",0
928,<S2SV_ModStart> sacked_out ) ; if ( newly_acked_sacked <= 0 || WARN_ON_ONCE (! tp -> prior_cwnd ) ) return ;,1
929,<S2SV_ModStart> <S2SV_null>,0
930,<S2SV_ModStart> mask ) { <S2SV_ModEnd> return 0 ;,0
931,<S2SV_ModStart> ; if ( ( __func_len < <S2SV_ModEnd> ) return -,0
932,"<S2SV_ModStart> c -> tile_width <S2SV_ModEnd>, 16 ) <S2SV_ModStart>, 16 ) * 3",1
933,"<S2SV_ModStart> ) ; } if (! <S2SV_ModEnd>, key, <S2SV_ModStart>, sizeof ( key ) ) ) ;",0
934,,1
935,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
936,"<S2SV_ModStart> p ) { return <S2SV_ModEnd> chdlc_print ( ndo <S2SV_ModStart>, p, h -> len <S2SV_ModEnd> ) ; }",1
937,<S2SV_ModStart> (! rc <S2SV_ModEnd> && tcon ),1
938,<S2SV_ModStart> -> len && SKB_EXT_ERR ( skb ) -> opt_stats <S2SV_ModEnd> ) put_cmsg (,1
939,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ) ;",1
940,<S2SV_ModStart> { if (! SSL_C_GET_CERTIFICATE <S2SV_ModEnd> ) { al,0
941,<S2SV_ModStart> { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE ) { return SECURE_ELEMENT_ERROR_BUF_SIZE,1
942,<S2SV_ModStart> + 1 ; if ( iframe -> max_niv ;,0
943,<S2SV_ModStart> = ucounts ; new_ns -> mounts = 0 ; new_ns -> pending_mounts = 0 ;,1
944,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
945,<S2SV_ModStart> x86_pmu_enabled <S2SV_ModEnd> ; if (,0
946,<S2SV_ModStart>,0
947,<S2SV_ModStart> ; u32 time_count <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { return ; } else,0
948,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
949,"<S2SV_ModStart> void vp9_writer * const vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> t ) { const vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> t ) ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> = 0 ; vpx_prob <S2SV_ModEnd> i ; }",0
950,"<S2SV_ModStart> skb ) ; struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ; <S2SV_ModStart> wb_buffer ) ; struct vpx_wb_write_bit <S2SV_ModEnd> * wb ; <S2SV_ModStart> wb_buffer ) ; vpx_wb_write_bit <S2SV_ModEnd> ( & wb <S2SV_ModStart> = 0 ; vpx_wb_write_bit <S2SV_ModEnd> ( & wb, <S2SV_ModStart> write_bit <S2SV_ModEnd>, 16 ) ;",0
951,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
952,"<S2SV_ModStart> ret, n ; int num_descriptors ; size_t offset = sizeof ( struct hid_descriptor ) <S2SV_ModStart> ; n < num_descriptors <S2SV_ModEnd> ; n ++",0
953,"<S2SV_ModStart> int idid_len, id_len <S2SV_ModStart> ; ND_TCHECK ( * id_len ) <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> ; ND_TCHECK2 ( * id_len )",0
954,"<S2SV_ModStart> group_dead ) ; if ( group_dead ) exit_io ( ) ; group_context ( ) ; group_dead_exit ( ) ; if ( group_exit ( ) ; exit_io ( ) ; exit_sem ( ) ; exit_sem ( ) ; exit_sem ( tsk, group_dead ) ; # endif <S2SV_ModStart> ) ; exit_sem ( <S2SV_ModEnd> group",0
955,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> data ) { <S2SV_ModEnd> add_preferred_base_object ( name <S2SV_ModStart> |= OBJECT_ADDED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
956,<S2SV_ModStart> ; if ( cmptpages < 0 ) { goto error ; } if (,0
957,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
958,<S2SV_ModStart>,0
959,<S2SV_ModStart> ( tag == ASN1_EOC <S2SV_ModEnd> ) { if <S2SV_ModStart> <= 0x7f ) goto check_length ; <S2SV_ModEnd> if ( unlikely,0
960,<S2SV_ModStart> ) val ; <S2SV_ModEnd> memset ( ptr,1
961,<S2SV_ModStart> mntent ) { return NULL ; },0
962,"<S2SV_ModStart> PHP_SHA512_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_SHA256_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_CTX context ; if ( sig_len < sizeof ( digest ) ) { read_size = sizeof ( error ) ; } return FAILURE ; }",0
963,<S2SV_ModStart> ] <= max && value [ n ] - min < field -> maxusage <S2SV_ModStart> && field -> value [ n ] - min < field -> maxusage && field -> <S2SV_ModStart> <= max && value [ n ] - min < field -> maxusage &&,1
964,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
965,<S2SV_ModStart> if ( argReg > <S2SV_ModEnd> regsz ) { <S2SV_ModStart> regsz ) { return ;,1
966,"<S2SV_ModStart> ( req ) ; rb_hash_assert ( req_name ( req, ""client"" ) ;",0
967,"<S2SV_ModStart> 0 ) ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> -> i_mount, args -> rmtvaluelen <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; return 0 <S2SV_ModStart> -> valuelen < args -> rmtvaluelen ) { args -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; return XFS_ERROR <S2SV_ModStart> -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; } return",1
968,<S2SV_ModStart> size_t size ; if ( info == NULL ) return NULL ;,0
969,"<S2SV_ModStart> ; # endif TEMP_FAILURE_RETRY ( <S2SV_ModStart> ), mysql_result <S2SV_ModEnd> ) ; #",0
970,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) &&! test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) &&",1
971,"<S2SV_ModStart> ) ) ; if ( LTXTQUERY_TOO_BIG ( state. num, state. sumlen ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""ltxtquery <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ) ) ;",1
972,<S2SV_ModStart> int i ; size_t end ; <S2SV_ModStart> ) ) { if ( screen!= 0 ) continue ; } if (,0
973,<S2SV_ModStart> ; if (! EXT4_SB ( inode -> i_sb ) -> s_journal <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd>! handle ),1
974,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 0 ) { if ( strlen ( str ) > 0 ) return - 1 ;,0
975,"<S2SV_ModStart> ( f, ""PG%31[ <S2SV_blank> \\t]%31[ <S2SV_blank> \\t ] <S2SV_ModEnd>, temp,",0
976,"<S2SV_ModStart> ( size < 5 + 1 <S2SV_ModEnd> ) ASSERT ( <S2SV_ModStart> ) ; } for ( size = 0 ; size < 8 ; size ++ ) { size_t length ; char * result ; memset ( buf, 0, 8 ) ; size = free ( result ) ; }",0
977,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( cr ->,0
978,"<S2SV_ModStart> len ) { strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len, ""ID <S2SV_blank> STRING"" ) ; return <S2SV_ModStart> 0 ) ; } else { if ( strlen ( str, len ) == LEXCEEDED ) { jas_printf ( str, JEXCEEDED ) ; return ; } <S2SV_ModStart> 0 ) ; } else { strcpy ( str, len, len, len, len ) ; }",0
979,"<S2SV_ModStart> char * to = g. inf, * sufx = """" ; size_t pre = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> = len + strlen ( <S2SV_ModEnd> g. inf ) <S2SV_ModStart> = strlen ( to ) ; if ( <S2SV_ModEnd> ( g. <S2SV_ModStart> g. inf ) == 0 ) sufx = justname ( <S2SV_ModEnd> g. hname <S2SV_ModStart>",0
980,,1
981,"<S2SV_ModStart> * output ; MagickBooleanType status ; <S2SV_ModStart> ) ; } status = MagickTrue ; <S2SV_ModStart> i ++ ) { <S2SV_ModEnd> input = fopen_utf8 <S2SV_ModStart> output ) ) if ( fputc ( ( c, output )!= c ) return ( MagickFalse ) ; <S2SV_ModStart> ( void ) fclose ( input <S2SV_ModEnd> ) ; }",0
982,<S2SV_ModStart> * si ; SvcInternal_t <S2SV_ModEnd> * const si,0
983,"<S2SV_ModStart> ( sb,",0
984,"<S2SV_ModStart> passwd * pwd, const char * prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> & tmpname, ""/etc"", prefix <S2SV_ModEnd> ) ) ==",1
985,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
986,"<S2SV_ModStart> ( s1, sizeof ( s2 ) <S2SV_ModEnd> ) ; return",0
987,"<S2SV_ModStart> TRUE ; } Jid * my_jid = jid_get_from ( stanza_from ) ; Jid * const stanza_create ( stanza_from = xmpp_get_from ( stanza ) ; Jid * msg_jid = jid_create ( stanza_from ) ; if ( g_strcmp0 ( my_jid -> barejid, msg_jid -> barejid )!= 0 ) { log_warning ( ""Invalid <S2SV_blank> received <S2SV_blank> from: <S2SV_blank> %s"", stanza_from ) ; return TRUE ; } <S2SV_ModStart> jid_create ( from, msg_from <S2SV_ModEnd> ) ; char",0
988,<S2SV_ModStart> ; } } <S2SV_ModEnd> if ( server.,0
989,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
990,"<S2SV_ModStart> ( cmd, ""%s"", get_global_options ( cmd, NULL,",0
991,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; BT_DBG (,1
992,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
993,<S2SV_ModStart> -> pbs <S2SV_ModEnd> ; if (,0
994,<S2SV_ModStart> = 1 ; <S2SV_ModEnd> ps_dec -> u4_total_height,0
995,<S2SV_ModStart> * zone ; size_t tilemap_size ; <S2SV_ModStart>. height ; tilemap_size = <S2SV_ModEnd> x_size * y_size <S2SV_ModStart> struct map_tile ) ; if ( x_size == 0 || tilemap_size / x_size / sizeof ( struct map_tile )!= y_size ||! ( tilemap = malloc ( tilemap_size,1
996,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ; return ( 0 ) <S2SV_ModStart>, length ) ) ; ND_TCHECK ( cp [ 2 ] <S2SV_ModStart> 4 ) { ND_TCHECK2 ( cp [ len ], 4 ) ; <S2SV_ModStart> ) ; } return ( 0 ) ; trunc : return ( - 1 ) ;",1
997,"<S2SV_ModStart> char * item, const char * item ) { return NULL ; <S2SV_ModEnd> } <S2SV_null>",0
998,<S2SV_ModStart>,0
999,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> + 1, ""prestring=%490s"" <S2SV_ModEnd>, buf ) <S2SV_ModStart> ) ) > L_BUFSIZE <S2SV_ModEnd> - 3 ) <S2SV_ModStart> + 1, ""protos=%490s"" <S2SV_ModEnd>, buf ) <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, "" <S2SV_blank> %s <S2SV_blank> -U, <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, <S2SV_blank> %s <S2SV_blank> %s"",",0
1000,<S2SV_ModStart> if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks,1
1001,"<S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu,",0
1002,"<S2SV_ModStart> } else { memset ( 0, sizeof ( const csi ) ) ; <S2SV_ModStart> = csi ; <S2SV_ModEnd> break ;",0
1003,<S2SV_ModStart> studio_profile ) { <S2SV_ModEnd> if (!,1
1004,<S2SV_ModStart> nsops < 1 || nsops > SEMOPM,1
1005,<S2SV_ModStart> [ i ] - 1,0
1006,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; },1
1007,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
1008,<S2SV_ModStart> >> 2 ; if ( q + o >= e ) goto out ;,0
1009,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( bytes_forward,0
1010,"<S2SV_ModStart> len ) { assert ( len > 28 ) ; <S2SV_ModStart> case LEX_EOF : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_ID : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_INT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_INT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> REGEX"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED",0
1011,"<S2SV_ModStart> mnt_instance ) ; if ( unlikely (! list_empty ( & mnt -> mnt_mounts ) ) ) { struct mount * p, * tmp ; list_for_each_entry_safe ( p, tmp, & mnt -> mnt_mounts, mnt_child ) { umount_mnt ( p ) ; } }",1
1012,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write_literal <S2SV_ModEnd> ( w,",0
1013,,1
1014,<S2SV_ModStart> ; if ( e - e - p ||,0
1015,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> uint32_t pos ; if ( inode -> i_size > inode -> i_sb -> s_blocksize ) { err = - ENAMETOOLONG ; goto out_unmap ; } <S2SV_ModStart>! bh ) { err = - EIO ; goto out_unlock_inode ; } <S2SV_ModEnd> symlink = bh <S2SV_ModStart> return 0 ; out_unlock_inode <S2SV_ModEnd> : up_read ( <S2SV_ModStart> page ) ; out_unmap :,1
1016,<S2SV_ModStart> else if ( cpu_enabled <S2SV_ModEnd> ) { if,0
1017,"<S2SV_ModStart> if ( ent == NULL ) { st = KRB5_KDB_NOENTRY ; <S2SV_ModEnd> goto cleanup ; <S2SV_ModStart> cleanup ; } st = populate_policy ( context, ld, ent, pol_name, * policy ) ;",1
1018,<S2SV_ModStart> ) ) { if ( ps_codec -> i4_buf == 1 ) { return IHEVCD_INVALID_PARAMETER ; },0
1019,"<S2SV_ModStart>, int end <S2SV_ModEnd> ; struct buffer_head <S2SV_ModStart> ) ) ; unsigned int len <S2SV_ModEnd> = 0 ; <S2SV_ModStart>, i ) ; if (! bh ->",0
1020,"<S2SV_ModStart> ) { switch ( psf, count!= NULL ) break ; case",0
1021,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( i,1
1022,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
1023,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1024,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> "", dest <S2SV_ModEnd> ) ; return",0
1025,"<S2SV_ModStart> int num_items_scanned ; guint pkt_len ; int <S2SV_ModEnd> pktnum, hr <S2SV_ModStart> + 64, ""LEN=%9u"" <S2SV_ModEnd>, & pkt_len <S2SV_ModStart> FALSE ; } if ( pkt_len > WTAP_MAX_PACKET_SIZE ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup_printf ( ""toshiba: <S2SV_blank> file <S2SV_blank> has <S2SV_blank> %u-byte <S2SV_blank> packet, <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> maximum <S2SV_blank> packet, <S2SV_blank> length"", pkt_len, WTAP_MAX_PACKET_SIZE ) ; return FALSE ; } <S2SV_ModStart> ( buf, pkt_len <S2SV_ModEnd> ) ; pd",0
1026,<S2SV_ModStart> ; int err = 0 ; msg -> msg_namelen,1
1027,"<S2SV_ModStart> ; if ( zend_hash_find <S2SV_ModEnd> ( ht,",1
1028,<S2SV_ModStart>,0
1029,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> ; } } io -> io_cleanup = io -> io_cleanup ;,0
1030,"<S2SV_ModStart> 0 ) { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",0
1031,<S2SV_ModStart> p -> tokenpos >= ( <S2SV_ModEnd> p -> tokenlen <S2SV_ModStart> p -> tokenlen - 1 ),1
1032,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BLOCK_SIZE_8_8_t <S2SV_ModEnd> get_variance ( BLOCK_SIZE <S2SV_ModStart> case BLOCK_8X8 : case BLOCK_8X8 : return get_mv_filter ( bsize ) ; break ; case BLOCK_8 : case BLOCK_8 : case BLOCK_8X8X8 : return <S2SV_ModStart> case BLOCK_X8 : return case BLOCK_16 : return get_16x8x16 : <S2SV_ModStart> case BLOCK_16 : case BLOCK_16 : return & BLOCK_16x16x16 : <S2SV_ModStart> case BLOCK_16 : return & BLOCK_16x8x16x8x16 : <S2SV_ModStart> ; case BLOCK_X8x16 : case BLOCK_16 : return get_16x16 : <S2SV_ModStart> case BLOCK_16 : case BLOCK_16 : case BLOCK_16 : case BLOCK_16 : return & BLOCK_8X8X8_16 : return false ; },0
1033,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1034,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> & 0xFFFF ; },1
1035,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
1036,<S2SV_ModStart> ; if ( status == NULL ) return 0 ; if (,0
1037,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1038,"<S2SV_ModStart> -> stratum_port ; snprintf ( address, 254 <S2SV_ModEnd>, ""%s:%s"",",1
1039,"<S2SV_ModStart> if (! page_name_set ( page <S2SV_ModEnd> ) ) { <S2SV_ModStart> } if (! page_name_print ( req, page <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( page, ""Error: <S2SV_blank> failed"" ) ; } else if (",0
1040,<S2SV_ModStart> + i ; unsigned int actual_size = r -> begin < actual_size? r -> begin : actual_size ; unsigned int limit_r_end = r -> begin < actual_size? r -> end : actual_size ; unsigned int limit_r_read = r -> begin,0
1041,<S2SV_ModStart> head -> iov_base ; if ( hdr > head -> iov_len ) return 0,1
1042,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
1043,<S2SV_ModStart> -> vlock ) ; if ( input -> buf_len > frame_len ) { <S2SV_ModStart> ) ; } },0
1044,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
1045,<S2SV_ModStart> ; ssize_t count ; if ( bytes == 0 || items == 0 ) return 0,1
1046,<S2SV_ModStart> == EXTRACT_32_t <S2SV_ModEnd> ) { if,0
1047,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_read2,0
1048,<S2SV_ModStart> * dev ; if ( len > IEEE_MAX_SIZE ) { return - EINVAL ; },0
1049,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if (!,0
1050,"<S2SV_ModStart> r ) { return ASN1_INVALID_PKEY <S2SV_ModEnd> ( r,",0
1051,<S2SV_ModStart> 0 ) ; hrtimer_try_to_cancel <S2SV_ModEnd> ( & stime,1
1052,"<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> low ) ; }",0
1053,<S2SV_ModStart> = L2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = L2SV_MODE_null> <S2SV_null> <S2SV_null>,0
1054,"<S2SV_ModStart> { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_WAITALL )",0
1055,<S2SV_ModStart> -> chunksize = UINT64_MAX <S2SV_ModEnd> ; for (,1
1056,<S2SV_ModStart> u1_total_mbs_coded!= 0 <S2SV_ModEnd> ) { if,0
1057,<S2SV_ModStart>,0
1058,<S2SV_ModStart> } err = crypto_rng_alg ( tfm ) <S2SV_ModEnd> -> seed (,1
1059,<S2SV_ModStart> = uid ; <S2SV_ModEnd> new -> count <S2SV_ModStart> new -> count = 0 <S2SV_ModEnd> ; spin_lock_irq ( <S2SV_ModStart> } if ( <S2SV_ModEnd> ucounts -> count <S2SV_ModStart> ucounts -> count == INT_MAX ) ucounts = NULL ; else ucounts -> count += 1 <S2SV_ModEnd> ; spin_unlock_irq (,1
1060,<S2SV_ModStart> ) ; } if ( err == 0 ) goto out_put ; if ( datagrams <S2SV_ModEnd> == 0 ) <S2SV_ModStart> == 0 ) { datagrams = err ; goto out_put ; } <S2SV_ModEnd> if ( sock,0
1061,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1062,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> = 0 ; len - i >= 8 * 32 <S2SV_ModEnd> ; i += <S2SV_ModStart> ] ; } for ( ; i < len ; i += 32 ) { ( void ) tab [ i ] ; },1
1063,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { if ( <S2SV_ModStart> ) ; } if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result ) ;,1
1064,"<S2SV_ModStart> * fmode_t fmode, fmode_t fmode <S2SV_ModEnd> ) { int <S2SV_ModStart> ; if ( open_flags & fmode <S2SV_ModEnd> ) goto open_flags <S2SV_ModStart>, fmode, fmode <S2SV_ModEnd> ) ; if",0
1065,"<S2SV_ModStart> ResourceLimitError, ""MemoryAllocationFailed"" ) ; ( void ) ResetMagickMemory ( global_colormap, 0, 3 * MagickMax ( global_colors, 256 ) * sizeof ( * global_colormap )",1
1066,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1067,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1068,"<S2SV_ModStart> * sse, tran_low_t * sse, int64_t * sse, unsigned int64_t <S2SV_ModStart> 0, int64_t sse, int64_t * sse, int64_t sse, int64_t <S2SV_ModStart> ; int64_t sse ; int64_t sse = 0 ; int64_t sse = 0 ; int64_t sse = 0 ; # endif <S2SV_ModStart> 0 ] ; int64_t sse = 0 ; int64_t sse = 0 ; int64_t sse = MIN ( sse, sse, sse, sse, sse, sse ) ; # if CONFIG_MB_MB_HIGHBITDEPTH <S2SV_ModStart> = sse = 0 ; # else if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { <S2SV_ModStart> = sse ; } # if ( sse > ( <S2SV_ModEnd> ) ) { <S2SV_ModStart> = sse ; # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModStart> = sse ; # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModStart> = sse = sse ; int64_t <S2SV_ModEnd> = sse ; <S2SV_ModStart> = sse ; int64_t <S2SV_ModEnd> rate_t <S2SV_ModStart> = sse ; for ( i = vp9_",0
1069,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1070,<S2SV_ModStart> ; if ( snpal!= <S2SV_ModEnd> 0 ) ND_PRINT ( ( ndo,0
1071,<S2SV_ModStart> == NULL ) { <S2SV_ModStart> == NULL ) return ( * ptr ; <S2SV_ModStart> == NULL ) { if ( * ptr ++ ) break ; <S2SV_ModStart> == NULL ) return ( * ptr ; },0
1072,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_read_reader <S2SV_ModEnd> ( r, <S2SV_ModStart> r, vpx_read_reader <S2SV_ModEnd> ( r,",0
1073,<S2SV_ModStart> ; uint32_t backup_handle = 0 <S2SV_ModStart> ret == 0 ) { if ( <S2SV_ModEnd> res -> backup <S2SV_ModStart> goto out_unlock ; } else { backup_handle = req -> buffer_handle ; },1
1074,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool get_desc ( <S2SV_ModStart> struct desc_struct * out, <S2SV_ModEnd> unsigned short sel <S2SV_ModStart> SEG_LDT ) { * out = false <S2SV_ModEnd> ; struct ldt_struct <S2SV_ModStart> -> nr_entries ) { * out = <S2SV_ModEnd> ldt -> entries <S2SV_ModStart> sel ] ; * out = false ; } <S2SV_ModStart> size ) return true ;",0
1075,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1,",0
1076,"<S2SV_ModStart> net_saddr ; struct ipv6_addr * np = fl6_addr * np -> opt ; <S2SV_ModStart>, fl6, final_p, final_p <S2SV_ModEnd> ) ; struct <S2SV_ModStart>, fl6_p, final_p <S2SV_ModEnd>, false ) <S2SV_ModStart>, fl6, final_p <S2SV_ModEnd> ) ; }",0
1077,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1078,"<S2SV_ModStart> * buf, maxbuf, maxbuf",0
1079,<S2SV_ModStart> conn -> priv. length <S2SV_ModEnd> ; if (,0
1080,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> < ie && <S2SV_ModEnd> ND_TTEST ( *,1
1081,"<S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_TSR_BUFFER_SIZE <S2SV_ModEnd> ) ; ksz8851_t <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_RX ; }",0
1082,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1083,<S2SV_ModStart> return false ; <S2SV_ModEnd> del_node,0
1084,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
1085,<S2SV_ModStart> endif done ; # endif,0
1086,"<S2SV_ModStart>, x0, x1, x1",0
1087,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
1088,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1089,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1090,"<S2SV_ModStart> 0 ) ; int minsz = R_MIN ( len, size ) ; minsz = R_MAX ( minsz, 0 ) ; <S2SV_ModStart> ; j < minsz <S2SV_ModEnd> ; j ++ <S2SV_ModStart> ++ ) { ut8 ch = ( ( j + idx - 1 ) > minsz )? 0xff : <S2SV_ModEnd> buf [ j <S2SV_ModStart> + idx ] ; r_cons_printf ( ""%02x"", ch <S2SV_ModStart>!= UT64_MAX ) { <S2SV_ModStart> val ) ; } <S2SV_ModStart>!= UT64_MAX ) { <S2SV_ModStart> ptr ) ; } <S2SV_ModStart> - 1 ) { <S2SV_ModStart> refptr ) ; }",1
1091,"<S2SV_ModStart> ] ; int width ; int <S2SV_ModStart> ] ; } printf ( ""%s: <S2SV_blank> %s: <S2SV_blank> %s\\n"", output_height, height ) ; <S2SV_ModStart> ) ; } printf ( "" <S2SV_blank> %s\\n"", output_height, output_height, output_height ) ; <S2SV_ModStart> = malloc ( fout_height <S2SV_ModEnd> ) ; } <S2SV_ModStart> = fopen ( ""%s: <S2SV_blank> %s\\n"", outputbuf [ 1 ] ) ; if ( max_height > 1 ) { printf ( "" <S2SV_blank> %s <S2SV_blank> size <S2SV_blank> %s <S2SV_blank> %s: <S2SV_blank> %s <S2SV_blank> %s\\n"", fout ) ; exit ( ) ; } printf ( "" <S2SV_blank> input <S2SV_blank> size <S2SV_blank> %s\\n"", out_height <S2SV_blank> %s\\n"", h ) ; free ( ) ; return 1 ; } <S2SV_ModStart> ) ) ; free ( out_height ) ; } <S2SV_ModStart> ) ; return 1 ; }",0
1092,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 head, tail, size ; tail = <S2SV_ModEnd> ( chip -> <S2SV_ModStart> + JQS_wTail ) ; if ( head > size ) goto out ; head = <S2SV_ModEnd> ( chip -> <S2SV_ModStart> + JQS_wSize ) ; out :",0
1093,<S2SV_ModStart> * opcode_desc ; if ( len < 2 ) { return NULL ; },1
1094,<S2SV_ModStart> status ) { <S2SV_ModEnd> ACPI_OBJECT * next <S2SV_ModStart> ; ACPI_FUNCTION_OBJECT * next ; <S2SV_ModEnd> ACPI_OPERAND_TRACE ( <S2SV_ModStart> ) ; } <S2SV_ModEnd>  ACPI_FUNCTION_TRACE ( next,0
1095,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
1096,<S2SV_ModStart> [ sizeof ( the_url <S2SV_ModEnd> ) - 1,0
1097,"<S2SV_ModStart> num_fields, 0",0
1098,"<S2SV_ModStart>. match_data, & key_len",0
1099,<S2SV_ModStart> vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; priv -> <S2SV_ModStart> v8_codec_alg_priv_t * priv <S2SV_ModEnd> ; priv -> <S2SV_ModStart> vpx_codec_alg_cfg = ( sizeof ( struct VPX_CODEC_MEM_ERROR * ) / sizeof ( * ) ) ;,0
1100,"<S2SV_ModStart> error ) { if ( bp && ( <S2SV_ModEnd> xfs_da_shrink_inode ( args <S2SV_ModStart>, bp )!= 0 ) <S2SV_ModEnd> ) goto out",1
1101,"<S2SV_ModStart> ; if ( cat_c, c ) return 0 ;",0
1102,<S2SV_ModStart> timeri ) ; spin_lock ( & timeri -> lock ) ; <S2SV_ModStart> slave_active_list ) ; spin_unlock ( & timeri -> lock ) ; <S2SV_ModStart> slave_lock ) ; spin_unlock ( & timeri -> lock <S2SV_ModEnd> ) ; },0
1103,"<S2SV_ModStart> return err ; if (! <S2SV_ModEnd> attrs [ GFP_NLA_NLA_SOCK <S2SV_ModStart> attrs [ TIPC_NLA_SOCK <S2SV_ModEnd> ] ) return <S2SV_ModStart> - EINVAL ; err = nla_get_sock ( sock, tsk ) ; if (! tsk ) return - EINVAL ;",0
1104,<S2SV_ModStart> ctx ) { memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> data ) ; memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> data ) ; memset <S2SV_ModEnd> ( ctx ->,0
1105,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1106,<S2SV_ModStart> ) buffer ; if ( total_len < sizeof ( * cap ) || total_len < <S2SV_ModEnd> cap -> bLength <S2SV_ModStart> cap -> bLength ) { dev -> bos -> desc -> bNumDeviceCaps = i ; break ; } length = cap -> bLength <S2SV_ModEnd> ; total_len -=,1
1107,<S2SV_ModStart> task = current <S2SV_ModEnd> ; if (,1
1108,<S2SV_ModStart> ( iinfo -> iinfo.,0
1109,<S2SV_ModStart>,0
1110,"<S2SV_ModStart> char * ptr, * ptr",0
1111,"<S2SV_ModStart> sk_t * opt_alloc,",0
1112,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
1113,<S2SV_ModStart>! saw_digit ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\r' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\n' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart> ; trunc : * endp = bp ; <S2SV_ModStart> ; invalid : * endp = bp ;,1
1114,"<S2SV_ModStart> ; args -> rmtvaluelen = be32_to_cpu ( name_rmt -> valuelen ) ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ( name_rmt -> <S2SV_ModEnd> valueblk ) ; <S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; return",1
1115,<S2SV_ModStart> ; } ;,0
1116,<S2SV_ModStart> ; if (! new_data_length ) return SC_ERROR ; if (,0
1117,"<S2SV_ModStart>, j ) int vdaux = verdef -> vd_aux ; if ( vdaux < 1 ) { sdb_free ( sdb_verdef ) ; goto out_error ; } vstart += vdaux <S2SV_ModEnd> ; if (",0
1118,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1119,<S2SV_ModStart> u8 label_len ; <S2SV_ModEnd> GET8 ( label_len <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ;,1
1120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( cc % <S2SV_ModStart> * stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpAcc"", ""%s"", ""cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> tmp ) ; return 1 ;",1
1121,"<S2SV_ModStart> -> vm_ops ) <S2SV_ModEnd> return do_fault ( <S2SV_ModStart>, pte, pmd, flags, entry ) ; <S2SV_ModEnd> return do_anonymous_page ( <S2SV_ModStart>, address, pte, pmd, <S2SV_ModEnd> flags ) ;",1
1122,"<S2SV_ModStart> s ) { size_t len = strlen ( s ) + 1 ; <S2SV_ModStart> = pool_alloc ( len ) ; memcpy <S2SV_ModEnd> ( r, <S2SV_ModStart> r, s, len",1
1123,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1124,"<S2SV_ModStart>! new_idmap_permitted ( file,",1
1125,,0
1126,<S2SV_ModStart> -> p_pic = <S2SV_ModEnd> ( p_pic ->,0
1127,"<S2SV_ModStart>, 1,",0
1128,<S2SV_ModStart> 0 ) { if ( len < ( u_int ) advance ) goto trunc ; <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) return ; <S2SV_ModStart> 0 ) ; if ( advance < 0 ) return ; <S2SV_ModStart> 0 ) ; if ( advance < 0 ) return ;,0
1129,"<S2SV_ModStart>, len ) ; <S2SV_ModEnd> if ( a",0
1130,<S2SV_ModStart> ( iinfo -> iinfo.,0
1131,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1132,<S2SV_ModStart> ; vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
1133,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
1134,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; <S2SV_ModEnd> va_list args ;",0
1135,<S2SV_ModStart> ctxt ) ; if (! ( em_valid ( ctxt ) ) ) return emulate_ud ( ctxt ) ;,0
1136,<S2SV_ModStart> ; if (! decoder -> data_size,0
1137,"<S2SV_ModStart> ), type_comment, true",0
1138,"<S2SV_ModStart> int vp8_denoiser_y_avg_y, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> int mi_stride, unsigned char * running_stride, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> int increase_avg_stride, int avg_y, <S2SV_ModEnd> avg_stride, <S2SV_ModStart> unsigned char * running_stride, int motion_magnitude [ 0 ], unsigned int motion_magnitude [ 0 ] <S2SV_ModStart> = 0 ; unsigned int increase_magnitude [ 0 ] = ( unsigned int motion_avg_avg_magnitude [ 0 ], increase_magnitudey, <S2SV_ModEnd> ) ; unsigned <S2SV_ModStart> = 0 ; unsigned int increase_denoising ) { int increase_denoising = ( motion_avg_magnitude [ 3 ] + motion_avg_magnitude [ 0 ], increase_denoising ) ; const int increase_d = ( increase_d, increase_denoising ) - 1 ; unsigned int increase_d = ( unsigned int increase_denoiser -> running ) - 1 ; unsigned int max_val_val = 0 ; unsigned int shift_val_val_val_val = ( increase_d, increase_d, size_t ) ; if ( diff < increase_denoising ) { if ( <S2SV_ModStart> = 0 ; }",0
1139,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( s ==,0
1140,<S2SV_ModStart> ; int ret = 0,0
1141,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
1142,<S2SV_ModStart> xopop ) { <S2SV_ModEnd> spin_lock_dev -> src_op <S2SV_ModStart> = xopass -> src_op_op <S2SV_ModStart> src_dev ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1143,"<S2SV_ModStart> ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close_sock ; } val = 1 ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_RECVHOPLIMIT, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_RECVHOPLIMIT,.""",1
1144,"<S2SV_ModStart> new_bh ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> cleanup ; } memcpy <S2SV_ModEnd> ( new_bh, <S2SV_ModStart> new_bh ) ; memset ( new_bh ) ;",0
1145,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1146,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ( ctx, <S2SV_ModEnd> va_list args )",0
1147,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; <S2SV_ModEnd> rc ;",0
1148,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1149,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1150,<S2SV_ModStart> 3 * len + 8,1
1151,<S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { points [ i ]. x = <S2SV_ModStart> var ) ; } <S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { points [ i ]. y = <S2SV_ModStart> ; } } },1
1152,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1153,<S2SV_ModStart> ; if ( imx >= <S2SV_ModEnd> ) { if,0
1154,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
1155,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; if ( ctx -> frame_parallel_decode ) { VPxWorkerData * const worker = ctx -> frame_workers ; FrameWorkerData * ) worker = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> pbi, & frame_worker_data <S2SV_ModEnd> -> pbi ->",0
1156,"<S2SV_ModStart>. path ; return Curl_urldecode <S2SV_ModEnd> ( data, <S2SV_ModStart>, 0, & <S2SV_ModEnd> pop3c -> mailbox <S2SV_ModStart> pop3c -> mailbox, NULL, TRUE ) <S2SV_ModEnd> ; } <S2SV_null>",1
1157,<S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ;,1
1158,"<S2SV_ModStart> gb ) ; if ( s -> first_slice_in_pic_flag ) { av_log ( s -> avctx, AV_LOG_ERROR, ""Two <S2SV_blank> slices <S2SV_blank> the <S2SV_blank> frame.\\n"" ) ; return 1 ; }",0
1159,<S2SV_ModStart> } } } <S2SV_ModEnd> } else {,0
1160,<S2SV_ModStart> ) ; WORD32 u2_num_mbs_offset = 0 ; <S2SV_ModStart> ) ; } ps_dec -> u2_num_mbs_coded = 0 ;,0
1161,<S2SV_ModStart> cm -> frame_bufs [ 1 ] <S2SV_ModEnd> ] ; #,0
1162,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1163,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> tx_size_size_t <S2SV_ModStart> mb_size ) { const MB_MODE_INFO * const mbmi = get_ext ( xd -> mbmi, xd -> mbmi. tx_size ) ; <S2SV_ModEnd> int i <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if ( <S2SV_ModStart> < max_size ) { for ( <S2SV_ModEnd> i ++ ) ; i <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (",0
1164,<S2SV_ModStart> -> mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor <S2SV_ModEnd> ; if (,1
1165,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
1166,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> fmt, 1 <S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, sizeof",1
1167,<S2SV_ModStart> ; if ( row >= TIFF_MAX / rows,0
1168,<S2SV_ModStart> ; default : return <S2SV_ModEnd> ; } else,0
1169,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1170,<S2SV_ModStart> ( upid == INT_MIN ) return - ESRCH ; if ( upid ==,1
1171,"<S2SV_ModStart> siocb -> scm, false",1
1172,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1173,"<S2SV_ModStart>, plane ) * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? 1 )",0
1174,<S2SV_ModStart> ; uint16_t * attr ; uint16_t length ; uint16_t * <S2SV_ModStart> ; uint16_t * attr = sizeof ( * ) * avp -> length - 4 ; <S2SV_ModStart> ) ) ; if ( attr_len < sizeof ( struct l2tp_attr ) ) { error = NULL ; break ; } <S2SV_ModStart> ; if (! avp -> length ) { if ( <S2SV_ModStart> avp_attr_len ) ) { if (! avp -> v_attr_len ) break ; },0
1175,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; int r = 0 ; if <S2SV_ModEnd> ( lc -> <S2SV_ModStart> ( lc -> start || ti -> len!= i_size_read ( dev -> bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL, cmd ) ; return r? : __blkdev_driver_ioctl ( <S2SV_ModStart> -> bdev, <S2SV_ModEnd> dev -> mode",1
1176,<S2SV_ModStart> ; if ( actx == NULL ) return 0 ;,0
1177,<S2SV_ModStart> ) ; return <S2SV_ModEnd> if ( name,0
1178,"<S2SV_ModStart> size, 0, <S2SV_ModEnd> ) ; if",0
1179,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1180,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1181,"<S2SV_ModStart> = 0 ; memset ( sa, 0, sizeof ( sa ) ) ;",0
1182,<S2SV_ModStart> ( cpkt. length <S2SV_ModEnd> ) ; },0
1183,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC | NTLMSSP_NEGOTIATE_SEAL <S2SV_ModStart> -> sign ) <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,1
1184,<S2SV_ModStart> ) ; goto err <S2SV_ModEnd> ; } mutt,0
1185,<S2SV_ModStart> crypto_report_kpphp_k ) ; strncpy <S2SV_ModEnd> ( skb.,0
1186,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
1187,<S2SV_ModStart> -> head <= 0 || ( unsigned char ) ( ( g -> sect << 2 ) >> FD_SIZECODE ( g ) ) ==,1
1188,<S2SV_ModStart> ; if ( duid == 0 ||,0
1189,"<S2SV_ModStart>, & rlen, 0",1
1190,"<S2SV_ModStart> * data ; memset ( & user, 0, sizeof ( user -> password ) ) ; <S2SV_ModStart> = 0 ; memset ( & user, sizeof ( user -> password ) ) ; <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1191,"<S2SV_ModStart> mntent, path, rootfs -> mount",1
1192,<S2SV_ModStart>,0
1193,<S2SV_ModStart> - offset ; unsigned short prev_bi_vcnt = bio -> bi_vcnt ; <S2SV_ModStart> ) break ; if ( bio -> bi_vcnt == prev_bi_vcnt ) put_page ( pages [ j ] ) ;,1
1194,<S2SV_ModStart> ( RAS_CAST ( hdr -> depth > RAS_MAXSIZE - 1 ),0
1195,"<S2SV_ModStart> state. path <S2SV_ModEnd> ; char localhost <S2SV_ModStart> ""localhost"" ; } result = Curl_urldecode ( conn -> data, path, 0, & <S2SV_ModStart> smtpc -> domain, NULL, TRUE ) ; if ( result ) return result <S2SV_ModEnd> ; state (",1
1196,"<S2SV_ModStart> len ) { strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len, ""ID <S2SV_blank> STRING"" ) ; return <S2SV_ModStart> 0 ) ; } else { if ( strlen ( str, len ) == LEXCEEDED ) { jas_printf ( str, JEXCEEDED ) ; return ; } <S2SV_ModStart> 0 ) ; } else { strcpy ( str, len, len, len, len ) ; }",0
1197,<S2SV_ModStart> 0 ) ; if ( i < len ) return - 1,0
1198,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1199,<S2SV_ModStart> ) ; goto out <S2SV_ModEnd> ; } if,0
1200,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1201,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1202,,1
1203,"<S2SV_ModStart> { r_cons_printf ( ""\\""k <S2SV_blank> bin/pe/%s/%d=%s.%s\\""\\n"" <S2SV_ModEnd>, module, <S2SV_ModStart> { r_cons_printf ( ""\\""k <S2SV_blank> bin/pe/%s/%d=%s\\""\\n"" <S2SV_ModEnd>, module,",1
1204,"<S2SV_ModStart>, rqstp, res <S2SV_ModEnd> ) ; out",1
1205,<S2SV_ModStart> mntent ) { return NULL ; },0
1206,"<S2SV_ModStart> ) ; } if (! <S2SV_ModEnd>, key, <S2SV_ModStart>, sizeof ( key ) ) ) ;",0
1207,"<S2SV_ModStart> ) ) { * status = ""INVALID_S2SV_null> <S2SV_null>",0
1208,<S2SV_ModStart> thread -> tp_value [ 0 ] <S2SV_ModStart> childregs -> ARM_r3 ; thread -> tp_value [ 1 ] = get_tpuser ( ),1
1209,<S2SV_ModStart> bufsize ) { char * new_bufsize <S2SV_ModEnd> ; JAS_DBGLOG ( <S2SV_ModStart> ; if ( bufsize < 0 ) { new_bufsize <S2SV_ModEnd> return 0 ; <S2SV_ModStart> } else { new_bufsize <S2SV_ModEnd> } else if <S2SV_ModStart> 0 ; } if ( bufsize <S2SV_null> <S2SV_null>,0
1210,"<S2SV_ModStart> authbuf * b = NULL <S2SV_ModStart> char * pkblob = NULL <S2SV_ModStart> u_char * pkblob = NULL <S2SV_ModStart>, * sig = NULL <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( r = <S2SV_ModStart> r ) ) ; } if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done <S2SV_ModStart> b ) ; <S2SV_ModEnd> auth2_key ( authctxt <S2SV_ModStart> ) ) ; if (! authctxt -> valid || authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if (",0
1211,<S2SV_ModStart> ; uint32_t bcount ; CLEAR ( WaveHeader ),1
1212,<S2SV_ModStart> ( iocb -> iov_block <S2SV_ModEnd> ) return 0,0
1213,<S2SV_ModStart> } if ( ( ctx == NULL ) ||,0
1214,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1215,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteEntry ) ) ;",0
1216,<S2SV_ModStart> failed_mount3 ; } # ifdef CONFIG_EXT2_FS_XATTR sbi -> s_mb_cache = ext2_xattr_cache ( ) ; if (! sbi -> s_mb_cache ) { ext2_msg ( sbi -> s_mb_cache ) ; goto failed_mount3 ; } # endif,0
1217,<S2SV_ModStart> ) { return btif ( false,0
1218,<S2SV_ModStart> len < tcp_hdrlen || tcp_hdrlen < sizeof ( struct tcphdr ) <S2SV_ModStart> ; if ( tcp_hdrlen >= 15 * 4 ) return 0 ; if (,1
1219,"<S2SV_ModStart> int i ; size_t size ; matrix = 0 ; <S2SV_ModStart> 0 ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> -> datasize_ = 0 ; if (! jas_safe_size_mul ( numrows, numcols, & size ) ) { goto error ; } matrix -> datasize_ = size <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> return matrix ; error : if ( matrix ) { jas_matrix_destroy ( matrix ) ; } return 0 ;",1
1220,"<S2SV_ModStart> ipv6_select_ident ( fh, rt <S2SV_ModStart> ipv6_select_ident ( fh, rt",1
1221,"<S2SV_ModStart> int ext4_mb_cache_insert ( struct mb2_cache * ext4_mb_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> bh ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> error ; return error ; error = mb2_cache_put ( bh, bh -> b_hash ) ; <S2SV_ModStart> error ) ; <S2SV_ModEnd> } }",0
1222,<S2SV_ModStart> * req ; <S2SV_ModEnd> req = scsi_req_alloc <S2SV_ModStart> hba_private ) ; <S2SV_ModEnd> return req ;,1
1223,<S2SV_ModStart> int i ; size_t <S2SV_ModEnd> len ; int <S2SV_ModStart> ; UINT64 <S2SV_ModEnd> len ; if,0
1224,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1225,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
1226,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct xfrm_dump_info <S2SV_ModStart> struct xfrm_dump_info info <S2SV_ModEnd> ; info. <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> ( void ),1
1227,<S2SV_ModStart> (! buf || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1228,"<S2SV_ModStart> dentry * upper <S2SV_ModEnd> ; int err <S2SV_ModStart> I_MUTEX_PARENT ) ; upper = lookup_name_len ( dentry -> d_name. name, dentry -> d_name, dentry -> d_name. len ) ; err = PTR_ERR ( upper ) ; if (! IS_ERR ( dentry ) ) ) goto out_unlock ; <S2SV_ModStart> if ( upper == dentry ) { <S2SV_ModEnd> if ( upper <S2SV_ModStart> ) ; } dput ( dentry ) ; <S2SV_ModStart> dentry ) ; out_unlock :",0
1229,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int new_service_options_options_options ( LOG_INFO, NULL, * new_service_options <S2SV_ModStart> NULL ) { if ( <S2SV_ModEnd> == & new_service_options <S2SV_ModStart> ) break ;",0
1230,<S2SV_ModStart> * ptrptr && <S2SV_ModEnd> nmemb && size <S2SV_ModStart> nmemb && size <S2SV_ModEnd> ) return AVERROR,1
1231,<S2SV_ModStart> ( a -> type == szMAPI_BINARY && a -> <S2SV_ModStart> else if ( a -> type == szMAPI_BINARY &&,1
1232,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
1233,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( ms ) ; return 0 ;,0
1234,"<S2SV_ModStart> { jas_eprintf ( ""got <S2SV_blank> box <S2SV_blank> type <S2SV_blank> %s\\n"" <S2SV_ModEnd>, box ->",1
1235,,1
1236,<S2SV_ModStart> ; if ( fmt & 0xffff <S2SV_ModEnd> ) return 0,0
1237,<S2SV_ModStart> return ; } <S2SV_ModEnd> if (!,0
1238,<S2SV_ModStart> ; i = GF_IS_INVALID_MEMORY ; if (,0
1239,<S2SV_ModStart> UINT32 nsc_rle_encode ( const,1
1240,<S2SV_ModStart> mbdata ] ; int len ; <S2SV_ModStart> = 0 ; length = '\\0',0
1241,"<S2SV_ModStart> * dllhandle ; if ( COM_CompareExtension ( name, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", name ) ; return NULL ; }",1
1242,"<S2SV_ModStart> ( _mibindex,",0
1243,<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> ++ ; } \\\n} <S2SV_ModEnd> typedef struct PCDTable <S2SV_ModStart> buffer ) ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ] ) ; <S2SV_ModStart> RelinquishMagickMemory ( buffer ) ; for ( j = 0 ; j <= i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ],1
1244,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1245,<S2SV_ModStart> ) ; } <S2SV_ModEnd> g_true ) ;,0
1246,"<S2SV_ModStart> # ifdef HAVE_IPV6 <S2SV_ModEnd> if ( * <S2SV_ModStart> 1 ) { char * <S2SV_ModStart> - 2 ), * e = NULL <S2SV_ModStart> * portno = strtol <S2SV_ModEnd> ( p + <S2SV_ModStart> p + 2, & e, 10 ) ; if ( e && * e ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } <S2SV_ModEnd> return estrndup ( <S2SV_ModStart> NULL ; } } <S2SV_ModEnd> return estrndup ( <S2SV_ModStart> NULL ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1247,<S2SV_ModStart> { j2SV_null> <S2SV_null> <S2SV_null>,0
1248,"<S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( src_buffer, <S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( src_buffer,",0
1249,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHWELCOME ; }",1
1250,<S2SV_ModStart> == * ptr && ptr [ 1 ],1
1251,<S2SV_ModStart> <S2SV_null> <S2SV_null> static MACROBLOCKD <S2SV_ModEnd> MACROBLOCKD * <S2SV_ModStart> -> mi_row ; memset <S2SV_ModEnd> ( x -> <S2SV_ModStart> mi_col ) { memset <S2SV_ModEnd> ( x -> <S2SV_ModStart> mi_col ) ; memset <S2SV_ModEnd> ( & x <S2SV_ModStart> mi_col ) ; memset <S2SV_ModEnd> ( sf -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( sf ->,0
1252,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
1253,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
1254,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ) ; } } }",0
1255,<S2SV_ModStart> size < 0 || skb -> len < skb -> len,0
1256,<S2SV_ModStart> sta -> lock ) ; spin_lock_init ( & sta -> ps_lock,1
1257,<S2SV_ModStart> tp_event ) && perf_paranoid_tracepoint_raw <S2SV_ModEnd> ( ) &&,1
1258,<S2SV_ModStart> sctp_v4_net_ops ) ; struct sctp_v4_dev_net * sctp_dev ; <S2SV_ModStart> ; sctp_v4_ipv4_destroy <S2SV_ModEnd> ( & <S2SV_ModStart> ) ; } sctp_v4_ipv4_destroy <S2SV_ModEnd> ( & sctp_dev,0
1259,"<S2SV_ModStart>, 0 ) ; if (! data_interface ||! control_interface ) return - ENODEV",1
1260,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1261,<S2SV_ModStart> NULL ) { <S2SV_ModEnd> const entry = <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } if (,0
1262,"<S2SV_ModStart> * head ; <S2SV_ModEnd> newsk -> sk_sndbuf <S2SV_ModStart> -> sk_rcvbuf ; sctp_copy_descendant <S2SV_ModEnd> ( newsk,",1
1263,"<S2SV_ModStart> * fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ), TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) <S2SV_ModStart> { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, sizeof ( fd ) )",0
1264,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return sel ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! get_desc ( & desc, sel ) <S2SV_ModEnd> ) return - <S2SV_ModStart>! ( desc. <S2SV_ModEnd> type & BIT <S2SV_ModStart> ( ( desc. <S2SV_ModEnd> l << 1 <S2SV_ModStart> ) | desc. <S2SV_ModEnd> d ) {",1
1265,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> free ( ctx,0
1266,"<S2SV_ModStart> 1 ) { vpx_lpf_lpf_horizontal_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_lpf_horizontal_8_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf_lpf_horizontal_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_lpf_horizontal_4 <S2SV_ModEnd> ( s,",0
1267,<S2SV_ModStart> return ret ; fsnotify_put_group ( group ) ;,1
1268,<S2SV_ModStart> pctx ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1269,"<S2SV_ModStart> ; if ( src_bitness == BPF_ADD ) { coerce_reg_to_size ( dst_reg, 4 ) ; coerce_reg_to_size <S2SV_ModEnd> ( & src_reg <S2SV_ModStart> ( & src_reg, 4",0
1270,<S2SV_ModStart> = DirectClass ; if ( image == ( image ) NULL ) break ;,0
1271,<S2SV_ModStart> ; if ( ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),0
1272,<S2SV_ModStart> ; if ( <S2SV_ModEnd> dentry ) return,0
1273,<S2SV_ModStart> ; if ( (,0
1274,<S2SV_ModStart> buffer ; int tmp <S2SV_ModEnd> count ; int,0
1275,"<S2SV_ModStart> input -> cur ) ; } if ( ( ( ctxt -> inputNr > 1024 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) ) || ( ctxt -> inputNr > 1024 ) ) { xmlFatalErr ( ctxt, xmlFreeInputStream ( ctxt ) ; return ( - 1",0
1276,"<S2SV_ModStart> } if ( le32_to_cpu ( raw_super -> segment_count ) > F2FS_MAX_SEGMENT ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> segment <S2SV_blank> count <S2SV_blank> (%u)"", le32_to_cpu ( raw_super -> segment_count ) ) ; return 1 ; } if (",1
1277,<S2SV_ModStart> ( is_path && ( is_path <S2SV_ModEnd> ( ( <S2SV_ModStart> && ( is_path && ( is_path <S2SV_ModEnd> && ( strlen ( <S2SV_ModStart> == '.' ) ) && ( is_path && ( is_path [ 7 ] == 0 ) ) ),0
1278,<S2SV_ModStart> ( * pErr <S2SV_ModEnd> ) ; } if,0
1279,<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart>! opt ) { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) ; txopt_put ( flowlabel ) ;,0
1280,<S2SV_ModStart> ; if ( skb == 10 ||,0
1281,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1282,<S2SV_ModStart> ) ; } if ( <S2SV_ModEnd> ( skb ),0
1283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1284,<S2SV_ModStart> pos + 8 <S2SV_ModEnd> ; if (,0
1285,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
1286,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; } tp -> copied_seq = seq ;,1
1287,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; if ( <S2SV_ModStart> key_data ) ; <S2SV_ModEnd> if ( key_data,0
1288,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx ) {",0
1289,<S2SV_ModStart> 1 ) ; sqlite3_int64 <S2SV_ModEnd> nByte = 0,0
1290,<S2SV_ModStart> ) ; return sock_close ( inode ) <S2SV_ModEnd> ; } <S2SV_null>,0
1291,<S2SV_ModStart> expr_ty return NULL,0
1292,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1293,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
1294,"<S2SV_ModStart> ) { case AC_VECTOR : kvm_queue_exception_e ( vcpu, AC_VECTOR, error_code ) ; return 1 ; case",1
1295,,0
1296,<S2SV_ModStart> int error ; <S2SV_ModEnd> if (!,0
1297,"<S2SV_ModStart> * sock, ""%s"",",0
1298,<S2SV_ModStart> < 0 ) { ret = chg ; goto out_err ; } <S2SV_ModEnd> if ( hugepage_subpool_get_pages <S2SV_ModStart> chg ) ) { ret = <S2SV_ModEnd> - ENOSPC ; <S2SV_ModStart> - ENOSPC ; goto out_err ; } <S2SV_ModStart> chg ) ; goto out_err <S2SV_ModEnd> ; } if <S2SV_ModStart> return 0 ; out_err : resv_map_put ( vma ) ; return ret ;,1
1299,"<S2SV_ModStart> ) ; struct ipv6_txoptions * np = rcu_read_lock ( ) ; <S2SV_ModStart> ( fl6, np -> opt ) ; rcu_dereference ( <S2SV_ModStart> np -> opt ) ; rcu_read_unlock ( ) ;",0
1300,,0
1301,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1302,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
1303,<S2SV_ModStart> <S2SV_,0
1304,"<S2SV_ModStart> ret, last_pwd, n_new_keys <S2SV_ModStart> keyblocks ) { n_new_keys = count_new_keys ( kdb -> n_key_data, kdb -> key_data ) ; <S2SV_ModStart> -> context, n_new_keys <S2SV_ModEnd>, kdb ->",1
1305,"<S2SV_ModStart> int result = RLC_ERR ; bn_t t ; result = RLC_ERR ; bn_new ( m, m_len ) ; <S2SV_ModStart> 8 ) ; result = RLC_ERR ; <S2SV_ModStart> { if ( <S2SV_ModEnd> b_is_zero ( m <S2SV_ModStart> ) ) { return RLC_OK ; } bn_zero ( m, m, m_len * 8 ) ; bn_2b ( m, m_len * 8 ) ; result = RLC_OK ; bn_zero ( m ) ; bn_2b ( m, m, m, m_len * 8 ) ; result = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart> { if ( <S2SV_ModEnd> bn_is_zero ( m <S2SV_ModStart> ) ) ; } result =",0
1306,"<S2SV_ModStart> -> length, 0,",1
1307,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1308,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1309,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1310,<S2SV_ModStart> * cm -> <S2SV_ModEnd> cm -> count,0
1311,"<S2SV_ModStart> { token ++ ; } if ( operand >= MAX_OPERANDS ) { eprintf ( ""Too <S2SV_blank> many <S2SV_blank> operands\\n"" ) ; return false",1
1312,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * xd ) <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> -> mbmi ; memset <S2SV_ModEnd> ( xd ->",0
1313,<S2SV_ModStart> ( name_name = safe_calloc <S2SV_ModEnd> ( strlen (,0
1314,<S2SV_ModStart> (! retval <S2SV_ModEnd> ) ; },0
1315,"<S2SV_ModStart> * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows ; number_planes_filled = ( number_pixels * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels = <S2SV_ModStart> -> rows ; if ( number_planes_pixels < 2 ) ThrowReaderException ( image -> columns + 1 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
1316,<S2SV_ModStart> ctl_files_rwlock ) ; mutex_init ( & card -> user_ctl_lock ) ;,1
1317,"<S2SV_ModStart> ""SIG <S2SV_blank> bytes"" ; } ( * p = s + <S2SV_ModEnd> * p ;",0
1318,<S2SV_ModStart> ; if ( <S2SV_ModEnd> len < 0 ) return,0
1319,<S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> u2_cur_slice_num = 0,0
1320,<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },1
1321,"<S2SV_ModStart> ) ; struct ipv6_txoptions * np = rcu_read_lock ( ) ; <S2SV_ModStart> ( fl6, np -> opt ) ; rcu_dereference ( <S2SV_ModStart> np -> opt ) ; rcu_read_unlock ( ) ;",0
1322,"<S2SV_ModStart> ( args -> buffer, <S2SV_ModEnd> buffer ) ; if",0
1323,"<S2SV_ModStart> int mptctl_getinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_ioctl_info karg ; <S2SV_ModEnd> int karg <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
1324,<S2SV_ModStart> len == 0 && len,0
1325,"<S2SV_ModStart> char * path, const char * rootfs <S2SV_ModStart> mntdata, optional, rootfs",1
1326,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1327,"<S2SV_ModStart> * buf, <S2SV_ModEnd> size_t len <S2SV_ModStart> ; int len ; <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ) return ; <S2SV_ModEnd> for ( context",0
1328,"<S2SV_ModStart> | O_NOCTTY, ( mode == 0 || mode == MODE_INVALID )? 0644 : mode <S2SV_ModEnd> ) ; if",1
1329,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; if <S2SV_ModStart> FALSE ; } return parse_netscreen_packet ( wth -> random_fh, phdr, buf <S2SV_ModEnd>, line, <S2SV_ModStart>, line, <S2SV_ModEnd> err, err_info <S2SV_ModStart> err_info ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1330,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ; u64 irq_time ; if ( rq -> skip_clock_update ) return <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1331,,0
1332,"<S2SV_ModStart> NULL ) { const char * argv = NULL ; <S2SV_ModStart> } else { for ( i = NULL, sizeof ( * ) - 1 ) ; for ( i = NULL ; i < argv [ i ] ; break ; <S2SV_ModStart> } else { const char * argv =",0
1333,"<S2SV_ModStart> { struct blkif_response * <S2SV_ModStart> int notify ; <S2SV_ModEnd> spin_lock_irqsave ( & <S2SV_ModStart> case BLKIF_PROTOCOL_64 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> case BLKIF_PROTOCOL_64 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> x86_32. rsp_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_64 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> case BLKIF_PROTOCOL_64 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart>. rsp_pvt_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_64 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> case BLKIF_RESPONSE ( & resp, id, id <S2SV_ModEnd> ) ; }",0
1334,<S2SV_ModStart> ; if ( entry -> value == NULL ||,0
1335,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( datao, buf_size, 12 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( data_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CORRUPT_DATA, ""Short <S2SV_blank> MakerNote"" ) ; return ; } if (",0
1336,"<S2SV_ModStart>, ""%s\'%s\',",0
1337,<S2SV_ModStart> ndo -> ndo_snapend ; ND_TCHECK_16BITS ( & ip -> ip_len ),1
1338,<S2SV_ModStart> dentry * dir <S2SV_ModEnd> ; int dir_has_key <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ),1
1339,<S2SV_ModStart>,0
1340,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; <S2SV_ModEnd> } if (",1
1341,,0
1342,<S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ),1
1343,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
1344,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> break ; } if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",0
1345,<S2SV_ModStart> void ) { recovery_started = 0 ;,0
1346,"<S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
1347,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1348,"<S2SV_ModStart> error ; } memset ( newserv, 0, sizeof ( struct service ) ) ;",1
1349,"<S2SV_ModStart> ) { WORD32 i ; memset <S2SV_ModEnd> ( ps_codec, <S2SV_ModStart> ) ; } ; <S2SV_ModEnd> } ps_codec_t *",0
1350,<S2SV_ModStart> ) -> tp_value [ 0 ],1
1351,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ;",1
1352,"<S2SV_ModStart>, int fmt, printbuffer * p <S2SV_ModStart> = 0 ; <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = p -> next ; if (! child ) return 0 ; <S2SV_ModStart> = child = p -> next ; if ( fmt == 0 ) p -> next = p -> next ; p -> next = p -> next ; if ( p -> next ) p -> next = p -> next ; else out = print_value ( p, p, p ) ; if (! p -> next ) return 0 ; <S2SV_ModStart> = p -> next ; p = p -> next ; if ( fmt = p -> next ) p -> next = 0 ; <S2SV_ModStart> = p -> next ; p = p -> next ; p -> next = p -> next ;",0
1353,"<S2SV_ModStart> int idid_len, id_len <S2SV_ModStart> ; ND_TCHECK ( * id_len ) <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> ; ND_TCHECK2 ( * id_len )",0
1354,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
1355,<S2SV_ModStart> = 0 ; lock_peer_wake_disconnect ( & sk -> peer ) ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> sock ( sk <S2SV_ModStart> = current ) ;,0
1356,<S2SV_ModStart> 4 ] ; unsigned int <S2SV_ModEnd> value ; if <S2SV_ModStart> value = ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 <S2SV_ModEnd> ; value |= <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart>. unsigned_value = <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ; return (,1
1357,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> c"", <S2SV_ModStart> y3 ) ; sendClean ( outputbuffer ) ;",0
1358,<S2SV_ModStart> size < 0 || skb -> len < skb -> len,0
1359,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; task_lock ( task <S2SV_ModEnd> ) ; ioc <S2SV_ModStart> ; ioc = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context ; task <S2SV_ModEnd> -> io_context = <S2SV_ModStart> ; task_unlock ( task <S2SV_ModEnd> ) ; if,1
1360,<S2SV_ModStart> ; int ret = 0,0
1361,<S2SV_ModStart> if ( header -> length > 1 ||,0
1362,"<S2SV_ModStart> ) { int ret = pci_read_config_word <S2SV_ModEnd> ( dev, <S2SV_ModStart> offset, value ) ; const struct pci_cmd_info * cmd = data ; * value &= PCI_COMMAND_GUEST ; <S2SV_ModEnd> * value |= <S2SV_ModStart> * value |= cmd -> val & ~ PCI_COMMAND_GUEST ; <S2SV_ModEnd> return ret ;",1
1363,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp9_get_frame_priv_t * ctx <S2SV_ModEnd>, va_list args ) <S2SV_ModStart> ( ctx, ctx -> frame_workers <S2SV_ModEnd> ) ; return",0
1364,<S2SV_ModStart> ] ) ; free_uid ( fpl -> user ) ;,1
1365,"<S2SV_ModStart> ; } } memset ( & ctx, 0, sizeof ( iocb ) ) ;",0
1366,"<S2SV_ModStart> -> dwc ; dwc3_gadget_del_and_unmap_request ( dep, req, status <S2SV_ModEnd> ) ; spin_unlock <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1367,<S2SV_ModStart> = 0 ; switch ( yyvsp [ ( 1 ) - ( yyvsp [ ( 1 ) - ( 1 ) - ( yyvsp [ ( 1 ) - ( 1 ) - ( yyvsp [ ( 1 ) - ( 1 ) - ( 1 ) - ( 1 ) ) ) ; type = ( yyvsp [ ( 1 ) - ( 1 ) - ( 1 ) - ( yyvsp [ ( 1 ) - ( 1 ) ]. String ) ; type = ( yyvsp [ ( 1 ) - ( 1 ) - ( yyvsp [ ( 1 ) - ( 1 ) - ( 1 ) - ( yyvsp [ ( 1 ) - ( 1 ) - ( 1 ) ) ] = ( yyvsp [ ( 1 ) - ( 1 ) - ( yyvsp [ ( 1 ) - ( 1 ) - ( 1 ) - ( yyvsp [ ( 1 ) - ( 1 ) - ( yyvsp [ ( 1 ) - ( yyvsp [ ( 1 ) - ( 1 ) - ( 1 ) ) - ( yyvsp [ ( 1 ) - ( 3 ) - ( yyvsp [ ( 1 ) - ( 1 ) - ( yyvsp [ ( 1 ) - ( 1 ) - ( 1 ) - ( 1 ) ) ) ) ) ;,0
1368,"<S2SV_ModStart> sas_revalidate_domain, [ <S2SV_ModEnd> DISCE_SUSPEND ] = <S2SV_ModStart> ] = sas_resume_devices <S2SV_ModEnd>, } ;",1
1369,"<S2SV_ModStart>, int no_stat, flags <S2SV_ModStart> < 0 ) { if ( no_stat == 0 || mi_stat == 0 ) { int ret = - 1 ; if ( i < 0 ) return - 1 ; }",0
1370,<S2SV_ModStart> ] ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } if (,0
1371,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1372,<S2SV_ModStart> sk -> sk_family <S2SV_ModEnd> ; struct sockaddr_in * <S2SV_ModStart> skb ) ; <S2SV_ModEnd> if ( flags <S2SV_ModStart> skb ) ; * addr_len = sizeof ( * sin6,0
1373,"<S2SV_ModStart> -= lblk ; mutex_lock ( & inode -> i_mutex ) ; if (! ( ext4_inode_flag ( inode, EXT4_GET_BLOCKS_SIZE ) ) ) { ret = - EIO ; goto out_mutex ; } if (! <S2SV_ModEnd> ( mode & <S2SV_ModStart> & FALLOC_FL_FL_KEEP_SIZE ) && offset + len > i_size_read ( inode ) ) { new_size = offset + len ; ret = - EOPNOTSUPP ; goto out_mutex ; } flags = ext4_write ; if (! <S2SV_ModEnd> ) goto out_mutex",0
1374,<S2SV_ModStart> ; } } else { free_total = buf ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1375,<S2SV_ModStart> return map ; map =,1
1376,<S2SV_ModStart> char * cp <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ++ ; const char * cp [ 2 ] = 0 ; <S2SV_ModStart> ++ ; if ( cpcount ) == 'x' || ( cp [ 2 ] == 'x' ) && ( cp [ 2 ] == '\\0' ) && ( cp [ 2 ] == 'x' ) ) { char * cp ++ ; return - 1 ; } <S2SV_ModEnd> = '\\0',0
1377,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1378,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_left < 4,1
1379,"<S2SV_ModStart> * pixp, * pixc <S2SV_ModEnd>, * <S2SV_ModStart>, pixk, * lval <S2SV_ModEnd> ) ; pix",0
1380,<S2SV_ModStart> { int i ; int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( u ) ; int <S2SV_ModEnd> vbits = BN_num_bits <S2SV_ModStart> ( v ) ; int <S2SV_ModEnd> top = p <S2SV_ModStart> ubits <= BN_BITS2 ) { if ( <S2SV_ModEnd> udp [ 0 <S2SV_ModStart> 0 ] == 0 ) goto err ; if ( udp [ 0 ] == <S2SV_ModStart> ) break ; },1
1381,<S2SV_ModStart> -> y_mv ; memset <S2SV_ModEnd> ( * this_mv,0
1382,<S2SV_ModStart> crypto_report_kpphp_k ) ; strncpy <S2SV_ModEnd> ( skb.,0
1383,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1384,"<S2SV_ModStart>, nbits ; if ( msg -> cursize > msg -> cursize ) { return 0 ; } <S2SV_ModStart> oob ) { if ( msg -> cursize + ( bits >> 3 ) > msg -> cursize ) { msg -> cursize = msg -> cursize + 1 ; return 0 ; } <S2SV_ModStart> & 7 ; if ( msg -> bit + nbits > msg -> cursize << 3 ) { msg -> cursize = msg -> cursize + 1 ; return 0 ; }",0
1385,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
1386,<S2SV_ModStart> ; out1 : cancel_work_sync ( & dev -> kevent ) ; del_timer_sync ( & dev -> delay ) ;,1
1387,<S2SV_ModStart> * length ; size_t <S2SV_ModEnd> size ) { <S2SV_ModStart> = size ; size_t <S2SV_ModEnd> size = 1,0
1388,"<S2SV_ModStart>, - 1 <S2SV_ModEnd> ) ; }",0
1389,"<S2SV_ModStart>, plen + 1",0
1390,"<S2SV_ModStart> acl ) { struct iattr iattr ; retval = posix_acl_update_mode ( inode, & iattr. ia_mode, & acl ) ; if ( retval <S2SV_ModEnd> ) goto err_out <S2SV_ModStart> goto err_out ; if (! acl ) { value = NULL ; size = 0 ; } <S2SV_ModEnd> iattr. ia_valid <S2SV_ModStart> iattr ) ; <S2SV_ModEnd> } break ;",1
1391,<S2SV_ModStart> header. types_size <S2SV_ModEnd> ) { continue,1
1392,<S2SV_ModStart> : case NPPVformValue : case NPPVpluginNativeAccessibleAtkPlugId <S2SV_ModStart> case NPPVpluginKeepLibraryInMemory : case NPPVpluginUrlRequestsDisplayedBool : case NPPVpluginWantsAllNetworkStreams : case NPPVpluginCancelSrcStream : case NPPVSupportsAdvancedKeyHandling :,1
1393,"<S2SV_ModStart> len ) { <S2SV_ModEnd> int res ; <S2SV_ModStart> - 1 ; size_t res ; size_t len ; size_t len ; <S2SV_ModStart> ( & len, <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( res ) ||! res ) { free ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> char *",0
1394,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
1395,"<S2SV_ModStart>, int i ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> frame_type == KEY_MB_MAX_MB_MB_MAX ) { target_bits_to_q = ( cpi, target_bits_per_per_mb, target_q, target_size, target_size ) ; } else <S2SV_ModStart> ) ; } <S2SV_ModEnd> } else if",0
1396,"<S2SV_ModStart> ( interface, NULL ) ; return 0",0
1397,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1398,<S2SV_ModStart> ) ) ; ND_TTEST ( * ps ) ;,0
1399,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> data ) ;",1
1400,<S2SV_ModStart> ; if ( <S2SV_ModEnd> mutex ) return,0
1401,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
1402,"<S2SV_ModStart> * dst, vpx_reader <S2SV_ModEnd> * src_stride, <S2SV_ModStart> int i ; memset <S2SV_ModEnd> ( dst_stride, <S2SV_ModStart> int i ; memset <S2SV_ModEnd> ( dst_stride, <S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( dst_stride,",0
1403,<S2SV_ModStart> end ) ; <S2SV_ModEnd> } if (,0
1404,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 0 ) { if ( strlen ( str ) > 0 ) return - 1 ;,0
1405,"<S2SV_ModStart> * jas_iccprof_createfrombuf ( jas_uchar <S2SV_ModEnd> * buf,",1
1406,<S2SV_ModStart> -> i_inode_flags ; ei = NULL ;,0
1407,<S2SV_ModStart> ) ; } if (! memcg ) return - EINVAL ;,0
1408,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> ; return handle <S2SV_ModEnd> ; } <S2SV_null>",1
1409,"<S2SV_ModStart> cm, struct vpx_write_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
1410,<S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; },1
1411,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
1412,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1413,<S2SV_ModStart> = KEY_FRAME ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( pc ->,0
1414,"<S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_ESTAT <S2SV_ModEnd> ) { uint16_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_E_ESTAT ) <S2SV_ModStart> ( interface, ENC624J600_EID <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_ESTAT_TX_SIZE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_EST <S2SV_ModEnd> ) ; }",0
1415,<S2SV_ModStart> ] == 0x01 && i < gemsafe_cert_max,1
1416,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1417,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VALUE parse_memory ( int argc, VALUE parse_options ) <S2SV_ModEnd> ; read_memory ( <S2SV_ModStart> 0 ) ) ; read_memory ( argc, & parse_options ) ;",0
1418,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> info -> par <S2SV_ModEnd> ; vma -> <S2SV_ModStart> _CACHE_MASK ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> ( vma, fbdev -> fb_phys, fbdev -> fb_len <S2SV_ModEnd> ) ; }",1
1419,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1420,<S2SV_ModStart> += 4 ; ( * state -> xsize = 0 ; <S2SV_ModStart> + 2 ; ( & 0x8 ) ; <S2SV_ModStart> & 0x4 ) ; <S2SV_ModEnd> out = buf,0
1421,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1422,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1423,<S2SV_ModStart> out ) ; goto out <S2SV_ModEnd> ; } if,0
1424,<S2SV_ModStart> ( handle ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1425,"<S2SV_ModStart> * u, u8_t <S2SV_ModEnd> len, uint16_t <S2SV_ModStart> u ; int size_t len ; <S2SV_ModStart> * out ; if ( len < 2 ) { return - 1 ; <S2SV_ModStart> S2SV_null> <S2SV_null> <S2SV_null>",0
1426,"<S2SV_ModStart>, i ; if (! ( s -> state & PNG_IHDR ) ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> before <S2SV_blank> IHDR\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> state & PNG_IDAT ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> after <S2SV_blank> IDAT\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart>!= 6 ) || s -> bit_depth == 1",1
1427,<S2SV_ModStart> ; } } rc =,0
1428,<S2SV_ModStart> } dt -> proto = IP_GET_IPPROTO ( p ) ; dt ->,1
1429,"<S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( status & KSZ8851_RXFD <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_RXFL <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_RTR <S2SV_ModEnd> ) ; }",0
1430,"<S2SV_ModStart> const node * n0, bool <S2SV_ModEnd> is_async ) { <S2SV_ModStart> is_async ) { <S2SV_ModEnd> return NULL ; <S2SV_ModStart>, annotation, <S2SV_ModEnd> type_comment",0
1431,<S2SV_ModStart> ;,0
1432,"<S2SV_ModStart> ( AUDIT_APPARMOR_DENIED, __aa_current_profile ( ), GFP_KERNEL, & sa, NULL <S2SV_ModEnd> ) ; }",1
1433,"<S2SV_ModStart> uint_fast8_t tmp ; siz -> comps = 0 ; <S2SV_ModStart> ) ) { goto error ; } if (! siz -> width ||! siz -> width ||! siz -> tileheight ) { jas_eprintf ( ""invalid <S2SV_blank> image <S2SV_blank> area\\n"" ) ; goto error ; } if (",0
1434,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
1435,"<S2SV_ModStart>, xmi_data, xmi_size,",1
1436,"<S2SV_ModStart> size_t total_len ; struct iov_iter iter ; <S2SV_ModStart> ) return 0 ; iov_iter_init ( & iter, iov, nr_segs, total_len, 0 ) <S2SV_ModStart> -> ops ; <S2SV_ModEnd> size_t chars = <S2SV_ModStart> buf -> len ; size_t chars ; int error <S2SV_ModEnd> break ;",0
1437,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> Quantum index ; <S2SV_ModStart> ++ ) { next_pixel = MagickFalse ; displacement = 1 ; <S2SV_ModStart> -= MaxHashTable ; if ( k < 0 ) continue <S2SV_ModEnd> ; if (,0
1438,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1439,<S2SV_ModStart> { p_fm_conx_hdl ) ; <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> 0 ) { res = <S2SV_ModEnd> free ( hdl <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } <S2SV_null>,0
1440,"<S2SV_ModStart> size_t max_mem ; size_t max_samples ; size_t max_samples ; <S2SV_ModStart> 0 ] ; max_samples = 64 * JAS_CAST ( optstr <S2SV_ModEnd>, fmtid, <S2SV_ModStart> 0 ] ; max_samples = 64 * JAS_CAST ( optstr, 0, <S2SV_ModStart> 0 ; break ; case <S2SV_ModStart> 0 : printf ( ""%s: <S2SV_blank> %ld\\n"", <S2SV_ModEnd>, fmtid, <S2SV_ModStart> 0 ] ) ) { jas_eprintf ( ""%s: <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> name <S2SV_blank> %ld\\n"", <S2SV_ModEnd>, fmtid, <S2SV_ModStart>, fmtid, JAS_CAST ( long, <S2SV_ModEnd> jas_image_samples )",0
1441,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( config,0
1442,<S2SV_ModStart> ; if ( ret == NULL ) return ret ; if (,0
1443,<S2SV_ModStart> row = 0 <S2SV_ModEnd> ; } if,0
1444,<S2SV_ModStart> ; size = dm -> data_size <S2SV_ModEnd> ; if (,0
1445,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
1446,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> = vmu_irq_info ( kvm, cpu_info <S2SV_ModEnd> ) ; if",0
1447,<S2SV_ModStart> ) ) { hq -> hq -> hq = NULL ;,0
1448,<S2SV_ModStart> else { return false <S2SV_ModEnd> ; } case,1
1449,"<S2SV_ModStart> = 0 ; memset ( sa, 0, sizeof ( sa ) ) ;",0
1450,<S2SV_ModStart> (! handle ||! SecIsValidHandle ( handle ),1
1451,<S2SV_ModStart> = 1 ; <S2SV_ModEnd> return 1 ;,0
1452,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
1453,<S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> DATA_ENSURE ( 1 <S2SV_ModStart> ++ ; s <S2SV_ModEnd> ++ ; MOP_OUT,1
1454,<S2SV_ModStart> [ plane ] <S2SV_ModEnd> ; plane =,0
1455,<S2SV_ModStart> = - EINVAL ; msg -> msg_namelen = 0,0
1456,"<S2SV_ModStart> mntent, path, NULL",0
1457,<S2SV_ModStart> = hash ; if ( sr -> vm_file == NULL ) return - 1 ;,0
1458,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) return NULL ; } * dest_keyring = dest_keyring ; <S2SV_ModStart> ) ; } * dest_keyring = dest_get_keyring ;,0
1459,"<S2SV_ModStart> * cpi, MACROBLOCKD * const x, MACROBLOCKD * const xd <S2SV_ModEnd>, MACROBLOCKD * <S2SV_ModStart> -> mb ; <S2SV_ModEnd> for_mode_info_info = <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, mi_row, <S2SV_ModStart> bsize ) ; <S2SV_ModEnd> } }",0
1460,<S2SV_ModStart> NETIF_F_SG <S2SV_ModEnd> ; if ( <S2SV_ModStart> NETIF_F_SG <S2SV_ModEnd> ; if (,0
1461,<S2SV_ModStart> = NULL ; } if ( <S2SV_ModStart> r ) ) { <S2SV_ModEnd> err = 0,0
1462,"<S2SV_ModStart> pixel_info ) ; ( void ) ResetMagickMemory ( pixels, 0, pixel_info_length ) ;",1
1463,<S2SV_ModStart> buffer ; int tmp <S2SV_ModEnd> count ; int,0
1464,<S2SV_ModStart> 1 ; } if ( memRange == 0 ) return - 1 ;,0
1465,<S2SV_ModStart> ; if ( is_address ( <S2SV_ModEnd> ) ) &&,0
1466,"<S2SV_ModStart> ; if ( cat_c, c ) return 0 ;",0
1467,<S2SV_ModStart> ; if ( cmptpages < 0 ) { goto error ; } if (,0
1468,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } if (,0
1469,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",1
1470,<S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> if (!,0
1471,"<S2SV_ModStart> int flags ; ND_TCHECK2 ( tptr [ 0 ], 5 ) ; <S2SV_ModStart> tlen = len <S2SV_ModEnd> ; ND_PRINT (",0
1472,<S2SV_ModStart> if ( res -> outputbuffer,0
1473,"<S2SV_ModStart> ( src, memcpy <S2SV_ModEnd> ( src_width,",0
1474,<S2SV_ModStart> ) ) ; if ( len <= 4 ) { return false ; },0
1475,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1476,"<S2SV_ModStart> iovec, compat, & iter <S2SV_ModStart> len, iovec, & iter <S2SV_ModStart> len, & iter",0
1477,"<S2SV_ModStart> } if ( ptr - c -> rcurr > 100 || ( strncmp ( ptr, ""get <S2SV_blank> "", 4 ) && strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "", 5 )",0
1478,<S2SV_ModStart> dev ) ; if (! desc -> bLength ) return 0,0
1479,"<S2SV_ModStart>, sizeof ( config -> bNum + 2",0
1480,<S2SV_ModStart> ; int err ; ue -> card = card ->,0
1481,"<S2SV_ModStart> client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) { exit_client ( client_p, client_p, client_p, ""Malformed <S2SV_blank> AUTHENTICATE""",1
1482,<S2SV_ModStart> ctxt -> rip_relative && likely ( ctxt -> memopp ),1
1483,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1484,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1485,<S2SV_ModStart> ; else { memset <S2SV_ModEnd> ( xd ->,0
1486,<S2SV_ModStart>,0
1487,"<S2SV_ModStart> * psf ; if ( memset ( psf -> header, sizeof ( psf -> header ) ) ; <S2SV_ModStart> * len ; psf -> header = <S2SV_ModEnd> ( psf -> <S2SV_ModStart> psf -> header. header. header. header",0
1488,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
1489,"<S2SV_ModStart> ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> to <S2SV_blank> %s"", __func__, header ) ; pool_failed ( pool ) ; return false ; } <S2SV_ModEnd> if (",0
1490,<S2SV_ModStart> ( ctx ) <S2SV_ModEnd> cpi ) ;,0
1491,<S2SV_ModStart> case EXIT_REASON_VMON : case EXIT_REASON_INVEPT :,1
1492,<S2SV_ModStart>,0
1493,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1494,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return - EFAULT ;,0
1495,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
1496,<S2SV_ModStart> * L ; ASSERT ( L ) ;,0
1497,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1498,"<S2SV_ModStart>, n = STR ( n0 <S2SV_ModEnd> ) ; char <S2SV_ModStart> n += 1 <S2SV_ModEnd> ; if (",0
1499,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( option_name <S2SV_ModStart> else if ( option_name == 0 ) { svc_ctx_value =2SV_null> <S2SV_null>,0
1500,<S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> if (!,0
1501,<S2SV_ModStart>,0
1502,<S2SV_ModStart> ; if ( entry == NULL ) return EINVAL ; if ( <S2SV_ModStart> KADM5_POLICY ) && entry -> policy == NULL <S2SV_ModEnd> ) return KADM5_BAD_MASK <S2SV_ModStart> ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK <S2SV_ModEnd> ; if (,1
1503,<S2SV_ModStart> frame -> data [ plane ] && frame -> linesize <S2SV_ModStart> [ plane ] && frame -> linesize [ plane ],1
1504,"<S2SV_ModStart> { memcpy <S2SV_ModEnd> ( v,",0
1505,"<S2SV_ModStart> * new_memo, size_t new_memo_size <S2SV_ModEnd> ) { if",0
1506,,1
1507,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( op,0
1508,<S2SV_ModStart> p ) ; <S2SV_ModEnd> } if (,0
1509,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size ) <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1510,"<S2SV_ModStart>, phdr, phdr",0
1511,<S2SV_ModStart> 1 + 1 - 1,0
1512,<S2SV_ModStart>,0
1513,<S2SV_ModStart> while ( offset > 0 && offset <S2SV_ModStart> < end_offset ) { <S2SV_ModStart> hf_keybuffer ) ; },1
1514,<S2SV_ModStart> ++ ) { if ( len!= GFP_KERNEL ) goto out_free ;,0
1515,<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * oxcf = <S2SV_ModStart> = 0 ; int target <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = INT_MAX_MAX / 2 ; if ( cpi -> oxcf. gf_mode == 2 ) { int target = 0 ; if ( ( cpi -> oxcf. starting_boost = & cpi -> frames_to_mode == 2 ) / 2 ; if ( cpi -> oxcf. gf_boost = rc -> frames_to_boost = 0 ; } else { int target = ( cpi -> frames_to_boost = 0 ; if ( ( rc -> frames_to_boost = 0 ; } ) <S2SV_ModEnd> = ( <S2SV_ModStart> ( rc -> frames_to_boost = <S2SV_ModEnd> ; } <S2SV_null>,0
1516,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1517,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; else if ( ret <= size ) memcpy ( data, buf, ret ) ; kfree ( buf ) ;",0
1518,"<S2SV_ModStart> int tx_mode, vpx_read_bit <S2SV_ModEnd> * r ) <S2SV_ModStart> { read_mode = vpx_read_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ; } return vpx_read <S2SV_ModEnd> ( r,",0
1519,<S2SV_ModStart> op + OSPF6HDR_LEN ) ; ND_TCHECK_32BITS ( & hellop -> hello_options,1
1520,<S2SV_ModStart> { if ( datalen!= 1 ) return - EINVAL ; if (,1
1521,<S2SV_ModStart> rc ) { struct task_struct * <S2SV_ModEnd> task = task <S2SV_ModStart> ; if ( IS_ERR ( task ) ) { <S2SV_ModStart> uwbd. task = NULL ; <S2SV_ModEnd> rc -> uwbd <S2SV_ModStart> pid ; } },0
1522,<S2SV_ModStart>,0
1523,<S2SV_ModStart> : idx ; assert ( ptr >= gfx -> backendData && ptr < ( ( char * ) gfx -> backendData + graphicsGetMemoryRequired ( gfx ) ) ) ;,1
1524,"<S2SV_ModStart> ] ; struct td ; MACROBLOCK * const x = args ; MACROBLOCK * const x ; MACROBLOCK * const xd = & td -> mb ; MACROBLOCKD * const xd = & td -> mbmi ; MACROBLOCKD * const xd = & td -> mbmi -> mbmi_ext ; MACROBLOCKD * const xd = & td -> mbmi_ext ; <S2SV_ModStart> ] ; # if CONFIG_VP9_HIGHBITDEPTH if ( tx_size > tx_size ) { <S2SV_ModStart> 8_size ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( tx_size > BLOCK_SIZE tx_size ) { <S2SV_ModStart> 2 ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_size ) { <S2SV_ModStart>, tx_size, tx_size, tx_size, <S2SV_ModEnd> ) ; } else <S2SV_ModStart> ) ) ; } }",0
1525,<S2SV_ModStart> ; if ( pFlags & SF_View ) return WRC_Prune ; if (,0
1526,<S2SV_ModStart> { if ( ( <S2SV_ModStart> shmflg & SHM_RND ) && addr >= shmlba,1
1527,<S2SV_ModStart> ; serv_info = 0 ;,0
1528,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1529,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1530,<S2SV_ModStart> : case NPNVSupportsWindowless : case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling,1
1531,<S2SV_ModStart> int ret = NULL <S2SV_ModEnd> ; if (,0
1532,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 )",0
1533,"<S2SV_ModStart>, arg ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
1534,"<S2SV_ModStart>, ""%s\'%s\',",0
1535,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * const SvcInternal_t <S2SV_ModStart> NULL ; if ( SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,0
1536,<S2SV_ModStart> mq_ops ) ; q -> mq_ops = NULL ;,0
1537,"<S2SV_ModStart> s ) { uint32 length ; struct stream packet = * s <S2SV_ModEnd> ; ber_parse_header ( <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> params <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",1
1538,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } if (,0
1539,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; _y4m = <S2SV_ModStart> -> chroma_stride ) { _y4m = _y4m -> chroma_stride [ i4m + 1 ],0
1540,<S2SV_ModStart> ) { return FALSE <S2SV_ModEnd> ; } if,0
1541,<S2SV_ModStart> { if ( table_start_start_start_start <S2SV_ModEnd> ( & table_start <S2SV_ModStart> ) ) { if ( table_start_start <S2SV_ModEnd> ) return FALSE <S2SV_ModStart> ; if ( table_start_start <S2SV_ModEnd> ) return FALSE <S2SV_ModStart> return FALSE ; if ( table_start!= NULL ) return FALSE <S2SV_ModStart> return FALSE ; } if ( table_start_start_start_start_start <S2SV_ModEnd> ( & s.,0
1542,"<S2SV_ModStart> rule * rule, const char * rule <S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;",0
1543,<S2SV_ModStart> if ( ( skb_hdr_len < 0 ) ||,0
1544,"<S2SV_ModStart> seg_map ) ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( seg -> <S2SV_ModStart> cm -> mi_cols ) ; memset <S2SV_ModEnd> ( seg ->",0
1545,<S2SV_ModStart>,0
1546,"<S2SV_ModStart> } else { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ), O_TRUNC ) ; }",0
1547,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ; break ; } while ( context -> pass > 0 && context -> pass < 4 && context -> curY >= p -> height ) { switch ( ++ context -> pass ) { case 2 : context -> curY = i -> posY + 4 ; break ; case 3 : context -> curY = i -> posY + 2 ; break ; case 4 : context -> curY = i -> posY + 1 ; break ; },1
1548,<S2SV_ModStart> ; # endif memset <S2SV_ModEnd> ( x ->,0
1549,"<S2SV_ModStart> ) ; } smb_ofile_flush <S2SV_ModEnd> ( sr, <S2SV_ModStart> f_mutex ) ; smb_ofile_flush <S2SV_ModEnd> ( sr,",1
1550,"<S2SV_ModStart> * u, u8_t <S2SV_ModEnd> len, uint16_t <S2SV_ModStart> u ; int size_t len ; <S2SV_ModStart> * out ; if ( len < 2 ) { return - 1 ; <S2SV_ModStart> S2SV_null> <S2SV_null> <S2SV_null>",0
1551,"<S2SV_ModStart> ; if ( * cp == '\\0' || <S2SV_ModEnd> strchr ( cp <S2SV_ModStart> )!= NULL || <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ( cp, ""."" ) == 0 || strcmp ( cp, <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { run_err",1
1552,"<S2SV_ModStart> * t ) { <S2SV_ModEnd> i, c0 <S2SV_ModStart> * ) { <S2SV_ModEnd> = 0 ; <S2SV_ModStart> } if ( * c2 <S2SV_ModEnd> == '\\0' ) <S2SV_ModStart> ) return ( <S2SV_ModEnd> 0' ) ; <S2SV_ModStart> ; if ( * c == '\\0' || ( c!= '\\0' ) return ( - 1 ) ; } if ( <S2SV_ModEnd> ) { printf <S2SV_ModStart> ( outbuffer ) ; <S2SV_ModEnd> == '\\0' ) <S2SV_ModStart> ; exit ( <S2SV_ModEnd> ) ) ; } } if",0
1553,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( ms ) ; return 0 ;,0
1554,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart>, id ; if ( unlikely ( siphash_key_is_zero ( & net -> ipv4. ip_id_key ) ) ) return ; <S2SV_ModStart>, sizeof ( net -> ipv4. ip_id_key <S2SV_ModEnd> ) ; id",0
1555,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_left ) < 0 ) { return 1 ; } if ( tmp == NULL ) { goto failed ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> from <S2SV_blank> expr"" ) ; return 1 ; } else <S2SV_ModEnd> ; res = <S2SV_ModStart> int res ; res = obj2ast_expr ( tmp, & lineno, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> obj, & PyId_iter, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { return 1 ; } if ( tmp == NULL || tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; } else { return 1 ; } else { int res ; <S2SV_ModStart> tmp, & res <S2SV_ModEnd> ) ; }",0
1556,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
1557,"<S2SV_ModStart> ctl -> pw, "".chfn""",1
1558,<S2SV_ModStart> { if ( max_length < sizeof ( struct ieee80211_radiotap_header ) ) return - EINVAL ; if ( <S2SV_ModStart> iterator -> _rtheader + sizeof ( uint32_t ),1
1559,"<S2SV_ModStart> int err; if ( <S2SV_ModStart>, kfree ) { err = - EINVAL ; goto err ; } <S2SV_ModStart>, kfree ( list ) ; return - EOPNOTSUPP <S2SV_ModEnd> ; } <S2SV_null>",0
1560,<S2SV_ModStart> ] ) ; if ( src -> cur_state -> curframe ) return - EINVAL ;,0
1561,"<S2SV_ModStart> return ; } if ( input <= 0.0 || output <= 0.0 ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Gamma <S2SV_blank> values <S2SV_blank> should <S2SV_blank> be <S2SV_blank> positive"" ) ; RETURN_FALSE ; }",1
1562,<S2SV_ModStart> ; if ( pass == VPX_RC_PASS <S2SV_ModEnd> ) continue ; if <S2SV_ModStart> = VPX_RC_PASS <S2SV_ModEnd> = 0 ;,0
1563,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1564,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! key_name ) {,0
1565,<S2SV_ModStart> * cm -> common ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> * tile_rows ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> tile_cols ) ; memset <S2SV_ModEnd> ( pbi -> <S2SV_ModStart> tile_cols ) ; memset <S2SV_ModEnd> ( cm ->,0
1566,<S2SV_ModStart> pbi ) { vpx_codec_init <S2SV_ModEnd> * oxcf = <S2SV_ModStart> pbi -> last_frame_frame ; vpx_read <S2SV_ModEnd> ( ) <S2SV_ModStart> ; vpx_read <S2SV_ModEnd> ( ) <S2SV_ModStart> pbi -> last_frame_frame_frame = 0 ; vpx_read <S2SV_ModEnd> ( ) <S2SV_ModStart> ; vpx_read <S2SV_ModEnd> ( ) <S2SV_ModStart> ; pbi -> last_frame_frame_frame_data <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ; vpx_read <S2SV_ModEnd> ( ) ;,0
1567,<S2SV_ModStart> ) ) { if (,0
1568,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> if ( client,0
1569,<S2SV_ModStart> -> count ; new_fpl -> user = get_uid ( fpl -> user ) ;,1
1570,"<S2SV_ModStart> ; struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> && opt = rcu_dereference_protected ( inet_inet_opt, opt ) <S2SV_ModEnd> ; if (",0
1571,"<S2SV_ModStart> * tree, vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> int l, vpx_tree <S2SV_ModEnd> * tree )",0
1572,"<S2SV_ModStart> ( ctx, <S2SV_ModEnd> flags & <S2SV_ModStart> flags & VPX_CODEC_OK ) ) { vpx_codec_err_t res ; } else { <S2SV_ModStart> ) ) ; }",0
1573,<S2SV_ModStart> -> ctxid = __func_init <S2SV_ModEnd> ( & ctx,0
1574,"<S2SV_ModStart> ) ; struct mnt_namespace * ns = dest_mnt -> mnt_ns ; struct <S2SV_ModStart> ; if (! parent_path ) { err = count_mounts ( ns, source_mnt <S2SV_ModEnd> ) ; if <S2SV_ModStart> goto out ; } if ( err ) { err = count_mounts ( dest_mounts, source_mnt <S2SV_ModEnd> ) ; <S2SV_ModStart> goto out ; }",0
1575,"<S2SV_ModStart>, & len, 0",1
1576,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = _mm_set1_epi16 ( ( int16_t ),0
1577,"<S2SV_ModStart> int update_pct, const <S2SV_ModStart> * oxcf, int64_t rc <S2SV_ModEnd> ) { if",0
1578,<S2SV_ModStart> if ( buf [ MIFLEN + MAX_MAGICLEN + 1 ],0
1579,"<S2SV_ModStart> void * fout, int maxsize <S2SV_ModStart> NULL, fout, maxsize",0
1580,"<S2SV_ModStart> * cpi, ThreadData * td, MACROBLOCK * const x <S2SV_ModEnd>, MODE_INFO * <S2SV_ModStart> -> skip_mbd ; MACROBLOCK * const x -> td. mbmi = & cpi -> td. mbmi -> mbmi. mbmi ; <S2SV_ModStart> x = & x -> mbmi. mbmi <S2SV_ModEnd> ; x -> <S2SV_ModStart> = cpi -> skip ; # if CONFIG_VP9_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. skip_t ) { <S2SV_ModStart> = cpi -> skip ; } else { <S2SV_ModStart> } } } } }",0
1581,"<S2SV_ModStart>, sizeof ( config -> bNum + 2",0
1582,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> ] ; struct crypto_cipher * tfm_des <S2SV_ModEnd> ; str_to_key ( <S2SV_ModStart> ; tfm_des = crypto_alloc_cipher ( ""des"" <S2SV_ModEnd>, 0, <S2SV_ModStart>, 0, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ) { <S2SV_ModEnd> cifs_dbg ( VFS <S2SV_ModStart> ; } <S2SV_null>",0
1583,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header,0
1584,"<S2SV_ModStart> u32_max, int32_t value, <S2SV_ModStart> ; int i ; size_t value_max <S2SV_ModEnd> = 0 ; <S2SV_ModStart> 0 ) { if (! k - 1 ) return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 0 ) { if (! j < 1 ) return AVERROR_INVALIDDATA ; } <S2SV_ModStart> += 4 ; value ++ ;",0
1585,<S2SV_ModStart> i > pos + delta <S2SV_ModStart> off + 1 <= pos + delta <S2SV_ModEnd> ) insn ->,1
1586,<S2SV_ModStart> case EXIT_REASON_INVEPT : case EXIT_REASON_INVVPID :,1
1587,<S2SV_ModStart> ; if ( <S2SV_ModEnd> { if (,0
1588,<S2SV_ModStart> = 0 ; packet ->,0
1589,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1590,"<S2SV_ModStart> ++ r ; if <S2SV_ModEnd> ( pow ( <S2SV_ModStart>, dim ) <= entries ) return - 1 ; if <S2SV_ModEnd> ( ( int <S2SV_ModStart> dim ) ) > entries ) return - 1 <S2SV_ModEnd> ; return r",1
1591,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> ; } } return ( <S2SV_ModStart> dds_info, 8, exception ) ) <S2SV_ModEnd> ; } <S2SV_null>",1
1592,<S2SV_ModStart> ; if ( skb == 10 ||,0
1593,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } if (,0
1594,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL )",0
1595,"<S2SV_ModStart>, ""12f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> c"", hbuffer ) ;",0
1596,"<S2SV_ModStart> cfg ) { struct stat st ; FILE * file = NULL ; int fd = - 1 ; <S2SV_ModStart> } else { fd = open ( fd <S2SV_ModEnd> "" ) ; <S2SV_ModStart> = file ; <S2SV_ModEnd> } } } else if",0
1597,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! f2fs_readonly (,1
1598,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1599,"<S2SV_ModStart> y12 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f\\n"", <S2SV_ModStart> y1 ) ; sendClean ( outputbuffer ) ;",0
1600,<S2SV_ModStart> ; if ( tlen < 0 ) return FALSE,0
1601,<S2SV_ModStart> user ) ; kreturn 0 ;,0
1602,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( w +",0
1603,<S2SV_ModStart> == ARPHRD_ETHER ) { <S2SV_ModStart> ether_setup ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; },1
1604,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (",1
1605,<S2SV_ModStart> b,0
1606,<S2SV_ModStart> { if ( l == NULL ) break ; if (,1
1607,<S2SV_ModStart> { if ( ( <S2SV_ModStart> xWantedSize + xWantedSize + <S2SV_ModEnd> ( (,0
1608,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1609,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1610,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpDiff"", ""%s"", ""(cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> cp -- ) return 1 ;",1
1611,<S2SV_ModStart> ; uint16 * i <S2SV_ModEnd> ; uint16 * <S2SV_ModStart> ; uint16_t i ; if (!,0
1612,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if (!,0
1613,"<S2SV_ModStart> = 0 ; ND_TCHECK2 ( * tptr, sizeof ( * tptr ) ) ;",0
1614,<S2SV_ModStart> { uint16 bitspersample = 1,0
1615,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1616,"<S2SV_ModStart> * cpi, vpx_probs * coef_size <S2SV_ModEnd> coeff_size ) { <S2SV_ModStart> ] ; vpx_prob <S2SV_ModEnd> coeff_probs = cpi",0
1617,<S2SV_ModStart> char * name <S2SV_ModEnd> ; if (,0
1618,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x86 ; state -> data [ 2 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state",0
1619,<S2SV_ModStart> ) ; return sock_close ( inode ) <S2SV_ModEnd> ; } <S2SV_null>,0
1620,"<S2SV_ModStart> * cfg, <S2SV_ModEnd> codec_alg_priv_t * <S2SV_ModStart> vp9_codec_alg_cfg_priv_t * flags ; } if (",0
1621,"<S2SV_ModStart> int uv_stride, vpx_prob <S2SV_ModEnd> * uv_stride, <S2SV_ModStart> = VPX_HIGHBITDEPTH <S2SV_ModEnd> ( uv_ptr, <S2SV_ModStart> stride, uv_stride <S2SV_ModEnd>, stride_ptr, <S2SV_ModStart> stride, uv_stride <S2SV_ModEnd> ) ; if",0
1622,<S2SV_ModStart> char * buf <S2SV_ModEnd> ; if (,0
1623,"<S2SV_ModStart> * n, int i, <S2SV_ModEnd> * ) { <S2SV_ModStart> [ i ], <S2SV_ModEnd> * ) ; <S2SV_ModStart> } if ( n == 0 ) { cJSON_Delete ( p, cJSON_Delete ( ) ; } else { cJSON_Delete ( p, cJSON_Delete ( p ) ; ) ; }",0
1624,<S2SV_ModStart> goto retry ; <S2SV_ModEnd> if ( task,0
1625,"<S2SV_ModStart> * bbh ; struct udf_data <S2SV_ModEnd> * addr ; <S2SV_ModStart>, & iinfo -> iinfo. len <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= NULL ) <S2SV_ModEnd> goto out ; <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if (!",0
1626,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
1627,"<S2SV_ModStart>, len ) ; <S2SV_ModEnd> if ( a",0
1628,<S2SV_ModStart> * cm ; <S2SV_ModEnd> int i ; <S2SV_ModStart> 1 ; const VP9_COMMON * cm -> tile_rows ; <S2SV_ModEnd> int i <S2SV_ModStart> i ) { for ( i = 0 ; i < tile_tile_rows ; ++ i ++ i ++ ) { for ( i = 0 ; i < tile_tile_rows ; i ++ ) { for ( i = 0 ; ++ i < i ++ ) { i ++ i ++ ) ; ++ i ++ i ++ ) { for ( i = 0 ; i < i ++ ) ; ++ i ++ i ++ i ++ i ++ i ++ ) ; ++ i ++ i ++ i <S2SV_ModStart> ) ) { for ( i = 0 ; i < tile_tile_tile_tile_rows ; i ++ ) { i ++ i ++ i ++ i ++ ) ; ++ i ++ ) ; ++ ; <S2SV_ModStart> ) { for ( i = i < tile_tilebuf [ i ] ; i ] ; i ++ ) { for ( i = 0 ; i < num_tile. data [ i ] ; ++ ) ; ++ i ++ i ++ i ++ ) { for ( i = 0 ; ++ i < i ++ i ++ ) ++ i ++ i ++ i ++ ) ; ++ ; ++ i ++ i ++ i ++,0
1629,<S2SV_ModStart> ; # ifdef LIBRAW_LIBRARY_WARNING <S2SV_ModEnd> ; # if,0
1630,<S2SV_ModStart> out ) ; goto out <S2SV_ModEnd> ; } if,0
1631,"<S2SV_ModStart> cpi ) { vpx_read_system_state ( cm ) ; <S2SV_ModStart> int i ; vpx_read_segment_depth <S2SV_ModEnd> ( seg, <S2SV_ModStart> cm ) ; vpx_clear_segdata <S2SV_ModEnd> ( seg, <S2SV_ModStart> i ] = 1 ; if ( segfeature_active_active_state ( segfeature_active <S2SV_ModEnd> ) { <S2SV_ModStart> cm ) ; }",0
1632,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1633,"<S2SV_ModStart> ( void ) TIFFGetFieldDefaulted <S2SV_ModEnd> ( in,",1
1634,<S2SV_ModStart> ( error_code = NULL <S2SV_ModEnd> -> error_code =,0
1635,<S2SV_ModStart> 0 ) ; if ( i < len ) return - 1,0
1636,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1637,"<S2SV_ModStart> ""corrupt <S2SV_blank> BSON"" ) ; VALIDATE_TEST ( ""test59.bson"", BSON_VALIDATE_NONE, 9, BSON_VALIDATE_NONE, ""corrupt <S2SV_blank> BSON"" ) ;",1
1638,<S2SV_ModStart> x86_pmu_enabled <S2SV_ModEnd> ; if (,0
1639,"<S2SV_ModStart> * ps_cur_slice_params, <S2SV_ModEnd> * ps_dec ->",0
1640,<S2SV_ModStart> ) ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock,0
1641,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; if ( <S2SV_ModStart> key_data ) ; <S2SV_ModEnd> if ( key_data,0
1642,"<S2SV_ModStart> ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
1643,<S2SV_ModStart> ( task -> user == <S2SV_ModEnd> ) ) return,0
1644,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x86 ; state -> data [ 2 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state",0
1645,<S2SV_ModStart> char * prefix <S2SV_ModEnd> ; if (,0
1646,<S2SV_ModStart> L ) ; g -> gcstate = GCSswpallgc ;,0
1647,<S2SV_ModStart> - EIO ; if ( ret < 0 ) return - EINVAL ;,0
1648,"<S2SV_ModStart> ) ) { struct ssl_read <S2SV_ModEnd> * ssl_reply = <S2SV_ModStart> ; if ( <S2SV_ModEnd> options ) { <S2SV_ModStart> return NULL ; } } s_read ( buffer, ssl_reply, ssl_request, ssl_request <S2SV_ModEnd>, 0, <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1649,<S2SV_ModStart> cib ) { <S2SV_ModEnd> int cib <S2SV_ModStart> = 0 ; int disconnected <S2SV_ModEnd> = 0 ; <S2SV_ModStart> cib -> remote_socket = NULL ; int disconnected <S2SV_ModEnd> = NULL ; <S2SV_ModStart> cib -> remote_socket = NULL ; if ( len < 0 ||! cib -> remote_socket ) { <S2SV_ModStart> cib ) ; } <S2SV_ModEnd> cib -> socket <S2SV_ModStart> cib -> socket = NULL ; } if ( len < 0 ) { <S2SV_ModStart> = NULL ; } } ret = sizeof ( crm_error ) ;,0
1650,<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; } } <S2SV_ModEnd> cpi ->,0
1651,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; if",0
1652,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",1
1653,<S2SV_ModStart> ( bp [ 0 <S2SV_ModEnd> ] ) ;,0
1654,"<S2SV_ModStart> ctx, expr -> unary. child",1
1655,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1656,"<S2SV_ModStart> int mptctl_ioctl_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mptctl_ioctl_command karg <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
1657,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int ( <S2SV_ModStart> 2SV_null> <S2SV_null> <S2SV_null>,0
1658,<S2SV_ModStart> ) ; goto error <S2SV_ModEnd> ; } if,0
1659,<S2SV_ModStart> == 0 ) <S2SV_ModEnd> ; if (,0
1660,"<S2SV_ModStart> int encode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int l ; vpx_read_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> int v = ( vpx_read_bit <S2SV_ModEnd> ( r ) <S2SV_ModStart> ( r,",0
1661,<S2SV_ModStart> ; int is_valid = ( error == GIT_OK ) <S2SV_ModStart> giterr_clear ( ) <S2SV_ModEnd> ; error =,1
1662,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs,",0
1663,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> } return vpx_read <S2SV_ModEnd> ( r,",0
1664,<S2SV_ModStart> } else { if ( len > 0 ) return - 1 ;,0
1665,<S2SV_ModStart>,0
1666,<S2SV_ModStart> ) ; } ND_TCHECK ( op -> opt_len ) ;,0
1667,<S2SV_ModStart> -> root = NULL <S2SV_ModEnd> ; if (,0
1668,<S2SV_ModStart> = 0 ; lock_peer_wake_disconnect ( & sk -> peer ) ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> sock ( sk <S2SV_ModStart> = current ) ;,0
1669,"<S2SV_ModStart> } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, path -> key, NULL )",0
1670,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; if ( <S2SV_ModStart> -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len - A,1
1671,"<S2SV_ModStart> ]. size ; if ( ~ length < 16 ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" )",1
1672,,0
1673,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1674,<S2SV_ModStart> ; tok -> level = 0 ; tok ->,0
1675,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> if (!,0
1676,<S2SV_ModStart> ) ) { if (,0
1677,"<S2SV_ModStart>, r ) ; size_t <S2SV_ModEnd> r ) ;",0
1678,<S2SV_ModStart> ( dMemory <S2SV_ModEnd> ) ; },0
1679,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen = * addrlen_in ; if ( addrlen_in > OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart>, addrlen_in, & addrlen_out <S2SV_ModEnd> ) ; if",0
1680,,1
1681,"<S2SV_ModStart> ; } } if (! <S2SV_ModStart>, length ) ) return FALSE",0
1682,"<S2SV_ModStart> ) ; struct ipv6_txoptions * opt_to_free = NULL ; struct l2tp_txoptions * opt_to_free ; <S2SV_ModStart> ( fl6, opt, <S2SV_ModEnd> ) ; if",0
1683,<S2SV_ModStart> uint32_t * fsize ; uint32_t <S2SV_ModStart> = 0 ; uint32_t fsize ; <S2SV_ModStart> uint32_t fsize ; size_t fsize ; <S2SV_ModStart> = 0 ; int32_t fsize = 0 ; <S2SV_ModStart> = 0 ; int32_t fsize ; <S2SV_ModStart> = 0 ; int fsize <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = { if ( <S2SV_ModEnd> < 0 ) { <S2SV_ModStart> - EFAULT ; } <S2SV_ModStart> < 0 ) { if ( WARN_ON ( void ) { if ( void ) { case <S2SV_ModStart> = CL_E_EINVAL ; } <S2SV_ModStart> = 1 ; * fsize [ lsize ] = CL_I ] ; <S2SV_ModStart> * fsize [ i ] = ( uint32_t * ) * h ) * target_size <S2SV_ModEnd> ; * <S2SV_ModStart> =,0
1684,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPCR_EPCR_EPCR <S2SV_ModEnd> ( dm9000_EPCR, <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPCR_EPCR_EPCR_EPCR_EPOS <S2SV_ModEnd> ) ; while <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPCR_EPCR_EPCR_EPCR_EPCR_EPCR, 0",0
1685,"<S2SV_ModStart>, buffer, t2p -> tiff_datasize,",1
1686,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_uidgid <S2SV_ModEnd> ( inode,",0
1687,<S2SV_ModStart>,0
1688,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> inode ->,0
1689,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1690,<S2SV_ModStart> -> root = NULL <S2SV_ModEnd> ; if (,0
1691,<S2SV_ModStart> } rc = <S2SV_ModEnd> if (!,0
1692,<S2SV_ModStart> addr ) ; <S2SV_ModEnd> if ( msg,0
1693,"<S2SV_ModStart> * cpi, get_mv_param, & cpi <S2SV_ModEnd> ) { int <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH vp9_high_cost_cost_cost_cost_cost ( cpi, & cpi -> common. height, <S2SV_ModEnd> ) ) { <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart>, & step_err, <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( cpi, <S2SV_ModEnd> ) ; #",0
1694,<S2SV_ModStart> ( h -> mode <S2SV_ModEnd> ) ; if,0
1695,<S2SV_ModStart> ; if ( copied == NULL ) return NULL ;,0
1696,"<S2SV_ModStart> ( data, msg_name, <S2SV_ModStart> -> msg_name, msg_name <S2SV_ModEnd> -> msg_name,",0
1697,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
1698,"<S2SV_ModStart> number_planes_filled, number_planes_filled, number_planes_filled <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ; pixel_filled =",0
1699,<S2SV_ModStart> ( r = <S2SV_ModEnd> sshbuf_put (,0
1700,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1701,<S2SV_ModStart> user_data ) ; fclose ( client -> name_id ) ; <S2SV_ModStart> client ) ; } <S2SV_ModEnd> } client =,0
1702,<S2SV_ModStart> -> uvval ; if ( uv < 1 ) return NULL ;,0
1703,<S2SV_ModStart> -> data ; <S2SV_ModEnd> p -> ft_free,0
1704,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1705,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
