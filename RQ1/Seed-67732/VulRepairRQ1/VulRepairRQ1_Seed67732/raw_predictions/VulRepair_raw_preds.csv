,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; if ( n2size < 1 ) <S2SV_ModEnd> { applog (,0
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : ND_TCHECK_8BITS ( tptr ) ; <S2SV_ModStart> 2 ) { ND_TCHECK_8BITS ( tptr + 2 ) ; <S2SV_ModStart>, ""unknown"", subtype ), subtype <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 4 ) ; <S2SV_ModStart>, ""unknown"", subtype <S2SV_ModEnd> ) ),",0
2,<S2SV_ModStart> op_mutex ) ; ath9k_wmi_stop ( wmi ) ; <S2SV_ModStart> - ETIMEDOUT ; goto out ; } mutex_unlock ( & wmi -> op_mutex ) ;,0
3,"<S2SV_ModStart> ; if ( ioctl_cmd == SIOCYAMSMCS : if ( ( ym = kmalloc ( sizeof ( struct yamdrv_mcs ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( ( ym = kmalloc ( sizeof ( struct yamdrv_mcs ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( ( ym = kmalloc ( sizeof ( struct yamdrv_mcs ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( copy_from_user ( ym, ifr -> ifr_data, sizeof ( struct yamdrv_mcs ) ) ) return - EFAULT ; if ( ( ym = kmalloc ( sizeof ( struct yamdrv_mcs ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( ( ym = kmalloc ( sizeof ( struct yamdrv_mcs ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( copy_from_user ( ym,",0
4,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
5,"<S2SV_ModStart>, offset ; if ( avio_feof ( f ) ) { index -> item_count = 0 ; av_freep ( & index -> items ) ; return AVERROR_INVALIDDATA ; }",1
6,<S2SV_ModStart> * tpg ; u16 <S2SV_ModEnd> tpgt ; int <S2SV_ModStart> ; if ( kstrtou16 <S2SV_ModEnd> ( name + <S2SV_ModStart> ) || tpgt >= VHOST_SCSI_MAX_TARGET <S2SV_ModEnd> ) return ERR_PTR,1
7,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
8,"<S2SV_ModStart> { u32 data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; kvm_read_guest_cached ( vcpu -> kvm, & <S2SV_ModEnd> vcpu -> arch <S2SV_ModStart>. apic -> vapic_cache, & data, sizeof ( u32 ) <S2SV_ModEnd> ) ; apic_set_tpr",1
9,<S2SV_ModStart> src ) ; switch ( src -> state ) { case TASK_UNINTERRUPTIBLE : __switch_to_tm ( src ) ; break ; case TASK_UNINTERRUPTIBLE : __switch_to_tm ( src ) ; break ; case TASK_UNINTERRUPTIBLE : __switch_to_tm ( src ) ; break ; case TASK_UNINTERRUPTIBLE : __switch_to_tm ( src ) ; break ; case TASK_UNINTERRUPTIBLE : __switch_to_tm ( src ) ; break ; case TASK_UNINTERRUPTIBLE : __switch_to_tm ( src ) ; break ; case TASK_UNINTERRUPTIBLE : __switch_to_tm ( src ) ; break ; case TASK_UNINTERRUPTIBLE : __switch_to_tm ( src ) ; break ; case TASK_UNINTERRUPTIBLE : __switch_to_tm ( src ) ; break ; },0
10,<S2SV_ModStart> item ) { return <S2SV_ModEnd> cJSON_GetArrayItem ( array <S2SV_ModStart> item > 0 && <S2SV_ModEnd> c -> next <S2SV_ModStart> -> next ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
11,"<S2SV_ModStart> ( sb, KERN_ERR,",1
12,<S2SV_ModStart> prevhdr = NEXTHDR_FRAGMENT ; if ( unfrag_ip6hlen >= INT_MAX - mac_start [ unfrag_ip6hlen ] - mac_start [ unfrag_ip6hlen ] <S2SV_ModStart> + unfrag_ip6hlen ; if ( unfrag_len > INT_MAX - mac_start [ unfrag_ip6hlen ] - mac_start [ unfrag_ip6hlen ] - mac_start [ unfrag_ip6hlen ] - mac_start [ unfrag_ip6hlen ] - mac_start [ unfrag_ip6hlen ] - mac_start [ unfrag_ip6hlen ] - mac_start [ unfrag_ip6hlen ] - mac_start [ unfrag_ip6hlen ] - mac_start [ unfrag_ip6hlen ] - mac_start [ unfrag_ip6hlen ],0
13,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
14,"<S2SV_ModStart> { char * buf = grub_malloc ( <S2SV_ModEnd> EXT2_BLOCK_SIZE ( data <S2SV_ModStart> data ) ], sizeof ( buf ) ) <S2SV_ModStart> { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } leaf = grub_ext4_find_leaf ( data, buf, ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks, fileblock ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) leaf + 1 ) ; if ( i < 0 ) { fileblock -= grub_le_to_cpu32 ( ext [ i ]. block ) ; if ( fileblock >= grub_le_to_cpu32 ( ext [ i ]. len ) ) return 0 ; else { grub_disk_addr_t start ; start = ( grub_le_to_cpu32 ( ext [ i ]. start ) << 32 ) + grub_le_to_cpu32 ( ext [ i ]",0
15,"<S2SV_ModStart> fdct16 ( const tran_low_t * in, tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> ) { { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> input [ 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7 ; tran_high_t t0, t1, t2, t3 ; tran_high_t x0, x1, x2, x3 ; input [ 0 ] = input [ 1 ] + input [ 2 ] + input [ 3 ] + input [ 4 ] ; input [ 1 ] = input [ 2 ] + input [ 3 ] + input [ 5 ] ; input [ 2 ] = input [ 1 ] + input [ 6 ] ; s0 = input [ 0 ] + input [ 7 ] ; s1 = input [ 1 ] + input [ 4 ] ; s2 = input [ 2 ] +",0
16,<S2SV_ModStart> ; skip_full_check : if ( env -> insn_aux_data -> len!= env -> insn_aux_data -> len ) { kfree ( env -> insn_aux_data ) ; goto err_free_env ; },0
17,"<S2SV_ModStart> int i ; if (! config -> sample_rate ) { strcpy ( wpc -> error_message, ""sample <S2SV_blank> rate <S2SV_blank> cannot <S2SV_blank> be <S2SV_blank> zero!"" ) ; return FALSE ; }",1
18,"<S2SV_ModStart> = 0 ; unsigned char sense_buffer [ SCSI_SENSE_BUFFERSIZE ], * senseptr = NULL ; <S2SV_ModStart> cd -> device ; if ( cgc -> sense ) senseptr = sense_buffer <S2SV_ModStart> -> buflen, senseptr, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( cgc -> sense ) memcpy ( cgc -> sense, sense_buffer, sizeof ( * <S2SV_ModEnd> cgc -> sense <S2SV_ModStart> cgc -> sense ) <S2SV_ModEnd> ) ; if",1
19,"<S2SV_ModStart> ( ) == 0x48454150 && order == 0x4d4d4d && ( raw_height == 0 || raw_width == 0 ) ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; } else if ( order == 0x4d4d && ( raw_height == 0 || raw_width == 0 ) ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif",0
20,"<S2SV_ModStart> void search_filter_level ( const YV12_BUFFER_CONFIG * sd, <S2SV_ModStart> partial_frame ) { VP9_COMMON * const cm = & cpi -> common <S2SV_ModEnd> ; struct loopfilter <S2SV_ModStart> lf = & cm -> lf ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = clamp ( cm -> filter_level, min_filter_level, max_filter_level ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; int filt_best ; int filt_direction = 0 ; int filt_mid = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int filter_step = MIN ( filt_mid < 16? 4 : filt_mid / 4 ; int min_filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int filt_low =",0
21,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
22,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, mvcomp -> sign <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",0
23,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ralg -> seedsize,1
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (,1
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> ( ) ) { <S2SV_ModStart> ( ) ; },1
26,"<S2SV_ModStart> char * fmtname ; int verbose_flag <S2SV_ModStart> = 0 ; verbose_flag = 0 ; <S2SV_ModStart> ; while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_VERBOSE : verbose_flag = 1 ; break ; case <S2SV_ModStart> break ; case OPT_INFILE : infile = jas_optarg ; break ; case OPT_HELP : default : usage ( ) ; break ; } } if (! ( <S2SV_ModStart> instream ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> input <S2SV_blank> image <S2SV_blank> file <S2SV_blank> %s\\n"", infile ) ; exit ( EXIT_FAILURE ) ; } jas_stream_close ( instream ) ; numcmpts = jas_image_numcmpts ( image ) ; if (! ( fmtname = jas_image_fmttostr ( image, 0 ) ) ) { abort ( ) ; } jas_stream_close ( instream ) ; numcmpts = jas_image_numcmpts ( image ) ; if (! ( fmtname = jas_image_fmttostr ( image, 0 ) ) ) { abort ( ) ; }",0
27,"<S2SV_ModStart> esr ) { <S2SV_ModEnd> console_verbose ( ) <S2SV_ModStart> esr ) ; __die <S2SV_ModEnd> ( ""Oops <S2SV_blank> - <S2SV_blank> bad <S2SV_blank> mode"", <S2SV_ModStart> esr ) ; __show_regs ( regs ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
28,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> if ( length > 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; print_string ( ndo, ptr, length - 5 ) ; return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * <S2SV_ModEnd> alt ; alt <S2SV_ModStart> ; if (! alt ) return - ENODEV <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart> ( udev, alt -> <S2SV_ModEnd> desc. bInterfaceNumber <S2SV_ModStart> bInterfaceNumber, alt -> desc. bAlternateSetting",1
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart> char * to, int tolen <S2SV_ModStart> = 0 ; int comp_len ; <S2SV_ModStart> = '/' ; tolen -- ; <S2SV_ModStart> case 2 : if ( tolen == 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> += 3 ; tolen -= 3 ; <S2SV_ModStart> case 3 : if ( tolen == 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> += 3 ; tolen -= 3 ; <S2SV_ModStart> case 4 : if ( tolen == 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> += 2 ; tolen -= 2 ; <S2SV_ModStart> case 5 : comp_len = udf_get_filename ( sb, pc -> componentIdent, pc -> lengthComponentIdent, tolen, & comp_len ) ; if ( comp_len == 0 ) return - ENAMETOOLONG <S2SV_ModEnd> ; * p <S2SV_ModStart> = '\\0' ; return 0 ;",0
31,"<S2SV_ModStart> = atoi ( ""protected-mode <S2SV_blank> value"" ) ; if ( server. protected_mode == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ;",0
32,<S2SV_ModStart> unsigned long flags ; if ( qid > NVMET_NR_QUEUES ) return NULL,1
33,"<S2SV_ModStart> -> bInterval ; <S2SV_ModEnd> result = usb_control_msg <S2SV_ModStart> ) ) ; usb_set_intfdata ( interface, dev ) ; retval = usb_register_dev ( interface, & tower_class ) ; if ( retval ) { dev_err ( idev, ""Not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> get <S2SV_blank> a <S2SV_blank> minor <S2SV_blank> for <S2SV_blank> this <S2SV_blank> device.\\n"" ) ; usb_set_intfdata ( interface, NULL ) ; usb_set_intfdata ( interface, NULL <S2SV_ModEnd> ) ; }",0
34,"<S2SV_ModStart>, j ) int vdaux = verdef -> vd_aux ; if ( vdaux < 1 || vdaux <S2SV_ModStart> > end || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ <S2SV_ModStart> Verdaux ) || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ <S2SV_ModStart> Verdaux ) || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ <S2SV_ModStart> Verdaux ) || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ <S2SV_ModStart> Verdaux ) || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ <S2SV_ModStart> Verdaux ) || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ <S2SV_ModStart> Verdaux ) || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ <S2SV_ModStart> Verdaux ) || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ <S2SV_ModStart> Verdaux ) || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ <S2SV_ModStart> Verdaux ) || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ <S2SV_ModStart> Verdaux ) || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ <S2SV_ModStart> Verdaux ) || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ <S2SV_ModStart> Verdaux ) || end - vstart < <S2SV_ModEnd> size",0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool construct_get_dest_keyring ( <S2SV_ModStart> authkey ; } if ( dest_keyring ) { key_get ( dest_keyring ) ; return true ; } else { switch ( cred -> jit_keyring ) { case KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : if ( cred -> request_key_auth ) dest_keyring = key_get ( cred -> request_key_auth ) ; if ( dest_keyring ) return true ; break ; } case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) return true ; break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( cred -> process_keyring ) ; break ; case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : dest_keyring = key_get ( cred -> user_session_keyring ) ; break ; case KEY_REQ,0
36,<S2SV_ModStart> = create_spnego_ctx ( 0,0
37,"<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if ( addr -> l2tp_family!= AF_INET <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> ret = - <S2SV_ModStart> ( sk ) ; if (! sock_flag ( sk, SOCK_ZAPPED ) ) goto out",1
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> unsigned int stack_maxrandom_size <S2SV_ModStart> <S2SV_null> static unsigned <S2SV_ModEnd> int stack_maxrandom_size ( <S2SV_ModStart> { unsigned int <S2SV_ModEnd> max = 0 <S2SV_ModStart> max = ( <S2SV_ModEnd> ( - 1U <S2SV_ModStart> 1U ) & <S2SV_ModEnd> STACK_RND_MASK ) <<,0
39,"<S2SV_ModStart>, _ ( ""_Cancel"" ), GTK_RESPONSE_CANCEL ) ; gtk_dialog_set_default_response ( GTK_DIALOG ( dialog ), GTK_RESPONSE_CANCEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ) { <S2SV_ModEnd> gtk_dialog_add_button ( GTK_DIALOG <S2SV_ModStart> ), _ ( ""_Trust"" ), GTK_RESPONSE_MARK_TRUSTED ) ; } else { gtk_dialog_set_default_response ( GTK_DIALOG ( dialog ), _ ( ""_Cancel"" ), GTK_RESPONSE_CANCEL <S2SV_ModEnd> ) ; }",0
40,<S2SV_ModStart> t ) ; if ( tm == NULL ) return NULL,0
41,"<S2SV_ModStart> length ) ; if ( strlen ( password ) > AUTH_PASS_LEN ) { AUTH_LOG ( AUTH_LOG_ERROR, ""Password <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", length, AUTH_PASS_LEN ) ; return ; }",0
42,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x51 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; mutex_unlock ( & d -> data_mutex ) ; adap <S2SV_ModEnd> -> fe_adap [ <S2SV_ModStart> & d -> <S2SV_ModEnd> i2c_adap ) ; <S2SV_ModStart> ; if ( adap <S2SV_ModEnd> -> fe_adap [ <S2SV_ModStart> ( ts2020_attach, adap <S2SV_ModEnd> -> fe_adap [ <S2SV_ModStart>, & d <S2SV_ModEnd> -> i2c_adap )",1
43,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
44,"<S2SV_ModStart> ; char * google_param = mystrsep ( & value, ""="" ) ; if (! google_param ||! * google_param ) continue ; if (! google_param ) google_param = mystrsep ( & value, ""="" ) ; if (! google_param ) google_param = buffer_create ( 100 ) ; buffer_strcat ( google_param, ""|"" ) ; buffer_strcat ( google_param, value ) ; if (! google_param ) google_param = buffer_create ( 100 ) ; buffer_strcat ( google_param, ""|"" ) ; buffer_strcat ( google_param, value ) ; if (! responseHandler ) responseHandler = buffer_create ( 500 ) ; if (! responseHandler ) responseHandler = buffer_create ( 500 ) ; if (! responseHandler ) responseHandler = buffer_create ( 500 ) ; if (! responseHandler ) responseHandler = buffer_create ( 500 ) ; if (! responseHandler ) responseHandler = buffer_create ( 500 ) ; if (! responseHandler ) responseHandler = buffer_create ( 500 ) ; if (! responseHandler ) responseHandler = buffer_create ( 500 ) ; if (! response",0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
46,"<S2SV_ModStart> tsample_t s ; uint16 bps = 0 ; ( void ) TIFFGetField ( in, TIFFTAG_BITSPERSAMPLE, & bps ) ; if ( bps!= 8 ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can <S2SV_blank> only <S2SV_blank> handle <S2SV_blank> BitsPerSample=8 <S2SV_blank> in <S2SV_blank> %s"", ""cpContig2SeparateByRow"" ) ; return 0 ; }",1
47,"<S2SV_ModStart> ) ; struct hugepage_subpool * spool = ( struct hugepage_subpool <S2SV_ModEnd> * ) page_private <S2SV_ModStart> hugetlb_lock ) ; hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, 1 )",1
48,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) { return AVERROR_EOF ; } if (,1
49,"<S2SV_ModStart> if (! e ) goto not_found ; r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) goto not_found ; r = sd_bus_call_method ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) goto not_found ;",0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return try_get_page <S2SV_ModEnd> ( buf ->,1
51,"<S2SV_ModStart> ) ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, ep2, map, nmap ) ; else cp = ikev2_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> attr=%s <S2SV_blank> "", tcount, map -> name ) ) ; else cp = ikev2_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, ep2, map, nmap ) ; else cp = ikev2_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> attr=%s <S2SV_blank> "", tcount, map -> name ) ) ; else cp = ikev2_attr_print ( ndo, cp, ep2 ) ; if",0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart> 0 ; select ( reader -> bytes_available_fd + 1, & read_fds, NULL, NULL, & timeout ) ; if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { fd_set ( reader -> bytes_available_fd, & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_SET ( reader -> bytes_available_fd, & read_fds ) ; } else if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { fd_set ( reader -> bytes_available_fd, & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; } else if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_",0
54,<S2SV_ModStart> config -> pm_max_requests ; fpm_globals. listening_socket = NULL,0
55,"<S2SV_ModStart> detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> ; if ( frame_interval < MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 <S2SV_ModEnd> ) { int <S2SV_ModStart> int j ; FIRSTPASS_STATS tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) <S2SV_ModEnd> ) break ; <S2SV_ModStart> pcnt_inter - tmp_next_frame. <S2SV_ModEnd> pcnt_motion < 0.999 <S2SV_ModStart> } reset_fpf_position ( twopass, <S2SV_ModEnd> position ) ; <S2SV_ModStart> } return trans_to_still <S2SV_ModEnd> ; } <S2SV_null>",0
56,<S2SV_ModStart> 0 ; } err = handle -> h_err ; <S2SV_ModStart> h_transaction ) { rc <S2SV_ModEnd> = jbd2_journal_stop ( <S2SV_ModStart> ) ; return err? err : rc <S2SV_ModEnd> ; } sb <S2SV_ModStart> t_journal -> j_private <S2SV_ModEnd> ; rc =,1
57,"<S2SV_ModStart> ; if ( ( unsigned long long ) offset + size > i_size_read ( inode ) ) { ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten <S2SV_blank> extents"" ""to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; } else { ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; }",0
58,<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = args -> valuelen ;,1
59,"<S2SV_ModStart> { request_module ( ""crypto-%s"" <S2SV_ModEnd>, name ) <S2SV_ModStart> ) request_module ( ""crypto-%s-all"" <S2SV_ModEnd>, name )",1
60,"<S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> len - 2 ; if ( len < stlv_len ) goto trunc ; ND_TCHECK2 ( * ( tptr ), stlv_len ) <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; <S2SV_ModStart> tmp ) { if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> tmp ) { if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> len = len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; stlv_len = stlv_len <S2SV_ModStart> case ISIS_SUBTLV_",0
61,"<S2SV_ModStart> { return reply_msg ( c, MSG_JOB_TOO_BIG ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY",0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,<S2SV_ModStart> == 12 && ( <S2SV_ModStart> flags & TH_SYN ),1
64,"<S2SV_ModStart> -> ipc_socket ; <S2SV_ModEnd> lxc_attach_options_t * options <S2SV_ModStart> int fd ; <S2SV_ModEnd> int status ; <S2SV_ModStart> { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0): <S2SV_blank> %s"", strerror ( errno ) <S2SV_ModEnd> ) ; shutdown <S2SV_ModStart> { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (1): <S2SV_blank> %s"", strerror ( errno ) <S2SV_ModEnd> ) ; shutdown <S2SV_ModStart> { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (2): <S2SV_blank> %s"", strerror ( errno ) ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } status = - 1 ; ret = lxc_read_nointr_expect ( ipc_socket, & status, sizeof ( status ), & expected ) ; if ( ret <= 0 ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (2): <S2SV_blank> %s"", strerror ( errno ) ) ; shutdown ( ipc_socket",0
65,"<S2SV_ModStart> = GIT_PKT_NG ; if ( strlen ( line ) > len ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> += 3 ; if ( strlen ( line ) > len ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> = ptr + 3 ; if ( strlen ( line ) > len ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> = '\\0' ; if ( strlen ( line ) > len ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> = ptr + 1 ; if ( strlen ( line ) > len ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line <S2SV_blank> length"" ) ; return - 1 ; }",0
66,"<S2SV_ModStart> ( header -> biBitCount == 0 ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> biBitCount <S2SV_blank> %d\\n"", 0 ) ; return OPJ_FALSE ; } if ( header ->",1
67,<S2SV_ModStart> NULL ; } sas_probe_devices ( port ) ;,1
68,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> ENOBUFS ; } memset ( & line, 0, sizeof ( line ) ) ;",1
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_blk_ioctl ( bd, cmd ) ; if ( ret < 0 ) return ret ;",1
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;,0
73,<S2SV_ModStart> * ureq ; unsigned <S2SV_ModStart> return - EFAULT ; if ( req_len > ( QETH_BUFSIZE - IPA_PDU_HEADER_SIZE - sizeof ( struct qeth_ipacmd_hdr ) - sizeof ( struct qeth_ipacmd_setadpparms_hdr ) ) ) return - EINVAL,1
74,"<S2SV_ModStart> int m ; if ( n < 0 ) { jas_deprecated ( ""negative <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_pad"" ) ; }",1
75,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
76,"<S2SV_ModStart> ; if ( mxf_tc -> stream == NULL ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""stream <S2SV_blank> does <S2SV_blank> not <S2SV_blank> have <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> timecode\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( mxf_tc -> stream == NULL ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""stream <S2SV_blank> does <S2SV_blank> not <S2SV_blank> have <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> timecode\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( mxf_tc -> stream == NULL ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""stream <S2SV_blank> does <S2SV_blank> not <S2SV_blank> have <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> timecode\\n"" <S2SV_ModStart> ; } } if ( mxf_tc -> stream == NULL ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""stream <S2SV_blank> does <S2SV_blank> not <S2SV_blank> have <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> timecode\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
77,"<S2SV_ModStart> mntent, path, 0",0
78,<S2SV_ModStart> + 10 ; if ( psf -> fileoffset < psf -> filelength ) { <S2SV_ModStart> ; } ; } ;,1
79,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( p + l2info -> cookie_len ) ;,1
80,<S2SV_ModStart> NF_STOLEN ; return err == 0? NF_ACCEPT : NF_DROP <S2SV_ModEnd> ; } <S2SV_null>,1
81,"<S2SV_ModStart> * up ; int klen ; <S2SV_ModStart> rta ) ; klen = <S2SV_ModEnd> xfrm_replay_state_esn_len ( up <S2SV_ModStart> ( up ) ; klen = <S2SV_ModEnd> xfrm_replay_state_esn_len ( up <S2SV_ModStart> ( up ) ; memcpy ( p, up, klen ) ; memcpy ( pp, up, klen ) ; <S2SV_ModStart> ENOMEM ; } memcpy <S2SV_ModEnd> ( * replay_esn <S2SV_ModStart> = p ; memcpy <S2SV_ModEnd> ( * preplay_esn",0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
83,"<S2SV_ModStart> : { result = GetQuantumRange ( random_info, pixel, <S2SV_ModEnd> value + 0.5 <S2SV_ModStart> : { result = GetQuantumRange ( random_info, pixel, <S2SV_ModEnd> value + 0.5 <S2SV_ModStart> value + 0.5 ) ; break ; } case RightShiftEvaluateOperator : { result = GetQuantumRange ( random_info, pixel, <S2SV_ModEnd> value + 0.5 <S2SV_ModStart> ; break ; } case LeftShiftEvaluateOperator : { result = GetQuantumRange ( random_info, pixel, <S2SV_ModEnd> value + 0.5 <S2SV_ModStart> value + 0.5 ) ; break ; } case LogEvaluateOperator : { if ( GetQuantumRange ( random_info, pixel, <S2SV_ModEnd> value + 0.5 <S2SV_ModStart> value + 0.5 ) > GetQuantumRange ( random_info, pixel, <S2SV_ModEnd> value + 0.5 <S2SV_ModStart> value + 0.5 ) ) { result = GetQuantumRange ( random_info, pixel, <S2SV_ModEnd> value + 0.5 <S2SV_ModStart> value + 0.5 ) ; break ; } case LogEvaluateOperator : { if ( GetQuantumRange ( random_info, pixel, <S2SV_ModEnd> value + 0.5 <S2SV_ModStart> value + 0.5 ) > GetQuantumRange (",0
84,"<S2SV_ModStart> LINK_KEY ) ) ; if ( ret ) btif_config_set_error ( btif_config_get_error ( btif_config_get_error ( btif_config_get_error ( btif_config_get_error ( btif_config_get_error ( btif_config_get_error ( btif_config_get_error ( btif_config_get_error ( ) ) ) ), BT_CONFIG_GET_ERROR ( btif_config_get_error ( btif_config_get_error ( btif_config_get_error ( btif_config_get_error ( btif_config_get_error ( ) ) ) ), BT_CONFIG_GET_ERROR ( btif_config_get_error ( btif_config_get_error ( btif_config_get_error ( ) ) ) ), BT_CONFIG_GET_ERROR ( btif_config_get_error ( btif_config_get_error ( btif_config_get_error ( btif_config_get_error ( ) ) ) ) ) ) ;",0
85,"<S2SV_ModStart> ( buf = jas_alloc3 ( bufsize, numcols <S2SV_ModEnd>, sizeof (",1
86,<S2SV_ModStart> vpx_codec_err_t res ; <S2SV_ModEnd> if (! <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if ( iface -> enc. cfg_maps == NULL ) return VPX_CODEC_OK ;,0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> gso. type ) ; netbk_fatal_tx_err ( vif",1
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> < 0 ) <S2SV_ModEnd> bitmap_pos = ext_index_add_object <S2SV_ModStart> name ) ; <S2SV_ModEnd> bitmap_set ( base",1
89,"<S2SV_ModStart> xfr_cmd, fname <S2SV_ModEnd> ) ; free",1
90,<S2SV_ModStart> mixer ) { snd_usb_mixer_disconnect ( mixer ) ;,1
91,"<S2SV_ModStart> type_flags ) { mutex_lock ( & fanout_mutex ) ; struct <S2SV_ModStart> EINVAL ; } mutex_lock ( & fanout_mutex ) ; err = - EALREADY ; <S2SV_ModStart> -> running ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> fanout ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { struct packet_rollover * rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) goto out <S2SV_ModEnd> ; atomic_long_set ( <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_huge <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> 0 ) ; rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_huge <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed",0
92,"<S2SV_ModStart> newsk ) ; memset ( newnp, 0, sizeof ( struct ipv6_pinfo ) ) ;",0
93,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
94,"<S2SV_ModStart> void show_progress ( int64_t frame_in, int64_t frame_out, uint64_t dx_time ) { if ( frame_in < 0 || frame_out < 0 ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time ) ; } else if ( frame_in < 0 || frame_out > UINT64_MAX ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out ) ; } else if ( frame_out < 0 ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out ) ; }",0
95,"<S2SV_ModStart> Nullav ; } num_fields = DBIc_num_fields ( imp_sth ) ; if ( num_fields < 0 ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> num_fields <S2SV_blank> is <S2SV_blank> 0"", NULL ) ; return Nullav ; }",0
96,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EWRPTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60SetBit ( interface, ENC28J60_ECON1, ENC28J",0
97,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ;",0
98,"<S2SV_ModStart> ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""error"" ) ; http_response_send ( res ) ; return ; } if ( <S2SV_ModStart> ) ) { file_write ( page, wikitext ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } if (! strcmp ( func, ""page/delete"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""error"" ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res",0
99,"<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { ret = <S2SV_ModStart> inode, EXT4_STATE_DIO_UNWRITTEN ) ; if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result <S2SV_ModStart> } if ( ( flags & EXT4_GET_BLOCKS_CONVERT ) <S2SV_ModEnd> ) { ret",1
100,<S2SV_ModStart> 0 ; } ND_TCHECK_16BITS <S2SV_ModEnd> ( p + <S2SV_ModStart> p + 2 <S2SV_ModEnd> ) ; compproto,0
101,"<S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, cgroup ) ) { ret = - ENOENT ; goto out ; } if (!",1
102,"<S2SV_ModStart> low_var_thresh, int flag, unsigned char * limits <S2SV_ModStart> ; int mb_rows = ( source -> y_width + 7 ) >> 4 ; int mb_cols = ( source -> y_height + 7 ) >> 4 <S2SV_ModEnd> ; int mb_rows <S2SV_ModStart> ; int mb_rows = ( source -> y_width + 7 ) >> 4 ; int mb_cols = ( source -> y_height + 7 ) >> 4 <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> unsigned char * limits ; memset ( limits, ( unsigned char ) ppl, 16 * mb_cols ) ; for ( int mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 16 * mbr * source -> uv_stride, source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> v_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width",0
103,"<S2SV_ModStart> { ret = __copy_to_user <S2SV_ModEnd> ( param, <S2SV_ModStart> ) ) ; if ( ret ) return - EFAULT ; param += sizeof ( struct floppy_raw_cmd ) ; if ( ( ptr -> flags & FD_RAW_WRITE ) && ptr -> kernel_data ) { long length = ptr -> kernel_data - ptr -> data ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; ptr = ptr -> next ; } else if ( ( ptr -> flags & FD_RAW_READ ) && ptr -> buffer_length ) { long length = ptr -> buffer_length - ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; } ptr -> kernel_data += ptr -> length ; }",0
104,"<S2SV_ModStart> : if (! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) bprm -> per_clear |= PER_CLEAR_ON_SETID ; if (",1
105,"<S2SV_ModStart> void ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; ce = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS ) ; if (! ce ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } error = mb2_cache_entry_insert ( ce, bh -> b_bdev, bh -> b_blocknr, hash <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } <S2SV_null>",0
106,<S2SV_ModStart> ) ) ; * rlen = strlen ( data ) ;,0
107,<S2SV_ModStart> tf = ( <S2SV_ModEnd> luaY_parser ) (,1
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.",1
110,"<S2SV_ModStart> ; dl = kzalloc <S2SV_ModEnd> ( size,",1
111,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static u_int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> * tptr, const u_int len, const <S2SV_ModStart> * msg ; if ( len < sizeof ( rpki_rtr_pdu ) ) { ND_PRINT ( ( ndo, ""RPKI-RTRv%u, <S2SV_blank> %s <S2SV_blank> PDU <S2SV_blank> (%u)"", indent_string ( 8 ), * tptr ) ) ; goto trunc ; } ND_TCHECK2 ( * tptr, len <S2SV_ModEnd> ) ; hexdump <S2SV_ModStart> FALSE ; ND_PRINT ( ( ndo, ""%sRPKI-RTRv%u, <S2SV_blank> %s <S2SV_blank> PDU <S2SV_blank> (%u)"", indent_string ( 8 ), pdu_header -> version, tok2str ( rpki_rtr_pdu_values, ""Unknown"", pdu_type ), pdu_type ) ) ; switch ( pdu_type ) { case RPKI_RTR_SERIAL_NOTIFY_PDU : case RPKI_RTR_SERIAL_QUERY_PDU",0
113,"<S2SV_ModStart> ; int n <S2SV_ModEnd> ; skb -> <S2SV_ModStart> rose_facilities_struct ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> data + ROSE_CALL_REQ_FACILITIES_OFF, skb -> len - ROSE_CALL_REQ_FACILITIES_OFF, & facilities ) ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; goto done ; } if (! rose_parse_facilities ( skb -> data + ROSE_CALL_REQ_FACILITIES_OFF, & facilities ) ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; goto done ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) ) { rose_transmit_clear_request ( neigh, lci, ROSE_NETWORK_CONGESTION, 120 ) ; goto done ; } <S2SV_ModEnd> sk = rose_find_listener <S2SV_ModStart> (",0
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,"<S2SV_ModStart> ) N_ ( ""E530: <S2SV_blank> Option <S2SV_blank> \'term\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value"" ) ; else if ( * varp == '\\0' ) { errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Option <S2SV_blank> \'term\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value"" ) ; } else if ( * varp == '\\0' ) { errmsg = ( char_u * ) N_ ( ""E532: <S2SV_blank> Option <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value"" ) ; } else if ( * varp == '\\0' ) { errmsg = ( char_u * ) N_ ( ""E533: <S2SV_blank> Option <S2SV_blank> \'term\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value"" ) ; } else if ( * varp == '\\0' ) { errmsg = ( char_u * ) N_ ( ""E532: <S2SV_blank> Option <S2SV_blank> \'term\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value"" ) ; } else if (",0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret ) goto out ; } break ; case ACL_TYPE_DEFAULT : name = XATTR_NAME_POSIX_ACL_DEFAULT ; break ; default : ret = - EINVAL ; goto out ; } if ( acl ) { size = posix_acl_xattr_size ( acl -> a_count ) ; value = kmalloc ( size, GFP_NOFS ) ; if (! value ) { ret = - ENOMEM ; goto out_free ; } ret = posix_acl_to_xattr ( & init_user_ns, acl, value, size ) ; if ( ret < 0 ) goto out_free ;",0
117,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; int ret <S2SV_ModStart> ) ; } o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
118,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",1
119,"<S2SV_ModStart> == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> is <S2SV_blank> absolute"" ) ; return ( ARCHIVE_FAILED ) ; } separator = * src ++ ; } <S2SV_ModEnd> for ( ;",1
120,"<S2SV_ModStart> TPM_RC tpm_kdfa ( <S2SV_ModEnd> TPMI_ALG_HASH hashAlg, <S2SV_ModStart> ) { TPM2B_DIGEST <S2SV_ModEnd> tpm2bLabel, tpm2bBits <S2SV_ModStart> ; TPM_RC rval = TPM_RC_SUCCESS <S2SV_ModStart> ; TPM_RC rval = TPM_RC_SUCCESS <S2SV_ModStart> bytes ) { TPM2B_DIGEST tmpResult ; TPM2B_DIGEST tpm2b_i_2 = string_bytes_endian_convert_32 ( i ) ; * ( TPM2B_DIGEST * ) tpm2b_i_2Ptr = ( TPM2B_DIGEST * ) & tmpResult ; int i, j ; UINT16 bytes = bits / 8 ; bitsSwizzled = string_bytes_endian_convert_32 ( bits ) ; * ( UINT32 * ) tpm2bBitsPtr = bitsSwizzled ; for ( i = 0 ; i < bytes ; i ++ ) { i_Swizzled = string_bytes_endian_convert_32 ( i ) ; * ( UINT32 * ) tpm2b_i_2Ptr = i_Swizzled",0
121,"<S2SV_ModStart> size_t size ; size_t oldsize ; <S2SV_ModStart> 0 ) ||! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; } if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & oldsize ) ||! jas_safe_size_mul ( cmpt -> hstep_, cmpt -> vstep_, & size ) ) { goto error ; } if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & oldsize ) ||! jas_safe_size_mul ( cmpt -> hstep_, cmpt -> vstep_, & size ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) ) { goto error ; } if",0
122,<S2SV_ModStart> s ) { if ( s == 0 ) return ( ( void * ) NULL ) ;,1
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! ib_safe_file_access ( fp ) ) ) return - EACCES ; if (,1
124,<S2SV_ModStart> 6 ) ) { MATLAB_KO : quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModStart> MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO :,0
125,<S2SV_ModStart> ( peer ) peer = maybe_get_net <S2SV_ModEnd> ( peer ),1
126,<S2SV_ModStart> '\\n' ) { if ( i >= ( int ) header_buf_used ) { <S2SV_ModStart> '\\n' ) { if ( i >= ( int ) header_buf_used ) { <S2SV_ModStart> '\\n' ) { if ( i >= ( int ) header_buf_used ) { <S2SV_ModStart> '\\n' ) { if ( i >= ( int ) header_buf_used ) { <S2SV_ModStart> '\\n' ) { if ( i >= ( int ) header_buf_used ) { <S2SV_ModStart> '\\n' ) { if ( i >= ( int ) header_buf_used ) { <S2SV_ModStart> '\\n' ) { if ( i >= ( int ) header_buf_used ) { <S2SV_ModStart> '\\n' ) { if ( i >= ( int ) header_buf_used ) { <S2SV_ModStart> '\\n' ) { if ( i >= ( int ) header_buf_used ) { <S2SV_ModStart> '\\n' ) { if ( i >= ( int ) header_buf_used ) { <S2SV_ModStart> '\\n' ) { if ( i >= ( int ) header_buf_used ) { <S2SV_ModStart> '\\n' ) { if ( i >= ( int ) header_buf_used ) { <S2SV_ModStart> ',0
127,<S2SV_ModStart> m_family ) ; if ( proto == LLDP_MGMT_ADDR_NONE ) goto toobig <S2SV_ModEnd> ; if (,0
128,<S2SV_ModStart> == datalen && ( pc + asn1_op_lengths [ op ] <= machlen ) <S2SV_ModStart> ; if ( ( pc + asn1_op_lengths [ op ] <= machlen ) || ( dp + asn1_op_lengths [ op ] <= machlen ) ) { pc += asn1_op_lengths [ op ] ; flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; } if ( ( dp + asn1_op_lengths [ op ] <= machlen ) ) { pc += asn1_op_lengths [ op ] ; } else if ( ( dp + asn1_op_lengths [ op ] <= machlen ) || ( dp + asn1_op_lengths [ op ] <= machlen ) ) { pc += asn1_op_lengths [ op ] ; flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; },0
129,<S2SV_ModStart> default_auto_asconf = 1 ; spin_lock_bh ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ; <S2SV_ModStart> = 0 ; spin_unlock_bh ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ;,0
130,"<S2SV_ModStart> int mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModEnd> * s, <S2SV_ModStart> gb, 4 ) ; if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { <S2SV_ModStart> 8 ) ; }",0
131,"<S2SV_ModStart> + MIDQ_DATA_BUFF ; unsigned int buffer_size ; <S2SV_ModStart> while ( readw ( mpu -> dev -> MIDQ + JQS_wTail )!= readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) { u16 wTmp, val ; val = readw ( pwMIDQData + 2 * readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char *",0
132,<S2SV_ModStart> rule ) ; if (! entry -> lsm [ lsm_rule ]. rule ) return - EINVAL ;,1
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> function <S2SV_blank> setTimer() <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> checkSession();\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> timerID <S2SV_blank> = <S2SV_blank> setInterval(\'checkSession()\', <S2SV_blank> %d);\\n"" <S2SV_ModEnd> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }\\n"" ""\\n"" <S2SV_ModStart> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> function <S2SV_blank> receiveMessage(e) <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
136,"<S2SV_ModStart> * req, u32 * acl_len, <S2SV_ModStart> ) { __be32 * savep = req -> rq_rcv_buf. head <S2SV_ModEnd> ; int status <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart>, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap, 3 ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out ; if ( unlikely ( * acl_len!= attrlen ) ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; * acl_len = attrlen ; } else { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModStart> ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen ) ; * acl_len = 0 ; } <S2SV_ModEnd> }",0
137,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,1
138,<S2SV_ModStart> ; while ( ( i < to_read ) && <S2SV_ModStart>!= 0 ) <S2SV_ModEnd> ) { i,1
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,"<S2SV_ModStart> in -> data [ plane ] && in -> depth <S2SV_ModStart> [ plane ] && in -> depth <S2SV_ModStart> ] ; } ff_set_video_buffer ( out, outlink -> w, outlink -> h ) ; if (! out ) { av_frame_free ( & in ) ; return AVERROR_PATCHWELCOME ; } for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { const int width = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( in -> w, s -> hsub ) : in -> w ; step = s -> max_step [ plane ] ; outrow = out -> data [ plane ] + ( width - 1 ) * step ; inrow = in -> data [ plane ] + ( width - 1 ) * step ; av_frame_copy_props ( out, in ) ; if ( av_pix_fmt_desc_get ( inlink -> format ) -> flags & AV_PIX_FMT_FLAG_PAL ) memcpy ( out -> data [ plane ], in -> data [ plane ], AVPALETTE_SIZE ) ; for ( j = 0 ; j <",0
141,"<S2SV_ModStart> ( szFileName, pszFileName, <S2SV_ModStart> ) - 5 <S2SV_ModEnd> ) ; }",1
142,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart>, & tok ) ; if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else { uid = userToID ( owner ) ; } } group = stok ( tok, "":"", & perms ) ; if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else if ( smatch ( group, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = groupToID ( group ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; }",0
143,"<S2SV_ModStart> if ( q + o + sh. sh_properties > e ) { DPRINTF ( ( ""Wrapped <S2SV_blank> around <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> %p\\n"", q + o + sh. sh_properties, e ) ) ; goto out ; } if ( q + o + sh. sh_properties > e ) { DPRINTF ( ( ""Wrapped <S2SV_blank> around <S2SV_blank> %p\\n"", q + o + sh. sh_properties, e ) ) ; goto out ; } if ( q + o + sh. sh_properties > e ) { DPRINTF ( ( ""Wrapped <S2SV_blank> around <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> %p\\n"", q + o + sh. sh_properties, e ) ) ; goto out ; }",0
144,"<S2SV_ModStart> __be32 new_saddr ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. srr ) daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",1
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> return ; } if ( len < sizeof ( struct eigrp_common_header ) ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> %s, <S2SV_blank> length: <S2SV_blank> %u <S2SV_blank> (too <S2SV_blank> short)"", tok2str ( eigrp_opcode_values, ""unknown <S2SV_blank> (%u)"", eigrp_com_header -> opcode ), len ) ) ; goto trunc ; } <S2SV_ModStart> case EIGRP_TLV_SHORT : if ( tlv_tlen < sizeof ( struct eigrp_tlv_header ) ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> %s, <S2SV_blank> length: <S2SV_blank> %u <S2SV_blank> (too <S2SV_blank> short)"", tok2str ( eigrp_opcode_values, ""unknown <S2SV_blank> (%u)"", eigrp_com_header -> opcode ) ) ) ; goto trunc ; } <S2SV_ModStart> case EIGRP_TLV_SHORT : if ( tlv_tlen < sizeof ( struct eigrp_tlv_header ) ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> %s, <S2SV_blank> length: <S2SV_blank> %u <S2SV_blank> (too <S2SV_blank> short",0
147,"<S2SV_ModStart> = NULL ; size_t base_size = ( size + align - 1 ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ; <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; if (! addr ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } base_size = ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) ; number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = hmm_alloc ( & hmm_d, number_aau ) ; if (! addr ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) }",0
148,<S2SV_ModStart> int res ; unsigned int block_count ; <S2SV_ModStart> inodes ) ; block_count = <S2SV_ModEnd> SQUASHFS_LOOKUP_BLOCKS ( sBlk <S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
149,"<S2SV_ModStart> = strchr ( ( const char * ) sdvp -> sdev_path, '/' ) ; if (! ptr ) { rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; } ptr ++ ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> s",0
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; if ( flags & EXT4_GET_BLOCKS_CONVERT ) split_flag |= EXT4_EXT_DATA_VALID2 ;,1
151,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret ) goto out ; } break ; case ACL_TYPE_DEFAULT : name = XATTR_NAME_POSIX_ACL_DEFAULT ; break ; default : ret = - EINVAL ; goto out ; } if ( acl ) { size = posix_acl_xattr_size ( acl -> a_count ) ; value = kmalloc ( size, GFP_NOFS ) ; if (! value ) { ret = - ENOMEM ; goto out_free ; } ret = posix_acl_to_xattr ( & init_user_ns, acl, value, size ) ; if ( ret < 0 ) goto out_free ;",0
152,"<S2SV_ModStart> HASH_DISABLED ; } return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1",0
153,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), & final ) ; rcu_read_unlock ( <S2SV_ModEnd> ) ; dst",1
154,"<S2SV_ModStart> = 0.0 ; uint16 <S2SV_ModEnd> planar = 0 <S2SV_ModStart> ( read_buff ) { if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return - 1 ; } <S2SV_ModStart> buffsize ) ; if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return - 1 ; } <S2SV_ModStart> 3 ) { if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return - 1 ; } <S2SV_ModStart> ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return - 1 ; }",0
155,"<S2SV_ModStart> 0 ; # if CONFIG_VP10_ENCODER <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> else if ( strcmp ( global -> codec -> name, ""vp10"" ) == 0 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp11"" ) == 0 ) { ctrl_args = vp11_args ; ctrl_args_map = vp11_arg_ctrl_map ; # endif <S2SV_ModStart> } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> use_ivf = 1 ; } else if ( arg_match ( & arg, & profile, argi ) ) { config -> cfg. g_profile = arg_parse_uint ( & arg ) ; } else if ( arg_match ( & arg, & width, argi ) ) { config -> cfg. g_w = arg_parse_uint ( & arg ) ; } else if ( arg_match ( & arg, & height, argi ) ) { config -> cfg. g_h = arg_parse_uint ( & arg ) ;",0
156,<S2SV_ModStart> options. disable_forwarding ||! use_privsep,1
157,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
158,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
159,"<S2SV_ModStart> errout ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ( OM_char * ) kmalloc ( sizeof ( gss_union_ctx_id_desc ), GFP_KERNEL ) ; if ( gr -> gr_ctx. value == NULL ) { gr -> gr_ctx. value = 0 ; gr -> gr_ctx. status = GSS_C_NO_CONTEXT ; gr -> gr_ctx. status = GSS_C_NO_CONTEXT ; goto errout ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ( OM_char * ) kmalloc ( sizeof ( gss_union_ctx_id_desc ), GFP_KERNEL ) ; if ( gr -> gr_ctx. value == NULL ) { gr -> gr_ctx. value = 0 ; gr -> gr_ctx. status = GSS_C_NO_CONTEXT ; gr -> gr_ctx. status = GSS_C_NO_CONTEXT ; goto errout ; }",0
160,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; <S2SV_ModStart> -> i_data, ext_size ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size <S2SV_ModEnd> ) ; neh",1
161,"<S2SV_ModStart> } if (! verify_checks_ex ( c, preverify_ok, callback_ctx ) ) { SSL_SESSION * sess = NULL ; if (! sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( ( int ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } else if (! verify_checks ( c, preverify_ok, callback_ctx ) ) { SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if (! sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } return 1 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
162,<S2SV_ModStart> ; int ret ; if ( current_chrooted ( ) ) return - EPERM,1
163,"<S2SV_ModStart> ; if (! memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) goto exit ; if (",0
164,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } <S2SV_ModEnd> c -> nreslevels2decode <S2SV_ModStart> -> reduction_factor ) { avpriv_request_sample ( s -> avctx, ""reduction_factor <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", c -> nreslevels - 1 ) ; return AVERROR_PATCHWELCOME ; } <S2SV_ModEnd> c -> log2_cblk_width <S2SV_ModStart> 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHWELCOME ; } if ( c -> log2_cblk_width + c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHWELCOME ; }",0
165,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
166,<S2SV_ModStart> ; bool is_drop_n_account = false ; bool do_vnet <S2SV_ModStart> = false ; do_vnet = pt -> af_packet_priv -> do_vnet ; <S2SV_ModStart> -> max_frame_len ; do_vnet = pt -> af_packet_priv -> do_vnet ; <S2SV_ModStart> -> min_frame_len ; do_vnet = pt -> af_packet_priv -> do_vnet ; <S2SV_ModStart> -> max_frame_len ; do_vnet = pt -> af_packet_priv -> do_vnet <S2SV_ModEnd> ; } while <S2SV_ModStart> ; do_vnet = pt -> af_packet_priv -> do_vnet ; <S2SV_ModStart> -> max_frame_len ; do_vnet = pt -> af_packet_priv -> do_vnet ; <S2SV_ModStart> -> min_frame_len ; do_vnet = pt -> af_packet_priv -> do_vnet ; <S2SV_ModStart> -> max_frame_len ; do_vnet = pt -> af_packet_priv -> do_vnet <S2SV_ModEnd> ; } while,0
167,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> sctp_auth_asoc_init_active_key ( asoc,1
168,<S2SV_ModStart> return false ; if ( ndp_msg_type_info ( msg_type ) -> addrinfo. addrlen!= msg -> addrinfo. addrlen ) return ndp_msg_type_info ( msg_type ) -> addrinfo. addrlen!= msg -> addrinfo. addrlen || ndp_msg_type_info ( msg_type ) -> addrinfo. addrlen!= msg -> addrinfo. addrlen ) return ndp_msg_type_info ( msg_type ) -> addrinfo. addrlen = ndp_msg_type_info ( msg_type ) -> addrlen ;,0
169,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> lsm_set_label_at ( int lsm_labelfd <S2SV_ModEnd>, int on_exec <S2SV_ModStart> lsm_label ) { <S2SV_ModEnd> const char * <S2SV_ModStart> = NULL ; <S2SV_ModEnd> const char * <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> apparmor <S2SV_blank> profile"" ) ; <S2SV_ModEnd> goto out ; <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> apparmor <S2SV_blank> profile"" ) ; <S2SV_ModEnd> goto out ; <S2SV_ModStart> ( write ( lsm_labelfd, command, strlen ( command ) + 1 ) < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> LSM <S2SV_blank> label: <S2SV_blank> %s"", command ) ; goto out ; } } else if ( strcmp ( name, ""SELinux"" ) == 0 ) { if ( write ( lsm_labelfd, lsm_label, strlen ( lsm_label ) + 1 ) < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank>",0
170,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
171,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
172,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> KEY_FRAME ) { <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> -= bits_used ; } <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
173,"<S2SV_ModStart> } num ++ ; if ( num > MaxAllocSize / ITEMSIZE ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> levels <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num, ( int ) ( MaxAllocSize / ITEMSIZE ) ) ) )",1
174,"<S2SV_ModStart> header, struct mb2_cache_entry <S2SV_ModEnd> * * pce <S2SV_ModStart> ) ; struct mb2_cache_entry * ce ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> hash ) ; ce = mb2_cache_entry_find_first <S2SV_ModEnd> ( ext4_mb_cache, <S2SV_ModStart> ( ext4_mb_cache, <S2SV_ModEnd> hash ) ; <S2SV_ModStart> * bh ; <S2SV_ModEnd> bh = sb_bread <S2SV_ModStart> ; ce = mb2_cache_entry_find_next ( ext4_mb_cache, ce <S2SV_ModEnd> ) ; }",1
175,"<S2SV_ModStart> { gint64 offset <S2SV_ModEnd> ; char line <S2SV_ModStart> = offset ; return parse_cosine_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> -> phdr, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> wth -> frame_buffer, line",1
176,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
177,"<S2SV_ModStart> ( left > 0 && extend ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( extend ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( left >= n ) { s -> packet_length += n ; rb -> left = left - n ; rb -> offset += n ; return ( n ) ; } if ( s -> packet_length + left > ( int ) ( rb -> len - rb -> offset ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( s -> packet_length + left > ( int ) ( rb -> len - rb -> offset ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( s -> packet_length > ( int ) ( rb -> len - rb -> offset ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ;",0
178,"<S2SV_ModStart> { char * buf = grub_malloc ( <S2SV_ModEnd> EXT2_BLOCK_SIZE ( data <S2SV_ModStart> data ) ], sizeof ( buf ) ) <S2SV_ModStart> { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } leaf = grub_ext4_find_leaf ( data, buf, ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks, fileblock ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) leaf + 1 ) ; if ( i < 0 ) { fileblock -= grub_le_to_cpu32 ( ext [ i ]. block ) ; if ( fileblock >= grub_le_to_cpu32 ( ext [ i ]. len ) ) return 0 ; else { grub_disk_addr_t start ; start = ( grub_le_to_cpu32 ( ext [ i ]. start ) << 32 ) + grub_le_to_cpu32 ( ext [ i ]",0
179,"<S2SV_ModStart> ) / 3 ) ThrowReaderException ( CorruptImageError, ""InvalidColormapIndex"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries",0
180,"<S2SV_ModStart> - ENOMEM ; memset ( ( void * ) hdr, 0, sizeof ( hdr ) ) ; <S2SV_ModStart> copy_from_user ( buf + sizeof ( hdr ) <S2SV_ModStart> ; if ( hdr. size_out < sizeof ( hdr ) ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu <S2SV_blank> > <S2SV_blank> %zu\\n"", __func__, hdr. size_out, size - hdr. size_in ) ; goto out ; } if ( hdr. size_out < sizeof ( hdr ) ) memset ( ( ( struct vbg_ioctl_hdr * ) buf + sizeof ( hdr ), 0, hdr. size_out - sizeof ( hdr ) ) ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu <S2SV_blank> > <S2SV_blank> %zu\\n"", __func__, hdr. size_out, size - returned_size ) ; goto out ; }",0
181,"<S2SV_ModStart> int m ; size_t hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( buf = jas_alloc2 ( bufsize, numrows <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ) ) ) ) { abort ( ) ; } hstartrow <S2SV_ModEnd> = ( numrows <S2SV_ModStart> 2 ) { hstartrow <S2SV_ModEnd> = ( numrows <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; n = <S2SV_ModStart> = buf ; srcptr = buf ; n = m ; dstptr = & a [ hstartrow * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr = & a [ hstartrow * stride ] ; srcptr = buf ; n = m ; dstptr = & a [ hstartrow * stride ] ; srcptr = buf ; n = m ; dstptr = & a [ hstartrow * stride ] ; srcptr = buf ; n = m ; dstptr = & a [ hstartrow *",0
182,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( bytes_per_line > ( height * sun_info. depth ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
183,"<S2SV_ModStart> 0x07 # define MagickSizeType 0x08 <S2SV_ModEnd> ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) ) ; pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixels ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixels ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixels ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixels ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixels ) ; if ( pixel_info ==",0
184,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_mb_cache ) { ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ; sbi -> s_mb_cache = NULL ; } <S2SV_ModEnd> if (!,1
185,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_devs ; }",0
186,"<S2SV_ModStart> ""setregid"" ) ; <S2SV_ModEnd> char * arg <S2SV_ModStart> ""clearregid"" ) ; arg = asprintf ( & arg, ""%d-bin"", RUN_FIREJAIL_NETWORK_DIR, ( int ) pid ) ; if ( arg == NULL ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> set <S2SV_blank> regid <S2SV_blank> on <S2SV_blank> %s\\n"", arg ) ; exit ( 1 ) ; } if ( strcmp ( command, ""setregid"" ) == 0 ) bandwidth_set ( pid, dev, down, up ) ; else if ( strcmp ( command, ""clearregid"" ) == 0 ) bandwidth_remove ( pid, dev ) ; arg = asprintf ( & arg, ""%d-bin"", ( int ) pid ) ; if ( arg == NULL ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> set <S2SV_blank> regid <S2SV_blank> on <S2SV_blank> %s\\n"", arg ) ; exit ( 1 ) ; } if ( strcmp ( command, ""setregid"" ) == 0 ) bandwidth_set ( pid, dev, down, up ) ; else if ( strcmp ( command, ""clearregid"" ) == 0 ) bandwidth_remove ( pid,",0
187,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) <S2SV_ModStart> ci_parent ) ; else return NULL ;,1
188,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
189,"<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) { av_log ( avctx, AV_LOG_ERROR, ""Malformed <S2SV_blank> AUDIO <S2SV_blank> data"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) { av_log ( avctx, AV_LOG_ERROR, ""Malformed <S2SV_blank> AUDIO <S2SV_blank> data"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> } else { if ( avio_feof ( pb ) ) { av_log ( avctx, AV_LOG_ERROR, ""Malformed <S2SV_blank> AUDIO <S2SV_blank> data"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) { av_log ( avctx, AV_LOG_ERROR, ""Malformed <S2SV_blank> AUDIO <S2SV_blank> data"" ) ; return AVERROR_INVALIDDATA ; }",0
190,"<S2SV_ModStart> if ( q + o + sh. sh_properties > e ) { DPRINTF ( ( ""Wrapped <S2SV_blank> around <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> %p\\n"", q + o + sh. sh_properties, e ) ) ; goto out ; } if ( q + o + sh. sh_properties > e ) { DPRINTF ( ( ""Wrapped <S2SV_blank> around <S2SV_blank> %p\\n"", q + o + sh. sh_properties, e ) ) ; goto out ; } if ( q + o + sh. sh_properties > e ) { DPRINTF ( ( ""Wrapped <S2SV_blank> around <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> %p\\n"", q + o + sh. sh_properties, e ) ) ; goto out ; }",0
191,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = &,1
192,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> fd = xfmkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> dir ) ) == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
193,<S2SV_ModStart> prev ) ; n -> mounts += n -> pending_mounts ; n -> pending_mounts = 0 ;,1
194,"<S2SV_ModStart> ; savesegment ( fs, fsindex ) ; savesegment ( gs, gsindex ) ; load_TLS ( next, cpu ) ; arch_end_context_switch ( next_p ) ; savesegment ( <S2SV_ModStart> next -> ds <S2SV_ModEnd> ) ; if",1
195,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
196,"<S2SV_ModStart> = value ; if ( ps_codec -> i4_pic_done ) return IHEVCD_UNSUPPORTED_PPS ; ps_pps -> i1_pps_id = CLIP3 ( ps_pps -> i1_pps_base + ps_pps -> i1_pps_id, MAX_PPS_CNT - 1 ) ; if ( ps_codec -> i4_pic_done ) return IHEVCD_UNSUPPORTED_PPS ; ps_pps -> i1_pic_id = CLIP3 ( ps_pps -> i1_pic_base + ps_pps -> i1_pps_id, 0, MAX_PPS_CNT - 2 ) ; if ( ps_codec -> i4_pic_done ) return IHEVCD_UNSUPPORTED_PPS ; ps_pps -> i1_pic_id = CLIP3 ( ps_pps -> i1_pic_base + ps_pps -> i1_pic_id, MAX_PPS_CNT - 1 ) ; if ( ps_codec -> i4_pic_done ) return IHE",0
197,<S2SV_ModStart> 1u << DB_VECTOR ) | ( 1u << AC_VECTOR,1
198,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> 1 ] ; u_int len2 <S2SV_ModEnd> ; strncpy ( <S2SV_ModStart>, sfsname, len2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> = '\\0' ; if ( len2 > NFSX_V3FHMAX ) { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> name <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", len2, NFSX_V3FHMAX ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> name <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", len2, NFSX_V3FHMAX ) ) ; } if ( len2 > NFSX_V3FHMAX ) { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> name <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", len2, NFSX_V3FHMAX ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> name <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", len2, NFSX_V3",0
199,"<S2SV_ModStart> unsigned int flags, struct rt6_info * rt <S2SV_ModStart> = SKB_GSO_UDP ; if ( mtu < fragheaderlen + sizeof ( struct frag_hdr ) ) { struct frag_hdr fhdr ; ipv6_select_ident ( & fhdr ) ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; __skb_queue_tail ( & sk -> sk_write_queue, skb ) ; } else if ( ( skb = sock_alloc_send_skb ( sk, hh_len + fragheaderlen + transhdrlen + 20, ( flags & MSG_DONTWAIT ) ) == NULL ) goto append ; err = skb_append_datato_frags ( sk, skb, getfrag, from, ( length - transhdrlen ) ) ; if (! err ) { struct frag_hdr fhdr ; skb_shinfo ( skb ) -> gso_size = ( mtu - fragheaderlen - sizeof ( struct frag_hdr ) ) & ~ 7 ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_UDP",0
200,<S2SV_ModStart> ( res ) goto err_add_port <S2SV_ModEnd> ; res = <S2SV_ModStart> port ) ; err_add_port : hsr_del_node ( & hsr -> self_node_db ) ;,1
201,"<S2SV_ModStart> = 0 ; if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
202,"<S2SV_ModStart> void vp9_setup_dst_planes ( <S2SV_ModEnd> MACROBLOCKD * xd <S2SV_ModStart> int mi_col ) { const YV12_BUFFER_CONFIG * const src = & xd -> src ; uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_x, pd -> subsampling_y ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
203,"<S2SV_ModStart> ++ ) ; if (! xdr_decode_hyper ( p, & args -> stable ) ) return 0 ;",0
204,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { return assign_eip_far ( ctxt, dst, ctxt -> mode == X86EMUL_MODE_PROT64 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
205,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
206,"<S2SV_ModStart> ; remaining = tvb_reported_length_remaining <S2SV_ModEnd> ( tvb,",1
207,"<S2SV_ModStart> == READ ) { int ret ; <S2SV_ModStart> = ocfs2_dio_get_block ; ret = blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; } else ret = __blockdev_direct_IO ( iocb, inode -> i_sb -> s_bdev, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
208,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
209,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %s\\n"" <S2SV_ModEnd>, def,",0
210,<S2SV_ModStart> ; if ( pmc_overflow ( val ) <S2SV_ModEnd> ) write_pmc (,1
211,"<S2SV_ModStart> ( * b + len, * avail - len <S2SV_ModEnd>, nl )",1
212,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> ; int kind <S2SV_ModEnd> ; void * <S2SV_ModStart> ; mod_ty mod <S2SV_ModEnd> ; char * <S2SV_ModStart> ; PyObject * o <S2SV_ModEnd> ; Py_ssize_t len <S2SV_ModStart> expr_start, expr_end <S2SV_ModEnd>, NULL ) <S2SV_ModStart> expr_end == ':' ) ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = PyUnicode_GET_LENGTH ( o ) ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! PyUnicode_ISSPACE ( PyUnicode_READ ( PyUnicode_KIND ( o ), data, i ) ) ) { all_whitespace = 0 ; break ; } } Py_DECREF ( o ) ; str [ 0 ] = '(' ; memcpy ( str + 1, expr_start, len ) ; str [ 1 ] = ')' ; str [ 2 ] = 0 ; cf. cf_flags = PyCF_ONLY_AST ; fstring_name = PyUnicode_FromString ( ""<f",0
213,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
214,<S2SV_ModStart> string ) { return <S2SV_ModEnd> object -> child,0
215,"<S2SV_ModStart> == 0 ) mark_key_instantiated ( key, 0 <S2SV_ModEnd> ) ; up_write",1
216,<S2SV_ModStart> <= * len && plen > 0,1
217,<S2SV_ModStart> ; args. rmtvaluelen = valuelen ; args.,1
218,<S2SV_ModStart> ; if ( <S2SV_ModEnd> timeout == NULL <S2SV_ModStart> ; if ( compat_get_timespec <S2SV_ModEnd> ( & ktspec <S2SV_ModStart> > 0 && compat_put_timespec <S2SV_ModEnd> ( & ktspec,1
219,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( bytes_per_line > ( ssize_t ) sun_info. length ) bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( bytes_per_line > ( ssize_t ) sun_info. width * sun_info. height ) bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( bytes_per_line > ( ssize_t ) sun_info. length ) bytes_per_line = sun_info. width * sun_info. depth ;",0
220,<S2SV_ModStart> ndev ) ; <S2SV_ModEnd> assert ( skb <S2SV_ModStart> q_num ) ; return <S2SV_ModEnd> hns_nic_net_xmit_hw ( ndev <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
221,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
222,<S2SV_ModStart> } if ( <S2SV_ModEnd> udp_specified ) { <S2SV_ModStart> } if ( <S2SV_ModEnd> protocol_specified ) { <S2SV_ModStart> } if ( <S2SV_ModEnd> protocol_specified ) { <S2SV_ModStart> } if ( <S2SV_ModEnd> udp_specified ) { <S2SV_ModStart> } if ( <S2SV_ModEnd> protocol_specified ) { <S2SV_ModStart> } if ( <S2SV_ModEnd> protocol_specified ) { <S2SV_ModStart> } if ( <S2SV_ModEnd> udp_specified ) { <S2SV_ModStart> } if ( <S2SV_ModEnd> protocol_specified ) { <S2SV_ModStart> } if ( tcp_specified ) { <S2SV_ModStart> } if ( udp_specified ) { if ( <S2SV_ModEnd> udp_specified ) { <S2SV_ModStart> } else { if ( tcp_specified ) { <S2SV_ModStart> } if ( tcp_specified ) { <S2SV_ModStart> } if ( tcp_specified ) { <S2SV_ModStart> } if ( tcp_specified ) { <S2SV_ModStart> } if ( udp_specified ) { if ( tcp_specified ) { <S2SV_ModStart> } if ( tcp_specified ) { if ( tcp_specified ) { <S2SV_ModStart> } if ( tcp_specified ) { if ( tcp_specified ) { if ( tcp_specified ) { if ( tcp_specified ) { if ( tcp_specified ) { if ( tcp_specified ) { if ( tcp_specified ) { if ( udp_specified ) { if ( tcp_specified ) { if ( tcp_specified ) { if ( tcp_specified ),0
223,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
224,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
225,<S2SV_ModStart> found = 0 <S2SV_ModEnd> ; const char <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( found,1
226,"<S2SV_ModStart> int validate_event ( struct pmu * pmu, <S2SV_ModStart> arm_pmu * armpmu <S2SV_ModEnd> ; struct hw_perf_event <S2SV_ModStart> -> pmu!= pmu ) return 0 ; if ( event -> pmu!= <S2SV_ModStart> return 1 ; armpmu = to_arm_pmu ( event -> pmu ) ;",1
227,"<S2SV_ModStart> bool new_idmap_permitted ( const struct file * file, <S2SV_ModStart>, cap_setid ) && file_ns_capable ( file, ns -> parent, cap_setid )",1
228,<S2SV_ModStart> j ++ ) { if ( a -> type == szMAPI_BINARY ) <S2SV_ModStart> ) ; } },1
229,"<S2SV_ModStart> hx ; u8 * buf <S2SV_ModEnd> ; int ret <S2SV_ModStart> = 0 ; buf = kmalloc ( sizeof ( * hx ), GFP_KERNEL ) ; if (! buf ) return - ENOMEM ; hx = ( struct hexline * ) buf <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( ret = usb_cypress_writememem ( udev, cypress [ type ]. cpu_cs_register, buf, 1 ) )!= 1 ) err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; kfree ( buf <S2SV_ModEnd> ) ; return <S2SV_ModStart> 0 ) { buf <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ; if ( usb_cypress_writememem ( udev, cypress [ type ]. cpu_cs_register, buf, 1 )!= 1 ) err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; kfree ( buf <S2SV_ModEnd> ) ; return",0
230,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ND_PRINT ( ( ndo, ""CRCErr=%u <S2SV_blank> "", ( val_h << 16 ) + val_l ) ) ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""CRCErr=%u <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ND_PRINT ( ( ndo, ""CRCErr=%u <S2SV_blank> "", ( val_h << 16 ) + val_l ) ) ; val_h =",0
231,"<S2SV_ModStart> princ ) ; success = <S2SV_ModEnd> strncmp ( handle <S2SV_ModStart> params. realm, realm -> data, realm -> length ) == 0 && strncmp ( ""kadmin"", c1 -> data, c1 -> length ) == 0 <S2SV_ModEnd> && strncmp (",0
232,<S2SV_ModStart> ; if ( shader_rec_offset < args -> bin_cl_size ||,1
233,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
234,<S2SV_ModStart> vma -> vm_file ) ; down_read ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModStart> ; out : up_read ( & EXT4_I ( inode ) -> i_mmap_sem ) ;,1
235,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
236,<S2SV_ModStart> arg ) { char ch = * arg ; switch ( ch <S2SV_ModEnd> ) { case <S2SV_ModStart> ';' : case '=' : case <S2SV_ModStart> b ++ = ch <S2SV_ModEnd> ; break ;,1
237,"<S2SV_ModStart> == 1 ) cp = ikev1_attrmap_print ( ndo, cp, map, nmap ) ; else cp = ikev1_attr_print ( ndo, cp, ep2 ) ; break ; case 0 : cp = ikev1_attr_print ( ndo, cp, ep2 ) ; break ; case 1 : cp = ikev1_attr_print ( ndo, cp, ep2 ) ; break ; case 2 : cp = ikev1_attr_map_print ( ndo, cp, map, nmap ) ; break ; case 3 : cp = ikev1_attr_print ( ndo, cp, ep2 ) ; break ; case 4 : cp = ikev1_attr_print ( ndo, cp, ep2 ) ; break ; case 5 : cp = ikev1_attr_print ( ndo, cp, ep2 ) ; break ; case 6 : cp = ikev1_attr_print ( ndo, cp, ep2 ) ; break ; case 8 : cp = ikev1_attr_print ( ndo, cp, ep2 ) ; break ;",0
238,"<S2SV_ModStart> ; static gboolean accept_ice_connection ( IceConn ice_conn, IceAcceptCondition condition, GsmIceConnectionData * data ) { IceListenObj listener ; IceAcceptStatus status ; IceAcceptConnection ( ice_conn, & status ) ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return FALSE ; } ice_conn -> context = client ; server -> priv -> client_store -> add ( server -> priv -> client_store, G_OBJECT ( client ) <S2SV_ModEnd> ) ; g_object_unref",0
239,<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) < skb -> head +,1
240,"<S2SV_ModStart> void ) { test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/foobar"" ) ;",0
241,<S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ;,1
242,<S2SV_ModStart> & RCV_SHUTDOWN ) return 0 ; <S2SV_ModEnd> return err ; <S2SV_ModStart> msg_namelen ) ; <S2SV_ModEnd> } skb_free_datagram (,1
243,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
244,"<S2SV_ModStart> int i ; const int strides [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const uint8_t * const buffers [ 3 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> uv_buffer, src -> uv_buffer, src -> uv_buffer, src -> alpha_buffer } ; const int strides [ 3 ] = { src -> y_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride } ; const int subsampling_x = xd -> subsampling_x ; const int subsampling_y = xd -> subsampling_y ; const int subsampling_z = xd -> subsampling_z ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], subsampling_x, pd -> subsampling_y, sf, subsampling_x, pd -> subsampling_",0
245,"<S2SV_ModStart>, j ; * md_out = NULL ; md = calloc ( 1, sizeof ( <S2SV_ModEnd> * md ) <S2SV_ModStart> goto cleanup ; ret = rfc2253_name <S2SV_ModEnd> ( X509_get_subject_name ( <S2SV_ModStart> cert ), & <S2SV_ModEnd> md -> subject_dn <S2SV_ModStart> md -> subject_dn ) ; if ( ret ) goto cleanup ; ret = rfc2253_name <S2SV_ModEnd> ( X509_get_issuer_name ( <S2SV_ModStart> cert ), & <S2SV_ModEnd> md -> issuer_dn <S2SV_ModStart> md -> issuer_dn ) ; if ( ret ) goto cleanup ; <S2SV_ModEnd> ret = crypto_retrieve_X509_sans",1
246,<S2SV_ModStart> (! npages || base_gfn!= old. base_gfn,1
247,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ru,1
248,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
249,"<S2SV_ModStart> * ni ; unsigned int length_left ; u_int j ; ND_TCHECK ( rp -> rip6_cmd <S2SV_ModEnd> ) ; if <S2SV_ModStart> case RIP6_REQUEST : length_left = length ; if ( length_left < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) goto trunc ; length_left -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; j = length_left <S2SV_ModEnd> / sizeof ( <S2SV_ModStart> j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 <S2SV_ModEnd> && IN6_IS_ADDR_UNSPECIFIED ( <S2SV_ModStart> break ; } length_left <S2SV_ModEnd> -= sizeof ( <S2SV_ModStart> ni )!= length_left ) ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u[%u]:"", j, length_left ) ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ), ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\t"" )",0
250,<S2SV_ModStart> < 0 ) goto error ; <S2SV_ModEnd> goto set ;,1
251,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
252,"<S2SV_ModStart> argc ++ ; retval = bprm_change_interp ( iname, bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> ; interp_file =",1
253,<S2SV_ModStart> ; int iSrc <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> res -> ContribRow <S2SV_ModStart> u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ].,1
254,<S2SV_ModStart> ipmi_destroy_user ( user ) ; cleanup_srcu_struct ( & user -> release_barrier ) ;,0
255,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".cfg\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n""",1
256,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
257,"<S2SV_ModStart> ) ; if ( IS_ERR ( mobj ) ) goto err ; <S2SV_ModEnd> memset ( mobj_get_va <S2SV_ModStart> 0, size ) ; err : mobj_mm_free ( mobj ) ; return ERR_PTR ( - 1 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
258,<S2SV_ModStart> -> it_overrun += 1LL <S2SV_ModEnd> << i ;,1
259,"<S2SV_ModStart> * for_ch ; bool async ; <S2SV_ModStart>, comp_for ) ; async = 0 <S2SV_ModStart> ; if (! async ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async ) ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( first, expression, NULL, is_async, c -> c_arena",0
260,<S2SV_ModStart> NULL ; } dst_state -> speculative = src -> speculative ;,1
261,"<S2SV_ModStart> void write_mb_modes_kf ( const VP9_COMMON * cm, const MACROBLOCKD * xd, const MODE_INFO * const mi <S2SV_ModEnd>, vpx_writer * <S2SV_ModStart> * mi_8x8, vpx_writer * w ) { const VP9_COMMON * const cm = & cpi -> common ; const MACROBLOCKD * const xd = & cpi -> mb. e_mbd ; const MODE_INFO * const mi = mi -> mi ; const MODE_INFO * const above_mi = mi -> above_mi ; const MODE_INFO * const left_mi = mi -> left_mi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ BLOCK_8X8 ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ BLOCK_8X8 ] ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ BLOCK_8X8 ] ; const int num_4x4_w = num_4",0
262,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
263,"<S2SV_ModStart> } DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"" <S2SV_ModEnd>, r -> <S2SV_ModStart> = r -> qiov. size <S2SV_ModEnd> / 512 ; <S2SV_ModStart> / 512 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
264,<S2SV_ModStart> if ( cs >= <S2SV_ModEnd> CQSPI_MAX_CHIPSELECT ) {,1
265,"<S2SV_ModStart> maxn ) { switch ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME2 : decompileGOTOFRAME2 ( n, actions, maxn, 0 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETPROPERTY : decompileGETPROPERTY ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n, actions, max",0
266,<S2SV_ModStart> ) break ; if ( l > ll ) l = ll ;,1
267,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
268,"<S2SV_ModStart> ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> wb-prep: <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ( - 1 ) ; } <S2SV_ModEnd> n = EXTRACT_32BITS <S2SV_ModStart> - 1 ) ; ND_TTEST ( * ps ) ; for ( ie = io + ps -> nid ; ie < ie && ND_TTEST ( * io ) ; ++ io ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ; ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) ie ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; c = ',' ; }",0
269,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
270,"<S2SV_ModStart> ret ; uint8_t * buffer ; uint8_t value ; buffer = kmalloc ( 1, GFP_KERNEL ) ; if (! buffer ) return - ENOMEM <S2SV_ModEnd> ; dev_dbg ( <S2SV_ModStart>, reg, buffer <S2SV_ModEnd>, 1, <S2SV_ModStart> 1000 ) ; if ( <S2SV_ModEnd> ret >= 0 <S2SV_ModStart> ret >= 0 ) { value = buffer [ 0 ] ; kfree ( buffer ) ; return value ; } else { kfree ( buffer ) ; return <S2SV_ModEnd> ret ; } <S2SV_ModStart> ret ; } }",1
271,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * ) * ( sqlite3_int64 ) <S2SV_ModEnd> pTable -> nModuleArg <S2SV_ModStart> pTable -> nModuleArg ; sqlite3_int64 * azModuleArg ; nBytes = 2 * ( sqlite3_int64 ) <S2SV_ModEnd> pTable -> nModuleArg <S2SV_ModStart> pTable -> nModuleArg ; if ( nBytes > MAX_MODULE_ARG_SIZE ) { sqlite3_int64 nBytes = ( sqlite3_int64 ) MAX_MODULE_ARG_SIZE ; azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return 0 ; }",0
272,"<S2SV_ModStart> ; } } s -> append_char ( s, 0 ) ;",0
273,"<S2SV_ModStart> { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""No <S2SV_blank> adaptation <S2SV_blank> state <S2SV_blank> for <S2SV_blank> device <S2SV_blank> profile"" ) ; goto Error ; } if ( <S2SV_ModStart> { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""No <S2SV_blank> adaptation <S2SV_blank> state <S2SV_blank> for <S2SV_blank> device <S2SV_blank> profile"" ) ; goto Error ; } if ( <S2SV_ModStart> { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""No <S2SV_blank> adaptation <S2SV_blank> state <S2SV_blank> for <S2SV_blank> device <S2SV_blank> profile"" ) ; goto Error ; } } if ( <S2SV_ModStart> { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""No <S2SV_blank> adaptation <S2SV_blank> state <S2SV_blank> for <S2SV_blank> device <S2SV_blank> profile"" ) ; goto Error ; } } } else { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""No <S2SV_blank> adaptation <S2SV_blank> state <S2SV_blank> for <S2SV_blank> device <S2SV_blank> profile"" ) ; goto Error ; }",0
274,<S2SV_ModStart> = 0 ; ( i + 3 ) <S2SV_ModEnd> < sec -> <S2SV_ModStart> = 0 ; ( i + 7 ) <S2SV_ModEnd> < sec ->,1
275,"<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_MAX_BW_INTF_ADDR : if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; <S2SV_ModStart> : if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; <S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_RESERVABLE_BW_ID : if ( subl == 4 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; else if ( subl == 6 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; <S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_RESERVABLE_BW_ID : if ( subl == 6 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x""",0
276,<S2SV_ModStart> ) ) { if ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ]!= x [ i ] ) { ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] = x [ i ] ; } else if ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ]!= x [ i ] ) { ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] = x [ i ] ; } else if ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ]!= x [ i ] ) { ptr_hbe_txposer,0
277,<S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg -> enc <S2SV_ModEnd> ) ),0
278,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_data * bfqd, <S2SV_ModStart> bfqq ) { <S2SV_ModEnd> enum bfqq_expiration reason <S2SV_ModStart> unsigned long flags <S2SV_ModEnd> ; spin_lock_irqsave ( <S2SV_ModStart> flags ) ; if (! bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_queued [ 0 ] == 0 && bfqq -> queued [ 1 ] == 0 ) reason = BFQQE_TOO_IDLE ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_queued [ 0 ] == 0 && bfqq -> queued [ 1 ] == 0 ) reason = BFQQE_TOO_IDLE ;",0
279,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
280,"<S2SV_ModStart> ) continue ; if ( vif -> tx. sring -> req_prod - vif -> tx. req_cons > XEN_NETIF_TX_RING_SIZE ) { netdev_err ( vif -> dev, ""Impossible <S2SV_blank> number <S2SV_blank> of <S2SV_blank> requests. <S2SV_blank> "" ""req_cons <S2SV_blank> %d, <S2SV_blank> req_cons <S2SV_blank> %d, <S2SV_blank> size <S2SV_blank> %ld\\n"", vif -> tx. sring -> req_prod, vif -> tx. req_cons, XEN_NETIF_TX_RING_SIZE ) ; netbk_fatal_tx_err ( vif ) ; continue ; } <S2SV_ModStart> 0 ) ) { netdev_err ( vif -> dev, ""Impossible <S2SV_blank> number <S2SV_blank> of <S2SV_blank> requests. <S2SV_blank> "" ""req_cons <S2SV_blank> %d, <S2SV_blank> req_cons <S2SV_blank> %d, <S2SV_blank> size <S2SV_blank> %ld\\n"", vif -> tx. sring -> req_cons, vif -> tx. req_cons, XEN_NETIF_TX_RING_SIZE ) ; netbk_fatal_tx_err ( vif <S2SV_ModEnd> ) ; continue <S2SV_ModStart> skb ) ; <S2SV_ModEnd> continue ; }",0
281,"<S2SV_ModStart> = 0 ; if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
282,<S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct net,0
283,<S2SV_ModStart> conn ) ; if ( <S2SV_ModStart> ( conn )!= 0 ) return,1
284,"<S2SV_ModStart> ) ; struct <S2SV_ModEnd> skb_shared_info * shinfo <S2SV_ModStart> err ) ) xen_netbk_idx_release ( netbk, pending_idx <S2SV_ModEnd>, XEN_NETIF_RSP_ERROR ) <S2SV_ModStart> XEN_NETIF_RSP_ERROR ) ; <S2SV_ModEnd> start = ( <S2SV_ModStart>, newerr ; <S2SV_ModEnd> pending_idx = frag_get_pending_idx <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> continue ; } xen_netbk_idx_release ( netbk, pending_idx <S2SV_ModEnd>, XEN_NETIF_RSP_ERROR ) <S2SV_ModStart> XEN_NETIF_RSP_ERROR ) ; <S2SV_ModEnd> if ( err <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY",1
285,,1
286,<S2SV_ModStart> 0 ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> 0 ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> 0 ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> 0 ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> 0 ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> 0 ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> 0 ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> 0 ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> 0 ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> 0 ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> 0 ) { scanline = ( unsigned char * ) Relin,0
287,"<S2SV_ModStart> 1 ) { struct sockaddr * addr_p = ( struct sockaddr * ) & addr ; socklen_t addr_l = sizeof ( addr ) ; <S2SV_ModStart> len < 0 || addr. nl_pid <S2SV_ModStart> ( LOG_ERR, ""bind <S2SV_blank> failed; <S2SV_blank> pid:%u <S2SV_blank> error:%d"", addr. nl_pid, errno, strerror ( errno ) ) ; close ( fd ) ; exit ( EXIT_FAILURE ) ; addr_p = ( struct sockaddr * ) & addr ; socklen_p = sizeof ( addr ) ; <S2SV_ModStart> len < 0 || addr. nl_pid <S2SV_ModStart> ( LOG_ERR, ""bind <S2SV_blank> failed; <S2SV_blank> pid:%u <S2SV_blank> error:%d"", addr. nl_pid, errno, strerror ( errno ) ) ; close ( fd ) ; exit ( EXIT_FAILURE ) ; } if ( addr. nl_pid!= 0 || addr. nl_pid!= addr. nl_pid ) { syslog ( LOG_ERR, ""bind <S2SV_blank> failed; <S2SV_blank> pid:%u <S2SV_blank> error:%d"", addr. nl_pid, errno ) ; close ( fd ) ; exit ( EXIT_FAILURE ) ; }",0
288,"<S2SV_ModStart> PERF_COUNT_SW_ALIGNMENT_FAULTS, 1 <S2SV_ModEnd>, regs,",0
289,<S2SV_ModStart> ipc == NULL && client -> session == NULL,1
290,"<S2SV_ModStart> newDataLength || diffPtr + x + diffBlockLength > diffBlock + diffBlockLength || extraPtr + y + extraBlockLength <S2SV_ModEnd> > extraBlock + <S2SV_ModStart> NULL ; } if ( diffPtr + x + diffBlockLength > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } <S2SV_ModStart>, x ) ; if ( extraPtr + y + extraBlockLength > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
291,"<S2SV_ModStart>, nameptr, lfi, fname, UDF_NAME_LEN <S2SV_ModEnd> ) ; if",1
292,"<S2SV_ModStart> ip_vs_timeout_user t ; memset ( & t, 0, sizeof ( t ) ) ;",1
293,"<S2SV_ModStart>, fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
294,<S2SV_ModStart> ; ssize_t result ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
295,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, path1, & next <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ) { if ( fpath && strcmp ( next, fpath ) == 0 ) ret = - EEXIST ; else ret = - ENOENT <S2SV_ModEnd> ; goto out <S2SV_ModStart> if (! fc_may_access ( fc, controller, path1, NULL, O_RDWR ) ) { ret = - EACCES ; goto out ; } if (! <S2SV_ModStart> cgdir ) ; free ( next ) ;",1
296,<S2SV_ModStart> ) ) { put_disk ( disk ) ;,1
297,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
298,"<S2SV_ModStart> { if ( CheckMemoryOverflow <S2SV_ModEnd> ( ( image <S2SV_ModStart> ) >> 3UL, <S2SV_ModEnd> image -> rows <S2SV_ModStart> image -> rows ) || CheckMemoryOverflow ( ( image -> rows << 3UL ) >> 3UL, <S2SV_ModEnd> image -> columns <S2SV_ModStart> image -> columns ) ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; <S2SV_ModEnd> max_packets = ( <S2SV_ModStart> number_data_bands ) ; if ( CheckMemoryOverflow ( ( image -> rows << 3UL ) >> 3UL ) ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; <S2SV_ModEnd> max_packets = ( <S2SV_ModStart> number_data_bands ) ; if ( CheckMemoryOverflow ( ( image -> rows << 3UL ) >> 3UL )!= MagickFalse ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; <S2SV_ModEnd> max_packets = ( <S2SV_ModStart> number_data_bands ) ; if ( CheckMemoryOverflow ( ( image -> rows << 3UL ) >> 3UL ) ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ;",0
299,<S2SV_ModStart> ) pktnum ; if ( avio_feof ( s -> pb ) ) { return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ) index_pts ; if ( avio_feof ( s -> pb ) ) { return AVERROR_INVALIDDATA ; },0
300,<S2SV_ModStart> ; rinfo = kzalloc <S2SV_ModEnd> ( SZ_SG_REQ_INFO *,1
301,"<S2SV_ModStart> ; # endif install_keyword ( ""umask"", & umask_handler ) ;",1
302,<S2SV_ModStart> data ) { ( void ) data ;,0
303,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> kfree ( tmpbuf,1
304,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; }",1
305,"<S2SV_ModStart> ( box = jp2_box_create0 ( ) ) ) { goto error ; } <S2SV_ModEnd> if ( jp2_getuint32 <S2SV_ModStart> 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, \'""\', <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( box",0
306,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
307,"<S2SV_ModStart> ; int copylen = 0 <S2SV_ModStart> goto err ; err = - EMSGSIZE ; if ( unlikely ( count > MAX_SKB_FRAGS ) ) goto err ; <S2SV_ModStart> zerocopy ) { if ( count > MAX_SKB_FRAGS ) { copylen = iov_length ( iv, count - MAX_SKB_FRAGS ) ; if ( copylen < vnet_hdr. hdr_len ) copylen = 0 ; else copylen -= vnet_hdr. hdr_len ; }",0
308,<S2SV_ModStart> nexthdr ) { unsigned int offset <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> while ( offset <S2SV_ModEnd> <= packet_len ) <S2SV_ModStart> packet_len ) { struct ipv6_opt_hdr * exthdr ; <S2SV_ModStart> offset ; } if ( offset + sizeof ( struct ipv6_opt_hdr ) > packet_len ) return - EINVAL ; exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + offset ) ; <S2SV_ModStart> -> nexthdr ; } return - EINVAL <S2SV_ModEnd> ; } <S2SV_null>,0
309,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
310,"<S2SV_ModStart> mbmi. ref_frame ; mv_bias ( ref_frame_sign_bias [ above -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; near_ref [ vcnt ] = above -> mbmi. ref_frame ; } vcnt ++ ; if ( left -> mbmi. ref_frame!= INTRA_FRAME ) { near_mvs [ vcnt ]. as_int = left -> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; near_ref [ vcnt ] = left -> mbmi. ref_frame ; }",0
311,"<S2SV_ModStart> sockaddr_ll ) { <S2SV_ModEnd> msg -> msg_name <S2SV_ModStart> msg -> msg_namelen = sizeof ( * sll ) ; } copied = skb -> len ; err = skb_copy_datagram_iovec ( skb, 0, msg -> msg_name, copied ) ; if ( err ) goto out_free ; sock_recv_ts_and_drops ( msg, sk, skb ) ; if (! msg -> msg_name ) { <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg -> msg_name <S2SV_ModEnd> = NULL ;",0
312,<S2SV_ModStart> } if ( <S2SV_ModEnd> djrcv_dev -> paired_dj_devices,1
313,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
314,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
315,"<S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; bool all_param_pass = true ; union sctp_params param ; <S2SV_ModStart> __u32 serial ; <S2SV_ModEnd> chunk_len = ntohs <S2SV_ModStart> goto done ; sctp_walk_params ( param, addip, addip_hdr. params ) { if ( param. p -> type == SCTP_PARAM_IPV4_ADDRESS || param. p -> type == SCTP_PARAM_IPV6_ADDRESS ) continue ; <S2SV_ModEnd> err_code = sctp_process_asconf_param <S2SV_ModStart>, asconf, param. addip <S2SV_ModEnd> ) ; if <S2SV_ModStart>! err_code ) { sctp_add_asconf_response ( asconf_ack, param. addip <S2SV_ModEnd> -> crr_id, <S2SV_ModStart>, err_code, param. addip <S2SV_ModEnd> ) ; if",0
316,"<S2SV_ModStart> 101, ( ""jas_realloc(%x, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",1
317,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
318,<S2SV_ModStart> break ; # ifdef CONFIG_PPC_BOOK3S_64 case KVM_CAP_PPC_PLOGI_64 : case KVM_CAP_PPC_PLOGI_32 : case KVM_CAP_PPC_PLOGI_256 : case KVM_CAP_PPC_PLOGI_256 : r =! hv_enabled ; break ; # ifdef CONFIG_KVM_X86_64 case KVM_KVM_KVM_KVM_KVM_KVM_KVM_KVM_KVM_KVM_KS_64 : case KVM_KVM_KS_32 : case KVM_KS_64 : case KVM_KS_32 : case KVM_KS_64 : case KVM_KS_32 : r =! hv_enabled ; break ; # ifdef CONFIG_X86_64 case KVM_KVM_KVM_KVM_KVM_KVM_KVM_KVM_KVM_KS_32 : case KVM_KS_64 : r =! hv_enabled ; break ; #,0
319,<S2SV_ModStart> msicap ; pci_populate_msicap <S2SV_ModEnd> ( & msicap,0
320,"<S2SV_ModStart> key_name ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. key, HV_KVP_EXCHANGE_MAX_KEY_SIZE / 2 <S2SV_ModStart> value ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. value, HV_KVP_EXCHANGE_MAX_VALUE_SIZE / 2",1
321,<S2SV_ModStart> -> log_ctx ; if (! capable ( CAP_SYS_RAWIO ) ) { r = - EPERM ; break ; } <S2SV_ModStart> -> log_ctx ; if (! capable ( CAP_SYS_RAWIO ) ) { r = - EPERM ; break ; },0
322,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
323,"<S2SV_ModStart> * parg = ( void * ) arg ; long err = - EINVAL ; int is_ext_ctrl ; size_t ctrls_size = 0 ; void __user * user_ptr = NULL ; if ( _IOC_DIR ( cmd )!= _IOC_NONE ) { if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { parg = sbuf ; } else { parg = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == parg ) return - ENOMEM ; parg = mbuf ; } err = - EFAULT ; if ( _IOC_DIR ( cmd ) & _IOC_WRITE ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) return - ENOMEM ; parg = mbuf ; } err = - EFAULT ; if ( _IOC_DIR ( cmd ) & _IOC_WRITE ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) return",0
324,"<S2SV_ModStart>!= psubscribeCommand ) { addReplyError ( c, ""only <S2SV_blank> (P)SUBSCRIBE <S2SV_blank> / <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> QUIT <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" ) ; return REDIS_OK ; } if (",0
325,"<S2SV_ModStart> u16 size, const <S2SV_ModStart> data ) { void * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, buf <S2SV_ModEnd>, size, <S2SV_ModStart> 500 ) ; kfree ( buf ) ; return ret ;",1
326,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_devs ; }",0
327,"<S2SV_ModStart> ) { case GTK_RESPONSE_OK : { file = nautilus_file_get_location ( parameters -> file ) ; nautilus_file_set_metadata ( parameters -> file, NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED, NULL ) ; nautilus_file_mark_desktop_file_untrusted ( file, parameters -> parent_window, TRUE, NULL, NULL ) ; nautilus_file_destroy ( parameters -> parent_window ) ; } break ; case GTK_RESPONSE_OK : { file = nautilus_file_get_location ( parameters -> file ) ; nautilus_file_set_metadata ( parameters -> file, NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED, NULL ) ; nautilus_file_set_metadata ( parameters -> file, NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED, NULL ) ; nautilus_file_destroy ( parameters -> parent_window ) ; <S2SV_ModEnd> screen = gtk_widget_get_screen <S2SV_ModStart> uri ) ; <S2SV_ModEnd> g_object_unref ( file",0
328,<S2SV_ModStart> ; if ( urb -> actual_length > 0 &&,1
329,"<S2SV_ModStart> * server, struct smb_vol * vol ) { <S2SV_ModEnd> struct cifsSesInfo * <S2SV_ModStart> cifs_tcp_ses_lock ) ; list_for_each_entry ( ses <S2SV_ModEnd>, & server <S2SV_ModStart> server -> smb_ses_list, smb_ses_list ) { switch ( server -> secType ) { case Kerberos : if ( vol -> linux_uid!= ses -> linux_uid ) continue ; break ; case Kerberos : if ( vol -> linux_uid!= ses -> linux_uid ) continue ; break ; }",0
330,"<S2SV_ModStart> vpx_codec_err_t res ; int pass = cfg -> g_pass == VPX_RC_ONE_PASS ; <S2SV_ModStart> ( cfg -> <S2SV_ModEnd> g_lag_in_frames > 1 <S2SV_ModStart> ( cfg -> <S2SV_ModEnd> g_lag_in_frames > 1 <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( pass!= VPX_RC_ONE_PASS ) && ( ( cfg -> g_pass!= VPX_RC_ONE_PASS ) ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; res = validate_config ( ctx, cfg, & ctx -> vp8_cfg, 0 ) ; if (! res ) { ctx -> cfg = * cfg ; vp8e_change_config ( & ctx -> oxcf, & ctx -> oxcf, & ctx -> cfg, & ctx -> oxcf",0
331,"<S2SV_ModStart> =='<S2SV_blank>') { input ++ ; } <S2SV_ModEnd> ptr = strchr <S2SV_ModStart> off ) ) { <S2SV_ModStart> ) ; } } <S2SV_ModStart> offset ) ) { <S2SV_ModStart> ""Unknown <S2SV_blank> filesystem <S2SV_blank> type\\n"" ) ; } <S2SV_ModStart> ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; free ( ptr ) ; } break ; case '-' : r_fs_umount ( core -> fs, input + 1 ) ; break ; case '\\0' : r_list_foreach ( core -> fs -> roots, iter, root ) { r_cons_printf ( ""List <S2SV_blank> commands <S2SV_blank> in <S2SV_blank> radare <S2SV_blank> format\\n"" ) ; r_list_foreach ( core -> fs -> roots, iter, root ) { r_cons_printf ( ""m <S2SV_blank> %s <S2SV_blank> %s\\n"", root -> path, root -> p -> name, root -> delta ) ; } break ; case '\\0' : r_list_foreach ( core -> fs -> roots, iter, root ) { r_cons_printf ( ""m <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> 0x%"" PFMT64x\\n"", root -> path ) ; } break ; case '\\0' : r_cons_printf ( """,0
332,"<S2SV_ModStart> inode ) ; struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> ; if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",1
333,<S2SV_ModStart> key * keyring ; if ( new -> thread_keyring ) return 0,1
334,"<S2SV_ModStart> = 0 ; # ifdef __APPLE_CC__ static size_t scanned ; static size_t readnbd ; if ( readnbd > ( size_t ) 0U ) { readnbd -= scanned ; memmove ( cmd, cmd + scanned, readnbd ) ; scanned = ( size_t ) 0U ; } pfd. revents = POLLIN | POLLPRI | POLLERR | POLLHUP ; while ( ( readnb = read ( clientfd, cmd + readnbd, cmdsize - readnbd ) ) < ( ssize_t ) 0 && errno == EINTR ) ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { while ( ( readnb = SSL_read ( clientfd, cmd + readnbd, cmdsize - readnbd ) ) < ( ssize_t ) 0 && errno == EINTR ) ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { while ( ( readnb = read ( clientfd, cmd + readnbd, cmdsize - readnbd ) ) < ( ssize_t )",0
335,"<S2SV_ModStart> orig ) ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; <S2SV_ModStart> mrb_io_alloc ( mrb <S2SV_ModEnd> ) ; DATA_TYPE",1
336,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
337,"<S2SV_ModStart> cpi ) { vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi,",0
338,"<S2SV_ModStart> return res ; res = utee_param_to_param ( utc, <S2SV_ModEnd> param, callee_params <S2SV_ModStart>, callee_params ) ; if ( res!= TEE_SUCCESS ) return res",1
339,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; const struct x86_emulate_ops * ops = ctxt -> ops ; int cpl = ctxt -> ops -> cpl ( ctxt ) ; old_eip = ctxt -> _eip ; ops -> get_segment ( ctxt, & old_cs, & old_desc, NULL <S2SV_ModEnd>, VCPU_SREG_CS ) <S2SV_ModStart>, VCPU_SREG_CS ) <S2SV_ModEnd> ; memcpy ( <S2SV_ModStart> 2 ) ; rc = __load_segment_descriptor <S2SV_ModEnd> ( ctxt, <S2SV_ModStart> sel, VCPU_SREG_CS, cpl, false, & new_desc ) ; if ( rc!= X86EMUL_CONTINUE <S2SV_ModEnd> ) return X86EMUL_CONTINUE <S2SV_ModStart> return X86EMUL_CONTINUE ; rc = assign_eip_far ( ctxt, ctxt -> src. val, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) goto fail ; ctxt -> src. val = old_cs ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) goto fail ; ctxt -> src. val = old_eip",1
340,<S2SV_ModStart> -> band = av_calloc <S2SV_ModEnd> ( reslevel -> <S2SV_ModStart> -> prec = av_calloc <S2SV_ModEnd> ( reslevel ->,1
341,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
342,"<S2SV_ModStart> reloc_struct_t * got_table = calloc ( 1, n_got * sizeof ( struct reloc_struct_t ) <S2SV_ModEnd> ) ; if",0
343,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) { WARN_ON_ONCE ( info -> si_code < 0 ) ; <S2SV_ModEnd> return - EPERM <S2SV_ModStart> - EPERM ; },1
344,"<S2SV_ModStart> * p_tx0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdx, <S2SV_ModEnd> p_image -> x0 <S2SV_ModStart> * p_tx1 = ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdx, <S2SV_ModEnd> p_image -> x1 <S2SV_ModStart> * p_ty0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdy, <S2SV_ModEnd> p_image -> y0 <S2SV_ModStart> * p_ty1 = ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdy, <S2SV_ModEnd> p_image -> y1",1
345,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * create_output_name <S2SV_ModStart> char * fname, <S2SV_ModEnd> int lower, <S2SV_ModStart> utf8 ) x *= 3 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> return NULL ; <S2SV_ModStart> } while ( * fname == slash ) fname ++ ; p = & name [ strlen ( ( char * ) fname ) - 1 ] ; if (! p <S2SV_ModEnd> ) { fprintf <S2SV_ModStart> stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if ( p [ strlen ( ( char * ) fname ] ) >= fe ) { free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { x = ( c & 0xC0 ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F ) << 6 ; } else { x = '?' ; } if ( x == sep ) x = '\\\\' ; else if ( x ==",0
346,"<S2SV_ModStart> classes = NULL ; zval * return_value <S2SV_ModStart> } if (! var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { PHP_VAR_UNSERIALIZE_DESTROY ( var_hash ) ; if ( class_hash ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; } <S2SV_ModEnd> RETURN_FALSE ; } <S2SV_ModStart> } if (! var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { PHP_VAR_UNSERIALIZE_DESTROY ( var_hash ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! php_var_unserialize_ex ( <S2SV_ModEnd> return_value, & <S2SV_ModStart> p + buf_len, & var_hash, class_hash ) ) { PHP_VAR_UNSERIALIZE_DESTROY ( var_hash ) ; if (! php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { RETURN_FALSE ; }",0
347,<S2SV_ModStart> goto __err ; tu -> qhead = tu -> qtail = tu -> qused = 0 ;,1
348,<S2SV_ModStart> -> size - 8 ; if ( ( u32 ) tmp_strsize > ( u32 ) ptr -> size ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if ( ( u32 ) tmp_strsize > ( u32 ) ptr -> size ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> size - 8 ; if ( ( u32 ) tmp_strsize > ( u32 ) ptr -> size ) return GF_ISOM_INVALID_FILE ;,0
349,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
350,"<S2SV_ModStart> = US ; if ( received_message ) fprintf ( stderr, ""received_message <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; else fprintf ( stderr, ""received_message <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; if ( received_message ) fprintf ( stderr, ""received_message <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; else fprintf ( stderr, ""received_message <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; if ( received_message ) fprintf ( stderr, ""received_message <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; if ( fprintf ( stderr, ""received_message <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ) fprintf ( stderr, ""received <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; if ( received_message ) fprintf ( stderr, ""received <S2SV_blank> message <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; else fprintf ( stderr, ""received <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; if ( received_message ) fprintf ( stderr, ""received <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; if ( fprintf ( stderr, ""received <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) fprintf",0
351,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) { WARN_ON_ONCE ( info -> si_code < 0 ) ; <S2SV_ModEnd> return - EPERM <S2SV_ModStart> - EPERM ; },1
352,"<S2SV_ModStart> -> off = strtoull <S2SV_ModEnd> ( p, <S2SV_ModStart> -> filesize = strtoull <S2SV_ModEnd> ( slash +",1
353,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> maxw, maxh, maxw, maxh, offx, loopmaxw <S2SV_ModStart> maxh, max, offy, loopmaxh ; size_t i <S2SV_ModEnd> ; upb = <S2SV_ModStart> maxw = ( size_t ) img -> comps [ 0 ]. w ; maxh = ( size_t ) img -> comps [ 0 ]. h ; maxw = ( size_t ) img -> comps [ 0 ]. w ; maxh = ( size_t ) img -> comps [ 0 ]. h ; max = maxw * maxh ; y = img -> comps [ 0 ]. data ; cb = img -> comps [ 1 ]. data ; cr = img -> comps [ 2 ]. data ; d0 = r = ( int * ) malloc ( sizeof ( int ) * max ) ; d1 = g <S2SV_ModEnd> = ( int <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> goto fails ; offx = img -> x0 & 1U ; loopmaxw = maxw - offx ; offy = img -> y0 & 1U ; loopmaxh = maxh - offy",0
354,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> == mode ) { list_move ( & state -> open_states, & state -> owner -> so_states ) ; list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } else { if ( ( state -> state & FMODE_READ )!= ( mode & FMODE_READ ) <S2SV_ModEnd> ) { if <S2SV_ModStart> FMODE_WRITE ) ) { if ( state -> state & FMODE_READ ) list_move ( & state -> open_states, & state -> owner -> so_states ) ; } else list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } <S2SV_ModEnd> state -> state <S2SV_ModStart> = mode ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
355,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; ssh_dispatch_set ( ssh, SSH2_MSG_KEXINIT, NULL ) ;",1
356,"<S2SV_ModStart> { assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.one <S2SV_blank> + <S2SV_blank> 1 <S2SV_blank> == <S2SV_blank> tests.constants.two <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
357,"<S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",0
358,"<S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strtest [ 512 <S2SV_ModEnd> ] ; if <S2SV_ModStart> ( lbase, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strbase ) <S2SV_ModStart> ( ltest, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( nbase!= 511 <S2SV_ModEnd> && ntest!= <S2SV_ModStart> && ntest!= 511 <S2SV_ModEnd> ) ; if",1
359,<S2SV_ModStart> intf ) { <S2SV_ModEnd> if ( cdc_ncm_select_altsetting <S2SV_ModStart> - ENODEV ; return <S2SV_ModEnd> cdc_ncm_bind_common ( dev <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
360,"<S2SV_ModStart> 0 ; } if ( elem. out_sg [ 0 ]. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } memcpy ( elem. out_sg [ 0 ]. iov_base, buf, len ) ; virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return len <S2SV_ModEnd> ; } <S2SV_null>",0
361,"<S2SV_ModStart>, i, JPC_QCX_GETEXPN <S2SV_ModEnd> ( qcd -> <S2SV_ModStart> ] ), JPC_QCX_GETMANT <S2SV_ModEnd> ( qcd ->",0
362,"<S2SV_ModStart>, e -> elems, e ->",1
363,<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; p -> pix_fmt = AV_PIX_FMT_YUV422P ; return 0 ;,0
364,"<S2SV_ModStart> ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; length = caplen - 1 ; } <S2SV_ModStart> 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; length = caplen - 1 ; }",0
365,<S2SV_ModStart> q ) { mutex_lock ( & q -> timer_mutex ) ; <S2SV_ModStart> snd_seq_timer_close ( q ) ; mutex_unlock ( & q -> timer_mutex,1
366,"<S2SV_ModStart> int error ; unsigned int nr_blks ; sector_t lblock <S2SV_ModEnd> = offset >> <S2SV_ModStart> = offset >> inode -> i_blkbits ; error = gfs2_meta_inode_buffer ( ip, & dibh ) ; if ( unlikely ( error ) ) return error ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if ( gfs2_is_stuffed ( ip ) ) { error = gfs2_unstuff_dinode ( ip, NULL ) ; if ( unlikely ( error ) ) goto out ; } gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if ( gfs2_is_stuffed ( ip ) ) { error = gfs2_unstuff_dinode ( ip, NULL ) ; if ( unlikely ( error ) ) goto out ; } curr = start ; offset = start << PAGE_CACHE_SHIFT ; from = 0 ; to = PAGE_CACHE_SIZE ; error = write_empty_blocks ( page, from, to, mode ) ; if ( unlikely ( error ) ) goto out ;",0
367,<S2SV_ModStart> VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; if ( load -> error ) return ( NULL <S2SV_ModStart> -> real ) || <S2SV_ModEnd> vips_foreign_load_iscompat ( load <S2SV_ModStart> out ) ) { vips_operation_invalidate ( VIPS_OPERATION ( load ) ) ; load -> error = TRUE ; return ( NULL ) ; } <S2SV_ModEnd> vips_image_pipelinev ( load,1
368,"<S2SV_ModStart>, image_noffset ) { const char * name ; if ( strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; verified = 1 ; break ; } } } if ( noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; }",0
369,<S2SV_ModStart> ; args. rmtvaluelen = valuelen ; args.,0
370,"<S2SV_ModStart> ; if (! kfifo_alloc ( & state -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL ) ) { ret = - ENOMEM ; goto error ; } state -> dev = dev ; sd = & state -> sd ; v4l2_subdev_init ( sd, & cx23888_ir_controller_ops ) ; v4l2_set_subdevdata ( sd, state ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; cx23888_ir_write4 ( dev, CX23888_IR_TX_KFIFO_SIZE, GFP_KERNEL ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; cx23888_ir_write4 ( dev, CX23888_IR_TX_KFIFO_SIZE, GFP",0
371,<S2SV_ModStart> service_name_tlv_length ) ; if (! service_name_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if (! miux_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if (! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; },1
372,"<S2SV_ModStart> ssh * ssh <S2SV_ModEnd> ; struct monitor <S2SV_ModStart> = active_state ; <S2SV_ModEnd> mon -> m_zback <S2SV_ModStart>. compression ) { mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; ssh_packet_set_compress_hooks ( ssh, mon -> m_zlib, ( ssh_packet_set_compress_hooks_func * ) mm_zalloc, ( ssh_packet_comp_free_func * ) mm_zfree ) ; } else { mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; ssh_packet_set_compress_hooks ( ssh, mon -> m_zback, ( ssh_packet_set_compress_hooks_func * ) mm_zalloc, ( ssh_packet_comp_free_func * ) mm_zfree ) ; }",0
373,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> cfg, vpx_codec_flags_t <S2SV_ModStart> = cfg ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAP",0
374,"<S2SV_ModStart> unsigned int channo ; if (! ( cdef -> ents = jas_alloc2 ( cdef -> numchans, sizeof ( jp2_cdefent_t ) ) ) ) { return - 1 ; }",0
375,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
376,"<S2SV_ModStart> icmp_param. oif ) { struct ip_options_data opt ; opt = rcu_dereference_protected ( net -> ipv4. ip_options, sock_owned_by_user ( rt ) ) ; if ( opt == NULL ) goto out ; opt = rcu_dereference_protected ( net -> ipv4. ip_options, sock_owned_by_user ( rt ) ) ; if ( opt <S2SV_ModEnd> == IPPROTO_ICMP ) <S2SV_ModStart> icmp_param. oif ) { struct ip_options_rcu * opt ; opt = rcu_dereference_protected ( net -> ipv4. ip_options, sock_owned_by_user ( rt ) ) ; if ( opt == NULL ) goto out ; opt = rcu_dereference_protected ( net -> ipv4. ip_options, sock_owned_by_user ( rt ) ) ; if ( opt <S2SV_ModEnd> == IPPROTO_ICMP ) <S2SV_ModStart> icmp_param. oif ) { IPPROTO_ICMP opt = rcu_dereference_protected ( net -> ipv4. ip_options, sock_owned_by_user (",0
377,<S2SV_ModStart> len ; } ND_TCHECK_32BITS <S2SV_ModEnd> ( p + <S2SV_ModStart> p + 2 <S2SV_ModEnd> ) ; ND_PRINT,1
378,<S2SV_ModStart> 0 ; } if ( unlikely ( IPCB ( skb ) -> opt. optlen ) ) skb_dst_force ( skb ) ; else,1
379,<S2SV_ModStart> private ) { struct skcipher_tfm * tfm = private ; crypto_free_skcipher ( tfm -> skcipher ) ; kfree ( tfm <S2SV_ModEnd> ) ; },1
380,<S2SV_ModStart> bprm ) { <S2SV_ModEnd> int retval ; <S2SV_ModStart> int retval ; bprm_fill_uid ( bprm ) ; <S2SV_ModEnd> retval = security_bprm_set_creds,1
381,"<S2SV_ModStart> = nlogs ; if ( unlikely ( headcount > UIO_MAXIOV ) ) { vhost_discard_vq_desc ( vq, headcount ) ; goto err ; }",0
382,"<S2SV_ModStart> ) ) { const char * p = quote + * s ; if ( * p == '\\\\' ) { * pt ++ = '\\\\' ; * pt ++ = * p ; dlen -- ; } else { * pt ++ = * p ; } } * pt ++ = \'""\' ; * pt = '\\0' ;",0
383,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
384,<S2SV_ModStart> ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_,0
385,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
386,<S2SV_ModStart> ; if (! skb_is_nonlinear <S2SV_ModEnd> ( skb ),0
387,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
388,"<S2SV_ModStart> bp, len ) ; break ; case ETHERTYPE_TEB : ND_TCHECK_32BITS ( bp ) ; <S2SV_ModStart> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> ndo_vflag=0x%x"", EXTRACT_32BITS ( bp ) ) ) ; bp += 4 ; <S2SV_ModStart> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> ndo_vflag=0x%x"", EXTRACT_32BITS ( bp ) ) ) ; bp += 4 ; len -= 4 ; break ; case ETHERTYPE_TEB : ND_TCHECK_32BITS ( bp ) ; <S2SV_ModStart> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> ndo_vflag=0x%x"", EXTRACT_32BITS ( bp ) ) ) ; bp += 4 ; len -= 4 ; break ; case ETHERTYPE_TEB : ND_TCHECK_32BITS ( bp ) ; bp += 4 ; len -= 4 ; break ; case ETHERTYPE_TEB : ND_TCHECK_16BITS ( bp, 2 ) ; if ( len < 2 ) goto",0
389,"<S2SV_ModStart> } if ( tile_buffsize > 0xFFFFFFFFU - ( tl * tile_rowsize ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size"" ) ; exit ( - 1 ) ; } tilebuf [ tile_buffsize - ( tl * tile_rowsize ) ] = 0 ; tilebuf [ tile_buffsize - ( tl * tile_rowsize ) ] = 0 ; tilebuf [ tile_buffsize - ( tl * tile_rowsize ) ] = 0 ; tilebuf [ tile_buffsize - ( tl * tile_rowsize ) ] = 0 ; tilebuf [ tile_buffsize - ( tl * tile_rowsize ) ] = 0 ; tilebuf [ tile_buffsize - ( tl * tile_rowsize ) ] = 0 ; tilebuf [ tile_buffsize - ( tl * tile_rowsize ) ] = 0 ; tilebuf [ tile_buffsize - ( tl * tile_rowsize ) ] = 0 ; tilebuf [ tile_buffsize - ( tl * tile_rowsize ) ] =",0
390,"<S2SV_ModStart> 'u' }, { ""umask"", required_argument, NULL, 'u' }, <S2SV_ModStart>, argv, "":vhlndu:DRS:f:p:i:mM::g::\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t",0
391,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; return 0 <S2SV_ModEnd> ; } switch <S2SV_ModStart> break ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
392,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> -> nd_num ) { ret = <S2SV_ModEnd> - EBUSY ; <S2SV_ModStart> - EBUSY ; goto out ; } <S2SV_ModStart> - EBUSY ; out : o2nm_unlock_subsystem ( ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>,0
393,"<S2SV_ModStart> ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, & n",0
394,"<S2SV_ModStart> : if ( len < snes_op_get_size ( 1, 1, & snes_op [ data [ 0 ] ] ) ) { op -> size = snes_op_get_size ( 1, 1, & snes_op [ data [ 0 ] ] ) ; } else if ( len < snes_op_get_size ( 1, 1, & snes_op [ data [ 0 ] ] ) ) { op -> size = snes_op_get_size ( 1, 1, & snes_op [ data [ 0 ] ] ) ; } else if ( len < snes_op_get_size ( 1, 1, & snes_op [ data [ 0 ] ] ) ) { op -> size = snes_op_get_size ( 1, 1, & snes_op [ data [ 0 ] ] ) ; } else if ( len < snes_op_get_size ( 1, 1, & snes_op [ 0 ] ] ) ) { op -> size = snes_op_get_size ( 1, 1, & snes_op [ 0 ] ] ) ; }",0
395,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
396,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
397,<S2SV_ModStart> return - E_NOTHANDLED ; if ( ninst == 0 ) return - E_INVALID,1
398,<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < 2 ) goto trunc ;,0
399,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
400,"<S2SV_ModStart> ; if (! ND_TTEST2 ( * p + offset ), tim. length ) ) return 0 ; memcpy ( & tim, p + offset, tim. length ) ; pbody -> tim = tim ; if (! ND_TTEST2 ( * p + offset ), tim. length ) ) return 0 ; memcpy ( & cf, p + offset, tim. length ) ; pbody -> cf = cf ; pbody -> tim_present = tim ; break ; case E_TTEST2 : if (! ND_TTEST2 ( * p + offset ), tim. length ) ) return 0 ; memcpy ( & cf, p + offset, tim. length ) ; if (! ND_TTEST2 ( * p + offset ), tim. length ) ) return 0 ; memcpy ( & cf, p + offset, tim. length ) ; pbody -> cf = cf ; pbody -> tim = tim ; break ; case E_TTEST1 : if (! ND_TTEST2 ( * p + offset ), tim. length ) ) return 0 ; if (! ND_TTEST2 ( * p +",0
401,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",1
402,<S2SV_ModStart> ( ) ; if (! tbuf ) { return NULL ; },1
403,"<S2SV_ModStart> long ret, err2 <S2SV_ModEnd> ; if ( <S2SV_ModStart>, options, & r2 <S2SV_ModEnd> ) ; set_fs <S2SV_ModStart> KERNEL_DS ) ; err2 |= __put_user ( r. ru_utime. tv_sec, & ur -> ru_utime. tv_sec ) ; err |= __put_user ( r. ru_stime. tv_sec, & ur -> ru_stime. tv_sec ) ; err |= __put_user ( r. ru_utime. tv_usec, & ur -> ru_stime. tv_usec ) ; <S2SV_ModStart> = 0 ; err2 |= __put_user ( r. ru_utime. tv_sec, & ur -> ru_utime. tv_sec ) ; err |= __put_user ( r. ru_stime. tv_usec, & ur -> ru_stime. tv_usec ) ; err |= __put_user ( r. ru_maxrss, & ur -> ru_maxrss ) ; err |= __put_user ( r. ru_ixrss, & ur -> ru_ixrss ) ; err |= __put_user ( r. ru_id",0
404,"<S2SV_ModStart> NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sysrq-trigger"", ""%r/proc/sysrq-trigger"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"",",0
405,"<S2SV_ModStart> ; } } if ( c -> spd. that. client == NULL ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), ( md -> sender_port ) ) ; } else { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized"" ""on <S2SV_blank> %s:%u"" "" <S2SV_blank> with <S2SV_blank> policy="" : """", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), ( md -> sender_port ) ) ; }",0
406,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> rowstride ) { if (! context ||! bmpdata ||! rowstride ) return FALSE ; if (! <S2SV_ModStart>, rowstride ) ) return FALSE <S2SV_ModStart> ChromaSubsamplingLevel ) { if (! <S2SV_ModStart> ( context ) ) return FALSE ; } return TRUE ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
407,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
408,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS,1
409,<S2SV_ModStart> return ( ( ( <S2SV_ModStart> ) / 8 ) * GetPSDPacketSize ( image ),1
410,<S2SV_ModStart> { p_dev -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY (,0
411,<S2SV_ModStart> bMasterInterface0 ) ; if (! pcu -> ctrl_intf ) return - EINVAL ; <S2SV_ModStart> bSlaveInterface0 ) ; if (! pcu -> data_intf ) return - EINVAL ;,1
412,"<S2SV_ModStart> const char * devname = kstrdup ( dev_name ( & <S2SV_ModEnd> d -> udev <S2SV_ModStart> udev -> dev ), GFP_KERNEL ) ; const char * drvname = d -> name <S2SV_ModStart> d ) ; dev_info ( & d -> udev -> dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"" <S2SV_ModEnd>, KBUILD_MODNAME, <S2SV_ModStart>, KBUILD_MODNAME, devname ) ; } <S2SV_null>",0
413,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpx ) <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpy )",1
414,<S2SV_ModStart> target_enc ) { return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION <S2SV_ModEnd> ; } else,1
415,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart> exception ) { <S2SV_ModEnd> register Quantum * <S2SV_ModStart> register Quantum * q ; ssize_t bit <S2SV_ModEnd> ; ssize_t x <S2SV_ModStart> ; ssize_t x <S2SV_ModEnd> ; register Quantum <S2SV_ModStart> ; register Quantum index <S2SV_ModEnd> ; switch ( <S2SV_ModStart> : { q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) break ; <S2SV_ModEnd> for ( x <S2SV_ModStart> % 8 )!= 0 ) { index = ConstrainColormapIndex ( image, ( * p >> 6 ) & 0x3, exception ) ; SetPixelIndex ( image, index, q ) ; q += GetPixelChannels ( image ) ; } p ++ ; } return ( bool ) SyncAuthenticPixels ( image, exception ) ; <S2SV_ModEnd> } case 3 <S2SV_ModStart> : { q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) break ; for ( x = 0 ; x < ( ( ssize_t ) image -> columns - 7 )",0
416,"<S2SV_ModStart> u_char * tptr, const u_int length <S2SV_ModStart> ; u_int network_addr_type ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> = FALSE ; if ( length < 1 ) { ND_PRINT ( ( ndo, ""[|cfm_network_addr_print]"" ) ) ; return hexdump ; } <S2SV_ModStart> case AFNUM_INET : if ( length!= 1 + 16 ) { ND_PRINT ( ( ndo, ""[|cfm_network_addr_print]"" ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> case AFNUM_INET6 : if ( length!= 1 + 16 ) { ND_PRINT ( ( ndo, ""[|cfm_network_addr_print]"" ) ) ; hexdump = FALSE ; break ; } <S2SV_ModStart> case AFNUM_INET : if ( length!= 1 + 16 ) { ND_PRINT ( ( ndo, ""[|cfm_network_addr_print]"" ) ) ; hexdump = TRUE ; break ; }",0
417,"<S2SV_ModStart> ; u64 msr_data, rcx, rdx <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; rcx = reg_read ( ctxt, VCPU_REGS_RCX ) ; rdx = reg_read ( ctxt, VCPU_REGS_RDX ) ; <S2SV_ModStart> = 1 ; if ( is_noncanonical_address ( rcx ) || is_noncanonical_address ( rdx ) ) return emulate_gp ( ctxt, 0 ) ; <S2SV_ModStart> -> _eip = rdx <S2SV_ModEnd> ; * reg_write <S2SV_ModStart> VCPU_REGS_RSP ) = rcx <S2SV_ModEnd> ; return X86EMUL_CONTINUE",1
418,<S2SV_ModStart> dev ) ; ssize_t len ; device_lock ( dev ) ; len = <S2SV_ModEnd> sprintf ( buf <S2SV_ModStart> driver_override ) ; device_unlock ( dev ) ; return len ;,1
419,"<S2SV_ModStart> ; BIO * tmpout ; tmpout = cms_get_text_bio ( out, flags ) ; if (! tmpout ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } if ( tmpout == NULL ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } for ( ; ; ) { i = BIO_read ( in, buf, sizeof ( buf ) ) ; if ( i <= 0 ) { if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; break ; } if ( i <= 0 ) { if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; break ; } if ( i <= 0 ) { if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get",0
420,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( retval == 0 ) rs. enc_tkt_reply -> flags |= TKT_FLG_PRE_AUTH ;,1
421,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] ; vpx_tree_index <S2SV_ModEnd> ii = tree",0
422,<S2SV_ModStart> ; if ( tmp_dir == NULL || tmp_dir [ strlen ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
423,"<S2SV_ModStart> = 0 ; size_t pathlen = 0 ; <S2SV_ModStart> case AF_UNIX : pathlen = sizeof ( <S2SV_ModEnd> ( ( struct <S2SV_ModStart> ) -> sun_path ) ; if ( MAXPATHLEN <= pathlen ) { pathlen = MAXPATHLEN - 1 ; } strncpy ( addr_text, ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, pathlen ) ; addr_text [ pathlen <S2SV_ModEnd> ] = '\\0'",1
424,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
425,"<S2SV_ModStart> & 0xffff ; if ( synth_devs [ dev ] -> load_patch == NULL ) return - ENODEV ; err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0",0
426,"<S2SV_ModStart> ) { struct hugepage_subpool * spool = subpool_vma ( vma ) ; struct <S2SV_ModStart> page * page <S2SV_ModEnd> ; long chg <S2SV_ModStart> ) if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> page ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> unsigned long ) spool <S2SV_ModEnd> ) ; vma_commit_reservation",1
427,"<S2SV_ModStart> filegen_string ) ; if ( NULL == filegen ) { stats_config ( STATS_STATSDIR, NULL ) ; continue ; } <S2SV_ModStart> filegen_file ) ; if ( NULL == filegen ) { stats_config ( STATS_STATSDIR, NULL ) ; continue ; } <S2SV_ModStart> filegen_flag ) ; if ( NULL == filegen ) { stats_config ( STATS_STATSDIR, NULL ) ; continue ; }",0
428,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; timer_set_state",1
429,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 15 ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 13 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 7 = input <S2SV_ModEnd> [ 8 ] <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 10 ] ; tran_high_t <S2SV_ModEnd> x11 = input <S2SV_ModStart> 11 ] ; tran_high_t <S2SV_ModEnd> x12 = input <S2SV_ModStart> 12 ] ; tran_high_t <S2SV_ModEnd> x13 = input <S2SV_ModStart> 1 ] ; tran_high_t <S2SV_ModEnd> x14 = input <S2SV_ModStart> 15 ] ; tran_high_t <S2SV_ModEnd> x15 = input <S2SV_ModStart>",0
430,<S2SV_ModStart> ; # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
433,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
434,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> AVINDEX_KEYFRAME ) ; },1
435,<S2SV_ModStart> == datalen && ( pc + asn1_op_lengths [ op ] <= machlen ) <S2SV_ModStart> ; if ( ( pc + asn1_op_lengths [ op ] <= machlen ) || ( dp + asn1_op_lengths [ op ] <= machlen ) ) { pc += asn1_op_lengths [ op ] ; flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; } if ( ( dp + asn1_op_lengths [ op ] <= machlen ) ) { pc += asn1_op_lengths [ op ] ; } else if ( ( dp + asn1_op_lengths [ op ] <= machlen ) || ( dp + asn1_op_lengths [ op ] <= machlen ) ) { pc += asn1_op_lengths [ op ] ; flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; },0
436,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> out ; } <S2SV_ModEnd> if (! <S2SV_ModStart>, cgroup, & next ) ) { if (! fpath || strcmp ( next, fpath ) == 0 ) ret = - EBUSY ; else ret = - ENOENT ; goto out ; } if (! fc_may_access ( fc, controller, cgdir, NULL, O_WRONLY <S2SV_ModEnd> ) ) { <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! <S2SV_ModStart> cgdir ) ; free ( next ) ;",1
437,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flag & CL_UNPRIVILEGED <S2SV_ModStart> & CL_UNPRIVILEGED ) { mnt -> mnt. mnt_flags |= MNT_LOCK_ATIME ; if <S2SV_ModEnd> ( mnt -> <S2SV_ModStart> mnt_flags & MNT_READONLY <S2SV_ModEnd> ) ) mnt <S2SV_ModStart> ; if ( mnt -> mnt. mnt_flags & MNT_NODEV ) mnt -> mnt. mnt_flags |= MNT_LOCK_NODEV ; if ( mnt -> mnt. mnt_flags & MNT_NOSUID ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOSUID ; if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOEXEC ; if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOEXEC ; if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt -> mnt. mnt_flags |= MNT_,0
438,<S2SV_ModStart> rds_loop_transport ; } <S2SV_ModEnd> } conn ->,1
439,<S2SV_ModStart> * rsize >= 112 <S2SV_ModEnd> && rdesc [,1
440,"<S2SV_ModStart> if ( ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ) || ( bodyLength > tot_len - offset - 2 ) ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Not <S2SV_blank> EAPOL-Key"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_NO_VALID_HANDSHAKE ; } <S2SV_ModStart> + 2 ) ; if ( ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ) || ( bodyLength > tot_len - offset - 2 ) ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Not <S2SV_blank> EAPOL-Key"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_NO_VALID_HANDSHAKE ; }",0
441,<S2SV_ModStart> ( likely ( serio <S2SV_ModEnd> &&! filtered,1
442,"<S2SV_ModStart> ( er && <S2SV_ModEnd> ndo -> ndo_vflag <S2SV_ModStart> ndo -> ndo_vflag <= NFS_MAXFLAG ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ndo_vflag <S2SV_blank> > <S2SV_blank> %u"", ndo -> ndo_vflag ) ) ; if ( ndo -> ndo_vflag <= NFS_MAXFLAG ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ndo_vflag <S2SV_blank> %u"", ndo -> ndo_vflag ) ) ; } else { if ( ndo -> ndo_vflag <= NFS_MAXFLAG ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ndo_vflag <S2SV_blank> > <S2SV_blank> %u"", ndo -> ndo_vflag ) ) ; if ( ndo -> ndo_vflag <= NFS_MAXFLAG ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ndo_vflag <S2SV_blank> %u"", ndo -> ndo_vflag ) ) ; } } else if ( ndo -> ndo_vflag <= NFS_MAXFLAG ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ndo_vflag <S2SV_blank> %u",0
443,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_translate_to_linux ( uint8_t <S2SV_ModStart> * udfName, int udfLen, <S2SV_ModEnd> uint8_t * fidName <S2SV_ModStart> newIndex < 256 <S2SV_ModEnd> ) newName [ <S2SV_ModStart> } maxFilenameLen = 250 <S2SV_ModEnd> - localExtIndex ;",0
444,"<S2SV_ModStart> void count_segs_sb ( const VP9_COMMON * cm, TileDataEnc * tile_data <S2SV_ModEnd>, MODE_INFO * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const int mis <S2SV_ModStart> bw = num_8x8_blocks_wide_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ] ; bh = num_8x8_blocks_high_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ] ; if ( bw < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, hbs, bs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, hbs, bs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no",0
445,<S2SV_ModStart> ; if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) ) { resetClient ( c ) ; server. current_client = NULL ; break ; } if (,0
446,"<S2SV_ModStart> ; get_blocks_flags = ( mpd -> b_state & ( 1 << BH_Create ) )? EXT4_GET_BLOCKS_CREATE : <S2SV_ModStart> BH_Unwritten ) ) { if ( mpd -> b_state & ( 1 << BH_Create ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; mpd -> b_blocknr = ext4_alloc_blocks ( handle, mpd -> inode, next, max_blocks, & new, get_blocks_flags ) ; if (! ( mpd -> b_state & ( 1 << BH_Create ) ) ) { if ( mpd -> b_state & ( 1 << BH_Delay ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; mpd -> b_blocknr = ext4_alloc_blocks ( handle, mpd -> inode, next, max_blocks, & new, get_blocks_flags ) ; if ( mpd -> b_state & ( 1 << BH_Create ) ) get_blocks_flags |= EXT4_GET_BLOCKS",0
447,"<S2SV_ModStart> * s ; const unsigned char * p = sigbuf ; unsigned char * der = NULL ; int derlen = - 1 ; <S2SV_ModStart> s, & p <S2SV_ModEnd>, siglen ) <S2SV_ModStart> == NULL ) goto err ; derlen = i2d_DSA_SIG ( s, & der ) ; if ( derlen!= siglen || memcmp ( sigbuf, der, derlen ) ) <S2SV_ModStart> ; err : if ( derlen > 0 ) { OPENSSL_cleanse ( der, derlen ) ; OPENSSL_free ( der ) ; }",1
448,"<S2SV_ModStart> NULL ) ; if (! _gdImageGifCtx <S2SV_ModEnd> ( im, <S2SV_ModStart>, out ) ) { <S2SV_ModEnd> rv = gdDPExtractData <S2SV_ModStart> size ) ; } else { rv = NULL ; }",1
449,<S2SV_ModStart> ) ; } if ( bprm -> interp!= bprm -> filename ) kfree ( bprm -> interp ) ;,1
450,"<S2SV_ModStart> = 0 ; uint64_t <S2SV_ModEnd> canonnamelen = 0 <S2SV_ModStart> ( p = oe_calloc ( 1, sizeof ( struct oe_addrinfo ) ) ) ) { ret = OE_EAI_MEMORY ; goto done ; } if ( p == NULL ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } if ( oe_syscall_getaddrinfo_read_ocall ( & retval, handle, & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & p -> ai_addrlen, & canonnamelen, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( p == NULL ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } if ( p == NULL ) { ret = OE",0
451,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
452,"<S2SV_ModStart> ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> image <S2SV_blank> dimensions"" ) ; goto done ; }",1
453,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
454,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int set_registers ( pegasus_t * pegasus, const <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
455,"<S2SV_ModStart> asdl_seq * body, asdl_seq * type_ignores <S2SV_ModStart> = body ; p -> v. Module. type_ignores = type_ignores ;",1
456,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
457,"<S2SV_ModStart> * src, <S2SV_ModEnd> unsigned int flags <S2SV_ModStart> int flags ) { # if USE_PARTIAL_COPY int row, col, active_end ; int mb_rows = ( src -> y_height + 15 ) >> 4 ; int mb_cols = ( src -> y_width + 15 ) >> 4 ; int active_map = NULL ; # endif if ( ctx -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) return 1 ; ctx -> sz ++ ; buf = pop ( ctx, & ctx -> write_idx ) ; # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; for ( ; col < mb_cols ; ++ col ) { if (! active_map [ col ] ) break ; } vp9_copy_and_extend_frame_with_rect ( src, & buf -> img, row << 4, 16, ( active_end - col ) << 4 ) ; col = active_end ; } active_map += mb_cols ; } else { vpx_copy_and_extend_",0
458,<S2SV_ModStart> ) ; } fuse_conn_put ( & cc -> fc ) ;,1
459,"<S2SV_ModStart> ( code ) { * status = ""DECODE_PA_S4U_X509_USER"" ; return code ; } <S2SV_ModEnd> code = verify_s4u_x509_user_checksum",1
460,"<S2SV_ModStart> * r, uint8_t <S2SV_ModEnd> * outbuf ) <S2SV_ModStart> illegal_request ; break ; case READ_10_SECTOR : if ( scsi_disk_emulate_read_10_sector ( r, outbuf )!= 0 ) goto illegal_request ; break ; case WRITE_10_SECTOR : if ( scsi_disk_emulate_write_10_sector ( r, outbuf )!= 0 ) goto illegal_request ;",0
461,<S2SV_ModStart> cur_pic. field_picture <S2SV_ModEnd> ) return 0,1
462,"<S2SV_ModStart> off ) { struct scatterlist * sgp = & rm -> data. op_sg [ sg ] ; int ret = sizeof ( struct rds_header ) + be32_to_cpu ( rm -> m_inc. i_hdr. h_len ) ; <S2SV_ModStart> 0 ) ; ret = min_t ( int, ret, sgp -> length - conn -> c_xmit_data_off ) ; goto out <S2SV_ModEnd> ; } BUG_ON <S2SV_ModStart> m_inc ) ; out : return ret <S2SV_ModEnd> ; } <S2SV_null>",1
463,<S2SV_ModStart> buf ) ) { return 0 ; } <S2SV_ModEnd> ext_block = (,1
464,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,1
465,<S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_16BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag,0
466,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
467,"<S2SV_ModStart> = hmi_data ; if ( hmi_size < 18 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> in <S2SV_blank> hmi <S2SV_blank> data"", 0 ) ; return NULL ; } <S2SV_ModStart> channel ; } if ( hmi_track_offset [ i ] + hmi_tmp > hmi_size ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> in <S2SV_blank> hmi <S2SV_blank> data"", 0 ) ; return NULL ; } <S2SV_ModStart> hmi_tmp += hmi_tmp ; if ( hmi_tmp > hmi_size ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> in <S2SV_blank> hmi <S2SV_blank> data"", 0 ) ; return NULL ; } if ( hmi_tmp > hmi_size ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, ""Not <S2SV_blank> en",0
468,<S2SV_ModStart> -> id ; haddr -> hci_channel = 0 ;,1
469,<S2SV_ModStart> -> i_iget5_offset ; fh16 [ 3 ] = 0 ;,1
470,"<S2SV_ModStart> ; if ( ( request -> kdc_options & AS_REQUIRES_POSTDATE ) && ( request -> kdc_options & AS_REQUIRES_POSTDATE ) ) { * status = ""POSTDATE <S2SV_blank> NOT <S2SV_blank> ALLOWED"" ; return ( KDC_ERR_CANNOT_POSTDATE ) ; } else if ( ( request -> kdc_options & AS_REQUIRES_POSTDATED ) && ( request -> kdc_options & AS_REQUIRES_POSTDATED ) ) { * status = ""POSTDATE <S2SV_blank> NOT <S2SV_blank> ALLOWED"" ; return ( KDC_ERR_CANNOT_POSTDATED ) ; } else if ( ( request -> kdc_options & AS_REQUIRES_POSTDATE ) && ( request -> kdc_options & AS_REQUIRES_POSTDATE ) ) { * status = ""POSTDATE <S2SV_blank> NOT <S2SV_blank> ALLOWED"" ; return ( KDC_ERR_CANNOT_POSTDATE ) ; } else { * status = ""POSTDATE <S2SV_blank> NOT <S2SV_blank> ALLOWED"" ; return ( KDC_ERR_CANNOT_POSTDATE ) ; }",0
471,"<S2SV_ModStart> case BPF_SUB : <S2SV_ModEnd> if ( signed_add_overflows <S2SV_ModStart> break ; case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smin_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; } if ( signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smax_value = S64_MAX ; } if ( src_known && dst_reg -> smin_value >= S64_MAX ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smin_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; } if ( src_known && dst_reg -> smax_value >= S64_MAX ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; }",0
472,"<S2SV_ModStart> ; if ( cpi -> oxcf. pass == 2 <S2SV_ModStart> LPF_PICK_FROM_Q ) { const VP9_COMMON * const cm = & cpi -> common ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( ( cm -> bit_depth * 20723 + 1015158 + 18 ), 18 ) ; lf -> filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; } else if ( cpi -> oxcf. pass == 2 ) { const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( lf -> filter_level, min_filter_level,",0
473,"<S2SV_ModStart> = BOND_TYPE_PERSISTENT ; BTIF_DBG_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> ev: <S2SV_blank> %s"", dump_dm_event ( BTIF_DM_ENABLE_EVT ) ) ; BTIF_DBG_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> ev: <S2SV_blank> %s"", dump_dm_event ( BTIF_DM_ENABLE_EVT ) ) ; if ( BT_DBG_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> ev: <S2SV_blank> %s"", dump_dm_event ( BTIF_DM_ENABLE_EVT ( BTIF_DM_ENABLE_EVT ) ) ) { BTIF_DBG_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> ev: <S2SV_blank> %s"", dump_dm_event ( BTIF_DM_ENABLE_EVT ) ) ; BT_DBG_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> ev: <S2SV_blank> %s"", dump_dm_event ( BTIF_DM_ENABLE_EV",0
474,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
475,"<S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, MAXALIGN",0
476,<S2SV_ModStart> void usage_exit ( void,1
477,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
478,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
479,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
480,"<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if (! data ||! data_sz ||! user_priv ) return VPX_CODEC_ERROR ; # else <S2SV_ModStart>. decode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, data, <S2SV_ModStart>, data_sz, user_priv <S2SV_ModEnd> ) ; }",0
481,"<S2SV_ModStart> ; if (! strcmp ( attr, ""sprop-parameter-sets"" ) ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return 0 ; } if (",0
482,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int,0
483,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
484,<S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_pdu_type <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_pdu_type <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_pdu_length <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_pdu_length <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_pdu_length <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_pdu_length <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_pdu_length <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_pdu_length <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_pdu_length <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_pdu_length <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_pdu_length <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_pdu_length <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_length,0
485,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } sendClean ( outputbuffer ) ;",1
486,<S2SV_ModStart> } else { return false ; } } else if ( r -> CRn == 0 && r -> CRm == 9 ) { if ( pmu_access_event_counter_el0_disabled ( vcpu ) ) return false ; idx = ARMV8_PMU_CYCLE_IDX ; <S2SV_ModEnd> } else if <S2SV_ModStart> } else { return false <S2SV_ModEnd> ; } if,1
487,<S2SV_ModStart> case IS_STRING : { zval dval ; dval = * * zval_affine_elem ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> ) ; affine <S2SV_ModStart> i ] = Z_DVAL ( dval ) ; } <S2SV_ModEnd> break ; default <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { rect. x = <S2SV_ModStart> ) ; } } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { rect. y = <S2SV_ModStart> ) ; } } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval,1
488,<S2SV_ModStart> self ) { if (! self ) return ;,0
489,<S2SV_ModStart> SQL_DROP ) ; <S2SV_ModEnd> return 0 ;,1
490,"<S2SV_ModStart> ; r = __copy_from_user <S2SV_ModEnd> ( data,",1
491,"<S2SV_ModStart>, * q <S2SV_ModEnd> ; Clp_Parser * <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2015 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\nThis <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\nThere <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\nparticular <S2SV_blank> purpose.\\n"" ) ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2015 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\nThis <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\nThere <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\nparticular <S2SV_blank> purpose.\\n""",0
492,<S2SV_ModStart> = 0 ; info -> port = NULL ;,1
493,<S2SV_ModStart> -> ctx. <S2SV_ModEnd> pmu = pmu,1
494,"<S2SV_ModStart> iovec * iovec, struct iov_iter * iter ) { if ( len > MAX_RW_COUNT ) len = MAX_RW_COUNT ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> = 1 ; iov_iter_init ( iter, rw, iovec, * nr_segs, len ) ;",1
495,<S2SV_ModStart> ext4_group_t flex_group ; unsigned <S2SV_ModStart> -> s_log_groups_per_flex ; if ( sbi -> s_log_groups_per_flex < 1 || sbi -> s_log_groups_per_flex > 31 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } <S2SV_ModStart> -> s_log_groups_per_flex ; <S2SV_ModEnd> flex_group_count = (,1
496,<S2SV_ModStart> ( unlikely ( chunk -> pdiscard ) ) return 0 ; if ( unlikely (,1
497,"<S2SV_ModStart> 0 ; for ( ; i < count ; ++ i, ++ a <S2SV_ModEnd> ) { n <S2SV_ModStart> ] ) ; <S2SV_ModEnd> if (! <S2SV_ModStart>! i ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
498,"<S2SV_ModStart> { if ( parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr, sptr, sptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; if ( <S2SV_ModStart> { if ( parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr, sptr, sptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; if ( <S2SV_ModStart> { if ( parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr, sptr, sptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; }",0
499,<S2SV_ModStart> <= w - ( int ),1
500,<S2SV_ModStart> callback_args -> forward_matches ; assert ( match_offset + match_length <= callback_args -> data_size ),1
501,<S2SV_ModStart>! no_port_forwarding_flag && <S2SV_ModEnd> options. disable_forwarding,0
502,"<S2SV_ModStart> { if ( length > SMKTREE_DECODE_MAX_RECURSION ) { av_log ( NULL, AV_LOG_ERROR, ""Maximum <S2SV_blank> tree <S2SV_blank> recursion <S2SV_blank> level <S2SV_blank> exceeded.\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",1
503,<S2SV_ModStart> err ; } if ( m -> msg_name ),1
504,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == Py_None ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank>",0
505,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) { hstartrow <S2SV_ModEnd> = ( numrows <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; n = <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; srcptr =,0
506,"<S2SV_ModStart> ""REPLY_ADD_STA <S2SV_blank> PASSED\\n"" ) ; ret = iwl_sta_ucode_activate ( priv, sta_id ) <S2SV_ModEnd> ; break ;",1
507,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
508,"<S2SV_ModStart> ""a\\0x\\0x\\0b\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""\\0a\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""\\0a\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""\\0a\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""\\0a\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\",0
509,"<S2SV_ModStart> & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ) { while ( 1 ) { <S2SV_ModStart> ] ) ; if (! queue ) break ; <S2SV_ModEnd> if ( free_func <S2SV_ModStart> ( free_func ) { if ( hashbin -> hb_type & HB_LOCK ) spin_unlock_irqrestore ( & hashbin -> hb_spinlock, flags ) ; free_func ( queue ) ; if ( hashbin -> hb_type & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; } <S2SV_ModEnd> } } hashbin <S2SV_ModStart> & HB_LOCK ) <S2SV_ModEnd> spin_unlock_irqrestore ( & <S2SV_ModStart> flags ) ; <S2SV_ModEnd> kfree ( hashbin",1
510,<S2SV_ModStart> EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NODEV ) &&! ( mnt_flags & MNT_NODEV ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOSUID ) &&! ( mnt_flags & MNT_NOSUID ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & M,0
511,"<S2SV_ModStart> copied, err <S2SV_ModEnd> ; int vnet_hdr_len <S2SV_ModStart> out_free ; } copied = skb -> len ; sock_recv_ts_and_drops ( msg, skb, 0 <S2SV_ModEnd> ) ; if",0
512,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
513,"<S2SV_ModStart> ( serial -> num_bulk_out <S2SV_ModEnd> < 2 ) <S2SV_ModStart> < 2 ) { dev_err ( & serial -> interface -> dev, ""missing <S2SV_blank> bulk <S2SV_blank> out <S2SV_blank> endpoints\\n"" ) ; return - ENODEV ; } <S2SV_ModEnd> port = serial",1
514,"<S2SV_ModStart> { int do_rf64 = 1, write_junk = 1 ; RiffChunkHeader riffhdr ; DS64Chunk ds64_chunk ; JunkChunk junkchunk <S2SV_ModEnd> ; WaveHeader wavhdr <S2SV_ModStart> ; ds64_chunk = malloc ( sizeof ( DS64Chunk ) ) ; if (! ds64_chunk ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> DS64Chunk!\\n"" ) ; return FALSE ; } <S2SV_ModStart> ds64_chunk ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> DS64Chunk!\\n"" ) ; return FALSE ; } if (! ds64_chunk ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> DS64Chunk!\\n"" ) ; return FALSE ; } <S2SV_ModStart> ds64_chunk ) ; if (! ds64_chunk ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> DS64Chunk!\\n"" ) ; return FALSE ; }",0
515,<S2SV_ModStart> msg ) ; msg_sys -> msg_namelen = 0 ; <S2SV_ModStart> VERIFY_WRITE ) ; msg_sys -> msg_iovlen = UIO_FASTIOV ; <S2SV_ModStart> ) ; } else { if ( msg_sys -> msg_flags & MSG_CMSG_COMPAT ) { if ( msg_sys -> msg_flags & MSG_CMSG_CLOEXEC ) msg_sys -> msg_flags |= MSG_CMSG_COMPAT ; } else { msg_sys -> msg_flags |= MSG_CMSG_CLOEXEC ; } },0
516,"<S2SV_ModStart> inode ) ; struct metapath * mp2 = metapath ( mp ) ; struct <S2SV_ModStart> unsigned end_of_metadata ; if ( height > 1 ) { struct buffer_head * bh = mp -> mp_bh [ height - 1 ] ; int eob = 0 ; enum alloc_state state ; __be64 * ptr ; __be64 zero_bn = 0 ; BUG_ON ( ip -> i_height < 1 ) ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; } if ( height == 1 ) { struct buffer_head * bh ; ptr = metapointer ( end_of_metadata, mp ) ; bh = mp -> mp_bh [ end_of_metadata ] ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ end_of_metadata ] ) ; BUG_ON ( dblks < 1 ) ; state = ALLOC_DATA ; } else if ( height > 1 ) { state = ALLOC_GROW_HEIGHT ; iblks = height - 1 ; branch_start = metapath_branch_start (",0
517,<S2SV_ModStart> -> codec -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( rc_resize_allowed ) ; SHOW ( rc_resize_up_thresh ) ; SHOW ( rc_resize_down_thresh ) ; SHOW ( rc_end_usage ) ; SHOW ( rc_2pass_vbr_bias_pct ) ; SHOW ( rc_2pass_vbr_minsection_pct ) ; SHOW ( rc_2pass_vbr_maxsection_pct ) ; SHOW (,0
518,<S2SV_ModStart> return FALSE ; { BOOL rc ; <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) rc = <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) if (! rc ) return FALSE ; } { BOOL rc ; <S2SV_ModStart> -> prof_nsc_decode ) rc = <S2SV_ModStart> -> prof_nsc_decode ) if (! rc ) return FALSE ; },1
519,"<S2SV_ModStart> ; if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( <S2SV_ModStart> { if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> a <S2SV_blank> literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; }",0
520,"<S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> } else { fs_logger ( ""clone <S2SV_blank> /etc/skel/.zshrc"" ) ; } } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } free ( fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } free ( fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR",0
521,"<S2SV_ModStart> * req, u32 * acl_len, <S2SV_ModStart> ) { __be32 * savep = req -> rq_rcv_buf. head <S2SV_ModEnd> ; int status <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart>, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap, 3 ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out ; if ( unlikely ( * acl_len!= attrlen ) ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; * acl_len = attrlen ; } else { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModStart> ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen ) ; * acl_len = 0 ; } <S2SV_ModEnd> }",0
522,<S2SV_ModStart> fv -> b ) { if ( <S2SV_ModStart> fv -> b. sf ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; else SFClearAutoSave ( sf ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; } else if ( AskChanged ( fv -> b. sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; } else if ( AskChanged ( fv -> b. sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 ) SFClearAutoSave ( sf ) ; } _FVCloseWindows ( fv ) ; if ( sf -> filename!= NULL ) RecentFilesRemember ( sf -> filename ) ; else if ( sf -> origname!= NULL ) RecentFilesRemember ( sf -> origname ) ;,0
523,<S2SV_ModStart> msix_tab_size % 4096 <S2SV_ModEnd> == 0 ),0
524,<S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( &,1
525,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
526,"<S2SV_ModStart> : if ( caml_get_oo_id <S2SV_ModEnd> ( ( value <S2SV_ModStart> ) ) >= <S2SV_ModEnd> 0 ) caml_set_oo_id <S2SV_ModStart> case OFreshOID : if ( caml_get_oo_id ( ( value ) dest ) == - 1 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest ) ; } sp -- ; break ; case OFreshOID : if ( caml_get_oo_id ( ( value ) dest ) == - 1 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest ) ; } sp -- ; break ; case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest ) ; } sp -> op = OFreshOID ; sp -> dest = ( value * ) v ; sp -> arg = 1 ; ReadItems ( & Field ( v, 0",0
527,"<S2SV_ModStart> multipart_media ; struct range_data * r = & clt -> clt_ranges ; struct range_data * r = & clt -> clt_ranges [ 0 ] <S2SV_ModEnd> ; size_t content_length <S2SV_ModStart> ; size_t content_length = 0 <S2SV_ModStart> nranges, ret <S2SV_ModEnd> ; char content_range <S2SV_ModStart> if ( ( nranges = parse_ranges ( clt, <S2SV_ModEnd> range_str, st <S2SV_ModStart> st -> st_size, & r ) ) == NULL ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr = ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> file <S2SV_blank> buffer"" ; goto abort ; } if ( ( nranges = parse_ranges ( clt, <S2SV_ModEnd> range_str, st <S2SV_ModStart> st -> st_size, & r ) ) == NULL ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> %lld-%lld/%lld"", r -> start, r -> end ) ; errstr = ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> file <S2SV_blank> buffer"" ; goto abort",0
528,"<S2SV_ModStart> = FALSE ; if ( interface -> nicEvent ) return FALSE ; <S2SV_ModStart> ( interface, KSZ8851_IER, KSZ8851_IER_LCIE <S2SV_ModEnd> ) ; isr <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( isr & KSZ8851_ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IER, ier <S2SV_ModEnd> ) ; return",0
529,"<S2SV_ModStart> void encode_quantization ( MACROBLOCKD * xd, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex, QINDEX_BITS, xd ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
530,<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; p -> pix_fmt = AV_PIX_FMT_YUV422P ; return 0 ;,0
531,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> msglen ) ) ),0
532,<S2SV_ModStart> tmp ) { goto parse_scheme_end <S2SV_ModEnd> ; } case <S2SV_ModStart> ) ) { goto parse_scheme_end <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; parse_scheme_end : state -> offset = 0 ;,0
533,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
534,<S2SV_ModStart> flags ) { spin_lock ( & ctx -> cancel_lock ) ; <S2SV_ModStart> } } else { __timerfd_remove_cancel <S2SV_ModEnd> ( ctx ) <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> cancel_lock ) ;,1
535,"<S2SV_ModStart> ) ) ; if ( c16 -> Curves [ i ] == NULL ) { for ( j = 0 ; j < i ; j ++ ) { _cmsFree ( ContextID, c16 -> Curves [ j ] ) ; } _cmsFree ( ContextID, c16 -> Curves ) ; _cmsFree ( ContextID, c16 ) ; return NULL ; }",1
536,<S2SV_ModStart> { if (! dev_name ||,1
537,"<S2SV_ModStart> ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; length = caplen - 1 ; } <S2SV_ModStart> 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; length = caplen - 1 ; }",0
538,"<S2SV_ModStart> peekonly ) { if ( buf ) memcpy_fromio ( buf, & msg_tmp, sizeof ( * msg ) ) ; else memcpy_fromio ( buf, & msg_tmp, sizeof ( * msg ) ) ; } else if ( space_rem == sizeof ( * msg ) ) { if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m_pdwGetRing + sizeof ( * msg ), space_rem ) ; } else if ( space_rem == sizeof ( * msg ) ) { if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m_pdwGetRing + sizeof ( * msg ), space_rem ) ; } else if ( space_rem == sizeof ( * msg ) ) { if ( buf ) memcpy_fromio ( buf, bus -> m_pdwGetRing, space_rem - sizeof ( * msg ) ) ; } else { if ( space_rem == sizeof ( * msg ) ) { if ( buf ) memcpy_fromio ( buf, bus -> m_pdwGetRing, space_rem - sizeof ( * msg ) ) ; } else",0
539,<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { efree ( replaced ) ; RETURN_FALSE ; },1
540,"<S2SV_ModStart> ; if ( ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { log_debug ( ""%s: <S2SV_blank> invalid <S2SV_blank> public <S2SV_blank> key <S2SV_blank> type: <S2SV_blank> %s"", __func__, print_map ( peerec, ikev2_id_map ) ) ; goto sslerr ; } peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ; if ( peerec == NULL ) { log_debug ( ""%s: <S2SV_blank> invalid <S2SV_blank> public <S2SV_blank> key <S2SV_blank> type: <S2SV_blank> %s"", __func__, print_map ( peerec, ikev2_id_map ) ) ; goto sslerr ; }",0
541,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
542,"<S2SV_ModStart> int mi_col, <S2SV_ModEnd> BLOCK_SIZE subsize ) <S2SV_ModStart> -> e_mbd ; <S2SV_ModEnd> int bsl = <S2SV_ModStart>, hbs = b_height_log2_lookup [ bsize ] <S2SV_ModEnd> ; PARTITION_TYPE partition <S2SV_ModStart> case PARTITION_NONE : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_VERT : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; * ( xd -> mi [ 1 ] ) = get_block_context ( x, subsize ) -> vic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_HORZ : set_modeinfo_offsets ( cm, xd, mi_",0
543,"<S2SV_ModStart> name ) ; if (! strcmp ( key, ""url"" ) && value && looks_like_command_line_option ( value ) ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_URL, ""disallowed <S2SV_blank> submodule <S2SV_blank> url: <S2SV_blank> %s"", value ) ;",1
544,<S2SV_ModStart> ; int pixel_ptr <S2SV_ModEnd> ; int block_ptr <S2SV_ModStart> ; int block_y <S2SV_ModEnd> ; int total_blocks <S2SV_ModStart> ; while ( stream_ptr < chunk_size ) { if ( n_blocks > 0 && s -> buf [ stream_ptr ] & 0x80 ) { colorA = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) ; } else { colorA = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) ; } if ( n_blocks > 0 && s -> buf [ stream_ptr ++ ] & 0x80 ) { colorA = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) ; },0
545,<S2SV_ModStart> cnt ) { size_t <S2SV_ModEnd> n ; assert,0
546,<S2SV_ModStart> ; __be16 type ; if ( NAPI_GRO_CB ( skb ) -> encap_mark ) goto out ; NAPI_GRO_CB ( skb ) -> encap_mark = 1,1
547,<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { return 0 ; } if (,1
548,"<S2SV_ModStart> ; if ( string_bytes_concat ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> sessionKey. b ) ) ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> nonceNewer. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> salt. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } <S2SV_ModStart>! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> nonceNewer. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; }",0
549,"<S2SV_ModStart> key_ref ) ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; goto error2 ; } ret = key_permission ( key_ref, KEY_NEED_READ ) ; if ( ret == 0 ) goto error2 ; if ( is_key_possessed ( key_ref ) ) { ret = - EOPNOTSUPP ; goto error2 ; }",0
550,<S2SV_ModStart> ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = ps_dec -> u2_total_mbs_coded ; if ( ps_dec -> u2_total_mbs_coded == 0 ) { ret = ih264d_end_of_pic ( ps_dec ) ; if ( ret < 0 ) return ret ; ret = ih264d_end_of_pic ( ps_dec ) ; if ( ret < 0 ) return ret ; ret = ih264d_end_of_pic ( ps_dec ) ; if ( ret < 0 ) return ret ; ret = ih264d_end_of_pic ( ps_dec ) ; if ( ret < 0 ) return ret ; ret = ih264d_end_of_pic ( ps_dec ) ; if ( ret < 0 ) return ret ; ret = ih264d_end_of_pic ( ps_dec ) ; if ( ret < 0 ) return ret ; ret = ih264d_end_of_pic ( ps_dec ) ; if ( ret < 0 ) return ret ; ret = ih264d_end_,0
551,<S2SV_ModStart> = tnum_is_const ( dst_reg -> t <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
552,"<S2SV_ModStart> -> f_namelen ; if ( strlen ( full_path ) > PATH_MAX ) { cFYI ( 1, ""full <S2SV_blank> path <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; rc = - ENAMETOOLONG ; goto lookup_out ; }",0
553,<S2SV_ModStart> - EINVAL ; if ( info. argsz > sizeof ( struct vfio_irq_info ) ) return - EINVAL ; if ( <S2SV_ModStart> - EINVAL ; if ( info. argsz / sizeof ( struct vfio_irq_info ) > sizeof ( struct vfio_irq_info ) ) return - EINVAL ; <S2SV_ModStart> - EINVAL ; if ( info. argsz % sizeof ( struct vfio_irq_info ) > sizeof ( struct vfio_irq_info ) ) return - EINVAL ; <S2SV_ModStart> - EINVAL ; if ( info. argsz / sizeof ( struct vfio_irq_info ) > sizeof ( struct vfio_irq_info ) ) return - EINVAL ;,0
554,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ext4_has_inline_data ( inode,1
555,<S2SV_ModStart> -> filesize = UINT64_MAX <S2SV_ModEnd> ; s ->,1
556,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> -> opt. opt )",0
557,"<S2SV_ModStart> char * in, size_t olen <S2SV_ModStart> += 4 ; if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ;",1
558,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
559,"<S2SV_ModStart> i ; size_t <S2SV_ModEnd> copied, len <S2SV_ModStart> ++ ) { size_t min_copied = min_t ( size_t, <S2SV_ModStart> save_len - cur_len, nr_pages - i ) ; if ( min_copied < 0 ) { rc = - EINVAL ; break ; } <S2SV_ModStart> ++ ) { size_t max_copied = min_t ( size_t, copied, nr_pages - i ) ; if ( rc ) break ; max_copied = min_t ( size_t, max_copied, cur_len ) ; for ( nr_pages = 0 ; nr_pages > i + 1 ; nr_pages -- ) put_page ( wdata -> pages [ nr_pages - 1 ] ) ; put_page ( wdata -> pages [ nr_pages - 1 ] )",0
560,<S2SV_ModStart> & CP_RDESC_SWAPPED_MIN_MAX ) ) return rdesc ; if ( * rsize < 4,1
561,"<S2SV_ModStart> svc_ctx ) { <S2SV_ModEnd> int number_of_frames, <S2SV_ModStart> double y_scale ; SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> = get_svc_internal ( svc_ctx <S2SV_ModEnd> ) ; if <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> svc_log_reset ( svc_ctx <S2SV_ModStart> ; encode_frame_count = svc_ctx <S2SV_ModEnd> -> encode_frame_count ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> si -> encode_frame_count <S2SV_ModStart> si -> encode_frame_count <= 0 ) return vpx_svc_get_message ( svc_ctx ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""\\n"" ) ; for ( i = 0 ; i < si -> layers ; ++ i ) { number_of_frames = encode_frame_count ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %",0
562,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> BYTE * out, UINT32 outSize <S2SV_ModStart> 5 ) { if ( outSize < 1 ) return FALSE ; outSize -- ; <S2SV_ModStart> 4 ; } if ( outSize < len ) return FALSE ; outSize -- ; <S2SV_ModStart> } else { if ( outSize < 1 ) return FALSE ; outSize -- ; * out ++ = value ; left -- ; } } return true ;",0
563,"<S2SV_ModStart> = new_cols ; # if CONFIG_TEMPORAL_DENOISING if ( is_altscreen && <S2SV_ModStart> VTermScreenCell ) * new_cols > screen -> sb_buffer_size ) { if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = NULL ; } else if ( new_cols > screen -> sb_buffer_size ) vterm_allocator_free ( screen -> vt, new_cols ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( new_cols > screen -> sb_buffer_size ) { vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = NULL ; } else if ( new_cols > screen -> sb_buffer_size ) vterm_allocator_free ( screen -> vt, new_cols ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if (",0
564,<S2SV_ModStart> n ) { assert ( <S2SV_ModEnd> literal == NULL <S2SV_ModStart> literal == NULL ) ; const char * literal_start = * str ; int in_named_escape = 0 ; int result = 0 ; assert ( * str < end <S2SV_ModStart> str < end <S2SV_ModEnd> ; ( * <S2SV_ModStart> ++ ) { const char ch = * * str ; if ( ( * str ) - literal_start >= 2 && ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 1 ; } else if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '{' ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) ==,0
565,"<S2SV_ModStart> * m, size_t <S2SV_ModEnd> bufsize ) { <S2SV_ModStart> * buf ; <S2SV_ModEnd> JAS_DBGLOG ( 100 <S2SV_ModStart> 100, ( ""mem_resize(%p, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, m, <S2SV_ModStart> ( 100, ( ""mem_resize(%p, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, m,",0
566,"<S2SV_ModStart> = create_dump_dir_from_problem_data ( <S2SV_ModEnd> pd, g_settings_dump_location",0
567,"<S2SV_ModStart>, pred_txt, & info -> mods ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } expr = expr -> action. args ; } else if (! LookupString ( symInterpretMatchMaskNames, expr -> expr. name, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", expr -> expr. name ) ; return false ; }",0
568,<S2SV_ModStart> pcrypt_free ( struct aead_instance <S2SV_ModEnd> * inst ) <S2SV_ModStart> * ctx = aead_instance_ctx <S2SV_ModEnd> ( inst ),1
569,<S2SV_ModStart> ; if ( ( x1 + w1 ) > ( ptr -> width ) || ( x1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( y1 == 0 ) h1 = ptr -> height - h1 ; } else { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) ) { if ( ( y1 + h1 ) ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( y1 == 0 ) h1 = ptr -> height - h1 ) ; } else { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x,0
570,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
571,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> ra_msg -> hop_limit <S2SV_ModStart> -> hop_limit = <S2SV_ModEnd> ra_msg -> hop_limit <S2SV_ModStart> -> hop_limit ; if ( ra_msg -> hop_limit > ra_msg -> hop_limit ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> hop <S2SV_blank> limit <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ra_msg -> hop_limit ) ; ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> hop <S2SV_blank> limit <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ra_msg -> hop_limit, ra_msg -> hop_limit ) ; } else if ( ra_msg -> hop_limit > ra_msg -> hop_limit ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> hop <S2SV_blank> limit <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ra_msg -> hop_limit ) ; ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> hop <S2SV_blank> limit <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", ra_msg -> hop_limit, ra_msg ->",0
572,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
573,<S2SV_ModStart> * up ; int ulen ; <S2SV_ModStart> rp ) ; ulen = xfrm_replay_state_esn_len ( up ) ; if ( nla_len ( rp ) < ulen || <S2SV_ModEnd> xfrm_replay_state_esn_len ( replay_esn <S2SV_ModStart> replay_esn )!= ulen <S2SV_ModEnd> ) return -,1
574,"<S2SV_ModStart> int ret = proc_dointvec_minmax <S2SV_ModEnd> ( table,",1
575,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array",0
576,<S2SV_ModStart> opj_calloc ( ( size_t ) ( <S2SV_ModStart> -> numlayers + 1U <S2SV_ModEnd> ) * l_step_l,0
577,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
578,"<S2SV_ModStart> ps ) { <S2SV_ModEnd> u32 prev_legacy, <S2SV_ModStart> -> flags ; memset ( & kvm -> arch. vpit -> pit_state. channels [ 0 ], 0, sizeof ( kvm -> arch. vpit -> pit_state. channels ) ) ; <S2SV_ModStart>, 0, sizeof ( kvm -> arch. vpit -> pit_state. channels [ 0 ]. count ) <S2SV_ModEnd>, start )",0
579,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> + mi_col ; const <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> + idx_str ; const <S2SV_ModEnd> BLOCK_SIZE bsize = <S2SV_ModStart> BLOCK_SIZE bsize ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) { switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64, 1, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64, 1, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : <S2SV_ModStart>, mi_row, mi_col, BLOCK_64X64, 1, & dummy_rate,",0
580,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",1
581,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
582,<S2SV_ModStart> } else { # ifdef UPNP_ENABLE_POST_WRITE <S2SV_ModStart> return HTTP_UNAUTHORIZED ; # else return HTTP_NOT_FOUND ; # endif,1
583,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> fd = xfmkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> dir ) ) == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
584,<S2SV_ModStart> blkg ) ) <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> blkg ) ; <S2SV_ModEnd> q -> root_blkg,1
585,"<S2SV_ModStart> 8 ) ; if ( bpp!= 8 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> bpp <S2SV_blank> value\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 8 ) ; if ( bpp!= 4 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> bpp <S2SV_blank> value\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 8 ) ; if ( bpp!= 4 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> bpp <S2SV_blank> value\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
586,"<S2SV_ModStart> ; krb5_data rspac ; const char * tgt_realm = krb5_principal_get_realm ( context, krbtgt -> entry. principal ) <S2SV_ModStart>, cp, tgt_realm,",1
587,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
588,"<S2SV_ModStart> struct usbdevfs_connectinfo ci ; memset ( & ci, 0, sizeof ( ci ) ) ; ci <S2SV_ModEnd>. devnum = <S2SV_ModStart> dev -> devnum ; ci <S2SV_ModEnd>. slow = <S2SV_ModStart> speed == USB_SPEED_LOW <S2SV_ModEnd> ; if (",1
589,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart>, int optlen, ip_options_rcu <S2SV_ModEnd> ) { while <S2SV_ModStart> & 3 ) opt -> __data [ opt -> optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> IPOPT_END ; } rcu_read_lock ( ) ; opt -> optlen = optlen ; rcu_read_unlock ( ) ;",0
590,<S2SV_ModStart> ; args -> rmtvaluelen2 = args -> rmtvaluelen ; args -> rmtvaluelen2 = args -> rmtvaluelen2 ;,0
591,"<S2SV_ModStart> LARGE_INTEGER offset ; size_t devicePathLen = 0 ; if (! NT_SUCCESS ( RtlUnalignedStringCchLengthW ( TC_MAX_PATH, & devicePathLen ) ) ) { Irp -> IoStatus. Status = STATUS_INVALID_PARAMETER ; Irp -> IoStatus. Information = 0 ; break ; } <S2SV_ModStart> ) break ; if (! NT_SUCCESS ( RtlUnalignedStringCchLengthW ( TC_MAX_PATH, & devicePathLen ) ) ) { Irp -> IoStatus. Status = STATUS_INVALID_PARAMETER ; break ; } <S2SV_ModStart> ) break ; if (! NT_SUCCESS ( RtlUnalignedStringCchLength ) ) { Irp -> IoStatus. Status = STATUS_INVALID_PARAMETER ; Irp -> IoStatus. Information = 0 ; break ; } <S2SV_ModStart> ) break ; if (! NT_SUCCESS ( RtlUnalignedStringCchLengthW ( TC_MAX_PATH, & devicePathLen ) ) ) { Irp -> IoStatus. Status = STATUS_INVALID_PARAMETER ; break ; } <S2SV_ModStart> ) break ; if (! NT_SUCCESS ( RtlUnalignedStringCchLengthW ( TC_MAX_PATH,",0
592,"<S2SV_ModStart> ; if ( connection == NULL || strcmp ( connection, ""close"" )!= 0",0
593,<S2SV_ModStart> uint16 nif = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> description ) { if ( d -> description ) { if ( strlen ( d -> description ) ) { if ( strlen ( d -> name ) ) { if ( strlen ( d -> name ) ) { if ( strlen ( d -> description ) ) { if ( strlen ( d -> name ) ) { if ( strlen ( d -> name ) ) { if ( strlen ( d -> description ) ) { if ( strlen ( d -> description ) ) { if ( strlen ( d -> name ) ) { if ( strlen ( d -> name ) ) { if ( strlen ( d -> name ) ) { if ( strlen ( d -> name ) ) { if ( strlen ( d -> description ) ) { if ( strlen ( d -> name ) ) { if ( strlen ( d -> description ) ) { if ( strlen ( d -> name ) ) { if ( strlen ( d -> description ) ) { if ( strlen ( d -> name ) ) { if ( strlen ( d -> name ) ) { if ( strlen ( d -> name ) ) { if ( strlen ( d -> description ) ) { if ( strlen ( d -> description ) ) { if ( strlen ( d -> name ) ) { if,0
594,"<S2SV_ModStart> ; struct dump_dir * dd ; int status ; dd = dd_create ( path, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } dd_create_basic_files ( dd, client_uid, NULL ) ; dd_save_text ( dd, FILENAME_ABRT_VERSION, VERSION ) ; dd_save_text ( dd, FILENAME_CMDLINE, get_cmdline ( pid ) ) ; g_hash_table_iter_destroy ( & iter ) ; dd = dd_create ( path, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; }",0
595,"<S2SV_ModStart> % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap +",0
596,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
597,"<S2SV_ModStart>, int tstype, bool opt_stats <S2SV_ModStart> ; int err ; BUILD_BUG_ON ( sizeof ( struct sock_exterr_skb ) > sizeof ( skb -> cb ) ) <S2SV_ModStart> ee_info = tstype ; serr -> opt_stats = opt_stats",1
598,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
599,<S2SV_ModStart> = len ; bp [ 0 ] = 0 ; <S2SV_ModStart> = len ; bp [ 0 ] = 0 ;,0
600,"<S2SV_ModStart>, CONST_STR_LEN ( ""%2f?"" ), CONST_STR_LEN ( ""/?"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN (",0
601,<S2SV_ModStart> ; if ( task -> ptrace &&! dumpable ) { rcu_read_unlock ( ) ; return - EPERM ; } if (,0
602,<S2SV_ModStart> <= w - ( int ),1
603,<S2SV_ModStart> page ) ; <S2SV_ModEnd> memset ( addr,1
604,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
605,<S2SV_ModStart> ; break ; case SEI_USER_DATA_REGISTERED_ITU_T_T32 : ps_parse -> s_sei_params. i1_user_data_registered_ITU_t_t32 = 1 ; break ; case SEI_USER_DATA_REGISTERED_ITU_T_36 : ps_parse -> s_sei_params. i1_user_data_registered_ITU_t_36 = 1 ; break ; case SEI_REFRESH_ITU_T_36 : ps_parse -> s_sei_params. i1_sei_params. i1_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref_ref,0
606,"<S2SV_ModStart> * priv ; if (! port -> interrupt_out_urb ||! port -> interrupt_in_urb ) { dev_err ( & port -> dev, ""required <S2SV_blank> endpoint <S2SV_blank> is <S2SV_blank> missing\\n"" ) ; return - ENODEV ; }",1
607,<S2SV_ModStart> -> sdma_descq_cnt ) ; if (! dd -> per_sdma ) { ret = - ENOMEM ; goto err_free_per_sdma ; },0
608,<S2SV_ModStart> -> device_data ; cancel_autoload_drivers ( ) ;,1
609,"<S2SV_ModStart>, int rep_quick, my_bool verbose <S2SV_ModStart> ) ) ; if ( verbose ) printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; else printf ( ""- <S2SV_blank> repairing <S2SV_blank> (without <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; if ( verbose ) printf ( ""- <S2SV_blank> repairing <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; else printf ( ""- <S2SV_blank> repairing <S2SV_blank> (without <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ;",0
610,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> p == q ) || ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> size < 16 ) || ( <S2SV_ModEnd> size > 256 <S2SV_ModStart> size > 256 ),1
611,"<S2SV_ModStart> uint dblocks = xfs_attr3_rmt_blocks <S2SV_ModEnd> ( mp,",1
612,"<S2SV_ModStart> ) ; } if ( pcount > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) )",0
613,"<S2SV_ModStart> val ) ; if (! val ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value"", r -> name ) ;",0
614,<S2SV_ModStart> ] == EOF || text [ 1 ] == 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 2 ] ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 3 ] ) <S2SV_ModEnd> ) return 0,1
615,"<S2SV_ModStart> ; char * q = c -> buf + c -> bcnt - 1 ; char * p = c -> buf + c -> bcnt - 1 ; if ( * p == '\\0' ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; } else if ( * p == '\\0' ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> llu: <S2SV_blank> %s"", c -> id, c -> buf ) ; } else if ( * p == '\\0' ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; } else if ( * p == '\\0' ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; } else if ( * p == '\\0' ) { agoo_log_cat ( & agoo_req_cat, ""%s",0
616,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> int i, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",1
617,<S2SV_ModStart> new_data_len ) ; if ( dbus_name == NULL ) { g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ) ) ) ) ) ) ) ) ) ) ; } else { g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error (,0
618,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; fh_lock ( fh ) ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT <S2SV_ModEnd>, argp -> <S2SV_ModStart> argp -> acl_default ) ; out_drop_lock : fh_unlock ( fh ) ; <S2SV_ModEnd> fh_drop_write ( fh",1
619,<S2SV_ModStart> * ue ; if <S2SV_ModEnd> ( tree_root == <S2SV_ModStart> == NULL ) return 0,1
620,"<S2SV_ModStart> char * temp_filename = osi_calloc ( <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> + 5 ), sizeof ( temp_filename ) + 1 ) ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ) fprintf ( fp, ""[%s]\\n"", section -> name ) ; for ( const list_node_t * enode = list_begin ( section -> entries ) ; enode!= list_end ( section -> entries ) ) fprintf ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s\\n"",",0
621,<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) ; <S2SV_ModStart> > 0 ) { elen += pc -> lengthComponentIdent ; break ; } <S2SV_ModEnd> case 2 : <S2SV_ModStart> case 5 : elen += pc -> lengthComponentIdent ; if ( elen > fromlen ) return - EIO ; <S2SV_ModStart> break ; } <S2SV_ModEnd> } if (,1
622,"<S2SV_ModStart> case NFSPROC_TRUNC : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsv3_tstr, ""type-%u"", type ) ) ) ; goto trunc ; } <S2SV_ModStart> case NFSPROC_TRUNC : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsv3_tstr, ""type-%u"", type ) ) ) ; goto trunc ; } <S2SV_ModStart> case NFSPROC_TRUNC : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsv3_tstr, ""type-%u""",0
623,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ;,0
624,"<S2SV_ModStart> userData, target, LIBXML_NOENT <S2SV_ModStart>, target, LIBXML_NOENT <S2SV_ModStart> ) ) { if ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } if ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } if ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } if ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn",0
625,<S2SV_ModStart> ; bool slow <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ;,1
626,"<S2SV_ModStart> len ) { <S2SV_ModEnd> const rpki_rtr_pdu * <S2SV_ModStart> pdu_len ; if ( len < sizeof ( rpki_rtr_pdu ) ) { ND_PRINT ( ( ndo, ""\\n\\t%s"", tstr ) ) ; return ; } if ( len < sizeof ( rpki_rtr_pdu ) ) { ND_PRINT ( ( ndo, ""\\n\\t%s"", tstr ) ) ; return ; } <S2SV_ModStart> -= pdu_len ; pptr <S2SV_ModEnd> += pdu_len ; <S2SV_ModStart> pdu_len ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
627,"<S2SV_ModStart> int tagval ; struct stream packet ; <S2SV_ModStart> length ) ; packet = * s ; <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> token <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> token <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
628,"<S2SV_ModStart> 0 ; int elt ; u_int data_size ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ( ( i = * cp ++ ) & INDIR_MASK )!= INDIR_MASK ) { compress = 0 ; rp = cp + l ; } if ( i!= 0 ) while ( i && cp < ndo -> ndo_snapend ) { if (! compress ) { rp = cp + 1 ; compress = 1 ; } if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return ( NULL ) ; } continue ; } if ( ( i & INDIR_MASK ) == INDIR_MASK ) { if (! compress ) { rp = cp + 1 ; compress = 1 ; } if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; cp = bp + ( ( ( i << 8 ) | * cp ) & 0x",0
629,"<S2SV_ModStart> ; blkcnt = xfs_attr3_rmt_blocks ( args -> dp, args -> rmtvaluelen <S2SV_ModEnd> ) ; error <S2SV_ModStart> valuelen ) ; if ( args -> rmtvaluelen!= args -> valuelen ) { args -> rmtvaluelen = args -> valuelen ; return ( error ) ; }",0
630,"<S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModStart> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" <S2SV_ModEnd> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" <S2SV_ModStart> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"", request <S2SV_ModEnd>, StringBuffer_length (",0
631,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, <S2SV_ModEnd> dest, getuid <S2SV_ModStart> getgid ( ) <S2SV_ModEnd>, S_IRUSR | <S2SV_ModStart> | S_IWUSR ) ; fs_logger2 ( ""clone"", dest <S2SV_ModEnd> ) ; unlink",1
632,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> wait_for_completion ( & fcomp. comp ) ; return NULL ; } hstats -> seconds_since_last_reset = fcstats -> fc. secs_reset ; hstats -> tx_frames = fcstats -> fc. tx_frames ; hstats -> tx_words = fcstats -> fc. tx_words ; hstats -> rx_frames = fcstats -> fc. rx_frames ; hstats -> nos_count = fcstats -> fc. nos_count ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_syncs = fcstats -> fc. loss_of_syncs ; hstats -> link_error_count = fcstats -> fc. link_failures ; hstats -> lost_link_count = fcstats -> fc. lost_link_count ; hstats -> lost_link_words = fcstats -> fc. lost_link_words ; hstats ->,0
633,"<S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> -> y = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> -> z = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f,",1
634,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_set_str ( GITERR_NET, ""Invalid <S2SV_blank> empty <S2SV_blank> packet"" ) ; return GIT_ERROR <S2SV_ModEnd> ; } if",1
635,<S2SV_ModStart> ; if ( vma -> vm_flags & VM_SHARED ) return VM_FAULT_SIGBUS ; if (,1
636,<S2SV_ModStart> -> sasl_mechanism ; rec -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> sasl_password = g_strdup ( src -> sasl_password ) ;,0
637,<S2SV_ModStart> env -> insn_aux_data ; int i <S2SV_ModStart> ) ) ; for ( i = off ; i < off + cnt - 1 ; i ++ ) new_data [ i ]. seen = true ;,1
638,<S2SV_ModStart> ; ND_TCHECK ( * dp <S2SV_ModEnd> ) ; if,1
639,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;,1
640,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
641,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorDecodeTile"", ""%s"", ""occ0%rowsize <S2SV_blank>!= <S2SV_blank> 0"" ) ; return 0 ; } <S2SV_ModEnd> assert ( sp <S2SV_ModStart> 0 ) { if (! <S2SV_ModStart>, rowsize ) ) return 0",1
642,"<S2SV_ModStart> ; size_t o <S2SV_ModEnd> ; if ( <S2SV_ModStart> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; }",0
643,<S2SV_ModStart> ; if ( ctx -> terminated ||,1
644,<S2SV_ModStart> = NULL ; if ( sbi -> spool ) hugepage_put_subpool ( sbi -> spool ) ;,1
645,<S2SV_ModStart> 0 ) { my_errno = mi_get_errno ( info ) ; if ( my_errno == HA_ERR_NO_FILE ) { my_errno = mi_get_errno ( info ) ; if ( my_errno == HA_ERR_NO_FILE ) { my_errno = mi_get_errno ( info ) ; if ( my_errno == HA_ERR_NO_FILE ) { my_errno = mi_get_errno ( info ) ; if ( my_errno == HA_ERR_NO_FILE ) { my_errno = mi_get_errno ( info ) ; if ( my_errno == HA_ERR_NO_FILE ) { my_errno = mi_get_errno ( info ) ; if ( my_errno == HA_ERR_NO_FILE ) { my_errno = mi_get_errno ( info ) ; if ( my_errno == HA_ERR_NO_FILE ) { my_errno = mi_get_errno ( info ) ; if ( my_errno == HA_ERR_NO_FILE ) { my_errno = mi_get_errno ( info ) ; if ( my_errno == HA_ERR_NO_FILE,0
646,"<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; CURLcode <S2SV_ModEnd> res ; if <S2SV_ModStart> = Curl_convert_from_network ( handle <S2SV_ModEnd>, & in <S2SV_ModStart> 1 ) ; * olen = strindex ; return ns ; } alloc = ( length? strlen ( string ) : ( int ) strlen ( string ) ) + 1 ; char * ns = malloc ( alloc ) ; if (! ns ) return NULL ; while ( alloc > 0 ) { unsigned char in ; if ( ( '%' == in ) && ( ISXDIGIT ( string [ 1 ] ) && ISXDIGIT ( string [ 2 ] ) ) { in = Curlx_ultouc ( hex ) ; res = Curl_convert_from_network ( handle, & in, 1 ) ; if (! res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = in ; string ++ ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
647,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
648,"<S2SV_ModStart> ( ) ; iov_iter_advance ( i, copied ) ; <S2SV_ModStart> again ; } <S2SV_ModEnd> pos += copied",1
649,<S2SV_ModStart> unlikely ( len + ring -> frameoffset,1
650,"<S2SV_ModStart> -> pdu_free_state_ref = usm_free_usmStateReference ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|",0
651,"<S2SV_ModStart> |= SEEN ; if (! show_object ( obj, NULL, name, data ) ) die ( ""unknown <S2SV_blank> pending <S2SV_blank> object <S2SV_blank> %s <S2SV_blank> (%s)"", oid_to_hex ( & obj -> oid ), name ) ; else die ( ""unknown <S2SV_blank> pending <S2SV_blank> object <S2SV_blank> %s <S2SV_blank> (%s)"", oid_to_hex ( & obj -> oid ), name ) ;",0
652,<S2SV_ModStart> NULL ; return!,0
653,<S2SV_ModStart> src < zsize + ( sub_type!= 2 ) <S2SV_ModStart> bits ) { if ( src >= src_end ) return AVERROR_INVALIDDATA ;,1
654,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
655,"<S2SV_ModStart> ] ; # ifndef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= 1 ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; }",0
656,"<S2SV_ModStart> 255U ; } if ( j!= ( ssize_t ) length ) { ALOGE ( ""b/26366256"" ) ; return ( - 1 ) ; } if ( j!= ( ssize_t ) length ) { ALOGE ( ""b/26366256"" ) ; return ( - 1 ) ; } if ( j!= ( ssize_t ) length ) { ALOGE ( ""b/26366256"" ) ; return ( - 1 ) ; } if ( j!= ( ssize_t ) length ) { ALOGE ( ""b/26366256"" ) ; return ( - 1 ) ; } if ( j!= ( ssize_t ) length ) { ALOGE ( ""b/26366256"" ) ; return ( - 1 ) ; } if ( j!= ( ssize_t ) length ) { ALOGE ( ""b/26366256"" ) ; return ( - 1 ) ; }",0
657,"<S2SV_ModStart> timer ) ; spin_lock ( & snd_timer_slave_lock ) ; <S2SV_ModStart> slave_active_lock ) ; mutex_unlock ( & snd_timer_slave_lock ) ; } list_for_each_entry ( slave, tmp, & snd_timer_slave_list, open_list ) { spin_lock ( & snd_timer_slave_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; } spin_unlock ( & snd_timer_slave_lock ) ;",0
658,<S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p +,0
659,"<S2SV_ModStart> -> has_va ; <S2SV_ModEnd> const char * <S2SV_ModStart> char * arch = info -> arch ; int arch = info -> arch ; int bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config, ""io.va"", ( binobj -> info )? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config, ""bin.baddr"", baseaddr ) ; r_config_set_i ( r -> config, ""asm.base64"", baseaddr ) ; r_config_set ( r -> config, ""asm.base64"", baseaddr ) ; r_config_set ( r -> config, ""asm.bits"", bits ) ; r_asm_use ( r -> assembler, arch <S2SV_ModEnd> ) ; r_core_bin_info <S2SV_ModStart> NULL ) ; free ( arch ) ; free ( arch ) ;",0
660,"<S2SV_ModStart> sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart>, * n <S2SV_ModEnd> ; list_for_each_entry (",1
661,<S2SV_ModStart> -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1,0
662,"<S2SV_ModStart> gint64 offset ; <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; offset <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! parse_netscreen_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> wth -> fh <S2SV_ModEnd>, & wth <S2SV_ModStart> wth -> frame_buffer, line",1
663,"<S2SV_ModStart> 0 ) ; if ( <S2SV_ModStart>. seq_num ) < 0 ) return - 1 <S2SV_ModStart> processed_rcds ), <S2SV_ModEnd> s -> s3 <S2SV_ModStart> s -> s3 -> rrec. seq_num ) ; } } s -> d1 -> processed_rcds. epoch = s -> d1 -> r_epoch ; s -> d1 -> unprocessed_rcds. epoch = s -> d1 -> r_epoch ; s -> d1 -> unprocessed_rcds. epoch = s -> d1 -> r_epoch + 1 ; return ( 1",0
664,<S2SV_ModStart> { int_fast32_t widthOverflow <S2SV_ModEnd> = gifFilePtr -> <S2SV_ModStart> -> originalWidth ; int_fast32_t heightOverflow <S2SV_ModEnd> = gifFilePtr -> <S2SV_ModStart> info -> originalHeight ; uint_fast32_t newRasterSize ; if ( ( gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ) > info -> rasterSize ) { gifFilePtr -> Image. Width = newRasterSize ; gifFilePtr -> Image. Height = newRasterSize ; break ; } if ( ( gifFilePtr -> Image. Width > info -> rasterSize ) || ( gifFilePtr -> Image. Height > info -> rasterSize ) ) { gifFilePtr -> Image. Width = newRasterSize ; break ; },0
665,"<S2SV_ModStart> : ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = <S2SV_ModStart> == 0 ) ret = <S2SV_ModEnd> key -> type <S2SV_ModStart> type -> read ( key, buffer, buflen ) ; up_read <S2SV_ModEnd> ( & key <S2SV_ModStart> sem ) ; <S2SV_ModEnd> } error2 :",1
666,<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator,0
667,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataIn",0
668,"<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - JAS_CAST ( jas_longlong <S2SV_ModEnd>, ( ( <S2SV_ModStart> & 0x7fffffff ) + JAS_CAST ( jas_longlong <S2SV_ModEnd>, tmp )",0
669,<S2SV_ModStart> page ) ; rm -> atomic. op_active = 0 ;,1
670,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
671,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0",0
672,"<S2SV_ModStart> sizeof ( spath ) ) return - 1 ; if ( strstr ( name, "".."" ) || strchr ( name, '/'",1
673,<S2SV_ModStart> 0 ) { const char * t = ++ s ; <S2SV_ModStart> ( * t <S2SV_ModEnd> &&! isspace <S2SV_ModStart> ) ) t ++ ; if (! isdigit ( * t ) <S2SV_ModEnd> ) { const <S2SV_ModStart> ++ s ; if (! isdigit ( * t ) ) { free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; } else { free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; if (! isdigit ( * t ) ) { free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; } } } } else if ( * s == '/' ) { const char * t = ++ s ; while ( * t &&! isdigit ( * t ) ) t ++ ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; if (! isdigit ( * t ) ) { free ( font_name ) ; font_name = ( char * ) m,0
674,"<S2SV_ModStart> -> bcache, cache_id ( <S2SV_ModStart> ] -> data )",1
675,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
676,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, NULL )",0
677,<S2SV_ModStart> return 1 ; consume_skb ( skb ) ; return 0 <S2SV_ModEnd> ; } if,1
678,<S2SV_ModStart> msixcap ; assert <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_populate_msixcap ( &,0
679,"<S2SV_ModStart> goto out ; err = ovl_setattr_nolock ( dentry, attr ) ; if ( err ) goto out ; <S2SV_ModStart> if ( upperdentry ) { err = notify_change ( upperdentry, attr, NULL ) ; mutex_unlock ( & upperdentry -> d_inode -> i_mutex ) ; } else { err = ovl_copy_up_last ( dentry, attr, false ) ; }",0
680,<S2SV_ModStart> ( isspace ( ( unsigned char ),1
681,"<S2SV_ModStart> ; if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if (",0
682,"<S2SV_ModStart> int decode_unsigned_max ( vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int max ) { vpx_read_bit_buffer <S2SV_ModEnd> ( rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",0
683,<S2SV_ModStart> 1 ) ; if ( strlen ( line ) == 0 ) return - 1 ;,1
684,<S2SV_ModStart> == NULL ) { pk <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
685,<S2SV_ModStart> ++ ) { if ( band -> prec ) { <S2SV_ModStart> ) ; } },1
686,"<S2SV_ModStart> { if ( ( ctxt -> validate ) && ( ( ctxt -> vctxt. error == NULL ) ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %% <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
687,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
688,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> lossless ) { return ONLY_4X4 ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( <S2SV_ModEnd> cpi -> sf <S2SV_ModStart> == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32,0
689,"<S2SV_ModStart> ( u32 size, u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } <S2SV_ModEnd> return malloc ( <S2SV_ModStart> malloc ( size * num",1
690,<S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( bad_format_print <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( bad_format_print <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( bad_format_print <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( bad_format_print <S2SV_ModStart> break ; } if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( bad_format_print <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( bad_format_print <S2SV_ModStart> break ; } if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( bad_format_print <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( bad_format_print <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( bad_format_print <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( bad_format_print <S2SV_ModStart> break ; } if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( bad_format_print <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( bad_format_print <S2SV_ModStart> break ; } if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( bad_format_print <S2SV_ModStart> ) ) { if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( bad_format,0
691,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,1
692,"<S2SV_ModStart> ; if ( tile_buffer_size_cmp ( buf1 -> size, buf2 -> size ) ) { return 1 ; } else if ( tile_buffer_size_cmp ( buf1 -> size, buf2 -> size ) == 0 ) { return - 1 ; } else if ( tile_buffer_size_cmp ( buf2 -> size, buf1 -> size ) == 0 ) { return 1 ; } else if ( tile_buffer_size_cmp ( buf1 -> size, buf2 -> size ) == 0 ) { return - 1 ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
693,"<S2SV_ModStart> scn ) ; # ifdef CDF_DEBUG cdf_dump_dir ( ""ROOT_STORAGE"", root_storage, CDF_SHORT_SEC_SIZE ( & h ) ) ; # endif # ifdef CDF_DEBUG cdf_dump_dir ( ""ROOT_STORAGE"", root_storage, CDF_SHORT_SEC_SIZE ( & h ) ) ; # endif # ifdef CDF_DEBUG cdf_dump_dir ( ""ROOT_STORAGE"", root_storage, CDF_SHORT_SEC_SIZE ( & h ) ) ; # endif # ifdef CDF_DEBUG if ( cdf_dump_dir ( ""ROOT_STORAGE"", root_storage, CDF_SHORT_SEC_SIZE ( & h ) ) ; # endif # ifdef CDF_DEBUG cdf_dump_dir ( ""ROOT_STORAGE"", root_storage, CDF_SHORT_SEC_SIZE ( & h ) ) ; # endif # ifdef CDF_DEBUG cdf_dump_dir ( ""ROOT_STORAGE"", root_storage, CDF_SHORT_SEC_SIZE ( & h ) ) ; # endif",0
694,<S2SV_ModStart> = NULL ; unsigned int <S2SV_ModEnd> sz = sizeof,0
695,<S2SV_ModStart> (! eof && vars -> str. c!= vars -> ptr,1
696,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
697,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
698,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc!= X86EMUL_CONTINUE ) break <S2SV_ModStart> case 4 : rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val )",1
699,"<S2SV_ModStart> url ) ; if ( strcmp ( list. name, errstr ) == 0 ) errstr [ sizeof ( errstr ) - 1 ] = '\\0' ;",0
700,"<S2SV_ModStart> void * end <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; void * dbuf = NULL, * <S2SV_ModStart> struct ceph_crypto_key old_key ; void * <S2SV_ModStart> ; int dlen = ceph_x_decrypt ( & old_key, p, end, & dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } <S2SV_ModStart> bad ) ; tp = dbuf ; <S2SV_ModStart> out ; } tp = tp + dlen ; ceph_decode_need ( p, end, sizeof ( struct ceph_crypto_key ) + 1, bad ) ; if ( is_enc ) { dout ( "" <S2SV_blank> encrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; tp = dbuf ; dend = dp + dlen ; tkt_struct_v = ceph_decode_8 ( & new_ticket_blob ) ; if ( tkt_struct_v!= 1 ) goto out ; memcpy ( & new_ticket_blob, & new_ticket_blob, sizeof ( struct ceph_crypto_key ) ) ; if (! tp ) { ret = - EINVAL ; goto out ;",0
701,"<S2SV_ModStart> / 2 ; if ( count > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ) ;",1
702,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
703,"<S2SV_ModStart> -> init_msg ; if ( s -> session -> session_id_length > 0 ) { SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, ERR_R_MALLOC_FAILURE ) ; goto f_err ; }",0
704,"<S2SV_ModStart> b ) ; if ( b -> manager -> event -> io_event_source ) { r = sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } } r = sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; }",0
705,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ; } <S2SV_null> <S2SV_null>,0
706,<S2SV_ModStart> NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_FIELD_REF_INVOCATION <S2SV_ModStart> -> array_ref. in <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
707,<S2SV_ModStart> lun ) { list_del_init <S2SV_ModEnd> ( & cmd,0
708,"<S2SV_ModStart>, end_col_offset ; string type_comment ; <S2SV_ModStart>, funcdef ) ; type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i ) ) ; if (! type_comment ) return NULL <S2SV_ModStart> += 2 ; type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 1 ) ) ; if (! TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) { type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 1 ) ) ; if (! type_comment ) return NULL ; } if ( TYPE ( CHILD ( n, name_i + 4 ) ) == TYPE_COMMENT ) { type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 2 ) ) ; if (! type_comment ) return NULL ; } if ( TYPE ( CHILD ( n, name_i + 5 ) ) == TYPE_COMMENT ) { type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 2 ) ) ; if (! type_comment ) return NULL ; } if ( <S2SV_ModStart>, body, type_",0
709,"<S2SV_ModStart> err = 0 ; if (! net_eq ( current -> nsproxy -> net_ns, sock_net ( sk ) ) ) return - EINVAL",1
710,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
711,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
712,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
713,"<S2SV_ModStart> ) / 3 ) ThrowReaderException ( CorruptImageError, ""InvalidColormapIndex"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries",0
714,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,1
715,,1
716,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
717,"<S2SV_ModStart> : if ( psf_bump_header_allocation ( psf ) ) { <S2SV_ModEnd> psf_fseek ( psf <S2SV_ModStart> } ; if ( psf_bump_header_allocation ( psf ) < 0 ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; break ; } ; <S2SV_ModStart> : if ( psf_bump_header_allocation ( psf ) < 0 ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; break ; } ; if ( psf_bump_header_allocation ( psf ) < 0 ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; break ; } ; <S2SV_ModStart> : if ( psf_bump_header_allocation ( psf ) < 0 ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; break ; } ; if ( psf_bump_header_allocation ( psf ) < 0 ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence",0
718,<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ioffset ) ; <S2SV_ModEnd> credits = ext4_writepage_trans_blocks <S2SV_ModStart> ) ; goto out_mmap <S2SV_ModEnd> ; } down_write <S2SV_ModStart> handle ) ; out_mmap : up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModEnd> ext4_inode_resume_unlocked_dio ( inode,1
719,<S2SV_ModStart> uint32_t midi_type ; uint8_t * * tracks ; uint32_t * track_size <S2SV_ModEnd> ; uint32_t end_of_tracks <S2SV_ModStart> no_tracks ) ; track_size = midi_data ; <S2SV_ModStart> << 24 ; tmp_val |= ( * midi_data ++ ) << 16 ; tmp_val |= ( * midi_data ++ ) << 8 ; tmp_val |= ( * midi_data ++ ) << 24 ; tmp_val |= ( * midi_data ++ ) << 16 ; tmp_val |= ( * midi_data ++ ) << 8 ; tmp_val |= ( * midi_data ++ ) << 8 ; tmp_val |= ( * midi_data ++ ) << 24 ; tmp_val |= ( * midi_data ++ ) << 16 ; tmp_val |= ( * midi_data ++ ) << 8 ; tmp_val |= ( * midi_data ++ ) << 8 ; tmp_val |= ( * midi_data ++ ) << 24 ; tmp_val |= ( * midi_data ++ ) << 16 ; tmp_val |= ( * midi_data ++ ) << 8 ; tmp_val,0
720,"<S2SV_ModStart> |= SOCK_SNDBUF_LOCK ; sk -> sk_sndbuf = min_t ( u32, val * 2, SOCK_MIN_SNDBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_RCVBUF : val = min_t ( u32, val, sysctl_rmem_max ) ; set_rcvbuf : sk -> sk_userlocks |= SOCK_RCVBUF_LOCK ; sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_MIN_RCVBUF ) ;",0
721,<S2SV_ModStart> * bh ; unsigned int table_len ; <S2SV_ModStart> -> b_data ; table_len = le32_to_cpu ( lvd -> mapTableLength ) ; if ( table_len > sb -> s_blocksize ) goto out_bh ; <S2SV_ModStart> && offset < table_len <S2SV_ModEnd> ; i ++,0
722,"<S2SV_ModStart> long n ; image = 0 ; info = 0 ; <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> header\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> 1, ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %ld; <S2SV_blank> width <S2SV_blank> %ld; <S2SV_blank> height <S2SV_blank> %ld; <S2SV_blank> numplanes <S2SV_blank> %ld; <S2SV_blank> "" ""depth <S2SV_blank> %ld; <S2SV_blank> enctype <S2SV_blank> %ld; <S2SV_blank> siz <S2SV_blank> %ld; <S2SV_blank> hres <S2SV_blank> %ld; <S2SV_blank> vres <S2SV_blank> %ld\\n"", info -> len, info -> enctype, info -> siz, info -> hres, info -> vres ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> 1, ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %ld; <S2SV_blank> width <S2SV_blank> %ld; <S2SV_blank> height <S2SV_blank> %ld; <S2SV_blank> numplanes <S2SV_blank> %ld; <S2SV_blank> "" """,0
723,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
724,<S2SV_ModStart> ) IHEVCD_SUCCESS ) ; if ( ps_cabac -> u4_ofst >= ps_bitstrm -> u4_cur_word + ps_bitstrm -> u4_nxt_word ) { ps_cabac -> u4_ofst = 0 ; ps_cabac -> u4_range = ( UWORD32 ) ps_bitstrm -> u4_cur_word + ps_bitstrm -> u4_nxt_word ; } else { if ( ( ps_cabac -> u4_ofst > ps_bitstrm -> u4_cur_word + ps_bitstrm -> u4_nxt_word ) ) { ps_cabac -> u4_ofst = 0 ; ps_cabac -> u4_range = ( UWORD32 ) ps_bitstrm -> u4_cur_word + ps_bitstrm -> u4_nxt_word ; },0
725,"<S2SV_ModStart> g_tv_comment, FILENAME_COMMENT ) ; update_gui_state_from_problem_data ( ) ; update_gui_state_from_problem_data (",0
726,"<S2SV_ModStart> media_pad_desc pad ; memset ( & pad, 0, sizeof ( pad ) ) ;",0
727,<S2SV_ModStart> ; } } if ( line -> indent > 0 && line -> indent > 0 ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = TRUE ; } else if ( CH ( pivot_line -> beg ) == CH ( hr_killer ) ) { line -> type = MD_LINE_EMPTY ; ctx -> last_line_has_list_loosening_effect = FALSE ; } else if ( CH ( pivot_line -> beg ) == CH ( hr_killer ) ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = TRUE ; } else if ( CH ( pivot_line -> beg ) == CH ( hr_killer ) ) { line -> type = MD_LINE_EMPTY ; ctx -> last_line_has_list_loosening_effect = FALSE ; } else if ( CH ( pivot_line -> beg ) == CH ( hr_killer ) ) { if ( prev_line_has_list_loosening_effect ) { ctx -> last_line_has_list_loosening_effect =,0
728,"<S2SV_ModStart>, height, depth, <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; depth = sun_info. depth ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; height = sun_info. height * sun_info. depth ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( depth > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( depth > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( width > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed""",0
729,"<S2SV_ModStart>, krb5_principal client_principal, const char * tgt_realm <S2SV_ModStart> principal ) ; if ( tgt_realm == NULL ) goto out ;",0
730,"<S2SV_ModStart> ReadBlobLSBLong ( image ) ; if ( bmp_info. number_colors > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
731,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = ireq ->,1
732,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
733,"<S2SV_ModStart>!= 0 ) { int tend_off = skb_transport_offset ( skb ) + tlen ; <S2SV_ModStart> ( csum, skb_checksum ( skb, tend_off, <S2SV_ModEnd> offset, 0 <S2SV_ModStart> ) ) ; }",1
734,"<S2SV_ModStart> pfn ) ; kvm_unpin_pages ( kvm, pfn, page_size ) ; <S2SV_ModStart> base_gfn, gfn - slot -> base_gfn",1
735,<S2SV_ModStart> 0x00 } ; if ( cmd -> msg_len > sizeof ( b ) - 4 ) return - EINVAL ;,1
736,"<S2SV_ModStart> perf_event_context * ctx ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> = PERF_EVENT_STATE_OFF ; perf_event_ctx_unlock ( event, ctx <S2SV_ModEnd> ) ; }",0
737,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> ; return ( <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> [ 3 ] ; return <S2SV_ModEnd> ( value & <S2SV_ModStart> & 0xffffffff ) <S2SV_ModEnd> ; } <S2SV_null>,1
738,"<S2SV_ModStart> free_nid * i, * e <S2SV_ModStart> ; int err <S2SV_ModEnd> ; if ( <S2SV_ModStart> return false ; i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) { spin_lock ( & nm_i -> nid_list_lock ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; radix_tree_preload_end ( ) ; return true ; } i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) { spin_unlock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; radix_tree_preload_end (",0
739,<S2SV_ModStart>. post_proc_flag ; flags -> color_reference_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ) ; <S2SV_ModStart> noise_level ; flags -> color_reference_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES,0
740,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> ++ cons ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> extra. type ) ; netbk_fatal_tx_err ( vif",1
741,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ;,1
742,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
743,"<S2SV_ModStart> - 1 ; luaL_checkstack ( L, 1, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; <S2SV_ModStart> 1, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; if (! lua_isnumber ( L, - 1 ) ) luaL_error ( L, ""format <S2SV_blank> `c0\' <S2SV_blank> needs <S2SV_blank> a <S2SV_blank> previous <S2SV_blank> size"" ) ; size = lua_tonumber ( L, - 1 ) ; if ( size > Lua_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
744,"<S2SV_ModStart> = 0 ; if ( msg_len!= sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> length <S2SV_blank> %u"", ( int ) msg_len ) ) ; goto trunc ; } <S2SV_ModStart> struct olsr_msg4 ) ) ; if ( msg_len!= sizeof ( struct olsr_msg6 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> length <S2SV_blank> %u"", ( int ) msg_len ) ) ) ; goto trunc ; } <S2SV_ModStart> struct olsr_hna4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> length <S2SV_blank> %u"", ( int ) msg_len ) ) ; ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> length <S2SV_blank> %u"", ( int ) msg_len ) ) ; goto trunc ; }",0
745,"<S2SV_ModStart> -> data ; unsigned <S2SV_ModStart> body -> unit_size || len < sizeof ( struct oz_multiple_fixed ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> ( len - ( <S2SV_ModStart> struct oz_multiple_fixed ) - 1 ) ) / body -> unit_size ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; break ; } n = ( len - ( sizeof ( struct oz_multiple_fixed ) + 1 ) ) / body -> unit_size ; while ( n -- ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } break ; case OZ_DATA_F_ISOC_FIXED : { u8 * data = body -> data ; int count ; int i ; if (! unit_size ) break ; count = data_len / unit_size ; for ( i = 0 ; i < count ; i ++ ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, unit_size ) ; data +=",0
746,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
747,"<S2SV_ModStart> ) ) { char * tmp = realpath ( src ) ; if ( tmp ) { <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank>.Xauthority <S2SV_blank> file <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"" ) ; exit ( 1 ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( rv = copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( rv ) fprintf ( stderr, ""Error: <S2SV_blank>.Xauthority <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"" ) ; exit ( 1 ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank>.Xauthority <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"" ) ; exit ( 1 ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( rv ) copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( rv ) fprintf ( stderr, ""Error: <S2SV_blank>.Xauthority <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"" ) ; fs_logger2 ( ""clone"", dest <S2SV_ModEnd> ) ; return",0
748,"<S2SV_ModStart> IMAP_FATAL ; return ; } if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { idata -> status = IMAP_FATAL ; return ; } mailbox = idata -> buf ; s = mailbox + litlen ; * ( s - 1 ) = '\\0' ; SKIPWS ( s ) ; status = imap_mboxcache_get ( idata, mailbox, 1 ) ; if (! status ) { mutt_debug ( 1, ""Error <S2SV_blank> parsing <S2SV_blank> STATUS\\n"" ) ; return ; } if (",0
749,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
750,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext4_extent_header ) + sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_entries ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size ) ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext4_extent_header ) + le16_to_cpu ( neh -> eh_entries ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size ) ;",0
751,<S2SV_ModStart> ; if ( ptr_hbe_txposer -> band_type == IXHEAACD_BAND_4 ) { if ( ptr_hbe_txposer -> band_type == IXHEAACD_BAND_4 ) { if ( ptr_hbe_txposer -> band_type == IXHEAACD_BAND_4 ) { if ( ptr_hbe_txposer -> band_type == IXHEAACD_BAND_4 ) { if ( ptr_hbe_txposer -> band_type == IXHEAACD_BAND_4 ) { if ( ptr_hbe_txposer -> band_type == IXHEAACD_BAND_4 ) { if ( ptr_hbe_txposer -> band_type == IXHEAACD_BAND_4 ) { if ( ptr_hbe_txposer -> band_type == IXHEAACD_BAND_4 ) { if ( ptr_hbe_txposer -> band_type == IXHEAACD_BAND_4 ) { if ( ptr_hbe_txposer,0
752,<S2SV_ModStart> ; cmap_len = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> 0 x_origin = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; y_origin = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> endif image_w = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; image_h = get_tga_ushort <S2SV_ModEnd> ( & tga,1
753,<S2SV_ModStart> ; ssize_t ret ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
754,"<S2SV_ModStart> tp ) { struct timespec rem ; <S2SV_ModStart> == CPUCLOCK_SCHED ) rem = div_u64_rem ( <S2SV_ModEnd> cpu. sched <S2SV_ModStart> cpu. sched, NSEC_PER_SEC, & rem ) ; <S2SV_ModEnd> cputime_to_timespec ( cpu <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
755,<S2SV_ModStart> ; uint32 nstrips <S2SV_ModEnd> ; nstrips =,1
756,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0",0
757,"<S2SV_ModStart> lua_module ) ; luaLuaProviderConfig * const config = ap_get_module_config ( r -> per_dir_config, & lua_module ) ; const lua_authz_provider_spec * const prov_spec = parsed_require_line ; luaLuaProviderConfig * const config = ap_get_module_config ( r -> per_dir_config, & lua_module ) ; spec = create_vm_spec ( & pool, r, cfg, server_cfg, ""authz <S2SV_blank> provider"" ) ; if ( L == NULL ) { lua_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02314 ) ""Unable <S2SV_blank> to <S2SV_blank> compile <S2SV_blank> VM <S2SV_blank> for <S2SV_blank> authz <S2SV_blank> provider"" ) ; return AUTHZ_GENERAL_ERROR ; } lua_getglobal ( L, prov_spec -> function_name ) ; if ( lua_isfunction ( L, - 1 ) ) { lua_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%",0
758,<S2SV_ModStart> ; int error = 0 <S2SV_ModStart> &= PAGE_MASK ; if ( address < mmap_min_addr ) return - EPERM <S2SV_ModEnd> ; prev =,1
759,"<S2SV_ModStart> { umode_t mode <S2SV_ModEnd> ; error = <S2SV_ModStart> ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart>, & mode, & acl <S2SV_ModStart> if ( error <S2SV_ModEnd> ) return error <S2SV_ModStart> return error ; <S2SV_ModEnd> error = xfs_set_mode",1
760,"<S2SV_ModStart>, int optional, const char * rootfs <S2SV_ModStart> endif if ( safe_mount <S2SV_ModEnd> ( fsname, <S2SV_ModStart> MS_REMOUNT, data, rootfs <S2SV_ModStart>, data ) < 0",1
761,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
762,"<S2SV_ModStart> it_overrun = - 1LL <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> info -> si_overrun = timer_overrun_to_int ( timr, info -> si_overrun ) <S2SV_ModEnd> ; } unlock_timer",1
763,<S2SV_ModStart> if (! proto_end ) return 0 ;,0
764,<S2SV_ModStart> struct static_key * once_key <S2SV_ModEnd> ) { static <S2SV_ModStart> ; __net_random_once_disable_jump ( once_key <S2SV_ModEnd> ) ; return,1
765,"<S2SV_ModStart> -> actual ; bool kiocb_has_eventfd = <S2SV_ModEnd> io_data -> kiocb <S2SV_ModStart> ki_flags & IOCB_EVENTFD ; if ( io_data -> read && ret > 0 ) { use_mm ( io_data -> mm ) ; ret = copy_to_iter ( io_data -> buf, ret, & io_data -> data ) ; if ( iov_iter_count ( & io_data -> data ) ) ret = - EFAULT ; unuse_mm ( io_data -> mm ) ; } io_data -> kiocb -> ki_complete ( io_data -> kiocb, ret, ret ) ; if ( io_data -> ffs -> ffs_eventfd &&! kiocb_has_eventfd <S2SV_ModEnd> ) eventfd_signal ( <S2SV_ModStart> -> req ) <S2SV_ModEnd> ; if (",1
766,<S2SV_ModStart> ; if ( IPCB ( skb ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> &&! opt,1
767,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
768,"<S2SV_ModStart> struct trusted_key_payload * p ; struct trusted_key_payload * new_p ; struct trusted_key_options * new_o ; size_t datalen = prep -> datalen ; char * datablob ; int ret = 0 ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ; <S2SV_ModStart> 0 ] ; <S2SV_ModEnd> if (!",1
769,"<S2SV_ModStart> v |= ( JAS_CAST ( uint_fast32_t, c ) <S2SV_ModEnd> << 24 )",1
770,<S2SV_ModStart> NULL ) { if ( skb -> len < ROSE_MIN_LEN ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> 2 ] ; if ( frametype == ROSE_CALL_REQUEST && ( skb -> len <= ROSE_CALL_REQ_FACILITIES_OFF || skb -> data [ ROSE_CALL_REQ_ADDR_LEN_OFF ]!= ROSE_CALL_REQ_ADDR_LEN_VAL ) ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> -> data + ROSE_CALL_REQ_DEST_ADDR_OFF <S2SV_ModEnd> ) ; lci_o,1
771,<S2SV_ModStart> out_free ; } if ( base_gfn!= old. base_gfn,0
772,<S2SV_ModStart> if ( indev!= NULL && indev -> dead ) { rcu_read_unlock ( ) ; return NF_DROP ; },0
773,"<S2SV_ModStart> fdt ) ; const char * const name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> nextoffset ; switch ( tag ) { case FDT_PROP : include = want >= 2 ; stop_at = offset ; break ; case FDT_NOP : include = want >= 2 ; break ; case FDT_BEGIN_NODE : depth = 0 ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + count >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path",0
774,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",1
775,"<S2SV_ModStart> { if ( in_bio == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT ) ; goto err ; } if ( <S2SV_ModStart> { if ( in_bio == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT ) ; goto err ; }",0
776,"<S2SV_ModStart> ) ; } if ( loops % 50 ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; } for ( j = 0 ; j < server. dbnum ; j ++ ) { if (! ( loops % 50 ) && ( dictSize ( server. db [ j ]. dict ) == - 1 ) ) { redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; } for ( j = 0 ; j < server. dbnum ; j ++ ) { if ( dictSize ( server. db [ j ]. dict ) == - 1 ) { redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT.""",0
777,"<S2SV_ModStart> } if ( options -> flags & ( UV_PROCESS_SETUID | UV_PROCESS_SETGID ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuid()"" ) ; _exit ( 127 ) ; } if (",0
778,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> EOPNOTSUPP ; } if ( rlen > MAX_XFER_SIZE ) { warn ( ""i2c <S2SV_blank> rd: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", rlen ) ; return - EOPNOTSUPP ; } <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> wlen ) ; <S2SV_ModEnd> ret = dvb_usb_generic_rw <S2SV_ModStart> + wlen, st -> data <S2SV_ModEnd>, rlen, <S2SV_ModStart> rlen, 0 ) ; if (! ret && rbuf && rlen ) memcpy ( rbuf, st -> data, rlen",1
779,"<S2SV_ModStart> -> priv -> connection_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_connection_timeout, client ) ;",0
780,<S2SV_ModStart> book -> dim && i < n,1
781,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
782,"<S2SV_ModStart> if ( ret || btrfs_check_dir_item_collision ( root, dir_item, new_root_item ) ) { ret = btrfs_check_dir_item_collision ( trans, fs_info, root, dir_item, new_root_item ) ; if ( ret ) { pending -> error = ret ; goto root_item_collision_fail ; } ret = btrfs_check_dir_item_collision ( trans, root, dir_item, new_root_item ) ; if ( ret ) { pending -> error = ret ; goto root_item_collision_fail ; } ret = btrfs_check_dir_item_collision ( trans, fs_info, root, dir_item, new_root_item ) ; if ( ret ) { pending -> error = ret ; goto root_item_collision_fail ; } ret = btrfs_check_dir_item_collision ( trans, root, dir_item, new_root_item ) ; if ( ret ) { pending -> error = ret ; goto root_item_collision_fail ; } ret = btrfs_",0
783,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; BUG_ON <S2SV_ModStart> unix_tot_inflight -- ; } fp -> f_cred -> user -> unix_inflight -- ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
784,"<S2SV_ModStart> size_t chanmap_size = SF_MIN ( <S2SV_ModStart> sf. channels, layout_tag & 0xffff )",1
785,<S2SV_ModStart> { if ( sf -> x_scale_fp == REF_INVALID_SCALE ) { sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if ( sf -> y_scale_fp == REF_INVALID_SCALE ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if ( sf -> x_step_q4 == 16 ) { if ( sf -> y_step_q4 == 16 ) { sf -> predict [ 0 ] [ 0 ] = vp9_convolve_copy ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve8_horiz ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve8_avg_horiz ; } else { sf -> predict [ 0 ] [ 0 ] = vp9_convolve_copy ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve8_vert ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve8_avg_vert ; sf -> predict,0
786,<S2SV_ModStart> ms ) { uint32_t <S2SV_ModEnd> nestsize = ( <S2SV_ModStart> nestsize = ( uint32_t <S2SV_ModEnd> ) ms ->,1
787,"<S2SV_ModStart> PERF_COUNT_SW_ALIGNMENT_FAULTS, 1 <S2SV_ModEnd>, regs,",0
788,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
789,<S2SV_ModStart> -> xrefs = safe_calloc ( <S2SV_ModEnd> sizeof ( xref_t,1
790,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
791,"<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ) <S2SV_ModStart> ( opt ) { atomic_sub ( <S2SV_ModEnd> opt -> tot_len <S2SV_ModStart> opt -> tot_len, & sk -> sk_omem_alloc ) ; txopt_put ( opt <S2SV_ModStart> ) ; } }",1
792,"<S2SV_ModStart>, * tmpin = NULL, * tmpout <S2SV_ModStart> ; if ( dcont ) { tmpout = dcont ; if (! tmpout ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_NO_CONTENT ) ; goto err ; } <S2SV_ModStart> cmsbio ) ; if (! tmpout ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_NO_CONTENT ) ; goto err ; } <S2SV_ModStart> if (! ( flags & CMS_NO_SIGNER_CERT_VERIFY ) ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_SIGNER_CERTIFICATE_NOT_FOUND ) ; goto err ; } } if (! ( flags & CMS_NO_SIGNER_CERT_VERIFY ) ) { cms_certs = CMS_get1_certs ( cms ) ; crls = CMS_get1_crls ( cms ) ; for ( i = 0 ; i < sk_CMS_SignerInfo_num ( sinfos ) ; i ++ ) { si = sk_CMS_SignerInfo_value ( sinfos, i ) ; if (! cms_signerinfo_verify_cert ( si, store, cms_certs,",0
793,"<S2SV_ModStart> ; if ( np -> pmtudisc == IPV6_PMTUDISC_PROBE ) { struct in6_pktinfo src_info ; memset ( & src_info, 0, sizeof ( src_info ) ) ; rcu_read_lock ( ) ; } else { memset ( & src_info, 0, sizeof ( src_info ) ) ; rcu_read_unlock ( ) ; }",0
794,<S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_exit <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_v4_protosw_exit,0
795,"<S2SV_ModStart> cs_flags ) ; hook_del_nick_can_register ( check_registration_keywords ) ; hook_add_user_can_register ( check_registration_keywords ) ; hook_add_user_can_register ( check_registration_keywords ) ; hook_add_user_can_register ( check_registration_keywords ) ; del_conf_item ( ""ANOPE_FLAGS_COMPAT"", ""ANOPE_FLAGS_COMPAT"", ""ANOPE_FLAGS_COMPAT"", ""ANOPE_FLAGS_COMPAT_NO_PRIVS_NO_PRIVS_NO_PRIVS_NO_PRIVS_NO_PRIVS_NO_PRIVS_NO_PRIVS_NO_PRIVS_NO_PRIVS_NO_PRIVS_NO_PRIVS_NO_PRIVS_NO_PRIVS_NO_PRIVS_NO_PRIVS_NO_PRIVS_NO_PRIVS_NO_PRIVS_NO_PRIVS_NO_PRIVS_NO_PRIVS_NO_PRIVS_NO_PRIVS_NO_PRIVS_NO_PRIVS_NO_PRIVS_NO_PRIVS_",0
796,"<S2SV_ModStart> ) { struct in_device * idev <S2SV_ModEnd> = ( ( <S2SV_ModStart> ) -> ifa_dev <S2SV_ModEnd> ; struct netdev_notifier_info <S2SV_ModStart> netdev_notifier_info info ; if ( idev -> dead ) return NOTIFY_DONE ; <S2SV_ModStart> & info, idev ->",1
797,"<S2SV_ModStart> current -> active_mm <S2SV_ModEnd>!= mm ) <S2SV_ModStart> goto out ; if (! mmget_still_valid ( mm ) ) { leave_mm ( smp_processor_id ( ) ) ; base_pages_to_flush = ( end - start ) >> PAGE_SHIFT ; } if ( ( end!= TLB_FLUSH_ALL ) &&! ( vmflag & VM_HUGETLB ) ) base_pages_to_flush = ( end - start ) >> PAGE_SHIFT ; if ( base_pages_to_flush > tlb_single_page_flush_ceiling ) { base_pages_to_flush = TLB_FLUSH_ALL ; count_vm_tlb_event ( NR_TLB_LOCAL_SHOOTDOWN, base_pages_to_flush ) ; __flush_tlb_single ( start ) ; } else { count_vm_tlb_event ( NR_TLB_LOCAL_SHOOTDOWN, base_pages_to_flush ) ; } <S2SV_ModEnd> trace_tlb_flush ( TLB_LOCAL_MM_SHOOTDOWN",0
798,"<S2SV_ModStart> void show_psnr ( const <S2SV_ModStart> ) ; ovpsnr = sse_to_psnr <S2SV_ModEnd> ( ( double <S2SV_ModStart> ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", ( double ) stream -> psnr_totals [ i ] / stream -> psnr_count ) ; }",0
799,"<S2SV_ModStart> val ) { int temp_size = 500 ; char * temp = malloc ( temp_size ) <S2SV_ModEnd> ; int i <S2SV_ModStart> ; ) { if ( i >= temp_size ) { temp_size *= 2 ; temp = realloc ( temp, temp_size ) ; }",1
800,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
801,"<S2SV_ModStart> name ) { size_t alloc_size = 0 ; <S2SV_ModStart> 16 ) ; if ( MUL_OVERFLOW ( sizeof ( dst_name ), sizeof ( dst_name ), & alloc_size ) ) { ERR ( ""Memory <S2SV_blank> allocation <S2SV_blank> failed: <S2SV_blank> %d <S2SV_blank> bytes <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", dst_name, sizeof ( dst_name ) ) ; free ( dst_name ) ; return ; }",0
802,"<S2SV_ModStart> = 0 ; if ( addr_str_length > sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""too <S2SV_blank> large <S2SV_blank> management <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; goto error ; } <S2SV_ModStart> = 0 ; if ( addr_str_length > sizeof ( orgid ) ) { log_warn ( ""lldp"", ""too <S2SV_blank> large <S2SV_blank> management <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; goto error ; }",0
803,"<S2SV_ModStart> object + size <= bplist -> offset_table ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> BPLIST_DICT <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__ ) ; return NULL ; } if ( * object + size <= bplist -> offset_table ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> BPLIST_DICT <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__ ) ; return NULL ; }",0
804,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> TRACE_DEBUG ( ""CIDER=0x%04"" <S2SV_ModStart> ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { memPoolFree ( context -> txBuffer ) ; memPoolFree ( context -> rxBuffer ) ; return ERROR_OUT_OF_MEMORY ;",0
805,<S2SV_ModStart> all_channels_lock ) ; put_net ( pch -> chan_net ) ; pch -> chan_net = NULL ;,1
806,"<S2SV_ModStart> btrfs_dir_item * di = NULL <S2SV_ModStart> - ENOMEM ; path -> skip_release_on_error = 1 ; if (! value ) { di = btrfs_lookup_xattr ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if (! di && <S2SV_ModEnd> ( flags & <S2SV_ModStart> & XATTR_REPLACE ) ) ret = - ENODATA ; else if ( di ) ret = btrfs_delete_one_dir_name <S2SV_ModEnd> ( trans, <S2SV_ModStart>, path, <S2SV_ModEnd> di ) ; <S2SV_ModStart> out ; } btrfs_release_path ( path ) ; if ( flags & XATTR_REPLACE ) { di = btrfs_lookup_xattr ( NULL, root, path, btrfs_ino ( inode ), name, name_len, 0 ) ; if (! di && <S2SV_ModEnd> value ) goto <S2SV_ModStart> out ; } btrfs_release_path ( path ) ; di = NULL ; } ret = btrfs_insert_xattr_item <S2SV_ModEnd> ( trans, <S2SV_ModStart>, path, btrfs_ino ( inode ), name, name_len, value, size ) ;",0
807,<S2SV_ModStart> > 0xbf ) { <S2SV_ModStart> return 1 ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto err ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto err ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto err ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto err ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto err ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto err ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto err ; },0
808,"<S2SV_ModStart> client -> proxy ) ; g_byte_array_free ( client -> auth_buffer, TRUE",1
809,"<S2SV_ModStart>, bsize, plane, vp9_foreach_transformed_block_in_plane <S2SV_ModEnd>, & arg",0
810,<S2SV_ModStart> ; if ( key_is_negative ( key <S2SV_ModEnd> ) ) return,1
811,<S2SV_ModStart> ip ++ ; if ( unlikely ( ip >= ip_end ) ) goto input_overrun ; <S2SV_ModStart> } else # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> NEED_IP ( t <S2SV_ModStart> ; NEED_IP ( t + 3 ) ; do { * op ++ = * ip ++ ; } while ( ip < ip_end <S2SV_ModEnd> ) ; } <S2SV_ModStart> endif { NEED_IP ( t + 3 ) ; do { * op ++ = * ip ++ ; } while ( ip < ip_end ) ; <S2SV_ModStart> m_pos ) ; <S2SV_ModEnd> state = 4 <S2SV_ModStart> match_next : { next = t & 3 ; op [ 0 ] = m_pos [ 0 ] ; op [ 1 ] = m_pos [ 1 ] ; op [ 2 ] = m_pos [ 1 ] ; op [ 3 ] = m_pos [ 2 ] ; } <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
812,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> fit_check_format ( fit <S2SV_ModStart>, IMAGE_SIZE_INVAL ) < 0 ) { bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; <S2SV_ModStart> ) ; return - EINVAL ; } bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_FORMAT_OK ) ; if ( fit_uname ) { bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_UNIT_NAME ) ; noffset = fit_image_get_node ( fit, fit_uname ) ; } else { bootstage_error ( bootstage_id + BOOTSTAGE_SUB_UNIT_NAME ) ; noffset = fit_image_get_node ( fit, fit_uname_config ) ; } if ( noffset < 0 ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; }",0
813,<S2SV_ModStart> { vpn_packet_t outpkt ; if ( len > sizeof outpkt. data ) return,1
814,<S2SV_ModStart> vmx_vpid_bitmap ) ; <S2SV_ModEnd> for ( msr <S2SV_ModStart> : <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
815,"<S2SV_ModStart>, j ) int vdaux = verdef -> vd_aux ; if ( vdaux < 1 || vdaux <S2SV_ModStart> > end || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ <S2SV_ModStart> Verdaux ) || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ <S2SV_ModStart> Verdaux ) || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ <S2SV_ModStart> Verdaux ) || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ <S2SV_ModStart> Verdaux ) || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ <S2SV_ModStart> Verdaux ) || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ <S2SV_ModStart> Verdaux ) || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ <S2SV_ModStart> Verdaux ) || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ <S2SV_ModStart> Verdaux ) || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ <S2SV_ModStart> Verdaux ) || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ <S2SV_ModStart> Verdaux ) || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ <S2SV_ModStart> Verdaux ) || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ <S2SV_ModStart> Verdaux ) || end - vstart < <S2SV_ModEnd> size",0
816,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ),0
817,<S2SV_ModStart> )? ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval <S2SV_ModEnd> * af_ratio ) <S2SV_ModStart> : ( rc -> avg_frame_bandwidth * rc -> avg_gf_interval <S2SV_ModEnd> * af_ratio ) <S2SV_ModStart> : ( rc -> avg_frame_bandwidth * rc -> avg_gf_interval <S2SV_ModEnd> * rc -> <S2SV_ModStart> -> av_per_frame_bandwidth * ( rc -> avg_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval +,0
818,"<S2SV_ModStart> argv [ i ]!= NULL ) { if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted""",0
819,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
820,<S2SV_ModStart> INDENT_INCR ; } if ( tbl -> indent < 0 ) tbl -> indent = 0 ; <S2SV_ModStart> -= INDENT_INCR ; if ( offset < 0 ) offset = 0 ;,1
821,"<S2SV_ModStart> + tail ; size_t sst_len = sst -> sst_len ; <S2SV_ModStart> b ) <= CDF_SEC_SIZE ( h ) * sst -> sst_len && e - b <= CDF_SEC_SIZE ( h ) * sst -> sst_len <S2SV_ModStart> b ) <= CDF_SEC_SIZE ( h ) * sst -> sst_len && e - b <= CDF_SEC_SIZE ( h ) * sst -> sst_len && ( size_t ) ( e - b ) <= CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ), sst -> sst_len ) ) ; DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> [%"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u]\\n"", line, b, e, ( size_t ) ( e - b ), CDF_SEC_SIZE ( h )",0
822,"<S2SV_ModStart> : # line 1337 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1337 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 1337 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1337 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 1337 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1337 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 1337 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1337 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 1337 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1337 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 1337 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1337 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 1337 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1337 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 1337 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1337 <S2SV_ModEnd> ""hex_grammar.y""",0
823,<S2SV_ModStart> ib ] ; dequant_ptr = d -> dequant ; coeff_ptr = b -> coeff ; qcoeff_ptr = b -> qcoeff ; dqcoeff_ptr = d -> dqcoeff ;,0
824,<S2SV_ModStart> FN_REFLEN ] ; if ( strlen ( opt_basedir ) > sizeof ( buff ) - 1 ) { error = - 1 ; goto exit ; },0
825,<S2SV_ModStart> ; if ( key_is_positive ( key <S2SV_ModEnd> ) ) zap,1
826,"<S2SV_ModStart> ) -> filter ; memset ( & uf, 0, sizeof ( uf ) )",1
827,"<S2SV_ModStart> int n = MIN ( <S2SV_ModStart> data_end - data ) ; if ( n <= 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; }",0
828,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
829,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
830,"<S2SV_ModStart> cleanup ; } if ( copy_from_user ( & fibsize, user_srb -> count, sizeof ( u32 ) ) ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> copy <S2SV_blank> data <S2SV_blank> size <S2SV_blank> from <S2SV_blank> user\\n"" ) ) ; rcode = - EFAULT ; goto cleanup ; } if ( <S2SV_ModEnd> fibsize > ( <S2SV_ModStart> max_fibsize ) ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> Fibsize <S2SV_blank> too <S2SV_blank> large <S2SV_blank> from <S2SV_blank> user\\n"" ) ) ; rcode = - EINVAL ; goto cleanup ; }",0
831,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( cc0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorEncodeTile"", ""%s"", ""(cc0%rowsize)!=0"" ) ; return 0 ; } <S2SV_ModEnd> while ( cc",1
832,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
833,"<S2SV_ModStart> input_data, size_t input_forwards_size, size_t input_backwards_size <S2SV_ModEnd>, int flags <S2SV_ModStart> # define prolog { if ( <S2SV_ModEnd> bytes_matched >= max_bytes_matched <S2SV_ModStart> >= max_bytes_matched ) { action = ACTION_KILL ; break ; } <S2SV_ModEnd> # define fail_if_error <S2SV_ModStart> ) switch ( e ) { case ERROR_INSUFFICIENT_MEMORY : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } <S2SV_ModEnd> if ( _yr_re_alloc_storage <S2SV_ModStart> ) switch ( e ) { case ERROR_INSUFFICIENT_MEMORY : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } <S2SV_ModStart> RE_FLAGS_BACKWARDS ) { <S2SV_ModEnd> input -= character_size <S2SV_ModStart> input_incr ; } max_bytes_matched = ( int ) yr_min ( input_backwards_size, RE_SCAN_LIMIT ) ; <S2SV_ModStart> RE_SCAN_LIMIT ) ; match = ( int ) yr_min ( input_backwards_size, RE_SCAN_LIMIT ) ; <S2SV_ModStart>",0
834,"<S2SV_ModStart> returnrate, int * returndistortion, int * returnintra ) { BLOCK * b = & x -> block [ 0 ] ; BLOCKD * d = & x -> e_mbd. block [ 0 ] ; MACROBLOCKD * xd = & x -> e_mbd. block [ 1 ] ; <S2SV_ModStart> int zero_mv_sse = UINT_MAX <S2SV_ModEnd>, best_sse = <S2SV_ModStart>, best_rd_sse = UINT_MAX <S2SV_ModEnd> ; mode_mv =",0
835,"<S2SV_ModStart> svm, MC_VECTOR ) ; set_exception_intercept ( svm, DB_VECTOR",0
836,<S2SV_ModStart> goto error ; if ( statbuf. st_size < 0 ) goto error ;,0
837,"<S2SV_ModStart> sst, const cdf_directory_t * root_storage <S2SV_ModEnd> ) { cdf_summary_info_header_t <S2SV_ModStart> break ; } if ( root_storage ) { <S2SV_ModStart> = cdf_clsid_to_mime ( root_storage -> d_storage_uuid <S2SV_ModEnd>, clsid2desc ) <S2SV_ModStart> - 2 ; } <S2SV_ModStart>, count, root_storage <S2SV_ModEnd> ) ; free",1
838,"<S2SV_ModStart> ; UWORD8 u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id ; UWORD16 i2_max_frm_num ; WORD32 u4_bitstrm_ofst ; WORD32 pic_height_in_map_units_minus1 ; WORD32 u2_pic_wd, u2_pic_ht, u2_crop_offset_y, u2_crop_offset_uv, u4_num_reorder_frames, u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id, u4_bitstrm_ofst, u4_pic_wd, u4_pic_ht, u4_pic_wd, u2_pic_wd, u2_pic_ht, u2_crop_offset_y, u2_crop_offset_uv, u4_temp, u4_num_reorder_frames, u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id, u1_seq_parameter",0
839,<S2SV_ModStart> -> length ) ; if ( err ) return - EFAULT,1
840,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_svc_parameters_t * ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) return VPX_CODEC_INVALID_PARAM ; vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height ) ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; cpi -> svc. spatial_layer_id = params -> spatial_layer ; cpi -> svc. temporal_layer_id = params -> temporal_layer ; cpi -> svc. lst_fb_idx = params -> lst_fb_idx ; cpi -> gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc",0
841,"<S2SV_ModStart> icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ) ; goto err ; <S2SV_ModEnd> } if ( <S2SV_ModStart> > 0 ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) - nhoff, 0 ) ) ; goto err ; } <S2SV_ModEnd> if ( prev <S2SV_ModStart> > 0 ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_",0
842,"<S2SV_ModStart> { uint16 bitspersample, samplesperpixel ; uint16 <S2SV_ModEnd> input_compression, input_photometric <S2SV_ModStart>, input_photometric ; copyFunc cf ; uint32 width, length ; uint32 bitspersample, length ; length = TIFFGetField ( in, TIFFTAG_BITSPERSAMPLE, & bitspersample ) ; length = TIFFGetField ( in, TIFFTAG_LENGTH, & length ) ; CopyField ( TIFFTAG_BITSPERSAMPLE, bitspersample ) ; CopyField ( TIFFTAG_SAMPLESPERPIXELEL, samplesperpixel ) ; if ( length!= ( uint32 ) - 1 ) length = TIFFGetField ( in, TIFFTAG_IMAGELENGTH, length ) ; if ( length!= ( uint32 ) - 1 ) length = TIFFGetField ( in, TIFFTAG_IMAGEWIDTH, length ) ; CopyField ( TIFFTAG_LENGTH, length ) ; if ( length!= ( uint32 ) - 1 ) length = TIFFGetField ( in, TIFFTAG_LENGTH, length ) ; if ( length!= ( uint32 ) - 1 ) length = ( uint32 ) length ; CopyField ( TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( TIFFTAG",0
843,"<S2SV_ModStart> a ) { const char * p, * pn ; int c ; int r ; <S2SV_ModStart> = '\\0' ; if ( a -> flags & ARCHIVE_EXTRACT_NOFOLLOW ) { if ( rmdir ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( S_ISLNK ( a -> mode ) ) { archive_set_error ( & a -> archive, 0, ""Removing <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; } a -> pst = NULL ; } else if ( S_ISLNK ( a -> mode ) ) { if (! S_ISLNK ( a -> mode ) ) { archive_set_error ( & a -> archive, 0, ""Removing <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; } a -> pst = NULL ; if (! S_ISLNK ( a -> mode ) ) { archive_set_error ( & a -> archive, 0, ""Removing <S2SV_blank> symlink <S2SV_blank> %s",0
844,"<S2SV_ModStart> ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL, rootfs -> path? rootfs -> mount : <S2SV_ModEnd> NULL )!=",1
845,"<S2SV_ModStart> int link_count ; if ( iinfo -> i_location. len > inode -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode:%d\\n"", inode -> i_ino, inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ) { if ( udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode:%d\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( iinfo -> i_location. len > inode -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode:%d\\n"", inode -> i_ino ) ; make_bad_inode",0
846,<S2SV_ModStart> -> tx_size ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_y ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y [ tx_size_y ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above,0
847,"<S2SV_ModStart> dst_size ) { uint16_t namelen <S2SV_ModEnd> ; while ( <S2SV_ModStart> data < data_end <S2SV_ModEnd> ) { len <S2SV_ModStart> - 1 ; namelen = ff_amf_tag_size ( data, data_end ) ; if ( namelen < 0 || len >= data_end - data ) return - 1 ; <S2SV_ModStart> data ++ ; <S2SV_ModEnd> for ( ; <S2SV_ModStart> size ) break ; if (! memcmp ( data, name, namelen ) ) { switch ( * data ++ ) { case AMF_DATA_TYPE_NUMBER : snprintf ( dst, dst_size, ""%g"", av_int2double ( AV_RB64 ( data ) ) ) ; break ; case AMF_DATA_TYPE_BOOL : snprintf ( dst, dst_size, ""%s"", * data? ""true"" : ""false"" ) ; break ; } if (! memcmp ( data - size, name, namelen ) ) { switch ( * data ++ ) { case AMF_DATA_TYPE_NUMBER : snprintf ( dst, dst_size, ""%g"", av_int2double ( AV_RB64 ( data ) ) ) ; break ; case A",0
848,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
849,"<S2SV_ModStart> mq_flush_lock, flags ) ; fq -> flush_rq = flush_rq ;",0
850,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
851,<S2SV_ModStart> NULL ; return!,0
852,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; if (! <S2SV_ModStart>, cc ) ) return 0 <S2SV_ModStart> wc ) ; return 1 ;",1
853,"<S2SV_ModStart> ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"", & ovalue ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option: <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; }",0
854,"<S2SV_ModStart> __be32 daddr ; struct ip_options_rcu * inet_opt <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. srr ) daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr",0
855,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
856,"<S2SV_ModStart> * mgr_hdl ; <S2SV_ModEnd> memset ( s_path <S2SV_ModStart> ( c_path ) <S2SV_ModEnd> ) ; switch <S2SV_ModStart> ( c_path, ""%s%s%d_C_XXXXXX"" <S2SV_ModEnd>, HSM_FM_SCK_PREFIX, <S2SV_ModStart> hdl -> instance <S2SV_ModEnd> ) ; if",1
857,"<S2SV_ModStart> == NULL || <S2SV_ModEnd> * replySize < <S2SV_ModStart> ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( p -> param. psize!= sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> param <S2SV_blank> size <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( p -> param. psize!= sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> param <S2SV_blank> size <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> * replySize < sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> param <S2SV_blank> size <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( p -> param. psize!= sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> param <S2SV_blank> size <S2SV_blank> invalid <S2SV_blank> args""",0
858,"<S2SV_ModStart> ""`%s\'"", option ) ; geometry = DestroyString ( geometry",0
859,"<S2SV_ModStart> ; if ( np -> pmtudisc == IPV6_PMTUDISC_PROBE ) { struct in6_pktinfo src_info ; memset ( & src_info, 0, sizeof ( src_info ) ) ; rcu_read_lock ( ) ; } else { memset ( & src_info, 0, sizeof ( src_info ) ) ; rcu_read_unlock ( ) ; }",0
860,<S2SV_ModStart> ; if ( code -> key_data_type [ 1 ]!= KRB5_KDB_SALTTYPE_NORMAL || code -> key_data_length [ 1 ]!= sizeof ( struct berval ) ) { err = EINVAL ; goto cleanup ; },0
861,"<S2SV_ModStart> OP_ENDCATCH ) ; emit ( J, F, OP_ENDTRY ) ;",1
862,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_row_idx <S2SV_ModStart> return ; } LIBXSMM_ASSERT ( 0!= l_row && 0!= l_column ) ;",1
863,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { sc_log ( ctx, ""Bad <S2SV_blank> APDU <S2SV_blank> length: <S2SV_blank> %d\\n"", crgram_len ) ; return - 1 ; }",0
864,"<S2SV_ModStart> uint8 result ; uint32 <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> ; STREAM s ; struct stream packet <S2SV_ModStart> return False ; packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> id <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",1
865,"<S2SV_ModStart> ; if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> ; if (",0
866,<S2SV_ModStart> XML_PARSE_OLD10 ) { if ( ( ( c >= '0' ) && ( ( c >= '9' ) && ( ( c >= '0' ) && ( c <= '9' ) ) ) || ( ( c >= '0' ) && ( c <= '9' ) ) || ( ( c >= '0' ) && ( c <= '9' ) ) ) || ( ( c >= '0' ) && ( c <= '9' ) ) ) { if ( ( ( c >= '0' ) && ( c <= '9' ) ) && ( ( c >= '0' ) && ( c <= '9' ) ) ) { if ( ( ( c >= '0' ) && ( c <= '9' ) ) ) { if ( ( ( c >= '0' ) && ( c <= '9' ) ) ) { if ( ( c >= '0' ) && ( c <= '9' ) ) { if ( ( ( c >= '0' ) && ( c <= '9' ) ) && ( ( c >= '0' ) && ( c <= '9' ) ) ) { if ( ( ( c >= '0' ) &&,0
867,<S2SV_ModStart> = cpu_to_le16 ( I40E_AQ_VSI_TC_QUE_SIZE ) ; if ( ctxt. tc_mapping [ 0 ] & I40E_AQ_VSI_TC_QUE_OFFSET_MASK ) { if ( ctxt. tc_mapping [ 0 ] & I40E_AQ_VSI_TC_QUE_OFFSET_MASK ) { if ( ctxt. tc_mapping [ 0 ] & I40E_AQ_VSI_TC_QUE_OFFSET_MASK ( I40E_AQ_VSI_TC_QUE_OFFSET ) ) { if ( ctxt. tc_mapping [ 0 ] & I40E_AQ_VSI_TC_QUE_OFFSET_MASK ) { if ( ctxt. tc_mapping [ 0 ] & I40E_AQ_VSI_TC_QUE_OFFSET_MASK ) { if ( ctxt. tc_mapping [ 0 ] & I40E_AQ_VSI_TC_QUE_OFFSET ( I40E_AQ_VSI_TC_QUE_OFFSET ) ) { if ( ctxt. tc_mapping [ 0 ] & I40E_A,0
868,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
869,<S2SV_ModStart> & new_map ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> lower_first ; } ret = sort_idmaps ( & new_map ) ; if ( ret < 0 ) goto out ;,1
870,"<S2SV_ModStart> ; } } if (! ( action = strtok ( g -> data, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } while ( action = strtok ( NULL, "";"" ) ) { switch ( action [ 0 ] ) { case 'r' : if ( cmd_cb ( core_ptr, ""dr"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } while ( action = strtok ( NULL, "";"" ) ) { switch ( action [ 0 ] ) { case 'r' : if ( cmd_cb ( core_ptr, ""dr"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } return send_msg ( g, ""E01"" ) ; }",0
871,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> ) ; } smb_ofile_flush ( sr, <S2SV_ModEnd> sr -> fid_ofile <S2SV_ModStart> sr -> fid_ofile <S2SV_ModEnd> ) ; (",1
872,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
873,<S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & Y,0
874,"<S2SV_ModStart> addrtype = TIPC_ADDR_ID ; memset ( & addr -> addr, 0, sizeof ( addr -> addr ) )",1
875,"<S2SV_ModStart> ( user_alloc && ( <S2SV_ModStart> PAGE_SIZE - 1 ) ) ||! access_ok ( VERIFY_WRITE, mem -> userspace_addr, mem -> memory_size",1
876,<S2SV_ModStart> ) ; } quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
877,"<S2SV_ModStart> ; if ( tmp_line_len < 1 ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Redirect <S2SV_blank> limit <S2SV_blank> reached, <S2SV_blank> aborting"" ) ; return NULL ; } if ( <S2SV_ModStart> ; if ( tmp_line_len < 1 ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Redirect <S2SV_blank> limit <S2SV_blank> reached, <S2SV_blank> aborting"" ) ; return NULL ; } if ( <S2SV_ModStart> ; if ( tmp_line_len < 1 ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Redirect <S2SV_blank> limit <S2SV_blank> reached, <S2SV_blank> aborting"" ) ; return NULL ; } if ( <S2SV_ModStart> ; if ( tmp_line_len < 1 ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Redirect <S2SV_blank> limit <S2SV_blank> reached, <S2SV_blank> aborting"" ) ; return NULL ; } if ( <S2SV_ModStart> ; if ( tmp_line_len < 1 ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Redirect <S2SV_blank> limit <S2SV_blank> reached, <S2SV_blank>",0
878,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * p <S2SV_ModEnd> ; const char <S2SV_ModStart> ; const char * end ; if ( len > SIZE_MAX / 6 ) return NULL ; u = PyBytes_FromStringAndSize ( ( char * ) NULL, len * 6 ) ; if ( p == NULL ) { Py_DECREF ( u ) ; return NULL ; } p <S2SV_ModEnd> = s + <S2SV_ModStart> ++ ; if ( p == NULL ) { Py_DECREF ( u ) ; } if ( * s & 0x80 ) { PyUnicode_DECREF ( w ) ; } else { int kind ; void * data ; Py_ssize_t i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; sprintf ( p, ""\\\\U%08x"", chr ) ; p +=",0
879,"<S2SV_ModStart> { if ( user_sid_size > ( ( record_data_size - 4 ) - strings_offset ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_RUNTIME, LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS, ""%s: <S2SV_blank> user <S2SV_blank> SID <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds."", function ) ; goto on_error ; } <S2SV_ModStart> 0 ) { if ( strings_size > ( ( record_data_size - 4 ) - strings_offset ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_RUNTIME, LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS, ""%s: <S2SV_blank> strings <S2SV_blank> size <S2SV_blank> value <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds."", function ) ; goto on_error ; } <S2SV_ModStart> 0 ) { if ( strings_size > ( ( record_data_size - 4 ) - strings_offset ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_RUNTIME, LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BO",0
880,"<S2SV_ModStart> WaveHeader WaveHeader ; int format_chunk = 0 ; <S2SV_ModStart>, format ; if ( format_chunk ++ ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",1
881,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",0
882,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ;,0
883,<S2SV_ModStart> ~ SNDRV_TIMER_IFLG_RUNNING ; list_del_init ( & timeri -> ack_list ) ; list_del_init ( & timeri -> active_list ) ;,1
884,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart>, wrerrno = 0 <S2SV_ModEnd> ; char ch <S2SV_ModStart> ) ; } if ( stat ( targ, & stb )!= 0 || <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart>. st_mode )!= 0 || <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart>. st_mode )!= 0 || <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart>. st_mode )!= 0 || <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart>. st_mode ) ) fatal ( ""%s: <S2SV_blank> directory <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> file"", __func__ ) ; if ( stat ( targ, & stb )!= 0 || <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart>. st_mode )!= 0 || <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart>. st_mode )!= 0 || <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart>. st_mode )!= S_ISDIR ( stb. st_mode <S2SV_ModStart>. st_mode ) <S2SV_ModEnd> ) fatal (",0
885,"<S2SV_ModStart> else if ( chanacs_source_has_flag ( mc, si, CA_FOUNDER ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> not <S2SV_blank> restricted."" ), channel ) ; return ; } if ( <S2SV_ModStart> else if ( chanacs_source_has_flag ( mc, si, CA_LIST ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> not <S2SV_blank> restricted."" ), channel ) ; return ; } if ( <S2SV_ModStart> else if ( chanacs_source_has_flag ( mc, si, CA_CLEAR ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> restricted."" ), channel ) ; return ; } <S2SV_ModEnd> if (! <S2SV_ModStart> else if ( chanacs_source_has_flag ( mc, si, CA_CLEAR ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> closed."" ), channel ) ; return ; }",0
886,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
887,"<S2SV_ModStart> ; if (! ast -> sub_ctx ) { av_log ( s, AV_LOG_ERROR, ""Invalid <S2SV_blank> input <S2SV_blank> format\\n"" ) ; goto error ; } if ( <S2SV_ModStart> sub_ctx ) ) { av_log ( s, AV_LOG_ERROR, ""Invalid <S2SV_blank> input <S2SV_blank> format\\n"" ) ; goto error ; } <S2SV_ModEnd> if ( ff_copy_whiteblacklists",0
888,"<S2SV_ModStart> null_server ; int <S2SV_ModEnd> need_error_free = 0 <S2SV_ModStart> ) ; if ( sendauth_version && strcmp ( inbuf. data, sendauth_version ) ) { problem = KRB5_SENDAUTH_BADAUTHVERS ; response = 1 ; } else if ( appl_version && strcmp ( inbuf. data, appl_version ) ) { if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( flags & KRB5_RECVAUTH_SKIP_APPLVERS ) { if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 1 ; } else if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 1 ; } if ( retval = krb5_read_message ( context, fd, & in",0
889,"<S2SV_ModStart> write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 1 ) ; vpx_write_literal <S2SV_ModEnd> ( w,",0
890,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
891,<S2SV_ModStart> dptr ++ = ROSE_CALL_REQ_ADDR_LEN_VAL <S2SV_ModEnd> ; memcpy (,1
892,<S2SV_ModStart> = new_ns ; new_ns -> mounts ++ ;,1
893,<S2SV_ModStart> ; allocation_fail : vp8_de_alloc_frame_buffers ( oci ) ; if ( ( width & 0xf0 )!= 0 ) width += 16 ; if ( ( height & 0xf0 )!= 0 ) height += 16 ; <S2SV_ModStart> ; if ( ( width & 0xf0 )!= 0 ) width += 16 ; if ( ( height & 0xf0 )!= 0 ) height += 16 ; <S2SV_ModStart> ; if ( ( width & 0xf0 )!= 0 ) width += 16 ; if ( ( height & 0xf0 )!= 0 ) height += 16 ; if ( ( height & 0xf0 )!= 0 ) height += 16 ; if ( ( width & 0xf0 )!= 0 ) width += 16 ; if ( ( height & 0xf0 )!= 0 ) height += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf0 )!= 0 ) width += 16 ; if ( ( height & 0xf0 )!= 0 ) height += 16 ; if ( ( width & 0xf0 )!= 0 ) width += 16 ; if ( ( width & 0xf0 )!= 0 ) width += 16 ; if ( ( height & 0xf,0
894,<S2SV_ModStart> ; zip_object_handlers. get_gc = php_zip_get_gc ; zip_object_handlers.,1
895,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if <S2SV_ModEnd> ( iova < <S2SV_ModStart> mem -> iova || length > mem -> length || iova > <S2SV_ModEnd> mem -> iova <S2SV_ModStart> mem -> length - length ) return - EFAULT ; return <S2SV_ModEnd> 0 ; default,1
896,"<S2SV_ModStart> ( ndo, ""%s"", icmp6_tstr <S2SV_ModEnd> ) ) ;",0
897,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
898,<S2SV_ModStart> sent = 0 <S2SV_ModEnd> ; smb_msg.,1
899,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; if ( ref -> ref > INT_MAX / 2 ) return false ; <S2SV_ModStart> ref ++ ; return true ;,1
900,<S2SV_ModStart> fs -> clusters + <S2SV_ModEnd> 1 ) get_fat,1
901,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
902,<S2SV_ModStart> sk_nulls_node ) ; sk_nulls_node_init ( & sk -> sk_nulls_node ) ;,1
903,<S2SV_ModStart> } ps_dec -> u2_total_mbs_coded += u1_num_mbs ; if ( ps_dec -> u2_total_mbs_coded > ps_dec -> u2_total_mbs_coded ) { ps_dec -> <S2SV_ModStart> u2_total_mbs_coded -= u1_num_mbs ; if ( ps_dec -> u2_total_mbs_coded > ps_dec -> u2_total_mbs_coded ) { ps_dec -> u2_total_mbs_coded -= u1_num_mbs ; if ( ps_dec -> u2_total_mbs_coded > ps_dec -> u2_total_mbs_coded ) { ps_dec -> u2_total_mbs_coded -= u1_num_mbs ; if ( ps_dec -> u2_total_mbs_coded > ps_dec -> u2_total_mbs_coded ) { ps_dec -> u2_total_mbs_coded = ps_dec -> u2_total_mbs,0
904,<S2SV_ModStart> (! mm ||! mm -> env_end,1
905,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> parse_rock_ridge_inode ( struct <S2SV_ModStart> inode, 0, NULL",0
906,<S2SV_ModStart> * inotify_new_group ( <S2SV_ModEnd> unsigned int max_events <S2SV_ModStart> -> inotify_data. fa = NULL <S2SV_ModEnd> ; group -> <S2SV_ModStart> -> inotify_data. user = get_current_user ( ) ; if ( atomic_inc_return ( & group -> inotify_data. user -> inotify_devs ) > inotify_max_user_instances ) { fsnotify_put_group ( group ) ; return ERR_PTR ( - EMFILE ) ; } <S2SV_ModEnd> return group ;,1
907,<S2SV_ModStart> [ p ] && in -> linesize [ p ],1
908,"<S2SV_ModStart> ) ; } if ( pcount > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) )",0
909,<S2SV_ModStart> [ 1 ] && screen -> buffers [ 1 ],0
910,"<S2SV_ModStart> SCALAR_VALUE ) { coerce_reg_to_size ( & <S2SV_ModStart>, size ) ; coerce_reg_to_size ( & <S2SV_ModStart>, size ) ;",0
911,"<S2SV_ModStart> uint16 strip, nstrips = TIFFNumberOfStrips ( in ) ; uint32 stripsize = TIFFStripSize ( in ) ; if ( stripsize == 0 ) { TIFFError ( """", ""strip <S2SV_blank> size <S2SV_blank> is <S2SV_blank> zero!"" ) ; return 0 ; }",0
912,<S2SV_ModStart> base_name ) ; char need_to_append_dot ; struct search_domain * dom ; if (! base_len ) return NULL ; <S2SV_ModEnd> need_to_append_dot = base_name <S2SV_ModStart> : 1 ; <S2SV_ModEnd> for ( dom,1
913,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
914,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = -,1
915,"<S2SV_ModStart>, one, number_planes_filled2, number_planes_filled_2, number_planes_filled_3, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_2, number_planes_filled_3, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4",0
916,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if (! context ) return FALSE ; <S2SV_ModStart> == 0 ) { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModStart> 0xFF ) ; } <S2SV_ModStart> < originalSize ) { if (! <S2SV_ModStart> i ], context -> priv -> PlaneBuffersLength, originalSize ) ) return FALSE ; } else { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModEnd> CopyMemory ( context <S2SV_ModStart> originalSize ) ; } <S2SV_ModStart> planeSize ; } return TRUE ;",1
917,<S2SV_ModStart> policy ) { if (! inode_owner_or_capable ( inode ) ) return - EACCES ;,1
918,"<S2SV_ModStart> value ) { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetHostName ( state -> host, stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) ; } else if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetHostName ( state -> host, stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) ; httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else if ( value ) { httpSetHostName ( state -> host, stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) ; httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; }",0
919,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
920,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
921,<S2SV_ModStart>! job_id || <S2SV_ModEnd>! prev_hash || <S2SV_ModStart>! bbversion ||! nbit ||! ntime ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; if (,0
922,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
923,"<S2SV_ModStart> size ) { size_t res ; if ( check_mul_overflow ( num, size, & res ) ) abort ( ) ; <S2SV_ModStart> = malloc ( res <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) { memset <S2SV_ModEnd> ( ptr,",0
924,<S2SV_ModStart> ) ; } spin_lock_irq ( & ioc -> context_lock ) ; <S2SV_ModStart> ) ; } spin_unlock_irq ( & ioc -> context_lock ) ;,0
925,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> * res ; <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart> ( dict, & PyId___dict__ ) ; if ( dict == NULL ) { return NULL ; } <S2SV_ModEnd> return Py_BuildValue ( <S2SV_ModStart> ( ""O()O"", Py_TYPE <S2SV_ModEnd> ( self )",0
926,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
927,"<S2SV_ModStart> -> private_data ; u64 <S2SV_ModEnd> flags = arg <S2SV_ModStart> arg ) ; return __perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_IOC_ID : { u64 id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_SET_FILTER : return perf_event_set_filter ( event, ( void __user * ) arg ) ; default : return - ENOTTY ; } <S2SV_ModEnd> if ( flags",0
928,<S2SV_ModStart> sacked_out ) ; if ( newly_acked_sacked <= 0 || WARN_ON_ONCE (! tp -> prior_cwnd ) ) return ;,1
929,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> ] ) ; FRAME_COUNTS * counts = cm -> fc -> counts ; if ( counts ) ++ counts -> <S2SV_ModEnd> uv_mode [ y_mode",0
930,"<S2SV_ModStart> mask ) { struct skcipher_tfm * tfm = crypto_alloc_skcipher ( type ) ; if (! tfm ) { pr_err ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> skcipher\\n"", __func__ ) ; crypto_free_skcipher ( tfm ) ; return NULL ; } <S2SV_ModStart> ) ; } <S2SV_null> <S2SV_null>",0
931,<S2SV_ModStart> ; if ( sb_count > SHA_CTX_MAX_OPS <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; if ( sb_count > SHA_CTX_MAX_OPS <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; if ( sb_count > SHA_CTX_MAX_OPS <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; if ( sb_count > SHA_CTX_MAX_OPS <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; if ( sb_count > SHA_CTX_MAX_OPS <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; if ( sb_count > SHA_CTX_MAX_OPS <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; if ( sb_count > SHA_CTX_MAX_OPS <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; if ( sb_count > SHA_CTX_MAX_OPS <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ;,0
932,"<S2SV_ModStart> c -> tile_width <S2SV_ModEnd>, 16 ) <S2SV_ModStart>, 16 ) * 3",1
933,"<S2SV_ModStart> iv ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
934,"<S2SV_ModStart> = jas_alloc3 ( bufsize, JPC_QMFB_COLGRPSIZE * 2, sizeof ( jpc_fix_t ) ) ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } <S2SV_ModEnd> dstptr += 2 <S2SV_ModStart> = jas_alloc3 ( bufsize, JPC_QMFB_COLGRPSIZE * 2, sizeof ( jpc_fix_t ) ) ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += 2 * stride ; srcptr += stride ; }",0
935,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
936,"<S2SV_ModStart> p ) { return <S2SV_ModEnd> chdlc_print ( ndo <S2SV_ModStart>, p, h -> len <S2SV_ModEnd> ) ; }",1
937,"<S2SV_ModStart> -> spool = kzalloc <S2SV_ModEnd> ( sizeof ( <S2SV_ModStart> struct smb_vol ), GFP_KERNEL ) ; if (! cifs_sb -> spool ) { rc = - ENOMEM ; goto out ; } <S2SV_ModStart> -> spool = kzalloc <S2SV_ModEnd> ( sizeof ( <S2SV_ModStart> struct smb_vol ), GFP_KERNEL ) ; if (! cifs_sb -> spool ) { rc = - ENOMEM ; goto out ; } cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; cFYI ( 1, ""No <S2SV_blank> username <S2SV_blank> specified"" ) ; cFYI ( 1, ""No <S2SV_blank> username <S2SV_blank> specified"" ) ; cFYI ( 1, ""No <S2SV_blank> iocharset <S2SV_blank> specified"" ) ; cFYI ( 1, ""No <S2SV_blank> iocharset <S2SV_blank> specified"" ) ; cFYI ( 1, ""No <S2SV_blank> iocharset <S2SV_blank> specified"" ) ; cFYI ( 1, ""No <S2SV_blank> iocharset <S2SV_blank> specified"" ) ; cFYI ( 1, ""No <S2SV_blank> username <S2SV_blank> specified"" ) ; cFYI ( 1, ""No <S2SV_blank> username <S2SV_blank> specified"" ) ;",0
938,<S2SV_ModStart> -> len && SKB_EXT_ERR ( skb ) -> opt_stats <S2SV_ModEnd> ) put_cmsg (,1
939,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ) ;",1
940,"<S2SV_ModStart> OPENSSL_NO_PSK if (! SSL_C_IS_EXPORT ( s -> s3 -> tmp. new_cipher ) ) { al = SSL_AD_UNEXPECTED_MESSAGE ; SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UN",0
941,<S2SV_ModStart> { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE ) { return SECURE_ELEMENT_ERROR_BUF_SIZE,1
942,"<S2SV_ModStart> + 1 ; if ( iframe -> max_settings > session -> max_settings ) { rv = nghttp2_session_terminate_session_with_reason ( session, NGHTTP2_ENHANCE_YOUR_CALM, NGHTTP2_ENHANCE_YOUR_CALM, NGHTTP2_ENHANCE_YOUR_CALM, NGHTTP2_ENHANCE_YOUR_CALM, NGHTTP2_ENHANCE_YOUR_CALM ) ; if ( nghttp2_is_fatal ( rv ) ) { rv = nghttp2_session_terminate_session_with_reason ( session, NGHTTP2_ENHANCE_YOUR_CALM, NGHTTP2_ENHANCE_YOUR_CALM, NGHTTP2_ENHANCE_YOUR_CALM, NGHTTP2_ENHANCE_YOUR_CALM, NGHTTP2_ENHANCE_YOUR_CALM ) ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } break ; }",0
943,<S2SV_ModStart> = ucounts ; new_ns -> mounts = 0 ; new_ns -> pending_mounts = 0 ;,1
944,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
945,"<S2SV_ModStart> ; if ( cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON ) && <S2SV_ModEnd> x86_pmu. intel_cap <S2SV_ModStart>. intel_cap. pmu_num_counters > INTEL_MAX_PERFMON_EVENTS ) x86_pmu. intel_cap. pmu_num_counters = INTEL_MAX_PERFMON_EVENTS ; if ( cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON ) && <S2SV_ModEnd> x86_pmu. intel_cap <S2SV_ModStart>. intel_cap. pmu_num_counters_fixed > INTEL_MAX_PERFMON_EVENTS ) x86_pmu. intel_cap. pmu_num_counters_fixed = INTEL_MAX_PERFMON_EVENTS ; if ( x86_pmu. intel_cap. pmu_num_counters_fixed > INTEL_MAX_PERFMON_EVENTS ) x86_pmu. intel_cap. intel_cap. pmu_num_counters_fixed = INTEL_MAX_PERFMON_EVENTS",0
946,"<S2SV_ModStart>. dimensions ; # ifdef STB_VORBIS_DIVIDES_IN_RESIDUE uint8 * * * part_classdata = ( uint8 * * * ) temp_block_array ( f, f -> channels, r -> begin * r -> part_size ) ; # else int * * classifications = ( int * * ) temp_block_array ( f, f -> channels, r -> begin * r -> part_size ) ; # endif",0
947,"<S2SV_ModStart> ; u32 now <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { challenge_timestamp = TCP_SKB_CB ( skb ) -> when ; challenge_count = 0 ; } else if ( tcp_oow_rate_limited ( sock_net ( sk ), skb, LINUX_MIB_TCPACKSKIPPEDCHALLENGE, & tp -> last_oow_ack_time ) ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; }",0
948,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
949,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, const TOKENEXTRA * * tp, const TOKENEXTRA * stop ) { TOKENEXTRA * p = * tp ; while ( p < stop <S2SV_ModEnd> ) { TOKENEXTRA <S2SV_ModStart> t ] ; const struct vpx_token * const a = & vp9_coef_encodings [ t ] ; const struct vpx_extra_bit * const b = & vpx_extra_bits [ t ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { const int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) ; v = v >> ( n - len ) ; vp9_write_tree ( w, vp9_coef_con_tree, vp9_pareto8_full [ p -> context_tree [ PIVOT",0
950,"<S2SV_ModStart>, uncompressed_hdr_size ; write_uncompressed_header <S2SV_ModEnd> ( cpi, <S2SV_ModStart> struct vp9_write_bit_buffer wb <S2SV_ModEnd> ; write_uncompressed_header ( <S2SV_ModStart>, 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_clear_system_state ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
951,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
952,"<S2SV_ModStart> ret, n <S2SV_ModEnd> ; quirks = <S2SV_ModStart> ENODEV ; } if ( hdesc -> bLength < sizeof ( struct hid_descriptor ) ) { dbg_hid ( ""hid <S2SV_blank> descriptor <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - EINVAL ; } <S2SV_ModStart> hdesc -> bCountryCode ; if ( hdesc -> bLength < sizeof ( struct hid_descriptor ) ) { dbg_hid ( ""hid <S2SV_blank> descriptor <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - EINVAL ; }",0
953,"<S2SV_ModStart> struct ikev2_id id ; size_t id_len, idtype_len <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> * typedata ; ND_TCHECK2 ( * ext, sizeof ( id ) ) <S2SV_ModStart> ( * ext, sizeof ( id ) ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), i ) ; if ( i < idtype_len ) goto trunc ; idtype_len = ntohs ( id. h. len ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> len=%d"", idtype_len - 2 ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; }",0
954,<S2SV_ModStart> group_dead ) ; if ( unlikely ( tsk -> robust_list ) ) exit_robust_list ( tsk ) ; # ifdef CONFIG_X86 if ( unlikely ( tsk -> robust_list ) ) exit_robust_list ( tsk ) ; # endif if ( group_dead && tsk -> signal -> exit_robust_list ) acct_exit_robust_list ( tsk ) ; if ( unlikely ( tsk -> signal -> exit_robust_list ) ) exit_robust_list ( tsk ) ; if ( group_dead && tsk -> signal -> exit_robust_list ) acct_exit_robust_list ( tsk ) ; if ( group_dead && tsk -> signal -> exit_robust_list ) acct_exit_robust_list ( tsk ) ; if ( group_dead && tsk -> signal -> exit_robust_list ) acct_exit_robust_list ( tsk ) ; if ( tsk -> signal -> exit_robust_list ) if ( tsk -> signal -> exit_robust_list,0
955,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> data ) { <S2SV_ModEnd> add_preferred_base_object ( name <S2SV_ModStart> |= OBJECT_ADDED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
956,"<S2SV_ModStart> ; break ; case MIF_SSP : if ( atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> height ) { jas_eprintf ( ""invalid <S2SV_blank> cmpt <S2SV_blank> size <S2SV_blank> %d\\n"", cmpt -> width, cmpt -> height ) ; goto error ; } break ; case MIF_SSP : if ( atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width ) { jas_eprintf ( ""invalid <S2SV_blank> cmpt <S2SV_blank> size <S2SV_blank> %d\\n"", jas_tvparser_getval ( tvp ) ) ; goto error ; } break ; case MIF_SAMP : if ( atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> sampperx ) { jas_eprintf ( ""invalid <S2SV_blank> sampperx <S2SV_blank> %d\\n"", cmpt -> sampperx ) ; break ; } break ; case MIF_VSAMP : if ( atoi ( jas_tvparser_getval",0
957,<S2SV_ModStart> urb ) ; usb_free_urb_to_pipe ( urb ) ;,0
958,"<S2SV_ModStart>, yt0_0, yt1_0, xt2_0, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 si10, si20, co10 ; WORD32 si20",0
959,<S2SV_ModStart> ( tag == ASN1_EOC <S2SV_ModEnd> ) { if <S2SV_ModStart> goto data_overrun_error ; } if ( unlikely ( len <= 0x7f ) ) goto length_too_long ; if ( unlikely ( datalen - dp < len ) ) goto data_overrun_error ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> > sizeof ( len <S2SV_ModEnd> ) - 1 <S2SV_ModStart> goto data_overrun_error ; len = 0 ; for ( <S2SV_ModEnd> ; n > <S2SV_ModStart> ; n > 0 ; n -- ) { len <<= 8 ; <S2SV_ModEnd> len |= data <S2SV_ModStart> ] ; } if ( unlikely ( len > datalen - dp ) ) goto data_overrun_error ;,0
960,<S2SV_ModStart> ) val ; <S2SV_ModEnd> memset ( ptr,1
961,"<S2SV_ModStart> mntent -> mnt_dir, NULL",1
962,"<S2SV_ModStart> PHP_MD5_CTX context ; if ( read_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD5_CTX context ; if ( read_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD5_CTX context ; if ( read_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD5_CTX context ; if ( read_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> FAILURE ; } read_len = sizeof ( buf ) ; if ( read_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; }",0
963,"<S2SV_ModStart> ] <= max && field -> value [ n ] - min < field -> maxusage <S2SV_ModStart> && field -> value [ n ] - min < field -> maxusage && field -> <S2SV_ModStart> <= max && search ( field -> value, field -> value [ n ], count ) ) hid_process_event ( hid, field, & field -> value [ field -> value [ n ] - min ], 0, interrupt ) ; if ( search ( field -> value, value [ n ], count ) ) hid_process_event ( hid, field, & field -> value [ field -> value [ n ] - min ], 1, interrupt ) ; if ( field -> value [ n ] >= min && field -> value [ n ] <= max && field -> value [ field -> value [ n ] - min < field -> maxusage && field -> value [ field -> value [ n ] - min ]. hid && search ( field -> value, value [ n ], count ) ) hid_process_event ( hid, field, & field -> value [ field -> value [ n ] - min ], 2, interrupt ) ; if ( field -> value [ n ] >= min && field -> value [",0
964,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
965,"<S2SV_ModStart> if ( argReg >= <S2SV_ModEnd> regsz ) { <S2SV_ModStart> regsz ) { return ; } if (! ( p4 = r_uleb128 ( p4, p4_end - p4, & line_start ) ) ) { r_list_free ( debug_positions ) ; return ; } p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; if (! ( p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ) ) { r_list_free ( debug_locals ) ; return ; } <S2SV_ModEnd> p4 = r_uleb128 <S2SV_ModStart> p4, p4_end - p4, & parameters_size ) ; if (! ( p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ) ) { r_list_free ( debug_positions ) ; return ; }",0
966,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; rb_hash_aset ( env,",0
967,"<S2SV_ModStart> 0 ) ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> -> i_mount, args -> rmtvaluelen <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; return 0 <S2SV_ModStart> -> valuelen < args -> rmtvaluelen ) { args -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; return XFS_ERROR <S2SV_ModStart> -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; } return",1
968,<S2SV_ModStart> = NULL ; unsigned int <S2SV_ModEnd> sz = sizeof,0
969,"<S2SV_ModStart> endif # endif MYSQL_BIND * bind, * bind_end ; imp_sth_phb_t * fbind <S2SV_ModEnd> ; # endif <S2SV_ModStart> ; # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION if ( attribs ) { svp = DBD_ATTRIB_GET_SVP ( attribs, ""server_prepare"", 20 ) ; imp_sth -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare ; if ( svp && SvTRUE ( * svp ) ) { imp_sth -> is_async = TRUE ; imp_sth -> use_server_side_prepare = FALSE ; do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000"" ) ; return 0 ; } } else { imp_sth -> is_async = FALSE ; do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000"" ) ; return 0 ;",0
970,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) &&! test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) &&",1
971,"<S2SV_ModStart> ) ) ; if ( LTXTQUERY_TOO_BIG ( state. num, state. sumlen ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""ltxtquery <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ) ) ;",1
972,"<S2SV_ModStart> int need = 0 <S2SV_ModEnd> ; CELL first <S2SV_ModStart> screen, { int max_need = 4 ; int <S2SV_ModStart> need *= 4 ; max_need *= 4 ; } ) ; if ( need < 0 ) return ; if ( scp -> data_limit <= ( unsigned ) need ) { line = ( Char * ) malloc ( ( size_t ) need + 1 ) ; scp -> data_buffer = line ; scp -> data_limit = ( size_t ) ( need + 1 ) ; } else { line = ( Char * ) malloc ( ( size_t ) need + 1 ) ; } if ( line == 0 ) SysError ( ERROR_BMALLOC2 ) ; free ( line ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ) ( need + 1 ) ) ; if ( line == 0 ) SysError ( ERROR_BMALLOC2 ) ; free ( line ) ; scp -> data_limit = ( size_t ) ( need + 1 ) ; }",0
973,<S2SV_ModStart> ; if (! EXT4_SB ( inode -> i_sb ) -> s_journal <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd>! handle ),1
974,"<S2SV_ModStart> ftoa_bounded_extra ( JsVarFloat <S2SV_ModEnd> val, char <S2SV_ModStart> ( isnan ( val ) && len > 0 ) strncat ( str, ""NaN"", len ) ; else strncat ( str, ""Infinity"", len <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ) { if ( val < 0 ) strncat ( str, ""-Infinity"", len ) ; else strncat ( str, ""Infinity"", len ) ; } else { if ( val > stopAtError ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) {",0
975,"<S2SV_ModStart> ( f, ""PG%31[ <S2SV_blank> \\t]%c%c%31[ <S2SV_blank> \\t+-]%d%31[ <S2SV_blank> \\t]%d%31[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp,",1
976,"<S2SV_ModStart> ; if ( size > 5 ) ASSERT ( result!= buf ) ; ASSERT ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) == 0 ) ; if ( result!= buf ) free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%f"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; if ( size > 6 ) ASSERT ( result!= buf ) ; ASSERT ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) == 0 ) ; if ( result!= buf ) free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; char * result ;",0
977,<S2SV_ModStart> ; if ( unlikely ( fast_pool -> count >= 64 ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; } if (,0
978,"<S2SV_ModStart>, ""ID:"", sizeof ( jslGetTokenValueAsString ) - len <S2SV_ModStart>, ""ID:"", sizeof ( jslGetTokenValueAsString ) - len <S2SV_ModStart>, ""String:"", sizeof ( jslGetTokenValueAsString ) - len <S2SV_ModEnd> ) ; } <S2SV_ModStart>, ""String:"", sizeof ( jslGetTokenValueAsString ) - len <S2SV_ModEnd> ) ; } <S2SV_ModStart>, ""String:\'"", sizeof ( jslGetTokenValueAsString ) - len <S2SV_ModEnd> ) ; strncat",0
979,"<S2SV_ModStart> = "".tgz"" ; } else if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; } else if ( ( st. st_mode & S_IFREG ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; } else if ( ( st. st_mode & S_IFMT ) == S_IFLNK ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; } else if ( ( st. st_mode & S_IFREG ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; } else if ( ( st. st_mode & S_IFMT ) == S_IFDIR ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> directory <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; }",0
980,,1
981,"<S2SV_ModStart> * output ; MagickBooleanType status ; <S2SV_ModStart> ) ; } status = MagickTrue ; <S2SV_ModStart> ) ; } input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( c = fgetc ( input ) ) ( void ) fputc ( ( char ) c, output ) ; ( void ) fclose ( input ) ; ( void ) remove_utf8 ( argv [ i ] ) ; } ( void ) fclose ( output ) ; return ( status <S2SV_ModEnd> ) ; }",0
982,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
983,"<S2SV_ModStart> : ext3_msg ( sb, KERN_ERR, ""failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s"", __bdevname ( dev, b ) ) ;",0
984,"<S2SV_ModStart> passwd * pwd, const char * prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> & tmpname, ""/etc"", prefix <S2SV_ModEnd> ) ) ==",1
985,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
986,"<S2SV_ModStart> s2 ) { const size_t len = strlen ( s1 ) ; return memcmp ( s1, s2, len ) ; } <S2SV_null> <S2SV_null>",0
987,"<S2SV_ModStart> TRUE ; } Jid * const stanza_to = xmpp_stanza_get_to ( stanza ) ; Jid * const stanza_from = jid_create ( stanza_to ) ; const char * const stanza_from = xmpp_stanza_get_from ( stanza ) ; Jid * const stanza_from = jid_create ( stanza_from ) ; Jid * const stanza_from = jid_create ( stanza_from ) ; Jid * const stanza_from = jid_create ( stanza_from ) ; Jid * const stanza_from = jid_create ( stanza_from ) ; const char * const stanza_from = xmpp_stanza_get_from ( stanza ) ; const char * const stanza_from = xmpp_stanza_get_from ( stanza ) ; if (! stanza_from ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> no <S2SV_blank> from <S2SV_blank> element"" ) ; return TRUE ; } char * const stanza_from = xmpp_stanza_get_from ( stanza ) ; if (! stanza_from ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> no <S2SV_blank> stanza",0
988,"<S2SV_ModStart> ; } } if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { addReplyError ( c, ""maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ll, sdslen ( o -> ptr ) ) ; } else if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { addReplyError ( c, ""maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ll, sdslen ( o -> ptr ) ) ; return ; } <S2SV_ModEnd> } config_set_special_field ( <S2SV_ModStart> ll ) { if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { addReplyError ( c, ""maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ll, sdslen ( o -> ptr ) ) ) { addReplyError ( c, ""maximum <S2SV_blank> allowed <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%",0
989,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
990,"<S2SV_ModStart> ) ) { global_options_print ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { global_options_print ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else { global_options_print ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1,",0
991,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; BT_DBG (,1
992,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
993,<S2SV_ModStart> md -> hdr. isa_msgid ) { st -> st_v1_new_iv. data [ st -> st_v1_new_iv. len - 1 ] = 0 ; st -> st_v1_new_iv. data [ st -> st_v1_new_iv. len - 1 ] = 0 ; } <S2SV_ModEnd> if ( md <S2SV_ModStart> md -> hdr. isa_msgid ) { st -> st_v1_new_iv. data [ st -> st_v1_new_iv. len - 1 ] = 0 ; st -> st_v1_new_iv. data [ st -> st_v1_new_iv. len - 1 ] = 0 ; st -> st_v1_new_iv. data [ st -> st_v1_new_iv. len - 1 ] = 0 ; st -> st_v1_new_iv. data [ st -> st_v1_new_iv. len - 1 ] = 0 <S2SV_ModEnd> ; } },0
994,<S2SV_ModStart> = 1 ; if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > MAX_BITSTREAM_BUFFER_SIZE ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = MAX_BITSTREAM_BUFFER_SIZE ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; },0
995,<S2SV_ModStart> * zone ; size_t tilemap_size ; <S2SV_ModStart>. height ; tilemap_size = <S2SV_ModEnd> x_size * y_size <S2SV_ModStart> struct map_tile ) ; if ( x_size == 0 || tilemap_size / x_size / sizeof ( struct map_tile )!= y_size ||! ( tilemap = malloc ( tilemap_size,1
996,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ; return ( 0 ) <S2SV_ModStart>, length ) ) ; ND_TCHECK ( cp [ 2 ] <S2SV_ModStart> 4 ) { ND_TCHECK2 ( cp [ len ], 4 ) ; <S2SV_ModStart> ) ; } return ( 0 ) ;",0
997,<S2SV_ModStart> char * print_string ( const <S2SV_ModStart> { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> -> valuestring ) ; } <S2SV_null> <S2SV_null>,0
998,"<S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img,",1
999,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""prestring=%490s"", <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""protos=%490s"", <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""xtractprotos=%490s"", <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""xtractprotos=%490s"", <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""xtractprotos=%490s"", <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""xtractprotos=%490s"", <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""xtractprotos=%490s"", <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""xtractprotos=%490s"", <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""xtractprotos=%490s"", <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""xtractprotos=%490s"", <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""xtractprotos=%490s"",",0
1000,<S2SV_ModStart> if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks,1
1001,"<S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu,",1
1002,"<S2SV_ModStart> ) ; } term. csi_argc = 10 ; break ; case 10 : if ( term. csi_argc!= 2 ) return ; win_set_points ( term. rows0, term. cols0 ) ; break ; case 11 : if ( term. csi_argc!= 1 ) return ; win_set_points ( term. rows0, term. cols0 ) ; break ; case 12 : if ( term. csi_argc!= 2 ) return ; win_set_points ( term. rows0, term. cols0 ) ; break ; case 13 : if ( term. csi_argc!= 1 ) return ; win_set_points ( term. rows0, term. rows0 ) ; break ; case 14 : if ( term. csi_argc!= 1 ) return ; win_set_points ( term. rows0, term. cols0 ) ; break ; case 15 : if ( term. csi_argc!= 2 ) return ; win_set_points ( term. rows0, term. cols0 ) ; break ;",0
1003,"<S2SV_ModStart> studio_profile ) { int profile, level ; <S2SV_ModStart> s, gb, & profile, & level ) ; if ( <S2SV_ModEnd> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO <S2SV_ModStart> FF_PROFILE_MPEG4_SIMPLE_STUDIO && ( <S2SV_ModEnd> level > 0 <S2SV_ModStart> > 0 && <S2SV_ModEnd> level < 9 <S2SV_ModStart> ) ; } else if ( s -> studio_profile ) { avpriv_request_sample ( s -> avctx, ""Mixes <S2SV_blank> studio <S2SV_blank> and <S2SV_blank> non <S2SV_blank> studio <S2SV_blank> profile\\n"" ) ; return AVERROR_PATCHWELCOME ; } else if ( s -> studio_profile ) { avpriv_request_sample ( s -> avctx, ""Mixes <S2SV_blank> studio <S2SV_blank> and <S2SV_blank> non <S2SV_blank> studio <S2SV_blank> profile\\n"" ) ; return AVERROR_PATCHWELCOME ; } else if ( s -> studio_profile ) { avpriv_request_sample ( s -> avctx, ""Mixes <S2SV_blank> studio <S2SV_blank> profile\\n"" ) ; return AVERROR_PATCHWELCOME ; }",0
1004,<S2SV_ModStart> nsops < 1 || nsops > SEMOPM,1
1005,<S2SV_ModStart> ; for ( r = 0 ; r < rows ; r ++ ) s [ i ] = s [ 0 ] ; for ( i = cols ; i < cols + 17 ; i ++ ) s [ i ] = s [ cols - 1 ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] - s [ c - 8 ] ; if ( x * x < flimit ) { d [ c & 15 ] = ( 8 + sum + s [ c ] ) >> 4 ; } s [ c ] = d [ ( c - 8 ) & 15 ] = 0 ; },0
1006,"<S2SV_ModStart> ] ) ; if ( blksz > EXT2_BLOCK_SIZE ( data ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent <S2SV_blank> size"" ) ; return - 1 ; } <S2SV_ModStart> ] ) ; if ( blksz > EXT2_BLOCK_SIZE ( data ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent <S2SV_blank> size"" ) ; return - 1 ; }",0
1007,"<S2SV_ModStart> ; # endif if ( ( i -> width + i -> height ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX = i -> parent -> width - i -> width ; i -> posY = i -> parent -> height - i -> height ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX = i -> parent -> width - i -> width ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y",0
1008,"<S2SV_ModStart> if ( q + o + sh. sh_properties > e ) { DPRINTF ( ( ""Wrapped <S2SV_blank> around <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> %p\\n"", q + o + sh. sh_properties, e ) ) ; goto out ; } if ( q + o + sh. sh_properties > e ) { DPRINTF ( ( ""Wrapped <S2SV_blank> around <S2SV_blank> %p\\n"", q + o + sh. sh_properties, e ) ) ; goto out ; } if ( q + o + sh. sh_properties > e ) { DPRINTF ( ( ""Wrapped <S2SV_blank> around <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> %p\\n"", q + o + sh. sh_properties, e ) ) ; goto out ; }",0
1009,<S2SV_ModStart> ; max_bytes_matched = ( flags & RE_FLAGS_BACKWARDS )? ( int ) input_backwards_size : ( int ) input_forwards_size ; <S2SV_ModStart> ++ ; } next_input = input + i * input_incr ; <S2SV_ModStart> ++ ; } if ( bytes_matched >= max_bytes_matched ) break ;,0
1010,"<S2SV_ModStart> len ) { assert ( len >= 3 ) ; <S2SV_ModStart> case LEX_EOF : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""EOF"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_ID : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_INT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""INT"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_FLOAT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> case LEX_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> case LEX_INT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""TEMPLATE <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> TEMPLATE <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""REGEX"" <S2SV_ModEnd> ) ;",0
1011,"<S2SV_ModStart> mnt_instance ) ; if ( unlikely (! list_empty ( & mnt -> mnt_mounts ) ) ) { struct mount * p, * tmp ; list_for_each_entry_safe ( p, tmp, & mnt -> mnt_mounts, mnt_child ) { umount_mnt ( p ) ; } }",1
1012,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
1013,,1
1014,"<S2SV_ModStart> if (! e ) goto not_found ; r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) goto not_found ; r = sd_bus_call_method ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) goto not_found ;",0
1015,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> uint32_t pos ; if ( inode -> i_size > inode -> i_sb -> s_blocksize ) { err = - ENAMETOOLONG ; goto out_unmap ; } <S2SV_ModStart>! bh ) { err = - EIO ; goto out_unlock_inode ; } <S2SV_ModEnd> symlink = bh <S2SV_ModStart> return 0 ; out_unlock_inode <S2SV_ModEnd> : up_read ( <S2SV_ModStart> page ) ; out_unmap :,1
1016,<S2SV_ModStart> else if ( cpu_has_secondary_exec_ctrls ( ) && ( vmcs_read32 ( SECONDARY_VM_EXEC_CONTROL ) & SECONDARY_EXEC_VIRTUALIZE_X2APIC_MODE ) <S2SV_ModEnd> ) { if,1
1017,"<S2SV_ModStart> if ( ent == NULL ) { st = KRB5_KDB_NOENTRY ; <S2SV_ModEnd> goto cleanup ; <S2SV_ModStart> cleanup ; } st = populate_policy ( context, ld, ent, pol_name, * policy ) ;",1
1018,"<S2SV_ModStart> = value ; if ( ps_codec -> i4_pic_done ) return IHEVCD_UNSUPPORTED_PPS ; ps_pps -> i1_pps_id = CLIP3 ( ps_pps -> i1_pps_base + ps_pps -> i1_pps_id, MAX_PPS_CNT - 1 ) ; if ( ps_codec -> i4_pic_done ) return IHEVCD_UNSUPPORTED_PPS ; ps_pps -> i1_pic_id = CLIP3 ( ps_pps -> i1_pic_base + ps_pps -> i1_pps_id, 0, MAX_PPS_CNT - 2 ) ; if ( ps_codec -> i4_pic_done ) return IHEVCD_UNSUPPORTED_PPS ; ps_pps -> i1_pic_id = CLIP3 ( ps_pps -> i1_pic_base + ps_pps -> i1_pic_id, MAX_PPS_CNT - 1 ) ; if ( ps_codec -> i4_pic_done ) return IHE",0
1019,"<S2SV_ModStart> inode ) ; struct metapath * mp2 = metapath ( mp ) ; struct <S2SV_ModStart> unsigned end_of_metadata ; if ( height > 1 ) { struct buffer_head * bh = mp -> mp_bh [ height - 1 ] ; int eob = 0 ; enum alloc_state state ; __be64 * ptr ; __be64 zero_bn = 0 ; BUG_ON ( ip -> i_height < 1 ) ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; } if ( height == 1 ) { struct buffer_head * bh ; ptr = metapointer ( end_of_metadata, mp ) ; bh = mp -> mp_bh [ end_of_metadata ] ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ end_of_metadata ] ) ; BUG_ON ( dblks < 1 ) ; state = ALLOC_DATA ; } else if ( height > 1 ) { state = ALLOC_GROW_HEIGHT ; iblks = height - 1 ; branch_start = metapath_branch_start (",0
1020,"<S2SV_ModStart> ) ) { switch ( c ) { case'<S2SV_blank>': psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'e' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'E' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'T' : trunc_8to4 = SF_FALSE ; break ; case 'M' : psf -> header_put_marker ( psf, data ) ; count += 1 ; break ; case 'n' : psf -> header_put_byte ( psf, data ) ; count += 2 ; break ; case 'p' : psf -> header_put_byte ( psf, data ) ; count += 1 ; break ; case 'r' : psf -> header_put_marker ( psf, data ) ; count += 3 ; break ; case 'g' : psf -> header_put_byte ( psf, data ) ; count += 4 ; break ; case 'v' : psf -> header_put_byte ( psf, data ) ; break ; case 'p' : psf -> header_put_byte ( psf, data ) ; break ; case 'p'",0
1021,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( i,1
1022,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
1023,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( bytes_per_line > ( ssize_t ) sun_info. length ) bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( bytes_per_line > ( ssize_t ) sun_info. width * sun_info. height ) bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( bytes_per_line > ( ssize_t ) sun_info. length ) bytes_per_line = sun_info. width * sun_info. depth ;",0
1024,"<S2SV_ModStart> 0 ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",1
1025,"<S2SV_ModStart> int num_items_scanned ; guint pkt_len ; int <S2SV_ModEnd> pktnum, hr <S2SV_ModStart> + 64, ""LEN=%9u"" <S2SV_ModEnd>, & pkt_len <S2SV_ModStart> g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> packet <S2SV_blank> header <S2SV_blank> has <S2SV_blank> a <S2SV_blank> negative <S2SV_blank> packet <S2SV_blank> length""",0
1026,<S2SV_ModStart> ; int err = 0 ; msg -> msg_namelen,1
1027,"<S2SV_ModStart> ; if ( zend_hash_find <S2SV_ModEnd> ( ht,",1
1028,"<S2SV_ModStart> ) ) ; strncpy <S2SV_ModEnd> ( link_info. <S2SV_ModStart>. str, nla_data ( link [ TIPC_NLA_LINK_NAME ] ), sizeof ( link_info. str )",0
1029,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1030,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",1
1031,"<S2SV_ModStart> p -> tokenpos >= ( JV_UINT32_MAX / 2 ) ) { p -> tokenlen = JV_UINT32_MAX / 2 ; p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen * 2 + 256 ) ; } else if ( p -> tokenpos >= ( JV_UINT32_MAX / 2 ) ) { p -> tokenlen = JV_UINT32_MAX / 2 + 256 ; p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen ) ; }",0
1032,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> case BLOCK_8X8 : return vpx_mse8x8 ; case BLOCK_16X8 : return vpx_mse16x8 ; case BLOCK_8X16 : return vpx_mse8x16 ; case BLOCK_16X16 : return vpx_mse16x16 ; default : return vpx_mse8x8 ; } } <S2SV_null> <S2SV_null>,0
1033,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1034,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof (,0
1035,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
1036,<S2SV_ModStart> ; if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ && padata -> pa_pk_as_rep9 [ i ]. pa_type == KRB5_PADATA_REPLY_KX && padata -> pa_pk_as_req_draft9 [ i ]. pa_type == KRB5_PADATA_REPLY_KX && padata -> pa_pk_as_rep9 [ i ]. pa_type == KRB5_PADATA_REPLY_KX && padata -> pa_pkt_as_rep_draft9 [ i ]. pa_type == KRB5_PADATA_REPLY_KX && padata -> pa_pk_as_rep_draft9 [ i ]. pa_type == KRB5_PADATA_REPLY_KX && padata -> pa_pk_as_rep9 [ i ]. pa_type == KRB5_PADATA_REPLY_KX && padata -> pa_pkt_as_req_draft9 [ i ]. pa_type == KRB5_PADATA_REPLY_,0
1037,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1038,"<S2SV_ModStart> -> stratum_port ; snprintf ( address, 254 <S2SV_ModEnd>, ""%s:%s"",",1
1039,"<S2SV_ModStart> ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""error"" ) ; http_response_send ( res ) ; return ; } if ( <S2SV_ModStart> ) ) { file_write ( page, wikitext ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } if (! strcmp ( func, ""page/delete"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""error"" ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res",0
1040,"<S2SV_ModStart> = STB_VORBIS_MAX_SUBMAPS ; if ( f -> count > 32 ) return error ( f, VORBIS_invalid_setup ) ; if ( <S2SV_ModStart> = STB_VORBIS_MAX_SUBMAPS ; if ( f -> count > 32 ) return error ( f, VORBIS_invalid_setup ) ; <S2SV_ModStart> = STB_VORBIS_MAX_SUBMAPS ; if ( f -> count > 32 ) return error ( f, VORBIS_invalid_setup ) ; <S2SV_ModStart> = STB_VORBIS_MAX_SUBMAPS ; if ( f -> count > 32 ) return error ( f, VORBIS_invalid_setup ) ; if ( <S2SV_ModStart> = STB_VORBIS_MAX_SUBMAPS ; if ( f -> count > 32 ) return error ( f, VORBIS_invalid_setup ) ;",0
1041,<S2SV_ModStart> head -> iov_base ; if ( hdr > head -> iov_len ) return 0,1
1042,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
1043,"<S2SV_ModStart> flags ) ; <S2SV_ModEnd> v4l2_buf = to_vb2_v4l2_buffer <S2SV_ModStart> vb2_buf ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! vb ||! v4l2_buf ) { dev_dbg ( & dev -> pci -> dev, ""v4l2 <S2SV_blank> buffer <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame_len * 5 / 4",0
1044,"<S2SV_ModStart> size ) { size_t res ; if ( check_mul_overflow ( size, PREFIX_SIZE, & res ) ) { zmalloc_oom_handler ( size ) ; return NULL ; }",0
1045,<S2SV_ModStart> ; ssize_t count ; if ( bytes == 0 || items == 0 ) return 0,1
1046,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
1047,"<S2SV_ModStart> key_ref ) ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; goto error2 ; } ret = key_permission ( key_ref, KEY_NEED_READ ) ; if ( ret == 0 ) goto error2 ; if ( is_key_possessed ( key_ref ) ) { ret = - EOPNOTSUPP ; goto error2 ; }",0
1048,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, INFO, ""info: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> too <S2SV_blank> long\\n"", req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; }",0
1049,"<S2SV_ModStart> -> seen_enough ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, & sfe -> valuelen ) ; if ( error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if (! context -> put_listent ) { context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, & sfe -> valuelen ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> valuelen ) ; if ( error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if (! context -> put_listent ) { context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namel",0
1050,"<S2SV_ModStart> r ) { return ( ASN1_item_verify ( X509_CINF, a -> signature, a -> cert_info, r ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1051,<S2SV_ModStart> 0 ) ; hrtimer_try_to_cancel <S2SV_ModEnd> ( & stime,1
1052,<S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_MULTIBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg -> enc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg -> enc <S2SV_ModEnd> ) ),0
1053,"<S2SV_ModStart> = data ; struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; void * <S2SV_ModStart> sk ) ; switch ( pi -> mode ) { case L2CAP_MODE_BASIC : if ( pi -> imtu!= L2CAP_DEFAULT_MTU ) l2cap_add_conf_opt ( & ptr, L2CAP_CONF_MTU, 2, pi -> imtu ) ; break ; case L2CAP_MODE_ERTM : rfc. mode = L2CAP_MODE_ERTM ; <S2SV_ModEnd> rfc. txwin_size <S2SV_ModStart> = L2CAP_DEFAULT_TX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), (",0
1054,"<S2SV_ModStart> { do { if ( r <= 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1055,<S2SV_ModStart> -> chunksize = UINT64_MAX <S2SV_ModEnd> ; for (,1
1056,"<S2SV_ModStart> return ERROR_INCOMPLETE_FRAME ; } if ( ( ( ps_dec -> u2_total_mbs_coded > INT_MAX ) || ( ps_dec -> u2_total_mbs_coded < INT_MIN ) || ( ps_dec -> u2_total_mbs_coded > INT_MAX ) ) { H264_DEC_DEBUG_PRINT ( ""\\nInvalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> mbs <S2SV_blank> coded\\n"" ) ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = INT_MAX ; ps_dec -> u2_total_mbs_coded = INT_MAX ; ps_dec -> u2_total_mbs_coded = INT_MAX ; ps_dec -> u2_total_mbs_coded = INT_MAX ; ps_dec -> u2_total_mbs_coded = ps_dec -> u2_total_mbs_coded",0
1057,<S2SV_ModStart> while ( pair!= NULL,0
1058,<S2SV_ModStart> } err = crypto_rng_alg ( tfm ) <S2SV_ModEnd> -> seed (,1
1059,<S2SV_ModStart> = uid ; <S2SV_ModEnd> new -> count <S2SV_ModStart> new -> count = 0 <S2SV_ModEnd> ; spin_lock_irq ( <S2SV_ModStart> } if ( <S2SV_ModEnd> ucounts -> count <S2SV_ModStart> ucounts -> count == INT_MAX ) ucounts = NULL ; else ucounts -> count += 1 <S2SV_ModEnd> ; spin_unlock_irq (,1
1060,"<S2SV_ModStart> ) ; } if ( err == 0 ) goto out_put ; if ( datagrams <S2SV_ModEnd> == 0 ) <S2SV_ModStart> == 0 ) { datagrams = err ; goto out_put ; } <S2SV_ModEnd> if ( err <S2SV_ModStart> err ; } out_put : fput_light ( sock -> file, fput_needed ) ; <S2SV_ModStart> datagrams ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
1061,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1062,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> len ) { const byte * buf = tab ; <S2SV_ModStart> i ; for ( ; i < len ; i += 8 * 32 ) { ( void ) buf [ i ] ; } for ( ; i < len ; i += 32 ) { ( void ) tab [ i ] ; } for ( ; i < len ; i += 32 ) { ( void ) tab [ i ] ; } for ( ; ; ) { ( void ) tab [ len - 1 ] ; },0
1063,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { if ( <S2SV_ModStart> ) ; } if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result ) ;,1
1064,"<S2SV_ModStart> * open_stateid, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode = fmode & ( FMODE_READ | FMODE_WRITE ) ; <S2SV_ModStart>, open_stateid, fmode <S2SV_ModEnd>, open_flags ) <S2SV_ModStart>, open_stateid, fmode <S2SV_ModEnd> ) ; ret",0
1065,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1066,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1067,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> oidc_scrub_headers ( request_rec,0
1068,"<S2SV_ModStart> int64_t * out_dist_sum, int64_t * out_sse <S2SV_ModStart> int sse ; memset ( x -> pred_sse, 0, sizeof ( x -> pred_sse ) ) ; <S2SV_ModStart>. vf ( p <S2SV_ModEnd> -> src. <S2SV_ModStart>, & sse, sizeof ( x -> pred_sse ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> == 0 ) { <S2SV_ModStart> = sse ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist, 1 << num_pels_log2_lookup [ bs ], & rate, & dist ) ; } else { int64_t rate ; int64_t dist ; int64_t square_error ; int quantizer ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ; * out_rate_sum = ( int ) rate_sum ; * out_dist_sum = ( int )",0
1069,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1070,<S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_pdu_type <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_pdu_type <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_pdu_length <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_pdu_length <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_pdu_length <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_pdu_length <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_pdu_length <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_pdu_length <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_pdu_length <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_pdu_length <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_pdu_length <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_pdu_length <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * esis_length,0
1071,"<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( <S2SV_ModStart> } if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( strcmp ( username, user_input ) == 0 ) { return ( PAM_BUF_ERR ) ; } if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; strcpy ( * ret_username, username, index ) ; return ( PAM_SUCCESS ) ; } if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ;",0
1072,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { struct segmentation_tree tree ; int ret ; tree = vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> return vpx_read_tree ( <S2SV_ModEnd> r, vp9_segment_tree <S2SV_ModStart> seg -> tree_probs, & tree ) ; if ( ret < 0 ) return ret ;",0
1073,<S2SV_ModStart> ; uint32_t backup_handle <S2SV_ModEnd> ; if (,0
1074,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool get_desc ( <S2SV_ModStart> SEGMENT_LDT ) { bool success = false <S2SV_ModEnd> ; struct ldt_struct <S2SV_ModStart> -> nr_entries ) { success = true ; <S2SV_ModStart> sel ] ; } <S2SV_ModStart> ) ; return success <S2SV_ModEnd> ; } # <S2SV_ModStart> size ) return false ; native_store_gdt ( & gdt_desc ) ; return true ;,0
1075,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
1076,"<S2SV_ModStart> bp ; struct ipv6_pinfo * np = inet6_sk ( sk ) ; struct <S2SV_ModStart> sctp_addr dst_saddr ; struct in6_addr * final_p, final ; <S2SV_ModStart> ) ; } final_p = fl6_update_dst ( fl6, np -> opt, & final ) ; <S2SV_ModStart>, fl6, final_p <S2SV_ModEnd>, false ) <S2SV_ModStart>, fl6, final_p <S2SV_ModEnd>, false )",0
1077,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1078,"<S2SV_ModStart>, maxbuf, unicodestr ) ; if ( depth > 1 ) return ( NULL ) ;",0
1079,"<S2SV_ModStart> ; if (! client -> priv -> protocol_timeout ) { g_source_remove ( client -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; return ; } <S2SV_ModEnd> g_debug ( ""GsmXSMPClient: <S2SV_blank> Initializing <S2SV_blank> client <S2SV_blank> %s"" <S2SV_ModStart> manager_data = client ; * mask_ret |= SmsAuthenticateClientProcMask ; callbacks_ret -> authenticate_client. callback = authenticate_client_callback ; callbacks_ret -> authenticate_client. manager_data = client ; * mask_ret |= SmsAuthenticateClientP2RequestProcMask ; callbacks_ret -> authenticate_client. manager_data = client ; * mask_ret |= SmsSaveYourselfP2RequestProcMask ; callbacks_ret -> save_yourself_phase2_request. callback = save_yourself_phase2_request_callback ; callbacks_ret -> save_yourself_phase2_request. manager_data = client ; * mask_ret |= SmsCloseConnectionProcMask ; callbacks_ret -> close_connection. callback = close_connection_callback ; callbacks_ret -> close_connection. manager_data = client ; * mask_ret |= S",0
1080,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> < ie && <S2SV_ModEnd> ND_TTEST ( *,1
1081,"<S2SV_ModStart> } n = ksz8851ReadReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n < ( length + 8 ) ) { return ERROR_FAILURE ; } netBufferRead ( context -> txBuffer, buffer, offset, length ) ; header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK <S2SV_ModEnd> ; if (",0
1082,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1083,"<S2SV_ModStart> goto out ; } if ( assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> leaf <S2SV_blank> %d\\n"", i ) ; edit -> dead_leaf = node -> slots [ i ] ; pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [replace]\\n"", __func__ ) ; return true ; }",0
1084,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
1085,<S2SV_ModStart> ; # endif # ifdef MONO_HAS_SEMAPHORES mono_semaphore_lock ( ) ; if (! have_semaphore ) { mono_finalizer_lock ( ) ; if ( domains_to_finalize ) { mono_finalizer_unlock ( ) ; finalize_domain_objects ( domains_to_finalize ) ; } else { mono_finalizer_unlock ( ) ; },0
1086,"<S2SV_ModStart>, x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 n01, n11, n12, n22, n32, n03, n13, n23, n33 ; WORD32 n00, n10, n20, n01, n12, n22, n32, n03, n13, n23, n33 ; x0 = ptr_x ; x2 = ptr_x + ( WORD32 ) npoints ; x3 = ptr_y + ( WORD32 ) npoints ; x1 = x0 + ( WORD32 ) npoints ; x2 += ( WORD32 ) npoints ; x4 = * x0 ++ ; x_5 = * x0 ++ ; x_6 = * x0 ++ ; x_7 = * x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_a = * x0 ++ ; x_b = * x0 ++ ; x_c = * x0 ++ ; x_d = * x0 ++",0
1087,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
1088,<S2SV_ModStart> ; if ( pmd_trans_huge <S2SV_ModEnd> ( * pmd,0
1089,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1090,"<S2SV_ModStart> 0 ) ; if ( idx + size > len ) { r_cons_printf ( ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> esil\\n"" ) ; break ; } <S2SV_ModStart> + size ; if ( idx + size > len ) { r_cons_printf ( ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> esil\\n"" ) ; break ; } <S2SV_ModStart> + size ; if ( idx + size > len ) { r_cons_printf ( ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> esil\\n"" ) ; break ; }",0
1091,"<S2SV_ModStart>, target_width, target_height ; size_t width, height ; if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; return 1 ; } if ( argc < 5 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; return 1 ; } if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> write\\n"",",0
1092,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 head, tail, size ; head <S2SV_ModEnd> = readw ( <S2SV_ModStart> + JQS_wHead ) ; tail = readw ( chip -> DSPQ + JQS_wTail ) ; size = <S2SV_ModEnd> readw ( chip <S2SV_ModStart> + JQS_wSize ) ; if ( head > size || tail > size ) goto out ; while ( head!= tail ) { snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * head ) ) ; if ( ++ head > size ) head = 0 ; writew ( head <S2SV_ModEnd>, chip -> <S2SV_ModStart> ) ; } out :",1
1093,<S2SV_ModStart> * opcode_desc ; if ( len < 2 ) { return NULL ; },1
1094,<S2SV_ModStart> acpi_status status ; <S2SV_ModEnd> next = acpi_gbl_module_code_list <S2SV_ModStart> * prev ; <S2SV_ModEnd> next = acpi_gbl_module_code_list <S2SV_ModStart> ) ; } <S2SV_ModEnd> acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node,0
1095,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
1096,"<S2SV_ModStart> url_arg ) { strncpy <S2SV_ModEnd> ( the_url, <S2SV_ModStart> filename ) ; strncpy <S2SV_ModEnd> ( the_url, <S2SV_ModStart> filename ) ; strncpy <S2SV_ModEnd> ( the_url, <S2SV_ModStart> filename ) ; strncpy <S2SV_ModEnd> ( the_url, <S2SV_ModStart> filename ) ; strncpy <S2SV_ModEnd> ( the_url, <S2SV_ModStart> filename ) ; strncpy <S2SV_ModEnd> ( the_url, <S2SV_ModStart> filename ) ; strncpy <S2SV_ModEnd> ( the_url, <S2SV_ModStart> filename ) ; strncpy <S2SV_ModEnd> ( the_url, <S2SV_ModStart> filename ) ; strncpy <S2SV_ModEnd> ( the_url, <S2SV_ModStart> filename ) ; strncpy <S2SV_ModEnd> ( the_url, <S2SV_ModStart> filename ) ; strncpy <S2SV_ModEnd> ( the_url, <S2SV_ModStart> filename ) ; strncpy <S2SV_ModEnd> ( the_url, <S2SV_ModStart> filename ) ; strncpy <S2SV_ModEnd> ( the_url, <S2SV_ModStart> filename ) ; strncpy <S2SV_ModEnd> ( the_url, <S2SV_ModStart> filename ) ; strncpy <S2SV_ModEnd> ( the_url, <S2SV_ModStart> filename ) ; strncpy <S2SV_ModEnd> ( the_url, <S2SV_ModStart> filename ) ; strncpy <S2SV_ModEnd> ( the_url, <S2SV_ModStart> filename ) ; strncpy <S2SV_ModEnd> ( the_url, <S2SV_ModStart> filename ) ; strncpy <S2SV_ModEnd> ( the_url, <S2SV_ModStart> filename ) ; str",0
1097,"<S2SV_ModStart>, result ; _Py_IDENTIFIER ( _attributes ) <S2SV_ModEnd> ; PyObject *",0
1098,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
1099,"<S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; vpx_codec_enc_cfg_t * <S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } priv = vpx_calloc ( 1, sizeof ( * priv ) ) ; if (! priv ) { return VPX_CODEC_MEM_ERROR ; } ctx -> priv -> sz = sizeof ( * ctx -> priv ) ; ctx -> priv -> iface = ctx -> iface ; priv -> init_flags = ctx -> init_flags ; if ( ctx -> config. enc ) { priv -> cfg = * ( ctx -> config. enc ) <S2SV_ModEnd> ; } cfg <S2SV_ModStart> ++ ) ; priv -> vp8_cfg = & extracfg_map [ i ]. cfg ; priv -> vp8_cfg. pkt_list = malloc ( priv -> cx_data_sz ) ; if (! priv -> cx_data ) { return VPX_CODEC_MEM_ERROR ; } priv -> cx_data_sz = 32768 ; priv -> cx_data = malloc ( priv -> cx_data_sz ) ; if (! priv -> cx_data ) { return VPX_CODEC",0
1100,"<S2SV_ModStart> error ) { if ( bp && ( <S2SV_ModEnd> xfs_da_shrink_inode ( args <S2SV_ModStart>, bp )!= 0 ) <S2SV_ModEnd> ) goto out",1
1101,"<S2SV_ModStart> -> decode ( s, pixel, cnt_c, totfr ) ) < 0 ) return ret ; if ( pixel -> freq [ c ] < cnt_c + step || pixel -> lookup [ x ] < cnt_x + step ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; totfr += step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 16 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned i16_17 = ( i16_17 >> 4 ) + 1 ; pixel -> lookup [ i ] = 0 ; for ( j = 0 ; j < 16 ; j ++ ) i16_17 = ( i16_17 >> 4 )",0
1102,"<S2SV_ModStart> timer ) ; spin_lock ( & snd_timer_slave_lock ) ; <S2SV_ModStart> slave_active_lock ) ; mutex_unlock ( & snd_timer_slave_lock ) ; } list_for_each_entry ( slave, tmp, & snd_timer_slave_list, open_list ) { spin_lock ( & snd_timer_slave_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; } spin_unlock ( & snd_timer_slave_lock ) ;",0
1103,"<S2SV_ModStart> return err ; if (! <S2SV_ModEnd> attrs [ TIPC_NLA_SOCK <S2SV_ModStart> attrs [ TIPC_NLA_SOCK <S2SV_ModEnd> ] ) return <S2SV_ModStart> - EINVAL ; err = nla_parse_nested ( sock, TIPC_NLA_SOCK_MAX, attrs [ TIPC_NLA_SOCK ], tipc_nl_sock_policy ) ; if ( err ) return err ; if (! sock <S2SV_ModEnd> [ TIPC_NLA_SOCK_REF ] <S2SV_ModStart> [ TIPC_NLA_SOCK_REF ] <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; tsk_portid = nla_get_u32 ( sock [ TIPC_NLA_SOCK_REF ] ) ; } if ( done ) return 0 ; tsk = tipc_sk_lookup ( net, tsk_portid ) ; if (! tsk ) return - EINVAL ;",1
1104,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> 0 ; } memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> (! ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. count = 0 ; * res = VPX_CODEC_INVALID_PARAM ; return - 1 ; } if (! ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } return 0 ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } else { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } return <S2SV_ModEnd> 1 ; },0
1105,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1106,<S2SV_ModStart> ) buffer ; if ( total_len < sizeof ( * cap ) || total_len < <S2SV_ModEnd> cap -> bLength <S2SV_ModStart> cap -> bLength ) { dev -> bos -> desc -> bNumDeviceCaps = i ; break ; } length = cap -> bLength <S2SV_ModEnd> ; total_len -=,1
1107,<S2SV_ModStart> task = current <S2SV_ModEnd> ; if (,1
1108,<S2SV_ModStart> ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenEAttr > inode -> i_sb -> s_blocksize ) goto out ; if ( iinfo -> i_lenAlloc > inode -> i_sb -> s_blocksize ) goto out ; if ( iinfo -> i_lenAlloc > inode -> i_sb -> s_blocksize - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc ) goto out ; if ( iinfo -> i_lenAlloc - iinfo -> i_lenAlloc > inode -> i_sb -> s_blocksize ) goto out ; if ( iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i,0
1109,"<S2SV_ModStart> data ) { uint16_t status ; <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
1110,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> { char * ptr <S2SV_ModEnd> ; int n,0
1111,"<S2SV_ModStart> sk_forward_alloc ) ; inet -> opt = NULL ; dst_release ( rcu_dereference_check ( sk -> sk_dst_cache, 1 ) ) ; sk_refcnt_debug_dec ( sk ) ;",0
1112,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
1113,<S2SV_ModStart>! saw_digit ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\r' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\n' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart> ; trunc : * endp = bp ; <S2SV_ModStart> ; invalid : * endp = bp ;,1
1114,<S2SV_ModStart> ; args -> rmtvaluelen = be32_to_cpu ( name_rmt -> valuelen ) ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> * 2 ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> * 2 ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> * 2 ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> * 2 ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> * 2 ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> * 2 ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> * 2 ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> * 2 ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> * 2 ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> * 2 ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> * 2 ; args -> rmtblkno,0
1115,"<S2SV_ModStart>, ""DefragSturgesNovakFirstTest"", DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""DefragSturgesNovakLastTest"", <S2SV_ModStart> ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLinuxTest"", IPV6DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakWindowsTest"", IPV6DefragSturgesNovakWindowsTest ) ;",0
1116,<S2SV_ModStart> ; if ( object_length > sizeof ( new_object. data ) || object_length + add_v1_record > sizeof ( new_object. data ) ) { sc_cardctl_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( object_length + add_v1_record > sizeof ( new_object. data ) ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_,0
1117,"<S2SV_ModStart> out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; }",0
1118,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1119,<S2SV_ModStart> u8 label_len ; <S2SV_ModEnd> GET8 ( label_len <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ;,1
1120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpAcc"", ""%s"", ""(cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> tmp ) ; return 1 ;",0
1121,"<S2SV_ModStart> -> vm_ops ) <S2SV_ModEnd> return do_fault ( <S2SV_ModStart>, pte, pmd, flags, entry ) ; <S2SV_ModEnd> return do_anonymous_page ( <S2SV_ModStart>, address, pte, pmd, <S2SV_ModEnd> flags ) ;",1
1122,"<S2SV_ModStart> s ) { size_t len = strlen ( s ) + 1 ; <S2SV_ModStart> = pool_alloc ( len ) ; memcpy <S2SV_ModEnd> ( r, <S2SV_ModStart> r, s, len",1
1123,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1124,"<S2SV_ModStart>! new_idmap_permitted ( file,",1
1125,"<S2SV_ModStart> ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> capacity <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; return NULL ; } if ( cu -> dies [ cu -> length ]. tag == 0 ||! cu -> dies [ cu -> length ]. tag ) { eprintf ( ""Warning: <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> tag <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> tag\\n"" ) ; return NULL ; }",0
1126,"<S2SV_ModStart> NULL ; } if ( <S2SV_ModEnd> p_sys -> p_format <S2SV_ModStart> p_sys -> p_format -> interlaced ) { schro_encoder_setting_set_double ( p_enc -> p_schro, ""interlaced_coding"", p_sys -> p_format -> interlaced ) ; } else if ( p_sys -> p_format -> top_field_first ) { schro_encoder_setting_set_double ( p_enc -> p_schro, ""top_field_first"",! p_sys -> p_format -> interlaced ) { schro_encoder_setting_set_double ( p_enc -> p_schro, ""top_field_first"", p_sys -> p_format -> interlaced ) ; } else if ( p_sys -> p_format -> interlaced ) { schro_encoder_setting_set_double ( p_enc -> p_schro, ""top_field_first"", p_sys -> p_format -> interlaced ) ; } else { if ( p_sys -> p_format -> interlaced",0
1127,"<S2SV_ModStart> ) ; } if (! mp_path_exists ( mf -> log_path ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> log_path ) ; mf -> nr_of_files = 0 ; goto exit_mf ; }",0
1128,<S2SV_ModStart> case IPPROTO_ROUTING : ND_TCHECK ( * cp ) ; <S2SV_ModStart> ip6 ) ; ND_TCHECK ( * cp ) ; <S2SV_ModStart> case IPPROTO_ROUTING2 : ND_TCHECK ( * cp ) ; <S2SV_ModStart> ip6 ) ; ND_TCHECK ( * cp ) ; <S2SV_ModStart> case IPPROTO_ROUTING3 : ND_TCHECK ( * cp ) ; <S2SV_ModStart> case IPPROTO_ROUTING4 : ND_TCHECK ( * cp ) ; ND_TCHECK ( * cp ) ; <S2SV_ModStart> ip6 ) ; ND_TCHECK ( * cp ) ; <S2SV_ModStart> case IPPROTO_ROUTING2 : ND_TCHECK ( * cp ) ; <S2SV_ModStart> ip6 ) ; ND_TCHECK ( * cp ) ; <S2SV_ModStart> case IPPROTO_ROUTING3 : ND_TCHECK ( * cp ) ; <S2SV_ModStart> case IPPROTO_ROUTING4 : ND_TCHECK ( * cp ) ; <S2SV_ModStart> ip6 ) ; ND_TCHECK ( * cp ) ; <S2SV_ModStart> ip6 ) ; ND_TCHECK ( * cp ) ; <S2SV_ModStart> case IPPROTO_ROUTING2 : ND_TCHECK,0
1129,"<S2SV_ModStart> uint32 num_properties = GETUINT32 <S2SV_ModEnd> ( buf + <S2SV_ModStart> ]. len ) ; if ( a -> names [ i ]. data ) { for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. data [ j ] ) ; } } else { CHECKINT32 ( idx, len ) ; a -> type = CHECKINT16 ( buf + idx ) ; idx += 2 ; } a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ; idx += sizeof ( GUID ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> name. data = CHECKED_XMALLOC ( unsigned char, a -> name. len ) ; for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j",0
1130,<S2SV_ModStart> ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenEAttr > inode -> i_sb -> s_blocksize ) goto out ; if ( iinfo -> i_lenAlloc > inode -> i_sb -> s_blocksize ) goto out ; if ( iinfo -> i_lenAlloc > inode -> i_sb -> s_blocksize - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc ) goto out ; if ( iinfo -> i_lenAlloc - iinfo -> i_lenAlloc > inode -> i_sb -> s_blocksize ) goto out ; if ( iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i_lenAlloc - iinfo -> i,0
1131,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1132,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
1133,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
1134,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp9_ref_frame_t * ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( ctx -> frame_workers!= NULL ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; YV12_BUFFER_CONFIG * yuvconfig2image ( & frame_worker_data -> img, NULL, NULL ) ; vpx_get_reference_dec <S2SV_ModEnd> ( ctx -> <S2SV_ModStart>, & fb, frame_worker_data <S2SV_ModEnd> -> idx,",0
1135,"<S2SV_ModStart> ctxt ) ; if (! ( em_syscall_is_enabled ( ctxt ) ) ) return emulate_ud ( ctxt ) ; <S2SV_ModStart>, & ss ) ; if (! ( efer & EFER_SCE ) ) return emulate_ud ( ctxt",1
1136,"<S2SV_ModStart> ; if ( next_marker == JPEG_MARKER_EOI ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> EOI.\\n"", next_marker ) ; return AVERROR_INVALIDDATA ; } else if ( next_marker == JPEG_MARKER_SOS ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOS.\\n"", next_marker ) ; return AVERROR_INVALIDDATA ; } else if ( next_marker == JPEG_MARKER_SOI ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOI.\\n"", next_marker ) ; return AVERROR_INVALIDDATA ; }",0
1137,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == expr_ty ) { expr_ty e = ast_for_expr ( c, CHILD ( n, 0 ) ) ; if (! e ) return NULL ; return Expr ( e, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; } else if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) e = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; if (! e ) return NULL ; return Expr ( e, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; }",0
1138,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y, int mc_avg_y_stride, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * running_avg_y, int avg_y_stride, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> char * mc_running_avg_y, int avg_y_stride, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> char * running_avg_y, int avg_y_stride <S2SV_ModEnd> ) { unsigned <S2SV_ModStart> unsigned char * running_avg_y = running_avg -> y_buffer + y_offset ; int avg_y_stride <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> char * running_avg_y, int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; i ++ ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff +=",0
1139,"<S2SV_ModStart> = NS_TRUE ; if ( reqPtr -> avail == 0 ) { Ns_Log ( Ns_LogRequestDebug, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; } else { Ns_Log ( Ns_LogRequestDebug, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; }",0
1140,<S2SV_ModStart> = 0 ; unsigned long cp0 ; <S2SV_ModStart> = 0 ; cp0 = ( ( xtregs_coprocessor_t ) regs -> cp0 ) & cpu_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1141,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
1142,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> if ( xop <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) { struct se_device * <S2SV_ModEnd> remote_dev ; pr_debug <S2SV_ModStart> = xop -> src_dev -> se_dev ; pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; } else { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for""",0
1143,"<S2SV_ModStart> ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close_sock ; } val = 1 ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_RECVHOPLIMIT, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_RECVHOPLIMIT,.""",1
1144,"<S2SV_ModStart> int error ; unsigned long size ; <S2SV_ModStart> get_bh ( new_bh ) ; mb2_cache_insert ( EXT2_SB ( sb ) -> s_mb_cache, header, sizeof ( struct ext2_xattr_header ), new_bh <S2SV_ModStart> new_bh ) ; mb2_cache_insert ( EXT2_SB ( sb ) -> s_mb_cache, header, sizeof ( struct ext2_xattr_header ) ) ; <S2SV_ModStart> cleanup ; } mb2_cache_insert ( EXT2_SB ( sb ) -> s_mb_cache, header, sizeof ( struct ext2_xattr_header ) <S2SV_ModEnd> ) ; }",0
1145,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1146,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> (! vp9_set_active_map <S2SV_ModEnd> ( ctx ->",0
1147,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; inode -> i_ctime = CURRENT_TIME ; mark_inode_dirty ( inode ) ; } break ; case ACL_TYPE_DEFAULT : ea_name = XATTR_NAME_POSIX_ACL_DEFAULT ; break ; default : return - EINVAL ; } if ( acl ) { size = posix_acl_xattr_size ( acl -> a_count ) ; value = kmalloc ( size, GFP_KERNEL ) ; if (! value ) return - ENOMEM ; rc = posix_acl_to_xattr ( & init_user_ns, acl, value, size <S2SV_ModStart> < 0 ) <S2SV_ModEnd> goto out ;",1
1148,"<S2SV_ModStart> ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImage",0
1149,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1150,<S2SV_ModStart> 3 * len + 8,1
1151,<S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { points [ i ]. x = <S2SV_ModStart> var ) ; } <S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { points [ i ]. y = <S2SV_ModStart> ; } } },1
1152,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1153,"<S2SV_ModStart> char * ) AcquireQuantumMemory <S2SV_ModEnd> ( imsx * <S2SV_ModStart>, 1 ) ; if ( sixel_palet [ n ] == SIXEL_PALETTE_MAX ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( i = 0 ; i < 24 ; i ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( i = 0 ; i < 6 ; i ++ ) { for ( r = 0 ; r < 6 ; r ++ ) { for ( g = 0 ; g < 6 ; g ++ ) { for ( b = 0 ; b < 6 ; b ++ ) { for ( b = 0 ; b < 6 ; b ++ ) { for ( r = 0 ; r < 6 ; r ++ ) { for ( r = 0 ; r < 6 ; r ++ ) { for ( r = 0 ; r < 6 ; r ++ ) { for ( r = 0 ; r < 6 ; r ++ ) { for ( r = 0 ; r < 6 ; r ++ ) { for ( b = 0 ; b < 6 ; b ++ ) {",0
1154,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
1155,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; if ( ctx -> frame_parallel_decode ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; VPxWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModStart> vp9_copy_reference_dec ( ctx <S2SV_ModEnd>, ( VP9_REFFRAME <S2SV_ModStart> VP9_REFFRAME ) frame_worker_data <S2SV_ModEnd>, & sd <S2SV_ModStart> return vp9_copy_reference_dec ( frame_worker_data <S2SV_ModEnd> -> pbi,",0
1156,"<S2SV_ModStart>. path ; return Curl_urldecode <S2SV_ModEnd> ( data, <S2SV_ModStart>, 0, & <S2SV_ModEnd> pop3c -> mailbox <S2SV_ModStart> pop3c -> mailbox, NULL, TRUE ) <S2SV_ModEnd> ; } <S2SV_null>",1
1157,<S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ;,1
1158,"<S2SV_ModStart> gb ) ; if ( sh -> pps_id >= HEVC_MAX_PPS_COUNT ||! s -> ps. pps_list [ sh -> pps_id ] -> data ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> id <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> %d\\n"", sh -> pps_id ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> gb ) ; if ( sh -> pps_id >= HEVC_MAX_PPS_COUNT ||! sh -> pps_list [ sh -> pps_id ] -> data ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> id <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> %d\\n"", sh -> pps_id ) ; return AVERROR_INVALIDDATA ; }",0
1159,<S2SV_ModStart> } ps_dec -> u2_total_mbs_coded += u1_num_mbs ; if ( ps_dec -> u2_total_mbs_coded > ps_dec -> u2_total_mbs_coded ) { ps_dec -> <S2SV_ModStart> u2_total_mbs_coded -= u1_num_mbs ; if ( ps_dec -> u2_total_mbs_coded > ps_dec -> u2_total_mbs_coded ) { ps_dec -> u2_total_mbs_coded -= u1_num_mbs ; if ( ps_dec -> u2_total_mbs_coded > ps_dec -> u2_total_mbs_coded ) { ps_dec -> u2_total_mbs_coded -= u1_num_mbs ; if ( ps_dec -> u2_total_mbs_coded > ps_dec -> u2_total_mbs_coded ) { ps_dec -> u2_total_mbs_coded = ps_dec -> u2_total_mbs,0
1160,"<S2SV_ModStart>, u4_y_offset ; const dec_mb_params_t * ps_dec_mb_params ; IMPEG2D_ERROR_CODES_T e_error ; <S2SV_ModStart> == B_PIC ) e_error = impeg2d_dec_pnb_mb_params ( ps_dec ) ; else e_error = impeg2d_dec_p_mb_params ( ps_dec ) ; if ( e_error!= IMPEG2D_ERROR_NONE ) { break <S2SV_ModEnd> ; } IMPEG2D_TRACE_MB_START <S2SV_ModStart> == B_PIC ) e_error = impeg2d_dec_pnb_mb_params ( ps_dec ) ; else e_error = impeg2d_dec_p_mb_params ( ps_dec ) ; IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; if ( e_error!= IMPEG2D_ERROR_NONE ) break ; <S2SV_ModStart> == B_PIC ) e_error = impeg2d_dec_p_mb_params ( ps_dec ) ; else",0
1161,"<S2SV_ModStart> VP9_LAST_FLAG ) { VP9_COMMON * const cm = & pbi -> common ; YV12_BUFFER * const cfg = cm -> frame_bufs [ <S2SV_ModEnd> cm -> ref_frame_map <S2SV_ModStart> ] ] ; if (! cfg ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Missing <S2SV_blank> buffer <S2SV_blank> configuration"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Invalid <S2SV_blank> reference <S2SV_blank> frame"" ) ; } if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = & cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ] ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd",0
1162,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1163,"<S2SV_ModStart> -> mbmi ; const int num_4x4_w = get_num_4x4_blocks_wide_lookup [ pd -> subsampling_x ] ; const int num_4x4_h = get_num_4x4_blocks_high_lookup [ pd -> subsampling_y ] ; const int num_4x4_w = get_num_4x4_blocks_wide_lookup [ pd -> subsampling_x ] ; const int num_4x4_w = get_num_4x4_w ( pd ) ; const int num_4x4_h = get_num_4x4_blocks_high ( pd ) ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ;",0
1164,<S2SV_ModStart> -> mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor <S2SV_ModEnd> ; if (,1
1165,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
1166,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> fmt, 1 <S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, sizeof",1
1167,"<S2SV_ModStart> nrow ) { if ( ( row + img -> row_offset ) % rowsperstrip!= 0 ) { TIFFErrorExt ( tif, ""gtStripSeparate"", ""%s"", ""(row+img->row_offset)%rowsperstrip!=0"" ) ; return ( 0 ) ; } <S2SV_ModStart> % rowsperstrip ; if ( ( row + img -> row_offset ) % rowsperstrip!= 0 ) { TIFFErrorExt ( tif, ""gtStripSeparate"", ""(row+img->row_offset)%rowsperstrip!=0"" ) ; return ( 0 ) ; } <S2SV_ModStart> buf == NULL ) { TIFFErrorExt ( tif, ""gtStripSeparate"", ""(row+img->row_offset)%rowsperstrip!=0"" ) ; return ( 0 ) ; } <S2SV_ModStart> % rowsperstrip ; if ( ( row + img -> row_offset ) % rowsperstrip!= 0 ) { TIFFErrorExt ( tif, ""gtStripSeparate"", ""(row+img->row_offset)%rowsperstrip!=0"" ) ; return ( 0 ) ; }",0
1168,"<S2SV_ModStart> ; } } if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) { Py_FatalError ( ""Block <S2SV_blank> type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d"", TYPE ( CHILD ( n, 1 ) ) ) ; Py_FatalError ( ""Block <S2SV_blank> type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d"", CHILD ( n, 1 ) ) ; Py_FatalError ( ""Block <S2SV_blank> type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d"", NCH ( n ) ) ; Py_FatalError ( ""Block <S2SV_blank> type <S2SV_blank> found: <S2SV_blank> %d"", TYPE ( CHILD ( n, 2 ) ) ) ; Py_FatalError ( ""Block <S2SV_blank> type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d"", TYPE ( CHILD ( n, 2 ) ) ; Py_FatalError ( ""Block <S2SV_blank> type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d"", CHILD ( n, 2 ) ) ; }",0
1169,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1170,<S2SV_ModStart> ( upid == INT_MIN ) return - ESRCH ; if ( upid ==,1
1171,"<S2SV_ModStart> siocb -> scm, false",1
1172,<S2SV_ModStart> ; if ( num & ( 1 << <S2SV_ModEnd> number - 1 <S2SV_ModStart> - 1 ) ) return num - ( 1 << number ) ; else return num ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1173,"<S2SV_ModStart>, plane ) * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? 2 : 1 ) <S2SV_ModStart> ( buf, stride <S2SV_ModEnd>, file )",0
1174,<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> + 2 ) { avp -> type = L2TP_AVP_TYPE_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1175,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; int r = 0 ; if <S2SV_ModEnd> ( lc -> <S2SV_ModStart> ( lc -> start || ti -> len!= i_size_read ( dev -> bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL, cmd ) ; return r? : __blkdev_driver_ioctl ( <S2SV_ModStart> -> bdev, <S2SV_ModEnd> dev -> mode",1
1176,"<S2SV_ModStart> ; if ( ( actx -> tag_len & 0xFF )!= actx -> tag. len ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_IV_LEN_ERROR ) ; return 0 ; } actx -> tag. text [ actx -> tag. len ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + actx -> tag. len ) ; if ( ( actx -> tag_len & 0xFF )!= actx -> tag. aad ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_IV_LEN_ERROR ) ; return 0 ; } actx -> tag. text [ actx -> tag. len ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + actx -> tag. text ) ; if ( ( actx -> tag_len & 0xFF )!= actx -> tag. text ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_IV_",0
1177,"<S2SV_ModStart> { request_module ( ""crypto-%s"" <S2SV_ModEnd>, name ) <S2SV_ModStart> ) request_module ( ""crypto-%s-all"" <S2SV_ModEnd>, name )",1
1178,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
1179,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1180,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1181,"<S2SV_ModStart> sk ) ; memset ( sa, 0, sizeof ( sa ) ) ;",0
1182,"<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { if ( memcmp ( cpkt. data, pass_salt, cpkt. length ) ) { send_auth ( NULL, ""Invalid <S2SV_blank> pass <S2SV_blank> salt"" ) ; } else if ( cpkt. cptype == MT_CPTYPE_AUTH ) { send_auth ( NULL, ""Invalid <S2SV_blank> auth <S2SV_blank> packet"" ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; if ( is_a_tty ) { setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; } } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { raw_term ( ) ; signal ( SIGWINCH, sig_winch ) ; } }",0
1183,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC | NTLMSSP_NEGOTIATE_SEAL <S2SV_ModStart> -> sign ) <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,1
1184,<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> ) ) ; mutt_socket_empty ( adata -> conn ) ;,0
1185,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1186,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ) cp0 ; return 1 ;",0
1187,<S2SV_ModStart> -> head <= 0 || ( int ) ( g -> sect << 2 ) || ( int ) ( g -> head << 2 ) || ( int ) ( g -> track << FD_STRETCH ( g ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0,0
1188,"<S2SV_ModStart> line ) ; if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; }",0
1189,"<S2SV_ModStart>, & rlen, 0",1
1190,"<S2SV_ModStart> * slavename ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) <S2SV_ModStart> } # endif memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart>, curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( const md5_byte_t * ) md5data + 1 ) ; md5_finish ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; init_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter, MT_PTYPE_END_AUTH, NULL, 0 ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter",0
1191,"<S2SV_ModStart> mntent, path, rootfs -> mount",1
1192,"<S2SV_ModStart> ; if (! PyUnicode_CompareWithASCIIString ( name, ""__debug__"" ) ) { ast_error ( c, n, ""invalid <S2SV_blank> name"" ) ; return 1 ; } if (",0
1193,<S2SV_ModStart> - offset ; unsigned short prev_bi_vcnt = bio -> bi_vcnt ; <S2SV_ModStart> ) break ; if ( bio -> bi_vcnt == prev_bi_vcnt ) put_page ( pages [ j ] ) ;,1
1194,"<S2SV_ModStart> -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { jas_eprintf ( ""warning: <S2SV_blank> number <S2SV_blank> of <S2SV_blank> colors <S2SV_blank> <= <S2SV_blank> RAS_CMAP_MAXSIZ\\n"" ) ; return - 1 ; } <S2SV_ModEnd> actualnumcolors = hdr",0
1195,"<S2SV_ModStart> state. path <S2SV_ModEnd> ; char localhost <S2SV_ModStart> ""localhost"" ; } result = Curl_urldecode ( conn -> data, path, 0, & <S2SV_ModStart> smtpc -> domain, NULL, TRUE ) ; if ( result ) return result <S2SV_ModEnd> ; state (",1
1196,"<S2SV_ModStart>, ""ID:"", sizeof ( jslGetTokenValueAsString ) - len <S2SV_ModStart>, ""ID:"", sizeof ( jslGetTokenValueAsString ) - len <S2SV_ModStart>, ""String:"", sizeof ( jslGetTokenValueAsString ) - len <S2SV_ModEnd> ) ; } <S2SV_ModStart>, ""String:"", sizeof ( jslGetTokenValueAsString ) - len <S2SV_ModEnd> ) ; } <S2SV_ModStart>, ""String:\'"", sizeof ( jslGetTokenValueAsString ) - len <S2SV_ModEnd> ) ; strncat",0
1197,<S2SV_ModStart> [ i ] && str [ i ],0
1198,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1199,<S2SV_ModStart> 0 ) ; goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> + RDS_CONG_MAP_BYTES ; goto out <S2SV_ModEnd> ; } if,0
1200,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1201,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1202,,1
1203,"<S2SV_ModStart> { if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if (! exponly ) { if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } } else if (! printHere &&! exponly ) { if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if (! IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } } else if (! printHere &&! exponly ) { if ( IS_MODE_RAD ( mode ) ) { r_cons_printf",0
1204,"<S2SV_ModStart>, rqstp, res <S2SV_ModEnd> ) ; out",1
1205,"<S2SV_ModStart> mntent -> mnt_dir, NULL",1
1206,"<S2SV_ModStart> iv ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1207,"<S2SV_ModStart> ) ) { * status = ""EVIDENCE_TICKET_MISMATCH"" ; <S2SV_ModStart> ) ) { * status = ""EVIDENCE_TICKET_MISMATCH"" ;",0
1208,<S2SV_ModStart> thread -> tp_value [ 0 ] <S2SV_ModStart> childregs -> ARM_r3 ; thread -> tp_value [ 1 ] = get_tpuser ( ),1
1209,"<S2SV_ModStart> bufsize ) { char * new_buf ; size_t new_bufsize <S2SV_ModEnd> ; JAS_DBGLOG ( <S2SV_ModStart> ) ) ; new_bufsize <S2SV_ModEnd> = 1024 ; <S2SV_ModStart> 0 ) { new_bufsize <S2SV_ModEnd> = bufsize ; <S2SV_ModStart> = bufsize ; new_bufsize <S2SV_ModEnd> = 0 ; <S2SV_ModStart> } else { new_bufsize <S2SV_ModEnd> = bufsize ; <S2SV_ModStart> = bufsize ; new_bufsize <S2SV_ModEnd> = 0 ; <S2SV_ModStart> } else { new_bufsize <S2SV_ModEnd> = bufsize ; <S2SV_ModStart> = bufsize ; } jas_stream_memobj_init ( stream, JAS_STREAM_FULLBUF, 0, 0 ) ; if (! jas_malloc ( new_bufsize ) ) { jas_stream_close ( stream ) ; return 0 ; } JAS_DBGLOG ( 100, ( ""jas_stream_memopen <S2SV_blank> buffer <S2SV_blank> buf=%p <S2SV_blank> myalloc=%d\\n"", new_buf, new_bufsize <S2SV_ModEnd> ) ) ;",0
1210,"<S2SV_ModStart> sshbuf * b = NULL <S2SV_ModStart> char * pkalg = NULL <S2SV_ModStart> u_char * pkblob = NULL <S2SV_ModStart>, * sig = NULL <S2SV_ModStart> ; if ( <S2SV_ModEnd>! authctxt -> <S2SV_ModStart> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if ( ( r = sshpkt_get_u8 ( ssh, & pkalg ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen ) )!= 0 ) fatal ( ""%s: <S2SV_blank> parse <S2SV_blank> request <S2SV_blank> failed: <S2SV_blank> %s"", __func__, ssh_err ( r ) ) ; if (! authctxt -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if (! authctxt -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if (! authctxt -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done",0
1211,"<S2SV_ModStart> ; uint32_t bcount ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
1212,"<S2SV_ModStart> == READ ) { int ret ; <S2SV_ModStart> = ocfs2_dio_get_block ; ret = blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; } else ret = __blockdev_direct_IO ( iocb, inode -> i_sb -> s_bdev, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
1213,"<S2SV_ModStart> mech ) ; ret = gsasl_server_start_p ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ), 0 ) ; return ; } if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ), 0 )",0
1214,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1215,"<S2SV_ModStart> size_t s ; memset ( n -> entries + tcount, 0, sizeof ( MnoteFujiEntry ) ) ;",0
1216,"<S2SV_ModStart> failed_mount3 ; } # ifdef CONFIG_EXT2_FS_XATTR sbi -> s_mb_cache = ext2_xattr_create_cache ( ) ; if (! sbi -> s_mb_cache ) { ext2_msg ( sb, KERN_ERR, ""Failed <S2SV_blank> to <S2SV_blank> create <S2SV_blank> an <S2SV_blank> mb_cache"" ) ; goto failed_mount3 ; } # endif <S2SV_ModStart> ; failed_mount3 : if ( sbi -> s_mb_cache ) ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ;",1
1217,<S2SV_ModStart> bd_addr ) { if ( bd_addr == NULL ) return BT_STATUS_INVALID_PARAMETER ;,0
1218,<S2SV_ModStart> len < tcp_hdrlen || tcp_hdrlen < sizeof ( struct tcphdr ) <S2SV_ModStart> ; if ( tcp_hdrlen >= 15 * 4 ) return 0 ; if (,1
1219,<S2SV_ModStart> int i ; size_t size ; matrix = 0 ; <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> return matrix ; error : jas_matrix_destroy ( matrix ) ; return 0 ;,0
1220,"<S2SV_ModStart> ipv6_select_ident ( fh, rt <S2SV_ModStart> ipv6_select_ident ( fh, rt",1
1221,"<S2SV_ModStart> void ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; ce = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS ) ; if (! ce ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } error = mb2_cache_entry_insert ( ce, bh -> b_bdev, bh -> b_blocknr, hash <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } <S2SV_null>",0
1222,<S2SV_ModStart> * req ; <S2SV_ModEnd> req = scsi_req_alloc <S2SV_ModStart> hba_private ) ; <S2SV_ModEnd> return req ;,1
1223,"<S2SV_ModStart> int i ; size_t <S2SV_ModEnd> avail ; int <S2SV_ModStart> ) ; avail <S2SV_ModEnd> = buf -> <S2SV_ModStart> buf -> cursor ; expect = 8 + 8 + nxip * 8 ; if ( expect > buf -> len ) goto bad_format ; nxip = pq_getmsgint ( buf, 4 ) ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> xip [ nxip ] = 0 ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( snap, TXID_SNAPSHOT_SIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] =",0
1224,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1225,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
1226,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct xfrm_dump_info <S2SV_ModStart> struct xfrm_dump_info info <S2SV_ModEnd> ; info. <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> ( void ),1
1227,<S2SV_ModStart> - 1 ; size_t len = - 1 ; <S2SV_ModStart> = 0 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; <S2SV_ModStart> ) ; done : if ( ret > ( ssize_t ) len ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1228,"<S2SV_ModStart> dentry * upper <S2SV_ModEnd> ; int err <S2SV_ModStart> I_MUTEX_PARENT ) ; upper = lookup_one_len ( dentry -> d_name. name, upperdir, dentry -> d_name. len ) ; err = PTR_ERR ( upper ) ; if ( IS_ERR ( upper ) ) goto out_unlock ; <S2SV_ModStart> if ( upper == ovl_dentry_upper ( dentry ) ) { <S2SV_ModEnd> if ( is_dir <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> ovl_dentry_version_inc ( dentry <S2SV_ModStart> ) ; } dput ( upper ) ; <S2SV_ModStart> dentry ) ; out_unlock :",1
1229,"<S2SV_ModStart> { errstr = parse_global_option <S2SV_ModEnd> ( CMD_INITIALIZE, <S2SV_ModStart>, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ;",0
1230,<S2SV_ModStart> * ptrptr && <S2SV_ModEnd> nmemb && size <S2SV_ModStart> nmemb && size <S2SV_ModEnd> ) return AVERROR,1
1231,<S2SV_ModStart> ( a -> type == szMAPI_BINARY && a -> <S2SV_ModStart> else if ( a -> type == szMAPI_BINARY &&,1
1232,"<S2SV_ModStart> ; # endif if ( ( i -> width + i -> height ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX = i -> parent -> width - i -> width ; i -> posY = i -> parent -> height - i -> height ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX = i -> parent -> width - i -> width ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y",0
1233,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : * ( size_t * ) val = ms -> elf_notes_max ; return 0 ;,1
1234,"<S2SV_ModStart> { jas_eprintf ( ""got <S2SV_blank> box <S2SV_blank> type <S2SV_blank> %s\\n"" <S2SV_ModEnd>, box ->",1
1235,,1
1236,"<S2SV_ModStart> & 0xffff ; if ( synth_devs [ dev ] -> load_patch == NULL ) return - ENODEV ; err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0",0
1237,"<S2SV_ModStart> * journal = NULL ; if ( page_file_mapping ( page ) ) { if ( PageChecked ( page ) ) ClearPageChecked ( page ) ; else if ( PageChecked ( page ) ) jbd2_journal_invalidatepage ( journal, page, offset ) ; } else",0
1238,"<S2SV_ModStart> { trak = gf_isom_get_track <S2SV_ModEnd> ( movie -> <S2SV_ModStart> i + 1 ) ; GF_SAFEALLOC ( writer, TrackWriter ) ; if (! trak ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stbl ) return GF_OUT_OF_MEM ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; writer -> isDone = 0 ; writer -> chunkDur = 0 ; writer -> chunkSize = 0 ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ;",0
1239,<S2SV_ModStart> UINT32 nsc_rle_encode ( const,1
1240,"<S2SV_ModStart> 17 ] ; <S2SV_ModEnd> int plen ; <S2SV_ModStart> ; # endif strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password, 82, sizeof ( password ) - 82 ) ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> '\\0' ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password ), pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( const md5_byte_t * ) md5sum + 1 ) ; if ( is_a_tty && get_terminal_size ( & width, & height )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height ) ; } if ( is_a_tty && get_terminal_size ( & width, & height )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height ) ; } if ( is_a_tty && get_terminal_size ( & width, & height )!= - 1 ) { width = htole16 ( width",0
1241,"<S2SV_ModStart> * dllhandle ; if ( COM_CompareExtension ( name, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", name ) ; return NULL ; }",1
1242,<S2SV_ModStart> ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; _mibindexes = NULL ; },0
1243,"<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> ++ ; } \\\n} <S2SV_ModEnd> typedef struct PCDTable <S2SV_ModStart> buffer ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( buffer ) ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( buffer ) ; if ( pcd_table [ j ] == ( PCDTable * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( buffer ) ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( buffer ) ; if ( pcd",0
1244,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if (! TYPE_COMMENT ( CHILD ( n, i ) ) ) { ast_error ( c, CHILD ( n, i ), ""unexpected <S2SV_blank> node"" ) ; goto error ; } i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT :",0
1245,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1246,"<S2SV_ModStart> # ifdef HAVE_IPV6 <S2SV_ModEnd> if ( * <S2SV_ModStart> 1 ) { char * <S2SV_ModStart> 2 ) ; if ( p ) { <S2SV_ModStart> NULL ; } if ( * ( p + 1 )!= ']' ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } <S2SV_ModEnd> return estrndup ( <S2SV_ModStart> colon ) { if ( * ( colon + 1 )!= ':' ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return <S2SV_ModEnd> estrndup ( str <S2SV_ModStart> colon ) { if ( * ( colon + 1 )!= ':' ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } } else { if ( * ( colon + 1 )!= ':' ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; }",0
1247,"<S2SV_ModStart>, i, JPC_QCX_GETEXPN <S2SV_ModEnd> ( qcd -> <S2SV_ModStart> ] ), JPC_QCX_GETMANT <S2SV_ModEnd> ( qcd ->",0
1248,"<S2SV_ModStart> src_ybc -> y_height && src_ybc -> y_width && dst_ybc -> y_stride <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> src, src_ybc -> y_width, dst_ybc -> y_stride <S2SV_ModEnd> ) ; src",0
1249,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", c -> log2_cblk_width, c -> log2_cblk_height ) ; return AVERROR_INVALIDDATA ; }",0
1250,<S2SV_ModStart> == * ptr && ptr [ 1 ],1
1251,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> mi_col += MI_BLOCK_SIZE <S2SV_ModEnd> ) { int <S2SV_ModStart> { int dummy_rate ; int64_t dummy_dist ; BLOCK_SIZE i ; MACROBLOCK * x = & cpi -> mb ; if ( sf -> adaptive_pred_interp_filter ) { for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 4, num_4x4_blocks_wide_lookup [ i ] ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ;",0
1252,"<S2SV_ModStart>, obj_tlen ; u_int <S2SV_ModEnd> offset ; u_int <S2SV_ModStart> case LMP_CTYPE_1 : if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; break ; } <S2SV_ModStart> case LMP_CTYPE_2 : if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; break ; } <S2SV_ModStart> case LMP_CTYPE_3 : if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; break ; } <S2SV_ModStart> case LMP_CTYPE_2 : if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; break ; }",0
1253,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inc_mvs ( const <S2SV_ModStart> mbmi, const MV * mvs, nmv_context_counts * counts ) { const int_mv * ref = mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ] [ 0 ] ; const MV diff = { mvs [ i ]. row - mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ] [ 0 ]. as_mv. row - mbmi -> ref_mvs [ i ]. row - mbmi -> ref_mvs [ i ]. col - mbmi -> ref_mvs [ i ]. col <S2SV_ModEnd> ; vp9_inc_mv (",0
1254,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>",0
1255,<S2SV_ModStart> entry ) ; <S2SV_ModEnd> skb_pull_rcsum ( skb_out,0
1256,<S2SV_ModStart> sta -> lock ) ; spin_lock_init ( & sta -> ps_lock,1
1257,<S2SV_ModStart> tp_event ) && perf_paranoid_tracepoint_raw <S2SV_ModEnd> ( ) &&,1
1258,<S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_exit <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_v4_protosw_exit,0
1259,"<S2SV_ModStart>, 0 ) ; if (! data_interface ||! control_interface ) return - ENODEV",1
1260,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1261,"<S2SV_ModStart> return ; netsnmp_mibindex_load ( ) ; entry = strtok_r ( entry, ENV_SEPARATOR, & st ) ; if (! entry ) { netsnmp_err ( ""Invalid <S2SV_blank> MIB <S2SV_blank> directory: <S2SV_blank> %s\\n"", env_var ) ; return ; } <S2SV_ModEnd> SNMP_FREE ( env_var <S2SV_ModStart> ( entry ) { netsnmp_err ( ""Invalid <S2SV_blank> MIB <S2SV_blank> directory: <S2SV_blank> %s\\n"", env_var ) ; return ; } <S2SV_ModStart> NULL, NULL ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; if (! entry ) { netsnmp_err ( ""Invalid <S2SV_blank> MIB <S2SV_blank> directory: <S2SV_blank> %s\\n"", env_var ) ; return ; } <S2SV_ModStart> entry ) { <S2SV_ModEnd> add_mibfile ( entry <S2SV_ModStart> NULL, NULL ) ; netsnmp_err ( ""Invalid <S2SV_blank> MIB <S2SV_blank> directory: <S2SV_blank> %s\\n"", env_var ) ; return ; } <S2SV_ModEnd> netsnmp_init_mib_internals ( )",0
1262,"<S2SV_ModStart> * head ; <S2SV_ModEnd> newsk -> sk_sndbuf <S2SV_ModStart> -> sk_rcvbuf ; sctp_copy_descendant <S2SV_ModEnd> ( newsk,",1
1263,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, UI_SET_EVBIT, EV_KEY <S2SV_ModEnd> ) ; ioctl <S2SV_ModStart>, UI_SET_EVBIT, EV_REL <S2SV_ModEnd> ) ; ioctl <S2SV_ModStart>, UI_SET_EVBIT, EV_SYN ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, UI_SET_KEYBIT, key_map [ x ]. mapped_id ) ;",0
1264,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return sel ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! get_desc ( & desc, sel ) <S2SV_ModEnd> ) return - <S2SV_ModStart>! ( desc. <S2SV_ModEnd> type & BIT <S2SV_ModStart> (! ( desc. <S2SV_ModEnd> type & BIT <S2SV_ModStart> (! ( desc. <S2SV_ModEnd> l << 1 <S2SV_ModStart> 1 ) | desc. <S2SV_ModEnd> d ) {",0
1265,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
1266,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
1267,<S2SV_ModStart> return ret ; fsnotify_put_group ( group ) ;,1
1268,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( void <S2SV_ModEnd> ) { iakerb_ctx_id_t <S2SV_ModStart> ; code = krb5_gss_init_context <S2SV_ModEnd> ( & ctx,0
1269,<S2SV_ModStart> = tnum_is_const ( dst_reg -> t <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1270,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
1271,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
1272,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { kfree ( string ) ; <S2SV_ModStart> - EINVAL ; }",0
1273,<S2SV_ModStart> type_argv ) ; imethod = inflated -> imethod ;,0
1274,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; unsigned long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> ( copy_from_user ( buf <S2SV_ModEnd>, buffer, <S2SV_ModStart> count ) ) return - EFAULT ; tmp = simple_strtol ( buf, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ; uml_exitcode = tmp ; return count ; } if (",0
1275,"<S2SV_ModStart> input -> cur ) ; } if ( ( ( ctxt -> inputNr > 40 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) ) || ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) ) { xmlFatalErr ( ctxt, XML_ERR_ENTITY_LOOP, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"", ctxt -> inputNr + 1, input -> cur ) ; return ( - 1 ) ; } if ( ( ctxt -> inputNr > 40 ) && ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) ) { xmlFatalErr ( ctxt, XML_ERR_ENTITY_LOOP, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"", ctxt -> inputNr + 1, input -> cur ) ; return ( - 1 ) ; }",0
1276,"<S2SV_ModStart> } if ( le32_to_cpu ( raw_super -> segment_count ) > F2FS_MAX_SEGMENT ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> segment <S2SV_blank> count <S2SV_blank> (%u)"", le32_to_cpu ( raw_super -> segment_count ) ) ; return 1 ; } if (",1
1277,"<S2SV_ModStart> is_path ) { <S2SV_ModEnd> last_elem = wp <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN}"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM}"", 8 ) == 0 && ( len = 9 )!= 0 ) ) || ( strncmp ( & name [ 1 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) )? <S2SV_ModEnd> l -> l_origin <S2SV_ModStart> -> l_origin ) <S2SV_ModEnd> : _dl_platform )",0
1278,<S2SV_ModStart> } pDecCont = ( decContainer_t * ) H264SwDecMalloc ( <S2SV_ModEnd> sizeof ( decContainer_t,0
1279,<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart>! opt ) { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) ; txopt_put ( opt_to_free ) ;,1
1280,"<S2SV_ModStart> drop ; } iph = ip_hdr ( skb ) ; <S2SV_ModStart> return 0 ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen < sizeof ( struct iphdr ) ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if (",0
1281,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1282,"<S2SV_ModStart> ; if ( rtm -> rti_ext_hdr -> opt. optlen > RTA_MAX ) { err = - EINVAL ; goto errout ; } rt = rcu_dereference_protected ( rtm -> rti_ext_hdr, sock_owned_by_user ( in_skb ) ) ; if ( rt && rt -> rti_ext_hdr -> optlen > RTA_MAX ) { err = - EINVAL ; goto errout ; } <S2SV_ModStart> ; errout : if ( rtm -> rti_ext_hdr -> optlen > RTA_MAX ) { kfree_skb ( skb ) ; rtm -> rti_ext_hdr -> optlen = RTA_MAX ; err = rtm -> rti_ext_hdr -> optlen = RTA_MAX ; rt -> rti_ext_hdr -> optlen = RTA_MAX ; } else { <S2SV_ModStart> ; } } rcu_read_lock ( ) ; if ( rtm -> rti_ext_hdr -> optlen > RTA_MAX ) { kfree_skb ( skb ) ; rtm -> rti_ext_",0
1283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1284,<S2SV_ModStart> goto errout ; if ( info -> stagemasks == NULL ) { _ogg_free ( info -> stagebooks ) ; return - 1 ; },0
1285,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
1286,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; } tp -> copied_seq = seq ;,1
1287,"<S2SV_ModStart> ; krb5_key_data * key_data ; if ( key_data_in == NULL ) goto cleanup ; key_data = k5calloc ( n_key_data, sizeof ( * key_data ), & err ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_kvno!= key_data [ i + 1 ]. key_data_kvno ) num_versions ++ ; ret [ j ] = k5alloc ( sizeof ( struct berval ), & err ) ; if ( ret == NULL ) goto cleanup ; }",0
1288,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
1289,<S2SV_ModStart> ] ) ; sqlite3_int64 <S2SV_ModEnd> zByte = ( <S2SV_ModStart> zByte + 1 ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else {,0
1290,<S2SV_ModStart> filp ) { if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM ;,0
1291,"<S2SV_ModStart> expr_ty iter, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",0
1292,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart>, name ) ; if ( param -> new_file_pos > param -> max_file_pos ) { mi_check_print_error ( param, ""Can\'t <S2SV_blank> copy <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table: <S2SV_blank> \'%s\'"", param -> temp_filename ) ; DBUG_RETURN ( - 1 ) ; } <S2SV_ModStart> 0 ) { if ( param -> new_file_pos > param -> max_file_pos ) { mi_check_print_error ( param, ""Can\'t <S2SV_blank> copy <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table: <S2SV_blank> \'%s\'"", param -> temp_filename ) ; DBUG_RETURN ( - 1 ) ; }",0
1293,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
1294,"<S2SV_ModStart> & UD_VECTOR ) { kvm_queue_exception_e ( vcpu, UD_VECTOR, error_code ) ; return 1 ; } if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( is_page_fault ( intr_info ) &&! ( error_code & PFERR_RSVD_MASK ) ) ) { kvm_queue_exception ( vcpu, UD_VECTOR, error_code ) ; return 1 ; }",0
1295,"<S2SV_ModStart> NGHTTP2_ERR_ACCESS_DENIED : return ""Access <S2SV_blank> denied"" ; case NGHTTP2_ERR_NO_CONTENT : return ""No <S2SV_blank> content <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_NO_CONTENT : return <S2SV_ModStart> ""No <S2SV_blank> content <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_NO_CONTENT_ID : return ""No <S2SV_blank> content <S2SV_blank> ID <S2SV_blank> available"" ; case NGHTTP2_ERR_NO_CONTENT_ID_AVAILABLE : return ""No <S2SV_blank> content <S2SV_blank> ID <S2SV_blank> available"" ; case NGHTTP2_ERR_NO_CONTENT : return ""No <S2SV_blank> content <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_NO_CONTENT_ID_AVAILABLE : return ""No <S2SV_blank> content <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_NO_CONTENT_ID_AVAILABLE : return ""No <S2SV_blank> content <S2SV_blank> ID <S2SV_blank> available"" ; case NGHTTP2_ERR_NO_CONTENT_ID_AVAILABLE : return ""No <S2SV_blank> content <S2SV_blank> ID <S2SV_blank> available"" ;",0
1296,"<S2SV_ModStart> UINT error ; if (! Stream_SafeSeek <S2SV_ModEnd> ( s,",0
1297,"<S2SV_ModStart> ; } } if ( pData -> socket == NULL ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> socket_new <S2SV_blank> failed"" ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; }",0
1298,<S2SV_ModStart> < 0 ) { ret = chg ; goto out_err ; } <S2SV_ModEnd> if ( hugepage_subpool_get_pages <S2SV_ModStart> chg ) ) { ret = <S2SV_ModEnd> - ENOSPC ; <S2SV_ModStart> - ENOSPC ; goto out_err ; } <S2SV_ModStart> chg ) ; goto out_err <S2SV_ModEnd> ; } if <S2SV_ModStart> return 0 ; out_err : resv_map_put ( vma ) ; return ret ;,1
1299,"<S2SV_ModStart> ) ; struct ipv6_txoptions * opt <S2SV_ModStart> struct flowi6 fl6 ; rcu_read_lock ( ) ; opt = rcu_dereference ( np -> opt ) ; <S2SV_ModStart> & fl6, opt <S2SV_ModEnd>, np -> <S2SV_ModStart> = 1 ; rcu_read_unlock ( ) ;",0
1300,"<S2SV_ModStart> s_id ) ; if ( path. dentry -> d_inode -> i_uid!= current_uid ( ) ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> of <S2SV_blank> device <S2SV_blank> (uid: <S2SV_blank> %d) <S2SV_blank> not <S2SV_blank> owned <S2SV_blank> by <S2SV_blank> "" ""requested <S2SV_blank> user <S2SV_blank> (uid: <S2SV_blank> %d)\\n"", path. dentry -> d_inode -> i_uid, current_uid ( ) ) ; goto out_free ; } if ( path. dentry -> d_inode -> i_uid!= current_uid ( ) ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> of <S2SV_blank> device <S2SV_blank> (uid: <S2SV_blank> %d) <S2SV_blank> not <S2SV_blank> owned <S2SV_blank> by <S2SV_blank> "" ""requested <S2SV_blank> user <S2SV_blank> (uid: <S2SV_blank> %d)\\n"", path. dentry -> d_inode -> i_uid, current_uid ( ) ) ; goto out_free ; }",0
1301,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1302,<S2SV_ModStart> 6 ) ) { MATLAB_KO : quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModStart> MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO : { MATLAB_KO :,0
1303,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> UINT32 failureCode ; if (! Stream_SafeSeek ( s, 4 ) ) { return ; } WLog_DBG ( TAG, ""RDP_NEG_FAILURE"" ) ; Stream_Read_UINT8 ( s, flags ) ; Stream_Read_UINT16 ( s, length ) ; Stream_Read_UINT32 ( s, failureCode ) ; switch ( failureCode ) { case SSL_REQUIRED_BY_SERVER : WLog_WARN ( TAG, ""Error: <S2SV_blank> SSL_REQUIRED_BY_SERVER"" ) ; nego -> sendNegoData = TRUE ; break ; case SSL_CERT_NOT_ON_SERVER : WLog_ERR ( TAG, ""Error: <S2SV_blank> SSL_CERT_NOT_ON_SERVER"" ) ; nego -> sendNegoData = TRUE ; break ; case INCONSISTENT_FLAGS : WLog_ERR ( TAG, ""Error: <S2SV_blank> INCONSISTENT_FLAGS"" ) ; break ; case HYBRID_REQUIRED_BY_SERVER : WLog_WARN ( TAG, ""Error: <S2SV_blank> HYBRID",0
1304,"<S2SV_ModStart> ret, last_pwd, n_new_keys <S2SV_ModStart> keyblocks ) { n_new_keys = count_new_keys ( kdb -> n_key_data, kdb -> key_data ) ; <S2SV_ModStart> keyblocks ) { * n_keys = n_new_keys ; }",0
1305,"<S2SV_ModStart> int len, <S2SV_ModEnd> result = RLC_OK <S2SV_ModStart> ; result = RLC_ERR <S2SV_ModEnd> ; RLC_TRY { <S2SV_ModStart> ; result = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; result = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; result = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; result = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; result = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; result = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart> 8 ) ; result = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; result = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; result = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; result = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; result = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; result = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; result = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; result = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; result = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; case RSA_DEC : m_len = k_len - 1 ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [",0
1306,<S2SV_ModStart> ++ ) { if ( sp > MAX_FUNCTION_ARGS ) { result = ERROR_INSUFFICIENT_MEMORY ; yr_free ( stack ) ; return ERROR_INSUFFICIENT_MEMORY ; } <S2SV_ModStart> ++ ) { if ( sp > MAX_FUNCTION_ARGS ) { result = ERROR_INSUFFICIENT_MEMORY ; yr_free ( stack ) ; return ERROR_INSUFFICIENT_MEMORY ; } <S2SV_ModStart> ++ ) { if ( sp > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_MEMORY ; push ( r1 ) ; } <S2SV_ModStart> ++ ; } if ( sp > MAX_FUNCTION_ARGS ) { result = ERROR_INSUFFICIENT_MEMORY ; },0
1307,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1308,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1309,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1310,<S2SV_ModStart> void fix_interp_filter ( VP9_COMMON * cm ) { <S2SV_ModEnd> if ( cm <S2SV_ModStart> cm -> counts. <S2SV_ModEnd> switchable_interp [ j <S2SV_ModStart> i ] += cm -> counts. <S2SV_ModEnd> switchable_interp [ j,0
1311,"<S2SV_ModStart> { token ++ ; } if ( operand >= MAX_OPERANDS ) { eprintf ( ""Too <S2SV_blank> many <S2SV_blank> operands\\n"" ) ; return false",1
1312,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> mi_cols ) ; <S2SV_ModEnd> x -> act_zbin_adj <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( x -> <S2SV_ModStart> ; vp9_setup_src_planes ( x, cpi -> Source, 0, 0 ) ; vpx_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_dst_planes ( xd, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; x -> e_mbd. mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols",0
1313,"<S2SV_ModStart> name ) { size_t alloc_size = 0 ; <S2SV_ModStart> 16 ) ; if ( MUL_OVERFLOW ( sizeof ( dst_name ), sizeof ( dst_name ), & alloc_size ) ) { ERR ( ""Memory <S2SV_blank> allocation <S2SV_blank> failed: <S2SV_blank> %d <S2SV_blank> bytes <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", dst_name, sizeof ( dst_name ) ) ; free ( dst_name ) ; return ; }",0
1314,"<S2SV_ModStart> = htc_request_check_host_hdr ( sp <S2SV_ModEnd> ) ; if <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; <S2SV_ModStart> ) ; } else { WSPR ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; }",0
1315,"<S2SV_ModStart> 0x07 # define MagickSizeType 0x08 <S2SV_ModEnd> ""ImproperImageHeader"" ) { <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, image -> filename, ""%s"", image -> filename ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd> image -> columns <S2SV_ModStart> ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) ReadBlobByte ( image ) ; pixel_info = ( MemoryInfo * ) RelinquishPixelInfo ( pixel_info ) ; if ( pixel_info!= ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishPixelInfo ( pixel_info ) ; if ( pixel_info!= ( MemoryInfo * )",0
1316,<S2SV_ModStart> ctl_files_rwlock ) ; mutex_init ( & card -> user_ctl_lock ) ;,1
1317,"<S2SV_ModStart> ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } ( * psig ) = s + <S2SV_ModEnd> padlen + 3 <S2SV_ModStart> + 3 ; sig_len -= padlen + 3 ;",0
1318,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( tETH_HDR ) ),0
1319,<S2SV_ModStart> ; ps_dec -> u2_cur_slice_num = - 1 ; ps_dec -> <S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> u2_cur_slice_num_ext = - <S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> u2_cur_slice_num_ext_cnt = - <S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> u2_cur_slice_num_ext_cnt = - <S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> u2_cur_slice_num_ext_cnt = - <S2SV_ModStart> ; if ( ps_dec -> u2_cur_slice_num_ext_cnt > ps_dec -> u2_cur_slice_num_ext_cnt ) { ps_dec -> <S2SV_ModEnd> u2_cur_slice_num_ext_cnt = - <S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> u2_cur_slice_num_ext_cnt = - <S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> u2_cur_slice_num_ext_cnt = - <S2SV_ModStart> ; if ( ps_dec -> u2_cur_slice_num_ext_cnt > ps_dec -> u2_cur_slice_num_ext_cnt ) { ps_dec -> <S2SV_ModEnd> u2_cur_slice,0
1320,<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },1
1321,"<S2SV_ModStart> ) ; struct ipv6_txoptions * opt <S2SV_ModStart> struct flowi6 fl6 ; rcu_read_lock ( ) ; opt = rcu_dereference ( np -> opt ) ; <S2SV_ModStart> & fl6, opt <S2SV_ModEnd>, np -> <S2SV_ModStart> = 1 ; rcu_read_unlock ( ) ;",0
1322,"<S2SV_ModStart> ; if ( args -> buffers_ptr == NULL ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } if ( args -> buffer_count > I915_MAX_EXEC_BUFFERS ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } if ( args -> buffer_count > I915_MAX_EXEC_BUFFERS ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; }",0
1323,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; struct pci_dev <S2SV_ModStart> ; return PTR_ERR ( karg ) <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; kfree ( karg ) ;",0
1324,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
1325,"<S2SV_ModStart> char * path, const char * rootfs <S2SV_ModStart> mntdata, optional, rootfs",1
1326,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1327,"<S2SV_ModStart> ab ) { <S2SV_ModEnd> size_t i, <S2SV_ModStart> i, len <S2SV_ModEnd> ; const char <S2SV_ModStart> * p ; <S2SV_ModEnd> char * buf <S2SV_ModStart> -> arg_start ; if (! audit_log_format ( * ab, ""argc=%d"", context -> execve. argc ) ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } <S2SV_ModStart> argc ) ; if (! audit_log_format ( * ab, ""argc=%d"", context -> execve. argc ) ; buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf <S2SV_ModEnd> ) ; if",0
1328,"<S2SV_ModStart> | O_NOCTTY, ( mode == 0 || mode == MODE_INVALID )? 0644 : mode <S2SV_ModEnd> ) ; if",1
1329,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; if <S2SV_ModStart> FALSE ; } return parse_netscreen_packet ( wth -> random_fh, phdr, buf <S2SV_ModEnd>, line, <S2SV_ModStart>, line, <S2SV_ModEnd> err, err_info <S2SV_ModStart> err_info ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1330,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ; u64 irq_time ; if ( rq -> skip_clock_update ) return <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1331,"<S2SV_ModStart> 255U ; } if ( j!= ( ssize_t ) length ) { ALOGE ( ""b/26366256"" ) ; return ( - 1 ) ; } if ( j!= ( ssize_t ) length ) { ALOGE ( ""b/26366256"" ) ; return ( - 1 ) ; } if ( j!= ( ssize_t ) length ) { ALOGE ( ""b/26366256"" ) ; return ( - 1 ) ; } if ( j!= ( ssize_t ) length ) { ALOGE ( ""b/26366256"" ) ; return ( - 1 ) ; } if ( j!= ( ssize_t ) length ) { ALOGE ( ""b/26366256"" ) ; return ( - 1 ) ; } if ( j!= ( ssize_t ) length ) { ALOGE ( ""b/26366256"" ) ; return ( - 1 ) ; }",0
1332,"<S2SV_ModStart> } else { printk ( KERN_ERR ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; } <S2SV_ModStart> } else { printk ( KERN_ERR ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; } <S2SV_ModStart> } else { printk ( KERN_ERR ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; } <S2SV_ModStart> } else { printk ( KERN_ERR ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; }",0
1333,<S2SV_ModStart> { struct blkif_response * <S2SV_ModStart> int notify ; <S2SV_ModEnd> spin_lock_irqsave ( & <S2SV_ModStart> case BLKIF_PROTOCOL_NATIVE : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> native. rsp_prod_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_X86_32 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> x86_32. rsp_prod_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_X86_64 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart>. rsp_prod_pvt ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> ) ; } resp -> id = id ; resp -> operation = op ; resp -> status = st ;,1
1334,<S2SV_ModStart> ; if ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX <S2SV_ModEnd> ) return ;,0
1335,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( datao, buf_size, 12 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 2 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 2 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 2 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 2 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 2 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 2 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 2 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 2 <S2SV_ModEnd> ) ) { <S2SV_ModStart> size_t s ; exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank>",0
1336,"<S2SV_ModStart> ( outname, ""/ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1337,"<S2SV_ModStart> ext_dp -> icmp_length && ND_TTEST2 ( ext_dp -> icmp_ext_version_res, plen - ICMP_EXTD_MINLEN ) <S2SV_ModStart> - ICMP_EXTD_MINLEN ; if ( ND_TTEST2 ( ext_dp -> icmp_ext_version_res, plen - ICMP_EXTD_MINLEN ) ) { <S2SV_ModStart> - ICMP_EXTD_MINLEN ; }",0
1338,<S2SV_ModStart> dentry * dir <S2SV_ModEnd> ; int dir_has_key <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ),1
1339,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ; CRYPTO_THREAD_write_lock ( stunnel_locks [ LOCK_SECTIONS ] ) ; opt = service_options. next ; service_options. next = NULL ; service_free ( & service_options ) ; for ( ; opt ; opt = opt -> next ) { unsigned i ; SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; service_free ( opt ) ; } s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names ) { SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt ->",0
1340,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; <S2SV_ModEnd> } if (",1
1341,"<S2SV_ModStart> parent ) ; if ( i -> width > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> ****/ if ( i -> height > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> ****/ if ( i -> height > i -> parent -> height ) { # if! defined ( NGIFLIB_NO",0
1342,<S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ),1
1343,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
1344,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> break ; } if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",0
1345,<S2SV_ModStart> void ) { recovery_started = 1 ;,0
1346,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 ) ) ; enc624j600WriteReg ( interface, ENC624J600_EHT7 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT8 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT9 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT10 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT11 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT12 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT13 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600",0
1347,"<S2SV_ModStart> ReadBlob ( image, sizeof ( pdb_image. attributes ), ( unsigned char * ) pdb_image. attributes ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1348,"<S2SV_ModStart> ; if ( l > ( unsigned ) sizeof ( rbuf ) ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> request <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", req -> socket, ( unsigned ) sizeof ( rbuf ) ) ; n = read ( req -> socket, rbuf, sizeof ( rbuf ) ) ; if ( n < ( unsigned ) sizeof ( rbuf ) ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", req -> socket, ( unsigned ) sizeof ( rbuf ) ) ; n = read ( req -> socket, rbuf, sizeof ( rbuf ) ) ; if ( n < 0 ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> request <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", req -> socket, ( unsigned ) sizeof ( rbuf ) ) ; goto error ; }",0
1349,"<S2SV_ModStart> { WORD32 i ; WORD32 st_rps_idx <S2SV_ModEnd> ; WORD32 num_neg_pics <S2SV_ModStart> ; WORD16 * pi1_used ; WORD16 * pi2_delta_poc ; UWORD32 u4_max_poc_lsb ; dpb_mgr_t * ps_dpb_mgr ; memset ( ps_dpb_mgr, 0, sizeof ( dpb_mgr_t ) ) ; ps_mv_buf_mgr = ( mv_buf_t * ) ps_codec -> pv_mv_buf_mgr ; for ( r_idx = 0 ; r_idx < MAX_DPB_SIZE ; r_idx ++ ) { if ( ai4_poc_st_curr_before [ r_idx ]. ai4_st_curr_before [ r_idx ]. ai4_st_curr_after [ r_idx ]. ai4_st_curr_before [ r_idx ]. ai4_st_curr_after [ r_idx ]. ai4_st_curr_before [ r_idx ]. ai4_st_curr_after [ r_idx ]. ai4",0
1350,"<S2SV_ModStart> ; ret = get_user ( child -> thread. tp_value, datap ) ; break ; case PTRACE_GET_THREAD_AREA : ret = get_user ( child -> thread. tp_area, datap ) ; break ; case PTRACE_SET_THREAD_AREA : ret = set_user ( child -> thread. tp_value, <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1351,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ;",1
1352,"<S2SV_ModStart>, int fmt, printbuffer * p <S2SV_ModStart> = 0 ; if (! p ) return 0 ; for ( i = 0 ; i < numentries ; ++ i, child = child -> next ) { ++ numentries ; child = child -> next ; } if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; memset ( entries, 0, sizeof ( char * ) * numentries ) ) ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) )",0
1353,"<S2SV_ModStart> struct ikev2_id id ; size_t id_len, idtype_len <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> * typedata ; ND_TCHECK2 ( * ext, sizeof ( id ) ) <S2SV_ModStart> ( * ext, sizeof ( id ) ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), i ) ; if ( i < idtype_len ) goto trunc ; idtype_len = ntohs ( id. h. len ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> len=%d"", idtype_len - 2 ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; }",0
1354,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
1355,<S2SV_ModStart> sk ) ; mutex_lock ( & peer_wake_lock ) ; <S2SV_ModStart> other ) { mutex_unlock ( & peer_wake_lock ) ; <S2SV_ModStart> = 0 ; } <S2SV_ModStart> other ) { mutex_unlock ( & peer_wake_lock ) ; <S2SV_ModStart> = 0 ; } <S2SV_ModStart> other ) { mutex_unlock ( & peer_wake_lock ) ;,0
1356,<S2SV_ModStart> 4 ] ; unsigned int <S2SV_ModEnd> value ; if <S2SV_ModStart> value = ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 <S2SV_ModEnd> ; value |= <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart>. unsigned_value = <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ; return (,1
1357,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
1358,<S2SV_ModStart> entry ) ; <S2SV_ModEnd> skb_pull_rcsum ( skb_out,0
1359,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; task_lock ( task <S2SV_ModEnd> ) ; ioc <S2SV_ModStart> ; ioc = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context ; task <S2SV_ModEnd> -> io_context = <S2SV_ModStart> ; task_unlock ( task <S2SV_ModEnd> ) ; if,1
1360,<S2SV_ModStart> = 0 ; unsigned long cp0 ; <S2SV_ModStart> = 0 ; cp0 = ( ( xtregs_coprocessor_t ) regs -> cp0 ) & cpu_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1361,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> * minor_status = <S2SV_ModStart> GSS_S_DEFECTIVE_TOKEN ; } if ( header -> buffer. length < token_wrapper_len + 13 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( <S2SV_ModStart> buffer. length < token_wrapper_len || <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1362,"<S2SV_ModStart> ) { int ret = pci_read_config_word <S2SV_ModEnd> ( dev, <S2SV_ModStart> offset, value ) ; const struct pci_cmd_info * cmd = data ; * value &= PCI_COMMAND_GUEST ; <S2SV_ModEnd> * value |= <S2SV_ModStart> * value |= cmd -> val & ~ PCI_COMMAND_GUEST ; <S2SV_ModEnd> return ret ;",1
1363,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_ref_frame_t * const frame <S2SV_ModEnd> = va_arg ( <S2SV_ModStart> * ) ; YV12_BUFFER_CONFIG * const fb = va_arg ( args, YV12_BUFFER_CONFIG * ) ; <S2SV_ModStart> NULL ) { <S2SV_ModEnd> vp9_get_reference_enc ( ctx <S2SV_ModStart>, & fb, NULL ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; } else { return VPX_CODEC_INVALID_PARAM ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1364,<S2SV_ModStart> ] ) ; free_uid ( fpl -> user ) ;,1
1365,<S2SV_ModStart> plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ),0
1366,"<S2SV_ModStart> -> dwc ; dwc3_gadget_del_and_unmap_request ( dep, req, status <S2SV_ModEnd> ) ; spin_unlock <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1367,"<S2SV_ModStart> : # line 1337 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 1337 <S2SV_ModEnd> ""grammar.y"" { int <S2SV_ModStart> } # line 1337 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 1337 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 1337 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 1337 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 1337 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 1337 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 1337 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 1337 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 1337 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 1337 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 1337 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 1337 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 1337 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 1337 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 1337 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 1337 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> :",0
1368,"<S2SV_ModStart> sas_revalidate_domain, [ <S2SV_ModEnd> DISCE_SUSPEND ] = <S2SV_ModStart> ] = sas_resume_devices <S2SV_ModEnd>, } ;",1
1369,"<S2SV_ModStart>, int rep_quick, my_bool verbose <S2SV_ModStart> ) ) { if ( param -> testflag & T_REP ) { printf ( ""- <S2SV_blank> repairing <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; } else { printf ( ""- <S2SV_blank> repairing <S2SV_blank> (without <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; } <S2SV_ModStart>! rep_quick && init_io_cache ( & info -> read_cache, info -> dfile, ( uint ) param -> read_buffer_length, READ_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) ) { printf ( ""- <S2SV_blank> repairing <S2SV_blank> (without <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; } else { printf ( ""- <S2SV_blank> repairing <S2SV_blank> (without <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ;",0
1370,"<S2SV_ModStart> s } ; if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if ( uECC_vli_cmp ( curve -> n, k, num_n_words )!= 1 ) { return 0 ; } carry = regularize_k ( k, tmp, s, curve ) ; if ( uECC_vli_cmp ( curve -> G, k2 [! carry ], 0, num_n_bits + 1, curve )!= 1 ) { return 0 ; } EccPoint_mult ( p, curve -> G, k2 [! carry ], 0, num_n_bits + 1, curve ) ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! uECC_vli_isZero ( p, num_",0
1371,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1372,<S2SV_ModStart> sk -> sk_family <S2SV_ModEnd> ; struct sk_buff <S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( flags <S2SV_ModStart> AF_INET ) { struct sockaddr_in * <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ; <S2SV_ModStart> struct sockaddr_in6 * sin6 = ( struct sockaddr_in6 * ) <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin6,0
1373,"<S2SV_ModStart> -= lblk ; mutex_lock ( & inode -> i_mutex ) ; if (! ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) ) { ret = - EOPNOTSUPP ; goto out_mutex ; } if (! <S2SV_ModEnd> ( mode & <S2SV_ModStart> & FALLOC_FL_KEEP_SIZE ) <S2SV_ModEnd> ) flags |= <S2SV_ModStart> |= EXT4_GET_BLOCKS_KEEP_SIZE ; out_mutex : mutex_unlock ( & inode -> i_mutex ) ;",0
1374,<S2SV_ModStart> ; } else { size_t new_free_total = pool -> free_total * 2 + sizeof ( nw_buf * ) ; if ( pool -> free_total < new_free_total ) <S2SV_ModStart> ) ; } pool -> free_total = new_free_total ;,0
1375,<S2SV_ModStart> return map ; map =,1
1376,"<S2SV_ModStart> tp ; { <S2SV_ModEnd> int cval = <S2SV_ModStart> ] ) { <S2SV_ModEnd> const char hex <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> * dp ; <S2SV_ModEnd> if ( * <S2SV_ModStart> == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10 ) + ( * cp - '0' ) ; } else if ( * cp == '^' && cp [ 1 ] ) { switch ( * cp [",0
1377,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1378,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_left < 4,1
1379,"<S2SV_ModStart> * lined ; l_uint8 <S2SV_ModEnd> * pixc, <S2SV_ModStart> * pixc, * pixm, * pixg, * pixd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if ( ( pixc = pixFewColorsOctcubeQuant0 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; if ( <S2SV_ModStart> NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; cmap = pixGetColormap ( pixc ) ; ncolors = pixcmapGetCount ( cmap ) ; cmapd = pixcmapCreate ( 8 ) ; if (! lut ) { lut = ( l_int32 * ) LEPT_CALLOC ( 256, sizeof ( l_int32 ) ) ; for ( j = 0 ; j < ncolors ; j ++ ) lut [ j ] = - 1 ; for ( j = 0 ; j < ncolors ; j ++ ) lut [ j ] = - 1 ; for ( j = 0 ; j < ncolors ; j ++ ) lut [ j ] = -",0
1380,"<S2SV_ModStart> { int i, <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( u ) ; int <S2SV_ModEnd> vbits = BN_num_bits <S2SV_ModStart> ( v ) ; int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( u ) ; int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( v ) ; int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( u ) ; int <S2SV_ModEnd> vbits = BN_num_bits <S2SV_ModStart> ( v ) ; if ( ubits!= vbits ) goto err ; for ( i = 0 ; i < ubits ; i ++ ) { BIGNUM * tmp ; tmp = u ; u = v ; v = tmp ; } if ( BN_abs_is_word ( tmp ) ) break ; if ( BN_num_bits ( tmp ) < BN_num_bits ( tmp ) ) break ; if ( BN_num_bits ( tmp ) < BN_num_bits ( tmp ) ) break ; if ( BN_num_bits ( tmp ) < BN_num_bits ( tmp ) ) break ; if ( BN_num_bits ( tmp ) < BN_num_bits ( tmp ) )",0
1381,"<S2SV_ModStart> = 256 ; # if CONFIG_VP8_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { v_fn_ptr. vf = vp8_highbd_mse16x16 ; } else { v_fn_ptr. vf = vp8_mse16x16 ; } xd -> pre. y_buffer = recon_buffer -> y_buffer + recon_yoffset ; tmp_mv. as_int = 0 ; ref_mv_full. as_mv. row = ref_mv -> as_mv. row >> 3 ; ref_mv_full. as_mv. row = ref_mv -> as_mv. row >> 3 ; tmp_err = cpi -> diamond_search_sad ( x, b, d, & ref_mv_full, step_param, x -> sadperbit16, & num00, & v_fn_ptr, ref_mv, INT_MAX - new_mv_mode_penalty ) ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) new_mv_mode_penalty =",0
1382,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1383,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1384,"<S2SV_ModStart>, nbits ; if ( msg -> readcount > msg -> cursize ) { return 0 ; } <S2SV_ModStart> oob ) { if ( msg -> readcount + ( bits >> 3 ) > msg -> cursize ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; } <S2SV_ModStart> & 7 ; if ( msg -> bit + nbits > msg -> cursize << 3 ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; } <S2SV_ModStart> msg -> bit, msg -> cursize << 3 <S2SV_ModStart> ) ) ; if ( msg -> bit > msg -> cursize << 3 ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; }",1
1385,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
1386,<S2SV_ModStart> ; out1 : cancel_work_sync ( & dev -> kevent ) ; del_timer_sync ( & dev -> delay ) ;,1
1387,"<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> overhead = 16 <S2SV_ModStart> + 4 + ( count + 1 ) * sizeof ( bson ) ; if ( mongo_validate_ns ( conn, ns )!= MONGO_OK ) return MONGO_ERROR ; for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } <S2SV_ModEnd> for ( i",0
1388,"<S2SV_ModStart> ) ) { struct problem_problem * problem = get_problem_item_from_path ( tree_view, tree_path_UNUSED ) ; if ( problem ) { strncpy <S2SV_ModEnd> ( arg, <S2SV_ModStart> g_dump_dir_name, sizeof ( arg ) - 1 ) ; strncpy <S2SV_ModEnd> ( arg, <S2SV_ModStart> g_dump_dir_name, sizeof ( arg ) - 1 ) ; } else { strncpy <S2SV_ModEnd> ( arg, <S2SV_ModStart> g_dump_dir_name, sizeof ( arg ) - 1 ) ; strncpy <S2SV_ModEnd> ( arg, <S2SV_ModStart> g_dump_dir_name, sizeof ( arg ) - 1 ) ; } } else { strncpy <S2SV_ModEnd> ( arg, <S2SV_ModStart> g_dump_dir_name, sizeof ( arg ) - 1 ) ; strncpy <S2SV_ModEnd> ( arg, <S2SV_ModStart> ) ) ; strncpy <S2SV_ModEnd> ( arg, <S2SV_ModStart> g_dump_dir_name, sizeof ( arg ) - 1 ) ; strncpy <S2SV_ModEnd> ( arg, <S2SV_ModStart> g_dump_dir_name, sizeof ( arg ) - 1 ) ; strncpy <S2SV_ModEnd> ( arg, <S2SV_ModStart> g_dump_dir_name ) ;",0
1389,<S2SV_ModStart> - 2 ; if ( plen > S_HELLO_LEN ) return 1 ;,0
1390,"<S2SV_ModStart> acl ) { struct iattr iattr ; retval = posix_acl_update_mode ( inode, & iattr. ia_mode, & acl ) ; if ( retval <S2SV_ModEnd> ) goto err_out <S2SV_ModStart> goto err_out ; if (! acl ) { value = NULL ; size = 0 ; } <S2SV_ModEnd> iattr. ia_valid <S2SV_ModStart> iattr ) ; <S2SV_ModEnd> } break ;",1
1391,"<S2SV_ModStart> header. type_codes ) { eprintf ( ""Invalid <S2SV_blank> type <S2SV_blank> codes\\n"" ) ; return false ; } if ( <S2SV_ModStart> header. type_codes ) { eprintf ( ""Invalid <S2SV_blank> type <S2SV_blank> codes\\n"" ) ; return false ; } if ( bin -> methods_list ) { r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> methods_list ) ; return false ; } if ( bin -> imports_list ) { r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> imports_list ) ; return false ; } if ( bin -> classes_list ) { r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; return false ; } if ( bin -> classes_list ) { r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; return false ; }",0
1392,<S2SV_ModStart> : case NPPVformValue : case NPPVpluginNativeAccessibleAtkPlugId <S2SV_ModStart> case NPPVpluginKeepLibraryInMemory : case NPPVpluginNativeAccessibleAtkPlugId <S2SV_ModStart> = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginNativeAccessibleAtkPlugId : type = RPC_TYPE_BOOLEAN ; break ; case NPPVSupportsAdvancedKeyHandling : case NPPVSupportsAdvancedKeyHandling :,0
1393,"<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; CURLcode <S2SV_ModEnd> res ; if <S2SV_ModStart> = Curl_convert_from_network ( handle <S2SV_ModEnd>, & in <S2SV_ModStart> 1 ) ; * olen = strindex ; return ns ; } alloc = ( length? strlen ( string ) : ( int ) strlen ( string ) ) + 1 ; char * ns = malloc ( alloc ) ; if (! ns ) return NULL ; while ( alloc > 0 ) { unsigned char in ; if ( ( '%' == in ) && ( ISXDIGIT ( string [ 1 ] ) && ISXDIGIT ( string [ 2 ] ) ) { in = Curlx_ultouc ( hex ) ; res = Curl_convert_from_network ( handle, & in, 1 ) ; if (! res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = in ; string ++ ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1394,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_response ( rdpNego <S2SV_ModStart> state = NEGO_STATE_FAIL <S2SV_ModEnd> ; return ; <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;,0
1395,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factors = get_rate_correction_factors ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs <S2SV_ModStart> int bits_per_mb_at_this_q = vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factors ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( target_bits_per_mb - bits_per_mb_at_this_q <= last_error ) ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } else { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; } }",0
1396,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
1397,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1398,"<S2SV_ModStart> ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> wb-prep: <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ( - 1 ) ; } <S2SV_ModEnd> n = EXTRACT_32BITS <S2SV_ModStart> - 1 ) ; ND_TTEST ( * ps ) ; for ( ie = io + ps -> nid ; ie < ie && ND_TTEST ( * io ) ; ++ io ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ; ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) ie ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; c = ',' ; }",0
1399,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> data ) ;",1
1400,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
1401,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1402,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> TX_SIZE tx_size, int up_available, int left_available, int right_available, int plane, uint8_t * left_col, uint8_t * above_row, const int bs ) { DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> uint8_t, left_col <S2SV_ModEnd>, 64 ) <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col,",0
1403,"<S2SV_ModStart> ++ ; } else { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; }",0
1404,"<S2SV_ModStart> ftoa_bounded_extra ( JsVarFloat <S2SV_ModEnd> val, char <S2SV_ModStart> ( isnan ( val ) && len > 0 ) strncat ( str, ""NaN"", len ) ; else strncat ( str, ""Infinity"", len <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ) { if ( val < 0 ) strncat ( str, ""-Infinity"", len ) ; else strncat ( str, ""Infinity"", len ) ; } else { if ( val > stopAtError ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) {",0
1405,"<S2SV_ModStart> * jas_iccprof_createfrombuf ( jas_uchar <S2SV_ModEnd> * buf,",1
1406,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
1407,"<S2SV_ModStart> (! thresholds ) ; usage = mem_cgroup_usage ( memcg, type == _MEMSWAP ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; <S2SV_ModStart> synchronize_rcu ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1408,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> ; return handle <S2SV_ModEnd> ; } <S2SV_null>",1
1409,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> VP9_FRAME_MARKER, 2 ) ; write_profile ( cm -> profile, wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit ( wb, cm -> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit ( wb, cm -> error_resilient_mode ) ; if ( cm -> frame_type == KEY_FRAME ) { const COLOR_SPACE cs = UNKNOWN ; write_sync_code ( wb ) ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vpx_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } if ( cm -> profile > PROFILE_1 ) { assert ( cm -> profile >= PROFILE_1 ) ; vpx_wb_write_bit ( wb,",0
1410,"<S2SV_ModStart> 'u' }, { ""min-width"", required_argument, 0, 'u' }, <S2SV_ModStart> 'l' }, { ""max-width"", required_argument, 0, 'l' }, <S2SV_ModStart> 'u' }, { ""min-height"", required_argument, 0, 'u' }, <S2SV_ModStart> 'u' }, { ""max-width"", required_argument, 0, 'u' },",0
1411,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
1412,"<S2SV_ModStart> ; if ( asdl_typename ( CHILD ( n, i ) ) == TYPE_COMMENT ) arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case",0
1413,<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,0
1414,"<S2SV_ModStart> uint16_t n ; uint32_t status <S2SV_ModEnd> ; Enc624j600Context * <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> nextPacket ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & status, sizeof ( uint32_t ) ) ; status = letoh32 ( status ) ; if ( ( status & RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, ENC624J600_RX_BUFFER_START ) <S2SV_ModStart> ( interface,",0
1415,<S2SV_ModStart> ] == 0x01 && i < gemsafe_cert_max,1
1416,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1417,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass ) { VALUE content ; VALUE parse_options ; xmlSchemaPtr schema ; xmlSchemaParserCtxtPtr ctx ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ( void * ) errors, Nokogiri_error_array_pusher ( ( void * ) errors, Nokogiri_error_array_poper ) ; # endif xmlSchemaNewMemParserCtxt ( ( const char * ) StringValuePtr ( content ), ( int ) RSTRING_LEN ( content ) ) ; ctx = xmlSchemaNewMemParserCtxt ( rb_ary_new ( ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # endif schema = xmlSchemaParse ( ctx, parse_options ) ; if ( NULL == schema ) { rb_raise ( rb_eRuntimeError, ""Could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> document"" ) ; return Qnil ; } <S2SV_ModEnd> rb_iv_set ( rb_schema <S2SV_ModStart>",0
1418,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> info -> par <S2SV_ModEnd> ; vma -> <S2SV_ModStart> _CACHE_MASK ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> ( vma, fbdev -> fb_phys, fbdev -> fb_len <S2SV_ModEnd> ) ; }",1
1419,"<S2SV_ModStart> { char * tmp_str = strdup ( tmp_str ) ; if ( tmp_str == NULL ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( tmp_str ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> { char * tmp_str = strdup ( tmp_str ) ; if ( strlen ( tmp_str ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( tmp_str ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( tmp_str ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; }",0
1420,"<S2SV_ModStart> 2 ] ; memcpy ( out, ptr + 4, 4 ) ; <S2SV_ModStart> 2 ] ; memcpy ( out, ptr + 5, 4 ) ;",0
1421,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1422,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1423,"<S2SV_ModStart> fanout_mutex ) ; if (! list_empty ( & fanout_list ) ) goto out ; err = - EINVAL ; if ( type == PACKET_FANOUT_HASH || type == PACKET_FANOUT_LB || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_QM || type == PACKET_FANOUT_CBPF || type == PACKET_FANOUT_EBPF ) goto out ; if ( type == PACKET_FANOUT_HASH || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_QM ) { err = - EINVAL ; goto out ; } rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) goto out ; atomic_long_set ( & rollover -> num, 0 ) ; atomic_long_set ( & rollover -> num_failed, 0 ) ; po -> rollover = rollover ; }",0
1424,<S2SV_ModStart> ( handle -> <S2SV_ModEnd> nmi ) { <S2SV_ModStart> pending ) ; perf_event_wakeup ( handle -> event ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1425,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int utf8s_to_utf16s ( const u8 * s, u16 len, wchar_t <S2SV_ModEnd> * pwcs ) <S2SV_ModStart> - EINVAL ; op = pwcs ; <S2SV_ModStart> PLANE_SIZE ) { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } <S2SV_ModStart> } else { * op ++ = ( wchar_t ) u ; } s += size ; len -= size ; } if ( len > 0 ) { if ( * s & 0x80 ) { size = utf8_to_utf32 ( s, len, & u ) ; if ( u < PLANE_SIZE ) { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SUR",0
1426,"<S2SV_ModStart>, i ; if (! ( s -> state & PNG_IHDR ) ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> before <S2SV_blank> IHDR\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> state & PNG_IDAT ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> after <S2SV_blank> IDAT\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> state & PNG_IDAT ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> after <S2SV_blank> IDAT\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> state & PNG_IDAT ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> after <S2SV_blank> IDAT\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
1427,"<S2SV_ModStart> EPROTONOSUPPORT ) { <S2SV_ModEnd> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ;",0
1428,<S2SV_ModStart> } dt -> proto = IP_GET_IPPROTO ( p ) ; dt ->,1
1429,<S2SV_ModStart> -> nicContext ; if ( ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXMR | KSZ8851_RXFTL | KSZ8851_RXRF | KSZ8851_RXCE <S2SV_ModEnd> ) ) ==,0
1430,"<S2SV_ModStart> const node * n2, const asdl_seq * decorator_seq, bool <S2SV_ModEnd> is_async ) { <S2SV_ModStart> is_async ) { identifier name ; arguments_ty args ; expr_ty returns = NULL ; int name_i = 1 ; node * tc ; string type_comment = NULL ; if ( TYPE ( CHILD ( n, name_i + 1 ) ) == TYPE_COMMENT ) type_comment = NULL ; if ( NCH ( n, name_i + 2 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 2 ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3 ) ) ; if (! type_comment ) return NULL ; if (! type_comment ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 4 ) ) == TYPE_COMMENT ) type",0
1431,"<S2SV_ModStart> int i ; flush_tlb_mm ( mm ) ; for ( i = 0 ; i < 32 ; i ++, pgd ++ ) if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pmd = pmd_offset ( pmd, 0xA0000 ) ; split_huge_page_pmd ( mm, pmd ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ; pte = pte_offset_map_lock ( mm, 0xA0000, & ptl ) ; if ( pte_present ( * pte ) ) set_pte ( pte, pte_wrprotect ( * pte ) ; out : <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1432,"<S2SV_ModStart> ( AUDIT_APPARMOR_DENIED, __aa_current_profile ( ), GFP_KERNEL, & sa, NULL <S2SV_ModEnd> ) ; }",1
1433,"<S2SV_ModStart> uint_fast8_t tmp ; siz -> comps = 0 ; <S2SV_ModStart> ) ) { goto error ; } if ( siz -> xoff >= siz -> width || siz -> yoff >= siz -> height ) { jas_eprintf ( ""xoff <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; goto error ; } if ( siz -> xoff + siz -> numcomps > siz -> width ) { jas_eprintf ( ""yoff <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; goto error ; } if ( siz -> yoff + siz -> numcomps > siz -> height ) { jas_eprintf ( ""yoff <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; goto error ; } if ( siz -> xoff + siz -> numcomps > siz -> width ) { jas_eprintf ( ""xoff <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; goto error ; } if ( siz -> yoff + siz -> numcomps > siz -> height ) { jas_eprintf ( ""yoff <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank>",0
1434,"<S2SV_ModStart> ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_protocol_malloc_copy ( handle, * packet_pptr, dst_coap_msg_ptr -> token_ptr, dst_coap_msg_ptr -> token_len ) < 0 ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> token!"" ) ; return - 1 ; } sn_coap_protocol_malloc_copy ( handle, * packet_pptr, dst_coap_msg_ptr -> token_ptr, dst_coap_msg_ptr -> token_len ) ; if ( sn_coap_protocol_malloc_copy ( handle, * packet_pptr, dst_coap_msg_ptr -> token_len ) < 0 ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> token!"" ) ; return - 1 ; }",0
1435,"<S2SV_ModStart> += 4 ; if ( xmi_size < 4 || <S2SV_ModStart> -= 4 ; if ( xmi_data [ xmi_catlen ]!= '\\0' ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, ""Invalid <S2SV_blank> XMI <S2SV_blank> data"" ) ; return NULL ; } <S2SV_ModStart> += 4 ; if ( xmi_data [ xmi_catlen ]!= '\\0' ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, ""Invalid <S2SV_blank> XMI <S2SV_blank> data"" ) ; return NULL ; } <S2SV_ModStart> += 4 ; if ( xmi_data [ xmi_catlen ]!= '\\0' ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, ""Invalid <S2SV_blank> XMI <S2SV_blank> data"" ) ; return NULL ; } <S2SV_ModStart> += 4 ; if ( xmi_data [ xmi_catlen ]!= '\\0' ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, ""Invalid",0
1436,"<S2SV_ModStart> size_t total_len ; struct iov_iter iter ; <S2SV_ModStart> ) return 0 ; iov_iter_init ( & iter, iov, nr_segs, total_len, 0 ) <S2SV_ModStart> -> ops ; <S2SV_ModEnd> size_t chars = <S2SV_ModStart> buf -> len ; size_t written <S2SV_ModStart> ; int error <S2SV_ModEnd> ; if ( <S2SV_ModStart> break ; } written = copy_page_to_iter ( buf -> page, buf -> offset, chars, & iter ) ; if ( unlikely ( written < chars ) ) { if (! ret ) ret = - EFAULT <S2SV_ModEnd> ; break ;",1
1437,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> IndexPacket index ; <S2SV_ModStart> ++ ) { next_pixel = MagickFalse ; displacement = 1 ; <S2SV_ModStart> -= MaxHashTable ; if ( k < 0 ) continue <S2SV_ModEnd> ; if (,1
1438,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1439,<S2SV_ModStart> { p_fm_config_conx_hdlt hdl = NULL <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } for <S2SV_ModStart> 0 ) { res = <S2SV_ModEnd> commandList [ i <S2SV_ModStart> ] ) ; goto cleanup <S2SV_ModEnd> ; } } <S2SV_ModStart> 0 ) { res = <S2SV_ModEnd> commandList [ i <S2SV_ModStart> ] ) ; cleanup : if ( hdl ) { if ( hdl -> mgr ) { if ( hdl -> mgr -> disconnect ( hdl -> mgr ) ) { if ( hdl -> mgr -> disconnect ( hdl -> mgr ) ) { if ( hdl -> mgr -> disconnect ( hdl -> mgr ) ) { if ( hdl -> mgr -> disconnect ( hdl -> mgr ) ) { if ( hdl -> mgr -> disconnect ( hdl -> mgr ) ) { if ( hdl -> mgr -> disconnect ( hdl -> mgr ) ) { if ( hdl -> mgr -> disconnect ( hdl -> mgr ) ) { if ( hdl -> mgr -> disconnect ( hdl -> mgr ) ) { if ( hdl -> mgr -> disconnect ( hdl -> mgr ) ) { if ( hdl -> mgr -> disconnect ( hdl -> mgr ) ) { if ( hdl -> mgr ->,0
1440,"<S2SV_ModStart> size_t max_mem ; size_t max_samples ; char optstr [ 32 ] ; <S2SV_ModStart> 0 ] ; max_samples = 64 * JAS_MEBI ; <S2SV_ModStart> break ; case OPT_MAXSAMPLES : max_samples = strtoull ( jas_optarg, 0, 10 ) ; break ; case <S2SV_ModStart> break ; case OPT_MAXFMT : max_samples = strtoull ( jas_optarg, 0, 10 ) ; break ; case <S2SV_ModStart> ) ; } if (! ( fmtname = jas_image_fopen ( fmtname, ""r"" ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> standard <S2SV_blank> input <S2SV_blank> file <S2SV_blank> %s\\n"", fmtname ) ; exit ( EXIT_FAILURE ) ; }",0
1441,"<S2SV_ModStart> ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> stack <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; return - 1 ; } if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
1442,<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator,0
1443,"<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { if ( ( j = pana_bits ( 8 ) ) ) { if ( ( j = raw [ row ] - 0x80 << ( 3 - pana_bits ( 2 ) ) ) { if ( ( j = raw [ row ] - 0x80 << ( 3 - pana_bits ( 2 ) ) ) < 0 || j == 8 ) ) { if ( ( j = raw [ row ] - 0x80 << ( 3 - pana_bits ( 2 ) ) ) < 0 || j == 8 ) ) { if ( ( j = raw [ row ] - 0x80 << ( 3 - pana_bits ( 2 ) ) ) < 0 || j == 8 ) { if ( ( j = raw [ row ] - 0x80 << ( 3 - pana_bits ( 2 ) )",0
1444,<S2SV_ModStart> ; if (! nl ) return - EINVAL ; if (,0
1445,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
1446,"<S2SV_ModStart> ; int idx <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; BUG_ON ( guest_irq >= irq_rt <S2SV_ModEnd> -> nr_rt_entries ) <S2SV_ModStart> nr_rt_entries ) ; if ( guest_irq >= irq_rt -> nr_rt_entries ) goto out ; hlist_for_each_entry ( e, & irq_rt -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! kvm_intr_is_single_vcpu ( kvm, & irq, & vcpu ) ) { ret = irq_set_vcpu_affinity ( kvm, host_irq, & vcpu ) ; if ( ret < 0 ) { printk ( KERN_INFO ""failed <S2SV_blank> to <S2SV_blank> back <S2SV_blank> to <S2SV_blank> remapped <S2SV_blank> mode, <S2SV_blank> irq: <S2SV_blank> %u\\n"", host_irq ) ; goto out ; } } } srcu_read_unlock ( & kvm -> irq_srcu",0
1447,<S2SV_ModStart> bfqq ) { hrtimer_try_to_cancel <S2SV_ModEnd> ( & bfqq <S2SV_ModStart> bfqq ) ; },0
1448,"<S2SV_ModStart> else { return false ; } case U64_MAX : return rold -> umin_value == 0 && rold -> umax_value == U64_MAX && rold -> smin_value == U64_MIN && rold -> smax_value == S64_MAX && tnum_is_unknown ( rold -> var_off ) ; case SCALAR_VALUE_OR_NULL : if ( rcur -> type == SCALAR_VALUE_OR_NULL ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) == 0 && range_within ( rold, rcur ) && tnum_in ( rold -> var_off, rcur -> var_off ) ; case SCALAR_VALUE_OR_NULL : if ( rcur -> type == SCALAR_VALUE_OR_NULL ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) == 0 && range_within ( rold, rcur ) && tnum_in ( rold -> var_off, rcur -> var",0
1449,"<S2SV_ModStart> sk ) ; memset ( sa, 0, sizeof ( sa ) ) ;",0
1450,<S2SV_ModStart> (! handle ||! SecIsValidHandle ( handle ),1
1451,<S2SV_ModStart> ; length += sizeof ( PRIMARY_DRAWING_ORDER_FIELD_BYTES ) <S2SV_ModEnd> ; length +=,0
1452,<S2SV_ModStart> old_type ) ) { if ( new_upperdir -> d_inode!= old_dentry -> d_inode ) { if ( new_upperdir -> d_inode!= newdentry -> d_inode ) { if ( new_upperdir -> d_inode!= old_dentry -> d_inode ) { if ( new_upperdir -> d_inode!= newdentry -> d_inode ) { if ( new_upperdir -> d_inode!= old_dentry -> d_inode ) { if ( new_upperdir -> d_inode!= old_dentry -> d_inode ) { if ( new_upperdir -> d_inode!= newdentry -> d_inode ) { if ( new_upperdir -> d_inode!= old_dentry -> d_inode ) { if ( new_upperdir -> d_inode!= newdentry -> d_inode ) { if ( new_upperdir -> d_inode!= old_dentry -> d_inode ) { if ( new_upperdir -> d_inode!= old_dentry -> d_inode,0
1453,"<S2SV_ModStart> OP_START ) ; if ( mem_start_stk [ i ] < 0 ) { fprintf ( stderr, ""invalid <S2SV_blank> stack <S2SV_blank> index: <S2SV_blank> %d\\n"", ( int ) mem_start_stk [ i ] ) ; return - 1 ; } <S2SV_ModStart> OP_END ) ; if ( mem_start_stk [ i ] < 0 ) { fprintf ( stderr, ""invalid <S2SV_blank> stack <S2SV_blank> index: <S2SV_blank> %d\\n"", ( int ) mem_start_stk [ i ] ) ; return - 1 ; } <S2SV_ModStart> OP_START ) ; if ( mem_start_stk [ i ] < 0 ) { fprintf ( stderr, ""invalid <S2SV_blank> stack <S2SV_blank> index: <S2SV_blank> %d\\n"", ( int ) mem_start_stk [ i ] ) ; return - 1 ; } <S2SV_ModStart> OP_START ) ; if ( mem_start_stk [ i ] < 0 ) { fprintf ( stderr, ""invalid <S2SV_blank> stack <S2SV_blank> index: <S2SV_blank> %d\\n"", ( int ) mem_start_stk [ i ] ) ; return - 1 ; }",0
1454,"<S2SV_ModStart> int plane ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vp9_foreach_transformed_block_in_plane_high ( xd, plane, visit, arg ) ; return ; } # endif vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vp9_foreach_transformed_block_in_plane_high ( xd, plane, visit, arg ) ; return ; } # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vp9_foreach_transformed_block_in_plane_high ( xd, plane, visit, arg ) ; return ; } # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vp9_foreach_transformed_block_high",0
1455,<S2SV_ModStart> = - EINVAL <S2SV_ModEnd> ; if (,1
1456,"<S2SV_ModStart> mntent, path, 0",0
1457,<S2SV_ModStart> = hash ; sr -> fd = fd ;,0
1458,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool construct_get_dest_keyring ( <S2SV_ModStart> authkey ; } if ( dest_keyring ) { key_get ( dest_keyring ) ; return true ; } else { switch ( cred -> jit_keyring ) { case KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : if ( cred -> request_key_auth ) dest_keyring = key_get ( cred -> request_key_auth ) ; if ( dest_keyring ) return true ; break ; } case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) return true ; break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( cred -> process_keyring ) ; break ; case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : dest_keyring = key_get ( cred -> user_session_keyring ) ; break ; case KEY_REQ,0
1459,"<S2SV_ModStart> void nonrd_pick_sb_modes ( VP9_COMMON * cm, MACROBLOCK * const x <S2SV_ModEnd>, int mi_row <S2SV_ModStart> -> e_mbd ; set_offsets <S2SV_ModEnd> ( cpi, <S2SV_ModStart> bsize ) ; if ( xd -> mi [ 0 ] -> mbmi. sb_type!= bsize ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; }",0
1460,<S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if ( <S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if (,1
1461,"<S2SV_ModStart> ( & reader, NULL <S2SV_ModEnd> ) ; if",0
1462,"<S2SV_ModStart> -> rows ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> -> rows ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
1463,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; unsigned long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> ( copy_from_user ( buf <S2SV_ModEnd>, buffer, <S2SV_ModStart> count ) ) return - EFAULT ; tmp = simple_strtol ( buf, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ; uml_exitcode = tmp ; return count ; } if (",0
1464,"<S2SV_ModStart> -> ranges = calloc ( 1, <S2SV_ModEnd> sizeof ( MappedRange",0
1465,<S2SV_ModStart> return __this_address ; if ( be32_to_cpu ( dip -> di_nblocks ) > mp -> m_sb. sb_inodesize ) return __this_address ; if ( be16_to_cpu ( dip -> di_rmtblks ) > mp -> m_sb. sb_inodesize || be32_to_cpu ( dip -> di_anextents ) > be64_to_cpu ( dip -> di_nblocks ) ) return __this_address ; if ( be32_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) > mp -> m_sb. sb_inodesize ) return __this_address ; if ( ( be32_to_cpu ( dip -> di_anextents ) + be16_to_cpu ( dip -> di_anextents ) > be64_to_cpu ( dip -> di_anextents ) ) return __this_address ; if ( be32_to_cpu ( dip -> di_nextents ) > be64_to_cpu ( dip -> di_anextents ) ) return __this,0
1466,"<S2SV_ModStart> -> decode ( s, pixel, cnt_c, totfr ) ) < 0 ) return ret ; if ( pixel -> freq [ c ] < cnt_c + step || pixel -> lookup [ x ] < cnt_x + step ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; totfr += step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 16 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned i16_17 = ( i16_17 >> 4 ) + 1 ; pixel -> lookup [ i ] = 0 ; for ( j = 0 ; j < 16 ; j ++ ) i16_17 = ( i16_17 >> 4 )",0
1467,"<S2SV_ModStart> ; break ; case MIF_SSP : if ( atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> height ) { jas_eprintf ( ""invalid <S2SV_blank> cmpt <S2SV_blank> size <S2SV_blank> %d\\n"", cmpt -> width, cmpt -> height ) ; goto error ; } break ; case MIF_SSP : if ( atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width ) { jas_eprintf ( ""invalid <S2SV_blank> cmpt <S2SV_blank> size <S2SV_blank> %d\\n"", jas_tvparser_getval ( tvp ) ) ; goto error ; } break ; case MIF_SAMP : if ( atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> sampperx ) { jas_eprintf ( ""invalid <S2SV_blank> sampperx <S2SV_blank> %d\\n"", cmpt -> sampperx ) ; break ; } break ; case MIF_VSAMP : if ( atoi ( jas_tvparser_getval",0
1468,"<S2SV_ModStart> ; if ( ( flags & VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_FORCE_GF ) ) || ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_",0
1469,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
1470,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
1471,"<S2SV_ModStart>, const u_char * ptr, u_int len, const <S2SV_ModStart> case BGP_AIGP_TLV : if ( len!= BGP_AIGP_TLV_LEN ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ) ) ; switch ( tlen ) { case BGP_AIGP_TLV : if ( len!= BGP_AIGP_TLV_LEN ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_AIGP_TLV : if ( len!= BGP_AIGP_TLV_LEN ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ) ) ; switch ( tlen ) { case BGP_AIGP_TLV : if ( len!= BGP_AIGP_TLV_LEN ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_AIGP_TLV : if ( len!= BGP_AIGP_TLV_LEN ) { ND_PRINT ( (",0
1472,"<S2SV_ModStart> -> outputbuffer, ""<td>Host</td>"" ""<td>%s</td>"", res -> system -> name ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Pidfile</td>"" ""<td>%s</td>"", res -> files. pid ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>State <S2SV_blank> file</td>"" ""<td>%s</td>"", res -> files. state ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Debugfile</td>"" ""<td>%s</td>"", res -> system -> name ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>State <S2SV_blank> file</td>"" ""<td>%s</td>"", res -> files. debug ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>State <S2SV_blank> file</td>"" ""<td>%s</td>"", res -> files. state ) ;",0
1473,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
1474,"<S2SV_ModStart> ( tokbuf, sizeof ( tokbuf ), ""%s"", constr1 <S2SV_ModEnd> ) ; ethereumFormatAmount <S2SV_ModStart> ( tokbuf, sizeof ( tokbuf ), ""%s"", constr2 <S2SV_ModEnd> ) ; return",0
1475,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1476,"<S2SV_ModStart> iovec, compat, & iter <S2SV_ModStart> len, iovec, & iter <S2SV_ModStart> iter_op ) { ret = iter_op ( req, & iter ) ; } else { ret = rw_op ( req, iter. iov, iter. <S2SV_ModEnd> nr_segs, req",1
1477,"<S2SV_ModStart> } if ( ptr - c -> rcurr > 100 || ( strncmp ( ptr, ""get <S2SV_blank> "", 4 ) && strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "", 5 )",0
1478,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
1479,"<S2SV_ModStart> ; if ( config -> desc. bNumInterfaces < 1 || config -> desc. bNumInterfaces > USB_MAXINTERFACES ) { dev_err ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, config -> desc. bNumInterfaces, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; } <S2SV_ModStart> iad_num ] ; if ( config -> desc. bNumInterfaces < 1 || config -> desc. bNumInterfaces > USB_MAXINTERFACES ) { dev_err ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, config -> desc. bNumInterfaces, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; }",0
1480,"<S2SV_ModStart>! replace && card -> user_ctl_count >= MAX_USER_CONTROLS ) { err = - ENOMEM ; goto out ; } if ( info -> count > MAX_USER_CONTROLS ) return - EINVAL ; access = info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ) ; if ( access & ( SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ) ; info -> id. numid = 0 ; memset ( & ue -> id, 0, sizeof ( ue -> id ) ) ; ue -> card -> user_ctl_count ++ ; ue ->",0
1481,"<S2SV_ModStart> client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) { exit_client ( client_p, client_p, client_p, ""Malformed <S2SV_blank> AUTHENTICATE""",1
1482,<S2SV_ModStart> OpMask ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> OpMask ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> OpMask ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> OpMask ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> OpMask ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> OpMask ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> OpMask ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> OpMask ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> OpMask ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> OpMask ) ; <S2SV_ModEnd> if (!,0
1483,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1484,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1485,"<S2SV_ModStart> 16 ) ; memset ( xd -> predictor, 0, 16 ) ;",0
1486,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; context <S2SV_ModStart> ( interface, ENC624J600_MAADR0 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR0 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd>,",0
1487,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; <S2SV_ModStart> = strlen ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header ) ; start = ( <S2SV_ModEnd> ( char * <S2SV_ModStart> ( psf -> header ) + maxlen ) ; maxlen = sizeof ( psf -> header ) - maxlen ; va_start ( argptr, format ) ; vsnprintf ( start, maxlen, format, argptr ) ; start [ maxlen - 1 ] = 0 ; <S2SV_ModStart> psf -> headindex <S2SV_ModEnd> = strlen ( <S2SV_ModStart> psf -> header <S2SV_ModEnd> ) ; return",0
1488,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
1489,<S2SV_ModStart>! job_id || <S2SV_ModEnd>! prev_hash || <S2SV_ModStart>! bbversion ||! nbit ||! ntime ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; if (,0
1490,<S2SV_ModStart> -> alg_priv ) { <S2SV_ModStart> -> destroy ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; ctx <S2SV_ModStart> iface -> destroy ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },0
1491,<S2SV_ModStart> case EXIT_REASON_VMON : case EXIT_REASON_INVEPT :,1
1492,"<S2SV_ModStart> speed ) { VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModStart> -> use_square_partition_only = <S2SV_ModEnd> frame_is_intra_only ( cm <S2SV_ModStart> cm ) ; <S2SV_ModEnd> sf -> less_rectangular_check <S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> = vp9_frame_is_boosted ( cpi )? USE_FULL_RD : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = DISABLE_ALL_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; sf -> auto_mv_step_size = 1 ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_",0
1493,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1494,"<S2SV_ModStart> struct compat_timex ) ; memset ( txc, 0, sizeof ( * txc ) ) ;",0
1495,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
1496,<S2SV_ModStart> = inuse + ( ( lua_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1497,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1498,"<S2SV_ModStart> ; const char <S2SV_ModEnd> * s = <S2SV_ModStart> * s = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; char * ch, s_kind [ 3 ] ; raw = s ; while ( * raw && * raw!= '\\\\'' && * raw!= \'""\' ) { * ch ++ = * raw ++ ; } kind = PyUnicode_FromString ( s_kind ) ; if (! str ) { Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_DECREF ( errstr ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; } <S2SV_ModEnd> return NULL ;",0
1499,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> ) break ; } else if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; if (! is_keyframe_qaunt_set ) { SvcInternal * const si = get_svc_internal ( svc_ctx ) ; memcpy ( get_svc",0
1500,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
1501,<S2SV_ModStart> 0 ) { const char * t = ++ s ; <S2SV_ModStart> ( * t <S2SV_ModEnd> &&! isspace <S2SV_ModStart> ) ) t ++ ; if (! isdigit ( * t ) <S2SV_ModEnd> ) { const <S2SV_ModStart> ++ s ; if (! isdigit ( * t ) ) { free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; } else { free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; if (! isdigit ( * t ) ) { free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; } } } } else if ( * s == '/' ) { const char * t = ++ s ; while ( * t &&! isdigit ( * t ) ) t ++ ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; if (! isdigit ( * t ) ) { free ( font_name ) ; font_name = ( char * ) m,0
1502,"<S2SV_ModStart> ; if ( entry == NULL ) return EINVAL ; if ( <S2SV_ModStart> KADM5_POLICY ) && entry -> policy == NULL <S2SV_ModEnd> ) return KADM5_BAD_MASK <S2SV_ModStart> KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK ; if ( ( mask & KADM5_TL_DATA ) ) { tl_data_orig = entry -> tl_data ; while ( tl_data_orig ) { if ( tl_data_orig -> tl_data_type < 256 ) return KADM5_BAD_TL_TYPE ; tl_data_orig = tl_data_orig -> tl_data_next ; } } ret = get_policy ( handle, entry -> policy, & pol, & adb ) ; if ( ret ) return KADM5_BAD_POLICY ; if ( mask & KADM5_POLICY ) { ret = get_policy ( handle, entry -> policy, & adb ) ; if ( ret ) return KAD",0
1503,<S2SV_ModStart> frame -> data [ plane ] && frame -> linesize <S2SV_ModStart> [ plane ] && frame -> linesize [ plane ],1
1504,"<S2SV_ModStart> } fprintf ( ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; } for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; } for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { for ( mb_col = 0",0
1505,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
1506,,1
1507,"<S2SV_ModStart> : if ( len < snes_op_get_size ( 1, 1, & snes_op [ data [ 0 ] ] ) ) { op -> size = snes_op_get_size ( 1, 1, & snes_op [ data [ 0 ] ] ) ; } else if ( len < snes_op_get_size ( 1, 1, & snes_op [ data [ 0 ] ] ) ) { op -> size = snes_op_get_size ( 1, 1, & snes_op [ data [ 0 ] ] ) ; } else if ( len < snes_op_get_size ( 1, 1, & snes_op [ data [ 0 ] ] ) ) { op -> size = snes_op_get_size ( 1, 1, & snes_op [ data [ 0 ] ] ) ; } else if ( len < snes_op_get_size ( 1, 1, & snes_op [ 0 ] ] ) ) { op -> size = snes_op_get_size ( 1, 1, & snes_op [ 0 ] ] ) ; }",0
1508,"<S2SV_ModStart> ) ) { if ( imp_dbh -> pmysql -> mysql_error ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; }",0
1509,"<S2SV_ModStart> ; if ( ioctl ( slot -> fd, FIONREAD, & size ) == 0 && size <S2SV_ModStart> ) pthread_mutex_unlock ( & slot_lock ) ; BTA_JvRfcommWrite ( <S2SV_ModEnd> slot -> rfc_handle <S2SV_ModStart> id ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> = 0 ; pthread_mutex_unlock ( & slot_lock ) ; } if ( flags & SOCK_THREAD_FD_WR ) { if (! flush_incoming_que_on_wr_signal ( slot ) ) { LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for <S2SV_blank> write <S2SV_blank> while <S2SV_blank> disconnected, <S2SV_blank> slot: <S2SV_blank> %d, <S2SV_blank> channel: <S2SV_blank> %d"", __func__, slot -> id, slot -> scn ) ; need_close = true ; } } else { LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for <S2SV_blank> read <S2SV_blank> while <S2SV_blank> disconnected, <S2SV_blank> slot: <S2SV_blank> %d, <S2SV_blank> channel: <S2SV_blank> %d"", __func__, slot -> id, slot -> scn ) ; need_close = true ; } } if ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) { pthread_mutex_unlock",0
1510,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; if ( len_remain < sizeof ( struct ieee_802_11_phdr ) ) { goto error ; } phdr = ( struct ieee_802_11_phdr ) tvb_get_buf ( tvb, offset, sizeof ( struct ieee_802_11_phdr ) ) <S2SV_ModStart> ; if ( ampdu_len < sizeof ( struct ieee_802_11_phdr ) || data_len > ( sizeof ( struct ieee_802_11_phdr ) - sizeof ( struct ieee_802_11_phdr ) - sizeof ( struct ieee_802_11_phdr ) - sizeof ( struct ieee_802_11_phdr ) - sizeof ( struct ieee_802_11_phdr ) ) { if ( mpdu_len < sizeof ( struct ieee_802_11_phdr ) || data_len > ( sizeof ( struct ieee_802_11_phdr ) - sizeof ( struct ieee_802_11_phdr ) - sizeof ( struct ieee_",0
1511,<S2SV_ModStart> = s_malloc ( ( size_t ),0
1512,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; <S2SV_ModEnd> rw = ( <S2SV_ModStart> ; tempWidth = ROUND_UP_TO ( context -> width, 8 ) ; ccl = context -> ColorLossLevel ; for ( y = 0 ; y < context -> height ; y ++ ) { src = data + ( context -> height - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ y * rw ] + y * context -> width ; coplane = context -> priv -> PlaneBuffers [ y * rw ] + y * context -> height ; cgplane = context -> priv -> PlaneBuffers [ y * rw ] + y * context -> width ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ y * rw ] + y * scanline ; coplane = context -> priv -> PlaneBuffers [ y * rw ] + y * context -> width ; cgplane = context -> priv -> PlaneBuffers [ y * rw ] + y * context",0
1513,<S2SV_ModStart> while ( offset > 0 && offset <S2SV_ModStart> < end_offset ) { <S2SV_ModStart> hf_keybuffer ) ; },1
1514,<S2SV_ModStart> nr_parens ) return ERR_PTR ( - EINVAL,0
1515,<S2SV_ModStart> cpi ) { const <S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * rc = <S2SV_ModStart> = ( ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? cpi -> oxcf. starting_buffer_level : ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> : ( int <S2SV_ModStart> ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? cpi -> oxcf. starting_buffer_level : ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> )? INT_MAX : ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX? cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> : ( int <S2SV_ModStart> ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX? cpi -> oxcf. starting_buffer_level : ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> /,0
1516,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1517,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int set_registers ( pegasus_t * pegasus, const <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
1518,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_reader_t <S2SV_ModEnd> read_tx_mode ( vpx_reader <S2SV_ModStart> { TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",0
1519,<S2SV_ModStart> op + OSPF6HDR_LEN ) ; ND_TCHECK_32BITS ( & hellop -> hello_options,1
1520,<S2SV_ModStart> { if ( datalen!= 1 ) return - EINVAL ; if (,1
1521,"<S2SV_ModStart> rc ) { struct task_struct * <S2SV_ModEnd> task = kthread_run <S2SV_ModStart> ; if ( IS_ERR ( task ) ) { <S2SV_ModStart> uwbd. task = NULL ; <S2SV_ModEnd> printk ( KERN_ERR <S2SV_ModStart> ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; } else { rc -> uwbd. task = task ; <S2SV_ModEnd> rc -> uwbd <S2SV_ModStart> pid ; } }",1
1522,"<S2SV_ModStart> : # line 101 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). class_vector ) ) ; } # line 1048 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 102 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). class_vector ) ) ; } # line 1054 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 104 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1054 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1048 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 107 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1054 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 107 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line",0
1523,<S2SV_ModStart> : idx ; assert ( ptr >= gfx -> backendData && ptr < ( ( char * ) gfx -> backendData + graphicsGetMemoryRequired ( gfx ) ) ) ;,1
1524,"<S2SV_ModStart> = args -> cpi <S2SV_ModEnd> ; MACROBLOCKD * <S2SV_ModStart> 32 ] ; MB_MODE_INFO * mbmi = & xd -> mi [ 0 ] -> mbmi ; struct macroblock_plane * p = & cpi -> mb. plane [ plane ] ; const PLANE_TYPE type = pd -> plane_type ; const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const int ref = is_inter_block ( mbmi ) ; const int16_t * scan, * nb ; const scan_order * so ; const int ref = is_inter_block ( mbmi ) ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> <S2SV_ModEnd> common. fc <S2SV_ModStart>. fc -> <S2SV_ModEnd> coef_probs [ tx_size <S2SV_ModStart> tx_size ) ; unsigned int ( * const eob_branch ) [ COEFF_CONTEXTS ] = cpi -> <S2SV_ModEnd> counts. eob_branch <S2SV_ModStart> tx_size ) ; const uint8_t * const band = get_band_translate ( tx",0
1525,<S2SV_ModStart> pSelect -> pSrc ; if ( pSelect -> selFlags & SF_View ) return WRC_Prune,1
1526,<S2SV_ModStart> { if ( ( <S2SV_ModStart> shmflg & SHM_RND ) && addr >= shmlba,1
1527,"<S2SV_ModStart> ; serv = svc_create ( <S2SV_ModEnd> & nfs4_callback_program,",0
1528,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1529,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1530,<S2SV_ModStart> : case NPNVSupportsWindowless : case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling,1
1531,<S2SV_ModStart> = fd ; msg. msg_namelen = 0 ;,0
1532,"<S2SV_ModStart> s ) { if ( s < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1533,"<S2SV_ModStart> xIter = crm_first_attr <S2SV_ModEnd> ( xml ) <S2SV_ModStart> -> name ; if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else <S2SV_ModEnd> if ( __xml_acl_check <S2SV_ModStart> ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( strcmp ( prop_name, XML_ATTR_RELATIVE ) == 0 ) { crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"", crm_element_name ( xml ), path ) ; if ( xml!= xmlDocGetRootElement ( xml -> doc ) ) { xmlUnlinkNode ( xml ) ; xmlFreeNode ( xml )",0
1534,"<S2SV_ModStart> ( outname, ""/ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1535,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> NULL ; return ( SvcInternal_t <S2SV_ModEnd> * ) svc_ctx <S2SV_ModStart> -> internal ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1536,"<S2SV_ModStart> mq_flush_lock, flags ) ; flush_rq -> tag = - 1",0
1537,"<S2SV_ModStart> s ) { uint32 length ; struct stream packet = * s <S2SV_ModEnd> ; ber_parse_header ( <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> params <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",1
1538,"<S2SV_ModStart> ) ; } if ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_index_exists ( params, hkey. num ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_STRING &&! zend_hash_exists ( params, hkey. str, hkey. len ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else { zval tmp ; Z_ADDREF_PP ( tmp ) ; add_assoc_zval_ex ( tmp, ZEND_STRS ( ""name"" ), * ptr ) ; * current_param = tmp ; if ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_index_exists ( params, hkey. num ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; }",0
1539,"<S2SV_ModStart> only_420 ) { _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; _y4m -> vpx_bps = 12 ; <S2SV_ModStart> = VPX_IMG_BPS_I420 ; if (! _y4m -> vpx_fmt ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> video <S2SV_blank> format; <S2SV_blank> assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; } <S2SV_ModStart> = VPX_IMG_FMT_I420 ; if ( _y4m -> vpx_fmt!= VPX_IMG_FMT_I420 ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> video <S2SV_blank> format; <S2SV_blank> assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; } _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; if (! _y4m -> chroma_fmt ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> chroma <S2SV_blank> format; <S2SV_blank> assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n""",0
1540,"<S2SV_ModStart> obj * otmp ; if ( strlen ( buf ) >= sizeof ( zeroobj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } otmp",0
1541,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> 0 ) return FALSE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( read_uids_guids ( fd <S2SV_ModEnd>, & table_start <S2SV_ModStart> table_start ) == FALSE ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE <S2SV_ModEnd> ; if ( <S2SV_ModStart> read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start",0
1542,"<S2SV_ModStart> rule * rule, const struct envnode * * root ) { struct envnode * node ; <S2SV_ModStart> root ) ; node = createnode ( NULL, NULL ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count = 0 ; } } <S2SV_ModEnd> if ( rule <S2SV_ModStart> ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { const char * keybuf = malloc ( sizeof ( keybuf ) ) ; if (! node ) err ( 1, NULL ) ; for ( i = 0 ; i < env -> count ; i ++ ) { const char * eq ; size_t len ; node = createnode ( NULL, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } } else { env -> count ++ ; } }",0
1543,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
1544,"<S2SV_ModStart> -> seg ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> cm -> base_qindex, cm -> in_frame_q_adj_ratio [ segment ], cm -> mi_rows * cm -> mi_cols ) ; vp9_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vpx_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, cm -> in_frame_q_adj_ratio [ segment ], cm -> mi_rows * cm -> mi_cols, in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta =",0
1545,"<S2SV_ModStart> ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 5 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"", stmt_type, ClassDef_fields, 5 ) ; if (! ClassDef_type ) return 0",0
1546,"<S2SV_ModStart> ) ; } if ( open ( log_path, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IWGRP | S_IROTH ) == INVALID_FD ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) ) ; is_logging = false ; return ; } if ( open ( log_path, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IWGRP | S_IROTH ) == INVALID_FD ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) ) ; is_logging = false ; return ; }",0
1547,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ; break ; } while ( context -> pass > 0 && context -> pass < 4 && context -> curY >= p -> height ) { switch ( ++ context -> pass ) { case 2 : context -> curY = i -> posY + 4 ; break ; case 3 : context -> curY = i -> posY + 2 ; break ; case 4 : context -> curY = i -> posY + 1 ; break ; },1
1548,<S2SV_ModStart> ) ; } ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ;,0
1549,"<S2SV_ModStart> ) ; } smb_ofile_flush <S2SV_ModEnd> ( sr, <S2SV_ModStart> f_mutex ) ; smb_ofile_flush <S2SV_ModEnd> ( sr,",1
1550,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int utf8s_to_utf16s ( const u8 * s, u16 len, wchar_t <S2SV_ModEnd> * pwcs ) <S2SV_ModStart> - EINVAL ; op = pwcs ; <S2SV_ModStart> PLANE_SIZE ) { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } <S2SV_ModStart> } else { * op ++ = ( wchar_t ) u ; } s += size ; len -= size ; } if ( len > 0 ) { if ( * s & 0x80 ) { size = utf8_to_utf32 ( s, len, & u ) ; if ( u < PLANE_SIZE ) { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SUR",0
1551,"<S2SV_ModStart> ; if ( * cp == '\\0' || <S2SV_ModEnd> strchr ( cp <S2SV_ModStart> )!= NULL || <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ( cp, ""."" ) == 0 || strcmp ( cp, <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { run_err",1
1552,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart>, * t <S2SV_ModEnd>, * StartClean <S2SV_ModStart> t ++ ; <S2SV_ModEnd> outpos = outputbuffer <S2SV_ModStart> = outputbuffer ; <S2SV_ModEnd> SetDefaults ( ) <S2SV_ModStart> = 0 ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } s = cinput ; while ( * s!= '[' ) s ++ ; t = s ; while ( * t!= ']' ) t ++ ; * t ++ = 0 ; * t ++ = 0 ; while ( * t!= '0' && s [ 1 ] == ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; fprintf ( outfile, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; free ( argbuf ) ; return ( - 1 ) ; } } StartClean = outpos ; nameobject = t ; while ( * t!='<S2SV_blank>'&& * t!= '\\t' && * t!= '\\n' ) t ++ ; * t ++ = 0 ; while ( * t!='<S2SV_blank>') t ++ ; * t ++ =",0
1553,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : * ( size_t * ) val = ms -> elf_notes_max ; return 0 ;,1
1554,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart>, id ; if ( unlikely ( siphash_key_is_zero ( & net -> ipv4. ip_id_key ) ) ) get_random_bytes ( & net -> ipv4. ip_id_key <S2SV_ModEnd>, sizeof ( <S2SV_ModStart>, sizeof ( net -> ipv4. ip_id_key <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ; hash = siphash_3u32 <S2SV_ModEnd> ( ( __force <S2SV_ModStart> iph -> protocol, & net -> ipv4. ip_id_key <S2SV_ModEnd> ) ; id",1
1555,"<S2SV_ModStart> expr_ty step ; lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower, & tmp ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_upper, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id ( obj, & PyId_step, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; step = NULL ; } else { step = NULL ; } if ( lookup_attr_id ( obj, & PyId_step, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; step = NULL ; } else { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( tmp == NULL ) { Py_CLEAR",0
1556,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
1557,"<S2SV_ModStart> ctl -> pw, "".chfn""",1
1558,<S2SV_ModStart> { if ( max_length < sizeof ( struct ieee80211_radiotap_header ) ) return - EINVAL ; if ( <S2SV_ModStart> iterator -> _rtheader + sizeof ( uint32_t ),1
1559,"<S2SV_ModStart> int err ; list_for_each_entry ( iter, & alink -> dscp_map, list ) { list_add_tail ( & iter -> list, & alink -> dscp_map ) ; if ( iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; nfp_abm_u32_knode_delete ( alink, knode ) ; goto err_delete ; } } mask = be32_to_cpu ( knode -> sel -> keys [ 0 ]. val ) >> tos_off & 0xff ; val = be32_to_cpu ( knode -> sel -> keys [ 0 ]. mask ) >> tos_off & 0xff ; list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; if ( ( iter -> val & cmask ) == ( val & cmask ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete",0
1560,<S2SV_ModStart> NULL ; } dst_state -> speculative = src -> speculative ;,1
1561,"<S2SV_ModStart> return ; } if ( input <= 0.0 || output <= 0.0 ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Gamma <S2SV_blank> values <S2SV_blank> should <S2SV_blank> be <S2SV_blank> positive"" ) ; RETURN_FALSE ; }",1
1562,<S2SV_ModStart> ) ; } <S2SV_ModEnd> stream -> config <S2SV_ModStart> cfg. g_pass <S2SV_ModEnd> = global -> <S2SV_ModStart> : VPX_RC_ONE_PASS ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } else { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1563,<S2SV_ModStart> lun ) { list_del_init <S2SV_ModEnd> ( & cmd,0
1564,<S2SV_ModStart> new_data_len ) ; if ( dbus_name == NULL ) { g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ) ) ) ) ) ) ) ) ) ) ; } else { g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error ( g_error (,0
1565,"<S2SV_ModStart> { VP9_COMMON * <S2SV_ModEnd> cm = & <S2SV_ModStart> tile_col ; const <S2SV_ModEnd> uint8_t * end <S2SV_ModStart> = NULL ; vpx_reader r ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> 6 ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) * aligned_cols, cm -> above_seg_context, 0, MAX_MB_PLANE * 2 * aligned_cols, cm -> above_seg_context_size ) ; for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) { const int last_tile = tile_row == tile_rows - 1 && tile_col == tile_cols - 1 ; const size_t size = get_tile ( data_end, last_tile, & cm -> error, & data ) ; TileBuffer * const buf = & tile_buffers [ tile_row ] [ tile_col ] ; buf -> data = data ; buf -> size = size ; data",0
1566,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP9Decoder * vp9_decoder_create ( <S2SV_ModEnd> VP9D_CONFIG * oxcf <S2SV_ModStart> ) { VP9Decoder * const pbi = vpx_allocate ( 32, <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ) ) ; VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if (! pbi ) return NULL ; vpx_zero ( * pbi ) ; if ( setjmp ( cm -> error. setjmp ) ) { cm -> error. setjmp = 0 ; vp9_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> current_key_frame = 0 ; cm -> ready_for_new_data = 1 ; vpx_init_dequantizer ( cm ) ; cm -> error. setjmp = 0 ; vpx_worker_init ( & pbi ->",0
1567,"<S2SV_ModStart> -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> -> dref = gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1568,"<S2SV_ModStart> -> priv -> connection_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_connection_timeout, client ) ;",0
1569,<S2SV_ModStart> -> count ; new_fpl -> user = get_uid ( fpl -> user ) ;,1
1570,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> ; if ( inet_rsk ( req ) -> opt. cipso <S2SV_ModEnd> == 0 ) <S2SV_ModStart> cipso == 0 ) { inet_rsk ( req ) -> opt. cipso = NULL ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1571,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> tree2tok ( struct <S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> { const vpx_tree_index <S2SV_ModEnd> j = tree",0
1572,"<S2SV_ModStart> ; if ( ctx -> frame_parallel_decode ) { pick_quickcompress_mode ( ctx, duration, deadline ) ; vpx_codec_pkt_list_init ( & ctx -> pkt_list ) ; } if ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) && ( flags & VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_G",0
1573,"<S2SV_ModStart> wqh ) ; init_waitqueue_func_entry ( & ctx -> wqh, _timerfd_wakeup ) ;",0
1574,"<S2SV_ModStart> ) ; struct mnt_namespace * ns = dest_mnt -> mnt_ns ; struct <S2SV_ModStart> ; if (! parent_path ) { err = invent_group_ids ( source_mnt, true ) ; if ( err ) goto out ; } if ( IS_MNT_SHARED ( dest_mnt ) ) { err = propagate_mnt ( dest_mnt, dest_mp, source_mnt, & tree_list ) ; if ( err ) goto out ; if ( IS_MNT_SHARED ( dest_mnt ) ) { err = invent_group_ids ( source_mnt, true ) ; if ( err ) goto out ; set_mnt_shared ( dest_mnt ) ; } else if ( IS_MNT_SHARED ( dest_mnt ) ) { err = propagate_mnt ( dest_mnt, dest_mp, source_mnt, & tree_list ) ; if ( err ) goto out ; } if ( IS_MNT_SHARED ( dest_mnt ) ) { err = invent_group_ids ( source_mnt, true ) ; if ( err ) goto out ; <S2SV_ModStart> mnt_hash ) ; child -> mnt_parent ->",0
1575,"<S2SV_ModStart>, & len, 0",1
1576,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1577,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) rc -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf ->",0
1578,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
1579,"<S2SV_ModStart> byte * fout, int maxbuf <S2SV_ModStart> NYT, fout, maxbuf <S2SV_ModStart> NULL, fout, maxbuf",0
1580,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> int output_enabled, MACROBLOCK * const x, <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & td <S2SV_ModEnd> -> common ; <S2SV_ModStart> -> common ; MACROBLOCKD * const xd = & td -> e_mbd ; <S2SV_ModEnd> const MODE_INFO * <S2SV_ModStart> BLOCK_8X8 ; const int mi_width = num_8x8_blocks_wide_lookup [ mbmi -> sb_type ] ; const int mi_height = num_8x8_blocks_high_lookup [ mbmi -> sb_type ] ; const int bw = num_8x8_blocks_wide_lookup [ mbmi -> sb_type ] ; const int bh = num_8x8_blocks_high_lookup [ mbmi -> sb_type ] ; const int mi_width = num_8x8_blocks_wide_lookup [ mbmi -> sb_type ] ; const int mi_height = num_8x8_blocks_high_lookup [ mbmi",0
1581,"<S2SV_ModStart> ; if ( config -> desc. bNumInterfaces < 1 || config -> desc. bNumInterfaces > USB_MAXINTERFACES ) { dev_err ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, config -> desc. bNumInterfaces, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; } <S2SV_ModStart> iad_num ] ; if ( config -> desc. bNumInterfaces < 1 || config -> desc. bNumInterfaces > USB_MAXINTERFACES ) { dev_err ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, config -> desc. bNumInterfaces, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; }",0
1582,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> ] ; struct crypto_cipher * tfm_des <S2SV_ModEnd> ; str_to_key ( <S2SV_ModStart> ; tfm_des = crypto_alloc_cipher ( ""des"" <S2SV_ModEnd>, 0, <S2SV_ModStart>, 0, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ) { <S2SV_ModEnd> cifs_dbg ( VFS <S2SV_ModStart> ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; return PTR_ERR ( tfm_des ) ; } crypto_cipher_setkey <S2SV_ModEnd> ( tfm_des, <S2SV_ModStart> 8 ) ; crypto_cipher_encrypt_one ( tfm_des, out, in ) ; crypto_free_cipher <S2SV_ModEnd> ( tfm_des ) <S2SV_ModStart> tfm_des ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",1
1583,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1584,"<S2SV_ModStart> uint32_t value ; <S2SV_ModEnd> int position, <S2SV_ModStart> int position, <S2SV_ModEnd> i, j <S2SV_ModStart> get_bits_count ( gbc <S2SV_ModEnd> ) ; zeroes <S2SV_ModStart> ; i = 65 <S2SV_ModEnd> ; while ( <S2SV_ModStart> { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( ctx -> trace_enable ) { bits [ i ] = '1' ; break ; } else { bits [ i ++ ] = '0' ; ++ zeroes ; } } if ( ctx -> trace_enable ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( ctx -> trace_enable ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream",0
1585,<S2SV_ModStart> i > pos + delta <S2SV_ModStart> off + 1 <= pos + delta <S2SV_ModEnd> ) insn ->,1
1586,<S2SV_ModStart> case EXIT_REASON_INVEPT : case EXIT_REASON_INVVPID :,1
1587,"<S2SV_ModStart> { } else if ( ISALNUM ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 <S2SV_ModEnd> ) { param <S2SV_ModStart> } else if ( ISALNUM ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 <S2SV_ModEnd> ) { } <S2SV_ModStart> } else if ( ISALNUM ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { <S2SV_ModEnd> param -> value <S2SV_ModStart> } else if ( ISALNUM ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> value = p + i ; } else if ( ISALNUM ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> value = p + i ; } else { param -> value = p + i ; } } else if ( ISALNUM ( c ) || strchr ( ""!#$%&\'*+-.^_`|~""",0
1588,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> http_contentlen. <S2SV_ModStart> -> http_cookie. ptr = NULL, packet -> http_cookie.",0
1589,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1590,"<S2SV_ModStart> ++ r ; if <S2SV_ModEnd> ( pow ( <S2SV_ModStart>, dim ) <= entries ) return - 1 ; if <S2SV_ModEnd> ( ( int <S2SV_ModStart> dim ) ) > entries ) return - 1 <S2SV_ModEnd> ; return r",1
1591,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> ; } } return ( <S2SV_ModStart> dds_info, 8, exception ) ) <S2SV_ModEnd> ; } <S2SV_null>",1
1592,"<S2SV_ModStart> drop ; } iph = ip_hdr ( skb ) ; <S2SV_ModStart> return 0 ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen < sizeof ( struct iphdr ) ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if (",0
1593,"<S2SV_ModStart> ) ; } if ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_index_exists ( params, hkey. num ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_STRING &&! zend_hash_exists ( params, hkey. str, hkey. len ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else { zval tmp ; Z_ADDREF_PP ( tmp ) ; add_assoc_zval_ex ( tmp, ZEND_STRS ( ""name"" ), * ptr ) ; * current_param = tmp ; if ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_index_exists ( params, hkey. num ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; }",0
1594,"<S2SV_ModStart> length ) { int ret ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL )",0
1595,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
1596,"<S2SV_ModStart> cfg ) { struct stat st ; FILE * f ; <S2SV_ModStart> ; } } f = open ( filename, O_WRONLY | O_APPEND | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY ) ; if ( f == NULL ) { fprintf ( stderr, ""Can\'t <S2SV_blank> open <S2SV_blank> %s\\n"", filename ) ; exit ( EXIT_FAILURE ) ; } if ( fstat ( f, & st, sizeof ( st ) )!= 0 ) { fprintf ( stderr, ""Can\'t <S2SV_blank> open <S2SV_blank> %s\\n"", filename ) ; exit ( EXIT_FAILURE ) ; } if ( fstat ( f, & st, sizeof ( st ) ) < 0 ) { fprintf ( stderr, ""Can\'t <S2SV_blank> open <S2SV_blank> %s\\n"", filename ) ; exit ( EXIT_FAILURE ) ; } if ( fstat ( f, & st, 0 )!= 0 ) { fprintf ( stderr, ""Can\'t <S2SV_blank> open <S2SV_blank> %s\\n"", filename ) ; exit ( EXIT_FAILURE ) ; }",0
1597,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! f2fs_readonly (,1
1598,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( bytes_per_line > ( ssize_t ) sun_info. length ) bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( bytes_per_line > ( ssize_t ) sun_info. width * sun_info. height ) bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( bytes_per_line > ( ssize_t ) sun_info. length ) bytes_per_line = sun_info. width * sun_info. depth ;",0
1599,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",1
1600,"<S2SV_ModStart>, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; if ( Stream_GetRemainingLength ( s ) < 4 ) return FALSE",0
1601,<S2SV_ModStart> ipmi_destroy_user ( user ) ; cleanup_srcu_struct ( & user -> release_barrier ) ;,0
1602,<S2SV_ModStart> ; # endif # if CONFIG_TEMPORAL_DENOISING if ( xd -> noise_sensitivity > 0 ) { # if CONFIG_TEMPORAL_DENOISING if ( xd -> noise_sensitivity > ( 1 << 16 ) ) { # if CONFIG_TEMPORAL_DENOISING if ( xd -> noise_sensitivity > ( 1 << 16 ) ) { # if CONFIG_TEMPORAL_DENOISING if ( xd -> noise_sensitivity > ( 1 << 16 ) ) { # if CONFIG_TEMPORAL_DENOISING if ( xd -> noise_sensitivity > 0 ) { # if CONFIG_TEMPORAL_DENOISING if ( xd -> noise_sensitivity > ( 1 << 16 ) ) { # if CONFIG_TEMPORAL_DENOISING if ( xd -> noise_sensitivity > ( 1 << 16 ) ) { # if CONFIG_TEMPORAL_DENOISING if ( xd -> noise_sensitivity > ( 1 << 16 ) ) { # if CONFIG_TEMPORAL_DENOISING if ( xd -> noise_sensitivity > ( 1 << 16,0
1603,<S2SV_ModStart> == ARPHRD_ETHER ) { <S2SV_ModStart> ether_setup ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; },1
1604,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (",1
1605,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1606,<S2SV_ModStart> ; } } if ( form -> type == FORM_TEXTAREA ) { if ( l -> type == FORM_TEXTAREA ) { if ( l -> prev ) for ( ; l -> type == FORM_TEXTAREA ) for ( ; l -> type == FORM_TEXTAREA ) for ( ; l -> type == FORM_TEXTAREA ) for ( ; l -> type == FORM_TEXTAREA ; l = l -> prev ) for ( ; l -> type == FORM_TEXTAREA ; l = l -> next ) for ( ; l -> type == FORM_TEXTAREA ) for ( ; l -> type == FORM_TEXTAREA ; l = l -> next ) for ( ; l -> type == FORM_TEXTAREA ) for ( ; l -> type == FORM_TEXTAREA ; l = l -> prev ) for ( ; l -> type == FORM_TEXTAREA ) for ( ; l -> type == FORM_TEXTAREA ; l = l -> next ) for ( ; l -> type == FORM_TEXTAREA ; l = l -> prev ) for ( ; l -> type == FORM_TEXTAREA ) for ( ; l -> type == FORM_TEXTAREA ; l = l -> next ) for ( ; l -> type == FORM_TEXT,0
1607,<S2SV_ModStart> { if ( ( <S2SV_ModStart> xWantedSize > 0 ) && ( ( xWantedSize + xHeapStructSize ) > xFreeBytesRemaining ) <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) > xFreeBytesRemaining ) ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } if ( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) > xFreeBytesRemaining ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_,0
1608,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1609,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1610,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpDiff"", ""%s"", ""(cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> cp -- ) return 1 ;",1
1611,"<S2SV_ModStart> s ) { struct stream packet = * s ; <S2SV_ModStart> int i ; if (! s_check_rem ( s, 10, & packet ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> bitmap <S2SV_blank> updates <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s, 10, & packet ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> bitmap <S2SV_blank> updates <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
1612,"<S2SV_ModStart> -> seen_enough ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, & sfe -> valuelen ) ; if ( error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if (! context -> put_listent ) { context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, & sfe -> valuelen ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> valuelen ) ; if ( error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if (! context -> put_listent ) { context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namel",0
1613,"<S2SV_ModStart> = 0 ; if ( msg_len!= sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> length <S2SV_blank> %u"", ( int ) msg_len ) ) ; goto trunc ; } <S2SV_ModStart> struct olsr_msg4 ) ) ; if ( msg_len!= sizeof ( struct olsr_msg6 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> length <S2SV_blank> %u"", ( int ) msg_len ) ) ) ; goto trunc ; } <S2SV_ModStart> struct olsr_hna4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> length <S2SV_blank> %u"", ( int ) msg_len ) ) ; ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> length <S2SV_blank> %u"", ( int ) msg_len ) ) ; goto trunc ; }",0
1614,"<S2SV_ModStart> { uint16 bitspersample, samplesperpixel ; uint16 <S2SV_ModEnd> input_compression, input_photometric <S2SV_ModStart>, input_photometric ; copyFunc cf ; uint32 width, length ; uint32 bitspersample, length ; length = TIFFGetField ( in, TIFFTAG_BITSPERSAMPLE, & bitspersample ) ; length = TIFFGetField ( in, TIFFTAG_LENGTH, & length ) ; CopyField ( TIFFTAG_BITSPERSAMPLE, bitspersample ) ; CopyField ( TIFFTAG_SAMPLESPERPIXELEL, samplesperpixel ) ; if ( length!= ( uint32 ) - 1 ) length = TIFFGetField ( in, TIFFTAG_IMAGELENGTH, length ) ; if ( length!= ( uint32 ) - 1 ) length = TIFFGetField ( in, TIFFTAG_IMAGEWIDTH, length ) ; CopyField ( TIFFTAG_LENGTH, length ) ; if ( length!= ( uint32 ) - 1 ) length = TIFFGetField ( in, TIFFTAG_LENGTH, length ) ; if ( length!= ( uint32 ) - 1 ) length = ( uint32 ) length ; CopyField ( TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( TIFFTAG",0
1615,"<S2SV_ModStart> } else { if ( smatch ( option, ""timestamp"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Timestamp <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } else if ( smatch ( option, ""level"" ) ) { level = atoi ( ovalue ) ; } else if ( smatch ( option, ""backup"" ) ) { backup = atoi ( ovalue ) ; } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { stamp = atoi ( ovalue ) ; } else if ( smatch ( option, ""path"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Path <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SY",0
1616,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> ] ; vpx_coeff_count * coef_counts = cpi -> coef_counts [ tx_size ] ; unsigned int ( * eob_branch_ct ) [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] ; vpx_tree_probs_from_distribution ( vp9_coef_tree, coef_counts [ i ] [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] ) ; for ( i = 0 ; i < REF_TYPES ; ++ i ) { for ( j = 0 ; j < REF_TYPES ; ++ j ) { for ( k = 0 ; k < COEF_BANDS ; ++ k ) { for ( m = 0 ; m < UNCONSTRAINED_NODES ; ++ m ) coef_probs [ i ] [ j ] [ k ] [ l ] = get_binary_prob ( coef_branch_ct [ i ] [ j ] [ k ] [ m",0
1617,"<S2SV_ModStart> { } ; struct termios old = tcgetattr ( fd, TCSANOW ) ; if ( old < 0 ) return log_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( tcgetattr ( fd, & old ) < 0 ) return log_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( tcgetattr ( fd, & old ) < 0 ) return log_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( tcgetattr ( fd, & tc ) < 0 ) return log_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( tcgetattr ( fd, & old ) < 0 ) return log_errno ( errno,",0
1618,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_",0
1619,<S2SV_ModStart> filp ) { if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM ;,0
1620,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> cfg, vpx_codec_flags_t <S2SV_ModStart> ( flags & ( VPX_CODEC_USE_XMA | VPX_CODEC_USE_PSNR ) ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VP",0
1621,"<S2SV_ModStart> int stride, int uv_block_size, int mv_row, int mv_col, const InterpKernel * const kernel <S2SV_ModEnd> ) { enum <S2SV_ModStart> const kernel = vp9_filter_kernels [ xd -> mi [ 0 ] -> mbmi. interp_filter ] <S2SV_ModEnd> ; enum mv_precision <S2SV_ModStart> int uv_stride ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q4 ; } else { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q3 ; } vp9_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size,",0
1622,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) >= sizeof ( buf ) ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; retval = FALSE ; } else if ( strchr ( buf,'<S2SV_blank>') ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; retval = FALSE ; } else if ( match_varname ( buf, ""OPTIONS"", 4 ) ) { if (! parseoptions ( bufp, TRUE, TRUE ) ) retval = FALSE ; } else if ( match_varname ( buf, ""OPTIONS"", 4 ) ) { if (! parseoptions ( bufp, TRUE, TRUE ) ) retval = FALSE ; } else if ( match_varname ( buf, ""AUTOCOMPLETE"", 5 ) ) { parseautocomplete ( bufp, TRUE ) ; } else if ( match_varname ( buf, ""HACKDIR"", 4 ) ) { adjust_prefix ( bufp, HACKPREFIX ) ; } else if ( match_varname ( buf, ""LEVELDIR"", 4 ) ) { adjust_prefix ( bufp, LEVELPREFIX ) ;",0
1623,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> cJSON * <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> ; for ( int j = 0 ; j < count ; ++ j <S2SV_ModEnd> ) { n <S2SV_ModStart> cJSON_CreateFloat ( numbers [ j <S2SV_ModEnd> ] ) ; <S2SV_ModStart> ] ) ; if ( n ) { if (! j ) a -> child = n ; else suffix_object ( p, n ) ; } else { suffix_object ( p, n ) ; } } return a ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1624,<S2SV_ModStart> tk_status ) ; <S2SV_ModEnd> } if (,0
1625,"<S2SV_ModStart> int link_count ; if ( iinfo -> i_location. len > inode -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode:%d\\n"", inode -> i_ino, inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ) { if ( udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode:%d\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( iinfo -> i_location. len > inode -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode:%d\\n"", inode -> i_ino ) ; make_bad_inode",0
1626,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
1627,"<S2SV_ModStart> uint32 num_properties = GETUINT32 <S2SV_ModEnd> ( buf + <S2SV_ModStart> ]. len ) ; if ( a -> names [ i ]. data ) { for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; } } else { CHECKINT32 ( idx, len ) ; a -> type = CHECKINT16 ( buf + idx ) ; idx += 2 ; } a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ; idx += sizeof ( GUID ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> name. data = CHECKED_XMALLOC ( unsigned char, a -> name. len ) ; for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a",0
1628,"<S2SV_ModStart> data_end ) { <S2SV_ModEnd> const uint8_t * <S2SV_ModStart> const cm = & pbi -> tile ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int num_workers = MIN ( <S2SV_ModEnd> pbi -> oxcf <S2SV_ModStart>. max_threads & <S2SV_ModEnd> 1, tile_cols <S2SV_ModStart> tile_cols ) ; <S2SV_ModEnd> int n ; <S2SV_ModStart> 0 ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; vpx_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_malloc ( sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; for ( i = 0 ; i < num_workers ; ++ i ) { VP9",0
1629,"<S2SV_ModStart> 0x101 ; offset = base + get4 ( ) + 8 ; while ( ( save = ftell ( ifp ) ) < offset ) { if ( tag == 0x505244 ) break ; high = get2 ( ) ; wide = get2 ( ) ; fseek ( ifp, 1L, SEEK_CUR ) ; imgdata. makernotes. sony. prd_ImageHeight = ( ushort ) fgetc ( ifp ) ; imgdata. makernotes. sony. prd_ImageWidth = ( ushort ) fgetc ( ifp ) ; fseek ( ifp, 1L, SEEK_CUR ) ; imgdata. makernotes. sony. prd_StorageMethod = ( ushort ) fgetc ( ifp ) ; imgdata. makernotes. sony. prd_BitDepth = ( ushort ) fgetc ( ifp ) ; imgdata. makernotes. sony. prd_RawBitDepth = ( ushort ) fgetc ( ifp ) ; imgdata. makernotes. sony. prd_StorageMethod = ( ushort ) fgetc ( ifp ) ;",0
1630,"<S2SV_ModStart> fanout_mutex ) ; if (! list_empty ( & fanout_list ) ) goto out ; err = - EINVAL ; if ( type == PACKET_FANOUT_HASH || type == PACKET_FANOUT_LB || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_QM || type == PACKET_FANOUT_CBPF || type == PACKET_FANOUT_EBPF ) goto out ; if ( type == PACKET_FANOUT_HASH || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_QM ) { err = - EINVAL ; goto out ; } rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) goto out ; atomic_long_set ( & rollover -> num, 0 ) ; atomic_long_set ( & rollover -> num_failed, 0 ) ; po -> rollover = rollover ; }",0
1631,"<S2SV_ModStart> -> common ; const int qindex = cm -> base_qindex ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; int i ; if ( cm -> frame_type == KEY_FRAME ) { const int base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_clear_system_state ( ) ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 )",0
1632,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
1633,"<S2SV_ModStart> ( void ) TIFFGetFieldDefaulted <S2SV_ModEnd> ( in,",1
1634,<S2SV_ModStart> -> error_code ) { const vpx_codec_err_t * detail = <S2SV_ModEnd> error -> detail <S2SV_ModStart> -> has_detail? <S2SV_ModEnd> detail : NULL,0
1635,<S2SV_ModStart> [ i ] && str [ i ],0
1636,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1637,"<S2SV_ModStart> ""corrupt <S2SV_blank> BSON"" ) ; VALIDATE_TEST ( ""test59.bson"", BSON_VALIDATE_NONE, 9, BSON_VALIDATE_NONE, ""corrupt <S2SV_blank> BSON"" ) ;",1
1638,"<S2SV_ModStart> ; if ( cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON ) && <S2SV_ModEnd> x86_pmu. intel_cap <S2SV_ModStart>. intel_cap. pmu_num_counters > INTEL_MAX_PERFMON_EVENTS ) x86_pmu. intel_cap. pmu_num_counters = INTEL_MAX_PERFMON_EVENTS ; if ( cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON ) && <S2SV_ModEnd> x86_pmu. intel_cap <S2SV_ModStart>. intel_cap. pmu_num_counters_fixed > INTEL_MAX_PERFMON_EVENTS ) x86_pmu. intel_cap. pmu_num_counters_fixed = INTEL_MAX_PERFMON_EVENTS ; if ( x86_pmu. intel_cap. pmu_num_counters_fixed > INTEL_MAX_PERFMON_EVENTS ) x86_pmu. intel_cap. intel_cap. pmu_num_counters_fixed = INTEL_MAX_PERFMON_EVENTS",0
1639,"<S2SV_ModStart> * ps_cur_slice ; pocstruct_t * ps_prev_poc, * ps_cur_poc ; memset ( ps_dec -> ps_cur_slice, 0, sizeof ( dec_slice_params_t ) ) <S2SV_ModEnd> ; ps_dec ->",0
1640,<S2SV_ModStart> ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { ret = - EPERM ; goto out_unlock ; } } } } else { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { ret = - EPERM ; goto out_unlock ; } } } } },0
1641,"<S2SV_ModStart> ; krb5_key_data * key_data ; if ( key_data_in == NULL ) goto cleanup ; key_data = k5calloc ( n_key_data, sizeof ( * key_data ), & err ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_kvno!= key_data [ i + 1 ]. key_data_kvno ) num_versions ++ ; ret [ j ] = k5alloc ( sizeof ( struct berval ), & err ) ; if ( ret == NULL ) goto cleanup ; }",0
1642,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( btpan_cb. congest_packet ) ),0
1643,<S2SV_ModStart> ; if ( task -> ptrace &&! dumpable ) { rcu_read_unlock ( ) ; return - EPERM ; } if (,0
1644,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_",0
1645,<S2SV_ModStart> int getnum ( <S2SV_ModEnd> const char * <S2SV_ModStart> int df ) <S2SV_ModEnd> { int a <S2SV_ModStart> = 0 ; <S2SV_ModEnd> do { a,0
1646,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> old ) ; markold ( g, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, psurvival, g -> finobjsur ) ; sweepgen ( L, g, psurvival, g -> finobjrold ) ; g -> finobjrold = g -> finobjold ; g -> finobjold = * psurvival ; g -> finobjsur = g -> finobj ;",0
1647,<S2SV_ModStart> = 0 ; else { ret = <S2SV_ModEnd> - EIO ; <S2SV_ModStart> - EIO ; },0
1648,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModStart> buffer ) ; s_read ( c, c -> local_rfd. fd, ssl_request, sizeof ssl_request ) ; if (! safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok ) ; return NULL ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1649,"<S2SV_ModStart> int cib_tls_signon ( cib_t * cib, <S2SV_ModStart> struct sockaddr_in addr <S2SV_ModEnd> ; int rc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> char * server <S2SV_ModStart> = NULL ; <S2SV_ModEnd> static struct mainloop_fd_callbacks <S2SV_ModStart> cib_fd_callbacks = { <S2SV_ModEnd>. dispatch = <S2SV_ModStart>. destroy = cib_remote_connection_destroy, } ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } bzero ( & hints, sizeof ( struct addrinfo ) ) ; hints. ai_flags = AI_CANONNAME ; server = private -> server ; ret_ga = getaddrinfo ( server, NULL, & hints, & res ) ; if ( ret_ga ) { crm_err ( ""getaddrinfo: <S2SV_blank> %s"", gai_strerror ( ret_ga ) ) ; close ( sock ) ; return - 1 ; } if (! res -> ai_canonname ) { crm_err",0
1650,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; cpi -> frames_till_gf_update_due = 0 ; cpi -> gf_bitrate_adjustment = 0 ; cpi -> frames_till_gf_update_due = 0 ; cpi -> non_gf_bitrate_adjustment = 0 ; if ( setjmp ( cm -> error. jmp ) ) { cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ) + 1 ) ) ; vp8_create_common ( & cpi -> common ) ; } cm -> error. setjmp = 1 ; if ( setjmp ( cm -> error. jmp ) ) { cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ) + 1 ) ) ; } if ( setjmp ( cm -> error. jmp ) ) { cpi -> common. error. setjmp = 0 ; vp8_remove_compressor ( & cpi ) ;",0
1651,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1652,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",1
1653,<S2SV_ModStart> ( bp [ 0 <S2SV_ModEnd> ] & 0x80 <S2SV_ModStart> ( bp [ 0 <S2SV_ModEnd> ] & 0x80 <S2SV_ModStart> ( bp [ 0 <S2SV_ModEnd> ] & 0x80 <S2SV_ModStart> ( bp [ 0 <S2SV_ModEnd> ] & 0x80,0
1654,"<S2SV_ModStart> ctx, expr -> unary. child",1
1655,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1656,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command <S2SV_ModStart> = mptctl_do_mpt_command ( ioc,",1
1657,"<S2SV_ModStart> Image * image ; MagickBooleanType status <S2SV_ModStart>, length, <S2SV_ModEnd> value, version <S2SV_ModStart> 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModEnd> * p = <S2SV_ModStart> 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModEnd> * p = <S2SV_ModStart> 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; <S2SV_ModStart> 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModEnd> * p = <S2SV_ModStart> 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModEnd> * p = <S2SV_ModStart> 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" )",0
1658,"<S2SV_ModStart> = JAS_CAST ( uint_fast16_t <S2SV_ModEnd>, JAS_CAST ( <S2SV_ModStart>, JAS_CAST ( uint_fast16_ <S2SV_ModEnd>, JAS_CAST ( <S2SV_ModStart>, JAS_CAST ( uint_fast16_ <S2SV_ModEnd>, JAS_CAST ( <S2SV_ModStart>, JAS_CAST ( uint_fast16_ <S2SV_ModEnd>, JAS_CAST ( <S2SV_ModStart>, JAS_CAST ( uint_fast16_ <S2SV_ModEnd>, JAS_CAST ( <S2SV_ModStart>, JAS_CAST ( uint_fast16_t <S2SV_ModEnd>, JAS_CAST ( uint_fast16_ <S2SV_ModEnd>, JAS_CAST ( <S2SV_ModStart>, JAS_CAST ( uint_fast16_ <S2SV_ModEnd>, JAS_CAST ( <S2SV_ModStart>, JAS_CAST ( uint_fast16_ <S2SV_ModEnd>, JAS_CAST ( uint_fast16_ <S2SV_ModEnd>, JAS_CAST ( <S2SV_ModStart>, JAS_CAST ( uint_fast16_ <S2SV_ModEnd>, JAS_CAST ( uint_fast16_ <S2SV_ModEnd>, JAS_CAST ( uint_fast16_ <S2SV_ModEnd>, JAS_CAST ( <S2SV_ModStart>, JAS_CAST ( uint_fast16_ <S2SV_ModEnd>, JAS_CAST ( uint_fast16_ <S2SV_ModEnd>, JAS_CAST ( uint_",0
1659,"<S2SV_ModStart> 0 ) { if ( ( length < 1 ) || ( length > strlen ( argument ) ) ) irc_channel_set_chanmode ( server, channel, NULL, chanmode, argument ) ; else if ( length < 1 ) irc_channel_set_chanmode ( server, channel, NULL, chanmode, argument ) ; else if ( length < 1 ) irc_channel_set_chanmode ( server, channel, NULL, NULL ) ; else if ( ( length < 1 ) || ( length > 1 ) || ( length > strlen ( argument ) ) ) irc_channel_set_chanmode ( server, channel, NULL, chanmode, argument ) ; else if ( length < 1 ) irc_channel_set_chanmode ( server, channel, NULL, chanmode, argument ) ; else if ( length < 1 ) irc_channel_set_chanmode ( server, channel, NULL, NULL ) ; else",0
1660,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> 1 ) ; vpx_read_bit <S2SV_ModEnd> ( r )",0
1661,<S2SV_ModStart> ; int is_valid = ( error == GIT_OK ) <S2SV_ModStart> giterr_clear ( ) <S2SV_ModEnd> ; error =,1
1662,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1663,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> ] ) ; ++ cm -> counts -> <S2SV_ModEnd> comp_inter [ ctx",0
1664,"<S2SV_ModStart> ; } } if (! ( action = strtok ( g -> data, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } while ( action = strtok ( NULL, "";"" ) ) { switch ( action [ 0 ] ) { case 'r' : if ( cmd_cb ( core_ptr, ""dr"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } while ( action = strtok ( NULL, "";"" ) ) { switch ( action [ 0 ] ) { case 'r' : if ( cmd_cb ( core_ptr, ""dr"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } return send_msg ( g, ""E01"" ) ; }",0
1665,"<S2SV_ModStart>! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; stream -> index = 0 ; <S2SV_ModStart> ; res = vpx_codec_enc_config_default <S2SV_ModEnd> ( global -> <S2SV_ModStart> ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; stream -> ebml. last_pts_ms = - 1 ; stream -> ebml. debug = global -> debug ; if ( global -> deadline == VPX_DL_REALTIME ) stream -> config. cfg. g_lag_in_frames = 0 ; stream -> config. <S2SV_ModEnd> stereo_fmt = STEREO_FORMAT_MONO <S2SV_ModStart> ; stream -> config. <S2SV_ModEnd> stereo_fmt = STEREO_FORMAT_MONO <S2SV_ModStart> write_webm = 1 <S2SV_ModEnd> ; # if <S2SV_ModStart> CONFIG_WEBM_IO stream -> <S2SV_ModEnd> ebml. last_pts_ms",0
1666,"<S2SV_ModStart> ; if ( op -> nd_opt_mtu == ND_OPT_RDNSS ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (MTU: <S2SV_blank> %u)\\n"", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_mtu ) ) ) ; break ; } if ( <S2SV_ModStart> op -> nd_opt_mtu!= ND_OPT_RDNSS ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (MTU: <S2SV_blank> %u)\\n"", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_mtu ) ) ) ; break ; } if ( op -> nd_opt_mtu > ND_OPT_MTU ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (MTU: <S2SV_blank> %u)\\n"", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_mtu ) ) ) ; break ; }",0
1667,<S2SV_ModStart> = 0 ; ( ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { yr_error ( yr_malloc ( sizeof ( RE_AST ) ) ) ; return ERROR_INSUFFICIENT_MEMORY ; } ( ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { yr_error ( yr_malloc ( sizeof ( RE_AST ) ) ) ; return ERROR_INSUFFICIENT_MEMORY ; } ( * re_ast ) -> root_node = yr_malloc ( sizeof ( RE_NODE ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { yr_error ( yr_malloc ( sizeof ( RE_NODE ) ) ) ; return ERROR_INSUFFICIENT_MEMORY ; },0
1668,<S2SV_ModStart> sk ) ; mutex_lock ( & peer_wake_lock ) ; <S2SV_ModStart> other ) { mutex_unlock ( & peer_wake_lock ) ; <S2SV_ModStart> = 0 ; } <S2SV_ModStart> other ) { mutex_unlock ( & peer_wake_lock ) ; <S2SV_ModStart> = 0 ; } <S2SV_ModStart> other ) { mutex_unlock ( & peer_wake_lock ) ;,0
1669,"<S2SV_ModStart> ) ) ; iter -> var_expand_table = NULL ; <S2SV_ModStart> ( ret <= 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } <S2SV_ModStart> 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( ret < 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found",0
1670,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; if ( <S2SV_ModStart> -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len - A,1
1671,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1672,"<S2SV_ModStart> ; stbbr_send ( ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'stabber@localhost\'>"" <S2SV_ModEnd> ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost/mobile\'>""",1
1673,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1674,<S2SV_ModStart> = 0 ; if ( IS_ERR ( tok -> fp ) ) { PyErr_SetString ( PyExc_R_MALLOC ( PyExc_R_MALLOC_ERR ( PyExc_R_MALLOC_ERR ( PyExc_R_MALLOC_ERR ( PyExc_R_MALLOC_ERR ( PyExc_R_MALLOC_ERR ( PyExc_R_MALLOC_ERR ( PyExc_R_MALLOC_ERR ( PyExc_R_MALLOC ( PyExc_Error ( PyExc_R_MALLOC ( PyExc_R_MALLOC_ERR ( PyExc_R_MALLOC_ERR ( PyExc_R_MALLOC_ERR ( PyExc_MALLOC_ERR ( PyExc_MALLOC_ERR ( PyExc_MALLOC_ERR ( PyExc_MALLOC_ERR ( PyExc_MALLOC_ERR ( PyExc_MALLOC_ERR ( PyExc_Error ( PyExc_Error ( PyExc_Error ( PyExc_Error ( PyExc_Error ( PyExc_Error ( PyExc_Error ( Py,0
1675,<S2SV_ModStart> } if ( av1 -> av1_config && av1 -> av1_config -> objectTypeIndication!= GF_AUDIO_AV_OBJECT_ID_MPEG_VISUAL ) { av1 -> av1_config -> objectTypeIndication = GF_AUDIO_AV_OBJECT_ID_MPEG_VISUAL ; } else if ( av1 -> av1_config && av1 -> av1_config -> objectTypeIndication!= GF_AUDIO_AV_OBJECT_ID_MPEG_VISUAL ) { av1 -> av1_config -> objectTypeIndication = GF_AUDIO_AV_OBJECT_ID_MPEG_VISUAL ; av1 -> av1_config -> objectTypeIndication = GF_AUDIO_AV_OBJECT_ID_MPEG_VISUAL ; } else if ( av1 -> av1_config && av1 -> av1_config -> objectTypeIndication!= GF_AUDIO_AV_OBJECT_ID_MPEG_VISUAL ) { av1 -> av1_config -> objectTypeIndication = GF_AUDIO_AV_OBJECT_,0
1676,"<S2SV_ModStart> -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> -> dref = gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1677,"<S2SV_ModStart> ] = '\\0' ; if ( field_length > 128 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_ERROR, ""field <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", field_length, 128 ) ; if ( r!= 0 ) { r = SC_TEST_ERROR ( card -> ctx, SC_LOG_ERROR, ""field <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", field_length, 128 ) ; if ( r!= 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_ERROR, ""field <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", field_length, 128 ) ; } if ( r!= 0 ) { r = SC_TEST_ERROR ( card -> ctx, SC_LOG_ERROR, ""field <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", field_length, 128 ) ; if ( r!= 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_ERROR, ""field <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank>",0
1678,"<S2SV_ModStart> dpbSize ) ; if ( dpb -> numRefFrames > MAX_NUM_REF_PICS ) return ( MEMORY_ALLOCATION_ERROR ) ; <S2SV_ModStart> u8 * ) malloc ( dpb -> dpbSize ) ; if ( H264SwDecMemset ( dpb -> buffer, 0, ( MAX_NUM_REF_IDX_L0_ACTIVE + 1 ) * sizeof ( dpbPicture_t ) ) ; memset ( dpb -> buffer, 0, ( MAX_NUM_REF_IDX_L0_ACTIVE + 1 ) * sizeof ( dpbPicture_t ) ) ; for ( i = 0 ; i < dpb -> dpbSize + 1 ; i ++ ) { if ( H264SwDecMemset ( dpb -> buffer [ i ]. pAllocatedData, ( MAX_NUM_REF_IDX_L0_ACTIVE + 1 ) * sizeof ( dpbPicture_t ) ) ) == 0 ) return ( MEMORY_ALLOCATION_ERROR ) ; memset ( dpb -> buffer [ i ]. pAllocatedData, 0, ( MAX_NUM_REF_IDX_L0_ACTIVE + 1 ) * sizeof ( dpbPicture_",0
1679,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_in = * addrlen ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ; if ( <S2SV_ModEnd> oe_syscall_getpeername_ocall ( & <S2SV_ModStart>, addrlen_in, & addrlen_out <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> ) ; } if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; * addrlen = addrlen_out ;",0
1680,,1
1681,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
1682,<S2SV_ModStart> ( sk ) ; struct ipv6_txoptions * opt_to_free <S2SV_ModStart>! opt ) { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) ; txopt_put ( opt_to_free ) ;,0
1683,"<S2SV_ModStart>, at ; <S2SV_ModEnd> unsigned int i <S2SV_ModStart> uint32_t valign, hdr_size <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> uint32_t valign, hdr_size <S2SV_ModEnd> ; struct cli_exe_section <S2SV_ModStart> j ) { if ( j >= sizeof ( exe_sections ) ) { cli_errmsg ( ""pe_image_section_hdr: <S2SV_blank> j <S2SV_blank> > <S2SV_blank> %d\\n"", j ) ; return CL_ENULLARG ; } <S2SV_ModStart> j ) { if ( j >= sizeof ( exe_sections ) ) { cli_errmsg ( ""pe_image_section_hdr: <S2SV_blank> j <S2SV_blank> > <S2SV_blank> %d\\n"", j ) ; return CL_ENULLARG ; } <S2SV_ModStart>, j ) { if ( j >= sizeof ( exe_sections ) ) { cli_errmsg ( ""pe_image_section_hdr: <S2SV_blank> j <S2SV_blank> > <S2SV_blank> %d\\n"", j ) ; return CL_ENULLARG ; } } else { if ( j >= sizeof ( exe_sections ) ) { cli_errmsg ( ""pe_image_section_hdr: <S2SV_blank> j <S2SV_blank> > <S2SV_blank> %d\\n"", j ) ; return CL_ENULLARG ; }",0
1684,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ; while ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> 5 ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; return",0
1685,"<S2SV_ModStart> ; if ( striplength > max_striplength ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> %lu <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; }",0
1686,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
1687,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; <S2SV_ModEnd> rw = ( <S2SV_ModStart> ; tempWidth = ROUND_UP_TO ( context -> width, 8 ) ; ccl = context -> ColorLossLevel ; for ( y = 0 ; y < context -> height ; y ++ ) { src = data + ( context -> height - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ y * rw ] + y * context -> width ; coplane = context -> priv -> PlaneBuffers [ y * rw ] + y * context -> height ; cgplane = context -> priv -> PlaneBuffers [ y * rw ] + y * context -> width ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ y * rw ] + y * scanline ; coplane = context -> priv -> PlaneBuffers [ y * rw ] + y * context -> width ; cgplane = context -> priv -> PlaneBuffers [ y * rw ] + y * context",0
1688,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int,0
1689,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1690,<S2SV_ModStart> = 0 ; ( ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { yr_error ( yr_malloc ( sizeof ( RE_AST ) ) ) ; return ERROR_INSUFFICIENT_MEMORY ; } ( ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { yr_error ( yr_malloc ( sizeof ( RE_AST ) ) ) ; return ERROR_INSUFFICIENT_MEMORY ; } ( * re_ast ) -> root_node = yr_malloc ( sizeof ( RE_NODE ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { yr_error ( yr_malloc ( sizeof ( RE_NODE ) ) ) ; return ERROR_INSUFFICIENT_MEMORY ; },0
1691,"<S2SV_ModStart> cib, & private -> command, NULL <S2SV_ModEnd> ) ; } <S2SV_ModStart> cib, & private -> callback, NULL <S2SV_ModEnd> ) ; } <S2SV_ModStart> pcmk_ok ) { if ( private -> command. session == NULL ) { xmlNode * hello = cib_create_op ( 0, private -> command. token, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; } else { xmlNode * hello = cib_create_op ( 0, private -> callback. token, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( hello, F_CIB_CLIENTNAME, private -> command. session ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. session, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. token, CRM_OP_REGISTER, NULL, NULL, 0,",0
1692,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
1693,"<S2SV_ModStart> 3 } ; int <S2SV_ModEnd> sr = 0 <S2SV_ModStart> bsize ] ; const int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; if ( quart_frm < MIN ( cpi -> common. width, cpi -> common. height ) ) ++ sr ; while ( ( sr << step_param ) < MAX_FULL_PEL_VAL ) ++ sr ; step_param += sr ; further_steps -= sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv",0
1694,"<S2SV_ModStart> ntreg_header ) ; if ( h -> addr == 0 ) { SET_ERRNO ( EPERM, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; }",0
1695,"<S2SV_ModStart> ; if ( merge_dir_params ( parent, child ) == 0 ) { ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", parent, child, merged ) ; return NULL ; } if ( merge_dir_params ( parent, child ) == 0 ) { ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", parent, child, merged ) ; return NULL ; }",0
1696,"<S2SV_ModStart> ( used_address && msg_sys -> msg_name && <S2SV_ModStart> -> name, msg_sys <S2SV_ModEnd> -> msg_name, <S2SV_ModStart> -> msg_namelen ; if ( msg_sys -> msg_name ) <S2SV_ModStart> -> name, msg_sys <S2SV_ModEnd> -> msg_name,",1
1697,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
1698,"<S2SV_ModStart>, one, number_planes_filled2, number_planes_filled_2, number_planes_filled_3, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_2, number_planes_filled_3, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4, number_planes_filled_4",0
1699,"<S2SV_ModStart>!= 0 || ( r = sshbuf_put_u32 ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> block_size",0
1700,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1701,"<S2SV_ModStart> user_data ) { struct g_hash_table * client_list = g_hash_table_new ( ) ; <S2SV_ModStart> num_clients ) ; g_hash_table_remove ( client_list, client -> id ) ; <S2SV_ModStart> user ) ; g_hash_table_remove ( client_list, client -> name ) ; g_hash_table_remove ( client_list, client -> user ) ; g_hash_table_remove ( client_list, client -> id ) ; g_hash_table_remove ( client_list, client -> callback_id ) ; g_hash_table_remove ( client_list, client -> user ) ; g_hash_table_remove ( client_list, client -> name ) ; g_hash_table_remove ( client_list, client -> id ) ; g_hash_table_remove ( client_list, client -> user ) ; g_hash_table_remove ( client_list, client -> name ) ; g_hash_table_remove ( client_list, client -> user ) ; g_hash_table_remove ( client_list, client -> user ) ; g_hash_table_remove ( client_list",0
1702,"<S2SV_ModStart> * uv ; luaL_assert (! isblack ( thread ) ) ; thread -> twups = NULL ; for ( uv = thread -> openupval ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; markvalue ( g, uv -> v ) ; } } } p = & g -> twups ; if ( * p == NULL ) { lua_assert (! iswhite ( thread ) ) ; thread -> twups = thread ; for ( uv = thread -> openupval ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; } else { <S2SV_ModEnd> if (!",0
1703,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
1704,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1705,<S2SV_ModStart> old_type ) ) { if ( new_upperdir -> d_inode!= old_dentry -> d_inode ) { if ( new_upperdir -> d_inode!= newdentry -> d_inode ) { if ( new_upperdir -> d_inode!= old_dentry -> d_inode ) { if ( new_upperdir -> d_inode!= newdentry -> d_inode ) { if ( new_upperdir -> d_inode!= old_dentry -> d_inode ) { if ( new_upperdir -> d_inode!= old_dentry -> d_inode ) { if ( new_upperdir -> d_inode!= newdentry -> d_inode ) { if ( new_upperdir -> d_inode!= old_dentry -> d_inode ) { if ( new_upperdir -> d_inode!= newdentry -> d_inode ) { if ( new_upperdir -> d_inode!= old_dentry -> d_inode ) { if ( new_upperdir -> d_inode!= old_dentry -> d_inode,0
