,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; if ( n2size < 1 ) <S2SV_ModEnd> { applog (,0
1,<S2SV_ModStart> case EAP_TYPE_TTLS : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> 2 ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_TTLS : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_TTLS : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 5 ) ;,0
2,<S2SV_ModStart> ; if (! wmi -> dev ) return - EINVAL ; if (,0
3,<S2SV_ModStart> imm ) ; <S2SV_ModEnd> return - EINVAL,0
4,<S2SV_ModStart> if ( ( skb ) <S2SV_ModEnd> ( skb ),0
5,"<S2SV_ModStart>, offset ; av_feof ( f ) ) ;",0
6,<S2SV_ModStart> * tpg ; u16 <S2SV_ModEnd> tpgt ; int <S2SV_ModStart> ; if ( kstrtou16 <S2SV_ModEnd> ( name + <S2SV_ModStart> ) || tpgt >= VHOST_SCSI_MAX_TARGET <S2SV_ModEnd> ) return ERR_PTR,1
7,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
8,"<S2SV_ModStart> { u32 data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; kvm_read_guest_cached ( vcpu -> kvm, & <S2SV_ModEnd> vcpu -> arch <S2SV_ModStart>. apic -> vapic_cache, & data, sizeof ( u32 ) <S2SV_ModEnd> ) ; apic_set_tpr",1
9,<S2SV_ModStart> src ) ; __switch_to_tm ( src ) ; tm_recheckpoint_new_task ( src ) ;,1
10,"<S2SV_ModStart> ( c ) i ++, <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; <S2SV_ModEnd> return 0 ;",0
11,"<S2SV_ModStart> ( sb, KERN_ERR,",1
12,"<S2SV_ModStart> ipv6_select_ident ( fptr, ( struct rt6_info * ) skb_dst ( skb )",1
13,"<S2SV_ModStart>, <S2SV_ModEnd> struct perf_sample_data <S2SV_ModEnd> ( regs,",0
14,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ] ) { int <S2SV_ModEnd> ext_block_to_cpu ( ext4_block_block_block ) ; return 0 ; } <S2SV_ModStart> ) ) { free ( buf ) ;,0
15,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int16_t input ( tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * output ) { tran_low_t <S2SV_ModEnd> output ( tran_low_t <S2SV_ModStart> 4 ] = ( tran_low_t ) tran_low_t <S2SV_ModEnd> * output [ <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) ; tran_low_t ) ; tran_low_t <S2SV_ModEnd> * output [ <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t )",0
16,<S2SV_ModStart> == 0 ) sanitize_dead_code ( env ) ; if ( ret == 0 ),1
17,"<S2SV_ModStart> int i ; if (! config -> sample_rate ) { strcpy ( wpc -> error_message, ""sample <S2SV_blank> rate <S2SV_blank> cannot <S2SV_blank> be <S2SV_blank> zero!"" ) ; return FALSE ; }",1
18,"<S2SV_ModStart> = 0 ; unsigned char sense_buffer [ SCSI_SENSE_BUFSIZE ] ; <S2SV_ModStart> cgc -> sense_buffer, & sense ) ; if ( cgc -> sense ) sense ) sense_buffer [ sense ] = sense ; <S2SV_ModStart> cgc -> sense <S2SV_ModEnd> ) sense ; if",0
19,<S2SV_ModStart> ) ++ ; if ( # endif,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION ( VP9EncoderConfig <S2SV_ModEnd> * const VP9EncoderConfig <S2SV_ModStart> * const VP9_COMMON * const VP9_COMMON * cpi <S2SV_ModEnd>, int cpi <S2SV_ModStart>, sizeof ( cpi ) <S2SV_ModEnd> ) { int <S2SV_ModStart> = 1 ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart>, sizeof ( cpi -> oxcf. <S2SV_ModStart> = 1 ; memset <S2SV_ModEnd> ( & cpi -> <S2SV_ModStart>, sizeof ( cpi -> oxcf. <S2SV_ModEnd> ) ) ; <S2SV_ModStart> = 1 ; memset <S2SV_ModEnd> ( & cpi -> <S2SV_ModStart> = 1 ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> + 1 ) ; memset <S2SV_ModEnd> ( & cpi -> <S2SV_ModStart> s_len, 0, sizeof ( cpi -> oxcf. <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ; } } # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. sf_level == 2 ) { memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> -> oxcf. subsampling_level ) ; memset <S2SV_ModEnd> ( & cpi -> <S2SV_ModStart>, sizeof ( cpi -> oxcf. last_frame ) ; } else if ( cpi ->",0
21,"<S2SV_ModStart> len ) ; luaL_checkstack <S2SV_ModEnd> ( L,",0
22,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_write <S2SV_ModEnd> ( wv_tree, <S2SV_ModStart> ) { vpx_write <S2SV_ModEnd> ( wv_tree,",0
23,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ralg -> seedsize,1
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (,1
25,<S2SV_ModStart>,0
26,<S2SV_ModStart> char * debug ; debug = 0 ; <S2SV_ModStart> break ; } debug = 0 ;,0
27,"<S2SV_ModStart> esr ) { siginfo_t info ; void __user * pc = ( void __user * ) instruction_addr ; <S2SV_ModStart>, regs ) ; void __user <S2SV_ModEnd> ; info. <S2SV_ModStart>, regs, 0 <S2SV_ModEnd>, regs,",0
28,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> if ( length!= 0 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> if ( length < <S2SV_ModEnd> ) { ND_PRINT ( <S2SV_ModStart> ) ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
29,<S2SV_ModStart> intf ) { if (! alt -> desc. bInterfaceNumber ) return - ENODEV ;,0
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_pc_to_len ( struct <S2SV_ModStart> char * to, int tolen <S2SV_ModStart> = 0 ; if ( tolen == 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> += 2 ; tolen = comp_len ; tolen -= comp_len ; <S2SV_ModStart> = '\\0' ; tolen = comp_len ; tolen -= comp_len ; <S2SV_ModStart> ++ ) return - ENAMETOOLONG <S2SV_ModEnd> ; } <S2SV_null>",0
31,<S2SV_ModStart> == - 2 <S2SV_ModEnd> ) { err,0
32,<S2SV_ModStart> unsigned long flags ; if ( qid > NVMET_NR_QUEUES ) return NULL,1
33,"<S2SV_ModStart> -> bdev ; retval = usb_register_dev ( interface, & interface -> minor ) ; if ( interface -> desc. bNumEndpoints ) { dev_err ( & interface -> dev, ""%s\\n"", interface -> minor ) ; retval = - EINVAL ; goto error ; } dev_intfdata <S2SV_ModEnd> ; retval =",0
34,<S2SV_ModStart> < 1 || vstart + vdaux < vstart <S2SV_ModEnd> ) { sdb_free,1
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int new_key_key ; <S2SV_ModStart> ) return false ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
36,<S2SV_ModStart> = create_spnego_ctx ( 1,1
37,"<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if ( addr -> l2tp_family!= AF_INET <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> ret = - <S2SV_ModStart> ( sk ) ; if (! sock_flag ( sk, SOCK_ZAPPED ) ) goto out",1
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> intra_init ( unsigned <S2SV_ModStart> ) { unsigned long <S2SV_ModEnd> max_reserve = ( unsigned <S2SV_ModStart> unlock ) ; return 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
39,"<S2SV_ModStart>, _ ( GTK_RESPONSE_CANCEL ), GTK_RESPONSE_CANCEL <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ), GTK_RESPONSE_CANCEL <S2SV_ModEnd> ) ; if",0
40,"<S2SV_ModStart> = str ; memcpy <S2SV_ModEnd> ( tm,",0
41,<S2SV_ModStart> == - 1 ) { <S2SV_ModStart> ) ) ; },0
42,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x51 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> dvb_usb_generic_rw <S2SV_ModEnd>, 1, <S2SV_ModStart> ; if ( d <S2SV_ModEnd> -> fe_adap )",0
43,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,0
44,<S2SV_ModStart> } } } caseS2SV_null> <S2SV_null> <S2SV_null>,0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
46,"<S2SV_ModStart> tsample_t s ; uint16 bps = 0 ; ( void ) TIFFGetField ( in, TIFFTAG_BITSPERSAMPLE, & bps ) ; if ( bps!= 8 ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can <S2SV_blank> only <S2SV_blank> handle <S2SV_blank> BitsPerSample=8 <S2SV_blank> in <S2SV_blank> %s"", ""cpContig2SeparateByRow"" ) ; return 0 ; }",1
47,"<S2SV_ModStart> ) ; struct hugepage_subpool * spool = ( struct hugepage_subpool <S2SV_ModEnd> * ) page_private <S2SV_ModStart> hugetlb_lock ) ; hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, 1 )",1
48,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) { return AVERROR_EOF ; } if (,1
49,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return try_get_page <S2SV_ModEnd> ( buf ->,1
51,"<S2SV_ModStart>, cp, ep2, map, nmap ) ; } else cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> < ep2 ) <S2SV_ModEnd> ND_PRINT ( (",1
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
53,<S2SV_ModStart> ),0
54,<S2SV_ModStart> config -> pm_max_requests ; fpm_globals. listening_socket = dup ( wp -> listening_socket ),1
55,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_frame ( TWO_PASS <S2SV_ModStart> ) { const FIRSTPASS_STATS * twopass = & twopass -> frame_stats ; const FIRSTPASS_STATS * next_frame = next_frame_frame_stats ( twopass, <S2SV_ModEnd> pcnt_inter_frame ) <S2SV_ModStart> ; if ( next_frame == FIRSTPASS_STATS ) { const FIRSTPASS_STATS * next_frame = next_frame ; next_frame = next_frame_frame_stats ( twopass, next_frame ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) { next_frame_stats = <S2SV_ModEnd> ( twopass -> <S2SV_ModStart> pcnt_inter_motion_inter, <S2SV_ModEnd> ( twopass, <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( pcnt_inter_inter_frame ) { <S2SV_ModStart> ; } <S2SV_null> <S2SV_null>",0
56,<S2SV_ModStart> 0 ; } err = handle -> h_err ; <S2SV_ModStart> h_transaction ) { rc <S2SV_ModEnd> = jbd2_journal_stop ( <S2SV_ModStart> ) ; return err? err : rc <S2SV_ModEnd> ; } sb <S2SV_ModStart> t_journal -> j_private <S2SV_ModEnd> ; rc =,1
57,"<S2SV_ModStart> inode, flags <S2SV_ModEnd> ) ; if",0
58,<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = args -> valuelen ;,1
59,<S2SV_ModStart> crypto_mode ) ; if ( name == NULL ) return - EINVAL ;,0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> len - 2 ; if ( len < stlv_len ) goto trunc ; ND_TCHECK2 ( * ( tptr ), stlv_len ) <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> case ISIS_SUBTLV_SPB_LEN : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> len ) { if ( stlv_len < ISIS_SUBTLV_SPB_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> case ISIS_SUBTLV_SPB_LEN : if ( stlv_len < ISIS_SPB",0
61,<S2SV_ModStart> ) { return TEMP_FAILURE_RETRY <S2SV_ModEnd> ; } if,0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,<S2SV_ModStart> == 12 && ( <S2SV_ModStart> flags & TH_SYN ),1
64,<S2SV_ModStart> -> ipc_socket ; int procfd = payload -> procfd ; <S2SV_ModStart> & LXC_ATTACH_LSM ) { <S2SV_ModEnd> int lsm_label = <S2SV_ModStart> init_ctx -> lsm_label ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
65,<S2SV_ModStart> = 0 ; int len = 0 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
66,"<S2SV_ModStart> ( header -> biBitCount == 0 ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> biBitCount <S2SV_blank> %d\\n"", 0 ) ; return OPJ_FALSE ; } if ( header ->",1
67,<S2SV_ModStart> NULL ; } sas_probe_devices ( port ) ;,1
68,<S2SV_ModStart> 0 ) { if ( image -> colors < tga_info. colormap_index ) image -> colors = tga_info. colormap_index ;,1
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> ENOBUFS ; } memset ( & line, 0, sizeof ( line ) ) ;",1
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_blk_ioctl ( bd, cmd ) ; if ( ret < 0 ) return ret ;",1
72,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> write_decode ( s <S2SV_ModStart> ) ; } if ( Stream_GetRemainingLength ( s, 4 ) <S2SV_null> <S2SV_null>",0
73,<S2SV_ModStart> * ureq ; unsigned <S2SV_ModStart> return - EFAULT ; if ( req_len > ( sizeof ( struct qeth_hdr ) ) ) return - EINVAL,0
74,"<S2SV_ModStart> int m ; if ( n < 0 ) { jas_deprecated ( ""negative <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_pad"" ) ; }",1
75,<S2SV_ModStart> j ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ) ) ; },0
76,<S2SV_ModStart> av_log ( mxf -> fc,1
77,"<S2SV_ModStart> mntent, path, rootfs",1
78,<S2SV_ModStart> + 10 ; if ( psf -> fileoffset < psf -> filelength ) { <S2SV_ModStart> ; } ; } ;,1
79,"<S2SV_ModStart> -> header_len ; ND_TCHECK ( p [ 0 ] ) ; <S2SV_ModStart> case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ], 2 ) ; <S2SV_ModStart> case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ], 2 ) ;",0
80,<S2SV_ModStart> NF_STOLEN ; return err == 0? NF_ACCEPT : NF_DROP <S2SV_ModEnd> ; } <S2SV_null>,1
81,"<S2SV_ModStart> * up ; int klen, ulen ; <S2SV_ModStart> rta ) ; klen = <S2SV_ModEnd> xfrm_replay_state_len ( klen <S2SV_ModStart> rta ) ; memcpy ( up, klen ) ;",0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> ; } } io -> io_cleanup = port_cleanup ;,0
83,<S2SV_ModStart> ; } } if ( type == MagickFalse ) { case MagickFalse ; break ; },0
84,<S2SV_ModStart> = btl ; <S2SV_ModEnd> if ( bd,0
85,"<S2SV_ModStart> ( buf = jas_alloc3 ( bufsize, sizeof ( buf ) )",0
86,<S2SV_ModStart> ; if ( vpx_codec_alg_priv_t * ) <S2SV_ModEnd> ) break ;,0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> be <S2SV_blank> not <S2SV_blank> zero.\\n"" ) ; netbk_fatal_tx_err ( vif",0
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> < 0 ) <S2SV_ModEnd> bitmap_pos = ext_index_add_object <S2SV_ModStart> name ) ; <S2SV_ModEnd> bitmap_set ( base",1
89,"<S2SV_ModStart> xfr_cmd, fname <S2SV_ModEnd> ) ; free",1
90,<S2SV_ModStart> mixer ) { snd_usb_mixer_disconnect ( mixer ) ;,1
91,<S2SV_ModStart> -> private ; struct <S2SV_ModEnd> if ( mutex_lock ( & <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_set ( & <S2SV_ModStart> 0 ) ) { err = - EINVAL ; goto out ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { kfree ( rollover ) ; return - EINVAL ; } <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover ) ; <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_long <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_long_set ( & <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_long <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_long,0
92,<S2SV_ModStart> ; newnp -> ipv6_txoptions = NULL ; newnp ->,0
93,<S2SV_ModStart> ; if ( page ) <S2SV_ModEnd> == NULL ),0
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
95,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
96,"<S2SV_ModStart> ( interface, ENC28J60_TX_BUFFER <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_ECON1_START ) ; enc28j60WriteReg ( interface, ENC28J60_START ) ; if ( ENC28J60_START ) { <S2SV_ModEnd> ( interface, ENC28J60_TXR ( interface <S2SV_ModStart> ( interface, ENC28J60_START ), ENC28J60_START ) ; enc28j60WriteReg ( interface, ENC28J60_STX <S2SV_ModEnd> ) ; }",0
97,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
98,<S2SV_ModStart> } if (! page_name_name ( page ) ) { return NULL ; } else { <S2SV_ModStart> ) ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
99,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) <S2SV_ModEnd> ) if (,0
100,<S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ;,1
101,"<S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, cgroup ) ) { ret = - ENOENT ; goto out ; } if (!",1
102,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int miv_stride, <S2SV_ModStart> int miv_stride, vpx_tree, vpx_free ( vpx_prob <S2SV_ModEnd> ) { int <S2SV_ModStart> int yv_stride, mb <S2SV_ModEnd> yv_stride, mb <S2SV_ModStart> yv_stride ) ; const int yv_stride = vpx_free ( mb <S2SV_ModEnd> ) ; int <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( yv_stride, <S2SV_ModStart> y ) ; vpx_free ( mb <S2SV_ModEnd> ) ; }",0
103,"<S2SV_ModStart> ) ) ; memset ( ptr, 0, sizeof ( * ptr ) ) ;",0
104,<S2SV_ModStart> : if (! cap_issubset ( new -> cap_permitted ) ) return 0 ; if (,0
105,<S2SV_ModStart> bh ) { <S2SV_ModEnd> int error = <S2SV_ModStart> error ; struct mb_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> * bh ; <S2SV_ModEnd> int error = <S2SV_ModStart> error ) { <S2SV_ModEnd> error = mb_cache_entry <S2SV_ModStart> error ) ; <S2SV_ModEnd> return error ;,0
106,<S2SV_ModStart> rlen ) ; if (! rlen ) return - 1 ;,0
107,<S2SV_ModStart> tf = ( <S2SV_ModEnd> luaY_parser ) (,1
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.",1
110,"<S2SV_ModStart> ; dl = kzalloc <S2SV_ModEnd> ( size,",1
111,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rtr_rtr_pki_rtr_pdu ( const <S2SV_ModStart> * tptr ) { ND_TCHECK_8BITS ( * tptr ) ; <S2SV_ModStart> * tptr ) ; if ( len < sizeof ( * tpki_rtr_pki_rtr_rtr_pdu ) ) { ND_PRINT ( ( ndo, ""%s <S2SV_blank> (%u)"", tptr ) ) ; return len ; } if ( len < sizeof ( * tpki_rtr_pki_rtr_pdu ) ) { ND_PRINT ( ( tptr ) ) ) ; return len ; }",0
113,"<S2SV_ModStart> ; int n <S2SV_ModEnd> ; skb -> <S2SV_ModStart> rose_facilities_struct ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> data + ROSE_CALL_REQ_FACILITIES_OFF, skb -> len - ROSE_CALL_REQ_FACILITIES_OFF, <S2SV_ModEnd> & facilities )",1
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,<S2SV_ModStart> ( optstrn + 1 <S2SV_ModEnd> ) ; },0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } if",0
117,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; int ret <S2SV_ModStart> ) ; } o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; o2nm_lock_subsystem ( ) ;,0
118,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",1
119,"<S2SV_ModStart> == '/' ) { archive_set_error ( & a -> archive, ARCHIVE_FAILURE_RETRY ( ) ) ; } if (",0
120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TPM2S2SV_null> TPMS2SV_null> TPM2SV_null> TPM_RC <S2SV_ModEnd> ) { TPM_RC <S2SV_ModStart> ; int rc = TPM_RC_RC_MD * md ; int rc = TPM_RC_RC_RC_RC_RETURN ; if (! md ) { TPM_RC_RC rpm_to_init ( & tpm2bmac, md, md, md, NULL ) ; return TPM_RC_MD ; } <S2SV_ModStart> ) ) { TPM_RC_RC_RETURN : if (! rc ) { TPM_RC_RC_RETURN tpm_to_init ( & md, md, md, HMAC_init_init ( md ) ) ; return TPM_RC_MD ; } <S2SV_ModStart> ) ) { TPM_RC_RC_DIGEST : if (! rc ) return TPM_RC_RC_RC_RC_RC_DIGEST ; HMAC_RC_DIGEST : rc = HMAC",0
121,"<S2SV_ModStart> inmem )? jas_stream_memopen2 <S2SV_ModEnd> ( 0, <S2SV_ModStart> 0 ) ) { jas_memopen2 <S2SV_ModEnd> ( jas_stream_memopen2,",0
122,<S2SV_ModStart> s ) { if ( s == 0 ) return ( ( void * ) NULL ) ;,1
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! ib_safe_file_access ( fp ) ) ) return - EACCES ; if (,1
124,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",0
125,<S2SV_ModStart> ( peer ) peer = maybe_get_net <S2SV_ModEnd> ( peer ),1
126,<S2SV_ModStart> } while ( ( i < ( int ) header_buf_used ) && ( <S2SV_ModStart> ] == '\\n' ),1
127,<S2SV_ModStart> m_family ) ; if ( proto == LLDP_MGMT_ADDR_NONE ) continue <S2SV_ModEnd> ; if (,1
128,<S2SV_ModStart> ++ ) { if ( datalen < 1 ) goto out_free ;,0
129,<S2SV_ModStart> default_auto_asconf ) { spin_lock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ; <S2SV_ModStart> do_auto_asconf = 1 ; spin_unlock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) <S2SV_ModStart> ; } else { <S2SV_ModStart> = 0 ; },1
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> read_profile ( s <S2SV_ModStart> ) { return AVERROR_INVALIDDATA ; } <S2SV_ModEnd> if ( s <S2SV_ModStart> ) { return AVERROR_INVALIDDATA ;,0
131,<S2SV_ModStart> uint32_t i ; if (! index ) return - ENOMEM,0
132,<S2SV_ModStart> rule ) ; if (! entry -> lsm [ lsm_rule ]. rule ) return - EINVAL ;,1
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> function <S2SV_blank> id"" ) ; int poll_interval = 0 ; int poll_interval = 0 ; int poll_poll_interval <S2SV_ModStart> "" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> {\\n"" ( int poll_interval ) ; poll_interval = 0 ; poll_interval = poll_poll_interval <S2SV_ModEnd> "" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> = <S2SV_blank> "" ""\\n"" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }\\n"" ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> = <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", poll_interval ) ; assert ( poll_interval ) ;",0
136,"<S2SV_ModStart> * xdr, size_t <S2SV_ModEnd> int error ; <S2SV_ModStart> out ; int error <S2SV_ModEnd> ; if ( <S2SV_ModStart> if (! xdr_len ) { error = - EINVAL ; goto out ; } if ( ( rp [ i ] & acl_len + 1 ] ) ) { error = - EINVAL ; goto out ; } <S2SV_ModStart> if ( ( ( rp [ i ] ) + 1 <S2SV_ModEnd> ) ) { <S2SV_ModStart> cnt ++ ; } if ( ( rp [ i ] ) + 1 ] ) ) { log = - ENOMEM ; goto out ; } rp [ i ] = rp [ i ] ;",0
137,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,1
138,<S2SV_ModStart> ; while ( ( i < to_read ) && <S2SV_ModStart>!= 0 ) <S2SV_ModEnd> ) { i,1
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,<S2SV_ModStart> [ plane ] && in -> linesize [ plane ],1
141,"<S2SV_ModStart> ( szFileName, pszFileName, <S2SV_ModStart> ) - 5 <S2SV_ModEnd> ) ; }",1
142,<S2SV_ModStart> } if ( state == NULL ) { err = - 1 ; goto cleanup ; } if (,0
143,<S2SV_ModStart> >> 2 ; if ( q + o >= e ) goto out ;,0
144,"<S2SV_ModStart> __be32 new_saddr ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. srr ) daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",1
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> ) ) ; if ( len < sizeof ( struct eigrp_common_header ) ) { ND_PRINT ( ( ndo, ""Unknown <S2SV_blank> < <S2SV_blank> %u)"", eigrp_header ) ) ; return ; } <S2SV_ModStart> ) ) ; return ; }",0
147,<S2SV_ModStart> = addr ; <S2SV_ModEnd> if ( addr,0
148,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int sb_table_table_table_table ( <S2SV_ModStart> int sbi, table_start <S2SV_ModEnd> ) ; int",0
149,"<S2SV_ModStart>, '/' ) ; if ( ptr == NULL ) return ( ENOENT ) ; ptr ++ <S2SV_ModEnd> ; rw_exit (",1
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; if ( flags & EXT4_GET_BLOCKS_CONVERT ) split_flag |= EXT4_EXT_DATA_VALID2 ;,1
151,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } if",0
152,<S2SV_ModStart> NULL ; } <S2SV_ModEnd> return 0 ;,0
153,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> final ) ; rcu_read_unlock ( ) ;",0
154,"<S2SV_ModStart> = 0.0 ; uint32 nstrips = 0, ntiles = 0 ; uint32 <S2SV_ModEnd> planar = 0 <S2SV_ModStart>! read_buff ) { if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> buffer"" ) ; return ( - 1 ) ; }",0
155,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> } # if CONFIG_VP9_ENCODEC_HIGHBITSV_null> <S2SV_null> static <S2SV_ModStart> arg ) { struct stream_null> <S2SV_null> static int <S2SV_ModEnd> opt_null> <S2SV_null> static_null>,0
156,<S2SV_ModStart> options. disable_forwarding ||! use_privsep,1
157,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
158,"<S2SV_ModStart> ) ; } if ( ( ( MagickSizeType ) image -> columns * image -> rows ) > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",1
159,"<S2SV_ModStart> errout ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ""xxxx"" ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart> -> gr_ctx. length = 4 <S2SV_ModEnd> ; gr ->",1
160,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; <S2SV_ModStart> -> i_data, ext_size ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size <S2SV_ModEnd> ) ; neh",1
161,<S2SV_ModStart> ; int rc <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) return 0 <S2SV_ModEnd> ; if (,0
162,<S2SV_ModStart> ; int ret ; if ( current_chrooted ( ) ) return - EPERM,1
163,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
164,<S2SV_ModStart> c -> nreslevels <= <S2SV_ModEnd> s -> reduction_factor,0
165,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
166,<S2SV_ModStart> ; bool is_drop_n_vnet = false ; bool do_vnet <S2SV_ModStart> < 0 ) { do_vnet = false ; bool do_vnet_vnet = true ; <S2SV_ModStart> = true ; } <S2SV_ModStart> < 0 ) { <S2SV_ModStart> = 0 ; do_vnet_vnet_vnet ; do_vnet = true ; } <S2SV_ModStart> < 0 ) { do_vnet_vnet <S2SV_ModEnd> ; bool do_vnet,0
167,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> sctp_auth_asoc_init_active_key ( asoc,1
168,<S2SV_ModStart> return ndp_type ; if ( msg_type == 0 ) return false ; else return false ;,0
169,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; int lsm_labelfd = 0 <S2SV_ModEnd> ; int <S2SV_ModStart> = 0 ; int lsm_labelfd = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 0 ; <S2SV_ModEnd> g <S2SV_null> <S2SV_null>,0
170,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
171,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
172,<S2SV_ModStart> -> twopass. <S2SV_ModEnd> cpi ) { <S2SV_ModStart> = 0 ; for ( i = 0 ; i < twopass -> twopass. gf_group ) { cpi -> twopass. gf_group = & cpi -> twopass. gf_group ; cpi -> bits_left = 0 ; } else { int is_left = ( cpi -> twopass. gf_group ) ; cpi -> bits_left = ( cpi -> twopass. gf_group ) ; if ( cpi -> bits_left == 0 ) { gf_group = ( cpi -> gf_group. gf_group ) ; } else { cpi -> twopass. gf_group = ( cpi -> gf_bits ) ; } else { int is_left = ( cpi -> bits_left_left ) ; cpi -> bits_left = ( cpi -> twopass. gf_group_left_bits ) ; cpi -> bits_left = 0 ; } else { cpi -> <S2SV_ModStart> ; } },0
173,"<S2SV_ModStart> } num ++ ; if ( num > MaxAllocSize / ITEMSIZE ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> levels <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num, ( int ) ( MaxAllocSize / ITEMSIZE ) ) ) )",1
174,"<S2SV_ModStart> header, struct mb2_cache_entry <S2SV_ModEnd> * * ph <S2SV_ModStart> ) ; struct mb2_cache_entry * mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> ( ext4_mb_cache, <S2SV_ModEnd> hash ) ;",0
175,"<S2SV_ModStart> { gint64 offset <S2SV_ModEnd> ; char line <S2SV_ModStart> = offset ; return parse_cosine_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> -> phdr, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> wth -> frame_buffer, line",1
176,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
177,<S2SV_ModStart> if ( left == 0 && extend ) return 0 ; if ( left,1
178,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ] ) { int <S2SV_ModEnd> ext_block_to_cpu ( ext4_block_block_block ) ; return 0 ; } <S2SV_ModStart> ) ) { free ( buf ) ;,0
179,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
180,<S2SV_ModStart> * ( buf + sizeof ( hdr ) <S2SV_ModEnd> ) ) { <S2SV_ModStart> - ENOMEM ; goto out ; } <S2SV_ModEnd> copy_from_user ( &,0
181,"<S2SV_ModStart> * buf ; size_t hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) { jas_alloc ( buf, hstartrow <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ( bufsize <S2SV_ModEnd> ) ) {",0
182,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
183,"<S2SV_ModStart> number_colormaps, number_planes, number_planes_filled <S2SV_ModStart> -> rows ; number_planes_filled = ( number_planes + 1 ) == 0 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ( image -> rows <S2SV_ModEnd> ) ; }",0
184,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_mb_cache ) { ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ; sbi -> s_mb_cache = NULL ; } <S2SV_ModEnd> if (!,1
185,<S2SV_ModStart> 0 ) { if (! dev -> desc. bNumEndpoints ) { dev_err ( & GFP_KERNEL ) ; return - EINVAL ; },0
186,"<S2SV_ModStart> ""setregid"" ) ; <S2SV_ModEnd> char * arg <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [",1
187,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) <S2SV_ModStart> ci_parent ) ; else return NULL ;,1
188,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, state, fmode <S2SV_ModEnd> ) ; write_sequnlock",0
189,<S2SV_ModStart> ( pb ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA,1
190,<S2SV_ModStart> >> 2 ; if ( q + o >= e ) goto out ;,0
191,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = &,1
192,<S2SV_ModStart> ) ; } free ( tmpname ) ;,0
193,<S2SV_ModStart> prev ) ; n -> mounts += n -> pending_mounts ; n -> pending_mounts = 0 ;,1
194,<S2SV_ModStart> ; savesegment ( savesegment <S2SV_ModEnd> ) ; fs,0
195,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
196,<S2SV_ModStart> 1 ) ; if ( ps_bitstride == 0 ) { return IHEVCD_ERROR_INVALID_PARAMETER ; },0
197,<S2SV_ModStart> 1u << DB_VECTOR ) | ( 1u << AC_VECTOR,1
198,<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [,0
199,"<S2SV_ModStart> unsigned int flags, struct rt6_info * rt <S2SV_ModStart> ( & fhdr, rt",1
200,<S2SV_ModStart> ( res ) goto err_add_port <S2SV_ModEnd> ; res = <S2SV_ModStart> port ) ; err_add_port : hsr_del_node ( & hsr -> self_node_db ) ;,1
201,<S2SV_ModStart> ; if ( n < 0 ) { continue ; } if (,0
202,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> VP9_HIGHBITDEPTH const vpx_stride <S2SV_ModEnd> ( src, <S2SV_ModStart> * stride, vpx_free ( src <S2SV_ModEnd> ) ; int",0
203,<S2SV_ModStart> ; if (! iov -> iov_base ) return 0 ; if (,0
204,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { return assign_eip_far ( ctxt, dst, ctxt -> mode == X86EMUL_MODE_PROT64 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
205,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
206,"<S2SV_ModStart> ; remaining = tvb_reported_length_remaining <S2SV_ModEnd> ( tvb,",1
207,<S2SV_ModStart> iovec ) { <S2SV_ModEnd> if ( i,0
208,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
209,<S2SV_ModStart> 0 ) { if ( strlen ( strp <S2SV_ModEnd> ) > 1 ),0
210,<S2SV_ModStart> ; if ( pmc_overflow ( val ) <S2SV_ModEnd> ) write_pmc (,1
211,"<S2SV_ModStart> ( * b + len, * avail - len <S2SV_ModEnd>, nl )",1
212,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> char * f ) { const char * * * p ; size_t base_name = NULL ; <S2SV_ModStart> ++ ) { if (! strcmp ( f, & PyErr_name ) ) { return NULL ; } <S2SV_ModStart> i ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> ( f ) ) { free ( f ) ; return NULL ; } <S2SV_ModEnd> if ( f",0
213,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
214,"<S2SV_ModStart> string ), <S2SV_ModEnd> c = c",0
215,"<S2SV_ModStart> == 0 ) mark_key_instantiated ( key, 0 <S2SV_ModEnd> ) ; up_write",1
216,<S2SV_ModStart> <= * len && plen > 0,1
217,<S2SV_ModStart> ; args. rmtvaluelen = valuelen ; args.,1
218,<S2SV_ModStart> ; if ( <S2SV_ModEnd> timeout == NULL <S2SV_ModStart> ; if ( compat_get_timespec <S2SV_ModEnd> ( & ktspec,0
219,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
220,<S2SV_ModStart> ndev ) ; <S2SV_ModEnd> assert ( skb <S2SV_ModStart> ) ) ; return <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
221,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
222,<S2SV_ModStart> } if ( <S2SV_ModEnd> udp_specified && settings,1
223,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
224,<S2SV_ModStart> -> xfer ; } <S2SV_ModEnd> if ( x,0
225,<S2SV_ModStart> found = 0 <S2SV_ModEnd> ; const char <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( found,1
226,"<S2SV_ModStart> int validate_event ( struct pmu * pmu, <S2SV_ModStart> arm_pmu * armpmu <S2SV_ModEnd> ) ) { <S2SV_ModStart> return 1 ; <S2SV_ModEnd> return 1 ;",0
227,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
228,<S2SV_ModStart> j ++ ) { if ( a -> type == szMAPI_BINARY ) <S2SV_ModStart> ) ; } },1
229,"<S2SV_ModStart> u8 * buf ; u8 * buf <S2SV_ModEnd> ; int ret <S2SV_ModStart> = 0 ; buf = kmalloc ( 1, GFP_KERNEL ) ; if (! buf ) return - ENOMEM ; buf [ 1 ] = 0 ; buf [ 1 ] = 0 ; buf [ 1 ] = ( udev -> cpu_cs_register ) buf [ 1 ] = 0 ; if (! buf ) return - ENOMEM ; kfree ( buf ) ; kfree ( buf ) ;",0
230,"<S2SV_ModStart> u_char * ptr, u_int length <S2SV_ModStart> ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ptr ++ ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; if ( ptr < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return NULL ; } <S2SV_ModStart> 16BITS ( ptr ) ; ptr ++ ; if ( ptr < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
231,"<S2SV_ModStart> princ ) ; if ( data_eq_string ( * realm, ""none"" ) &&! data_eq_string ( * realm ) &&! data_eq_string ( * c2, <S2SV_ModEnd> ctx -> data",0
232,<S2SV_ModStart> ; if ( shader_rec_offset < args -> bin_cl_size ||,1
233,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
234,<S2SV_ModStart> vma -> vm_file ) ; down_read ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModStart> ; out : up_read ( & EXT4_I ( inode ) -> i_mmap_sem ) ;,1
235,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
236,<S2SV_ModStart> arg ) { char ch = * arg ; switch ( ch <S2SV_ModEnd> ) { case <S2SV_ModStart> ';' : case '=' : case <S2SV_ModStart> b ++ = ch <S2SV_ModEnd> ; break ;,1
237,<S2SV_ModStart> && nmap ) <S2SV_ModEnd> ND_PRINT ( (,0
238,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
239,<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) < skb -> head +,1
240,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
241,<S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ;,1
242,<S2SV_ModStart> & RCV_SHUTDOWN ) return 0 ; <S2SV_ModEnd> return err ; <S2SV_ModStart> msg_namelen ) ; <S2SV_ModEnd> } skb_free_datagram (,1
243,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
244,<S2SV_ModStart> const buffers [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> int i ; const <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
245,<S2SV_ModStart> goto cleanup ; ret = rfc2253_get_name ( & <S2SV_ModEnd> md -> issuer_dn <S2SV_ModStart> md -> issuer_dn ) ; if ( ret ) goto cleanup ; <S2SV_ModEnd> ret = rfc2253_name <S2SV_ModStart> md -> issuer_dn ) ; if ( ret ) goto cleanup ;,0
246,<S2SV_ModStart> (! npages || base_gfn!= old. base_gfn,1
247,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ru,1
248,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
249,"<S2SV_ModStart> * ni ; u_int length ; ND_TCHECK ( rp -> rip6 ) ; <S2SV_ModStart> case rip6_nets : length_left : length_left = sizeof ( struct rip6 ) - sizeof ( struct rip6 ) ) ; if ( length_left )!= sizeof ( struct rip6 ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; goto trunc ; } <S2SV_ModStart> ni ) ; length_left = sizeof ( rp -> rip6 ) ; length_nets ) { ND_TCHECK ( rp -> rip6_nets ) ; length_left = sizeof ( rp -> rip6 ) ; } <S2SV_ModStart> ni ) ; } ND_TCHECK ( rp -> rip6_nets ) ; if ( length_left )!= sizeof ( rp -> rip6 ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u)"", sizeof ( struct rip6 ) ) ; } <S2SV_ModStart> ni ) { ND_TCHECK ( rp -> rip6 ), sizeof ( rp -> rip6 ) ) ; trunc : if ( rp -> rip6_nets )!= sizeof ( rp ) ) { ND_PRINT ( ( ( (",0
250,<S2SV_ModStart> < 0 ) goto error ; <S2SV_ModEnd> goto set ;,1
251,<S2SV_ModStart> ) { memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( cpi ->,0
252,"<S2SV_ModStart> argc ++ ; retval = bprm_change_interp ( iname, bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> ; interp_file =",1
253,<S2SV_ModStart> ; int iSrc <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> res -> ContribRow <S2SV_ModStart> u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ].,1
254,<S2SV_ModStart> ) ; return u64 <S2SV_ModEnd> ; } <S2SV_null>,0
255,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".cfg\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n""",1
256,<S2SV_ModStart> ) { size_t <S2SV_ModEnd> len = 64,0
257,"<S2SV_ModStart> ( mobj ) { size_t granularity = BIT ( tee_mm_sec_ddr. shift ) ; <S2SV_ModStart>, 0, ROUNDUP ( size, granularity ) ) ; } <S2SV_ModEnd> return mobj ;",1
258,<S2SV_ModStart> -> it_overrun += 1LL <S2SV_ModEnd> << i ;,1
259,"<S2SV_ModStart>, bool n, n <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ) { const n = CHILD ( n, 1 ) ; if ( n ) == '\\0' ) { n = CHILD ( n, n, CHILD ( n ) ) ; if ( CHILD ( n, n ) ) == 0 ) { return NULL ; } else if (",0
260,<S2SV_ModStart> -> dst_frame ; dst_size = 0 ;,0
261,"<S2SV_ModStart> * mi, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> wb ) { const VP9_COMMON * const MACROBLOCKD * const xd = & cpi -> td. mbmi ; const MACROBLOCKD * const xd = & cpi -> mbmi. mbmi_mi ; const MB_MODE_INFO * const xd = & cpi -> mbmi_ext ; <S2SV_ModStart> = mi_row ; vpx_write_bit_mode ( w, xd, xd, bsize, xd ) ; <S2SV_ModEnd> write ( w",0
262,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
263,"<S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; n <S2SV_ModStart> = r -> qiov. size <S2SV_ModEnd> / 512 ; <S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; }",1
264,<S2SV_ModStart> if ( cs >= <S2SV_ModEnd> CQSPI_MAX_CHIPSELECT ) {,1
265,<S2SV_ModStart> ++ ) { if ( ns > 0 ) return ;,0
266,<S2SV_ModStart> ) break ; if ( l > ll ) l = ll ;,1
267,<S2SV_ModStart> out ; } } },0
268,<S2SV_ModStart> ND_TTEST ( * p <S2SV_ModEnd> ) ; if,0
269,<S2SV_ModStart> ( prev ) <S2SV_ModEnd> ; if (,0
270,"<S2SV_ModStart> ret ; uint8_t buffer ; uint8_t * buffer ; buffer = kmalloc ( 1, GFP_KERNEL ) ; if (! buffer ) return - ENOMEM <S2SV_ModEnd> ; dev_dbg ( <S2SV_ModStart>, 1, buffer <S2SV_ModEnd>, 1, <S2SV_ModStart> ret ) ; kfree ( buffer ) ; return <S2SV_ModEnd> ret ; }",0
271,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
272,"<S2SV_ModStart> ; } } s -> append_char ( s, 0 ) ; strncpy <S2SV_ModEnd> ( outbuffer,",1
273,<S2SV_ModStart> ; if ( TEMP ),0
274,<S2SV_ModStart> = 0 ; ( i + 3 ) <S2SV_ModEnd> < sec -> <S2SV_ModStart> = 0 ; ( i + 7 ) <S2SV_ModEnd> < sec ->,1
275,<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_BW_CONSTRAINTS_OLD : if ( subl == 0 ) break ; <S2SV_ModStart> ++ ) { <S2SV_ModEnd> bw. i,1
276,<S2SV_ModStart> if ( pos > 0 ) { <S2SV_ModStart> ) { return ; },0
277,<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( p - low ) { <S2SV_ModStart> low ) ; },0
278,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int bfq_lock_irq ( <S2SV_ModStart> struct bfq ) { <S2SV_ModEnd> if ( bfq <S2SV_ModStart> ) ; },0
279,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
280,"<S2SV_ModStart> ) continue ; if ( vif -> tx. sring -> tx. tx. sring -> req_cons > vif -> tx. sring -> tx. req_cons ) { netdev_err ( vif -> dev, ""Impossible <S2SV_blank> cons <S2SV_blank> size <S2SV_blank> %d\\n"", vif -> tx. sring -> req_cons, vif -> req_cons, vif -> tx. tx. sring -> req_cons, vif -> req_cons, vif -> tx. tx. req_cons, NULL ) ; continue ; } <S2SV_ModStart> 0 ) ) { netdev_err ( vif <S2SV_ModEnd> ) ) ; <S2SV_ModStart> continue ; } <S2SV_ModStart> ) ) ; continue <S2SV_ModEnd> } ret =",0
281,<S2SV_ModStart> ; if ( n < 0 ) { continue ; } if (,0
282,<S2SV_ModStart> xfrm_walk * e <S2SV_ModEnd> ) { struct,0
283,<S2SV_ModStart> conn ) ; if ( <S2SV_ModStart> ( conn )!= 0 ) return,1
284,"<S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_ERROR <S2SV_ModEnd> ) ; struct <S2SV_ModStart> skbk_release ( netbk, pending_idx, XEN_NETIF_RSP_ERROR ) ; <S2SV_ModEnd> if ( netbk <S2SV_ModStart> XEN_NETIF_RSP_ERROR ) ; <S2SV_ModEnd> if ( pending_idx",0
285,,1
286,"<S2SV_ModStart> ) NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; }",0
287,"<S2SV_ModStart> len < 0 <S2SV_ModEnd> ) { syslog <S2SV_ModStart> 1 ; } if ( addr. nl_pid ) { syslog ( LOG_WARNING, ""Received <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> untrusted <S2SV_blank> pid:%u"", addr. nl_pid ) ; continue ; }",1
288,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
289,<S2SV_ModStart> ipc == NULL && client -> session == NULL,1
290,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } if,0
291,"<S2SV_ModStart>, nameptr, lfi, fname, UDF_NAME_LEN <S2SV_ModEnd> ) ; if",1
292,"<S2SV_ModStart> ip_vs_timeout_user t ; memset ( & t, 0, sizeof ( t ) ) ;",1
293,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> ( fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> np -> opt ) ; rcu_read_unlock ( ) ;",0
294,<S2SV_ModStart> ; ssize_t result ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
295,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> if (! caller_is_in_ancestor ( fpath ) ) { ret = - ENOENT <S2SV_ModEnd> ; goto out <S2SV_ModStart> ) ) { ret = - EACCES ; goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> if (! fpath ) { ret = - ENOENT ; goto out ; } if (! <S2SV_ModEnd> ) ret =",0
296,<S2SV_ModStart> ) ) { put_disk ( disk ) ;,1
297,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
298,<S2SV_ModStart> NULL ) { status = MagickFalse ; break <S2SV_ModEnd> ; } image,0
299,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ) ) ; },0
300,<S2SV_ModStart> ; rinfo = kzalloc <S2SV_ModEnd> ( SZ_SG_REQ_INFO *,1
301,"<S2SV_ModStart> ; # endif install_keyword ( ""umask"", & umask_handler ) ;",1
302,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, void )",0
303,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> kfree ( tmpbuf,1
304,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; }",1
305,"<S2SV_ModStart> info = boxinfo <S2SV_ModEnd> ; box -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> jas_eprintf ( ""cannot <S2SV_blank> copy <S2SV_blank> box <S2SV_blank> data\\n"" <S2SV_ModStart> ( tmpstream ) ; box -> ops = & boxinfo -> ops",0
306,"<S2SV_ModStart> * new_size, size_t <S2SV_ModEnd> new_size ) {",0
307,<S2SV_ModStart> ; int copylen = 0 <S2SV_ModEnd> ; if (,0
308,<S2SV_ModStart> ( struct ipv6hdr <S2SV_ModEnd> ) ; unsigned <S2SV_ModStart> while ( offset <S2SV_ModEnd> ) ; struct <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
309,"<S2SV_ModStart> void write_buffer ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> wb ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
310,"<S2SV_ModStart> ], mbmi_count <S2SV_ModEnd> ) ; }",0
311,<S2SV_ModStart> msg -> msg_namelen = 0 ; msg -> msg_namelen = 0 ;,0
312,<S2SV_ModStart> } if ( <S2SV_ModEnd> djrcv_dev -> paired_dj_devices,1
313,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
314,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
315,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> sctp_asconf_ip_chunk_t * addip_chunk_t * addip_hdr <S2SV_ModEnd> ) { sctp_addip_chunk_t <S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_walk_params ( sctp, addip_hdr ) ; if ( param. addip_id == SCTP_PARAM_ERROR ) { sctp_walk_params ( param, param, param. p -> type ) ; if ( err_code == SCTP_ERROR_PARAM_IPV4_IPV4_ADDRESS ) { break ; } case SCTP_ERROR : if ( param. p -> type == SCTP_PARAM_IPV4_ADDRESS || param. p -> type == SCTP_PARAM_ERROR_IPv_IPV4_ADDRESS ) { if ( err_code == SCTP_ERROR_IPV4_ERROR_ERROR_",0
316,"<S2SV_ModStart> 101, ( ""jas_realloc(%x, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",1
317,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
318,<S2SV_ModStart> CPU_FTR_TM_COMP ) && hv_enabled <S2SV_ModEnd> ; break ;,1
319,"<S2SV_ModStart> msicap ) ; memset ( & dev, 0, sizeof ( * msr ) ) ;",0
320,"<S2SV_ModStart> key_name ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. key, HV_KEY_SIZE / 2",0
321,<S2SV_ModStart> -> fd = <S2SV_ModEnd> ndo ) ;,0
322,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
323,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void * mbuf = NULL ; void * user_ptr = NULL ; void * ( void __user * ) arg ; void * parg = NULL ; void * parg = NULL ; void * pbuf = NULL ; void * pbuf = NULL ; if ( void * ) memset ( parg, 0, sizeof ( void * ) mbuf ) arg = 0 ; if ( pbuf ) memset ( parg, 0, 0, sizeof ( void * ) ) arg = 0 ; if ( void * ) arg = NULL ; if ( _IOC_DIR ( cmd ) ) { err = - EINVAL ; goto out ; } else { copy_from_user ( cmd ) ; if ( ( void __user * ) memcmp ( cmd ) memset ( ( cmd ), _IOC_WRITE_SIZE ( void * ) mbuf ) memset ( parg, 0, n ) ; } else { copy_from_user ( void __user * ) arg = NULL ; }",0
324,<S2SV_ModStart> == 0 ) {,0
325,"<S2SV_ModStart> data ) { void * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, buf <S2SV_ModEnd>, size, <S2SV_ModStart> 500 ) ; kfree ( buf ) ; return ret ;",0
326,<S2SV_ModStart> 0 ) { if (! dev -> desc. bNumEndpoints ) { dev_err ( & GFP_KERNEL ) ; return - EINVAL ; },0
327,"<S2SV_ModStart> ) { case GTK_RESPONSE_OK : { file = nautilus_file_get_location ( parameters -> file ) ; nautilus_file_set_metadata ( parameters -> file, NAUTILUS_METADATA_KEY_DESKTOP_TRUSTED, NULL, NULL, NULL, true <S2SV_ModEnd> ) ; }",0
328,<S2SV_ModStart> ; if ( urb -> actual_length > 0 &&,1
329,"<S2SV_ModStart> * server, <S2SV_ModEnd> struct cifs * <S2SV_ModStart> * server, vol ) { <S2SV_ModEnd> struct server -> <S2SV_ModStart> server -> priv_lock ) ; if ( strlen ( ses -> linux_ses_ses_t ) ) continue ; }",0
330,"<S2SV_ModStart> vpx_codec_err_t cfg ; int force_key = 0 ; if ( ctx -> cfg. g_w!= VPX_CODEC_FLAG_PASS <S2SV_ModEnd> ) { if <S2SV_ModStart> ( cfg, cfg -> g_w, cfg. g_w, cfg -> g_w, ctx -> g_w, cfg_w, ctx -> g_w, ctx -> initial_width ) ; if ( ( cfg -> g_pass == ( ctx -> g_h ) || ( cpi -> cfg. g_h!= ( int ) cfg. g_h ) || ( int ) cfg_h > 1 && ( int ) cfg -> g_h ) cfg. g_pass == ( ctx -> g_h ) || ( ctx -> cpi -> initial_mode == VPX_FIRWAYS && ( cpi -> oxcf. g_pass == VPX_RC_CONTEXT ) || ( cpi -> oxcf. g_mode == VPX_FIRSTREAM ) || ( cpi -> rc_mode == VPX_CONTEXT ) || ( ctx -> cpi ->",0
331,<S2SV_ModStart> =='<S2SV_blank>') { input ++ ; } <S2SV_ModEnd> ptr = strchr <S2SV_ModStart> off ) ) { <S2SV_ModStart> ) ) ; },0
332,"<S2SV_ModStart> inode ) ; struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> ; if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",1
333,<S2SV_ModStart> key * keyring ; if ( new -> thread_keyring ) return 0,1
334,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return - ENOMEM,0
335,"<S2SV_ModStart> orig ) ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; <S2SV_ModStart> mrb_io_alloc ( mrb <S2SV_ModEnd> ) ; DATA_TYPE",1
336,<S2SV_ModStart>. key_key = 0 <S2SV_ModEnd> ; if (,0
337,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> if ( cpi <S2SV_ModStart> ) ; } return vpx_free <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ; },0
338,"<S2SV_ModStart> return res ; res = utee_param_to_param ( utc, <S2SV_ModEnd> param, callee_params <S2SV_ModStart>, callee_params ) ; if ( res!= TEE_SUCCESS ) return res",1
339,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; const struct x86_emulate_ops * ops = ctxt -> ops ; const struct x86_emulate_ops * cpl = ctxt -> ops ; cpl = ctxt -> _eip ; ops -> get_segment ( ctxt, & old_cs, & new_desc, NULL <S2SV_ModEnd>, VCPU_SREG_CS ) <S2SV_ModStart>, VCPU_SREG_CS ) <S2SV_ModEnd> ; memcpy ( <S2SV_ModStart> 0 ) ; rc = __load_segment_descriptor <S2SV_ModEnd> ( ctxt, <S2SV_ModStart> sel, VCPU_SREG_CS, cpl, false, & new_desc ) ; if ( rc!= X86EMUL_CONTINUE <S2SV_ModEnd> ) return X86EMUL_CONTINUE <S2SV_ModStart> return X86EMUL_CONTINUE ; rc = assign_eip_far ( ctxt, ctxt -> src. val, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) goto fail ; rc = X86EMUL_CONTINUE ; rc = X86EMUL_CONTINUE ; memcpy ( ctxt",0
340,<S2SV_ModStart> -> band = av_calloc <S2SV_ModEnd> ( reslevel -> <S2SV_ModStart> -> prec = av_calloc <S2SV_ModEnd> ( reslevel ->,1
341,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
342,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
343,<S2SV_ModStart> ; if ( info -> si_code > INT_MAX ) { return - EPERM ; },0
344,"<S2SV_ModStart> * p_tx1 = ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> ( p_image -> <S2SV_ModStart> p_cp -> tdx, <S2SV_ModEnd> p_image -> x0 <S2SV_ModStart> * p_ty0 = ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdy, <S2SV_ModEnd> p_image -> x0 <S2SV_ModStart> * p_ty0 = ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> ( p_image -> <S2SV_ModStart> * p_ty1, <S2SV_ModEnd> p_image -> tdy",0
345,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * create_output_output_name <S2SV_ModStart> * out, <S2SV_ModEnd> char * fname <S2SV_ModStart> char * out, * out, * out, * out, * p <S2SV_ModEnd> ) { int <S2SV_ModStart> ; if ( ( * fname ) == '\\\\' <S2SV_ModEnd> ) { int <S2SV_ModStart> out ; } return 0 ; <S2SV_ModEnd> } } <S2SV_null>",0
346,"<S2SV_ModStart> classes = NULL ; zval * retval <S2SV_ModStart> ) ; } retval = var_var ( retval <S2SV_ModEnd>, & p <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! php_decode ( retval <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!",0
347,<S2SV_ModStart> goto __err ; tu -> qhead = tu -> qtail = tu -> qused = 0 ;,1
348,<S2SV_ModStart> j ] ; if (! zfound ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> j ++ ; zfound = GF_TRUE ; zfound = GF_TRUE ; <S2SV_ModStart> j ] ) { zfound = GF_TRUE ; return GF_TRUE ; },0
349,<S2SV_ModStart>. get_alg_priv ( ctx ) <S2SV_ModEnd> ; if (,0
350,"<S2SV_ModStart> == 0 ) if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; } else <S2SV_ModStart> { uschar * hn ; if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; }",1
351,<S2SV_ModStart> ; if ( info -> si_code > INT_MAX ) { return - EPERM ; },0
352,"<S2SV_ModStart> -> off = strtoull <S2SV_ModEnd> ( p, <S2SV_ModStart> -> filesize = strtoull <S2SV_ModEnd> ( slash +",1
353,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, size_t <S2SV_ModStart> maxw, loopmaxw, offx, loopmaxw, offx, upb ; size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> goto fails ; loopmaxw = img -> comps [ 0 ]. w ; loopmaxw = img -> comps [ 1 ]. w ; loopmaxw = img -> comps [ 0 ]. w ; offx = ( size_t ) img -> comps [ 1 ]. w ; loopmaxw = img -> comps [ i ]. w = img -> comps [ 1 ]. w ; j = img -> comps [ 1 ]. w = ( size_t b ; loopmaxw = ( size_t ) ; loopmaxw = img -> comps [ 1 ]. w & ~ ( size_to_r ) ; loopmaxw = img -> comps [ 1 ]. w = img -> comps [ 1 ]. w ; j = img -> comps [ 1",0
354,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { int <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if ( <S2SV_ModStart> ( state == fmode <S2SV_ModEnd> ) { fmode <S2SV_ModStart> ( state, fmode <S2SV_ModEnd> ) ; }",0
355,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; ssh_dispatch_set ( ssh, SSH2_MSG_KEXINIT, NULL ) ;",1
356,<S2SV_ModStart>,0
357,<S2SV_ModStart> read_info ) ; <S2SV_ModEnd> if ( EOFBlob,1
358,<S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strbase [ 512 <S2SV_ModEnd> ] ; if,0
359,<S2SV_ModStart> intf ) { <S2SV_ModEnd> if ( cdc_ncm_select_altsetting <S2SV_ModStart> - ENODEV ; return <S2SV_ModEnd> cdc_ncm_bind_common ( dev <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
360,<S2SV_ModStart> buf [ i ]. size <S2SV_ModEnd> ) ; if,0
361,<S2SV_ModStart> qpx ) ; if ( qpx ),0
362,"<S2SV_ModStart>, e -> elems, e ->",1
363,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
364,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( p ) ;,0
365,<S2SV_ModStart> q ) { mutex_lock ( & q -> timer_mutex ) ; <S2SV_ModStart> snd_seq_timer_close ( q ) ; mutex_unlock ( & q -> timer_mutex,1
366,"<S2SV_ModStart> int error ; struct ip_options_rcode_rcode * inode = & inode -> i_sb ; <S2SV_ModStart> & bh_blks ) { error = gfs2_trans_buffer ( ip, inode -> i_sb ) ; if ( unlikely ( error ) ) return error ; error = nr_blk_size ( ip -> i_blk_size >> ( ip -> i_blks ) ; if ( unlikely ( error ) ) goto out ; } <S2SV_ModEnd> goto out ;",0
367,<S2SV_ModStart> VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; if ( load -> error ) return ( NULL <S2SV_ModStart> -> real ) || <S2SV_ModEnd> vips_foreign_load_iscompat ( load <S2SV_ModStart> out ) ) { vips_operation_invalidate ( VIPS_OPERATION ( load ) ) ; load -> error = TRUE ; return ( NULL ) ; } <S2SV_ModEnd> vips_image_pipelinev ( load,1
368,<S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
369,<S2SV_ModStart> ; if (! retval ) <S2SV_ModEnd> retval = context,1
370,<S2SV_ModStart> -> priv ; if (! state == NULL ) return - EINVAL ; <S2SV_ModStart> = ) ; <S2SV_ModEnd> return ret ;,0
371,<S2SV_ModStart> service_name_tlv_length ) ; if (! service_name_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if (! miux_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if (! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; },1
372,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct <S2SV_ModStart> m_proxy2SV_null> <S2SV_null> static,0
373,<S2SV_ModStart>,0
374,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
375,"<S2SV_ModStart> ( interface, TEMP_FAILURE_RETRY <S2SV_ModEnd> ) ; if",0
376,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
377,<S2SV_ModStart> len ; } ND_TCHECK_32BITS <S2SV_ModEnd> ( p + <S2SV_ModStart> p + 2 <S2SV_ModEnd> ) ; ND_PRINT,1
378,<S2SV_ModStart> 0 ; } if ( unlikely ( IPCB ( skb ) ) ) ;,0
379,<S2SV_ModStart> private ) { struct skcipher_tfm * tfm = private ; crypto_free_skcipher ( tfm -> skcipher ) ; kfree ( tfm <S2SV_ModEnd> ) ; },1
380,<S2SV_ModStart> bprm ) { <S2SV_ModEnd> return retval ;,0
381,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
382,<S2SV_ModStart> ; dlen -= 3 <S2SV_ModEnd> ; for (,0
383,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
384,<S2SV_ModStart> (! cfg ) <S2SV_ModEnd> ; if (,0
385,<S2SV_ModStart> - EOPNOTSUPP ; msg -> msg_namelen = 0 ;,0
386,<S2SV_ModStart> ; if ( skb -> len < 0 ||,0
387,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; return",0
388,"<S2SV_ModStart> bp, len ) ; break ; case ETHERTYPE_TEB : ether_print ( ndo, bp, len <S2SV_ModStart> ndo_snapend - bp <S2SV_ModEnd>, NULL,",1
389,"<S2SV_ModStart> ; } } if ( tile_buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> overflow <S2SV_blank> buffer <S2SV_blank> size"" ) ; return 0 ; } tile_buffsize = 0 ; tile_buffsize = 0 ; tilebuf [ tile_buffsize + 3 <S2SV_ModStart> 0 ] = 0 ; tilebuf [ tile_buffsize + 3 ] = 0 ; tilebuf [ tile_buffsize + 3 ] = 0 ; tilebuf [ tilebuf [ tile_buffsize + 3 ] = 0 ; tilebuf [ 3 ] = 0 ; tilebuf [ tilebuf [ tile_buffsize - 3 ] =",0
390,<S2SV_ModStart> O_APPEND | O_CREAT | O_NOFOLLOW,1
391,"<S2SV_ModStart> } else { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> bar <S2SV_blank> %d <S2SV_blank> r\\n"", __func__, name ) ; return <S2SV_ModEnd> ; } switch <S2SV_ModStart> ) ) { <S2SV_ModEnd> if (!",0
392,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> -> nd_num ) { ret = <S2SV_ModEnd> - EBUSY ; <S2SV_ModStart> - EBUSY ; goto out ; } <S2SV_ModStart> ( ret ) goto out <S2SV_ModEnd> ; } <S2SV_null>,0
393,<S2SV_ModStart> ( fp <S2SV_ModEnd> ) ; return,0
394,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
395,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,0
396,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
397,<S2SV_ModStart> return - E_NOTHANDLED ; if ( ninst == 0 ) return - E_INVALID,1
398,"<S2SV_ModStart> ; if ( lsa -> l_len < 4 ) { ND_PRINT ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ; return ; }",0
399,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
400,"<S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> p + offset <S2SV_ModEnd>, tim.",0
401,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",0
402,<S2SV_ModStart> ( ) ; if (! tbuf ) { return NULL ; },1
403,<S2SV_ModStart> ; if ( r -> u32 ) { err = - EPERM ; goto out ; } <S2SV_ModEnd> if ( r,0
404,"<S2SV_ModStart> NULL ; } if ( mode == NULL ) { <S2SV_ModStart> INVALID_RETRY (, <S2SV_ModStart> NULL, 0 ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> NULL ) ; if ( mode == NULL ) { if ( mode == - ENOMEM ; break ; } <S2SV_ModStart> NULL ) ; } <S2SV_ModEnd> } if (",0
405,<S2SV_ModStart> ; if ( <S2SV_ModEnd> d == 0,0
406,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> rowstride ) { if (! context ) return FALSE ; <S2SV_ModStart> ) ) { return FALSE ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
407,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
408,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS,1
409,<S2SV_ModStart> return ( ( ( <S2SV_ModStart> ) / 8 ) * GetPSDPacketSize ( image ),1
410,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } if (,0
411,<S2SV_ModStart> bMasterInterface0 ) ; if (! pcu -> data_intf ) return - EINVAL ;,0
412,"<S2SV_ModStart> const char * devname = GFP_KERNEL ) ; const char * d = kmalloc ( devname ), GFP_KERNEL ) ; const char * d, GFP_KERNEL ) ; pr_info ( ""%s: <S2SV_blank> \'%d\\n"" <S2SV_ModEnd>, KBUILD_MODNAME, <S2SV_ModStart>, KBUILD_MODNAME, devname ) ; kfree ( devname <S2SV_ModEnd> ) ; return",0
413,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpx ) <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpy )",1
414,<S2SV_ModStart> target_enc ) { return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION <S2SV_ModEnd> ; } else,1
415,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static MagickBooleanType <S2SV_ModEnd> ) { int <S2SV_ModStart> ; ssize_t bit <S2SV_ModEnd> ; register Quantum <S2SV_ModStart> ; ssize_t columns, <S2SV_ModStart> ; if ( <S2SV_ModEnd> index < ( <S2SV_ModStart> index ) { ssize_t ) SetPixelInfo ( image, image, image -> columns, image -> rows ) ; if ( <S2SV_ModEnd> ( ssize_t ) <S2SV_ModStart> q ) < ( ssize_t ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; q = ( ssize_t ) ; q = SetPixelInfo ( ssize_t ) ; SetPixelInfo ( ssize_t ) ; if ( ssize_t ) image -> columns = 0 ; for ( i = 0 ; i < ssize_t ) index < ( ssize_t ) index ; i < ( ssize_t ) ssize_t ) { SetPixelInfo ( ssize ( ssize_t ), q, q ) ; q = SetPixelInfo ( ssize_t ) ; q = ( ssize_t ) SetPixelInfo ( ssize_t ) ; q = ( ssize_t ) ;",0
416,"<S2SV_ModStart> u_char * tptr, const u_int length ) { if ( length < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> Address <S2SV_blank> %u)"", length ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> case AFNUM_INET6 : if ( length!= 1 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %u)"", length - 1 ) ) ; break ; }",0
417,"<S2SV_ModStart> ; u64 msr_data, rcx, rdx <S2SV_ModStart> = X86EMUL_MODE_PROT64 ; rdx = reg_read ( ctxt, VCPU_REGS_RSP ) ; if ( is_noncanonical_address ( ctxt ) ) return rcx ; <S2SV_ModStart> = X86EMUL_MODE_PROT64 ; rdx = reg_read ( ctxt, VCPU_REGS_RSP ) ; if ( is_noncanonical_address ( ctxt, VCPU_RX ) ) return rcx ;",0
418,<S2SV_ModStart> dev ) ; ssize_t len ; device_lock ( dev ) ; len = <S2SV_ModEnd> sprintf ( buf <S2SV_ModStart> driver_override ) ; device_unlock ( dev ) ; return len ;,1
419,<S2SV_ModStart> BIOMEM ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) ; goto err ; } <S2SV_ModEnd> if (!,0
420,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( retval == 0 ) rs. enc_tkt_reply -> flags |= TKT_FLG_PRE_AUTH ;,1
421,"<S2SV_ModStart> const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> * probs )",0
422,,0
423,<S2SV_ModStart> = 0 ; size_t pathlen = 0 ; <S2SV_ModStart> case AF_UNIX : pathlen = sizeof ( <S2SV_ModEnd> ( ( struct,0
424,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
425,<S2SV_ModStart> if ( count < <S2SV_ModEnd> ) return -,0
426,"<S2SV_ModStart> ) { struct hugepage_subpool * spool = subpool_vma ( vma ) ; struct <S2SV_ModStart> page * page <S2SV_ModEnd> ; long chg <S2SV_ModStart> ) if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> page ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",0
427,"<S2SV_ModStart> filegen_string ) ; if ( NULL == filegen ) { msyslog ( LOG_ERR, ""stats <S2SV_blank> %s <S2SV_blank> unrecognized"", filegen_string ) ; continue ; }",0
428,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; timer_set_state",1
429,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> x8 ( tran_low_t <S2SV_ModStart> output ) { tran_low_t <S2SV_ModEnd> output ( tran_low_t <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> x8 ( tran_low_t <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> x8 ( tran_low_t <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> x7 ] = ( tran_low_t <S2SV_ModStart> 1 ] ; tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran,0
430,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_above_block_mode ( const,0
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
433,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
434,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> AVINDEX_KEYFRAME ) ; },1
435,<S2SV_ModStart> ++ ) { if ( datalen < 1 ) goto out_free ;,0
436,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> out ; } if (! cgroup ) { ret = - ENOENT ; goto out ; } if (! fpath ) ret = - ENOENT ; free ( next ) ;",0
437,<S2SV_ModStart> ; if ( mnt -> mnt. mnt_flags & MNT_LOCK ) mnt -> mnt. mnt_flags |= MNT_LOCK_NODEV ; if ( mnt -> mnt. mnt_flags & MNT_LOCK_NODEV ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOEXEC ; if ( mnt -> mnt. mnt_flags & MNT_LOCK ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOSUID ; if ( mnt -> mnt. mnt_flags & MNT_LOCK_NOSUID ) mnt -> mnt. mnt_flags |= mnt -> mnt. mnt_flags |= MNT_LOCK_NOEXEC ; if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOEXEC ;,0
438,<S2SV_ModStart> rds_loop_transport ; } <S2SV_ModEnd> } conn ->,1
439,<S2SV_ModStart> * rsize >= 112 <S2SV_ModEnd> && rdesc [,1
440,<S2SV_ModStart> if ( ( ( <S2SV_ModStart> ) < bodyLength ) || ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ),1
441,<S2SV_ModStart> ( likely ( serio <S2SV_ModEnd> &&! filtered,1
442,"<S2SV_ModStart>! er ) { ND_TCHECK ( <S2SV_ModEnd> dp [ 0 <S2SV_ModStart> 0 ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> c <S2SV_blank> %04x"", EXTRACT_32BITS ( & dp [ 0 ] ) ) ) ; } <S2SV_ModEnd> return ; case",1
443,"<S2SV_ModStart> * udfName, int newLen, <S2SV_ModEnd> uint8_t * <S2SV_ModStart> * newLen, int newLen = newLen - CRC_LEN <S2SV_ModStart> ( newLen < newLen ) newLen = newLen - CRC_LEN <S2SV_ModEnd> ; newLen =",0
444,"<S2SV_ModStart> void update_stats ( const VP9_COMMON * cm, MACROBLOCKD * mi, <S2SV_ModEnd> * mi_row, <S2SV_ModStart> * mi_col ) { <S2SV_ModEnd> int mi_col ; <S2SV_ModStart>, mi_row, mi_col, mi_cols, mi_col ) ; <S2SV_ModEnd> } mi_cols = <S2SV_ModStart> ( mi_col ) { vpx_codecode_prob <S2SV_ModEnd> ( w, <S2SV_ModStart>, mi_col ) ; <S2SV_ModEnd> } <S2SV_null>",0
445,,0
446,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> if (!,0
447,"<S2SV_ModStart> * s ; const unsigned char * p = sigbuf ; unsigned char * der = NULL ; int derlen = - 1 ; <S2SV_ModStart> s, & p <S2SV_ModEnd>, siglen ) <S2SV_ModStart> == NULL ) goto err ; derlen = i2d_DSA_SIG ( s, & der ) ; if ( derlen!= siglen || memcmp ( sigbuf, der, derlen ) ) <S2SV_ModStart> ; err : if ( derlen > 0 ) { OPENSSL_cleanse ( der, derlen ) ; OPENSSL_free ( der ) ; }",1
448,"<S2SV_ModStart> NULL ) ; if (! _gdImageWBMPCtx <S2SV_ModEnd> ( im, <S2SV_ModStart>, out ) ) { <S2SV_ModEnd> rv = gdDPExtractData <S2SV_ModStart> size ) ; } else { rv = NULL ; }",0
449,<S2SV_ModStart> ) ; } if ( bprm -> interp!= bprm -> filename ) kfree ( bprm -> interp ) ;,1
450,"<S2SV_ModStart> size_t * rlen = NULL ; struct oe_sockaddr * <S2SV_ModStart> ; size_t oe_sockaddr = sizeof ( * oe ) ; if (! addrlen ) { ret = - ENOMEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto out ; } if ( <S2SV_ModStart> ) == 0 ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( ret > ( ne_addr_addr ) goto out ; } <S2SV_ModStart>, & <S2SV_ModEnd> ) ; }",0
451,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> |= NULL ; }",0
452,"<S2SV_ModStart> ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> image <S2SV_blank> dimensions"" ) ; goto done ; }",1
453,<S2SV_ModStart> cm -> fc.,0
454,"<S2SV_ModStart> void * buf ; int ret ; buf = kmemdup ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
455,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
456,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
457,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ) { # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> return 0 ; <S2SV_ModStart> VP9_HIGHBITDEPTH ; # endif <S2SV_ModEnd> VP9_HIGHBITDEPTH if ( ctx -> flags & VPX_COMMON * ) { # endif <S2SV_ModStart> VP9_HIGHBITDEPTH ) { # if CONFIG_HIGHBITDEPTH # endif <S2SV_ModStart> VP9_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH return VPX_HIGHBITDEPTH * 8 ; } # endif <S2SV_ModEnd> VP9_HIGHBITDEPTH * 8 ; # endif <S2SV_ModStart> VP9_HIGHBITDEPTH <S2SV_ModEnd> * 2 ; # <S2SV_ModStart> VP9_HIGHBITDEPTH <S2SV_ModEnd> return 0 ;",0
458,<S2SV_ModStart> ) ; } fuse_conn_put ( & cc -> fc ) ;,1
459,"<S2SV_ModStart> ( code ) { * status = ""DECODE_PA_S4U_X509_USER"" ; return code ; } <S2SV_ModEnd> code = verify_s4u_x509_user_checksum",1
460,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
461,<S2SV_ModStart> cur_pic. field_picture <S2SV_ModEnd> ) return 0,1
462,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct bgp * sgp = int ret <S2SV_ModStart> sock_inc ) { int ret = 0 ; goto out <S2SV_ModEnd> ; } memset (,0
463,<S2SV_ModStart> buf ) ) { return 0 ; } <S2SV_ModEnd> ext_block = (,1
464,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,1
465,<S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },0
466,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
467,"<S2SV_ModStart> = hmi_data ; uint32_t data_siz ; <S2SV_ModStart> ; if ( hmi_track_offset [ i ] >= hmi_track_offset <S2SV_ModEnd> ) { hmi_track_offset <S2SV_ModStart> += 4 ; hmi_track_offset = hmi_track_offset [ i ] ; <S2SV_ModStart> += 4 ; hmi_track_offset [ i ] -= 4 ; <S2SV_ModStart> ; if ( hmi_track_offset [ i ] >= hmi_offset [ i ] ) { if ( hmi_track_offset [ i ] > hmi_track_offset [ i ] ) { _WM_GLOBAL_ERROR ( __FUNCTION__, WM_ERR_NOT_HMI, ""file <S2SV_blank> too <S2SV_blank> short"", 0 ) ; goto _hmi_end ; } <S2SV_ModStart> += 4 ; } hmi_track_offset [ i ] -= hmi_track_offset [ i ] ; <S2SV_ModStart> += 4 ; if ( hmi_siz < 4 ) { if ( hmi_track_offset [ i ] >= hmi_track_offset [ i ] ) { _hmi_track_track ( hmi_siz, WM_ERR_",0
468,<S2SV_ModStart> -> id ; haddr -> hci_channel = 0 ;,1
469,<S2SV_ModStart> -> i_iget5_offset ; fh16 [ 3 ] = 0 ;,1
470,"<S2SV_ModStart> ( kdc_active_realm, client. princ <S2SV_ModEnd>, request ->",1
471,"<S2SV_ModStart> BPF_ALU64 ) { coerce_reg_to_size ( dst_reg, 4 ) ; coerce_reg_to_size <S2SV_ModEnd> ( & src_reg <S2SV_ModStart> ( & src_reg, 4",0
472,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> kf_filter_level ( VP9_COMP * <S2SV_ModStart> ) { const VP9_COMP * cpi <S2SV_ModEnd> -> common ; <S2SV_ModStart> if (! cm -> bit_depth <S2SV_ModEnd> ) { const <S2SV_ModStart> if (! cm -> bit_depth ) { if ( cm -> bit_depth > 0.0 ) return ; },0
473,,0
474,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
475,"<S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, MAXALIGN",0
476,<S2SV_ModStart> void usage_exit ( void,1
477,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
478,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
479,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
480,<S2SV_ModStart>,0
481,<S2SV_ModStart> ; if ( * value == 0 ||,1
482,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> len ; int,0
483,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
484,"<S2SV_ModStart> ( ndo, ""%s"", snpal <S2SV_ModEnd> ) ) ;",0
485,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> m"", <S2SV_ModStart> y3f ) ; sendClean ( outputbuffer ) ;",0
486,<S2SV_ModStart> } else { return false ; } else if ( r -> CRm == 0 && r -> CRm == 9 ) { if ( pmu_event_counter_disabled ( r ) ) ) return false ; } else if ( <S2SV_ModStart> } else { return false ; } else if ( pmu_disabled ( r ) ) return false ;,0
487,<S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; lval <S2SV_ModStart> i ] = Z_LVAL ( lval ) ; } else { rect. x = <S2SV_ModStart> ) ; } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * tmp ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> i ] = Z_LVAL ( lval ) ; } <S2SV_ModStart> ) ; } else { rect. x = <S2SV_ModStart> tmp ) ; } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; convert_to_long ( & lval <S2SV_ModEnd> ) ; },0
488,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
489,<S2SV_ModStart> SQL_DROP ) ; <S2SV_ModEnd> return 0 ;,1
490,"<S2SV_ModStart> ; r = __copy_from_user <S2SV_ModEnd> ( data,",1
491,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
492,<S2SV_ModStart> = 0 ; info -> port = NULL ;,1
493,<S2SV_ModStart> -> ctx. <S2SV_ModEnd> pmu = pmu,1
494,<S2SV_ModStart> iovec * iov_iter_init <S2SV_ModEnd> ) { struct,0
495,<S2SV_ModStart> ext4_group_t flex_group ; unsigned <S2SV_ModStart> -> s_log_groups_per_flex ; if ( sbi -> s_log_groups_per_flex < 1 || sbi -> s_log_groups_per_flex > 31 ) { sbi -> s_log_groups_per_flex = 1 ; return 1 ; } <S2SV_ModStart> -> s_log_groups_per_flex ; <S2SV_ModEnd> flex_flex_per_flex = (,0
496,<S2SV_ModStart> ( unlikely ( chunk -> pdiscard ) ) return 0 ; if ( unlikely (,1
497,"<S2SV_ModStart> int i, i, count, <S2SV_ModEnd> ) ; for",0
498,"<S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; if (",0
499,<S2SV_ModStart> <= w - ( int ),1
500,<S2SV_ModStart> callback_args -> forward_matches ; assert ( match_offset + match_length <= callback_args -> data_size ),1
501,<S2SV_ModStart> options. disable_forwarding && use_privsep,1
502,"<S2SV_ModStart> { if ( length > SMKTREE_DECODE_MAX_RECURSION ) { av_log ( NULL, AV_LOG_ERROR, ""Maximum <S2SV_blank> tree <S2SV_blank> recursion <S2SV_blank> level <S2SV_blank> exceeded.\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",1
503,<S2SV_ModStart> err ; } if ( m -> msg_name ),1
504,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_args, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\"" <S2SV_blank> \\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> expr"" ) ; return 1 ; } else { int res <S2SV_ModEnd> ; res = <S2SV_ModStart> tmp ) ; res = obj2ast_asdl_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\"" <S2SV_ModEnd>, arena ) <S2SV_ModStart> ) ; } if ( lookup_attr_id ( obj, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\"" <S2SV_blank> \\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> ssize"" ) ; return res <S2SV_ModEnd> ; } <S2SV_null>",0
505,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) { hstartrow <S2SV_ModEnd> = ( numrows,0
506,"<S2SV_ModStart> ""REPLY_ADD_STA <S2SV_blank> PASSED\\n"" ) ; ret = iwl_sta_ucode_activate ( priv, sta_id ) <S2SV_ModEnd> ; break ;",1
507,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
508,<S2SV_ModStart>,0
509,"<S2SV_ModStart> & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; if ( free_func ) spin_lock_irqsave ( & hashbin -> hb_lock, flags ) ; else if ( queue -> hb_type & HB_LOCK ) spin_lock_lock_irqrestore ( & hashbin -> hb_type ) spin_lock_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModEnd> } } spin_lock_irq <S2SV_ModStart> flags ) ; <S2SV_ModEnd> } } <S2SV_null> <S2SV_null>",0
510,<S2SV_ModStart>. mnt_flags & ~ MNT_USER_SETTABLE_MASK <S2SV_ModEnd> ; if (,0
511,<S2SV_ModStart> msg -> msg_name ; struct msg_namelen = 0 ; <S2SV_ModStart> sll ) { <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> sll ) ; <S2SV_ModEnd> if ( msg,0
512,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ i,0
513,"<S2SV_ModStart> ( serial -> num_bulk_out <S2SV_ModEnd> < 2 ) <S2SV_ModStart> < 2 ) { dev_err ( & serial -> interface -> dev, ""missing <S2SV_blank> bulk <S2SV_blank> out <S2SV_blank> endpoints\\n"" ) ; return - ENODEV ; } <S2SV_ModEnd> port = serial",1
514,"<S2SV_ModStart> write_junk = 0, CS64Chunk <S2SV_ModStart> struct table_chunk ; CS64Chunk cs64Chunk <S2SV_ModStart> ) ) ; CS64Chunk table_chunk = sizeof ( CS64Chunk ) ; if ( cs64Chunk * sizeof ( CS64Chunk ) ) ) { CS64Chunk = CS64Chunk <S2SV_ModStart> ) ) ; } if ( cs64Chunk. total_chunk. cs64_chunk. total_bytes = sizeof ( CS64Chunk ) ) ; if ( cs64Chunk. total_chunk. total_riff_riff_bytes = total_riff_chunk * sizeof ( cs64Chunk ) ) ; if ( cs64_chunk. total_bytes ) { table_length = sizeof ( CS64Chunk. cs64Chunk ) ; if ( cs64Chunk. cs64_chunk. total_bytes ) total_riff_bytes = CS64Chunk. cs64Chunk. cs64_chunk. total_riff_riff_bytes ; }",0
515,"<S2SV_ModStart> -> msg_sys ; struct msg_sys * msg_sys = msg_sys ; <S2SV_ModStart> -> msg_sys ; if ( msg_sys -> msg_sys ) if ( msg_sys -> msg_name, msg_sys -> msg_sys ) <S2SV_ModStart> -> msg_sys ; <S2SV_ModEnd> if ( msg_sys",0
516,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> b2SV_null> int <S2SV_ModStart> int bp_blocksize_t bs_blocks <S2SV_ModEnd> ; int b_blocks <S2SV_ModStart> uint32_t b_to_cpu ( <S2SV_ModEnd> ) ; int,0
517,"<S2SV_ModStart>, rc ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( global -> oxcf_buf -> bit_depth > 0 ) { printf ( ""\\n"" ) ; } <S2SV_ModStart> = 100 ; } <S2SV_ModEnd> else if (",0
518,<S2SV_ModStart> return FALSE ; if (! rc ) return FALSE ; <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) { if (! rc ) return FALSE ; },0
519,"<S2SV_ModStart> -> dict ) && xmlDictOwns ( ctxt -> dict, value )",1
520,"<S2SV_ModStart> ; if ( is_link ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> %s <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> ; if ( is_link ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> %s <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) ; } if ( is_link ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> invalid <S2SV_blank> %s <S2SV_blank> %s\\n"", fname ) ; free ( fname ) ; } else { copy_file_user <S2SV_ModEnd> ) ; }",0
521,"<S2SV_ModStart> * xdr, size_t <S2SV_ModEnd> int error ; <S2SV_ModStart> out ; int error <S2SV_ModEnd> ; if ( <S2SV_ModStart> if (! xdr_len ) { error = - EINVAL ; goto out ; } if ( ( rp [ i ] & acl_len + 1 ] ) ) { error = - EINVAL ; goto out ; } <S2SV_ModStart> if ( ( ( rp [ i ] ) + 1 <S2SV_ModEnd> ) ) { <S2SV_ModStart> cnt ++ ; } if ( ( rp [ i ] ) + 1 ] ) ) { log = - ENOMEM ; goto out ; } rp [ i ] = rp [ i ] ;",0
522,<S2SV_ModStart> ; if (! sf -> fv ) return 0 ;,0
523,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
524,<S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( &,1
525,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
526,<S2SV_ModStart> ; if ( ( length > 1 ) ) return (,0
527,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ipv_media ; struct <S2SV_ModStart> media ; struct range_media ; <S2SV_ModEnd> if ( clt <S2SV_ModStart> ranges = & r -> clt_buf [ i ] ; size_t content_length = & clt -> range [ i ] ; <S2SV_ModStart> st -> range [ 0 ] ; size_t content_length = & r -> clt_boundary = & r -> clt_media ; <S2SV_ModStart> } else { range [ 0 ] ; <S2SV_ModEnd> if ( ( ( <S2SV_ModStart> st -> clt_boundary ) ) { range [ i ] ; <S2SV_ModStart> ranges = & r -> range [ i ] ; <S2SV_ModEnd> } else { <S2SV_ModStart> } else { size_t -> clt_boundary = & r -> range [ i ] ; <S2SV_ModEnd> if ( ( ( clt_boundary_length <S2SV_ModStart> ( clt -> clt_boundary_boundary ) ) { range [ i ] ; <S2SV_ModStart> ranges = & r -> clt_boundary_length [ i ] ; <S2SV_ModEnd> if ( r -> clt_boundary_length <S2SV_ModStart> } else { range = clt -> clt -> clt_boundary_boundary_,0
528,"<S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( status & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IER_TR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_IER, KSZ8851_ISR_IER <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR_PP ( KSZ8851_ISR_IER, KSZ8851_ISR_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IER, KSZ8851_ISR_IER, KSZ8851_LCISR_IER <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_TXRXISR_IER, KSZ8851_IER, KSZ8851_ISR_IER <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_IER, KSZ8851_ISR_IER <S2SV_ModEnd> ) ; }",0
529,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
530,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
531,"<S2SV_ModStart> ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
532,<S2SV_ModStart> tmp ) { goto softfail <S2SV_ModEnd> ; } case <S2SV_ModStart> ) ) { goto softfail <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; softfail : state -> offset = 0 ;,1
533,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
534,<S2SV_ModStart> flags ) { spin_lock ( & ctx -> cancel_lock ) ; <S2SV_ModStart> } } } spin_unlock ( & ctx -> cancel_lock ) ;,0
535,<S2SV_ModStart> ) ) ; free ( c16 -> Curves ) ;,0
536,<S2SV_ModStart> { if (! dev_name ||,1
537,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( p ) ;,0
538,"<S2SV_ModStart> buf ) { memset ( buf, 0, sizeof ( * msg ) ) ;",0
539,<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { efree ( replaced ) ; RETURN_FALSE ; },1
540,<S2SV_ModStart> ; if (! id_key ( ) <S2SV_ModEnd> ) goto err,0
541,"<S2SV_ModStart> ] ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + strlen ( t1_buf_array ) + strlen ( t1_line_array ) + t1_buf_array ) ;",0
542,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart>, MACROBLOCK * x <S2SV_ModEnd>, BLOCK_SIZE bsize, <S2SV_ModStart> BLOCK_SIZE bsize ) { <S2SV_ModEnd> if ( x <S2SV_ModStart> bsize ) ; memset <S2SV_ModEnd> ( xd, <S2SV_ModStart> bsize ) ; memset <S2SV_ModEnd> ( b, <S2SV_ModStart> bsize ) ; memset <S2SV_ModEnd> ( b,",0
543,"<S2SV_ModStart> name ) ; if (! strcmp ( key, ""url"" ) && value && looks_like_command_line_option ( value ) ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_URL, ""disallowed <S2SV_blank> submodule <S2SV_blank> url: <S2SV_blank> %s"", value ) ;",1
544,<S2SV_ModStart>,0
545,<S2SV_ModStart> cnt ) { ssize_t <S2SV_ModEnd> n ; assert,1
546,<S2SV_ModStart> ; __be16 type ; if ( NAPI_CB ( NAPI_CB ( NAPI ) -> encap_mark ) goto out ; },0
547,<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { return 0 ; } if (,1
548,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> = 0 ; },0
549,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,0
550,<S2SV_ModStart> -> u4_first_slice_in_pic = 1 <S2SV_ModEnd> ; ps_dec ->,0
551,"<S2SV_ModStart> BPF_ALU64 ) { coerce_reg_to_size ( dst_reg, 4 ) ; coerce_reg_to_size <S2SV_ModEnd> ( & src_reg <S2SV_ModStart> ( & src_reg, 4",0
552,<S2SV_ModStart> dentry ) ; <S2SV_ModEnd> if (!,0
553,<S2SV_ModStart> vfio_irq_irq ) { switch ( max ) { case VFIO_IRQ_IRQ_DIR : size = sizeof ( int32_t ) ; break ; case VFIO_irq_irq_irq_irq_irqsave_irq_irq ; break ; case VFIO_IRQ_SET_IRQ_IRQ_DIR : size = sizeof ( uint32_t ) - EINVAL ; break ; default : size = sizeof ( uint32_t ) - EINVAL ; break ; case VFIO_IRQ_IRQ_TYPE_IRQ_IRQ_SET_MASK ; default : size = sizeof ( uint8_t ) ; break ;,0
554,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ext4_has_inline_data ( inode,1
555,<S2SV_ModStart> -> filesize = UINT64_MAX <S2SV_ModEnd> ; s ->,1
556,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
557,"<S2SV_ModStart> char * in, size_t olen <S2SV_ModStart> += 4 ; if ( len == olen ) return len ;",0
558,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
559,"<S2SV_ModStart> i ; size_t bytes <S2SV_ModEnd>, bytes, <S2SV_ModStart> = 0 ; if ( wdata -> nr_len > cur_len ) { for ( i = 0 ; i < nr_pages ; i ++ ) { for ( i = 0 ; i < nr_pages ; i ++ ) put_page ( wdata -> pages [ i ] ) ; for ( i = 0 ; i < nr_pages ; i ++ ) put_page ( wdata -> pages [ i ] ) ; if (! cur_len ) put_page ( wdata -> pages [ i ] ) ; put_page ( wdata -> pages [ i ] ) ; break ; }",0
560,<S2SV_ModStart> & CP_RDESC_SWAPPED_MIN_MAX ) ) return rdesc ; if ( * rsize < 4,1
561,"<S2SV_ModStart> vpx_codec_err_t res ; VPX_COMMON * const VP9_COMMON * const i, & cpi -> common ; VPX_COMMON * sizeof ( si ), i ) ; for ( i = 0 ; i < 0 ; i ) { i ++ i ; si -> last_frame_count = 0 ; for ( i = 0 ; i < 0 ; i ) { svc_assert0 ( i ) ; ++ i ; ++ i ; ++ i <S2SV_ModEnd> ) { Svc_null> <S2SV_null>",0
562,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> BYTE * out, UINT32 outSize <S2SV_ModStart> 5 ) { if ( outSize < 1 ) return FALSE ; outSize -- ; <S2SV_ModStart> 4 ) { if ( outSize < 4 ) return FALSE ; outSize -- ; outSize -- ; <S2SV_ModStart> } else { if ( outSize < 4 ) return FALSE ; memcpy ( out, in, outSize ) ; outSize -- ; } return TRUE <S2SV_ModEnd> ; } <S2SV_null>",0
563,<S2SV_ModStart> ; if ( screen_free ( screen ) ) return NULL ; if (,0
564,"<S2SV_ModStart> char * end_start, int <S2SV_ModStart> == '\\\\' ) { char * end = str ; char * end_start ; <S2SV_ModStart> == '.' ) { char * end = str ; <S2SV_ModStart> 0 ) { if ( str == '\\0' || * end_start == '.' ) { char * end = str ; <S2SV_ModStart> == '\\\\' ) return 0 ; } <S2SV_ModStart> == '\\\\' ) { <S2SV_ModEnd> if (! <S2SV_ModStart> == '\\\\' ) return 1 ; <S2SV_ModStart> == '\\\\' ) { return 1 ; } <S2SV_ModStart> == '\\0' ) { <S2SV_ModEnd> if (! <S2SV_ModStart> == '\\\\' ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> == '\\0' ) { <S2SV_ModEnd> if (! <S2SV_ModStart> == '.' ) { <S2SV_ModEnd> if (! <S2SV_ModStart> == '\\n' ) { <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ; } } } <S2SV_ModEnd> return 0 ;",0
565,"<S2SV_ModStart> * m, size_t <S2SV_ModEnd> bufsize ) { <S2SV_ModStart> * buf ; <S2SV_ModEnd> JAS_DBGLOG ( 100 <S2SV_ModStart> 100, ( ""mem_resize(%p, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, m, <S2SV_ModStart> ) ) ; <S2SV_ModEnd> * bufsize )",0
566,<S2SV_ModStart> void ) { <S2SV_ModEnd> free ( g_settings,0
567,<S2SV_ModStart> NULL ; } if (!,0
568,<S2SV_ModStart> pcrypt_free ( struct aead_instance <S2SV_ModEnd> * inst ) <S2SV_ModStart> * ctx = aead_instance_ctx <S2SV_ModEnd> ( inst ),1
569,,0
570,"<S2SV_ModStart> } if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if (",1
571,<S2SV_ModStart> icmp6_hop_limit ) { if ( <S2SV_ModStart> nf. hop_limit < <S2SV_ModEnd> ra_msg -> icmp,0
572,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
573,<S2SV_ModStart> * up ; int ulen ; <S2SV_ModStart> rp ) ; ulen = xfrm_replay_state_esn_len ( up ) ; if ( nla_len ( rp ) < ulen || <S2SV_ModEnd> xfrm_replay_state_esn_len ( replay_esn <S2SV_ModStart> replay_esn )!= ulen <S2SV_ModEnd> ) return -,1
574,"<S2SV_ModStart> int ret = proc_dointvec_minmax <S2SV_ModEnd> ( table,",1
575,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
576,<S2SV_ModStart> opj_calloc ( ( size_t ) ( <S2SV_ModStart> -> numlayers + 1U <S2SV_ModEnd> ) * l_step_l,0
577,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
578,<S2SV_ModStart> ps ) { int i ; <S2SV_ModStart> ) ) ; for ( i = 0 ; i < 3 ; i ++ ),0
579,"<S2SV_ModStart> -> common ; MACROBLOCK * const x = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> mb. mb_mi_offset, mi_row, mi_row, mi_col ; <S2SV_ModStart> mi_col ) { <S2SV_ModEnd> if ( mi_row <S2SV_ModStart> mi_col ) ; <S2SV_ModEnd> if ( mi_col ) { <S2SV_ModStart> = 1 ; memset ( xd, mi_row, mi_col, mi_col, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col ) ; <S2SV_ModStart> } else { int mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col ) ; for ( i = 0 ; i = 0 ; i < mb_cols ++ ) { if ( cm -> mb_sb ) { memset ( cm, mi_row, mi_col, mi_col, mi_cols, mi_col, mi_col ) ; for ( i = 0 ; i =",0
580,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",1
581,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
582,<S2SV_ModStart> } else { # ifdef UPNP_ENABLE_POST_WRITE <S2SV_ModStart> return HTTP_UNAUTHORIZED ; # else return HTTP_NOT_FOUND ; # endif,1
583,<S2SV_ModStart> ) ; } free ( tmpname ) ;,0
584,<S2SV_ModStart> blkg ) <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> blkg ) ; <S2SV_ModEnd> q -> root_blkg,0
585,<S2SV_ModStart> ; if ( bpp == 1 && <S2SV_ModStart> else if ( bpp == 8 &&,1
586,<S2SV_ModStart> ; krb5_data rspac ; const char * tgt_realm = krbtgt_realm,0
587,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
588,"<S2SV_ModStart> struct usbdevfs_connectinfo ci ; memset ( & ci, 0, sizeof ( ci ) ) ; ci <S2SV_ModEnd>. devnum = <S2SV_ModStart> dev -> devnum ; ci <S2SV_ModEnd>. slow = <S2SV_ModStart> speed == USB_SPEED_LOW <S2SV_ModEnd> ; if (",1
589,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optlen <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.",0
590,<S2SV_ModStart> ( args -> rmtvaluelen <S2SV_ModEnd> ) ; return,0
591,"<S2SV_ModStart> UINT32 offset ; memset ( & devicePathLen, 0, sizeof ( * devicePath ) ) ) ; <S2SV_ModStart> ) ) { if (! devicePathLen > WCHAR * devicePathLen ) { Irp -> IoStatus. Information = 0 ; Irp -> IoStatus. Information = 0 ; break ; }",0
592,<S2SV_ModStart> ; if (,0
593,"<S2SV_ModStart> * dpcap ; if ( addr + sizeof ( dpcapable ) ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ) return - ENOMEM ; goto out ; } if ( memcpy <S2SV_ModEnd> ( dp, <S2SV_ModStart>, 0, <S2SV_ModEnd>, sizeof (",0
594,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( g_settings_privatereports,0
595,<S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> index ) ; q ++ ; p <S2SV_ModEnd> ++ ; },0
596,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
597,"<S2SV_ModStart>, int tstype, bool opt_stats",0
598,"<S2SV_ModStart> 0 ) { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ;",0
599,<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & bp [ 0 ] ) ;,0
600,"<S2SV_ModStart>, CONST_STR_LEN ( ""%2f?"" ), CONST_STR_LEN ( ""/?"" ) ) ; if (",0
601,<S2SV_ModStart> ; if (,0
602,<S2SV_ModStart> <= w - ( int ),1
603,<S2SV_ModStart> page ) ; <S2SV_ModEnd> memset ( addr,1
604,<S2SV_ModStart> * i ; jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,0
605,<S2SV_ModStart> ) ) { if ( ps_codec -> s_len < 1 ) { return - 1 ; },0
606,"<S2SV_ModStart> * priv ; if (! port -> interrupt_out_urb ||! port -> interrupt_in_urb ) { dev_err ( & port -> dev, ""required <S2SV_blank> endpoint <S2SV_blank> is <S2SV_blank> missing\\n"" ) ; return - ENODEV ; }",1
607,,0
608,<S2SV_ModStart> -> device_data ; cancel_autoload_drivers ( ) ;,1
609,"<S2SV_ModStart> * my_info = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, 0 ) <S2SV_ModStart>, my_info -> my_data <S2SV_ModEnd> ) { if",0
610,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> p == q ) || ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> size < 16 ) || ( <S2SV_ModEnd> size > 256 <S2SV_ModStart> size > 256 ),1
611,"<S2SV_ModStart> uint dblocks = xfs_attr3_rmt_blocks <S2SV_ModEnd> ( mp,",1
612,<S2SV_ModStart> pairs ) ; if ( pcount > MaxAllocSize / sizeof ( pairs ) ) {,0
613,<S2SV_ModStart> rv ; } if (! r -> options.,0
614,<S2SV_ModStart> ] == EOF || text [ 1 ] == 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 2 ] ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 3 ] ) <S2SV_ModEnd> ) return 0,1
615,"<S2SV_ModStart> 0 ) { memset ( c, 0, sizeof ( * c ) ) ;",0
616,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart>, j ) { tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> ++ j ; tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> ++ j ; tran_low_t <S2SV_ModEnd> * out ; <S2SV_ModStart>, j ; <S2SV_ModEnd> } } <S2SV_null>",0
617,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> break ; },0
618,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS <S2SV_ModEnd> ) ; if",0
619,<S2SV_ModStart> * ue ; if <S2SV_ModEnd> ( tree_root == <S2SV_ModStart> == NULL ) return 0,1
620,<S2SV_ModStart> fp ) { <S2SV_ModEnd> V_null> <S2SV_null> <S2SV_null>,0
621,<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) ; <S2SV_ModStart> ) ) { elen += pc -> lengthComponentIdent ; break ; } <S2SV_ModEnd> } if (,0
622,<S2SV_ModStart> ( dp [ 4 <S2SV_ModEnd> ] ) {,0
623,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr ) ;,0
624,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> == 0 ) ; },0
625,<S2SV_ModStart> ; bool slow <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ;,1
626,"<S2SV_ModStart> len ) { <S2SV_ModEnd> if (! <S2SV_ModStart>, 8 ) ) { <S2SV_ModEnd> rpki_rtr_pdu_print ( ndo <S2SV_ModStart> ( ndo, pptr <S2SV_ModEnd>, 8 ) <S2SV_ModStart>, 8 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>",0
627,"<S2SV_ModStart> int tagval ; struct stream packet ; <S2SV_ModStart> length ) ; packet = * s ; <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
628,"<S2SV_ModStart> 0 ) { if ( i + offset >= max_offset ) { ND_PRINT ( ( ndo, ""\\n"" ) ) ; return ( NULL ) ; } <S2SV_ModEnd> if ( i <S2SV_ModStart> ndo -> ndo_snapend ) ; if ( i + offset >= max_snapend ) { ND_PRINT ( ( ndo, ""%s"", i ) ) ; return ( 0 ) ; } <S2SV_ModEnd> ND_MASK ) ;",0
629,"<S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; error <S2SV_ModStart> = args -> rmtvaluelen <S2SV_ModEnd> ; while (",1
630,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
631,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> S_IWUSR ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; unlink",0
632,<S2SV_ModStart> fhdr ) ; if (! fc_check_access ( fc ) ) return FALSE ; <S2SV_ModStart> - ENOMEM ; fc_free ( fc ) ;,0
633,"<S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f,",0
634,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_set_str ( GITERR_NET, ""Invalid <S2SV_blank> empty <S2SV_blank> packet"" ) ; return GIT_ERROR <S2SV_ModEnd> ; } if",1
635,<S2SV_ModStart> ; if ( vma -> vm_flags & VM_SHARED ) return VM_FAULT_SIGBUS ; if (,1
636,<S2SV_ModStart> src -> sasl_connection <S2SV_ModEnd> ) ; return,0
637,<S2SV_ModStart> env -> insn_aux_data ; int i <S2SV_ModStart> ) ) ; for ( i = off ; i < off + cnt - 1 ; i ++ ) new_data [ i ]. seen = true ;,1
638,<S2SV_ModStart> ; ND_TCHECK ( * dp <S2SV_ModEnd> ) ; if,1
639,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;,1
640,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
641,"<S2SV_ModStart> 0 ) ; if (! <S2SV_ModStart>, rowsize ) ) return 0 ;",0
642,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ;",0
643,<S2SV_ModStart> ; if ( ctx -> terminated ||,1
644,<S2SV_ModStart> = NULL ; if ( sbi -> spool ) hugepage_put_subpool ( sbi -> spool ) ;,1
645,<S2SV_ModStart> path ) ; <S2SV_ModEnd> else if (,0
646,<S2SV_ModStart> in ) { size_t <S2SV_ModEnd> out = 0 <S2SV_ModStart> ) ) { return 1 ; <S2SV_ModEnd> } <S2SV_null>,0
647,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
648,"<S2SV_ModStart> ( ) ; iov_iter_advance ( i, copied ) ; <S2SV_ModStart> again ; } <S2SV_ModEnd> pos += copied",1
649,<S2SV_ModStart> unlikely ( len + ring -> frameoffset,1
650,<S2SV_ModStart> == 0 ) <S2SV_ModEnd> return 0 ;,0
651,"<S2SV_ModStart> ( obj, <S2SV_ModEnd> name, &",0
652,<S2SV_ModStart> ADD ) { if ( subdir ) return ;,0
653,<S2SV_ModStart> src < zsize + ( sub_type!= 2 ) <S2SV_ModStart> bits ) { if ( src >= src_end ) return AVERROR_INVALIDDATA ;,1
654,<S2SV_ModStart> q ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
655,"<S2SV_ModStart>, name, len <S2SV_ModEnd> ) ; if",0
656,<S2SV_ModStart> ++ ) { if ( count > 0 ) break ;,0
657,<S2SV_ModStart> ) ) { spin_lock ( & timer -> timer -> lock ) ;,0
658,<S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT,1
659,"<S2SV_ModStart> -> arch = strdup ( cpu ) <S2SV_ModEnd> ; char * <S2SV_ModStart> * arch ) { <S2SV_ModEnd> cpu = strdup ( <S2SV_ModStart>, cpu ) ; free ( cpu ) ; free ( cpu ) ; free ( arch",0
660,"<S2SV_ModStart> sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart>, * n <S2SV_ModEnd> ; list_for_each_entry (",1
661,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
662,"<S2SV_ModStart> gint64 offset ; <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; offset <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! parse_netscreen_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> wth -> fh <S2SV_ModEnd>, & wth <S2SV_ModStart> wth -> frame_buffer, line",1
663,<S2SV_ModStart> 0 ) ; if ( <S2SV_ModStart>. seq_num ) < 0 ) return - 1,1
664,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
665,"<S2SV_ModStart> : ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = <S2SV_ModStart> == 0 ) ret = <S2SV_ModEnd> key -> type <S2SV_ModStart> type -> read ( key, buffer, buflen ) ; up_read <S2SV_ModEnd> ( & key <S2SV_ModStart> sem ) ; <S2SV_ModEnd> } error2 :",1
666,"<S2SV_ModStart> NULL, false <S2SV_ModEnd> ) ; if",0
667,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",1
668,"<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - JAS_CAST ( jas_longlong <S2SV_ModEnd>, ( ( <S2SV_ModStart> : JAS_CAST ( jas_longlong <S2SV_ModEnd>, tmp )",1
669,<S2SV_ModStart> page ) ; rm -> atomic. op_active = 0 ;,1
670,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return NULL ;,0
671,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
672,"<S2SV_ModStart> sizeof ( spath ) ) return - 1 ; if ( strstr ( name, "".."" ) || strchr ( name, '/'",1
673,<S2SV_ModStart> ; if ( t < 0 ) return ; if (,0
674,"<S2SV_ModStart> -> bcache, cache_id ( <S2SV_ModStart> ] -> data )",1
675,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
676,"<S2SV_ModStart> ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
677,<S2SV_ModStart> return 1 ; consume_skb ( skb ) ; return 0 <S2SV_ModEnd> ; } if,1
678,<S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
679,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int err = <S2SV_ModStart> goto out_put ; out_unlock ( &,0
680,<S2SV_ModStart> ( p ) { if (! p ) return 1 ; },0
681,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> } if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if (",1
682,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
683,<S2SV_ModStart> 1 ) ; if ( strlen ( line ) == 0 ) return - 1 ;,1
684,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
685,<S2SV_ModStart> ++ ) { if ( band -> prec ) { <S2SV_ModStart> ) ; } },1
686,<S2SV_ModStart> < 0 ) { xmlFreeInputStream ( input ) ; return ; } <S2SV_ModEnd> if ( entity,1
687,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> ) ) ; rcu_read_unlock ( ) ; <S2SV_ModStart> -> opt ) ; rcu_dereference ( <S2SV_ModStart> np -> opt ) ; rcu_read_unlock ( ) ;",0
688,"<S2SV_ModStart> cpi, const VP9_COMMON * cpi <S2SV_ModEnd> ) { const <S2SV_ModStart> ) { const MACROBLOCKD * cpi <S2SV_ModEnd> = cpi -> <S2SV_ModStart> -> oxcf. pass_mode ; if ( cpi -> oxcf. pass == 2 ) return ; } else { int cpi -> oxcf. pass = cpi -> oxcf. pass ;",0
689,"<S2SV_ModStart> ( u32 size, u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } <S2SV_ModEnd> return malloc ( <S2SV_ModStart> malloc ( size * num",1
690,<S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> { if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,1
691,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,1
692,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
693,"<S2SV_ModStart> scn, root_storage <S2SV_ModEnd> ) ) <",1
694,<S2SV_ModStart> = info ; if ( info + size > sizeof ( info ) ) return NULL ;,0
695,<S2SV_ModStart> (! eof && vars -> str. c!= vars -> ptr,1
696,<S2SV_ModStart> ; if ( sk ) return - EINVAL ; if (,0
697,"<S2SV_ModStart> PERF_COUNT_SW_EMULATION_FAULTS, 1 <S2SV_ModEnd>, regs,",0
698,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc!= X86EMUL_CONTINUE ) break <S2SV_ModStart> case 4 : rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val )",1
699,<S2SV_ModStart> str ) ; <S2SV_ModEnd> return NULL ;,0
700,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void * ticket_buf <S2SV_ModEnd> ; void * <S2SV_ModStart> ) ) { void * ticket_buf ; void * ticket_buf ; void * ticket_buf ; void * ticket_buf ; <S2SV_ModStart> ) ; } dlen = kmalloc ( dbuf, GFP_KERNEL ) ; if (! ticket_buf ) return - ENOMEM ; <S2SV_ModStart> out ) ; kfree ( dbuf ) ;",0
701,<S2SV_ModStart> ( count + 2 <S2SV_ModEnd> ) ) {,0
702,<S2SV_ModStart> ( prev ) <S2SV_ModEnd> ; if (,0
703,<S2SV_ModStart> -> session_id ; if ( s -> session -> session_id_ctx -> session_sess ) { if ( s -> session_ctx -> session_sess ) { if ( s -> session_ctx -> session_ctx -> session_sess ) < 0 ) { s -> session_err = 0 ; s -> session -> session_cb = 0 ; } else if ( s -> session_ctx -> session_ctx -> session_id_sess ) { if ( s -> session_ctx -> session_ctx -> session_sess ) < 0 ) { s -> session = s -> session_sess ; } if ( s -> session_ctx -> session_ctx -> session ) { s -> session_err = s -> session_free ( s -> session ) ; } } if ( s -> session ) { s -> session_ctx -> session = s -> session_ctx -> session_cb = s -> session -> session ) ; if ( s -> session_ctx -> session ) { if ( s -> session_ctx -> session -> session ) { if ( s -> session_sess ) { s -> session_free ( s -> session ) ; } } } if ( s -> session_ctx ->,0
704,<S2SV_ModStart> ; r = v ; if (,0
705,"<S2SV_ModStart>, sizeof ( validate_long ) <S2SV_ModEnd> ; if (",0
706,<S2SV_ModStart> NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_FIELD_REF,0
707,<S2SV_ModStart> ; ssize_t req ; if (,0
708,"<S2SV_ModStart>, type_comment, string type_comment, <S2SV_ModStart> n, has_type_comment ) ; if (! type_comment ) return - 1 ; if (",0
709,"<S2SV_ModStart> err = 0 ; if (! net_eq ( current -> nsproxy -> net_ns, sock_net ( sk ) ) ) return - EINVAL",1
710,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
711,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
712,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
713,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
714,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> == 0 ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,0
715,,1
716,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> mutex_lock ( &,0
717,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> psf_set_null> int <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. end <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( psf -> header. end <S2SV_ModEnd> ) ) return <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> + psf -> <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. end <S2SV_ModEnd> ++ ) ; <S2SV_ModStart> ( psf -> header. <S2SV_ModStart> psf -> header. end <S2SV_ModEnd> ) ) ;,0
718,<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ioffset ) ; <S2SV_ModEnd> credits = ext4_writepage_trans_blocks <S2SV_ModStart> ) ; goto out_mmap <S2SV_ModEnd> ; } down_write <S2SV_ModStart> handle ) ; out_mmap : up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModEnd> ext4_inode_resume_unlocked_dio ( inode,1
719,"<S2SV_ModStart> uint32_t * midi_tracks <S2SV_ModEnd> ; uint32_t * midi_tracks <S2SV_ModStart> = * midi_size ; uint32_t * track_size <S2SV_ModEnd> ; uint32_t midi_t midi_tracks <S2SV_ModStart> = * track_size ; tmp_val <S2SV_ModEnd> = * midi_data <S2SV_ModStart> ( midi_val <S2SV_ModEnd>, midi_val * midi_data <S2SV_ModStart> << 24 ; tmp_val <S2SV_ModEnd> |= * midi_val <S2SV_ModStart> << 24 ; tmp_val <S2SV_ModEnd> |= * midi_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> ( midi_size < tmp_val <S2SV_ModEnd> ) { * <S2SV_ModStart> = * midi_val ; tmp_val <S2SV_ModEnd> = * midi_data <S2SV_ModStart> ( midi_data [ tmp_val <S2SV_ModEnd> ] ; track_size <S2SV_ModStart> ( midi_size < tmp_val <S2SV_ModEnd> ) ; }",0
720,"<S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val * <S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val *",1
721,"<S2SV_ModStart> * bh ; unsigned int table_len ; <S2SV_ModStart> -> s_blocks ] ; table_len = le32_to_cpu ( lvd -> table_len, table_len, lvd -> s_blocksize ) ; <S2SV_ModStart> ( lvd, table_len <S2SV_ModEnd> ) ) ;",0
722,"<S2SV_ModStart> long n ; image = 0 ; info = 0 ; <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> header\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> info = 0 ; goto error <S2SV_ModEnd> ; } JAS_CAST ( <S2SV_ModStart> info -> depth = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) ) { goto error <S2SV_ModEnd> ; } JAS_CAST ( <S2SV_ModStart> info -> depth = 0 ; goto error <S2SV_ModEnd> ; } JAS_CAST ( <S2SV_ModStart> info -> width, JAS_CAST ( long <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModEnd> info -> depth <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModEnd> ) ) ;",0
723,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
724,<S2SV_ModStart> 0 ) { if ( ps_curr -> u4_offset < 0 ) { return ret ; } <S2SV_ModStart> ) ) ; },0
725,"<S2SV_ModStart> g_tv_comment, NULL <S2SV_ModEnd> ) ; }",0
726,<S2SV_ModStart> ; if ( <S2SV_ModEnd> l < 0,0
727,<S2SV_ModStart> ; if ( len < 0 ) { if (,0
728,"<S2SV_ModStart>, extent, height, <S2SV_ModStart> ""UnableToReadImageData"" ) ; <S2SV_ModEnd> height = sun_info <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( sun_pixels",0
729,"<S2SV_ModStart>, krb5_principal client_principal, const char * tgt_realm <S2SV_ModStart> principal ), tgt_realm <S2SV_ModEnd> ) ; if",1
730,<S2SV_ModStart> = MagickFalse ; break <S2SV_ModEnd> ; } image,0
731,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = ireq ->,1
732,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
733,"<S2SV_ModStart>!= 0 ) { int tend_off = skb_transport_offset ( skb ) + tlen ; <S2SV_ModStart> ( csum, skb_checksum ( skb, tend_off, <S2SV_ModEnd> offset, 0 <S2SV_ModStart> ) ) ; }",1
734,"<S2SV_ModStart> gfn, page_size >> PAGE_SHIFT <S2SV_ModStart> pfn, page_size >> PAGE_SHIFT",0
735,<S2SV_ModStart> 0x00 } ; if ( cmd -> msg_len > sizeof ( b ) - 4 ) return - EINVAL ;,1
736,"<S2SV_ModStart> perf_event * ctx <S2SV_ModEnd> ) { perf_event_context <S2SV_ModStart> ( event, ctx <S2SV_ModEnd> ) ; }",0
737,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> ; } <S2SV_null> <S2SV_null>,0
738,<S2SV_ModStart> * nid ; int err = - EINVAL ; <S2SV_ModStart> free_nid_list ( free_nid ) ; spin_lock ( & nm_i -> nid_lock ) ; err = __u32_to_free_nid_nid_nid ( sb ) ; spin_lock ( & nm_i -> nid_lock ) ; spin_lock ( & nm_i -> nid_lock ) ; spin_lock ( & nm_i -> nid_lock ) ; <S2SV_ModStart> NULL_ADDR ) ) goto err_out ; err = __lookup_free_nid_nid_list ( free_nid ) ; spin_lock ( & e -> nid_list_lock ) ;,0
739,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> flags ) { <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
740,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> ++ cons ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> extra. type ) ; netbk_fatal_tx_err ( vif",1
741,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ;,1
742,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
743,"<S2SV_ModStart> pos ) ; luaL_checkstack ( L, 1, <S2SV_ModEnd> 1, 3 <S2SV_ModStart> ( L, ""offset <S2SV_blank> must <S2SV_blank> be <S2SV_blank> or <S2SV_blank> "" ) ; ld = <S2SV_ModStart> ( L, <S2SV_ModEnd> size <= ld <S2SV_ModStart> ( L, <S2SV_ModEnd> size <= ld <S2SV_ModStart>, 1, <S2SV_ModEnd> size <= ld",0
744,<S2SV_ModStart> ) ) ; ND_TCHECK2 ( * tptr ) ;,0
745,<S2SV_ModStart> ; int n ; if (! body -> unit_size ) break ; n,0
746,<S2SV_ModStart> NULL ) { memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ; } vpx_clear_system_state <S2SV_ModEnd> ( ) ;,0
747,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, <S2SV_ModEnd> ) ; if",0
748,<S2SV_ModStart> status = 0 <S2SV_ModEnd> ; if (,0
749,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
750,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext4_extent_header ) + sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_entries ) ; memset ( neh -> eh_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size ) ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext4_extent_header ) * le32_to_cpu ( neh -> eh_cpu ) ; memset ( neh -> b_data + sizeof ( struct ext_header ) * le32_to_cpu ( neh -> b_cpu ) ) ;",0
751,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
752,<S2SV_ModStart> ; x_origin = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; image_origin = get_tga_ushort <S2SV_ModEnd> ( & tga,0
753,<S2SV_ModStart> ; ssize_t ret ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
754,<S2SV_ModStart> == CPUCLOCK_SCHED ) * tp = ns_to_timespec <S2SV_ModEnd> ( cpu. <S2SV_ModStart> cpu. sched ) ; else <S2SV_ModEnd> cputime_to_timespec ( cpu <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
755,<S2SV_ModStart> ; uint32 nstrips <S2SV_ModEnd> ; nstrips =,1
756,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
757,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> intra_null> <S2SV_null>,0
758,<S2SV_ModStart> ; int error = 0 <S2SV_ModStart> &= PAGE_MASK ; if ( address < mmap_min_addr ) return - EPERM <S2SV_ModEnd> ; prev =,1
759,"<S2SV_ModStart> { umode_t mode <S2SV_ModEnd> ; error = <S2SV_ModStart> ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart>, & mode, & acl <S2SV_ModStart> if ( error <S2SV_ModEnd> ) return error <S2SV_ModStart> return error ; <S2SV_ModEnd> error = xfs_set_mode",1
760,"<S2SV_ModStart>, int optional, const char * rootfs <S2SV_ModStart> endif if ( safe_mount <S2SV_ModEnd> ( fsname, <S2SV_ModStart> MS_REMOUNT, data, rootfs <S2SV_ModStart>, data ) < 0",1
761,"<S2SV_ModStart> ; if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
762,"<S2SV_ModStart> it_overrun = - 1LL <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> info -> si_overrun = timer_overrun_to_int ( timr, info -> si_overrun ) <S2SV_ModEnd> ; } unlock_timer",1
763,<S2SV_ModStart> > 0 ) { <S2SV_ModEnd> if (!,0
764,<S2SV_ModStart> struct static_key * once_key <S2SV_ModEnd> ) { static <S2SV_ModStart> ; __net_random_once_disable_jump ( once_key <S2SV_ModEnd> ) ; return,1
765,"<S2SV_ModStart> -> io_data ; int ret = - EINVAL ; if ( io_has_count ( & io_data -> kiocb ) ) { if ( io_has_eventfd &&! io_complete ( io_data -> kiocb ) ) ret = - EFAULT ; if ( io_get ( io_eventfd, & io_data -> kiocb ) ) { if ( io_has_count ( io_data -> kiocb ) ) ret = - EFAULT ; }",0
766,<S2SV_ModStart> ; if ( IPCB ( skb ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> &&! opt,1
767,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
768,"<S2SV_ModStart> struct trusted_key_payload * p ; struct trusted_key_payload * new_p ; struct trusted_key_payload * p ; size_t datalen = prep -> datalen ; int ret ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ;",0
769,"<S2SV_ModStart> v |= ( JAS_CAST ( uint_fast32_t, c ) <S2SV_ModEnd> << 24 )",1
770,<S2SV_ModStart> NULL ) { if ( skb -> len < ROSE_MIN_LEN ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> 2 ] ; if ( ROSE_CALL_REQUEST && ( skb -> data [ ROSE_CALL_REQ_OFF ] == ROSE_CALL_REQUEST ) ) { kfree_skb ( skb ) ; continue ; },0
771,"<S2SV_ModStart> out_free ; } else kvm_iommu_unmap_pages ( kvm, & old ) ;",0
772,<S2SV_ModStart> ) goto out ; } <S2SV_ModEnd> if (!,0
773,<S2SV_ModStart> len ) { const char * path = '\\0' ; <S2SV_ModStart> = base ; size ; size = offset + len <S2SV_ModEnd> ; break ;,0
774,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",1
775,<S2SV_ModStart> } if ( <S2SV_ModEnd>!= NULL ),0
776,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) ; },0
777,"<S2SV_ModStart> } if ( options -> flags & ( UV_PROCESS_SETUID | UV_PROCESS_SETGID ) ) { SAVE_ERRNO ( setgroups ( 0, NULL ) ) ; } if (",1
778,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> EOPNOTSUPP ; } if ( rlen <S2SV_null> <S2SV_null>,0
779,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
780,<S2SV_ModStart> book -> dim && i < n,1
781,<S2SV_ModStart> } else { kfree ( rd ) ;,0
782,<S2SV_ModStart> == - EEXIST || ret == - EOVERFLOW,1
783,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; if <S2SV_ModStart> unix_tot_inflight ++ ; } fp -> f_cred -> unix_inflight -- ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
784,"<S2SV_ModStart> size_t chanmap_size = SF_MIN ( <S2SV_ModStart> sf. channels, layout_tag & 0xffff )",1
785,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> = ) ; memset <S2SV_ModEnd> ( sf -> <S2SV_ModStart> 0 ) ; memset <S2SV_ModEnd> ( sf ->,0
786,<S2SV_ModStart> ms ) { uint32_t <S2SV_ModEnd> nestsize = ( <S2SV_ModStart> nestsize = ( uint32_t <S2SV_ModEnd> ) ms ->,1
787,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
788,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
789,<S2SV_ModStart> -> xrefs = safe_calloc ( <S2SV_ModEnd> sizeof ( xref_t,1
790,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
791,"<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ) <S2SV_ModStart> ( opt ) { atomic_sub ( <S2SV_ModEnd> opt -> tot_len <S2SV_ModStart> opt -> tot_len, & sk -> sk_omem_alloc ) ; txopt_put ( opt <S2SV_ModStart> ) ; } }",1
792,"<S2SV_ModStart>, * tmpin = NULL, * tmpout <S2SV_ModStart> = NULL ; if (! tmpout ) { cms_text = cms_text -> dcont ; if (! tmpout ) { dcont = CMS_BINARY ; goto err ; } <S2SV_ModStart>, cms, tmpout ) ; if (! tmpout ) { dcont = SMIME_BINARY ; goto err ; } <S2SV_ModEnd> if (! <S2SV_ModStart>, cms, tmpout ) ; if (! cmsbio ) { cmsbio = cms_text_data ( dcont, cmsbio ) ; if (! tmpout ) { CMSerr ( CMS_F_MEM ) ; goto err ; } } } if ( tmpout ) ; if (! ( tmpout ), SMIME_BINARY ) ; if (! tmpout ) { CMSerr ( CMS_F_BINARY ) ; goto err ; } } } else { CMS_BINARY = SMIME_R_BINARY ( cms, tmpout ) ; } <S2SV_ModStart> ( cmsbio, tmpout, tmpout ) ; } <S2SV_ModEnd> if (!",0
793,"<S2SV_ModStart> ) ) { memset ( & sk, 0, sizeof ( * opt ) ) ;",0
794,"<S2SV_ModStart> asconf ) { sctp_disable_init ( & sctp_v4_init <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ) ) ; sctp_del_init ( & sctp_v4_init ) ; sctp_init <S2SV_ModEnd> ( sctp_route,",0
795,<S2SV_ModStart> cs_flags ) ; hook_del_nick_can_register ( check_registration_keywords ) ; hook_del_user_can_register ( check_registration_keywords ) ;,0
796,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct <S2SV_ModStart> netdev_device * idev <S2SV_ModEnd> ) { struct <S2SV_ModStart> netdev_notifier_device * idev <S2SV_ModEnd> ; struct netdev_notifier_device <S2SV_ModStart> ) ; if ( idev ->,0
797,<S2SV_ModStart> ) ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) ; } else {,0
798,"<S2SV_ModStart> vpx_codec_t * stream <S2SV_ModEnd>, int max",0
799,<S2SV_ModStart> val ) { int i ; temp_size * temp = malloc ( temp_size ) <S2SV_ModEnd> ; ) {,0
800,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
801,<S2SV_ModStart> ; out = safe_calloc <S2SV_ModEnd> ( strlen (,0
802,"<S2SV_ModStart> NULL ) { if <S2SV_ModEnd> ( errno == <S2SV_ModStart> == ENOMEM ) <S2SV_ModEnd> log_warn ( ""lldp""",0
803,<S2SV_ModStart> object + size < * object || * object + size <S2SV_ModStart> object + 1 < * object || * object + size <S2SV_ModStart> object + * object + size < * 2,0
804,"<S2SV_ModStart> ( interface, KSZ8851_CEED ) ; if ( KSZ8851_CE ( interface, KSZ8851_MAH <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, KSZ8851_MAHTR_MAH <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( interface, KSZ8851_MAHSR ) ; }",0
805,<S2SV_ModStart> all_channels_lock ) ; put_net ( pch -> chan_net ) ; pch -> chan_net = NULL ;,1
806,"<S2SV_ModStart> btrfs_dir_item * di = NULL <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> if (! <S2SV_ModStart> - ENOMEM ; di = btrfs_xattr_ino ( inode, name_len, name_len ) ; if (! btrfs_ino ( inode ) ) { ret = - ENOMEM ; goto out ; } di = btrfs_release_on_xattr ( inode, btrfs_xattr ( inode, btrfs_ino ( inode, name, name, NULL ) ; if (! di ) ) { ret = - ENOMEM ; goto out ; } di = btrfs_dir_item <S2SV_ModEnd> ( trans, <S2SV_ModStart>, NULL, <S2SV_ModEnd> di ) ; <S2SV_ModStart> if (! btrfs_release_item <S2SV_ModEnd> ( trans, <S2SV_ModStart>, NULL ) ) ; di = btrfs_lookup_dir_item <S2SV_ModEnd> ( trans, <S2SV_ModStart>, NULL, <S2SV_ModEnd> if (!",0
807,<S2SV_ModStart> > 0xbf ) { <S2SV_ModStart> return 1 ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto err ; } <S2SV_ModStart> ) ) ) ) { <S2SV_ModStart> goto err ; } <S2SV_ModStart> buf_len ) ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) ) ; },0
808,"<S2SV_ModStart> client -> proxy ) ; g_byte_array_free ( client -> auth_buffer, TRUE",1
809,<S2SV_ModStart> = arg ; vpx_writer <S2SV_ModEnd> ( xd ->,0
810,<S2SV_ModStart> ; if ( key_is_negative ( key <S2SV_ModEnd> ) ) return,1
811,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_int <S2SV_ModStart> case IPPROTO_OPT : if ( unlikely ( len < 0 ) ) { <S2SV_ModStart> 1 ) ; } else { <S2SV_ModEnd> if (! <S2SV_ModStart> ) goto out_len ; } <S2SV_ModStart> case IPPROTO_OPT : if ( unlikely ( <S2SV_ModStart> ) ) ; },0
812,"<S2SV_ModStart>, int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { printf ( ""\\n"" ) ; return - EINVAL ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
813,<S2SV_ModStart> { if ( len > sizeof outpkt ) return,0
814,<S2SV_ModStart> vmx_vpid_bitmap ) ; <S2SV_ModEnd> for ( msr <S2SV_ModStart> 0x83f ) ; <S2SV_ModEnd> if ( enable_ept,1
815,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,0
816,"<S2SV_ModStart> } else { TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd, 0 )",0
817,<S2SV_ModStart> rc ; const VP9EncoderConfig <S2SV_ModEnd> * oxcf = <S2SV_ModStart> ( cpi -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf -> <S2SV_ModStart> * oxcf -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf ->,0
818,<S2SV_ModStart> EXIT_FAILURE ) ; # ifdef CONFIG_RETRY ( <S2SV_ModStart> ) ) ; # endif,0
819,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
820,<S2SV_ModStart> INDENT_INCR ; } if ( tbl -> indent < 0 ) tbl -> indent = 0 ;,0
821,"<S2SV_ModStart> + tail ; size_t ss = sst -> sst_dirlen < ss <S2SV_ModEnd> * sst -> <S2SV_ModStart> b ), ss <S2SV_ModEnd> * sst ->",0
822,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""re_grammar.y"" { RE_AST <S2SV_ModStart> } # line 1348 <S2SV_ModEnd> ""re_grammar.y"" { RE_AST <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""re_grammar.c"" { incr_ast_levels <S2SV_ModStart> : # line 122 ; incr_ast_levels ( ) ; <S2SV_ModEnd> ( yyval. <S2SV_ModStart> } # line 137 <S2SV_ModEnd> ""re_grammar.y"" { incr_ast_levels <S2SV_ModStart> } # line 137 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1372 <S2SV_ModEnd> ""re_grammar.y"" { incr_ast_levels <S2SV_ModStart> ( ) ; incr_ast_levels ( ) ; <S2SV_ModStart> } # line 137 <S2SV_ModEnd> ""re_grammar.c"" { incr_ast_levels ( <S2SV_ModStart> } # line 1400 <S2SV_ModEnd> ""re_grammar.c"" { incr_ast_levels ( <S2SV_ModStart> } # line 137 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1348 <S2SV_ModEnd> ""re_grammar.c"" { incr_ast_levels ( <S2SV_ModStart> } # line",0
823,<S2SV_ModStart> opts ; # if CONFIG_VP9_HIGHBITDEPTH if ( mb >= 32 ) { efree ( m ) ; continue ; },0
824,<S2SV_ModStart> } # endif,0
825,<S2SV_ModStart> ; if ( key_is_positive ( key <S2SV_ModEnd> ) ) zap,1
826,"<S2SV_ModStart> ) -> filter ; memset ( & uf, 0, sizeof ( uf ) )",1
827,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int i ;,0
828,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; } exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
829,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
830,<S2SV_ModStart> = 0 ; if ( len < 1 ) return - EINVAL ;,0
831,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( cc0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorEncodeTile"", ""%s"", ""(cc0%rowsize)!=0"" ) ; return 0 ; } <S2SV_ModEnd> while ( cc",1
832,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
833,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> input_backwards_size_char * input_backwards_char * input_backwards_size <S2SV_ModEnd>, character_backwards_size, <S2SV_ModStart> ) { size_t input_backwards_size ; size_t input_backwards_size = 0 ; <S2SV_ModStart> ) { int max_bytes_matched = MAX_LIMIT_LIMIT_LIMIT <S2SV_ModEnd> ; break ; <S2SV_ModStart> RE_SCAN_LIMIT ) { <S2SV_ModStart> RE_FLAG_BACKWARDS ; } else { max_bytes_matched = MAX_SCAN_BACKWARDS ; } <S2SV_ModStart> |= max_bytes_matched ; }",0
834,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> * best_rd_rd_rd ; <S2SV_ModStart> int mbmi ; PREDICTION_MODE <S2SV_ModEnd>, best_rd_rd_rd ; int <S2SV_ModStart>, best_rd, best_rd, best_rd, best_rd, best_rd, best_rd_rd ) ; PREDICTION_MODE <S2SV_ModEnd> ) { int <S2SV_ModStart>, best_rd, best_rd_rd, best_rd_rd, best_rd, best_rd, best_rd, best_rd ) ; PREDICTION_MODE <S2SV_ModEnd> ; best_rd = <S2SV_ModStart>, best_rd ) ; # if CONFIG_VP9_ENCODECONLY <S2SV_ModEnd> ) { int <S2SV_ModStart>, best_rd, best_rd, best_rd, best_rd, best_rd, best_rd, best_rd, best_rd, best_rd, best_rd ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( best_sse >= best_rd ) { unsigned char * best_sse = INT_MAX ; # if CONFIG_ENCODING if (",0
835,"<S2SV_ModStart> svm, AC_VECTOR ) ; set_exception_intercept ( svm, DB_VECTOR",0
836,<S2SV_ModStart> ; h = safe_calloc ( h -> <S2SV_ModEnd> sizeof ( h,0
837,"<S2SV_ModStart> sst, const cdf_directory_t * root_storage <S2SV_ModEnd> ) { cdf_summary_info_header_t <S2SV_ModStart> = cdf_clsid_to_mime ( root_storage -> d_storage_uuid <S2SV_ModEnd> ) ; if",0
838,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> UINT32 <S2SV_ModEnd> ) { if,0
839,<S2SV_ModStart> -> length ) ; if ( err ) return - EFAULT,1
840,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args <S2SV_ModStart> vp9_rc ) { const VPX_COMP * const ctx = & cpi -> rc ; FrameWorkerData * const frame_param = & ctx -> frame_type ; FrameWorkerData * const frame_worker_id = ( cpi -> data_id ) ; FrameWorkerData * const frame_param = & cpi -> frame_parallel_decode ) ; if ( cpi -> oxcf. data_id == NULL ) { VPX_CODEC_ERROR_INVALIDX_PARAM ; vpx_write ( cpi, & cpi -> flags ) ; } return VPX_CODEC_INVALID_PARAM ; } else { VPX_PARAM ; }",0
841,<S2SV_ModStart> if ( prev && <S2SV_ModEnd> ( FRAG6_CB ( <S2SV_ModStart> ) - offset <S2SV_ModEnd> > 0 ) <S2SV_ModStart> > 0 ) goto discard_fq ; if <S2SV_ModEnd> ( next ) <S2SV_ModStart> > 0 ) goto discard_fq ; <S2SV_ModEnd> if ( fq <S2SV_ModStart> > 0 ) goto discard_fq ;,0
842,<S2SV_ModStart> { uint16 bitspersample = 1,0
843,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> en ) { <S2SV_ModStart> } if ( ( ( a -> name [ 0 ] ) == '\\0' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_SET ) ; return ( ARCHIVE_FAILED ) ; } if ( ( ( a -> name ) == '\\n"" ) { archive_set_error ( & a, ARCHIVE_LEN ) ; archive_set_error ( & a, ARCHIVE_FAILED ) ; archive, ARCHIVE_FAILED ) ; } archive_set_error ( & a, ARCHIVE_LEN ) ; archive, ARCHIVE_FAILED ) ; if ( ( a -> length - 1 ) == ARCHIVE_FAILED ) { archive = ARCHIVE_FAILED ; } else { archive_set_error ( & a, ARCHIVE_LEN ) ; archive_set_error ( & a ) ; archive, ARCHIVE_FAILED ) ; } if ( ( ( a, a )!= NULL ) { archive_set_",0
844,"<S2SV_ModStart> ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL, rootfs -> path? rootfs -> mount : <S2SV_ModEnd> NULL )!=",1
845,"<S2SV_ModStart> * bh ; unsigned int iinfo ; <S2SV_ModStart> ( inode, iinfo -> i_lenAllocb ) ; if ( bh ) goto out ; iinfo ->",0
846,<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & 0,0
847,"<S2SV_ModStart> dst_size ) { <S2SV_ModEnd> if ( data <S2SV_ModStart>, data ) return - <S2SV_ModEnd> ; } <S2SV_null>",0
848,"<S2SV_ModStart> ] ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + strlen ( t1_buf_array ) + strlen ( t1_line_array ) + t1_buf_array ) ;",0
849,<S2SV_ModStart> q ) ; if (! fctx ) return false,0
850,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
851,<S2SV_ModStart> ADD ) { if ( subdir ) return ;,0
852,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; if (! <S2SV_ModStart>, cc ) ) return 0 <S2SV_ModStart> wc ) ; return 1 ;",1
853,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
854,"<S2SV_ModStart> ; int err ; struct ip_options_rcu * inet_opt <S2SV_ModStart>. s_addr ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if (! inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) { <S2SV_ModStart> if ( sk ) inet_opt = rcu_dereference_protected ( sk ) ; } <S2SV_ModEnd> if ( sk",0
855,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
856,"<S2SV_ModStart> * mgr_hdl ; <S2SV_ModEnd> memset ( s_path <S2SV_ModStart> ( c_path ) <S2SV_ModEnd> ) ; switch <S2SV_ModStart> ( c_path, ""%s%s%d_C_XXXXXX"" <S2SV_ModEnd>, c_path )",0
857,<S2SV_ModStart> ( uint32_t ) || ( effect_param_param_param_param_t * ) ) ) return - EINVAL ; if (,0
858,"<S2SV_ModStart> ""`%s\'"", option ) ; page_geometry = DestroyString ( page_geometry",1
859,"<S2SV_ModStart> ) ) { memset ( & sk, 0, sizeof ( * opt ) ) ;",0
860,,0
861,"<S2SV_ModStart> OP_ENDCATCH ) ; emit ( J, F, OP_ENDTRY ) ;",1
862,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_row_idx <S2SV_ModStart> return ; } LIBXSMM_ASSERT ( 0!= l_row && 0!= l_column ) ;",1
863,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> if (!,0
864,"<S2SV_ModStart> uint8 result ; uint32 <S2SV_ModEnd> length ; struct <S2SV_ModStart> return False ; packet = * s ; <S2SV_ModStart> return False ; packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_connect_connect <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
865,"<S2SV_ModStart> ; cleanup : if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> ; if (",1
866,<S2SV_ModStart> ; if ( ( c == 0 &&,0
867,<S2SV_ModStart> ; if ( ctxt -> flags ) return - EINVAL ; if (,0
868,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
869,<S2SV_ModStart> & new_map ) <S2SV_ModEnd> ) goto out,0
870,<S2SV_ModStart> ) ; } else {,0
871,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> ) ; } smb_ofile_flush ( sr, <S2SV_ModEnd> sr -> fid_ofile <S2SV_ModStart> sr -> fid_ofile <S2SV_ModEnd> ) ; (",1
872,<S2SV_ModStart> int i ; jas_uchar <S2SV_ModEnd> * data ;,0
873,<S2SV_ModStart> 16 ) { memcpy <S2SV_ModEnd> ( ( pbi,0
874,"<S2SV_ModStart> addrtype = TIPC_ADDR_ID ; memset ( & addr -> addr, 0, sizeof ( addr -> addr ) )",1
875,"<S2SV_ModStart> ( user_alloc && ( <S2SV_ModStart> PAGE_SIZE - 1 ) ) ||! access_ok ( VERIFY_WRITE, mem -> userspace_addr, mem -> memory_size",1
876,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",0
877,<S2SV_ModStart> } if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; } } \\\n} <S2SV_ModEnd> if ( strncasecmp,1
878,"<S2SV_ModStart> * buf, UINT64 <S2SV_ModEnd> * p, <S2SV_ModStart> p, u ; size_t len, <S2SV_ModStart> len ) { if (! buf ) { return NULL ; } <S2SV_ModStart> p = { char * buf ; if ( u == NULL ) { PyErr_DECREF ( ""UnexpectedEndOfFile"", & buf ) ; return PyExc_DECREF ( u ) ; } <S2SV_ModStart> ) ; } <S2SV_ModStart> * p ; size_t pos = buf ; if (! buf ) { if (! buf ) return AVERROR_INVALID_UNKNOWN ; } <S2SV_ModStart> * p = buf ; free ( buf ) ;",0
879,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 0 ) { if ( record_data_size > ( ( record_data_size ) ) { if ( ( ( data_size - 4 ) ) ) { libcerror_set ( error_data_size, LIBCERROR_RUNTIME_ERROR_DOMAIN_SIZE, LIBCERROR_VALUE_VALUE_VALUE_VALUE_DOMAIN_RUNTIME ) ) ; } <S2SV_ModStart> 0 ) { if ( ( ( data_size > ( record_size - 4 ) ) ) ) { libcerror_set ( error_data_size, LIBCERROR_DOMAIN_RUNTIME, LIBCERROR_DOMAIN_VALUE_RUNTIME, LIBCERROR_VALUE_VALUE_SIZE ) ; } <S2SV_ModStart> 0 ) { if ( ( data_size > ( record_data_size - 4 ) ) ) { libcerror_set ( error_data_size, LIBCERROR_DOMAIN_RUNTIME, LIBCERROR_RUNTIME_RUNTIME ) ; }",0
880,"<S2SV_ModStart> WaveHeader WaveHeader ; int format_chunk = 0 ; <S2SV_ModStart>, format ; if ( format_chunk ++ ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",1
881,<S2SV_ModStart> ; uint32_t sampleRate = 0 <S2SV_ModStart> config -> num_channels ||! config -> sample_rate,1
882,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr ) ;,0
883,<S2SV_ModStart> ~ SNDRV_TIMER_IFLG_RUNNING ; list_del_init ( & timeri -> ack_list ) ; list_del_init ( & timeri -> active_list ) ;,1
884,"<S2SV_ModStart> = 0 ; int len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> ( buf, ""%s.%s"" <S2SV_ModEnd>, buf, <S2SV_ModStart> ) > 0 <S2SV_ModEnd> ) { free",0
885,<S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_flags_compat &&,1
886,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
887,"<S2SV_ModStart> ; if ( strcmp ( sub_demuxer -> name, ""srt"" ) && strcmp ( sub_demuxer -> name, ""ass"" ) ) goto error ; if (",1
888,<S2SV_ModStart> ; int err = KRB5_ALIGNATURE_REQUEST <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { if ( retval == 0 ) return - 1 ; <S2SV_ModEnd> data = in,0
889,"<S2SV_ModStart> write_bit ( w, vpx_write_bit <S2SV_ModEnd> * w )",0
890,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
891,<S2SV_ModStart> dptr ++ = ROSE_CALL_REQ_ADDR_LEN_VAL <S2SV_ModEnd> ; memcpy (,1
892,<S2SV_ModStart> = new_ns ; new_ns -> mounts ++ ;,1
893,<S2SV_ModStart> = 0 ; if (,0
894,<S2SV_ModStart> ; zip_object_handlers. get_gc = php_zip_get_gc ; zip_object_handlers.,1
895,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if <S2SV_ModEnd> ( iova < <S2SV_ModStart> mem -> iova || length > mem -> length || iova > <S2SV_ModEnd> mem -> iova <S2SV_ModStart> mem -> length - length ) return - EFAULT ; return <S2SV_ModEnd> 0 ; default,1
896,"<S2SV_ModStart> = 0 ; ND_TCHECK2 ( * dp, sizeof ( * ni6 ) ) ; <S2SV_ModStart> ) + 4 ; ND_TCHECK ( cp [ 0 ] )",1
897,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
898,<S2SV_ModStart> sent = 0 <S2SV_ModEnd> ; smb_msg.,1
899,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; if ( ref -> ref > INT_MAX / 2 ) return false ; <S2SV_ModStart> ref ++ ; return true ;,1
900,<S2SV_ModStart> fs -> clusters + <S2SV_ModEnd> 1 ) get_fat,1
901,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
902,<S2SV_ModStart> sk_nulls_node ) ; sk_nulls_node_init ( & sk -> sk_nulls_node ) ;,1
903,<S2SV_ModStart> ) { return ERROR_INV_SLICE_HDR_T <S2SV_ModEnd> ; } ps_dec ->,0
904,<S2SV_ModStart> (! mm ||! mm -> env_end,1
905,"<S2SV_ModStart> inode * inode, int relocated ) { int flags = relocated? RR_RELOC_DE : 0 ; <S2SV_ModEnd> int result = <S2SV_ModStart>, inode, flags <S2SV_ModEnd> ) ; if <S2SV_ModStart>, inode, flags | RR_REGARD_XA <S2SV_ModEnd> ) ; }",1
906,<S2SV_ModStart> * inotify_new_group ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> -> inotify_data. inotify_lock ) ; <S2SV_ModEnd> return group ;,0
907,<S2SV_ModStart> [ p ] && in -> linesize [ p ],1
908,<S2SV_ModStart> pairs ) ; if ( pcount > MaxAllocSize / sizeof ( pairs ) ) {,0
909,<S2SV_ModStart> buffer ) ; if ( screen -> buffer == NULL ),0
910,"<S2SV_ModStart> SCALAR_VALUE ) { coerce_reg_to_size ( & <S2SV_ModStart> [ value_regno ], size <S2SV_ModEnd> ) ; }",1
911,<S2SV_ModStart> } bufp += stripsize <S2SV_ModEnd> ; } return,0
912,<S2SV_ModStart> base_name ) ; char need_to_append_dot ; struct search_domain * dom ; if (! base_name ) return NULL ; <S2SV_ModEnd> for ( dom,0
913,<S2SV_ModStart> = 0 ; if ( err!= 0 ) err = - EINVAL ;,0
914,<S2SV_ModStart> msg -> msg_namelen = 0 ; msg -> msg_namelen = 0 ;,0
915,"<S2SV_ModStart> number_planes, number_planes_filled <S2SV_ModEnd> ) ; number_planes_filled <S2SV_ModStart> ( number_planes_filled, number_planes_filled <S2SV_ModEnd> ) ; }",0
916,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if (! context ) return FALSE ; <S2SV_ModStart> < originalSize ) { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModStart> 0xFF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
917,<S2SV_ModStart> policy ) { if (! inode_owner_or_capable ( inode ) ) return - EACCES ;,1
918,<S2SV_ModStart> ( state -> address <S2SV_ModEnd> ) ; },0
919,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int key_cmp,0
920,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
921,"<S2SV_ModStart> ) ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> header <S2SV_blank> to <S2SV_blank> header_bin, <S2SV_blank> got <S2SV_blank> %s"", __func__, header ) ; pool_failed ( pool ) ; return false ; } <S2SV_ModEnd> cb1 = (",0
922,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
923,"<S2SV_ModStart> size ) { size_t res ; if ( check_mul_overflow ( num, size, & res ) ) abort ( ) ; void * ptr ; <S2SV_ModStart> = malloc ( res <S2SV_ModEnd> ) ; if",0
924,<S2SV_ModStart> -> io_struct task <S2SV_ModEnd> ) ; task,0
925,"<S2SV_ModStart> __func__ ) { Py_RETURN_NONE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( obj, <S2SV_ModEnd>, & PyId",0
926,<S2SV_ModStart> ; if (! dev -> desc. bLength ) return - ENOMEM,0
927,<S2SV_ModStart> arg ) { struct perf_event_context * arg ; <S2SV_ModStart> ; return ret ; <S2SV_ModEnd> } <S2SV_null>,0
928,<S2SV_ModStart> sacked_out ) ; if ( newly_acked_sacked <= 0 || WARN_ON_ONCE (! tp -> prior_cwnd ) ) return ;,1
929,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_y ( VP9_COMMON <S2SV_ModStart> * cm, MACROBLOCKD * xd, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { const PREDICTION_MODE <S2SV_ModEnd> y_mode = xd",0
930,<S2SV_ModStart> ) { return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
931,<S2SV_ModStart> ) ) ; if (! <S2SV_ModStart> ) ) return - EINVAL ;,0
932,"<S2SV_ModStart> c -> tile_width <S2SV_ModEnd>, 16 ) <S2SV_ModStart>, 16 ) * 3",1
933,"<S2SV_ModStart> ) ; } if ( key ) rb_ivar_set ( self, id_key ) ;",0
934,,1
935,<S2SV_ModStart> s ) ; <S2SV_ModEnd> event_init ( &,0
936,"<S2SV_ModStart> p ) { return <S2SV_ModEnd> chdlc_print ( ndo <S2SV_ModStart>, p, h -> len <S2SV_ModEnd> ) ; }",1
937,<S2SV_ModStart> (! rc <S2SV_ModEnd> && tcon ),1
938,<S2SV_ModStart> ; if ( skb_is_err_queue ( skb ) &&,0
939,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_parser -> sax2, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, NULL, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ;",0
940,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
941,<S2SV_ModStart> { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE ) { return SECURE_ELEMENT_ERROR_BUF_SIZE,1
942,<S2SV_ModStart> + 1 ; if ( iframe -> max_niv - 1 > session -> max_settings ) { return rv ; },0
943,<S2SV_ModStart> = ucounts ; new_ns -> mounts = 0 ; new_ns -> pending_mounts = 0 ;,1
944,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
945,<S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; },0
946,<S2SV_ModStart>. dimensions ; unsigned int actual_size = rtype == 2? r -> begin : n ; unsigned int limit_r_begin = ( r -> begin < actual_size? r -> begin : actual_size ) ; unsigned int limit_r_end = ( r -> end < actual_size? r -> end : actual_size ) ;,0
947,<S2SV_ModStart> flags ) { struct skb_clock * tp ; <S2SV_ModStart> { if ( unlikely ( skb ) ) { mutex_lock ( & <S2SV_ModStart> ) ) ; } else { kfree_skb ( skb ) ;,0
948,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
949,"<S2SV_ModStart> void encode_ext_t ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_tree, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> t ) { vpx_writer <S2SV_ModEnd> ( w, <S2SV_ModStart> 0 ) ; vpx_write_bit <S2SV_ModEnd> ( w,",0
950,"<S2SV_ModStart> write_buffer_size ) { struct vpx_wb_write_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 8 ) { vpx_wb_write_bit_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_bit_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_bit_buffer <S2SV_ModEnd> ( wb,",0
951,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
952,"<S2SV_ModStart> ret, n ; int num_descriptors ; size_t offset = sizeof ( struct hid_descriptor ) - ENOMEM ; <S2SV_ModStart> ENODEV ; } if ( desc -> bLength < sizeof ( struct hid_descriptor ) ) { return - EINVAL ; }",0
953,"<S2SV_ModStart> uint32_t id ; ND_TCHECK ( ndo, len ) <S2SV_ModEnd> ; ND_PRINT (",0
954,<S2SV_ModStart> group_dead ) ; if ( group_dead ) audit_exit ( tsk ) ; if ( tsk -> exit_dead ) ; exit_keys ( ) ; exit_thread_put ( tsk ) ; exit_thread ( ) ; exit_exit ( ) ; exit_thread_put ( tsk ) ; if ( tsk -> binfmt -> binfmt ) ; exit_fs ( tsk -> binfmt ) ; module_put ( tsk ) ; exit_put ( tsk ) ; exit_thread_put ( tsk ) ; exit_put ( tsk ) ; exit_keys ( ) ; exit_put ( tsk ) ; exit_thread_put ( tsk ) ; exit_put ( tsk ) ; exit_exit ( ) ; exit_ctx -> binfmt,0
955,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void *",0
956,"<S2SV_ModStart>, jas_memc, 0 <S2SV_ModEnd> ) ) {",0
957,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
958,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> i2SV_null> static <S2SV_ModStart> i2 ] ; tran_low_t <S2SV_ModEnd> y1, x <S2SV_ModStart> 2 ] ; if ( w1 ) { MODE_INFO * l2 = & EXT4 ) m1 ; for ( i1 = 0x0 ; i1 [ i ] = 0x0 ; i1 [ i ] = 0x0 ; ++ ; ++ ; }",0
959,<S2SV_ModStart> ( tag == ASN1_EOC <S2SV_ModEnd> ) { if <S2SV_ModStart> >= 0x7f ) goto check_length ; <S2SV_ModEnd> if ( unlikely,0
960,<S2SV_ModStart> ) val ; <S2SV_ModEnd> memset ( ptr,1
961,<S2SV_ModStart> mnt ) { return 0 ;,0
962,"<S2SV_ModStart> PHP_SHA512_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_SHA1_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } return FAILURE ; } <S2SV_ModStart> PHP_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } return FAILURE ; } <S2SV_ModStart> PHP_SHA1_CTX context ; } if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; }",0
963,<S2SV_ModStart> ] <= max && value [ n ] - min < field -> maxusage,0
964,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
965,<S2SV_ModStart> if ( argReg > <S2SV_ModEnd> regsz ) { <S2SV_ModStart> regsz ) { return ;,1
966,<S2SV_ModStart> ( req_val ) ) { <S2SV_ModEnd> return ; },0
967,"<S2SV_ModStart> 0 ) ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> -> i_mount, args -> rmtvaluelen <S2SV_ModEnd> ) ; if",0
968,<S2SV_ModStart> = info ; if ( info + size > sizeof ( info ) ) return NULL ;,0
969,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
970,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) &&! test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) &&",1
971,"<S2SV_ModStart> ) ) ; if ( LTXTQUERY_TOO_BIG ( state. num, state. sumlen ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEED ), errmsg ( ""ltxtquery <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ) ) ;",0
972,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
973,<S2SV_ModStart> ; if (! EXT4_SB ( inode -> i_sb ) -> s_journal <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd>! handle ),1
974,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> return 0 ; if ( <S2SV_ModEnd> strcpy ( len <S2SV_ModStart> ) { if ( len < 0 ) { return 0 ; } <S2SV_ModEnd> str = strlen ( <S2SV_ModStart> val ) ; if ( strlen ( len ) > 0 ) { return - 1 ; } <S2SV_ModEnd> return 0 ;,0
975,"<S2SV_ModStart> ( f, ""PG%31[ <S2SV_blank> \\t%c%31[ <S2SV_blank> \\t%31[ <S2SV_blank> \\t%31[ <S2SV_blank> \\t]%31[ <S2SV_blank> \\t%31[ <S2SV_blank> \\t]%31[ <S2SV_blank> \\t"" <S2SV_ModEnd>, temp,",0
976,"<S2SV_ModStart> + 8 ; size_t size ; char * buf ; size = 0 ; <S2SV_ModStart> + 8 ; size ; if ( size < 2 ) { BYTE * buf + 1 ) ; memcpy ( buf + size + 1, ""DEADBEEF"", ""DEADBEEF"" ) ; memcpy ( buf, size + 1, ""0"", size ) ; memcpy ( buf + size + 1, sizeof ( buf ) ) ; free ( buf ) ; }",0
977,"<S2SV_ModStart>, 1, <S2SV_ModEnd> count ) ;",0
978,"<S2SV_ModStart> len ) { strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str ) ; if ( len < 0 ) { return NULL ; } <S2SV_ModEnd> str = strlen (",0
979,"<S2SV_ModStart> char * to ; size_t <S2SV_ModEnd> max = strlen <S2SV_ModStart> 0 ) { if ( <S2SV_ModEnd> ( g. <S2SV_ModStart>, g. inf ) == 0 ) { pr_err ( ""%s: <S2SV_blank> %d <S2SV_blank> can <S2SV_blank> to <S2SV_blank> %d\\n"", strlen ( g. inf ) ; return - EINVAL ; } else { <S2SV_ModEnd> if ( strlen ( <S2SV_ModStart> g. out ) ; memcpy ( g. inf, <S2SV_ModEnd> g. outf <S2SV_ModStart> g. outname ) ; free ( <S2SV_ModEnd> ) ; }",0
980,,1
981,<S2SV_ModStart> * output ; MagickBooleanType status ; <S2SV_ModStart> ) ) { status = MagickTrue ; <S2SV_ModStart> ( void ) status = MagickFalse ; <S2SV_ModStart> i ++ ) if ( status == MagickFalse ) status = MagickFalse ; <S2SV_ModStart> ( void ) status = MagickFalse ; <S2SV_ModStart> ( void ) status = MagickFalse ; <S2SV_ModStart> ( void ) fclose ( void ) ; ( void ) fclose ( input ) ;,0
982,,0
983,<S2SV_ModStart> ; if ( bd < 0 ||,0
984,"<S2SV_ModStart> passwd * pwd, const char * prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> & tmpname, ""/etc"", prefix <S2SV_ModEnd> ) ) ==",1
985,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
986,<S2SV_ModStart> str ) { return 0 ;,0
987,<S2SV_ModStart> TRUE ; } Jid * my_jid = g_create ( stanza_from ) ; const char * my_jid = xmpp_create ( stanza ) ; <S2SV_ModStart> jid = stanza_from ( stanza -> barejid ) <S2SV_ModEnd> ; if (,0
988,,0
989,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
990,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> S2SV_null> <S2SV_null>,0
991,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; BT_DBG (,1
992,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
993,<S2SV_ModStart> ) ; } if ( ( st. st_key == 0 ) return - EINVAL ;,0
994,,0
995,<S2SV_ModStart> * zone ; size_t tilemap_size ; <S2SV_ModStart>. height ; if ( <S2SV_ModEnd> x_size!= x_tile,0
996,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ; return ( 0 ) <S2SV_ModStart> ) ) ; return ( 0 ),0
997,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> node ) { return 0 ;,0
998,"<S2SV_ModStart>. get_codec_alg_priv ( ctx ) <S2SV_ModEnd>, 1 )",0
999,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; char <S2SV_ModStart> + 1, ""prestring=%s"" <S2SV_ModEnd>, buf ) <S2SV_ModStart> + 1, L_BUFSIZE <S2SV_ModEnd> ) ; if",0
1000,<S2SV_ModStart> if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks,1
1001,"<S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu,",1
1002,,0
1003,"<S2SV_ModStart> VOS_STARTCODE ) { int profile, level ; <S2SV_ModStart> s, gb, & level ) ; if ( <S2SV_ModEnd> level < 8",0
1004,<S2SV_ModStart> nsops < 1 || nsops > SEMOPM,1
1005,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( i,0
1006,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; },1
1007,<S2SV_ModStart> -> i ; if ( i -> max ( i -> parent -> width ) > i -> height ) { # endif },0
1008,<S2SV_ModStart> >> 2 ; if ( q + o >= e ) goto out ;,0
1009,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( bytes_matched,0
1010,"<S2SV_ModStart> len ) { strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> case LEX_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED"" <S2SV_ModEnd> ) ; return",0
1011,<S2SV_ModStart> mnt_instance ) ; if ( unlikely (! list_empty ( & list_for_each_entry_safe <S2SV_ModEnd> ) ) {,0
1012,"<S2SV_ModStart> NULL ) { vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> w, w, w, w ) ; vpx_write_bit <S2SV_ModEnd> ( w,",0
1013,,1
1014,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
1015,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> uint32_t pos ; if ( inode -> i_size > inode -> i_size ) { err = - ENOMEM ; goto out_unlock_inode <S2SV_ModStart> page ) ; } <S2SV_ModEnd> return 0 ;,0
1016,<S2SV_ModStart> else if ( cpu_has_secondary_exec_ctrls ( ) <S2SV_ModEnd> ) { if,0
1017,<S2SV_ModStart> if ( ent == NULL ) { st = KRB5_KDB_NOENTRY ; <S2SV_ModEnd> goto cleanup ;,0
1018,<S2SV_ModStart> 1 ) ; if ( ps_bitstride == 0 ) { return IHEVCD_ERROR_INVALID_PARAMETER ; },0
1019,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> b2SV_null> int <S2SV_ModStart> int bp_blocksize_t bs_blocks <S2SV_ModEnd> ; int b_blocks <S2SV_ModStart> uint32_t b_to_cpu ( <S2SV_ModEnd> ) ; int,0
1020,<S2SV_ModStart> ) ) ; if ( psf -> header. len > psf -> header. len ) { <S2SV_ModStart> ) ) ; break ; },0
1021,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( i,1
1022,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
1023,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1024,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> S_IWUSR ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; unlink",0
1025,"<S2SV_ModStart> int num_items_scanned ; guint pkt_len ; int <S2SV_ModEnd> pktnum, hr <S2SV_ModStart> + 64, ""LEN=%9u"" <S2SV_ModEnd>, & pkt_len",0
1026,<S2SV_ModStart> ; int err = 0 ; msg -> msg_namelen,1
1027,"<S2SV_ModStart> ; if ( zend_hash_find <S2SV_ModEnd> ( ht,",1
1028,<S2SV_ModStart> tlen = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) -> type ),0
1029,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> ; } } io -> io_cleanup = port_cleanup ;,0
1030,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",0
1031,<S2SV_ModStart> p -> tokenpos >= ( <S2SV_ModEnd> p -> tokenlen <S2SV_ModStart> p -> tokenlen - 1 ),1
1032,<S2SV_ModStart> vpx_codec_t vpx_16x8_t vpx_low_t vpx_16x8_t <S2SV_ModEnd> * vpx_16x8_t <S2SV_ModStart> * vpx_16x8_t * vpx_16x8_t <S2SV_ModEnd> = vpx_16_t <S2SV_ModStart> = vpx_bn ; vpx_write <S2SV_ModEnd> ( vpx_bit (,0
1033,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1034,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { avio_feof ( pb ) ; <S2SV_ModStart> i ++ ) ; },0
1035,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
1036,"<S2SV_ModStart>, NULL, EINVAL <S2SV_ModEnd> ) ; if",0
1037,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1038,"<S2SV_ModStart> -> stratum_port ; snprintf ( address, 254 <S2SV_ModEnd>, ""%s:%s"",",1
1039,<S2SV_ModStart> } if (! page_name_name ( page ) ) { return NULL ; } else { <S2SV_ModStart> ) ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1040,<S2SV_ModStart> + i ; unsigned int actual_size = f -> blocksize_1 / 2 ; unsigned int limit_r_r_begin = r -> begin < actual_size? r -> end : actual_size ; unsigned int limit_r_r_r_end = r -> end < actual_size? r -> end : actual_size ;,0
1041,<S2SV_ModStart> head -> iov_base ; if ( hdr > head -> iov_len ) return 0,1
1042,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; o2nm_unlock_subsystem ( ) ;,0
1043,<S2SV_ModStart> ; if ( vpx_bit_buffer <S2SV_ModEnd> ( & frame ->,0
1044,<S2SV_ModStart> size ) { size_t <S2SV_ModEnd> size ) void,0
1045,<S2SV_ModStart> ; ssize_t count ; if ( bytes == 0 || items == 0 ) return 0,1
1046,,0
1047,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,0
1048,"<S2SV_ModStart> ) ) ; memset ( & addr_len, sizeof ( struct mss_dev ) ) ;",0
1049,<S2SV_ModStart> ( sbuf + 1 <S2SV_ModEnd> ) ; if,0
1050,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1051,<S2SV_ModStart> 0 ) ; hrtimer_try_to_cancel <S2SV_ModEnd> ( & stime,1
1052,<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( p - low ) { <S2SV_ModStart> low ) ; },0
1053,"<S2SV_ModStart> ) { struct memset ( & ptr, 0, sizeof ( struct ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ; } memset ( rfc, 0, sizeof ( struct <S2SV_ModEnd> ) ) ;",0
1054,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_WAITALL )",0
1055,<S2SV_ModStart> -> chunksize = UINT64_MAX <S2SV_ModEnd> ; for (,1
1056,<S2SV_ModStart> u1_first_byte ) ; <S2SV_ModEnd> if ( ps_dec,0
1057,<S2SV_ModStart> { if ( s,0
1058,<S2SV_ModStart> } err = crypto_rng_alg ( tfm ) <S2SV_ModEnd> -> seed (,1
1059,<S2SV_ModStart> = uid ; <S2SV_ModEnd> new -> count <S2SV_ModStart> new -> count = 0 <S2SV_ModEnd> ; spin_lock_irq ( <S2SV_ModStart> } if ( <S2SV_ModEnd> ucounts -> count <S2SV_ModStart> ucounts -> count == INT_MAX ) ucounts = NULL ; else ucounts -> count += 1 <S2SV_ModEnd> ; spin_unlock_irq (,1
1060,<S2SV_ModStart> ) ; } if ( err <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1061,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1062,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> = 0 ; len - 1 ;,0
1063,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { if ( <S2SV_ModStart> ) ; } if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result ) ;,1
1064,"<S2SV_ModStart> * fmode_t fmode, fmode_t fmode <S2SV_ModEnd> ) { write_lock <S2SV_ModStart>, fmode, fmode <S2SV_ModEnd> ) ; spin_unlock",0
1065,"<S2SV_ModStart> ResourceLimitError, ""MemoryAllocationFailed"" ) ; ( void ) ResetMagickMemory ( global_colormap ) ;",0
1066,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1067,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1068,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_TX_SIZE ( VP9_COMMON * cpi <S2SV_ModEnd>, int64_t <S2SV_ModStart> int mi, int64_t <S2SV_ModEnd>, int64_t <S2SV_ModStart> int64_t * cpi, int64_t res, int64_t * out_diff ) ; const int64_t * out_dist_thresh = & cpi -> common ; const int64_t dist_t * out_thresh = & cpi -> common ; const int64_t * sse = & cpi -> common ; const int64_t * out_thresholds = 0 ; # if CONFIG_VP9_HIGHBITDEPTHRESHIGHBITDEPTH if ( xd -> cur_skip [ 0 ] -> flags & YV12_FLAG_BITDEPTH ) { unsigned int64_t * ( pd -> cur_costsse, pd -> common. subsam = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> flags & YV12_FLAG_FLAG_HIGHBITDEPTH ) { xd ->",0
1069,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),0
1070,"<S2SV_ModStart> ( ndo, ""%s"", snpal <S2SV_ModEnd> ) ) ;",0
1071,<S2SV_ModStart> * ret = 0 ; if ( ( * ) NULL ) return NULL ;,0
1072,"<S2SV_ModStart> void write_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> int segment_id, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> { return vpx_reader <S2SV_ModEnd> ( r,",0
1073,<S2SV_ModStart> ; uint32_t backup_handle = 0 <S2SV_ModStart> ret == 0 ) { if ( <S2SV_ModEnd> res -> backup <S2SV_ModStart> goto out_unlock ; } else { backup_handle = req -> buffer_handle ; },1
1074,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool get_desc ( <S2SV_ModStart> struct desc_struct * out, <S2SV_ModEnd> unsigned short sel <S2SV_ModStart> SEGMENT_LDT ) { bool success = false <S2SV_ModEnd> ; struct desc_struct <S2SV_ModStart> struct * out ) { * out = <S2SV_ModEnd> desc_struct * <S2SV_ModStart> sel ] ; return false ; } <S2SV_ModStart> > <S2SV_null> <S2SV_null>",0
1075,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1,",0
1076,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool final_p_p_sctp_p_p ( struct <S2SV_ModStart> sctp, final_p, struct in6_addr * final_p, final_p, final_p, final_p, final_p, final_p, final_p, final_p, final_p, final_p, final_p, final_p, final_p, final_p, final_p, final_p, final_p, final_p, final_p <S2SV_ModEnd> ) ; final_p <S2SV_ModStart> ) ; } final_p <S2SV_ModStart>, fl6, final_p, final_p, final_p, final_p <S2SV_ModEnd> ) ; final_p <S2SV_ModStart>, fl6, final_p, final_p, final_p, final_p, final_p <S2SV_ModEnd>, final_p,",0
1077,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1078,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ;,0
1079,<S2SV_ModStart> service_name ) ; <S2SV_ModEnd> if ( client,0
1080,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> < ie && <S2SV_ModEnd> ND_TTEST ( *,1
1081,"<S2SV_ModStart> ( interface, KSZ8851_TX_MIN_LENGTH, KSZ8851_TX_MAADRX <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_TX_MAHDR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_TX_SSZ8851_TX_MAHDR <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, KSZ8851_TX_MAQ <S2SV_ModEnd> ) ) ;",0
1082,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1083,<S2SV_ModStart> goto all_leaves_cluster_together ; <S2SV_ModEnd> } if (,0
1084,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
1085,<S2SV_ModStart> disable ) ; <S2SV_ModEnd> void ) ;,0
1086,<S2SV_ModStart> * d1 ; if ( x == 0 ) return - 1 ; <S2SV_ModStart> y ) { if ( x == 0 ) { return 1 ; },0
1087,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 ) { ret = - EINVAL ; goto out_clips ; },0
1088,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1089,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1090,"<S2SV_ModStart> 0 ) ; size_t minsz = R_MIN ( minsz, 0 ) ; <S2SV_ModStart> ; j < minsz <S2SV_ModEnd> ; j ++ <S2SV_ModStart> ++ ) { if ( len < minsz ) { <S2SV_ModStart> 0 ) ; }",0
1091,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ) { printf ( ""Input <S2SV_blank> string <S2SV_blank> in <S2SV_blank> %d\\n"", ( void ) ) ; return 0 ; } <S2SV_ModStart> ) ) { printf ( ""Unrecognized <S2SV_blank> width\\n"" ) ; <S2SV_ModStart> ) ; return 1 ; } <S2SV_ModStart> ) ) { printf ( ""%s\\n"", fprintf ( stderr, ""Input <S2SV_blank> %s\\n"", output_height ) ; return 1 ; } <S2SV_ModStart> ) ) ; free ( output ) ;",0
1092,<S2SV_ModStart> + DSPQ_DATA_BUFF ; size ; tail = <S2SV_ModEnd> readw ( chip <S2SV_ModStart> + JQS_wHead ) ; tail = <S2SV_ModEnd> readw ( chip <S2SV_ModStart> + JQS_wHead ) ; if ( head > size ) goto out ; size = <S2SV_ModEnd> + JQS_w ( chip <S2SV_ModStart> + JQS_wHead ) ; tail = <S2SV_ModEnd> readw ( chip <S2SV_ModStart> + JQS_wHead ) ;,0
1093,<S2SV_ModStart> * opcode_desc ; if ( len < 2 ) { return NULL ; },1
1094,<S2SV_ModStart> ACPI_STATUSED <S2SV_ModEnd> ) ; char <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1095,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
1096,<S2SV_ModStart> [ sizeof ( the_url <S2SV_ModEnd> ) - 1,0
1097,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1098,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int key_cmp,0
1099,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_codec_alg_priv_t ( vpx_codec_alg_priv_t * ) priv <S2SV_ModEnd> ; ctx -> <S2SV_ModStart> vpx_codec_alg_priv_t * ) priv <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { priv <S2SV_ModEnd> -> cfg. <S2SV_ModStart> vpx_codec_alg_priv_priv_t * priv <S2SV_ModEnd> ; priv -> <S2SV_ModStart> -> cfg. get_flags = ( priv -> priv <S2SV_ModEnd> ) ; priv,0
1100,"<S2SV_ModStart> error ) { if ( bp && ( <S2SV_ModEnd> xfs_da_shrink_inode ( args <S2SV_ModStart>, bp )!= 0 ) <S2SV_ModEnd> ) goto out",1
1101,<S2SV_ModStart> ; rc = 0 ; if (,0
1102,<S2SV_ModStart> ) ) { spin_lock ( & timer -> timer -> lock ) ;,0
1103,<S2SV_ModStart> return err ; if (! <S2SV_ModEnd> attrs [ TIPC_NLA_SOCK,0
1104,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_frame_parallel_decode_ext ( vpx_codec_err_t <S2SV_ModStart> ; if (! ( vpx_codec_err_t ) ) { return NULL ; },0
1105,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1106,<S2SV_ModStart> ) buf ; if ( total_len < sizeof ( * cap ) || total_len < <S2SV_ModEnd> cap -> bLength,0
1107,<S2SV_ModStart> task = current <S2SV_ModEnd> ; if (,1
1108,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo ->,0
1109,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd> ) ; }",0
1110,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1111,<S2SV_ModStart> sk_queue ) ; rcu_read_lock ( ) ;,0
1112,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
1113,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1114,"<S2SV_ModStart> ; args -> rmtvaluelen = be32_to_cpu ( name_rmt -> valuelen ) ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ( name_rmt -> <S2SV_ModEnd> valueblk ) ; <S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; return",1
1115,"<S2SV_ModStart> ( stderr, ""ImproperImageHeader"" ) ; return ; }",0
1116,<S2SV_ModStart> * object ; size_t key_size = 0 ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if (!,0
1117,"<S2SV_ModStart>, j ) int vdaux = verdef -> vd_aux ; if ( vdaux < 1 ) { sdb_free ( sdb_verdef ) ; goto out_error ; } vstart += vdaux <S2SV_ModEnd> ; if (",0
1118,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
1119,<S2SV_ModStart> u8 label_len ; <S2SV_ModEnd> GET8 ( label_len <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ;,1
1120,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) )!= 0 ) return 0 ;,0
1121,"<S2SV_ModStart> -> vm_ops ) <S2SV_ModEnd> return do_fault ( <S2SV_ModStart>, pte, pmd, flags ) ; <S2SV_ModEnd> return do_anonymous_page (",0
1122,"<S2SV_ModStart> s ) { size_t len = strlen ( s ) + 1 ; <S2SV_ModStart> = pool_alloc ( len ) ; memcpy <S2SV_ModEnd> ( r, <S2SV_ModStart> r, s, len",1
1123,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1124,"<S2SV_ModStart>! new_idmap_permitted ( file,",1
1125,,0
1126,<S2SV_ModStart> p_enc ) ; <S2SV_ModEnd> if ( p_buf,0
1127,<S2SV_ModStart> ) ) ;,0
1128,<S2SV_ModStart> 0 ) { if ( advance < 0 ) return ; <S2SV_ModStart> case IPPROTO_RING : ND_TCHECK ( * cp ) ; <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) return ;,0
1129,"<S2SV_ModStart> id ) ; memset ( & a -> name, 0, sizeof ( a ) ) ;",0
1130,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo ->,0
1131,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1132,"<S2SV_ModStart> ) ; memcpy <S2SV_ModEnd> ( src,",0
1133,"<S2SV_ModStart> ( ) ; alloc_line ( t1_buf, strlen ( t1_line_buf_array ) + strlen ( t1_line_array ) + t1_buf_array ) + strlen ( t1_buf_array ) + strlen ( t1_line_array ) + strlen ( t1_buf_line_array ) + t1_buf_array ) ;",0
1134,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1135,"<S2SV_ModStart> ctxt ) ; if (! ( em_syscall_is_enabled ( ctxt ) ) ) return emulate_ud ( ctxt ) ; <S2SV_ModStart>, & ss ) ; if (! ( efer & EFER_SCE ) ) return emulate_ud ( ctxt",1
1136,<S2SV_ModStart>,0
1137,"<S2SV_ModStart> ), true, true",0
1138,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int motion_avgint motion_y_stride, int <S2SV_ModStart> unsigned char * mc_avg_y_y_y_stride, int motion_y, int motion_y_avg_y_y_stride, int increase_y_y_stride, int increase_y_y_y_stride, int running_y_y_stride, int increase_y_y_y_stride, <S2SV_ModEnd> ) { int <S2SV_ModStart> 0 ] = ( unsigned char * running_avg_y_y_stride, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> } else { int running_avg_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_stride, <S2SV_ModEnd> ) { int <S2SV_ModStart> } else { int increase_avg_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_",0
1139,,0
1140,<S2SV_ModStart> ) ; } <S2SV_ModEnd> int ret =,0
1141,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
1142,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> cpi2SV_null> static <S2SV_ModStart> r_dev_hw ( const <S2SV_ModStart> xdocs_dev -> remote_dev, X86_NET_PROC <S2SV_ModEnd> ) ; if <S2SV_ModStart> xcopy_dev ) ; if <S2SV_ModEnd> ( xop -> <S2SV_ModStart> ) ) ; strncpy <S2SV_ModEnd> ( dst_dev ->",0
1143,"<S2SV_ModStart>  val, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_RECVHOPLIMIT"" ) ; err = - 1 ; break ; } val = set_opt ( ndp, 0, sizeof ( val ) ) ; if ( val == 0 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_RECVHOPLIMIT_RECVHOPLIMIT, <S2SV_blank> IPV6_RECVLIMIT, val, val, sizeof ( val ) ) ) ; return - 1 ; } err ( ndp, ""Failed <S2SV_blank> setsockopt <S2SV_blank> to <S2SV_blank> """,0
1144,"<S2SV_ModStart>, new_cache, NULL <S2SV_ModEnd> ) ; }",0
1145,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1146,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1147,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; rc = - EINVAL ; break ; default : rc = posix_acl_update_mode ( inode ) ; if ( inode -> i_name ) return - EINVAL ; } break ;",0
1148,<S2SV_ModStart>!= MagickFalse ; break <S2SV_ModEnd> ; } },0
1149,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1150,<S2SV_ModStart> 3 * len + 8,1
1151,<S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; },0
1152,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1153,<S2SV_ModStart> 1 ; } if ( image < 0 ) { i = 1 ; break ; },0
1154,"<S2SV_ModStart> ( ) ; alloc_line ( t1_buf, strlen ( t1_line_buf_array ) + strlen ( t1_line_array ) + t1_buf_array ) + strlen ( t1_buf_array ) + strlen ( t1_line_array ) + strlen ( t1_buf_line_array ) + t1_buf_array ) ;",0
1155,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; if ( ctx -> frame_parallel_decode ) { set_error_detail ( ctx, ""Not <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> frame <S2SV_blank> parallel <S2SV_blank> decode"" ) ; return VPX_CODEC_INCAPABLE ; }",0
1156,"<S2SV_ModStart>. path ; return Curl_urldecode <S2SV_ModEnd> ( data, <S2SV_ModStart>, 0, & <S2SV_ModEnd> pop3c -> mailbox <S2SV_ModStart> pop3c -> mailbox, NULL, TRUE ) <S2SV_ModEnd> ; } <S2SV_null>",1
1157,<S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ;,1
1158,<S2SV_ModStart> gb ) ; if ( s -> ref ) { av_log ( s -> ref ) ; return 1 ; },0
1159,<S2SV_ModStart> ) { return ERROR_INV_SLICE_HDR_T <S2SV_ModEnd> ; } ps_dec ->,0
1160,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ps_dec,0
1161,<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> vp9_decoderConfig <S2SV_ModStart> cpi ] ; const VP9_CODEC_ERROR_CONFIG * const cm = & cpi -> frame_bufs [ ctx -> frame_size ] ;,0
1162,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1163,<S2SV_ModStart> <S2SV_null> <S2SV_null> static MACROBLOCKD * const VP9_COMMON * const xd = xd -> plane ; MACROBLOCKD * const xd = & xd -> mbmi. mbmi ; MACROBLOCKD * const xd = & xd -> plane [ 0 ] ; memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> int i ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> prev_block ) ; memset <S2SV_ModEnd> ( xd ->,0
1164,<S2SV_ModStart> -> mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor <S2SV_ModEnd> ; if (,1
1165,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
1166,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> fmt, 1 <S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, sizeof",1
1167,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, row + row ) ) ) < 0 ) { TIFFErrorExt ( tif -> tif_clientdata, tif -> tif_rowsize ) ; return 0 ; }",0
1168,<S2SV_ModStart> case suite : case func_body_suite :,0
1169,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1170,<S2SV_ModStart> ( upid == INT_MIN ) return - ESRCH ; if ( upid ==,1
1171,"<S2SV_ModStart> siocb -> scm, false",1
1172,<S2SV_ModStart> if ( count > 0 ) return ; if (,0
1173,"<S2SV_ModStart>, plane ) * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? 2 : 1 )",0
1174,"<S2SV_ModStart> * attr_len ; unsigned int <S2SV_ModEnd> length ; unsigned <S2SV_ModStart> len ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return - 1 ; } <S2SV_ModStart> len ) ; if ( length < 1 ) { ND_PRINT ( ( ndo, ""too <S2SV_blank> short <S2SV_blank> short"" ) ) ; return - 1 ; } <S2SV_ModStart> 1 ], length - 1 <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> length - 1 <S2SV_ModEnd> ) ) { <S2SV_ModStart> 1 ) ; if ( length < 1 ) { ND_PRINT ( ( ndo, ""too <S2SV_blank> short"" ) ) ; }",0
1175,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; int r = 0 ; if <S2SV_ModEnd> ( lc -> <S2SV_ModStart> ( lc -> start || ti -> len!= i_size_read ( dev -> bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL, cmd ) ; return r? : __blkdev_driver_ioctl ( <S2SV_ModStart> -> bdev, <S2SV_ModEnd> dev -> mode",1
1176,,0
1177,<S2SV_ModStart> crypto_mode ) ; if ( name == NULL ) return - EINVAL ;,0
1178,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
1179,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1180,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1181,<S2SV_ModStart> sa_rcode ( sockaddr_by ),0
1182,<S2SV_ModStart> ; if ( (,0
1183,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC | NTLMSSP_NEGOTIATE_SEAL <S2SV_ModStart> -> sign ) <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,1
1184,"<S2SV_ModStart>, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn <S2SV_ModEnd> ) ; if",0
1185,<S2SV_ModStart> crypto_skb ) ; strncpy <S2SV_ModEnd> ( rdp.,0
1186,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
1187,<S2SV_ModStart> -> head <= 0 || ( unsigned char ) ( ( g -> sect << 2 ) >> FD_SIZECODE ( g ) ) ==,1
1188,<S2SV_ModStart> = 0 ; if (! strlen ( line ) ) return - 1 ;,0
1189,"<S2SV_ModStart>, & rlen, 0",1
1190,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> read_null> <S2SV_null>,0
1191,"<S2SV_ModStart> mntent, path, rootfs -> mount",1
1192,<S2SV_ModStart> 1 ) { if ( n == NULL ) return 0 ;,0
1193,<S2SV_ModStart> - offset ; unsigned short prev_bi_vcnt = bio -> bi_vcnt ; <S2SV_ModStart> ) break ; if ( bio -> bi_vcnt == prev_bi_vcnt ) put_page ( pages [ j ] ) ;,1
1194,<S2SV_ModStart> 0 ; } jas_uchar <S2SV_ModEnd> ( 3 ),0
1195,<S2SV_ModStart> state. path <S2SV_ModEnd> ; char result <S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
1196,"<S2SV_ModStart> len ) { strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str ) ; if ( len < 0 ) { return NULL ; } <S2SV_ModEnd> str = strlen (",0
1197,<S2SV_ModStart> char * buf [ 0 ],0
1198,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1199,<S2SV_ModStart> ) ) { struct iS2SV_null> <S2SV_null>,0
1200,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1201,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1202,,1
1203,"<S2SV_ModStart> { r_cons_printf ( ""\\""k <S2SV_blank> bin/pe/%s\\n""\\n"" <S2SV_ModEnd>, module, <S2SV_ModStart> { r_cons_printf ( ""\\""\\""k <S2SV_ModEnd> ) ; return",0
1204,"<S2SV_ModStart>, rqstp, res <S2SV_ModEnd> ) ; out",1
1205,<S2SV_ModStart> mnt ) { return 0 ;,0
1206,"<S2SV_ModStart> ) ; } if ( key ) rb_ivar_set ( self, id_key ) ;",0
1207,"<S2SV_ModStart> ) ) { * status = ""INVALID_S4U2PROXY_OPTIONS"" ; <S2SV_ModStart> ) ) { * status = ""EVIDENCE_TICKET_MISMATCH"" ;",1
1208,<S2SV_ModStart> thread -> tp_value [ 0 ] <S2SV_ModStart> childregs -> ARM_r3 ; thread -> tp_value [ 1 ] = get_tpuser ( ),1
1209,"<S2SV_ModStart> bufsize ) { char * new_buf ; size_t new_bufsize <S2SV_ModEnd> ; JAS_DBGLOG ( <S2SV_ModStart> ; if ( bufsize < 0 ) { jas_deprecated ( ""negative <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> for <S2SV_blank> jas_stream_memopen <S2SV_blank> "" ) ; return 0 ; } new_buf = 0 ; jas_deprecated ( ""jas_stream_memopen <S2SV_blank> jas_stream_memopen <S2SV_blank> ( bufsize <S2SV_blank> %zu)\\n"", bufsize ) ; new_bufsize = 0 <S2SV_ModEnd> ; } <S2SV_null>",0
1210,"<S2SV_ModStart> sshbuf * b = NULL <S2SV_ModStart> char * sig = NULL <S2SV_ModStart> r ) ; if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } <S2SV_ModStart> b ) ; <S2SV_ModEnd> } if (",0
1211,<S2SV_ModStart> ; uint32_t bcount ; CLEAR ( WaveHeader ),1
1212,<S2SV_ModStart> iovec ) { <S2SV_ModEnd> if ( i,0
1213,<S2SV_ModStart> ) ) ; if ( px == NULL ) { <S2SV_ModStart> sock ) ; },0
1214,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1215,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnotePentaxEntry ) ) ;",0
1216,<S2SV_ModStart> failed_mount3 ; } sbi -> s_mb_cache = 0 ;,0
1217,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1218,<S2SV_ModStart> len < tcp_hdrlen || tcp_hdrlen < sizeof ( struct tcphdr ),0
1219,"<S2SV_ModStart> int i ; size_t size ; matrix = 0 ; <S2SV_ModStart> 0 ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> -> datasize_ = 0 ; if (! jas_safe_size_mul ( numcols, & size ) ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix",0
1220,"<S2SV_ModStart> ipv6_select_ident ( fh, rt <S2SV_ModStart> ipv6_select_ident ( fh, rt",1
1221,<S2SV_ModStart> bh ) { <S2SV_ModEnd> int error = <S2SV_ModStart> error ; struct mb_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> * bh ; <S2SV_ModEnd> int error = <S2SV_ModStart> error ) { <S2SV_ModEnd> error = mb_cache_entry <S2SV_ModStart> error ) ; <S2SV_ModEnd> return error ;,0
1222,<S2SV_ModStart> * req ; <S2SV_ModEnd> req = scsi_req_alloc <S2SV_ModStart> hba_private ) ; <S2SV_ModEnd> return req ;,1
1223,"<S2SV_ModStart> int i ; memset ( & nx, 0, sizeof ( buf ) ) ; <S2SV_ModStart> buf -> nxffff <S2SV_ModEnd> ) ; if",0
1224,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1225,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
1226,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct xfrm_dump_info <S2SV_ModStart> struct xfrm_dump_info info <S2SV_ModEnd> ; info. <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> ( void ),1
1227,<S2SV_ModStart> (! file || count > OE_SSIZE_MAX <S2SV_ModStart> ) ; } if ( ret > ( ssize_t ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1228,<S2SV_ModStart> dentry * upper <S2SV_ModEnd> dentry * d,0
1229,<S2SV_ModStart> ( new_options ) <S2SV_ModEnd> ; if (,0
1230,<S2SV_ModStart> * ptrptr && <S2SV_ModEnd> nmemb && size <S2SV_ModStart> nmemb && size <S2SV_ModEnd> ) return AVERROR,1
1231,<S2SV_ModStart> ( a -> type == szMAPI_BINARY && a -> <S2SV_ModStart> else if ( a -> type == szMAPI_BINARY &&,1
1232,<S2SV_ModStart> -> i ; if ( i -> max ( i -> parent -> width ) > i -> height ) { # endif },0
1233,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( const size_t * ) val ; return 0 ;,0
1234,"<S2SV_ModStart> { jas_eprintf ( ""got <S2SV_blank> box <S2SV_blank> type <S2SV_blank> %s\\n"" <S2SV_ModEnd>, box ->",1
1235,,1
1236,<S2SV_ModStart> if ( count < <S2SV_ModEnd> ) return -,0
1237,<S2SV_ModStart> ( page ) <S2SV_ModEnd> ; if (,0
1238,<S2SV_ModStart> ; if ( <S2SV_ModEnd>!= 0 ),0
1239,<S2SV_ModStart> UINT32 nsc_rle_encode ( const,1
1240,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ipc ; int <S2SV_ModStart> ) ) ; memset ( & <S2SV_ModStart> ], 0, sizeof ( data ) ) ; if ( len + 1 ) { <S2SV_ModStart> ] ) ; }",0
1241,"<S2SV_ModStart> * dllhandle ; if ( COM_CompareExtension ( name, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", name ) ; return NULL ; }",1
1242,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
1243,<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> ++ ; } \\\n} <S2SV_ModEnd> sum ; for,0
1244,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1245,<S2SV_ModStart> ; g_null> <S2SV_null> <S2SV_null>,0
1246,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> if ( * <S2SV_ModStart> ) { return 0 <S2SV_ModEnd> ; } if <S2SV_ModStart> 2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1247,<S2SV_ModStart> qpx ) ; if ( qpx ),0
1248,<S2SV_ModStart> src_y ) ; memcpy <S2SV_ModEnd> ( dst ->,0
1249,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHWELCOME ; }",1
1250,<S2SV_ModStart> == * ptr && ptr [ 1 ],1
1251,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> MACROBLOCKD * <S2SV_ModStart> xd, MACROBLOCKD * xd <S2SV_ModEnd>, int mi_row <S2SV_ModStart> -> mi_col ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> bs. mi_row ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> x ] ; memset <S2SV_ModEnd> ( xd ->",0
1252,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
1253,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1254,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1255,<S2SV_ModStart> ; skb_free_skb ( skb ) ; if (,0
1256,<S2SV_ModStart> sta -> lock ) ; spin_lock_init ( & sta -> ps_lock,1
1257,<S2SV_ModStart> tp_event ) && perf_paranoid_tracepoint_raw <S2SV_ModEnd> ( ) &&,1
1258,"<S2SV_ModStart> asconf ) { sctp_disable_init ( & sctp_v4_init <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ) ) ; sctp_del_init ( & sctp_v4_init ) ; sctp_init <S2SV_ModEnd> ( sctp_route,",0
1259,"<S2SV_ModStart>, 0 ) ; if (! data_interface ||! control_interface ) return - ENODEV",1
1260,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1261,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> } if (,0
1262,"<S2SV_ModStart> * head ; <S2SV_ModEnd> newsk -> sk_sndbuf <S2SV_ModStart> -> sk_rcvbuf ; sctp_copy_descendant <S2SV_ModEnd> ( newsk,",1
1263,"<S2SV_ModStart> { ud = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, size ) <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & fd )",0
1264,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return sel ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! get_desc ( & desc, sel ) <S2SV_ModEnd> ) return - <S2SV_ModStart>! ( desc. <S2SV_ModEnd> type & BIT <S2SV_ModStart> ( ( desc. <S2SV_ModEnd> l << 1 <S2SV_ModStart> ) | desc. <S2SV_ModEnd> d ) {",1
1265,<S2SV_ModStart> ctx ) ; vpx_free <S2SV_ModEnd> ( ctx ),0
1266,"<S2SV_ModStart> 1 ) { vpx_lpf_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf_16 <S2SV_ModEnd> ( s + <S2SV_ModStart> 1 ) ; vpx_lpf_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf_16 <S2SV_ModEnd> ( s,",0
1267,<S2SV_ModStart> return ret ; fsnotify_put_group ( group ) ;,1
1268,<S2SV_ModStart> int i ; <S2SV_ModEnd> if ( user_ctx <S2SV_ModStart> ) return 0 ; <S2SV_ModEnd> } <S2SV_null>,0
1269,"<S2SV_ModStart> BPF_ALU64 ) { coerce_reg_to_size ( dst_reg, 4 ) ; coerce_reg_to_size <S2SV_ModEnd> ( & src_reg <S2SV_ModStart> ( & src_reg, 4",0
1270,"<S2SV_ModStart> = 0 ; status = SetImageExtent ( image, image, image, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image ) ; return ( Image * ) ; }",0
1271,<S2SV_ModStart> ) == ps_stream -> u4_offset,0
1272,<S2SV_ModStart> size_t ret ; if ( size < 0 ) { ret = - EINVAL ; goto out ; },0
1273,<S2SV_ModStart> frame ) { assert ( dynamic_method == NULL ) ; <S2SV_ModStart> return False ; } <S2SV_ModEnd> if (!,0
1274,"<S2SV_ModStart> * buf, size_t <S2SV_ModEnd> count ) { <S2SV_ModStart> return - EINVAL ; }",0
1275,<S2SV_ModStart> input -> cur ) ; } if ( ( ( ctxt -> inputNr > 1024 ) && ( ( ctxt -> inputNr > 1024 ) ) ) { xmlFreeInputStream ( ctxt ) ; return ( - 1 ) ; },0
1276,<S2SV_ModStart> } if ( le32_to_cpu ( raw_super -> segment_count ) ) { f2fs_super ( raw_super -> segment_count ) ; return 1 ; } if (,0
1277,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = '\\n' ; if ( ( len == '\\0' || ( len == '\\0' ) ) || ( len == '\\0' || ( len == '\\\\' ) ) ) { if ( is_path && ( rp [ 1 ] == '\\\\' || ( rp [ 1 ] == '\\0' ) ) || ( len == '\\\\' || ( rp [ 1 ] == '\\\\' ) ) ) continue ; } else { len = '\\0' ; } } else { if ( is_path && ( rp == '\\0' || ( rp [ 1 ] == '\\0' || ( rp [ 1 ] == '\\0' || ( rp [ 1 ] == '\\0' ) ) ) || ( len = '=' ; } else ( len = '\\0' ; } else ( len = '\\0' ;,0
1278,"<S2SV_ModStart> ( pMem, 0 <S2SV_ModEnd> ) ; }",0
1279,<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart>! opt ) { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) ; txopt_put ( opt_to_free ) ;,1
1280,<S2SV_ModStart> ; if ( tcp_filter <S2SV_ModEnd> ( skb ) <S2SV_ModStart> ) goto discard.,0
1281,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1282,<S2SV_ModStart> ) goto done <S2SV_ModEnd> ; if (,0
1283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1284,<S2SV_ModStart> ) { return AVERROR_INVALIDDATA <S2SV_ModEnd> ; } if,0
1285,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
1286,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; } tp -> copied_seq = seq ;,1
1287,<S2SV_ModStart> ; if ( key_is_key_data_lock ( & key_data_key ) ) { ret = - EINVAL ; goto cleanup ; } if (,0
1288,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx ) {",0
1289,<S2SV_ModStart> 1 ) ; if ( sqlite3_int64 ),0
1290,<S2SV_ModStart> = 0 ; if ( unlikely ( inot_free ) ),0
1291,"<S2SV_ModStart> expr_ty returns, string type_comment, <S2SV_ModStart> ; p -> v. Async = type_comment ; p ->",0
1292,<S2SV_ModStart> ) { static PR_WARN_ONLY <S2SV_ModEnd> ; } <S2SV_null>,0
1293,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
1294,<S2SV_ModStart> ) { return 1 <S2SV_ModEnd> ; case AC_VECTOR,0
1295,<S2SV_ModStart> ; } } if ( NGS2_null> <S2SV_null>,0
1296,<S2SV_ModStart> { if (! s ) return FALSE ; if (,0
1297,<S2SV_ModStart> ) ; } if (,0
1298,<S2SV_ModStart> < 0 ) { ret = chg ; goto out_err ; } <S2SV_ModEnd> if ( hugepage_subpool_get_pages <S2SV_ModStart> chg ) ) { ret = <S2SV_ModEnd> - ENOSPC ; <S2SV_ModStart> - ENOSPC ; goto out_err ; } <S2SV_ModStart> chg ) ; goto out_err <S2SV_ModEnd> ; } if <S2SV_ModStart> return 0 ; out_err : resv_map_put ( vma ) ; return ret ;,1
1299,"<S2SV_ModStart> ) ) ; struct ipv6_txoptions * opt = rcu_dereference ( <S2SV_ModStart> ( fl6, <S2SV_ModEnd> np -> opt <S2SV_ModStart> np -> opt ) ; rcu_read_lock ( ) ; rcu_dereference ( <S2SV_ModStart> np -> opt ) ; memset ( & final ) ;",0
1300,<S2SV_ModStart> = EINVAL ; s -> s_stack_depth + 1,0
1301,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1302,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
1303,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1304,"<S2SV_ModStart> ret, last_pwd, n_new_keys <S2SV_ModStart> keyblocks ) { n_new_keys = count_new_keys ( n_new_keys, n_new_keys <S2SV_ModEnd>, kdb ->",0
1305,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> n_null> <S2SV_null> <S2SV_null> <S2SV_ModStart> ; if ( <S2SV_ModEnd> bn_null> <S2SV_null> <S2SV_null ) { bn_null> <S2SV_ModStart> m_null ) { <S2SV_ModEnd> int bn_null> <S2SV_null> = RLC_OK ; bn_zero ( m, m_len ) ; <S2SV_ModStart> ) ; } bn_zero ( m, m, m, m_len - 1 ) ; <S2SV_ModEnd> ; if ( <S2SV_ModStart> )!= 0 ) { <S2SV_ModEnd> return RLC_OK ;",0
1306,"<S2SV_ModStart> -> length, 0,",1
1307,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1308,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1309,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1310,"<S2SV_ModStart> cm, count, FRAME_COUNTS * counts <S2SV_ModEnd> ) { int",0
1311,"<S2SV_ModStart> { token ++ ; } if ( operand >= MAX_OPERANDS ) { eprintf ( ""Too <S2SV_blank> many <S2SV_blank> operands\\n"" ) ; return false",1
1312,<S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & cpi <S2SV_ModStart> xd ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> xd ) ; memset <S2SV_ModEnd> ( xd ->,0
1313,<S2SV_ModStart> ; out = safe_calloc <S2SV_ModEnd> ( strlen (,0
1314,<S2SV_ModStart> -> h TEMP_FAILURE ) { <S2SV_ModStart> ) ; } return ret ;,0
1315,"<S2SV_ModStart> number_colormaps, number_planes, number_planes_filled <S2SV_ModStart> -> rows ; number_planes_filled = ( number_planes + 1 ) == 0 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
1316,<S2SV_ModStart> ctl_files_rwlock ) ; mutex_init ( & card -> user_ctl_lock ) ;,1
1317,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> en ) { <S2SV_ModStart> sig ) ; if ( * p == 0 ) return ""invalid <S2SV_blank> len"" ; } <S2SV_ModEnd> return 0 ;",0
1318,"<S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & TEMP_FAILURE_RETRY )",0
1319,<S2SV_ModStart> ; ps_dec -> pu4_wt_ofsts = 0 ; ps_dec ->,0
1320,<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },1
1321,"<S2SV_ModStart> ) ) ; struct ipv6_txoptions * opt = rcu_dereference ( <S2SV_ModStart> ( fl6, <S2SV_ModEnd> np -> opt <S2SV_ModStart> np -> opt ) ; rcu_read_lock ( ) ; rcu_dereference ( <S2SV_ModStart> np -> opt ) ; memset ( & final ) ;",0
1322,<S2SV_ModStart> ; if ( args -> base_count > 0 ) return - EINVAL ; if (,0
1323,"<S2SV_ModStart> int mptctl_gettargetinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_size ) { <S2SV_ModEnd> struct mptctl_ioctlprintk ( iocp, <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ioc",0
1324,"<S2SV_ModStart> len ) ; luaL_checkstack <S2SV_ModEnd> ( L,",0
1325,"<S2SV_ModStart> char * path, const char * rootfs <S2SV_ModStart> mntdata, optional, rootfs",1
1326,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1327,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ipv ( <S2SV_ModStart> ] ) { const char * buf <S2SV_ModEnd> = buf ; <S2SV_ModStart> char * buf <S2SV_ModEnd>, buf [ <S2SV_ModStart> ] ) ; if ( p <S2SV_ModEnd> == 0 ) <S2SV_ModStart> ) return - 1 <S2SV_ModEnd> ; } }",0
1328,"<S2SV_ModStart> | O_NOCTTY, ( mode == 0 || mode == MODE_INVALID )? 0644 : mode <S2SV_ModEnd> ) ; if",1
1329,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> FALSE ; } return parse_netscreen_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart>, line, <S2SV_ModEnd> err_info, phdr <S2SV_ModStart> err_info ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>",0
1330,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1331,<S2SV_ModStart> ++ ) { if ( count > 0 ) break ;,0
1332,"<S2SV_ModStart> } if ( safe_calloc <S2SV_ModEnd> ( stderr, <S2SV_ModStart> ) ) { fclose ( stderr ) ; return NULL ; } <S2SV_ModStart> } else { fclose ( stderr ) ;",0
1333,<S2SV_ModStart> { struct blkif_response * <S2SV_ModStart> int ret ; <S2SV_ModEnd> spin_lock_irqsave ( & <S2SV_ModStart> case BLKIF_PROTOCOL_NATIVE : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> ) -> rsp_prod_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_X86_32 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> x86_32. rsp_prod_pvt <S2SV_ModEnd> ) ; break,0
1334,<S2SV_ModStart> ; if ( entry == NULL ||,0
1335,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCannot ) ) ;",0
1336,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; if,0
1337,<S2SV_ModStart> ndo -> ndo_snapend ; ND_TCHECK_16BITS ( & ip -> ip_len ),1
1338,<S2SV_ModStart> dentry * dir <S2SV_ModEnd> ; int dir_has_key <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ),1
1339,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> opt_options. <S2SV_ModStart> ) { struct sock_socket_set_options ( opt_socket, & opt_options. <S2SV_ModStart> ) ; } SOCKD * opt = & opt_S2SV_null>",0
1340,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; <S2SV_ModEnd> } if (",1
1341,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static if ( i -> parent -> parent ) if ( i -> parent -> parent -> parent -> width > i -> height ) { if ( ( i -> parent -> parent -> parent ) > i -> parent -> height ) { if ( ( i -> parent -> log ) > i -> parent -> log ) fprintf ( NGIFLIB_NO_FILE, ""*** <S2SV_blank> *** <S2SV_blank> DIR\\n"" ) ; return - 1 ; } if ( ( i -> parent -> parent -> parent -> posY + i -> parent -> parent -> parent -> posY + i -> width ) > i -> posY + i -> width ) { # if! defined ( NGIFLIB_NO_FILE ) fprintf ( i -> parent -> parent -> parent -> parent ) fprintf ( NGIFLIB_FILE, ""*** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> position\\n"" ) ; } # endif",0
1342,<S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n ) ( l ),0
1343,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
1344,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> break ; } if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",0
1345,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } if,0
1346,"<S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT624J600_EHT624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC6",0
1347,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1348,"<S2SV_ModStart> error ; } memset ( newserv, 0, sizeof ( struct service ) ) ;",1
1349,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } } <S2SV_null> <S2SV_null>,0
1350,<S2SV_ModStart> ) -> tp_value [ 0 ],1
1351,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ;",1
1352,"<S2SV_ModStart> ++ ) { <S2SV_ModEnd> char * p <S2SV_ModStart> = 0 ; for ( i = 0 ; i ++ ) { if (! strlen ( p ) ) { break ; } child = ensure ( p, 3 ) ; if ( p ) cJSON_malloc ( p ), 3 ) ; for ( i = 0 ; i < len ; i ++ ) { if (! ptr ) { out = ensure ( p, 3 ) ; for ( i = 0 ; i ++ ) cJSON_malloc ( p, 3 ) ; ++ ) { if (! ptr ) return 0 ; } for ( i = 0 ; i < len ; i ++ ) { if ( p ) { * ptr ++ ) { if ( child = 0 ; ++ ) out = ensure ( p, 3 ) ; break ; } <S2SV_ModEnd> if ( p",0
1353,"<S2SV_ModStart> uint32_t id ; ND_TCHECK ( ndo, len ) <S2SV_ModEnd> ; ND_PRINT (",0
1354,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
1355,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; remaining = 0 <S2SV_ModEnd> ; if (,0
1356,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ),0
1357,<S2SV_ModStart> y3 ) ; sendClean ( outputbuffer ) ;,0
1358,<S2SV_ModStart> ; skb_free_skb ( skb ) ; if (,0
1359,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; task_lock ( task <S2SV_ModEnd> ) ; ioc <S2SV_ModStart> ; ioc = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context ; task <S2SV_ModEnd> -> io_context = <S2SV_ModStart> ; task_unlock ( task <S2SV_ModEnd> ) ; if,1
1360,<S2SV_ModStart> ) ; } <S2SV_ModEnd> int ret =,0
1361,<S2SV_ModStart> ; if ( <S2SV_ModEnd> length > 0,0
1362,"<S2SV_ModStart> ) { int ret = pci_read_config_word <S2SV_ModEnd> ( dev, <S2SV_ModStart> offset, value ) ; const struct pci_cmd_info * cmd = data ; * value &= PCI_COMMAND_GUEST ; <S2SV_ModEnd> * value |= <S2SV_ModStart> * value |= cmd -> val & ~ PCI_COMMAND_GUEST ; <S2SV_ModEnd> return ret ;",1
1363,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart>, frame_list args ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( frame_parallel_decode ) { vpx_wb_free ( ctx ) ; return VPX_CODEC_INCAPABLE ; }",0
1364,<S2SV_ModStart> ] ) ; free_uid ( fpl -> user ) ;,1
1365,"<S2SV_ModStart> -> iocb, <S2SV_ModEnd> err ) ;",0
1366,"<S2SV_ModStart> -> dwc ; dwc3_gadget_del_and_unmap_request ( dep, req, status <S2SV_ModEnd> ) ; spin_unlock <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1367,<S2SV_ModStart> { char * prefix <S2SV_ModEnd> ; switch ( <S2SV_ModStart> break ; case '+' : case '' : case '' : prefix = ( yyvsp [ ( 1 ) - ( 1 ) - ( yyvsp [ ( yyvsp [ ( 1 ) - ( 1 ) ]. String ) - ( yyvsp [ ( yyvsp [ ( 1 ]. String ) - ( yyvsp [ ( 1 ]. String ) - ( yyvsp [ ( 1 ]. String ) - ( 1 ) - ( yyvsp [ ( 1 ]. String ) - ( yyvsp [ ( 1 ]. String ) - ( yyvsp [ ( 1 ]. String ) - ( yyvsp [ ( yyvsp [ ( yyvsp [ ( 1 ]. String ) - ( yyvsp [ ( yyvsp [ ( yyvsp [ ( 1 ]. String ) - ( yyvsp [ ( yyvsp [ ( yyvsp [ ( 1 ]. String ) - ( yyvsp [ ( yyvsp [ ( 1 ]. String ) - ( yyvsp [ (,0
1368,"<S2SV_ModStart> sas_revalidate_domain, [ <S2SV_ModEnd> DISCE_SUSPEND ] = <S2SV_ModStart> ] = sas_resume_devices <S2SV_ModEnd>, } ;",1
1369,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_wake_stat <S2SV_ModStart> ) { int ret = 0 ; if ( no_copy_stat ) flags |= MY_REDEL_REDEL_REDEL_COPY_STAT ; <S2SV_ModStart>, DATA_INFO, no_copy_stat <S2SV_ModEnd> ) ; }",0
1370,<S2SV_ModStart> num ) { if ( klen < 0 ) return - EINVAL ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( *,0
1371,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1372,<S2SV_ModStart> sk -> sk_family <S2SV_ModEnd> ; struct sk_buff <S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( sin6,0
1373,<S2SV_ModStart> = 0 ; mutex_lock ( & inode -> i_mutex ) ; if ( mode & EXT4_EXTENDED_BLOCKS_SIZE ) { ret = - EINVAL ; goto out_mutex ; } if ( mode & EXT4_GET_BLOCKS_SIZE ) { ret = - EINVAL ; goto out_mutex ; } if ( mode & EXT4_GET_BLOCKS_SIZE ) if ( ret ) { ret = - EINVAL ; goto out_mutex ; } if ( mode & EXT4_GET_BLOCKS_SIZE ) { ret = - EINVAL ; goto out_mutex ; } if ( mode & EXT4_GET_BLOCKS_SIZE ) ; if ( mode & EXT4_EXTENDED_GET_BLOCKS_SIZE ) { ret = - EINVAL ; goto out_mutex ; } if ( mode & EXT4_GET_BLOCKS_BLOCKS_SIZE ) <S2SV_ModEnd> ; ret =,0
1374,<S2SV_ModStart> ) { return ; } <S2SV_ModEnd> } } <S2SV_null>,0
1375,<S2SV_ModStart> return map ; map =,1
1376,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> cpi ++ ; <S2SV_ModStart> * cp ++ ; if ( ( <S2SV_ModEnd> cpi >= 0 <S2SV_ModStart> == '\\0' ) { if ( <S2SV_ModEnd> == '\\\\' ) <S2SV_ModStart> ) return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1377,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1378,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_left < 4,1
1379,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_int32 <S2SV_ModStart> ( l, L2SV_null> <S2SV_null> <S2SV_null>",0
1380,<S2SV_ModStart> { int i ; int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( u ) ; int <S2SV_ModEnd> vbits = BN_num_bits <S2SV_ModStart> ( u ) ; int <S2SV_ModEnd> udp [ 0,0
1381,<S2SV_ModStart> in_mv ; memset <S2SV_ModEnd> ( x ->,0
1382,<S2SV_ModStart> crypto_report_skb ; strncpy <S2SV_ModEnd> ( rdp.,0
1383,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1384,"<S2SV_ModStart>, nbits ; if ( msg -> readcount > msg -> cursize ) { return 0 ; } if ( msg -> cursize << 3 ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; }",0
1385,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
1386,<S2SV_ModStart> ; out1 : cancel_work_sync ( & dev -> kevent ) ; del_timer_sync ( & dev -> delay ) ;,1
1387,"<S2SV_ModStart> * data, size_t <S2SV_ModEnd> len ) { <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } if (",0
1388,"<S2SV_ModStart> ) ), GFP_KADDR_LEN <S2SV_ModEnd> ) ; gtk_debug",0
1389,<S2SV_ModStart> ) ; return - 1 <S2SV_ModEnd> ; } if,0
1390,"<S2SV_ModStart> acl ) { struct iattr iattr ; retval = posix_acl_update_mode ( inode, & iattr. ia_mode, & acl ) ; if ( retval <S2SV_ModEnd> ) goto err_out",0
1391,<S2SV_ModStart> header. types_size <S2SV_ModEnd> ) { continue,1
1392,<S2SV_ModStart> : case NPPVformValue : case NPPVpluginNativeAccessibleAtkPlugId <S2SV_ModStart> case NPPVpluginKeepLibraryInMemory : case NPPVpluginUrlRequestsDisplayedBool : case NPPVpluginWantsAllNetworkStreams : case NPPVpluginCancelSrcStream : case NPPVSupportsAdvancedKeyHandling :,1
1393,<S2SV_ModStart> in ) { size_t <S2SV_ModEnd> out = 0 <S2SV_ModStart> ) ) { return 1 ; <S2SV_ModEnd> } <S2SV_null>,0
1394,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> s ) { if (! Stream_GetRemainingLength ( s ) ) return FALSE ; <S2SV_ModStart>, s ) return FALSE <S2SV_ModEnd> ; } <S2SV_null>",0
1395,"<S2SV_ModStart>, int bit_depth, bit_depth <S2SV_ModStart> -> bit_depth ; bit_depth = cpi -> bit_depth [ i ]. bit_depth",0
1396,"<S2SV_ModStart> ( interface, TEMP_FAILURE_RETRY <S2SV_ModEnd> ) ; if",0
1397,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1398,<S2SV_ModStart> ND_TTEST ( * p <S2SV_ModEnd> ) ; if,0
1399,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> data ) ;",1
1400,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> mutex_lock ( &,0
1401,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
1402,<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> VP9_HIGHBITDEPTH int <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( xd ->,0
1403,<S2SV_ModStart> ; while ( (,0
1404,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> return 0 ; if ( <S2SV_ModEnd> strcpy ( len <S2SV_ModStart> ) { if ( len < 0 ) { return 0 ; } <S2SV_ModEnd> str = strlen ( <S2SV_ModStart> val ) ; if ( strlen ( len ) > 0 ) { return - 1 ; } <S2SV_ModEnd> return 0 ;,0
1405,"<S2SV_ModStart> * jas_iccprof_createfrombuf ( jas_uchar <S2SV_ModEnd> * buf,",1
1406,"<S2SV_ModStart> i, i <S2SV_ModEnd> ) ; }",0
1407,<S2SV_ModStart> -> next ; <S2SV_ModEnd> if ( leader <S2SV_ModStart> ) ; } <S2SV_ModEnd> return 0 ;,0
1408,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> ; return handle <S2SV_ModEnd> ; } <S2SV_null>",1
1409,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 2 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart>!= 0 ) vpx_wb_write_bit_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart>!= 0 ) vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
1410,<S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; },1
1411,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { p = osStrchr <S2SV_ModEnd> ( context ->,0
1412,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1413,<S2SV_ModStart> = 1 ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,0
1414,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int status ; <S2SV_ModStart> ( interface, ENC624J600_MTY, ENC624J600_MTY, ENC624J600_RBUFFER_ST <S2SV_ModEnd> ) ; switch <S2SV_ModStart> ( interface, ENC624J600_ST <S2SV_ModEnd> ) ; switch <S2SV_ModStart> ( interface, ENC624J600_STATS ) { if ( status & ENC624J600_TX_RTS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_RBUFFER_ST <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_PACKET <S2SV_ModEnd> ) ; }",0
1415,<S2SV_ModStart> ] == 0x01 && i < gemsafe_cert_max,1
1416,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1417,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 0 ) { VALUE rb_iv_set ( rb_intern ( ""Struct"" ) ) ; VALUE errors ; VALUE parse_const_options = rb_get ( rb_const_get ( ""required <S2SV_blank> parse_const_options"" ) ) ; rb_const_get ( rb_const_get ( rb_intern ( ""ParseOptions"" ) ) ; return rb_const_get ( rb_const_get ( ""ParseOptions"" ) ) ; } rb_const_get ( rb_const_get ( ctx, parse_options ) ) ;",0
1418,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> info -> par <S2SV_ModEnd> ; vma -> <S2SV_ModStart> _CACHE_MASK ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> ( vma, fbdev -> fb_phys, fbdev -> fb_len <S2SV_ModEnd> ) ; }",1
1419,<S2SV_ModStart> ) ; } # ifdef CONFIG_FLAGS <S2SV_null> <S2SV_null>,0
1420,<S2SV_ModStart> += 2 ; <S2SV_ModEnd> } while (,0
1421,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1422,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1423,<S2SV_ModStart> -> rollover ; if ( err < 0 ) goto out ;,0
1424,<S2SV_ModStart> -> pending ) { <S2SV_ModEnd> event -> event <S2SV_ModStart> event ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1425,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> j ; if <S2SV_ModStart> SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> S2SV_null> int <S2SV_ModEnd> u32BITSV_null> static <S2SV_ModStart> u32BITS ; if ( wstride ) return - 1 ; <S2SV_ModStart> ) return AVERROR_INVALIDDATA ; <S2SV_ModEnd> if ( wstride <S2SV_ModStart> stride ) { if ( wstride ) return - 1 ; <S2SV_ModStart> ) return TRUE ; } return 1 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1426,"<S2SV_ModStart>, i ; if (! ( s -> state & PNG_IHDR ) ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> before <S2SV_blank> IHDR\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",0
1427,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1428,<S2SV_ModStart> } dt -> proto = IP_GET_IPPROTO ( p ) ; dt ->,1
1429,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, KSZ8851_R_TX_MIN_RX <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_R_RXST <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_R_TX_PR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_RSPB ( interface, KSZ8851_RXST ) ; <S2SV_ModStart> ( interface, KSZ8851_RTR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_RXSR_RUNCMD <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_RX <S2SV_ModEnd> ) ; }",0
1430,<S2SV_ModStart> <S2SV_null> <S2SV_null> static char *,0
1431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1432,"<S2SV_ModStart> ( AUDIT_APPARMOR_DENIED, __aa_current_profile ( ), GFP_KERNEL, & sa, NULL <S2SV_ModEnd> ) ; }",1
1433,"<S2SV_ModStart> uint_fast8_t tmp ; siz -> comps = 0 ; <S2SV_ModStart> ) ) { goto error ; } if (! siz -> width ||! siz -> width ||! siz -> height ) { goto error ; } if ( siz -> height ) { jas_eprintf ( ""invalid <S2SV_blank> area <S2SV_blank> area\\n"" ) ; goto error ; } if (! siz -> tileheight ) { jas_eprintf ( ""invalid <S2SV_blank> area\\n"" ) ; goto error ; } if (! siz -> tilewidth ) { jas_eprintf ( ""invalid <S2SV_blank> range\\n"" ) ; goto error ; } if ( siz -> xoff >= siz -> height ) { jas_eprintf ( ""reference <S2SV_blank> area\\n"" ) ; goto error ; } if ( siz -> xoff >= siz -> width || siz -> height ) { jas_eprintf ( ""XOsiz <S2SV_blank> range\\n"" ) ; goto error ; } if ( siz -> xoff >= siz -> height ) { jas_eprintf ( ""cannot <S2SV_blank> range\\n"" ) ; goto error ; } if",0
1434,<S2SV_ModStart> 16 ) ; <S2SV_ModEnd> if ( len <S2SV_ModStart> )!= 0 ) { return - 1 ;,0
1435,"<S2SV_ModStart>, xmi_data, xmi_size,",1
1436,"<S2SV_ModStart> size_t total_len ; struct iov_iter iter ; <S2SV_ModStart> ) return 0 ; iov_iter_init ( & iter, iov, iov, iter ) <S2SV_ModStart> ; if ( unlikely ( <S2SV_ModStart> ) ) ) { if (! iter ) return - EFAULT <S2SV_ModEnd> ; } iov_iter_init (",0
1437,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> Quantum index ;,0
1438,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1439,<S2SV_ModStart> ) { goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> ) { goto cleanup <S2SV_ModEnd> ; } <S2SV_null> <S2SV_ModStart> 0 ) { if ( hdl -> c_path ) { res = - 1 ; goto cleanup ; } if ( hdl -> c_path ) { res = - 1 ; goto cleanup ; } if ( hdl -> c_path ) { if ( hdl -> c_hdl -> c_path [ 0 ] ) { if ( hdl -> fe_hdl -> c_path [ 0 ] ) unlink ( hdl ) ; } if ( hdl -> c_path ) { if ( hdl -> fe_hdl -> c_path [ 0 ] ) unlink ( hdl ) ; } if ( hdl -> fe_hdl ) { if ( hdl -> c_path [ i ] ) unlink ( hdl -> c_path ) ; } free ( hdl ) ; },0
1440,"<S2SV_ModStart> uint32_t max_samples ; size_t max_samples ; <S2SV_ModStart> ) ) { jas_eprintf ( ""warning: <S2SV_blank> %s\\n"", optstr ) ; <S2SV_ModStart> break ; } if (! jas_image_samples ) { jas_eprintf ( ""image_samples <S2SV_blank> max_samples <S2SV_blank> size <S2SV_blank> %ld\\n"", optstr ( fmtname ) ) ; return - 1 ; } <S2SV_ModStart> 0 ) { jas_image_samples = max_samples ; } <S2SV_ModStart> ( jas_eprintf ( ""max_samples <S2SV_blank> size <S2SV_blank> %ld\\n"", num_samples <S2SV_ModEnd> ) ; break",0
1441,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } if (,0
1442,"<S2SV_ModStart> NULL, false <S2SV_ModEnd> ) ; if",0
1443,<S2SV_ModStart> { if ( col < 2 ) <S2SV_ModEnd> ) return 0,0
1444,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
1445,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",0
1446,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> kvm_null> <S2SV_null> <S2SV_ModStart> ) goto out_null> <S2SV_ModEnd> ; if (,0
1447,<S2SV_ModStart> bfp ) ;,0
1448,<S2SV_ModStart> else { return false <S2SV_ModEnd> ; } case,1
1449,<S2SV_ModStart> sa_rcode ( sockaddr_by ),0
1450,<S2SV_ModStart> (! handle ||! SecIsValidHandle ( handle ),1
1451,<S2SV_ModStart> return length ; if ( length > 1 ) return NULL ;,0
1452,<S2SV_ModStart> dentry ) ; <S2SV_ModEnd> if (!,0
1453,<S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> DATA_ENSURE ( 1 <S2SV_ModStart> ++ ; s <S2SV_ModEnd> ++ ; MOP_OUT,1
1454,"<S2SV_ModStart>, plane, vpx_writer <S2SV_ModEnd> * w,",0
1455,<S2SV_ModStart> = - EINVAL ; msg -> msg_namelen = 0,0
1456,"<S2SV_ModStart> mntent, path, rootfs",1
1457,<S2SV_ModStart> fdt ) { list_fdt <S2SV_ModEnd> ( sr ->,0
1458,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int new_key_key ; <S2SV_ModStart> ) return false ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1459,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> BLOCK_INFO * <S2SV_ModStart> xd, MACROBLOCKD * xd <S2SV_ModEnd>, int mi_row <S2SV_ModStart> cpi, xd, bsize, xd <S2SV_ModEnd> ) ; if",0
1460,<S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if ( <S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if (,1
1461,<S2SV_ModStart> ; free ( <S2SV_ModEnd> file ) ;,0
1462,"<S2SV_ModStart> pixel_info ) ; ( void ) ResetMagickMemory ( pixels, 0, pixel_info_length ) ;",1
1463,"<S2SV_ModStart> * buf, size_t <S2SV_ModEnd> count ) { <S2SV_ModStart> return - EINVAL ; }",0
1464,<S2SV_ModStart> -> length = malloc ( <S2SV_ModEnd> len ) ;,0
1465,<S2SV_ModStart> ) ) { if ( desc -> b_address ) return - EINVAL ; if (,0
1466,<S2SV_ModStart> ; rc = 0 ; if (,0
1467,"<S2SV_ModStart>, jas_memc, 0 <S2SV_ModEnd> ) ) {",0
1468,<S2SV_ModStart> ; if ( ( vpx_writer <S2SV_ModEnd> ( flags &,0
1469,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",1
1470,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1471,"<S2SV_ModStart>, flags ; ND_TCHECK2 ( tptr [ 0 ], 5 ) ; <S2SV_ModStart> tlen = len <S2SV_ModEnd> ; ND_PRINT (",0
1472,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1473,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( dest_width,",0
1474,<S2SV_ModStart> ) ) ; if ( len < 4 ) return - 1 ;,0
1475,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1476,"<S2SV_ModStart> iovec, iov, & iter <S2SV_ModStart> iovec, & iter <S2SV_ModStart> iovec, & iter <S2SV_ModStart> iovec, & iter",0
1477,"<S2SV_ModStart> } if ( strncmp <S2SV_ModEnd> ( ptr,",0
1478,<S2SV_ModStart> ; if (! dev -> desc. bLength ) return - ENOMEM,0
1479,<S2SV_ModStart> ; if ( ( length > 1 ||,0
1480,<S2SV_ModStart> ; ue -> card = card ; ue ->,0
1481,"<S2SV_ModStart> client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) { exit_client ( client_p, client_p, client_p, ""Malformed <S2SV_blank> AUTHENTICATE""",1
1482,<S2SV_ModStart> OpMask ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> -> _eip ; done :,0
1483,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
1484,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1485,<S2SV_ModStart> = 1 ; memset <S2SV_ModEnd> ( xd ->,0
1486,"<S2SV_ModStart> ( interface, ENC624J600_MIREGADR2, ENC624J600_MACON2 <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_MAADR2 ) ; interface = ( interface -> interface, ENC624J600_MAADR2 <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; }",0
1487,<S2SV_ModStart> uint64_t psf ; int <S2SV_ModEnd> psf -> header <S2SV_ModStart> ) ) { if ( psf -> header. len > psf_len ) return - 1 ; psf -> header. indx = psf -> header. indx <S2SV_ModEnd> ; } <S2SV_null>,0
1488,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
1489,"<S2SV_ModStart> ) ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> header <S2SV_blank> to <S2SV_blank> header_bin, <S2SV_blank> got <S2SV_blank> %s"", __func__, header ) ; pool_failed ( pool ) ; return false ; } <S2SV_ModEnd> cb1 = (",0
1490,<S2SV_ModStart> ( vpx_codec_alg_priv_t * ) <S2SV_ModEnd> = ( ctx,0
1491,<S2SV_ModStart> case EXIT_REASON_VMON : case EXIT_REASON_INVEPT :,1
1492,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> cpi -> sf <S2SV_ModStart> = 0 ; const VPX_COMP * cpi = & cpi -> common ; if ( cpi -> frame_mode == VP9_COMMON * cpi ) { VP9_COMMON * const sf = & cpi -> common ; cpi -> common. frame_type = & cpi -> common. frame_type == KEY_FRAME ) { cpi -> seg = 1 ; } # if CONFIG_VP9_HIGHBITSTREAM_REFERENCE_REFERENCE_FRAME == KEY_FRAME ) { if ( cpi -> frame_mode == KEY_FRAME ) { VPX_REFERENCE_FRAME = 1 ; } else { vp9_skip_skippable = ( cpi -> frame_skippable ) ; } else { sf -> frames_to_key = 1 ; } # if CONFIG_VP9_HIGHBITSTREAM_REFERENCE_REFERENCE ) { vp9_skip_block ( cpi, & cpi -> common. frame_skippable",0
1493,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1494,<S2SV_ModStart> ; tty -> tty = NULL ;,0
1495,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, 1 )",0
1496,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1497,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1498,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> * s ; <S2SV_ModEnd> } if (",0
1499,<S2SV_ModStart> vpx_codec_alg_priv_t * svc_t <S2SV_ModEnd> ) { if <S2SV_ModStart> ; switch ( svc_ctx ) { case VPX_CODEC_ERROR : case VPX_CODEC_OK : break ; case VPX_CUR : break ; case VPX_CODEC_INVALID : case VPX_CODEC : break ; case VPX_PARAM : case VPX_CODEC_OK : case VPX_CODEC_OK : break ; case VPX_CODEC_ERROR : case VPX_CODEC_UNSUPPORTED : <S2SV_ModStart> } break ; case VPX_CODEC_INVALID : if ( sz == NULL ) break ;,0
1500,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1501,<S2SV_ModStart> ; if ( t < 0 ) return ; if (,0
1502,<S2SV_ModStart> ; if ( entry == NULL ) return EINVAL ; if ( <S2SV_ModStart> KADM5_POLICY ) && entry -> policy == NULL <S2SV_ModEnd> ) return KADM5_BAD_MASK <S2SV_ModStart> ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK <S2SV_ModEnd> ; if (,1
1503,<S2SV_ModStart> frame -> data [ plane ] && frame -> linesize <S2SV_ModStart> [ plane ] && frame -> linesize [ plane ],1
1504,"<S2SV_ModStart> } else { mb_width <S2SV_ModEnd> ( mb,",0
1505,<S2SV_ModStart> * new_memo ; size_t <S2SV_ModEnd> * new_memo ;,0
1506,,1
1507,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
1508,<S2SV_ModStart> ; int i <S2SV_ModEnd> ; if (,0
1509,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> size, 0 ) <S2SV_ModStart> ( offset = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1510,"<S2SV_ModStart> ; uint32_t eth_len ; struct eth_packet_info * phdr = NULL ; <S2SV_ModStart>! eth ) { eth_debug ( ""%s <S2SV_blank> packet <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank>!=%d <S2SV_blank> len <S2SV_blank> %d <S2SV_blank> <S2SV_blank> %d\\n"", ft_len, enc_len ) ; break ; }",0
1511,<S2SV_ModStart> size + 1 <S2SV_ModEnd> ) ; if,0
1512,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_decode ( NSC_CONTEXT <S2SV_ModStart> ; UINT16 rw ; BYTE shift ; if (! context ) return FALSE ; if (! context ) return FALSE ; <S2SV_ModStart> 8 ) { if (! context ) return FALSE ; <S2SV_ModEnd> break ; },0
1513,<S2SV_ModStart> while ( offset > 0 && offset <S2SV_ModStart> < end_offset ) { <S2SV_ModStart> hf_keybuffer ) ; },1
1514,<S2SV_ModStart> case P_ERR_DEPTH ) { if ( nr_return - ENOMEM ;,0
1515,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rc = VP9EncoderConfig <S2SV_ModStart> -> oxcf ; if ( cpi -> oxcf. rc_mode == VP9EncoderConfig * cpi ) return VP9EncoderConfig <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return rc <S2SV_ModEnd> ; } <S2SV_null>,0
1516,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1517,"<S2SV_ModStart> void * buf ; int ret ; buf = kmemdup ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
1518,"<S2SV_ModStart> int vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r ) vpx_read_bit <S2SV_ModEnd> ( r ) <S2SV_ModStart> ) ; vpx_read_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ; } vpx_read_literal <S2SV_ModEnd> ( r,",0
1519,<S2SV_ModStart> op + OSPF6HDR_LEN ) ; ND_TCHECK_32BITS ( & hellop -> hello_options,1
1520,<S2SV_ModStart> { if ( datalen!= 1 ) return - EINVAL ; if (,1
1521,<S2SV_ModStart> rc ) { if ( IS_ERR ( task ) ) { <S2SV_ModStart> rc -> uwbd. task = NULL ; } else { <S2SV_ModEnd> rc -> uwbd <S2SV_ModStart> rc -> uwbd. task = NULL ; },0
1522,"<S2SV_ModStart> : # line 101 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1030 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 102 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1036 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 103 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1042 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1048 <S2SV_ModEnd> ""hex_grammar.y"" { yr_re_node_destroy ( ( * yyvaluep ). re_node ) ; } # line 1048 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 107 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1054",0
1523,<S2SV_ModStart> : idx ; assert ( ptr >= gfx -> backendData ) ;,0
1524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_coeffs ( MACROBLOCKD * const <S2SV_ModStart> TX_SIZE tx_size, <S2SV_ModEnd> MACROBLOCKD * const <S2SV_ModStart> TX_SIZE tx_size ) { VP9_COMMON * const xd = & cpi -> mb ; MACROBLOCKD * const xd = & cpi -> eob ; MACROBLOCKD * const tx_size = & cpi -> segment_id ; MACROBLOCKD * const tx_size = & cpi -> mb ; MACROBLOCKD * const tx_size = & cpi -> segment_id ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH return ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_bufs ) { vp9_high_get_tx ( tx_size, tx_size ) ; const int16_t * const coeff = vp9_get_prob ( tx_size, tx_size, tx_size ) ; const int16_t * const",0
1525,,0
1526,<S2SV_ModStart> { if ( ( <S2SV_ModStart> shmflg & SHM_RND ) && addr >= shmlba,1
1527,<S2SV_ModStart> 0 ) ; if ( nfs_return 0 ;,0
1528,<S2SV_ModStart> ) ) { if ( r1 == NULL ) { return NULL ; },0
1529,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1530,<S2SV_ModStart> : case NPNVSupportsWindowless : case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling,1
1531,"<S2SV_ModStart> ) ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, MSG_DONTWAIT )",0
1532,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & len )",0
1533,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1534,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; if,0
1535,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * const SvcInternal_t <S2SV_ModStart> ) { return ( SvcInternal_t <S2SV_ModEnd> * ) ;,0
1536,<S2SV_ModStart> q ) ; if (! fctx ) return false,0
1537,"<S2SV_ModStart> s ) { uint32 length ; struct stream packet = * s <S2SV_ModEnd> ; ber_parse_header ( <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> params <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",1
1538,<S2SV_ModStart> Z_VALUE ) ; zval_null> <S2SV_null> <S2SV_null>,0
1539,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1540,<S2SV_ModStart> buf ) { free ( buf ) ;,0
1541,<S2SV_ModStart> return FALSE ; <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <SV_null>,0
1542,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> switch ( env <S2SV_ModStart> ) ) { switch ( env -> path [ i + 1 ] ) { case '\\t' : return - 1 ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> return 0 ;,0
1543,<S2SV_ModStart> if ( ( skb ) <S2SV_ModEnd> ( skb ),0
1544,"<S2SV_ModStart> = 0 ; vpx_writer <S2SV_ModEnd> ( seg, <S2SV_ModStart> int mi_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> cm -> segfeature_active ) ; memset <S2SV_ModEnd> ( & cpi",0
1545,"<S2SV_ModStart> ; if ( safe_type_mount ( 1, sizeof ( struct ) ) ) { return 0 ; } if ( <S2SV_ModStart>, sizeof ( str_type ) ) ) return 0 ; if (",0
1546,<S2SV_ModStart> O_RDONLY | O_NOFOLLOW,0
1547,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ; break ; } while ( context -> pass > 0 && context -> pass < 4 && context -> curY >= p -> height ) { switch ( ++ context -> pass ) { case 2 : context -> curY = i -> posY + 4 ; break ; case 3 : context -> curY = i -> posY + 2 ; break ; case 4 : context -> curY = i -> posY + 1 ; break ; },1
1548,<S2SV_ModStart> ) ; # else ( void ),0
1549,"<S2SV_ModStart> ) ; } smb_ofile_flush <S2SV_ModEnd> ( sr, <S2SV_ModStart> f_mutex ) ; smb_ofile_flush <S2SV_ModEnd> ( sr,",1
1550,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> j ; if <S2SV_ModStart> SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> S2SV_null> int <S2SV_ModEnd> u32BITSV_null> static <S2SV_ModStart> u32BITS ; if ( wstride ) return - 1 ; <S2SV_ModStart> ) return AVERROR_INVALIDDATA ; <S2SV_ModEnd> if ( wstride <S2SV_ModStart> stride ) { if ( wstride ) return - 1 ; <S2SV_ModStart> ) return TRUE ; } return 1 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1551,"<S2SV_ModStart> ; if ( * cp == '\\0' || <S2SV_ModEnd> strchr ( cp <S2SV_ModStart> )!= NULL || <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ( cp, ""."" ) == 0 || strcmp ( cp, <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { run_err",1
1552,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> s_null> static <S2SV_ModStart> * outputbuffer ) { char * name = NULL <S2SV_ModEnd> ; if ( <S2SV_ModStart> } if (! ( <S2SV_ModEnd> ) ) { <S2SV_ModStart> 1 ) { printf ( ""Invalid <S2SV_blank> \\n"" ) ; return - 1 ; } <S2SV_ModStart> { args [ i ] = strlen ( void ) ; for ( i = 0 ; i < 0 ; i ++ ) { if (! ( strlen ( s ) ) ) return - 1 ; } args [ i ] = '\\n"" ) ; } if (! ( strlen ( str ) ) ) { printf ( ""error: <S2SV_blank> %s <S2SV_blank> [%d <S2SV_blank> \\n"", ""\\n"", s ) ; return 0 <S2SV_ModEnd> ; } <",0
1553,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( const size_t * ) val ; return 0 ;,0
1554,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart>, id ; if ( unlikely ( siphash_key_is_zero ( & net -> ipv4. ip_id_key ) ) ) get_random_bytes ( & net -> ipv4. ip_key, sizeof ( net -> ip_key ) ) <S2SV_ModEnd> ) ; id",0
1555,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lineno, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""lineno\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> expr"" ) ; return 1 ; } else <S2SV_ModEnd> { int res <S2SV_ModStart> int res ; res = obj2ast_int ( tmp, arena ) ; if ( res!= 0 <S2SV_ModEnd> ) goto failed <S2SV_ModStart> goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> obj, & PyId_type, & PyId_lineno, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; } else { int res = NULL ; res = obj2ast_int res ; } else { int res <S2SV_ModEnd> ; res =",0
1556,"<S2SV_ModStart> void write_inter_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_prob <S2SV_ModEnd> * w,",0
1557,"<S2SV_ModStart> ctl -> pw, "".chfn""",1
1558,<S2SV_ModStart> { if ( max_length < sizeof ( struct ieee80211_radiotap_header ) ) return - EINVAL ; if ( <S2SV_ModStart> iterator -> _rtheader + sizeof ( uint32_t ),1
1559,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { err = - EINVAL ; goto out ;,0
1560,<S2SV_ModStart> -> dst_frame ; dst_size = 0 ;,0
1561,"<S2SV_ModStart> return ; } if ( input <= 0.0 || output <= 0.0 ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Gamma <S2SV_blank> values <S2SV_blank> should <S2SV_blank> be <S2SV_blank> positive"" ) ; RETURN_FALSE ; }",1
1562,<S2SV_ModStart> -> priv ; # if CONFIG_VP9_HIGHBITDEPTH if ( stream -> flags & VPX_CODEC_PASS_STREAM_PASS_PASS ) { stream -> stats. pass = 1 ; break ; } <S2SV_ModEnd> stats -> pass,0
1563,<S2SV_ModStart> ; ssize_t req ; if (,0
1564,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> break ; },0
1565,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> tile_end ) { vpx_write <S2SV_ModEnd> ( & tile_info <S2SV_ModStart>, tile_info, tile_data, tile_info <S2SV_ModEnd> ) ) ; <S2SV_ModStart> - 1 ; vpx_writer <S2SV_ModEnd> ( & tile_info <S2SV_ModStart> ) ) ; vpx_write <S2SV_ModEnd> ( & tile_info <S2SV_ModStart> tile_end ) ; vpx_write <S2SV_ModEnd> ( & tile_info <S2SV_ModStart>, tile_info, tile_info, tile_info <S2SV_ModEnd> ( & tile_info <S2SV_ModStart>, tile_info <S2SV_ModEnd> ) ; }",0
1566,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> vp9_decode ( VP9_COMMON <S2SV_ModStart> NULL ) { VP9_COMMON * const VP9_COMMON * const cm = & pbi -> common ; VP9_COMMON * const cm = & pbi -> common ; VP9_COMMON * cm -> frame_decode ) { VP9_COMMON * const cm = & pbi -> common ; VP9_COMMON * const cm = & cm -> frame_decode ) ; vpx_free ( pbi -> common ) ; vpx_decode_contexts_init ( & pbi -> common. data, NULL ) ; vpx_free ( cm -> frame_data, pbi -> common ) ; vpx_decode ) ; vpx_free ( pbi -> frame_data ) ; pbi -> frame_decode ) ; vpx_decode = NULL ; vpx_free ( pbi -> frame_buffer ) ; <S2SV_ModStart> ( pbi, <S2SV_ModEnd> * pbi -> <S2SV_ModStart> cm -> frame_data <S2SV_ModEnd> == NULL ) <S2SV_ModStart> ( cm -> frame_data <S2SV_ModEnd>",0
1567,<S2SV_ModStart> ) ) { return GF_LOG_ERROR <S2SV_ModEnd> ; } <S2SV_null>,0
1568,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1569,<S2SV_ModStart> -> count ; new_fpl -> user = get_uid ( fpl -> user ) ;,1
1570,<S2SV_ModStart> req ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> && opt -> opt. <S2SV_ModStart> && opt -> opt.,0
1571,"<S2SV_ModStart> tokens, vpx_tree_index <S2SV_ModEnd> * tree )",0
1572,"<S2SV_ModStart> VP9_COMP * ctx, vpx_codec_alg_priv_t * ctx ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { if (! ( flags & VPX_CODEC_OPT_DECODE_REF_FRAME ) ) { vpx_codec_alg_priv_t res = 0 ; } # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> flags & VPX_CODEC_REF_HIGHBITDEPTH ) { if ( ctx -> flags & VPX_IMG_FMT_HIGHBITDEPTH if ( flags & VPX_HIGHBITDEPTH ) ) { if (! ctx ) ) return VPX_IMG_FMT_REF ; } if (",0
1573,<S2SV_ModStart> -> enable ( ctx ) <S2SV_ModEnd> ) ; if,0
1574,"<S2SV_ModStart> ) ; struct mnt_namespace * ns = dest_mnt -> mnt_ns ; struct <S2SV_ModStart> ; if ( pending_mounts ( ns, source_mnt <S2SV_ModEnd> ) ) { <S2SV_ModStart> goto out ; if (! pending_mounts ) { err = - EINVAL ; goto out ; }",0
1575,"<S2SV_ModStart>, & len, 0",1
1576,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = _mm_set1_epi16 ( ( int16_t ),0
1577,<S2SV_ModStart> rc ; const VP9EncoderConfig <S2SV_ModEnd> * oxcf =,0
1578,"<S2SV_ModStart> b, jas_uchar <S2SV_ModEnd> ) ) {",0
1579,"<S2SV_ModStart> int fout, int maxoffset <S2SV_ModStart> ) ) { if ( hout + 1 ) { <S2SV_ModStart> NULL ) ; }",0
1580,<S2SV_ModStart> <S2SV_null> <S2SV_null> static const VP9_COMMON * cpi <S2SV_ModEnd> xd = & cpi <S2SV_ModStart> -> common ; MACROBLOCK * const <S2SV_ModStart> x = & cpi -> common ; VP9_COMMON * const x = & cpi -> common ; MB_MODE_INFO * const mbmi_row = & cpi -> common ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> common. noise_sensitivity == KEY_FRAME ) { VP9_COMMON * const x = & cpi -> common. noise_tok <S2SV_ModEnd> ) { cpi <S2SV_ModStart> = cpi -> common ; if ( cpi -> common. noise_type == BLOCK_8X8X8 ) { vp9_free ( cpi ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( x -> flags & YV12_FLAG_HIGHBITDEPTH ) { <S2SV_ModStart> ) ) ; } # if CONFIG_VP9_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if (,0
1581,<S2SV_ModStart> ; if ( ( length > 1 ||,0
1582,"<S2SV_ModStart> key ) { struct crypto_cipher * tfm_key <S2SV_ModEnd> * tfm_des = <S2SV_ModStart>, 0, 0 <S2SV_ModEnd> ) ; str_cipher <S2SV_ModStart> ( tfm_des ) ; vifs_free_skcipher ( tfm_des ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
1583,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1584,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> read_bit_depth_t bit_depth <S2SV_ModStart> int bit_depth ; if ( bit_depth > 0 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ) { if ( bit_depth > 0 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ) { if ( bit_depth > 1 <S2SV_ModEnd> ) { if <S2SV_ModStart> 0 ) { return AVERROR_INVALIDDATA ; } else { <S2SV_ModStart> ) ; } return AVERROR_INVALIDDATA ; },0
1585,<S2SV_ModStart> i > pos + delta <S2SV_ModStart> off + 1 <= pos + delta <S2SV_ModEnd> ) insn ->,1
1586,<S2SV_ModStart> case EXIT_REASON_INVEPT : case EXIT_REASON_INVVPID :,1
1587,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> } else { } else { <S2SV_ModStart> } } } } else {,0
1588,<S2SV_ModStart> -> packet = td.,0
1589,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1590,"<S2SV_ModStart> ++ r ; if <S2SV_ModEnd> ( pow ( <S2SV_ModStart>, dim ) <= entries ) return - 1 ; if <S2SV_ModEnd> ( ( int <S2SV_ModStart> dim ) ) > entries ) return - 1 <S2SV_ModEnd> ; return r",1
1591,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), exception <S2SV_ModEnd> ) ; }",0
1592,<S2SV_ModStart> ; if ( tcp_filter <S2SV_ModEnd> ( skb ) <S2SV_ModStart> ) goto discard.,0
1593,<S2SV_ModStart> Z_VALUE ) ; zval_null> <S2SV_null> <S2SV_null>,0
1594,"<S2SV_ModStart> { TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, MSG_NOSIGNAL )",0
1595,<S2SV_ModStart> w ) ; sendClean ( outputbuffer ) ;,0
1596,"<S2SV_ModStart> cfg ) { struct file * fd = NULL ; <S2SV_ModStart> } else { fd = NULL ; file = open ( fd, O_APPEND | O_APPEND | O_APPEND | O_CLOEXEC | O_NOFOLLOW | O_APPEND | O_CLOEXEC | O_CLOEXEC | O_NOCTTY ) ; if ( fd <S2SV_ModEnd> == 0 ) <S2SV_ModStart> == 0 ) <S2SV_ModEnd> } else { <S2SV_ModStart> = - 1 ; <S2SV_ModEnd> } } file",0
1597,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! f2fs_readonly (,1
1598,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1599,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n"", <S2SV_ModStart> 1 ) ; sprintf ( outputbuffer ) ;",0
1600,<S2SV_ModStart> ) ) ; if ( rdp -> length > 0 ) return FALSE,0
1601,<S2SV_ModStart> ) ; return u64 <S2SV_ModEnd> ; } <S2SV_null>,0
1602,<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( x ->,0
1603,<S2SV_ModStart> == ARPHRD_ETHER ) { <S2SV_ModStart> ether_setup ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; },1
1604,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (",1
1605,<S2SV_ModStart> return false ; <S2SV_ModEnd> if (!,0
1606,<S2SV_ModStart> { if ( l == NULL ) break ; if (,1
1607,<S2SV_ModStart> } if ( ( <S2SV_ModStart> > 0 ) && ( ( ( xWantedSize + xWantedSize ) ) > portBYTE_ALIGNMENT ) ) { xWantedSize = 0 ; } else { xWantedSize = 0 ; },0
1608,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1609,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1610,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpDiff"", ""%s"", ""(cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 1 ;",0
1611,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1612,<S2SV_ModStart> ( sbuf + 1 <S2SV_ModEnd> ) ; if,0
1613,<S2SV_ModStart> ) ) ; ND_TCHECK2 ( * tptr ) ;,0
1614,<S2SV_ModStart> { uint16 bitspersample = 1,0
1615,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1616,"<S2SV_ModStart> * cpi, vpx_writer <S2SV_ModEnd> * w )",0
1617,<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart> } if (,0
1618,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> ""command <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0x83 ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0xe ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0xe ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0x83 ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0xe ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0x83 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0xe ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0xe ; state",0
1619,<S2SV_ModStart> = 0 ; if ( unlikely ( inot_free ) ),0
1620,<S2SV_ModStart> (! cfg ) <S2SV_ModEnd> return 0 ;,0
1621,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> const MACROBLOCKD * <S2SV_ModStart>, int64_t vpx_prob <S2SV_ModEnd> * xd, <S2SV_ModStart> y_stride ) { memset <S2SV_ModEnd> ( xd, <S2SV_ModStart>, sizeof ( mi_stride ) ; memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> s_mb_size ) ; memset <S2SV_ModEnd> ( xd, <S2SV_ModStart> 2 ], <S2SV_ModEnd> ( xd, <S2SV_ModStart> 2 ], <S2SV_ModEnd> ) ; }",0
1622,"<S2SV_ModStart> NULL ) { memset ( & buf, 0, sizeof ( buf ) ) ;",0
1623,"<S2SV_ModStart> int i, size_t <S2SV_ModEnd> p, i <S2SV_ModStart> ) { i = 0 ; for ( i = 0 ; i < n ) { i ++ ) { for ( i = 0 ; i ++ ) { for ( i = 0 ; i < p ) { i ++ i ; i ++ ) { if (! p ) cJSON_Delete ( c, p ) ; } <S2SV_ModEnd> return n ;",0
1624,<S2SV_ModStart> ) ; } lock_sock ( sk ) ;,0
1625,"<S2SV_ModStart> * bh ; unsigned int iinfo ; <S2SV_ModStart> ( inode, iinfo -> i_lenAllocb ) ; if ( bh ) goto out ; iinfo ->",0
1626,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
1627,"<S2SV_ModStart> id ) ; memset ( & a -> name, 0, sizeof ( a ) ) ;",0
1628,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int i ; VP9_COMMON * const TileInfo * num_tile_info = NULL ; MACROBLOCKD * num_tile_info = & tile_data -> tile_info ; <S2SV_ModStart> ) ) { vpx_write <S2SV_ModEnd> ( & tile_info <S2SV_ModStart>, sizeof ( tile_info ) ) ; for ( i = 0 ; i < num_tile_cols ; i ++ ) { if (! j ) { vpx_write ( & tile_tile_data -> tile_info, tile_data -> tile_data, tile_data, tile_data -> tile_tile_data, <S2SV_ModEnd> ) ) ; <S2SV_ModStart> i ] ; vpx_write <S2SV_ModEnd> ( & tile_tile_data <S2SV_ModStart>, sizeof ( vpx_bit <S2SV_ModEnd> ) ) ; <S2SV_ModStart> 1 ) ; vpx_free ( vpx_tile_t ) ; vpx_alloc ( tile_tile_data, tile, tile_buffers ) ; for ( i = 0 ; i = 0 ; i < num_tile_tile_data -> num_tile_tile_cols ; i ++ ) vpx_tile_tile_",0
1629,<S2SV_ModStart> if (! safe_calloc ( image ) ) return ; if (,0
1630,<S2SV_ModStart> -> rollover ; if ( err < 0 ) goto out ;,0
1631,"<S2SV_ModStart> void update_segment_mode ( const VP9_COMMON * cm, MACROBLOCKD * i, int i, segfeature_active_mode_t * segfeature_active <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; if ( seg_mode == NULL ) { vpx_clear_system_state ( ) ; for ( i = 0 ; i < segfeature_active_active ( segfeature_active_active ( i ) ) ; i ++ i ; for ( i = 0 ; i < segfeature_active ( i ) ; i ++ i ; i ++ i <S2SV_ModStart> } else { int i, seg_active_depth = 0 ; if ( segfeature_active ( seg_active_active ( seg, seg_active ) ) ; memcpy <S2SV_ModEnd> ( seg -> <S2SV_ModStart> i ], segfeature_active_active ( seg_active <S2SV_ModEnd> ) ) ; <S2SV_ModStart> i ++ i <S2SV_ModEnd> ) ; }",0
1632,<S2SV_ModStart> ; if ( sk ) return - EINVAL ; if (,0
1633,"<S2SV_ModStart> ( void ) TIFFGetFieldDefaulted <S2SV_ModEnd> ( in,",1
1634,<S2SV_ModStart> { error = vpx_codec_error_t * error <S2SV_ModEnd> ; if (,0
1635,<S2SV_ModStart> char * buf [ 0 ],0
1636,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1637,"<S2SV_ModStart> ""corrupt <S2SV_ModEnd> "" ) ;",0
1638,<S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; },0
1639,<S2SV_ModStart> ; ps_dec -> ps_dec ->,0
1640,<S2SV_ModStart> -> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock,0
1641,<S2SV_ModStart> ; if ( key_is_key_data_lock ( & key_data_key ) ) { ret = - EINVAL ; goto cleanup ; } if (,0
1642,"<S2SV_ModStart> } buffer = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1643,<S2SV_ModStart> ; if (,0
1644,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> ""command <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0x83 ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0xe ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0xe ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0x83 ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0xe ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0x83 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0xe ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0xe ; state",0
1645,<S2SV_ModStart> int getnum ( <S2SV_ModEnd> const char * <S2SV_ModStart> ; for ( <S2SV_ModEnd> < 0 ),0
1646,<S2SV_ModStart> L ) ; g -> gcstate = GCSswpallgc ;,0
1647,<S2SV_ModStart> -> priv ; if (! ret ) return - EINVAL ;,0
1648,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>,0
1649,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct <S2SV_ModStart> = NULL ; int ret = - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { int ret = - 1 ; struct sockaddr_free ( struct sockaddr_cleanup [ 0 ], sizeof ( struct sockaddr_in ) ) ; sb_addr_set ( & cib_addr, sizeof ( * ) ) ; if ( res [ 0 ] == 0 ) { ret = - 1 ; } <S2SV_ModStart> ) return - 1 <S2SV_ModEnd> ; } <S2SV_null>",0
1650,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( cpi ->,0
1651,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1652,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",1
1653,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp ) ;,0
1654,"<S2SV_ModStart> ctx, expr -> unary. child",1
1655,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1656,"<S2SV_ModStart> int mptctl_gettargetinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_targetinfo <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
1657,"<S2SV_ModStart> < 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; <S2SV_ModStart> < 0 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModStart> < 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModStart>, ""ImproperImageHeader"" ) <S2SV_ModEnd> ; } <S2SV_null>",0
1658,"<S2SV_ModStart> vp9_codec_errno ; jas_eprintf ( ""all <S2SV_blank> to <S2SV_blank> (%d)\\n"", jas_eprintf ) ;",0
1659,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> ) ; },0
1660,"<S2SV_ModStart> void vpx_read_bit <S2SV_ModEnd> * r, <S2SV_ModStart> int vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> int n, vpx_read_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ; } vpx_read_literal <S2SV_ModEnd> ( r,",0
1661,<S2SV_ModStart> ; int is_valid = ( error == GIT_OK ) <S2SV_ModStart> giterr_clear ( ) <S2SV_ModEnd> ; error =,1
1662,"<S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> * probs )",0
1663,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> cm -> fc <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> ) ; FRAME_COUNTS *",0
1664,<S2SV_ModStart> ) ; } else {,0
1665,<S2SV_ModStart> vpx_codec_err_t * const VP9EncoderConfig <S2SV_ModEnd> * const struct <S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH break ; # if CONFIG_VP9_HIGHBITDEPTH const int flags = ( uint32_t * ) stream -> flags & VPX_IMG_FMT_HIGHBITDEPTH ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( stream -> flags & VPX_IMG_FMT_HIGHBITDEPTH ) { <S2SV_ModStart> = 1 ; } # if CONFIG_VP9_HIGHBITS_HIGHBITDEPTH if ( stream -> flags & VPX_IMG_FMT_HIGHBITDEPTH ) { return 1 ; } # endif,0
1666,<S2SV_ModStart> 1 ) ; ND_TCHECK2 ( * op ) ;,0
1667,<S2SV_ModStart>  NULL ) ; <S2SV_ModEnd> return NULL ;,0
1668,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; remaining = 0 <S2SV_ModEnd> ; if (,0
1669,<S2SV_ModStart> == - 1 ) { <S2SV_ModStart> val ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1670,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; if ( <S2SV_ModStart> -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len - A,1
1671,"<S2SV_ModStart> ]. size ; if ( ~ length < 16 ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" )",1
1672,"<S2SV_ModStart> ; stbbr_send ( ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\' <S2SV_blank> xmlns=\'profanity\' <S2SV_blank> from <S2SV_blank> xmlns=\'chat\'chat\' <S2SV_blank> xmlns=\'jabber@localhost/profanity\'chat\'>"" ""<message:xmpp=\' <S2SV_blank> xmlns=\' <S2SV_blank> from=\'jabber@localhost/profanity\' <S2SV_blank> xmlns=\' <S2SV_blank> xmlns=\' <S2SV_blank> xmlns=\'jabber@localhost/profanity\'>""",0
1673,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1674,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1675,"<S2SV_ModStart> 1 ) ; if ( av_log2 ( AV_LOG_N1 ), AV_LOG_ERROR ) ;",0
1676,<S2SV_ModStart> ) ) { return GF_LOG_ERROR <S2SV_ModEnd> ; } <S2SV_null>,0
1677,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> len = 0,0
1678,"<S2SV_ModStart>, 0 ) { <S2SV_ModStart> return 0 ; }",0
1679,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in >= addrlen ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1680,,1
1681,"<S2SV_ModStart>, length ) < 0",0
1682,"<S2SV_ModStart> len ) { struct ipv6_txoptions * opt = opt_to_free ; <S2SV_ModStart> ( opt ) ; opt = rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, <S2SV_ModEnd> opt ) ;",0
1683,"<S2SV_ModStart>, int i <S2SV_ModEnd> ) { size_t <S2SV_ModStart> = 0 ; <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> uint32_t ) { for ( i = 0 ; i < 0 ) { ++ i ; ++ i ) { if (! i ) goto out_err ; ++ i ) { if ( gss [ i ] == 0 ) break ; } <S2SV_ModStart> = 0 ) { if ( gssize == 0 ) { 0 ) break ; } } <S2SV_ModStart> = 0 ; <S2SV_ModEnd> <= 0 ) { <S2SV_ModStart> - EINVAL ; goto out_error ; } <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> uint32_t ) { if (! <S2SV_ModStart> goto fail_t ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> < 0 ) { <S2SV_ModStart> sizeof_t ) { free ( ctx ) ; <S2SV_ModStart> NULL ; } free ( src ) ; <S2SV_ModStart> ret ) ; } free ( src ) ;",0
1684,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPCR_EPCR_EPAR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR_EPCR ) & dm9000_EPDRH <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR, DM9000_EPCR_EPAR <S2SV_ModEnd> ) ; }",0
1685,"<S2SV_ModStart>, buffer, t2p -> tiff_datasize,",1
1686,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
1687,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_decode ( NSC_CONTEXT <S2SV_ModStart> ; UINT16 rw ; BYTE shift ; if (! context ) return FALSE ; if (! context ) return FALSE ; <S2SV_ModStart> 8 ) { if (! context ) return FALSE ; <S2SV_ModEnd> break ; },0
1688,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> len ; int,0
1689,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1690,<S2SV_ModStart>  NULL ) ; <S2SV_ModEnd> return NULL ;,0
1691,<S2SV_ModStart> cib ) ; if (! encrypted ) return - 1 ;,0
1692,"<S2SV_ModStart> size = INT_MAX ; if ( unlikely (! access_ok ( VERIFY_READ, size ) ) ) return - EFAULT",0
1693,"<S2SV_ModStart> -> new_mv ; int <S2SV_ModEnd> step_mv ; int <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( & cpi <S2SV_ModStart>, best_rd ) { vpx_free <S2SV_ModEnd> ( new_mv, <S2SV_ModStart>, best_rd ) ; memset <S2SV_ModEnd> ( & tmp_step_mv <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( & new_mv",0
1694,<S2SV_ModStart> ; if ( h == - 1 ||,0
1695,<S2SV_ModStart> ] ) ; if ( base -> pid_bytes < 0 ) { break ; },0
1696,<S2SV_ModStart> ( msg -> msg_sys <S2SV_ModEnd> ) ; if,0
1697,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
1698,"<S2SV_ModStart> number_colormaps, number_planes_filled, number_planes_filled <S2SV_ModEnd> ) ; }",0
1699,<S2SV_ModStart> ( r = ssh,0
1700,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1701,<S2SV_ModStart> client -> name <S2SV_ModEnd> ) ; int,0
1702,<S2SV_ModStart> ps = ( void ),0
1703,<S2SV_ModStart> -> xfer ; } <S2SV_ModEnd> if ( x,0
1704,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1705,<S2SV_ModStart> dentry ) ; <S2SV_ModEnd> if (!,0
