,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; if ( n2size < 1 ) <S2SV_ModEnd> { applog (,0
1,<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : ND_TCHECK_8BITS ( tptr ) ; <S2SV_ModStart> case EAP_FRAME_TYPE_PACKET_V1 : ND_TCHECK_16BITS ( tptr + 2 ) ; <S2SV_ModStart> 2 ) { ND_TCHECK_8BITS ( tptr + 4 ) ; <S2SV_ModStart> len ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_V1 : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_V1 : ND_TCHECK_8BITS ( tptr + 6 ) ; <S2SV_ModStart> case EAP_TYPE_V2 : ND_TCHECK_8BITS ( tptr + 7 ) ; <S2SV_ModStart> case EAP_TYPE_V2 : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_V12 : ND_TCHECK_8BITS ( tptr + 6 ) ; <S2SV_ModStart> case EAP_TYPE_V12 : ND_TCHECK_8BITS ( tptr + 6 ) ; <S2SV_ModStart> case EAP_TYPE_V12 : N,0
2,<S2SV_ModStart> op_mutex ) ; ret = <S2SV_ModEnd> - ETIMEDOUT ; <S2SV_ModStart> - ETIMEDOUT ; goto out_skb <S2SV_ModEnd> ; } mutex_unlock <S2SV_ModStart> op_mutex ) ; ret = - EPROTO ; goto out_skb <S2SV_ModEnd> ; } mutex_unlock,0
3,"<S2SV_ModStart> return - EINVAL ; } if ( ioctl_cmd == SIOCYAMSMCS ) return - EINVAL ; if ( ( ym = kmalloc ( sizeof ( struct yamdrv_ioctl_mcs ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( copy_from_user ( & ym -> bits, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_mcs ) ) ) { kfree ( ym ) ; return - EINVAL ; } add_mcs ( ym -> bits, ym -> bitrate, 0 ) ; kfree ( ym ) ; break ; case SIOCYAMSCFG : if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM ; if ( copy_from_user ( & yi. cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ; if ( copy_from_user ( & yi, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return",0
4,<S2SV_ModStart> skb ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
5,"<S2SV_ModStart>, offset ; if ( avio_feof ( f ) ) { index -> item_count = 0 ; av_freep ( & index -> items ) ; return AVERROR_INVALIDDATA ; }",1
6,<S2SV_ModStart> * tpg ; u16 <S2SV_ModEnd> tpgt ; int <S2SV_ModStart> ; if ( kstrtou16 <S2SV_ModEnd> ( name + <S2SV_ModStart> ) || tpgt >= VHOST_SCSI_MAX_TARGET <S2SV_ModEnd> ) return ERR_PTR,1
7,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
8,"<S2SV_ModStart> { u32 data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; kvm_read_guest_cached ( vcpu -> kvm, & <S2SV_ModEnd> vcpu -> arch <S2SV_ModStart>. apic -> vapic_cache, & data, sizeof ( u32 ) <S2SV_ModEnd> ) ; apic_set_tpr",1
9,<S2SV_ModStart> src ) ; __switch_to_tm ( src ) ; tm_recheckpoint_new_task ( src ) ;,1
10,<S2SV_ModStart> item ) { return <S2SV_ModEnd> array -> child <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
11,"<S2SV_ModStart> ( sb, KERN_ERR,",1
12,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) { kfree_skb ( skb ) ; return ERR_PTR ( unfrag_ip6hlen ) ; },0
13,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
14,"<S2SV_ModStart> { # ifdef HAVE_MSC_VER <S2SV_ModEnd> char buf [ <S2SV_ModStart> ) ] ; <S2SV_ModEnd> struct grub_ext4_extent_header * <S2SV_ModStart> { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } leaf = grub_ext4_find_leaf ( data, buf, ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks, fileblock ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; <S2SV_ModStart> ; if ( fileblock >= grub_le_to_cpu32 ( ext [ i ]. len ) ) return 0 ; else { grub_disk_addr_t start ; start = grub_le_to",0
15,"<S2SV_ModStart> fdct16 ( const tran_low_t * in, tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> input [ 8 ] ; tran_high_t temp1, temp2 ; tran_high_t input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 13 ] ; input [ 3 ] = in [ 3 ] + in [ 10 ] ; input [ 4 ] = in [ 4 ] + in [ 11 ] ; input [ 5 ] = in [ 5 ] + in [ 12 ] ; input [ 6 ] = in [ 6 ] - in [ 8 ] <S2SV_ModStart> ; { int s0, s1, s2, s3, s4, s5, s6, s7 ; tran_high_t t0, t1, t2, t3 ; tran_high_t",0
16,<S2SV_ModStart> ; skip_full_check : kfree ( env -> insn_aux_data ) ;,0
17,"<S2SV_ModStart> int i ; if (! config -> sample_rate ) { strcpy ( wpc -> error_message, ""sample <S2SV_blank> rate <S2SV_blank> cannot <S2SV_blank> be <S2SV_blank> zero!"" ) ; return FALSE ; }",1
18,"<S2SV_ModStart> = 0 ; unsigned char sense_buffer [ SCSI_SENSE_BUFFERSIZE ] ; <S2SV_ModStart> cd -> device ; sense_buffer = kmalloc ( sizeof ( * cgc -> sense ), GFP_KERNEL ) ; if (! sense_buffer ) goto out ; <S2SV_ModStart>, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( cgc -> sense ) memcpy ( cgc -> sense, sense_buffer, sizeof ( * <S2SV_ModEnd> cgc -> sense <S2SV_ModStart> cgc -> sense ) <S2SV_ModEnd> ) ; if",0
19,"<S2SV_ModStart> ( ) == 0x48454150 && ( imgdata. lens. makernotes. CameraMount == LIBRAW_MOUNT_FixedLens || imgdata. lens. makernotes. LensMount == LIBRAW_MOUNT_FixedLens ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> ( ) == LIBRAW_LIBRARY_BUILD && ( imgdata. lens. makernotes. CameraMount == LIBRAW_MOUNT_FixedLens ) ) { imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; } else { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; }",0
20,"<S2SV_ModStart> void search_filter_level ( const YV12_BUFFER_CONFIG * sd, <S2SV_ModStart> partial_frame ) { VP9_COMMON * const cm = & cpi -> common <S2SV_ModEnd> ; struct loopfilter <S2SV_ModStart> lf = & cpi -> lf <S2SV_ModEnd> ; const int <S2SV_ModStart> ; int best_err <S2SV_ModEnd> ; int filt_best <S2SV_ModStart> ; int filt_direction <S2SV_ModEnd> ; int filt_mid <S2SV_ModStart> / 4 ; memset <S2SV_ModEnd> ( ss_err, <S2SV_ModStart>, sizeof ( ss_err ) ) ; memset <S2SV_ModEnd> ( ss_err, <S2SV_ModStart> ; memset ( ss_err, 0xFF, sizeof ( ss_err ) ) ; vpx_yv12_copy_y ( cm -> frame_to_show, & cpi -> last_frame_uf ) ; best_err = try_filter_frame ( sd, cpi, filt_mid, partial_frame ) ; filt_err = ss_err [ filt_mid ] ; if ( cpi -> twopass. section_intra_rating < 20 ) bias = bias * cpi -> twopass. section_intra_rating / 20 ; if ( cm -> tx_mode!= ONLY_4X4 ) bias >>= 1 ;",0
21,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
22,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> -> sign ) ; vpx_write_token ( w, vpx_mv_class_tree, mvcomp -> classes, & mv_class_encodings [ mv_class ] ) ; if ( usehp ) vpx_write ( w, hp, mv_class == MV_CLASS_0? mvcomp -> class0_hp : mvcomp -> hp ) ; } else { int i ; vpx_write ( w, sign, mvcomp -> sign ) ; vpx_write_token ( w, vpx_mv_class_tree, mvcomp -> classes, & mv_class_encodings [ mv_class ] ) ; if ( usehp ) vpx_write ( w, hp, mv_class == MV_CLASS_0? mvcomp -> class0_hp : mvcomp -> hp ) ; } vpx_write_token ( w, vpx_mv_fp_tree, mvcomp -> fp, & mv_fp_encodings [ fr ] <S2SV_ModEnd> ) ; if",0
23,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ralg -> seedsize,1
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (,1
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> ( ) ) { <S2SV_ModStart> ( ) ; },1
26,"<S2SV_ModStart> char * fmtname ; char * help <S2SV_ModStart> = 0 ; help = NULL ; <S2SV_ModStart> break ; case OPT_HELP : help = jas_optarg ; break ; } <S2SV_ModStart> ; while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_VERBOSE : verbose = 1 ; break ; case <S2SV_ModStart> break ; case OPT_INFILE : infile = jas_optarg ; break ; case OPT_HELP : help = jas_optarg ; break ; } } if ( <S2SV_ModStart>! ( image = jas_image_decode ( image, 0, 0 ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> decode <S2SV_blank> image <S2SV_blank> file <S2SV_blank> %s\\n"", infile ) ; return EXIT_FAILURE ; } jas_stream_close ( instream ) ; fmtname = jas_image_fmttostr ( fmtid ) ; if (! ( fmtname = jas_image_fmttostr ( fmtid ) ) ) { abort ( ) ; } <S2SV_ModStart>! ( image = jas_image_decode ( image, 0, 0 ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> decode <S2SV_blank> image",0
27,"<S2SV_ModStart> esr ) { siginfo_t info ; void __user * pc = ( void __user * ) instruction_pointer ( regs ) ; <S2SV_ModStart> esr ) ; __show_regs ( regs ) ; info. si_signo = SIGILL ; info. si_errno = 0 ; info. si_code = ILL_ILLOPC ; info. si_addr = pc ; arm64_notify_die <S2SV_ModEnd> ( ""Oops <S2SV_blank> - <S2SV_blank> bad <S2SV_blank> mode"", <S2SV_ModStart>, regs, & info, 0 <S2SV_ModEnd> ) ; }",1
28,"<S2SV_ModStart> ) dat ; if ( length < 6 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) dat ; if ( length < 6 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ptr ++ ; length -= 6 ; if ( length < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ptr ++ ; if ( length == 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> if ( length == 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * <S2SV_ModEnd> alt ; alt <S2SV_ModStart> ; if (! alt ) return - ENODEV <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart> ( udev, alt -> <S2SV_ModEnd> desc. bInterfaceNumber <S2SV_ModStart> bInterfaceNumber, alt -> desc. bAlternateSetting",1
30,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart> = 0 ; int comp_len ; <S2SV_ModStart> = 0 ; if ( fromlen < elen ) return - ENAMETOOLONG ; <S2SV_ModStart> = '/' ; comp_len = pc -> lengthComponentIdent ; <S2SV_ModStart> case 2 : if ( comp_len < 3 ) return - ENAMETOOLONG ; <S2SV_ModStart> += 3 ; comp_len -= 3 ; <S2SV_ModStart> case 3 : if ( comp_len < 2 ) return - ENAMETOOLONG ; <S2SV_ModStart> += 2 ; comp_len -= 3 ; <S2SV_ModStart> case 4 : if ( comp_len < 4 ) return - ENAMETOOLONG ; <S2SV_ModStart> += 2 ; comp_len -= 2 ; <S2SV_ModStart> += 2 ; comp_len -= 2 ; <S2SV_ModStart> case 5 : if ( comp_len < 2 ) return - ENAMETOOLONG ; <S2SV_ModStart> += 2 ; comp_len -= 2 ; <S2SV_ModStart> += 2 ; comp_len -= 2 ; if ( comp_len < 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> += 2 ; comp_len -= 2 ; if ( comp_len < 0 ) return - ENAMETOOLONG ; <S2SV_ModStart>,0
31,"<S2SV_ModStart> } if ( strlen ( lines [ i ] ) > strlen ( config ) ) { err = ""Maximum <S2SV_blank> length <S2SV_blank> of <S2SV_blank> configuration <S2SV_blank> line <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", totlines ) ; goto loaderr ; }",0
32,<S2SV_ModStart> unsigned long flags ; if ( qid > NVMET_NR_QUEUES ) return NULL,1
33,"<S2SV_ModStart> ) ) ; usb_set_intfdata ( interface, dev ) ; retval = usb_register_dev ( interface, & tower_class ) ; if ( retval ) { dev_err ( idev, ""Not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> get <S2SV_blank> a <S2SV_blank> minor <S2SV_blank> for <S2SV_blank> this <S2SV_blank> device.\\n"" ) ; usb_set_intfdata ( interface, NULL ) ; retval = - ENODEV ; goto error ; }",0
34,"<S2SV_ModStart> out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; return false ; } if ( ( st32 ) verdef -> vd_next > SIZE_MAX ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; return false ; } <S2SV_ModStart> out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; return false ; } if ( ( st32 ) verdef -> vd_next > SIZE_MAX ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; return false ; } <S2SV_ModStart> out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; return false ; }",0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; if ( dest_keyring ) { <S2SV_ModStart> dest_keyring ) ; goto out ; } <S2SV_ModStart> KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : if ( cred -> request_key_auth ) { down_read ( & authkey -> sem ) ; dest_keyring = key_get ( cred -> request_key_auth -> dest_keyring ) ; if ( dest_keyring ) goto out ; } break ; } case KEY_REQKEY_DEFL_SESSION_KEYRING : dest_keyring = key_get ( cred -> session_keyring ) ; if ( dest_keyring ) goto out ; break ; case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : dest_keyring = key_get ( cred -> user -> session_keyring ) ; break ; case KEY_REQKEY_DEFL_GROUP_KEYRING : dest_keyring = key_get ( cred -> group_keyring ) ; out :,0
36,<S2SV_ModStart> = create_spnego_ctx ( 0,0
37,"<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if ( addr -> l2tp_family!= AF_INET <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> ret = - <S2SV_ModStart> ; read_lock_bh ( & l2tp_ip_lock ) ; if (! sock_flag ( sk, SOCK_ZAPPED ) ) goto out ; if (",0
38,<S2SV_ModStart> <S2SV_null> static inline <S2SV_ModEnd> unsigned int stack_maxrandom_size <S2SV_ModStart> { unsigned int <S2SV_ModEnd> max = 0 <S2SV_ModStart> max = ( <S2SV_ModEnd> ( - 1U <S2SV_ModStart> ) & STACK_RND_MASK <S2SV_ModEnd> ) << PAGE_SHIFT,0
39,"<S2SV_ModStart>, _ ( ""_Cancel"" ), GTK_RESPONSE_CANCEL ) ; gtk_dialog_set_default_response ( GTK_DIALOG ( dialog ), GTK_RESPONSE_CANCEL ) ; gtk_dialog_set_default_response ( GTK_DIALOG ( dialog ), GTK_RESPONSE_CANCEL ) ;",0
40,<S2SV_ModStart> t ) ; if ( tm == NULL ) return NULL,0
41,"<S2SV_ModStart> ; memcpy ( hashed + length, password, strlen ( password )",0
42,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x51 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; mutex_unlock ( & d -> data_mutex ) ; adap <S2SV_ModEnd> -> fe_adap [ <S2SV_ModStart> & d -> <S2SV_ModEnd> i2c_adap ) ; <S2SV_ModStart> ; if ( adap <S2SV_ModEnd> -> fe_adap [ <S2SV_ModStart> ( ts2020_attach, adap <S2SV_ModEnd> -> fe_adap [ <S2SV_ModStart>, & d <S2SV_ModEnd> -> i2c_adap )",1
43,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
44,"<S2SV_ModStart> ) ; } if ( google_version!= ""0.6"" ) { debug ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> with <S2SV_blank> version <S2SV_blank> \'0.6\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"", w -> id, google_version ) ; google_version = ""0.6"" ; } else if ( google_version!= ""0.6"" ) { debug ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'google_out\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"", w -> id, google_out, value ) ; responseHandler = responseHandler ; } else if ( google_version!= ""0.6"" ) { debug ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> with <S2SV_blank> version <S2SV_blank> \'0.6\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'google_sig\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"", w -> id, google_sig ) ; responseHandler = responseHandler ; }",0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
46,"<S2SV_ModStart> tsample_t s ; uint16 bps = 0 ; ( void ) TIFFGetField ( in, TIFFTAG_BITSPERSAMPLE, & bps ) ; if ( bps!= 8 ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can <S2SV_blank> only <S2SV_blank> handle <S2SV_blank> BitsPerSample=8 <S2SV_blank> in <S2SV_blank> %s"", ""cpContig2SeparateByRow"" ) ; return 0 ; }",1
47,"<S2SV_ModStart> ) ; struct hugepage_subpool * spool = ( struct hugepage_subpool <S2SV_ModEnd> * ) page_private <S2SV_ModStart> hugetlb_lock ) ; hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, 1 )",1
48,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) { return AVERROR_EOF ; } if (,1
49,"<S2SV_ModStart> ; if ( e == NULL ) goto not_found ; r = parse_name ( p, & pwd -> pw_name, & pwd -> pw_gid ) ; if ( r < 0",0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return try_get_page <S2SV_ModEnd> ( buf ->,1
51,"<S2SV_ModStart> case IV2_T_ENCR : cp = ikev2_encr_print ( ndo, cp, ep2, map, nmap ) ; break ; case IV2_T_INTEG : cp = ikev2_integ_print ( ndo, cp, ep2 ) ; break ; case IV2_T_DH : cp = ikev2_dh_print ( ndo, cp, ep2 ) ; break ; case IV2_T_ENCR : cp = ikev2_encr_print ( ndo, cp, ep2, map, nmap ) ; break ; case IV2_T_ESN : cp = ikev2_esn_print ( ndo, cp, ep2, map, nmap ) ; break ; case IV2_T_ENCR : cp = ikev2_prf_print ( ndo, cp, ep2 ) ; break ; case IV2_T_INTEG : cp = ikev2_integ_print ( ndo, cp, ep2 ) ; break ; default : ND_PRINT ( ( ndo, "" <S2SV_blank> #%u",0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart>, NULL, NULL <S2SV_ModEnd> ) ; return",0
54,<S2SV_ModStart> config -> pm_max_requests ; fpm_globals. listening_socket = dup ( wp -> listening_socket ),1
55,"<S2SV_ModStart> detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> ; if ( <S2SV_ModEnd> frame_interval > MIN_GF_INTERVAL <S2SV_ModStart> frame_interval > MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 ) { int trans_to_still = 1 ; const FIRSTPASS_STATS * tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { const FIRSTPASS_STATS * position = twopass -> stats_in ; for ( j = 0 ; j < still_interval ; ++ j ) { const FIRSTPASS_STATS * tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; <S2SV_ModEnd> if ( tmp_next_frame <S2SV_ModStart> pcnt_inter - tmp_next_frame. <S2SV_ModEnd> pcnt_motion < 0.999 <S2SV_ModStart> break ; } <S2SV_ModEnd> reset_fpf_position ( twopass <S2SV_ModStart> position ) ; }",0
56,<S2SV_ModStart> 0 ; } err = handle -> h_err ; <S2SV_ModStart> h_transaction ) { rc <S2SV_ModEnd> = jbd2_journal_stop ( <S2SV_ModStart> ) ; return err? err : rc <S2SV_ModEnd> ; } sb <S2SV_ModStart> t_journal -> j_private <S2SV_ModEnd> ; rc =,1
57,"<S2SV_ModStart> ; if ( unlikely ( offset > i_size_read ( inode ) ) ) { ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; }",0
58,<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = args -> valuelen ;,1
59,"<S2SV_ModStart> alg ) { if (! capable ( CAP_SYS_MODULE ) ) { request_module ( ""crypto/%s"", name ) ; return ERR_PTR ( - EPERM ) ; } } <S2SV_ModEnd> alg = crypto_alg_lookup <S2SV_ModStart> ) ) { if (! capable ( CAP_SYS_MODULE ) ) { request_module ( ""crypto/%s-all"", name ) ; return ERR_PTR ( - EPERM ) ; } request_module ( ""crypto/%s"", name ) ; return crypto_alg_lookup ( name, type, mask ) ; } if (! ( ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) { request_module ( ""crypto/%s-all"", name ) ; return ERR_PTR ( - EPERM ) ; }",0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> len - 2 ; if ( len < stlv_len ) goto trunc ; ND_TCHECK2 ( * ( tptr ), stlv_len ) <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; <S2SV_ModStart> tmp ) { ND_TCHECK2 ( * ( tptr ), tmp ) ; <S2SV_ModStart> tmp ) { if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; } <S2SV_ModStart> case ISIS_SUBTLV_SP",0
61,"<S2SV_ModStart> { reply_msg ( <S2SV_ModEnd> c, MSG_JOB_TOO_BIG <S2SV_ModStart> ) ; } if ( body_size + 2 > job_data_size_limit ) { reply_msg ( c, MSG_JOB_TOO_BIG ) ; }",0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,<S2SV_ModStart> == 12 && ( <S2SV_ModStart> flags & TH_SYN ),1
64,"<S2SV_ModStart> -> ipc_socket ; <S2SV_ModEnd> lxc_attach_options_t * options <S2SV_ModStart> int fd ; uid_t new_uid ; gid_t new_gid ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> shutdown ( ipc_socket <S2SV_ModStart> SHUT_RDWR ) ; rexit ( - 1 ) ; } status = - 1 ; ret = lxc_read_nointr_expect ( ipc_socket, & status, sizeof ( status ), & expected ) ; if ( ret < 0 ) { SYSERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0): <S2SV_blank> %s"", strerror ( errno ) ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } status = - 1 ; ret = lxc_read_nointr_expect ( ipc_socket, & status, sizeof ( status ), & status, sizeof ( status ), & expected ) ; if ( ret < 0 ) { SYSERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (1): <S2SV_blank> %s"", strerror ( errno ) )",0
65,"<S2SV_ModStart> = GIT_PKT_NG ; if ( strlen ( line ) > MAX_PKT_LINE_LEN ) goto out_err ; <S2SV_ModStart> = '\\0' ; if ( strlen ( line ) > MAX_PKT_LINE_LEN ) goto out_err ; <S2SV_ModStart> += 3 ; if ( strlen ( line ) > MAX_PKT_LINE_LEN ) goto out_err ; <S2SV_ModStart> += 1 ; if ( strlen ( line ) > MAX_PKT_LINE_LEN ) { if ( strlen ( line ) > MAX_PKT_LINE_LEN ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' ; }",0
66,"<S2SV_ModStart> ( header -> biBitCount == 0 ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> biBitCount <S2SV_blank> %d\\n"", 0 ) ; return OPJ_FALSE ; } if ( header ->",1
67,<S2SV_ModStart> NULL ; } sas_probe_devices ( port ) ;,1
68,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> ENOBUFS ; } memset ( & line, 0, sizeof ( line ) ) ;",1
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_blk_ioctl ( bd, cmd ) ; if ( ret < 0 ) return ret ;",1
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;,0
73,<S2SV_ModStart> * ureq ; unsigned <S2SV_ModStart> return - EFAULT ; if ( req_len > ( QETH_BUFSIZE - IPA_PDU_HEADER_SIZE - sizeof ( struct qeth_ipacmd_setadpparms_hdr ) - sizeof ( struct qeth_ipacmd_setadpparms_hdr ) ) ) return - EINVAL,0
74,"<S2SV_ModStart> int m ; if ( n < 0 ) { jas_deprecated ( ""negative <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_pad"" ) ; }",1
75,<S2SV_ModStart> ; j ++ ) { int c = avio_r8 ( pb ) ; if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> ; j ++ ) { int c = avio_r8 ( pb ) ; if ( avio_feof ( pb ) ) return AVERROR_EOF ; for ( j = 0 ; j < c ; j ++ ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; for ( j = 0 ; j < c ; j ++ ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; for ( j = 0 ; j < c ; j ++ ) { int c = avio_r8 ( pb ) ; if ( avio_feof ( pb ) ) return AVERROR_EOF ; for ( j = 0 ; j < c ; j ++ ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; for ( j = 0 ; j < c ; j ++ ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ;,0
76,<S2SV_ModStart> av_log ( mxf -> fc,1
77,"<S2SV_ModStart> mntent, path, 0",0
78,<S2SV_ModStart> + 10 ; if ( psf -> fileoffset < psf -> filelength ) { <S2SV_ModStart> ; } ; } ;,1
79,"<S2SV_ModStart> case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ], 2 ) ; <S2SV_ModStart> case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ], 2 ) ; <S2SV_ModStart> case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ], 2 ) ; <S2SV_ModStart> case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ], 2 ) ;",0
80,<S2SV_ModStart> NF_STOLEN ; return err == 0? NF_ACCEPT : NF_DROP <S2SV_ModEnd> ; } <S2SV_null>,1
81,"<S2SV_ModStart> * up ; int klen, ulen ; <S2SV_ModStart> rta ) ; klen = <S2SV_ModEnd> xfrm_replay_state_esn_len ( up <S2SV_ModStart> ( up ) ; ulen = <S2SV_ModEnd> xfrm_replay_state_esn_len ( up <S2SV_ModStart> ( up ) ; ulen = nla_len ( rta ) ; p = kzalloc ( klen <S2SV_ModStart> ; pp = kzalloc ( klen <S2SV_ModEnd>, GFP_KERNEL ) <S2SV_ModStart> ENOMEM ; } memcpy ( p, up, ulen ) ;",0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
83,<S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModStart> value + 0.5 ) ; if ( result!= 0.0 ) { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> value + 0.5 <S2SV_ModStart> value + 0.5 ) ; if ( result!= 0.0 ) { result = ( MagickRealType ) ( <S2SV_ModEnd> value + 0.5 <S2SV_ModStart> value + 0.5 ) ; } if ( result!= 0.0 ) { result = ( MagickRealType ) ( <S2SV_ModEnd> value + 0.5 <S2SV_ModStart> value + 0.5 ) ; if ( result!= 0.0 ) { result = ( MagickRealType ) ( <S2SV_ModEnd> value + 0.5 <S2SV_ModStart> value + 0.5 ) ; },0
84,"<S2SV_ModStart> ) ) ; if ( ret ) { btif_storage_error ( BT_LOG_ERROR, ""BTIF_STORAGE_ADD_BONDED_DEVICE: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> device <S2SV_blank> to <S2SV_blank> remote <S2SV_blank> bdaddr <S2SV_blank> %p\\n"", remote_bd_addr ) ; return BT_STATUS_FAIL ; } <S2SV_ModStart> ) ) ; if ( ret ) { btif_storage_error ( BT_LOG_ERROR, BT_LOG_ERROR, ""BT_STORAGE_ADD_BONDED_DEVICE: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> bonded_device <S2SV_blank> to <S2SV_blank> remote_bdaddr <S2SV_blank> %p\\n"", remote_bd_addr ) ; return BT_STATUS_FAIL ; }",0
85,"<S2SV_ModStart> ( buf = jas_alloc3 ( bufsize, numcols <S2SV_ModEnd>, sizeof (",1
86,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if ( iface -> enc. cfg_maps == NULL ) return VPX_CODEC_INCAPABLE <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if ( iface -> enc. cfg_maps_len < 1 ) return VPX_CODEC_INVALID_PARAM ;,0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> gso. type ) ; netbk_fatal_tx_err ( vif",1
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> < 0 ) <S2SV_ModEnd> bitmap_pos = ext_index_add_object <S2SV_ModStart> name ) ; <S2SV_ModEnd> bitmap_set ( base",1
89,"<S2SV_ModStart> xfr_cmd, fname <S2SV_ModEnd> ) ; free",1
90,<S2SV_ModStart> mixer ) { snd_usb_mixer_disconnect ( mixer ) ;,1
91,<S2SV_ModStart> type_flags ) { struct packet_rollover * rollover = NULL ; <S2SV_ModStart> EINVAL ; } mutex_lock ( & fanout_mutex ) ; err = - EINVAL ; <S2SV_ModStart> -> running ) goto out ; err = - EALREADY ; if ( <S2SV_ModEnd> type == PACKET_FANOUT_ROLLOVER <S2SV_ModStart> ) ) { err = - ENOMEM ; <S2SV_ModEnd> rollover = kzalloc <S2SV_ModStart> if (! rollover ) goto out ; <S2SV_ModEnd> rollover = kzalloc <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_huge <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart>,0
92,"<S2SV_ModStart> newsk ) ; memset ( newnp, 0, sizeof ( struct ipv6_pinfo ) ) ;",0
93,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
95,"<S2SV_ModStart> -> num_cols ; if ( imp_sth -> num_cols < 1 ) { do_error ( sth, JW_ERR_INTERNAL, ""num_cols <S2SV_blank> must <S2SV_blank> be <S2SV_blank> 1 <S2SV_blank> or <S2SV_blank> greater\\n"" ) ; return Nullav ; } <S2SV_ModStart> -> num_cols ; if ( imp_sth -> num_cols < 1 ) { do_error ( sth, JW_ERR_INTERNAL, ""num_cols <S2SV_blank> must <S2SV_blank> be <S2SV_blank> 1\\n"" ) ; return Nullav ; } <S2SV_ModStart> -> num_rows ; if ( imp_sth -> num_cols < 1 ) { do_error ( sth, JW_ERR_INTERNAL, ""num_cols <S2SV_blank> must <S2SV_blank> be <S2SV_blank> 1 <S2SV_blank> or <S2SV_blank> greater\\n"" ) ; return Nullav ; }",0
96,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRTS <S2SV_ModEnd> ) ; enc28j60WriteBuffer <S2SV_ModStart> ( interface, ENC28J60_ETXNDL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TX",0
97,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> start_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_start_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> start_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_start_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o ->",0
98,"<S2SV_ModStart> ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""error"" ) ; http_response_send ( res ) ; return ; } if ( <S2SV_ModStart> ; if ( page && ( file_access <S2SV_ModEnd> ( page, <S2SV_ModStart> ; if ( page && ( unlink ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""error"" ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/get"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page && (",0
99,"<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { ret = <S2SV_ModStart> inode, EXT4_STATE_DIO_UNWRITTEN ) ; if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result <S2SV_ModStart> } if ( ( flags & EXT4_GET_BLOCKS_CONVERT ) <S2SV_ModEnd> ) { ret",1
100,<S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ;,1
101,"<S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, cgroup ) ) { ret = - ENOENT ; goto out ; } if (!",1
102,"<S2SV_ModStart> flag ) { int mb_rows, mb_cols ; unsigned char * limits ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; memset ( cm -> pp_limits_buffer, ( unsigned char ) ppl, 16 * mb_rows ) ; for ( mbr = 0 ; mbr < mb_rows ; ++ mbr ) { vpx_memset ( limits, ( unsigned char ) ppl, 16 * mb_cols ) ; for ( mbr = 0 ; mbr < mb_cols ; ++ mbr ) { vpx_post_proc_down_and_across_mb_row ( source -> u_buffer, source -> u_stride, source -> u_stride, source -> u_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> v_buffer, source -> v_stride, source -> v_width, limits, 8 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer, source -> u_stride, source -> u_width, limits",0
103,"<S2SV_ModStart> ) ) { if ( ( ptr -> flags & FD_RAW_WRITE ) && ( ptr -> length!= ptr -> buffer_length ) ) { long length = ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; ptr = ptr -> next ; } else if ( ( ptr -> flags & FD_RAW_READ ) && ( ptr -> length <= ptr -> buffer_length ) ) { long length = ptr -> buffer_length - ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; } else { long length = ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; }",0
104,"<S2SV_ModStart> : if (! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) bprm -> per_clear |= PER_CLEAR_ON_SETID ; if (",1
105,"<S2SV_ModStart> void ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; mb2_cache_entry_init ( ext4_mb_cache, GFP_NOFS, hash <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ; ce = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS ) ; if (! ce ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } <S2SV_null>",0
106,"<S2SV_ModStart> ) ) ; if (! r_socket_http_answer ( s, code, rlen ) ) { free ( uri ) ; return NULL ; }",0
107,<S2SV_ModStart> tf = ( <S2SV_ModEnd> luaY_parser ) (,1
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.",1
110,"<S2SV_ModStart> ; dl = kzalloc <S2SV_ModEnd> ( size,",1
111,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static u_int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> * tptr, const u_int len, const <S2SV_ModStart> * msg ; ND_TCHECK_8BITS ( tptr ) ; ND_TCHECK_16BITS ( tptr ) ; ND_TCHECK_32BITS ( tptr ) ; pdu_len = EXTRACT_16BITS ( tptr ) ; if ( pdu_len!= sizeof ( rpki_rtr_pdu ) ) { ND_PRINT ( ( ndo, ""%sRPKI-RTRv%u <S2SV_blank> (unknown)"", indent_string ( 8 ), pdu_header -> version ) ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; hexdump = FALSE ; switch ( pdu_type ) { case RPKI_RTR_SERIAL_NOTIFY_PDU : case RPKI_RTR_SERIAL_QUERY_PDU : case RPKI_RTR_RESET_QUERY_PDU : case RPKI_RTR_CACHE_RESET_",0
113,"<S2SV_ModStart> ; int n <S2SV_ModEnd> ; skb -> <S2SV_ModStart> rose_facilities_struct ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> data + ROSE_CALL_REQ_FACILITIES_OFF, skb -> len - ROSE_CALL_REQ_FACILITIES_OFF, <S2SV_ModEnd> & facilities )",1
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,<S2SV_ModStart> } else { # ifdef HAVE_SANDBOX || sandbox!= 0 # endif if ( ( options [ opt_idx ]. flags & P_SANDBOX ) && ( sandbox!= 0 ) ) { errmsg = e_secure ; } else if ( ( options [ opt_idx ]. flags & P_SECURE ) && ( secure # ifdef HAVE_SANDBOX || sandbox!= 0 # endif ) { errmsg = e_secure ; } else if ( ( options [ opt_idx ]. flags & P_SECURE ) && ( sandbox!= 0 # endif ) ) { errmsg = e_secure ; } else if ( ( options [ opt_idx ]. flags & P_SECURE ) && ( sandbox!= 0 ) ) { errmsg = e_secure ; } else if ( ( options [ opt_idx ]. flags & P_SECURE ) && ( secure # ifdef HAVE_SANDBOX || ( sandbox!= 0 ) ) { errmsg = e_secure ; } else if ( ( options [ opt_idx ]. flags & P_SECURE ) && ( options [ opt_idx ]. flags & P_SECURE ) ) { errmsg = e_secure ; } else,0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
117,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; int ret <S2SV_ModStart> ) ; } o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
118,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",1
119,"<S2SV_ModStart> == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> is <S2SV_blank> absolute"" ) ; return ( ARCHIVE_FAILED ) ; } separator = * src ++ ; } <S2SV_ModEnd> for ( ;",1
120,"<S2SV_ModStart> TPM_RC tpm_kdfa ( <S2SV_ModEnd> TPMI_ALG_HASH hashAlg, <S2SV_ModStart> ) { TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2 ; TPM2B_DIGEST <S2SV_ModEnd> * bufferList [ <S2SV_ModStart> ; TPM_RC rval = TPM_RC_SUCCESS <S2SV_ModStart> bytes ) { TPM2B_DIGEST tmpResult ; <S2SV_ModStart> size < bytes ) { i_Swizzled = string_bytes_endian_convert_32 ( i ) ; * ( UINT32 * ) tpm2b_i_2Ptr = i_Swizzled ; * ( TPM2B_DIGEST * ) tpm2bBitsPtr = bitsSwizzled ; * ( TPM2B_DIGEST * ) bufferList [ j ] = ( TPM2B_DIGEST * ) & tmpResult ; bufferList [ j ++ ] = ( TPM2B_DIGEST * ) & tmpResult ; bufferList [ j ++ ] = ( TPM2B_DIGEST * ) & tmpResult ; bufferList [ j ++ ] = ( TPM2B_DIGEST * )",0
121,"<S2SV_ModStart> size_t size ; size_t max_size = 0 ; <S2SV_ModStart> 0 ) ||! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; } if (! jas_safe_size_mul ( width, height, & max_size, & size ) ||! jas_safe_size_mul ( size, max_size, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } if (",0
122,<S2SV_ModStart> s ) { if ( s == 0 ) return ( ( tdata_t ) NULL ) ;,0
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! ib_safe_file_access ( fp ) ) ) return - EACCES ; if (,1
124,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
125,<S2SV_ModStart> ( peer ) peer = maybe_get_net <S2SV_ModEnd> ( peer ),1
126,"<S2SV_ModStart> ; } } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } <S2SV_ModStart> '\\n' ) { if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_used = content_buf_used + n ; } memcpy ( content_buf + content_buf_used, buf, n ) ; n = content_buf_used + n ; } if ( <S2SV_ModStart> '\\n' ) { content_buf [ content_buf_used + n ] = '\\n' ; if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } memcpy ( content_buf + content_buf_used + n,",0
127,<S2SV_ModStart> m_family ) ; if ( proto == LLDP_MGMT_ADDR_NONE ) goto toobig ;,0
128,<S2SV_ModStart> ( datalen == 0 && pc + asn1_op_lengths [ op ] > datalen ) { pc -= asn1_op_lengths [ op ] ; flags &= ~ FLAG_LAST_MATCHED ; if ( pc >= machlen ) goto machine_overrun_error ; },0
129,<S2SV_ModStart> = 0 ; spin_lock_bh ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ; <S2SV_ModStart> = 0 ; spin_unlock_bh ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ;,0
130,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModStart> -> level = get_bits <S2SV_ModEnd> ( gb, <S2SV_ModStart> -> profile == 4 && s -> avctx -> level == 8 ) { s -> avctx -> level = 1 ; } else if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> level = 0 ; } return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
131,"<S2SV_ModStart> + MIDQ_DATA_BUFF ; unsigned short head, tail ; <S2SV_ModStart> flags ) ; head = readw ( mpu -> dev -> MIDQ + JQS_wHead ) ; tail = readw ( mpu -> dev -> MIDQ + JQS_wTail ) ; while ( head!= tail ) { u16 val ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRI",0
132,<S2SV_ModStart> rule ) ; if (! entry -> lsm [ lsm_rule ]. rule ) return - EINVAL ;,1
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> function <S2SV_blank> setTimer() <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> checkSession();\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> timerID <S2SV_blank> = <S2SV_blank> setInterval(\'checkSession()\', <S2SV_blank> %d);\\n"" <S2SV_ModEnd> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> setInterval(\'checkSession()\', <S2SV_blank> %d);\\n"" <S2SV_ModEnd> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }\\n"" ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
136,"<S2SV_ModStart>, size_t * acl_len <S2SV_ModEnd> ) { __be32 <S2SV_ModStart> ; int status <S2SV_ModEnd> ; struct kvec <S2SV_ModStart> ; int status <S2SV_ModEnd> ; bitmap [ <S2SV_ModStart>, bitmap ) ; if ( ( status = decode_op_hdr ( xdr, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) <S2SV_ModEnd> goto out ; <S2SV_ModStart> ; recvd = req -> rq_rcv_buf. len - hdrlen <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen <S2SV_ModStart> ) ; * acl_len = attrlen ; } else { * acl_len = attrlen ; } <S2SV_ModEnd> } else status",0
137,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,1
138,<S2SV_ModStart> ; while ( ( <S2SV_ModStart>!= 0 ) && ( i < to_read ),0
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,"<S2SV_ModStart> in -> data [ plane ] && in -> pix_fmt_desc_get ( in -> format ) -> flags & AV_PIX_FMT_HIGHBITDEPTH ) memcpy ( out -> data [ 1 ] + ( AVPALETTE_SIZE - 1 ), in -> data [ plane ], 4 ) ; for ( ; plane < 4 && in -> data [ plane ] ; plane ++ ) { const int width = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( in -> w, s -> hsub ) : in -> w ; const int height = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( in -> h, s -> vsub ) : in -> h ; step = s -> max_step [ plane ] ; outrow = out -> data [ plane ] + ( width - 1 ) * step ; inrow = in -> data [ plane ] + ( height - 1 ) * step ; for ( i = 0 ; i < width ; i ++ ) { uint8_t * outrow = ( uint8_t * ) outrow ; for ( j = 0 ; j < width ; j ++ ) outrow [ j",0
141,"<S2SV_ModStart> ) { strncpy <S2SV_ModEnd> ( szFileName, <S2SV_ModStart> pszFileName ) ; } else { char szPath [ ODBC_FILENAME_MAX + 1 ] ; char szFileName [ ODBC_FILENAME_MAX + 1 ] ; _odbcinst_FileINI ( szPath ) ; snprintf ( szFileName, sizeof ( szFileName ) - 5, ""%s/%s"", szPath, pszFileName ) ; } if ( strlen ( szFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; }",0
142,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart>, "":"", & perms ) ; if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else { uid = 0 ; } } if ( owner && * owner ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else { gid = groupToID ( group ) ; } } if ( perms && smatch ( owner, ""APPWEB"" ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; }",0
143,"<S2SV_ModStart> >> 2 ; if ( q < p ) { DPRINTF ( ( ""Wrapped <S2SV_blank> around <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> %p\\n"", q, p ) ) ; goto out ; } <S2SV_ModStart> >> 2 ; if ( q < p ) { DPRINTF ( ( ""Wrapped <S2SV_blank> around <S2SV_blank> %p\\n"", q, p ) ) ; goto out ; }",0
144,"<S2SV_ModStart> __be32 new_saddr ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. srr ) daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",1
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> case EIGRP_COM_HDR_V1 : if ( eigrp_tlv_len < sizeof ( struct eigrp_common_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> case EIGRP_COM_HDR_V2 : if ( eigrp_tlv_len < sizeof ( struct eigrp_tlv_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> case EIGRP_COM_HDR_V1 : if ( eigrp_tlv_len < sizeof ( struct eigrp_tlv_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> case EIGRP_COM_HDR_V1 : if ( eigrp_tlv_len < sizeof ( struct eigrp_tlv_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> case EIGRP_COM_HDR",0
147,<S2SV_ModStart> = NULL ; size_t max_size = ( size + align - 1 ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ; <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; max_size = ( size + align - 1 ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ; <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; if ( max_size > ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ) { return NULL ; } <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ;,0
148,"<S2SV_ModStart> int res ; unsigned int * export_index_table ; int i ; <S2SV_ModStart> inodes ) ; export_index_table = kmalloc ( SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ) + 1, GFP_NOFS ) ; if ( export_index_table == NULL ) { ERROR ( ""parse_exports_table: <S2SV_blank> allocating <S2SV_blank> empty <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } <S2SV_ModStart> ] ; res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; }",0
149,"<S2SV_ModStart>, '/' ) ; if ( ptr == NULL ) { rw_exit ( & sdvp -> sdev_contents ) ; return ( ENOENT ) ; } if ( ptr == NULL ) { rw_exit ( & sdvp -> sdev_contents ) ; devzvol_create_pool_dirs ( dvp ) ; rw_enter ( & sdvp -> sdev_contents, RW_READER ) ; return ( ENOENT ) ; } if ( ptr == NULL ) { rw_exit ( & sdvp -> sdev_contents ) ; devzvol_create_pool_dirs ( dvp ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_exit ( & sdvp",0
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; if ( flags & EXT4_GET_BLOCKS_CONVERT ) split_flag |= EXT4_EXT_DATA_VALID2 ;,1
151,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
152,"<S2SV_ModStart> HASH_DISABLED ; } return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 ) ;",0
153,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), & final ) ; rcu_read_unlock ( <S2SV_ModEnd> ) ; dst",1
154,"<S2SV_ModStart> = 0.0 ; uint32 nstrips = 0, ntiles = 0 ; uint16 <S2SV_ModEnd> planar = 0 <S2SV_ModStart> read_buff ) { if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return ( - 1 ) ; } <S2SV_ModStart> buffsize ) ; if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return ( - 1 ) ; } <S2SV_ModStart> 3 ) { if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return ( - 1 ) ; } <S2SV_ModStart> 3 ) { if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return ( - 1 ) ; }",0
155,"<S2SV_ModStart> = 0 ; # if CONFIG_VP10_ENCODER } else if ( global -> codec -> name == ""vpx"" ) { ctrl_args = vpx_args ; ctrl_args_map = vpx_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vpx"" ) == 0 ) { ctrl_args = vpx_args ; ctrl_args_map = vpx_arg_ctrl_map ; # endif <S2SV_ModStart> } else if ( arg_match ( & arg, & codec_name, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & arg, & fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm = 1 ; } else if ( arg_match ( & arg, & threads, argi ) ) { config -> cfg. g_threads = arg_parse_uint ( & arg ) ; } else if ( arg_match ( & arg, & profile, argi ) ) {",0
156,<S2SV_ModStart> options. disable_forwarding ||! use_privsep,1
157,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
158,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
159,"<S2SV_ModStart> errout ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ""xxxx"" ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart> -> gr_ctx. length = 4 <S2SV_ModEnd> ; gr ->",1
160,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; <S2SV_ModStart> -> i_data, ext_size ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size <S2SV_ModEnd> ) ; neh",1
161,"<S2SV_ModStart> 1 ; } preverify_ok |= verify_checks ( c, preverify_ok, callback_ctx ) ; <S2SV_ModStart> 1 ; } <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
162,<S2SV_ModStart> ; int ret ; if ( current_chrooted ( ) ) return - EPERM,1
163,"<S2SV_ModStart> ; if ( data_length < fixed_length ) goto exit ; if ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE )!= 0",0
164,"<S2SV_ModStart> c -> nreslevels < <S2SV_ModEnd> s -> reduction_factor <S2SV_ModStart> -> reduction_factor ) { avpriv_request_sample ( s -> avctx, ""reduction_factor <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return AVERROR_PATCHWELCOME ; } <S2SV_ModEnd> c -> nreslevels2decode <S2SV_ModStart> -> reduction_factor ; if ( c -> nreslevels2decode > c -> nreslevels ) { avpriv_request_sample ( s -> avctx, ""nreslevels <S2SV_blank> to <S2SV_blank> decode <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return AVERROR_PATCHWELCOME ; }",0
165,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
166,<S2SV_ModStart> ; bool is_drop_n_account = false ; bool do_vnet <S2SV_ModStart> = false ; do_vnet = false ; <S2SV_ModStart> ; if ( do_vnet <S2SV_ModEnd> ) goto drop_n_restore,0
167,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> sctp_auth_asoc_init_active_key ( asoc,1
168,<S2SV_ModStart> return false ; if ( ndp_msg_type_info ( msg_type ) -> addrto_validate ) return ndp_msg_type_info ( msg_type ) -> addrto_validate ( & msg -> addrto ) ; else,1
169,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> lsm_set_label_at ( int lsm_labelfd <S2SV_ModEnd>, int on_exec <S2SV_ModStart> ) { int lsm_labelfd <S2SV_ModEnd> = - 1 <S2SV_ModStart> = - 1 <S2SV_ModEnd> ; const char <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; const char <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 0 ; lsm_labelfd = openat ( lsm_labelfd, ""self/attr/exec"", O_RDWR ) ; } else { lsm_labelfd = openat ( lsm_labelfd, ""self/attr/current"", O_RDWR ) ; } if ( lsm_labelfd < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> LSM <S2SV_blank> label"" ) ; goto out ; } if ( strcmp ( name, ""SELinux"" ) == 0 ) { if ( write ( lsm_labelfd, lsm_label, strlen ( lsm_label ) + 1 ) < 0 ) { SYSERROR ( <S2SV_ModStart> ""Unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> LSM <S2SV_blank>",0
170,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
171,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
172,"<S2SV_ModStart> cpi ) { VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModStart> ; if ( is_key_frame ( cm ) ) { <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> 0 ) ; } else { cpi -> twopass. kf_group_bits += cpi -> rc. this_frame_target - bits_used ; } <S2SV_ModStart> -= bits_used ; if ( is_key_frame ( cm ) ) { cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } else { cpi -> twopass. gf_group_bits -= bits_used ; } <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
173,"<S2SV_ModStart> } num ++ ; if ( num > MaxAllocSize / ITEMSIZE ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> levels <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num, ( int ) ( MaxAllocSize / ITEMSIZE ) ) ) )",1
174,"<S2SV_ModStart> header, struct mb2_cache_entry <S2SV_ModEnd> * * pce <S2SV_ModStart> ) ; struct mb2_cache_entry * ce ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> hash ) ; ce = mb2_cache_entry_find_first <S2SV_ModEnd> ( ext4_mb_cache, <S2SV_ModStart> ( ext4_mb_cache, <S2SV_ModEnd> hash ) ; <S2SV_ModStart> * bh ; <S2SV_ModEnd> bh = sb_bread <S2SV_ModStart> ; ce = mb2_cache_entry_find_next ( ext4_mb_cache, ce <S2SV_ModEnd> ) ; }",1
175,"<S2SV_ModStart> { gint64 offset <S2SV_ModEnd> ; char line <S2SV_ModStart> = offset ; return parse_cosine_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> -> phdr, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> wth -> frame_buffer, line",1
176,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
177,"<S2SV_ModStart> ( left > 0 && extend ) n = left ; } if ( left >= n ) { s -> packet_length += n ; rb -> left = left - n ; return ( n ) ; } if ( left <= 0 ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( extend ) { if ( left == 0 && left >= SSL3_RT_HEADER_LENGTH ) { pkt = rb -> buf + rb -> offset ; if ( pkt [ 0 ] == SSL3_RT_APPLICATION_DATA && ( pkt [ 3 ] << 8 | pkt [ 4 ] ) >= 128 ) { memmove ( pkt, rb -> buf + rb -> offset, left ) ; rb -> offset = align ; } } else if ( align!= 0 && left >= SSL3_RT_HEADER_LENGTH ) { pkt = rb -> buf + rb -> offset ; if ( pkt [ 0 ] == SSL3_RT_APPLICATION_DATA && ( pkt [ 3 ] << 8 | pkt [ 4 ] ) >= 128 ) { memmove ( pkt, rb -> buf + rb -> offset, left ) ; rb -> offset = align ; } else if",0
178,"<S2SV_ModStart> { # ifdef HAVE_MSC_VER <S2SV_ModEnd> char buf [ <S2SV_ModStart> ) ] ; <S2SV_ModEnd> struct grub_ext4_extent_header * <S2SV_ModStart> { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } leaf = grub_ext4_find_leaf ( data, buf, ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks, fileblock ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; <S2SV_ModStart> ; if ( fileblock >= grub_le_to_cpu32 ( ext [ i ]. len ) ) return 0 ; else { grub_disk_addr_t start ; start = grub_le_to",0
179,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
180,"<S2SV_ModStart> - ENOMEM ; * ( ( struct vbg_ioctl_hdr * ) buf ) = hdr ; <S2SV_ModStart> copy_from_user ( buf + sizeof ( hdr ) <S2SV_ModStart> * ) arg + sizeof ( hdr ), hdr. size_in - sizeof ( hdr ) <S2SV_ModEnd> ) ) {",1
181,"<S2SV_ModStart> int m ; size_t <S2SV_ModEnd> hstartcol ; if <S2SV_ModStart> ( buf = jas_alloc3 ( bufsize, numrows <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ) ) ) ) { abort ( ) ; } hstartcol = ( numrows + 1 - parity ) >> 1 ; n = m ; dstptr = buf ; srcptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; dstptr = buf ; srcptr = buf ; n = m ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++",0
182,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",0
183,"<S2SV_ModStart> ReadBlob ( image, 2, ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * ) magick, 12 ) ; if ( ( count < 2 ) || ( memcmp ( magick, ""\\122\\314"", 2 )!= 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> do { image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) ReadBlobByte ( image ) ; if ( flags & MagickStatusType ) LogMagickEvent ( TraceEvent, CorruptImageError, ""ImproperImageHeader"" ) ; else { pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; pixel_info = ( MemoryInfo * ) RelinquishMagickMemory",0
184,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_mb_cache ) { ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ; sbi -> s_mb_cache = NULL ; } <S2SV_ModEnd> if (!,1
185,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> num_altsetting < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - ENODEV ; goto err_free_devs ; } <S2SV_ModStart> 0 ]. desc ; if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_buf ; }",0
186,"<S2SV_ModStart> ) ; } char * args [ 1024 ] ; pid_t child ; if ( find_child ( pid, & child ) == - 1 ) { fprintf ( stderr, ""Error: <S2SV_blank> the <S2SV_blank> sandbox <S2SV_blank> doesn\'t <S2SV_blank> use <S2SV_blank> a <S2SV_blank> new <S2SV_blank> network <S2SV_blank> namespace\\n"" ) ; exit ( 1 ) ; } args [ sizeof ( args ) - 1 ] = 0 ; if ( strcmp ( command, ""list"" ) == 0 ) bandwidth_list ( pid, args ) ; else if ( strcmp ( command, ""set"" ) == 0 ) bandwidth_set ( pid, dev, down, up ) ; else if ( strcmp ( command, ""clear"" ) == 0 ) bandwidth_remove ( pid, dev ) ; else if ( strcmp ( command, ""set"" ) == 0 ) bandwidth_set ( pid, dev, down, up ) ; else if ( strcmp ( command, ""clear"" ) == 0 ) bandwidth_remove ( pid, dev ) ; else if ( strcmp ( command, ""clear"" ) == 0 ) bandwidth_remove ( pid, dev ; <S2SV_ModEnd> if ( strcmp",0
187,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) <S2SV_ModStart> ci_parent ) ; else return NULL ;,1
188,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
189,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
190,"<S2SV_ModStart> if ( q < p ) { DPRINTF ( ( ""Wrapped <S2SV_blank> around <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> %p\\n"", q, p ) ) ; goto out ; } if ( q",0
191,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = &,1
192,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> dir ) ) ) == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
193,<S2SV_ModStart> prev ) ; n -> mounts += n -> pending_mounts ; n -> pending_mounts = 0 ;,1
194,"<S2SV_ModStart> ; savesegment ( fs, fsindex ) ; savesegment ( gs, gsindex ) ; load_TLS ( next, cpu ) ; arch_end_context_switch ( next_p ) ; savesegment ( <S2SV_ModStart> next -> ds <S2SV_ModEnd> ) ; if",1
195,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
196,<S2SV_ModStart> = value ; if ( ps_bitstrm -> pu4_offset > ps_bitstrm -> pu1_max_offset ) { ps_bitstrm -> pu1_offset = ps_bitstrm -> pu1_min_offset ; ps_bitstrm -> pu1_max_offset = ps_bitstrm -> pu1_max_offset ; } <S2SV_ModStart> = value ; if ( ps_bitstrm -> pu1_offset > ps_bitstrm -> pu1_max_offset ) { ps_bitstrm -> pu1_offset = ps_bitstrm -> pu1_min_offset ; ps_bitstrm -> pu1_offset = ps_bitstrm -> pu1_max_offset ; },0
197,<S2SV_ModStart> 1u << DB_VECTOR ) | ( 1u << AC_VECTOR,1
198,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> 1 ] ; u_int stringlen ; stringlen = len ; if ( stringlen > NFSX_V3FHMAX ) stringlen = NFSX_V3FHMAX ; <S2SV_ModStart>, sfsname, stringlen <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ; temp [ stringlen <S2SV_ModEnd> ] = '\\0'",1
199,"<S2SV_ModStart> unsigned int flags, struct rt6_info * rt <S2SV_ModStart> unsigned int flags ) { struct frag_hdr fhdr ; memset ( & fhdr, 0, sizeof ( fhdr ) ) ; ipv6_select_ident ( & fhdr ) ; skb_shinfo ( skb ) -> ip_frag_id = fhdr. identification ; __skb_queue_tail ( & sk -> sk_write_queue, skb ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
200,<S2SV_ModStart> ( res ) goto err_add_port <S2SV_ModEnd> ; res = <S2SV_ModStart> port ) ; err_add_port : hsr_del_node ( & hsr -> self_node_db ) ;,1
201,"<S2SV_ModStart> n ++ ; if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> [ n ] ) && n < cmdsize <S2SV_ModStart> n ++ ; if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
202,"<S2SV_ModStart> void vp9_setup_dst_planes ( MACROBLOCKD * xd <S2SV_ModEnd>, const YV12_BUFFER_CONFIG <S2SV_ModStart> src ) { const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride <S2SV_ModEnd>, src -> <S2SV_ModStart> src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_x, pd -> subsampling_y ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
203,"<S2SV_ModStart> ; len = ntohl ( * p ++ ) ; if (! xdr_decode_hyper ( p, & args -> count ) ) return 0 ; if ( args -> count!= args -> count ) return 0 ; hdr = ( void * ) p - head -> iov_base ; dlen = XDR_QUADLEN ( hdr ) * 4 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) { args -> count = max_blocksize ; args -> len = max_blocksize ; } rqstp -> rq_vec [ 0 ]. iov_base = page_address ( rqstp -> rq_pages [ v ] ) ; rqstp -> rq_vec [ 0 ]. iov_len = dlen ; v = 0 ; while ( len > rqstp -> rq_vec [ v ]. iov_len ) { len -= rqstp -> rq_vec [ v ]. iov_len ; rqstp -> rq_vec [ v ]. iov_base = page_address ( rqstp -> rq_pages [ v ] ) ; v ++ ; }",0
204,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { return assign_eip_far ( ctxt, dst, ctxt -> mode == X86EMUL_MODE_PROT64 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
205,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
206,"<S2SV_ModStart> ; remaining = tvb_reported_length_remaining <S2SV_ModEnd> ( tvb,",1
207,<S2SV_ModStart> == READ ) { mutex_lock ( & inode -> i_mmap_sem ) ; <S2SV_ModStart> = ocfs2_dio_get_block ; } else { mutex_unlock ( & inode -> i_mmap_sem ) ; <S2SV_ModStart> = ocfs2_dio_get_block ; },0
208,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
209,"<S2SV_ModStart> = false ; len = sizeof ( def ) ; if ( len!= sizeof ( strparm ) ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm + 2, ""%i"", & parm ) ; for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) { isstring = true ; len = strlen ( strparm ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm + 2, ""%i"", & parm ) ; for ( i = 0 ; i < numdefaults ; i ++ ) if ( defaults [ i ]. scantranslate ) { parm = * defaults [ i ].",0
210,<S2SV_ModStart> ; if ( pmc_overflow ( val ) <S2SV_ModEnd> ) write_pmc (,1
211,"<S2SV_ModStart> ( * b + len, * avail - len <S2SV_ModEnd>, nl )",1
212,"<S2SV_ModStart> ) { int all_whitespace = 1 ; int kind ; void * data <S2SV_ModEnd> ; PyCompilerFlags cf <S2SV_ModStart> * str ; <S2SV_ModEnd> PyObject * o <S2SV_ModStart> * o, * fstring_name ; Py_ssize_t len ; Py_ssize_t i ; assert ( expr_start >= expr_start ) ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = PyUnicode_GET_LENGTH ( o ) ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! Py_UNICODE_ISSPACE ( PyUnicode_READ ( PyUnicode_KIND ( o, data, i ) ) ) { all_whitespace = 0 ; break ; } } Py_DECREF ( o ) ; str [ 0 ] = '(' ; memcpy ( str + 1, expr_start, len ) ; str [ len + 1 ] = ')' ; Py_DECREF ( o ) ; <S2SV_ModStart> = PyCF_ONLY_AST ; fstring_name = PyUnicode",0
213,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
214,<S2SV_ModStart> string ) { for ( ; string ; string ++ ) { cJSON * c = c -> child ; if (! c ) break ; <S2SV_ModEnd> while ( c,0
215,"<S2SV_ModStart> == 0 ) mark_key_instantiated ( key, 0 <S2SV_ModEnd> ) ; up_write",1
216,<S2SV_ModStart> <= * len && plen > 0,1
217,<S2SV_ModStart> ; args. rmtvaluelen = valuelen ; args.,1
218,<S2SV_ModStart> ; if ( <S2SV_ModEnd> timeout == NULL <S2SV_ModStart> ; if ( compat_get_timespec <S2SV_ModEnd> ( & ktspec <S2SV_ModStart> > 0 && compat_put_timespec <S2SV_ModEnd> ( & ktspec,1
219,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
220,<S2SV_ModStart> ndev ) ; <S2SV_ModEnd> assert ( skb <S2SV_ModStart> q_num ) ; return <S2SV_ModEnd> hns_nic_net_xmit_hw ( ndev <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
221,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
222,"<S2SV_ModStart> } if ( <S2SV_ModEnd> udp_specified ) { <S2SV_ModStart> udp_specified ) { struct sockaddr * addr ; socklen_t addr_len = sizeof ( struct sockaddr ) ; inet_ntop ( & addr, sizeof ( struct sockaddr ) ) ; if ( inet_ntop ( & addr )!= 0 ) { strncpy ( & addr, ""127.0.0.1"", sizeof ( struct sockaddr ) ) ; inet_ntop ( & addr, sizeof ( struct sockaddr ) ) ; } else { strncpy ( & addr, ""127.0.0.1"", sizeof ( struct sockaddr ) ) ; } inet_ntop ( & addr, sizeof ( struct sockaddr ) ) ; if ( inet_ntop ( & addr )!= 0 ) { strncpy ( & addr, ""127.0.0.1"", sizeof ( struct sockaddr ) ) ; inet_ntop ( & addr, sizeof ( struct sockaddr ) ) ; } else { strncpy ( & addr, ""127.0.0.1"", sizeof ( struct sockaddr ) ) ; } inet_ntop ( & addr, sizeof ( struct sockaddr ) ) ; if",0
223,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
224,<S2SV_ModStart> size ) ; <S2SV_ModEnd> px -> ft,0
225,<S2SV_ModStart> found = 0 <S2SV_ModEnd> ; const char <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( found,1
226,"<S2SV_ModStart> int validate_event ( struct pmu * pmu, <S2SV_ModStart> arm_pmu * armpmu <S2SV_ModEnd> ; struct hw_perf_event <S2SV_ModStart> -> pmu!= pmu ) return 0 ; if ( event -> pmu!= <S2SV_ModStart> return 1 ; armpmu = to_arm_pmu ( event -> pmu ) ;",1
227,"<S2SV_ModStart> bool new_idmap_permitted ( const struct file * file, <S2SV_ModStart>, cap_setid ) && file_ns_capable ( file, ns -> parent, cap_setid )",1
228,<S2SV_ModStart> j ++ ) { if ( a -> type == szMAPI_BINARY ) <S2SV_ModStart> ) ; } },1
229,"<S2SV_ModStart> hx ; u8 * buf <S2SV_ModEnd> ; int ret <S2SV_ModStart> = 0 ; u16 cpu_cs_register = <S2SV_ModEnd> cypress [ type <S2SV_ModStart> ]. cpu_cs_register ; buf = kmalloc ( sizeof ( * hx ), GFP_KERNEL ) ; if (! buf ) return - ENOMEM ; hx = ( struct hexline * ) buf ; buf [ 0 ] = 1 ; if ( <S2SV_ModEnd> usb_cypress_writemem ( udev <S2SV_ModStart> ( ret || usb_cypress_writemem ( udev, cpu_cs_register, buf <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ; kfree ( buf <S2SV_ModEnd> ) ; return <S2SV_ModStart> 0 ) { buf [ 0 ] = 0 ; if ( <S2SV_ModEnd> usb_cypress_writemem ( udev <S2SV_ModStart> ( udev, cpu_cs_register, buf <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ; kfree ( buf <S2SV_ModEnd> ) ; return",0
230,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length",0
231,"<S2SV_ModStart> princ ) ; success = data_eq_string ( * realm, <S2SV_ModEnd> handle -> params <S2SV_ModStart> params. realm ) && data_eq_string ( * c1, ""kadmin"" ) && data_eq_string ( * c2, ""admin"" ) ; <S2SV_ModEnd> fail_princ : if",0
232,<S2SV_ModStart> ; if ( shader_rec_offset < args -> bin_cl_size ||,1
233,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
234,<S2SV_ModStart> vma -> vm_file ) ; down_read ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModStart> ; out : up_read ( & EXT4_I ( inode ) -> i_mmap_sem ) ;,1
235,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
236,<S2SV_ModStart> arg ) { char ch = * arg ; switch ( ch <S2SV_ModEnd> ) { case <S2SV_ModStart> ';' : case '=' : case <S2SV_ModStart> b ++ = ch <S2SV_ModEnd> ; break ;,1
237,"<S2SV_ModStart> case 1 : cp = ikev1_attrmap_print ( ndo, cp, map, nmap ) ; break ; case 2 : cp = ikev1_attrmap_print ( ndo, cp, map, nmap ) ; break ; case 3 : cp = ikev1_attr_print ( ndo, cp, map, nmap ) ; break ; case 4 : cp = ikev1_attr_print ( ndo, cp, map, nmap ) ; break ; case 5 : cp = ikev1_attr_print ( ndo, cp, map, nmap ) ; break ; case 6 : cp = ikev1_attr_print ( ndo, cp, map, nmap ) ; break ; case 8 : cp = ikev1_attr_print ( ndo, cp, map, nmap ) ; break ;",0
238,<S2SV_ModStart> } GsmIceConnectionData ; typedef struct { guint watch_id ; guint protocol_timeout ; } GsmIceConnectionWatch ; static void disconnect_ice_connection ( IceConn ice_conn ) { IceCloseConnection <S2SV_ModEnd> ( ice_conn ) <S2SV_ModStart> ice_conn ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
239,<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) < skb -> head +,1
240,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
241,<S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ;,1
242,<S2SV_ModStart> & RCV_SHUTDOWN ) return 0 ; <S2SV_ModEnd> return err ; <S2SV_ModStart> msg_namelen ) ; <S2SV_ModEnd> } skb_free_datagram (,1
243,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
244,"<S2SV_ModStart> int i ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] <S2SV_ModEnd> = { src <S2SV_ModStart> src -> uv_stride <S2SV_ModEnd> } ; for",0
245,"<S2SV_ModStart>, j ; char * subject_dn = NULL, * issuer_dn = NULL ; unsigned int <S2SV_ModEnd> bufsize = sizeof <S2SV_ModStart> goto cleanup ; subject_dn = calloc ( 1, sizeof ( * md -> subject_dn ) ) ; if ( subject_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL <S2SV_ModEnd> ) ; if <S2SV_ModStart> cleanup ; } issuer_dn = calloc ( 1, sizeof ( * md -> issuer_dn ) ) ; if ( issuer_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; md -> subject_dn = strdup ( subject_dn ) ; if ( md -> subject_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } ret = crypto_retrieve_X509_sans (",0
246,<S2SV_ModStart> (! npages || base_gfn!= old. base_gfn,1
247,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ru,1
248,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
249,"<S2SV_ModStart> * ni ; unsigned int length_left ; u_int j ; ND_TCHECK ( rp -> rip6_cmd <S2SV_ModEnd> ) ; switch <S2SV_ModStart> case RIP6_REQUEST : length_left = length ; if ( length_left < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) goto trunc ; length_left -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; j = length_left <S2SV_ModEnd> / sizeof ( <S2SV_ModStart> j == 1 ) { ND_TCHECK ( rp -> rip6_nets ) ; if ( <S2SV_ModEnd> rp -> rip6_nets <S2SV_ModStart> break ; } } <S2SV_ModStart> ni )!= length_left ) ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u[%u]:"", j, length <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ni )!= length_left ) ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u:"", j ) ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ), ++ ni ) { if ( ndo -> ndo_vflag > 1",0
250,<S2SV_ModStart> < 0 ) goto error ; <S2SV_ModEnd> goto set ;,1
251,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
252,"<S2SV_ModStart> argc ++ ; retval = bprm_change_interp ( iname, bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> ; interp_file =",1
253,<S2SV_ModStart> ; int iSrc <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> res -> ContribRow <S2SV_ModStart> u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ].,1
254,<S2SV_ModStart> user ) { cleanup_srcu_struct ( & user -> release_barrier ) ;,0
255,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".cfg\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n""",1
256,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
257,"<S2SV_ModStart> & tee_mm_sec_ddr ) ; int i ; <S2SV_ModStart> ( mobj ) { for ( i = 0 ; i < size ; i ++ ) memset ( mobj_get_va ( mobj, i ), 0, size ) ; <S2SV_ModStart>, 0, i <S2SV_ModEnd> ) ; return",0
258,<S2SV_ModStart> -> it_overrun += 1LL <S2SV_ModEnd> << i ;,1
259,"<S2SV_ModStart> * for_ch ; bool is_async ; <S2SV_ModStart> comp_for ) ; is_async = 0 ; if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) { ast_error ( c, CHILD ( n, 0 ), ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } <S2SV_ModStart> ; if ( <S2SV_ModEnd> c -> c_feature_version <S2SV_ModStart> < 6 ) { ast_error ( c, CHILD ( n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 2 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, for_ch, Store ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension (",0
260,<S2SV_ModStart> NULL ; } <S2SV_ModEnd> dst_state -> curframe,0
261,"<S2SV_ModStart> void write_mb_modes_kf ( const VP9_COMMON * cm, const MACROBLOCKD * xd, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> * mi_8x8, vpx_writer * w ) { const MODE_INFO * const mi = mi_8x8 [ 0 ] ; const MODE_INFO * const above_mi = mi_8x8 [ - xd -> mi_stride <S2SV_ModEnd> ] ; const <S2SV_ModStart> ; const MODE_INFO * const left_mi = mi_8x8 [ - 1 ] ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = xd -> block_size ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ] ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ] ; const int num_",0
262,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
263,"<S2SV_ModStart> } DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"" <S2SV_ModEnd>, r -> <S2SV_ModStart> = r -> qiov. size <S2SV_ModEnd> / 512 ; <S2SV_ModStart> -> qiov. size <S2SV_ModEnd> ; scsi_req_data ( <S2SV_ModStart> -> req, r -> qiov. size <S2SV_ModEnd> ) ; }",0
264,<S2SV_ModStart> if ( cs >= <S2SV_ModEnd> CQSPI_MAX_CHIPSELECT ) {,1
265,"<S2SV_ModStart> { if ( n >= maxn ) { <S2SV_ModEnd> SWF_error ( ""Action <S2SV_blank> overflow!!"" <S2SV_ModStart> ) ; # endif return 0 ; } <S2SV_ModEnd> switch ( actions <S2SV_ModStart>. ActionCode ) { case SWFACTION_END : return decompileEND ( n, actions, maxn ) ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME : decompileGOTOFRAME ( n, actions, maxn, 0 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETPROPERTY : decompileGETPROPERTY ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n, actions,",0
266,<S2SV_ModStart> ) ) ; if ( l > ll ) l = ll ;,0
267,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
268,<S2SV_ModStart> ; if ( <S2SV_ModEnd> len < sizeof <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS,0
269,<S2SV_ModStart> -> skip_clock_update = 1 <S2SV_ModEnd> ; prev ->,0
270,"<S2SV_ModStart> ret ; uint8_t * buffer ; uint8_t value ; buffer = kmalloc ( 1, GFP_KERNEL ) ; if (! buffer ) return - ENOMEM <S2SV_ModEnd> ; dev_dbg ( <S2SV_ModStart>, reg, buffer <S2SV_ModEnd>, 1, <S2SV_ModStart> 1000 ) ; if ( <S2SV_ModEnd> ret >= 0 <S2SV_ModStart> ret >= 0 ) { value = buffer [ 0 ] ; kfree ( buffer ) ; return value ; } else { kfree ( buffer ) ; return <S2SV_ModEnd> ret ; } <S2SV_ModStart> ret ; } }",1
271,<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> sizeof ( char <S2SV_ModEnd> ) * ( <S2SV_ModStart> * * azModuleArg ; if ( nBytes > SIZE_MAX / 2 ) nBytes = SIZE_MAX / 2 ; <S2SV_ModStart> * * azModuleArg ; if ( nBytes > SIZE_MAX / 2 ) nBytes = SIZE_MAX / 2 ;,0
272,"<S2SV_ModStart> ; } } s -> append_char ( s, 0 ) ; strncpy <S2SV_ModEnd> ( outbuffer,",1
273,"<S2SV_ModStart> ) ) { if ( AdaptationStates [ i ] > MAX_ADAPTATION_STATES ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""Maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> adaptation <S2SV_blank> states <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", nProfiles, ( int ) ( MAX_ADAPTATION_STATES ) ) ; goto Error ; } <S2SV_ModStart> ) ) { if ( AdaptationStates [ i ] > MAX_ADAPTATION_STATES ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""Maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> adaptation <S2SV_blank> states <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( int ) ( MAX_ADAPTATION_STATES ) ) ; goto Error ; }",0
274,<S2SV_ModStart> = 0 ; ( i + 3 ) <S2SV_ModEnd> < sec -> <S2SV_ModStart> = 0 ; ( i + 7 ) <S2SV_ModEnd> < sec ->,1
275,"<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_BW_CONSTRAINTS_OLD : if ( subl == 2 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; else ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; <S2SV_ModStart> break ; case ISIS_SUBTLV_EXT_IS_REACH_BW_CONSTRAINTS_OLD : if ( subl == 2 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; else if ( subl == 3 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; else ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; else ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string",0
276,"<S2SV_ModStart> ] ; } if ( idx + HBE_OPER_WIN_LEN > ( TWICE_QMF_SYNTH_CHANNELS_NUM * sizeof ( FLOAT32 ) ) ) { ptr_hbe_txposer -> j_input_buf [ idx + HBE_OPER_WIN_LEN - 1 ] = ptr_hbe_txposer -> ptr_input_buf [ idx + HBE_OPER_WIN_LEN - 1 ] ; memset ( ptr_hbe_txposer -> j_input_buf [ idx + HBE_OPER_WIN_LEN - 1 ], 0, TWICE_QMF_SYNTH_CHANNELS_NUM * sizeof ( FLOAT32 ) ) ; } else if ( idx + HBE_OPER_WIN_LEN - 1 > ( TWICE_QMF_SYNTH_CHANNELS_NUM * sizeof ( FLOAT32 ) ) ) { ptr_hbe_txposer -> j_input_buf [ idx + HBE_OPER_WIN_LEN - 1 ] = ptr_hbe_txposer -> ptr_input_buf [ idx + HBE_OPER_WIN_LEN - 1 ] ; }",0
277,"<S2SV_ModStart> -> dmin ; if ( p - str < enclen ( reg -> enc, p ) ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; else if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; if ( high_prev ) * high_prev = onigenc_get_prev_char_head ( reg -> enc, str, * high ) ; else if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; if ( high_prev ) * high_prev = onigenc_get_prev_char_",0
278,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline bool <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> ) { struct bfq_data <S2SV_ModEnd> * bfqd = <S2SV_ModStart> -> bfqd ; <S2SV_ModEnd> spin_lock_irqsave ( & <S2SV_ModStart> flags ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_queued ( bfqq ) == 0 ) return false ; spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; return true ;",0
279,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
280,"<S2SV_ModStart> ) continue ; if ( vif -> tx. sring -> req_prod - vif -> tx. req_cons > XEN_NETIF_TX_RING_SIZE ) { netdev_err ( vif -> dev, ""Impossible <S2SV_blank> number <S2SV_blank> of <S2SV_blank> requests. <S2SV_blank> "" ""req_cons <S2SV_blank> %d, <S2SV_blank> req_cons <S2SV_blank> %d\\n"", vif -> tx. sring -> req_cons, XEN_NETIF_TX_RING_SIZE - 1 ) ; continue ; } <S2SV_ModStart> 0 ) ) { netdev_err ( vif -> dev, ""Impossible <S2SV_blank> number <S2SV_blank> of <S2SV_blank> requests. <S2SV_blank> "" ""req_cons <S2SV_blank> %d, <S2SV_blank> size <S2SV_blank> %d\\n"", vif -> tx. req_cons, XEN_NETIF_TX_RING_SIZE ) ; continue ; } <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> < 0 ) ) { netdev_err ( vif -> dev, ""Impossible <S2SV_blank> number <S2SV_blank> of <S2SV_blank> requests. <S2SV_blank> "" ""req_cons <S2SV_blank> %d, <S2SV_blank> remaining_credit <S2SV_blank> %d\\n"", work_to_do, XEN_NETIF_TX_RING_SIZE ) ;",0
281,"<S2SV_ModStart> n ++ ; if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> [ n ] ) && n < cmdsize <S2SV_ModStart> n ++ ; if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
282,<S2SV_ModStart> cb -> args [ 0 ] <S2SV_ModEnd> ; struct net <S2SV_ModStart> walk = ( <S2SV_ModEnd> struct xfrm_policy_walk *,0
283,<S2SV_ModStart> conn ) ; if ( <S2SV_ModStart> ( conn )!= 0 ) return,1
284,"<S2SV_ModStart> ) ; struct <S2SV_ModEnd> skb_shared_info * shinfo <S2SV_ModStart> err ) ) xen_netbk_idx_release ( netbk, pending_idx <S2SV_ModEnd>, XEN_NETIF_RSP_ERROR ) <S2SV_ModStart> XEN_NETIF_RSP_ERROR ) ; <S2SV_ModEnd> start = ( <S2SV_ModStart>, newerr ; <S2SV_ModEnd> pending_idx = frag_get_pending_idx <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> continue ; } xen_netbk_idx_release ( netbk, pending_idx <S2SV_ModEnd>, XEN_NETIF_RSP_ERROR ) <S2SV_ModStart> XEN_NETIF_RSP_ERROR ) ; <S2SV_ModEnd> if ( err <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY",1
285,,1
286,"<S2SV_ModStart> NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline",0
287,"<S2SV_ModStart> 1 ) { struct sockaddr * addr_p = ( struct sockaddr * ) & addr ; socklen_t addr_l = sizeof ( addr ) ; <S2SV_ModStart> ; len = recvfrom <S2SV_ModEnd> ( fd, <S2SV_ModStart> len < 0 || addr. nl_pid <S2SV_ModStart> ( LOG_ERR, ""recvfrom <S2SV_blank> failed; <S2SV_blank> pid:%u <S2SV_blank> error:%d <S2SV_blank> %s"", addr. nl_pid, errno, strerror ( errno ) ) <S2SV_ModStart> ( LOG_ERR, ""recvfrom <S2SV_blank> failed; <S2SV_blank> pid:%u <S2SV_blank> error:%d <S2SV_blank> %s"", addr. nl_pid, errno, strerror ( errno ) ) ; close ( fd ) ; exit ( EXIT_FAILURE ) ; } len = recvfrom <S2SV_ModEnd> ( fd, <S2SV_ModStart> ( LOG_ERR, ""recvfrom <S2SV_blank> failed; <S2SV_blank> pid:%u <S2SV_blank> error:%d <S2SV_blank> %s"", addr. nl_pid, errno, strerror ( errno ) ) ; if ( len < 0 <S2SV_ModStart> len ) { syslog ( LOG_ERR, ""recvfrom <S2SV_blank> failed; <S2SV_blank> pid:%u <S2SV_blank> error:%d <S2SV_blank> %s"", errno, strerror ( errno ) ) ; close ( fd ) ; exit ( EXIT_FAILURE ) ; }",0
288,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
289,<S2SV_ModStart> ipc == NULL && client -> session == NULL,1
290,"<S2SV_ModStart> > newDataLength || ( <S2SV_ModStart> + x > diffBlock + diffBlockLength && ( <S2SV_ModStart> + y > extraBlock + extraBlockLength ) ) ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( <S2SV_ModStart> + x > diffBlock + diffBlockLength && ( extraPtr + y > extraBlock + extraBlockLength ) ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( ( <S2SV_ModStart> + y > extraBlock + extraBlockLength ) ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } <S2SV_ModStart> + x > diffBlock + diffBlockLength && ( extraPtr + y > extraBlock + extraBlockLength ) ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
291,"<S2SV_ModStart>, nameptr, lfi, fname, UDF_NAME_LEN <S2SV_ModEnd> ) ; if",1
292,"<S2SV_ModStart> ip_vs_timeout_user t ; memset ( & t, 0, sizeof ( t ) ) ;",1
293,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart>, fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
294,<S2SV_ModStart> ; ssize_t result ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
295,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, path1, & next <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ) { if ( fpath && strcmp ( next, fpath ) == 0 ) ret = - EEXIST ; else ret = - ENOENT <S2SV_ModEnd> ; goto out <S2SV_ModStart> if (! fc_may_access ( fc, controller, path1, NULL, O_RDWR ) ) { ret = - EACCES ; goto out ; } if (! <S2SV_ModStart> cgdir ) ; free ( next ) ;",1
296,<S2SV_ModStart> ) ) { put_disk ( disk ) ;,1
297,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
298,"<S2SV_ModStart> == VFF_TYP_BIT ) { if ( CheckMemoryOverflow <S2SV_ModEnd> ( ( image <S2SV_ModStart> ) >> 3UL, <S2SV_ModEnd> image -> rows <S2SV_ModStart> image -> rows )!= MagickFalse ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; max_packets = ( ( image -> columns + 7UL ) >> 3UL ) * image -> rows ; } else { if ( CheckMemoryOverflow ( number_pixels, viff_info. number_data_bands )!= MagickFalse ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; <S2SV_ModEnd> max_packets = ( <S2SV_ModStart> number_data_bands ) ; }",0
299,<S2SV_ModStart> ) pktnum ; if ( avio_feof ( s -> pb ) ) { goto end ; },0
300,<S2SV_ModStart> ; rinfo = kzalloc <S2SV_ModEnd> ( SZ_SG_REQ_INFO *,1
301,"<S2SV_ModStart> ; # endif install_keyword ( ""umask"", & umask_handler ) ;",1
302,<S2SV_ModStart> data ) { ( void ) data ;,0
303,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> kfree ( tmpbuf,1
304,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; }",1
305,"<S2SV_ModStart> ( box = jp2_box_create0 ( ) ) ) { goto error ; } <S2SV_ModEnd> if ( jp2_getuint32 <S2SV_ModStart> 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, \'""\', <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"", \'""\', boxinfo -> name, \'""\', box -> type, box -> len ) ) ;",0
306,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
307,"<S2SV_ModStart> ; int copylen = 0 <S2SV_ModStart> goto err ; err = - EMSGSIZE ; if ( unlikely ( count > MAX_SKB_FRAGS ) ) goto err ; <S2SV_ModStart> zerocopy ) { if ( count > MAX_SKB_FRAGS ) { copylen = iov_length ( iv, count - MAX_SKB_FRAGS ) ; if ( copylen < vnet_hdr_len ) copylen = 0 ; else copylen -= vnet_hdr_len ; } if ( copylen < vnet_hdr. hdr_len )",0
308,<S2SV_ModStart> nexthdr ) { unsigned int <S2SV_ModEnd> offset = sizeof <S2SV_ModStart> while ( offset <S2SV_ModEnd> <= packet_len ) <S2SV_ModStart> packet_len ) { struct ipv6_opt_hdr * exthdr ; <S2SV_ModStart> offset ; } if ( offset + sizeof ( struct ipv6_opt_hdr ) > packet_len ) return - EINVAL ; exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + offset ) ; <S2SV_ModStart> offset ; } return - EINVAL <S2SV_ModEnd> ; } <S2SV_null>,0
309,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
310,"<S2SV_ModStart> ; mv_bias ( ref_frame_sign_bias [ above -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; near_ref [ vcnt ] = above -> mbmi. ref_frame ; if ( left -> mbmi. ref_frame!= INTRA_FRAME ) { near_mvs [ vcnt ]. as_int = left -> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; near_ref [ vcnt ] = left -> mbmi. ref_frame ; } vcnt ++ ; if ( above -> mbmi. ref_frame!= INTRA_FRAME ) { near_mvs [ vcnt ]. as_int = near_mvs [ above -> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame",0
311,"<S2SV_ModStart> sll ) ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg -> msg_name ) { memcpy ( msg -> msg_name, sinfo -> name, sizeof ( * sll ) ) ; sll = kmalloc ( sizeof ( * sll ), GFP_KERNEL ) ; if (! sll ) { memcpy ( msg -> msg_name, sizeof ( * sll ) ) ; msg -> msg_namelen = sizeof ( * sll ) ; } else { memcpy ( msg -> msg_name, sizeof ( * sll ) ) ; } copied = skb -> len ; err = skb_copy_datagram_iovec ( skb, 0, msg -> msg_name, copied ) ; if ( err ) goto out_free ; }",0
312,<S2SV_ModStart> } if ( <S2SV_ModEnd> djrcv_dev -> paired_dj_devices,1
313,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
314,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
315,"<S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; bool all_param_pass = true ; union sctp_params param ; <S2SV_ModStart> __u32 serial ; <S2SV_ModEnd> chunk_len = ntohs <S2SV_ModStart> goto done ; sctp_walk_params ( param, addip, addip_hdr. params ) { if ( param. p -> type == SCTP_PARAM_IPV4_ADDRESS || param. p -> type == SCTP_PARAM_IPV6_ADDRESS ) continue ; <S2SV_ModEnd> err_code = sctp_process_asconf_param <S2SV_ModStart>, asconf, param. addip ) ; if ( err_code!= SCTP_ERROR_NO_ERROR <S2SV_ModEnd> ) all_param_pass = <S2SV_ModStart> ) all_param_pass = false <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( asconf_ack, param. addip <S2SV_ModEnd> -> crr_id, <S2SV_ModStart> -> crr_id, err_code, param. addip ) ; if ( err_code == SCTP_ERROR_RSRC_LOW <S2SV_ModEnd> ) goto done <S2SV_ModStart> goto done ; <S2SV_ModEnd> } done",1
316,"<S2SV_ModStart> 101, ( ""jas_realloc(%x, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",1
317,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
318,<S2SV_ModStart> break ; # ifdef CONFIG_PPC_BOOK3S_64 case KVM_CAP_SPAPR_TCE_64 : case KVM_CAP_SPAPR_VFIO_64 : case KVM_CAP_SPAPR_VFIO_64 : r = hv_enabled ; break ; # endif # ifdef CONFIG_KVM_XICS case KVM_XICS_VERSION_1_0 : case KVM_XICS_VERSION_2_0 : r =! hv_enabled ; break ; # endif # ifdef CONFIG_X86_64 case KVM_XICS_VERSION_1_0 : case KVM_XICS_VERSION_2_0 : case KVM_XICS_VERSION_3_0 : r = hv_enabled ; break ; # endif # ifdef CONFIG_X86_64 <S2SV_ModStart> case KVM_XICS_VERSION_1_0 : case KVM_XICS_VERSION_2_0 : r =! hv_enabled ; break ; # endif # ifdef CONFIG_X86_64 <S2SV_ModStart> case KVM_XICS_VERSION_1_0 : r =,0
319,<S2SV_ModStart> msicap ; pci_populate_msicap <S2SV_ModEnd> ( & msicap,0
320,"<S2SV_ModStart> key_name ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. key, HV_KVP_EXCHANGE_MAX_KEY_SIZE / 2 <S2SV_ModStart> value ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. value, HV_KVP_EXCHANGE_MAX_VALUE_SIZE / 2",1
321,"<S2SV_ModStart> ; ctx = rcu_dereference_protected ( d -> log_ctx, lockdep_is_held ( & d -> mutex ) )? eventfd_ctx_fileget ( eventfp ) : NULL ; <S2SV_ModStart> -> log_ctx = rcu_dereference_protected ( d -> log_ctx, lockdep_is_held ( & d -> mutex ) )? eventfd_ctx_fileget ( eventfp ) : NULL ;",0
322,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
323,"<S2SV_ModStart> * parg = ( void * ) arg ; long err = - EINVAL ; int is_ext_ctrl = ( cmd == VIDIOC_S_EXT_CTRLS || cmd == VIDIOC_G_EXT_CTRLS ) ; if ( _IOC_DIR ( cmd ) == _IOC_NONE ) { parg = sbuf ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) return - ENOMEM ; parg = mbuf ; } err = - EFAULT ; if ( _IOC_DIR ( cmd ) & _IOC_WRITE ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) return - ENOMEM ; parg = mbuf ; } err = - EFAULT ; if ( _IOC_DIR ( cmd ) & _IOC_WRITE ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out ; parg = mbuf ;",0
324,"<S2SV_ModStart> REDIS_OK ; } if ( server. replstate == REDIS_REPL_CONNECTED && cmd -> proc!= infoCommand && cmd -> proc!= slaveofCommand ) { addReplyError ( c, ""slave <S2SV_blank> of <S2SV_blank> command <S2SV_blank> is <S2SV_blank> down"" ) ; return REDIS_OK ; }",0
325,"<S2SV_ModStart> u16 size, const <S2SV_ModStart> data ) { void * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, buf <S2SV_ModEnd>, size, <S2SV_ModStart> 500 ) ; kfree ( buf ) ; return ret ;",1
326,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> num_altsetting < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - ENODEV ; goto err_free_devs ; } <S2SV_ModStart> 0 ]. desc ; if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_buf ; }",0
327,"<S2SV_ModStart> ) { case GTK_RESPONSE_OK : { file = nautilus_file_get_location ( parameters -> file ) ; nautilus_file_set_metadata ( parameters -> file, NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED, NULL, NULL ) ; nautilus_file_mark_desktop_file_untrusted ( file, parameters -> parent_window, TRUE, NULL, NULL ) ; <S2SV_ModEnd> screen = gtk_widget_get_screen <S2SV_ModStart> uri ) ; <S2SV_ModEnd> g_object_unref ( file",0
328,<S2SV_ModStart> ; if ( urb -> actual_length > 0 &&,1
329,"<S2SV_ModStart> * server, struct smb_vol * vol ) { <S2SV_ModEnd> struct cifsSesInfo * <S2SV_ModStart> cifs_tcp_ses_lock ) ; list_for_each_entry ( ses <S2SV_ModEnd>, & server <S2SV_ModStart> server -> smb_ses_list, smb_ses_list ) { switch ( server -> secType ) { case Kerberos : if ( vol -> linux_uid!= ses -> linux_uid ) continue ; break ; default : <S2SV_ModEnd> if ( strncmp <S2SV_ModStart> -> userName, vol -> <S2SV_ModStart> ) continue ; if ( strlen ( vol -> username )!= 0 && strncmp ( ses -> password, vol -> password, MAX_PASSWORD_SIZE ) ) continue ; }",1
330,"<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( cfg -> g_w!= ctx -> cfg. g_w ) || ( ( cfg -> g_h!= ctx -> cfg. g_h ) ) && ( ( cfg -> g_lag_in_frames > 1 || ( cfg -> g_pass!= VPX_RC_ONE_PASS ) && ( cfg -> g_lag_in_frames > 1 || cfg -> g_pass!= VPX_RC_ONE_PASS ) ) ) { if ( ( cfg -> g_w!= ctx -> cfg. g_w ) || ( ( cfg -> g_h!= ctx -> cfg. g_h ) ) && ( ( cfg -> g_lag_in_frames > 1 || ( cfg -> g_pass!= VPX_RC_ONE_PASS ) && ( cfg -> g_pass!= VPX_RC_ONE_PASS ) ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" <S2SV_ModEnd> ) ; if",0
331,"<S2SV_ModStart> =='<S2SV_blank>') { input ++ ; } <S2SV_ModEnd> ptr = strchr <S2SV_ModStart> off ) ) { <S2SV_ModStart> ) ; } } <S2SV_ModStart>! r_fs_mount ( core -> fs, ptr, input, off <S2SV_ModEnd> ) ) eprintf <S2SV_ModStart> ) ) eprintf ( ""Unknown <S2SV_blank> filesystem <S2SV_blank> type\\n"" ) ; else if (! r_fs_mount ( core -> fs, ptr, input, core -> offset <S2SV_ModEnd> ) ) eprintf <S2SV_ModStart> ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; free ( ptr ) ; } break ; case '-' : r_fs_umount ( core -> fs, input + 1 ) ; break ; case '\\0' : r_list_foreach ( list, iter, file ) { r_cons_printf ( ""m <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> 0x%"" PFMT64x ""\\n"", file -> path, file -> p -> name, file -> delta ) ; } break ; case '\\1' : r_list_foreach ( list, iter, file ) { r_cons_printf ( ""m <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> 0x%"" PFMT64x ""\\n"", file -> path ) ; }",0
332,"<S2SV_ModStart> inode ) ; struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> ; if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",1
333,<S2SV_ModStart> key * keyring ; if ( new -> thread_keyring ) return 0,1
334,"<S2SV_ModStart> ; static size_t scanned = 0 ; static size_t readnbd = 0 ; if ( readnbd > ( size_t ) 0U ) { readnbd = ( size_t ) 0U ; } <S2SV_ModStart> scanned ++ ; if ( readnb > ( size_t ) 0U ) { <S2SV_ModStart> scanned ++ ; if ( readnb > ( size_t ) 0U ) { <S2SV_ModStart> scanned ++ ; if ( readnb > ( size_t ) 0U ) { while ( read ( clientfd, cmd + scanned, cmdsize - scanned ) ) < ( ssize_t ) 0 && errno == EINTR ) ; } <S2SV_ModStart> } } } if ( readnbd > ( size_t ) 0U ) { scanned = readnbd ; if ( readnbd > ( size_t ) 0U ) { while ( readnb > ( ssize_t ) 0 && errno == EINTR ) { read ( clientfd, cmd + readnbd, cmdsize - readnbd ) ) < ( ssize_t ) 0 && errno == EINTR ) ; } readnbd += readnb ; if ( readnbd > ( size_t ) 0",0
335,"<S2SV_ModStart> orig ) ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; <S2SV_ModStart> mrb_io_alloc ( mrb <S2SV_ModEnd> ) ; DATA_TYPE",1
336,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
337,"<S2SV_ModStart> cpi ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. aq_mode == CYCLIC_REFRESH_AQ && cpi -> oxcf. aq_mode == CYCLIC_REFRESH_AQ ) vp9_highbd_init_plane_quantizers ( cpi, & cpi -> highbd ) ; else vpx_init_plane_quantizers ( cpi, & cpi -> mb ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. aq_mode == CYCLIC_REFRESH_AQ ) vp9_highbd_init_plane_quantizers ( cpi, & cpi -> highbd ) ; # endif vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi,",0
338,"<S2SV_ModStart> return res ; res = utee_param_to_param ( utc, <S2SV_ModEnd> param, callee_params <S2SV_ModStart>, callee_params ) ; if ( res!= TEE_SUCCESS ) return res",1
339,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; const struct x86_emulate_ops * ops = ctxt -> ops ; int cpl = ctxt -> ops -> cpl ( ctxt ) ; old_eip = ctxt -> _eip ; ops -> get_segment ( ctxt, & old_cs, & old_desc, NULL <S2SV_ModEnd>, VCPU_SREG_CS ) <S2SV_ModStart>, VCPU_SREG_CS ) <S2SV_ModEnd> ; memcpy ( <S2SV_ModStart> 2 ) ; rc = __load_segment_descriptor <S2SV_ModEnd> ( ctxt, <S2SV_ModStart> sel, VCPU_SREG_CS, cpl, false, & new_desc ) ; if ( rc!= X86EMUL_CONTINUE <S2SV_ModEnd> ) return X86EMUL_CONTINUE <S2SV_ModStart> return X86EMUL_CONTINUE ; rc = assign_eip_far ( ctxt, ctxt -> src. val, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) goto fail ; ctxt -> src. val = old_cs ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) goto fail ; ctxt -> src. val = old_eip",1
340,<S2SV_ModStart> -> band = av_calloc <S2SV_ModEnd> ( reslevel -> <S2SV_ModStart> -> prec = av_calloc <S2SV_ModEnd> ( reslevel ->,1
341,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
342,"<S2SV_ModStart> } struct reloc_struct_t * got_table ; if ( n_got < 1 ) { goto out_error ; } n_got = calloc ( 1, n_got * sizeof ( ut32 ) ) ; got_table = NULL ; offset = 0 ; for ( i = 0 ; i < n_got ; i ++ ) { ut32 got_entry ; if ( obj -> hdr -> data_start + offset + 4 > obj -> size || obj -> hdr -> data_start + offset + 4 < offset ) { break ; } len = r_buf_read_at ( obj -> b, obj -> hdr -> data_start + offset, ( ut8 * ) & got_entry, sizeof ( ut32 ) ) ; if (! VALID_GOT_ENTRY ( got_entry ) || len!= sizeof ( ut32 ) ) { break ; } got_table [ i ]. data_offset = got_entry ; } obj -> got_table = got_table ;",0
343,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) { WARN_ON_ONCE ( info -> si_code < 0 ) ; <S2SV_ModEnd> return - EPERM <S2SV_ModStart> - EPERM ; },1
344,"<S2SV_ModStart> * p_tx0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdx, <S2SV_ModEnd> p_image -> x0 <S2SV_ModStart> * p_tx1 = ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdx, <S2SV_ModEnd> p_image -> x1 <S2SV_ModStart> * p_ty0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdy, <S2SV_ModEnd> p_image -> y0 <S2SV_ModStart> * p_ty1 = ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdy, <S2SV_ModEnd> p_image -> y1",1
345,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * create_output_name <S2SV_ModStart> * create_output_name ( <S2SV_ModEnd> char * fname <S2SV_ModStart> * fname, <S2SV_ModEnd> int lower, <S2SV_ModStart> ; if ( lower ) strcpy ( ( char * ) name, ( char * ) dir ) ; else strcpy ( ( char * ) name, ( char * ) fname ) ; <S2SV_ModEnd> p = & <S2SV_ModStart> { if ( ( c = * fname ++ ) < 0x80 ) x = c ; else if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { x = ( c & 0xC0 ) ; x |= ( c & 0x1F ) << 6 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F ) ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F ) ; } else if ( x == slash ) x = '\\\\' ; else if",0
346,"<S2SV_ModStart> classes = NULL ; zval * return_value = NULL <S2SV_ModStart> ; } } return_value = var_hash_to_var ( & var_hash ) ; <S2SV_ModStart>! php_var_unserialize_ex ( return_value <S2SV_ModEnd>, & p <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> RETURN_FALSE ; } <S2SV_ModEnd> if (! <S2SV_ModStart> RETURN_FALSE ; } PHP_VAR_UNSERIALIZE_DESTROY ( var_hash ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
347,<S2SV_ModStart> goto __err ; tu -> qhead = tu -> qtail = tu -> qused = 0 ;,1
348,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ( <S2SV_ModStart> ) ptr -> size < tmp_strsize ) return GF_ISOM_INVALID_FILE ; tmp_strsize = ( u32 ) tmp_strsize - 8 ; if (! tmp_strsize ) return GF_OUT_OF_MEM ;,0
349,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
350,"<S2SV_ModStart> == 0 ) { if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; } if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; } if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> == 0 ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; } if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; } if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; } if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; }",0
351,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) { WARN_ON_ONCE ( info -> si_code < 0 ) ; <S2SV_ModEnd> return - EPERM <S2SV_ModStart> - EPERM ; },1
352,"<S2SV_ModStart> -> off = strtoull <S2SV_ModEnd> ( p, <S2SV_ModStart> -> filesize = strtoull <S2SV_ModEnd> ( slash +",1
353,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> maxh, max, offset, upb ; size_t i <S2SV_ModEnd> ; upb = <S2SV_ModStart> maxw = ( size_t ) img -> comps [ 0 ]. w ; maxh = ( size_t ) img -> comps [ 0 ]. h ; max = maxw * maxh ; y = img -> comps [ 0 ]. data ; cb = img -> comps [ 1 ]. data ; cr = img -> comps [ 2 ]. data ; d0 = r = ( int * ) malloc ( sizeof ( int ) * max ) ; d1 = g <S2SV_ModEnd> = ( int <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> goto fails ; <S2SV_ModEnd> for ( i <S2SV_ModStart> i ) { size_t j ; for ( j = 0U ; j < maxw ; ++ j ) { sycc_to_rgb ( offset, upb, * y, * cb, * cr, r, g, b ) ; ++ y ; ++ r ; ++ g ; ++ b ; } <S2SV_ModStart> j < maxh ) { sycc_to_rgb ( offset, upb",0
354,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> if ( ( state -> fmode & FMODE_WRITE )!= ( mode & FMODE_WRITE ) ) { if ( state -> state & FMODE_WRITE ) { if ( state -> state & FMODE_READ ) list_move ( & state -> open_states, & state -> owner -> so_states ) ; else list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } else { if ( ( state -> state & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( state -> state & FMODE_WRITE ) list_move ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move ( & state -> open_states, & state -> owner -> so_states ) ; } } <S2SV_ModEnd> state -> state <S2SV_ModStart> = mode ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
355,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; ssh_dispatch_set ( ssh, SSH2_MSG_KEXINIT, NULL ) ;",1
356,"<S2SV_ModStart> { assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
357,"<S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",0
358,"<S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strtest [ 512 <S2SV_ModEnd> ] ; if <S2SV_ModStart> ( lbase, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strbase ) <S2SV_ModStart> ( ltest, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( nbase!= 511 <S2SV_ModEnd> && ntest!= <S2SV_ModStart> && ntest!= 511 <S2SV_ModEnd> ) ; if",1
359,<S2SV_ModStart> intf ) { <S2SV_ModEnd> if ( cdc_ncm_select_altsetting <S2SV_ModStart> - ENODEV ; return <S2SV_ModEnd> cdc_ncm_bind_common ( dev <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
360,"<S2SV_ModStart> 0 ; } if ( elem. in_sg_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } <S2SV_ModStart> 0 ; } if ( elem. in_sg_len!= len ) { memcpy ( elem. in_sg [ 0 ]. iov_base, buf, len ) ; virtqueue_push ( vq, & elem, len ) ; return 0 ; }",0
361,"<S2SV_ModStart> i, ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ) <S2SV_ModEnd> ) ; }",0
362,"<S2SV_ModStart>, e -> elems, e ->",1
363,<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; av_assert0 ( c -> format == CHUNKY ) ;,0
364,"<S2SV_ModStart> } isoclns_print ( ndo <S2SV_ModEnd>, p +",0
365,<S2SV_ModStart> q ) { mutex_lock ( & q -> timer_mutex ) ; <S2SV_ModStart> snd_seq_timer_close ( q ) ; mutex_unlock ( & q -> timer_mutex,1
366,"<S2SV_ModStart> int error ; unsigned int nr_blks ; sector_t lblock <S2SV_ModEnd> = offset >> <S2SV_ModStart> = offset >> inode -> i_blkbits ; error = gfs2_meta_inode_buffer ( ip, & dibh ) ; if ( unlikely ( error ) ) return error ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if ( gfs2_is_stuffed ( ip ) ) { error = gfs2_unstuff_dinode ( ip, NULL ) ; if ( unlikely ( error ) ) goto out ; } gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if ( gfs2_is_stuffed ( ip ) ) { error = gfs2_unstuff_dinode ( ip, NULL ) ; if ( unlikely ( error ) ) goto out ; } curr = start ; to = end_offset ; error = write_empty_blocks ( page, from, to, mode ) ; if (! error && offset + to > inode -> i_size &&! ( mode & FALLOC_FL_KE",0
367,<S2SV_ModStart> VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; if ( load -> error ) return ( NULL <S2SV_ModStart> -> real ) || <S2SV_ModEnd> vips_foreign_load_iscompat ( load <S2SV_ModStart> out ) ) { vips_operation_invalidate ( VIPS_OPERATION ( load ) ) ; load -> error = TRUE ; return ( NULL ) ; } <S2SV_ModEnd> vips_image_pipelinev ( load,1
368,"<S2SV_ModStart> { const char * name ; name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; } else { puts ( ""+ <S2SV_blank> "" ) ; }",0
369,<S2SV_ModStart> ; args. rmtvaluelen = valuelen ; args.,0
370,"<S2SV_ModStart> ; if ( kfifo_alloc ( & state -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL ) ) return - ENOMEM ; state -> dev = dev ; sd = & state -> sd ; v4l2_subdev_init ( sd, & cx23888_ir_controller_ops ) ; v4l2_set_subdevdata ( sd, state ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 <S2SV_ModEnd> ) ; mutex_init",0
371,<S2SV_ModStart> service_name_tlv_length ) ; if (! service_name_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if (! miux_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if (! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; },1
372,"<S2SV_ModStart> ssh * ssh ; const struct ssh_options * options <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> options. compression <S2SV_ModStart> options. compression && mon -> m_zback ) { mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; } else { mon -> m_zback = mm_create ( NULL, MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; } ssh = active_state ; if ( ssh ) { ssh_packet_set_compress_hooks ( ssh, mon -> m_zback, ( ssh_packet_comp_alloc_func * ) mm_zalloc, ( ssh_packet_comp_free_func * ) mm_free ) ; }",0
373,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> cfg, vpx_codec_flags_t <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX",0
374,"<S2SV_ModStart> unsigned int channo ; if ( jp2_getuint16 ( in, & cdef -> numents ) ) { return - 1 ; }",0
375,"<S2SV_ModStart> value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP_LOW ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value |= TJA1100_CONFIG1_AUTO_OP_HIGH ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP_LOW ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP_HIGH ;",0
376,"<S2SV_ModStart> icmp_param. tos ; if ( icmp_pointers [ type ]. tos > NR_ICMP_TYPES ) { icmp_pointers [ type ]. tos = icmp_pointers [ type ]. tos ; itp = skb_header_pointer ( skb_in, sizeof ( struct icmphdr ), & _inner_type ) ; if ( itp == NULL ) goto out ; if ( * itp > NR_ICMP_TYPES || icmp_pointers [ * itp ]. tos > NR_ICMP_TYPES ) { icmp_pointers [ type ]. tos = icmp_pointers [ type ]. tos ; itp = skb_header_pointer ( skb_in, sizeof ( struct icmphdr ), & _inner_type ) ; if ( * itp > NR_ICMP_TYPES || icmp_pointers [ * itp ]. error",0
377,<S2SV_ModStart> len ; } ND_TCHECK_32BITS <S2SV_ModEnd> ( p + <S2SV_ModStart> p + 2 <S2SV_ModEnd> ) ; ND_PRINT,1
378,<S2SV_ModStart> 0 ; } if ( unlikely ( IPCB ( skb ) -> opt. optlen ) ) skb_dst_force ( skb ) ; else,1
379,<S2SV_ModStart> private ) { struct skcipher_tfm * tfm = private ; crypto_free_skcipher ( tfm -> skcipher ) ; kfree ( tfm <S2SV_ModEnd> ) ; },1
380,<S2SV_ModStart> bprm ) { <S2SV_ModEnd> int retval ; <S2SV_ModStart> int retval ; bprm_fill_uid ( bprm ) ; <S2SV_ModEnd> retval = security_bprm_set_creds,1
381,<S2SV_ModStart> = nlogs ; if ( unlikely ( headcount > UIO_MAXIOV ) ) { r = - ENOBUFS ; goto err ; },0
382,<S2SV_ModStart> ) ) { if ( dlen < 2 ) break ; <S2SV_ModStart> dlen -= 2 <S2SV_ModEnd> ; * pt,1
383,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
384,<S2SV_ModStart> else if ( <S2SV_ModEnd> ( flags & <S2SV_ModStart> VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODE,0
385,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
386,<S2SV_ModStart> ; if (! skb_is_nonlinear ( skb ) ) return 0 ; if (,0
387,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
388,"<S2SV_ModStart> bp, len ) ; break ; case ETHERTYPE_TEB : ND_TCHECK_8BITS ( bp ) ;",0
389,"<S2SV_ModStart> } if ( tile_buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size"" ) ; exit ( - 1 ) ; } <S2SV_ModStart> } if ( tile_buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size"" ) ; exit ( - 1 ) ; } tilebuf = ( unsigned char * ) tilebuf ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 2 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 2 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 2 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 2 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] =",0
390,"<S2SV_ModStart> 'u' }, { ""umask"", required_argument, NULL, 'u' }, <S2SV_ModStart>, argv, "":vhlndu:DRS:f:p:i:mM::g::g::Gt::"" <S2SV_ModEnd> # if defined <S2SV_ModStart> break ; case 'u' : umask_buf. st_gid = geteuid ( ) ; if ( umask_buf. st_gid!= geteuid ( ) ) umask_buf. st_gid = geteuid ( ) ; if ( umask_buf. st_gid!= geteuid ( ) ) umask_buf. st_gid = umask_buf. st_gid ; else umask_buf. st_gid = geteuid ( ) ; if ( umask_buf. st_gid!= 0 && umask_buf. st_gid!= geteuid ( ) ) umask_buf. st_gid!= geteuid ( ) ) umask_buf. st_gid = umask_buf. st_gid ; if ( umask_buf. st_gid!= geteuid ( ) ) umask_buf. st_gid = umask_buf. st_gid ;",0
391,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; return 0 <S2SV_ModEnd> ; } switch <S2SV_ModStart> break ; } return <S2SV_ModEnd> error ; }",0
392,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> -> nd_num ) { ret = <S2SV_ModEnd> - EBUSY ; <S2SV_ModStart> - EBUSY ; goto out ; } <S2SV_ModStart> ( ret ) goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> nd_num ; } ret = count ; out : o2nm_unlock_subsystem ( ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>,1
393,"<S2SV_ModStart> ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, & n",0
394,<S2SV_ModStart> : case 0x1a : case 0x1b : case 0x1c : case 0x1f : case 0x16 : case <S2SV_ModStart> : case 0x1e : case 0x1f : case 0x8a : case 0x8b : case 0x8c : case 0x8f :,0
395,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
396,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
397,<S2SV_ModStart> return - E_NOTHANDLED ; if ( ninst == 0 ) return - E_INVALID,1
398,<S2SV_ModStart> goto trunc ; ND_TCHECK_32BITS ( & lshp -> ls_length ) ;,0
399,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
400,"<S2SV_ModStart> ; if (! ND_TTEST2 ( * p + offset, 0 ) ) return 0 ; if ( <S2SV_ModStart> ; if (! ND_TTEST2 ( * p + offset + 4, 0 ) ) return 0 ; if ( <S2SV_ModStart> ; if (! ND_TTEST2 ( * p + offset + 5, 0 ) ) return 0 ; if ( <S2SV_ModStart> ; if (! ND_TTEST2 ( * p + offset + 6, 0 ) ) return 0 ; if ( <S2SV_ModStart> ; if (! ND_TTEST2 ( * p + offset + 4, 0 ) ) return 0 ; if ( <S2SV_ModStart> ; if (! ND_TTEST2 ( * p + offset + 5, 0 ) ) return 0 ; if (! ND_TTEST2 ( * p + offset + 6, 0 ) ) return 0 ; if (! ND_TTEST2 ( * p + offset + 7, 0 ) ) return 0 ; if ( pbody -> tim = tim ; if (! ND_TTEST2 ( * p + offset + 5, 0 ) ) return 0 ; if (! ND_TTEST2 ( * p + offset + 6, 0",0
401,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret ) break ; ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf -> flags",0
402,<S2SV_ModStart> ( ) ; if (! tbuf ) { return NULL ; },1
403,"<S2SV_ModStart>, err ; struct module * module ; <S2SV_ModStart>, options, & module ) ; <S2SV_ModEnd> set_fs ( old_fs <S2SV_ModStart> KERNEL_DS ) ; if (! access_ok ( VERIFY_WRITE, ur, sizeof ( * ur ) ) ) return - EFAULT ; err |= __put_user ( r. ru_utime. tv_sec, & ur -> ru_utime. tv_sec ) ; err |= __put_user ( r. ru_utime. tv_usec, & ur -> ru_utime. tv_usec ) ; err |= __put_user ( r. ru_stime. tv_sec, & ur -> ru_stime. tv_sec ) ; err |= __put_user ( r. ru_stime. tv_usec, & ur -> ru_stime. tv_usec ) ; err |= __put_user ( r. ru_maxrss, & ur -> ru_maxrss ) ; err |= __put_user ( r. ru_ixrss, & ur -> ru_ixrss ) ; err |= __put_user ( r. ru_idrss, & ur -> ru_id",0
404,"<S2SV_ModStart>, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys/net"", ""%r/proc/sys/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sysrq-trigger"", ""%r/proc/sysrq-trigger"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_RW, ""proc"", ""%r/",0
405,"<S2SV_ModStart> ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" ""but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), <S2SV_ModEnd> ( md -> <S2SV_ModStart> md -> sender_port ) ) ; } else if ( addrinsubnet ( & md -> sender, & d -> spd. that. client ) && ( c == NULL ||! subnetinsubnet ( & c -> spd. that. client, & d -> spd. that. client ) ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), ( policy!= LEMPTY )? "" <S2SV_blank> with <S2SV_blank> policy="" : """", ( policy!= LEMPTY )? bitnamesof ( sa_policy_bit_names, policy ) : """" ) ; return STF_FAIL + v2N_NO_PROPOSAL <S2SV_ModEnd>",0
406,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> rowstride ) { if (! context ) return FALSE ; if (! <S2SV_ModStart>, rowstride ) ) return FALSE <S2SV_ModStart> ChromaSubsamplingLevel ) { if (! <S2SV_ModStart> ( context ) ) return FALSE ; } return TRUE ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
407,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, const",0
408,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS,1
409,<S2SV_ModStart> return ( ( ( <S2SV_ModStart> ) / 8 ) * GetPSDPacketSize ( image ),1
410,"<S2SV_ModStart> 0 ) { open_as_user <S2SV_ModEnd> ( dev_path, <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = open_as_user <S2SV_ModEnd> ( dev_path, <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ->",0
411,<S2SV_ModStart> bMasterInterface0 ) ; if (! pcu -> ctrl_intf ) return - EINVAL ; <S2SV_ModStart> bSlaveInterface0 ) ; if (! pcu -> data_intf ) return - EINVAL ;,1
412,"<S2SV_ModStart> const char * devname = kstrdup ( dev_name ( & <S2SV_ModEnd> d -> udev <S2SV_ModStart> udev -> dev ), GFP_KERNEL ) ; const char * drvname = d -> name ; struct dvb_usb_device * drv = to_dvb_usb_device ( d ) ; dev_info ( & d -> udev -> dev, ""%s: <S2SV_blank> \'%s:%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"" <S2SV_ModEnd>, KBUILD_MODNAME, <S2SV_ModStart> d ) ; kfree ( drv ) ; kfree ( drv ) ; kfree ( drv ) ; kfree ( drvname ) ; kfree ( drvname ) ; kfree ( drv ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
413,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpx ) <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpy )",0
414,<S2SV_ModStart> target_enc ) { return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION <S2SV_ModEnd> ; } else,1
415,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static MagickBooleanType <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart> exception ) { MagickBooleanType <S2SV_ModEnd> bit ; ssize_t <S2SV_ModStart> x ; register <S2SV_ModEnd> Quantum * q <S2SV_ModStart> index = 0 <S2SV_ModEnd> ; switch ( <S2SV_ModStart> : { q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) return ( MagickFalse ) <S2SV_ModEnd> ; for ( <S2SV_ModStart> ++ ) { index = ( Quantum ) ( ( ( * p ) & 0x80 )? 0x01 : 0x00 ) ; SetPixel ( image, index, q ) ; <S2SV_ModStart> bit ++ ) { index = ( Quantum ) ( ( ( * p ) & 0x80 )? 0x01 : 0x00 ) ; SetPixel ( image, index, q ) ; q += GetPixelChannels ( image ) ; } p ++ ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> % 8 )!= 0 ) { index = ( Quantum ) ( ( ( ( * p ) & 0x80 )? 0x01 : 0x00 ) ; SetPixel ( image, index, q ) ;",0
416,"<S2SV_ModStart> u_char * tptr, u_int length <S2SV_ModStart> network_addr_type ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> = FALSE ; if ( length < 1 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> address <S2SV_blank> length)"" ) ) ; return hexdump ; } <S2SV_ModStart> case AFNUM_INET : if ( length < 2 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> IPv4 <S2SV_blank> address <S2SV_blank> length)"" ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> case AFNUM_INET6 : if ( length < 2 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> length)"" ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> case AFNUM_INET : if ( length < 2 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> IPv4 <S2SV_blank> address <S2SV_blank> length)"" ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> case AFNUM_INET6 : if ( length < 2 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> length)"" ) ) ; hexdump = TRUE ; break ; }",0
417,"<S2SV_ModStart> ; u64 msr_data, rcx, rdx <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; rcx = reg_read ( ctxt, VCPU_REGS_RCX ) ; rdx = reg_read ( ctxt, VCPU_REGS_RDX ) ; <S2SV_ModStart> = 1 ; rdx = reg_read ( ctxt, VCPU_REGS_RDX ) ; <S2SV_ModStart> -> _eip = rcx <S2SV_ModEnd> ; * reg_write <S2SV_ModStart> VCPU_REGS_RSP ) = rcx <S2SV_ModEnd> ; return X86EMUL_CONTINUE",0
418,<S2SV_ModStart> dev ) ; ssize_t len ; device_lock ( dev ) ; len = <S2SV_ModEnd> sprintf ( buf <S2SV_ModStart> driver_override ) ; device_unlock ( dev ) ; return len ;,1
419,"<S2SV_ModStart> BIO * tmpout ; tmpout = cms_get_text_bio ( out, flags ) ; if (! tmpout ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } for ( ; ; ) { i = BIO_read ( in, buf, sizeof ( buf ) ) ; if ( i <= 0 ) { if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; } if ( i < 0 ) goto err ; break ; } if ( tmpout && ( BIO_write ( tmpout, buf, i )!= i ) ) goto err ; } <S2SV_ModEnd> if ( flags <S2SV_ModStart> CMS_TEXT ) { <S2SV_ModEnd> if (!",1
420,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( retval == 0 ) rs. enc_tkt_reply -> flags |= TKT_FLG_PRE_AUTH ;,1
421,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> tree, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] ; vpx_tree_index ii = tree [ i + b <S2SV_ModEnd> ] ; if",0
422,"<S2SV_ModStart> = ""/tmp"" ; # ifdef HAVE_MKDTEMP tmp_dir = mkdtemp ( strlen ( tmp_dir ) + 1 ) ; if ( tmp_dir == NULL ) tmp_dir = rc_dir ; # endif",0
423,"<S2SV_ModStart> = 0 ; size_t pathlen = 0 ; <S2SV_ModStart> case AF_UNIX : pathlen = sizeof ( <S2SV_ModEnd> ( ( struct <S2SV_ModStart> ) -> sun_path ) ; if ( pathlen >= MAXPATHLEN ) { pathlen = MAXPATHLEN - 1 ; } strncpy ( addr_text, ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, pathlen ) ; addr_text [ pathlen <S2SV_ModEnd> ] = '\\0'",0
424,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
425,"<S2SV_ModStart> & 0xffff ; if ( c >= 4 ) { <S2SV_ModStart>, c, 0 ) ; } else { err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err <S2SV_ModEnd> < 0 ) <S2SV_ModStart> 0xffff ; } if ( ev_code >= 128 && ev_code == SEQ_EXTENDED ) { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 4 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } ev_size = 8 ; if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return count - c ; } if ( ev_code >= 128 && ev_code == SEQ_EXTENDED ) { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 2 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; }",0
426,"<S2SV_ModStart> ) { struct hugepage_subpool * spool = subpool_vma ( vma ) ; struct <S2SV_ModStart> page * page <S2SV_ModEnd> ; long chg <S2SV_ModStart> ) if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> page * page <S2SV_ModEnd> ; spin_lock ( <S2SV_ModStart> page ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> ) ; } hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> unsigned long ) spool <S2SV_ModEnd> ) ; vma_commit_reservation",0
427,<S2SV_ModStart> filegen_string ) ; NTP_ASSERT ( filegen!= NULL ) ; <S2SV_ModStart> filegen_file ) ; NTP_ASSERT ( filegen!= NULL ) ;,0
428,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; timer_set_state",1
429,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> = input [ 15 <S2SV_ModEnd> ] ; tran_high_t <S2SV_ModStart> = input [ 0 <S2SV_ModEnd> ] ; tran_high_t <S2SV_ModStart> = input [ 15 <S2SV_ModEnd> ] ; tran_high_t <S2SV_ModStart> = input [ 0 <S2SV_ModEnd> ] ; tran_high_t <S2SV_ModStart> = input [ 1 <S2SV_ModEnd> ] ; tran_high_t <S2SV_ModStart> = input [ 2 <S2SV_ModEnd> ] ; tran_high_t <S2SV_ModStart> = input [ 3 <S2SV_ModEnd> ] ; tran_high_t <S2SV_ModStart> = input [ 4 <S2SV_ModEnd> ] ; tran_high_t <S2SV_ModStart> = input [ 5 <S2SV_ModEnd> ] ; tran_high_t <S2SV_ModStart> = input [ 6 <S2SV_ModEnd> ] ; tran_high_t <S2SV_ModStart> = input [ 7 <S2SV_ModEnd> ] ; tran_high_t <S2SV_ModStart> = input [ 8 <S2SV_ModEnd> ] ; tran_high_t <S2SV_ModStart> = input [ 9 <S2SV_ModEnd> ]",0
430,<S2SV_ModStart> mask ; # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON <S2SV_ModEnd> flags |= HAS_NEON <S2SV_ModStart> ; # endif <S2SV_ModEnd> return flags &,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
433,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
434,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> AVINDEX_KEYFRAME ) ; },1
435,<S2SV_ModStart> ( datalen == 0 && pc + asn1_op_lengths [ op ] > datalen ) { pc -= asn1_op_lengths [ op ] ; flags &= ~ FLAG_LAST_MATCHED ; if ( pc >= machlen ) goto machine_overrun_error ; },0
436,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> out ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ( stderr, ""rmdir: <S2SV_blank> verifying <S2SV_blank> access <S2SV_blank> to <S2SV_blank> %s:%s <S2SV_blank> (req <S2SV_blank> path <S2SV_blank> %s)\\n"" <S2SV_ModEnd>, controller, <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! <S2SV_ModStart> cgdir ) ; free ( next ) ;",0
437,<S2SV_ModStart> ; if ( mnt -> mnt. mnt_flags & MNT_READONLY <S2SV_ModEnd> ) mnt -> <S2SV_ModStart> ; if ( mnt -> mnt. mnt_flags & MNT_NOSUID ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOSUID ; if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOEXEC ; if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOEXEC ; if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOEXEC ; if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOEXEC ; if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt -> mnt. mnt_flags |= MNT_LOCK_,0
438,<S2SV_ModStart> rds_loop_transport ; } <S2SV_ModEnd> } conn ->,1
439,<S2SV_ModStart> * rsize >= 112 <S2SV_ModEnd> && rdesc [,1
440,"<S2SV_ModStart> if ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Malformed <S2SV_blank> EAPOL-Key"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_HANDSHAKE ; } if ( <S2SV_ModStart> 2 ) ; if ( bodyLength > sizeof ( EAPOL_RSN_KEY ) ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Malformed <S2SV_blank> EAPOL-Key"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_HANDSHAKE ; }",0
441,"<S2SV_ModStart> & I8042_STR_AUXERR ) { serio = i8042_read_serio ( port, str & ~ I8042_STR_AUXDATA ) ; if ( unlikely ( serio ) ) { spin_unlock_irqrestore ( & i8042_lock, flags ) ; return IRQ_NONE ; } <S2SV_ModEnd> if ( str <S2SV_ModStart> & I8042_STR_AUXERR ) { serio = i8042_read_serio ( port, str & ~ I8042_STR_MUXERR ) ; serio = i8042_read_serio ( port, str & ~ I8042_STR_PARITY ) ; if ( unlikely ( serio ) ) { spin_unlock_irqrestore ( & i8042_lock, flags ) ; return IRQ_NONE ; } <S2SV_ModEnd> serio = i8042_read_serio <S2SV_ModStart> ( port, str & ~ I8042_STR_TIMEOUT ) ; if ( unlikely ( serio ) ) { spin_unlock_irqrestore ( & i8042_lock, flags ) ; return IRQ_",0
442,"<S2SV_ModStart>! er ) { ND_TCHECK ( <S2SV_ModEnd> dp [ 0 <S2SV_ModStart> 0 ] ) ; ND_PRINT ( ( ndo, ""%s"", tok2str ( nfsproc_str, ""proc-%u"", proc ) ) ) ; } <S2SV_ModEnd> if ( er <S2SV_ModStart> er ) { ND_TCHECK ( <S2SV_ModEnd> dp [ 0 <S2SV_ModStart> 0 ] ) ; ND_PRINT ( ( ndo, ""%s"", tok2str ( nfsproc_str, ""dattr-%u"", dp [ 1 ] ) ) ; ND_PRINT ( ( ndo, ""%s"", tok2str ( nfsproc_str, ""dattr-%u"", tok2str ( nfsproc_str, ""dattr-%u"", proc ) ) ) ; } <S2SV_ModEnd> if ( er <S2SV_ModStart> er ) { ND_TCHECK ( <S2SV_ModEnd> dp [ 0 <S2SV_ModStart> 0 ] ) ; ND_PRINT ( ( ndo, ""%s"", tok2str ( nfsproc_str, ""dattr-%u"", dp [ 0 ] ) ) ; ND_PRINT ( ( ndo, ""%s"", tok2str ( nfsproc_str, ""dattr",0
443,"<S2SV_ModStart> * newName, int newLen, <S2SV_ModStart> * udfName, int udfLen, <S2SV_ModEnd> uint8_t * fidName <S2SV_ModStart> } if ( newLen < newLen ) { newIndex = newLen ; } else { newIndex = newLen ; } <S2SV_ModStart> } maxFilenameLen = newLen - newExtIndex ; if ( newIndex > maxFilenameLen ) newIndex = maxFilenameLen ; else newIndex = newLen - localExtIndex ;",0
444,"<S2SV_ModStart> void count_segs_sb ( const VP9_COMMON * cm, <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const int mis <S2SV_ModStart> = num_8x8_blocks_wide_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ] ; bh = num_8x8_blocks_high_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ] ; if ( bw < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, hbs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred",0
445,<S2SV_ModStart> ) break ; if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) ) { if ( clientsArePaused ( ) ) break ; },0
446,<S2SV_ModStart> ; get_blocks_flags = EXT4_GET_BLOCKS_READ | EXT4_GET_BLOCKS_WRITE ; if ( mpd -> b_state & ( 1 << BH_Delay ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) get_blocks_flags |= EXT4_GET_BLOCKS_WRITE ;,0
447,"<S2SV_ModStart> * s ; const unsigned char * p = sigbuf ; unsigned char * der = NULL ; int derlen = - 1 ; <S2SV_ModStart> s, & p <S2SV_ModEnd>, siglen ) <S2SV_ModStart> == NULL ) goto err ; derlen = i2d_DSA_SIG ( s, & der ) ; if ( derlen!= siglen || memcmp ( sigbuf, der, derlen ) ) <S2SV_ModStart> ; err : if ( derlen > 0 ) { OPENSSL_cleanse ( der, derlen ) ; OPENSSL_free ( der ) ; }",1
448,"<S2SV_ModStart> NULL ) ; if (! _gdImageGifCtx <S2SV_ModEnd> ( im, <S2SV_ModStart>, out ) ) { <S2SV_ModEnd> rv = gdDPExtractData <S2SV_ModStart> size ) ; } else { rv = NULL ; }",1
449,<S2SV_ModStart> ) ; } if ( bprm -> interp!= bprm -> filename ) kfree ( bprm -> interp ) ;,1
450,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct oe_addrinfo * <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( oe_syscall_getaddrinfo_read_ocall <S2SV_ModStart>, handle, <S2SV_ModEnd> & p -> <S2SV_ModStart> & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & p -> ai_addrlen, NULL, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= OE_EAI_FAIL ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( p -> ai_addrlen > UINT64_MAX ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( O",0
451,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
452,"<S2SV_ModStart> ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> image <S2SV_blank> dimensions"" ) ; goto done ; }",1
453,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
454,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
455,"<S2SV_ModStart> asdl_seq * body <S2SV_ModEnd>, PyArena * <S2SV_ModStart> ; return p <S2SV_ModEnd> ; } <S2SV_null>",0
456,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
457,"<S2SV_ModStart> * src, <S2SV_ModEnd> unsigned int flags <S2SV_ModStart> >> 4 ; # else int row, col ; int active_end ; # <S2SV_ModStart> -> write_idx ) ; if ( ctx -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) return 1 ; # endif <S2SV_ModStart> -> max_sz == 1 &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { for ( ; col < mb_cols ; ++ col ) { if (! active_map [ col ] ) break ; } vp9_copy_and_extend_frame_with_rect ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; col = active_end ; } active_map += mb_cols ; } else { vpx_copy_and_extend_frame ( src, & buf -> img ) ; } # else vpx_copy_and_extend_frame ( src, & buf -> img ) ; # endif buf -> ts_start = ts_start ; buf -> flags = flags ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <",0
458,<S2SV_ModStart> ) ; } fuse_conn_put ( & cc -> fc ) ;,1
459,"<S2SV_ModStart> ( code ) { * status = ""DECODE_PA_S4U_X509_USER"" ; return code ; } <S2SV_ModEnd> code = verify_s4u_x509_user_checksum",1
460,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int scsi_disk_emulate_command (,0
461,<S2SV_ModStart> cur_pic. field_picture <S2SV_ModEnd> ) return 0,1
462,"<S2SV_ModStart> off ) { struct scatterlist * sgp = & rm -> data. op_sg [ sg ] ; int ret = sizeof ( struct rds_header ) + be32_to_cpu ( rm -> m_inc. i_hdr. h_len ) ; <S2SV_ModStart> 0 ) ; ret = min_t ( int, ret, sgp -> length - conn -> c_xmit_data_off ) ; goto out <S2SV_ModEnd> ; } BUG_ON <S2SV_ModStart> m_inc ) ; out : return ret <S2SV_ModEnd> ; } <S2SV_null>",1
463,<S2SV_ModStart> buf ) ) { return 0 ; } <S2SV_ModEnd> ext_block = (,1
464,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,1
465,<S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> += 8 ; ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> += 2 ; ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> += 2 ; ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> += 2 ; ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> += 2 ; ND_TCHECK_16BITS ( & bp [ hlen ],0
466,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
467,"<S2SV_ModStart> = hmi_data ; if ( hmi_size < 17 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> to <S2SV_blank> parse\\n"" ) ; return NULL ; } <S2SV_ModStart> channel ; } if ( hmi_track_offset [ i ] >= hmi_size ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> to <S2SV_blank> parse\\n"" ) ; return NULL ; } <S2SV_ModStart> += hmi_tmp ; if ( hmi_tmp > hmi_size ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> to <S2SV_blank> parse\\n"" ) ; return NULL ; } <S2SV_ModStart> += hmi_tmp ; if ( hmi_tmp > hmi_size ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> to <S2SV_blank> parse\\n",0
468,<S2SV_ModStart> -> id ; haddr -> hci_channel = 0 ;,1
469,<S2SV_ModStart> -> i_iget5_offset ; fh16 [ 3 ] = 0 ;,1
470,"<S2SV_ModStart> ) ) ; if ( server. pw_expiration && server. pw_expiration < kdc_time ) { * status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_PWCHANGE_SERVICE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) && isflagset ( server. attributes, KRB5_KDB_REQUI",0
471,"<S2SV_ModStart> case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { mark_reg_unknown ( dst_reg, S64_MAX ) ; } else { mark_reg_unknown ( dst_reg, S64_MIN ) ; } <S2SV_ModStart> case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { mark_reg_unknown ( dst_reg, S64_MAX ) ; } else { mark_reg_unknown ( dst_reg, S64_MAX ) ; }",0
472,"<S2SV_ModStart> ( method == LPF_PICK_FROM_Q || method == LPF_PICK_FROM_SUBIMAGE <S2SV_ModEnd> ) { const <S2SV_ModStart> ) ; const vpx_bit_depth_t <S2SV_ModEnd> q = vp9_ac_quant <S2SV_ModStart> 0 ) ; vpx_bit_depth_t <S2SV_ModEnd> filt_guess = ROUND_POWER_OF_TWO <S2SV_ModStart> * 20723 + 1015158 <S2SV_ModEnd>, 18 ) <S2SV_ModStart> } else { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. bit_depth > 1 ) { lf -> filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; } else { # endif search_filter_level ( sd, cm, method == LPF_PICK_FROM_SUBIMAGE ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. bit_depth > 1 ) { lf -> filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; } # else lf -> filter_level = clamp ( lf -> filter_level, max_filter_level ) ;",0
473,"<S2SV_ModStart> case BT_DM_DISABLE_EVT : { BT_DBGLOG ( 10, ( ""BTIF_DM_UPSTREAMS_cback <S2SV_blank> <S2SV_blank> ev: <S2SV_blank> %s"", dump_dm_event ( event ) ) ) ; BTIF_LOG ( 10, ( ""BTIF_DM_UPSTREAMS_cback <S2SV_blank> <S2SV_blank> ev: <S2SV_blank> %s"", dump_dm_event ( event ) ) ) ; BT_DBGLOG ( 10, ( ""BT_DM_DISABLE_EVT: <S2SV_blank> %s"", dump_dm_event ( event ) ) ) ; BTIF_LOG ( 10, ( ""BTIF_DM_UPSTREAMS_cback <S2SV_blank> <S2SV_blank> ev: <S2SV_blank> %s"", dump_dm_event ( event ) ) ) ; } break ; case BT_DM_DISABLE_EVT : { BT_DBGLOG ( 10, ( ""BT_DM_UPSTREAMS_cback <S2SV_blank> <S2SV_blank> ev: <S2SV_blank> %s"", dump_dm_event ( event ) ) ) ; BTIF_LOG ( 10, ( ""BTIF_DM_UP",0
474,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
475,"<S2SV_ModStart> = getnum ( L,",1
476,<S2SV_ModStart> void usage_exit ( void,1
477,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
478,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
479,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
480,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( data, 0, sizeof ( uint8_t ) ) ; <S2SV_ModStart>. decode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, data, <S2SV_ModStart>, data_sz, user_priv <S2SV_ModEnd> ) ; }",0
481,"<S2SV_ModStart> ; if ( strchr ( value,'<S2SV_blank>') ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return 0 ; } if (",0
482,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int isofs_read_inode (,0
483,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
484,"<S2SV_ModStart> ndo_snapend ) { ND_TCHECK ( * optr ) ; while ( * optr == NLPID_ESIS ) { ND_TCHECK ( * optr ) ; optr ++ ; } if ( <S2SV_ModStart> ndo_snapend ) { ND_TCHECK ( * optr ) ; while ( * optr == NLPID_ESIS ) { ND_TCHECK ( * optr ) ; optr ++ ; } if ( * optr!= NLPID_ESIS ) { ND_TCHECK ( * optr ) ; if ( * optr!= NLPID_SNAP ) ND_PRINT ( ( ndo, "" <S2SV_blank> SNAP <S2SV_blank> packet <S2SV_blank> not <S2SV_blank> supported"" ) ) ; break ; } ND_TCHECK ( * optr ) ; while ( * optr == NLPID_SNAP ) ND_TCHECK ( * optr ++ ) ; if ( * optr!= NLPID_ESIS ) { ND_TCHECK ( * optr ++ ) ; if ( * optr!= NLPID_SNAP ) ND_PRINT ( ( ndo, "" <S2SV_blank> SNAP <S2SV_blank> packet",0
485,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sendClean ( outputbuffer ) ; }",0
486,<S2SV_ModStart> } else { return false ; } } else if ( r -> CRn == 0 && r -> CRm == 9 ) { if ( pmu_access_event_counter_el0_disabled ( vcpu ) ) return false ; idx = ARMV8_PMU_CYCLE_IDX ; <S2SV_ModEnd> } else if <S2SV_ModStart> } else { return false <S2SV_ModEnd> ; } if,1
487,<S2SV_ModStart> case IS_STRING : { zval dval ; dval = * * zval_affine_elem ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> ) ; affine <S2SV_ModStart> i ] = Z_DVAL ( dval ) ; } <S2SV_ModEnd> break ; default <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { rect. x = <S2SV_ModStart> ) ; } } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { rect. y = <S2SV_ModStart> ) ; } } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval,1
488,<S2SV_ModStart> self ) { if ( self -> dict ) Py_CLEAR ( self -> dict ) ;,0
489,<S2SV_ModStart> SQL_DROP ) ; <S2SV_ModEnd> return 0 ;,1
490,"<S2SV_ModStart> ; r = __copy_from_user <S2SV_ModEnd> ( data,",1
491,"<S2SV_ModStart>, * q <S2SV_ModEnd> ; Clp_Parser * <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\nThis <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\nThere <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\nparticular <S2SV_blank> purpose.\\n"" <S2SV_ModEnd> ) ; exit <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\nThis <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\nThere <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\nparticular <S2SV_blank> purpose.\\n"" <S2SV_ModEnd> ) ; exit <S2SV_ModStart> ; } } printf ( """,0
492,<S2SV_ModStart> = 0 ; info -> port = NULL ;,1
493,<S2SV_ModStart> -> ctx. <S2SV_ModEnd> pmu = pmu,1
494,"<S2SV_ModStart> iovec * iovec, struct iov_iter * iter ) { if ( len > MAX_RW_COUNT ) len = MAX_RW_COUNT ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> = 1 ; iov_iter_init ( iter, rw, iovec, * nr_segs, len ) ;",1
495,<S2SV_ModStart> ext4_group_t flex_group ; unsigned <S2SV_ModStart> -> s_log_groups_per_flex ; if ( sbi -> s_log_groups_per_flex < 1 || sbi -> s_log_groups_per_flex > 31 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } <S2SV_ModStart> -> s_log_groups_per_flex ; <S2SV_ModEnd> flex_group_count = (,1
496,<S2SV_ModStart> ( unlikely ( chunk -> pdiscard ) ) return 0 ; if ( unlikely (,1
497,"<S2SV_ModStart> = 0 ; if ( a ) for ( i = 0 ; i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; } <S2SV_ModEnd> return a ;",0
498,"<S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr, sptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; if ( <S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr, sptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; if ( <S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr, sptr, sptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; } if ( <S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr, sptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr,",0
499,<S2SV_ModStart> <= w - ( int ),1
500,<S2SV_ModStart> callback_args -> forward_matches ; assert ( match_offset + match_length <= callback_args -> data_size ),1
501,<S2SV_ModStart> options. disable_forwarding && use_privsep,1
502,"<S2SV_ModStart> { if ( length > SMKTREE_DECODE_MAX_RECURSION ) { av_log ( NULL, AV_LOG_ERROR, ""Maximum <S2SV_blank> tree <S2SV_blank> recursion <S2SV_blank> level <S2SV_blank> exceeded.\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",1
503,<S2SV_ModStart> err ; } if ( m -> msg_name ),1
504,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } tmp = _PyObject_GetAttrId ( obj, & PyId_type_ignores ) ; if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { Py",0
505,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) { hstartrow <S2SV_ModEnd> = ( numrows <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; n = <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; srcptr =,0
506,"<S2SV_ModStart> ""REPLY_ADD_STA <S2SV_blank> PASSED\\n"" ) ; ret = iwl_sta_ucode_activate ( priv, sta_id ) <S2SV_ModEnd> ; break ;",1
507,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
508,"<S2SV_ModStart> ""a\\0x\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank>",0
509,"<S2SV_ModStart> & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ) { while ( 1 ) { <S2SV_ModStart> ] ) ; if (! queue ) break ; <S2SV_ModEnd> if ( free_func <S2SV_ModStart> ( free_func ) { if ( hashbin -> hb_type & HB_LOCK ) spin_unlock_irqrestore ( & hashbin -> hb_spinlock, flags ) ; free_func ( queue ) ; if ( hashbin -> hb_type & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; } <S2SV_ModEnd> } } hashbin <S2SV_ModStart> & HB_LOCK ) <S2SV_ModEnd> spin_unlock_irqrestore ( & <S2SV_ModStart> flags ) ; <S2SV_ModEnd> kfree ( hashbin",1
510,<S2SV_ModStart> EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOSUID ) &&! ( mnt_flags & MNT_NOSUID ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC,0
511,"<S2SV_ModStart> copied, err <S2SV_ModEnd> ; int vnet_hdr_len <S2SV_ModStart> out_free ; } copied = skb -> len ; if ( copied > len ) { copied = len ; msg -> msg_flags |= MSG_TRUNC ; } copied += skb -> len ; err = skb_copy_datagram_iovec ( skb, 0, copied, msg -> msg_iov, copied ) ; if ( err ) goto out_free ;",0
512,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
513,"<S2SV_ModStart> ( serial -> num_bulk_out <S2SV_ModEnd> < 2 ) <S2SV_ModStart> < 2 ) { dev_err ( & serial -> interface -> dev, ""missing <S2SV_blank> bulk <S2SV_blank> out <S2SV_blank> endpoints\\n"" ) ; return - ENODEV ; } <S2SV_ModEnd> port = serial",1
514,"<S2SV_ModStart> write_junk = 1 ; ChunkHeader ds64hdr, datahdr, fmthdr ; JunkChunk junkchunk <S2SV_ModStart> ; DS64Chunk ds64_chunk ; if (! do_rf64 ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header <S2SV_blank> for <S2SV_blank> non-normalized <S2SV_blank> floating <S2SV_blank> data!"" ) ; return FALSE ; } ds64hdr = & ds64hdr ; datahdr = & ds64_chunk <S2SV_ModStart> ; ds64_chunk = & junkchunk <S2SV_ModStart> ds64_chunk ; } if (! ds64hdr ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header <S2SV_blank> for <S2SV_blank> non-rf64 <S2SV_blank> data!"" ) ; return FALSE ; } if (! ds64_chunk ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header <S2SV_blank> for <S2SV_blank> non-rf64 <S2SV_blank> chunk!"" ) ; return FALSE ; } if (! ds64_chunk ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header <S2SV_blank> for <S2SV_blank> non-normalized <S2SV_blank> floating <S2SV_blank> data!"" ) ; return FALSE ; }",0
515,"<S2SV_ModStart> ( msg ) ; msg_sys -> msg_name = NULL ; <S2SV_ModStart>, & addr, msg_sys -> msg_flags <S2SV_ModStart>, & addr, msg_sys -> msg_control <S2SV_ModStart> msg_flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( msg_sys -> msg_flags & MSG_CMSG_COMPAT ) msg_sys -> msg_flags |= MSG_CMSG_COMPAT ; else if ( msg_sys -> msg_flags & MSG_CMSG_COMPAT ) msg_sys -> msg_flags &= ~ MSG_CMSG_COMPAT ;",0
516,"<S2SV_ModStart> ) ; struct gfs2_meta_header * bh = mp -> mp_bh [ 0 ] ; struct <S2SV_ModStart> unsigned end_of_metadata = ( height > 1 )? height - 1 : 0 ; int ret = 0 <S2SV_ModEnd> ; enum alloc_state <S2SV_ModStart> ; if ( ( ret = gfs2_meta_read_block ( inode, lblock, bh -> b_size ) ) < 0 ) { pr_err ( ""%s: <S2SV_blank> Block <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", ret ) ; return ret ; } if ( ( ret = gfs2_meta_read_block ( inode, lblock, bh -> b_size ) ) < 0 ) { pr_err ( ""%s: <S2SV_blank> Block <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", ret ) ; return ret ; } if ( ( ret = gfs2_meta_read_block ( inode, lblock, bh -> b_size, bh -> b_size ) ) < 0 ) { pr_err ( ""%s: <S2SV_blank> Block <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", ret ) ; return ret ; }",0
517,"<S2SV_ModStart> ( global -> codec ) ) ; } if ( input -> filename ) { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } else { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( g_timebase. num ) ; SHOW ( g_timebase. den ) ; SHOW ( g_error_resilient ) ; SHOW ( g_pass ) ; SHOW ( rc_lag_in_frames ) ; SHOW ( rc_dropframe_thresh ) ; SHOW ( rc_resize_allowed ) ; SHOW ( rc_resize_up_thresh ) ; SHOW ( rc_resize_down_thresh ) ; SHOW ( rc_end_usage ) ; SHOW ( rc_lag_in_frames ) ; SHOW ( rc_dropframe_thresh ) ; SHOW ( rc_resize_allowed ) ; SHOW ( rc_resize_up_",0
518,<S2SV_ModStart> return FALSE ; { BOOL rc ; <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) rc = <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) if (! rc ) return FALSE ; } { BOOL rc ; <S2SV_ModStart> -> prof_nsc_decode ) rc = <S2SV_ModStart> -> prof_nsc_decode ) if (! rc ) return FALSE ; },1
519,"<S2SV_ModStart> -> dict ) { if ( ( xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ) == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> dictionary <S2SV_blank> lookup <S2SV_blank> of <S2SV_blank> the <S2SV_blank> literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } <S2SV_ModStart> -> dict ) { if ( ( xmlDictLookup ( ctxt -> dict ) == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> dictionary <S2SV_blank> lookup <S2SV_blank> of <S2SV_blank> the <S2SV_blank> literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } } else { if ( ( xmlDictLookup ( ctxt -> dict ) == BAD_CAST """", 0 ) ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> dictionary <S2SV_blank> lookup <S2SV_blank> of <S2SV_blank> the <S2SV_blank> dictionary <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; }",0
520,"<S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> ; } } else { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> ; } } else { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ; } } free ( fname ) ; } else if (! arg_shell_none && strcmp ( cfg. shell, ""/usr/bin/csh"" ) == 0 ) { copy_file_as_user ( ""/etc/skel/.cshrc"", fname, u, g, 0644 ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IW",0
521,"<S2SV_ModStart>, size_t * acl_len <S2SV_ModEnd> ) { __be32 <S2SV_ModStart> ; int status <S2SV_ModEnd> ; struct kvec <S2SV_ModStart> ; int status <S2SV_ModEnd> ; bitmap [ <S2SV_ModStart>, bitmap ) ; if ( ( status = decode_op_hdr ( xdr, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) <S2SV_ModEnd> goto out ; <S2SV_ModStart> ; recvd = req -> rq_rcv_buf. len - hdrlen <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen <S2SV_ModStart> ) ; * acl_len = attrlen ; } else { * acl_len = attrlen ; } <S2SV_ModEnd> } else status",0
522,<S2SV_ModStart> b ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; } else if ( _FVMenuSave ( fv ) ; if ( i == 0 ) return ( false ) ; else SFClearAutoSave ( sf ) ; },0
523,"<S2SV_ModStart> % 4096 == 0 || msix_tab_size > 4194304 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> msix_tab_size <S2SV_blank> %d\\n"", __func__, msix_tab_size ) ; return ; } <S2SV_ModEnd> bzero ( msixcap",0
524,<S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( &,1
525,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
526,"<S2SV_ModStart> : if ( <S2SV_ModEnd> Field ( ( <S2SV_ModStart> 1 ) )!= 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { <S2SV_ModEnd> caml_set_oo_id ( ( <S2SV_ModStart> ) dest ) ; } break ; case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) )!= 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest ) ; } sp -- ; if ( sp -> op == OFreshOID ) { sp -> op = OFreshOID ; sp -> dest = ( value * ) v ; sp -> arg = 1 ; ReadItems ( & Field ( v, 0 ), size ) ; } else { v = Val_int ( code & 0x3F ) ; } } else { v = Val_int ( code & 0x3F ) ; if ( tag == Object_tag ) { Assert ( size >= 2 ) ; ReadItems ( & Field ( v, 0 ), size - 2 ) ; PushItem ( ) ; sp -> op = OFreshOID ; sp -> dest = ( value * ) v ;",0
527,"<S2SV_ModStart> multipart_media ; struct range_data * r = & clt -> clt_ranges ; struct range_data * range <S2SV_ModEnd> ; size_t content_length <S2SV_ModStart> ; size_t content_length = 0 <S2SV_ModStart> nranges, ret <S2SV_ModEnd> ; char content_range <S2SV_ModStart> if ( ( nranges = parse_ranges ( clt, <S2SV_ModEnd> range_str, st <S2SV_ModStart> st -> st_size ) ) == NULL ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr = content_range ; goto abort ; } if ( nranges == 0 ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; kv_add ( & resp -> http_headers, ""Content-Range"", content_range ) ; goto abort ; } if ( nranges > 1 ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> %lld-%lld/%lld"", range ->",0
528,"<S2SV_ModStart> = FALSE ; if ( interface -> nicEvent ) return flag ; <S2SV_ModStart> ( interface, KSZ8851_IER, KSZ8851_IER_LCIE <S2SV_ModEnd> ) ; isr <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { ier |= KSZ8851_IER_LCIE <S2SV_ModEnd> ; interface -> <S2SV_ModStart> } if ( ( isr & KSZ8851_ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & KSZ8851_ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_RXIS ) ; if ( n >= (",0
529,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON * const <S2SV_ModEnd> cm, struct <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex, QINDEX_BITS ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
530,<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; av_assert0 ( c -> format == CHUNKY ) ;,0
531,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> msglen ) ),0
532,<S2SV_ModStart> tmp ) { goto parse_scheme_end <S2SV_ModEnd> ; } case <S2SV_ModStart> ) ) { goto parse_scheme_end <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; parse_scheme_end : state -> offset = 0 ;,0
533,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
534,<S2SV_ModStart> flags ) { spin_lock ( & ctx -> cancel_lock ) ; <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> cancel_lock ) ; <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> cancel_lock ) ;,0
535,"<S2SV_ModStart> ) ) ; if ( c16 -> Curves [ i ] == NULL ) { for ( j = 0 ; j < i ; j ++ ) { _cmsFree ( ContextID, c16 -> Curves [ j ] ) ; } _cmsFree ( ContextID, c16 -> Curves ) ; _cmsFree ( ContextID, c16 ) ; return NULL ; }",1
536,<S2SV_ModStart> { if (! dev_name ||,1
537,"<S2SV_ModStart> } isoclns_print ( ndo <S2SV_ModEnd>, p +",0
538,"<S2SV_ModStart> ) ) ; memcpy ( msg, & msg_tmp, sizeof ( * msg ) ) ; <S2SV_ModStart> peekonly ) { if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m_pdwGetRing + sizeof ( * msg ) - space_rem, buf_size ) ; } else { if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m_pdwGetRing + space_rem, buf_size ) ; } }",0
539,<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { efree ( replaced ) ; RETURN_FALSE ; },1
540,"<S2SV_ModStart> ; if ( ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { log_debug ( ""%s: <S2SV_blank> EC_PUBKEY <S2SV_blank> bio(rawcert) <S2SV_blank> failed: <S2SV_blank> %s"", __func__, print_map ( peerec, ikev2_id_map ) ) ; goto sslerr ; } else if ( ( localrsa = d2i_RSA_pubkey_bio ( rawcert, NULL ) ) == NULL ) { log_debug ( ""%s: <S2SV_blank> EC_PUBKEY_bio(rawcert, NULL) <S2SV_blank> failed: <S2SV_blank> %s"", __func__, print_map ( peerec, ikev2_id_map ) ) ; goto sslerr ; }",0
541,"<S2SV_ModStart> ( ) ; strcpy ( t1_buf_array, t1_line_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; } else if ( strcmp ( t1_buf_array, charstringname )!= 0 ) { strcpy ( t1_buf_array, charstringname ) ; strcpy ( t1_line_array, charstringname ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; }",0
542,"<S2SV_ModStart> BLOCK_SIZE bsize, <S2SV_ModEnd> BLOCK_SIZE subsize ) <S2SV_ModStart> -> e_mbd ; const <S2SV_ModStart>, hbs = b_height_log2_lookup [ bsize ] <S2SV_ModEnd> ; PARTITION_TYPE partition <S2SV_ModStart> case PARTITION_NONE : set_mode_info_offsets ( cm, x, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) <S2SV_ModEnd> -> mic ; <S2SV_ModStart> -> mic ; <S2SV_ModEnd> if ( mi_col <S2SV_ModStart> case PARTITION_VERT : set_mode_info_offsets ( cm, x, xd, mi_row, mi_col ) ; * ( xd -> mi [ 1 ] ) = get_block_context ( x, subsize ) <S2SV_ModEnd> -> mic ; <S2SV_ModStart> break ; case PARTITION_HORZ : set_mode_info_offsets ( cm, x, xd, mi_row, mi_col ) ; * ( xd -> mi [ 1 ] ) = get_block_context ( x, subsize ) -> mic ; <S2SV_ModEnd> if ( mi_col <S2SV_ModStart> cm, xd, mi_row, mi_col + hbs <S2SV_ModEnd> ) { * <S2SV_ModStart>",0
543,"<S2SV_ModStart> name ) ; if (! strcmp ( key, ""url"" ) && value && looks_like_command_line_option ( value ) ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_URL, ""disallowed <S2SV_blank> submodule <S2SV_blank> url: <S2SV_blank> %s"", value ) ;",1
544,"<S2SV_ModStart> ; int pixel_ptr = 0 ; int block_ptr <S2SV_ModStart> ; for ( block_ptr = 0 ; block_ptr < s -> avctx -> height ; block_ptr ++ ) { pixel_x = RPzaGetPixelX ( s, block_ptr ) ; pixel_y = RPzaGetPixelY ( s, block_ptr ) ; } for ( block_ptr = 0 ; block_ptr < s -> avctx -> width ; block_ptr ++ ) { colorA = ( opcode << 8 ) | ( s -> buf [ stream_ptr ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 16 ) ; colorB = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 24 ) | ( s -> buf [ stream_ptr ++ ] << 16 ) | ( s -> buf [ stream_ptr ++ ] << 24 ) | ( s -> buf [ stream_ptr ++",0
545,<S2SV_ModStart> cnt ) { size_t <S2SV_ModEnd> n ; assert,0
546,<S2SV_ModStart> ; __be16 type ; if ( NAPI_GRO_CB ( skb ) -> encap_mark ) goto out ; NAPI_GRO_CB ( skb ) -> encap_mark = 1,1
547,<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { return 0 ; } if (,1
548,"<S2SV_ModStart> bool result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> sessionKey. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> salt. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> nonceNewer. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> nonceNewer. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> salt. b )",0
549,<S2SV_ModStart> key_ref ) ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; goto error2 ; } <S2SV_ModEnd> if ( is_key_possessed,0
550,<S2SV_ModStart> ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ;,0
551,"<S2SV_ModStart> ) ; dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; if (! src_known &&! dst_known ) { verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> add <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> var_off ) ; return - EINVAL ; } <S2SV_ModStart> case BPF_SUB : verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> sub <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> var_off ) ; if ( dst_reg -> smin_value > S64_MAX ) { verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> sub <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> smin_value ) ; dst_reg -> smin_value = S64_MIN ; } if ( dst_reg -> smax_value > S64_MAX ) { verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> sub <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalar",0
552,"<S2SV_ModStart> -> f_namelen ; if ( direntry -> d_name. len > NAME_MAX ) { full_path = strlcpy ( full_path, direntry -> d_name. name, sizeof ( * cfile ) ) ; cFYI ( 1, ""duplicate <S2SV_blank> name <S2SV_blank> in <S2SV_blank> %s"", direntry -> d_name. name ) ; cFYI ( 1, ""duplicate <S2SV_blank> name <S2SV_blank> in <S2SV_blank> %s"", full_path, direntry -> d_name. name ) ; cFYI ( 1, ""duplicate <S2SV_blank> name <S2SV_blank> in <S2SV_blank> %s"", direntry -> d_name. name ) ; rc = - EINVAL ; goto lookup_out ; }",0
553,<S2SV_ModStart> - EINVAL ; if ( info. num_irqs > VFIO_PCI_NUM_IRQS ) return - EINVAL ; <S2SV_ModStart> - EINVAL ; if ( info. num_regions > VFIO_PCI_NUM_REGIONS ) return - EINVAL ; switch ( info. index ) { case VFIO_PCI_CONFIG_REGION_INDEX : info. offset = VFIO_PCI_CFG_REGION_INDEX ; info. size = pdev -> cfg_size ; break ; case VFIO_PCI_BAR0_REGION_INDEX : info. offset = VFIO_PCI_BAR0_REGION_INDEX_TO_OFFSET ( info. index ) ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_BAR5_REGION_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar5_cfg_size ; break ; case VFIO_PCI_HIGH_REGION_INDEX : info. offset = VFIO_PCI_HIGH_REGION_INDEX_TO_OFFSET ( info,0
554,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ext4_has_inline_data ( inode,1
555,<S2SV_ModStart> -> filesize = UINT64_MAX <S2SV_ModEnd> ; s ->,1
556,"<S2SV_ModStart> ; if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) ) goto out ; rcu_read_lock ( ) ;",0
557,"<S2SV_ModStart> char * in, size_t olen <S2SV_ModStart> += 4 ; if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ;",1
558,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
559,"<S2SV_ModStart> i ; size_t <S2SV_ModEnd> copied, cur_len <S2SV_ModStart> ++ ) { size_t total_copied = min_t ( size_t, copied, nr_segs - i ) ; <S2SV_ModStart> copied ) { if (! cur_len ) { for ( i = 0 ; i < nr_pages ; i ++ ) put_page ( wdata -> pages [ i ] ) ; kfree ( wdata ) ; rc = - EFAULT ; break ; } for ( ; nr_pages > i + 1 ; nr_pages -- ) put_page ( wdata -> pages [ nr_pages - 1 ] ) ;",0
560,<S2SV_ModStart> & CP_RDESC_SWAPPED_MIN_MAX ) ) return rdesc ; if ( * rsize < 4,1
561,"<S2SV_ModStart> ) { int number_of_frames, number_of_keyframes, <S2SV_ModEnd> encode_frame_count ; int <S2SV_ModStart> ; SvcInternal * <S2SV_ModEnd> si = get_svc_internal <S2SV_ModStart> ( svc_ctx ) <S2SV_ModEnd> ; svc_log_reset ( <S2SV_ModStart> ; si = get_svc_internal ( svc_ctx ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( <S2SV_ModEnd> si -> encode_frame_count <S2SV_ModStart> ; if ( <S2SV_ModEnd> si -> kf_dist <S2SV_ModStart> = encode_frame_count <= 0 ) return vpx_svc_get_message ( svc_ctx ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""\\n"" ) ; for ( i = 0 ; i < si -> layers ; ++ i ) { number_of_frames = encode_frame_count ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank>",0
562,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> BYTE * out, UINT32 outSize <S2SV_ModStart> 5 ) { if ( outSize < 1 ) { return FALSE ; } <S2SV_ModStart> 4 ; } if ( outSize < len ) { return FALSE ; } <S2SV_ModStart> } else { if ( outSize < 1 ) { return FALSE ; }",0
563,"<S2SV_ModStart> ; if ( screen -> buffers [ 0 ] && screen -> buffers [ 1 ] ) { VTermScreenCell * sb_buffer = screen -> buffers [ 0 ] ; if ( sb_buffer ) vterm_allocator_free ( screen -> vt, sb_buffer ) ; screen -> sb_buffer = NULL ; } else { vterm_allocator_free ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; } screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( new_cols > old_cols ) { VTermRect rect ; rect. start_row = 0 ; rect. start_col = 0 ; scrollrect ( rect, first_blank_row - new_rows, 0, user ) ; vterm_screen_flush_damage ( screen ) ; scrollrect ( rect, first_blank_row - new_rows, 0, user ) ; vterm_screen_flush_damage (",0
564,<S2SV_ModStart> ) { const <S2SV_ModEnd> char * literal_start <S2SV_ModStart> = 0 ; int in_named_escape = 0 ; int result = 0 ; assert ( * literal == NULL ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if ( <S2SV_ModEnd> * str < <S2SV_ModStart> str < end && * ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' ) { in_named_escape = 1 ; } else if ( in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '{' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_,0
565,"<S2SV_ModStart> * m, size_t <S2SV_ModEnd> bufsize ) { <S2SV_ModStart> * buf ; <S2SV_ModEnd> JAS_DBGLOG ( 100 <S2SV_ModStart> 100, ( ""mem_resize(%p, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, m, <S2SV_ModStart> ( 100, ( ""mem_resize(%p, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, m,",0
566,<S2SV_ModStart> = create_dump_dir_from_problem_data ( pd <S2SV_ModEnd> ) ; char,0
567,"<S2SV_ModStart>, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } <S2SV_ModEnd> expr = expr",0
568,<S2SV_ModStart> pcrypt_free ( struct aead_instance <S2SV_ModEnd> * inst ) <S2SV_ModStart> * ctx = aead_instance_ctx <S2SV_ModEnd> ( inst ),1
569,<S2SV_ModStart> ; if ( ( w1 > ptr -> width ) || ( h1 > ptr -> height ) ) { if ( w1 > ptr -> width ) { if ( w1 > ptr -> width ) { if ( h1 > ptr -> height ) { if ( w1 > ptr -> width ) { if ( h1 > ptr -> height ) { if ( w1 > ptr -> width ) { if ( h1 > ptr -> height ) { if ( w1 > ptr -> width ) { if ( w1 > ptr -> width ) { if ( h1 > ptr -> height ) { if ( w1 > ptr -> width ) { if ( h1 > ptr -> height ) { if ( w1 > ptr -> width ) { if ( h1 > ptr -> height ) { if ( w1 > ptr -> width ) { if ( h1 > ptr -> height ) { if ( w1 > ptr -> width ) { if ( h1 > ptr -> height ) { if ( w1 > ptr -> width ) { if ( w1 > ptr -> width ) { if ( h1 > ptr -> height ) { if ( w1 > ptr -> width ) { if ( h1 > ptr -> height ) { if,0
570,"<S2SV_ModStart> image ) ; count = <S2SV_ModEnd> ReadBlob ( image <S2SV_ModStart> iris_info. name ) ; if ( count!= sizeof ( iris_info. name ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> filler ) ; if ( count!= sizeof ( iris_info. filler ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> filler ) ; if ( count!= sizeof ( iris_info. filler ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; image",0
571,<S2SV_ModStart> icmp6_hop_limit ) { if ( <S2SV_ModStart> icmp6_hop_limit < <S2SV_ModEnd> ra_msg -> icmph <S2SV_ModStart> icmp6_hop_limit ) { if ( <S2SV_ModStart> icmp6_hop_limit < ra_msg -> icmph + ra_msg -> icmph + ra_msg -> icmph + ra_msg -> icmph + ra_msg -> icmph + ra_msg -> icmph + ra_msg -> icmph + ra_msg -> icmph + ra_msg -> icmph + ra_msg -> icmph + ra_msg -> icmph + ra_msg -> icmph + ra_msg -> icmph + ra_msg -> icmph + ra_msg -> icmph + ra_msg -> icmph + ra_msg -> icmph + ra_msg -> icmph + ra_msg -> icmph + ra_msg -> icmph + ra_msg -> icmph + ra_msg -> icmph + ra_msg -> icmph + ra_msg -> icmph + ra_msg -> icmph + ra_msg ->,0
572,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
573,<S2SV_ModStart> * up ; int ulen ; <S2SV_ModStart> rp ) ; ulen = xfrm_replay_state_esn_len ( up ) ; if ( nla_len ( rp ) < ulen || <S2SV_ModEnd> xfrm_replay_state_esn_len ( replay_esn <S2SV_ModStart> replay_esn )!= ulen <S2SV_ModEnd> ) return -,1
574,"<S2SV_ModStart> int ret = proc_dointvec_minmax <S2SV_ModEnd> ( table,",1
575,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; return",0
576,<S2SV_ModStart> opj_calloc ( ( size_t ) ( <S2SV_ModStart> -> numlayers + 1U <S2SV_ModEnd> ) * l_step_l,0
577,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
578,"<S2SV_ModStart> ps ) { u32 <S2SV_ModEnd> prev_legacy, cur_legacy <S2SV_ModStart> -> flags ; memset ( & kvm -> arch. vpit -> pit_state. channels [ 0 ]. count, 0, sizeof ( kvm -> arch. vpit -> pit_state. channels [ 0 ]. count ) ;",0
579,"<S2SV_ModStart> void encode_nonrd_sb_row ( VP9_COMMON * cm, MACROBLOCKD * xd, <S2SV_ModEnd> const TileInfo * <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> int idx_str = <S2SV_ModStart> + mi_col ; <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> + idx_str ; BLOCK_SIZE bsize ; cpi -> mb. source_variance = UINT_MAX ; vp9_zero ( cpi -> mb. pred_mv ) ; switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64, 1, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64 ) ; set_source_var_based_partition ( cpi, tile, mi_col, BLOCK_64X64, 1, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION :",0
580,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",1
581,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
582,<S2SV_ModStart> } else { # ifdef UPNP_ENABLE_POST_WRITE <S2SV_ModStart> return HTTP_UNAUTHORIZED ; # else return HTTP_NOT_FOUND ; # endif,1
583,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> dir ) ) ) == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
584,<S2SV_ModStart> blkg ) ) <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> blkg ) ; <S2SV_ModEnd> q -> root_blkg,1
585,"<S2SV_ModStart> ; if ( bpp!= 8 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> bitdepth <S2SV_blank> value\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( <S2SV_ModStart> ncolors ) { if ( bpp!= 8 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> bitdepth <S2SV_blank> value\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( bpp!= 9 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> bitdepth <S2SV_blank> value\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> gb ) ; if ( bpp!= 8 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> bitdepth <S2SV_blank> value\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> gb ) ; if ( bpp!= 9 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> bitdepth <S2SV_blank> value\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
586,"<S2SV_ModStart> ; krb5_data rspac ; const char * tgt_realm = krb5_principal_get_realm ( context, krbtgt -> entry. principal ) <S2SV_ModStart>, cp, tgt_realm,",1
587,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
588,"<S2SV_ModStart> struct usbdevfs_connectinfo ci ; memset ( & ci, 0, sizeof ( ci ) ) ; ci <S2SV_ModEnd>. devnum = <S2SV_ModStart> dev -> devnum ; ci <S2SV_ModEnd>. slow = <S2SV_ModStart> speed == USB_SPEED_LOW <S2SV_ModEnd> ; if (",1
589,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> * opt, unsigned int optlen ) { if ( optlen < sizeof ( struct ip_options_rcu ) ) return - EINVAL ; <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> IPOPT_END ; } <S2SV_ModEnd> if ( optlen <S2SV_ModStart> ( optlen && ip_options_compile ( net, & opt -> opt, NULL ) ) { kfree ( opt ) ; * optp = opt ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
590,"<S2SV_ModStart> ; args -> rmtvaluelen2 = args -> rmtvaluelen ; args -> <S2SV_ModStart> ; args -> rmtvaluelen = args -> rmtvaluelen ; args -> rmtvaluelen2 = args -> rmtvaluelen ; } retval = xfs_attr3_leaf_add ( bp, args ) ; if ( retval == ENOSPC ) { xfs_trans_brelse ( args -> trans, bp ) ; return retval ; } <S2SV_ModEnd> args -> op_flags",0
591,"<S2SV_ModStart> LARGE_INTEGER offset ; if (! NT_SUCCESS ( memcpy ( & offset, TC_MINIMUM_VOLUME_SIZE, sizeof ( LONG ) ) ) { Irp -> IoStatus. Status = STATUS_INVALID_PARAMETER ; Irp -> IoStatus. Information = 0 ; break ; } <S2SV_ModStart> LARGE_INTEGER offset ; if (! NT_SUCCESS ( memcpy ( & offset, TC_MAX_VOLUME_SIZE, sizeof ( LONG ) ) ) { Irp -> IoStatus. Status = STATUS_INVALID_PARAMETER ; Irp -> IoStatus. Information = 0 ; } <S2SV_ModStart> LARGE_MAX_VOLUME_SIZE ) ) { Irp -> IoStatus. Status = STATUS_INVALID_PARAMETER ; Irp -> IoStatus. Information = 0 ; break ; } <S2SV_ModStart> LARGE_INTEGER offset ; if (! NT_SUCCESS ( memcpy ( & offset, TC_MIN_VOLUME_SIZE, sizeof ( LONG ) ) ) ) { Irp -> IoStatus. Status = STATUS_INVALID_PARAMETER ; Irp -> IoStatus. Information = 0 ; }",0
592,"<S2SV_ModStart> ; if ( strlen ( connection ) == 0 ) goto error ; else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) goto error ;",0
593,"<S2SV_ModStart> uint16 nif = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ; } if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } <S2SV_ModStart> -> description ) { if ( strlen ( d -> description ) > plen ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } <S2SV_ModStart> -> name ) { if ( strlen ( d -> name ) > plen ) { return - 1 ; } <S2SV_ModStart> -> description ) { if ( strlen ( d -> name ) > plen ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } nif ++ ; } if ( d -> name ) { if ( strlen ( d -> name ) > plen ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } <S2SV_ModStart> -> name ) { if ( strlen ( d -> name ) > plen ) { return - 1 ; } <S2SV_ModStart> -> addresses ) { if ( address -> addr -> sa_family!= AF_INET ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; }",0
594,"<S2SV_ModStart> ; struct dump_dir * dd ; int status ; dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } g_hash_table_remove ( problem_info, ""basename"" ) ; dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } dd_create_basic_files ( dd, client_uid, NULL <S2SV_ModEnd> ) ; dd_save_text",0
595,"<S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> % 2 ; bit < ( ssize_t ) <S2SV_ModEnd> ( image -> <S2SV_ModStart> % 2 ; bit ++ ) { index = ( ( * p ) & 0x3 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; p ++ ; } if ( ( image -> columns % 4 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 4 ) ; bit ++ ) { index = ( ( * p ) & 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 4 )!= 0 ) { for ( x = 0 ; x < ( ( ssize_t ) ( image -> columns % 4 ) ; bit ++ ) { index = ( ( * p ) & 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; p ++ ;",0
596,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
597,"<S2SV_ModStart>, int tstype, bool opt_id <S2SV_ModStart> ; int err ; BUILD_BUG_ON ( sizeof ( struct sock_exterr_skb ) > sizeof ( skb -> cb ) ) <S2SV_ModStart> ee_info = tstype ; serr -> opt_id = opt_id ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> opt_id ; } else if ( opt_id && sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> opt_id ; } err = sock_queue_err_skb ( sk, skb ) ; if ( err ) { kfree_skb ( skb ) ; return ; }",0
598,"<S2SV_ModStart> ; } } if ( EOFBlob ( image )!= MagickFalse ) { ThrowFileException ( exception, CorruptImageError, ""UnexpectedEndOfFile"", image -> filename ) ; image -> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
599,"<S2SV_ModStart> = len ; ND_TCHECK2 ( bp [ 0 ], len ) ;",0
600,"<S2SV_ModStart>, CONST_STR_LEN ( ""%2f?"" ), CONST_STR_LEN ( ""%2f?"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN (",0
601,<S2SV_ModStart> ; if ( task -> ptrace &&,0
602,<S2SV_ModStart> <= w - ( int ),1
603,<S2SV_ModStart> page ) ; <S2SV_ModEnd> memset ( addr,1
604,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
605,<S2SV_ModStart> SEI_USER_DATA_REGISTERED_ITU_T_T36 : ps_parse -> s_sei_params. i1_sei_user_data_registered_ITU_T_36 = 1 ; break ; case SEI_USER_DATA_REGISTERED_ITU_T_T44 : ps_parse -> s_sei_params. i1_sei_user_data_registered_ITU_T_44 = 1 ; break ; case SEI_USER_DATA_REGISTERED_ITU_T_48 : ps_parse -> s_sei_params. i1_sei_user_data_registered_ITU_T_48 = 1 ; break ; case SEI_USER_DATA_REGISTERED_ITU_T_54 : ps_parse -> s_sei_params. i1_sei_user_data_registered_ITU_T_54 = 1 ; break ;,0
606,"<S2SV_ModStart> * priv ; if (! port -> interrupt_out_urb ||! port -> interrupt_in_urb ) { dev_err ( & port -> dev, ""required <S2SV_blank> endpoint <S2SV_blank> is <S2SV_blank> missing\\n"" ) ; return - ENODEV ; }",1
607,"<S2SV_ModStart> = kcalloc ( num_engines, sizeof ( * dd -> per_sdma ), GFP_KERNEL ) ; if (! dd -> per_sdma ) { ret = - ENOMEM ; goto err_free_per_sdma ; }",0
608,<S2SV_ModStart> -> device_data ; cancel_autoload_drivers ( ) ;,1
609,"<S2SV_ModStart>, int rep_quick, my_bool verbose <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", mystr ( param -> data, NULL ) ) ; if ( param -> testflag & T_REP ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", mystr ( param -> data, NULL ) ) ; } else { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", mystr ( param -> data, NULL ) ) ; }",0
610,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> p == q ) || ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> size < 16 ) || ( <S2SV_ModEnd> size > 256 <S2SV_ModStart> size > 256 ),1
611,"<S2SV_ModStart> uint dblocks = xfs_attr3_rmt_blocks <S2SV_ModEnd> ( mp,",1
612,"<S2SV_ModStart> ) ; } if ( buflen < pcount * sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, ( int ) ( buflen ) ) ) ) ;",0
613,"<S2SV_ModStart> val ) ; if (! strcmp ( var, ""command"" ) &&! strcmp ( var, ""rspfile"" ) &&! strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name )",0
614,<S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 1 ] ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 2 ] ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 3 ] ) <S2SV_ModEnd> ) return 0,0
615,"<S2SV_ModStart> = '\\0' ; agoo_log_seg ( & agoo_req_seg, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; <S2SV_ModStart> case 'Q' : if ( 0!= strncmp ( ""GET"", c -> buf, 4 ) ) { return bad_request ( c, 400, __LINE__ ) ; } else if ( 0!= strncmp ( ""POST"", c -> buf, 5 ) ) { return bad_request ( c, 400, __LINE__ ) ; } method = AGOO_POST ; } else if ( 4 == b - c -> buf && 0!= strncmp ( ""PUT"", c -> buf, 4 ) ) { return bad_request ( c, 400, __LINE__ ) ; } method = AGOO_GET ; if ( 0!= strncmp ( ""POST"", c -> buf, 4 ) ) { return bad_request ( c, 400, __LINE__ ) ; } else if ( 4 == b - c -> buf && 0!= strncmp ( ""PUT"", c -> buf, 4 ) ) { return bad_request ( c, 400",0
616,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> int i, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",1
617,"<S2SV_ModStart> = g_strdup_printf ( ""%s.%s"", tmpfile_name, "".service"" ) ; g_autoptr ( GString ) new_exec = g_strdup_printf ( ""%s.%s"", g_strdup_printf ( ""%s.%s"", tmpfile_name, escaped_app, escaped_branch, escaped_arch ) ; g_auto ( GStrv ) groups = NULL ; g_string * new_data = NULL ; gsize new_data_len = 0 ; for ( i = 0 ; i < new_data_len ; i ++ ) { g_string tmp_name = g_strdup_printf ( ""%s.%s.%s"", tmp_name, g_strdup_printf ( ""%s.%s"", tmp_app, escaped_branch ), escaped_arch ) ; g_string * new_data = g_strdup_printf ( ""%s.%s.service"", tmp_name, new_data_len ) ; g_string_free ( new_data ) ; g_string_free ( tmp_name ) ; tmp_name = g_strdup_printf ( ""%s.%s",0
618,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; fh_lock ( fh ) ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT <S2SV_ModEnd>, argp -> <S2SV_ModStart> argp -> acl_default ) ; out_drop_lock : fh_unlock ( fh ) ; <S2SV_ModEnd> fh_drop_write ( fh",1
619,<S2SV_ModStart> * ue ; if <S2SV_ModEnd> ( tree_root == <S2SV_ModStart> == NULL ) return 0,1
620,"<S2SV_ModStart> char * temp_filename = osi_calloc ( strlen ( filename ), <S2SV_ModEnd> 5 ) ; <S2SV_ModStart> ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ) fprintf ( fp, ""[%s]\\n"", section -> name ) ; for ( const entry_t * entry = ( const entry_t * ) list_node ( enode ) ; fprintf ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s\\n"", entry -> key, entry -> value ) ; } if ( list_next ( node",0
621,"<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) ; <S2SV_ModStart> > 0 ) { elen += pc -> lengthComponentIdent ; break ; } <S2SV_ModEnd> case 2 : <S2SV_ModStart> case 2 : elen += pc -> lengthComponentIdent ; break ; case 3 : if ( tolen < 3 ) return - ENAMETOOLONG ; memcpy ( p, ""../"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 4 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 4 ) ; p += 4 ; comp_len = udf_get_filename ( sb, pc -> componentIdent, pc -> lengthComponentIdent, p, tolen ) ; if ( comp_len < 0 ) return - ENAMETOOLONG ; * p ++ = '/' ; comp_len -- ; } <S2SV_ModEnd> if ( p",0
622,"<S2SV_ModStart> return ; } if ( EXTRACT_32BITS ( & rp -> rm_call. cb_vers ) == NFS_VER3 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsv3_str, ""vers-%u"", EXTRACT_32BITS ( & rp -> rm_call. cb_vers ) ) ) ; } else if ( EXTRACT_32BITS ( & rp -> rm_call. cb_proc ) == NFSPROC_GETATTR ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsv3_str, ""proc-%u"", proc ) ) ) ; } else if ( EXTRACT_32BITS ( & rp -> rm_call. cb_vers ) == NFS_VER3 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsv3_str, ""vers-%u"", EXTRACT_32BITS ( & rp -> rm_call. cb_proc ) ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( n",0
623,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ;,0
624,"<S2SV_ModStart>, target, NULL ) ; } if ( ( RAW == '?' ) && ( ( NXT ( 1 ) == '>' ) ) ) { if ( input == NULL ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } SKIP ( 2 ) ; if ( ( input == NULL ) ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } <S2SV_ModStart> ) ) { if ( input == NULL ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } skip ( 2 ) ; if ( ( input == NULL ) ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; }",0
625,<S2SV_ModStart> ; bool slow <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ;,1
626,"<S2SV_ModStart> len ) { <S2SV_ModEnd> if (! <S2SV_ModStart> } while ( len ) { u_int pdu_len = <S2SV_ModEnd> rpki_rtr_pdu_print ( ndo <S2SV_ModStart> ( ndo, pptr, len, 1 <S2SV_ModEnd>, 8 ) <S2SV_ModStart>, 8 ) ; len <S2SV_ModEnd> -= pdu_len ; <S2SV_ModStart> -= pdu_len ; pptr <S2SV_ModEnd> += pdu_len ; <S2SV_ModStart> pdu_len ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
627,"<S2SV_ModStart> int tagval ; struct stream packet ; <S2SV_ModStart> length ) ; packet = * s ; <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> token <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> token <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> token <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
628,"<S2SV_ModStart> 0 ; int elt ; u_int offset ; u_int maxoffset ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; if ( ( ( i = * cp ++ ) & INDIR_MASK )!= INDIR_MASK ) { compress = 0 ; rp = cp + l ; } if ( i!= 0 ) while ( i && cp < <S2SV_ModEnd> ndo -> ndo_snapend <S2SV_ModStart> ndo -> ndo_snapend ) { if ( ( i & INDIR_MASK ) == INDIR_MASK ) { if (! compress ) { rp = cp + 1 ; compress = 1 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> NULL ) ; offset = ( ( ( i << 8 ) | * cp ) & 0x3fff ) ; if ( offset >= maxoffset ) { ND_PRINT ( ( ndo, ""<BAD <S2SV_blank> PTR>"" ) ) ; return ( NULL ) ; } if ( offset >= maxoffset ) { ND_PRINT ( ( ndo, ""<BAD <S2SV_blank> PTR>"" ) ) ; return (",0
629,<S2SV_ModStart> ; blkcnt = args -> rmtvaluelen <S2SV_ModEnd> ; error = <S2SV_ModStart> ; if ( args -> rmtvaluelen == args -> valuelen ) { args -> rmtvaluelen = args -> valuelen ; args -> rmtvaluelen = args -> valuelen ; } else if ( args -> rmtvaluelen > args -> valuelen ) { args -> rmtvaluelen = args -> rmtvaluelen ; } args -> rmtvaluelen = args -> rmtvaluelen - args -> rmtblkcnt ; if ( args -> rmtvaluelen == args -> valuelen ) { args -> rmtvaluelen = args -> valuelen ; args -> rmtvaluelen = args -> valuelen ; },0
630,"<S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"" ""\\r\\n"" ""%s"" <S2SV_ModEnd>, request, <S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"",",0
631,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, <S2SV_ModEnd> dest, getuid <S2SV_ModStart> getgid ( ) <S2SV_ModEnd>, S_IRUSR | <S2SV_ModStart> | S_IWUSR ) ; fs_logger2 ( ""clone"", dest <S2SV_ModEnd> ) ; unlink",1
632,"<S2SV_ModStart> flags ) ; spin_lock_irqsave ( & bfad -> bfad_lock, flags ) ; <S2SV_ModStart>. comp ) ; spin_unlock_irqrestore ( & bfad -> bfad_lock, flags ) ;",0
633,"<S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> -> y = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> -> z = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f,",1
634,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_set_str ( GITERR_NET, ""Invalid <S2SV_blank> empty <S2SV_blank> packet"" ) ; return GIT_ERROR <S2SV_ModEnd> ; } if",1
635,<S2SV_ModStart> ; if ( vma -> vm_flags & VM_SHARED ) return VM_FAULT_SIGBUS ; if (,1
636,<S2SV_ModStart> -> sasl_mechanism ; rec -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> sasl_password = g_strdup ( src -> sasl_password ) ;,0
637,<S2SV_ModStart> env -> insn_aux_data ; int i <S2SV_ModStart> ) ) ; for ( i = off ; i < off + cnt - 1 ; i ++ ) new_data [ i ]. seen = true ;,1
638,<S2SV_ModStart> ; ND_TCHECK ( * dp <S2SV_ModEnd> ) ; if,1
639,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;,1
640,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
641,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorDecodeTile"", ""%s"", ""occ0%rowsize <S2SV_blank>!= <S2SV_blank> 0"" ) ; return 0 ; } <S2SV_ModEnd> assert ( sp <S2SV_ModStart> 0 ) { if (! <S2SV_ModStart>, rowsize ) ) return 0",1
642,"<S2SV_ModStart>, o, count ; if ( CHECKOVERFLOW ( buf_size, 6 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } count = exif_get_long ( buf + o, n -> order ) ; n -> entries [ tcount ]. entries = exif_mem_alloc ( n -> mem, count * sizeof ( MnoteCanonEntry ) ) ; if (! n -> entries [ tcount ]. components ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( n -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries [ tcount ]. entries ) { EXIF_LOG_NO_MEMORY ( ne -> log, ""ExifMnoteCanon"", sizeof ( MnoteCanonEntry ) ) ; break ; } n -> entries [ tcount ].",0
643,<S2SV_ModStart> ; if ( ctx -> terminated ||,1
644,<S2SV_ModStart> = NULL ; if ( sbi -> spool ) hugepage_put_subpool ( sbi -> spool ) ;,1
645,"<S2SV_ModStart> ; if ( my_errno < 0 ) { mi_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; my_errno = HA_ERR_NO_FILE ; } else if ( my_errno == HA_ERR_NO_FILE ) { mi_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; my_errno = HA_ERR_NO_FILE ; } else if ( my_errno == HA_ERR_NO_FILE ) { mi_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; } else if ( my_errno == HA_ERR_NO_FILE ) { mi_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; my_errno = HA_ERR_NO_FILE ; }",0
646,<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> int alloc = ( length < 0 )? length : ( int ) strlen ( string ) ; char * ns = malloc ( alloc ) ; unsigned char in ; int strindex = 0 ; CURLcode <S2SV_ModEnd> res ; if <S2SV_ModStart> ( res ) { free ( ns ) ; return NULL ; } ns [ strindex ++ ] = in <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( olen ) <S2SV_ModEnd> * olen = <S2SV_ModStart> strindex ; return ns <S2SV_ModEnd> ; } <S2SV_null>,0
647,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
648,"<S2SV_ModStart> ( ) ; iov_iter_advance ( i, copied ) ; <S2SV_ModStart> again ; } <S2SV_ModEnd> pos += copied",1
649,<S2SV_ModStart> unlikely ( len + ring -> frameoffset,1
650,"<S2SV_ModStart> -> pdu_free_state_ref = usm_free_usmStateReference ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_shutdown_dev_config, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224|SHA-256|SHA-224"" ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_shutdown_dev_config, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_shutdown_dev_config, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_shutdown_dev_config, NULL, ""MD5",0
651,"<S2SV_ModStart> ( obj, <S2SV_ModEnd> name, data <S2SV_ModStart>, show_object, & base <S2SV_ModEnd>, path,",1
652,"<S2SV_ModStart> ; return! match2 ( prog -> start, sp, <S2SV_ModEnd> prog -> flags <S2SV_ModStart> prog -> flags | eflags, sub ) <S2SV_ModEnd> ; } <S2SV_null>",0
653,<S2SV_ModStart> src < zsize + ( sub_type!= 2 ) <S2SV_ModStart> bits ) { if ( src >= src_end ) return AVERROR_INVALIDDATA ;,1
654,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
655,"<S2SV_ModStart> ] ; # ifndef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= 1 ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; }",0
656,<S2SV_ModStart> 255U ; } for ( j = 0 ; j < length ; j ++ ) { CheckNumberPixels ( 8 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ; break ; } case 3 : { CheckNumberPixels ( 4 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 2 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ) ; break ; } case 4 : { CheckNumberPixels ( 5 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ) ; break ; } case 5 : { CheckNumberPixels ( 6 ) ; * pixels ++ = ( pixel >>,0
657,"<S2SV_ModStart> timer ) ; spin_lock ( & timeri -> timer_active_lock ) ; _snd_timer_stop ( timer, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; mutex_unlock ( & timeri -> timer_active_lock ) ; <S2SV_ModStart> NULL ; } spin_unlock ( & timeri -> timer_active_lock ) ; mutex_unlock ( & timeri -> timer_active_lock ) ;",0
658,<S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> len ;,0
659,"<S2SV_ModStart> -> has_va ; <S2SV_ModEnd> char * arch <S2SV_ModStart> * arch = strdup ( info -> arch ) ; char * cpu = info -> cpu? strdup ( info -> cpu ) : NULL <S2SV_ModEnd> ; ut16 bits <S2SV_ModStart> ; if ( <S2SV_ModEnd> cpu && * <S2SV_ModStart> cpu && * <S2SV_ModEnd> cpu ) { <S2SV_ModStart>, ""anal.cpu"", <S2SV_ModEnd> cpu ) ; <S2SV_ModStart> r, binfile ) ; free ( cpu ) ; free ( arch",1
660,"<S2SV_ModStart> sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart>, * n <S2SV_ModEnd> ; list_for_each_entry (",1
661,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
662,"<S2SV_ModStart> gint64 offset ; <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; offset <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! parse_netscreen_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> wth -> fh <S2SV_ModEnd>, & wth <S2SV_ModStart> wth -> frame_buffer, line",1
663,<S2SV_ModStart> 0 ) ; if ( <S2SV_ModStart>. seq_num ) < 0 ) return - 1,1
664,<S2SV_ModStart> decode ) { uint_fast32_t widthOverflow = ( uint_fast32_t ) gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; uint_fast32_t heightOverflow = ( uint_fast32_t ) gifFilePtr -> Image. Height - info -> originalHeight ; uint_fast32_t newRasterSize = ( uint_fast32_t ) gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> Image. Width = ( uint_fast32_t ) gifFilePtr -> Image. Width ; gifFilePtr -> Image. Height = ( uint_fast32_t ) gifFilePtr -> Image. Height ; info -> rasterSize = newRasterSize ; break ; } widthOverflow = ( uint_fast32_t ) gifFilePtr -> Image. Width - info -> originalWidth ; int_fast32_t heightOverflow = ( uint_fast32_t ) gifFilePtr -> Image. Height - info -> originalHeight ; uint_fast32_t newRasterSize = ( uint_fast32_t ) gifFilePtr -> Image. Width *,0
665,"<S2SV_ModStart> : ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = <S2SV_ModStart> == 0 ) ret = <S2SV_ModEnd> key -> type <S2SV_ModStart> type -> read ( key, buffer, buflen ) ; up_read <S2SV_ModEnd> ( & key <S2SV_ModStart> sem ) ; <S2SV_ModEnd> } error2 :",1
666,"<S2SV_ModStart> cherokee_buffer_is_empty ( & ldap -> validator -> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & ldap -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len",0
667,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataIn",0
668,"<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - JAS_CAST ( jas_longlong <S2SV_ModEnd>, ( ( <S2SV_ModStart> ( JAS_CAST ( jas_longlong <S2SV_ModEnd>, tmp )",0
669,<S2SV_ModStart> page ) ; rm -> atomic. op_active = 0 ;,1
670,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
671,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
672,"<S2SV_ModStart> sizeof ( spath ) ) return - 1 ; if ( strstr ( name, "".."" ) || strchr ( name, '/'",1
673,"<S2SV_ModStart> 0 ) { if ( len < 9 ) { t1mac_output_data ( ( byte * ) s, len ) ; return ; } <S2SV_ModStart> ++ s ; if ( len < 9 ) { t1mac_output_data ( ( byte * ) t, len ) ; return ; } <S2SV_ModStart> * t && ( len < 9 ) ) { t1mac_output_data ( ( byte * ) t, len ) ; return ; } <S2SV_ModEnd> if ( *",0
674,"<S2SV_ModStart> -> bcache, cache_id ( <S2SV_ModStart> ] -> data )",1
675,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
676,"<S2SV_ModStart> = select ( 0, & uipc_main. read_set, NULL, NULL, NULL ) ; if ( uipc_main. read_set < 0 ) { UIPC_UNLOCK ( ) ; uipc_check_interrupt_locked ( ) ; for ( ch_id = 0 ; ch_id < UIPC_CH_NUM ; ch_id ++ ) { if ( ch_id!= UIPC_CH_ID_AV_AUDIO ) uipc_check_fd_locked ( ch_id ) ; } for ( ch_id = 0 ; ch_id < UIPC_CH_NUM ; ch_id ++ ) { if ( ch_id!= UIPC_CH_ID_AV_AUDIO ) uipc_check_fd_locked ( ch_id ) ; uipc_check_task_flags_locked ( ) ; for ( ch_id = 0 ; ch_id < UIPC_CH_NUM ; ch_id ++ ) { if ( ch_id!= UIPC_CH_ID_AV_AUDIO ) uipc_check_fd_locked ( ch",0
677,<S2SV_ModStart> return 1 ; consume_skb ( skb ) ; return 0 <S2SV_ModEnd> ; } if,1
678,"<S2SV_ModStart> msixcap msixcap ; if ( msgnum < 1 || msgnum > MAX_MSIX_TABLE_ENTRIES ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> msix_table <S2SV_blank> entries\\n"", __func__ ) ; return - 1 ; } <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> msgno ) ; <S2SV_ModEnd> pci_populate_msixcap ( &",0
679,"<S2SV_ModStart> ; upperdentry = lookup_one_len ( dentry -> d_name. name, dentry -> d_name. len ) ; if ( upperdentry && upperdentry -> d_inode && upperdentry -> d_inode -> i_uid!= current_uid ( ) ) { mutex_lock ( & upperdentry -> d_inode -> i_mutex ) ; err = notify_change ( upperdentry, attr, NULL ) ; mutex_unlock ( & upperdentry -> d_inode -> i_mutex ) ; } else { err = ovl_copy_up_last ( dentry, attr, false ) ; }",0
680,<S2SV_ModStart> ( isspace ( ( unsigned char ),1
681,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> } if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if (",1
682,"<S2SV_ModStart> int decode_unsigned_max ( vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> max ) { vpx_read_bit_buffer <S2SV_ModEnd> * data = <S2SV_ModStart> = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",0
683,<S2SV_ModStart> 1 ) ; if ( strlen ( line ) == 0 ) return - 1 ;,1
684,"<S2SV_ModStart> == NULL ) { retval = KRB5KDC_ERR_NO_SUCH_CERT ; goto cleanup ; } status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ; } retval = 0 <S2SV_ModEnd> ; cleanup :",0
685,<S2SV_ModStart> ++ ) { if ( band -> prec ) { <S2SV_ModStart> ) ; } },1
686,"<S2SV_ModStart> ; } } if ( ( entity -> etype == XML_EXTERNAL_PARAMETER_ENTITY ) && ( ( ctxt -> validate ) && ( ( ctxt -> vctxt. error!= NULL ) ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } else if ( ( entity -> etype == XML_INTERNAL_PARAMETER_ENTITY ) && ( ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } else { xmlWarningMsg ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } else { xmlWarningMsg ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL )",0
687,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart>, & final ) ; rcu_read_unlock ( <S2SV_ModStart> -> ir_v6_rmt_addr ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), <S2SV_ModEnd> np -> tclass <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (",1
688,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE select_tx_mode ( const VP9_COMMON * cm, const <S2SV_ModStart> cpi ) { const VP9EncoderConfig * oxcf = & cm -> oxcf ; <S2SV_ModStart> lossless ) { return ONLY_4X4 ; } else if ( oxcf -> tx_size_search_method == USE_LARGESTALL && cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW",0
689,"<S2SV_ModStart> ( u32 size, u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } <S2SV_ModEnd> return malloc ( <S2SV_ModStart> malloc ( size * num",1
690,<S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im ->,0
691,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,1
692,<S2SV_ModStart> ; if ( buf1 -> size > buf2 -> size ) { return 1 ; } else if (,0
693,"<S2SV_ModStart> scn, root_storage, CDF_SHORT_SEC_SIZE ( & h ) <S2SV_ModStart> scn, root_storage, CDF_SHORT_SEC_SIZE ( & h ) <S2SV_ModStart> - 1 ; goto out4 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & root_storage, 0, root_storage ) ) == - 1 ) { expn = ""Cannot <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out3 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & root_storage, CDF_SHORT_SEC_SIZE ( & h ) ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out4 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & dir, 0, root_storage, CDF_SHORT_SEC_SIZE ( & h ) ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out4 ; } if ( ( i = cdf_read_short_stream (",0
694,"<S2SV_ModStart> ( * info ) + size ; size_t totalram_pages = ( size >> PAGE_SHIFT ) + 2 ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) { info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; }",0
695,<S2SV_ModStart> (! eof && vars -> str. c!= vars -> ptr,1
696,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
697,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
698,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc!= X86EMUL_CONTINUE ) break <S2SV_ModStart> case 4 : rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val )",1
699,"<S2SV_ModStart> url ) ; if ( strcmp ( list. name, url. path ) == 0 ) { errstr [ sizeof ( errstr ) - 1 ] = '\\0' ; }",0
700,"<S2SV_ModStart> void * end <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; void * dbuf = NULL, * <S2SV_ModStart> struct ceph_crypto_key old_key ; void * ticket_buf = NULL <S2SV_ModStart>, end, & dbuf, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> bad ) ; if ( is_enc ) { dout ( "" <S2SV_blank> encrypted <S2SV_blank> ticket\\n"" ) ; dlen = ceph_x_decrypt ( & old_key, p, end, & ticket_buf, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> out ; } tp = ticket_buf ; <S2SV_ModStart> bad ) ; ticket_buf = kmalloc ( dlen, GFP_NOFS ) ; if (! ticket_buf ) { ret = - ENOMEM ; goto out ; } tp = ticket_buf ; <S2SV_ModStart> bad ) ; ticket_buf = kmalloc ( dlen, GFP_NOFS ) ; if (! ticket_buf ) { ret = - ENOMEM ; goto out ; } <S2SV_ModStart> bad ) ; ticket_buf = kmalloc ( dlen, GFP_NOFS ) ; if (! ticket_buf ) { kfree ( ticket_buf ) ; kfree ( ticket_buf ) ; }",0
701,"<S2SV_ModStart> / 2 ; if ( count > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ) ;",1
702,<S2SV_ModStart> -> skip_clock_update = 1 <S2SV_ModEnd> ; prev ->,0
703,"<S2SV_ModStart> -> init_msg ; if ( s -> session -> session_id_length > 0 ) { SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, ERR_R_MALLOC_FAILURE ) ; goto f_err ; }",0
704,"<S2SV_ModStart> ; r = SDIO_IOCTL_EXEC ( <S2SV_ModEnd> b -> manager <S2SV_ModStart> b -> manager -> event ) ; if ( r!= SDIO_IOCTL_SUCCESS ) { r = log_error_ioctl ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r!= SDIO_IOCTL_STOP ) { r = log_error_ioctl ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r!= SDIO_IOCTL_DONE ) { r = log_error_ioctl ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r!= SDIO_IOCTL_STOP ) { r = log_error_ioctl ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r!= SDIO_IOCTL_",0
705,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
706,<S2SV_ModStart> NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_ARRAY_REF <S2SV_ModStart> -> array_ref. entry ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; default :,0
707,<S2SV_ModStart> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),0
708,"<S2SV_ModStart>, end_col_offset ; string type_comment ; <S2SV_ModStart> += 2 ; type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i ) ) ; if (! TYPE ( CHILD ( n, name_i + 1 ) ) == TYPE_COMMENT ) { type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 2 ) ) ; if (! type_comment ) return NULL ; } <S2SV_ModStart> += 3 ; type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3 ) ) ; if (! type_comment ) return NULL ; <S2SV_ModStart>, returns, type_comment, <S2SV_ModStart> ; if ( TYPE ( CHILD ( n, name_i + 4 ) ) == TYPE_COMMENT ) { type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 4 ) ) ; if (! type_comment ) return NULL ; } <S2SV_ModStart>, decorator_seq, type_comment, <S2SV_ModStart>, returns, type_comment, <S2SV_ModStart> ; if ( TYPE ( CHILD ( n, name_i + 5 ) ) == TYPE_COMMENT ) { type_comment = NEW_TYPE_COMMENT ( CHILD",0
709,"<S2SV_ModStart> err = 0 ; if (! net_eq ( current -> nsproxy -> net_ns, sock_net ( sk ) ) ) return - EINVAL",1
710,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
711,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
712,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
713,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
714,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,1
715,,1
716,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
717,"<S2SV_ModStart> : if ( position < 0 || position >= <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. len && psf_bump_header_allocation ( psf ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; } <S2SV_ModEnd> ; case SEEK_CUR <S2SV_ModStart> : if ( position >= <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. len && psf_bump_header_allocation ( psf ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; } ; if ( position >= <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. len && psf_bump_header_allocation ( psf ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; } ; if ( psf -> header. len && psf_bump_header_allocation ( psf ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; } ; if ( psf -> header.",0
718,<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ioffset ) ; <S2SV_ModEnd> credits = ext4_writepage_trans_blocks <S2SV_ModStart> ) ; goto out_mmap <S2SV_ModEnd> ; } down_write <S2SV_ModStart> handle ) ; out_mmap : up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModEnd> ext4_inode_resume_unlocked_dio ( inode,1
719,<S2SV_ModStart> uint32_t midi_type ; uint8_t * * tracks ; uint32_t * track_size <S2SV_ModEnd> ; uint32_t end_of_tracks <S2SV_ModStart> no_tracks ) ; track_size = midi_data ; track_delta = midi_data ; track_end = midi_data + tmp_val ; midi_size -= tmp_val <S2SV_ModEnd> ; <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
720,"<S2SV_ModStart> |= SOCK_SNDBUF_LOCK ; sk -> sk_sndbuf = min_t ( int <S2SV_ModEnd>, val * <S2SV_ModStart> val * 2, SOCK_MIN_SNDBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_RCVBUF : val = min_t ( int, val, sysctl_rmem_max ) ; set_rcvbuf : sk -> sk_userlocks |= SOCK_RCVBUF_LOCK ; sk -> sk_rcvbuf = max_t ( int, val * 2, SOCK_MIN_RCVBUF ) ;",0
721,"<S2SV_ModStart> * bh ; unsigned int table_len ; <S2SV_ModStart> -> b_data ; table_len = le32_to_cpu ( lvd -> mapTableLength ) ; if ( le32_to_cpu ( lvd -> mapTableLength ) > table_len ) goto out_bh ; <S2SV_ModStart> = 0 ; if ( le32_to_cpu ( lvd -> mapTableLength ) > table_len ) goto out_bh ; <S2SV_ModStart> -> s_partitions && offset + table_len > table_len ) goto out_bh ; for ( i = 0 ; i < sbi -> s_partitions && offset < le32_to_cpu ( lvd -> mapTableLength ) ; i ++, offset += table_len ; type = gpm -> partitionMapType ; if ( type == 1 ) { struct genericPartitionMap1 * gpm1 = ( struct genericPartitionMap1 * ) gpm ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gpm1 ->",0
722,"<S2SV_ModStart> long n ; image = 0 ; info = 0 ; <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> header\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> 1, ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %ld; <S2SV_blank> width <S2SV_blank> %ld; <S2SV_blank> height <S2SV_blank> %ld; <S2SV_blank> numplanes <S2SV_blank> %ld; <S2SV_blank> "" ""depth <S2SV_blank> %ld; <S2SV_blank> enctype <S2SV_blank> %ld; <S2SV_blank> siz <S2SV_blank> %ld; <S2SV_blank> hres <S2SV_blank> %ld; <S2SV_blank> vres <S2SV_blank> %ld; <S2SV_blank> numcolors <S2SV_blank> %ld; <S2SV_blank> "" ""mincolors <S2SV_blank> %ld\\n"", JAS_CAST ( long <S2SV_ModEnd>, info -> <S2SV_ModStart> info -> len ), JAS_CAST ( long <S2SV_ModStart> info -> width ), JAS_CAST ( long <S2SV_ModStart> info -> height ), JAS_CAST ( long <S2SV_ModStart> info -> numplanes ), JAS_CAST ( long <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModStart> info -> enctype ), JAS_CAST ( long <S2SV_ModStart> info -> siz ), JAS_CAST ( long <S2SV_ModStart> info -> siz ),",0
723,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
724,<S2SV_ModStart> ) IHEVCD_SUCCESS ) ; ASSERT ( 0 <= ps_cabac -> u4_size ) ;,0
725,"<S2SV_ModStart> g_tv_comment, FILENAME_COMMENT ) ; g_tv_comment -> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
726,"<S2SV_ModStart> media_pad_desc pad ; if ( copy_to_user ( & links -> pads [ p ], & pad, sizeof ( pad ) ) ) return - EFAULT ; <S2SV_ModStart> ) continue ; if ( copy_to_user ( & links -> links [ l ]. source, & link. source ) || copy_to_user ( & links -> links [ l ]. sink, & link. sink ) ) return - EFAULT ;",0
727,<S2SV_ModStart> off ) ; if ( line -> indent > 0 && line -> indent > 0 && line -> beg < ctx -> size ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = TRUE ; } else if ( line -> indent > 0 && line -> indent > 0 && line -> indent >= c -> contents_indent ) { line -> type = MD_LINE_LIST ; ctx -> last_line_has_list_loosening_effect = FALSE ; } else if ( line -> indent > 0 && line -> indent > c -> contents_indent ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = TRUE ; } else if ( line -> indent > 0 && line -> indent > 0 && line -> indent >= c -> contents_indent ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = TRUE ; } n_brothers ++ ; n_children ++ ;,0
728,"<S2SV_ModStart>, extent, width, <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; height = sun_info. height * sun_info. depth ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( width > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ;",0
729,"<S2SV_ModStart>, krb5_principal client_principal, const char * tgt_realm <S2SV_ModStart> principal ), tgt_realm <S2SV_ModEnd> ) ; if",1
730,"<S2SV_ModStart> ReadBlobLSBLong ( image ) ; if ( bmp_info. number_colors > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
731,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = ireq ->,1
732,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
733,"<S2SV_ModStart>!= 0 ) { int tend_off = skb_transport_offset ( skb ) + tlen ; <S2SV_ModStart> ( csum, skb_checksum ( skb, tend_off, <S2SV_ModEnd> offset, 0 <S2SV_ModStart>, csum_partial ( skb_transport_header ( skb ) + tend_off <S2SV_ModEnd>, offset,",0
734,"<S2SV_ModStart> pfn ) ; kvm_unpin_pages ( kvm, pfn, page_size ) ; <S2SV_ModStart> base_gfn, gfn - slot -> base_gfn",1
735,<S2SV_ModStart> 0x00 } ; if ( cmd -> msg_len > sizeof ( b ) - 4 ) return - EINVAL ;,1
736,"<S2SV_ModStart> perf_event_context * ctx ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> state = PERF_EVENT_STATE_OFF ; perf_event_ctx_unlock ( event, ctx <S2SV_ModEnd> ) ; }",0
737,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> ; return ( <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> [ 3 ] ; return <S2SV_ModEnd> ( value & <S2SV_ModStart> & 0xffffffff ) <S2SV_ModEnd> ; } <S2SV_null>,1
738,"<S2SV_ModStart> free_nid * i, * e <S2SV_ModStart> ; int err ; i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) goto err_out ; spin_lock ( & nm_i -> nid_list_lock ) ; radix_tree_preload_end ( ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; radix_tree_preload_end ( ) ; if ( err ) goto err_out ; spin_unlock ( & nm_i -> nid_list_lock ) ; radix_tree_preload_end ( ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; err_out : spin_unlock ( & nm_i -> nid_list_lock ) ; radix_tree_preload_end ( ) ; err_out : spin_unlock ( & nm_i -> nid_list_lock",0
739,<S2SV_ModStart> -> post_proc_flag ; flags -> deblocking_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> postproc_cfg. noise_level ; flags -> noise_level = ctx -> postproc_cfg. noise_level ; <S2SV_ModStart> ; # if CONFIG_POSTPROC_VISUALIZER if ( ctx -> dbg_color_ref_frame_flag ) flags -> display_ref_frame_flag = ctx -> dbg_color_ref_frame_flag ; flags -> display_mb_modes_flag = ctx -> dbg_color_mb_modes_flag ; flags -> display_b_modes_flag = ctx -> dbg_color_b_modes_flag ; flags ->,0
740,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> ++ cons ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> extra. type ) ; netbk_fatal_tx_err ( vif",1
741,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ;,1
742,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
743,"<S2SV_ModStart> - 1 ; luaL_checkstack <S2SV_ModEnd> ( L, <S2SV_ModStart> ""too <S2SV_blank> many <S2SV_blank> results"" ) ; luaL_pushnumber ( L, 0 ) ; <S2SV_ModStart> 1, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; size = optsize ( L, opt, & fmt ) ; pos += gettoalign ( pos, & h, opt, size ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; if ( size == 0 ) { luaL_error ( L, ""format <S2SV_blank> `c0\' <S2SV_blank> needs <S2SV_blank> a <S2SV_blank> previous <S2SV_blank> size"" ) ; size = lua_tonumber ( L, - 1 ) ; lua_pop ( L, 1 ) ; luaL_argcheck ( L, 1, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; } switch ( opt ) { case 'i' : { int issigned = islower ( opt ) ; lua_Number res = getinteger ( data + pos, h. endian, issigned, size ) ; correctbytes ( ( char * ) & res, sizeof ( res ), h. endian ) ; lua_pushnumber ( L, res ) ; break ; } case '",0
744,"<S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg6 ) ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; goto trunc ; }",0
745,"<S2SV_ModStart> ; int n ; if (! body -> unit_size || len < sizeof ( struct oz_multiple_fixed ) + 1 ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; return ; } <S2SV_ModStart> ; if ( len < sizeof ( struct oz_multiple_fixed ) + 1 ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; return ; } n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) / body -> unit_size ; while ( n -- ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } break ; case OZ_DATA_F_ISOC_FIXED : { struct oz_isoc_fixed * body = ( struct oz_isoc_fixed * ) data_hdr ; u8 * data = body -> data ; int count ; int i ; if (! unit_size ) break ; count =",0
746,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
747,"<S2SV_ModStart> ) ) { char * tmp_filename ; <S2SV_ModStart> ; int rv ; tmp_filename = realpath ( src, NULL ) ; if ( tmp_filename == NULL ) { fprintf ( stderr, ""Error: <S2SV_blank> Cannot <S2SV_blank> access <S2SV_blank> %s\\n"", src ) ; exit ( 1 ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, tmp_filename <S2SV_ModEnd>, dest, <S2SV_ModStart> 0 ) ; tmp_filename = realpath ( src, NULL ) ; if ( tmp_filename == NULL ) { fprintf ( stderr, ""Error: <S2SV_blank> Cannot <S2SV_blank> copy <S2SV_blank>.Xauthority <S2SV_blank> file <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; exit ( 1 ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart>, dest, tmp_filename <S2SV_ModEnd>, getuid ( <S2SV_ModStart> getgid ( ), tmp_filename <S2SV_ModEnd> ) ; if",0
748,<S2SV_ModStart> IMAP_FATAL ; return ; } if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { idata -> status = IMAP_FATAL ; return,0
749,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
750,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> ) ) ; ext_size = sizeof ( struct ext4_extent_header ) + sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_entries ) ; memcpy ( bh -> b_data + ext_size, sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_entries ) ) ; memcpy ( bh -> b_data + ext_size, sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_entries ) ) ; memcpy ( bh -> b_data + ext_size, sizeof ( struct ext4_extent ) * le16_to_cpu ( bh -> b_data ) ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size ) ; memcpy ( bh -> b_data + ext_size, sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_entries ) ) ; memcpy ( bh -> b_data + ext_",0
751,<S2SV_ModStart> = 0 ; if ( ptr_hbe_txposer -> band_type == IXHEAACD_BAND_4_0 ) { ptr_hbe_txposer -> band_type = IXHEAACD_BAND_4_0 ; } else if ( ptr_hbe_txposer -> band_type == IXHEAACD_BAND_4_1 ) { if ( ptr_hbe_txposer -> band_type == IXHEAACD_BAND_4_0 ) { if ( ptr_hbe_txposer -> band_type == IXHEAACD_BAND_4_0 ) ptr_hbe_txposer -> band_type = IXHEAACD_BAND_4_1 ; } else if ( ptr_hbe_txposer -> band_type == IXHEAACD_BAND_4_0 ) { ptr_hbe_txposer -> band_type = IXHEAACD_BAND_4_1 ; } else if ( ptr_hbe_txposer -> band_type == IXHEAACD_B,0
752,<S2SV_ModStart> ; cmap_len = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; cmap_entry_size = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> if 0 x_origin = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; y_origin = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; image_w = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; image_h = get_tga_ushort <S2SV_ModEnd> ( & tga,0
753,<S2SV_ModStart> ; ssize_t ret ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
754,"<S2SV_ModStart> tp ) { struct timespec rem ; <S2SV_ModStart> ) == CPUCLOCK_SCHED && NSEC_PER_SEC > rem ) rem = div_u64_rem ( <S2SV_ModEnd> cpu. sched <S2SV_ModStart> cpu. sched, rem, NSEC_PER_SEC ) ; <S2SV_ModEnd> cputime_to_timespec ( cpu <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
755,<S2SV_ModStart> ; uint32 nstrips <S2SV_ModEnd> ; nstrips =,1
756,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
757,"<S2SV_ModStart> lua_module ) ; apr_per_dir_cfg * per_dir_cfg = ap_get_module_config ( r -> per_dir_config, & lua_module ) ; lua_authz_provider_spec * prov_spec = parsed_require_line ; luaLuaFunction * function_name = NULL ; <S2SV_ModStart> r ) ; function_name = get_function_name ( L, - 1 ) ; if ( function_name == NULL ) { lua_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02315 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", function_name ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; } function_name = get_function_name ( L, - 1 ) ; if ( function_name == NULL ) { lua_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02318 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> function <S2SV_blank> \'%",0
758,<S2SV_ModStart> ; int error = 0 <S2SV_ModStart> &= PAGE_MASK ; if ( address < mmap_min_addr ) return - EPERM <S2SV_ModEnd> ; prev =,1
759,"<S2SV_ModStart> { umode_t mode <S2SV_ModEnd> ; error = <S2SV_ModStart> ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart>, & mode, & acl <S2SV_ModStart> if ( error <S2SV_ModEnd> ) return error <S2SV_ModStart> return error ; <S2SV_ModEnd> error = xfs_set_mode",1
760,"<S2SV_ModStart>, int optional, const char * rootfs <S2SV_ModStart> endif if ( safe_mount <S2SV_ModEnd> ( fsname, <S2SV_ModStart> MS_REMOUNT, data, rootfs <S2SV_ModStart>, data ) < 0",1
761,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
762,"<S2SV_ModStart> it_overrun = - 1LL <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> info -> si_overrun = timer_overrun_to_int ( timr, info -> si_overrun ) <S2SV_ModEnd> ; } unlock_timer",1
763,<S2SV_ModStart> ; if ( unlikely ( proto_end == NULL ) ) return - 1 ; if (,0
764,"<S2SV_ModStart> struct static_key * once_key <S2SV_ModEnd> ) { static <S2SV_ModStart> flags ) ; once_key <S2SV_ModEnd> = done_key ; <S2SV_ModStart> flags ) ; spin_lock_irqsave ( & lock, flags ) ; <S2SV_ModStart> ) ; __net_random_once_disable_jump ( once_key <S2SV_ModEnd> ) ; return",0
765,"<S2SV_ModStart> -> actual ; bool kiocb_has_eventfd = <S2SV_ModEnd> io_data -> kiocb <S2SV_ModStart> ki_flags & IOCB_EVENTFD ; if ( io_data -> read && ret > 0 ) { use_mm ( io_data -> mm ) ; ret = copy_to_iter ( io_data -> buf, ret, & io_data -> data ) ; if ( iov_iter_count ( & io_data -> data ) ) ret = - EFAULT ; unuse_mm ( io_data -> mm ) ; } io_data -> kiocb -> ki_complete ( io_data -> kiocb, ret, ret ) ; if ( io_data -> ffs -> ffs_eventfd &&! kiocb_has_eventfd <S2SV_ModEnd> ) eventfd_signal ( <S2SV_ModStart> -> req ) <S2SV_ModEnd> ; if (",1
766,<S2SV_ModStart> ; if ( IPCB ( skb ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> &&! opt,1
767,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
768,"<S2SV_ModStart> struct trusted_key_payload * p ; struct trusted_key_payload * new_p ; struct trusted_key_options * new_o ; size_t datalen = prep -> datalen ; char * datablob ; int ret = 0 ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ; <S2SV_ModStart> 0 ] ; <S2SV_ModEnd> if (!",1
769,"<S2SV_ModStart> v |= ( JAS_CAST ( uint_fast32_t, c ) <S2SV_ModEnd> << 24 )",1
770,<S2SV_ModStart> NULL ) { if ( skb -> len < ROSE_MIN_LEN ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> 2 ] ; if ( frametype == ROSE_CALL_REQUEST && ( skb -> len <= ROSE_CALL_REQ_FACILITIES_OFF || skb -> data [ ROSE_CALL_REQ_ADDR_LEN_OFF ]!= ROSE_CALL_REQ_ADDR_LEN_VAL ) ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> -> data + ROSE_CALL_REQ_DEST_ADDR_OFF <S2SV_ModEnd> ) ; lci_o,1
771,"<S2SV_ModStart> out_free ; } else kvm_iommu_unmap_pages ( kvm, & old ) ;",0
772,<S2SV_ModStart> indev!= NULL && indev -> ifa_list,0
773,"<S2SV_ModStart> = path ; const char * const name = fdt_get_name ( fdt, offset, & len ) ; if ( end - path < 2 ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> = nextoffset ; if ( len > path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> name = fdt_get_name ( fdt, offset, & len ) ; if ( len > path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> - FDT_ERR_NOSPACE ; if ( end - path < 2 ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> case FDT_END_NODE : <S2SV_ModEnd> depth = FDT_MAX_DEPTH <S2SV_ModStart> - FDT_ERR_BADSTRUCTURE ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; <S2SV_ModStart> = fdt_get_name ( fdt, offset, & len ) ; if ( len > path_len ) return - FDT_ERR_NOSPACE ; if ( end - path < 2 ) return - F",0
774,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",1
775,"<S2SV_ModStart> } if ( in_bio == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT ) ; goto err ; } if ( <S2SV_ModStart> } if ( in_bio == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT ) ; goto err ; }",0
776,"<S2SV_ModStart> ) ; } if ( server. bgsavechildpid!= - 1 && server. bgrewritechildpid!= - 1 ) { if ( ( loops % 50 ) && ( listLength ( server. clients ) > listLength ( server. slaves ) && listLength ( server. clients ) > listLength ( server. slaves ) ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", ( listLength ( server. clients ) - listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; } else { if ( ( loops % 50 ) && ( used || vkeys ) ) { redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT <S2SV_blank> not <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys ) ; } if (! ( loops % 50 ) && ( used || vkeys ) ) { redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank>",0
777,"<S2SV_ModStart> } if ( options -> flags & ( UV_PROCESS_SETUID | UV_PROCESS_SETGID ) && setgroups ( options -> uid, options -> gid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setgroups()"" ) ; _exit ( 127 ) ; } if ( options -> flags & ( UV_PROCESS_SETUID | UV_PROCESS_SETGID ) && setgroups ( options -> uid, options -> gid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setgroups()"" ) ; _exit ( 127 ) ; } if ( options -> flags & ( UV_PROCESS_SETUID | UV_PROCESS_SETGID ) && setuid ( options -> uid, options -> gid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuid()"" ) ; _exit ( 127 ) ; } if (",0
778,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> EOPNOTSUPP ; } if ( rlen > MAX_XFER_SIZE ) { warn ( ""i2c <S2SV_blank> rd: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", rlen ) ; return - EOPNOTSUPP ; } <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> wlen ) ; <S2SV_ModEnd> ret = dvb_usb_generic_rw <S2SV_ModStart> + wlen, st -> data <S2SV_ModEnd>, rlen, <S2SV_ModStart> rlen, 0 ) ; if (! ret && rbuf && rlen ) memcpy ( rbuf, st -> data, rlen",1
779,"<S2SV_ModStart> -> protocol_timeout = g_timeout_add_seconds <S2SV_ModEnd> ( 5,",0
780,<S2SV_ModStart> book -> dim && i < n,1
781,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
782,<S2SV_ModStart> == - EEXIST || ret == - EOVERFLOW,1
783,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; BUG_ON <S2SV_ModStart> unix_tot_inflight -- ; } fp -> f_cred -> user -> unix_inflight -- ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
784,"<S2SV_ModStart> size_t chanmap_size = SF_MIN ( <S2SV_ModStart> sf. channels, layout_tag & 0xffff )",1
785,"<S2SV_ModStart> ) { if (! check_scale_factors ( other_w, other_h, this_w, this_h, & sf -> x_scale_fp, sf -> y_scale_fp ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if (! check_scale_factors ( other_w, other_h, this_w, this_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if ( sf -> y_step_q4 == 16 ) { if ( sf -> x_step_q4 == 16 ) { sf -> predict [ 0 ] [ 0 ] = vp9_convolve_copy ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve8_horiz ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve8_avg_horiz ; } else { sf -> predict [ 0 ] [ 0 ]",0
786,<S2SV_ModStart> ms ) { uint32_t <S2SV_ModEnd> nestsize = ( <S2SV_ModStart> nestsize = ( uint32_t <S2SV_ModEnd> ) ms ->,1
787,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
788,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
789,<S2SV_ModStart> -> xrefs = safe_calloc ( <S2SV_ModEnd> sizeof ( xref_t,1
790,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
791,"<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ) <S2SV_ModStart> ( opt ) { atomic_sub ( <S2SV_ModEnd> opt -> tot_len <S2SV_ModStart> opt -> tot_len, & sk -> sk_omem_alloc ) ; txopt_put ( opt <S2SV_ModStart> ) ; } }",1
792,"<S2SV_ModStart>, * tmpin = NULL, * tmpout <S2SV_ModStart> = dcont ; if (! ( flags & SMIME_BINARY ) && dcont ) { tmpout = dcont ; if (! tmpout ) { CMSerr ( CMS_F_CMS_VERIFY, ERR_R_MALLOC_FAILURE ) ; goto err ; } <S2SV_ModStart>, flags ) ; if (! ( flags & SMIME_BINARY ) && dcont ) { tmpout = dcont ; if (! tmpout ) { CMSerr ( CMS_F_CMS_VERIFY, ERR_R_MALLOC_FAILURE ) ; goto err ; } <S2SV_ModStart>, flags ) ; if (! ( flags & SMIME_BINARY ) && dcont ) { CMSerr ( CMS_F_CMS_VERIFY, ERR_R_MALLOC_FAILURE ) ; goto err ; } <S2SV_ModStart>, flags ) ; if (! ( flags & SMIME_BINARY ) && dcont ) { if (! tmpout ) { CMSerr ( CMS_F_CMS_VERIFY, ERR_R_MALLOC_FAILURE ) ; goto err ; } <S2SV_ModStart>, flags ) ; if (! tmpout ) { CMSerr ( CMS_F_CMS_VERIFY",0
793,"<S2SV_ModStart> ; if ( rcu_dereference_protected ( <S2SV_ModStart> np -> opt, sock_owned_by_user ( sk ) ) ) goto done ; val = rcu_dereference_protected ( sk -> sk_omem_cache, sock_owned_by_user ( sk ) ) ; if ( copy_to_user ( optval, & rcu, sizeof ( * rcu ) ) ) return - EFAULT ; rcu_assign_pointer ( sk -> sk_omem_cache, optval ) ;",0
794,<S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_ops <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_v4_ops <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_ops,0
795,"<S2SV_ModStart> cs_flags ) ; hook_del_nick_can_register ( check_registration_keywords ) ; hook_add_user_can_register ( check_registration_keywords ) ; hook_del_user_can_register ( check_registration_keywords ) ; del_conf_item ( ""ANOPE_FLAGS_COMPAT"", ""ANOPE_FLAGS_COMPAT"", ""ANOPE_FLAGS_COMPAT_RUNTIME"", ""ANOPE_FLAGS_COMPAT_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME_RUNTIME",0
796,"<S2SV_ModStart> ) { struct in_device * idev <S2SV_ModEnd> = ( ( <S2SV_ModStart> ) -> ifa_dev <S2SV_ModEnd> ; struct netdev_notifier_info <S2SV_ModStart> netdev_notifier_info info ; if ( idev -> dead ) return NOTIFY_DONE ; <S2SV_ModStart> & info, idev ->",1
797,<S2SV_ModStart> -> active_mm!= NULL <S2SV_ModEnd> ) goto out <S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; base_pages_to_flush = ( end - start ) >> PAGE_SHIFT ; if ( base_pages_to_flush > tlb_single_page_flush_ceiling ) base_pages_to_flush = TLB_FLUSH_ALL ; if ( base_pages_to_flush > tlb_single_page_flush_ceiling ) base_pages_to_flush = TLB_FLUSH_ALL ;,0
798,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> oxcf. pass == 2 ) { double ovpsnr ; ovpsnr = sse_to_psnr ( stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; } else { ovpsnr = sse_to_psnr ( stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; }",0
799,"<S2SV_ModStart> val ) { int temp_size = 500 ; char * temp = malloc ( temp_size ) <S2SV_ModEnd> ; int i <S2SV_ModStart> ; ) { if ( i >= temp_size ) { temp_size *= 2 ; temp = realloc ( temp, temp_size ) ; }",1
800,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
801,"<S2SV_ModStart> name ) { size_t size = sizeof ( char ) * 2 + 16 ; if ( size < 2 ) { ERR ( ""Memory <S2SV_blank> allocation <S2SV_blank> error: <S2SV_blank> %d <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", size, ( unsigned int ) strlen ( name ) ) ; return ; } <S2SV_ModEnd> dst_name = malloc <S2SV_ModStart> 2 + 16 ) ; if (! ( dst = fopen ( dst_name, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } size = strlen ( dst_name ) ; if ( size < 4 ) { ERR ( ""Memory <S2SV_blank> allocation <S2SV_blank> error: <S2SV_blank> %d <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", dst_name, ( unsigned int ) ( unsigned int ) sizeof ( char ) ) ; if (! ( dst = fopen ( dst_name, ""w"" ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; }",0
802,"<S2SV_ModStart> NULL ) { if ( addr_str_length > sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""too <S2SV_blank> large <S2SV_blank> management <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; goto error ; } <S2SV_ModStart> NULL ) { if ( addr_str_length > sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""too <S2SV_blank> large <S2SV_blank> management <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; goto error ; } <S2SV_ModStart> NULL ) { log_warn ( ""lldp"", ""too <S2SV_blank> large <S2SV_blank> management <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; goto error ; } <S2SV_ModStart> NULL ) { log_warn ( ""lldp"", ""too <S2SV_blank> large <S2SV_blank> management <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; goto error ; }",0
803,"<S2SV_ModStart> case BPLIST_DICT : if ( * object + size > bplist -> offset_table ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> plist <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__ ) ; return NULL ; } <S2SV_ModStart> case BPLIST_UINT : if ( * object + size > bplist -> offset_table ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> plist <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__ ) ; return NULL ; } <S2SV_ModStart> case BPLIST_UINT : if ( * object + size > bplist -> offset_table ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> plist <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__ ) ; return NULL ; } <S2SV_ModStart> case BPLIST_UINT : if ( * object + size > bplist -> offset_table ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> size <S2SV_blank> node <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__ ) ; return",0
804,"<S2SV_ModStart> ( ) ; TRACE_DEBUG ( ""CIDER=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ;",0
805,<S2SV_ModStart> all_channels_lock ) ; put_net ( pch -> chan_net ) ; pch -> chan_net = NULL ;,1
806,"<S2SV_ModStart> btrfs_dir_item * di = NULL <S2SV_ModStart> - ENOMEM ; path = btrfs_alloc_path ( ) ; if (! path ) return - ENOMEM ; <S2SV_ModStart> & XATTR_REPLACE ) { di = btrfs_lookup_xattr ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if (! di ) { ret = - ENODATA ; goto out ; } } else if ( di ) { ret = - ENODATA ; goto out ; } <S2SV_ModEnd> if (! <S2SV_ModStart> out ; } if ( flags & XATTR_REPLACE ) { di = btrfs_lookup_xattr ( NULL, root, path, btrfs_ino ( inode ), name, name_len, 0 ) ; if (! di ) { ret = - ENODATA ; goto out ; } else { ret = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( ret ) goto out ; } ret = btrfs_insert_xattr_item <S2SV_ModEnd> ( trans, <S2SV_ModStart>, path, btrfs_ino ( inode ), name, name_",0
807,<S2SV_ModStart> > 0xbf ) { <S2SV_ModStart> return 1 ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; },0
808,"<S2SV_ModStart> client -> proxy ) ; g_byte_array_free ( client -> auth_buffer, TRUE",1
809,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
810,<S2SV_ModStart> ; if ( key_is_negative ( key <S2SV_ModEnd> ) ) return,1
811,"<S2SV_ModStart> ip ++ ; # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( <S2SV_ModEnd> t + 15 <S2SV_ModStart> t + 15 ) ) ) { NEED_OP ( t + 15 ) ; do { * op ++ = * ip ++ ; } while ( ip < ie ) ; ip += 8 ; do { COPY8 ( op, ip ) ; ip += 8 ; do { COPY8 ( op, ip ) ; ip += 8 ; } while ( ip < ie ) ; ip += 8 ; } while ( ip < oe ) ; ip += 8 ; do { COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; } while ( ip < ie ) ; ip += 8 ; do { COPY8 ( op, ip ) ; ip += 8 ; do { COPY8 ( op, ip ) ; ip += 8 ; } while ( ip < ie ) ; ip += 8 ; do { COPY8 ( op, ip ) ; ip += 8 ; } while ( ip < ie ) ; ip += 8 ; do { COPY8 ( op, ip ) ; op += 8 ; ip += 8 ;",0
812,"<S2SV_ModStart> ; if (! strcmp ( prop_name, ""FIT"" ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; } if ( <S2SV_ModStart> ) ) { bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; }",0
813,<S2SV_ModStart> { vpn_packet_t outpkt ; if ( len > sizeof outpkt. data ) return,1
814,<S2SV_ModStart> vmx_vpid_bitmap ) ; <S2SV_ModEnd> for ( msr <S2SV_ModStart> vmx_vpid_bitmap ) ; <S2SV_ModEnd> if ( vpid_bitmap <S2SV_ModStart> vmx_vpid_bitmap ) ; <S2SV_ModEnd> if ( vpid_bitmap <S2SV_ModStart> ) ) ; vpid_bitmap = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if ( vpid_bitmap ) { vpid_bitmap = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if ( vpid_bitmap ) { vpid_bitmap = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vpid_bitmap ) goto out7 ; vpid_bitmap = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if ( vpid_bitmap ) { vpid_bitmap = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if ( vpid_bitmap ) { vpid_bitmap = ( unsigned long * ) __get_free_page,0
815,"<S2SV_ModStart> out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; return false ; } if ( ( st32 ) verdef -> vd_next > SIZE_MAX ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; return false ; } <S2SV_ModStart> out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; return false ; } if ( ( st32 ) verdef -> vd_next > SIZE_MAX ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; return false ; } <S2SV_ModStart> out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; return false ; }",0
816,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ),0
817,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> * af_ratio ) / ( rc -> avg_frame_bandwidth <S2SV_ModEnd> + af_ratio - <S2SV_ModStart> ; # else target = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # endif,0
818,"<S2SV_ModStart> ++ ) if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; if (",0
819,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
820,<S2SV_ModStart> INDENT_INCR ; } if ( tbl -> indent < 0 ) tbl -> indent = 0 ; <S2SV_ModStart> -= INDENT_INCR ; if ( offset < 0 ) offset = 0 ;,1
821,"<S2SV_ModStart> + tail ; DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" <S2SV_ModEnd> ), line <S2SV_ModStart> b ) <= CDF_SEC_SIZE ( h ) * sst -> sst_len <S2SV_ModEnd>, CDF_SEC_SIZE ( <S2SV_ModStart> b ), CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ), sst -> sst_len, CDF_SEC_SIZE ( h ), sst -> sst_len ) ) ; if ( e < b || ( size_t ) ( e - b ) > CDF_SEC_SIZE ( h ) * sst -> sst_len ) { DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u]""",0
822,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart>",0
823,"<S2SV_ModStart> ib ] ; memset ( d, 0, sizeof ( BLOCKD ) ) ;",0
824,<S2SV_ModStart> FN_REFLEN ] ; if ( strlen ( opt_basedir ) > sizeof ( buff ) ) { error = - 1 ; goto exit ; },0
825,<S2SV_ModStart> ; if ( key_is_positive ( key <S2SV_ModEnd> ) ) zap,1
826,"<S2SV_ModStart> ) -> filter ; memset ( & uf, 0, sizeof ( uf ) )",1
827,"<S2SV_ModStart> int n = min_t ( int, data_end - data, sizeof ( clear_buffer ) ) ; if ( n <= 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> to <S2SV_blank> decode <S2SV_blank> packet"" ) ; } <S2SV_ModStart> { int n = min_t ( int, data_end - data, sizeof ( clear_buffer ) ) ; if ( n <= 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> to <S2SV_blank> decode <S2SV_blank> packet"" ) ; } n = ( int ) ( data_end - data ) ; if ( n <= 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> to <S2SV_blank> decode <S2SV_blank> packet"" ) ; }",0
828,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
829,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
830,"<S2SV_ModStart> cleanup ; } if ( fibsize > dev -> max_fibsize || actual_fibsize64 > fibsize ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> Fib <S2SV_blank> size <S2SV_blank> too <S2SV_blank> large: <S2SV_blank> %u <S2SV_blank> bytes\\n"", dev -> max_fibsize ) ) ; rcode = - EINVAL ; goto cleanup ; } <S2SV_ModStart> -> count ; if ( copy_from_user ( & byte_count, & user_srb -> count, sizeof ( u32 ) ) ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> copy <S2SV_blank> data <S2SV_blank> size <S2SV_blank> from <S2SV_blank> user\\n"" ) ) ; rcode = - EFAULT ; goto cleanup ; }",0
831,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( cc0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorEncodeTile"", ""%s"", ""(cc0%rowsize)!=0"" ) ; return 0 ; } <S2SV_ModEnd> while ( cc",1
832,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
833,"<S2SV_ModStart> input_data, size_t input_forwards_size, size_t input_backwards_size <S2SV_ModEnd>, int flags <S2SV_ModStart> # define prolog { if ( <S2SV_ModEnd> bytes_matched >= max_bytes_matched <S2SV_ModStart> >= max_bytes_matched ) { action = ACTION_KILL ; break ; } <S2SV_ModEnd> } # define <S2SV_ModStart> ) yr_min ( input_backwards_size, RE_SCAN_LIMIT ) ; <S2SV_ModStart> input_incr ; } if ( bytes_matched >= max_bytes_matched ) { action = ACTION_KILL ; break ; } <S2SV_ModStart> ) yr_min ( input_backwards_size <S2SV_ModEnd>, RE_SCAN_LIMIT ) <S2SV_ModStart> } max_bytes_matched = ( int ) yr_min ( input_backwards_size, RE_SCAN_LIMIT ) ; <S2SV_ModStart> } max_bytes_matched = ( int ) yr_min ( input_backwards_size, RE_SCAN_LIMIT ) ; <S2SV_ModStart> } max_bytes_matched = ( int ) yr_min ( input_backwards_size, RE_SCAN_LIMIT ) ; <S2SV_ModStart> } max_bytes_matched = ( int ) yr_min ( input_backwards_size,",0
834,"<S2SV_ModStart> * returndistortion, int * returnintra ) { ( void ) recon_yoffset ; ( void ) recon_uvoffset ; ( void ) returnintra ; # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif <S2SV_ModStart> zero_mv_sse = INT_MAX, best_rd_sse <S2SV_ModEnd> = INT_MAX ; <S2SV_ModStart> = INT_MAX ; memset ( plane, 0, sizeof ( plane [ 0 ] ) ) ; memset ( plane + i, 0, sizeof ( plane [ 0 ] ) ) ; memset ( plane + i, 0, sizeof ( plane [ 0 ] ) ) ; memset ( plane + i, 0, sizeof ( plane [ 0 ] ) ) ; memset ( plane + i, 0, sizeof ( plane [ 0 ] ) ) ; memset ( plane + i, 0, sizeof ( plane [ 0 ] ) ) ; memset ( plane + i, 0,",0
835,"<S2SV_ModStart> svm, MC_VECTOR ) ; set_exception_intercept ( svm, DB_VECTOR",0
836,"<S2SV_ModStart> goto error ; if ( h -> hdr -> magic [ 0 ] == '\\0' || h -> hdr -> magic [ 1 ] == '\\0' ) { h -> hdr -> magic [ 0 ] = '\\0' ; h -> hdr -> magic [ 1 ] = '\\0' ; } else if ( h -> hdr -> magic [ 0 ] == '\\0' ) { h -> hdr -> magic [ 0 ] = '\\0' ; } else if ( h -> hdr -> magic [ 0 ] == '\\0' ) { h -> hdr -> magic [ 0 ] = '\\0' ; h -> hdr -> magic [ 1 ] = '\\0' ; } else { h -> hdr -> magic [ 0 ] = '\\0' ; } if (! h -> writable ) { h -> addr = malloc ( h -> size, PROT_READ, h -> fd, 0 ) ; if ( h -> addr == NULL ) goto error ; DEBUG ( 2, ""mmap <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; } else { h -> addr = malloc ( h -> size, PROT_READ, h -> fd, 0 ) ; if ( h -> addr == NULL ) goto error ; }",0
837,"<S2SV_ModStart> sst, const cdf_directory_t * root_storage <S2SV_ModEnd> ) { cdf_summary_info_header_t <S2SV_ModStart> break ; } if ( root_storage ) { <S2SV_ModStart> = cdf_clsid_to_mime ( root_storage -> d_storage_uuid <S2SV_ModEnd>, clsid2desc ) <S2SV_ModStart> - 2 ; } <S2SV_ModStart>, count, root_storage <S2SV_ModEnd> ) ; free",1
838,"<S2SV_ModStart> ; UWORD8 u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id ; UWORD16 i2_max_frm_num ; WORD32 pic_height_in_map_units_minus1 ; WORD32 u2_pic_wd, u2_pic_ht ; UWORD32 u2_crop_offset_y, u2_crop_offset_uv ; WORD32 u4_temp ; u4_num_reorder_frames = ih264d_count_reorder_frames ( ps_bitstrm, u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id, u2_pic_wd, u2_pic_ht, u2_frm_wd_y, u2_frm_ht_y, u2_crop_offset_uv, u4_num_reorder_frames, & u4_temp, u4_pic_wd, u2_pic_wd, u2_pic_ht, u2_crop_offset_y, u2_crop_offset_",0
839,<S2SV_ModStart> -> length ) ; if ( err ) return - EFAULT,1
840,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ; vpx_svc_parameters_t * const svc_params = ( vpx_svc_parameters_t * ) <S2SV_ModEnd> args ; VP9_COMP <S2SV_ModStart> ; if ( svc_params <S2SV_ModEnd> == NULL ) <S2SV_ModStart> == NULL ) return VPX_CODEC_INVALID_PARAM ; cpi -> svc. spatial_layer_id = params -> spatial_layer ; cpi -> svc. temporal_layer_id = params -> temporal_layer ; cpi -> lst_fb_idx = params -> lst_fb_idx ; cpi -> gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx ->",0
841,"<S2SV_ModStart> > 0 ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ) ; goto err ; } if ( end < offset ) { IP_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) - nhoff, 0 ) ) ; goto err ; }",0
842,"<S2SV_ModStart> out ) { uint32 width, length ; uint16 bitspersample ; uint16 samplesperpixel ; uint16 <S2SV_ModEnd> input_compression, input_photometric <S2SV_ModStart> ( out, TIFFTAG_COMPRESSION, input_compression ) ; if ( length!= ( uint32 ) - 1 ) { TIFFSetField ( out, TIFFTAG_IMAGELENGTH, length ) ; return FALSE ; } length = ( uint32 ) TIFFGetFieldDefaulted ( in, TIFFTAG_IMAGEWIDTH, & width ) ; TIFFSetField ( out, TIFFTAG_LENGTH, length ) ; if ( width!= ( uint32 ) - 1 ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; TIFFSetField ( out, TIFFTAG_LENGTH, length ) ; return FALSE ; } if ( length!= ( uint32 ) - 1 ) { TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXELEL, samplesperpixel ) ; } else if ( length!= ( uint32 ) - 1 ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; TIFFSetField ( out, TIFFTAG_",0
843,"<S2SV_ModStart> a ) { if (! ( a -> flags & ARCHIVE_EXTRACT_SYMLINKS ) ) { archive_set_error ( & a -> archive, 0, ""Symlinks <S2SV_blank> are <S2SV_blank> not <S2SV_blank> supported"" ) ; return ( ARCHIVE_FAILED ) ; } <S2SV_ModStart> = '\\0' ; if ( lstat ( a -> name, & st ) < 0 ) { archive_set_error ( & a -> archive, errno, ""File <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist"" ) ; return ( ARCHIVE_FAILED ) ; } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"",",0
844,"<S2SV_ModStart> ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL, rootfs -> path? rootfs -> mount : <S2SV_ModEnd> NULL )!=",1
845,"<S2SV_ModStart> inode -> i_sb ) <S2SV_ModEnd> ; bh = <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct indirectEntry * <S2SV_ModStart> -> i_location ) ; if ( ie -> indirectICB. extLength > sbi -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> extLength <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", inode -> i_ino, ie -> indirectICB. extLength ) ; make_bad_inode ( inode ) ; return ; } if ( udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ) { if ( ident == TAG_IDENT_IE ) { struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if ( ie -> indirectICB. extLength > sbi -> i_sb -> s_blocksize ) memcpy ( & iinfo -> i_location, & loc, 0, & ident ) ; if ( ident == TAG_IDENT_",0
846,<S2SV_ModStart> get_uv_tx_size ( mbmi ) ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_y ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y [ tx_size_y ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * above_uv = & lf,0
847,"<S2SV_ModStart> dst_size ) { uint16_t namelen ; <S2SV_ModStart> data < data_end && data < data_end <S2SV_ModStart> - 1 ; namelen = strlen ( name ) ; <S2SV_ModStart> += len ; <S2SV_ModEnd> for ( ; <S2SV_ModStart> ; if ( data >= data_end <S2SV_ModEnd> ) break ; <S2SV_ModStart> ; if ( data >= data_end <S2SV_ModEnd> ) break ; <S2SV_ModStart> ; if ( data >= data_end <S2SV_ModEnd> ) break ; <S2SV_ModStart> ; if (! memcmp ( data, name, namelen ) ) { switch ( * data ++ ) { case AMF_DATA_TYPE_NUMBER : snprintf ( dst, dst_size, ""%g"", av_int2double ( AV_RB64 ( data ) ) ) ; break ; case AMF_DATA_TYPE_BOOL : snprintf ( dst, dst_size, ""%s"", * data? ""true"" : ""false"" ) ; break ; case AMF_DATA_TYPE_STRING : len = bytestream_get_be16 ( & data ) ; av_strlcpy ( dst, data, ff_amf_tag_size ( data, data_end ) ) ; if ( len < 0 || len >= data_end -",0
848,"<S2SV_ModStart> ( ) ; strcpy ( t1_buf_array, t1_line_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; } else if ( strcmp ( t1_buf_array, charstringname )!= 0 ) { strcpy ( t1_buf_array, charstringname ) ; strcpy ( t1_line_array, charstringname ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; }",0
849,<S2SV_ModStart> mq_ops ) { fq -> flush_rq = flush_rq ;,0
850,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
851,<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) sub -> nsub = 0 ;,0
852,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; if (! <S2SV_ModStart>, cc ) ) return 0 <S2SV_ModStart> wc ) ; return 1 ;",1
853,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
854,"<S2SV_ModStart> __be32 daddr ; struct ip_options_rcu * inet_opt ; <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt ) { struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> -> inet_daddr ; } inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr",0
855,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
856,"<S2SV_ModStart> * mgr_hdl ; <S2SV_ModEnd> memset ( s_path <S2SV_ModStart> ( c_path ) <S2SV_ModEnd> ) ; switch <S2SV_ModStart> ( c_path, ""%s%s%d_C_XXXXXX"" <S2SV_ModEnd>, HSM_FM_SCK_PREFIX, <S2SV_ModStart> hdl -> instance <S2SV_ModEnd> ) ; if",1
857,<S2SV_ModStart> == NULL || replySize == NULL || <S2SV_ModStart> sizeof ( effect_param_t ) || replySize,0
858,"<S2SV_ModStart> ""`%s\'"", option ) ; geometry = DestroyString ( geometry",0
859,"<S2SV_ModStart> ; if ( rcu_dereference_protected ( <S2SV_ModStart> np -> opt, sock_owned_by_user ( sk ) ) ) goto done ; val = rcu_dereference_protected ( sk -> sk_omem_cache, sock_owned_by_user ( sk ) ) ; if ( copy_to_user ( optval, & rcu, sizeof ( * rcu ) ) ) return - EFAULT ; rcu_assign_pointer ( sk -> sk_omem_cache, optval ) ;",0
860,"<S2SV_ModStart> berval ) ; <S2SV_ModEnd> for ( j <S2SV_ModStart> key_data [ i ]. key_data_length [ 0 ] ) ret [ j ] -> key_data_length [ 0 ] = sizeof ( struct berval ) ; for ( j = 0 ; j < num_versions ; j ++ ) ret [ j ] -> key_data_contents [ j ] = k5_berval_new ( 0, 0, <S2SV_ModEnd> key_data [ i <S2SV_ModStart> key_data [ i ]. key_data_length [ j ] ) ; for ( j = 0 ; j < num_versions ; j ++ ) ret [ j ] -> key_data_length [ j ] = sizeof ( struct berval ) ; for ( j = 0 ; j < num_versions ; j ++ ) ret [ j ] -> key_data_contents [ j ] = k5_berval_new ( 0, 0, key_data [ i ]. key_data_length [ j ]. key_data_contents [ j ] ) ; for ( j = 0 ; j < num_versions ; j ++ ) ret [ j ] -> key_data_length [ j ] = sizeof ( struct berval ) ; for ( j",0
861,"<S2SV_ModStart> OP_ENDCATCH ) ; emit ( J, F, OP_ENDTRY ) ;",1
862,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_row_idx <S2SV_ModStart> return ; } LIBXSMM_ASSERT ( 0!= l_row && 0!= l_column ) ;",1
863,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > 0 ) { <S2SV_ModStart>, crgram, crgram_len - 1 <S2SV_ModEnd> ) ; }",0
864,"<S2SV_ModStart> uint8 result ; uint32 <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> ; STREAM s ; struct stream packet <S2SV_ModStart> return False ; packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> id <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",1
865,<S2SV_ModStart> ; if ( nolrarray [ 0 ]!= NULL ) { if ( nolrarray [ 0 ] -> st_idx >= sizeof ( krb5_last_req_entry ) ) { if ( nolrarray [ 0 ] -> st_idx >= sizeof ( krb5_last_req_entry ) ) { if ( nolrarray [ 0 ] -> st_idx >= sizeof ( krb5_last_req_entry ) ) { if ( nolrarray [ 0 ] -> st_idx >= sizeof ( krb5_last_req_entry ) ) { if ( nolrarray [ 0 ] -> st_idx >= sizeof ( krb5_last_req_entry ) ) { if ( nolrarray [ 0 ] -> st_idx >= sizeof ( krb5_last_req_entry ) ) { if ( nolrarray [ 0 ] -> st_idx >= sizeof ( krb5_last_req_entry ) ) { if ( nolrarray [ 0 ] -> st_idx >= sizeof ( krb5_last_req_entry ) ) { if ( nolrarray [ 0 ] -> st_idx >= sizeof ( krb5_last_req_entry,0
866,<S2SV_ModStart> ++ ) { if ( ( len == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD11 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD12 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD13 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD14 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD15 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD16 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD12 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD16 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD14 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD15 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD16 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD17 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD16 ) == 0 ) && ( ( ctxt ->,0
867,"<S2SV_ModStart> ( ret < 0 ) { dev_err ( & vdev -> dev, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"", __func__ ) ; return ret ; } <S2SV_ModEnd> offset = I40E_AQ_VSI_TC_QUE_OFFSET_SHIFT <S2SV_ModStart> I40E_AQ_VSI_TC_QUE_NUMBER_SHIFT ) ; if ( offset >= I40E_AQ_VSI_TC_QUE_OFFSET_MAX ) { dev_err ( & vdev -> dev, ""%s: <S2SV_blank> Invalid <S2SV_blank> TC_QUE_OFFSET <S2SV_blank> or <S2SV_blank> BASE_QUEUE <S2SV_blank> number\\n"", __func__ ) ; qmap = ( offset << I40E_AQ_VSI_TC_QUE_OFFSET_SHIFT ) | ( pow << I40E_AQ_VSI_TC_QUE_NUMBER_SHIFT ) ; if ( offset >= I40E_AQ_VSI_TC_QUE_OFFSET_MAX ) qmap = ( offset << I40E_AQ_VSI_TC_QUE_OFFSET_SHIFT ) | ( pow << I40E_AQ_VSI_TC_QUE",0
868,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
869,<S2SV_ModStart> & new_map ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> lower_first ; } ret = sort_idmaps ( & new_map ) ; if ( ret < 0 ) goto out ;,1
870,<S2SV_ModStart> } } } <S2SV_null> <S2SV_null>,0
871,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> ) ; } smb_ofile_flush ( sr, <S2SV_ModEnd> sr -> fid_ofile <S2SV_ModStart> sr -> fid_ofile <S2SV_ModEnd> ) ; (",1
872,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
873,<S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & Y,0
874,"<S2SV_ModStart> addrtype = TIPC_ADDR_ID ; memset ( & addr -> addr, 0, sizeof ( addr -> addr ) )",1
875,"<S2SV_ModStart> ( user_alloc && ( <S2SV_ModStart> PAGE_SIZE - 1 ) ) ||! access_ok ( VERIFY_WRITE, mem -> userspace_addr, mem -> memory_size",1
876,<S2SV_ModStart> NULL ) ; } quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
877,<S2SV_ModStart> ; if ( tmp_line_len > 1 && <S2SV_ModStart> ; if ( tmp_line_len > 1 && <S2SV_ModStart> ; if ( tmp_line_len > 1 && <S2SV_ModStart> ; if ( tmp_line_len > 1 && <S2SV_ModStart> ; if ( tmp_line_len > 1 && <S2SV_ModStart> ; if ( tmp_line_len > 1 && <S2SV_ModStart> ; if ( tmp_line_len > 1 && <S2SV_ModStart> ; if ( tmp_line_len > 1 && <S2SV_ModStart> ; } } if ( tmp_line_len > 1 && tmp_line_len > 1 && <S2SV_ModStart> ; if ( tmp_line_len > 1 && <S2SV_ModStart> ; if ( tmp_line_len > 1 && <S2SV_ModStart> ; if ( tmp_line_len > 1 && <S2SV_ModStart> ; if ( tmp_line_len > 1 && <S2SV_ModStart> ; if ( tmp_line_len > 1 && <S2SV_ModStart> ; if ( tmp_line_len > 1 && <S2SV_ModStart> ; if ( tmp_line_len > 1 && <S2SV_ModStart> ; } } if ( tmp_line_len > 1 && <S2SV_ModStart> ; if ( tmp_line_len > 1 && <S2SV_ModStart> ; if ( tmp_line_len > 1 && <S2SV_ModStart> ; if ( tmp_line_len > 1 && <S2SV_ModStart> ;,0
878,"<S2SV_ModStart> len ) { PyObject <S2SV_ModEnd> * u ; <S2SV_ModStart> * p ; <S2SV_ModEnd> const char * <S2SV_ModStart> char * end ; if ( len > SIZE_MAX / 6 ) return NULL ; u = PyBytes_FromStringAndSize ( ( char * ) NULL, len * 6 ) ; if ( u == NULL ) return NULL ; p = buf = PyBytes_AsString ( u ) ; if ( p == NULL ) return NULL ; p <S2SV_ModEnd> += 5 ; <S2SV_ModStart> & 0x80 ) { strcpy ( p, ""u005c"" ) ; p <S2SV_ModEnd> += 5 ; <S2SV_ModStart> } assert ( p - buf <= Py_SIZE ( u ) <S2SV_ModEnd> ) ; Py_DECREF <S2SV_ModStart> = buf ; <S2SV_ModEnd> return PyUnicode_DecodeUnicodeEscape ( <S2SV_ModStart>, NULL ) <S2SV_ModEnd> ; } <S2SV_null>",0
879,"<S2SV_ModStart> { if ( user_sid_size > ( ( record_data_size - 4 ) - user_sid_offset ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_RUNTIME, LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS, ""%s: <S2SV_blank> user <S2SV_blank> SID <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds."", function ) ; goto on_error ; } if ( <S2SV_ModStart> 0 ) { if ( strings_size > ( ( record_data_size - 4 ) - strings_offset ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_RUNTIME, LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS, ""%s: <S2SV_blank> strings <S2SV_blank> size <S2SV_blank> value <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds."", function ) ; goto on_error ; } <S2SV_ModStart> 0 ) { if ( strings_size > ( ( record_data_size - 4 ) - strings_offset ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_RUNTIME, LIBCERROR_RUNTIME_ERROR_VALUE_OUT",0
880,"<S2SV_ModStart> WaveHeader WaveHeader ; int format_chunk = 0 ; <S2SV_ModStart>, format ; if ( format_chunk ++ ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",1
881,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",0
882,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ;,0
883,<S2SV_ModStart> ~ SNDRV_TIMER_IFLG_RUNNING ; list_del_init ( & timeri -> ack_list ) ; list_del_init ( & timeri -> active_list ) ;,1
884,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> ; int setimes <S2SV_ModEnd>, targisdir, <S2SV_ModStart> ; if ( stat ( targ, & stb )!= 0 || <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart>. st_mode )!= 0 || <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart>. st_mode )!= 0 || <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart>. st_mode )!= 0 || <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart>. st_mode )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> be <S2SV_blank> a <S2SV_blank> directory"", __func__ ) ; if ( stat ( targ, & stb )!= 0 || <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart>. st_mode )!= 0 || <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart>. st_mode )!= 0 || <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart>. st_mode )!= 0 || <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart>. st_mode )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> be <S2SV_blank> a <S2SV_blank> directory"", __func__ ) ; if ( stat ( targ, & stb )!= 0 || <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart>. st_",0
885,"<S2SV_ModStart> else if ( chanacs_source_has_flag ( mc, si, CA_FOUNDER ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> not <S2SV_blank> restricted <S2SV_blank> to <S2SV_blank> FOUNDER."" ), channel ) ; return ; } if ( <S2SV_ModStart> else if ( chanacs_source_has_flag ( mc, si, CA_CLEAR ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> restricted <S2SV_blank> to <S2SV_blank> FOUNDER."" ), channel ) ; return ; } if ( <S2SV_ModStart> else if ( chanacs_source_has_flag ( mc, si, CA_NOFOLLOW ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> closed."" ), channel ) ; return ; } if ( <S2SV_ModStart> else if ( chanacs_source_has_flag ( mc, si, CA_NOFOLLOW ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> closed."" ), channel ) ; return ; }",0
886,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
887,"<S2SV_ModStart> ; if ( strcmp ( sub_demuxer -> name, ""srt"" ) && strcmp ( sub_demuxer -> name, ""ass"" ) ) goto error ; if (",1
888,"<S2SV_ModStart> null_server ; int need_error_free = 0 ; int local_rcache = 0, local_authcon = 0 ; problem = 0 ; if ( version &&! problem ) { response = 2 ; } else if ( version && strcmp ( inbuf. data, version ) ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; } else if ( appl_version && strcmp ( inbuf. data, appl_version ) ) { if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } if ( flags & KRB5_RECVAUTH_NOAUTH ) { if (! problem ) { problem = KRB5_SENDAUTH_NOAUTHVERS ; } else { if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; } else { response = 2 ; } } if ( flags & KRB5_RECVAUTH_SKIP_AUTH_VERSION ) { if (! ( flags & KRB5_RECVAUTH_SKIP_VERSION ) { if ( retval = krb5_read_message ( context, fd, & inbuf ) ) return ( retval",0
889,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
890,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
891,<S2SV_ModStart> dptr ++ = ROSE_CALL_REQ_ADDR_LEN_VAL <S2SV_ModEnd> ; memcpy (,1
892,<S2SV_ModStart> = new_ns ; new_ns -> mounts ++ ;,1
893,"<S2SV_ModStart> ; if ( vpx_calloc ( ( sizeof ( ENTROPY_CONTEXT_PLANES ) * ( oci -> mb_cols + 1 ), sizeof ( ENTROPY_CONTEXT_PLANES ), 1 ) < 0 ) goto allocation_fail ; if ( vpx_calloc ( ( sizeof ( ENTROPY_CONTEXT_PLANES ) * ( oci -> mb_rows + 1 ), sizeof ( ENTROPY_CONTEXT_PLANES ), 1 ) < 0 ) goto allocation_fail ; if ( vpx_calloc ( ( oci -> mb_cols + 1 ) * ( oci -> mb_rows + 1 ), sizeof ( ENTROPY_CONTEXT_PLANES ) * ( oci -> mb_cols + 1 ), 1 ) ; if ( vpx_calloc ( ( sizeof ( ENTROPY_CONTEXT_PLANES ) * ( oci -> mb_cols + 1 ), sizeof ( ENTROPY_CONTEXT_PLANES ) * ( oci -> mb_rows + 1 ) * ( oci -> mb_cols + 1 ) * ( oci -> mb_rows + 1 ), sizeof ( ENTROPY_CONTEXT_PLANES ) *",0
894,<S2SV_ModStart> ; zip_object_handlers. get_gc = php_zip_get_gc ; zip_object_handlers.,1
895,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if <S2SV_ModEnd> ( iova < <S2SV_ModStart> mem -> iova || length > mem -> length || iova > <S2SV_ModEnd> mem -> iova <S2SV_ModStart> mem -> length - length ) return - EFAULT ; return <S2SV_ModEnd> 0 ; default,1
896,"<S2SV_ModStart> ( ndo, ""%s"", icmp6_tstr <S2SV_ModEnd> ) ) ;",0
897,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
898,<S2SV_ModStart> sent = 0 <S2SV_ModEnd> ; smb_msg.,1
899,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; if ( ref -> ref > INT_MAX / 2 ) return false ; <S2SV_ModStart> ref ++ ; return true ;,1
900,<S2SV_ModStart> fs -> clusters + <S2SV_ModEnd> 1 ) get_fat,1
901,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
902,<S2SV_ModStart> sk_nulls_node ) ; sk_nulls_node_init ( & sk -> sk_nulls_node ) ;,1
903,<S2SV_ModStart> } ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> <S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> ; } } ps_dec -> i2_total_mbs_coded += u1_num_mbs ; ps_dec -> i2_prev_slice_mbx = 0 ; ps_dec -> i2_prev_slice_mbx = 0 ; ps_dec -> i2_prev_slice_mbx = 0 ; ps_dec -> i2_prev_slice_mbx = 0 ; ps_dec -> ps_cur_slice -> i2_prev_slice_mbx = 0 ; ps_dec -> ps_cur_slice -> i2_prev_slice_mbx = 0 ; ps_dec -> ps_cur_slice -> i2_prev_slice_mbx = 0 ; ps_dec -> ps_cur_slice -> i2_prev_slice_mbx = 0 ; ps_dec -> ps_cur_slice -> i2_prev_slice_mbx = 0 ; ps_dec,0
904,<S2SV_ModStart> (! mm ||! mm -> env_end,1
905,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static inline bool <S2SV_ModEnd> parse_rock_ridge_inode ( struct <S2SV_ModStart> inode, 0, NULL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; result = <S2SV_ModEnd> parse_rock_ridge_inode_internal ( de <S2SV_ModStart>, inode, 14, NULL <S2SV_ModEnd> ) ; }",0
906,<S2SV_ModStart> * inotify_new_group ( <S2SV_ModEnd> unsigned int max_events <S2SV_ModStart> -> inotify_data. fa = NULL <S2SV_ModEnd> ; group -> <S2SV_ModStart> -> inotify_data. user = get_current_user ( ) ; if ( atomic_inc_return ( & group -> inotify_data. user -> inotify_devs ) > inotify_max_user_instances ) { fsnotify_put_group ( group ) ; return ERR_PTR ( - EMFILE ) ; } <S2SV_ModEnd> return group ;,1
907,<S2SV_ModStart> [ p ] && in -> linesize [ p ],1
908,"<S2SV_ModStart> ) ; } if ( buflen < pcount * sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, ( int ) ( buflen ) ) ) ) ;",0
909,<S2SV_ModStart> screen -> buffers [ 0 ] && screen -> buffers [ 1 ],0
910,"<S2SV_ModStart> SCALAR_VALUE ) { coerce_reg_to_size ( & <S2SV_ModStart>, size ) ; coerce_reg_to_size ( & <S2SV_ModStart>, size ) ;",0
911,"<S2SV_ModStart> uint16 strip, nstrips = TIFFNumberOfStrips ( in ) ; uint32 stripsize = TIFFStripSize ( in ) ; if ( stripsize == 0 ) { TIFFError ( """", ""Strip <S2SV_blank> size <S2SV_blank> is <S2SV_blank> zero!"" ) ; return 0 ; }",0
912,<S2SV_ModStart> base_name ) ; char need_to_append_dot ; struct search_domain * dom ; if (! base_len ) return NULL ; <S2SV_ModEnd> need_to_append_dot = base_name <S2SV_ModStart> : 1 ; <S2SV_ModEnd> for ( dom,1
913,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
914,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = -,1
915,"<S2SV_ModStart>, offset, rows, <S2SV_ModStart> -> rows ; rows = ( number_planes_filled > 1 )? number_planes_filled : 1 ; <S2SV_ModStart> -> rows ; rows = ( number_planes_filled > 1 )? number_planes_filled : 2 ; <S2SV_ModStart> -> rows ; if ( rows > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> -> rows ; rows = ( number_planes_filled > 1 )? number_planes_filled : ( number_planes_filled > 1 )? number_planes_filled : 2 ; <S2SV_ModStart> -> rows ; rows = ( number_planes_filled > 1 )? number_planes_filled : 2 ; <S2SV_ModStart> -> rows ; if ( rows > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> -> rows ; rows = ( number_planes_filled > 1 ) { pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_",0
916,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if (! context ) return FALSE ; <S2SV_ModStart> == 0 ) { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModStart> 0xFF ) ; } <S2SV_ModStart> < originalSize ) { if (! <S2SV_ModStart> i ], context -> priv -> PlaneBuffersLength, originalSize ) ) return FALSE ; } else { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModEnd> CopyMemory ( context <S2SV_ModStart> originalSize ) ; } <S2SV_ModStart> planeSize ; } return TRUE ;",1
917,<S2SV_ModStart> policy ) { if (! inode_owner_or_capable ( inode ) ) return - EACCES ;,1
918,"<S2SV_ModStart> value ) { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; } else if ( value ) { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } } else if ( value ) { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ; } else { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; }",0
919,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
920,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
921,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> cg_wlock ( & <S2SV_ModStart> ) ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } <S2SV_ModEnd> cg_wlock ( &,0
922,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
923,"<S2SV_ModStart> size ) { size_t res ; if ( check_mul_overflow ( num, size, & res ) ) abort ( ) ; <S2SV_ModStart> = malloc ( res <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) { memset <S2SV_ModEnd> ( ptr,",0
924,<S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
925,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> * res ; _Py_IDENTIFIER ( __dict__ ) ; <S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart> ( self, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } <S2SV_ModStart> ) { res = _Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } <S2SV_ModEnd> return Py_BuildValue (",0
926,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
927,"<S2SV_ModStart> -> private_data ; u64 id ; <S2SV_ModStart> arg ) ; <S2SV_ModEnd> case PERF_EVENT_IOC_PERIOD : <S2SV_ModStart> return perf_event_period ( event <S2SV_ModEnd>, ( u64 <S2SV_ModStart> return ret ; } if ( flags & PERF_EVENT_IOC_ID ) { u64 id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_SET_OUTPUT : { int ret ; if ( arg!= - 1 ) { ret = perf_event_set_output ( event, output_event ) ; } else { ret = perf_event_set_output ( event, NULL ) ; } return ret ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
928,<S2SV_ModStart> sacked_out ) ; if ( newly_acked_sacked <= 0 || WARN_ON_ONCE (! tp -> prior_cwnd ) ) return ;,1
929,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> ) { const PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> ] ) ; ++ counts -> <S2SV_ModEnd> uv_mode [ y_mode",0
930,"<S2SV_ModStart> mask ) { struct skcipher_tfm * tfm = crypto_alloc_skcipher ( <S2SV_ModEnd> type, mask <S2SV_ModStart> mask ) ; if ( tfm ) crypto_free_skcipher ( tfm -> skcipher ) ; return tfm ;",0
931,"<S2SV_ModStart> EINVAL ; } if ( cmd_q -> ccp -> ops -> hash_ctx ) { if ( cmd_q -> ccp -> ops -> hash_ctx ) { if ( cmd_q -> ccp -> ops -> hash_ctx ( cmd_q, & ctx )!= & ccp_workarea_ops -> hash_ctx ) return - EINVAL ; } else { if ( cmd_q -> ccp -> ops -> hash_ctx ( cmd_q, & ctx )!= & ccp_workarea_ops -> hash_ctx ( cmd_q, & op ) ) { if ( cmd_q -> ccp -> ops -> hash_ctx ) { if ( cmd_q -> ops -> hash_ctx ( cmd_q, & ctx )!= & ccp_workarea_ops -> hash_ctx ) return - EINVAL ; } else { if ( cmd_q -> ccp -> ops -> hash_ctx ( cmd_q, & ctx )!= & ccp_workarea_ops -> hash_ctx ( cmd_q, & op ) ) return - EINVAL ; } }",0
932,"<S2SV_ModStart> c -> tile_width <S2SV_ModEnd>, 16 ) <S2SV_ModStart>, 16 ) * 3 ; aligned_height = <S2SV_ModEnd> c -> tile_height",0
933,"<S2SV_ModStart> iv ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
934,"<S2SV_ModStart> srcptr += stride ; dstptr += JPC_QMFB_COLGRPSIZE ; srcptr2 = & a [ hstartcol * stride + 1 ] ; n = numrows - hstartcol ; while ( n -- > 0 ) { jas_free ( buf ) ; buf = jas_alloc3 ( bufsize, JPC_QMFB_JOINBUFSIZE, sizeof ( joinbuf ) ) ; } dstptr += JPC_QMFB_COLGRPSIZE ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += 2 * stride ; srcptr += stride ; } srcptr = buf ; dstptr = & a [ hstartcol * stride ] ; n = numrows - hstartcol ; while ( n -- > 0 ) { jas_free ( buf ) ; if (! ( buf = jas_alloc3 ( bufsize, JPC_QMFB_JOINBUFSIZE, sizeof ( joinbuf ) ) ) { abort ( )",0
935,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
936,"<S2SV_ModStart> p ) { return <S2SV_ModEnd> chdlc_print ( ndo <S2SV_ModStart>, p, h -> len <S2SV_ModEnd> ) ; }",1
937,"<S2SV_ModStart> = 0 ; rc = cifs_read_sb_info ( cifs_sb, xid, & cifs_smb_cache, & cifs_sb -> smb_cache ) ; if ( rc ) goto out ;",0
938,<S2SV_ModStart> -> len && SKB_EXT_ERR ( skb ) -> opt_stats <S2SV_ModEnd> ) put_cmsg (,1
939,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ) ;",1
940,"<S2SV_ModStart> { if (! SSL_C_IS_EXPORT ( s -> s3 -> tmp. new_cipher ) ) { al = SSL_AD_UNEXPECTED_MESSAGE ; SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE, SSL_R_UNEXPECTED_MESSAGE ) ; goto f_err ; } if (",1
941,<S2SV_ModStart> { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE ) { return SECURE_ELEMENT_ERROR_BUF_SIZE,1
942,"<S2SV_ModStart> + 1 ; if ( iframe -> max_niv - 1 > session -> max_settings ) { rv = nghttp2_session_terminate_session_with_reason ( session, NGHTTP2_ENHANCE_YOUR_CALM, ""SETTINGS_OVERFLOW"" ) ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } break ; } <S2SV_ModStart> + 1 ; if ( iframe -> max_niv - 1 > session -> max_settings ) { rv = nghttp2_session_terminate_session_with_reason ( session, NGHTTP2_ENHANCE_YOUR_CALM, ""SETTINGS_OVERFLOW"" ) ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; }",0
943,<S2SV_ModStart> = ucounts ; new_ns -> mounts = 0 ; new_ns -> pending_mounts = 0 ;,1
944,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
945,"<S2SV_ModStart> ; if ( cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON ) ) { if ( x86_pmu. cntval_mask & ( 1ULL << eax. split. bit_width ) ) x86_pmu. cntval_mask |= ( 1ULL << eax. split. bit_width ) - 1 ; if ( x86_pmu. cntval_mask & ( 1ULL << eax. split. bit_width ) ) x86_pmu. cntval_mask |= ( 1ULL << eax. split. bit_width ) - 1 ; } else if ( x86_pmu. cntval_mask & ( 1ULL << eax. split. bit_width ) ) x86_pmu. cntval_mask &= ( 1ULL << eax. split. bit_width ) - 1 ; if ( x86_pmu. cntval_mask & ( 1ULL << eax. split. bit_width ) ) x86_pmu. cntval_mask |= ( 1ULL << eax. split. bit_width ) - 1 ;",0
946,"<S2SV_ModStart>. dimensions ; # ifdef STB_VORBIS_DIVIDES_IN_RESIDUE uint16 * * part_classdata = ( uint8 * * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * part_classdata ) ) ; # else int * * classifications = ( int * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * classifications ) ) ; # endif CHECK ( f ) ; # ifndef STB_VORBIS_DIVIDES_IN_RESIDUE int * * part_classdata = ( int * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * part_classdata ) ) ; # else int * * classifications = ( int * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * classifications ) ) ; # endif",0
947,<S2SV_ModStart> ; u32 now ; lock_sock ( sk ) <S2SV_ModStart> ; now = TCP_SKB_CB ( skb ) -> last_oow_ack_time <S2SV_ModEnd> ; challenge_count = <S2SV_ModStart> ) { challenge_timestamp = TCP_SKB_CB ( skb ) -> last_oow_ack_time <S2SV_ModEnd> ; } if,0
948,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
949,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, const TOKENEXTRA * * tp, const TOKENEXTRA * stop ) { TOKENEXTRA * p = * tp ; const struct vpx_token * const a = & vp9_coef_encodings [ t ] ; const vpx_extra_bit * const b = & vp9_extra_bits [ t ] ; int i = 0 ; int v = a -> value ; if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - 2 * p -> skip_eob_node ) ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int n = UNCONSTRAINED_NODES - p -> skip_eob_node ; int i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int n = UNCONSTRAINED_NODES - p",0
950,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> 16 ) ; vpx_clear_system_state ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> = wb ; vpx_rb_bytes_written ( & wb ) ; data += first_part_size ; vpx_compute_update_table <S2SV_ModEnd> ( ) ;",0
951,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
952,"<S2SV_ModStart> ret, n ; if ( hdesc -> bLength < sizeof ( struct hid_descriptor ) ) { dbg_hid ( ""hid <S2SV_blank> descriptor <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - EINVAL ; } <S2SV_ModStart> ENODEV ; } if ( hdesc -> bLength < sizeof ( struct hid_descriptor ) ) { dbg_hid ( ""hid <S2SV_blank> descriptor <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - EINVAL ; } <S2SV_ModStart> bCountryCode ; for ( n = 0 ; n < hdesc -> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if ( rsize > HID_MAX_DESCRIPTOR_SIZE ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - EINVAL ; }",0
953,"<S2SV_ModStart> ) { struct ikev2_id id ; unsigned int <S2SV_ModEnd> id_len, idtype_len <S2SV_ModStart> * typedata ; ND_TCHECK2 ( * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } <S2SV_ModStart> case ID_VPN_ADDR : ND_PRINT ( ( ndo, "" <S2SV_blank> vpx:"" ) ) ; dumpascii = 1 ; break ; case ID_RFC822_ADDR : ND_PRINT ( ( ndo, "" <S2SV_blank> rfc822:"" ) ) ; dumphex = 1 ; break ; case ID_IPV6_ADDR : ND_PRINT ( ( ndo, "" <S2SV_blank> ipv6:"" ) ) ; dumpascii = 1 ; break ; case ID",0
954,<S2SV_ModStart> group_dead ) ; exit_mm ( tsk ) ; trace_sched_process_exit ( ) ; exit_fs ( ) ; exit_files ( ) ; exit_io_context ( ) ; exit_files ( ) ; exit_files ( ) ; exit_files ( ) ; exit_files ( ) ; exit_files ( ) ; exit_io_context ( ) ; exit_files ( ) ; exit_files ( ) ; exit_files ( 0 ) ; exit_files ( 0 ) ; exit_files ( 0 ) ; exit_files ( tsk ) ; exit_io_context ( ) ; exit_files ( ) ; exit_files ( ) ; exit_io_context ( ) ; exit_files ( ) ; exit_files ( ) ; exit_files ( ) ; exit_files ( ) ; exit_files ( ) ; exit_files ( ) ; exit_files ( ) ; exit_files ( ) ; exit_files ( 1 ) ; exit_files ( 0 ) ; exit_files ( 1 ) ; exit_files ( 0 ) ; exit_io_context ( ) ; exit_files ( 1 ) ; exit_files ( 1 ) ; exit_files (,0
955,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> data ) { <S2SV_ModEnd> add_preferred_base_object ( name <S2SV_ModStart> |= OBJECT_ADDED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
956,"<S2SV_ModStart> data ) ) { jas_eprintf ( ""Bad <S2SV_blank> data <S2SV_blank> length: <S2SV_blank> %d\\n"", sizeof ( mif_cmpt_t ) ) ; goto error ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { jas_eprintf ( ""Bad <S2SV_blank> data <S2SV_blank> length: <S2SV_blank> %d\\n"", sizeof ( mif_cmpt_t ) ) ; goto error ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { jas_eprintf ( ""Bad <S2SV_blank> data <S2SV_blank> length: <S2SV_blank> %d\\n"", sizeof ( mif_data_t ) ) ; goto error ; } <S2SV_ModStart> ) ) { jas_eprintf ( ""Bad <S2SV_blank> data <S2SV_blank> length: <S2SV_blank> %d\\n"", sizeof ( mif_data_t ) ) ; goto error ; }",0
957,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
958,"<S2SV_ModStart>, fft_jmp ; WORD32 xt0_0, yt1_0, yt1_0, xt2_0, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_l1_0, x_l1_1, x_l2_1 ; WORD32 x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_l1_0, x_l1_1 ; WORD32 x_l2_0, x",0
959,<S2SV_ModStart> ; if ( unlikely ( tag == ASN1_EOC ) ) goto invalid_eoc ; if ( -- indef_level <= 0 ) { if ( datalen - dp < 1 ) goto data_overrun_error ; } if ( <S2SV_ModStart> <= 0x7f ) goto indefinite_len_primitive ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> > sizeof ( len <S2SV_ModEnd> ) - 1 <S2SV_ModStart> goto data_overrun_error ; len = 0 ; for ( ; n > 0 ; n -- ) { len <<= 8 ; len |= data [ dp ++ ] ; } <S2SV_ModEnd> dp += len <S2SV_ModStart> ; goto next_tag ; } if ( len == ASN1_INDEFINITE_LENGTH ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } if ( len == ASN1_INDEFINITE_LENGTH ) ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next,0
960,<S2SV_ModStart> ) val ; <S2SV_ModEnd> memset ( ptr,1
961,"<S2SV_ModStart> mntent -> mnt_dir, 0",0
962,"<S2SV_ModStart> PHP_MD5_CTX ctx ; if ( sig_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD5_CTX ctx ; if ( sig_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD5_CTX ctx ; if ( sig_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD5_CTX ctx ; if ( sig_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD5_CTX ctx ; if ( sig_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD5_CTX ctx ; if ( sig_len < sizeof ( buf",0
963,<S2SV_ModStart> ] <= max && value [ n ] - min < field -> maxusage <S2SV_ModStart> && field -> value [ n ] - min < field -> maxusage && field -> <S2SV_ModStart> <= max && value [ n ] - min < field -> maxusage &&,1
964,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
965,<S2SV_ModStart> if ( argReg > <S2SV_ModEnd> regsz ) { <S2SV_ModStart> regsz ) { return ;,1
966,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ;",0
967,"<S2SV_ModStart> 0 ) ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> -> i_mount, args -> rmtvaluelen <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; return 0 <S2SV_ModStart> -> valuelen < args -> rmtvaluelen ) { args -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; return XFS_ERROR <S2SV_ModStart> -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; } return",1
968,"<S2SV_ModStart> ( * info ) + size ; size_t totalram_pages = ( size >> PAGE_SHIFT ) + 2 ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) { info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; }",0
969,<S2SV_ModStart> endif # endif # if defined ( SUPPORT_MYSQL_BIND ) && defined ( SUPPORT_MYSQL_BIND ) && defined ( SUPPORT_MYSQL_BIND ) && defined ( SUPPORT_MYSQL_BIND ) && defined ( SUPPORT_MYSQL_BIND ) && defined ( SUPPORT_MYSQL_BIND ) && defined ( SUPPORT_MYSQL_BIND ) && defined ( SUPPORT_MYSQL_BIND ) && defined ( SUPPORT_MYSQL_BIND ) && defined ( SUPPORT_MYSQL_BIND ) && defined ( SUPPORT_MYSQL_BIND ) && defined ( SUPPORT_MYSQL_BIND ) && defined ( SUPPORT_MYSQL_BIND ) && defined ( SUPPORT_MYSQL_BIND ) && defined ( SUPPORT_MYSQL_BIND ) && defined ( SUPPORT_MYSQL_BIND ) && defined ( SUPPORT_MYSQL_BIND ) && defined ( SUPPORT_MYSQL_BIND ) && defined ( SUPPORT_MYSQL_BIND ) && defined ( SUPPORT_MYSQL_BIND ) && defined ( SUPPORT_MYSQL_BIND ) && defined ( SUPPORT_MYSQL_BIND ) && defined ( SUPPORT_,0
970,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) &&! test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) &&",1
971,"<S2SV_ModStart> ) ) ; if ( LTXTQUERY_TOO_BIG ( state. num, state. sumlen ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""ltxtquery <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ) ) ;",1
972,"<S2SV_ModStart> int need = 0 ; Char * line ; char * lp2 <S2SV_ModStart> screen, { need *= 4 ; lp2 = ( Char * ) malloc ( need + 1 ) ; if ( lp2 == 0 ) lp2 = ( Char * ) malloc ( 2 * ( size_t ) ( need + 1 ) ) ; if ( lp2 == 0 ) lp2 = ( Char * ) malloc ( 2 * ( size_t ) ( need + 1 ) ) ; if ( lp2 == 0 ) lp2 = ( Char * ) malloc ( 2 * ( size_t ) ( need + 1 ) ) ; if ( lp2 == 0 ) lp2 = ( Char * ) malloc ( 2 * ( size_t ) ( need + 1 ) ) ; if ( lp2 == 0 ) lp2 = ( Char * ) malloc ( 2 * ( size_t ) ( need + 1 ) ) ; if ( lp2 == 0 ) lp2 = ( Char * ) malloc ( 2 * ( size_t ) ( need + 1 ) ) ; if ( lp2 == 0 ) lp2 = ( Char * ) malloc ( 2 * ( size_t ) ( need + 1 ) ) ;",0
973,<S2SV_ModStart> ; if (! EXT4_SB ( inode -> i_sb ) -> s_journal <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd>! handle ),1
974,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static JsVarString <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> = 0.0000001 ; JsVarString <S2SV_ModEnd> stopAtError = 0.0000001 <S2SV_ModStart> ( isnan ( val ) ) strncat ( str, ""NaN"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( val < 0 ) strncat ( str, ""-Infinity"" <S2SV_ModEnd>, len ) <S2SV_ModStart> else strncat ( str <S2SV_ModEnd>, ""Infinity"",",0
975,"<S2SV_ModStart> ( f, ""PG%31[ <S2SV_blank> \\t]%c%c%31[ <S2SV_blank> \\t+-]%d%31[ <S2SV_blank> \\t]%d%31[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp,",1
976,"<S2SV_ModStart> ( size < 5 + 1 <S2SV_ModEnd> ) ASSERT ( <S2SV_ModStart> ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; if ( size < 6 + 1 ) ASSERT ( result!= buf ) ; ASSERT ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) == 0 ) ; if ( result!= buf ) free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 )",0
977,<S2SV_ModStart> cycles ) ; add_interrupt_bench ( 0 ) ;,0
978,"<S2SV_ModStart> LEX_ID ) { snprintf <S2SV_ModEnd> ( str, <S2SV_ModStart> ( str, ""%s"", jslGetTokenValueAsString ( ) ) ; } else if ( lex -> tk == LEX_STRING ) { snprintf ( str, len, ""String: <S2SV_blank> \'%s\'"", jslGetTokenValueAsString ( ) ) ; strncat ( str, ""\\'"", len ) ; } else if ( lex -> tk == LEX_COMMENT ) { snprintf ( str, ""%s"", jslGetTokenValueAsString ( ) ) ; strncat ( str, ""%s"", jslGetTokenValueAsString ( ) ) ; } else if ( lex -> tk == LEX_COMMENT ) { snprintf ( str, ""%s\\n"", jslGetTokenValueAsString ( ) ) ; strncat ( str, ""\\'"", len ) ; } else if ( lex -> tk == LEX_COMMENT ) { snprintf ( str, ""%s"", jslGetTokenValueAsString ( ) ) ; strncat ( str, ""%s"", jslGetTokenValueAsString ( ) ) ; } else if ( lex -> tk == LEX_COMMENT ) { snprintf",0
979,"<S2SV_ModStart> = "".tgz"" ; if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; } else if ( ( st. st_mode & S_IFMT ) == S_IFLNK ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; } else if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; } else if ( ( st. st_mode & S_IFMT ) == S_IFLNK ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; } else if ( ( st. st_mode & S_IFMT ) == S_IFDIR ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ;",0
980,,1
981,"<S2SV_ModStart> * output ; MagickBooleanType status ; <S2SV_ModStart> ) ; } status = MagickTrue ; <S2SV_ModStart> i ++ ) { <S2SV_ModEnd> input = fopen_utf8 <S2SV_ModStart> input ) ) if ( fputc ( ( char ) c, output )!= c ) status = MagickFalse ; <S2SV_ModStart> ( void ) fclose ( input <S2SV_ModEnd> ) ; ( <S2SV_ModStart> ( void ) remove_utf8 ( argv [ i ] ) ; } ( void ) fclose ( <S2SV_ModEnd> output ) ; <S2SV_ModStart> ; return ( status <S2SV_ModEnd> ) ; }",1
982,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
983,"<S2SV_ModStart> ; fail : blkdev_put ( bdev, FMODE_READ | FMODE_WRITE | FMODE_EXCL ) ;",0
984,"<S2SV_ModStart> passwd * pwd, const char * prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> ( fp = safe_mkstemp ( & tmpname, prefix, ""/etc"" ) ) == NULL ) return - 1 ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( lckpwdf ( ) < 0 ) goto fail ; pwf = fopen ( PASSWD_FILE, ""r"" ) ; if (! pwf ) { buflen *= 2 ; linebuf = malloc ( buflen ) ; if (! linebuf ) break ; contlen = strlen ( linebuf ) ; if ( fgets ( & linebuf [ contlen ], buflen / 2, pwf ) == NULL ) break ; contlen = strlen ( linebuf ) ; } if (! found && linebuf [ namelen ] == ':' &&! strncmp ( linebuf, pwd -> pw_name, namelen ) ) { if ( putpwent ( pwd, fp ) < 0 ) goto fail ; found = true ; } rc = close_stream ( fp ) ; if ( rc!= 0 ) goto fail",0
985,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
986,"<S2SV_ModStart> s2 ) { const size_t len = strlen ( s1 ) ; return memcmp <S2SV_ModEnd> ( s1, <S2SV_ModStart> 1U ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
987,"<S2SV_ModStart> TRUE ; } char * const stanza_from = xmpp_stanza_get_from ( stanza ) ; char * const stanza_to = xmpp_stanza_get_to ( stanza ) ; Jid * const stanza_to = xmpp_stanza_get_from ( stanza ) ; Jid * const stanza_from = jid_create ( stanza_from ) ; char * const stanza_from = xmpp_stanza_get_from ( stanza ) ; if (! stanza_from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> stanza <S2SV_blank> from <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } char * const stanza_from = xmpp_stanza_get_from ( stanza ) ; Jid * const stanza_to = xmpp_stanza_get_from ( stanza ) ; Jid * const stanza_from = jid_create ( stanza_from ) ; char * const stanza_from = xmpp_stanza_get_from ( stanza ) ; if (! stanza_from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> stanza <S2SV_blank> from <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } char * const stanza",0
988,"<S2SV_ModStart> } if ( sdsLength ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { addReplyError ( c, ""RDB <S2SV_blank> file <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sdsLength ( o -> ptr ) ) ; goto badfmt ; } <S2SV_ModStart> badfmt : if ( sdsLength ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { addReplyError ( c, ""RDB <S2SV_blank> file <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sdsLength ( o -> ptr ) ) ; goto badfmt ; } <S2SV_ModStart>. rdb_filename ) { if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { addReplyError ( c, ""RDB <S2SV_blank> file <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sdsLength ( o -> ptr ) ) ) { addReplyError ( c, ""RDB <S2SV_blank> file <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> (%d)"", sdsLength ( o -> ptr ) ) ; goto badfmt ; }",0
989,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
990,"<S2SV_ModStart> ) ) { global_option_print ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP <S2SV_ModEnd>, NULL, <S2SV_ModStart> ) ) { global_option_print ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; log_flush ( LOG_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { global_option_print ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL,",0
991,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; BT_DBG (,1
992,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
993,"<S2SV_ModStart> md -> raw_packet, <S2SV_ModEnd> st -> st_v1_new_iv <S2SV_ModStart> md -> raw_packet, <S2SV_ModEnd> st -> st_v1_new_iv <S2SV_ModStart> md -> raw_packet, <S2SV_ModEnd> st -> st_v1_new_iv",0
994,<S2SV_ModStart> ; if ( IMPEG2D_UNSUPPORTED_DIMENSIONS == e_error ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = 0 ; ps_op -> s_ivd_video_decode_op_t. u4_ip_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_ip_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_ip_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_ip_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; },0
995,<S2SV_ModStart> * zone ; size_t tilemap_size ; <S2SV_ModStart>. height ; tilemap_size = <S2SV_ModEnd> x_size * y_size <S2SV_ModStart> struct map_tile ) ; if ( x_size == 0 || tilemap_size / x_size / sizeof ( struct map_tile )!= y_size ||! ( tilemap = malloc ( tilemap_size,1
996,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ; return ( 0 ) <S2SV_ModStart>, length ) ) ; ND_TCHECK ( cp [ 2 ] <S2SV_ModStart> 4 ) { ND_TCHECK2 ( cp [ len ], 4 ) ; <S2SV_ModStart> ) ; } ND_TCHECK2 ( cp [ len ], 4 ) ; <S2SV_ModStart> ) ; return ( 0 ) ; ND_TCHECK2 ( cp [ len ], 4 ) ; <S2SV_ModStart> ) ; } return ( 0 ) ;",0
997,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * print_string <S2SV_ModStart> { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> item -> valuestring ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
998,"<S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img,",1
999,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> ++ ; ret = <S2SV_ModStart> buf ) ; if ( ret!= 1 ) { L_WARNING ( ""prestring <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } <S2SV_ModStart> ++ ; ret = <S2SV_ModStart> + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { L_WARNING ( ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos <S2SV_blank> file\\n"" ) ; return 1 ; } <S2SV_ModStart> buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { L_WARNING ( ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos <S2SV_blank> file\\n"" ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"",",0
1000,<S2SV_ModStart> if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks,1
1001,"<S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu,",1
1002,<S2SV_ModStart> ) ; } else if ( term. screen_width > term. screen_height ) { term. screen_width = term. screen_height = 0 ; } else if ( term. screen_height > term. screen_width ) { term. screen_height = term. screen_width ; } else if ( term. screen_width < term. screen_height ) { term. screen_width = 0 ; } else if ( term. screen_height > term. screen_height ) { term. screen_height = 0 ; } else if ( term. screen_width > term. screen_width ) { term. screen_width = 0 ; } else if ( term. screen_height > term. screen_height ) { term. screen_height = term. screen_height ; },0
1003,<S2SV_ModStart> studio_profile ) { if ( s -> avctx -> profile!= FF_PROFILE_MPEG4_SIMPLE_STUDIO ) s -> avctx -> profile = FF_PROFILE_MPEG4_SIMPLE_STUDIO ; <S2SV_ModStart> studio_profile ) { if ( s -> avctx -> profile!= FF_PROFILE_MPEG4_SIMPLE_STUDIO ) s -> avctx -> profile = FF_PROFILE_MPEG4_SIMPLE_STUDIO ; <S2SV_ModStart> studio_profile ) { if ( s -> avctx -> profile!= FF_PROFILE_MPEG4_SIMPLE_STUDIO ) s -> avctx -> profile = FF_PROFILE_MPEG4_SIMPLE_STUDIO ; } else s -> avctx -> profile = FF_PROFILE_MPEG4_SIMPLE_STUDIO ; },0
1004,<S2SV_ModStart> nsops < 1 || nsops > SEMOPM,1
1005,<S2SV_ModStart> ; i < <S2SV_ModEnd> cols + 17,0
1006,"<S2SV_ModStart> ] ) ; if ( fileblock < inode -> i_sb -> s_blocksize - blksz ) { grub_error ( GRUB_ERR_BAD_FS, ""file <S2SV_blank> block <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range"" ) ; return - 1 ; } <S2SV_ModStart> ] ) ; if ( fileblock < inode -> i_sb -> s_blocksize - blksz ) { grub_error ( GRUB_ERR_BAD_FS, ""file <S2SV_blank> block <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range"" ) ; return - 1 ; }",0
1007,"<S2SV_ModStart> ) ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif i -> posX = i -> parent -> width - i -> width ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif i -> posY = i -> parent -> height - i -> height ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n""",0
1008,"<S2SV_ModStart> if ( q < p ) { DPRINTF ( ( ""Wrapped <S2SV_blank> around <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> %p\\n"", q, p ) ) ; goto out ; } if ( q",0
1009,"<S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( bytes_matched <S2SV_ModStart> > max_bytes_matched ) { FAIL_ON_ERROR ( callback ( 0x12345678, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e",0
1010,"<S2SV_ModStart> len ) { assert ( len > 0 ) ; <S2SV_ModStart> case LEX_EOF : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""EOF"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_ID : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_INT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""INT"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_FLOAT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""FLOAT"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""TEMPLATE <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""TEMPLATE <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> TEMPLATE <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ;",0
1011,"<S2SV_ModStart> mnt_instance ) ; if ( unlikely (! list_empty ( & mnt -> mnt_mounts ) ) ) { struct mount * p, * tmp ; list_for_each_entry_safe ( p, tmp, & mnt -> mnt_mounts, mnt_child ) { umount_mnt ( p ) ; } }",1
1012,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
1013,,1
1014,"<S2SV_ModStart> ; if ( e == NULL ) goto not_found ; r = parse_name ( p, & pwd -> pw_name, & pwd -> pw_gid ) ; if ( r < 0",0
1015,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> uint32_t pos ; if ( inode -> i_size > inode -> i_sb -> s_blocksize ) { err = - ENAMETOOLONG ; goto out_unmap ; } <S2SV_ModStart>! bh ) { err = - EIO ; goto out_unlock_inode ; } <S2SV_ModEnd> symlink = bh <S2SV_ModStart> return 0 ; out_unlock_inode <S2SV_ModEnd> : up_read ( <S2SV_ModStart> page ) ; out_unmap :,1
1016,<S2SV_ModStart> else if ( cpu_has_secondary_exec_ctrls ( ) && ( vmcs_read32 ( SECONDARY_VM_EXEC_CONTROL ) & SECONDARY_EXEC_VIRTUALIZE_X2APIC_MODE ) <S2SV_ModEnd> ) { if,1
1017,"<S2SV_ModStart> if ( ent == NULL ) { st = KRB5_KDB_NOENTRY ; <S2SV_ModEnd> goto cleanup ; <S2SV_ModStart> cleanup ; } st = populate_policy ( context, ld, ent, pol_name, * policy ) ;",1
1018,<S2SV_ModStart> = value ; if ( ps_bitstrm -> pu4_offset > ps_bitstrm -> pu1_max_offset ) { ps_bitstrm -> pu1_offset = ps_bitstrm -> pu1_min_offset ; ps_bitstrm -> pu1_max_offset = ps_bitstrm -> pu1_max_offset ; } <S2SV_ModStart> = value ; if ( ps_bitstrm -> pu1_offset > ps_bitstrm -> pu1_max_offset ) { ps_bitstrm -> pu1_offset = ps_bitstrm -> pu1_min_offset ; ps_bitstrm -> pu1_offset = ps_bitstrm -> pu1_max_offset ; },0
1019,"<S2SV_ModStart> ) ; struct gfs2_meta_header * bh = mp -> mp_bh [ 0 ] ; struct <S2SV_ModStart> unsigned end_of_metadata = ( height > 1 )? height - 1 : 0 ; int ret = 0 <S2SV_ModEnd> ; enum alloc_state <S2SV_ModStart> ; if ( ( ret = gfs2_meta_read_block ( inode, lblock, bh -> b_size ) ) < 0 ) { pr_err ( ""%s: <S2SV_blank> Block <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", ret ) ; return ret ; } if ( ( ret = gfs2_meta_read_block ( inode, lblock, bh -> b_size ) ) < 0 ) { pr_err ( ""%s: <S2SV_blank> Block <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", ret ) ; return ret ; } if ( ( ret = gfs2_meta_read_block ( inode, lblock, bh -> b_size, bh -> b_size ) ) < 0 ) { pr_err ( ""%s: <S2SV_blank> Block <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", ret ) ; return ret ; }",0
1020,<S2SV_ModStart> ) ) { switch ( c ) { case'<S2SV_blank>': psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case'<S2SV_blank>': psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'N' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'P' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'P' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'R' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'S' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'P' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'V' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'N' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'P' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'P' : psf -> rwf_endian = SF,0
1021,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( i,1
1022,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
1023,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
1024,"<S2SV_ModStart> 0 ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",1
1025,"<S2SV_ModStart> int num_items_scanned ; int pkt_len ; int <S2SV_ModEnd> pktnum, hr <S2SV_ModStart> + 64, ""LEN=%9u"" <S2SV_ModEnd>, & pkt_len <S2SV_ModStart> g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len > WTAP_MAX_PACKET_SIZE ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup_printf ( ""toshiba: <S2SV_blank> File <S2SV_blank> has <S2SV_blank> a <S2SV_blank> maximum <S2SV_blank> of <S2SV_blank> %u"", pkt_len, WTAP_MAX_PACKET_SIZE ) ; return FALSE ; } if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup_printf ( ""toshiba: <S2SV_blank> Packet <S2SV_blank> header <S2SV_blank> has <S2SV_blank> a <S2SV_blank> negative <S2SV_blank> packet <S2SV_blank> length""",0
1026,<S2SV_ModStart> ; int err = 0 ; msg -> msg_namelen,1
1027,"<S2SV_ModStart> ; if ( zend_hash_find <S2SV_ModEnd> ( ht,",1
1028,<S2SV_ModStart> ) ) ; strncpy <S2SV_ModEnd> ( link_info.,0
1029,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1030,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf -> flags",0
1031,<S2SV_ModStart> p -> tokenpos >= ( <S2SV_ModEnd> p -> tokenlen <S2SV_ModStart> p -> tokenlen - 1 ),1
1032,<S2SV_ModStart> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> case BLOCK_8X8 : return vpx_mse8x8 ; case BLOCK_16X8 : return vpx_mse16x8 ; case BLOCK_8X16 : return vpx_mse8x16 ; case BLOCK_16X16 : return vpx_mse16x16 ; case BLOCK_16X16 : return vpx_mse16x16 ; default : return vpx_mse8x16 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1033,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1034,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> pb ) ; },0
1035,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
1036,<S2SV_ModStart> } if ( reqp!= NULL && reqp -> pa_type == KRB5_PADATA_SUBJECT_PUBLIC_KEY && reqp -> pa_type == KRB5_PADATA_SUBJECT_PUBLIC_KEY && reqp -> pa_type == KRB5_PADATA_SUBJECT_PUBLIC_KEY_PACK && reqp -> pa_type == KRB5_PADATA_SUBJECT_PUBLIC_KEY_PACK_DRA,0
1037,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1038,"<S2SV_ModStart> -> stratum_port ; snprintf ( address, 254 <S2SV_ModEnd>, ""%s:%s"",",1
1039,"<S2SV_ModStart> ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""error"" ) ; http_response_send ( res ) ; return ; } if ( <S2SV_ModStart> ; if ( page && ( file_access <S2SV_ModEnd> ( page, <S2SV_ModStart> ; if ( page && ( unlink ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""error"" ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/get"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page && (",0
1040,"<S2SV_ModStart> -> blocksize_1 ; if ( f -> blocksize_2 > UINT32_MAX / 2 ) return error ( f, VORBIS_invalid_setup ) ; <S2SV_ModStart> -> blocksize_2 ; if ( f -> blocksize_3 > UINT32_MAX / 2 ) return error ( f, VORBIS_invalid_setup ) ; <S2SV_ModStart> -> blocksize_3 ; if ( f -> blocksize_4 > UINT32_MAX / 2 ) return error ( f, VORBIS_invalid_setup )",0
1041,<S2SV_ModStart> head -> iov_base ; if ( hdr > head -> iov_len ) return 0,1
1042,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
1043,<S2SV_ModStart> flags ) ; if ( vb ) { <S2SV_ModStart> vb2_buf ) ; },0
1044,"<S2SV_ModStart> * zcalloc ( size_t num, size_t <S2SV_ModStart> size ) { if ( check_mul_overflow ( num, size ) ) { zmalloc_oom_handler ( size ) ; return NULL ; }",0
1045,<S2SV_ModStart> ; ssize_t count ; if ( bytes == 0 || items == 0 ) return 0,1
1046,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
1047,<S2SV_ModStart> key_ref ) ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; goto error2 ; } <S2SV_ModEnd> if ( is_key_possessed,0
1048,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { memset ( adhoc_start -> ssid, 0, sizeof ( struct mwifiex_ie_types_chan_list_param_set ) - sizeof ( struct mwifiex_ie_types_htinfo ) - sizeof ( struct mwifiex_ie_types_chan_list_param_set ) - sizeof ( struct mwifiex_ie_types_htcap ) - sizeof ( struct mwifiex_ie_types_htinfo ) - sizeof ( struct mwifiex_ie_types_htcap ) - sizeof ( struct mwifiex_ie_types_chan_list_param_set ) - sizeof ( struct mwifiex_ie_types_htinfo ) - sizeof ( struct mwifiex_ie_types_htcap ) - sizeof ( struct mwifiex_ie_types_htinfo ) - sizeof ( struct mwifiex_ie_types_htinfo ) - sizeof ( struct mwifiex_ie_types_htinfo ) - sizeof ( struct mwifiex_ie_types_ht",0
1049,"<S2SV_ModStart> valuelen ) ; if ( sfe -> valuelen > context -> bufsize ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, sfe -> valuelen, & sfe -> nameval [ 0 ] ) ; if ( error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; }",0
1050,"<S2SV_ModStart> r ) { int ret ; if ( a -> signature == NULL ) return ( - 1 ) ; ret = ASN1_item_verify ( ASN1_ITEM_rptr ( X509_CINF ), a -> signature, a -> cert_info, r ) ; if ( ret < 0 ) return ret ;",0
1051,<S2SV_ModStart> 0 ) ; hrtimer_try_to_cancel <S2SV_ModEnd> ( & stime,1
1052,"<S2SV_ModStart> -> dmin ; if ( p - str < enclen ( reg -> enc, p ) ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; else if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; if ( high_prev ) * high_prev = onigenc_get_prev_char_head ( reg -> enc, str, * high ) ; else if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; if ( high_prev ) * high_prev = onigenc_get_prev_char_",0
1053,"<S2SV_ModStart> ; struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; void * <S2SV_ModStart> = data ; BT_DBG ( ""sk <S2SV_blank> %p"", sk ) ; rfc. <S2SV_ModEnd> max_transmit = L2CAP_DEFAULT_TX_WINDOW <S2SV_ModStart> = L2CAP_MODE_ERTM ; rfc. <S2SV_ModEnd> retrans_timeout = cpu_to_le16 <S2SV_ModStart> retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) ; break ; } req -> dcid = cpu_to_le16 ( pi -> dcid ) ; req -> flags = cpu_to_le16 ( 0 ) <S2SV_ModEnd> ; return ptr",0
1054,"<S2SV_ModStart> r ) { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv: <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; break ; }",0
1055,<S2SV_ModStart> -> chunksize = UINT64_MAX <S2SV_ModEnd> ; for (,1
1056,<S2SV_ModStart> return ERROR_INCOMPLETE_FRAME ; } if ( ( ps_dec -> u2_total_mbs_coded == 0 ) && ( ( ps_dec -> u2_total_mbs_coded == 0 ) || ( ( ps_dec -> u2_total_mbs_coded > INT_MAX ) && ( ( u1_nal_unit_type > IDR_SLICE_NAL ) && ( u1_nal_ref_idc > INT_MAX ) ) ) { return ERROR_INCOMPLETE_FRAME ; },0
1057,<S2SV_ModStart>!= 0 ) && * pair!= '\\0',0
1058,<S2SV_ModStart> } err = crypto_rng_alg ( tfm ) <S2SV_ModEnd> -> seed (,1
1059,<S2SV_ModStart> = uid ; <S2SV_ModEnd> new -> count <S2SV_ModStart> new -> count = 0 <S2SV_ModEnd> ; spin_lock_irq ( <S2SV_ModStart> } if ( <S2SV_ModEnd> ucounts -> count <S2SV_ModStart> ucounts -> count == INT_MAX ) ucounts = NULL ; else ucounts -> count += 1 <S2SV_ModEnd> ; spin_unlock_irq (,1
1060,"<S2SV_ModStart> == 0 ) { datagrams = err ; goto out_put ; } <S2SV_ModEnd> if ( err <S2SV_ModStart> err ; } out_put : fput_light ( sock -> file, fput_needed ) ; <S2SV_ModStart> datagrams ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1061,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1062,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> = 0 ; len - i >= 8 * 32 <S2SV_ModEnd> ; i += <S2SV_ModStart> ] ; } for ( ; i < len ; i += 32 ) { ( void ) tab [ i ] ; },1
1063,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { if ( <S2SV_ModStart> ) ; } if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result ) ;,1
1064,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode_t fmode = open_flags & ( FMODE_READ | FMODE_WRITE ) ; <S2SV_ModStart> -> type & fmode )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret",0
1065,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1066,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1067,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void oidc_scrub_headers (,1
1068,"<S2SV_ModStart> * xd, tran_low_t * out_rate_sum, tran_low_t <S2SV_ModEnd> * out_dist_sum ) <S2SV_ModStart> int sse ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ; } else { vpx_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ; } else { int rate ; int64_t dist ; vpx_model_rd_from_var_lapndz",0
1069,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1070,"<S2SV_ModStart> ndo_snapend ) { ND_TCHECK ( * optr ) ; while ( * optr == NLPID_ESIS ) { ND_TCHECK ( * optr ) ; optr ++ ; } if ( <S2SV_ModStart> ndo_snapend ) { ND_TCHECK ( * optr ) ; while ( * optr == NLPID_ESIS ) { ND_TCHECK ( * optr ) ; optr ++ ; } if ( * optr!= NLPID_ESIS ) { ND_TCHECK ( * optr ) ; if ( * optr!= NLPID_SNAP ) ND_PRINT ( ( ndo, "" <S2SV_blank> SNAP <S2SV_blank> packet <S2SV_blank> not <S2SV_blank> supported"" ) ) ; break ; } ND_TCHECK ( * optr ) ; while ( * optr == NLPID_SNAP ) ND_TCHECK ( * optr ++ ) ; if ( * optr!= NLPID_ESIS ) { ND_TCHECK ( * optr ++ ) ; if ( * optr!= NLPID_SNAP ) ND_PRINT ( ( ndo, "" <S2SV_blank> SNAP <S2SV_blank> packet",0
1071,<S2SV_ModStart> '\\0' ) { ptr ++ ; if <S2SV_ModEnd> ( ( * <S2SV_ModStart> =='<S2SV_blank>') || ( * ptr == '\\t' ) ) break ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; <S2SV_ModStart> } if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> ( void ) strcpy <S2SV_ModEnd> ( * ret_username,0
1072,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { int ret ; ret = vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> return vpx_read_tree ( r <S2SV_ModEnd>, vp9_segment_tree,",0
1073,<S2SV_ModStart> ; uint32_t backup_handle = 0 <S2SV_ModStart> ret == 0 ) { if ( <S2SV_ModEnd> res -> backup <S2SV_ModStart> res -> backup ) { backup_handle = req -> array_size * req -> mip_levels ; } else { backup_handle = req -> array_size * req -> mip_levels ; },0
1074,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool get_desc ( <S2SV_ModStart> struct desc_struct * out, <S2SV_ModEnd> unsigned short sel <S2SV_ModStart> SEGMENT_LDT ) { bool success = false <S2SV_ModEnd> ; struct ldt_struct <S2SV_ModStart> -> nr_entries ) { success = true ; <S2SV_ModStart> sel ] ; } <S2SV_ModStart> ) ; return success <S2SV_ModEnd> ; } # <S2SV_ModStart> size ) return false ; return true ;",0
1075,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } src_ptr1 += src_stride ; src_ptr2 += src_stride ; dst_ptr1 += src_stride ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_top ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_bottom ; ++ i ) { memcpy ( dst_ptr2, src_ptr2, linesize ) ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_right ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_left ; ++ i ) { memcpy ( dst_ptr2,",0
1076,"<S2SV_ModStart> bp ; struct ipv6_pinfo * np = inet6_sk ( sk ) ; struct <S2SV_ModStart> sctp_addr dst_saddr ; struct in6_addr * final_p, final ; <S2SV_ModStart> ) ; } final_p = fl6_update_dst ( fl6, np, & final ) ; <S2SV_ModStart>, fl6, final_p <S2SV_ModEnd>, false ) <S2SV_ModStart>, fl6, final_p <S2SV_ModEnd>, false ) <S2SV_ModStart>, fl6, final_p <S2SV_ModEnd>, false ) <S2SV_ModStart>, fl6, final_p <S2SV_ModEnd>, false )",0
1077,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1078,"<S2SV_ModStart> ( ndo, & <S2SV_ModStart> maxbuf, unicodestr ) ; if ( ND_TTEST2 ( * buf2 ) ) { ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) PTR_DIFF ( maxbuf, buf ) ) ; buf = buf2 ; } else if ( ND_TTEST2 ( * buf ) ) { ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) PTR_DIFF ( maxbuf, buf ) ) ; if ( buf == buf2 ) { ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) PTR_DIFF ( maxbuf, buf ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) PTR_DIFF ( maxbuf, buf ) ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long )",0
1079,"<S2SV_ModStart> -> protocol_timeout ) { g_source_remove ( client -> priv -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; } <S2SV_ModEnd> g_debug ( ""GsmXSMPClient: <S2SV_blank> Initializing <S2SV_blank> client <S2SV_blank> %s""",0
1080,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> < ie && <S2SV_ModEnd> ND_TTEST ( *,1
1081,"<S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n < ( length + 8 ) ) { return ERROR_FAILURE ; } <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE <S2SV_ModEnd> ) ; netBufferRead <S2SV_ModStart> ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } netBufferRead ( context -> txBuffer, buffer, offset, length ) ; header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID",0
1082,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1083,"<S2SV_ModStart> goto out_free_slot ; if ( assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> free <S2SV_blank> slot <S2SV_blank> %d\\n"", free_slot ) ; edit -> dead_leaf = node -> slots [ free_slot ] ; pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [replace]\\n"", __func__ ) ; goto out_free_slot ; }",0
1084,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
1085,"<S2SV_ModStart> ; # endif g_autofree gchar * tmp_filename ; <S2SV_ModStart> ) ; # ifdef MONO_HAS_SEMAPHORES g_mem_copy_ctor ( & tmp_filename, & tmp_filename, sizeof ( tmp_filename ) ) ; g_assert ( tmp_filename!= NULL ) ; g_mem_copy_ctor ( & tmp_filename, sizeof ( tmp_filename ) ) ; g_assert ( tmp_filename!= NULL ) ; g_mem_copy_ctor ( & tmp_filename, sizeof ( tmp_filename ) ) ; g_byte * tmp_filename = tmp_filename ; g_mem_copy_ctor ( & tmp_filename, & tmp_filename, sizeof ( tmp_filename ) ) ; g_assert ( tmp_filename!= NULL ) ; g_assert ( tmp_filename!= NULL ) ; g_mem_copy_ctor ( & tmp_filename, sizeof ( tmp_filename ) ) ; g_assert ( tmp_filename!= NULL ) ; g_mem_copy_ctor ( & tmp_filename, sizeof ( tmp_filename ) ) ; g_mem_copy_ctor ( & tmp_filename, sizeof ( tmp_filename ) )",0
1086,"<S2SV_ModStart>, x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 n00, n10, n20, n30, n01, n12, n22, n32, n03, n13, n23, n33 ; WORD32 n0, j0 ; WORD32 n1, n2, n4, n5 ; WORD32 n6 ; x_7 = * x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_a = * x0 ++ ; x_b = * x0 ++ ; x_c = * x0 ++ ; x_d = * x0 ++ ; x_e = * x0 ++ ; x_f = * x0 ++ ; n0 = x_0 + x_2 ; n1 = x_1 + x_3 ; n2 = x_0 - x_2 ; n3 = x_1 - x_3 ; n4 = x_4 + x_6 ; n5 = x_5 + x_7 ; n6",0
1087,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
1088,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1089,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1090,"<S2SV_ModStart> ; j < size <S2SV_ModEnd> ; j ++ <S2SV_ModStart> ; j < size <S2SV_ModEnd> ; j ++ <S2SV_ModStart> ; j ++ ) { r_cons_printf ( ""%02x"", j ) ; } <S2SV_ModStart> ; j < size <S2SV_ModEnd> ; j ++ <S2SV_ModStart> ; j ++ ) { r_cons_printf ( ""%02x"", j ) ; } <S2SV_ModStart> ; j < size <S2SV_ModEnd> ; j ++ <S2SV_ModStart> ; j ++ ) { r_cons_printf ( ""%02x"", j ) ; } <S2SV_ModStart> ; j ++ ) { r_cons_printf ( ""%02x"", j ) ; <S2SV_ModStart> ; j ++ ) { r_cons_printf ( ""%02x"", j ) ; } <S2SV_ModStart> ; j < size <S2SV_ModEnd> ; j ++ <S2SV_ModStart> ; j ++ ) { r_cons_printf ( ""%02x"", j ) ; } <S2SV_ModStart> ; j ++ ) { r_cons_printf ( ""%02x"", j ) ; } <S2SV_ModStart> ; j ++ ) { r_cons_printf ( ""%02x"", j ) ; }",0
1091,"<S2SV_ModStart>, frames ; size_t width, height ; size_t target_width, target_height ; size_t target_width, target_height ; if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } if ( argc < 5 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if ( fin == NULL ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 3 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; return 1 ; } if (! parse_dim ( argv [ 0 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 0 ] ) ; return 1 ; } if ( argc < 6 ) { printf (",0
1092,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 head, tail, size ; head <S2SV_ModEnd> = readw ( <S2SV_ModStart> + JQS_wHead ) ; tail = readw ( chip -> DSPQ + JQS_wTail ) ; size = <S2SV_ModEnd> readw ( chip <S2SV_ModStart> + JQS_wSize ) ; if ( head > size || tail > size ) goto out ; while ( head!= tail ) { snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * head ) ) ; if ( ++ head > size ) head = 0 ; writew ( head <S2SV_ModEnd>, chip -> <S2SV_ModStart> ) ; } out :",1
1093,<S2SV_ModStart> * opcode_desc ; if ( len < 2 ) { return NULL ; },1
1094,<S2SV_ModStart> acpi_status status ; <S2SV_ModEnd> acpi_operand_object * prev <S2SV_ModStart> acpi_operand_object * next ; ACPI_FUNCTION_TRACE ( ns_terminate ) <S2SV_ModStart> ) ; } <S2SV_ModEnd> acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node,0
1095,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
1096,"<S2SV_ModStart> ++ ) { if ( strlen ( url_arg ) >= sizeof ( the_url ) ) { strncpy ( the_url, url_arg, sizeof ( the_url ) - 1 ) ; the_url [ sizeof ( the_url ) - 1 ] = 0 ; } else { strncpy ( the_url, url_arg, sizeof ( the_url ) - 1 ) ; the_url [ sizeof ( the_url ) - 1 ] = 0 ; } <S2SV_ModStart>!= NULL ) { if ( strlen ( url_arg ) >= sizeof ( the_url ) ) { strncpy ( the_url, url_arg, sizeof ( the_url ) - 1 ) ; the_url [ sizeof ( the_url ) - 1 ] = 0 ; } else { strncpy ( the_url, url_arg, sizeof ( the_url ) - 1 ) ; the_url [ sizeof ( the_url ) - 1 ] = 0 ; }",0
1097,"<S2SV_ModStart> { int i <S2SV_ModEnd>, result ; <S2SV_ModStart>, result ; if ( num_fields < 1 ) { return 0 ; } _Py_IDENTIFIER ( _attributes ) ; PyObject * s, * l = PyTuple_New ( num_fields ) ; if (! l ) return 0 ; for ( i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } PyTuple_SET_ITEM ( l, i, PyUnicode_FromString ( attrs [ i ] ) ) ; Py_DECREF ( l ) ; result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; Py_DECREF ( l ) ; return result <S2SV_ModEnd> ; } <S2SV_null>",0
1098,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
1099,"<S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; if ( <S2SV_ModStart> vpx_codec_alg_priv ) ) ; priv = ( struct vpx_codec_alg_priv * ) calloc ( 1, sizeof ( * priv ) ) ; ctx -> priv -> sz = sizeof ( * priv ) ; priv -> iface = ctx -> iface ; priv <S2SV_ModEnd> -> init_flags = <S2SV_ModStart> enc ) { priv <S2SV_ModEnd> -> cfg = <S2SV_ModStart> -> cfg ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg. pkt_list = malloc ( priv -> vp8_cfg. pkt_list -> head ) ; if (! priv -> cx_data ) { return VPX_CODEC_MEM_ERROR ; } priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h * priv -> cfg. g_w * priv -> cfg. g_h ; priv -> cx_data_sz = 32768 ; priv -> cx_data = malloc ( priv -> cx_data_sz ) ; if (! priv -> cx_data",0
1100,"<S2SV_ModStart> error ) { if ( bp && ( <S2SV_ModEnd> xfs_da_shrink_inode ( args <S2SV_ModStart>, bp )!= 0 ) <S2SV_ModEnd> ) goto out",1
1101,<S2SV_ModStart> } if ( cnt_c + step > BOT ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 16 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; pixel -> lookup [ i ] = nc ; pixel -> lookup [ i ] = nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += i16_17 ; for ( j = 0 ; j < 4 ; j ++ ) sum += i16_17 ; for ( j = 0 ; j < 4 ; j ++ ) sum += i16_17 ; for ( j = 0 ; j < 4 ; j ++ ) sum += i16_17 ; for ( i = 0 ; i < 16 ; i ++ ) { unsigned i16 = i ; for ( j = 0 ; j < 16 ; j,0
1102,"<S2SV_ModStart> timer ) ; spin_lock ( & timeri -> timer_active_lock ) ; _snd_timer_stop ( timer, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; mutex_unlock ( & timeri -> timer_active_lock ) ; <S2SV_ModStart> NULL ; } spin_unlock ( & timeri -> timer_active_lock ) ; mutex_unlock ( & timeri -> timer_active_lock ) ;",0
1103,"<S2SV_ModStart> return err ; if (! <S2SV_ModEnd> attrs [ TIPC_NLA_SOCK <S2SV_ModStart> attrs [ TIPC_NLA_SOCK <S2SV_ModEnd> ] ) return <S2SV_ModStart> - EINVAL ; err = nla_parse_nested ( sock, TIPC_NLA_SOCK_MAX, attrs [ TIPC_NLA_SOCK ], tipc_nl_sock_policy ) ; if ( err ) return err ; if (! sock <S2SV_ModEnd> [ TIPC_NLA_SOCK_REF ] <S2SV_ModStart> [ TIPC_NLA_SOCK_REF ] <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; tsk_portid = nla_get_u32 ( sock [ TIPC_NLA_SOCK_REF ] ) ; } if ( done ) return 0 ; tsk = tipc_sk_lookup ( net, tsk_portid ) ; if (! tsk ) return - EINVAL ;",1
1104,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
1105,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1106,<S2SV_ModStart> ) buffer ; if ( total_len < sizeof ( * cap ) || total_len < <S2SV_ModEnd> cap -> bLength <S2SV_ModStart> cap -> bLength ) { dev -> bos -> desc -> bNumDeviceCaps = i ; break ; } length = cap -> bLength <S2SV_ModEnd> ; total_len -=,1
1107,<S2SV_ModStart> task = current <S2SV_ModEnd> ; if (,1
1108,"<S2SV_ModStart> ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenEAttr > inode -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> inode <S2SV_blank> %d\\n"", inode -> i_ino ) ; goto out ; } if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenEAttr > inode -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> inode <S2SV_blank> %d\\n"", inode -> i_ino ) ; goto out ; } if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenEAttr > inode -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> inode <S2SV_blank> %d\\n"", inode -> i_ino ) ; goto out ; } if ( iinfo -> i_lenEAttr > inode -> i_",0
1109,"<S2SV_ModStart> data ) { uint16_t status ; <S2SV_ModStart> ( interface, ENC28J60_MIREGADR, ENC28J60_MIREGADR_DEFAULT <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
1110,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { if ( strlen ( fmt ) >= 3 ) return 1 ; char * ptr ; int n = 0 ; ptr = fmt ; while ( * ptr!= '\\0' ) if ( * ptr == '%' ) ptr ++ ; else if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } else if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; n ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr,0
1111,<S2SV_ModStart> sk_forward_alloc ) ; rcu_read_lock ( ) ; inet -> inet_opt = NULL ; rcu_read_unlock ( <S2SV_ModEnd> ) ; dst_release,0
1112,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
1113,<S2SV_ModStart>! saw_digit ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\r' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\n' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart> ; trunc : * endp = bp ; <S2SV_ModStart> ; invalid : * endp = bp ;,1
1114,<S2SV_ModStart> ; args -> rmtvaluelen = be32_to_cpu ( name_rmt -> valuelen ) ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ( name_rmt -> <S2SV_ModEnd> valuelen ) ; <S2SV_ModStart> ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args -> rmtvaluelen = be32_to_cpu ( name_rmt -> <S2SV_ModEnd> valuelen ) ;,0
1115,"<S2SV_ModStart> ""DefragIPv4TooLargeTest"" ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakWindowsTest"", IPV6DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakFirstTest"", IPV6DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLastTest"", IPV6DefragSturgesNovakLastTest ) ;",0
1116,<S2SV_ModStart> ; if (! <S2SV_ModEnd> object_data ) {,0
1117,"<S2SV_ModStart> out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } <S2SV_ModStart> out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; }",0
1118,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1119,<S2SV_ModStart> u8 label_len ; <S2SV_ModEnd> GET8 ( label_len <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ;,1
1120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( cc % <S2SV_ModStart> stride ) )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpAcc"", ""%s"", ""cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> tmp ) return 1 ;",0
1121,"<S2SV_ModStart> -> vm_ops ) <S2SV_ModEnd> return do_fault ( <S2SV_ModStart>, pte, pmd, flags, entry ) ; <S2SV_ModEnd> return do_anonymous_page ( <S2SV_ModStart>, address, pte, pmd, <S2SV_ModEnd> flags ) ;",1
1122,"<S2SV_ModStart> s ) { size_t len = strlen ( s ) + 1 ; <S2SV_ModStart> = pool_alloc ( len ) ; memcpy <S2SV_ModEnd> ( r, <S2SV_ModStart> r, s, len",1
1123,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1124,"<S2SV_ModStart> ; next_line = strchr ( pos, '0' ) ; if (! strcmp ( extent -> first, parent_map -> first ) && strcmp ( extent -> lower_first, map -> lower_first ) == 0 && strcmp ( extent -> count, parent_map -> count ) == 0 && strcmp ( extent -> lower_first, map -> count ) == 0 && strcmp ( extent -> second, parent_map -> second ) == 0 && strcmp ( extent -> type, map -> type ) == 0 && strcmp ( extent -> type, '0' ) == 0 && strcmp ( extent -> type, '1' ) == 0 && strcmp ( extent -> type, '2' ) == 0 && strcmp ( extent -> type, '3' ) == 0 && strcmp ( extent -> type, '4' ) == 0 && strcmp ( extent -> type, '8' ) == 0 && strcmp ( extent -> second, parent_map -> first ) == 0 && strcmp ( extent -> type, '16' ) == 0 && strcmp ( extent -> type, '0' ) == 0 && strcmp ( extent -> type, '1' ) == 0 && strcmp ( extent -> type, '3' ) == 0 &&",0
1125,"<S2SV_ModStart> attr_values [ i ]. name [ 0 ] = 0 ; memset ( & cu -> dies [ cu -> length ]. name [ 1 ], 0, sizeof ( cu -> dies [ cu -> length ]. name ) ) ;",0
1126,"<S2SV_ModStart> NULL ; } if ( p_sys -> p_format -> interlaced ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"",! p_sys -> b_auto_field_coding ) ; } <S2SV_ModStart> b_go ) { if ( p_sys -> p_format -> interlaced ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"",! p_sys -> b_auto_field_coding ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"",! p_sys -> b_auto_field_coding ) ; } else { if ( p_sys -> p_format -> interlaced ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"", p_sys -> b_auto_field_coding ) { schro_encoder_setting_set_double ( p_sys -> p_schro, """,0
1127,"<S2SV_ModStart>, ',', & bfilename ) ; if ( bfilename. len < 1 ) { mp_err ( log, ""filename <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short\\n"" ) ; goto exit_mf ; }",0
1128,"<S2SV_ModStart> ip6 ) ; if ( advance < 0 ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", advance ) ) ; goto trunc ; } <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", advance ) ) ; goto trunc ; } <S2SV_ModStart> case IPPROTO_ROUTING : if ( advance < 0 ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", advance ) ) ; goto trunc ; } <S2SV_ModStart> case IPPROTO_ROUTING : if ( advance < 0 ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", advance ) ) ; goto trunc ; } <S2SV_ModStart> case IPPROTO_ROUTING : if ( advance < 0 ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", advance ) ) ; goto trunc ; } <S2SV_ModStart> case IPPROTO_ROUTING : if ( advance",0
1129,"<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> ]. len ) ; CHECKINT16 ( idx, len ) ; a -> name = GETINT16 ( buf + idx ) ; idx += 2 ; a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ; idx += sizeof ( GUID ) ; if ( a -> name & GUID_EXISTS_FLAG ) { a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ; idx += sizeof ( GUID ) ; } for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. data = CHECKED_XMALLOC ( unsigned char, a -> names [ i ]. len ) ; for ( j = 0 ; j < a -> num_names ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to",0
1130,"<S2SV_ModStart> ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenEAttr > inode -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> inode <S2SV_blank> %d\\n"", inode -> i_ino ) ; goto out ; } if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenEAttr > inode -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> inode <S2SV_blank> %d\\n"", inode -> i_ino ) ; goto out ; } if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenEAttr > inode -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> inode <S2SV_blank> %d\\n"", inode -> i_ino ) ; goto out ; } if ( iinfo -> i_lenEAttr > inode -> i_",0
1131,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1132,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
1133,"<S2SV_ModStart> ( ) ; strcpy ( t1_buf_array, t1_line_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_buf_ptr = eol ( t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; } else { strcpy ( t1_buf_array, t1_line_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; }",0
1134,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; YV12_BUFFER_CONFIG * fb ; if ( ctx -> frame_workers!= NULL ) { ctx -> frame_workers = NULL ; return VPX_CODEC_INCAPABLE ; } <S2SV_ModStart> * fb ; if ( ctx -> frame_workers!= NULL ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModStart> * fb ; yuvconfig2image ( & frame_worker_data -> img <S2SV_ModEnd>, NULL )",0
1135,"<S2SV_ModStart> ctxt ) ; if (! ( em_syscall_is_enabled ( ctxt ) ) ) return emulate_ud ( ctxt ) ; <S2SV_ModStart>, & ss ) ; if (! ( efer & EFER_SCE ) ) return emulate_ud ( ctxt",1
1136,"<S2SV_ModStart> + 1 ; if ( j + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( j + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOS <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( j + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOS.\\n"", j ) ; return AVERROR_INVALIDDATA ; }",0
1137,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == expr_ty && TYPE ( CHILD ( n, 1 ) ) == testlist ) e = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; if (! e ) return NULL ; if (! set_context ( c, e, Store, ch ) ) return NULL ; switch ( TYPE ( CHILD ( n, 2 ) ) { case Name_kind : case Attribute_kind : case Subscript_kind : break ; default : ast_error ( c, ch, ""illegal <S2SV_blank> expression <S2SV_blank> for <S2SV_blank> augmented <S2SV_blank> assignment"" ) ; return NULL ; } ch = CHILD ( n, 3 ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; switch ( expr1 -> kind ) { case AugAssign : expr1 = ast_for_augassign ( c, CHILD ( n, 2 ) ) ; newoperator = ast_for_augassign ( c, CHILD ( n, 1 ) ) ; if (! newoperator ) return NULL ; expr2 = ast_for_expr ( c, ch ) ; if (! expr2 )",0
1138,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y, <S2SV_ModEnd> int mc_avg_y_stride, <S2SV_ModStart> unsigned char * running_avg_y, int avg_y_stride, <S2SV_ModEnd> int motion_magnitude, <S2SV_ModStart> int sig_stride = 16 ; int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( r = 0 ; r < 16 ; ++ r ) { running_avg_y [ r ] = mc_running_avg_y [ r ] ; sum_diff += diff ; } else { running_avg_y [ r ] = running_avg_y [ r ] ; sum_diff += diff ; } for ( c = 0 ; c < 16 ; ++ c ) { if ( diff > 0 && absdiff <= 3 ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ; } else { running_avg_y [ c ] = running_avg_",0
1139,"<S2SV_ModStart> ) ) { if ( bufPtr -> string [ reqPtr -> roff ]!= '\\0' ) { if ( bufPtr -> string [ reqPtr -> roff ]!= '\\0' ) { Ns_Log ( Ns_LogRequestDebug, ""bigger <S2SV_blank> than <S2SV_blank> buffer <S2SV_blank> length <S2SV_blank> (%d)"", bufPtr -> string [ reqPtr -> roff ] ) ; } else { if ( bufPtr -> string [ reqPtr -> roff ]!= NULL ) { Ns_Log ( Ns_LogRequestDebug, ""bigger <S2SV_blank> than <S2SV_blank> buffer <S2SV_blank> length <S2SV_blank> (%d)"", bufPtr -> length - reqPtr -> roff ) ; } else { if ( bufPtr -> string [ reqPtr -> roff ]!= NULL ) { Ns_Log ( Ns_LogRequestDebug, ""bigger <S2SV_blank> than <S2SV_blank> buffer <S2SV_blank> length <S2SV_blank> (%d)"", bufPtr -> string [ reqPtr -> roff ] ) ; } else { if ( bufPtr -> string [ reqPtr -> roff ]!= NULL ) { Ns_Log ( Ns_LogRequestDebug, ""bigger <S2SV_blank> than <S2SV_blank> buffer <S2SV_blank> length <S2SV_blank> (%d)"", bufPtr -> length - reqPtr -> roff ) ; } else { Ns_Log",0
1140,"<S2SV_ModStart> ; int ret = __copy_from_user ( & xtregs -> cp0, & xtregs -> cp0, sizeof ( xtregs -> cp0 ) ) ;",0
1141,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
1142,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> if ( xop <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) { struct se_device * <S2SV_ModEnd> remote_dev ; pr_debug <S2SV_ModStart> = xop -> src_dev ; pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; } <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for""",0
1143,"<S2SV_ModStart> ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close_sock ; } val = 1 ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_RECVHOPLIMIT, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_RECVHOPLIMIT,.""",1
1144,"<S2SV_ModStart> int error ; unsigned long size ; <S2SV_ModStart> header ) { size = le64_to_cpu ( HDR ( old_bh ) -> h_size ) ; <S2SV_ModStart> new_bh ) ; mb2_cache_insert ( EXT2_SB ( sb ) -> s_mb_cache, new_bh, size <S2SV_ModEnd> ) ; } <S2SV_ModStart> cleanup ; } <S2SV_ModEnd> lock_buffer ( new_bh <S2SV_ModStart> cleanup ; } mb2_cache_insert ( EXT2_SB ( sb ) -> s_mb_cache, header ) ; mb2_cache_insert ( EXT2_SB ( sb ) -> s_mb_cache, new_bh ) ; mb2_cache_insert ( EXT2_SB ( sb ) -> s_mb_cache, new_bh ) ; mb2_cache_insert ( EXT2_SB ( sb ) -> s_mb_cache, new_bh ) ; mb2_cache_insert ( EXT2_SB ( sb ) -> s_mb_cache, new_bh ) ; mb2_cache_insert ( EXT2_SB ( sb ) -> s_mb_cache, new_bh ) ; mb2_cache_",0
1145,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1146,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> (! vp9_set_active_map <S2SV_ModEnd> ( ctx ->",0
1147,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; inode -> i_ctime = CURRENT_TIME ; mark_inode_dirty ( inode ) ; } break ; case ACL_TYPE_DEFAULT : ea_name = XATTR_NAME_POSIX_ACL_DEFAULT ; break ; default : return - EINVAL ; } if ( acl ) { size = posix_acl_xattr_size ( acl -> a_count ) ; value = kmalloc ( size, GFP_KERNEL ) ; if (! value ) return - ENOMEM ; rc = posix_acl_to_xattr ( & init_user_ns, acl, value, size <S2SV_ModStart> < 0 ) <S2SV_ModEnd> goto out ;",1
1148,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1149,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1150,<S2SV_ModStart> 3 * len + 8,1
1151,<S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { points [ i ]. x = <S2SV_ModStart> var ) ; } <S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { points [ i ]. y = <S2SV_ModStart> ; } } },1
1152,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1153,"<S2SV_ModStart> ; imbuf = ( unsigned char * ) AcquireQuantumMemory ( imsx * imsy, 1 ) ; if ( imbuf == NULL ) { return ( MagickFalse ) ; } <S2SV_ModStart> ) AcquireQuantumMemory ( <S2SV_ModEnd> imsx * imsy <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( n <S2SV_ModStart> n ] = SIXEL_RGB ( 0, 0, 0 ) ; for ( i = 0 ; i < 24 ; i ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( ; n < SIXEL_PALETTE_",0
1154,"<S2SV_ModStart> ( ) ; strcpy ( t1_buf_array, t1_line_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_buf_ptr = eol ( t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; } else { strcpy ( t1_buf_array, t1_line_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; }",0
1155,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; if ( ctx -> frame_workers == NULL ) { return VPX_CODEC_INCAPABLE ; } <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data2 ; <S2SV_ModStart> vp9_copy_reference_dec ( ctx <S2SV_ModEnd> -> pbi, <S2SV_ModStart> vp9_copy_reference_dec ( ctx <S2SV_ModEnd> -> pbi,",0
1156,"<S2SV_ModStart>. path ; return Curl_urldecode <S2SV_ModEnd> ( data, <S2SV_ModStart>, 0, & <S2SV_ModEnd> pop3c -> mailbox <S2SV_ModStart> pop3c -> mailbox, NULL, TRUE ) <S2SV_ModEnd> ; } <S2SV_null>",1
1157,<S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ;,1
1158,"<S2SV_ModStart> gb ) ; if ( s -> ref && sh -> first_slice_in_pic_flag ) { av_log ( s -> avctx, AV_LOG_ERROR, ""Two <S2SV_blank> slices <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> frame.\\n"" ) ; return 1 ; }",0
1159,<S2SV_ModStart> } ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> <S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> ; } } ps_dec -> i2_total_mbs_coded += u1_num_mbs ; ps_dec -> i2_prev_slice_mbx = 0 ; ps_dec -> i2_prev_slice_mbx = 0 ; ps_dec -> i2_prev_slice_mbx = 0 ; ps_dec -> i2_prev_slice_mbx = 0 ; ps_dec -> ps_cur_slice -> i2_prev_slice_mbx = 0 ; ps_dec -> ps_cur_slice -> i2_prev_slice_mbx = 0 ; ps_dec -> ps_cur_slice -> i2_prev_slice_mbx = 0 ; ps_dec -> ps_cur_slice -> i2_prev_slice_mbx = 0 ; ps_dec -> ps_cur_slice -> i2_prev_slice_mbx = 0 ; ps_dec,0
1160,"<S2SV_ModStart>, u4_y_offset ; IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; <S2SV_ModStart> == B_PIC ) { ps_dec -> u2_nb_mb_params = & ps_dec_mb_params ; } else { ps_dec -> u2_nb_mb_params = & ps_dec_mb_params ; } <S2SV_ModStart> == B_PIC ) { ps_dec -> u2_nb_mb_params = & ps_dec_mb_params ; ps_dec -> u2_mb_params = & ps_dec_mb_params ; } else { ps_dec -> ps_p_mb_params = & ps_dec_mb_params ; } if ( ps_dec -> e_pic_type == B_PIC ) { ps_dec -> ps_pnb_mb_params = & ps_dec_mb_params ; } else { ps_dec -> ps_p_mb_params = & ps_dec_mb_params ; }",0
1161,"<S2SV_ModStart> VP9_LAST_FLAG ) { VP9_COMMON * const common = cm -> common ; YV12_BUFFER_CONFIG * const cfg = & common -> frame_bufs [ cm -> ref_frame_map [ 0 ] ] <S2SV_ModEnd> ; if ( <S2SV_ModStart> ] ]. buf ; if ( equal_dimensions ( common -> dimensions, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vpx_yv12_copy_frame ( common -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf, sd ) ; } else if ( ref_frame_flag == VP9_FIRST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = & common -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions ( common -> dimensions, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vpx_internal_error ( & cm -> error, VP",0
1162,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1163,<S2SV_ModStart> -> mbmi ; int i ; const int subsampling_x = pd -> subsampling_x ; const int subsampling_y = pd -> subsampling_y ; const int num_4x4_w = num_4x4_w ; const int num_4x4_h = num_4x4_h ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + subsampling_y ) ) ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max,0
1164,<S2SV_ModStart> -> mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor <S2SV_ModEnd> ; if (,1
1165,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
1166,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> fmt, 1 <S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, sizeof",1
1167,"<S2SV_ModStart> nrow ) { if ( nrow > ( h - row ) ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"", ""%s"", ""(row%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", nrow, ( h - row ) ) ; return ( 0 ) ; } <S2SV_ModStart> % rowsperstrip ; nrow = ( row + rowstoread ) % rowsperstrip ; <S2SV_ModStart> NULL ) { if ( nrow > ( h - row ) ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"", ""%s"", ""(nrow%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", nrow, ( h - row ) ) ; return ( 0 ) ; } <S2SV_ModStart> % rowsperstrip ; if ( nrow > ( h - row ) ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"", ""(nrow%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", nrow, ( h - row ) ) ; return ( 0 ) ; }",0
1168,"<S2SV_ModStart> ; } } if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) { i += 2 ; l = 0 ; if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) i += 2 ; } <S2SV_ModEnd> return 0 ;",0
1169,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1170,<S2SV_ModStart> ( upid == INT_MIN ) return - ESRCH ; if ( upid ==,1
1171,"<S2SV_ModStart> siocb -> scm, false",1
1172,<S2SV_ModStart> ; if ( num & ( 1 << ( number <S2SV_ModEnd> - 1 ),0
1173,"<S2SV_ModStart>, plane ) * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? 2 : 1 ) ; const int width = vpx_img_plane_width ( img, plane ) ; const int height = vpx_img_plane_height ( img, plane ) * ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) ; <S2SV_ModStart> ( buf, 1, width <S2SV_ModEnd>, file )",0
1174,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( avp -> type ) ; if ( attr_len > MD5_DIGEST_LENGTH ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), attr_len ) ; return - 1 ; } if ( attr_len > MD5_DIGEST_LENGTH ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too",0
1175,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; int r = 0 ; if <S2SV_ModEnd> ( lc -> <S2SV_ModStart> ( lc -> start || ti -> len!= i_size_read ( dev -> bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL, cmd ) ; return r? : __blkdev_driver_ioctl ( <S2SV_ModStart> -> bdev, <S2SV_ModEnd> dev -> mode",1
1176,"<S2SV_ModStart> ; if ( ( actx -> tag_len & 0x7 ) || ( actx -> tag_len & 0x7 ) ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_TLS_PAYLOAD_LENGTH_ERROR ) ; return 0 ; } actx -> <S2SV_ModStart> ; if ( ( actx -> tag_len & 0x7 ) || ( actx -> tag_len & 0x7 ) ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_TLS_PAYLOAD_ERROR ) ; return 0 ; }",0
1177,"<S2SV_ModStart> alg ) { if (! capable ( CAP_SYS_MODULE ) ) { request_module ( ""crypto-%s"", name ) ; return ERR_PTR ( - EPERM ) ; } else if (! capable ( CAP_SYS_MODULE ) ) { request_module ( ""crypto-%s"", name ) ; return ERR_PTR ( - EPERM ) ; } } <S2SV_ModEnd> alg = crypto_alg_lookup <S2SV_ModStart> ) ) { if (! capable ( CAP_SYS_MODULE ) ) { request_module ( ""crypto-%s-all"", name ) ; return ERR_PTR ( - EPERM ) ; } request_module ( ""crypto-%s"", name ) ; return crypto_alg_lookup ( name, type, mask ) ; } if (! alg ) { request_module ( ""crypto-%s"", name ) ; return ERR_PTR ( - EPERM ) ; }",0
1178,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1179,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1180,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1181,"<S2SV_ModStart> ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"", sock <S2SV_ModEnd>, sk )",0
1182,"<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { if ( cpkt. length!= sizeof ( pass_salt ) ) { return - 1 ; } <S2SV_ModStart> cpkt. data ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; }",0
1183,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC | NTLMSSP_NEGOTIATE_SEAL <S2SV_ModStart> -> sign ) <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,1
1184,<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ;,0
1185,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1186,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
1187,<S2SV_ModStart> -> head <= 0 || ( unsigned char ) ( ( unsigned char ) ( g -> sect * g -> head ) >> FD_SIZECODE ( g ) ) ==,0
1188,"<S2SV_ModStart> } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if (",0
1189,"<S2SV_ModStart>, & rlen, 0",1
1190,"<S2SV_ModStart> * slavename ; int len ; <S2SV_ModStart> = 0 ; len = strlen ( curconn -> username ) + 1 ; <S2SV_ModStart> -> password, len <S2SV_ModEnd> ) ; memcpy <S2SV_ModStart> -> password, len <S2SV_ModEnd> ) ; memcpy <S2SV_ModStart> -> pass_salt, len <S2SV_ModEnd> ) ; md5_init <S2SV_ModStart> state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; if ( curconn -> state == STATE_ACTIVE ) { abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; return ; } <S2SV_ModEnd> init_packet ( & <S2SV_ModStart> MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter, 0 <S2SV_ModEnd> ) ; send_udp",0
1191,"<S2SV_ModStart> mntent, path, rootfs -> mount",1
1192,"<S2SV_ModStart> ; if ( _PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> ) == 0 && _PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name,",0
1193,<S2SV_ModStart> - offset ; unsigned short prev_bi_vcnt = bio -> bi_vcnt ; <S2SV_ModStart> ) break ; if ( bio -> bi_vcnt == prev_bi_vcnt ) put_page ( pages [ j ] ) ;,1
1194,<S2SV_ModStart> -> depth ; if <S2SV_ModEnd> ( numcolors <=,0
1195,"<S2SV_ModStart> state. path <S2SV_ModEnd> ; char localhost <S2SV_ModStart> ""localhost"" ; } result = Curl_urldecode ( conn -> data, path, 0, & <S2SV_ModStart> smtpc -> domain, NULL, TRUE ) ; if ( result ) return result <S2SV_ModEnd> ; state (",1
1196,"<S2SV_ModStart> LEX_ID ) { snprintf <S2SV_ModEnd> ( str, <S2SV_ModStart> ( str, ""%s"", jslGetTokenValueAsString ( ) ) ; } else if ( lex -> tk == LEX_STRING ) { snprintf ( str, len, ""String: <S2SV_blank> \'%s\'"", jslGetTokenValueAsString ( ) ) ; strncat ( str, ""\\'"", len ) ; } else if ( lex -> tk == LEX_COMMENT ) { snprintf ( str, ""%s"", jslGetTokenValueAsString ( ) ) ; strncat ( str, ""%s"", jslGetTokenValueAsString ( ) ) ; } else if ( lex -> tk == LEX_COMMENT ) { snprintf ( str, ""%s\\n"", jslGetTokenValueAsString ( ) ) ; strncat ( str, ""\\'"", len ) ; } else if ( lex -> tk == LEX_COMMENT ) { snprintf ( str, ""%s"", jslGetTokenValueAsString ( ) ) ; strncat ( str, ""%s"", jslGetTokenValueAsString ( ) ) ; } else if ( lex -> tk == LEX_COMMENT ) { snprintf",0
1197,<S2SV_ModStart> [ i ] && j < sizeof ( buf ),0
1198,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1199,<S2SV_ModStart> + RDS_CONG_MAP_BYTES ; rm -> data_len -= sizeof ( struct rds_header ) ; <S2SV_ModStart> ) + RDS_CONG_MAP_BYTES ; goto out,0
1200,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1201,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1202,,1
1203,"<S2SV_ModStart> { r_cons_printf ( ""\\n"" ) ; } if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""\\nFS <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""\\nFS <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_SET ( mode ) ) { r_flag_space_set ( r -> flags, R_FLAGS_FS_SYMBOLS ) ; } else { r_spaces_push ( & r -> anal -> meta_spaces, ""bin"" ) ; } if (! at &&! exponly ) { if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""\\nFS <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""\\nFS <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_spaces_push ( & r -> anal -> meta_spaces, ""bin"" ) ; }",0
1204,"<S2SV_ModStart>, rqstp, res <S2SV_ModEnd> ) ; out",1
1205,"<S2SV_ModStart> mntent -> mnt_dir, 0",0
1206,"<S2SV_ModStart> iv ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1207,"<S2SV_ModStart> ) ) { * status = ""INVALID_S4U2PROXY_OPTIONS"" ; <S2SV_ModStart> ) ) { * status = ""EVIDENCE_TICKET_MISMATCH"" ;",1
1208,<S2SV_ModStart> thread -> tp_value [ 0 ] <S2SV_ModStart> childregs -> ARM_r3 ; thread -> tp_value [ 1 ] = get_tpuser ( ),1
1209,"<S2SV_ModStart> bufsize ) { char * new_buf ; size_t new_bufsize <S2SV_ModEnd> ; JAS_DBGLOG ( <S2SV_ModStart> ) ) ; new_buf = 0 ; JAS_DBGLOG ( 100, ( ""jas_stream_memopen(%p, <S2SV_blank> %d)\\n"", buf, new_bufsize ) ) ; <S2SV_ModStart> 0 ) { new_bufsize <S2SV_ModEnd> = 1024 ; <S2SV_ModStart> } else { new_bufsize <S2SV_ModEnd> = bufsize ; <S2SV_ModStart> = bufsize ; } if ( new_buf ) { jas_eprintf ( ""jas_stream_memopen <S2SV_blank> buffer <S2SV_blank> buf=%p <S2SV_blank> myalloc=%d\\n"", new_buf, new_bufsize <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( 100, ( ""jas_stream_memopen <S2SV_blank> buffer <S2SV_blank> buf=%p <S2SV_blank> myalloc=%d\\n"", new_buf, new_bufsize <S2SV_ModEnd> ) ) ;",0
1210,"<S2SV_ModStart> sshbuf * b = NULL <S2SV_ModStart> char * pkalg = NULL <S2SV_ModStart> u_char * pkblob = NULL <S2SV_ModStart>, * sig = NULL <S2SV_ModStart> ; if ( <S2SV_ModEnd> authctxt -> valid <S2SV_ModStart> { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_string ( ssh, & sig, & blen ) )!= 0 ) ) { fatal ( ""%s: <S2SV_blank> parse <S2SV_blank> request <S2SV_blank> failed: <S2SV_blank> %s"", __func__, ssh_err ( r ) ) ; goto done ; } if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & sig, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & slen ) )!= 0 ) { fatal ( ""%s",0
1211,"<S2SV_ModStart> ; uint32_t bcount ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
1212,<S2SV_ModStart> == READ ) { mutex_lock ( & inode -> i_mmap_sem ) ; <S2SV_ModStart> = ocfs2_dio_get_block ; } else { mutex_unlock ( & inode -> i_mmap_sem ) ; <S2SV_ModStart> = ocfs2_dio_get_block ; },0
1213,"<S2SV_ModStart> mech ) ; ret = gsasl_server_start ( ctx -> gsasl_ctx, NULL, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ), 0 ) ; return ; } if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ) ) ; return ; }",0
1214,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1215,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteFujiEntry ) ) ;",1
1216,"<S2SV_ModStart> failed_mount3 ; } # ifdef CONFIG_EXT2_FS_XATTR sbi -> s_mb_cache = ext2_xattr_create_cache ( ) ; if (! sbi -> s_mb_cache ) { ext2_msg ( sb, KERN_ERR, ""Failed <S2SV_blank> to <S2SV_blank> create <S2SV_blank> an <S2SV_blank> mb_cache"" ) ; goto failed_mount3 ; } # endif <S2SV_ModStart> ; failed_mount3 : if ( sbi -> s_mb_cache ) ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ;",1
1217,<S2SV_ModStart> bd_addr ) { if ( interface_ready ( ) == FALSE ) return BT_STATUS_NOT_READY ;,0
1218,<S2SV_ModStart> len < tcp_hdrlen || tcp_hdrlen < sizeof ( struct tcphdr ) <S2SV_ModStart> ; if ( tcp_hdrlen >= 15 * 4 ) return 0 ; if (,1
1219,"<S2SV_ModStart> int i ; size_t size ; matrix = 0 ; <S2SV_ModStart> 0 ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> -> datasize_ = 0 ; if (! jas_safe_size_mul ( numrows, numcols, & size ) ) { goto error ; } matrix -> datasize_ = size <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> return matrix ; error : if ( matrix ) { jas_matrix_destroy ( matrix ) ; } return 0 ;",1
1220,"<S2SV_ModStart> ipv6_select_ident ( fh, rt <S2SV_ModStart> ipv6_select_ident ( fh, rt",1
1221,"<S2SV_ModStart> void ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; mb2_cache_entry_init ( ext4_mb_cache, GFP_NOFS, hash <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ; ce = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS ) ; if (! ce ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } <S2SV_null>",0
1222,<S2SV_ModStart> * req ; <S2SV_ModEnd> req = scsi_req_alloc <S2SV_ModStart> hba_private ) ; <S2SV_ModEnd> return req ;,1
1223,<S2SV_ModStart> int i ; size_t <S2SV_ModEnd> avail ; txid <S2SV_ModStart> 4 ) ; if ( nxip < 0 || nxip > MAX_TXID ) goto bad_format ; <S2SV_ModStart> 8 + nxip * 8 ; avail = buf -> len - buf -> cursor ; expect = 8 + 8 + nxip * 8 ; if ( expect < 0 || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; },0
1224,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1225,"<S2SV_ModStart>!= RDMA_NODE_IB_CA ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; rdma_destroy_id ( cm_id ) ; return ret ; } <S2SV_ModEnd> ret = -",0
1226,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct xfrm_dump_info <S2SV_ModStart> struct xfrm_dump_info info <S2SV_ModEnd> ; info. <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> ( void ),1
1227,"<S2SV_ModStart> - 1 ; size_t len ; <S2SV_ModStart> = 0 ; len = min_t ( ssize_t, count, OE_SSIZE_MAX ) ; if ( len > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; <S2SV_ModStart> ( & ret, len <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) len ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
1228,"<S2SV_ModStart> dentry * upper <S2SV_ModEnd> ; int err <S2SV_ModStart> I_MUTEX_PARENT ) ; upper = lookup_one_len ( dentry -> d_name. name, upperdir, dentry -> d_name. len ) ; err = PTR_ERR ( upper ) ; if ( IS_ERR ( upper ) ) goto out_unlock ; <S2SV_ModStart> if ( upper == ovl_dentry_upper ( dentry ) ) { <S2SV_ModEnd> if ( is_dir <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> ovl_dentry_version_inc ( dentry <S2SV_ModStart> ) ; } dput ( upper ) ; <S2SV_ModStart> dentry ) ; out_unlock :",1
1229,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; else s_log ( LOG_ERR, ""Service <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; return 1 ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> eof ) { errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) s_log ( LOG_ERR, ""Service <S2SV_blank>",0
1230,<S2SV_ModStart> * ptrptr && <S2SV_ModEnd> nmemb && size <S2SV_ModStart> nmemb && size <S2SV_ModEnd> ) return AVERROR,1
1231,<S2SV_ModStart> ( a -> type == szMAPI_BINARY && a -> <S2SV_ModStart> else if ( a -> type == szMAPI_BINARY &&,1
1232,"<S2SV_ModStart> ) ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif i -> posX = i -> parent -> width - i -> width ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif i -> posY = i -> parent -> height - i -> height ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n""",0
1233,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : * ( size_t * ) val = ms -> elf_notes_max ; return 0 ;,1
1234,"<S2SV_ModStart> { jas_eprintf ( ""got <S2SV_blank> box <S2SV_blank> type <S2SV_blank> %s\\n"" <S2SV_ModEnd>, box ->",1
1235,,1
1236,"<S2SV_ModStart> & 0xffff ; if ( c >= 4 ) { <S2SV_ModStart>, c, 0 ) ; } else { err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err <S2SV_ModEnd> < 0 ) <S2SV_ModStart> 0xffff ; } if ( ev_code >= 128 && ev_code == SEQ_EXTENDED ) { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 4 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } ev_size = 8 ; if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return count - c ; } if ( ev_code >= 128 && ev_code == SEQ_EXTENDED ) { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 2 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; }",0
1237,<S2SV_ModStart> * journal = EXT4_JOURNAL ( page_file_mapping ( page ) <S2SV_ModEnd> ) ; if,0
1238,"<S2SV_ModStart> ++ ) { if (! trak ) continue ; <S2SV_ModStart> ) ; GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) goto exit ; if ( trak -> Media -> information -> sampleTable ) { writer -> stbl = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STBL ) ; if (! writer -> stbl ) return GF_OUT_OF_MEM ; } else { writer -> stbl = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stbl ) { writer -> stbl = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STBL ) ; if (! writer -> stbl ) return GF_OUT_OF_MEM ; } else { writer -> stbl = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (",0
1239,<S2SV_ModStart> UINT32 nsc_rle_encode ( const,1
1240,"<S2SV_ModStart> [ 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> ; # endif strncpy ( md5data, password, 82 ) ; md5data [ 83 <S2SV_ModEnd> ] = '\\0' <S2SV_ModStart> = '\\0' ; memcpy ( md5data <S2SV_ModEnd> + 1, <S2SV_ModStart> password ), 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; init_packet ( & data, MT_PTYPE_DATA, srcmac, dstmac, sessionkey, outcounter ) ; plen = add_control_packet ( & data, MT_CPTYPE_USERNAME, username, strlen ( username ) ) ; plen += add_control_packet ( & data, MT_CPTYPE_TERM_TYPE, terminal, strlen ( terminal ) ) ; if ( is_a_tty && get_terminal_size ( & width, & height )!= - 1 ) { width = htole16 ( width ) ; height = ht",0
1241,"<S2SV_ModStart> * dllhandle ; if ( COM_CompareExtension ( name, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", name ) ; return NULL ; }",1
1242,<S2SV_ModStart> ; if ( _mibindex > 0 && _mibindex_max > 0 ) SNMP_FREE ( _mibindex ) ; _mibindex = 0 ; _mibindex_max = 0 ;,0
1243,<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> ++ ; } \\\n} <S2SV_ModEnd> typedef struct PCDTable <S2SV_ModStart> buffer ) ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ] ) ; <S2SV_ModStart> ++ ; } \\\n} <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1244,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1245,"<S2SV_ModStart> ) ) g_hash_table_destroy ( headers ) ; headers = web_socket_util_new_headers ( ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=3;k=blah"" ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached ( ) ; g_hash_table_remove_all ( headers ) ; g_hash_table_insert ( headers, g_strdup ( ""CockpitAuth=v=4;k=blah"" ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached ( ) ; g_hash_table_remove_all ( headers ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=6;k=blah"" ) ) ; g_hash_",0
1246,"<S2SV_ModStart> # ifdef HAVE_IPV6 <S2SV_ModEnd> if ( * <S2SV_ModStart> 1 ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } <S2SV_ModEnd> # endif if <S2SV_ModStart> 1 ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return <S2SV_ModEnd> estrndup ( str <S2SV_ModStart> colon ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } <S2SV_ModEnd> if ( str_len <S2SV_ModStart> colon ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } <S2SV_ModEnd> if ( str_len <S2SV_ModStart> colon ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } <S2SV_ModEnd> if (",0
1247,"<S2SV_ModStart> i, ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ) <S2SV_ModEnd> ) ; }",0
1248,"<S2SV_ModStart> -> y_buffer ; const int rows = src_ybc -> y_height ; const int cols = src_ybc -> y_width * src_ybc -> y_stride ; <S2SV_ModStart> ++ row ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> -> y_width ) ; memcpy <S2SV_ModEnd> ( src,",0
1249,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHWELCOME ; }",1
1250,<S2SV_ModStart> == * ptr && ptr [ 1 ],1
1251,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> mi_col < tile -> mi_col_end && mi_col < tile -> mi_col_start + tile -> mi_col_end <S2SV_ModEnd> ; mi_col += <S2SV_ModStart> BLOCK_SIZE i ; if ( sf -> adaptive_pred_interp_filter ) { for ( int i = 0 ; i < BLOCK_4X4 && i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = MAX ( 4, num_4x4_blocks_wide_lookup [ i ] ) ; const int num_4x4_h = MAX ( 4, num_4x4_blocks_high_lookup [ i ] ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index < 16 / num_4x4_blk ; ++ x -> b",0
1252,"<S2SV_ModStart>, obj_tlen ; u_int <S2SV_ModEnd> hexdump ; u_int <S2SV_ModStart> hexdump ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; }",0
1253,"<S2SV_ModStart> * mbmi, <S2SV_ModEnd> const int_mv mvs <S2SV_ModStart> * ref = & mbmi -> ref_mvs [ <S2SV_ModEnd> mbmi -> ref_frame <S2SV_ModStart> i ] ] <S2SV_ModEnd> ; vp9_inc_mv (",0
1254,"<S2SV_ModStart> ) ; } if ( encoder -> interface ( ) == NULL ) die ( ""Unsupported <S2SV_blank> codec."" ) ; <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1255,<S2SV_ModStart> ; if ( skb_is_gso ( skb_out ) ) { kfree_skb ( skb_out ) ; goto free ; } if (,0
1256,<S2SV_ModStart> sta -> lock ) ; spin_lock_init ( & sta -> ps_lock,1
1257,<S2SV_ModStart> tp_event ) && perf_paranoid_tracepoint_raw <S2SV_ModEnd> ( ) &&,1
1258,<S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_ops <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_v4_ops <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_ops,0
1259,"<S2SV_ModStart>, 0 ) ; if (! data_interface ||! control_interface ) return - ENODEV",1
1260,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1261,"<S2SV_ModStart> ) return ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; if (! entry ) { <S2SV_ModStart>, NULL, NULL ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; <S2SV_ModStart> ( entry ) { add_mibfile ( entry, NULL, NULL, NULL ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strdup ( env_var ) ; if ( env_var!= NULL ) { if ( * env_var == '+' ) entry = strdup ( env_var + 1, ENV_SEPARATOR, & st ) ; else entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; else entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = NULL ; netsnmp_init_mib_internals ( ) ; env_var = strdup ( netsnmp_getenv ( ""MIBDIRS"" )",0
1262,"<S2SV_ModStart> * head ; <S2SV_ModEnd> newsk -> sk_sndbuf <S2SV_ModStart> -> sk_rcvbuf ; sctp_copy_descendant <S2SV_ModEnd> ( newsk,",1
1263,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ) <S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) )",0
1264,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return sel ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! get_desc ( & desc, sel ) <S2SV_ModEnd> ) return - <S2SV_ModStart> if (! <S2SV_ModEnd> ( desc -> <S2SV_ModStart> ( desc -> <S2SV_ModEnd> type & BIT <S2SV_ModStart> ( desc -> <S2SV_ModEnd> l << 1 <S2SV_ModStart> -> d ) { case 0 : return INSN_CODE_SEG_PARAMS ( 2, 2 ) ; case 1 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; case 2 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 3 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1265,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
1266,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
1267,<S2SV_ModStart> return ret ; fsnotify_put_group ( group ) ;,1
1268,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_ctx_id_t * ctx_unused <S2SV_ModEnd> ) { iakerb_ctx_id_t <S2SV_ModStart> = 0 ; ctx_unused <S2SV_ModEnd> = krb5_gss_init_context (,0
1269,"<S2SV_ModStart> ) ; dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; if (! src_known &&! dst_known ) { verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> add <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> var_off ) ; return - EINVAL ; } <S2SV_ModStart> case BPF_SUB : verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> sub <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> var_off ) ; if ( dst_reg -> smin_value > S64_MAX ) { verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> sub <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> smin_value ) ; dst_reg -> smin_value = S64_MIN ; } if ( dst_reg -> smax_value > S64_MAX ) { verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> sub <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalar",0
1270,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
1271,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
1272,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; }",1
1273,<S2SV_ModStart> imethod ) ; if (! inflated ) { mono_context_reset ( & tmp_context ) ; mono_class_inflate_generic_method ( imethod ) ; return NULL ; },0
1274,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; size_t <S2SV_ModEnd> tmp ; if <S2SV_ModStart> copy_from_user ( buf <S2SV_ModEnd>, buffer,",0
1275,"<S2SV_ModStart> input -> cur ) ; } if ( ( ( ctxt -> inputNr > 1024 ) && ( input -> cur >= 1024 ) ) { xmlFatalErr ( ctxt, XML_ERR_ENTITY_LOOP, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"", ctxt -> inputNr + 1, input -> cur",0
1276,"<S2SV_ModStart> } if ( le32_to_cpu ( raw_super -> segment_count ) > F2FS_MAX_SEGMENT ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> segment <S2SV_blank> count <S2SV_blank> (%u)"", le32_to_cpu ( raw_super -> segment_count ) ) ; return 1 ; } if (",1
1277,"<S2SV_ModStart> is_path ) { const <S2SV_ModStart> size_t len ; <S2SV_ModEnd> last_elem = wp <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN}"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM}"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) ) { const char * repl ; size_t len ; if ( ( ( strncmp ( & name [ 1 ], ""ORIGIN}"", 7 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? l -> l_origin <S2SV_ModEnd> : _dl_platform ) <S2SV_ModStart> ( __libc_enable_secure? NULL <S2SV_ModEnd> : l -> <S2SV_ModStart> l_origin ) : _dl_platform ) ; if ( repl!= NULL ) {",0
1278,<S2SV_ModStart> } pDecCont = ( decContainer_t * ) H264SwDecMalloc ( <S2SV_ModEnd> sizeof ( decContainer_t,0
1279,<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart>! opt ) { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) ; txopt_put ( opt_to_free ) ;,1
1280,"<S2SV_ModStart> == 5 ) goto inhdr_error ; if ( IPCB ( skb ) -> opt. optlen == 0 ) { IPCB ( skb ) -> opt. optlen = sizeof ( struct iphdr ) ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; } else if ( IPCB ( skb ) -> opt. <S2SV_ModStart> return 0 ; inhdr_error : IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ;",0
1281,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1282,"<S2SV_ModStart> ; if ( rcu_dereference_protected ( rt, sock_owned_by_user ( in_skb ) ) ) { ip_rt_put ( rt ) ; err = - EINVAL ; goto errout ; } rcu_read_lock ( ) ; <S2SV_ModStart> ; if ( rcu_dereference_protected ( rt, sock_owned_by_user ( in_skb ) ) ) goto errout ; rcu_read_unlock ( <S2SV_ModStart> ; errout : if ( rcu_dereference_protected ( rt, sock_owned_by_user ( in_skb ) ) ) { kfree_skb ( skb ) ; goto errout ; }",0
1283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1284,<S2SV_ModStart> goto errout ; for ( j = 0 ; j < info -> partitions ; j ++ ) { if ( info -> stagemasks [ j ] >> ( 8 * info -> stages ) - info -> begin < 0 || info -> stagemasks [ j ] >> ( 8 * info -> stages ) - info -> begin < 0 || info -> stagemasks [ j ] >> ( 8 * info -> stages ) - info -> begin < 0 ) goto errout ; if ( info -> stagemasks [ j ] >> ( 8 * info -> stages ) - info -> begin < 0 || info -> stagemasks [ j ] >> ( 8 * info -> stages ) - info -> begin < 0 ) goto errout ; if ( info -> stagemasks [ j ] >> ( 8 * info -> stages ) - info -> begin < 0 || info -> stagemasks [ j ] >> ( 8 * info -> stages ) - info -> begin < 0 ) goto errout ; if ( info -> stagemasks [ j ] >> ( 8 * info -> stages ) - info -> begin < 0 ) goto errout ;,0
1285,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
1286,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; } tp -> copied_seq = seq ;,1
1287,"<S2SV_ModStart> ; krb5_key_data * key_data ; if ( n_key_data == 0 ) return NULL ; key_data = k5calloc ( n_key_data, sizeof ( * key_data ), & err ) ; if ( key_data_in == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents [ 1 ] = NULL ; } } for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [",0
1288,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
1289,<S2SV_ModStart> ] ) ; if ( nByte > INT_MAX ) nByte = INT_MAX ;,0
1290,"<S2SV_ModStart> filp ) { struct sockaddr_storage addr ; sockaddr_copy ( & addr, filp -> f_cred -> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1291,"<S2SV_ModStart> expr_ty iter, string type_comment, <S2SV_ModStart> orelse ; p -> v. AsyncFor. type_comment = type_comment ; p ->",0
1292,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> mi_sort_index ( MI_CHECK * param <S2SV_ModEnd>, char * <S2SV_ModStart>, name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else",0
1293,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
1294,"<S2SV_ModStart> ) { case AC_VECTOR : kvm_queue_exception_e ( vcpu, AC_VECTOR, error_code ) ; return 1 ; case",1
1295,"<S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case",0
1296,"<S2SV_ModStart> UINT error ; if (! Stream_SafeSeek ( s, 4 ) ) return ERROR_INVALID_DATA ; <S2SV_ModStart>, pduLength ) ; if (! Stream_SafeSeek ( s, pduLength ) ) return ERROR_INVALID_DATA",0
1297,<S2SV_ModStart> ; if ( pData -> multicastHops > 0 && pData -> numMulticastHops > 0 && pData -> socket -> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1298,<S2SV_ModStart> < 0 ) { ret = chg ; goto out_err ; } <S2SV_ModEnd> if ( hugepage_subpool_get_pages <S2SV_ModStart> chg ) ) { ret = <S2SV_ModEnd> - ENOSPC ; <S2SV_ModStart> - ENOSPC ; goto out_err ; } <S2SV_ModStart> chg ) ; goto out_err <S2SV_ModEnd> ; } if <S2SV_ModStart> return 0 ; out_err : resv_map_put ( vma ) ; return ret ;,1
1299,"<S2SV_ModStart> struct flowi6 fl6 ; struct ipv6_txoptions * opt <S2SV_ModStart> ) ; fl6. flowlabel = np -> flow_label ; if ( ipv6_addr_type ( & fl6. saddr ) & IPV6_ADDR_LINKLOCAL ) fl6. flowi6_oif = sk -> sk_bound_dev_if ; if ( np -> opt && np -> opt -> srcrt ) { struct rt0_info * rt0 = np -> opt -> srcrt ; <S2SV_ModStart> & fl6. daddr = * rt0 -> addr ; } pr_debug ( ""%s: <S2SV_blank> skb:%p, <S2SV_blank> len:%pI6 <S2SV_blank> src:%pI6 <S2SV_blank> dst:%pI6\\n"", __func__, skb, fl6. saddr, & fl6. daddr ) ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; if (! ( opt -> param_flags & SPP_PMTUD_ENABLE ) ) skb -> local_df = 1 ; return ip6_xmit ( sk, skb, & fl6, opt,",0
1300,"<S2SV_ModStart> = ECRYPTFS_SUPER_MAGIC ; s -> s_stack_depth = path. dentry -> d_sb -> s_stack_depth + 1 ; rc = - EINVAL ; if ( s -> s_stack_depth > FILESYSTEM_MAX_STACK_DEPTH ) { pr_err ( ""eCryptfs: <S2SV_blank> maximum <S2SV_blank> fs <S2SV_blank> stacking <S2SV_blank> depth <S2SV_blank> exceeded\\n"" ) ; goto out_free ; }",1
1301,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1302,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
1303,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { return FALSE ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { return FALSE ; },0
1304,"<S2SV_ModStart> ret, last_pwd, n_new_keys <S2SV_ModStart> keyblocks ) { n_new_keys = count_new_keys ( kdb -> n_key_data, kdb -> key_data ) ; <S2SV_ModStart> keyblocks ) { n_new_keys = count_new_keys ( kdb -> n_key_data, kdb -> key_data ) ; <S2SV_ModStart> keyblocks ) { n_new_keys = count_new_keys ( kdb -> key_data, kdb -> key_data ) ; }",0
1305,"<S2SV_ModStart> int len, <S2SV_ModEnd> result = RLC_OK <S2SV_ModStart> ; result = RLC_ERR ; bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; switch ( operation ) { case RSA_ENC : bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ; } bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_OK ; } do { m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } while ( pad!= 0 && m_len > 0 ) ; * p_",0
1306,<S2SV_ModStart> == ERROR_SUCCESS ) { yr_free ( stack ) ; stack = ( YR_VALUE * ) yr_malloc ( stack_size ) ; if ( stack == NULL ) return ERROR_INSUFFICIENT_MEMORY ; } <S2SV_ModStart> ++ ) { yr_free ( stack ) ; stack = ( YR_VALUE * ) yr_malloc ( stack_size * sizeof ( YR_VALUE ) ) ; if ( stack == ( YR_VALUE * ) yr_malloc ( stack_size * sizeof ( YR_VALUE ) ) ; if ( stack == ( YR_VALUE * ) yr_malloc ( stack_size ) ) return ERROR_INSUFFICIENT_MEMORY ; } while ( stack!= ( YR_VALUE * ) yr_malloc ( stack_size ) ) { yr_free ( stack ) ; stack = ( YR_VALUE * ) yr_malloc ( stack_size ) ; if ( stack == ( YR_VALUE * ) yr_malloc ( stack_size ) ; if ( stack == ( YR_VALUE * ) yr_malloc ( stack_size ) ) return ERROR_INSUFFICIENT_MEMORY,0
1307,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1308,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1309,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1310,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> cm -> counts -> <S2SV_ModEnd> switchable_interp [ j,0
1311,"<S2SV_ModStart> { token ++ ; } if ( operand >= MAX_OPERANDS ) { eprintf ( ""Too <S2SV_blank> many <S2SV_blank> operands\\n"" ) ; return false",1
1312,"<S2SV_ModStart> ) { MACROBLOCK * const x <S2SV_ModEnd> = & cpi <S2SV_ModStart> -> mb ; vpx_setup_src_planes ( x, cpi -> Source, 0, 0 ) ; vpx_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_dst_planes ( xd, get_frame_new_buffer ( cm ), 0, 0 ) ; vpx_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> MAX_MB_PLANE ) ; memset <S2SV_ModEnd> ( xd ->",0
1313,"<S2SV_ModStart> name ) { size_t size = sizeof ( char ) * 2 + 16 ; if ( size < 2 ) { ERR ( ""Memory <S2SV_blank> allocation <S2SV_blank> error: <S2SV_blank> %d <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", size, ( unsigned int ) strlen ( name ) ) ; return ; } <S2SV_ModEnd> dst_name = malloc <S2SV_ModStart> 2 + 16 ) ; if (! ( dst = fopen ( dst_name, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } size = strlen ( dst_name ) ; if ( size < 4 ) { ERR ( ""Memory <S2SV_blank> allocation <S2SV_blank> error: <S2SV_blank> %d <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", dst_name, ( unsigned int ) ( unsigned int ) sizeof ( char ) ) ; if (! ( dst = fopen ( dst_name, ""w"" ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; }",0
1314,"<S2SV_ModStart> = htc_request_check_host_hdr ( sp <S2SV_ModEnd> ) ; if <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; <S2SV_ModStart> ) ; } if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; }",0
1315,"<S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ""ImproperImageHeader"" ) ; do { pixel_info = ( PixelPacket * ) RelinquishMagickMemory ( pixel_info ) ; pixel_info = ( PixelPacket * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info!= ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info!= ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info!= ( MemoryInfo * ) NULL ) pixel_info = ( PixelPacket * ) Relinqu",0
1316,<S2SV_ModStart> ctl_files_rwlock ) ; mutex_init ( & card -> user_ctl_lock ) ;,1
1317,"<S2SV_ModStart> ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } ( * psig ) = s + <S2SV_ModEnd> padlen + 3 <S2SV_ModStart> + 3 ; sig_len -= padlen + 3 ;",0
1318,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ) ) ),0
1319,<S2SV_ModStart> ; ps_dec -> u2_cur_slice_num = 0 ; ps_dec -> <S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> u2_cur_slice_num_dec_map [ i4_cur_slice <S2SV_ModStart> -> u2_cur_slice_num_dec_map [ i4_cur_slice -> i4_cur_slice_num_dec_map [ i4_cur_slice -> i4_cur_slice -> i4_cur_slice ] ] = 0 ; ps_dec -> u2_cur_slice_num_dec_map [ i4_cur_slice -> i4_cur_slice_num_dec_map [ i4_cur_slice -> i4_cur_slice_num_dec_map [ i4_cur_slice -> i4_cur_slice -> i4_cur_slice_num_dec_map [ i4_cur_slice -> i4_cur_slice ] ] = 0 ; ps_dec -> u2_cur_slice_num_dec_map [ i4_cur_slice -> i4_cur_slice_num_dec_map [ i4_cur_slice -> i,0
1320,<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },1
1321,"<S2SV_ModStart> struct flowi6 fl6 ; struct ipv6_txoptions * opt <S2SV_ModStart> ) ; fl6. flowlabel = np -> flow_label ; if ( ipv6_addr_type ( & fl6. saddr ) & IPV6_ADDR_LINKLOCAL ) fl6. flowi6_oif = sk -> sk_bound_dev_if ; if ( np -> opt && np -> opt -> srcrt ) { struct rt0_info * rt0 = np -> opt -> srcrt ; <S2SV_ModStart> & fl6. daddr = * rt0 -> addr ; } pr_debug ( ""%s: <S2SV_blank> skb:%p, <S2SV_blank> len:%pI6 <S2SV_blank> src:%pI6 <S2SV_blank> dst:%pI6\\n"", __func__, skb, fl6. saddr, & fl6. daddr ) ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; if (! ( opt -> param_flags & SPP_PMTUD_ENABLE ) ) skb -> local_df = 1 ; return ip6_xmit ( sk, skb, & fl6, opt,",0
1322,"<S2SV_ModStart> args -> buffer_count > I915_MAX_EXEC_OBJECT_COUNT ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } if ( args -> buffers_ptr == NULL ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> no <S2SV_blank> buffers\\n"" ) ; return - EINVAL ; } if (",0
1323,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; struct pci_dev <S2SV_ModStart> ; struct pci_dev <S2SV_ModEnd> * pdev ; <S2SV_ModStart> return PTR_ERR ( karg ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;",0
1324,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
1325,"<S2SV_ModStart> char * path, const char * rootfs <S2SV_ModStart> mntdata, optional, rootfs",1
1326,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1327,"<S2SV_ModStart> ab ) { <S2SV_ModEnd> size_t len_sent = <S2SV_ModStart> 0 ; const <S2SV_ModEnd> char __user * <S2SV_ModStart> -> arg_start ; <S2SV_ModEnd> p = ( <S2SV_ModStart> -> arg_start ; <S2SV_ModEnd> buf = kmalloc <S2SV_ModStart> ( * ab, ""argc=%d"", context -> execve. argc ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } <S2SV_ModStart> -> arg_start ; if (! p ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if ( len <= 0 ) break ; kfree ( buf ) ; } <S2SV_ModEnd> for ( i",0
1328,"<S2SV_ModStart> | O_NOCTTY, ( mode == 0 || mode == MODE_INVALID )? 0644 : mode <S2SV_ModEnd> ) ; if",1
1329,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; if <S2SV_ModStart> FALSE ; } return parse_netscreen_packet ( wth -> random_fh, phdr, buf <S2SV_ModEnd>, line, <S2SV_ModStart>, line, <S2SV_ModEnd> err, err_info <S2SV_ModStart> err_info ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1330,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ; u64 irq_time ; if ( rq -> skip_clock_update ) return <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1331,<S2SV_ModStart> 255U ; } for ( j = 0 ; j < length ; j ++ ) { CheckNumberPixels ( 8 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ; break ; } case 3 : { CheckNumberPixels ( 4 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 2 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ) ; break ; } case 4 : { CheckNumberPixels ( 5 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ) ; break ; } case 5 : { CheckNumberPixels ( 6 ) ; * pixels ++ = ( pixel >>,0
1332,"<S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; } <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; } <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; }",0
1333,<S2SV_ModStart> { struct blkif_response * <S2SV_ModStart> int notify ; <S2SV_ModEnd> spin_lock_irqsave ( & <S2SV_ModStart> case BLKIF_PROTOCOL_NATIVE : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> native. rsp_prod_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_X86_32 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> x86_32. rsp_prod_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_X86_64 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart>. rsp_prod_pvt ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> ) ; } resp -> id = id ; resp -> operation = op ; resp -> status = st ;,1
1334,<S2SV_ModStart> ; if ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX <S2SV_ModEnd> ) return ;,0
1335,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( datao, buf_size, 12 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 2 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 2 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 2 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 2 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( s > buf_size - 12 ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entry_type = exif_get_short ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; n -> entries [ tcount ]. entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteFuji"", sizeof ( MnoteF",0
1336,"<S2SV_ModStart> { if ( strlen ( fullname ) >= ( l_int32 ) nfiles ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> { if ( strlen ( fullname ) >= ( l_int32 ) nfiles ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> { if ( strlen ( fullname ) >= ( l_int32 ) nfiles ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> { if ( strlen ( fullname ) >= ( l_int32 ) nfiles ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> { if ( strlen ( fullname ) >= ( l_int32 ) nfiles ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; }",0
1337,"<S2SV_ModStart> ext_dp -> icmp_length && ND_TTEST2 ( ext_dp -> icmp_ext_version_res, plen - ICMP_EXTD_MINLEN ) <S2SV_ModStart> - ICMP_EXTD_MINLEN ; if ( ND_TTEST2 ( ext_dp -> icmp_ext_version_res, hlen ) ) { <S2SV_ModStart> ) ) ; }",0
1338,<S2SV_ModStart> dentry * dir <S2SV_ModEnd> ; int dir_has_key <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ),1
1339,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 1 ) ; s_poll_disable ( ) ; <S2SV_ModStart> stunnel_locks [ LOCK_SECTIONS ] <S2SV_ModEnd> ) ; opt <S2SV_ModStart>. next ; service_free ( & service_options ) ; opt = service_options. next ; service_options. next = NULL ; service_free ( & service_options ) ; while ( opt ) { unsigned i ; SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; service_free ( opt ) ; opt = opt -> next ; opt -> next = NULL ; service_free ( & service_options ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names ) { SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 <S2SV_ModEnd> ) ; s_log <S2SV_ModStart> LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> serv",0
1340,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; <S2SV_ModEnd> } if (",1
1341,<S2SV_ModStart> parent ) ; if ( i -> width > i -> parent -> width ) i -> width = i -> parent -> width ; if ( i -> height > i -> parent -> height ) i -> height = i -> parent -> height ;,0
1342,<S2SV_ModStart> ; if ( l > ( unsigned ) <S2SV_ModEnd> buf + n <S2SV_ModStart> ; if ( l > ( unsigned ) <S2SV_ModEnd> buf + n <S2SV_ModStart> ; if ( l > ( unsigned ) <S2SV_ModEnd> buf + n <S2SV_ModStart> ; if ( l > ( unsigned ) <S2SV_ModEnd> buf + n <S2SV_ModStart> ; if ( l > ( unsigned ) <S2SV_ModEnd> buf + n <S2SV_ModStart> ; if ( l > ( unsigned ) <S2SV_ModEnd> buf + n <S2SV_ModStart> ; if ( l > ( unsigned ) <S2SV_ModEnd> buf + n <S2SV_ModStart> ; if ( l > ( unsigned ) <S2SV_ModEnd> buf + n <S2SV_ModStart> ; if ( l > ( unsigned ) <S2SV_ModEnd> buf + n <S2SV_ModStart> ; if ( l > ( unsigned ) <S2SV_ModEnd> buf + n <S2SV_ModStart> ; if ( l > ( unsigned ) <S2SV_ModEnd> buf + n <S2SV_ModStart> ; if ( l > ( unsigned ) <S2SV_ModEnd> buf + n <S2SV_ModStart> ; if ( l > ( unsigned ) <S2SV_ModEnd> buf + n <S2SV_ModStart> ; if ( l > ( unsigned ) <S2SV_ModEnd> buf + n <S2SV_ModStart> ; if ( l > ( unsigned ) <S2SV_ModEnd> buf + n <S2SV_ModStart> ; if ( l > ( unsigned ) <S2SV_ModEnd> buf + n <S2SV_ModStart> ; if ( l > ( unsigned ) <S2SV_ModEnd> buf + n <S2SV_ModStart> ; if ( l > ( unsigned ) <S2SV_ModEnd> buf + n <S2SV_ModStart> ; if ( l > ( unsigned ) <S2SV_ModEnd> buf + n <S2SV_ModStart> ; if ( l > (,0
1343,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
1344,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> break ; } if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",0
1345,<S2SV_ModStart> void ) { recovery_started = 1 ;,0
1346,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT7 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT8 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT9 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT10 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT11 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT12 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT13 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT14 <S2SV_ModEnd> )",0
1347,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1348,"<S2SV_ModStart> ; } } DECODELENGTH_CHECKLIMIT ( l, p, buf + n ) ; if ( l > ( unsigned ) sizeof ( rbuf ) ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" ) ; goto error ; } n = read ( req -> socket, buf, sizeof ( buf ) ) ; if ( n < ( unsigned ) sizeof ( rbuf ) ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" ) ; goto error ; } if ( l > ( unsigned ) sizeof ( rbuf ) ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" ) ; goto error ; } if ( l > ( unsigned ) sizeof ( rbuf ) ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" ) ; goto error ; }",0
1349,<S2SV_ModStart> ) { WORD32 <S2SV_ModEnd> st_rps_idx ; WORD32 <S2SV_ModStart> ; st_rps_idx = ps_dpb_mgr -> ai4_st_curr_before [ 0 ] ; st_rps_idx = ps_dpb_mgr -> ai4_st_curr_after [ 0 ] ; st_rps_idx = ps_dpb_mgr -> ai4_st_curr_before [ 0 ] ; st_rps_idx = ( WORD32 ) ps_dpb_mgr -> ai4_st_curr_before [ 0 ] ; st_rps_idx = ( WORD32 ) ps_dpb_mgr -> ai4_st_curr_after [ 0 ] ; st_rps_idx = ( WORD32 ) ps_dpb_mgr -> ai4_st_curr_before [ 0 ] ; ps_dpb_mgr -> ai4_st_curr_before [ 0 ] = ps_dpb_mgr -> ai4_st_curr_before ; ps_dpb_mgr -> ai4_st_curr_after [ 0 ] = ps_dpb_mgr -> ai4_st_curr_after,0
1350,"<S2SV_ModStart> -> tp_value, datap ) ; break ; case PTRACE_SET_THREAD_AREA :",0
1351,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ;",1
1352,"<S2SV_ModStart>, int fmt, printbuffer * p <S2SV_ModStart> = 0 ; if (! p ) p = ( printbuffer * ) cJSON_malloc ( 7 ) ; if (! p ) p = ( printbuffer * ) cJSON_malloc ( 1 ) ; if (! p ) p = ( printbuffer * ) cJSON_malloc ( 1 ) ; if (! p ) p = ( printbuffer * ) cJSON_malloc ( 1 ) ; if (! p ) p = ( printbuffer * ) cJSON_malloc ( 1 ) ; if (! p ) p = ( printbuffer * ) cJSON_malloc ( 1 ) ; if (! p ) p = ( printbuffer * ) cJSON_malloc ( 1 ) ; if (! p ) p = ( printbuffer * ) cJSON_malloc ( 1 ) ; if (! p ) p = ( printbuffer * ) cJSON_malloc ( 1 ) ; if (! p ) p = ( printbuffer * ) cJSON_malloc ( len ) ; if (! p ) p = ( printbuffer * ) cJSON_malloc ( 1 ) ; if (! p ) p = ( printbuffer",0
1353,"<S2SV_ModStart> ) { struct ikev2_id id ; unsigned int <S2SV_ModEnd> id_len, idtype_len <S2SV_ModStart> * typedata ; ND_TCHECK2 ( * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } <S2SV_ModStart> case ID_VPN_ADDR : ND_PRINT ( ( ndo, "" <S2SV_blank> vpx:"" ) ) ; dumpascii = 1 ; break ; case ID_RFC822_ADDR : ND_PRINT ( ( ndo, "" <S2SV_blank> rfc822:"" ) ) ; dumphex = 1 ; break ; case ID_IPV6_ADDR : ND_PRINT ( ( ndo, "" <S2SV_blank> ipv6:"" ) ) ; dumpascii = 1 ; break ; case ID",0
1354,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
1355,"<S2SV_ModStart> sk ) ; if (! writable ) { <S2SV_ModStart> = unix_peer_get ( sk ) ; } else { if ( unix_peer ( sk )!= sk ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; writable = 0 ; } <S2SV_ModStart> )!= sk ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; } sock_put ( other ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask <S2SV_ModEnd> ; } <S2SV_null>",0
1356,<S2SV_ModStart> 4 ] ; unsigned int <S2SV_ModEnd> value ; if <S2SV_ModStart> value = ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 <S2SV_ModEnd> ; value |= <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart>. unsigned_value = <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ; return (,1
1357,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
1358,<S2SV_ModStart> ; if ( skb_is_gso ( skb_out ) ) { kfree_skb ( skb_out ) ; goto free ; } if (,0
1359,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; task_lock ( task <S2SV_ModEnd> ) ; ioc <S2SV_ModStart> ; ioc = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context ; task <S2SV_ModEnd> -> io_context = <S2SV_ModStart> ; task_unlock ( task <S2SV_ModEnd> ) ; if,1
1360,"<S2SV_ModStart> ; int ret = __copy_from_user ( & xtregs -> cp0, & xtregs -> cp0, sizeof ( xtregs -> cp0 ) ) ;",0
1361,<S2SV_ModStart> 0 ) { if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } <S2SV_ModStart> buffer. length > token_wrapper_len + 16 <S2SV_ModEnd> ) { *,0
1362,"<S2SV_ModStart> ) { int ret = pci_read_config_word <S2SV_ModEnd> ( dev, <S2SV_ModStart> offset, value ) ; if ( ret ) return ret ; <S2SV_ModEnd> * value |= <S2SV_ModStart> * value |= * value & ~ PCI_COMMAND_GUEST ; <S2SV_ModEnd> return ret ;",0
1363,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_ref_frame_t * const frame = va_arg ( args, vpx_ref_frame_t <S2SV_ModEnd> * ) ; <S2SV_ModStart> * ) ; int idx = va_arg ( args, int ) ; YV12_BUFFER_CONFIG * fb ; if ( ctx -> frame_workers!= NULL ) { vp9_get_reference_enc ( ctx -> frame_workers <S2SV_ModEnd>, frame -> <S2SV_ModStart> * fb ; yuvconfig2image ( & frame -> img, NULL, NULL ) ; } else { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1364,<S2SV_ModStart> ] ) ; free_uid ( fpl -> user ) ;,1
1365,<S2SV_ModStart> plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) put_ioctx ( ctx ) ; else,0
1366,"<S2SV_ModStart> -> dwc ; dwc3_gadget_del_and_unmap_request ( dep, req, status <S2SV_ModEnd> ) ; spin_unlock <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1367,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd>",0
1368,"<S2SV_ModStart> sas_revalidate_domain, [ <S2SV_ModEnd> DISCE_SUSPEND ] = <S2SV_ModStart> ] = sas_resume_devices <S2SV_ModEnd>, } ;",1
1369,"<S2SV_ModStart>, int rep_quick, my_bool verbose <S2SV_ModStart> ) ) { if ( param -> testflag & T_REP ) { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %lu\\n"", llstr ( start_records, llbuff ) ) ; } else { printf ( ""- <S2SV_blank> not <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; } if (! verbose ) { printf ( ""- <S2SV_blank> not <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %lu\\n"", llstr ( start_records, llbuff ) ) ; } else { printf ( ""- <S2SV_blank> not <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; }",0
1370,"<S2SV_ModStart> } ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN <S2SV_ModEnd> uECC_word_t * p <S2SV_ModStart> curve ) ; if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if ( uECC_vli_cmp ( curve -> n, k, num_n_words )!= 1 ) { return 0 ; } uECC_vli_modInv ( k, k, tmp, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words )",0
1371,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1372,<S2SV_ModStart> sk -> sk_family <S2SV_ModEnd> ; struct sk_buff <S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( flags <S2SV_ModStart> AF_INET ) { struct sockaddr_in * <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ; <S2SV_ModStart> struct sockaddr_in6 * sin6 = ( struct sockaddr_in6 * <S2SV_ModStart> ) -> msg_name ; * addr_len = sizeof ( * sin6,0
1373,"<S2SV_ModStart> -= lblk ; mutex_lock ( & inode -> i_mutex ) ; if (! ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) ) { ret = - EOPNOTSUPP ; goto out_mutex ; } if (! ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) ) { ret = - EOPNOTSUPP ; goto out_mutex ; } flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN | EXT4_EX_NOCACHE ; if ( mode & FALLOC_FL_KEEP_SIZE ) flags |= EXT4_GET_BLOCKS_KEEP_SIZE ; if ( partial_begin || partial_end ) { ret = ext4_alloc_file_blocks ( file, round_down ( ( offset + len ), 1 << blkbits ) >> blkbits, round_down ( ( offset + len ), 1 << blkbits ) >> blkbits, round_down ( ( offset + len ), 1 << blkbits",0
1374,"<S2SV_ModStart> ; } else { uint32_t new_free_total = pool -> free_total * 2 ; void * new_arr ; if ( pool -> free_total < new_free_total ) { pool -> free_total = new_free_total ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total ; free ( new_arr ) ; } else { free ( buf ) ; } } }",0
1375,<S2SV_ModStart> return map ; map =,1
1376,"<S2SV_ModStart> ( * cp ) { int cval = 0, meta = 0 ; <S2SV_ModStart> 2 ] ) { NESTDATA <S2SV_ModEnd> const char hex <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( * <S2SV_ModStart> == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10 ) + ( * cp - '0' ) ; } else if ( * cp == '\\\\' && cp [ 1 ] ) { switch",0
1377,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1378,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_left < 4,1
1379,"<S2SV_ModStart> * lined ; l_uint32 <S2SV_ModEnd> * pixc, <S2SV_ModStart>, * pixg, * pixd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if (! pixc ) return ( PIX * ) ERROR_PTR ( ""pixc <S2SV_blank> is <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if (! pixm ||! pixg ||! pixd ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; if ( ( pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; if ( ( pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; if ( ( pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( """,0
1380,<S2SV_ModStart> { int i ; int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( u ) ; int <S2SV_ModEnd> vbits = BN_num_bits <S2SV_ModStart> ( v ) ; int <S2SV_ModEnd> top = p <S2SV_ModStart> ubits < BN_BITS2 ) goto err ; if ( BN_num_bits ( b ) < BN_BITS2 ) goto err ; if ( BN_num_bits ( c ) < BN_BITS2 ) goto err ; if ( BN_abs_is_word ( b ) ) goto err ; if ( BN_num_bits ( b ) < BN_BITS2 ) goto err ; if ( BN_num_bits ( c ) < BN_BITS2 ) goto err ; if ( BN_num_bits ( b ) < BN_BITS2 ) goto err ; if ( BN_num_bits ( p ) < BN_BITS2 ) goto err ; if ( BN_num_bits ( p ) < BN_BITS2 ) goto err ; if ( BN_num_bits ( p ) ) goto err ; if ( BN_num_bits ( p ) > BN_BITS2 ) goto err,0
1381,<S2SV_ModStart> ; v_fn_ptr. <S2SV_ModEnd> vf = vp8_mse16x16,0
1382,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1383,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1384,"<S2SV_ModStart>, nbits ; if ( msg -> readcount > msg -> cursize ) { return 0 ; } <S2SV_ModStart> oob ) { if ( msg -> readcount + ( bits >> 3 ) > msg -> cursize ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; } <S2SV_ModStart> & 7 ; if ( msg -> bit + nbits > msg -> cursize << 3 ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; } <S2SV_ModStart> msg -> bit, msg -> cursize << 3 <S2SV_ModStart> ) ) ; if ( msg -> bit > msg -> cursize << 3 ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; }",1
1385,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
1386,<S2SV_ModStart> ; out1 : cancel_work_sync ( & dev -> kevent ) ; del_timer_sync ( & dev -> delay ) ;,1
1387,"<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> = overhead ; if ( mongo_validate_ns ( conn, ns )!= MONGO_OK ) return MONGO_ERROR ; for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 0 )!= MONGO_OK ) return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; }",0
1388,<S2SV_ModStart> ) ) ; textview -> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1389,<S2SV_ModStart> - 2 ; if ( plen > sizeof ( buf ) ) return 1 ;,0
1390,"<S2SV_ModStart> acl ) { struct iattr iattr ; retval = posix_acl_update_mode ( inode, & iattr. ia_mode, & acl ) ; if ( retval <S2SV_ModEnd> ) goto err_out <S2SV_ModStart> goto err_out ; if (! acl ) { value = NULL ; size = 0 ; } <S2SV_ModEnd> iattr. ia_valid <S2SV_ModStart> iattr ) ; <S2SV_ModEnd> } break ;",1
1391,"<S2SV_ModStart> header. types_size ) { eprintf ( ""Invalid <S2SV_blank> types <S2SV_blank> size\\n"" ) ; return false ; } if (! bin -> classes ) { r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; return false ; }",0
1392,<S2SV_ModStart> : case NPPVformValue : case NPPVpluginNativeAccessibleAtkPlugId <S2SV_ModStart> : type = RPC_TYPE_STRING ; break ; case NPPVpluginWantsAllNetworkStreams : case NPPVSupportsAdvancedKeyHandling,0
1393,<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> int alloc = ( length < 0 )? length : ( int ) strlen ( string ) ; char * ns = malloc ( alloc ) ; unsigned char in ; int strindex = 0 ; CURLcode <S2SV_ModEnd> res ; if <S2SV_ModStart> ( res ) { free ( ns ) ; return NULL ; } ns [ strindex ++ ] = in <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( olen ) <S2SV_ModEnd> * olen = <S2SV_ModStart> strindex ; return ns <S2SV_ModEnd> ; } <S2SV_null>,0
1394,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_response ( rdpNego <S2SV_ModStart> state = NEGO_STATE_FAIL ; return FALSE <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;,0
1395,"<S2SV_ModStart>, target_bits_per_mb ; const double correction_factor_mult = get_rate_correction_factor_mult ( cpi ) ; const double correction_factor_mult = get_rate_correction_factor_mult ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; if ( correction_factor_mult > correction_factor_mult ) correction_factor_mult = get_rate_correction_factor_mult ( cpi, correction_factor_mult ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; i = active_best_quality ; do { const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i,",0
1396,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
1397,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1398,<S2SV_ModStart> ; if ( <S2SV_ModEnd> len < sizeof <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS,0
1399,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> data ) ;",1
1400,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
1401,"<S2SV_ModStart> ; i += 2 ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i += 1 ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) i += 2 ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) i += 2 ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) i += 2 ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i += 2 ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) i += 2 ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) i += 2 ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) i += 2 ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) )",0
1402,"<S2SV_ModStart>, PREDICTION_MODE mode, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> TX_SIZE tx_size, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> plane ] ; DECLARE_ALIGNED ( 16, uint8_t, left_col, 64 ) ; DECLARE_ALIGNED ( 16, uint8_t, above_row, 128 + 16 ) ; DECLARE_ALIGNED ( 16, uint8_t, above_row, 128 + 16 ) ; DECLARE_ALIGNED ( 16, uint8_t, above_row, 128 + 16 ) ; uint8_t * const_above_row = above_data + 16 ; DECLARE_ALIGNED ( 16, uint8_t, above_row, 128 + 16 ) ; uint8_t * const_above_row = above_row + 16 ; const int bs = pd -> subsampling_y ; const int x0 = ( - xd -> mb_to_left_edge >> ( 3 + pd -> subsampling_x ) ) ; const int y0 = ( - xd -> mb_to_top_edge >> ( 3 + pd -> subsampling",0
1403,"<S2SV_ModStart> ; } else if ( end >= CHAR_MAX - 1 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> marker\\n"" ) ; goto error ; } <S2SV_ModStart> end ++ ; if ( end >= CHAR_MAX - 1 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> marker\\n"" ) ; goto error ; }",0
1404,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static JsVarString <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> = 0.0000001 ; JsVarString <S2SV_ModEnd> stopAtError = 0.0000001 <S2SV_ModStart> ( isnan ( val ) ) strncat ( str, ""NaN"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( val < 0 ) strncat ( str, ""-Infinity"" <S2SV_ModEnd>, len ) <S2SV_ModStart> else strncat ( str <S2SV_ModEnd>, ""Infinity"",",0
1405,"<S2SV_ModStart> * jas_iccprof_createfrombuf ( jas_uchar <S2SV_ModEnd> * buf,",1
1406,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
1407,"<S2SV_ModStart> BUG_ON (! memcg -> thresholds ) ; usage = mem_cgroup_usage ( memcg, type == _MEM ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ;",0
1408,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> ; return handle <S2SV_ModEnd> ; } <S2SV_null>",1
1409,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; write_profile ( cm -> profile <S2SV_ModEnd>, wb ) <S2SV_ModStart> ; vpx_wb_write_bit ( wb, 0 ) ; vpx_wb_write_bit ( wb, cm -> frame_type <S2SV_ModEnd> ) ; vpx_wb_write_bit <S2SV_ModStart> ; vpx_wb_write_bit ( wb, cm -> show_frame ) ; vpx_wb_write_bit ( wb, cm -> error_resilient_mode ) ; if ( cm -> frame_type == KEY_FRAME ) { const COLOR_SPACE cs = UNKNOWN ; write_sync_code ( wb ) ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vpx_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } vpx_wb_write_literal ( wb, cs, 3 ) ; if ( cs!= SRGB ) { vpx_wb_write_bit ( wb, 0 ) ; if ( cm -> profile",0
1410,"<S2SV_ModStart> : if ( parsetime_error ) strcpy ( parsetime_error, ""MemoryAllocationFailed"" ) ; <S2SV_ModEnd> parsetime_error = NULL <S2SV_ModStart> : if ( parsetime_error ) strcpy ( parsetime_error, ""MemoryAllocationFailed"" ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> : if ( parsetime_error ) strcpy ( parsetime_error, ""MemoryAllocationFailed"" ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> : if ( parsetime_error ) strcpy ( parsetime_error, ""MemoryAllocationFailed"" ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> : if ( parsetime_error ) strcpy ( parsetime_error, ""MemoryAllocationFailed"" ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> : if ( parsetime_error ) strcpy ( parsetime_error, ""MemoryAllocationFailed"" ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> : if ( parsetime_error ) strcpy ( parsetime_error, ""MemoryAllocationFailed"" ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> : if ( parsetime_error ) strcpy ( parsetime_error, ""MemoryAllocationFailed"" ) strcpy ( parsetime",0
1411,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
1412,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1413,<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,1
1414,"<S2SV_ModStart> error ; uint16_t nextPacket ; uint16_t <S2SV_ModEnd> status ; Enc624j600Context <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) ; if ( ( enc624j600ReadReg ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT ) { enc624j600WriteReg ( interface, ENC624J600_ERXRDPT, context -> nextPacket ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & status, sizeof ( uint32_t ) ) ; status = letoh32 ( status ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; context -> nextPacket =",0
1415,<S2SV_ModStart> ] == 0x01 && i < gemsafe_cert_max,1
1416,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1417,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass ) { VALUE content ; VALUE parse_options ; xmlSchemaPtr schema ; xmlSchemaParserCtxtPtr ctx ; xmlSchemaParserCtxtPtr errors ; VALUE rb_schema ; int scanned_args = 0 ; scanned_args = rb_scan_args ( argc, argv, ""11"", & content, & parse_options ) ; if ( scanned_args == 1 ) { parse_options = rb_const_get ( rb_const_get ( mNokogiriXml, rb_intern ( ""ParseOptions"" ), rb_intern ( ""DEFAULT_SCHEMA"" ) ) ) ; } ctx <S2SV_ModEnd> = xmlSchemaNewMemParserCtxt ( <S2SV_ModStart> content ) ) ; <S2SV_ModEnd> errors = rb_ary_new <S2SV_ModStart> errors ) ; rb_iv_set ( rb_schema, ""@parse_options"", parse_options ) ;",0
1418,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> info -> par <S2SV_ModEnd> ; vma -> <S2SV_ModStart> _CACHE_MASK ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> ( vma, fbdev -> fb_phys, fbdev -> fb_len <S2SV_ModEnd> ) ; }",1
1419,"<S2SV_ModStart> << 2 ; if ( strlen ( errstr ) < 3 ) { s_log ( LOG_ERR, ""Malformed <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> << 2 ; if ( strlen ( errstr ) < 3 ) { s_log ( LOG_ERR, ""Malformed <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; }",0
1420,"<S2SV_ModStart> 2 ] ; memcpy ( out, ptr + 4, 4 ) ; <S2SV_ModStart> 2 ] ; memcpy ( out + 5, 4 ) ; <S2SV_ModStart> 2 ] ; memcpy ( out + 6, 4 ) ;",0
1421,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1422,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1423,"<S2SV_ModStart> err = - EBUSY ; if ( type == PACKET_FANOUT_HASH ) goto out ; err = - EINVAL ; if ( type == PACKET_FANOUT_CPU : case PACKET_FANOUT_RND : case PACKET_FANOUT_CBPF : case PACKET_FANOUT_EBPF : break ; default : mutex_unlock ( & fanout_mutex ) ; err = - EINVAL ; if ( type == PACKET_FANOUT_HASH ) { err = - ENOMEM ; rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) goto out ; }",0
1424,<S2SV_ModStart> ( handle -> nmi <S2SV_ModEnd> ) { handle <S2SV_ModStart> pending ) ; perf_event_wakeup ( handle -> event ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1425,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> len > 0 && * op && len > 0 <S2SV_ModStart> 0 ) { if ( len == 0 ) return - EINVAL ; <S2SV_ModStart> PLANE_SIZE ) { if ( u > PLANE_MAX_SIZE ) return - EINVAL ; <S2SV_ModStart> -= PLANE_SIZE ; <S2SV_ModEnd> * op ++ <S2SV_ModStart> ( SURROGATE_PAIR | SURROGATE_LOW | ( u & SURROGATE_BITS ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> } else { if ( len == size ) { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | SURROGATE_BITS ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | SURROGATE_BITS ) ; } s += size ; len -= size ; } } else { * op ++ = ( wchar_t ) <S2SV_ModStart> * s ++ <S2SV_ModEnd> ; } return,0
1426,"<S2SV_ModStart>, i ; if (! ( s -> state & PNG_IHDR ) ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> before <S2SV_blank> IHDR\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> state & PNG_IDAT ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> after <S2SV_blank> IDAT\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart>!= 6 ) || s -> bit_depth == 1",1
1427,"<S2SV_ModStart> EPROTONOSUPPORT ) { mon_log ( 0x534e4554, ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; <S2SV_ModStart> ) ) { mon_log ( 0x534e4554, ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; } } else { mon_log ( 0x534e4554, ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ;",0
1428,<S2SV_ModStart> } dt -> proto = IP_GET_IPPROTO ( p ) ; dt ->,1
1429,"<S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_RXFHSR ) ; if ( ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFV_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart>!= 0 ) { n = ksz8851ReadFifo ( interface, context -> rxBuffer, n ) ; ksz8851ClearBit ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851ReadFifo <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR",0
1430,"<S2SV_ModStart> const node * n0, asdl_seq * decorator_seq, bool <S2SV_ModEnd> is_async ) { <S2SV_ModStart> is_async ) { const node * const n = is_async? CHILD ( n0, 1 ) : n0 ; <S2SV_ModStart> returns, type_comment, LINENO ( n0 ), n0 -> n_col_offset, c -> c_arena ) ; if ( TYPE ( CHILD ( n0, 0 ) )!= TYPE_COMMENT ) type_comment = NULL ; if ( NCH ( CHILD ( n0, 0 ) > 3 ) type_comment = NULL ; name_i += 4 ; if ( TYPE ( CHILD ( n0, 1 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n0, 2 ) ) ; if (! type_comment ) return NULL ; name_i += 4 ; } <S2SV_ModStart> body, decorator_seq, returns, type_comment, LINENO ( n0 ), n0 -> n_col_offset, c -> c_arena ) ; if (! <S2SV_ModStart> returns, type_comment, LINENO ( n0 ), n0 -> n_",0
1431,<S2SV_ModStart> int i ; if ( mm -> pgd ) { if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; } <S2SV_ModStart> ) ; out : if ( mm -> pgd ) { if ( pgd_none_or_clear_bad ( mm -> pgd ) ) goto out ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1432,"<S2SV_ModStart> ( AUDIT_APPARMOR_DENIED, __aa_current_profile ( ), GFP_KERNEL, & sa, NULL <S2SV_ModEnd> ) ; }",1
1433,"<S2SV_ModStart> uint_fast8_t tmp ; siz -> comps = 0 ; <S2SV_ModStart> ) ) { goto error ; } if (! siz -> width ||! siz -> height ) { jas_eprintf ( ""image <S2SV_blank> area <S2SV_blank> is <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; goto error ; } if (! siz -> tilewidth ||! siz -> tileheight ) { jas_eprintf ( ""tile <S2SV_blank> is <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; goto error ; } if (! siz -> numcomps ||! siz -> numcomps || siz -> numcomps > 16384 ) { jas_eprintf ( ""number <S2SV_blank> of <S2SV_blank> components <S2SV_blank> is <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; goto error ; } if ( siz -> xoff >= siz -> width ) { jas_eprintf ( ""xoff <S2SV_blank> is <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; goto error ; } if ( siz -> yoff >= siz -> height ) { jas_eprintf ( ""yoff <S2SV_blank> is <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ;",0
1434,"<S2SV_ModStart> ; } } else { tr_debug ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> not <S2SV_blank> valid!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_debug ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_debug ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr",0
1435,"<S2SV_ModStart> << 24 ; if ( xmi_tmpdata & 0xffff ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_XMI, ""Bad <S2SV_blank> XMI <S2SV_blank> data"", 0 ) ; return NULL ; } <S2SV_ModStart> << 16 ; if ( xmi_tmpdata & 0xffff ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_XMI, ""Bad <S2SV_blank> XMI <S2SV_blank> data"", 0 ) ; return NULL ; } <S2SV_ModStart> << 24 ; if ( xmi_tmpdata & 0xffff ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_XMI, ""Bad <S2SV_blank> XMI <S2SV_blank> data"", 0 ) ; return NULL ; } <S2SV_ModStart> << 16 ; if ( xmi_tmpdata & 0xffff ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_XMI, ""Bad <S2SV_blank> XMI <S2SV_blank> data"", 0 ) ; return NULL ; } <S2SV_ModStart> << 24 ; if ( xmi_tmpdata & 0xffff ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_",0
1436,"<S2SV_ModStart> size_t total_len ; struct iov_iter iter ; <S2SV_ModStart> ) return 0 ; iov_iter_init ( & iter, iov, nr_segs, total_len, 0 ) <S2SV_ModStart> -> ops ; <S2SV_ModEnd> size_t chars = <S2SV_ModStart> buf -> len ; size_t written <S2SV_ModStart> ; int error <S2SV_ModEnd> ; if ( <S2SV_ModStart> break ; } written = copy_page_to_iter ( buf -> page, buf -> offset, chars, & iter ) ; if ( unlikely ( written < chars ) ) { if (! ret ) ret = - EFAULT <S2SV_ModEnd> ; break ;",1
1437,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> IndexPacket index ; <S2SV_ModStart> ++ ) { next_pixel = MagickFalse ; displacement = 1 ; <S2SV_ModStart> -= MaxHashTable ; if ( k < 0 ) continue <S2SV_ModEnd> ; if (,1
1438,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1439,"<S2SV_ModStart> { p_fm_config_conx_hdlt hdl = NULL <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } for <S2SV_ModStart> 0 ) { if ( hdl == NULL ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> initialize <S2SV_blank> the <S2SV_blank> client <S2SV_blank> handle: <S2SV_blank> %d\\n"", res ) ; goto die_clean ; } res = <S2SV_ModEnd> commandList [ i <S2SV_ModStart> ] ) ; goto cleanup <S2SV_ModEnd> ; } for <S2SV_ModStart> 0 ) { if ( hdl == NULL ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res ) ; goto cleanup ; <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } } <S2SV_ModStart> 0 ) { if ( hdl == NULL ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res ) ; goto die_clean ; } <S2SV_ModStart> hdl, ( argc - optind ), & argv [ optind ] ) ; die_clean : if ( hdl == NULL ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res ) ; goto cleanup ; }",0
1440,"<S2SV_ModStart> size_t max_mem ; size_t max_samples ; <S2SV_ModStart> 0 ] ; max_samples = 64 * JAS_MEBI ; <S2SV_ModStart> break ; case OPT_MAXSAMPLES : max_samples = strtoull ( jas_optarg, 0, 10 ) ; break ; case <S2SV_ModStart> ; break ; # if defined ( JAS_DEFAULT_MAX_MEM_USAGE ) max__mem = strtoull ( jas_optarg, 0, 10 ) ; break ; # endif <S2SV_ModStart> } if (! jas_safe_size_mul3 ( width, height, depth, & max_samples ) ) { jas_eprintf ( ""image <S2SV_blank> size <S2SV_blank> too <S2SV_blank> large\\n"" ) ; exit ( EXIT_FAILURE ) ; } if (! jas_safe_size_mul3 ( width, height, & numcmpts, & max_samples ) ) { jas_eprintf ( ""image <S2SV_blank> size <S2SV_blank> too <S2SV_blank> large\\n"" ) ; } if (! jas_safe_size_mul3 ( depth, numcmpts, & max_samples ) ) { jas_eprintf ( ""image <S2SV_blank> size <S2SV_blank> too <S2SV_blank> large\\n""",0
1441,"<S2SV_ModStart> } if ( bdaddr_is_zero ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> bdaddr <S2SV_blank> is <S2SV_blank> zero.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
1442,"<S2SV_ModStart> cherokee_buffer_is_empty ( & ldap -> validator -> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & ldap -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len",0
1443,<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # endif for ( row = 0 ; row < height ; row ++ ) { for ( col = 0 ; col < raw_width ; col ++ ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j -= 0x80 << sh ) < 0 || j == 4 ) { if ( ( j -= 0x80 << sh ) < 0 || j > 11 ) { if ( ( j -= 0x80 << sh ) < 0 || sh == 4 ) { if ( ( j -= 0x80 << sh ) < 0 || sh == 4 ) { if ( ( j -= 0x80 << sh ) < 0 || sh == 4 ) { if ( ( j -= 0x80 << sh ) < 0 || sh == 4 ) { if ( ( j -= 0x80 << sh ) < 0 || sh == 4 ) { if ( ( j -= 0x80 << sh ) < 0 || sh == 4 ) { if ( ( j -= 0x80 << sh ) < 0 || sh == 4 ) { if ( ( j -= 0x80 << sh ) <,0
1444,<S2SV_ModStart> len < needed ||! nl,0
1445,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
1446,"<S2SV_ModStart> vcpu_info ; int nr_rt_entries, ret ; if ( guest_irq >= irq_rt -> nr_rt_entries || guest_irq >= nr_rt_entries ) return - EINVAL ; nr_rt_entries = irq_rt -> nr_rt_entries ; <S2SV_ModStart> ; BUG_ON ( guest_irq >= nr_rt_entries ) ; hlist_for_each_entry ( e, & irq_rt -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! set && kvm_intr_is_single_vcpu ( kvm, & irq, & vcpu ) ) { ret = irq_set_vcpu_affinity ( host_irq, NULL ) ; if ( ret < 0 ) { printk ( KERN_INFO ""failed <S2SV_blank> to <S2SV_blank> back <S2SV_blank> to <S2SV_blank> remapped <S2SV_blank> mode, <S2SV_blank> irq: <S2SV_blank> %u\\n"", host_irq ) ;",0
1447,<S2SV_ModStart> ( bfqq ) { hrtimer_try_to_cancel ( timer ) ;,0
1448,"<S2SV_ModStart> } else { return false ; } case U64_MAX : return rold -> umin_value == 0 && rold -> umax_value == U64_MAX && rold -> smin_value == S64_MIN && rold -> smax_value == S64_MAX && tnum_is_unknown ( rold -> var_off ) ; case SCALAR_VALUE_OR_NULL : if ( rcur -> type == SCALAR_VALUE_OR_NULL ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) == 0 && range_within ( rold, rcur ) && tnum_in ( rold -> var_off, rcur -> var_off ) ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) )!= 0 ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) )!= 0 ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id",0
1449,"<S2SV_ModStart> ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"", sock <S2SV_ModEnd>, sk )",0
1450,<S2SV_ModStart> (! handle ||! SecIsValidHandle ( handle ),1
1451,<S2SV_ModStart> length += PRIMARY_DRAWING_ORDER_FIELD_BYTES [ <S2SV_ModEnd> orderInfo -> orderType,0
1452,<S2SV_ModStart> ; if ( new -> d_inode && new -> d_inode -> i_uid == old -> d_inode -> i_uid ) { if ( new -> d_inode -> i_uid == old -> d_inode -> i_uid ) { err = - EPERM ; goto out ; } else { if ( new -> d_inode -> i_uid == old -> d_inode -> i_uid && new -> d_inode -> i_uid == old -> d_inode -> i_uid && new -> d_inode -> i_uid!= new -> d_inode -> i_uid ) { if ( new -> d_inode -> i_uid == old -> d_inode -> i_uid ) { err = - EPERM ; goto out ; } } else { if ( new -> d_inode -> i_uid == old -> d_inode -> i_uid && new -> d_inode -> i_uid!= old -> d_inode -> i_uid && new -> d_inode -> i_uid!= new -> d_inode -> i_uid ) { err = - EPER,0
1453,<S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> STACK_INIT ( INIT_MATCH_STACK_SIZE <S2SV_ModStart> OP_EXACT2 ) ; <S2SV_ModEnd> DATA_INIT ( UPDATE_MATCH_STACK_SIZE <S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> DATA_INIT ( UPDATE_MATCH_STACK_SIZE <S2SV_ModStart> OP_EXACT2 ) ; <S2SV_ModEnd> DATA_INIT ( UPDATE_MATCH_STACK_SIZE <S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> DATA_INIT ( UPDATE_MATCH_STACK_SIZE <S2SV_ModStart> OP_EXACT2 ) ; <S2SV_ModEnd> DATA_INIT ( UPDATE_MATCH_STACK_SIZE <S2SV_ModStart> OP_EXACT2 ) ; <S2SV_ModEnd> DATA_INIT ( UPDATE_MATCH_STACK_SIZE <S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> DATA_INIT ( UPDATE_MATCH_STACK_SIZE <S2SV_ModStart> OP_EXACT2 ) ; <S2SV_ModEnd> DATA_INIT ( UPDATE_MATCH_STACK_SIZE <S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> DATA_INIT ( UPDATE_MATCH_STACK_SIZE <S2SV_ModStart> OP_EXACT2 ) ; <S2SV_ModEnd> DATA_INIT ( UPDATE_MATCH_STACK_SIZE <S2SV_ModStart> OP_EXACT2 ) ; <S2SV_ModEnd> DATA_INIT ( UPDATE_MATCH_STACK_SIZE,0
1454,<S2SV_ModStart> < MAX_MB_PLANE ; ++ plane <S2SV_ModEnd> ) vp9_foreach_transformed_block_in_plane (,1
1455,<S2SV_ModStart> = - EINVAL ; msg -> msg_namelen = 0,0
1456,"<S2SV_ModStart> mntent, path, 0",0
1457,<S2SV_ModStart> = hash ; sr -> fd = fd ;,0
1458,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; if ( dest_keyring ) { <S2SV_ModStart> dest_keyring ) ; goto out ; } <S2SV_ModStart> KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : if ( cred -> request_key_auth ) { down_read ( & authkey -> sem ) ; dest_keyring = key_get ( cred -> request_key_auth -> dest_keyring ) ; if ( dest_keyring ) goto out ; } break ; } case KEY_REQKEY_DEFL_SESSION_KEYRING : dest_keyring = key_get ( cred -> session_keyring ) ; if ( dest_keyring ) goto out ; break ; case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : dest_keyring = key_get ( cred -> user -> session_keyring ) ; break ; case KEY_REQKEY_DEFL_GROUP_KEYRING : dest_keyring = key_get ( cred -> group_keyring ) ; out :,0
1459,"<S2SV_ModStart> void nonrd_pick_sb_modes ( const VP9_COMMON * cm, MACROBLOCK * const x, <S2SV_ModStart> -> e_mbd ; set_offsets <S2SV_ModEnd> ( cpi, <S2SV_ModStart> bsize ) ; if ( xd -> mi [ 0 ] -> mbmi. sb_type!= bsize ) { vp9_pick_inter_mode ( cm, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } <S2SV_ModEnd> duplicate_mode_info_in_sb ( cm",0
1460,<S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if ( <S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if (,1
1461,"<S2SV_ModStart> = NULL ; if ( reader. superblock. magic!= MYSOFA_SUPERBLOCK_MAGIC ) { log ( ""superblock <S2SV_blank> magic <S2SV_blank> 0x%x <S2SV_blank> not <S2SV_blank> supported\\n"", MYSOFA_SUPERBLOCK_MAGIC ) ; reader. superblock. magic = MYSOFA_SUPERBLOCK_MAGIC ; }",0
1462,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> ( pixel_info = ( pixel_info = ( pixel_info = ( pixel_info = ( pixel_info = ( pixel_info = ( pixel_info = ( pixel_info = ( pixel_info = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = ( pixel = (",0
1463,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; size_t <S2SV_ModEnd> tmp ; if <S2SV_ModStart> copy_from_user ( buf <S2SV_ModEnd>, buffer,",0
1464,"<S2SV_ModStart> = 1 ; memset ( pMap -> ranges, 0, sizeof ( MappedRange ) ) ;",0
1465,<S2SV_ModStart> fa ) ; if ( be16_to_cpu ( dip -> di_nlink ) > mp -> m_sb. sb_inodesize || be32_to_cpu ( dip -> di_anextents ) + be16_to_cpu ( dip -> di_nblocks ) > mp -> m_sb. sb_inodesize ) return __this_address ; if ( mode && ( be32_to_cpu ( dip -> di_nextents ) > mp -> m_sb. sb_inodesize ) ) return __this_address ; if ( mode && ( be16_to_cpu ( dip -> di_anextents ) > be32_to_cpu ( dip -> di_nblocks ) ) ) return __this_address ; if ( mode && ( be32_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) > be32_to_cpu ( dip -> di_nblocks ) ) ) return __this_address ; if ( mode && ( be16_to_cpu ( dip -> di_nextents ) > be32_to_cpu ( dip -> di_n,0
1466,<S2SV_ModStart> } if ( cnt_c + step > BOT ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 16 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; pixel -> lookup [ i ] = nc ; pixel -> lookup [ i ] = nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += i16_17 ; for ( j = 0 ; j < 4 ; j ++ ) sum += i16_17 ; for ( j = 0 ; j < 4 ; j ++ ) sum += i16_17 ; for ( j = 0 ; j < 4 ; j ++ ) sum += i16_17 ; for ( i = 0 ; i < 16 ; i ++ ) { unsigned i16 = i ; for ( j = 0 ; j < 16 ; j,0
1467,"<S2SV_ModStart> data ) ) { jas_eprintf ( ""Bad <S2SV_blank> data <S2SV_blank> length: <S2SV_blank> %d\\n"", sizeof ( mif_cmpt_t ) ) ; goto error ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { jas_eprintf ( ""Bad <S2SV_blank> data <S2SV_blank> length: <S2SV_blank> %d\\n"", sizeof ( mif_cmpt_t ) ) ; goto error ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { jas_eprintf ( ""Bad <S2SV_blank> data <S2SV_blank> length: <S2SV_blank> %d\\n"", sizeof ( mif_data_t ) ) ; goto error ; } <S2SV_ModStart> ) ) { jas_eprintf ( ""Bad <S2SV_blank> data <S2SV_blank> length: <S2SV_blank> %d\\n"", sizeof ( mif_data_t ) ) ; goto error ; }",0
1468,"<S2SV_ModStart> ; if ( flags & VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_FORCE_GF ) ) || ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & VP8_EFLAG_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG",0
1469,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
1470,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( & <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> perf_event_update_userpage ( event,0
1471,"<S2SV_ModStart>, const u_char * p, u_int len, u_int flags <S2SV_ModStart> ) ) ; ND_TCHECK2 ( tptr [ 0 ], 5 ) ; <S2SV_ModStart> ], tlen <S2SV_ModEnd> ) ; switch <S2SV_ModStart> case BGP_AIGP_TLV : if ( tlen!= 1 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_AIGP_TLV : if ( tlen!= 5 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> EXTRACT_64BITS ( tptr <S2SV_ModEnd> ) ) ) <S2SV_ModStart> EXTRACT_32BITS ( tptr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> case BGP_AIGP_TLV : if ( tlen!= 1 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_AIGP_TLV : if ( tlen!= 5 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; }",0
1472,"<S2SV_ModStart> -> outputbuffer, ""<table <S2SV_blank> id=\'daemon-status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""</tr>"", ( Run. flags & Run_Debug )? ""True"" : ""False"" ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Hostfile</td><td>%s</td></tr>"", Run. system -> name ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Pidfile</td><td>%d</td></tr>"", Run. Env. pid ) ; if ( Run. files. control ) StringBuffer_append ( res -> outputbuffer, ""<tr><td>Controlfile</td><td>%s</td></tr>"", Run. files. control ) ; if ( Run. files. log ) StringBuffer_append ( res -> outputbuffer, ""<tr><td>Logfile</td><td>%s</td></tr>"", Run. files. log ) ; if ( Run. flags & Run_Log ) { StringBuffer_append ( res -> outputbuffer, ""<tr><td>Logfile</td><",0
1473,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
1474,"<S2SV_ModStart> len = sizeof ( tokbuf ) ; snprintf ( tokbuf, sizeof ( tokbuf ), ""%s"", constr1 ) ; snprintf ( tokbuf, sizeof ( tokbuf ), ""%.*s"", constr2 ) ; snprintf ( tokbuf, sizeof ( tokbuf ), ""%.*s"", constr1 ) ; snprintf ( tokbuf, sizeof ( tokbuf ), ""%.*s"", constr2 ) ; snprintf ( tokbuf, sizeof ( tokbuf ), ""%.*s"", constr1 ) ; snprintf ( tokbuf, sizeof ( tokbuf ), ""%s"", constr1 ) ; snprintf ( tokbuf, sizeof ( tokbuf ), ""%.*s"", constr2 ) ;",0
1475,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1476,"<S2SV_ModStart> iovec, compat, & iter <S2SV_ModStart> len, iovec, & iter <S2SV_ModStart> iter_op ) { ret = iter_op ( req, & iter ) ; } else { ret = rw_op ( req, iter. iov, iter. <S2SV_ModEnd> nr_segs ) ; <S2SV_ModStart> nr_segs, iter. <S2SV_ModEnd> nr_segs ) ;",0
1477,"<S2SV_ModStart> } if ( ptr - c -> rcurr > 100 || strchr ( ptr,'<S2SV_blank>') ) { strncpy ( ptr, ""get <S2SV_blank> "", 4 ) ; strncpy ( ptr, ""gets <S2SV_blank> "", 4 ) ; strncpy ( ptr, ""gets <S2SV_blank> "", 4 ) ; strncpy ( ptr, ""gets <S2SV_blank> "", 4 ) ; strncpy ( ptr, ""gets <S2SV_blank> "", 4 ) ; strncpy ( ptr, ""gets <S2SV_blank> "", 4 ) ; } if ( strncmp ( ptr, ""gets <S2SV_blank> "" ) ) { strncpy ( ptr, ""gets <S2SV_blank> "", 4 ) ; strncpy ( ptr, ""gets <S2SV_blank> "", 4 ) ; strncpy ( ptr, ""gets <S2SV_blank> "", 4 ) ; strncpy ( ptr, ""gets <S2SV_blank> "", 4 ) ; strncpy ( ptr, ""gets <S2SV_blank> "", 4 ) ; strncpy ( ptr, ""gets <S2SV_blank> "" ) ; strncpy ( ptr, ""gets <S2SV_blank> "" ) ; strncpy ( ptr, ""gets <S2SV_blank> "" ) ; strncpy ( ptr, ""gets <S2SV_blank> "" ) ; strncpy ( ptr, ""gets <S2SV_blank> "" ) ;",0
1478,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
1479,"<S2SV_ModStart> ; for ( j = 0 ; j < nintf ; j ++ ) { if ( header -> bLength + j >= sizeof ( * header ) ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> byte%s, <S2SV_blank> ignoring\\n"", cfgno, size2, j ) ; break ; } if ( header -> bLength + j >= sizeof ( * header ) ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> byte%s, <S2SV_blank> ignoring\\n"", cfgno, size2, j ) ; break ; } if ( header -> bLength + j >= sizeof ( * header ) ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> byte%s, <S2SV_blank> ignoring\\n"", cfgno, size2, sizeof ( * header ) ) ; break ; }",0
1480,<S2SV_ModStart> ; if ( card -> user_ctl_count >= MAX_USER_CONTROLS ) return - ENOMEM ; if (,0
1481,"<S2SV_ModStart> client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) { exit_client ( client_p, client_p, client_p, ""Malformed <S2SV_blank> AUTHENTICATE""",1
1482,<S2SV_ModStart> OpMask ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> -> _eip ; if ( ctxt -> memopp ),0
1483,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
1484,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1485,"<S2SV_ModStart> 16 ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { distortion = vp8_highbd_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; } else { distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; }",0
1486,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR0 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR0 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; ( <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; ( <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> )",0
1487,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; va_start ( argptr, format ) ; vsnprintf ( start, maxlen, format, argptr ) ; <S2SV_ModStart> = sizeof ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header ) - maxlen ; va_end ( argptr ) ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> = 0 ; <S2SV_ModEnd> return ; }",0
1488,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
1489,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> cg_wlock ( & <S2SV_ModStart> ) ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } <S2SV_ModEnd> cg_wlock ( &,0
1490,<S2SV_ModStart> -> priv -> enc_priv <S2SV_ModEnd> ) ctx -> <S2SV_ModStart> -> iface -> destroy ( ctx -> priv -> enc_priv <S2SV_ModEnd> ) ; res,0
1491,<S2SV_ModStart> case EXIT_REASON_VMON : case EXIT_REASON_INVEPT :,1
1492,"<S2SV_ModStart> speed ) { <S2SV_ModEnd> sf -> adaptive_rd_thresh <S2SV_ModStart> ; sf -> use_rd_breakout = 1 ; sf -> allow_skip_recode = 1 ; <S2SV_ModEnd> if ( speed <S2SV_ModStart> 1 ) { <S2SV_ModEnd> sf -> use_square_partition_only <S2SV_ModStart> ; sf -> less_rectangular_check = 1 ; sf -> tx_size_search_method = vp9_frame_is_boosted ( cpi )? USE_FULL_RD : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = DISABLE_ALL_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; sf -> recode_loop = ALLOW_RECODE_KFARFGF ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ;",0
1493,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1494,"<S2SV_ModStart> struct compat_timex ) ; memset ( & txc -> tx32, 0, sizeof ( txc -> tx32 ) ) ;",0
1495,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
1496,"<S2SV_ModStart> * EXTRA_STACK ; luaE_checkstack ( L ) ; int maxgoodsize = inuse + ( inuse / 8 ) + 2 * EXTRA_STACK ; if ( maxgoodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) { luaD_reallocstack ( L, goodsize, 0 ) ; else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) { luaD_reallocstack ( L, goodsize, 0 ) ; } else if ( goodsize < ( LUAI_MAXSTACK - EXTRA_STACK ) ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { }, { } ) ;",0
1497,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1498,"<S2SV_ModStart>, * s = STR ( CHILD ( n, 0 ) ) ; const char * raw <S2SV_ModStart> errstr ) { <S2SV_ModEnd> char buf [ <S2SV_ModStart> = """" ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", _PyUnicode_AsString ( errstr ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; <S2SV_ModStart> ) ; } if (! str ) { # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { Py_DECREF ( type ) ; Py_DECREF ( errstr ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( tback ) ; if ( errstr ) { char * s = """" ; char buf [ 128 ] ; s = _PyUnicode_AsString ( errstr ) ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank>",0
1499,"<S2SV_ModStart> ; int is_keyframe_qaunt_set = 0 ; SvcInternal_t * const si = get_svc_internal ( svc_ctx ) ; <S2SV_ModStart> } if ( strcmp ( ""default-encoding-mode"", option_name ) == 0 ) { res = set_option_default_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""default-layers"", option_name ) == 0 ) { svc_ctx -> default_spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-keyframe"", option_",0
1500,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( & <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> perf_event_update_userpage ( event,0
1501,"<S2SV_ModStart> 0 ) { if ( len < 9 ) { t1mac_output_data ( ( byte * ) s, len ) ; return ; } <S2SV_ModStart> ++ s ; if ( len < 9 ) { t1mac_output_data ( ( byte * ) t, len ) ; return ; } <S2SV_ModStart> * t && ( len < 9 ) ) { t1mac_output_data ( ( byte * ) t, len ) ; return ; } <S2SV_ModEnd> if ( *",0
1502,"<S2SV_ModStart> ; if ( entry == NULL ) return EINVAL ; if ( <S2SV_ModStart> KADM5_POLICY ) && entry -> policy == NULL <S2SV_ModEnd> ) return KADM5_BAD_MASK <S2SV_ModStart> KADM5_BAD_MASK ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK ; if ( ( mask & KADM5_TL_DATA ) { tl_data_orig = entry -> tl_data ; while ( tl_data_orig ) { if ( tl_data_orig -> tl_data_type < 256 ) return KADM5_BAD_TL_TYPE ; tl_data_orig = tl_data_orig -> tl_data_next ; } } ret = get_policy ( handle, entry -> policy, & pol, & adb ) ; if ( ret ) return ret ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK ; if ( tl_data_orig -> policy_type < 256 ) return KADM5",0
1503,<S2SV_ModStart> frame -> data [ plane ] && frame -> linesize <S2SV_ModStart> [ plane ] && frame -> linesize [ plane ],1
1504,"<S2SV_ModStart> } fprintf ( ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; mb_index = 0 ; fprintf ( mvs, ""Mb <S2SV_blank> mv <S2SV_blank> ref <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. ref_frame ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ;",0
1505,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
1506,,1
1507,<S2SV_ModStart> : case 0x1a : case 0x1b : case 0x1c : case 0x1f : case 0x16 : case <S2SV_ModStart> : case 0x1e : case 0x1f : case 0x8a : case 0x8b : case 0x8c : case 0x8f :,0
1508,<S2SV_ModStart> ) ) { <S2SV_ModEnd> do_error ( dbh,0
1509,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> ioctl ( slot <S2SV_ModStart> size ) == 0 && size ) <S2SV_ModEnd> pthread_mutex_unlock ( & <S2SV_ModStart> slot_lock ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> = 0 ; <S2SV_ModEnd> BTA_JvRfcommWrite ( slot <S2SV_ModStart> size )!= 0 ||! size ) cleanup_rfc_slot ( slot ) ; } } if ( flags & SOCK_THREAD_FD_RD ) { if (! slot -> f. connected ||! flush_incoming_que_on_rd_signal ( slot ) ) { LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for <S2SV_blank> read <S2SV_blank> while <S2SV_blank> disconnected <S2SV_blank> (or <S2SV_blank> write <S2SV_blank> failure), <S2SV_blank> slot: <S2SV_blank> %d, <S2SV_blank> channel: <S2SV_blank> %d"", __func__, slot -> id, slot -> scn ) ; need_close = true ; } } if ( flags & SOCK_THREAD_FD_EXCL ) { if (! slot -> f. connected ||! flush_incoming_que_on_rd_signal ( slot ) ) { LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for <S2SV_blank> write <S2SV_blank> while <S2SV_blank> disconnected <S2SV_blank> (or <S2SV_blank> write <S2SV_blank> failure), <S2SV_blank> slot: <S2SV_blank> %d, <S2SV_blank> channel:",0
1510,<S2SV_ModStart> struct ieee_802_11_phdr phdr ; if ( len_remain < sizeof ( struct ieee_802_11_phdr ) ) { return ; } <S2SV_ModStart> struct ieee_802_11_phdr phdr ; if ( len_remain < sizeof ( struct ieee_802_11_phdr ) ) { return ; },0
1511,<S2SV_ModStart> ; sh = s_malloc0 <S2SV_ModEnd> ( hdrlen +,0
1512,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; <S2SV_ModEnd> rw = ( <S2SV_ModStart> ; tempWidth = ROUND_UP_TO ( context -> width, 8 ) ; ccl = context -> ColorLossLevel ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * context -> width ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * context -> width ; yplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * context -> width ; for ( x = 0 ; x < context -> width ; x ++ ) { switch ( context -> format ) { case PIXEL_FORMAT_BGR24 : b_val = * src ++ ; g_val = * src ++ ; r_val = * src ++ ; b_val = * src ++ ; r_val = * src ++ ; b_val = * src ++ ; a",0
1513,<S2SV_ModStart> while ( offset > 0 && offset <S2SV_ModStart> < end_offset ) { <S2SV_ModStart> hf_keybuffer ) ; },1
1514,<S2SV_ModStart> nr_parens ) return ERR_PTR ( - EINVAL ) ; if ( ++ top >= nr_parens ) return ERR_PTR ( - EINVAL,0
1515,"<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * rc = <S2SV_ModStart> ) { target = vp9_calc_iframe_target_size_one_pass_cbr ( cpi ) <S2SV_ModEnd> ; } else <S2SV_ModStart> { target = vp9_calc_iframe_target_size_one_pass_cbr_boost ( cpi <S2SV_ModEnd> ) ; } <S2SV_ModStart> { target = vp9_calc_iframe_target_size_one_pass_cbr_boost ( cpi, <S2SV_ModEnd> rc -> frames_since_key <S2SV_ModStart> -> frames_since_key < <S2SV_ModEnd> cpi -> output_framerate <S2SV_ModStart> -> output_framerate / <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> ; if ( rc -> frames_since_key > <S2SV_ModEnd> cpi -> output_framerate <S2SV_ModStart> / 2 ) ) { kf_boost = ( int ) ( <S2SV_ModEnd> rc -> frames_since_key <S2SV_ModStart> -> output_framerate / <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1516,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1517,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
1518,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ) { TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> == ALLOW_32X32 ) tx_mode = vpx_read_bit <S2SV_ModEnd> ( r )",0
1519,<S2SV_ModStart> op + OSPF6HDR_LEN ) ; ND_TCHECK_32BITS ( & hellop -> hello_options,1
1520,<S2SV_ModStart> { if ( datalen!= 1 ) return - EINVAL ; if (,1
1521,"<S2SV_ModStart> rc ) { struct task_struct * <S2SV_ModEnd> task = kthread_run <S2SV_ModStart> ; if ( IS_ERR ( task ) ) { <S2SV_ModStart> uwbd. task = NULL ; <S2SV_ModEnd> printk ( KERN_ERR <S2SV_ModStart> ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; } else { rc -> uwbd. task = task ; <S2SV_ModEnd> rc -> uwbd <S2SV_ModStart> pid ; } }",1
1522,"<S2SV_ModStart> : # line 101 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). class_vector ) ) ; } # line 1044 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 102 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). class_vector ) ) ; } # line 1046 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 104 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1054 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 104 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1054 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 104 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1067 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 104 ""re_grammar.y""",0
1523,<S2SV_ModStart> : idx ; assert ( ptr >= gfx -> backendData && ptr < ( ( char * ) gfx -> backendData + graphicsGetMemoryRequired ( gfx ) ) ) ;,1
1524,<S2SV_ModStart> -> cpi ; MACROBLOCK * const td = args -> td ; <S2SV_ModStart> 32 ] ; MB_MODE_INFO * const mbmi = & td -> mb. mi [ 0 ] -> mbmi ; <S2SV_ModStart> -> plane [ plane ] ; const <S2SV_ModEnd> PLANE_TYPE type = <S2SV_ModStart> -> plane_type ; vp9_prob <S2SV_ModEnd> ( * const <S2SV_ModStart> UNCONSTRAINED_NODES ] = td -> fc -> coef_probs [ tx_size ] [ type ] [ ref ] ; unsigned int ( * const eob_branch ) [ COEFF_CONTEXTS ] = td -> fc -> counts -> <S2SV_ModEnd> eob_branch [ tx_size <S2SV_ModStart> tx_size ] [ ref ] ; const int16_t * scan_order * so ; const int ref = is_inter_block ( mbmi ) ; const int16_t * coef_probs = td -> fc -> coef_probs [ tx_size ] [ type ] [ ref ] ; unsigned int ( * const eob_branch ) [ COEFF_CONTEXTS ] = td -> common. counts -> <S2SV_ModEnd> eob_branch [ tx_size <S2SV_ModStart> tx_size ) ; const uint8_t * const band = get_band_translate (,0
1525,<S2SV_ModStart> SrcList * pSrc ; if ( pSelect -> selFlags & SF_View ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
1526,<S2SV_ModStart> { if ( ( <S2SV_ModStart> shmflg & SHM_RND ) && addr >= shmlba,1
1527,"<S2SV_ModStart> ; serv = svc_create ( <S2SV_ModEnd> & nfs4_callback_program,",0
1528,"<S2SV_ModStart> point, const CurveZZ_p * curve ) { PointZZ_p R0, R1 ; PointZZ_p tmp ; mpz_inits ( R1. x, R1. y, tmp. x, tmp. y, NULL ) ; pointZZ_pDouble ( & R0, & tmp, curve ) ; if ( mpz_tstbit ( scalar, 2 ) ) { mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R0. y ) ; pointZZ_pDouble ( & R1, & tmp, curve ) ; } else { if ( mpz_tstbit ( scalar, 2 ) ) { mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R0. y ) ; pointZZ_pAdd ( & R1, & R0, curve ) ; } else { mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R0. y ) ; pointZZ_pDouble ( & R1, & tmp, curve ) ; } }",0
1529,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1530,<S2SV_ModStart> : case NPNVSupportsWindowless : case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling,1
1531,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
1532,"<S2SV_ModStart> s ) { size_t res ; <S2SV_ModStart> 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; break ; } res = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 )",0
1533,"<S2SV_ModStart> xIter = crm_first_attr ( xml ) ; const char * prop_name <S2SV_ModEnd> = ( const <S2SV_ModStart> -> name ; if ( strcmp ( xIter -> name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else <S2SV_ModEnd> if ( __xml_acl_check <S2SV_ModStart> ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ) ) ; break ; } else if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"", crm_element_name ( xml ), path ) ; free ( path )",0
1534,"<S2SV_ModStart> { if ( strlen ( fullname ) >= ( l_int32 ) nfiles ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> { if ( strlen ( fullname ) >= ( l_int32 ) nfiles ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> { if ( strlen ( fullname ) >= ( l_int32 ) nfiles ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> { if ( strlen ( fullname ) >= ( l_int32 ) nfiles ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> { if ( strlen ( fullname ) >= ( l_int32 ) nfiles ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; }",0
1535,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> ) return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
1536,<S2SV_ModStart> mq_ops ) { fq -> flush_rq = flush_rq ;,0
1537,"<S2SV_ModStart> s ) { uint32 length ; struct stream packet = * s <S2SV_ModEnd> ; ber_parse_header ( <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> params <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",1
1538,"<S2SV_ModStart> ) ; } if ( hkey. type == HASH_KEY_IS_STRING ) { zend_hash_update ( params, hkey. str, hkey. len, ( void * ) & tmp, sizeof ( zval * ), ( void * ) & * current_param TSRMLS_DC ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. num, hkey. len, ( void * ) & tmp, sizeof ( zval * ), ( void * ) & * current_param TSRMLS_DC ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. str, hkey. len, ( void * ) & tmp, sizeof ( zval * ), ( void * ) & current_args TSRMLS_DC ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. num, hkey. len, ( void * ) & current_param TSRMLS_CC ) ;",0
1539,"<S2SV_ModStart> { char buffer [ 79 + 1 <S2SV_ModStart> ; int ret <S2SV_ModEnd> ; i = <S2SV_ModStart> = VPX_IMG_FMT_I420 ; if (! only_420 ) { _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; } else { _y4m -> vpx_bps = 12 ; } <S2SV_ModStart> = VPX_IMG_BPS_8 ; ret = y4m_parse_tags ( _y4m, buffer + 5, _y4m -> vpx_fmt, _y4m -> vpx_bps, 0, 0 ) ; if ( ret < 0 ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format; <S2SV_blank> "" ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return ret ; } <S2SV_ModStart> = VPX_IMG_FMT_I420 ; ret = y4m_parse_tags ( _y4m, buffer + 5, _y4m -> vpx_bps, _y4m -> vpx_fmt, _y4m -> vpx_bps",0
1540,"<S2SV_ModStart> { struct obj * otmp ; if ( strlen ( buf ) >= sizeof ( zeroobj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } <S2SV_ModEnd> if ( otmp",0
1541,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> 0 ) return FALSE <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) return FALSE ; if ( parse_exports_and_fragment_tables ( & table_start, & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( no_xattrs ) sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return TRUE ;",0
1542,"<S2SV_ModStart> createenv ( const struct parser_options * options <S2SV_ModStart> root ) ; if ( options & KEEPENV ) { extern char * * environ ; size_t i ; <S2SV_ModStart> count = 0 ; environ = rule -> environ ; for ( i = 0 ; i < env -> count ; i ++ ) { struct envnode * node ; size_t len ; node = createnode ( NULL, NULL ) ; if ( node == NULL ) { freenode ( node ) ; } else { env -> count ++ ; } } if ( RB_INSERT ( envtree, & env -> root, NULL ) ) { freenode ( node ) ; }",0
1543,<S2SV_ModStart> skb ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
1544,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ] ) ; vpx_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vpx_enable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vpx_compute_qdelta_by_rate ( & cpi -> rc, <S2SV_ModEnd> cm -> base_qindex <S2SV_ModStart> cm -> base_qindex, in_frame_q_adj_ratio [ segment ], cm -> bit_depth <S2SV_ModStart> ; } } vpx_clear_system_state ( ) ; if ( cm -> refresh_alt_ref_frame ) { int segment ; memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vpx_clear_segmentation ( seg ) ;",0
1545,"<S2SV_ModStart> ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; stmt_type = make_type ( ""stmt"", & AST_type, NULL, 0 ) ; if (! stmt_type ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 5 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type",0
1546,"<S2SV_ModStart> ) ; } fd_t old_logfile_fd = open ( log_path, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IWGRP | S_IROTH | S_IROTH <S2SV_ModEnd> ) ; if <S2SV_ModStart> } write ( old_logfile_fd <S2SV_ModEnd>, ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"",",0
1547,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ; break ; } while ( context -> pass > 0 && context -> pass < 4 && context -> curY >= p -> height ) { switch ( ++ context -> pass ) { case 2 : context -> curY = i -> posY + 4 ; break ; case 3 : context -> curY = i -> posY + 2 ; break ; case 4 : context -> curY = i -> posY + 1 ; break ; },1
1548,<S2SV_ModStart> ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; } else { ++ x -> uv_mode_count [ uvm ] ; } } else { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { ++ x -> ymode_count,0
1549,"<S2SV_ModStart> ) ; } smb_ofile_flush <S2SV_ModEnd> ( sr, <S2SV_ModStart> f_mutex ) ; smb_ofile_flush <S2SV_ModEnd> ( sr,",1
1550,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> len > 0 && * op && len > 0 <S2SV_ModStart> 0 ) { if ( len == 0 ) return - EINVAL ; <S2SV_ModStart> PLANE_SIZE ) { if ( u > PLANE_MAX_SIZE ) return - EINVAL ; <S2SV_ModStart> -= PLANE_SIZE ; <S2SV_ModEnd> * op ++ <S2SV_ModStart> ( SURROGATE_PAIR | SURROGATE_LOW | ( u & SURROGATE_BITS ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> } else { if ( len == size ) { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | SURROGATE_BITS ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | SURROGATE_BITS ) ; } s += size ; len -= size ; } } else { * op ++ = ( wchar_t ) <S2SV_ModStart> * s ++ <S2SV_ModEnd> ; } return,0
1551,"<S2SV_ModStart> ; if ( * cp == '\\0' || <S2SV_ModEnd> strchr ( cp <S2SV_ModStart> )!= NULL || <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ( cp, ""."" ) == 0 || strcmp ( cp, <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { run_err",1
1552,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, * t, * StartClean ; double <S2SV_ModEnd> * argbuf = <S2SV_ModStart> * argbuf = 0 <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> ; s = cinput ; while ( * s!= '[' ) s ++ ; t = s ; while ( * t!= ']' ) t ++ ; <S2SV_ModStart> += sprintf ( outbuffer <S2SV_ModEnd>, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", <S2SV_ModStart> ; if ( * s == '0' && s [ 1 ] == ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; free ( argbuf ) ; return ( 0 ) ; } StartClean = outpos ; nameobject = t ; while ( * t!='<S2SV_blank>'&& * t!= '\\n' ) t ++ ; * t ++ = 0 ; if ( strcmp ( nameobject, ""Curve"" ) == 0 ) {",0
1553,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : * ( size_t * ) val = ms -> elf_notes_max ; return 0 ;,1
1554,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart>, id ; if ( unlikely ( siphash_key_is_zero ( & net -> ipv4. ip_id_key ) ) ) get_random_bytes ( & net -> ipv4. ip_id_key <S2SV_ModEnd>, sizeof ( <S2SV_ModStart>, sizeof ( net -> ipv4. ip_id_key <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ; hash = siphash_3u32 <S2SV_ModEnd> ( ( __force <S2SV_ModStart> iph -> protocol, & net -> ipv4. ip_id_key <S2SV_ModEnd> ) ; id",1
1555,"<S2SV_ModStart> expr_ty step ; string type_comment ; <S2SV_ModStart> int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_lower ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( exists_not_none ( obj, & PyId_upper ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_upper ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( exists_not_none ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } <S2SV_ModStart> ) ; } if ( exists_not_none ( obj, &",0
1556,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
1557,"<S2SV_ModStart> ctl -> pw, "".chfn""",1
1558,<S2SV_ModStart> { if ( max_length < sizeof ( struct ieee80211_radiotap_header ) ) return - EINVAL ; if ( <S2SV_ModStart> iterator -> _rtheader + sizeof ( uint32_t ),1
1559,"<S2SV_ModStart> int err ; list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 handle ; <S2SV_ModStart> extack ) ) goto err_delete ; } val = be32_to_cpu ( iter -> sel -> keys [ 0 ]. val ) >> tos_off & 0xff ; mask = be32_to_cpu ( iter -> sel -> keys [ 0 ]. mask ) >> tos_off & 0xff ; if ( ( iter -> val & cmask ) == ( val & cmask ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ) ; goto err_delete <S2SV_ModEnd> ; } } <S2SV_ModStart>! match ) goto err_delete ; match -> handle = knode -> handle ; match -> band = knode -> res -> classid ; match -> val = val ; err = nfp_abm_update_band_map ( alink ) ; if ( err ) goto err_delete ;",0
1560,<S2SV_ModStart> NULL ; } <S2SV_ModEnd> dst_state -> curframe,0
1561,"<S2SV_ModStart> return ; } if ( input <= 0.0 || output <= 0.0 ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Gamma <S2SV_blank> values <S2SV_blank> should <S2SV_blank> be <S2SV_blank> positive"" ) ; RETURN_FALSE ; }",1
1562,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( pass <S2SV_ModStart> : VPX_RC_ONE_PASS ; <S2SV_ModEnd> stream -> config <S2SV_ModStart>. rc_twopass_stats_in = <S2SV_ModEnd> stats_get ( & <S2SV_ModStart> stats ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1563,<S2SV_ModStart> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),0
1564,"<S2SV_ModStart> = g_strdup_printf ( ""%s.%s"", tmpfile_name, "".service"" ) ; g_autoptr ( GString ) new_exec = g_strdup_printf ( ""%s.%s"", g_strdup_printf ( ""%s.%s"", tmpfile_name, escaped_app, escaped_branch, escaped_arch ) ; g_auto ( GStrv ) groups = NULL ; g_string * new_data = NULL ; gsize new_data_len = 0 ; for ( i = 0 ; i < new_data_len ; i ++ ) { g_string tmp_name = g_strdup_printf ( ""%s.%s.%s"", tmp_name, g_strdup_printf ( ""%s.%s"", tmp_app, escaped_branch ), escaped_arch ) ; g_string * new_data = g_strdup_printf ( ""%s.%s.service"", tmp_name, new_data_len ) ; g_string_free ( new_data ) ; g_string_free ( tmp_name ) ; tmp_name = g_strdup_printf ( ""%s.%s",0
1565,"<S2SV_ModStart> data_end ) { const <S2SV_ModStart> pbi -> common <S2SV_ModEnd> ; const int <S2SV_ModStart>, tile_col ; vpx_reader <S2SV_ModEnd> r ; assert <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm ->",0
1566,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9Decoder * vp9_decoder_create ( <S2SV_ModEnd> VP9D_CONFIG * oxcf <S2SV_ModStart> ) { VP9Decoder * const pbi = vpx_memalign ( 32, sizeof ( * pbi ) ) ; VP9_COMMON * const cm = vpx_calloc ( 1, sizeof ( * cm ) ) ; if (! pbi ) return NULL ; vpx_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 0 ; vp9_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vpx_initialize_dec ( ) ; vpx_rtcd ( ) ; memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> decoded_key_frame = 0 ; cm -> ready_for_new_data = 1 ; vpx_init_dequantizer ( cm ) ; vpx_",0
1567,"<S2SV_ModStart> -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1568,"<S2SV_ModStart> -> protocol_timeout = g_timeout_add_seconds <S2SV_ModEnd> ( 5,",0
1569,<S2SV_ModStart> -> count ; new_fpl -> user = get_uid ( fpl -> user ) ;,1
1570,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> ( opt == NULL || opt -> opt. <S2SV_ModStart> == 0 ) return ; <S2SV_ModEnd> cipso_v4_delopt ( &,0
1571,"<S2SV_ModStart> * tokens, vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> i ++ ] ; if ( j <= 0 ) { tokens [ - 1 ]. value = v ; tokens [ - 1 ]. len = l ; } else if ( j >= 0 ) { tokens [ - 1 ]. value = v ; tokens [ - 1 ]. len = l ; } else",0
1572,"<S2SV_ModStart> = VPX_CODEC_OK ; ( void ) pts ; <S2SV_ModStart> ( img ) { <S2SV_ModEnd> pick_quickcompress_mode ( ctx <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } if ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int upd = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) upd ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) upd ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF",0
1573,"<S2SV_ModStart> wqh ) ; init_waitqueue_func_entry ( & ctx -> wait, ctx_wakeup ) ;",0
1574,"<S2SV_ModStart> ) ; struct mnt_namespace * ns = dest_mnt -> mnt_ns ; struct <S2SV_ModStart> int err ; err = invent_group_ids ( source_mnt, true ) ; if ( err <S2SV_ModEnd> ) goto out <S2SV_ModStart> ( dest_mnt ) ) goto out ; err = propagate_mnt ( dest_mnt, dest_mp, source_mnt, & tree_list ) ; if ( err ) goto out ; if ( parent_path ) { detach_mnt ( source_mnt, parent_path ) ; } else { mnt_set_mountpoint ( dest_mnt, dest_mp, source_mnt ) ; touch_mnt_namespace ( dest_mnt -> mnt_ns ) ; } hlist_for_each_entry_safe ( child, n, & tree_list, mnt_hash ) { struct mount * q ; hlist_del_init ( & child -> mnt_hash ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint )",0
1575,"<S2SV_ModStart>, & len, 0",1
1576,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = pair_set_epi16 ( cospi_1_0, cospi_31_0 ) ; const __m128i k__cospi_p05_p27 <S2SV_ModEnd> = pair_set_epi16 ( <S2SV_ModStart> = pair_set_epi16 ( cospi_5_0, cospi_27_0 ) ; const __m128i k__cospi_p27_m05 = pair_set_epi16 ( cospi_27_0, - cospi_5_0 ) ; const __m128i k__cospi_p23_p19_m13 = pair_set_epi16 ( cospi_13_0, - cospi_19_0 ) ; const __m128i k__cospi_p17_p15 = pair_set_epi16 ( cospi_17_0, - cospi_15_0 ) ; const __m128i k__cospi_p17_m17 = pair_set_epi16 ( cospi_17_0, - cospi_17_0 ) ;",0
1577,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> ) { int64_t max_bits ; max_bits = ( ( int64_t ) rc -> av_per_frame_bandwidth * ( int64_t ) oxcf -> two_pass_vbrmax_section ) / 100 ; if ( max_bits < 0 ) max_bits = 0 ; else max_bits = ( ( int64_t ) rc -> max_frame_bandwidth * ( int64_t ) oxcf -> two_pass_vbrmax_section ) / 100 ; if ( max_bits < rc -> max_frame_bandwidth ) max_bits = rc -> max_frame_bandwidth ;,0
1578,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
1579,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> Huff_transmit ( huff_t <S2SV_ModStart> NULL ) { return <S2SV_ModEnd> send ( huff <S2SV_ModStart> [ ch ] <S2SV_ModEnd>, fout )",0
1580,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart>, BLOCK_SIZE bsize, PC_TREE * pc_tree <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> -> common ; MACROBLOCKD * const xd = & td -> e_mbd ; <S2SV_ModEnd> int segment_id = <S2SV_ModStart> mi_height = num_8x8_blocks_wide_lookup [ mbmi -> sb_type ] ; const int mi_width = num_8x8_blocks_high_lookup [ mbmi -> sb_type ] ; const int mi_height = num_8x8_blocks_high_lookup [ mbmi -> sb_type ] ; const int bw = num_8x8_blocks_wide_lookup [ mbmi -> sb_type ] ; const int bh = num_8x8_blocks_high_lookup [ mbmi -> sb_type ] ; x -> skip_recode =! x -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 && cpi -> oxcf. allow_skip_recode ; x -> skip_optimize = ctx -> is_coded ; if ( x -> skip_encode ) return ; <S2SV_ModEnd> if (",0
1581,"<S2SV_ModStart> ; for ( j = 0 ; j < nintf ; j ++ ) { if ( header -> bLength + j >= sizeof ( * header ) ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> byte%s, <S2SV_blank> ignoring\\n"", cfgno, size2, j ) ; break ; } if ( header -> bLength + j >= sizeof ( * header ) ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> byte%s, <S2SV_blank> ignoring\\n"", cfgno, size2, j ) ; break ; } if ( header -> bLength + j >= sizeof ( * header ) ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> byte%s, <S2SV_blank> ignoring\\n"", cfgno, size2, sizeof ( * header ) ) ; break ; }",0
1582,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> ] ; struct crypto_cipher * tfm_des <S2SV_ModEnd> ; str_to_key ( <S2SV_ModStart> ; tfm_des = crypto_alloc_cipher ( ""des"" <S2SV_ModEnd>, 0, <S2SV_ModStart>, 0, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ) { <S2SV_ModEnd> cifs_dbg ( VFS <S2SV_ModStart> ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; return PTR_ERR ( tfm_des ) ; } crypto_cipher_setkey <S2SV_ModEnd> ( tfm_des, <S2SV_ModStart> 8 ) ; crypto_cipher_encrypt_one ( tfm_des, out, in ) ; crypto_free_cipher <S2SV_ModEnd> ( tfm_des ) <S2SV_ModStart> tfm_des ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",1
1583,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1584,"<S2SV_ModStart> { uint32_t value ; int position <S2SV_ModEnd>, i, <S2SV_ModStart>, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) position = get_bits_count ( gbc ) ; if ( position == 65 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } zeroes = i = 0 ; while ( 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_",0
1585,<S2SV_ModStart> i > pos + delta <S2SV_ModStart> off + 1 <= pos + delta <S2SV_ModStart> off + 1 <= pos + delta ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_CALL ) { if ( BPF_OP ( insn -> code ) == BPF_EXIT ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_EXIT ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_CALL ) { if ( BPF_OP ( insn -> code ) == BPF_EXIT ) { if ( BPF_OP ( insn -> code ) == BPF_EXIT ) { if ( BPF_OP ( insn -> code ) == BPF_EXIT ) { if ( BPF_OP ( insn -> code ) == BPF_EXIT ) { if ( BPF_OP ( insn -> code,0
1586,<S2SV_ModStart> case EXIT_REASON_INVEPT : case EXIT_REASON_INVVPID :,1
1587,"<S2SV_ModStart> } else if ( ISALNUM ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c <S2SV_ModEnd> ) || c <S2SV_ModStart> } else if ( ISALNUM ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c <S2SV_ModEnd> ) || c <S2SV_ModStart> } else if ( ISALNUM ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c <S2SV_ModEnd> ) || c <S2SV_ModStart> else if ( ISALNUM ( <S2SV_ModEnd> c ) || <S2SV_ModStart> } else if ( ISALNUM ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c <S2SV_ModEnd> ) || c <S2SV_ModStart> } else if ( ISALNUM ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c <S2SV_ModEnd> ) || c <S2SV_ModStart> } else { if ( ISALNUM ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c <S2SV_ModEnd> ) || c <S2SV_ModStart> } else if ( ISALNUM ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c",0
1588,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> http_contentlen. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. ptr = NULL, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> content_line. ptr = NULL, packet -> content_line. ptr = NULL, packet -> content_line. len = 0, packet -> accept_line. ptr = NULL, packet -> accept_line. len = 0, packet -> user_agent_line. ptr = NULL, packet -> user_agent_line. len = 0, packet -> http_url_name. ptr = NULL, packet -> http_url_name. len = 0, packet -> http_transfer_encoding. ptr = NULL, packet -> http_contentlen. ptr = NULL, packet -> http_transfer_encoding. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet ->",0
1589,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1590,<S2SV_ModStart> ++ r ; if <S2SV_ModEnd> ( pow ( <S2SV_ModStart> dim ) > entries ) { r = - 1 ; } <S2SV_ModEnd> return r ;,0
1591,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> ; } } return SyncAuthenticPixels ( image, exception ) <S2SV_ModEnd> ; } <S2SV_null>",0
1592,"<S2SV_ModStart> == 5 ) goto inhdr_error ; if ( IPCB ( skb ) -> opt. optlen == 0 ) { IPCB ( skb ) -> opt. optlen = sizeof ( struct iphdr ) ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; } else if ( IPCB ( skb ) -> opt. <S2SV_ModStart> return 0 ; inhdr_error : IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ;",0
1593,"<S2SV_ModStart> ) ; } if ( hkey. type == HASH_KEY_IS_STRING ) { zend_hash_update ( params, hkey. str, hkey. len, ( void * ) & tmp, sizeof ( zval * ), ( void * ) & * current_param TSRMLS_DC ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. num, hkey. len, ( void * ) & tmp, sizeof ( zval * ), ( void * ) & * current_param TSRMLS_DC ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. str, hkey. len, ( void * ) & tmp, sizeof ( zval * ), ( void * ) & current_args TSRMLS_DC ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. num, hkey. len, ( void * ) & current_param TSRMLS_CC ) ;",0
1594,"<S2SV_ModStart> length ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) )",0
1595,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
1596,"<S2SV_ModStart> cfg ) { struct stat st ; FILE * file = NULL ; int fd = - 1 ; <S2SV_ModStart> } else { fd = open ( filename, O_WRONLY | O_APPEND | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY ) ; if ( fd >= 0 && ( fstat ( fd <S2SV_ModEnd>, & st <S2SV_ModStart> == 0 ) && <S2SV_ModEnd> S_ISREG ( st <S2SV_ModStart> == 0 ) && <S2SV_ModEnd> S_ISREG ( st <S2SV_ModStart> == 0 ) && ( st. st_fstat ( fd <S2SV_ModEnd>, & st <S2SV_ModStart> == 0 ) && <S2SV_ModEnd> S_ISREG ( st <S2SV_ModStart> == 0 ) && <S2SV_ModEnd> S_ISREG ( st <S2SV_ModStart> == 0 ) && <S2SV_ModEnd> S_ISREG ( st <S2SV_ModStart> == 0 && <S2SV_ModEnd> S_ISREG ( st <S2SV_ModStart> == 0 && ( fstat ( fd <S2SV_ModEnd>, & st <S2SV_ModStart> == 0 ) && S_ISREG ( st. st_fstat ( fd <S2SV_ModEnd> ) ) ) <S2SV_ModStart> == 0 ) && ( st. st_fstat ( fd <S2SV_ModEnd>, & st <S2SV_ModStart> == 0 ) && S_ISREG ( st. st_fstat ( fd <S2SV_ModEnd>, & st <S2SV_ModStart> == 0 ) && S_ISREG ( st. st_fstat ( fd <S2SV_ModEnd>",0
1597,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! f2fs_readonly (,1
1598,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
1599,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",1
1600,<S2SV_ModStart> return FALSE ; if ( Stream_GetRemainingLength ( s ) < 4 ) { return FALSE ; },0
1601,<S2SV_ModStart> user ) { cleanup_srcu_struct ( & user -> release_barrier ) ;,0
1602,<S2SV_ModStart> ) ) ; # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf. noise_sensitivity > 0 ) { # if CONFIG_TEMPORAL_DENOISING if ( ( cpi -> oxcf. noise_sensitivity > 0 ) && ( cpi -> oxcf. noise_sensitivity > 0 ) ) { # if CONFIG_TEMPORAL_DENOISING if ( ( cpi -> oxcf. noise_sensitivity > 0 ) { # if CONFIG_TEMPORAL_DENOISING if ( ( cpi -> oxcf. noise_sensitivity > 0 ) && ( cpi -> oxcf. noise_sensitivity > 0 ) ) { # if CONFIG_TEMPORAL_DENOISING if ( ( cpi -> oxcf. noise_sensitivity > 0 ) { # if CONFIG_TEMPORAL_DENOISING if ( ( cpi -> oxcf. noise_sensitivity > 0 ) # if CONFIG_TEMPORAL_DENOISING if ( ( cpi -> oxcf. noise_sensitivity > 0 ),0
1603,<S2SV_ModStart> == ARPHRD_ETHER ) { <S2SV_ModStart> ether_setup ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; },1
1604,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (",1
1605,"<S2SV_ModStart> -> b_multithreaded_rd ) vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
1606,<S2SV_ModStart> ; } } if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) break ; } } else { if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) break ; } } else { if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) {,0
1607,<S2SV_ModStart> { if ( ( <S2SV_ModStart> > 0 ) && ( ( xWantedSize + xHeapStructSize ) > xWantedSize ) <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize = 0 ; } } else { xWantedSize = 0 <S2SV_ModEnd> ; } if,0
1608,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1609,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1610,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpDiff"", ""%s"", ""(cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> cp -- ) return 1 ;",1
1611,"<S2SV_ModStart> s ) { struct stream packet = * s ; <S2SV_ModStart> int i ; if (! s_check_rem ( s, 2 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> bitmaps <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s, 2 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s, 2 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> bitmaps <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
1612,"<S2SV_ModStart> valuelen ) ; if ( sfe -> valuelen > context -> bufsize ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, sfe -> valuelen, & sfe -> nameval [ 0 ] ) ; if ( error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; }",0
1613,"<S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg6 ) ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; goto trunc ; }",0
1614,"<S2SV_ModStart> out ) { uint32 width, length ; uint16 bitspersample ; uint16 samplesperpixel ; uint16 <S2SV_ModEnd> input_compression, input_photometric <S2SV_ModStart> ( out, TIFFTAG_COMPRESSION, input_compression ) ; if ( length!= ( uint32 ) - 1 ) { TIFFSetField ( out, TIFFTAG_IMAGELENGTH, length ) ; return FALSE ; } length = ( uint32 ) TIFFGetFieldDefaulted ( in, TIFFTAG_IMAGEWIDTH, & width ) ; TIFFSetField ( out, TIFFTAG_LENGTH, length ) ; if ( width!= ( uint32 ) - 1 ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; TIFFSetField ( out, TIFFTAG_LENGTH, length ) ; return FALSE ; } if ( length!= ( uint32 ) - 1 ) { TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXELEL, samplesperpixel ) ; } else if ( length!= ( uint32 ) - 1 ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; TIFFSetField ( out, TIFFTAG_",0
1615,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1616,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model * coef_probs = cpi -> frame_coef_probs [ tx_size ] ; vpx_coeff_count * coef_counts = cpi -> coef_counts [ tx_size ] ; unsigned int ( * eob_branch_ct ) [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] ; vpx_tree_probs_from_distribution ( vp9_coef_tree, coef_branch_ct [ i ] [ j ] [ k ] [ l ], coef_counts [ i ] [ j ] [ k ] [ l ]",0
1617,"<S2SV_ModStart> { } ; int ioctl_len ; <S2SV_ModStart> name ) ; ioctl_len = strlen ( KDSKBMODE ) ; if ( ioctl_len > 0 ) { r = ioctl ( fd, KDSKBMODE, K_XLATE ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> kbdmode <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; } r = loop_write ( fd, ""\\033%G"", 3, false ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s",0
1618,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x02 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x",0
1619,"<S2SV_ModStart> filp ) { struct sockaddr_storage addr ; sockaddr_copy ( & addr, filp -> f_cred -> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1620,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> cfg, vpx_codec_flags_t <S2SV_ModStart> ( flags & ( VPX_CODEC_USE_XMA | VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags",0
1621,"<S2SV_ModStart> int stride, const vpx_bit_depth_t bit_depth, <S2SV_ModEnd> int mv_row, <S2SV_ModStart> int uv_block_size, const vpx_bit_depth_t bit_depth <S2SV_ModStart> ; if ( bit_depth <S2SV_ModEnd> == 8 ) <S2SV_ModStart> = MV_PRECISION_Q4 ; } vpx_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 <S2SV_ModEnd> ], uv_block_size <S2SV_ModStart>, uv_block_size, & pred [ 512 <S2SV_ModEnd> ], uv_block_size <S2SV_ModStart>, uv_block_size, & vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 256 <S2SV_ModEnd> ], uv_block_size <S2SV_ModStart>, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride",0
1622,"<S2SV_ModStart> ; mungspaces ( ( unsigned char ) <S2SV_ModStart> ) ) ; <S2SV_ModEnd> bufp = find_optparam <S2SV_ModStart> ( bufp ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; goto error ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; goto error ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; goto error ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { bufp = find_optparam ( buf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; goto error ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; goto error ; } ++ bufp ; if",0
1623,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> cJSON * <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> ; for ( int j = 0 ; j < count ; ++ j ) { cJSON * n = 0, * p = 0, * a = cJSON_CreateArray ( ) ; for ( j = 0 ; j < count ; ++ j ) n = cJSON_CreateFloat ( numbers [ j ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } return a ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1624,<S2SV_ModStart> tk_status ) ; task -> tk_status = 0 ;,0
1625,"<S2SV_ModStart> inode -> i_sb ) <S2SV_ModEnd> ; bh = <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct indirectEntry * <S2SV_ModStart> -> i_location ) ; if ( ie -> indirectICB. extLength > sbi -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> extLength <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", inode -> i_ino, ie -> indirectICB. extLength ) ; make_bad_inode ( inode ) ; return ; } if ( udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ) { if ( ident == TAG_IDENT_IE ) { struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if ( ie -> indirectICB. extLength > sbi -> i_sb -> s_blocksize ) memcpy ( & iinfo -> i_location, & loc, 0, & ident ) ; if ( ident == TAG_IDENT_",0
1626,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
1627,"<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> ]. len ) ; CHECKINT16 ( idx, len ) ; a -> name = GETINT16 ( buf + idx ) ; idx += 2 ; a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ; idx += sizeof ( GUID ) ; if ( a -> name & GUID_EXISTS_FLAG ) { a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ; idx += sizeof ( GUID ) ; } for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. data = CHECKED_XMALLOC ( unsigned char, a -> names [ i ]. len ) ; for ( j = 0 ; j < a -> num_names ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to",0
1628,"<S2SV_ModStart> data_end ) { const VP9EncoderConfig <S2SV_ModEnd> * const cm <S2SV_ModStart> int aligned_mi_cols = mi_cols_aligned_to_sb ( cm -> mi_cols ) ; const int tile_cols = MIN ( cm -> oxcf. max_tiles, tile_cols ) ; const int tile_rows = MIN ( cm -> oxcf. max_tiles, tile_rows ) ; TileBuffer * tile_buffers = NULL ; int n ; int final_worker = - 1 ; if ( tile_cols <= ( 1 << 6 ) ) { assert ( tile_rows <= ( 1 << 6 ) ) ; ( void ) tile_rows ; } if ( pbi -> num_tile_workers == 0 ) { VP9Worker * const worker = & pbi -> tile_workers [ 0 ] ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_malloc ( sizeof ( TileWorker",0
1629,"<S2SV_ModStart> = base + get4 ( ) ; if ( ( save = ftell ( ifp ) ) < offset ) { fprintf ( stderr, ""Error <S2SV_blank> reading <S2SV_blank> %s\\n"", __FILE__, __LINE__ ) ; exit ( 1 ) ; } <S2SV_ModStart> get4 ( ) ; if ( ( save = ftell ( ifp ) ) < offset ) { fprintf ( stderr, ""Error <S2SV_blank> reading <S2SV_blank> %s\\n"", __FILE__, __LINE__ ) ; exit ( 1 ) ; } <S2SV_ModStart> ; if ( ( save = ftell ( ifp ) ) < offset ) { fprintf ( stderr, ""Error <S2SV_blank> reading <S2SV_blank> %s\\n"", __FILE__, __LINE__ ) ; exit ( 1 ) ; } if ( ( save = ftell ( ifp ) ) < offset ) { fprintf ( stderr, ""Error <S2SV_blank> reading <S2SV_blank> %s\\n"", __FILE__, __LINE__ ) ; exit ( 1 ) ; } if ( ( save = ftell ( ifp ) ) < offset ) { fprintf ( stderr, ""Error <S2SV_blank> reading <S2SV_blank> %s\\n"", __FILE__, __LINE__ ) ; exit ( 1 ) ; }",0
1630,"<S2SV_ModStart> err = - EBUSY ; if ( type == PACKET_FANOUT_HASH ) goto out ; err = - EINVAL ; if ( type == PACKET_FANOUT_CPU : case PACKET_FANOUT_RND : case PACKET_FANOUT_CBPF : case PACKET_FANOUT_EBPF : break ; default : mutex_unlock ( & fanout_mutex ) ; err = - EINVAL ; if ( type == PACKET_FANOUT_HASH ) { err = - ENOMEM ; rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) goto out ; }",0
1631,"<S2SV_ModStart> -> common ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; if ( cpi -> refresh_alt_ref_frame || ( cpi -> refresh_golden_frame &&! cpi -> rc. is_src_frame_alt_ref ) ) { vpx_clear_segmentation ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vpx_clear_system_state ( ) ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, base_q * Q_RATIO ( i ) ) ; vpx_enable",0
1632,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
1633,"<S2SV_ModStart> ( void ) TIFFGetFieldDefaulted <S2SV_ModEnd> ( in,",1
1634,<S2SV_ModStart> -> error_code ) { const vpx_codec_err_detail * err_detail = ( error -> has_detail && error -> detail )? error -> detail : NULL ; ctx -> base. err_detail = err_detail ; return error -> error_code ; } else { ctx -> base. err_detail = NULL ; return error -> error_code ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1635,<S2SV_ModStart> [ i ] && j < sizeof ( buf ),0
1636,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1637,"<S2SV_ModStart> ""corrupt <S2SV_blank> BSON"" ) ; VALIDATE_TEST ( ""test59.bson"", BSON_VALIDATE_NONE, 9, BSON_VALIDATE_NONE, ""corrupt <S2SV_blank> BSON"" ) ;",1
1638,"<S2SV_ModStart> ; if ( cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON ) ) { if ( x86_pmu. cntval_mask & ( 1ULL << eax. split. bit_width ) ) x86_pmu. cntval_mask |= ( 1ULL << eax. split. bit_width ) - 1 ; if ( x86_pmu. cntval_mask & ( 1ULL << eax. split. bit_width ) ) x86_pmu. cntval_mask |= ( 1ULL << eax. split. bit_width ) - 1 ; } else if ( x86_pmu. cntval_mask & ( 1ULL << eax. split. bit_width ) ) x86_pmu. cntval_mask &= ( 1ULL << eax. split. bit_width ) - 1 ; if ( x86_pmu. cntval_mask & ( 1ULL << eax. split. bit_width ) ) x86_pmu. cntval_mask |= ( 1ULL << eax. split. bit_width ) - 1 ;",0
1639,"<S2SV_ModStart> ; pocstruct_t * ps_prev_poc, * ps_cur_poc ; memset ( ( void * ) ps_cur_slice, 0, sizeof ( dec_slice_params_t ) ) ; ps_prev_poc = ps_dec -> ps_prev_poc ; ps_cur_poc = ps_dec -> ps_cur_poc",0
1640,<S2SV_ModStart> ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,0
1641,"<S2SV_ModStart> ; krb5_key_data * key_data ; if ( n_key_data == 0 ) return NULL ; key_data = k5calloc ( n_key_data, sizeof ( * key_data ), & err ) ; if ( key_data_in == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents [ 1 ] = NULL ; } } for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [",0
1642,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ) ),0
1643,<S2SV_ModStart> ; if ( task -> ptrace &&,0
1644,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x02 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x",0
1645,<S2SV_ModStart> int getnum ( <S2SV_ModEnd> const char * <S2SV_ModStart> const char * fmt ) { if (! isdigit ( * ( * fmt ) ) ) return df ; else return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1646,"<S2SV_ModStart> survival, g -> old ) ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival, g -> reallyold ) ; sweepgen ( L, g, psurvival, g -> finobjold ) ; g -> finobjold = * psurvival ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; sweepgen ( L, g, psurvival, g -> finobjrold ) ; g -> finobjrold = g -> finobjold ;",0
1647,<S2SV_ModStart> = 0 ; else { ret = <S2SV_ModEnd> - EIO ; <S2SV_ModStart> - EIO ; },0
1648,"<S2SV_ModStart> 'S' } ; uint8_t * ssl_request = { 0 } ; <S2SV_ModStart>!= PROTOCOL_EARLY ) { return NULL ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> ) ; if (! safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok ) ; return NULL ; } s_write ( c, c -> local_rfd. fd, ssl_request, sizeof ssl_request ) ; if (! safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok ) ;",0
1649,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> -> variant_opaque ; <S2SV_ModEnd> char * server <S2SV_ModStart> = 0 ; <S2SV_ModEnd> int rc = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> connection -> socket <S2SV_ModStart> = NULL ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } bzero ( & hints, sizeof ( struct addrinfo ) ) ; hints. ai_flags = 0 ; hints. ai_socktype = SOCK_RAW ; if ( hints. ai_family == AF_INET ) { hints. ai_family = AF_INET ; hints. ai_protocol = IPPROTO_TCP ; } else { hints. ai_protocol = IPPROTO_ICMP ; } crm_debug ( ""Looking <S2SV_blank> up <S2SV_blank> %s"", server ) ; ret_ga = getaddrinfo ( server, NULL, & hints, & res ) ; if ( ret_ga ) { crm_err ( ""getaddrinfo",0
1650,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; cpi -> mb. ss = vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ; cpi -> common. last_coded_gf = 128 ; cpi -> common. last_coded_gf = 128 ; cpi -> common. last_coded_gf = 128 ; cpi -> common. last_coded_gf = 128 ; cpi -> common. last_coded_gf = 128 ; cpi -> common. last_coded_gf = 128 ; cpi -> common. last_coded_gf = 128 ; cpi -> common. last_coded_gf = 128 ; cpi -> common. last_coded_gf = 128 ; cpi -> common. last_coded_gf = 128 ; cpi -> common. last_coded_gf = 128 ; cpi -> common. last_coded_gf = 128 ; cpi -> common. last_coded_gf = 128 ; cpi -> common. last_coded_gf = 128 ; cpi -> common. last",0
1651,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1652,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",1
1653,<S2SV_ModStart> ] ) ; ND_TCHECK_16BITS ( & icp -> icmp6_data8 [ 0 ] ) ; <S2SV_ModStart> ] ) ; ND_TCHECK_16BITS ( & icp -> icmp6_data12 [ 0 ] ) ; <S2SV_ModStart> ] ) ; ND_TCHECK_16BITS ( & icp -> icmp6_data16 [ 1 ] ) ; <S2SV_ModStart> ] ) ; ND_TCHECK_16BITS ( & icp -> icmp6_data12 [ 0 ] ) ; <S2SV_ModStart> ] ) ; ND_TCHECK_16BITS ( & bp [ 26 ] ) ; <S2SV_ModStart> ] ) ; ND_TCHECK_16BITS ( & icp -> icmp6_data12 [ 0 ] ) ; <S2SV_ModStart> ] ) ; ND_TCHECK_16BITS ( & icp -> icmp6_data12 [ 1 ] ) ; <S2SV_ModStart> ] ) ; ND_TCHECK_16BITS ( & icp -> icmp6_data12 [ 0 ] ) ; <S2SV_ModStart> ] ) ; ND_TCHECK_16BITS ( & bp [ 26 ] ) ; <S2SV_ModStart> ] ) ; ND_TCHECK_16BITS ( & icp -> i,0
1654,"<S2SV_ModStart> ctx, expr -> unary. child",1
1655,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1656,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; if ( <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command <S2SV_ModStart> MF ) ; <S2SV_ModEnd> return rc ;",0
1657,"<S2SV_ModStart> Image * image ; MagickBooleanType status <S2SV_ModStart>, padding, <S2SV_ModEnd> value, version <S2SV_ModStart> < 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModEnd> * p ++ <S2SV_ModStart> < 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModEnd> * p ++ <S2SV_ModStart> < 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModEnd> * p ++ <S2SV_ModStart> < 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModEnd> * p ++",0
1658,"<S2SV_ModStart> 1 ; } if (! jas_safe_size_mul3 ( siz -> width, siz -> height, & mainhdrlen ) ) { jas_eprintf ( ""too <S2SV_blank> large <S2SV_blank> mainhdr <S2SV_blank> size\\n"" ) ; goto error ; } if (! jas_safe_size_mul3 ( siz -> width, siz -> height, & mainhdrlen ) ) { jas_eprintf ( ""too <S2SV_blank> large <S2SV_blank> mainhdr <S2SV_blank> size\\n"" ) ; goto error ; } if (! jas_safe_size_mul3 ( siz -> width, siz -> height, & mainhdrlen ) ) { jas_eprintf ( ""too <S2SV_blank> large <S2SV_blank> mainhdr <S2SV_blank> size\\n"" ) ; goto error ; } if (! jas_safe_size_mul3 ( siz -> width, siz -> height, & mainhdrlen ) ) { jas_eprintf ( ""too <S2SV_blank> large <S2SV_blank> mainhdr <S2SV_blank> size\\n"" ) ; goto error ; }",0
1659,"<S2SV_ModStart> ) ; } if (! str_modes ) str_modes = malloc ( strlen ( channel -> modes ) + 1 ) ; if (! str_modes ) str_modes = malloc ( strlen ( channel -> modes ) + 1 ) ; if (! str_modes ) str_modes = weechat_strndup ( channel -> modes, strlen ( channel -> modes ) + 1, NULL, WEECHAT_STRING_SPLIT_STRIP_LEFT | WEECHAT_STRING_SPLIT_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS, 0, & argc ) ; while (! str_modes ) str_modes = malloc ( strlen ( channel -> modes ) + 1 ) ; if (! str_modes ) str_modes = weechat_strndup ( channel -> modes, strlen ( channel -> modes ) + 1, NULL, WEECHAT_STRING_SPLIT_STRIP_LEFT | WEECHAT_STRING_SPLIT_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS, 0, & argc ) ; if (! str",0
1660,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_reader <S2SV_ModEnd> decode_uniform ( vpx_reader <S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> m ) ; vpx_read_bit <S2SV_ModEnd> ( r )",0
1661,<S2SV_ModStart> ; int is_valid = ( error == GIT_OK ) <S2SV_ModStart> giterr_clear ( ) <S2SV_ModEnd> ; error =,1
1662,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1663,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> ] ) ; ++ counts -> <S2SV_ModEnd> comp_inter [ ctx",0
1664,<S2SV_ModStart> } } } <S2SV_null> <S2SV_null>,0
1665,"<S2SV_ModStart>! stream ) { <S2SV_ModEnd> fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" <S2SV_ModStart> fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModEnd> if ( prev <S2SV_ModStart> ; res = vpx_codec_enc_config_default <S2SV_ModEnd> ( global -> <S2SV_ModStart> ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO <S2SV_ModEnd> ; stream -> <S2SV_ModStart> write_webm = 1 <S2SV_ModEnd> ; } stream",0
1666,"<S2SV_ModStart> ( ndo, ""%s"", tok2str ( icmp6_opt_values, ""dnssl"", op -> nd_opt_mtu ) ) ; break ; case ND_OPT_ADV_INTERVAL : l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp, l ) ; break ; case ND_OPT_TLV_ADDR : l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp + 2, l ) ; break ; case ND_OPT_RDNSSL : l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp + 2, l ) ; break ; case ND_OPT_TLV_ADDR : l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp + 2, l ) ; break ; case ND_OPT_TLV_ADDR : l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp + 2, l ) ;",0
1667,<S2SV_ModStart> = 0 ; ( ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; if ( * re_ast ) -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY ;,0
1668,"<S2SV_ModStart> sk ) ; if (! writable ) { <S2SV_ModStart> = unix_peer_get ( sk ) ; } else { if ( unix_peer ( sk )!= sk ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; writable = 0 ; } <S2SV_ModStart> )!= sk ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; } sock_put ( other ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask <S2SV_ModEnd> ; } <S2SV_null>",0
1669,"<S2SV_ModStart> ) ) ; dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } <S2SV_ModStart> 0 ) { dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } <S2SV_ModEnd> return - 1",0
1670,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; if ( <S2SV_ModStart> -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len - A,1
1671,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1672,"<S2SV_ModStart> ; stbbr_send ( ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'stabber@localhost\'>"" <S2SV_ModEnd> ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost/mobile\'>""",1
1673,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1674,<S2SV_ModStart> = 0 ; # ifdef HAVE_PYMEM PyMem_MALLOC ( sizeof ( struct tok_state ) ) ; if ( tok -> buf == NULL ) return NULL ; # endif <S2SV_ModStart> = 0 ; # ifdef HAVE_PYMEM PyMem_MALLOC ( sizeof ( struct tok_state ) ) ; if ( tok -> fp == NULL ) { PyMem_MALLOC ( sizeof ( struct tok_state ) ) ; if ( tok -> nextprompt!= NULL ) { PyMem_MALLOC ( sizeof ( struct tok_state ) ) ; PyMem_MALLOC ( sizeof ( struct tok_state ) ) ; PyMem_MALLOC ( sizeof ( struct tok_state ) ) ; } # else PyMem_MALLOC ( sizeof ( struct tok_state ) ) ; if ( tok -> prompt == NULL ) { PyMem_MALLOC ( sizeof ( struct tok_state ) ) ; if ( tok -> prompt == NULL ) { PyMem_MALLOC ( sizeof ( struct tok_state ) ) ; PyMem_MALLOC ( sizeof ( struct tok_state ) ) ; PyMem_MALLOC ( sizeof ( struct tok_state ) ) ; },0
1675,"<S2SV_ModStart> maxBitrate ; } if ( av1 -> av1_config ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> av1_config ->",0
1676,"<S2SV_ModStart> -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1677,"<S2SV_ModStart> ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; if ( r!= - 1 ) { r = - 1 ; break ; }",0
1678,<S2SV_ModStart> maxFrameNum ) ; if ( MAX_NUM_REF_PICS <= dpbSize ) return ( MEMORY_ALLOCATION_ERROR ) ; <S2SV_ModStart> dpbSize ) ; if ( dpb -> numRefFrames > MAX_NUM_REF_PICS ) return ( MEMORY_ALLOCATION_ERROR ) ;,0
1679,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ; if ( <S2SV_ModEnd> oe_syscall_getpeername_ocall ( & <S2SV_ModStart>, addrlen_in, & addrlen_out <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> ) ; } if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; * addrlen = addrlen_out ;",0
1680,,1
1681,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
1682,"<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt ) { opt = rcu_dereference_protected ( opt -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) ; rcu_assign_pointer ( opt_space, opt ) ;",0
1683,"<S2SV_ModStart>, found, upx_success = 0, <S2SV_ModStart>, opt_size ; size_t <S2SV_ModEnd> valign, hdr_size <S2SV_ModStart>, j ; if ( ctx -> nsections > 1 ) { cli_err ( ""pe_scanpe: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> sections <S2SV_blank> found\\n"" ) ; return CL_ENULLARG ; } <S2SV_ModStart>, j ; if ( ctx -> nsections > 1 ) { cli_err ( ""pe_scanpe: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> sections\\n"" ) ; return CL_ENULLARG ; } <S2SV_ModStart>, j ; if ( ctx -> nsections > 1 ) { cli_err ( ""pe_scanpe: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> sections <S2SV_blank> found\\n"" ) ; return CL_ENULLARG ; } <S2SV_ModStart>, j ; if ( ctx -> nsections > 1 ) { cli_err ( ""pe_scanpe: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> sections <S2SV_blank> found\\n"" ) ; return CL_ENULLARG ; } <S2SV_ModStart>, j ; if ( ctx -> nsections > 1 ) { cli_err ( ""cli_scanpe: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> sections <S2SV_blank> found\\n"" ) ; return CL_ENULLARG ; }",0
1684,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ; while ( ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> ; return ( dm9000ReadReg ( DM9000_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_EPDRL ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1685,"<S2SV_ModStart> { if ( t2p -> tiff_datasize > max_striplength ) { TIFFError ( TIFF2PDF_MODULE, ""T2P_readwrite_pdf_image: <S2SV_blank> Maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> samples <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", t2p -> tiff_datasize, ( int ) ( max_striplength ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } <S2SV_ModStart> { if ( t2p -> tiff_datasize > max_striplength ) { TIFFError ( TIFF2PDF_MODULE, ""T2P_readwrite_pdf_image: <S2SV_blank> Maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> samples <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( int ) ( t2p -> tiff_datasize - max_striplength ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; }",0
1686,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
1687,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; <S2SV_ModEnd> rw = ( <S2SV_ModStart> ; tempWidth = ROUND_UP_TO ( context -> width, 8 ) ; ccl = context -> ColorLossLevel ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * context -> width ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * context -> width ; yplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * context -> width ; for ( x = 0 ; x < context -> width ; x ++ ) { switch ( context -> format ) { case PIXEL_FORMAT_BGR24 : b_val = * src ++ ; g_val = * src ++ ; r_val = * src ++ ; b_val = * src ++ ; r_val = * src ++ ; b_val = * src ++ ; a",0
1688,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int isofs_read_inode (,0
1689,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1690,<S2SV_ModStart> = 0 ; ( ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; if ( * re_ast ) -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY ;,0
1691,"<S2SV_ModStart> pcmk_ok ) { if (! private -> command. encrypted ) { <S2SV_ModStart> pcmk_ok ) { if (! private -> callback. token ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; crm_send_remote_msg ( private -> command. session, NULL, private -> callback. encrypted ) ; free_xml ( hello ) ; } else { crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( private -> command. session, NULL, private -> callback. token ) ; } } else { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, 0, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( private -> command. session, NULL, private -> callback. encrypted ) ; free_xml ( hello ) ; }",0
1692,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
1693,"<S2SV_ModStart> 3 } ; int <S2SV_ModEnd> sr = 0 <S2SV_ModStart> bsize ] ; const int new_mv_mode_penalty = MIN ( cpi -> common. width, cpi -> common. height ) ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( sr < MAX_MVSEARCH_STEPS ) ++ sr ; <S2SV_ModEnd> v_fn_ptr. vf <S2SV_ModStart> bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_diamond_search_sad ( x, & ref_mv_full, & tmp_mv, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> nmvjointcost, ref_mv ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v",0
1694,<S2SV_ModStart> ntreg_header ) ; if ( h -> size == 0 ) goto error ;,0
1695,"<S2SV_ModStart> ; if ( merge_merge_conditions ( parent, child, merged ) == APLOG_OK ) { ap_log_perror ( APLOG_MARK, APLOG_ERROR | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", _parent, _child, merged ) ; return NULL ; } if ( merge_merge_conditions ( child, parent, merged ) == APLOG_OK ) { ap_log_perror ( APLOG_MARK, APLOG_ERROR | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", _parent, _child, merged ) ; return NULL ; } if ( merge_merge_conditions ( parent, child, merged ) == APLOG_OK ) { ap_log_perror ( APLOG_MARK, APLOG_ERROR | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", _parent, _child, merged ) ; return NULL ; }",0
1696,"<S2SV_ModStart> ( used_address && msg_sys -> msg_name && <S2SV_ModStart> -> name, msg_sys <S2SV_ModEnd> -> msg_name, <S2SV_ModStart> -> msg_namelen ; if ( msg_sys -> msg_name ) <S2SV_ModStart> -> name, msg_sys <S2SV_ModEnd> -> msg_name,",1
1697,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
1698,"<S2SV_ModStart>, one, number_pixels, <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; number_pixels = ( ssize_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_planes_filled, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes_filled, ( size_t ) MagickMax ( number_planes_filled, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes_filled, ( size_t ) MagickMax ( number_",0
1699,"<S2SV_ModStart>!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )",0
1700,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1701,"<S2SV_ModStart> user_data ) { int rc ; <S2SV_ModStart> num_clients ) ; rc = g_hash_table_remove ( client_list, client -> id ) ; if ( rc!= 0 ) { crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> the <S2SV_blank> hashtable"", client -> name ) ; crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> hashtable"", client -> name ) ; } <S2SV_ModStart> user ) ; g_hash_table_remove ( client_list, client -> id ) ; g_hash_table_remove ( client_list, client -> name ) ; g_hash_table_remove ( client_list, client -> user ) ; g_hash_table_remove ( client_list, client -> id ) ; free ( client <S2SV_ModEnd> ) ; crm_trace <S2SV_ModStart> client ) ; g_hash_table_remove ( client_list, client -> id ) ; free ( client_list ) ; g_hash_table_remove ( client_list, client -> name ) ; g_hash_table_remove ( client_list, client -> user ) ; g_hash_table_remove ( client_list, client ->",0
1702,"<S2SV_ModStart> * uv ; luaL_checkstack ( g ) ; <S2SV_ModStart> p = thread -> twups ; thread -> twups = NULL ; for ( uv = thread -> openupval ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; markvalue ( g, uv -> v ) ; } <S2SV_ModEnd> } } return",0
1703,<S2SV_ModStart> size ) ; <S2SV_ModEnd> px -> ft,0
1704,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1705,<S2SV_ModStart> ; if ( new -> d_inode && new -> d_inode -> i_uid == old -> d_inode -> i_uid ) { if ( new -> d_inode -> i_uid == old -> d_inode -> i_uid ) { err = - EPERM ; goto out ; } else { if ( new -> d_inode -> i_uid == old -> d_inode -> i_uid && new -> d_inode -> i_uid == old -> d_inode -> i_uid && new -> d_inode -> i_uid!= new -> d_inode -> i_uid ) { if ( new -> d_inode -> i_uid == old -> d_inode -> i_uid ) { err = - EPERM ; goto out ; } } else { if ( new -> d_inode -> i_uid == old -> d_inode -> i_uid && new -> d_inode -> i_uid!= old -> d_inode -> i_uid && new -> d_inode -> i_uid!= new -> d_inode -> i_uid ) { err = - EPER,0
