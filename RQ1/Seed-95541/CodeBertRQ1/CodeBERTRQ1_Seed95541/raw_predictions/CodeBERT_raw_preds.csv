,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; if ( n2size < 1 ) <S2SV_ModEnd> { applog (,0
1,,0
2,<S2SV_ModStart> mmap_req ) ; if (! ret ) return - EOPNOTSUPP ;,0
3,"<S2SV_ModStart> case SIOCYAMGCFG : memset ( & yi, 0, sizeof ( yi ) ) ;",1
4,<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ),0
5,"<S2SV_ModStart>, offset ; if ( avio_feof ( f ) ) { index -> item_count = 0 ; av_freep ( & index -> items ) ; return AVERROR_INVALIDDATA ; }",1
6,<S2SV_ModStart> * tpg ; u16 <S2SV_ModEnd> tpgt ; int <S2SV_ModStart> ; if ( kstrtou16 <S2SV_ModEnd> ( name + <S2SV_ModStart> ) || tpgt >= VHOST_SCSI_MAX_TARGET <S2SV_ModEnd> ) return ERR_PTR,1
7,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
8,"<S2SV_ModStart> { u32 data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; kvm_read_guest_cached ( vcpu -> kvm, & <S2SV_ModEnd> vcpu -> arch <S2SV_ModStart>. apic -> vapic_cache, & data, sizeof ( u32 ) <S2SV_ModEnd> ) ; apic_set_tpr",1
9,"<S2SV_ModStart> src ) ; memset ( dst, 0, sizeof ( dst ) ) ;",0
10,<S2SV_ModStart> c ) { <S2SV_ModEnd> return c ;,0
11,"<S2SV_ModStart> ( sb, KERN_ERR,",1
12,"<S2SV_ModStart> ipv6_select_ident ( fptr, ( struct rt6_info * ) skb_dst ( skb )",1
13,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, regs",0
14,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; },0
15,,0
16,<S2SV_ModStart> == 0 ) sanitize_dead_code ( env ) ; if ( ret == 0 ),1
17,<S2SV_ModStart> uint64_t channel_chunk ; if (! config -> num_channels ) return - 1 ;,0
18,<S2SV_ModStart> = - EIO ; <S2SV_ModEnd> err = 0,0
19,<S2SV_ModStart> ; if ( cs!= UINT64_MAX / 20 ) break ; if (,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int seg_err_frame_t <S2SV_ModStart> * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const cm, int * cm, int mi_row_col, int mi_col, int mi_col, int64_t * lf_t <S2SV_ModEnd> ; int64_t <S2SV_ModStart> ; int64_t res ; int64_t <S2SV_ModEnd> ; int64_t <S2SV_ModStart> = 0 ; int64_t total_thresh_threshold ( cm -> avg_frame_frame_bandwidth, cm -> avg_frame_frame_thresh ) ; int64_t <S2SV_ModEnd> ; int64_t <S2SV_ModStart> ; if ( rc -> avg_frame_frame_bandwidth ) { avg_frame_frame_bandwidth = vp9_get_frame_frame ( cm, cm -> avg_frame_bandwidth, oxcf, cm -> avg_frame_frame_bandwidth, oxcf, <S2SV_ModStart> ; if ( rc -> avg_frame_frame_frame_frame_bandwidth ) { vp9_get_",0
21,"<S2SV_ModStart> len = L_MAXLONG <S2SV_ModEnd> ( L,",0
22,"<S2SV_ModStart> void write_context ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 1 ) { memset <S2SV_ModEnd> ( w,",0
23,"<S2SV_ModStart>, 1 )",0
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (,1
25,<S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> == 256 ) { <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; },0
26,<S2SV_ModStart> char * fmtname ; int debug <S2SV_ModStart> = 0 ; debug = 0 ;,0
27,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",0
28,,0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * <S2SV_ModEnd> alt ; alt <S2SV_ModStart> ; if (! alt ) return - ENODEV <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart> ( udev, alt -> <S2SV_ModEnd> desc. bInterfaceNumber <S2SV_ModStart> bInterfaceNumber, alt -> desc. bAlternateSetting",1
30,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> case 2 : if ( tolen == 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 2 : if ( tolen == 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 2 : if ( tolen == 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> += 3 ; tolen -= 2 ; <S2SV_ModStart> case 5 : return - ENAMETOOLONG ; <S2SV_ModStart> = '/' ; tolen = tolen ; tolen -- ; <S2SV_ModStart> case 2 : if ( tolen == 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> += 3 ; tolen -= 3 ; <S2SV_ModStart> case 5 : return - ENAMETOOLONG ; <S2SV_ModStart> case 5 : return 0 ;,0
31,<S2SV_ModStart> == - 1 || class == CLIENT_TYPE_MASTER ),0
32,<S2SV_ModStart> unsigned long flags ; if ( qid > NVMET_NR_QUEUES ) return NULL,1
33,<S2SV_ModStart> result ) ; <S2SV_ModEnd> return - EINVAL,0
34,<S2SV_ModStart> < 1 || vstart + vdaux < vstart <S2SV_ModEnd> ) { sdb_free,1
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> keyring_keyring (,0
36,<S2SV_ModStart> scsi_context ( 0,0
37,"<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if ( addr -> l2tp_family!= AF_INET <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> ret = - <S2SV_ModStart> ( sk ) ; if (! sock_flag ( sk, SOCK_ZAPPED ) ) goto out",1
38,<S2SV_ModStart> <S2SV_null> static unsigned long <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> ) { unsigned long <S2SV_ModEnd> max = 0 <S2SV_ModStart> ( ( - 1UL <S2SV_ModEnd> ) & STACK_RND_MASK,1
39,"<S2SV_ModStart>, _ ( ""_Cancel"" ), GTK_RESPONSE_OK <S2SV_ModEnd> ) ; }",0
40,<S2SV_ModStart> char * t <S2SV_ModEnd> ; if (,0
41,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
42,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x51 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> transfer <S2SV_blank> transfer <S2SV_blank> failed."" ) ; mutex_unlock ( & d -> data_mutex ) ; state -> data [ 1 ] = 0x51 <S2SV_ModEnd> ; } <S2SV_null>",0
43,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
44,<S2SV_ModStart> } } } fix_google_param ( google_out ) ; fix_google_param ( google_sig ) ; fix_google_param ( google_param,0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
46,"<S2SV_ModStart> tsample_t s ; uint16 bps = 0 ; ( void ) TIFFGetField ( in, TIFFTAG_BITSPERSAMPLE, & bps ) ; if ( bps!= 8 ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can <S2SV_blank> only <S2SV_blank> handle <S2SV_blank> BitsPerSample=8 <S2SV_blank> in <S2SV_blank> %s"", ""cpContig2SeparateByRow"" ) ; return 0 ; }",1
47,"<S2SV_ModStart> ) ; struct hugepage_subpool * spool = ( struct hugepage_subpool <S2SV_ModEnd> * ) page_private <S2SV_ModStart> hugetlb_lock ) ; hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, 1 )",1
48,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) { return AVERROR_EOF ; } if (,1
49,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return try_get_page <S2SV_ModEnd> ( buf ->,1
51,"<S2SV_ModStart>, cp, ep2, map, nmap ) ; } else cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> < ep2 ) <S2SV_ModEnd> ND_PRINT ( (",1
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
53,<S2SV_ModStart> ) ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd ) ),0
54,<S2SV_ModStart> config -> pm_max_requests ; fpm_globals. listening_socket = dup ( wp -> listening_socket ),1
55,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> k_frame_stats ( VP9_COMP <S2SV_ModStart> * cpi <S2SV_ModEnd> ) { const VP9EncoderConfig <S2SV_ModStart> this_frame_frame_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const this_frame = 0.0 <S2SV_ModEnd> ; * pcnt_frame <S2SV_ModStart> ; * const FIRSTPASS_STATS * const this_frame_frame = 0.0 <S2SV_ModEnd> ; * pcnt_motion_frame_in_accumulator = 0.0 <S2SV_ModStart> this_frame_frame_rate = 0.0 <S2SV_ModEnd> ; * pcnt_motion_ref_frame <S2SV_ModStart> this_frame_frame_rate = 0.0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> this_frame_frame_frame_to_accumulator!= BPFACTOR <S2SV_ModEnd> ) { const double <S2SV_ModStart> this_frame_frame_frame_rate = 0.0 <S2SV_ModEnd> ; * pcnt_inter = <S2SV_ModStart> this_frame_frame_rate ( this_frame, pcnt_motion_motion_motion <S2SV_ModEnd> ) ; this_frame",0
56,<S2SV_ModStart> 0 ; } err = handle -> h_err ; <S2SV_ModStart> h_transaction ) { rc <S2SV_ModEnd> = jbd2_journal_stop ( <S2SV_ModStart> ) ; return err? err : rc <S2SV_ModEnd> ; } sb <S2SV_ModStart> t_journal -> j_private <S2SV_ModEnd> ; rc =,1
57,<S2SV_ModStart> -> flags ; if ( flags & EXT4_GET_BLOCKS2 < <S2SV_ModEnd> ) { ret,0
58,<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = args -> valuelen ;,1
59,"<S2SV_ModStart> crypto, type <S2SV_ModEnd> ) ; if",0
60,,0
61,"<S2SV_ModStart> ) { return skip ( c, body_size + 2 <S2SV_ModEnd>, MSG_JOB_TOO_BIG )",1
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,<S2SV_ModStart> == 12 && ( <S2SV_ModStart> flags & TH_SYN ),1
64,"<S2SV_ModStart> -> ipc_socket ; int procfd ; <S2SV_ModStart> { ERROR ( ""Error <S2SV_blank> from <S2SV_blank> initialization <S2SV_blank> %s"", strerror ( errror ( errno ) <S2SV_ModEnd> ) ; shutdown <S2SV_ModStart> { ERROR ( ""Error <S2SV_blank> to <S2SV_blank> initial <S2SV_blank> initial <S2SV_blank> is <S2SV_blank> initializing <S2SV_blank> initial <S2SV_blank> %s."", strerror ( errno ) <S2SV_ModEnd> ) ; shutdown <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
65,<S2SV_ModStart> return 0 ; if ( len < PKT2SV_null> < 0 ) return GIT_OK <S2SV_ModEnd> ; len =,0
66,<S2SV_ModStart> ; } } if (! data_size ) return false ;,0
67,<S2SV_ModStart> NULL ; } sas_probe_devices ( port ) ;,1
68,<S2SV_ModStart> 0 ) { if ( image -> colors < tga_info. colormap_index ) image -> colors = tga_info. colormap_index ;,1
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> ENOBUFS ; } memset ( & line, 0, sizeof ( line ) ) ;",1
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_blk_ioctl ( bd, cmd ) ; if ( ret < 0 ) return ret ;",1
72,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> / 4 ; if (! Stream_GetRemainingLength ( s ) ) return FALSE ; <S2SV_ModStart>, 0 ) ; if (! <S2SV_ModStart>, s ) ) return FALSE ;",0
73,<S2SV_ModStart> * ureq ; unsigned <S2SV_ModStart> return - EINVAL,0
74,"<S2SV_ModStart> int m ; if ( n < 0 ) { jas_deprecated ( ""negative <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_pad"" ) ; }",1
75,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ) ) ; },0
76,<S2SV_ModStart> av_log ( mxf -> fc,1
77,"<S2SV_ModStart> 1, path, rootfs",0
78,<S2SV_ModStart> + 10 ; if ( psf -> fileoffset < psf -> filelength ) { <S2SV_ModStart> ; } ; } ;,1
79,"<S2SV_ModStart> -> header_len ; ND_TCHECK ( p [ 0 ] ) ; <S2SV_ModStart> case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ], 2 ) ; <S2SV_ModStart> case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ], 2 ) ;",0
80,<S2SV_ModStart> NF_STOLEN ; return err == 0? NF_ACCEPT : NF_DROP <S2SV_ModEnd> ; } <S2SV_null>,1
81,"<S2SV_ModStart> * up ; int klen, ulen ; <S2SV_ModStart> rta ) ; ulen = <S2SV_ModEnd> xfrm_replay_state_esn_len ( up <S2SV_ModStart> ( up ) ; memcpy ( p, 0, sizeof ( * up ) ; klen ) ; <S2SV_ModStart> ; pp = klen <S2SV_ModEnd> ; } <",0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> ; } } io -> io_cleanup = io -> io_cleanup ;,0
83,,0
84,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
85,"<S2SV_ModStart> ( buf = jas_alloc3 ( bufsize, numcols <S2SV_ModEnd>, sizeof (",1
86,<S2SV_ModStart>. cfg ; ( void ) cfg ;,0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> gso. type ) ; netbk_fatal_tx_err ( vif",1
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void *",0
89,"<S2SV_ModStart> xfr_cmd, fname <S2SV_ModEnd> ) ; free",1
90,<S2SV_ModStart> mixer ) { snd_usb_mixer_disconnect ( mixer ) ;,1
91,<S2SV_ModStart> ) { struct packet_rollover * rollover = NULL ; struct <S2SV_ModStart> EINVAL ; } err = - EINVAL ; mutex_lock ( & fanout_mutex ) ; err = - EINVAL ; err = - EINVAL ; if ( rollover -> rollover!= NULL ) { err = - ENOMEM ; goto out ; } <S2SV_ModStart> ) ) { err = - EINVAL ; goto out <S2SV_ModEnd> rollover -> rollover <S2SV_ModStart> atomic_long_long_long_long ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_long_long_mutex ) ; err = rollover -> rollover ; } <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num,0
92,<S2SV_ModStart> ipv6_pinfo ) ) ; newnp -> ipv6_mc_list = NULL ; newnp -> ipv6_ac_list = NULL ; newnp -> ipv6_fl_list = NULL,1
93,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } } free,0
94,<S2SV_ModStart> void usage_exit ( void,0
95,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
96,,0
97,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
98,<S2SV_ModStart> } if (! strlen ( page <S2SV_ModEnd> ) ) {,0
99,"<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { ret = <S2SV_ModStart> inode, EXT4_STATE_DIO_UNWRITTEN ) ; if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result <S2SV_ModStart> } if ( ( flags & EXT4_GET_BLOCKS_CONVERT ) <S2SV_ModEnd> ) { ret",1
100,<S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ;,1
101,"<S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, cgroup ) ) { ret = - ENOENT ; goto out ; } if (!",1
102,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> vp9_variance8 ( void <S2SV_ModStart> vp9_variance8 ) { vpx_reader_convert_variance8 ( void ) ybf -> y_crop_width ; vpx_y8x8 <S2SV_ModEnd> ( ybf -> <S2SV_ModStart> -> y_crop_width, ybf -> y_width, yv12_width, <S2SV_ModStart> -> y_width, yv12, y_crop_width, yv12 ) ; vpx_y8 <S2SV_ModEnd> ( yv12, <S2SV_ModStart> -> y_crop_width, yv12 ) ; vpx_y8x8 <S2SV_ModEnd> ( yv12,",0
103,"<S2SV_ModStart> ptr ) { struct floppy_raw_cmd cmd = * ptr ; cmd. next = NULL ; cmd. kernel_data = NULL ; <S2SV_ModStart> ( param, & cmd <S2SV_ModEnd>, sizeof ( <S2SV_ModStart>, sizeof ( cmd <S2SV_ModEnd> ) ) ;",1
104,"<S2SV_ModStart> : if (! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) bprm -> per_clear |= PER_CLEAR_ON_SETID ; if (",1
105,"<S2SV_ModStart> bh ) { <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; struct mb2_cache_entry * bh ; <S2SV_ModStart> error ; } <S2SV_ModEnd> ea_b2_cache_entry ( bh <S2SV_ModStart> ) ; } <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> bh -> bh, bh <S2SV_ModEnd> ) ; if",0
106,<S2SV_ModStart> ) { return FALSE <S2SV_ModEnd> ; } if,0
107,<S2SV_ModStart> tf = ( <S2SV_ModEnd> luaY_parser ) (,1
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * * opt = <S2SV_ModStart> ( opt -> opt.,0
110,"<S2SV_ModStart> ; dl = kzalloc <S2SV_ModEnd> ( size,",1
111,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
112,,0
113,"<S2SV_ModStart> ; int n <S2SV_ModEnd> ; skb -> <S2SV_ModStart> rose_facilities_struct ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> data + ROSE_CALL_REQ_FACILITIES_OFF, skb -> len - ROSE_CALL_REQ_FACILITIES_OFF, <S2SV_ModEnd> & facilities )",1
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,"<S2SV_ModStart> ( ndo, ""%s"",",0
116,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode",0
117,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; int ret <S2SV_ModStart> ) ; } o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
118,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",1
119,"<S2SV_ModStart> == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> is <S2SV_blank> absolute"" ) ; return ( ARCHIVE_FAILED ) ; } separator = * src ++ ; } <S2SV_ModEnd> for ( ;",1
120,,0
121,"<S2SV_ModStart> inmem )? jas_stream_memopen2 <S2SV_ModEnd> ( 0,",0
122,<S2SV_ModStart> s ) { if ( s == 0 ) return ( ( void * ) NULL ) ;,1
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! ib_safe_file_access ( fp ) ) ) return - EACCES ; if (,1
124,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
125,<S2SV_ModStart> ( peer ) peer = maybe_get_net <S2SV_ModEnd> ( peer ),1
126,<S2SV_ModStart> } while ( ( i < ( int ) header_buf_used ) && ( <S2SV_ModStart> ] == '\\n' ),1
127,<S2SV_ModStart> m_family ) ; if ( proto == LLDP_MGMT_ADDR_NONE ) continue <S2SV_ModEnd> ; if (,1
128,"<S2SV_ModStart> 1 ), length + 1",0
129,<S2SV_ModStart> default_auto_asconf ) { spin_lock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ; <S2SV_ModStart> do_auto_asconf = 1 ; spin_unlock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) <S2SV_ModStart> ; } else { <S2SV_ModStart> = 0 ; },1
130,"<S2SV_ModStart> GetBitContext * gb, int * profile, int * level ) { * <S2SV_ModEnd> profile = get_bits <S2SV_ModStart> 4 ) ; * <S2SV_ModEnd> level = get_bits <S2SV_ModStart> ; if ( * <S2SV_ModEnd> profile == 0 <S2SV_ModStart> == 0 && * <S2SV_ModEnd> level == 8 <S2SV_ModStart> 8 ) { * <S2SV_ModEnd> level = 0",1
131,"<S2SV_ModStart> write_wq ( size, UINT32_MAXSIZE <S2SV_ModEnd> ) ; size <S2SV_ModStart> ; if (! head <S2SV_ModEnd> ) ) return",0
132,<S2SV_ModStart> rule ) ; if (! entry -> lsm [ lsm_rule ]. rule ) return - EINVAL ;,1
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,,0
136,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> hdrlen ( struct <S2SV_ModStart> * opt = sizeof ( struct ihdr ) <S2SV_ModEnd> ; int len <S2SV_ModStart> - EINVAL ; int len = sizeof ( attrhdr ) ; if ( len < 1 ) return - EINVAL,0
137,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,1
138,<S2SV_ModStart> ; while ( ( i < to_read ) && <S2SV_ModStart>!= 0 ) <S2SV_ModEnd> ) { i,1
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,<S2SV_ModStart> [ plane ] && in -> linesize [ plane ],1
141,"<S2SV_ModStart> ( szFileName, pszFileName, <S2SV_ModStart> ) - 5 <S2SV_ModEnd> ) ; }",1
142,<S2SV_ModStart> == 0 ) return (,0
143,<S2SV_ModStart> if ( q < p || q,0
144,"<S2SV_ModStart> __be32 new_saddr ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. srr ) daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",1
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,,0
147,"<S2SV_ModStart> ( addr, size <S2SV_ModEnd> ) ; if",0
148,<S2SV_ModStart> <S2SV_null> <S2SV_null> static long <S2SV_ModEnd> read_lock (,0
149,"<S2SV_ModStart>, '/' ) ; if ( ptr == NULL ) return ( ENOENT ) ; ptr ++ <S2SV_ModEnd> ; rw_exit (",1
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; if ( flags & EXT4_GET_BLOCKS_CONVERT ) split_flag |= EXT4_EXT_DATA_VALID2 ;,1
151,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode",0
152,<S2SV_ModStart> } else { if (,0
153,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), & final ) ; rcu_read_unlock ( <S2SV_ModEnd> ) ; dst",1
154,<S2SV_ModStart> = 0.0 ; uint32 nstrips = 0 ; uint16 <S2SV_ModEnd> planar = 0,0
155,<S2SV_ModStart> arg ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( arg ) { if (! use_arg ) { return VPX_CODEC_ERROR ; } else { <S2SV_ModStart> goto fail_arg ; },0
156,<S2SV_ModStart> options. disable_forwarding ||! use_privsep,1
157,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
158,"<S2SV_ModStart> ) ; } if ( ( ( MagickSizeType ) image -> columns * image -> rows ) > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",1
159,"<S2SV_ModStart> errout ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ""xxxx"" ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart> -> gr_ctx. length = 4 <S2SV_ModEnd> ; gr ->",1
160,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; <S2SV_ModStart> -> i_data, ext_size ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size <S2SV_ModEnd> ) ; neh",1
161,<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> ) ) return 1 <S2SV_ModEnd> ; } <S2SV_null>,0
162,<S2SV_ModStart> ; int ret ; if ( current_chrooted ( ) ) return - EPERM,1
163,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
164,<S2SV_ModStart> c -> nreslevels <= <S2SV_ModEnd> s -> reduction_factor,0
165,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
166,<S2SV_ModStart> ; bool is_drop_n_account = false ; bool do_vnet <S2SV_ModStart> < 0 ) { <S2SV_ModStart> = 0 ; do_vnet = false ; do_vnet <S2SV_ModEnd> ; if (,0
167,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> sctp_auth_asoc_init_active_key ( asoc,1
168,<S2SV_ModStart> return false ; if ( ndp_msg_type_info ( msg_type ) -> addrto_validate ) return ndp_msg_type_info ( msg_type ) -> addrto_validate ( & msg -> addrto ) ; else,1
169,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * procfd <S2SV_ModStart> ; int error ( <S2SV_ModEnd> ""Failed <S2SV_blank> to <S2SV_blank> \'%s\n"", <S2SV_ModStart> return - 1 ; char * err = - 1 ; if ( lxc0 == - 1 ) { if ( lxc0 == - 1 ) { ret = - 1 ; goto out ; } <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> \'\\n"" ) ; ret = - EIO ; goto exit ; } ret = <S2SV_ModEnd> ; } <S2SV_null>",0
170,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
171,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
172,<S2SV_ModStart> -> rc ; TWO_PASS <S2SV_ModEnd> * const twopass,0
173,"<S2SV_ModStart> } num ++ ; if ( num > MaxAllocSize / ITEMSIZE ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> levels <S2SV_blank> (%d)"", num, ( MaxAllocSize / ITEMSIZE ) ) ) ) ) ) ;",0
174,"<S2SV_ModStart> error ; struct mb2_cache * ext4_mb_cache = ext4_mb_cache * ce ; struct mb2_cache * ext4_mb_cache <S2SV_ModStart> ) { struct mb2_cache * ext4_mb_cache = NULL <S2SV_ModEnd> ; struct <S2SV_ModStart> ) { struct mb2_cache_entry_mb_cache = le32_to_cpu ( mb2_cache <S2SV_ModEnd> * ext4_mb_cache <S2SV_ModStart> ( ext4_mb_cache, hash, bh -> e_blocknr <S2SV_ModEnd> ) ; if",0
175,"<S2SV_ModStart> { gint64 offset <S2SV_ModEnd> ; char line <S2SV_ModStart> = offset ; return parse_cosine_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> -> phdr, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> wth -> frame_buffer, line",1
176,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
177,<S2SV_ModStart> if ( left == 0 && extend ) return 0 ; if ( left,1
178,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; },0
179,"<S2SV_ModStart> ) / 3 ) ThrowReaderException ( CorruptImageError, ""InvalidColormapIndex"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries",0
180,"<S2SV_ModStart> - ENOMEM ; * ( ( struct vbg_ioctl_hdr * ) buf ) = hdr ; <S2SV_ModStart> copy_from_user ( buf + sizeof ( hdr ) <S2SV_ModStart> * ) arg + sizeof ( hdr ), hdr. size_in - sizeof ( hdr ) <S2SV_ModEnd> ) ) {",1
181,"<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( buf = jas_alloc3 <S2SV_ModEnd> ( bufsize, <S2SV_ModStart> ( bufsize, JPC_QMFB_COLGRPSIZE, <S2SV_ModStart> 2 ) { hstartrow <S2SV_ModEnd> = ( numrows <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; n = <S2SV_ModStart> & a [ hstartrow <S2SV_ModEnd> * stride ]",1
182,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
183,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
184,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_mb_cache ) { ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ; sbi -> s_mb_cache = NULL ; } <S2SV_ModEnd> if (!,1
185,<S2SV_ModStart> intf -> dev_err ; usb_free ( interface -> dev ) ;,0
186,"<S2SV_ModStart> } if ( safe_calloc <S2SV_ModEnd> ( pid,",0
187,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) <S2SV_ModStart> ci_parent ) ; else return NULL ;,1
188,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { unsigned int",0
189,<S2SV_ModStart> ( pb ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA,1
190,<S2SV_ModStart> if ( q < p || q,1
191,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = &,1
192,<S2SV_ModStart> * dir ; <S2SV_ModEnd> fd = dir,0
193,<S2SV_ModStart> prev ) ; n -> mounts += n -> pending_mounts ; n -> pending_mounts = 0 ;,1
194,"<S2SV_ModStart> ; savesegment ( fs, fsindex ) ; savesegment ( gs, gsindex ) ; load_TLS ( next, cpu ) ; arch_end_context_switch ( next_p ) ; savesegment ( <S2SV_ModStart> next -> ds <S2SV_ModEnd> ) ; if",1
195,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
196,,0
197,<S2SV_ModStart> 1u << DB_VECTOR ) | ( 1u << AC_VECTOR,1
198,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> 1 ] ; u_int stringlen ; stringlen = len ; if ( stringlen > NFSX_V3FHMAX ) stringlen = NFSX_V3FHMAX ; <S2SV_ModStart>, sfsname, stringlen <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ; temp [ stringlen <S2SV_ModEnd> ] = '\\0'",1
199,"<S2SV_ModStart> unsigned int flags, struct rt6_info * rt <S2SV_ModStart> ( & fhdr, rt",1
200,<S2SV_ModStart> ( res ) goto err_add_port <S2SV_ModEnd> ; res =,0
201,<S2SV_ModStart> ( cmd ) <S2SV_ModEnd> return 0 ;,0
202,"<S2SV_ModStart> * dst, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> VP9_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> flags & VP9_COMMON * src -> flags & VP9_HIGHBITDEPTH ) { vpx_write_bit <S2SV_ModEnd> ( dst, <S2SV_ModStart> d, dst, dst, PREDICTION_MODE <S2SV_ModEnd> d -> cur_buf, <S2SV_ModStart>, VP9_HIGHBITDEPTH <S2SV_ModEnd> ) ; }",0
203,<S2SV_ModStart> p ++ ) ; if ( ( void * ) p > head -> iov_base + head -> iov_len ) return 0,1
204,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { return assign_eip_far ( ctxt, dst, ctxt -> mode == X86EMUL_MODE_PROT64 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
205,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
206,"<S2SV_ModStart> ; remaining = tvb_reported_length_remaining <S2SV_ModEnd> ( tvb,",1
207,"<S2SV_ModStart> * i_inode_block_uninit ( i_io <S2SV_ModStart> ( io ), <S2SV_ModEnd> ) ; }",0
208,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
209,<S2SV_ModStart> |= malloc ( strlen ( str ) <S2SV_ModEnd> ) ; if,0
210,<S2SV_ModStart> ; if ( pmc_overflow ( val ) <S2SV_ModEnd> ) write_pmc (,1
211,"<S2SV_ModStart> ( * b + len, * avail - len <S2SV_ModEnd>, nl )",1
212,,0
213,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
214,"<S2SV_ModStart> string ) ) i ++, <S2SV_ModEnd> c = c",0
215,"<S2SV_ModStart> == 0 ) mark_key_instantiated ( key, 0 <S2SV_ModEnd> ) ; up_write",1
216,<S2SV_ModStart> <= * len && plen > 0,1
217,<S2SV_ModStart> ; args. rmtvaluelen = valuelen ; args.,1
218,<S2SV_ModStart> ; if ( <S2SV_ModEnd> timeout == NULL <S2SV_ModStart> ; if ( compat_get_timespec <S2SV_ModEnd> ( & ktspec,0
219,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
220,<S2SV_ModStart> ndev ) ; <S2SV_ModEnd> assert ( skb <S2SV_ModStart> q_num ) ; return <S2SV_ModEnd> hns_nic_net_xmit_hw ( ndev <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
221,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
222,<S2SV_ModStart> } if ( <S2SV_ModEnd> udp_specified && settings,1
223,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
224,<S2SV_ModStart> x ) ; <S2SV_ModEnd> } else {,0
225,<S2SV_ModStart> found = 0 <S2SV_ModEnd> ; const char <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( found,1
226,<S2SV_ModStart> event -> <S2SV_null> <S2SV_null> <S2SV_null>,0
227,"<S2SV_ModStart> bool new_idmap_permitted ( const struct file * file, <S2SV_ModStart>, cap_setid ) && file_ns_capable ( file, ns -> parent, cap_setid )",1
228,<S2SV_ModStart> j ++ ) { if ( a -> type == szMAPI_BINARY ) <S2SV_ModStart> ) ; } },1
229,<S2SV_ModStart> - ENOMEM ; goto error <S2SV_ModEnd> ; } ret <S2SV_ModStart> ) ; } kfree ( buffer ) ;,0
230,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; ptr ++ ; length -= 2 ; length -= 2 ; if ( length < 2 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; }",0
231,"<S2SV_ModStart> princ ) ; success = data_eq_string ( * realm, <S2SV_ModEnd> handle -> params <S2SV_ModStart> params. realm ) && data_eq_string ( * c1, ""kadmin"" ) &&! data_eq_string ( * c2, ""history"" ) ; <S2SV_ModEnd> fail_princ : if",1
232,<S2SV_ModStart> ; if ( shader_rec_offset < args -> bin_cl_size ||,1
233,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
234,<S2SV_ModStart> vma -> vm_file ) ; down_read ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModStart> ; out : up_read ( & EXT4_I ( inode ) -> i_mmap_sem ) ;,1
235,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
236,<S2SV_ModStart> arg ) { char ch = * arg ; switch ( ch <S2SV_ModEnd> ) { case <S2SV_ModStart> ';' : case '=' : case <S2SV_ModStart> b ++ = ch <S2SV_ModEnd> ; break ;,1
237,"<S2SV_ModStart> && nmap ) <S2SV_ModEnd> cp = ikev1_attrmap_print <S2SV_ModStart>, cp, ep2, map, nmap ) ; else cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> < ep2 ) <S2SV_ModEnd> ND_PRINT ( (",1
238,<S2SV_ModStart> } <S2SV_null> <S2SV_null> static void,0
239,<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) < skb -> head +,1
240,<S2SV_ModStart> ( ) ; # endif,0
241,"<S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val *",0
242,<S2SV_ModStart> & RCV_SHUTDOWN ) return 0 ; <S2SV_ModEnd> return err ; <S2SV_ModStart> msg_namelen ) ; <S2SV_ModEnd> } skb_free_datagram (,1
243,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
244,"<S2SV_ModStart> plane ] ; # if CONFIG_VP9_HIGHBITDEPTH if ( x -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vpx_highbd_buffer_stride <S2SV_ModEnd> ( dst,",0
245,"<S2SV_ModStart>, j ; * md_out = NULL ; md = calloc ( 1, sizeof ( <S2SV_ModEnd> * md ) <S2SV_ModStart> goto cleanup ; ret = rfc2253_name <S2SV_ModEnd> ( X509_get_subject_name ( <S2SV_ModStart> md -> subject_dn ), & <S2SV_ModEnd> md -> subject_dn",0
246,"<S2SV_ModStart> out_free ; } kvm_iommu_unmap_pages ( kvm, & old ) ;",0
247,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ru,1
248,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
249,"<S2SV_ModStart> * j ; unsigned int length_left ; u_int length_left ; length_left = length_left ( sizeof ( struct rip6 ) - sizeof ( struct rip6 ) - sizeof ( struct rip6 ) - sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; length_left = length_left <S2SV_ModEnd> ; if ( <S2SV_ModStart> ni )!= length_left <S2SV_ModEnd> ) goto <S2SV_ModStart> ni ) { ND_TCHECK ( rp [ j ], length <S2SV_ModEnd> ) ; length <S2SV_ModStart> ni ) ; length_left <S2SV_ModEnd> = sizeof ( <S2SV_ModStart> ni )!= length_left <S2SV_ModEnd> ) ; length_left <S2SV_ModStart> ni ) { ND_TCHECK ( * <S2SV_ModStart> ni ) ; length_left <S2SV_ModEnd> = sizeof ( <S2SV_ModStart> ni )!= length_left <S2SV_ModEnd> ) ; length_left <S2SV_ModStart> ni ) { ND_TCHECK ( <S2SV_ModEnd> ) ; break",0
250,<S2SV_ModStart> < 0 ) goto error ; <S2SV_ModEnd> goto set ;,1
251,<S2SV_ModStart> ) { memcpy <S2SV_ModEnd> ( cpi ->,0
252,"<S2SV_ModStart> argc ++ ; retval = bprm_change_interp ( iname, bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> ; interp_file =",1
253,<S2SV_ModStart> ; int iSrc <S2SV_ModEnd> ; if (,0
254,<S2SV_ModStart> user ) ; <S2SV_ModEnd> return 1 ;,0
255,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".cfg\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n""",1
256,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
257,"<S2SV_ModStart> ( mobj ) { size_t granularity = BIT ( tee_mm_sec_ddr. shift ) ; <S2SV_ModStart>, 0, ROUNDUP ( size, granularity ) ) ; } <S2SV_ModEnd> return mobj ;",1
258,<S2SV_ModStart> -> it_overrun += <S2SV_ModEnd> ; if (,0
259,,0
260,<S2SV_ModStart> ; if (! cur_frame <S2SV_ModEnd> ( & src,0
261,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> vp9_pick_mode ( VP9_COMMON <S2SV_ModStart> * xd, <S2SV_ModEnd> int mi_row, <S2SV_ModStart> int mi_col, vpx_writer * r ) { const VP9_COMMON * const cm = xd -> mi_row * cm -> mi_col ; MACROBLOCKD * const mbmi_ext = mi_col ; const int bw = xd -> mi_cols - mi_row * cm -> mi_col ; const int bh = xd -> mi_row * cm -> mi_col ; const int bh = xd -> mi_col ; const int bsize = xd -> mi_row * cm -> mi_col ; const int bw = xd -> plane [ 0 ] -> mi_col ] -> mbmi_ext ; const int bw = xd -> plane [ 0 ] -> mbmi_ext ; const PREDICTION_MODE <S2SV_ModEnd> y = vp9_get_mode",0
262,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
263,<S2SV_ModStart> = r -> qiov. size <S2SV_ModEnd> ; if (,0
264,<S2SV_ModStart> if ( cs >= <S2SV_ModEnd> CQSPI_MAX_CHIPSELECT ) {,1
265,<S2SV_ModStart> _bytes ) { UINT32_MAX ; <S2SV_ModStart> ) ) ; },0
266,<S2SV_ModStart> ) break ; if ( l > ll ) l = ll ;,1
267,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
268,<S2SV_ModStart> <= 0 && <S2SV_ModEnd> ND_TTEST ( *,0
269,<S2SV_ModStart> ( rq ) <S2SV_ModEnd> ; if (,0
270,"<S2SV_ModStart> ret ; uint8_t * buffer ; uint8_t value ; buffer = kmalloc ( 1, GFP_KERNEL ) ; if (! buffer ) return - ENOMEM <S2SV_ModEnd> ; dev_dbg ( <S2SV_ModStart>, reg, buffer <S2SV_ModEnd>, 1, <S2SV_ModStart> 1000 ) ; if ( <S2SV_ModEnd> ret >= 0 <S2SV_ModStart> ret >= 0 ) { value = buffer [ 0 ] ; kfree ( buffer ) ; return value ; } else { kfree ( buffer ) ; return <S2SV_ModEnd> ret ; } <S2SV_ModStart> ret ; } }",1
271,"<S2SV_ModStart> * arg, size_t <S2SV_ModEnd> len ) { <S2SV_ModStart> return NULL ; }",0
272,"<S2SV_ModStart> ; } } s -> append_char ( s, 0 ) ; strncpy <S2SV_ModEnd> ( outbuffer,",1
273,<S2SV_ModStart> Lut ) ; Lut = NULL ; <S2SV_ModStart> ; Error : if ( Lut!= NULL ),1
274,<S2SV_ModStart> = 0 ; ( i + 3 ) <S2SV_ModEnd> < sec -> <S2SV_ModStart> = 0 ; ( i + 7 ) <S2SV_ModEnd> < sec ->,1
275,<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_BW_CONSTRAINTS_OLD : if ( subl == 0 ) break ; <S2SV_ModStart> ++ ) { <S2SV_ModEnd> bw. i,1
276,<S2SV_ModStart> ; if ( ptr_hbe_txposer ->,0
277,"<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> low ) ; }",0
278,<S2SV_ModStart> long flags ; spin_lock_irq ( & bp -> ctx ) ; <S2SV_ModStart> q ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
279,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
280,,0
281,<S2SV_ModStart> ( cmd ) <S2SV_ModEnd> return 0 ;,0
282,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct net,1
283,<S2SV_ModStart> conn ) ; if ( <S2SV_ModStart> ( conn )!= 0 ) return,1
284,"<S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_ERROR <S2SV_ModStart> netbk, pending_idx <S2SV_ModEnd>, XEN_NETIF_RSP_ERROR ) <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_ERROR ) ; <S2SV_ModEnd> start = ( <S2SV_ModStart> netbk, pending_idx <S2SV_ModEnd>, XEN_NETIF_RSP_ERROR ) <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_ERROR",0
285,,1
286,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
287,"<S2SV_ModStart> len < 0 <S2SV_ModEnd> ) { syslog <S2SV_ModStart> 1 ; } if ( addr. nl_pid ) { syslog ( LOG_WARNING, ""Received <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> untrusted <S2SV_blank> pid:%u"", addr. nl_pid ) ; continue ; }",1
288,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
289,<S2SV_ModStart> ipc == NULL && client -> session == NULL,1
290,,0
291,"<S2SV_ModStart>, nameptr, lfi, fname, UDF_NAME_LEN <S2SV_ModEnd> ) ; if",1
292,"<S2SV_ModStart> ip_vs_timeout_user t ; memset ( & t, 0, sizeof ( t ) ) ;",1
293,"<S2SV_ModStart> ) ; } rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
294,<S2SV_ModStart> ; ssize_t result ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
295,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, controller, path1, & next ) ) { ret = - ENOENT <S2SV_ModEnd> ; if ( <S2SV_ModStart> if (! caller_is_see_dir ) { ret = - EACCES ; goto out ; } else ret = - ENOENT <S2SV_ModEnd> ; if (",0
296,<S2SV_ModStart> ) ) { put_disk ( disk ) ;,1
297,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
298,"<S2SV_ModStart> { if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( ( image <S2SV_ModStart> { if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( number_pixels,",1
299,<S2SV_ModStart> 0 ) ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; },1
300,<S2SV_ModStart> ; rinfo = kzalloc <S2SV_ModEnd> ( SZ_SG_REQ_INFO *,1
301,<S2SV_ModStart> ) ; } # endif,0
302,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, void )",0
303,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> kfree ( tmpbuf,1
304,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; }",1
305,,0
306,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> no_size ) { <S2SV_ModStart> self ) { size_t <S2SV_ModEnd> new_size = size_t",0
307,<S2SV_ModStart> ; int copylen = 0 <S2SV_ModStart> goto err ; copylen = 0 ;,0
308,<S2SV_ModStart> ( struct ipv6hdr <S2SV_ModEnd> ) ; unsigned <S2SV_ModStart> while ( offset <S2SV_ModEnd> <= packet_len ) <S2SV_ModStart> packet_len ) { struct ipv6_opt_hdr * exthdr ; <S2SV_ModStart> offset ; } if ( offset + sizeof ( struct ipv6_opt_hdr ) > packet_len ) return - EINVAL ; exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + offset ) ; <S2SV_ModStart> -> nexthdr ; } return - EINVAL <S2SV_ModEnd> ; } <S2SV_null>,1
309,"<S2SV_ModStart> write_buffer ) { vpx_write_bit_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 3 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 3 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
310,"<S2SV_ModStart> } else { memset <S2SV_ModEnd> ( cpi,",0
311,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = 0,0
312,<S2SV_ModStart> } if ( <S2SV_ModEnd> djrcv_dev -> paired_dj_devices,1
313,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
314,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
315,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> chunk_param_t <S2SV_ModStart> param ) { if ( param. addip_asconf_chunk_code == false ) { sctp_addip_chunk_param_t * addip = ( param. addip, addip, addip_t * addip, param. addip_hdr ) ; if ( param. p -> type == SCTP_PARAM_IPV4_IPV4_ADDRESS && param. p -> type == SCTP_PARAM_IPV4_ADDRESS ) { if ( param. p -> type == SCTP_ERROR || param. addip -> type == SCTP_PARAM_IPV4_param. addip ) { err_code = true ; break ; } else { sctp_param_params ( param, addip, addip_code, addip, param. p -> type ) ; if ( err_code == SCTP_PARAM_IPV4 <S2SV_ModEnd> ) break ; <S2SV_ModStart> ( err_code, param. addip",0
316,"<S2SV_ModStart> 101, ( ""jas_realloc(%x, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",1
317,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
318,<S2SV_ModStart> CPU_FTR_TM_COMP ) && hv_enabled <S2SV_ModEnd> ; break ;,1
319,<S2SV_ModStart> msr ) ; <S2SV_ModEnd> return NULL ;,0
320,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> key_len ) { <S2SV_ModStart> 0 ) ; if ( vma -> data_len > sizeof ( struct vma_len ) ) { <S2SV_ModEnd> goto fail ; <S2SV_ModStart> 1 ) ; if ( vma -> data_len > sizeof ( val ) ) { goto fail ; } <S2SV_ModStart> goto fail ; },0
321,<S2SV_ModStart> -> log_file ; d -> log_file = eventfp ;,1
322,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
323,"<S2SV_ModStart> void * parg = NULL ; void * <S2SV_ModStart> return err ; } if ( _IOC_DIR ( cmd ) == _IOC_SIZE ( cmd ) - EINVAL ; if ( _IOC_SIZE ( cmd )!= _IOC_SIZE ( void * ) mbuf = - EFAULT ; err = - EFAULT ; else { mbuf = _IOC_SIZE ( cmd ) - EINVAL ; } else { mbuf = _IOC_DIR ( cmd ) ; if ( _IOC_SIZE ( cmd ) - EINVAL ) { mbuf = - EFAULT ; } if ( _IOC_SIZE ( void * ) memset ( _IOC_SIZE ( cmd ), 0, sizeof ( _IOC_SIZE ) ) ) { mbuf = _IOC_DIR ( cmd ) ; } else { memset ( cmd, 0, 0, sizeof ( _IOC_SIZE ) ) ; } else { memset ( _IOC_SIZE ( cmd ) ; } else { memset ( cmd, 0, 0, sizeof ( _IOC_SIZE ( cmd ) ) ; }",0
324,<S2SV_ModStart> } server. ds_enabled <S2SV_ModEnd> && (,0
325,"<S2SV_ModStart> data ) { void * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, buf <S2SV_ModEnd>, size, <S2SV_ModStart> 500 ) ; kfree ( buf ) ; return ret ;",0
326,<S2SV_ModStart> intf -> dev_err ; usb_free ( interface -> dev ) ;,0
327,<S2SV_ModStart> ( page = 0,0
328,<S2SV_ModStart> ; if ( urb -> actual_length > 0 &&,1
329,"<S2SV_ModStart> * server, struct smb_vol * vol ) { <S2SV_ModEnd> struct sesInfo * <S2SV_ModStart> s ) { struct smb_vol * vol ; if ( strlen ( vol )!= 0 ) continue ; <S2SV_ModEnd> if ( strncmp <S2SV_ModStart> server -> password, smb_list <S2SV_ModEnd> ) continue ;",0
330,"<S2SV_ModStart> vpx_codec_err_t res ; if ( cfg -> g_w!= VPX_IMG_FMT_HIGHBITDEPTH ) { if ( cfg -> cfg. g_w!= VPX_IMG_FMT_HIGHBITDEPTH ) || ( ctx -> cfg. g_h!= ctx -> cfg. g_h ) { if ( cfg -> g_h!= VPX_IMG_FMT_HIGHBITDEPTH ) { cfg -> g_h = 1 ; } else if ( cfg -> g_h!= ( int ) cfg -> g_w || ( cfg -> g_h!= ctx -> g_h ) cfg -> g_h!= VPX_IMG_FMT_HIGHBITDEPTH if ( cfg -> ctx -> g_h ) { if ( cfg -> g_h!= VPX_IMG_FMT_HIGHBITDEPTH ) { if ( ctx -> cfg. g_h, cfg -> g_h, cfg -> g_h, cfg -> g_h ) || ( ctx ->",0
331,"<S2SV_ModStart> =='<S2SV_blank>') { input ++ ; } <S2SV_ModEnd> ptr = strchr <S2SV_ModStart> off ) ) { <S2SV_ModStart> ) ; } } <S2SV_ModStart> ) ) ) { <S2SV_ModStart> ""Unknown <S2SV_blank> filesystem <S2SV_blank> type\\n"" ) ; } <S2SV_ModStart> offset ) ) { <S2SV_ModStart> input ) ; }",1
332,"<S2SV_ModStart> inode ) ; struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> ; if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",1
333,<S2SV_ModStart> key * keyring ; if ( new -> thread_keyring ) return 0,1
334,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( scanned,1
335,"<S2SV_ModStart> orig ) ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; <S2SV_ModStart> mrb_io_alloc ( mrb <S2SV_ModEnd> ) ; DATA_TYPE",1
336,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
337,<S2SV_ModStart> cpi ) { memset <S2SV_ModEnd> ( cpi ->,0
338,"<S2SV_ModStart> return res ; res = utee_param_to_param ( utc, <S2SV_ModEnd> param, callee_params <S2SV_ModStart>, callee_params ) ; if ( res!= TEE_SUCCESS ) return res",1
339,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; const struct x86_emulate_ops * ops = ctxt -> ops ; const struct x86EMUL_CONTINUE ; rc = ctxt -> get_segment ( ctxt, & old_desc, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE ) return X86EMUL_CONTINUE ; rc = assign_eip_far ( ctxt, & old_far <S2SV_ModEnd>, ctxt <S2SV_ModStart> cs, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE <S2SV_ModEnd> ) return rc <S2SV_ModStart> return X86EMUL_CONTINUE <S2SV_ModEnd> ; rc = <S2SV_ModStart> return X86EMUL_CONTINUE <S2SV_ModEnd> ; rc = <S2SV_ModStart> return X86EMUL_CONTINUE ; rc = assign_eip_far ( ctxt, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) { WARN_ON ( ctxt -> mode!= X86EMUL_CONTINUE ) ; ctxt -> src. val = assign_far ( ctxt, old_far ( ctxt,",0
340,<S2SV_ModStart> -> band = av_calloc <S2SV_ModEnd> ( reslevel -> <S2SV_ModStart> -> prec = av_calloc <S2SV_ModEnd> ( reslevel ->,1
341,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
342,<S2SV_ModStart> * sizeof ( struct reloc_struct_t <S2SV_ModEnd> ) ) ;,1
343,<S2SV_ModStart> info. si_code!= SI_QUEUEUE ) { WARN_ON_ONCE ( info. si_code < 0 ) ; <S2SV_ModEnd> return - EPERM <S2SV_ModStart> - EPERM ; },0
344,"<S2SV_ModStart> * p_tx0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdx, <S2SV_ModEnd> p_image -> tdx",0
345,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * create_output_name <S2SV_ModStart> * create_output_name ( <S2SV_ModEnd> char * fname <S2SV_ModStart> char * fname ) { <S2SV_ModEnd> char * fname <S2SV_ModStart> ; if ( p == '/' || * p [ 0 ] == '\\\\' <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( p == '/' || p [ 0 ] == '\\\\' <S2SV_ModEnd> ) ) { <S2SV_ModStart> } else { * out = p ; p ++ ; if ( p == '/' || p [ 2 ] == 'x' || p [ 1 ] == '\\\\' <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ) { p ++ ] = p ++ ; } <S2SV_ModStart> { if ( p [ 0 ] == '/' <S2SV_ModEnd> ) ) {,0
346,,0
347,<S2SV_ModStart> goto __err ; tu -> qhead = tu -> qtail = tu -> qused = 0 ;,1
348,"<S2SV_ModStart> tmp_strsize ) { ISOM_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> ) ; } ISOM_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> ; } ISOM_DECREASE_SIZE ( ptr, 1 )",0
349,"<S2SV_ModStart>. get_alg_priv ( ctx ) <S2SV_ModEnd>, ctx ->",0
350,"<S2SV_ModStart> == 0 ) if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; } else <S2SV_ModStart> { uschar * hn ; if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; }",1
351,<S2SV_ModStart> info. si_code!= SI_QUEUEUE ) { WARN_ON_ONCE ( info. si_code < 0 ) ; <S2SV_ModEnd> return - EPERM <S2SV_ModStart> - EPERM ; },0
352,"<S2SV_ModStart> -> off = strtoull <S2SV_ModEnd> ( p, <S2SV_ModStart> -> filesize = strtoull <S2SV_ModEnd> ( slash +",1
353,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> maxw, maxh, offx, loopmaxw <S2SV_ModStart>, upb ; size_t i <S2SV_ModEnd> ; upb = <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> goto fails ; <S2SV_ModEnd> max ) ; <S2SV_ModStart> goto fails ; loopmaxw = r",0
354,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { int <S2SV_ModStart> = 0 ; <S2SV_ModEnd> <S2SV_null> <S2SV_null> <SV_null>",0
355,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; ssh_dispatch_set ( ssh, SSH2_MSG_KEXINIT, NULL ) ;",1
356,,0
357,<S2SV_ModStart> read_info ) ; <S2SV_ModEnd> if ( EOFBlob,1
358,"<S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> ( lbase, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strbase ) <S2SV_ModStart> ( ltest, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strbase ) <S2SV_ModStart> ( ltest, ""%511[^\\n]"" <S2SV_ModEnd>, strtest, <S2SV_ModStart> && ntest!= 511 <S2SV_ModEnd> ) ; if",0
359,<S2SV_ModStart> intf ) { <S2SV_ModEnd> return - ENOMEM <S2SV_ModStart> - EIO ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
360,<S2SV_ModStart> size_t ) ; if (! buf ) return - 1 ;,0
361,<S2SV_ModStart> int i ; if <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
362,"<S2SV_ModStart>, e -> elems, e ->",1
363,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
364,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",0
365,<S2SV_ModStart> snd ) ; <S2SV_ModEnd> int i ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
366,<S2SV_ModStart> int error ; unsigned int error ; <S2SV_ModStart> if ( error ) { error = bh_map. bh_size >> inode -> i_blkbits <S2SV_ModEnd> ; nr_blkbits = <S2SV_ModStart> buffer_blkbits ) ; error = lblkbits -> i_blkbits <S2SV_ModEnd> ; if ( <S2SV_ModStart> == error ) goto out ; error = lblkbits <S2SV_ModEnd> ; if (,0
367,<S2SV_ModStart> VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; if ( load -> error ) return ( NULL <S2SV_ModStart> -> real ) || <S2SV_ModEnd> vips_foreign_load_iscompat ( load <S2SV_ModStart> out ) ) { vips_operation_invalidate ( VIPS_OPERATION ( load ) ) ; load -> error = TRUE ; return ( NULL ) ; } <S2SV_ModEnd> vips_image_pipelinev ( load,1
368,<S2SV_ModStart> ) ; return,0
369,<S2SV_ModStart> ; if (! retval ) <S2SV_ModEnd> retval = context,1
370,<S2SV_ModStart> & F2SV_null> <S2SV_null> <S2SV_null>,0
371,<S2SV_ModStart> service_name_tlv_length ) ; if (! service_name_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if (! miux_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if (! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; },1
372,<S2SV_ModStart> void ) { <S2SV_ModEnd> struct monitor * <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> return mon ;,1
373,<S2SV_ModStart> ) { ( 1 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>,0
374,<S2SV_ModStart> unsigned int channo ; cdef -> ents = 0,1
375,"<S2SV_ModStart> ( interface, ENC_AT <S2SV_ModEnd> )!= 0",0
376,<S2SV_ModStart> skb ) && skb -> len,0
377,<S2SV_ModStart> len ; } ND_TCHECK ( * p + 2 <S2SV_ModEnd> ) ; ND_TCHECK,0
378,<S2SV_ModStart> 0 ; } if ( unlikely ( IPCB ( skb ) -> opt. optlen ) ) skb_dst_force ( skb ) ; else,1
379,<S2SV_ModStart> private ) { struct skcipher_tfm * tfm = private ; crypto_free_skcipher ( tfm -> skcipher ) ; kfree ( tfm <S2SV_ModEnd> ) ; },1
380,<S2SV_ModStart> bprm ) { <S2SV_ModEnd> int retval ; <S2SV_ModStart> int retval ; bprm_fill_uid ( bprm ) ; <S2SV_ModEnd> retval = security_creds,0
381,<S2SV_ModStart> = nlogs ; if ( unlikely ( datalen > 0 ) ) { r = UIO_MAXIOV + 1 ; goto err ; },1
382,<S2SV_ModStart> ) ) { if ( dlen < 2 ) break ; <S2SV_ModStart> dlen -= 2 <S2SV_ModEnd> ; * pt,1
383,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
384,<S2SV_ModStart> ( cfg ) <S2SV_ModEnd> ; if (,0
385,<S2SV_ModStart> - EOPNOTSUPP ; msg -> msg_namelen = 0 ; <S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( msg,0
386,<S2SV_ModStart> skb_is_nonlinear ( skb ) ) return 0 ; if ( skb -> len < sizeof ( struct nlattr,1
387,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; return",0
388,"<S2SV_ModStart> bp, len ) ; break ; case ETHERTYPE_TEB : ether_print ( ndo, bp, len <S2SV_ModStart> ndo_snapend - bp <S2SV_ModEnd>, NULL,",1
389,"<S2SV_ModStart> ; } } if ( tile_buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size."" ) ; exit ( - 1 ) ; } <S2SV_ModStart> _TIFFmalloc ( tile_buffsize + 3 <S2SV_ModStart> 0 ) return 0 ; tilebuf [ tile_buffsize ] = 0 ; tilebuf [ tile_buffsize + 1 ] = 0 ; tilebuf [ tile_buffsize + 2 ] =",1
390,"<S2SV_ModStart> ; unsigned facility ; mode_t new_umask_val <S2SV_ModStart> 'G' }, { ""umask"", required_argument, NULL, 'u' },",0
391,<S2SV_ModStart> int err ; <S2SV_ModEnd> return err ;,0
392,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> -> nd_num ) { o2nm_lock_subsystem ( ) ; return <S2SV_ModEnd> ; } <S2SV_null>,0
393,"<S2SV_ModStart> ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %127s\\n"" <S2SV_ModEnd>, & n",1
394,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
395,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
396,<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( connection ->,0
397,<S2SV_ModStart> return - E_NOTHANDLED ; if ( ninst == 0 ) return - E_INVALID,1
398,<S2SV_ModStart> int ld - 1 <S2SV_ModEnd> ) ; if,0
399,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
400,"<S2SV_ModStart>, p + offset + 3, <S2SV_ModEnd> tim. length <S2SV_ModStart> - 3 ) ; offset += <S2SV_ModEnd> tim. length <S2SV_ModStart> length - 3 ; length -= <S2SV_ModEnd> tim. length <S2SV_ModStart> - 3 ; <S2SV_ModEnd> if (!",1
401,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",1
402,<S2SV_ModStart> ( ) ; if (! tbuf ) { return NULL ; },1
403,"<S2SV_ModStart>, err ; unsigned int status = 0 ; <S2SV_ModStart> ( pid, ( unsigned int __user * ) & status <S2SV_ModEnd>, options, <S2SV_ModStart> ; err |= put_user ( status, ustatus ) ; err |=",1
404,<S2SV_ModStart>,0
405,,0
406,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> rowstride ) { if (! context ||! bmpdata || ( rowstride == 0 ) ) return FALSE ; if (! <S2SV_ModStart>, rowstride ) ) return FALSE <S2SV_ModStart> ChromaSubsamplingLevel ) { if (! <S2SV_ModStart> ( context ) ) return FALSE ; } return TRUE ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
407,"<S2SV_ModStart> int vpx_reader <S2SV_ModEnd> * tree,",0
408,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS,1
409,<S2SV_ModStart> return ( ( ( <S2SV_ModStart> ) / 8 ) * GetPSDPacketSize ( image ),1
410,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, size, 16 )",0
411,<S2SV_ModStart> bMasterInterface0 ) ; if (! pcu -> ctrl_intf ) return - EINVAL ; <S2SV_ModStart> bSlaveInterface0 ) ; if (! pcu -> data_intf ) return - EINVAL ;,1
412,"<S2SV_ModStart> const char * devname = kstrdup ( dev_name ), GFP_KERNEL <S2SV_ModEnd>, const char <S2SV_ModStart> d ) ; dev_name = kfree ( devname ) ;",0
413,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl ->",0
414,<S2SV_ModStart> target_enc ) { return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION <S2SV_ModEnd> ; } else,1
415,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int q ; Quantum ssize_t bpp <S2SV_ModEnd> ; register Quantum <S2SV_ModStart> exception ; q = SetPixelChannelsPixelChannelsType <S2SV_ModEnd> ( ssize_t ) <S2SV_ModStart> exception ; q = SetPixelChannelsType <S2SV_ModEnd> ( ssize_t ) <S2SV_ModStart> q ) ; if ( q < ( ssize_t ) index <S2SV_ModEnd> ( ssize_t ) <S2SV_ModStart> q ) { SetPixelViaPixelViaPixelViaPixelViaPixelChannels ( image, image, image -> colors <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( ssize_t ) SetPixelViaPixelViaPixelViaPixelViaPixelViaPixelViaPixelViaPixelInfo ( image, image, image -> colormap + ( image -> colors <S2SV_ModEnd> ) ; q",0
416,,0
417,"<S2SV_ModStart> ; u64 msr_data, rcx, rdx <S2SV_ModStart> = X86EMUL_MODE_PROT64 ; rcx = reg_read ( rdx, VCPU_REGS_RCX ) ; <S2SV_ModStart> = X86EMUL_MODE_PROT64 ; rcx = reg_read ( rdx <S2SV_ModEnd> ( rdx ) <S2SV_ModStart> = X86EMUL_MODE_PROT64 ) ; rcx = reg_read ( rdx, reg_read ( rdx )",0
418,<S2SV_ModStart> dev ) ; ssize_t len ; device_lock ( dev ) ; len = <S2SV_ModEnd> sprintf ( buf <S2SV_ModStart> driver_override ) ; return len ;,0
419,"<S2SV_ModStart> BIO * tmpout ; tmpout = cms_get_text_text ( in, flags ) ; if (! tmpout ) { CMSerr ( CMSerr ( CMSerr ( CMSerr,F_CMS_CMS_CMS_R_CONTENT ) ; goto err ; } for ( i = 0 ; i < CMSerr ( i ) ; i ++ ) { if ( i ) goto err ; } for ( i = 0 ; i < CMS_CMS_COPY ; i ++ ) { if (! BIO_CMS_CMS_COPY ) goto err ; } for ( i = 0 ; i < CMSerr ( i ) { if ( i ) goto err ; } for ( i = 0 ; i < 0 ; i ++ i ) { if ( i ) { goto err ; } if (!",0
420,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( retval == 0 ) rs. enc_tkt_reply -> flags |= TKT_FLG_PRE_AUTH ;,1
421,"<S2SV_ModStart> int segment, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_prob <S2SV_ModEnd> * w ) <S2SV_ModStart> { const vpx_prob <S2SV_ModEnd> * probs =",0
422,,0
423,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> len = 0,0
424,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
425,<S2SV_ModStart> return - EINVAL ; cpu_return 0 ;,0
426,"<S2SV_ModStart> ) { struct hugepage_subpool * spool = subpool_vma ( vma ) ; struct <S2SV_ModStart> page * page <S2SV_ModEnd>, chg ) <S2SV_ModStart> ) if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> page ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",0
427,"<S2SV_ModStart> filegen ) ; if ( NULL == filegen ) { msyslog ( LOG_ERR, ""stats <S2SV_blank> %s <S2SV_blank> unrecognized"", filegen ) ; continue ; }",0
428,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; timer_set_state",1
429,,0
430,<S2SV_ModStart> &= NULL ) return - EINVAL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_above_block_mode ( const,0
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
433,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
434,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> AVINDEX_KEYFRAME ) ; },1
435,"<S2SV_ModStart> 1 ), length + 1",0
436,"<S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, path1 ) ) { ret = - ENOENT ; goto out ; } if (! <S2SV_ModStart>, fc_may_see_dir ) ) { ret = - ENOENT ; goto out ; } if (! <S2SV_ModStart> ( fc_may_see_dir ) ) { ret = - EPERM ; goto out ; } if (! <S2SV_ModEnd> ( fc_may_see_dir ( fc_dir )",0
437,<S2SV_ModStart> ~ MNT_WRITE_HOLD ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_NODEV ;,0
438,<S2SV_ModStart> rds_loop_transport ; } <S2SV_ModEnd> } conn ->,1
439,<S2SV_ModStart> * rsize >= 62 <S2SV_ModEnd> && rdesc [,0
440,<S2SV_ModStart> if ( ( ( <S2SV_ModStart> ) < bodyLength ) || ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ),1
441,<S2SV_ModStart> = port ; if (! iov_iter ),0
442,<S2SV_ModStart> ND_TCHECK ( bp [ 0 ] <S2SV_ModEnd> ) ; if,0
443,"<S2SV_ModStart> * newName, int newLen, <S2SV_ModStart> * udfName, int udfLen, <S2SV_ModEnd> uint8_t * fidName <S2SV_ModStart> ( newIndex < newLen <S2SV_ModEnd> ) newName [ <S2SV_ModStart> } maxFilenameLen = newLen - CRC_LEN <S2SV_ModEnd> - localExtIndex ; <S2SV_ModStart> ( newIndex > newLen - CRC_LEN ) newIndex = newLen - CRC_LEN <S2SV_ModEnd> ; newName [",1
444,,0
445,<S2SV_ModStart> ) ) { return,0
446,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> dio_lock_irq (,0
447,"<S2SV_ModStart> * s ; const unsigned char * p = sigbuf ; unsigned char * der = NULL ; int derlen = - 1 ; <S2SV_ModStart> s, & p <S2SV_ModEnd>, siglen ) <S2SV_ModStart> == NULL ) goto err ; derlen = i2d_DSA_SIG ( s, & der ) ; if ( derlen!= siglen || memcmp ( sigbuf, der, derlen ) ) <S2SV_ModStart> ; err : if ( derlen > 0 ) { OPENSSL_cleanse ( der, derlen ) ; OPENSSL_free ( der ) ; }",1
448,"<S2SV_ModStart> NULL ) ; if (! _gdImageWBMPCtx <S2SV_ModEnd> ( im, <S2SV_ModStart>, out ) ) { <S2SV_ModStart> rv ) ; } else { rv = NULL ; }",0
449,<S2SV_ModStart> bprm ) ; <S2SV_ModEnd> return 0 ;,0
450,"<S2SV_ModStart> = NULL ; size_t data_size = 0 ; <S2SV_ModStart>, & buf_size, & data_size <S2SV_ModStart> OE_RAISE_ERRNO ( OE_EN ) ; if ( ret > OE_SSIZE_MAX ) return - EINVAL ; <S2SV_ModEnd> } if (",0
451,<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( connection ->,0
452,"<S2SV_ModStart> ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> image <S2SV_blank> dimensions"" ) ; goto done ; }",1
453,<S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> coef_probs,0
454,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; else if ( ret <= size ) memcpy ( data, buf, ret ) ; kfree ( buf ) ;",0
455,"<S2SV_ModStart> * ops, <S2SV_ModEnd> expr, &",0
456,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
457,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> yvpx_codec_algay_encode ( VP9_COMMON * <S2SV_ModStart> * 8 ) { VP9_COMPACK_CODEC_FRAME <S2SV_ModEnd> ( line, <S2SV_ModStart> } else { vpx_codec_start <S2SV_ModEnd> ( line, <S2SV_ModStart>, buf, row, row <S2SV_ModEnd> ) { int <S2SV_ModStart> ; } } <S2SV_null> <S2SV_null>",0
458,<S2SV_ModStart> ) ; } fuse_conn_put ( & cc -> fc ) ;,1
459,"<S2SV_ModStart> ( code ) { * status = ""DECODE_PA_S4U_USER"" ; return code ; } <S2SV_ModEnd> code = verify_user_checksum",0
460,<S2SV_ModStart> SCSIDiskReq * r ) { SCSIDiskState * req = & req -> req ; SCSIDiskState * SCSIDiskState * req ; SCSIDiskState = SCSIDiskState * SCSIDiskState * r -> req ; SCSIDiskState * req = SCSIDiskState ; uint8_t * outbuf ; uint8_t * outbuf ; uint8_t * outbuf = r -> buflen ; uint8_t * outbuf ; uint8_t * outbuf = 0 ; uint8_t * outbuf = r -> buflen ; uint8_t * outbuf = 0 ; uint8_t * outbuf = r -> iov. iov_base ; if (! r -> iov. iov_base ) { if (! r -> iov. iov_base ) { goto illegal_request ; } buflen = r -> iov. iov. xfer <S2SV_ModEnd> ; switch (,0
461,<S2SV_ModStart> cur_pic. field_picture <S2SV_ModEnd> ) return 0,1
462,"<S2SV_ModStart> off ) { struct scatterlist * sgp = & rm -> data. op_sg [ sg ] ; ret = min_t ( int, ret, sizeof ( int ) - sg_off ) ; <S2SV_ModStart> err ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
463,<S2SV_ModStart> buf ) ) { return 0 ; } <S2SV_ModEnd> ext_block = (,1
464,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,1
465,<S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },0
466,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
467,"<S2SV_ModStart> = hmi_data ; uint32_t data_siz ; <S2SV_ModStart> += hmi_track_size ; hmi_track_offset [ i ] = hmi_track_offset [ i ] ; <S2SV_ModStart> += 4 ; hmi_track_offset [ i ] = hmi_offset [ i ] ; <S2SV_ModStart> += 4 ; hmi_track_offset [ i ] = hmi_tmp ; <S2SV_ModStart> += 4 ; hmi_tmp ; hmi_track_size [ i ] -= 4 ; <S2SV_ModStart> += 4 ; hmi_tmp ; <S2SV_ModStart> += 4 ; hmi_tmp ; hmi_tmp = hmi_tmp ; <S2SV_ModStart> += 4 ; if ( hmi_tmp < hmi_tmp ) { _WM_ERROR ( __FUNCTION__, ""file <S2SV_blank> too <S2SV_blank> short"", __FUNCTION__, WM_HMI, __FUNCTION__, WM_HMI, WM_ERR_HMI, ""file <S2SV_blank> too <S2SV_blank> short"" ) ; goto _hmi_tmp ; } hmi_tmp = hmi_tmp ; <S2SV_ModStart> += 4 ; data_tmp ; data_siz -= hmi_tmp ; <S2SV_ModStart> += 4 ; if ( hmi",0
468,<S2SV_ModStart> -> id ; haddr -> hci_channel = 0 ;,1
469,<S2SV_ModStart> -> i_iget5_offset ; fh16 [ 3 ] = 0 ;,1
470,"<S2SV_ModStart> ( kdc_active_realm, client. princ <S2SV_ModEnd>, request ->",1
471,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> = S64_MAX ; <S2SV_ModEnd> if ( src_known,1
472,,0
473,<S2SV_ModStart> ( ret = 0,0
474,<S2SV_ModStart> DestroyQuantumInfo ( quantum_info ) ; canvas_image = DestroyImage ( canvas_image,1
475,"<S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, MAXALIGN",0
476,<S2SV_ModStart> void usage_exit ( void,1
477,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
478,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
479,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
480,"<S2SV_ModStart>. get_si ( get_alg_priv ( ctx ) <S2SV_ModEnd>, res )",0
481,<S2SV_ModStart> ; if ( * value == 0 ||,1
482,"<S2SV_ModStart>, inode -> i_sb <S2SV_ModEnd> ) ) {",0
483,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
484,"<S2SV_ModStart> ND_TCHECK ( * tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> } trunc : ND_PRINT ( ( ndo, ""[|esis]"" ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
485,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> c"", <S2SV_ModStart> y3 ) ; sendClean ( outputbuffer ) ;",0
486,<S2SV_ModStart> } else { return false ; } else if ( r -> CRn!= CRn ) { return false ; } else if <S2SV_ModEnd> } else { <S2SV_ModStart> } else { return false ; } },0
487,<S2SV_ModStart> case IS_STRING : { zval dval ; dval = * tmp ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> ) ; rect <S2SV_ModStart> break ; } else { rect. x = <S2SV_ModStart> i ] = Z_PP ( tmp ) ; } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval ; lval = * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. x = Z_DVAL ( dval ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> break ; default,0
488,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
489,<S2SV_ModStart> SQL_DROP ) ; <S2SV_ModEnd> return 0 ;,1
490,"<S2SV_ModStart> ; r = __copy_from_user <S2SV_ModEnd> ( data,",1
491,"<S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 2000-2010 <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\nThis <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> conditions.\\n"" ) <S2SV_ModStart> ; isspace ( ( unsigned char ) <S2SV_ModStart> ; isspace ( unsigned char ) <S2SV_ModStart> && isdigit ( ( unsigned char ) <S2SV_ModStart> && isdigit ( ( unsigned char ) <S2SV_ModStart> && isdigit ( ( unsigned char )",0
492,<S2SV_ModStart> = 0 ; info -> port = NULL ;,1
493,<S2SV_ModStart> -> ctx. <S2SV_ModEnd> pmu = pmu,1
494,"<S2SV_ModStart> iovec * iovec, struct iov_iter * iter ) { if ( len > MAX_RW_COUNT ) len = MAX_RW_COUNT ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> = 1 ; iov_iter_init ( iter, rw, iovec, * nr_segs, len ) ;",1
495,<S2SV_ModStart> ext4_group_t flex_group ; unsigned <S2SV_ModStart> -> s_log_groups_per_flex ; if ( sbi -> s_log_groups_per_flex < 1 ) { <S2SV_ModStart> -> sbi -> s_log_groups_per_flex ; return 1 ; },0
496,<S2SV_ModStart> ( unlikely ( chunk -> pdiscard ) ) return 0 ; if ( unlikely (,1
497,,0
498,"<S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; if ( <S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; if (",1
499,<S2SV_ModStart> <= w - ( int ),1
500,<S2SV_ModStart> callback_args -> forward_matches ; assert ( match_offset + match_length <= callback_args -> data_size ),1
501,<S2SV_ModStart> options. disable_forwarding && use_privsep,1
502,<S2SV_ModStart> c -> chunksize == UINT_MAX <S2SV_ModEnd> ) { if,0
503,<S2SV_ModStart> err ; } if ( m -> msg_name ),1
504,,0
505,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) { hstartrow <S2SV_ModEnd> = ( numrows <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; n = <S2SV_ModStart> & a [ hstartrow <S2SV_ModEnd> * stride ],1
506,<S2SV_ModStart> dev ) ; princ -> priv = 0 ;,0
507,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
508,,0
509,"<S2SV_ModStart> & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; if ( hashbin -> hb_spinlock_spinlock_irqsave ( & HB_LOCK ) spin_unlock_irqsave ( & hashbin -> hb_spinlock, flags ) ; if ( hashbin -> hb_spinlock_spinlock_irqsave ( & hashbin -> hb_type, flags ) <S2SV_ModEnd> ) { if <S2SV_ModStart> & HB_LOCK ) spin_unlock_irqsave ( & hashbin -> hb_spinlock, flags ) ; } <S2SV_ModEnd> } if ( <S2SV_ModStart> & HB_LOCK ) spin_unlock_irqsave ( & hashbin -> hb_spinlock, flags ) ; if ( hashbin -> hb_spinlock_spinlock ) spin_unlock_irqsave ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModEnd> } } hashbin <S2SV_ModStart> & HB_LOCK ) ; <S2SV_ModEnd> } } hashbin",0
510,<S2SV_ModStart> (! ( mnt_flags & MNT_LOCK_NOSUID <S2SV_ModEnd> ) { return,0
511,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = 0,0
512,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
513,<S2SV_ModStart> ( serial -> num_bulk_out <S2SV_ModEnd> < 2 ) <S2SV_ModStart> < 2 ) <S2SV_ModEnd> { dev ->,0
514,"<S2SV_ModStart> write_junk ; size_chunk = 0, table_length <S2SV_ModStart> ds64_chunk ++ ) ; if ( cs64_chunkSize < sizeof ( CS64_chunk ) ) { error_line ( ""total"" ) ; return FALSE ; } <S2SV_ModStart> ds64_chunk : total_length ) ; if ( table_length!= sizeof ( cs64_chunk ) ) { error_line ( ""total"" ) ; return FALSE ; } <S2SV_ModStart> ds64_chunk ( table_length <S2SV_ModEnd> ) ) ; if",0
515,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> -> msg_name && <S2SV_ModStart> -> name, msg_name, msg_namelen <S2SV_ModStart> -> name, msg_namelen = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> msg_namelen ; if ( msg -> msg_name, msg_namelen ) <S2SV_ModEnd> -> msg_namelen = <S2SV_ModStart> -> msg_namelen ; else if ( msg -> msg_namelen && <S2SV_ModStart> -> msg_namelen + 1 ) <S2SV_ModEnd> -> msg_namelen = <S2SV_ModStart> -> msg_name ; <S2SV_ModEnd> -> msg_namelen =",0
516,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> struct bh_blocksize_t <S2SV_ModStart> offset ) { int bh_blocks = ( struct bh, bh, bh -> bh, bh_blocksize, bh -> bh_size ) ; if ( ext2_size > bh -> bh_blocksize ) goto out_err ; <S2SV_ModStart> = 1 ; }",0
517,<S2SV_ModStart> options ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
518,<S2SV_ModStart> return FALSE ; { BOOL rc ; <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) rc = <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) if (! rc ) return FALSE ; } { BOOL rc ; <S2SV_ModStart> -> prof_nsc_decode ) rc = <S2SV_ModStart> -> prof_nsc_decode ) if (! rc ) return FALSE ; },1
519,"<S2SV_ModStart> -> dict ) && xmlDictOwns ( ctxt -> dict, value )",1
520,,0
521,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> hdrlen ( struct <S2SV_ModStart> * opt = sizeof ( struct ihdr ) <S2SV_ModEnd> ; int len <S2SV_ModStart> - EINVAL ; int len = sizeof ( attrhdr ) ; if ( len < 1 ) return - EINVAL,0
522,<S2SV_ModStart> b ) { } else if ( warn_script_unsaved && fv -> script_unsaved && AskScriptChanged ( ) == 2 ) { return false ;,1
523,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> msi ++ ),0
524,<S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( &,0
525,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
526,<S2SV_ModStart> ; if ( value == 0 ) return 0 ; if (,0
527,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct range_ranges * <S2SV_ModEnd> ranges ; <S2SV_ModStart> range -> range_ranges = & clt -> clt_ranges ; <S2SV_ModStart> range -> range [ 0 ] = & r -> range [ 0 ] ; <S2SV_ModStart> } else { struct range_data ; <S2SV_ModEnd> if ( ret <S2SV_ModStart> } else { range_ranges = & r -> range [ 0 ] ; <S2SV_ModEnd> if ( ret <S2SV_ModStart> 0 ) ) { range_ranges = & r -> range [ 0 ] ; range_boundary = & r -> range [ 0 ] = & r -> range [ 0 ] ; <S2SV_ModEnd> } else { <S2SV_ModStart> } else { range [ 0 ] ; <S2SV_ModEnd> if ( ret <S2SV_ModStart> } ret = & r -> clt_boundary, clt_boundary, sizeof ( clt_boundary ) ) <S2SV_ModEnd> if ( ret <S2SV_ModStart> + 1 ) ) { range = <S2SV_ModEnd> ; break ; <S2SV_ModStart> } else { <S2SV_ModEnd> if ( ret = <S2SV_ModStart> } ret = <S2SV_ModEnd> ; break ; <S2SV_ModStart> } ret = <S2SV_ModEnd> ; break ;",0
528,"<S2SV_ModStart> ( interface, ENC28J60_EIE, ENC28J60_EIE, ENC28J60_EIE <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface, ENC28J60_EIE, ENC28J60_EIE <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface, ENC28J60_EIE, ENC28J60_EIE <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & ( interface, ENC28J60_EIR <S2SV_ModEnd> ) ) ; if <S2SV_ModStart> ( status & ( interface, ENC28J60_EIR <S2SV_ModEnd> ) )!= 0 <S2SV_ModStart> ( status & ( interface, ENC28J60_EIE <S2SV_ModEnd> ) ) ; mask <S2SV_ModStart> ( status & ( interface, ENC28J60_EIR <S2SV_ModEnd> ) ) ; if <S2SV_ModStart> ( status & ( status & ( status & ENC28J60_EIR <S2SV_ModEnd> ) )!= 0 <S2SV_ModStart> ( status & ( status & ( status <S2SV_ModEnd> ) ) )",0
529,"<S2SV_ModStart> vp9_wb_write_literal ( vpx_wb_write_bit <S2SV_ModEnd> * wb ) <S2SV_ModStart> i ] ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
530,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
531,"<S2SV_ModStart> { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
532,<S2SV_ModStart> tmp ) { goto softfail <S2SV_ModEnd> ; } case <S2SV_ModStart> ) ) { goto softfail <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; softfail : state -> offset = 0 ;,1
533,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
534,<S2SV_ModStart> flags ) { spin_lock ( & ctx -> cancel_lock ) ; <S2SV_ModStart> } } else { __timerfd_remove_cancel <S2SV_ModEnd> ( ctx ) <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> cancel_lock ) ;,1
535,"<S2SV_ModStart> ) ) ; if ( c16 -> Curves [ i ] == NULL ) { for ( j = 0 ; j < i ; j ++ ) { _cmsFree ( ContextID, c16 -> Curves [ j ] ) ; } _cmsFree ( ContextID, c16 -> Curves ) ; _cmsFree ( ContextID, c16 ) ; return NULL ; }",1
536,<S2SV_ModStart> { if (! dev_name ||,1
537,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",0
538,"<S2SV_ModStart> fromio ) { if ( memcpy_fromio ( * msg, sizeof ( * msg ), sizeof ( * msg ) ) ) { if ( * msg ) memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m_pdwGetRing, sizeof ( * msg ), space_rem ) ; } else { <S2SV_ModEnd> memcpy_fromio ( * msg",0
539,<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { efree ( replaced ) ; RETURN_FALSE ; },1
540,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( bp ->,0
541,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",0
542,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> int mi_row, MACROBLOCKD * x, <S2SV_ModEnd> MODE_INFO * <S2SV_ModStart> BLOCK_SIZE bsize, MACROBLOCK_SIZE bsize, int <S2SV_ModStart> BLOCK_SIZE bsize, int mi_row, x, bsize, mi_col <S2SV_ModEnd> ) { <S2SV_ModStart> -> mb = get_segment_id ( bsize, mi_row, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_row, mi_col, mi_col, mi_row, mi_col, mi_col, bsize, mi_row, mi_col, mi_col, mi_col, xd <S2SV_ModEnd> ) ; <S2SV_ModStart> ; } } <S2SV_null>",0
543,<S2SV_ModStart> size ) { strcmp ( key ) ;,0
544,<S2SV_ModStart> int pixel_ptr = - 4 <S2SV_ModEnd> ; int block_ptr <S2SV_ModStart> -- ) { ADVANCE_BLOCK ( ) <S2SV_ModStart> row_inc ; } <S2SV_ModEnd> } break ; <S2SV_ModStart> -- ) { ADVANCE_BLOCK ( ) ; <S2SV_ModStart> row_inc ; } <S2SV_ModEnd> } break ; <S2SV_ModStart> ) return ; ADVANCE_BLOCK ( ) ; <S2SV_ModStart> row_inc ; } <S2SV_ModEnd> break ; default,1
545,<S2SV_ModStart> cnt ) { ssize_t <S2SV_ModEnd> n ; assert,1
546,<S2SV_ModStart> ; __be16 type ; if ( NAPI_GRO_CB ( skb ) -> encap_mark ) goto out ; NAPI_GRO_CB ( skb ) -> encap_mark = 1,1
547,<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { return 0 ; } if (,1
548,<S2SV_ModStart> = tpm_kdfa ( <S2SV_ModEnd> session -> authHash,1
549,<S2SV_ModStart> key_ref ) ; ret = key_read <S2SV_ModEnd> ( key ),0
550,<S2SV_ModStart> -> u4_first_slice_in_pic = 1 <S2SV_ModEnd> ; ps_dec ->,0
551,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> = S64_MAX ; <S2SV_ModEnd> if ( src_known,0
552,<S2SV_ModStart> ) ; goto out_dentry <S2SV_ModEnd> ; } if,0
553,<S2SV_ModStart> vfio_irq_set hdr ; size_t size ; <S2SV_ModStart> NULL ; } if ( hdr. count > max ) return - EINVAL ; <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> max = hdr,0
554,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ext4_has_inline_data ( inode,1
555,<S2SV_ModStart> -> filesize = UINT64_MAX <S2SV_ModEnd> ; s ->,1
556,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
557,"<S2SV_ModStart> char * in, size_t olen <S2SV_ModStart> += 4 ; if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ;",1
558,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
559,"<S2SV_ModStart> * wdata, bytes, <S2SV_ModStart>, 0, bytes <S2SV_ModEnd> ) ; for",0
560,<S2SV_ModStart> & CP_RDESC_SWAPPED_MIN_MAX ) ) return rdesc ; if ( * rsize < 4,1
561,"<S2SV_ModStart> * si, vpx_codec_ctx_t * const VPX_ENCODEC_MAX_FRAME <S2SV_ModEnd> * const int <S2SV_ModStart>, int segment_count <S2SV_ModEnd>, int segment_id <S2SV_ModStart> ) return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>",0
562,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> BYTE * out, UINT32 outSize",0
563,"<S2SV_ModStart> } else { memset <S2SV_ModEnd> ( buffer,",0
564,,0
565,"<S2SV_ModStart> * m, size_t <S2SV_ModEnd> bufsize ) { <S2SV_ModStart> * buf ; <S2SV_ModEnd> JAS_DBGLOG ( 100 <S2SV_ModStart> 100, ( ""mem_resize(%p)\\n"" <S2SV_ModEnd>, m,",0
566,<S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
567,"<S2SV_ModStart>, pred_rtrn ) ||! expr -> action. args",1
568,<S2SV_ModStart> pcrypt_free ( struct aead_ctx <S2SV_ModEnd> * aead_ctx,0
569,,0
570,"<S2SV_ModStart> } if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if (",1
571,<S2SV_ModStart> icmp6_hop_limit ) { if ( <S2SV_ModStart> cnf. hop_limit < <S2SV_ModEnd> ra_msg -> icmph,0
572,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
573,<S2SV_ModStart> * up ; int ulen ; <S2SV_ModStart> rp ) ; ulen = xfrm_replay_state_esn_len ( up ) ; if ( nla_len ( rp ) < ulen || <S2SV_ModEnd> xfrm_replay_state_esn_len ( replay_esn <S2SV_ModStart> replay_esn )!= ulen <S2SV_ModEnd> ) return -,1
574,"<S2SV_ModStart> int ret = proc_dointvec_minmax <S2SV_ModEnd> ( table,",1
575,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
576,<S2SV_ModStart> opj_calloc ( ( size_t ) ( <S2SV_ModStart> -> numlayers + 1U <S2SV_ModEnd> ) * l_step_l,0
577,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
578,"<S2SV_ModStart> start = 0 ; int i <S2SV_ModStart> -> flags ; for ( i = 0 ; i < 3 ; i ++ ) <S2SV_ModStart> ( kvm, i <S2SV_ModEnd>, kvm -> <S2SV_ModStart>. channels [ i <S2SV_ModEnd> ]. count",1
579,"<S2SV_ModStart> * cpi, ThreadData * td, TileDataEnc * tile_data <S2SV_ModEnd>, MACROBLOCKD * <S2SV_ModStart> int mi_row, RD_COST * const cpi <S2SV_ModEnd>, BLOCK_SIZE bsize, <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const tile_info = & cpi -> common ; MACROBLOCKD * const cm -> common ; <S2SV_ModStart> -> common ; TileInfo * const tile_info = & tile_data -> tile_info ; <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> int i_row, mi_row, mi_col, mi_col, mi_col, mi_row, mi_col, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_cols, mi_col, mi_col, mi_cols, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col,",0
580,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",1
581,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
582,<S2SV_ModStart> } else return,0
583,<S2SV_ModStart> * dir ; <S2SV_ModEnd> fd = dir,0
584,<S2SV_ModStart> blkg ) ) <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> blkg ) ; <S2SV_ModEnd> q -> root_blkg,1
585,<S2SV_ModStart> ; if ( bpp == 1 && <S2SV_ModStart> else if ( bpp == 8 &&,1
586,"<S2SV_ModStart> ; krb5_data rspac ; const char * tgt_realm = krb5_principal_get_realm ( context, krbtgt -> entry. principal ) <S2SV_ModStart>, cp, tgt_realm,",1
587,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
588,"<S2SV_ModStart> struct usbdevfs_connectinfo ci ; memset ( & ci, 0, sizeof ( ci ) ) ; ci <S2SV_ModEnd>, sizeof (",0
589,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt. <S2SV_ModStart> += opt -> opt. <S2SV_ModStart> += opt -> opt.,0
590,<S2SV_ModStart> args -> rmtvaluelen2 ; args -> rmtvaluelen = args -> rmtvaluelen ; args -> rmtvaluelen,0
591,,0
592,<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( connection ->,0
593,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null <S2SV_ModEnd> dev ( struct <S2SV_ModStart> SV_null> struct l2SV_null> <S2SV_null <S2SV_ModEnd> ; if (,0
594,,0
595,<S2SV_ModStart> ; x += 4 <S2SV_ModEnd> ) { index,1
596,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
597,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> skbinfo ( struct <S2SV_ModStart> snam * rt,0
598,"<S2SV_ModStart> 0 ) { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ;",0
599,"<S2SV_ModStart> ) ) ; ND_TCHECK ( * bp, sizeof ( * bp ) ) ;",0
600,"<S2SV_ModStart>, CONST_STR_LEN ( ""%2f?"" ), CONST_STR_LEN ( ""/?"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/%2f?"" ), CONST_STR_LEN ( ""//?"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN (",1
601,<S2SV_ModStart> ; if (! file ) return FALSE ; if (,0
602,<S2SV_ModStart> <= w - ( int ),1
603,<S2SV_ModStart> page ) ; <S2SV_ModEnd> memset ( addr,1
604,<S2SV_ModStart> * jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_t,0
605,,0
606,<S2SV_ModStart> -> priv ; <S2SV_ModEnd> return - EINVAL,0
607,<S2SV_ModStart> ; } } if ( le32_to_cpu ( sd -> sg_cpu ) < 0 ) return - ENOMEM ;,0
608,<S2SV_ModStart> -> device_data ; cancel_autoload_drivers ( ) ;,1
609,<S2SV_ModStart> * flags ; <S2SV_ModEnd> const char * <S2SV_ModStart> { if ( flags & TEMP_FAILURE_RETRY ),0
610,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> p == q ) || ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> size < 16 ) || ( <S2SV_ModEnd> size > 256 <S2SV_ModStart> size > 256 ),1
611,"<S2SV_ModStart> uint dblocks = xfs_attr3_rmt_blocks <S2SV_ModEnd> ( mp,",1
612,,0
613,"<S2SV_ModStart> } if ( strncpy <S2SV_ModEnd> ( line,",0
614,<S2SV_ModStart> ] == EOF || text [ 1 ] == 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 2 ] ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 3 ] ) <S2SV_ModEnd> ) return 0,1
615,,0
616,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct8x8_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 64 <S2SV_ModStart> 64 ] ; <S2SV_ModEnd> int i,",0
617,"<S2SV_ModStart> else if ( g_has_prefix <S2SV_ModEnd> ( arg, <S2SV_ModStart>, ""@@"" ) <S2SV_ModEnd> ) g_print (",0
618,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; fh_lock ( fh ) ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS <S2SV_ModEnd>, argp -> <S2SV_ModStart> argp -> acl_access ) ; if ( error ) goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_TYPE_DEFAULT <S2SV_ModEnd> ) ; if",0
619,<S2SV_ModStart> * ue ; if <S2SV_ModEnd> ( tree_root == <S2SV_ModStart> == NULL ) return 0,1
620,<S2SV_ModStart> O_RDONLY | O_CREAT | O_NOCTTY <S2SV_ModEnd> ) ; if,0
621,<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) ; <S2SV_ModStart> > 0 ) { elen += pc -> lengthComponentIdent ; break ; } <S2SV_ModEnd> case 2 : <S2SV_ModStart> case 5 : elen += pc -> lengthComponentIdent ; if ( elen > fromlen ) return - EIO ; <S2SV_ModStart> break ; } <S2SV_ModEnd> } if (,1
622,<S2SV_ModStart> ( dp [ 3 <S2SV_ModEnd> ] ) ;,0
623,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_8BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr ) ;,0
624,<S2SV_ModStart> endif if ( ( ptr + 1 > 1024 ),0
625,<S2SV_ModStart> ; bool slow <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ;,1
626,<S2SV_ModStart> len ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
627,"<S2SV_ModStart> int tagval ; struct stream packet ; <S2SV_ModStart> length ) ; packet = * s ; <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; <S2SV_ModEnd> return False ;",0
628,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_int ( ndo, cp <S2SV_ModStart> ndo -> ndo_snapend ; u_int ( ndo, cp, NULL ) ; if ( (! ND_TTEST2 ( * cp ) ) ) return ( NULL ) ; if ( ( ( * cp + 1 )!= INDIR_MASK ) return ( NULL ) ; ND_PRINT ( ( ndo, ""\\n"" ) ) ; return ( NULL ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ndo -> ndo_snapend ) { if (! ND_PRINT ( ( ndo, ""\\n"" ) ) return ( NULL ) ; } if ( ( ( ndo, ""\\n"" )!= INDIR_MASK ) return ( NULL ) ; return ( NULL ) ; ND_PRINT ( ( ( ndo, ""\\n"" ) ) ; return ( NULL ) ; }",0
629,"<S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; error",0
630,"<S2SV_ModStart> char * r, const <S2SV_ModStart> bytes ) { const char * buf = NULL ; const char *",0
631,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> S_IWUSR ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; unlink",0
632,"<S2SV_ModStart> -> fc ; memset ( & bp -> diff_count, 0, sizeof ( fc ) ) ; <S2SV_ModStart> break ; } }",0
633,"<S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f,",0
634,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_set_str ( GITERR_NET, ""Invalid <S2SV_blank> empty <S2SV_blank> packet"" ) ; return GIT_ERROR <S2SV_ModEnd> ; } if",1
635,<S2SV_ModStart> ; if ( vma -> vm_flags & VM_SHARED ) return VM_FAULT_SIGBUS ; if (,1
636,<S2SV_ModStart> c -> m_encoder = 0 <S2SV_ModEnd> ; gss ->,0
637,<S2SV_ModStart> env -> insn_aux_data ; int i <S2SV_ModStart> ) ) ; for ( i = off ; i < off + cnt - 1 ; i ++ ) new_data [ i ]. seen = true ;,1
638,<S2SV_ModStart> ; ND_TCHECK ( * dp <S2SV_ModEnd> ) ; if,1
639,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;,1
640,<S2SV_ModStart> -> common ; <S2SV_ModEnd> cpy <S2SV_ModEnd> ( cpi ->,0
641,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorDecodeTile"", ""%s"", ""occ0%rowsize <S2SV_blank>!= <S2SV_blank> 0"" ) ; return 0 ; } <S2SV_ModEnd> assert ( sp <S2SV_ModStart> 0 ) { if (! <S2SV_ModStart>, rowsize ) ) return 0",1
642,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ;",0
643,<S2SV_ModStart> ; if ( ctx -> terminated ||,1
644,<S2SV_ModStart> = NULL ; if ( sbi -> spool ) hugepage_put_subpool ( sbi -> spool ) ;,1
645,"<S2SV_ModStart>, MODE_INFO * ( int )",0
646,<S2SV_ModStart> * alloc ; size_t <S2SV_ModEnd> len ; int <S2SV_ModStart> len ) { if (! tmplen ) return NULL ;,0
647,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
648,"<S2SV_ModStart> ( ) ; iov_iter_advance ( i, copied ) ; <S2SV_ModStart> again ; } <S2SV_ModEnd> pos += copied",1
649,<S2SV_ModStart> unlikely ( len + ring -> frameoffset,1
650,<S2SV_ModStart> } <S2SV_null> <S2SV_null> <S2SV_null>,0
651,"<S2SV_ModStart> ( obj, <S2SV_ModEnd> name, data <S2SV_ModStart>, show_object, & base <S2SV_ModEnd>, path,",1
652,"<S2SV_ModStart>, arg ) <S2SV_ModEnd> ; if (",0
653,<S2SV_ModStart> src < zsize + ( sub_type!= 2 ) <S2SV_ModStart> bits ) { if ( src >= src_end ) return AVERROR_INVALIDDATA ;,1
654,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
655,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
656,,0
657,<S2SV_ModStart> timer_list ) ; spin_lock_irq ( & timeri -> timeri -> timer ) ; <S2SV_ModStart> list_add_tail ( & timer -> timer -> lock <S2SV_ModEnd> ) ; },0
658,<S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT,1
659,,0
660,"<S2SV_ModStart> sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart>, * n <S2SV_ModEnd> ; list_for_each_entry (",1
661,<S2SV_ModStart> -> u1_dpb_commands_read ) { ih264d_read <S2SV_ModEnd> ( ps_dec ->,0
662,"<S2SV_ModStart> gint64 offset ; <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; offset <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! parse_netscreen_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> wth -> fh <S2SV_ModEnd>, & wth <S2SV_ModStart> wth -> frame_buffer, line",1
663,<S2SV_ModStart> 0 ) ; if ( <S2SV_ModStart>. seq_num ) < 0 ) return - 1,1
664,<S2SV_ModStart>!= UINT32_MAX - 1,0
665,"<S2SV_ModStart> : ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = <S2SV_ModStart> == 0 ) ret = <S2SV_ModEnd> key -> type <S2SV_ModStart> type -> read ( key, buffer, buflen ) ; up_read <S2SV_ModEnd> ( & key <S2SV_ModStart> sem ) ; <S2SV_ModEnd> } error2 :",1
666,<S2SV_ModStart> RETURN_FALSE ; } <S2SV_ModEnd> if ( ret,0
667,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",1
668,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,0
669,<S2SV_ModStart> page ) ; rm -> atomic. op_active = 0 ;,1
670,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return ;,0
671,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
672,"<S2SV_ModStart> sizeof ( spath ) ) return - 1 ; if ( strstr ( name, "".."" ) || strchr ( name, '/'",1
673,<S2SV_ModStart> = tlen ( ( void ) <S2SV_ModEnd> ) ) {,0
674,"<S2SV_ModStart> -> bcache, cache_id ( <S2SV_ModStart> ] -> data )",1
675,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
676,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
677,<S2SV_ModStart> return 1 ; consume_skb ( skb ) ; return 0 <S2SV_ModEnd> ; } if,1
678,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> codec_err ( ""%s: <S2SV_blank> size <S2SV_blank> %d\\n""",0
679,<S2SV_ModStart> goto out ; err = ovl_copy_up ( dentry ) ; if (! err ) { <S2SV_ModStart> dentry ) ; <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> ) ; } <S2SV_ModEnd> ovl_drop_write ( dentry,1
680,<S2SV_ModStart> ( isspace ( ( unsigned char ),1
681,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> } if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if (",1
682,<S2SV_ModStart> ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ),0
683,,0
684,<S2SV_ModStart> ) ; } if ( <S2SV_ModEnd> key == 0,0
685,<S2SV_ModStart> ++ ) { if ( band -> prec ) { <S2SV_ModStart> ) ; } },1
686,<S2SV_ModStart> < 0 ) { xmlFreeInputStream ( input ) ; return ; } <S2SV_ModEnd> if ( entity,1
687,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart>, & final ) ; rcu_read_unlock ( <S2SV_ModStart> -> ir_v6_rmt_addr ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), <S2SV_ModEnd> np -> tclass <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (",1
688,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> == VP9_COMP * cpi <S2SV_ModEnd> ) { int <S2SV_ModStart> -> common ; if ( cpi -> oxcf. pass_mode == VP9_COMMON * cpi ) { if ( cpi -> oxcf. skip_mode == VP9_COMMON * cpi ) { cpi -> sf. pass = cpi -> oxcf. pass_mode ; } else { if ( cpi -> oxcf. pass == VP9_COMMON * cpi ) { cpi -> oxcf. pass = cpi -> oxcf. noise_mode ; } else { if ( cpi -> oxcf. mode_mode == KEY_FRAME ) { if ( cpi -> oxcf. pass == VP9_COMMON * cpi ) { cpi -> oxcf. mode_mode = cpi -> oxcf. pass ; } else { if ( cpi -> oxcf. mode == KEY_FRAME && cpi -> oxcf. mode_mode == KEY_FRAME ) { vp9_FRAME ; } else { if ( cpi,0
689,"<S2SV_ModStart> ( u32 size, u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } <S2SV_ModEnd> return malloc ( <S2SV_ModStart> malloc ( size * num",1
690,<S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> { if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,1
691,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,1
692,<S2SV_ModStart> 1 ) { <S2SV_ModEnd> return 0 ;,0
693,"<S2SV_ModStart> scn, root_storage <S2SV_ModEnd> ) ) <",1
694,"<S2SV_ModStart>, sizeof ( * info )",0
695,<S2SV_ModStart> (! eof && vars -> str. c!= vars -> ptr,1
696,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
697,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
698,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc!= X86EMUL_CONTINUE ) break <S2SV_ModStart> case 4 : rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val )",1
699,"<S2SV_ModStart> list. name, true",1
700,<S2SV_ModStart> void * end <S2SV_ModEnd> ) { struct <S2SV_ModStart> ) ; void * dbuf = NULL ; void * <S2SV_ModStart> bad ) ; if (! ticket_buf ) { ticket_buf = NULL ; ret = - ENOMEM ; goto out ; } <S2SV_ModStart> bad ) ; if (! ticket_buf ) { ticket_buf = - ENOMEM ; dlen = - ENOMEM ; goto out ; } <S2SV_ModStart> bad ) ; kfree ( ticket_buf ) ;,0
701,"<S2SV_ModStart> / 2 ; if ( count > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ) ;",1
702,<S2SV_ModStart> ( rq ) <S2SV_ModEnd> ; if (,0
703,,0
704,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
705,<S2SV_ModStart> ( body ) < 0,0
706,<S2SV_ModStart> NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_FIELD_REF,0
707,<S2SV_ModStart> ; if ( cmd ) <S2SV_ModEnd> return 0 ;,0
708,"<S2SV_ModStart>, annotation, NULL, true",0
709,"<S2SV_ModStart> err = 0 ; if (! net_eq ( current -> nsproxy -> net_ns, sock_net ( sk ) ) ) return - EINVAL",1
710,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
711,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
712,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
713,"<S2SV_ModStart> ) / 3 ) ThrowReaderException ( CorruptImageError, ""InvalidColormapIndex"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries",0
714,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,1
715,,1
716,<S2SV_ModStart> { ret = <S2SV_ModEnd> ops ; },0
717,<S2SV_ModStart> ) ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ) { <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
718,<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> handle ) ; <S2SV_ModEnd> inode -> i_mmap_sem,0
719,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> << 8 ; uint32_t * track_size ; uint32_t * midi_tracks ; uint32_t * midi_tracks ; uint32_t * midi_tracks ; uint32_t * midi_size ; uint32_t * midi_tracks ; uint32_t * midi_val <S2SV_ModEnd> ; uint32_t track_size <S2SV_ModStart> << 8 ; track_size = malloc ( sizeof ( uint8_t * midi_size ) <S2SV_ModEnd> ; uint32_t * <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> = * midi_data <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> = * midi_val <S2SV_ModStart> << 8 ; track_size = malloc <S2SV_ModStart> << 8 ; track_size [ i ] = tmp_val ; track_size -= midi_size ; <S2SV_ModStart> << 3 ; track_size [ i ] = malloc ( midi_val <S2SV_ModEnd> ; track_size -= <S2SV_ModStart> ; midi_data [ i ] = malloc ( <S2SV_ModStart> << 3 ; track_size [ i ] = tmp_val <S2SV_ModEnd> ; track_,0
720,"<S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val * <S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val *",1
721,<S2SV_ModStart> * bh ; unsigned int table_len ; <S2SV_ModStart> -> b_data ; lvd = le32_to_cpu ( lvd -> mapTableLength ) ; if ( lvd < sizeof ( * lvd ) ) { goto out_err ; } <S2SV_ModStart> -> table_len ; <S2SV_ModEnd> if ( lvd,0
722,,0
723,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
724,<S2SV_ModStart> ++ ) { if ( ps_codec -> i_errno == 0 ) return (,0
725,"<S2SV_ModStart> g_tv_comment, FILENAME_COMMENT ) ; problem_data ( 0",0
726,"<S2SV_ModStart> media_pad_desc pad ; memset ( & pad, 0, sizeof ( pad ) ) ; <S2SV_ModStart> ) continue ; memset ( & link, 0, sizeof ( link ) ) ;",1
727,,0
728,"<S2SV_ModStart>, extent, height, <S2SV_ModStart> ""UnableToReadImageData"" ) ; <S2SV_ModEnd> height = sun_info <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( sun_info. type == RT_ENCODED ) <S2SV_ModStart> sun_data ) ; <S2SV_ModEnd> p = sun_pixels",0
729,"<S2SV_ModStart>, krb5_principal client_principal, const char * tgt_realm <S2SV_ModStart> principal ), tgt_realm <S2SV_ModEnd> ) ; if",1
730,"<S2SV_ModStart> ReadBlobLSBLong ( image ) ; if ( bmp_info. number_colors > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
731,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = ireq ->,1
732,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
733,"<S2SV_ModStart>!= 0 ) { int tend_off = skb_transport_offset ( skb ) + tlen ; <S2SV_ModStart> ( csum, skb_checksum ( skb, tend_off, <S2SV_ModEnd> offset, 0 <S2SV_ModStart> ) ) ; }",1
734,"<S2SV_ModStart> gfn, page_size >> PAGE_SHIFT",0
735,<S2SV_ModStart> 0x00 } ; if ( cmd -> msg_len > sizeof ( b ) - 4 ) return - EINVAL ;,1
736,"<S2SV_ModStart> perf_event * ctx <S2SV_ModEnd>, struct ctx <S2SV_ModStart> -> event, <S2SV_ModEnd> -> ctx ->",0
737,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> ; return ( <S2SV_ModEnd> value & 0xffff <S2SV_ModStart> value & 0xffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> [ 3 ] <S2SV_ModEnd> ; return (,0
738,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> ret <S2SV_ModEnd> nid_lock ( <S2SV_ModStart> ) ; spin_lock_irq ( & e -> i_lock ) ; <S2SV_ModStart> = true ; i -> nid_list = NULL ; i -> nid_list [ i ] = true ; i ++ ; spin_unlock ( & e -> nid_lock ) ; <S2SV_ModStart> return ret ; spin_lock_lock ( & e -> nid_list_lock ) ; <S2SV_ModStart> return ret ; } spin_unlock ( & nm_i -> i_lock ) ;,0
739,<S2SV_ModStart> int flags ; <S2SV_ModEnd> return 0 ;,0
740,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> ++ cons ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> extra. type ) ; netbk_fatal_tx_err ( vif",1
741,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ;,1
742,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
743,,0
744,"<S2SV_ModStart> ) ) { ND_TCHECK2 ( * tptr ) ; <S2SV_ModStart> len ) ; if ( len > 6 ) { ND_PRINT ( ( ndo, ""\\t]"" ) ) ; break ; }",0
745,<S2SV_ModStart> -> data ; unsigned <S2SV_ModStart> body -> unit_size || len < sizeof ( struct oz_multiple_fixed ) - 1 <S2SV_ModStart> ( len - ( <S2SV_ModStart> struct oz_multiple_fixed ) - 1 ) <S2SV_ModEnd> ) / body,1
746,<S2SV_ModStart> cpi ) { # if CONFIG_VP9_COMMON * cm = & cpi -> common ; # endif <S2SV_ModStart> = 1 ; <S2SV_ModEnd> return i ; <S2SV_ModStart> = 1 ; <S2SV_ModEnd> return i,0
747,<S2SV_ModStart> ) ; return,0
748,"<S2SV_ModStart> status = IMAP_FATAL ; return ; } if ( strlen ( idata -> buf ) < litlen ) { mutt_debug ( 1, ""Error <S2SV_blank> parsing <S2SV_blank> STATUS <S2SV_blank> mailbox\\n"" )",1
749,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
750,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext4_extent_header ) + sizeof ( struct ext4_extent ) * le16_to_cpu ( bh -> b_data ) + ext_size ) ; <S2SV_ModStart> = 0 ; memset ( bh -> b_data + ext_size, 0, sizeof ( struct ext_extent ) ) ;",0
751,<S2SV_ModStart> 0 ) { if ( ps_bit_buffer < 16 ) return 0 ;,0
752,<S2SV_ModStart> ; cmap_len = get_tga_ushort <S2SV_ModEnd> ( & tga,0
753,<S2SV_ModStart> ; ssize_t ret ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
754,<S2SV_ModStart> timespec. tv_to_cpu ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
755,<S2SV_ModStart> ; strip = MagickFalse ; return 0,0
756,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
757,,0
758,<S2SV_ModStart> ; int error = 0 <S2SV_ModStart> &= PAGE_MASK ; if ( address < mmap_min_addr ) return - EPERM <S2SV_ModEnd> ; prev =,1
759,"<S2SV_ModStart> { umode_t mode <S2SV_ModEnd> ; error = <S2SV_ModStart> ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart>, & mode, & acl <S2SV_ModStart> if ( error <S2SV_ModEnd> ) return error <S2SV_ModStart> return error ; <S2SV_ModEnd> error = xfs_set_mode",1
760,"<S2SV_ModStart>, int optional, const char * rootfs <S2SV_ModStart> endif if ( safe_mount <S2SV_ModEnd> ( fsname, <S2SV_ModStart> MS_REMOUNT, data, rootfs <S2SV_ModStart>, data ) < 0",1
761,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
762,"<S2SV_ModStart> it_overrun = - 1LL <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> info -> si_overrun = timer_overrun_to_int ( timr, info -> si_overrun ) <S2SV_ModEnd> ; } unlock_timer",1
763,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
764,<S2SV_ModStart> struct static_key * once_key <S2SV_ModEnd> ) { static <S2SV_ModStart> ; __net_random_once_disable_jump ( once_key <S2SV_ModEnd> ) ; return,1
765,,0
766,<S2SV_ModStart> ; if ( IPCB ( skb ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> &&! opt,1
767,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
768,<S2SV_ModStart> ; if ( key_is_negative ( key <S2SV_ModEnd> ) ) return,0
769,"<S2SV_ModStart> v |= ( JAS_CAST ( uint_fast32_t, c ) <S2SV_ModEnd> << 24 )",1
770,<S2SV_ModStart> NULL ) { if ( skb -> len < ROSE_CALL_REQ_ADDR_LEN ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> -> len = len + ROSE_CALL_REQ_OFF <S2SV_ModEnd> ; if (,0
771,"<S2SV_ModStart> srcu ) ; kvm_iommu_unmap_pages ( kvm, & old ) ; <S2SV_ModStart> ) goto out_free <S2SV_ModEnd> ; r = <S2SV_ModStart> ; if ( npages ) { r = kvm_iommu_map_pages ( kvm, & new ) ; if ( r ) goto out_slots ; } if ( <S2SV_ModStart> return 0 ; out_slots : kfree ( slots ) ;",1
772,<S2SV_ModStart> if ( indev && indev -> ifa_list <S2SV_ModEnd> ) { ifa,1
773,<S2SV_ModStart> { return res <S2SV_ModEnd> ; } if,0
774,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",1
775,<S2SV_ModStart> } if ( data_body == NULL &&,0
776,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) ; },0
777,"<S2SV_ModStart> } if ( options -> flags & ( UV_PROCESS_SETUID | UV_PROCESS_SETGID ) ) { SAVE_ERRNO ( setgroups ( 0, NULL ) ) ; } if (",1
778,<S2SV_ModStart> -> priv ; int ret = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ret = - EINVAL ; mutex_lock ( & d -> data_mutex ) ; ret = rw_mutex_unlock ( & d -> data_mutex ) ; if (! ret ) return - EINVAL ;,0
779,<S2SV_ModStart> client ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
780,<S2SV_ModStart> book -> dim && i < n,1
781,"<S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> -cpy <S2SV_ModEnd>, ""\\n"" ) ;",0
782,<S2SV_ModStart> == - EEXIST || ret == - EOVERFLOW,1
783,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; if <S2SV_ModStart> unix_tot_inflight ++ ; } fp -> f_cred -> user -> unix_inflight ++ ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
784,"<S2SV_ModStart> size_t chanmap_size = SF_MIN ( <S2SV_ModStart> sf. channels, layout_tag & 0xffff )",1
785,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
786,<S2SV_ModStart> ms ) { uint32_t <S2SV_ModEnd> nestsize = ( <S2SV_ModStart> nestsize = ( uint32_t <S2SV_ModEnd> ) ms ->,1
787,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
788,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
789,<S2SV_ModStart> ; xref = safe_calloc ( <S2SV_ModEnd> count + 1,0
790,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
791,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ) <S2SV_ModStart> ( opt ) { atomic_sub ( <S2SV_ModEnd> opt -> tot_len <S2SV_ModStart> opt ) ; },0
792,,0
793,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * ),0
794,<S2SV_ModStart> sock ) ; <S2SV_ModEnd> } if (,0
795,,0
796,<S2SV_ModStart> ) { struct in_device * idev <S2SV_ModEnd> = ( ( <S2SV_ModStart> ) -> ifa_dev <S2SV_ModEnd> ; struct idev ->,0
797,<S2SV_ModStart>!= mm ) { smp_mb ( ) ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> ) ) ; smp_mb ( ) ;,1
798,"<S2SV_ModStart>, unsigned long stride, vpx_writer <S2SV_ModEnd> * wb )",0
799,"<S2SV_ModStart> val ) { int temp_size = 500 ; char * temp = malloc ( temp_size ) <S2SV_ModEnd> ; int i <S2SV_ModStart> ; ) { if ( i >= temp_size ) { temp_size *= 2 ; temp = realloc ( temp, temp_size ) ; }",1
800,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
801,<S2SV_ModStart> ; if (! dlen ||,0
802,"<S2SV_ModStart> NULL ) { if <S2SV_ModEnd> ( errno == <S2SV_ModStart> == ENOMEM ) <S2SV_ModEnd> log_warn ( ""lldp"" <S2SV_ModStart>, ""unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> "" ""for <S2SV_blank> management <S2SV_blank> address"" ) ; else log_warn ( ""lldp"", ""too <S2SV_blank> large <S2SV_blank> management <S2SV_blank> address <S2SV_blank> "" ""received <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname",1
803,<S2SV_ModStart> object + size < * object || * object + size <S2SV_ModStart> object + size < * 2,0
804,"<S2SV_ModStart> ( interface, ENC28J60_ELE <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J60_EIR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J60_EIR <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ( interface -> <S2SV_ModStart> ( interface, ENC28J60_EIR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J60_E0 <S2SV_ModEnd> ) ) ; kfree ( interface",0
805,<S2SV_ModStart> all_channels_lock ) ; put_net ( pch -> chan_net ) ; pch -> chan_net = NULL ;,1
806,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct btrfs_dir_item * di = NULL <S2SV_ModStart> - ENOMEM ; if (! di ) { di = - ENOMEM ; goto out ; } <S2SV_ModEnd> if (! <S2SV_ModStart> TR_REPLACE ) ) { ret = - ENOMEM ; goto out ; } <S2SV_ModStart> out ; } di = btrfs_release_dir_item ( trans, path, name, name, 0 ) ; if (! di ) ret = - ENOMEM ; di = - ENOMEM ; goto out ; } if ( trans -> flags & XATTR_REPLACE ) { di = NULL ; if (! di ) { di = - ENOMEM ; goto out ; } di = btrfs_lookup_xattr ( trans, path, name, name, name_len, name, name, 0 ) ; if (! di ) { di = NULL ; goto out ; } ret = - ENOMEM ; } ret = btrfs_release_item <S2SV_ModEnd> ( trans, <S2SV_ModStart>, path, <S2SV_ModStart>, path, <S2SV_ModEnd>, path, <S2SV_ModStart> out ; } ret =",0
807,"<S2SV_ModStart> count ) ; char * txt = op -> txt ; int txt = strlen ( op -> txt ) ; int txtLeft = R_ASM_BUFSIZE - txtLen ; int txt += txtLen ; <S2SV_ModStart> < count && txtLen <S2SV_ModEnd> + 10 < <S2SV_ModStart> ++ ) { snprintf ( txt, txtLeft <S2SV_ModEnd>, ""%d <S2SV_blank> "",",0
808,"<S2SV_ModStart> client -> proxy ) ; g_byte_array_free ( client -> auth_buffer, TRUE",1
809,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
810,<S2SV_ModStart> ; if ( key_is_negative ( key <S2SV_ModEnd> ) ) return,1
811,"<S2SV_ModStart> NEED_OP ( t, 0",0
812,<S2SV_ModStart> ( ret = fpath <S2SV_ModEnd> ) ; if,0
813,"<S2SV_ModStart> len > TEMP_FAILURE_RETRY ( <S2SV_ModStart> packet, length )",0
814,<S2SV_ModStart> vmx_vpid_bitmap ) ; <S2SV_ModEnd> for ( msr <S2SV_ModStart> 0x83f ) ; <S2SV_ModEnd> if ( enable_ept,1
815,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,0
816,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, 0 )",0
817,,0
818,<S2SV_ModStart> __func__ ) ; if ( l == 0 ) return 0 ;,0
819,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
820,<S2SV_ModStart> INDENT_INCR ; } if ( tbl -> indent < 0 ) tbl -> indent = 0 ; <S2SV_ModStart> -= INDENT_INCR ; if ( offset < 0 ) offset = 0 ;,1
821,,0
822,,0
823,"<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( l,",0
824,"<S2SV_ModStart>, '\\"" ) ; # ifdef CONFIG_REFLOW",0
825,<S2SV_ModStart> ; if ( key_is_positive ( key <S2SV_ModEnd> ) ) zap,1
826,"<S2SV_ModStart> ) -> filter ; memset ( & uf, 0, sizeof ( uf ) )",1
827,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( pbi,",0
828,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; } exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
829,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
830,<S2SV_ModStart> } if ( ( fibsize < ( sizeof ( struct user_aac_srb ) - sizeof ( struct user_sgentry ) ) ) || ( <S2SV_ModStart> ( struct aac_fibhdr ),1
831,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( cc0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorEncodeTile"", ""%s"", ""(cc0%rowsize)!=0"" ) ; return 0 ; } <S2SV_ModEnd> while ( cc",1
832,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
833,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModStart> Resource_size_t input_size <S2SV_ModEnd> ) { input_backwards_size <S2SV_ModStart> = input_size ; } else { <S2SV_ModStart> = input_size ; } <S2SV_ModEnd> } else { <S2SV_ModStart>, character_bytes_matched, character_size <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( input_size, RE_SCAN_LIMIT && input -> action < character_size <S2SV_ModEnd> )!= 0 <S2SV_ModStart> == '\\n"" ) { <S2SV_ModStart> input_word_size ) ; } <S2SV_ModStart> = NULL ; } <S2SV_ModStart> = input_size ; } <S2SV_ModEnd> } else { <S2SV_ModStart> = input_size ; }",0
834,"<S2SV_ModStart> int sse = UINT_MAX <S2SV_ModEnd>, best_rd_sse = <S2SV_ModStart>, best_rd_sse = UINT_MAX <S2SV_ModEnd>, best_sse = <S2SV_ModStart> * best_sse = UINT_MAX <S2SV_ModEnd>, best_sse = <S2SV_ModStart>, best_sse = UINT_MAX <S2SV_ModEnd> ; # if CONFIG_MAX <S2SV_ModStart>, best_rd_sse = UINT_MAX <S2SV_ModEnd> ; # if CONFIG_MAX",0
835,"<S2SV_ModStart> svm, AC_VECTOR ) ; set_exception_intercept ( svm, DB_VECTOR",0
836,"<S2SV_ModStart> ; if ( ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 1 ) ) )",0
837,"<S2SV_ModStart> sst, const cdf_directory_t * root_storage <S2SV_ModEnd> ) { cdf_summary_info_header_t <S2SV_ModStart> break ; } if ( root_storage ) { <S2SV_ModStart> = cdf_clsid_to_mime ( root_storage -> d_storage_uuid <S2SV_ModEnd>, clsid2desc ) <S2SV_ModStart> - 2 ; } <S2SV_ModStart>, count, root_storage <S2SV_ModEnd> ) ; free",1
838,,0
839,<S2SV_ModStart> -> length ) ; if ( err ) return - EFAULT,1
840,,0
841,<S2SV_ModStart> if ( prev && <S2SV_ModEnd> ( FRAG6_CB ( <S2SV_ModStart> > 0 ) <S2SV_ModEnd> ) return 0,0
842,<S2SV_ModStart> { uint16 bitspersample = 1,0
843,"<S2SV_ModStart> a ) { struct archive_string error_c ; struct archive_string error_number ; int archive_number ; int archive_number ; archive_string_init ( & error_number, a -> archive, a -> archive, error_number, & error_number, a -> archive ) ; if ( archive_size!= ARCHIVE_FALSE ) return ( ARCHIVE_FATHS ) ; archive_set_error ( & error_number, a -> archive, a -> archive, error_number, error_number, ( & error_number, a -> archive ) ; if ( error_string. a -> archive )!= ARCHIVE_FATOMM ) { archive_error ( & error_number, ""%s"", error_line ) ; return ( ARCHIVE_FATOMM ) ; } archive_set_error ( & a -> archive, error_name, a -> archive ) ; if ( r!= ARCHIVE_ERRNO ) { archive_set_error ( & error_file ) ; } archive_set_error ( & a -> archive, NULL ) ; <S2SV_ModEnd> return ( ;",0
844,"<S2SV_ModStart> ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL, rootfs -> path? rootfs -> mount : <S2SV_ModEnd> NULL )!=",1
845,"<S2SV_ModStart> * inode ; struct iinfo ; int iinfo = 0 ; <S2SV_ModStart> ( inode -> i_len ) ; if ( i_len > bhdr ) goto out ; <S2SV_ModStart> ( bhdr ) { if ( iinfo -> i_len > bhdr ) goto out ; } <S2SV_ModStart> ( bs, inode -> i_len ) ; if ( i_len > bhdr ) goto out ; <S2SV_ModStart> ( bhdr, inode -> i_len ) ; if ( i_len > bh -> i_len ) goto out ;",0
846,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( lfm,",0
847,<S2SV_ModStart> dst_size ) { <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return - 1 <S2SV_ModEnd> ; } <S2SV_null>,0
848,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",0
849,<S2SV_ModStart> mq_ops ) ; fq -> tag = 0 ;,0
850,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
851,"<S2SV_ModStart>, r ) <S2SV_ModEnd> ; if (",0
852,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; if (! <S2SV_ModStart>, cc ) ) return 0 <S2SV_ModStart> wc ) ; return 1 ;",1
853,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
854,<S2SV_ModStart> __be32 daddr ; struct ip_options_rcu * inet_opt ; <S2SV_ModStart> return 0 ; rcu_read_lock ( ) ; rcu_read_lock ( ) ;,0
855,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
856,<S2SV_ModStart> hm_path ) ; <S2SV_ModEnd> } else {,0
857,<S2SV_ModStart> == NULL ) return - EINVAL ;,0
858,"<S2SV_ModStart> ""`%s\'"", option ) ; geometry = DestroyString ( geometry",0
859,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * ),0
860,<S2SV_ModStart> key_data ) ; if ( key_len < 0 ) goto invalid ;,0
861,"<S2SV_ModStart> OP_ENDCATCH ) ; emit ( J, F, OP_ENDTRY ) ;",1
862,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_row_idx <S2SV_ModStart> return ; } LIBXSMM_ASSERT ( 0!= l_row && 0!= l_column ) ;",1
863,<S2SV_ModStart> = 0 ; if ( len < 16 ) { <S2SV_ModStart> = 0 ; },0
864,"<S2SV_ModStart> uint8 result ; uint32 <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> ; STREAM s ; struct stream packet <S2SV_ModStart> return False ; packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> id <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",1
865,"<S2SV_ModStart> ; cleanup : if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> ; if (",1
866,"<S2SV_ModStart> l ) ; <S2SV_ModEnd> } } if <S2SV_ModStart> XML_ERR_NAME_TOO_LONG, ""Name"" ) ; return ( NULL ) ; } if ( ctxt -> input -> cur - ctxt -> input -> base < len ) { xmlFatalErr ( ctxt, XML_ERR_INTERNAL_ERROR, ""unexpected <S2SV_blank> change <S2SV_blank> of <S2SV_blank> input <S2SV_blank> buffer""",1
867,<S2SV_ModStart> if ( ci < <S2SV_ModEnd> 2SV_null> <S2SV_null>,0
868,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
869,<S2SV_ModStart> & new_map ) <S2SV_ModEnd> ) goto out,0
870,<S2SV_ModStart> } if ( ptr [ 0 ] &&,0
871,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> ) ; } smb_ofile_flush ( sr, <S2SV_ModEnd> sr -> fid_ofile <S2SV_ModStart> sr -> fid_ofile <S2SV_ModEnd> ) ; (",1
872,<S2SV_ModStart> * jas_ulong <S2SV_ModEnd> buf ; if (,0
873,<S2SV_ModStart> 4 ) { memcpy <S2SV_ModEnd> ( x -> <S2SV_ModStart> 4 ) ; memcpy <S2SV_ModEnd> ( xd ->,0
874,"<S2SV_ModStart> addrtype = TIPC_ADDR_ID ; memset ( & addr -> addr, 0, sizeof ( addr -> addr ) )",1
875,"<S2SV_ModStart> ( user_alloc && ( <S2SV_ModStart> PAGE_SIZE - 1 ) ) ||! access_ok ( VERIFY_WRITE, mem -> userspace_addr, mem -> memory_size",1
876,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
877,<S2SV_ModStart> } if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; } } \\\n} <S2SV_ModEnd> if ( strncasecmp,1
878,,0
879,,0
880,"<S2SV_ModStart> WaveHeader WaveHeader ; int format_chunk = 0 ; <S2SV_ModStart>, format ; if ( format_chunk ++ ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",1
881,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",0
882,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_8BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr ) ;,0
883,<S2SV_ModStart> ~ SNDRV_TIMER_IFLG_RUNNING ; list_del_init ( & timeri -> ack_list ) ; list_del_init ( & timeri -> active_list ) ;,1
884,,0
885,<S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_flags_compat &&,1
886,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
887,"<S2SV_ModStart> ; if ( strcmp ( sub_demuxer -> name, ""srt"" ) && strcmp ( sub_demuxer -> name, ""ass"" ) ) goto error ; if (",1
888,"<S2SV_ModStart> krb5_data d ; d = make_data ( ( d, strlen ( d ) + 1 ) <S2SV_ModEnd> ) ; if",0
889,"<S2SV_ModStart> void vpx_write_literal <S2SV_ModEnd> ( w,",0
890,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
891,<S2SV_ModStart> dptr ++ = ROSE_CALL_REQ_ADDR_LEN_VAL <S2SV_ModEnd> ; memcpy (,1
892,<S2SV_ModStart> = new_ns ; new_ns -> mounts ++ ;,1
893,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
894,<S2SV_ModStart> ; zip_object_handlers. get_gc = php_zip_get_gc ; zip_object_handlers.,1
895,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if <S2SV_ModEnd> ( iova < <S2SV_ModStart> mem -> iova || length > <S2SV_ModEnd> mem -> iova <S2SV_ModStart> mem -> length || iova,0
896,"<S2SV_ModStart> = 0 ; ND_TCHECK2 ( * dp, sizeof ( * ni6 ) ) ; <S2SV_ModStart> ) + 4 ; ND_TCHECK ( cp [ 0 ] )",1
897,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
898,<S2SV_ModStart> sent = 0 <S2SV_ModEnd> ; smb_msg.,1
899,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; if ( ref -> ref > INT_MAX / 2 ) return false ; <S2SV_ModStart> ref ++ ; return true ;,1
900,<S2SV_ModStart> fs -> clusters + <S2SV_ModEnd> 1 ) get_fat,1
901,<S2SV_ModStart> * tl ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,0
902,<S2SV_ModStart> sk_nulls_node ) ; sk_nulls_node_init ( & sk -> sk_nulls_node ) ;,1
903,<S2SV_ModStart> ) { return ERROR_INV_SLICE_HDR_T <S2SV_ModEnd> ; } if,0
904,<S2SV_ModStart> vma -> vm_file ; <S2SV_ModEnd> if (!,0
905,"<S2SV_ModStart> inode * inode, int relocated ) { int flags = relocated? RR_RELOC_DE : 0 ; <S2SV_ModEnd> int result = <S2SV_ModStart>, inode, flags <S2SV_ModEnd> ) ; if <S2SV_ModStart>, inode, flags | RR_REGARD_XA <S2SV_ModEnd> ) ; }",1
906,<S2SV_ModStart> * inotify_new_data ) { atomic_dec ( & inotify_data -> inotify_data ) ; <S2SV_ModStart> -> inotify_data. user = get_user ( ) ; if ( atomic_dec ( & group -> inotify_user -> inotify_data. user -> inotify_devs ) > inotify_max_devs ) { fsnotify_put_user ( ) ; return ERR_PTR ( - EMFILE ) ; },0
907,<S2SV_ModStart> [ plane ] && in -> linesize [ plane ],0
908,,0
909,<S2SV_ModStart> alloc ( buffer <S2SV_ModEnd> ) ; },0
910,"<S2SV_ModStart> SCALAR_VALUE ) { coerce_reg_to_size ( & <S2SV_ModStart> [ value_regno ], size <S2SV_ModEnd> ) ; }",1
911,"<S2SV_ModStart> = 0 ; uint32 <S2SV_ModEnd> strip, nstrips",1
912,<S2SV_ModStart> base_name ) ; char need_to_append_dot ; struct search_domain * dom ; if (! base_len ) return NULL ; <S2SV_ModEnd> need_to_append_dot = base_name <S2SV_ModStart> : 1 ; <S2SV_ModEnd> for ( dom,1
913,"<S2SV_ModStart> i ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size )",0
914,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = -,1
915,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
916,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if (! context ) return FALSE ; <S2SV_ModStart> == 0 ) { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModStart> 0xFF ) ; } <S2SV_ModStart> < originalSize ) { if (! <S2SV_ModStart> i ], context -> PlaneBuffersLength, originalSize ) ) return FALSE ; }",0
917,<S2SV_ModStart> policy ) { if (! inode_owner_or_capable ( inode ) ) return - EACCES ;,1
918,<S2SV_ModStart> ( s ) < 0,0
919,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
920,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
921,,0
922,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
923,"<S2SV_ModStart> size ) { size_t res ; if ( check_mul_overflow ( num, size, & res ) ) abort ( ) ; <S2SV_ModStart> = malloc ( res <S2SV_ModEnd> ) ; if",0
924,<S2SV_ModStart> ioc ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
925,<S2SV_ModStart> PyObject * ptr <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
926,<S2SV_ModStart> ; if (! data -> desc. bNumEndpoints < 1 ) return - ENODEV ;,0
927,"<S2SV_ModStart> event ) { struct perf_event_context * ctx = event ; <S2SV_ModStart> ( event, ret = perf_event_ctx_lock ( event ) ; if ( event -> cpu ) return - EINVAL ;",0
928,<S2SV_ModStart> sacked_out ) ; if ( newly_acked_sacked <= 0 || WARN_ON_ONCE (! tp -> prior_cwnd ) ) return ;,1
929,,0
930,"<S2SV_ModStart> mask ) { struct skcipher_tfm * tfm ; struct crypto_skcipher * tfm ; tfm = kzalloc ( sizeof ( * tfm ), GFP_KERNEL ) ; if (! tfm ) return ERR_PTR ( - ENOMEM ) ; tfm = <S2SV_ModEnd> crypto_alloc ( sizeof",0
931,<S2SV_ModStart> -> header_len ; <S2SV_ModEnd> if (!,0
932,"<S2SV_ModStart> c -> tile_width <S2SV_ModEnd>, 16 ) <S2SV_ModStart>, 16 ) * 3",1
933,,0
934,,1
935,<S2SV_ModStart> flags ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
936,"<S2SV_ModStart> p ) { return <S2SV_ModEnd> chdlc_print ( ndo <S2SV_ModStart>, p, h -> len <S2SV_ModEnd> ) ; }",1
937,<S2SV_ModStart> (! rc <S2SV_ModEnd> && tcon ),1
938,<S2SV_ModStart> ; if ( skb_is_err_queue ( skb ) &&,0
939,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ) ;",1
940,<S2SV_ModStart> ; s -> tmp = 1 <S2SV_ModEnd> ; s ->,0
941,<S2SV_ModStart> { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE ) { return SECURE_ELEMENT_ERROR_BUF_SIZE,1
942,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
943,<S2SV_ModStart> = ucounts ; new_ns -> mounts = 0 ; new_ns -> pending_mounts = 0 ;,1
944,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
945,<S2SV_ModStart> xbn ) ; <S2SV_ModEnd> return nc ;,0
946,"<S2SV_ModStart> ++ ) { int i ; <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( r,",0
947,"<S2SV_ModStart> ndo, 0 <S2SV_ModEnd> ) ; }",0
948,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
949,,0
950,"<S2SV_ModStart> write_buffer ) { struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> int i ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> < 0 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart>!= 0 ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
951,<S2SV_ModStart> * dev ; if (! name ) return false ; if (,0
952,,0
953,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ndo_vflag ) { if ( cp < 1 ) { ND_PRINT ( ( ( ndo, "" <S2SV_blank> common <S2SV_blank> too <S2SV_blank> short"" ) ) ; break ; }",0
954,<S2SV_ModStart> ) exit_io_context ( tsk,0
955,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void *",0
956,,0
957,<S2SV_ModStart> ) ; } usb_free_urb ( urb ) ;,0
958,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
959,<S2SV_ModStart> ( tag == ASN1_EOC <S2SV_ModEnd> ) { if <S2SV_ModStart> <= 0x7f ) goto check_length ; <S2SV_ModEnd> if ( len <S2SV_ModStart> > sizeof ( len <S2SV_ModEnd> ) - 1,0
960,<S2SV_ModStart> ) val ; <S2SV_ModEnd> memset ( ptr,1
961,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
962,"<S2SV_ModStart> PHP_SHA512_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_SHA256_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_SHA256_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD5_CTX context ; if ( sig_len < sizeof ( digest <S2SV_ModEnd> ) ) {",0
963,<S2SV_ModStart> ] <= max && value [ n ] - min < field -> maxusage <S2SV_ModStart> && field -> value [ n ] - min < field -> maxusage && field -> <S2SV_ModStart> <= max && value [ n ] - min < field -> maxusage &&,1
964,"<S2SV_ModStart> wb ) { struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart>!= 1 ) vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart>!= 1 ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
965,<S2SV_ModStart> if ( argReg > <S2SV_ModEnd> regsz ) {,0
966,"<S2SV_ModStart>, vb_val, true",0
967,"<S2SV_ModStart> 0 ) ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> -> i_mount, args -> rmtvaluelen <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; return 0 <S2SV_ModStart> -> valuelen < args -> rmtvaluelen ) { args -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; return XFS_ERROR <S2SV_ModStart> -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; } return",1
968,"<S2SV_ModStart>, sizeof ( * info )",0
969,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> NULL ; },0
970,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) &&! test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) &&",1
971,"<S2SV_ModStart> ) ) ; if ( LTXTQUERY_TOO_BIG ( state. num, state. sumlen ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""ltxtquery <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ) ) ;",1
972,<S2SV_ModStart> } } else {,0
973,<S2SV_ModStart> ; if (! EXT4_SB ( inode -> i_sb ) -> s_journal <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd>! handle ),1
974,,0
975,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; char <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, fp )",0
976,,0
977,<S2SV_ModStart> -> code ) <S2SV_ModEnd> ; if (,0
978,"<S2SV_ModStart> void ) { strncpy <S2SV_ModEnd> ( l, <S2SV_ModStart> str, L_BUFSIZE <S2SV_ModEnd> ) ; }",0
979,,0
980,,1
981,<S2SV_ModStart> * output ; MagickBooleanType status ; <S2SV_ModStart> ) ; } status = MagickTrue ; <S2SV_ModStart> i ++ ) { <S2SV_ModEnd> input = fopen_utf8 <S2SV_ModStart> input ) ) if ( status!= c ) status = MagickFalse ; <S2SV_ModStart> ( void ) fclose ( input <S2SV_ModEnd> ) ; },0
982,<S2SV_ModStart> ( si <S2SV_null> <S2SV_null>,0
983,"<S2SV_ModStart> ( sb, KERN_ERR,",1
984,"<S2SV_ModStart> passwd * pwd, const char * prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> & tmpname, ""/etc"", prefix <S2SV_ModEnd> ) ) ==",1
985,"<S2SV_ModStart> int n, v )",0
986,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
987,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
988,<S2SV_ModStart> 0 ) { int class = <S2SV_ModEnd> getClientTypeByName ( v <S2SV_ModStart> j ] ) ; if ( class <S2SV_ModStart> == - 1 || class == CLIENT_TYPE_MASTER,1
989,<S2SV_ModStart> * dev ; if (! name ) return false ; if (,0
990,<S2SV_ModStart> # ifdef HAVE_PATH | O_CLRNOFOLLOW | O_NOFOLLOW <S2SV_ModStart> ) ; } # endif,0
991,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; BT_DBG (,1
992,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
993,<S2SV_ModStart> ; if (! p -> length ) return false ; if (,0
994,<S2SV_ModStart> = e_error ; ps_dec -> u4_error = 0 ;,0
995,<S2SV_ModStart> * tilemap ; if ( tilemap_size == 0 || tilemap_size!= tilemap_size,0
996,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ; return ( 0 ) <S2SV_ModStart>, length ) ) ; ND_TCHECK ( cp [ 2 ] <S2SV_ModStart> 4 ) { ND_TCHECK2 ( cp [ len ], 4 ) ; <S2SV_ModStart> ) ; } return ( 0 ) ; trunc : return ( - 1 ) ;",1
997,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> return 0 ;,0
998,"<S2SV_ModStart>, vpx_codec_alg_priv ( ctx ) <S2SV_ModEnd>, flags ; <S2SV_ModStart> ; if (! capable ( ctx ) ) return VPX_CODEC_INVALIDDATA ; <S2SV_ModEnd> } if (",0
999,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> + 1, ""protos=%490s"" <S2SV_ModEnd>, buf,",0
1000,<S2SV_ModStart> if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks,1
1001,"<S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu,",1
1002,<S2SV_ModStart> ) ; } else <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1003,<S2SV_ModStart> studio_profile ) { <S2SV_ModEnd> if (!,1
1004,<S2SV_ModStart> nsops < 1 || nsops > SEMOPM,1
1005,<S2SV_ModStart> ( i = 0,0
1006,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; },1
1007,<S2SV_ModStart> ] ) ; if ( ptr -> depth > 0 ) {,0
1008,<S2SV_ModStart> if ( q < p || q,0
1009,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( bytes_matched,0
1010,"<S2SV_ModStart> str ) { size_t len ; <S2SV_ModStart> case LEX_EOF : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""STR"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""TEMPLATE <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""TEMPLATE <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""TEMPLATE <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return",0
1011,<S2SV_ModStart> ~ mnt_flags & MNT_SYNODEV <S2SV_ModEnd> ) ; if,0
1012,"<S2SV_ModStart> void encode_struct vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 3 ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> } else { vpx_wb_write_literal <S2SV_ModEnd> ( w,",0
1013,,1
1014,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
1015,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> uint32_t pos ; if ( inode -> i_size > inode -> i_sb -> s_blocksize ) { err = - ENAMETOOLONG ; goto out_unmap ; } <S2SV_ModStart>! bh ) { err = - EIO ; goto out_unlock_inode ; } <S2SV_ModEnd> symlink = bh <S2SV_ModStart> return 0 ; out_unlock_inode <S2SV_ModEnd> : up_read ( <S2SV_ModStart> page ) ; out_unmap :,1
1016,<S2SV_ModStart> else if ( cpu_has_secondary_exec_ctrls ( ) && ( vmcs_read32 ( SECONDARY_VM_EXEC_CONTROL ) & SECONDARY_EXEC_VIRTUALIZE_X2APIC_MODE ) <S2SV_ModEnd> ) { if,1
1017,"<S2SV_ModStart> if ( ent == NULL ) { st = KRB5_KDB_NOENTRY ; <S2SV_ModEnd> goto cleanup ; <S2SV_ModStart> cleanup ; } st = populate_policy ( context, ld, ent, pol_name, * policy ) ;",1
1018,,0
1019,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> struct bh_blocksize_t <S2SV_ModStart> offset ) { int bh_blocks = ( struct bh, bh, bh -> bh, bh_blocksize, bh -> bh_size ) ; if ( ext2_size > bh -> bh_blocksize ) goto out_err ; <S2SV_ModStart> = 1 ; }",0
1020,<S2SV_ModStart> ) ; } if ( psf -> header. count >= psf -> header. indx ) return 0 ;,0
1021,<S2SV_ModStart> return - EINVAL ; if ( msg -> len < 2 ) return - EINVAL <S2SV_ModEnd> ; if (,0
1022,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
1023,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1024,<S2SV_ModStart> ) ; return,0
1025,"<S2SV_ModStart> int num_items_scanned ; guint pkt_len ; int <S2SV_ModEnd> pktnum, hr <S2SV_ModStart> + 64, ""LEN=%9u"" <S2SV_ModEnd>, & pkt_len",0
1026,<S2SV_ModStart> ; int err = 0 ; msg -> msg_namelen,1
1027,"<S2SV_ModStart> ; if ( zend_hash_find <S2SV_ModEnd> ( ht,",1
1028,<S2SV_ModStart> ) ) ; nla_strlcpy <S2SV_ModEnd> ( link_info.,0
1029,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> ; } } io -> io_cleanup = io -> io_cleanup ;,0
1030,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",1
1031,<S2SV_ModStart> p -> tokenpos >= ( <S2SV_ModEnd> p -> tokenlen <S2SV_ModStart> p -> tokenlen - 1 ),1
1032,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> case BLOCK_8x8 : vpx_write_bit_depth <S2SV_ModEnd> ( sb64_depth <S2SV_ModStart> return false ; break ; case VP9_COMP : vpx_write_bit_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } <S2SV_ModEnd> } else { return",0
1033,<S2SV_ModStart> = 0 ; dev -> priv_flags = 0 ;,0
1034,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> & 0xFFFF ; },1
1035,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
1036,"<S2SV_ModStart> ( arg, EINVAL <S2SV_ModEnd>, NULL,",0
1037,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1038,"<S2SV_ModStart> -> stratum_port ; snprintf ( address, 254 <S2SV_ModEnd>, ""%s:%s"",",1
1039,<S2SV_ModStart> } if (! strlen ( page <S2SV_ModEnd> ) ) {,0
1040,<S2SV_ModStart> ; unsigned int actual_size = r -> begin < actual_size? r -> begin : 0 ; unsigned int limit_r_end = r -> begin < actual_size? r -> end : actual_size ; <S2SV_ModStart> int n_r_end = limit_r_r_end - limit_end,0
1041,<S2SV_ModStart> p ++ ) ; if ( ( void * ) p > head -> iov_base + head -> iov_len ) return 0,0
1042,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; struct o2nm_lock_subsystem (,0
1043,"<S2SV_ModStart> -> vp8 ) { <S2SV_ModEnd> if ( vp8 <S2SV_ModStart> buffer_len > UINT32_MAX_FRAME_LEN ) { av_log2b ( vp8, AV_LOG_ERROR, ""Invalid <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> packet <S2SV_blank> too <S2SV_blank> long\\n"" ) ; return ; } <S2SV_ModStart> ( vp8 ) ; if ( vp8 ) { vpx_free ( wb ) ; return false ; } <S2SV_ModStart> ( vp8 ) ; vp8 ) ;",0
1044,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
1045,<S2SV_ModStart> ) ) { size_t <S2SV_ModEnd> max ; if,0
1046,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } else {,0
1047,<S2SV_ModStart> key_ref ) ; ret = key_read <S2SV_ModEnd> ( key ),0
1048,<S2SV_ModStart> uint16_t ) ; if ( cmd == 0 ) break ;,0
1049,<S2SV_ModStart> ( sptr && (,0
1050,"<S2SV_ModStart> r ) { if ( X509_ALGOR_cmp ( a -> sig_alg, a -> cert_info -> signature ) ) return 0 ;",1
1051,<S2SV_ModStart> 0 ) ; hrtimer_try_to_cancel <S2SV_ModEnd> ( & stime,1
1052,"<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> low ) ; }",0
1053,"<S2SV_ModStart> case L2CAP_MODE_CONRING : memcpy ( l2, 0, sizeof ( struct l2cap_conf_req ) ;",0
1054,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
1055,<S2SV_ModStart> -> chunksize = UINT64_MAX <S2SV_ModEnd> ; for (,1
1056,,0
1057,<S2SV_ModStart> ( s ) ; if (!,0
1058,<S2SV_ModStart> } err = crypto_rng_alg ( tfm ) <S2SV_ModEnd> -> seed (,1
1059,<S2SV_ModStart> = uid ; <S2SV_ModEnd> new -> count <S2SV_ModStart> new -> count = NULL <S2SV_ModEnd> ; spin_lock_irq (,0
1060,<S2SV_ModStart> ) ; } if ( err == 0 ) goto out_put ; <S2SV_ModStart> err ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1061,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1062,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> = 0 ; len - len ;,0
1063,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { if ( <S2SV_ModStart> ) ; } if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result ) ;,1
1064,"<S2SV_ModStart> * state, fmode_t fmode, <S2SV_ModStart> -> state, fmode <S2SV_ModEnd> ) goto out_t",0
1065,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1066,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1067,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void oidc_scrub_headers (,1
1068,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int64_t <S2SV_ModEnd> int64_t <S2SV_ModStart> int64_t dist, VP9_COMMON * const int64_t * const int64_t * const int64_t * const cm, int64_t * dist, int64_t * dist, int64_t dist, int64_t dist, int64_t dist, int64_t dist, int64_t dist, int64_t dist, int64_t dist, int64_t best_t best_rd ) ; unsigned int64_t best_rd ) { unsigned int64_t best_t best_rd ) ; int64_t dist ; int64_t dist ; int64_t best_rd = 0 ; int64_t best_diff = 0 ; const int64_t best_thresh = 0 ; int64_t best_diff = 0 ; const uint8_t * dequant = 0 ; const uint8_t * dequant = 0 ; const uint8_t * dequant = 0 ; const uint8_t * dequant = 0 ; const uint8_",0
1069,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),0
1070,"<S2SV_ModStart> ND_TCHECK ( * tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> } trunc : ND_PRINT ( ( ndo, ""[|esis]"" ) ) <S2SV_ModEnd> ; } <S2SV_null>",1
1071,<S2SV_ModStart> NULL ) { if ( * ptr == NULL ) return NULL ;,0
1072,"<S2SV_ModStart> void write_segment_id ( vpx_reader <S2SV_ModEnd> * r,",0
1073,<S2SV_ModStart> ; uint32_t backup_handle = 0 <S2SV_ModStart> ret == 0 ) { if ( <S2SV_ModEnd> res -> backup <S2SV_ModStart> goto out_handle ; } else { backup_handle = req -> buffer_handle ; },0
1074,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool success,0
1075,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr2,",0
1076,"<S2SV_ModStart> final_p, final ; struct final ; <S2SV_ModStart>, & final ; final = fl6_update_dst ( np -> opt, final ) ; <S2SV_ModStart>, fl6, final ) ; final_p = fl6_update_dst ( fl6, np -> opt, & final ) ; <S2SV_ModStart>, fl6, final )",0
1077,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1078,<S2SV_ModStart> ) ) ; size_t <S2SV_ModEnd> length = 0,0
1079,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } else {,0
1080,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> < ie && <S2SV_ModEnd> ND_TTEST ( *,1
1081,"<S2SV_ModStart> ( interface, ENC624J60_EIRQ <S2SV_ModEnd> ) ) ; if <S2SV_ModStart> ( status & ENC624J60_EIRQ <S2SV_ModEnd> ) ) { <S2SV_ModStart> 0 ) ; } <S2SV_ModStart> ( interface, ENC624J60_EIR_TX1 <S2SV_ModEnd> ) ; return <S2SV_ModStart> 0 ) ; }",0
1082,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1083,"<S2SV_ModStart> goto all_leaves_cluster_together ; pr_devel ( ""present <S2SV_blank> leaves <S2SV_blank> cluster <S2SV_blank> leaf\\n"" ) <S2SV_ModEnd> return true ;",0
1084,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
1085,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1086,,0
1087,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
1088,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1089,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1090,,0
1091,,0
1092,,0
1093,<S2SV_ModStart> * opcode_desc ; if ( len < 2 ) { return NULL ; },1
1094,<S2SV_ModStart> acpi_status status ; <S2SV_ModEnd> union acpi_operand_object * <S2SV_ModStart> acpi_operand_object * next ; ACPI_FUNCTION_TRACE ( ns_terminate ) <S2SV_ModStart> ) ; } <S2SV_ModEnd> acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node,1
1095,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
1096,<S2SV_ModStart> [ sizeof ( the_url <S2SV_ModEnd> ) - 1,0
1097,,0
1098,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
1099,,0
1100,"<S2SV_ModStart> error ) { if ( bp && ( <S2SV_ModEnd> xfs_da_shrink_inode ( args <S2SV_ModStart>, bp )!= 0 ) <S2SV_ModEnd> ) goto out",1
1101,<S2SV_ModStart> -> num += fc <S2SV_ModEnd> ; if (,0
1102,<S2SV_ModStart> timer_list ) ; spin_lock_irq ( & timeri -> timeri -> timer ) ; <S2SV_ModStart> list_add_tail ( & timer -> timer -> lock <S2SV_ModEnd> ) ; },0
1103,<S2SV_ModStart> return err ; if (! <S2SV_ModEnd> attrs [ TIPC_NLA_SOCK <S2SV_ModStart> attrs [ TIPC_NLA_NLA_SOCK <S2SV_ModEnd> ] ) return <S2SV_ModStart> - EINVAL ; if (! sock [ TIPC_NLA_NLA_NLA_SOCK ] ) return - EINVAL ; if (! tsk ) return - EINVAL ; if (! tsk ) return - EINVAL ;,0
1104,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1105,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1106,<S2SV_ModStart> ) buffer ; if ( total_len < <S2SV_ModEnd> len ) goto trunc,0
1107,<S2SV_ModStart> task = current <S2SV_ModEnd> ; if (,1
1108,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo ->,0
1109,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MICMD, ENC28J60_MIRDPL <S2SV_ModEnd> ) ; while",0
1110,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> en ++ ) {,0
1111,"<S2SV_ModStart> ; kfree ( rcu_dereference_protected ( inet -> inet_opt, 1 ) <S2SV_ModEnd> ) ; dst_release",1
1112,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
1113,<S2SV_ModStart>! saw_digit ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\r' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\n' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart> ; trunc : * endp = bp ; <S2SV_ModStart> ; invalid : * endp = bp ;,1
1114,"<S2SV_ModStart> ; args -> rmtvaluelen = be32_to_cpu ( name_rmt -> valuelen ) ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ( name_rmt -> <S2SV_ModEnd> valueblk ) ; <S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; return",1
1115,"<S2SV_ModStart> """" ) ; status = MagickFalse ;",0
1116,<S2SV_ModStart> * obj ; <S2SV_ModEnd> return NULL ;,0
1117,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,0
1118,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1119,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( tp, <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( len",0
1120,<S2SV_ModStart> uint8 * tmp <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ; } tmp = ( uint8 * ) _TIFFmalloc ( cc ) ;,0
1121,"<S2SV_ModStart> -> vm_ops ) <S2SV_ModEnd> return do_fault ( <S2SV_ModStart>, pte, pmd, flags, entry ) ; <S2SV_ModEnd> return do_anonymous_page ( <S2SV_ModStart>, address, pte, pmd, <S2SV_ModEnd> flags ) ;",1
1122,"<S2SV_ModStart> s ) { size_t len = strlen ( s ) + 1 ; <S2SV_ModStart> = pool_alloc ( len ) ; memcpy <S2SV_ModEnd> ( r, <S2SV_ModStart> r, s, len",1
1123,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1124,"<S2SV_ModStart>! new_idmap_permitted ( file,",1
1125,"<S2SV_ModStart>. string ; if ( name > 1024 ) { <S2SV_ModStart> ) ; } else { eprintf ( ""Invalid <S2SV_blank> string <S2SV_blank> pointer <S2SV_blank> at <S2SV_blank> %p\\n"", name ) ; } }",1
1126,<S2SV_ModStart> ; # ifdef CONFIG_VP9_COMPRESSED,0
1127,<S2SV_ModStart>,0
1128,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( & 0 ) ;,0
1129,"<S2SV_ModStart> ; size_t i ; MAPI_ATTACH ( i, size_t ) ; <S2SV_ModStart> ) ) ; }",0
1130,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo ->,0
1131,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1132,"<S2SV_ModStart> * cpi, vpx_read <S2SV_ModEnd> ( xd,",0
1133,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",0
1134,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1135,"<S2SV_ModStart> ctxt ) ; if (! ( em_syscall_is_enabled ( ctxt ) ) ) return emulate_ud ( ctxt ) ; <S2SV_ModStart>, & ss ) ; if (! ( efer & EFER_SCE ) ) return emulate_ud ( ctxt",1
1136,,0
1137,,0
1138,"<S2SV_ModStart>, int avg_motion, int avg_motion_motion_motion, VP9_COUNT * mc_HIGHBITDEPTH * mc <S2SV_ModEnd>, int avg_motion_motion_motion_motion_magnitude, <S2SV_ModStart> int r, int avg_motion_motion_motion_motion_magnitude, avg_motion_motion_motion_magnitude, INTERPOWER_HIGHBITDEPTHRESHIGHBITDEPTHRESHIGHBITDEPTH ) { unsigned char * zero_motion = get_motion_motion_motion_magnitude ; unsigned char * zero_motion = 0 ; double avg_motion_motion_motion_motion_magnitude = get_motion_motion_motion ; int shift_motion_motion ; int shift_thresh_motion = ( motion_motion, 0, 0, 0 ) ; int shift_thresh = 0 ; avg_motion_motion_motion ; int shift_motion_magnitude = ( motion_motion, 0, 0 ) ; avg_motion_motion_motion_motion = ( rc, 0, 7 ) ; const int shift_thresh_thresh_motion ; const int shift_thresh_thresh",0
1139,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> sock ) ; },0
1140,<S2SV_ModStart> ) ; return ret <S2SV_ModEnd> ; if (,0
1141,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
1142,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1143,"<S2SV_ModStart> ndp, false",0
1144,<S2SV_ModStart> error = le32_to_cpu ( inode -> i_blocknr <S2SV_ModEnd> ) ; if,0
1145,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1146,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1147,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc <S2SV_ModEnd> ) return rc",0
1148,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1149,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1150,<S2SV_ModStart> 3 * len + 8,1
1151,<S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; } <S2SV_ModStart>. x = Z_LVAL ( lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; } <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; },0
1152,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1153,"<S2SV_ModStart> AcquireQuantumMemory ( imsx, imsy <S2SV_ModEnd> ) ; if <S2SV_ModStart>, background_color_index, ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if",0
1154,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",0
1155,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1156,"<S2SV_ModStart>. path ; return Curl_urldecode <S2SV_ModEnd> ( data, <S2SV_ModStart>, 0, & <S2SV_ModEnd> pop3c -> mailbox <S2SV_ModStart> pop3c -> mailbox, NULL, TRUE ) <S2SV_ModEnd> ; } <S2SV_null>",1
1157,<S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ;,1
1158,"<S2SV_ModStart> gb ) ; if ( s -> ref && sh -> first_slice_in_pic_flag ) { av_log ( s -> avctx, AV_LOG_ERROR, ""Two <S2SV_blank> slices <S2SV_blank> reporting <S2SV_blank> being <S2SV_blank> the <S2SV_blank> first <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> frame.\\n"" ) ; return 1 ; }",1
1159,<S2SV_ModStart> ) { return ERROR_INV_SLICE_HDR_T <S2SV_ModEnd> ; } if,0
1160,<S2SV_ModStart> return IMPEG2D_MB_TEX_DECODE_ERR ; if ( 0 >= ps_dec -> u2_num_mbs_left ) { return IMPEG2D_MB_T ; },0
1161,"<S2SV_ModStart> vpx_codec_alg_priv_t * const VP9_COMMON * const cm, int frame_worker_data <S2SV_ModEnd>, int is_key <S2SV_ModStart> ( ) vpx_reader <S2SV_ModEnd> ( )",0
1162,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1163,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> MACROBLOCKD * <S2SV_ModStart> BLOCKD * const xd, int mi_row, int mi_row, int bh, int bh, int bh, int bw <S2SV_ModEnd> ) { const <S2SV_ModStart> -> bh ; const int bw = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_width == 0 ) { # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { const int bh = 0 ; } else { const int bsize = 0 ; } else if ( xd -> cur_buf -> cur_width == 0 ) { break ; } else { const int bh = vp9_highoff + ( xd -> bh, bw, bw, bh, bh, bh ) ; } else { <S2SV_ModStart> ) ; } } else { # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> cur_width < bw )",0
1164,<S2SV_ModStart> -> mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor <S2SV_ModEnd> ; if (,1
1165,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
1166,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> fmt, 1 <S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, sizeof",1
1167,<S2SV_ModStart> ; uint16 nrow <S2SV_ModEnd> ; temp =,0
1168,,0
1169,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1170,<S2SV_ModStart> goto out ; <S2SV_ModEnd> } if (,0
1171,"<S2SV_ModStart> siocb -> scm, false",1
1172,<S2SV_ModStart> ) ; return ( 1 ),0
1173,"<S2SV_ModStart>, plane ) * ( ( VPX_IMG_FMT_HIGHBITDEPTH )? 2 : 1 )",0
1174,"<S2SV_ModStart> uint32_t length ; uint32_t length ; uint32_t <S2SV_ModEnd> len ; uint32_t <S2SV_ModStart> length ) ; if ( length > sizeof ( struct rdp_param ) ) { <S2SV_ModStart> AVHDR_LEN ) ; memcmp ( hdr, 1, sizeof ( * hdr ) ) ; <S2SV_ModStart> type ) ; memcpy ( & vlen, 1, sizeof ( assoc ) ) ; <S2SV_ModStart> 1 ) ; memset ( hlen, 0, sizeof ( tlen ) ) ;",0
1175,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; int r = 0 ; if <S2SV_ModEnd> ( lc -> <S2SV_ModStart> ( lc -> start || ti -> len!= i_size_read ( dev -> bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL, cmd ) ; return r? : __blkdev_driver_ioctl ( <S2SV_ModStart> -> bdev, <S2SV_ModEnd> dev -> mode",1
1176,<S2SV_ModStart> == 0 ) return,0
1177,"<S2SV_ModStart> crypto, type <S2SV_ModEnd> ) ; if",0
1178,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
1179,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1180,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1181,"<S2SV_ModStart> sockaddr ) ; memset ( & sa, 0, sizeof ( addr ) ) ;",0
1182,<S2SV_ModStart> cipher. length = sizeof ( cpkt. length ) - 1,0
1183,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_SIGN <S2SV_ModStart> | NTLMSSP_EXTENDED_SEC | NTLMSSP_SIGN <S2SV_ModEnd> ) ) {,0
1184,"<S2SV_ModStart>, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn <S2SV_ModEnd> ) ; if",0
1185,<S2SV_ModStart> crypto_report_ rakcipher ; strncpy <S2SV_ModEnd> ( rak.,0
1186,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
1187,<S2SV_ModStart> ; if ( ( int ) <S2SV_ModStart> <= 0 || ( int ),0
1188,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( addr,0
1189,"<S2SV_ModStart>, & rlen, 0",1
1190,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) return 0,0
1191,"<S2SV_ModStart> mntent, path, rootfs -> mount",1
1192,"<S2SV_ModStart> * name, vblank <S2SV_ModEnd> ) ; if",0
1193,<S2SV_ModStart> - offset ; unsigned short prev_bi_vcnt = bio -> bi_vcnt ; <S2SV_ModStart> ) break ; if ( bio -> bi_vcnt == prev_bi_vcnt ) put_page ( pages [ j ] ) ;,1
1194,<S2SV_ModStart> -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; } <S2SV_ModEnd> actualnumcolors = hdr,1
1195,"<S2SV_ModStart> state. path <S2SV_ModEnd> ; char localhost <S2SV_ModStart> ""localhost"" ; } result = Curl_urldecode ( conn -> data, path, 0, & <S2SV_ModStart> smtpc -> domain, NULL, TRUE ) ; if ( result ) return result <S2SV_ModEnd> ; state (",1
1196,"<S2SV_ModStart> void ) { strncpy <S2SV_ModEnd> ( l, <S2SV_ModStart> str, L_BUFSIZE <S2SV_ModEnd> ) ; }",0
1197,"<S2SV_ModStart> out, buf, & buf",0
1198,<S2SV_ModStart> int i ; jas_uchar <S2SV_ModEnd> buf [ 2,0
1199,<S2SV_ModStart> 0 ) ; scat = & rm -> data. op_sg [ sg ] ; ret = <S2SV_ModEnd> sizeof ( struct,0
1200,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1201,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1202,<S2SV_ModStart> pirlvl ) ; if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > rpy ) { return ; },0
1203,,0
1204,"<S2SV_ModStart>, rqstp, res <S2SV_ModEnd> ) ; out",1
1205,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1206,,0
1207,"<S2SV_ModStart> ) ) { * status = ""INVALID_TIONS"" ;",0
1208,<S2SV_ModStart> thread -> tp_value [ 0 ] <S2SV_ModStart> childregs -> ARM_r3 ; thread -> tp_value [ 1 ] = get_tpuser ( ),1
1209,"<S2SV_ModStart> bufsize ) { char * new_buf ; size_t new_bufsize <S2SV_ModEnd> ; JAS_DBGLOG ( <S2SV_ModStart> ; if ( bufsize < 0 ) { jas_deprecated ( ""negative <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> for <S2SV_blank> jas_stream_memopen"" ) ; } if ( buf && bufsize < 0 ) { jas_eprintf ( ""Invalid <S2SV_blank> buffer <S2SV_blank> of <S2SV_blank> jas_stream_memopen <S2SV_blank> (%d)\\n"", new_bufsize ) ; } else { jas_deprecated ( buf, new_bufsize ) ; new_bufsize = 0 ; } <S2SV_ModEnd> if ( bufsize <S2SV_ModStart> ; } } <S2SV_null> <S2SV_null>",0
1210,"<S2SV_ModStart> sshbuf * b = NULL <S2SV_ModStart> char * pkalg = NULL <S2SV_ModStart> u_char * b = NULL <S2SV_ModStart> u_char * pkalg = NULL <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( r = <S2SV_ModStart> r ) ) ; if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done <S2SV_ModStart> auth2 ) ; <S2SV_ModEnd> } if (",0
1211,<S2SV_ModStart> ; uint32_t bcount ; CLEAR ( WaveHeader ),1
1212,"<S2SV_ModStart> * i_inode_block_uninit ( i_io <S2SV_ModStart> ( io ), <S2SV_ModEnd> ) ; }",0
1213,"<S2SV_ModStart>, mech ) || ( ctx -> cb ) ( sx_sasl_cb_CHECK_MECH, ( void * ) mech, NULL, s, ctx -> cbarg )!= sx_sasl_ret_OK",1
1214,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, addr",0
1215,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ;",0
1216,<S2SV_ModStart> failed_mount3 ; } # ifdef CONFIG_EXT2_FS_XATTR sbi -> s_mb_cache = ext2_xattr_create_cache ( ) ; # endif,0
1217,<S2SV_ModStart> return false ;,0
1218,<S2SV_ModStart> len < tcp_hdrlen || tcp_hdrlen < sizeof ( struct tcphdr ) <S2SV_ModStart> ; if ( tcp_hdrlen >= 15 * 4 ) return 0 ; if (,1
1219,<S2SV_ModStart> int i ; size_t size ; matrix = 0 ; <S2SV_ModStart> 0 ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>,0
1220,"<S2SV_ModStart> ipv6_select_ident ( fh, rt <S2SV_ModStart> ipv6_select_ident ( fh, rt",1
1221,"<S2SV_ModStart> bh ) { <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; struct mb2_cache_entry * bh ; <S2SV_ModStart> error ; } <S2SV_ModEnd> ea_b2_cache_entry ( bh <S2SV_ModStart> ) ; } <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> bh -> bh, bh <S2SV_ModEnd> ) ; if",0
1222,<S2SV_ModStart> * req ; <S2SV_ModEnd> req = scsi_req_alloc <S2SV_ModStart> hba_private ) ; <S2SV_ModEnd> return req ;,1
1223,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1224,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1225,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
1226,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct xfrm_dump_info <S2SV_ModStart> struct xfrm_dump_info info <S2SV_ModEnd> ; info. <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> ( void ),1
1227,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1228,<S2SV_ModStart> dentry * upper <S2SV_ModEnd> ; int err <S2SV_ModStart> err ) ; upper = upper lookup_name_len ( upper ) ; if ( IS_ERR ( upper!= IS_ERR ( upper ) ) ) goto out_unlock <S2SV_ModEnd> ; err = <S2SV_ModStart> if ( upper!= IS_ERR ( upper ) ) ; <S2SV_ModEnd> if ( upper <S2SV_ModStart> NULL ) ) { <S2SV_ModEnd> if ( upper <S2SV_ModStart> NULL ) ; out_drop_lock :,0
1229,<S2SV_ModStart> = get_level ( section ) <S2SV_ModEnd> ; if (,0
1230,<S2SV_ModStart> * ptrptr && <S2SV_ModEnd> nmemb && size <S2SV_ModStart> nmemb && size <S2SV_ModEnd> ) return AVERROR,1
1231,<S2SV_ModStart> ( a -> type == szMAPI_BINARY && a -> <S2SV_ModStart> else if ( a -> type == szMAPI_BINARY &&,1
1232,<S2SV_ModStart> ] ) ; if ( ptr -> depth > 0 ) {,0
1233,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( const size_t * ) val ; return 0 ;,0
1234,,0
1235,,1
1236,<S2SV_ModStart> return - EINVAL ; cpu_return 0 ;,0
1237,<S2SV_ModStart> ( page ) <S2SV_ModEnd> ; if (,0
1238,<S2SV_ModStart> return GF_LOG_FRAME ; memcpy <S2SV_ModEnd> ( & sz,0
1239,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1240,"<S2SV_ModStart> * data, size, sizeof ( <S2SV_ModStart> ) ) ; if (! data_size ) return - 1",0
1241,"<S2SV_ModStart> * dllhandle ; if ( COM_CompareExtension ( name, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", name ) ; return NULL ; }",1
1242,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1243,,0
1244,,0
1245,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } } else,0
1246,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int l2SV_null> <S2SV_null> <S2SV_null>,0
1247,<S2SV_ModStart> int i ; if <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1248,,0
1249,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHWELCOME ; }",1
1250,<S2SV_ModStart> == * ptr && ptr [ 1 ],1
1251,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> -> common ; ThreadData * td = & td -> mb ; <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> mi_ext ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> - 1 ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> mi_row, mi_col ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> mi_split ) ; memset <S2SV_ModEnd> ( xd ->",0
1252,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
1253,"<S2SV_ModStart> * mbmi, vpx_writer <S2SV_ModEnd> * r )",0
1254,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1255,<S2SV_ModStart> skb ) goto out <S2SV_ModEnd> ; } if,0
1256,<S2SV_ModStart> sta -> lock ) ; spin_lock_init ( & sta -> ps_lock,1
1257,<S2SV_ModStart> ( event -> <S2SV_ModEnd> ||! (,0
1258,<S2SV_ModStart> sock ) ; <S2SV_ModEnd> } if (,0
1259,"<S2SV_ModStart> break ; } if ( intf -> desc. bNumEndpoints < 1 ) { dev_err ( & intf -> dev, ""too <S2SV_blank> large <S2SV_blank> descriptor\\n"" ) ; retval = - EINVAL ; goto out_free ; } <S2SV_ModStart> ) - EINVAL ; } <S2SV_ModStart> ( bNumEndpoints < 1 ) { dev_err ( & intf -> dev, ""too <S2SV_blank> short <S2SV_blank> short <S2SV_blank> buffer <S2SV_blank> descriptor\\n"" ) ; return - EINVAL ; } <S2SV_ModStart> dev, ( intf -> bLength )",0
1260,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1261,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return ie ;,0
1262,"<S2SV_ModStart> * head ; <S2SV_ModEnd> newsk -> sk_sndbuf <S2SV_ModStart> -> sk_rcvbuf ; sctp_copy_descendant <S2SV_ModEnd> ( newsk,",1
1263,"<S2SV_ModStart> int fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> dev, O_CREAT )",0
1264,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return sel ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! get_desc ( & desc, sel ) <S2SV_ModEnd> ) return - <S2SV_ModStart>! ( desc. <S2SV_ModEnd> type & BIT <S2SV_ModStart> ( ( desc. <S2SV_ModEnd> l << 1 <S2SV_ModStart> ) | desc. <S2SV_ModEnd> d ) {",1
1265,<S2SV_ModStart> ctx ) ; memcpy <S2SV_ModEnd> ( ctx ->,0
1266,"<S2SV_ModStart> 1 ) { vpx_lpf_horizontal_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> } else { vpx_lpf_horizontal_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf_4 <S2SV_ModEnd> ( s,",0
1267,<S2SV_ModStart> return ret ; fsnotify_put_group ( group ) ;,1
1268,<S2SV_ModStart> ctx ) { <S2SV_ModEnd> struct ctx =,0
1269,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> = S64_MAX ; <S2SV_ModEnd> if ( src_known,0
1270,<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ;,0
1271,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1272,<S2SV_ModStart> ( u32 length ) <S2SV_ModEnd> ; if (,0
1273,,0
1274,"<S2SV_ModStart> int count = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, count ) )",0
1275,<S2SV_ModStart> input -> cur ) ; } if ( ( ( ( ctxt -> inputNr > 40 ) && ( ( ctxt -> XML_PARSE_HUGE ) == 0 ) ) ) return ( - 1,0
1276,"<S2SV_ModStart> } if ( le32_to_cpu ( raw_super -> segment_count ) > F2FS_MAX_SEGMENT ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> segment <S2SV_blank> count <S2SV_blank> (%u)"", le32_to_cpu ( raw_super -> segment_count ) ) ; return 1 ; } if (",1
1277,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char * name <S2SV_ModStart> = '\\0' ; char * name = strdup ( ( name, * name, 2 ) == '\\0' || <S2SV_ModEnd> == '\\0' || <S2SV_ModStart> ( * name == ':' ) || ( * name == ':' ) || <S2SV_ModEnd> == '\\0'",0
1278,<S2SV_ModStart> } else { android_errorWriteLog <S2SV_ModEnd> ( hdr,0
1279,<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart>! opt ) { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) ; txopt_put ( opt_to_free ) ;,1
1280,<S2SV_ModStart> ; if ( <S2SV_ModEnd> > opt ->,0
1281,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error <S2SV_ModEnd> ) return error",0
1282,<S2SV_ModStart> goto errout_free ; } if (! net -> nlh_skb ) goto errout_free ;,0
1283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1284,<S2SV_ModStart> * opg ; if ( bytes_to_copy < 0 ) { return WAIT_ERROR ; },0
1285,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
1286,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; } tp -> copied_seq = seq ;,1
1287,<S2SV_ModStart> key_data ) ; if (! data_size ) return NULL ;,0
1288,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx ) {",0
1289,<S2SV_ModStart> ( strlen ( sqlite3_int64 ),0
1290,<S2SV_ModStart> ) ; return true ;,0
1291,"<S2SV_ModStart> * orelse, string type_comment, int <S2SV_ModEnd> lineno, int <S2SV_ModStart> orelse = orelse ; p -> v. type_comment = type_comment",0
1292,<S2SV_ModStart> 1 ] ; <S2SV_ModEnd> return 0 ;,0
1293,<S2SV_ModStart> + opt -> opt.,0
1294,"<S2SV_ModStart> ) { case AC_VECTOR : kvm_queue_exception_e ( vcpu, AC_VECTOR, error_code ) ; return 1 ; case",1
1295,<S2SV_ModStart> ; case TRACE_E_NONE <S2SV_ModEnd> ; return (,0
1296,"<S2SV_ModStart> = 0 ; if (! <S2SV_ModStart>, s ) ) return FALSE",0
1297,"<S2SV_ModStart> * sock, ""%s"",",0
1298,<S2SV_ModStart> < 0 ) { ret = chg ; goto out_err ; } <S2SV_ModEnd> if ( hugepage_subpool_get_pages <S2SV_ModStart> chg ) ) { ret = <S2SV_ModEnd> - ENOSPC ; <S2SV_ModStart> - ENOSPC ; goto out_err ; } <S2SV_ModStart> chg ) ; goto out_err <S2SV_ModEnd> ; } if <S2SV_ModStart> return 0 ; out_err : resv_map_put ( vma ) ; return ret ;,1
1299,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), & final ) ; rcu_read_unlock ( <S2SV_ModEnd> ) ; }",0
1300,"<S2SV_ModStart> = ECRYPTFS_SUPER_MAGIC ; s -> s_stack_depth = path. dentry -> d_sb -> s_stack_depth + 1 ; rc = - EINVAL ; if ( s -> s_stack_depth > FILESYSTEM_MAX_STACK_DEPTH ) { pr_err ( ""eCryptfs: <S2SV_blank> maximum <S2SV_blank> fs <S2SV_blank> stacking <S2SV_blank> depth <S2SV_blank> exceeded\\n"" ) ; goto out_free ; }",1
1301,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1302,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
1303,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; <S2SV_ModEnd> byte ; if (,0
1304,"<S2SV_ModStart> ret, n_new_keys <S2SV_ModEnd>, kdb ->",0
1305,,0
1306,,0
1307,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1308,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1309,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1310,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1311,"<S2SV_ModStart> { token ++ ; } if ( operand >= MAX_OPERANDS ) { eprintf ( ""Too <S2SV_blank> many <S2SV_blank> operands\\n"" ) ; return false",1
1312,<S2SV_ModStart> = xd -> plane [ 0 ] ; memset <S2SV_ModEnd> ( xd ->,0
1313,<S2SV_ModStart> ; if (! dlen ||,0
1314,"<S2SV_ModStart> hdr ) ; if ( res == NULL ) return - ENOMEM ; <S2SV_ModStart> h2, ret <S2SV_ModEnd> ; } <S2SV_null>",0
1315,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
1316,<S2SV_ModStart> - EINVAL ; if ( addr > count ) return - EINVAL ;,0
1317,"<S2SV_ModStart> ""<S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static",0
1318,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 ) )",0
1319,<S2SV_ModStart> -> pu4_wts_ofsts_mat ; ps_dec -> u4_first_slice_in_pic = 0 ;,0
1320,<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },1
1321,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), & final ) ; rcu_read_unlock ( <S2SV_ModEnd> ) ; }",0
1322,<S2SV_ModStart> buffer_count < 1 || args -> buffer_count > UINT_MAX / sizeof ( * exec2_list ),1
1323,"<S2SV_ModStart> int mptctl_gettargetinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
1324,"<S2SV_ModStart> len = L_MAXLONG <S2SV_ModEnd> ( L,",0
1325,"<S2SV_ModStart> char * path, const char * rootfs <S2SV_ModStart> mntdata, optional, rootfs",1
1326,,0
1327,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static long len_full ; long len_max ; long len_buf ; long len_rem ; long len_buf ; long len_max ; long len_buf ; long len_rem ; long len_buf ; long len_max ; long len_buf ; long len_max ; long len_buf ; long len_rem ; long len_buf ; long len_max ; long len_buf ; long len_rem ; long len_buf ; long len_max ; long len_buf ; long len_max ; long len_rem ; long len_buf ; unsigned int len_head ; long len_buf ; long len_max ; long len_rem ; long len_buf ; len_rem = MAX_EXECVE_AUDIT_EXECVE_AUDIT_EXECVE_AUDIT_LEN ; len_max = MAX_AUDIT_EXECVE_AUDIT_AUDIT_LEN ; <S2SV_ModStart> arg ) ; len_buf = 0 ; len_rem = len_full = 0 ; len_full = len_full = 0 ;,0
1328,"<S2SV_ModStart> | O_NOCTTY, ( mode == 0 || mode == MODE_INVALID )? 0644 : mode <S2SV_ModEnd> ) ; if",1
1329,<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; err_netscreen,0
1330,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1331,,0
1332,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> str ) ; } else { <S2SV_ModStart> ) ; } } <S2SV_ModStart> ) ) ; },0
1333,<S2SV_ModStart> { struct blkif_response * <S2SV_ModStart> int resp ; <S2SV_ModEnd> spin_lock_irqsave ( & <S2SV_ModStart> case BLKIF_PROTOCOL_GET_RESPONSE : resp = <S2SV_ModEnd> RING_GET_BLOCKS2SV_null> <S2SV_null>,0
1334,<S2SV_ModStart> ; if ( password == NULL ||,1
1335,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ;",0
1336,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_int <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""%s.\\"",",0
1337,<S2SV_ModStart> ndo -> ndo_snapend ; ND_TCHECK_16BITS ( & ip -> ip_len ),1
1338,<S2SV_ModStart> dentry * dir <S2SV_ModEnd> ; int dir_has_key <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ),1
1339,<S2SV_ModStart> -> service_name = TEMP_FAILURE_RETRY ( <S2SV_ModStart> init ) ; close ( & <S2SV_ModStart> d ) ; close ( & port ) ;,0
1340,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; <S2SV_ModEnd> } if (",1
1341,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> break ; },0
1342,<S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ),1
1343,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
1344,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> break ; } if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",0
1345,<S2SV_ModStart> void usage_exit ( void,0
1346,"<S2SV_ModStart> ( interface, ENC624J600_ECON1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_ECON1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_ECON1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_ECON1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_ECON1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ) ;",0
1347,"<S2SV_ModStart> ( packets + 257UL <S2SV_ModEnd>, image ->",1
1348,"<S2SV_ModStart> error ; } memset ( newserv, 0, sizeof ( struct service ) ) ;",1
1349,<S2SV_ModStart> -> u4_first_slice_in_pic = 1 <S2SV_ModEnd> ; ps_dec ->,0
1350,<S2SV_ModStart> ) -> tp_value [ 0 ],1
1351,<S2SV_ModStart> ; if ( shader_rec_offset < args -> bin_cl_size ||,0
1352,"<S2SV_ModStart> '' ) { size_t numrows = 0 ; if ( len < 2 ) return 0 ; <S2SV_ModStart>') { size_t numentries = sizeof ( char * ) cJSON_malloc ( p ), 2 ) ; if ( out = ensure ( p, 2 ) ; if ( out ) strcpy ( out ) ; else out = ensure ( p, 2 ) ; if ( out ) strcpy ( out ) ; return len = ensure ( p, 2 ) ; if (! ptr ) return 0 ; * ptr ++ = ensure ( p, 2 ) ; if (! ptr ) return 0 ; ptr = ensure ( p, 3 ) ; if ( out = ensure ( p, 2 ) ; if ( out = ensure ( p, 3 ) ) ; if ( out = ensure ( p, 2 ) ) ; else { ptr = ensure ( p, 2 ) ; if ( out = ensure ( p, 2 ) ) ; if (! ptr ) return 0 ; * ptr ++ = '0' ; ptr = ensure ( p, 2 ) ; if (! ptr ) return 0 ; } ptr ++ <S2SV_ModEnd> return 0 ;",0
1353,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ndo_vflag ) { if ( cp < 1 ) { ND_PRINT ( ( ( ndo, "" <S2SV_blank> common <S2SV_blank> too <S2SV_blank> short"" ) ) ; break ; }",0
1354,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
1355,"<S2SV_ModStart> = other ; unix_dgram_peer_wake_wakeup ( sk, sk ) ; <S2SV_ModStart> = max_peer_wakeup ; <S2SV_ModEnd> if (! sk",0
1356,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 8 <S2SV_ModEnd> ; value |= <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart>. unsigned_value = <S2SV_ModEnd> value & 0xffff <S2SV_ModStart> value & 0xffff <S2SV_ModEnd> ; return (,0
1357,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> m"", <S2SV_ModStart> y3 ) ; sendClean ( outputbuffer ) ;",0
1358,<S2SV_ModStart> skb ) goto out <S2SV_ModEnd> ; } if,0
1359,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; task_lock ( task <S2SV_ModEnd> ) ; ioc <S2SV_ModStart> ; ioc = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context ; task <S2SV_ModEnd> -> io_context = <S2SV_ModStart> ; task_unlock ( task <S2SV_ModEnd> ) ; if,1
1360,<S2SV_ModStart> ) ; return ret <S2SV_ModEnd> ; if (,0
1361,,0
1362,"<S2SV_ModStart> ) { int ret = pci_read_config_word <S2SV_ModEnd> ( dev, <S2SV_ModStart> offset, value ) ; const struct pci_cmd_info * cmd = data ; * value &= PCI_COMMAND_GUEST ; <S2SV_ModEnd> * value |= <S2SV_ModStart> * value |= cmd -> val & ~ PCI_COMMAND_GUEST ; <S2SV_ModEnd> return ret ;",1
1363,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1364,<S2SV_ModStart> ] ) ; free_uid ( fpl -> user ) ;,1
1365,<S2SV_ModStart> long nb ) ; <S2SV_ModEnd> if (!,0
1366,"<S2SV_ModStart> -> dwc ; dwc3_gadget_del_and_unmap_request ( dep, req, status <S2SV_ModEnd> ) ; spin_unlock <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1367,,0
1368,"<S2SV_ModStart> sas_revalidate_domain, [ <S2SV_ModEnd> DISCE_SUSPEND ] = <S2SV_ModStart> ] = sas_resume_devices <S2SV_ModEnd>, } ;",1
1369,"<S2SV_ModStart>, int ret <S2SV_ModEnd> ; if (",0
1370,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> u1_null>,0
1371,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1372,<S2SV_ModStart> sk -> sk_family <S2SV_ModEnd> ; struct sk_buff <S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( flags <S2SV_ModStart> AF_INET ) { struct sockaddr_in * <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ; <S2SV_ModStart> skb ) ; <S2SV_ModEnd> struct sockaddr_in6 * <S2SV_ModStart> struct sockaddr_in6 * sin6 = ( struct sockaddr_in6 * <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
1373,"<S2SV_ModStart> = lblk ; mutex_lock ( & ( inode -> i_mutex ) ; if (! ( flags & EXT4_GET_BLOCKS_SIZE ) ) { ret = - EFAULT ; goto out_mutex ; } if (! (! ( flags & EXT4_GET_BLOCKS_BLOCKS_SIZE ) ) ) { ret = - EOPNOTSUPP ; goto out ; } if (! ( offset + len ) ) { ret = - EOPNOTSUPP ; goto out_mutex ; } if (! ( offset + len ) ) { size_t len = 1 ; ret = ext4_inode_start ( inode, 1 << blkbits ) ; ret = 1 << blkbits ; if ( offset + len ) { ret = - offset += round_up ; ret = 1 << blkbits ; ret = round_down ( offset + len, ( offset + len, ( offset + 1 << blkbits ) << round_down ( offset + len ), 1 << blkbits ) ; if ( ret ) goto out_mutex ) { ret = - round_up ; ret = - round_up ;",0
1374,<S2SV_ModStart> ; } } else { free_bufs = 0 ; } <S2SV_ModStart> <S2SV_null> <S2SV_null>,0
1375,<S2SV_ModStart> return map ; map =,1
1376,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = '\\n' ; <S2SV_ModEnd> if ( cp <S2SV_ModStart> = '\\0' ; if ( len < 2 ) return - 1 ; <S2SV_ModStart> ='<S2SV_blank> digit ( * <S2SV_ModEnd> + 1 ) ; <S2SV_ModStart> = '\\0' ; if ( * cp <= '/' ) return - 1 ; <S2SV_ModStart> } else { if ( len < 2 ) return ( * cp ++ ) ; <S2SV_ModStart> = '\\\\' ; <S2SV_ModEnd> } else { <S2SV_ModStart> = '\\\\' ; <S2SV_ModEnd> } else { <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> max = ( <S2SV_ModStart> + 1 ) ; if ( len < 2 ) return 0 ; <S2SV_ModStart> } else { if ( cp <= sizeof ( * t ) ) { if ( tlen ) return 0 ;,0
1377,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1378,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_left < 4,1
1379,,0
1380,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
1381,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( x ->,0
1382,<S2SV_ModStart> crypto_report_ rakcipher ; strncpy <S2SV_ModEnd> ( rak.,0
1383,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1384,"<S2SV_ModStart>, nbits ; if ( msg -> readcount > msg -> cursize ) { return 0 ; } <S2SV_ModStart> oob ) { if ( msg -> readcount + ( bits >> 3 ) > msg -> readcount ) { return 0 ; } <S2SV_ModStart> & 7 ; if ( msg -> readcount > msg -> cursize << 3 ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; } <S2SV_ModStart> & 7 ; if ( msg -> readcount > msg -> cursize << 3 ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; }",0
1385,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
1386,<S2SV_ModStart> ; out1 : cancel_work_sync ( & dev -> kevent ) ; del_timer_sync ( & dev -> delay ) ;,1
1387,"<S2SV_ModStart> size, size_t <S2SV_ModEnd> len ) {",0
1388,<S2SV_ModStart> == GTK_RESPONSE_OK ) { <S2SV_ModStart> item_name ) ; },0
1389,<S2SV_ModStart> - 2 ; if ( plen < 0 ) return 0 ;,1
1390,"<S2SV_ModStart> acl ) { struct iattr iattr ; retval = posix_acl_update_mode ( inode <S2SV_ModEnd>, & ia",0
1391,<S2SV_ModStart> header. types_size <S2SV_ModEnd> ) { continue,1
1392,<S2SV_ModStart> : case NPPVformValue : case NPPVpluginNativeAccessibleAtkPlugId <S2SV_ModStart> case NPPVpluginKeepLibraryInMemory : case NPPVpluginUrlRequestsDisplayedBool : case NPPVpluginWantsAllNetworkStreams : case NPPVpluginCancelSrcStream : case NPPVSupportsAdvancedKeyHandling :,1
1393,<S2SV_ModStart> * alloc ; size_t <S2SV_ModEnd> len ; int <S2SV_ModStart> len ) { if (! tmplen ) return NULL ;,0
1394,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart>, s ) ; if (! <S2SV_ModStart>, s ) return false",0
1395,"<S2SV_ModStart>, double q, vpx_bit_depth_t bit_depth <S2SV_ModStart> vp9_convert_qindex_to_q ( i, bit_depth",0
1396,"<S2SV_ModStart> ( interface, ENC7 <S2SV_ModEnd> )!= 0",0
1397,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1398,<S2SV_ModStart> <= 0 && <S2SV_ModEnd> ND_TTEST ( *,0
1399,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",0
1400,<S2SV_ModStart> { ret = <S2SV_ModEnd> ops ; },0
1401,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
1402,"<S2SV_ModStart> * x, <S2SV_ModEnd> BLOCK_SIZE bsize, <S2SV_ModStart> int y, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( xd ->",0
1403,,0
1404,,0
1405,"<S2SV_ModStart> * jas_iccprof_createfrombuf ( jas_uchar <S2SV_ModEnd> * buf,",1
1406,<S2SV_ModStart> i -> i_mmap_sem ) ; inode -> i_mmap_sem = 0 ;,0
1407,<S2SV_ModStart>! thresholds ) ; if (! thresholds -> primary ) goto unlock <S2SV_ModStart> ( ) ; unlock :,1
1408,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> ; return handle <S2SV_ModEnd> ; } <S2SV_null>",1
1409,"<S2SV_ModStart> void encode_code_wb ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart>!= 0 ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
1410,,0
1411,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
1412,,0
1413,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( xd ->,0
1414,"<S2SV_ModStart> uint16_t status ; int length <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ( interface, ENC624J600_ECON1 ) ; if ( status & ENC624J600_ECON1 )!= 0 ) { enc624j600WriteReg ( interface, ENC624J600_ECON1, ENC624J600_ECON1 <S2SV_ModEnd> ) ; enc624J600WriteReg ( <S2SV_ModStart> ( interface, ENC624J600_EIR_TXRDPX <S2SV_ModEnd>, length ) <S2SV_ModStart> ( interface, ENC624J600_EIR_TXRDPX <S2SV_ModEnd> ) ; length <S2SV_ModStart> ( interface, ENC624J600_ENC624J600_EIR, ENC624J600_ECON1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_ENC624J600_EIR, ENC624J600_EIR, ENC624J600WriteReg ( interface, ENC624J600_ENC624J600_EIR ) ; enc624j600WriteReg ( interface, ENC624J600_EIR, ENC624J",0
1415,<S2SV_ModStart> ] == 0x01 && i < gemsafe_cert_max,1
1416,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1417,,0
1418,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> info -> par <S2SV_ModEnd> ; vma -> <S2SV_ModStart> _CACHE_MASK ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> ( vma, fbdev -> fb_phys, fbdev -> fb_len <S2SV_ModEnd> ) ; }",1
1419,,0
1420,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1421,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1422,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1423,<S2SV_ModStart> out_free ; } if ( unlikely (! fanout_out ) ) return - EINVAL ;,0
1424,<S2SV_ModStart> -> event -> perf_event_context ) <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1425,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> en ; int <S2SV_ModStart> = ( ( UINT16_MAX / ( u8 * 8 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> * out ; size_t pos = len ; <S2SV_ModStart> += 8 ; if ( ( len < 8 ) return - EINVALID_ACHE ) return - EINVAL ; <S2SV_ModStart> += 8 ; if ( len < 8 ) return - EINVAL ; <S2SV_ModStart> & 0x80 ) return FALSE ; if ( len < len ) return - EINVAL ; <S2SV_ModStart> * 8 ) return - EINVAL ; <S2SV_ModEnd> * out = <S2SV_ModStart> + len ; if ( len < len ) return false <S2SV_ModEnd> ; } <S2SV_null>,0
1426,"<S2SV_ModStart>, i ; if (! ( s -> state & PNG_IHDR ) ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> before <S2SV_blank> IHDR\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
1427,<S2SV_ModStart> cipher ) {,0
1428,<S2SV_ModStart> } dt -> proto = IP_GET_IPPROTO ( p ) ; dt ->,1
1429,"<S2SV_ModStart> ( interface, ENC624J60_EIE, ENC624J60_EIR <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface, ENC624J60_EIR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & ENC624J60_EIR_TX1 <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J60_EIR, ENC624J60_TX1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J60_EIR, ENC6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC6_EIE <S2SV_ModEnd> ) ) ; if <S2SV_ModStart> ( status & ( status & ENC624J60_EIR_TX1 <S2SV_ModEnd> ) )!= 0 <S2SV_ModStart> ( interface, ENC624J60_TX1 <S2SV_ModEnd> ) ) ; sleep",0
1430,"<S2SV_ModStart> * name, string type_comment <S2SV_ModEnd> ) ; const <S2SV_ModStart>, NULL, true <S2SV_ModEnd> ) ; if",0
1431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1432,<S2SV_ModStart> arg ) ; if (! retval ) return - EINVAL ;,0
1433,,0
1434,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if (!,0
1435,"<S2SV_ModStart>, xmi_data, xmi_size,",1
1436,"<S2SV_ModStart> size_t total_len ; struct iov_iter iter ; <S2SV_ModStart> ) return 0 ; iov_iter_init ( & iter, iov, total_len, total_len, iov_len, total_len ) <S2SV_ModStart> ) break ; <S2SV_ModEnd> break ; } written",0
1437,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> QuantumIndex ;,0
1438,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1439,,0
1440,"<S2SV_ModStart> size_t optstr ; size_t max_samples ; <S2SV_ModStart> 0 ; } snprintf ( optstr, optstr, sizeof ( optstr ) ) ) ; <S2SV_ModStart> break ; case OPT_FAILURE : if (! optstr ( optstr ) ) { jas_eprintf ( ""%s: <S2SV_blank> %d <S2SV_blank> %d\\n"", optstride ) ; goto error ; } snprintf ( optstr, optstr, optstr, sizeof ( optstr ) ) ) ; <S2SV_ModStart> jas_eprintf ( optstr <S2SV_ModEnd> ) ; }",0
1441,<S2SV_ModStart> return 0 ;,0
1442,<S2SV_ModStart> RETURN_FALSE ; } <S2SV_ModEnd> if ( ret,0
1443,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1444,<S2SV_ModStart> 0 ) ; namelen = 0 ;,0
1445,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
1446,,0
1447,<S2SV_ModStart> ( bh ) <S2SV_ModEnd> return 0 ;,0
1448,<S2SV_ModStart> else { return false <S2SV_ModEnd> ; } case,1
1449,"<S2SV_ModStart> sockaddr ) ; memset ( & sa, 0, sizeof ( addr ) ) ;",0
1450,<S2SV_ModStart> (! handle ||! SecIsValidHandle ( handle ),1
1451,<S2SV_ModStart> -> entrylength ; <S2SV_ModEnd> if (!,0
1452,<S2SV_ModStart> ) ; goto out_free <S2SV_ModEnd> ; } if,0
1453,<S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> DATA_ENSURE ( 1 <S2SV_ModStart> ++ ; s <S2SV_ModEnd> ++ ; MOP_OUT,1
1454,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1455,<S2SV_ModStart> = - EINVAL <S2SV_ModEnd> ; if (,1
1456,"<S2SV_ModStart> 1, path, rootfs",0
1457,<S2SV_ModStart> } if ( vfs -> fd_path &&,0
1458,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> keyring_keyring (,0
1459,"<S2SV_ModStart> const cpi, MACROBLOCK * const x, MACROBLOCK * const xd <S2SV_ModEnd>, int mi_row <S2SV_ModStart> bsize ) { set_mode_offsets <S2SV_ModEnd> ( & cpi",0
1460,<S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if ( <S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if (,1
1461,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1462,"<S2SV_ModStart> pixel_info ) ; ( void ) ResetMagickMemory ( pixels, 0, pixel_info_length ) ;",1
1463,"<S2SV_ModStart> int count = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, count ) )",0
1464,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return NULL ;,0
1465,"<S2SV_ModStart> case S_IFDIR : fa = xfs_dinode_verify_fork ( XFS_FORK ) ; if ( fa ) { fa = xfs_verify_fork ( dip, XFS_FORK ) ; break ; }",0
1466,<S2SV_ModStart> -> num += fc <S2SV_ModEnd> ; if (,0
1467,,0
1468,<S2SV_ModStart> if ( cfg == 0 && ( vpx_codec_alg_priv_t ) <S2SV_ModEnd> ; if (,0
1469,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",1
1470,"<S2SV_ModStart> event -> prev, mutex_lock <S2SV_ModEnd> ) ; return",0
1471,<S2SV_ModStart> ] ) ) ) ; ND_TCHECK ( tptr [ 1 ],0
1472,<S2SV_ModStart> ) ; } res -> outputbuffer <S2SV_ModEnd> = 0 ;,0
1473,"<S2SV_ModStart> height ) { memcpy <S2SV_ModEnd> ( w,",0
1474,<S2SV_ModStart> ) ) { return ; },0
1475,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1476,"<S2SV_ModStart> iovec, compat, & iter <S2SV_ModStart> len, iovec, & iter",0
1477,"<S2SV_ModStart> } if ( ptr - c -> rcurr > 100 || ( strncmp ( ptr, ""get <S2SV_blank> "", 4 ) && strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "", 5 )",0
1478,<S2SV_ModStart> ; if (! data -> desc. bNumEndpoints < 1 ) return - ENODEV ;,0
1479,<S2SV_ModStart> if ( ( buflen < size ) || ( size < sizeof ( struct desc ) ),0
1480,<S2SV_ModStart> ; ue -> card = card ; ue ->,0
1481,"<S2SV_ModStart> client_p, client_p <S2SV_ModEnd> ) ; return",0
1482,<S2SV_ModStart> ctxt -> rip_relative && likely ( ctxt -> memopp ),1
1483,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
1484,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1485,<S2SV_ModStart> & cpi -> td.,0
1486,"<S2SV_ModStart> ( interface, ENC624J600_ECON1 ) ; if ( ( interface -> interface, ENC624J600_ECON1 )!= 0 ) { enc624J600WriteReg ( interface, ENC624J600_ECON1, ENC624J600_ECON1 <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, ENC624J600_ECON1, ENC624J600_ECON1 <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ( interface, ENC624J600_ECON1 ) ; enc624J600WriteReg ( interface <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, ENC624J600_ECON1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600WriteReg ( interface, ENC624J600_ECON1 <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, ENC624J600_ECON1 <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ( interface, ENC624J600WriteReg ( interface, ENC624J600_ECON1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR, ENC624J",0
1487,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rf -> header_len <S2SV_ModStart> psf_len ; if ( psf -> header. len >= sizeof ( psf -> header. len ) ) return - 1 ; <S2SV_ModStart> ( psf -> header. len <S2SV_ModEnd> ) ; return,0
1488,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
1489,,0
1490,<S2SV_ModStart> ) get_priv ( ctx -> si ) <S2SV_ModEnd> ; ctx ->,0
1491,<S2SV_ModStart> case EXIT_REASON_VMON : case EXIT_REASON_INVEPT :,1
1492,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int is_skip_v = VP9_COMP <S2SV_ModStart> == VP9_COMP * cm ) { VP9_COMP * const cm = & VP9_COMP_FEATURES * const cm = & cpi -> td. frame_type = & cpi -> td. frame_type == KEY_FRAME ) { VP9_COMP * const cm = & cpi -> td. mv = cpi -> frame_type == KEY_FRAME ; <S2SV_ModEnd> sf -> frame_flags <S2SV_ModStart> ; sf -> frame_type = INTRA_FRAME ; <S2SV_ModEnd> sf -> frame_type <S2SV_ModStart> ; if ( is_key == KEY_FRAME ) { vp_skip_filter = cpi -> frame_type == KEY_FRAME ; cpi -> frame_flags = INTRA_FRAME ; } else { cpi -> frame_type == KEY_FRAME? INTRA_FRAME : ( cpi -> frame_type == KEY_FLAG_FLAG_FRAME ) { <S2SV_ModEnd> ; sf -> <S2SV_ModStart> ; sf -> <S2SV_ModEnd> use_skip_,0
1493,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1494,"<S2SV_ModStart> compat_timex tx32 ; memset ( txc, 0, sizeof ( struct timex ) ) ;",1
1495,<S2SV_ModStart> } <S2SV_null> <S2SV_null> <S2SV_null>,0
1496,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1497,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1498,,0
1499,,0
1500,"<S2SV_ModStart> event -> prev, mutex_lock <S2SV_ModEnd> ) ; return",0
1501,<S2SV_ModStart> = tlen ( ( void ) <S2SV_ModEnd> ) ) {,0
1502,<S2SV_ModStart> ; if ( entry == NULL ) return EINVAL ; if ( <S2SV_ModStart> KADM5_POLICY ) && entry -> policy == NULL <S2SV_ModEnd> ) return KADM5_BAD_MASK <S2SV_ModStart> ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK <S2SV_ModEnd> ; if (,1
1503,<S2SV_ModStart> frame -> data [ plane ] && frame -> linesize <S2SV_ModStart> [ plane ] && frame -> linesize [ plane ],1
1504,"<S2SV_ModStart>, j ; memset <S2SV_ModEnd> ( mbmi,",0
1505,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyMemoTable *,0
1506,,1
1507,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
1508,<S2SV_ModStart> error ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1509,"<S2SV_ModStart> int flags = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, flags ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; if (! TEMP_FAILURE_RETRY ( <S2SV_ModStart> | 0 ) ) <S2SV_ModEnd> return false ;",0
1510,<S2SV_ModStart> ) ; } ND_TCHECK_16BITS ( & phdr ) ;,0
1511,"<S2SV_ModStart> * sptr, len + 1",0
1512,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_decode ( NSC_CONTEXT <S2SV_ModStart> ; UINT16 rw ; if (! context ) return FALSE ; <S2SV_ModStart> ; } } return FALSE ;,0
1513,<S2SV_ModStart> while ( offset > 0 && offset <S2SV_ModStart> < end_offset ) { <S2SV_ModStart> hf_keybuffer ) ; },1
1514,<S2SV_ModStart> out_free ; } if (! N ) { ret = - EINVAL ; goto out_error ; },0
1515,"<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> -> optimal_buffer_level = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( cpi, oxcf -> avg_frame_bandwidth <S2SV_ModEnd> < cpi -> <S2SV_ModStart> ) || ( cpi -> oxcf. rc -> avg_frame_bandwidth <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1516,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1517,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; else if ( ret <= size ) memcpy ( data, buf, ret ) ; kfree ( buf ) ;",0
1518,"<S2SV_ModStart> * r, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ) return 0 <S2SV_ModEnd> ( r )",0
1519,,0
1520,<S2SV_ModStart> { if ( datalen!= 1 ) return - EINVAL ; if (,1
1521,"<S2SV_ModStart> rc ) { struct task_struct * <S2SV_ModEnd> task = kthread_run <S2SV_ModStart> ; if ( IS_ERR ( task ) ) { <S2SV_ModStart> uwbd. task = NULL ; <S2SV_ModEnd> printk ( KERN_ERR <S2SV_ModStart> ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; } else { rc -> uwbd. task = task ; <S2SV_ModEnd> rc -> uwbd <S2SV_ModStart> pid ; } }",1
1522,,0
1523,<S2SV_ModStart> : idx ; assert ( ptr >= gfx -> backendData && ptr < ( ( char * ) gfx -> backendData + graphicsGetMemoryRequired ( gfx ) ) ) ;,1
1524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> vp9_coeffs ( const <S2SV_ModStart> * const VP9_COMMON * const MACROBLOCKD * const xd, MACROBLOCKD * const xd, BLOCKD * const xd -> plane [ plane ] ; MACROBLOCK_SIZE tx_size = & xd -> plane [ 0 ] ; const int64_t * const tx_size = & xd -> plane [ 0 ] ; const int64_t token_size = & xd -> plane [ 0 ] ; const int64_t * cat2 = xd -> plane [ 0 ] ; const uint8_t * const tx_size = & xd -> plane [ 0 ] ; const int64_t * const uint8_t * const uint8_t * dequant = xd -> plane [ 0 ] ; const int dequant = xd -> plane [ 0 ] ; const uint8_t * const uint8_t * const uint8_t * dequant = vp9_prob ; const uint8_t * const uint8_t *",0
1525,<S2SV_ModStart> } if ( pParse -> nErr &&,0
1526,<S2SV_ModStart> { if ( ( <S2SV_ModStart> shmflg & SHM_RND ) && addr >= shmlba,1
1527,<S2SV_ModStart> == 0 ) {,0
1528,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1529,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1530,<S2SV_ModStart> : case NPNVSupportsWindowless : case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling,1
1531,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_NOSIGNAL )",0
1532,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & ret )",0
1533,"<S2SV_ModStart> ( obj, ""%s"" <S2SV_ModEnd> ) ; }",0
1534,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_int <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""%s.\\"",",0
1535,<S2SV_ModStart> ) { const SvcInternal_t <S2SV_ModEnd> * const si,0
1536,<S2SV_ModStart> mq_ops ) ; fq -> tag = 0 ;,0
1537,"<S2SV_ModStart> s ) { uint32 length ; struct stream packet = * s <S2SV_ModEnd> ; ber_parse_header ( <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> params <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",1
1538,,0
1539,"<S2SV_ModStart> * buf ; if ( bytes_to_hdr ) { <S2SV_ModStart> = bytes_per_sample ( buf, <S2SV_ModEnd> ) ; }",0
1540,<S2SV_ModStart> * buf ; size_t ret ;,0
1541,<S2SV_ModStart> int i ; unsigned long count ; <S2SV_ModStart> if (! file_size <S2SV_ModEnd> ) return 0 <S2SV_ModStart> 0 ) ) { if (! s -> table_start ) return 0 ; <S2SV_ModStart> = '\\n' ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ;,0
1542,<S2SV_ModStart> const char * env = NULL <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) { <S2SV_ModEnd> return NULL ;,0
1543,<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ),0
1544,"<S2SV_ModStart> int seg ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart>, 0, sizeof ( seg ) ) ; memset <S2SV_ModEnd> ( seg ->",0
1545,<S2SV_ModStart> ) { return 0 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null> <S2SV_null>,0
1546,"<S2SV_ModStart> { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd, 0 )",0
1547,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ; break ; } while ( context -> pass > 0 && context -> pass < 4 && context -> curY >= p -> height ) { switch ( ++ context -> pass ) { case 2 : context -> curY = i -> posY + 4 ; break ; case 3 : context -> curY = i -> posY + 2 ; break ; case 4 : context -> curY = i -> posY + 1 ; break ; },1
1548,"<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cpi,",0
1549,"<S2SV_ModStart> ) ; } smb_ofile_flush <S2SV_ModEnd> ( sr, <S2SV_ModStart> f_mutex ) ; smb_ofile_flush <S2SV_ModEnd> ( sr,",1
1550,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> en ; int <S2SV_ModStart> = ( ( UINT16_MAX / ( u8 * 8 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> * out ; size_t pos = len ; <S2SV_ModStart> += 8 ; if ( ( len < 8 ) return - EINVALID_ACHE ) return - EINVAL ; <S2SV_ModStart> += 8 ; if ( len < 8 ) return - EINVAL ; <S2SV_ModStart> & 0x80 ) return FALSE ; if ( len < len ) return - EINVAL ; <S2SV_ModStart> * 8 ) return - EINVAL ; <S2SV_ModEnd> * out = <S2SV_ModStart> + len ; if ( len < len ) return false <S2SV_ModEnd> ; } <S2SV_null>,0
1551,"<S2SV_ModStart> ; if ( * cp == '\\0' || <S2SV_ModEnd> strchr ( cp <S2SV_ModStart> )!= NULL || <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ( cp, ""."" ) == 0 || strcmp ( cp, <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { run_err",1
1552,"<S2SV_ModStart> char * str, size_t <S2SV_ModEnd> * strlen ( <S2SV_ModStart> char * out <S2SV_ModEnd> ) { size_t <S2SV_ModStart> char * out <S2SV_ModEnd> = strlen ( <S2SV_ModStart> { char * out <S2SV_ModEnd> ; if ( <S2SV_ModStart> == '\\n"" ) { char * out = strbuf ; char * out = strlen ( buf ) ; char * out = strlen ( buf ) ; if ( strcmp ( out, ""\\\\' ) == '\\0' ) { char * out = strn"" ) ; if (! strcmp ( out ) ) { char * out = strcpy ( ""\\"" ) ; return 0 ; } <S2SV_ModEnd> } else { <S2SV_ModStart> "" ) ; if (! strcmp ( out ) { <S2SV_ModStart> } else { if (! strcmp ( out ) ) { char * out = strcpy ( ""\\n"" ) ; if (! strcmp ( out ) ) { char * out = <S2SV_ModEnd> ; out ( <S2SV_ModStart> "" ) ; if (! strcmp ( out ) ) { <S2SV_ModStart> cpy ( buf, ""\\"" ) ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> } else { char ) ; <S2SV_ModEnd> = ( strcpy ( <S2SV_ModStart> "" ) ; } <S2SV_ModStart> out ++ ; } <S2SV_ModStart> cpy ( strcmp ( """,0
1553,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( const size_t * ) val ; return 0 ;,0
1554,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart>, id ; if ( unlikely ( siphash_key_random_bytes ( & net -> ipv4. ip_id_key ) ) ) get_random_bytes ( & net -> ipv4. ip_key <S2SV_ModEnd>, sizeof ( <S2SV_ModStart>, sizeof ( net -> protocol ) )",0
1555,<S2SV_ModStart>,0
1556,"<S2SV_ModStart> void write_inter_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",0
1557,"<S2SV_ModStart> ctl -> pw, "".chfn""",1
1558,<S2SV_ModStart> { if ( max_length < sizeof ( struct ieee80211_radiotap_header ) ) return - EINVAL ; if ( <S2SV_ModStart> iterator -> _rtheader + sizeof ( uint32_t ),1
1559,<S2SV_ModStart> i ] ; if ( len > map -> len ) { <S2SV_ModStart> err = - EINVAL ; goto out ; } <S2SV_ModStart> ] ) ; if (! len ) { ret = - EINVAL ; goto error <S2SV_ModEnd> ; } <S2SV_ModStart>!,0
1560,<S2SV_ModStart> ; if (! cur_frame <S2SV_ModEnd> ( & src,0
1561,"<S2SV_ModStart> return ; } if ( input <= 0.0 || output <= 0.0 ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Gamma <S2SV_blank> values <S2SV_blank> should <S2SV_blank> be <S2SV_blank> positive"" ) ; RETURN_FALSE ; }",1
1562,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> switch_switch ( VPX_IMG_FMT_HIGHBITS2SV_null>,0
1563,<S2SV_ModStart> ; if ( cmd ) <S2SV_ModEnd> return 0 ;,0
1564,"<S2SV_ModStart> else if ( g_has_prefix <S2SV_ModEnd> ( arg, <S2SV_ModStart>, ""@@"" ) <S2SV_ModEnd> ) g_print (",0
1565,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_row <S2SV_ModStart> - 1 ) { VP9_COMMON * const tile_data ; MACROBLOCK * const tile_row = NULL ; int tile_cols = 0 ; int tile_row * tile_col = 0 ; int tile_cols = 0 ; int tile_data -> tile_cols = 0 ; uint8_t tile_cols [ tile_row ] ; int tile_cols = 0 ; tile_cols = NULL ; if ( tile_data -> tile_colors [ 0 ]!= NULL ) { vpx_write_bit <S2SV_ModEnd> ( tok, <S2SV_ModStart> ) ; } vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write <S2SV_ModEnd> ( w,",0
1566,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int frame_parallel_decode ( VP9_COMMON * cm, vpx_worker_data <S2SV_ModEnd> ) { int <S2SV_ModStart> = 0 ; vpx_get_worker_data = 0 ; for ( i = 0 ; i < 0 ; ++ i ) { VPxWorkerData * const frame_worker_data = 0 ; FrameWorkerData * data1 = 0 ; # endif vpx_get_worker_data <S2SV_ModEnd> ( ) <S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if (! <S2SV_ModStart> -> frame_worker_data ) { vpx_free_worker_data <S2SV_ModEnd> ( ) ; <S2SV_ModStart> } else { vp9_worker_data = vp9_data -> frame_worker_data <S2SV_ModEnd> -> pbi -> <S2SV_ModStart> = 1 ; # endif vp9_get_frame_worker_data <S2SV_ModEnd> -> frame_worker_data <S2SV_ModStart> frame = 1 ; # endif vp9_decode = 1 ; # endif vp9",0
1567,<S2SV_ModStart> ) ) { size_t res ; <S2SV_ModStart> i ] ; },0
1568,<S2SV_ModStart> client ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1569,<S2SV_ModStart> -> count ; new_fpl -> user = get_uid ( fpl -> user ) ;,1
1570,<S2SV_ModStart> & opt -> opt. <S2SV_ModStart> && opt -> opt.,0
1571,"<S2SV_ModStart> t, vstart <S2SV_ModEnd> * w,",0
1572,,0
1573,<S2SV_ModStart> ctx ) ; <S2SV_ModEnd> return - EINVAL,0
1574,"<S2SV_ModStart> ) ; struct mnt_namespace * ns = dest_mnt -> mnt_ns ; struct <S2SV_ModStart> ; if (! parent_hash ) { err = count_mounts ( ns, source_mnt <S2SV_ModEnd> ) ; if <S2SV_ModStart> goto out ; } if ( IS_MNT_SHARED ( dest_mnt ) ) goto out ;",0
1575,"<S2SV_ModStart>, & len, 0",1
1576,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = _mm_set1_epi16 ( ( int16_t ),0
1577,<S2SV_ModStart> rc ; const int rc -> avg_frame_bandwidth <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1578,<S2SV_ModStart> in ) ; jas_uchar <S2SV_ModEnd> buf [ j,0
1579,"<S2SV_ModStart> byte * fout, int maxoffset <S2SV_ModStart> NYT, fout, maxoffset",0
1580,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> -> common ; RD_COST * const rd = & td -> rd_mode ; <S2SV_ModStart> -> mb ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. aq_mode == KEY_FRAME ) { VP9_COMMON * const cm = cpi -> common ; # endif <S2SV_ModStart> -> mbmi_ext = xd -> mbmi_ext ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. noise_mode == KEY_FRAME ) { cpi -> oxcf. aq_mode = cpi -> width ; } else { cpi -> oxcf. rd_mode = cpi -> oxcf. aq_mode ; } <S2SV_ModStart> -> mbmi_ext = cpi -> oxcf. aq_mode ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. aq_mode == KEY_FRAME && cpi -> oxcf. noise_sensitivity && cpi -> oxcf. aq_mode == KEY_FRAME && cpi -> oxcf.",0
1581,<S2SV_ModStart> if ( ( buflen < size ) || ( size < sizeof ( struct desc ) ),0
1582,"<S2SV_ModStart> key ) { <S2SV_ModEnd> keylen = 0 <S2SV_ModStart> ; struct crypto_cipher * tfm_des <S2SV_ModEnd> ; str_to_key ( <S2SV_ModStart> ; tfm_des = crypto_alloc_cipher ( ""des"" <S2SV_ModEnd>, 0, <S2SV_ModStart>, 1, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> 1 ) return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
1583,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1584,,0
1585,<S2SV_ModStart> i > pos + delta <S2SV_ModEnd> ) insn ->,0
1586,<S2SV_ModStart> case EXIT_REASON_INVEPT : case EXIT_REASON_INVVPID :,1
1587,"<S2SV_ModStart> { p = osStrchr <S2SV_ModEnd> ( line,",0
1588,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } else {,0
1589,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1590,"<S2SV_ModStart> ++ r ; if <S2SV_ModEnd> ( pow ( <S2SV_ModStart>, dim ) <= entries ) return - 1 ; if <S2SV_ModEnd> ( ( int <S2SV_ModStart> dim ) ) > entries ) return - 1 <S2SV_ModEnd> ; return r",1
1591,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> ; } } return ( <S2SV_ModStart> dds_info, 16, exception ) ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
1592,<S2SV_ModStart> ; if ( <S2SV_ModEnd> > opt ->,0
1593,,0
1594,"<S2SV_ModStart> return - ENOTEMP_FAILURE_RETRY ( <S2SV_ModStart>, & len )",0
1595,,0
1596,"<S2SV_ModStart> cfg ) { struct stat st ; FILE * file = NULL ; int fd = - 1 ; <S2SV_ModStart> } } } fd = open ( filename, O_RDONLY | O_WRONLY | O_CLOEXEC | O_NOFOLLOW | O_NOFOLLOW | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY <S2SV_ModStart> ) ; } if ( fd!= - 1 ) { fd = - 1 ; <S2SV_ModStart> = 0 ; } <S2SV_ModEnd> } if ( <S2SV_ModStart> = 0 ; file ) { fd = - 1 ; <S2SV_ModStart> == 0 ; } <S2SV_ModEnd> } <S2SV_null>",0
1597,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! f2fs_readonly (,1
1598,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1599,"<S2SV_ModStart> x ) { sprintf ( outputbuffer <S2SV_ModEnd>, 0,",0
1600,"<S2SV_ModStart>, 1, <S2SV_ModEnd> s ) <S2SV_null> <S2SV_null>",0
1601,<S2SV_ModStart> user ) ; <S2SV_ModEnd> return 1 ;,0
1602,<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cpi ->,0
1603,<S2SV_ModStart> == ARPHRD_ETHER ) { <S2SV_ModStart> ether_setup ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; },1
1604,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (",1
1605,<S2SV_ModStart> pbi ) { if ( pb -> common!= NULL ) return NULL ;,0
1606,<S2SV_ModStart> { if ( l == NULL ) break ; if (,1
1607,<S2SV_ModStart> } if ( ( ( <S2SV_ModStart> portBYTE_ALIGNMENT_MASK ) ) ) { xWantedSize = 0 ; } else {,0
1608,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1609,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1610,<S2SV_ModStart> uint8 * tmp <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ; } tmp = ( uint8 * ) _TIFFmalloc ( cc ) ;,0
1611,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1612,<S2SV_ModStart> ( sptr && (,0
1613,"<S2SV_ModStart> ) ) { ND_TCHECK2 ( * tptr ) ; <S2SV_ModStart> len ) ; if ( len > 6 ) { ND_PRINT ( ( ndo, ""\\t]"" ) ) ; break ; }",0
1614,<S2SV_ModStart> { uint16 bitspersample = 1,0
1615,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1616,<S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> coef_probs [ tx_size,0
1617,"<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
1618,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x0 ; state -> data [ 2 ] = 0xe ; state -> data [ 2 ] = 0x0 ; state -> data [ 1 ] = 0x02 ; state -> data [ 2 ] = 0xe ; state -> data [ 2 ] = 0x0 ; state -> data [ 2 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> 0 ], state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> 300 ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> 0 ] = state -> data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ""command <S2SV_blank> 0x0x0x0x0x0e <S2SV_blank> failed."" ) ; state -> data [ 1 ] = 0x0 ; state -> data [ 1 ] = 0x0 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> = 0x83 ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0x83 ; state -> data <S2SV_ModEnd> [ 2 ]",0
1619,<S2SV_ModStart> ) ; return true ;,0
1620,<S2SV_ModStart> ( ctx -> frame_workers <S2SV_ModEnd> == 0 ),0
1621,"<S2SV_ModStart> void vp9_filter_cost ( vpx_reader <S2SV_ModEnd> * w, <S2SV_ModStart> BLOCK_SIZE tx_size, vpx_writer, vpx_writer, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_probmi, BLOCK_8x8 <S2SV_ModEnd> * w, <S2SV_ModStart> ++ ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ ) { vpx_wb_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) ; vpx_free <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) ; vpx_wb_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <SV_null>",0
1622,<S2SV_ModStart> ; # endif assert ( strchr ) ; if (,0
1623,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int n,",0
1624,<S2SV_ModStart> tk_status ) ; switch ( task -> tk_status ) { case - EACCES : case - EIO : goto die ; default : <S2SV_ModStart> goto retry_rebind ; },1
1625,"<S2SV_ModStart> * inode ; struct iinfo ; int iinfo = 0 ; <S2SV_ModStart> ( inode -> i_len ) ; if ( i_len > bhdr ) goto out ; <S2SV_ModStart> ( bhdr ) { if ( iinfo -> i_len > bhdr ) goto out ; } <S2SV_ModStart> ( bs, inode -> i_len ) ; if ( i_len > bhdr ) goto out ; <S2SV_ModStart> ( bhdr, inode -> i_len ) ; if ( i_len > bh -> i_len ) goto out ;",0
1626,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
1627,"<S2SV_ModStart> ) ) ; ND_TCHECK_LEN ( a, 1 ) ;",0
1628,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> int i ; # if CONFIG_VP9_HIGHBITDEPTH ) { vpx_write_bit ( ) ; <S2SV_ModStart> ( ) ; vpx_write_buffer ( ) ; <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1629,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1630,<S2SV_ModStart> out_free ; } if ( unlikely (! fanout_out ) ) return - EINVAL ;,0
1631,"<S2SV_ModStart>, int i, vpx_bit_depth_t bit_depth <S2SV_ModStart> q ) { memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> i ] ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> q ) ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> i ) ; memcpy <S2SV_ModEnd> ( seg, <S2SV_ModStart>, i, <S2SV_ModEnd> ) ; }",0
1632,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
1633,"<S2SV_ModStart> ( void ) TIFFGetFieldDefaulted <S2SV_ModEnd> ( in,",1
1634,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
1635,"<S2SV_ModStart> out, buf, & buf",0
1636,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1637,"<S2SV_ModStart> ""corrupt <S2SV_blank> BSON"" ) ; VALIDATE_TEST ( ""test59.bson"", BSON_VALIDATE_NONE, 9, BSON_VALIDATE_NONE, ""corrupt <S2SV_blank> BSON"" ) ;",1
1638,<S2SV_ModStart> xbn ) ; <S2SV_ModEnd> return nc ;,0
1639,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1640,<S2SV_ModStart> goto out_unlock ; ret = - EPERM ; if ( unlikely (! ( cur -> vm_flags & VM_MAYWRITE ) ) ) goto out_unlock ; <S2SV_ModStart> ctx!= ctx ) ; WARN_ON (! ( vma -> vm_flags & VM_MAYWRITE ),1
1641,<S2SV_ModStart> key_data ) ; if (! data_size ) return NULL ;,0
1642,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1643,<S2SV_ModStart> ; if (! file ) return FALSE ; if (,0
1644,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x0 ; state -> data [ 2 ] = 0xe ; state -> data [ 2 ] = 0x0 ; state -> data [ 1 ] = 0x02 ; state -> data [ 2 ] = 0xe ; state -> data [ 2 ] = 0x0 ; state -> data [ 2 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> 0 ], state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> 300 ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> 0 ] = state -> data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ""command <S2SV_blank> 0x0x0x0x0x0e <S2SV_blank> failed."" ) ; state -> data [ 1 ] = 0x0 ; state -> data [ 1 ] = 0x0 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> = 0x83 ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0x83 ; state -> data <S2SV_ModEnd> [ 2 ]",0
1645,"<S2SV_ModStart> char * dat, int max = 0",0
1646,<S2SV_ModStart> L ) ; g -> gcstate = GCSswpallgc ;,0
1647,<S2SV_ModStart> ; int ret = 0 ; ret = - EINVAL ; goto out <S2SV_ModEnd> ; } <S2SV_null>,0
1648,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_net ( SOCK <S2SV_ModStart> S2SV_null> SOCK_EC_SIZE - 1 <S2SV_ModEnd> ) { struct <S2SV_ModStart> NULL ) { int <S2SV_ModEnd> read_unlock ( s <S2SV_ModStart> ) ; } s = ssl_new_read_unlock ( s ) ; if ( ( status == 0 ) { SSL_ERROR ( ( s ), ""No <S2SV_blank> failed"" ) ; ssl_write <S2SV_blank> failed"" ) ; return - 1 ; }",0
1649,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct socket ; struct <S2SV_ModStart> struct sockaddr ; int <S2SV_ModEnd> struct sockaddr ; <S2SV_ModStart> { struct sockaddr_in * <S2SV_ModStart> struct sockaddr ; struct sockaddr * <S2SV_ModStart> struct sockaddr ; struct sockaddr_in * <S2SV_ModStart> struct sockaddr ; struct sockaddr * <S2SV_ModStart> struct sockaddr ; struct sockaddr ; struct sockaddr * <S2SV_ModStart> ) { struct sockaddr ; int ret = 0 ; if (! fcib_in ) { struct sockaddr = NULL ; int res = 0 ; if (! ( flag |= 0 ) call_err ( ""Failed <S2SV_blank> to <S2SV_blank> failed.\\n"" ) ; ret = - 1 ; if ( ret < 0 ) { struct sockaddr = - 1, ""Failed <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> failed"" ) ; goto done ; } struct sockaddr ; struct sockaddr_in = private -> data ; struct sockaddr, & sockaddr, sizeof ( struct sockaddr ) ; struct sockaddr = 0 ; inet_opt_info ( inet_opt, & sock, sizeof ( struct sockaddr ) ; if ( ret < 0 ) { struct sockaddr_",0
1650,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & cpi,0
1651,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1652,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",1
1653,"<S2SV_ModStart> ( ndo, ""%s"", icmp6_tstr <S2SV_ModEnd> ) ) ;",0
1654,"<S2SV_ModStart> ctx, expr -> unary. child",1
1655,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1656,"<S2SV_ModStart> int mptctl_replace_targetinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
1657,"<S2SV_ModStart> < 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModEnd> * p ++ <S2SV_ModStart> < 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModEnd> * p ++",0
1658,,0
1659,,0
1660,"<S2SV_ModStart> int vpx_reader <S2SV_ModEnd> ( r, <S2SV_ModStart> <S2SV_null> <S2SV_null> static",0
1661,<S2SV_ModStart> ; int is_valid = ( error == GIT_OK ) <S2SV_ModStart> giterr_clear ( ) <S2SV_ModEnd> ; error =,1
1662,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1663,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_inter_mode ( VP9_COMMON <S2SV_ModStart> * cm, MACROBLOCKD * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int mode = vpx_read <S2SV_ModEnd> ( r,",0
1664,<S2SV_ModStart> } if ( ptr [ 0 ] &&,0
1665,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vpx_codec_alg_priv_t new_encoder_t * <S2SV_ModStart> = 0 ; int flags = 0 ; <S2SV_ModStart> = 0 ; error = new_vpx_codec_err ( vpx_t * ) stream -> next = 0 ;,0
1666,"<S2SV_ModStart> ) bp ; ND_TCHECK ( * bp, 2 ) ;",0
1667,<S2SV_ModStart> ; } } else {,0
1668,"<S2SV_ModStart> = other ; unix_dgram_peer_wake_wakeup ( sk, sk ) ; <S2SV_ModStart> = max_peer_wakeup ; <S2SV_ModEnd> if (! sk",0
1669,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1670,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; if ( <S2SV_ModStart> -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len - A,1
1671,"<S2SV_ModStart> ]. size ; if ( ~ length < 16 ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" )",1
1672,<S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1673,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1674,<S2SV_ModStart> ; # endif tok -> type_comments = 0 ;,0
1675,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1676,<S2SV_ModStart> ) ) { size_t res ; <S2SV_ModStart> i ] ; },0
1677,"<S2SV_ModStart> ; buff [ MIN ( ( size_t ) r, ( sizeof buff ) - 1 ) <S2SV_ModEnd> ] = '\\0'",1
1678,<S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( dp ->,0
1679,"<S2SV_ModStart> int flags, <S2SV_ModEnd> struct oe_sockaddr *",0
1680,,1
1681,"<S2SV_ModStart>, u32 length <S2SV_ModEnd> ) ; if",0
1682,"<S2SV_ModStart> addr, fl6, rt",0
1683,,0
1684,,0
1685,"<S2SV_ModStart>, buffer, t2p -> tiff_datasize,",1
1686,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
1687,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_decode ( NSC_CONTEXT <S2SV_ModStart> ; UINT16 rw ; if (! context ) return FALSE ; <S2SV_ModStart> ; } } return FALSE ;,0
1688,"<S2SV_ModStart>, inode -> i_sb <S2SV_ModEnd> ) ) {",0
1689,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1690,<S2SV_ModStart> ; } } else {,0
1691,,0
1692,"<S2SV_ModStart> size = INT_MAX ; if ( unlikely (! access_ok ( VERIFY_WRITE, ubuf, size ) ) ) return - EFAULT",0
1693,"<S2SV_ModStart> & cpi -> td. <S2SV_ModStart> -> mv_err ; PREDICTION_MODE <S2SV_ModEnd> * ref_frame = <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( step_err, <S2SV_ModStart>, 0, sizeof ( tmp_err ), mv <S2SV_ModEnd> ) ; int",0
1694,"<S2SV_ModStart>, sizeof ( struct archive *",0
1695,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> dupbi ->,0
1696,"<S2SV_ModStart> ( used_address && msg_sys -> msg_name && <S2SV_ModStart> -> name, msg_sys <S2SV_ModEnd> -> msg_name, <S2SV_ModStart> -> msg_namelen ; if ( msg_sys -> msg_name ) <S2SV_ModStart> -> name, msg_sys <S2SV_ModEnd> -> msg_name,",1
1697,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
1698,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
1699,<S2SV_ModStart> comp -> type <S2SV_ModEnd> ; if (,0
1700,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1701,<S2SV_ModStart> client -> crm_client!= 0,0
1702,"<S2SV_ModStart> * p, int i <S2SV_ModEnd> ) { if",0
1703,<S2SV_ModStart> x ) ; <S2SV_ModEnd> } else {,0
1704,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1705,<S2SV_ModStart> ) ; goto out_free <S2SV_ModEnd> ; } if,0
