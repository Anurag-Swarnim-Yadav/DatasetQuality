,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; if ( n2size < 1 ) <S2SV_ModEnd> { applog (,0
1,<S2SV_ModStart> case EAP_TYPE_PACKET : ND_TCHECK_8BITS ( tptr ) ; <S2SV_ModStart> * ) { ND_TCHECK_8BITS ( tptr ) ; <S2SV_ModStart> case EAP_TYPE_TTLS : ND_TCHECK_8BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_TTLS : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_16BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 6 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_16BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_SIM : ND_TCHECK_8BITS ( tptr + 6 ) ; <S2SV_ModStart> case EAP_TCHECK_8BIT,0
2,<S2SV_ModStart> ; return ret <S2SV_ModEnd> ; } <S2SV_null>,0
3,<S2SV_ModStart> ; if ( <S2SV_ModEnd> skb ) return -,0
4,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
5,"<S2SV_ModStart>, offset ; if ( index == 0 ) return AVERROR_INVALIDDATA ;",0
6,<S2SV_ModStart> * tpg ; u16 <S2SV_ModEnd> tpgt ; int <S2SV_ModStart> ; if ( kstrtou16 <S2SV_ModEnd> ( name + <S2SV_ModStart> ) || tpgt >= VHOST_SCSI_MAX_TARGET <S2SV_ModEnd> ) return ERR_PTR,1
7,<S2SV_ModStart> writer ) ; g -> stream = NULL ;,0
8,"<S2SV_ModStart> { u32 data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; kvm_read_guest_cached ( vcpu -> kvm, & <S2SV_ModEnd> vcpu -> vapic_cache",0
9,<S2SV_ModStart> src ) ; __switch_to_tm ( src ) ; tm_recheckpoint_new_task ( src ) ;,1
10,<S2SV_ModStart> c ) { <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; <S2SV_ModEnd> return 0 ;,0
11,"<S2SV_ModStart> ( sb, KERN_ERR,",1
12,"<S2SV_ModStart> ipv6_select_ident ( fptr, ( struct rt6_info * ) skb_dst ( skb )",1
13,"<S2SV_ModStart> perf_event * regs <S2SV_ModEnd>, struct perf_sample_data <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, regs",0
14,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ] ) { grub_block = ext4_get_block_block ( inode ) ; if ( ext4_errno ) { grub_errno = 1 ; return 0 ; } <S2SV_ModStart> ) ) { free ( buf ) ; return 0 ; } <S2SV_ModStart> ) ) ; },0
15,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 2 ] ; tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> output ) { tran_low_t <S2SV_ModEnd> output ) { <S2SV_ModStart> output ) ; tran_low_t <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> output ) ; tran_low_t <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 2 ] = ( tran_low_t )",0
16,<S2SV_ModStart> == 0 ) sanitize_dead_code ( env ) ; if ( ret == 0 ),1
17,"<S2SV_ModStart> int i ; if (! config -> sample_rate ) { strcpy ( wpc -> error_message, ""sample <S2SV_blank> rate <S2SV_blank> cannot <S2SV_blank> be <S2SV_blank> zero!"" ) ; return FALSE ; }",1
18,"<S2SV_ModStart> cgc = 0 <S2SV_ModEnd> ; cgc -> <S2SV_ModStart> cgc -> senseptr = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> cgc -> senseptr, senseptr, senseptr, sense_buffer <S2SV_ModEnd> ) ; if",0
19,<S2SV_ModStart> ; if ( safe_calloc ( <S2SV_ModEnd> len > 0,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const <S2SV_ModStart> filter_frame ; const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> = & cpi -> oxcf ; # if CONFIG_VP9_HIGHBITDEPTH int64_t_highbd ; memcpy <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ) continue ; # if CONFIG_VP9_HIGHBITDEPTH int64_highbd ; # if CONFIG_VP9_HIGHBITDEPTH int bit_depth ; # if CONFIG_VP9_HIGHBITDEPTH int64_HIGHBITDEPTH int64_highbd_highbitdepth ; # if CONFIG_VP9_HIGHBITDEPTH int64_HIGHBITDEPTH if ( cpi -> twopt_highbitdepth > 0 ) return ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> left_HIGHBITDEPTH ) continue ; # if CONFIG_HIGHBITDEPTH if ( cpi -> oxcf. use_frame ) { vp9_highbd_highbit ( cpi, & cpi -> oxcf.",0
21,"<S2SV_ModStart> 1 ) { luaL_checkstack <S2SV_ModEnd> ( L,",0
22,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_write_bit <S2SV_ModEnd> ) { return",0
23,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ralg -> seedsize,1
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (,1
25,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } else { <S2SV_ModStart> = COAP_256 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; },0
26,<S2SV_ModStart> char * fmtname ; int debug <S2SV_ModStart> = 0 ; debug = 0 ; <S2SV_ModStart> break ; case OPT_DEBUG : debug = atoi ( jas_optarg ) ; break ; case <S2SV_ModStart> ; } } jas_setdbglevel ( debug ) ; <S2SV_ModStart> ) ) { jas_stream_close ( instream ) ;,1
27,<S2SV_ModStart> esr ) { siginfo_t info ; void __user * pc = ( void __user * ) info ; info. si_signo = ( regs ) ; info. si_signo = ( regs ) ; info. si_errno = 0 ; info. si_errno <S2SV_ModEnd> ; } info,0
28,"<S2SV_ModStart> u_char * ptr, length <S2SV_ModStart> ) ) ; if ( length < 0 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ptr ++ ; length -= 2 ; length -= 3 ; <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr ++ ) ptr ++ ; length -= 2 ; <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; length -= 2 ; if ( length < 0 ) return ;",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * <S2SV_ModEnd> alt ; alt <S2SV_ModStart> ; if (! alt ) return - ENODEV <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart> ( udev, alt -> <S2SV_ModEnd> desc. bInterfaceNumber <S2SV_ModStart> bInterfaceNumber, alt -> desc. bAlternateSetting",1
30,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_pc_char * tolen <S2SV_ModStart> = 0 ; int comp_len ; <S2SV_ModStart> = 0 ; tolen -= 3 ; if ( tolen == 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 2 : if ( tolen < tolen ) return - ENAMETOOLONG ; <S2SV_ModStart> case 2 : if ( tolen < 2 ) return - ENAMETOOLONG ; <S2SV_ModStart> = '/' ; tolen -- ; tolen -= 2 ; <S2SV_ModStart> = '/' ; tolen -- ; tolen -= 3 ;,0
31,<S2SV_ModStart> == - 1 || buff,0
32,<S2SV_ModStart> unsigned long flags ; if ( qid > NVMET_NR_QUEUES ) return NULL,1
33,"<S2SV_ModStart> -> minor_data ; retval = usb_set_intfdev ( interface, dev, dev ) ; if ( retval ) goto error ; <S2SV_ModEnd> ; retval = <S2SV_ModStart> ) ) ; dev_err ( dev, dev ) ; if ( retval ) goto error ;",0
34,"<S2SV_ModStart> = 0 ; i >= 0 && <S2SV_ModStart> out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; break ; }",0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2SV_null> <S2SV_null> static,0
36,<S2SV_ModStart> = create_spnego_ctx ( 1,1
37,<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if ( addr -> l2tp_family!= AF_INET <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> ret = -,0
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int max_release_sample ( unsigned int <S2SV_ModEnd> max ) {,0
39,"<S2SV_ModStart>, _ ( ""_Cancel"" ), GTK_RESPONSE_CANCEL ), GTK_RESPONSE_CANCEL <S2SV_ModEnd> ) ; if",0
40,<S2SV_ModStart> str ) { <S2SV_ModEnd> return - 1,0
41,<S2SV_ModStart> password ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> static,0
42,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x51 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ; if ( adap <S2SV_ModEnd> -> fe_adap )",0
43,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
44,<S2SV_ModStart> } } } <S2SV_ModEnd> char * out,0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
46,"<S2SV_ModStart> tsample_t s ; uint16 bps = 0 ; ( void ) TIFFGetField ( in, TIFFTAG_BITSPERSAMPLE, & bps ) ;",0
47,"<S2SV_ModStart> ) ; struct hugepage_subpool * spool = ( struct hugepage_subpool <S2SV_ModEnd> * ) page_private <S2SV_ModStart> hugetlb_lock ) ; hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, 1 )",1
48,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) { return AVERROR_EOF ; } if (,1
49,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return try_get_page <S2SV_ModEnd> ( buf ->,1
51,"<S2SV_ModStart>, cp, ep2, map, nmap ) ; } else cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> < ep2 ) <S2SV_ModEnd> ND_PRINT ( (",1
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
53,<S2SV_ModStart> ) ; } if (! read_fdt ),0
54,<S2SV_ModStart> config -> pm_max_requests ; fpm_globals. listening_socket = dup ( wp -> listening_socket ),1
55,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_inter_inter_frame ( TWO_PASS <S2SV_ModEnd> * twopass <S2SV_ModStart> = 0 ; const VP9EncoderConfig <S2SV_ModEnd> * const twopass <S2SV_ModStart> ) { const FIRSTPASS_STATS * const twopass = twopass ; const FIRSTPASS_STATS * const twopass = & twopass -> stats_frame ; const FIRSTPASS_STATS * const twopass = twopass -> stats_frame ; const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const next_frame = twopass -> next_frame ; } else { if ( twopass == 0 &&! twopass -> stats_in_frame == KEY_FRAME ) { const FIRSTPASS_FRAME ; } else { const FIRSTPASS_STATS * next_frame = twopass -> next_frame ; } else { if ( twopass -> stats_inter >= 0.pcnt_inter &&! is_inter &&! ( twopass ) return this_frame_frame,0
56,<S2SV_ModStart> 0 ; } err = handle -> h_err ; <S2SV_ModStart> h_transaction ) { rc <S2SV_ModEnd> = jbd2_journal_stop ( <S2SV_ModStart> ) ; return err? err : rc <S2SV_ModEnd> ; } sb <S2SV_ModStart> t_journal -> j_private <S2SV_ModEnd> ; rc =,1
57,"<S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
58,<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = args -> valuelen ;,1
59,<S2SV_ModStart> ; if ( <S2SV_ModEnd> mask = name,0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> len - 2 ; if ( len < stlv_len ) goto trunc ; ND_TCHECK2 ( * ( tptr ), stlv_len ) <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> - ISIS_SUBTLV_SPB_INSTANCE_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_SPB_INSTANCE_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_INSTANCE_SUBTLV_SPB_LEN ; <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE_LEN : if ( stlv_len < ISIS_SUBTLV_SPB_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> - ISIS_SUBTLV_SPB_MIN_LEN ; stlv_len = stlv",0
61,"<S2SV_ModStart>, int len <S2SV_ModEnd> ) ; if",0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,<S2SV_ModStart> == 12 && ( <S2SV_ModStart> flags & TH_SYN ),1
64,"<S2SV_ModStart> -> ipc_socket ; <S2SV_ModEnd> lxc_attach_options_t * options <S2SV_ModStart> int fd ; int lsm_labelfd ; <S2SV_ModStart> { ERROR ( ""Error <S2SV_blank> to <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> %s"", strerror ( errno ) ) ; shutdown ( errno ) ; shutdown ( errno ) ; shutdown ( - 1, SHUT_RDWR ) ; shutdown ( errno ) ; shutdown ( ""Error <S2SV_blank> to <S2SV_blank> %s"", strerror ( errno ) ) ; shutdown ( errno, - 1 ) ; shutdown ( errno, SHUT_RDWR ) ; shutdown ( errno, SHUT_RDWR ) ; shutdown ( errno ) ; shutdown ( - 1 ) ; shutdown ( errno, SHUT_RDWR ) ; shutdown ( errno, SHUT_RDWR ) ; shutdown ( errno, SHUT_RDWR ) ; shutdown ( errno, SHUT_RDWR ) ; shutdown ( errno, SHUT_RDWR ) ; shutdown ( errno, SHUT_RDWR ) ; shutdown ( errno, SHUT_RDWR ) ; shutdown ( errno, SHUT_",0
65,<S2SV_ModStart> = 0 ; char * pkt = NULL ; size_t len ; <S2SV_ModStart> + 1 ; len = 0 ; if ( len < line ) return - 1 ; <S2SV_ModStart> break ; } if (! <S2SV_ModEnd> line ) return,0
66,"<S2SV_ModStart> ( header -> biBitCount == 0 ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> biBitCount <S2SV_blank> %d\\n"", 0 ) ; return OPJ_FALSE ; } if ( header ->",1
67,<S2SV_ModStart> NULL ; } sas_probe_devices ( port ) ;,1
68,<S2SV_ModStart> 0 ) { if ( image -> colormap_index < image ) image -> colormap_index ;,0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> ENOBUFS ; } memset ( & line, 0, sizeof ( line ) ) ;",1
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_blk_ioctl ( bd, cmd ) ; if ( ret < 0 ) return ret ;",1
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
73,<S2SV_ModStart> * ureq ; unsigned <S2SV_ModStart> return - EFAULT ; if (! req_len ) return - EINVAL,0
74,"<S2SV_ModStart> int m ; if ( n < 0 ) { jas_deprecated ( ""negative <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_pad"" ) ; }",1
75,<S2SV_ModStart> p ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ) ) ; },0
76,<S2SV_ModStart> av_log ( mxf -> fc,1
77,"<S2SV_ModStart> mntent, path, rootfs -> mount <S2SV_ModEnd> ) ; return",0
78,<S2SV_ModStart> + 10 ; if ( psf -> fileoffset < psf -> filelength ) { <S2SV_ModStart> ; } ; } ;,1
79,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( p + l2info -> cookie_len ) ;,1
80,<S2SV_ModStart> NF_STOLEN ; return err == 0? NF_ACCEPT : NF_DROP <S2SV_ModEnd> ; } <S2SV_null>,1
81,"<S2SV_ModStart> * up ; ulen = kzalloc ( klen, ulen ) ; ulen = klen ( klen, GFP_KERNEL ) ; if ( klen > klen ) return - ENOMEM ; memcpy ( up, up, ulen ) ; klen = klen ; memcpy ( up, up, ulen ) ; klen <S2SV_ModEnd> ; } <S2SV_null>",0
82,<S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> ; } io -> io_cleanup = 0 ;,0
83,<S2SV_ModStart> ) break ; case EINVALID : value = ( value + 1 ) ; break ; case,0
84,<S2SV_ModStart> = 0 ; ret = 0 ;,0
85,"<S2SV_ModStart> ( buf = jas_alloc3 ( bufsize, numcols <S2SV_ModEnd>, sizeof (",1
86,<S2SV_ModStart> * cfg ; <S2SV_ModEnd> if ( map,0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> gso. type ) ; netbk_fatal_tx_err ( vif",1
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> < 0 ) <S2SV_ModEnd> bitmap_pos = ext_index_add_object <S2SV_ModStart> name ) ; <S2SV_ModEnd> bitmap_set ( base",1
89,"<S2SV_ModStart> xfr_cmd, fname <S2SV_ModEnd> ) ; free",1
90,<S2SV_ModStart> mixer ) { snd_usb_mixer_disconnect ( mixer ) ;,1
91,<S2SV_ModStart> ) { struct packet_rollover * rollover = NULL ; struct <S2SV_ModStart> EINVAL ; mutex_lock ( & fanout_mutex ) ; err = - EINVAL ; mutex_lock ( & fanout_mutex ) ; err = - EINVAL ; err = - EINVAL ; goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto out : mutex_lock ( & rollover -> fanout_mutex ) ; err = - EINVAL ; err = - EINVAL ; goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_huge <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> rollover <S2SV_ModStart> size ) ) ; mutex_unlock ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_mutex ) ; po -> rollover = NULL ;,0
92,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( newsk,0
93,<S2SV_ModStart> ) ; } size_t <S2SV_ModEnd> new_size = 0,0
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
95,<S2SV_ModStart> ( ) { <S2SV_ModEnd> return NULL ;,0
96,"<S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_START ) ; enc28j60WriteReg ( interface, ENC28J60_EIR <S2SV_ModEnd> ) ; enc28j60_t <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_START ) ; enc28j60_t <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR ) ; enc28j60_t <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_START ) ; enc28j60WriteReg ( interface, ENC28J60_EIR_START <S2SV_ModEnd> ) ; enc28j60_EIR <S2SV_ModStart> ( interface, ENC28J60_EIR ) ; }",0
97,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
98,<S2SV_ModStart> ) ) { char * filename = r ; <S2SV_ModStart> == '\\0' ) { <S2SV_ModStart> ) ) ; } else { <S2SV_ModStart> return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { <S2SV_ModStart> NULL ) ; },0
99,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { ret =,0
100,<S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ;,1
101,"<S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, cgroup ) ) { ret = - ENOENT ; goto out ; } if (!",1
102,"<S2SV_ModStart> int mi_stride, vpx_free ( vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> -> ybf ) ; memcpy <S2SV_ModEnd> ( source, <S2SV_ModStart>, qb ) ; memcpy <S2SV_ModEnd> ( yv_stride, <S2SV_ModStart> ++ ] ; vpx_free ( source ) ;",0
103,<S2SV_ModStart> = 0 ; ptr -> next = 0 ;,0
104,"<S2SV_ModStart> : if (! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) bprm -> per_clear |= PER_CLEAR_ON_SETID ; if (",1
105,"<S2SV_ModStart> bh ) { <S2SV_ModEnd> int error = <S2SV_ModStart> error ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache ; <S2SV_ModStart> error ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> error ) ; error = mb2_cache_add ( bh, bh -> b_blocknr <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( error ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
106,<S2SV_ModStart> rlen ) ; } <S2SV_ModEnd> rlen = rlen,0
107,<S2SV_ModStart> tf = ( <S2SV_ModEnd> luaY_parser ) (,1
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.",1
110,"<S2SV_ModStart> ; dl = kzalloc <S2SV_ModEnd> ( size,",1
111,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static u_int <S2SV_ModEnd> rpki_pki_rtr_pki_rtr ( <S2SV_ModStart> * tptr ) { ND_TCHECK_16BITS ( * tptr ) ; <S2SV_ModStart> * tptr ; ND_TCHECK_16BITS ( * tptr ) ; if ( * tptr == 0 ) { ND_TCHECK_16BITS ( tptr ) ; return len ; } if ( len < sizeof ( * tptr ) ) ) { ND_TCHECK_16BITS ( * tptr ) ; return FALSE ; } if ( * tptr == 0 ) { ND_TCHECK_16BITS ( tptr ) ; return len ; } if ( pdu_pki_pki_pki_pki_pki_pki_pki_pdu ) { ND_PRINT ( ( ndo, sizeof ( rpki_rtr ) ) ) ; return len ; }",0
113,"<S2SV_ModStart> ; int n <S2SV_ModEnd> ; skb -> <S2SV_ModStart> rose_facilities_struct ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> data + ROSE_CALL_REQ_FACILITIES_OFF, skb -> len - ROSE_CALL_REQ_FACILITIES_OFF, <S2SV_ModEnd> & facilities )",1
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,<S2SV_ModStart> ( cmd = 0 <S2SV_ModEnd> ; } else if,0
116,"<S2SV_ModStart> ; ret = posix_acl_update_mode ( inode, & inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; ret =",0
117,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; int ret <S2SV_ModStart> ) ; } o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
118,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",1
119,"<S2SV_ModStart> == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> is <S2SV_blank> absolute"" ) ; return ( ARCHIVE_FAILED ) ; } separator = * src ++ ; } <S2SV_ModEnd> for ( ;",1
120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TPM2SV_null> TPM_RC_RC_HASH ( <S2SV_ModEnd> tpm2bk, TPM_RC_ALG_HASH <S2SV_ModStart> ; TPM_RC tpm2Bits = tpm_algorithm_ex ( & ctx, hashAlg, hashAlg ) ; if (! rc ) return TPM_RC_DIGERR ( ""Alg"" ) ; HMAC_CTX_exceeds ( & ctx ) ) ; HMAC_init ( & ctx, hashAlg, md, NULL ) ; HMAC_RC_CTX_init ( & ctx ) ; if (! rc ) { TPM_RC_ERR ( tpm2, ""Alg"" ) ; HMAC_CTX_exceeds ( & ctx ) ) ; return TPM_RC_ERR, ERROR_INTERNALIGNED ) ; if (! rc ) { TPM_RC_ERR ( tpm2BAC_exceeds ( hashAlg, hashAlg,",0
121,<S2SV_ModStart> inmem ) { size_t <S2SV_ModEnd> inmem ; if <S2SV_ModStart> ) ) { <S2SV_ModEnd> if (!,0
122,<S2SV_ModStart> s ) { if ( s == 0 ) return ( ( void * ) NULL ) ;,1
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! ib_safe_file_access ( fp ) ) ) return - EACCES ; if (,1
124,<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; },0
125,<S2SV_ModStart> ( peer ) peer = maybe_get_net <S2SV_ModEnd> ( peer ),1
126,<S2SV_ModStart> } while ( ( i < ( int ) header_buf_used ) && ( <S2SV_ModStart> ] == '\\n' ),1
127,<S2SV_ModStart> m_family ) ; if ( proto == LLDP_MGMT_ADDR_NONE ) continue <S2SV_ModEnd> ; if (,1
128,"<S2SV_ModStart> 1 ), len <S2SV_ModEnd> ) ; if",0
129,<S2SV_ModStart> default_auto_asconf ) { spin_lock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ; <S2SV_ModStart> do_auto_asconf = 1 ; spin_unlock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) <S2SV_ModStart> ; } else { <S2SV_ModStart> = 0 ; },1
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_profile ( struct <S2SV_ModStart> ) return AVERROR_INVALIDDATA ; if ( s -> avctx == 0 ) return 0 ; <S2SV_ModStart> ) return AVERROR_INVALIDDATA ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
131,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i ; if ( length > size ) return - EINVAL ;,0
132,<S2SV_ModStart> rule ) ; if (! entry -> lsm [ lsm_rule ]. rule ) return - EINVAL ;,1
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> function <S2SV_blank> setTimer() <S2SV_blank> {\\n"" ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> setTimer()\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> {\\n"" ""\\n"" ) ; int poll_interval = s_poll_interval ; int poll_interval = ( s_poll_interval )? 1 : 0 : 0 ; <S2SV_ModStart> ""\\n"" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }\\n"" ""\\n"" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> = <S2SV_blank> %d\\n"" ""\\n"" ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> set <S2SV_blank> == <S2SV_blank> (e)\\n"", poll_interval, poll_interval <S2SV_ModEnd>, redirect_id )",0
136,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> hdr_len ) { <S2SV_ModStart> - EACCES ; goto out_len ; struct xdr_len ; size_t rdr_len ; <S2SV_ModStart> attr_len ) ; if ( <S2SV_ModEnd> xattr_getattr_len <S2SV_ModStart> + attrmap_len, & acl_len <S2SV_ModEnd> ) ) { <S2SV_ModStart> - ENOMEM ; goto out ; } <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> if (!",0
137,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,1
138,<S2SV_ModStart> ; while ( ( i < to_read ) && <S2SV_ModStart>!= 0 ) <S2SV_ModEnd> ) { i,1
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,<S2SV_ModStart> [ plane ] && in -> linesize [ plane ],1
141,"<S2SV_ModStart> ( szFileName, pszFileName, <S2SV_ModStart> ) - 5 <S2SV_ModEnd> ) ; }",1
142,"<S2SV_ModStart> } if ( osStrchr ( current, user ) && <S2SV_ModStart> if ( errno == 0 &&",0
143,<S2SV_ModStart> >> 2 ; if ( q + o >= e ) goto out ;,0
144,"<S2SV_ModStart> __be32 new_saddr ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. srr ) daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",1
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> return ; } if ( len < sizeof ( struct eigrp_common_common_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short, <S2SV_blank> short, <S2SV_blank> < <S2SV_blank> %u)"", eigrp_common_len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < sizeof ( * tlv_len ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short"" ) ) ) ; return ; }",0
147,<S2SV_ModStart> x ) { <S2SV_ModEnd> if ( addr <S2SV_ModStart> == NULL ) { <S2SV_ModEnd> return ; },0
148,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_table_table ( long <S2SV_ModStart> sblk ) ; if ( length > INT_MAX - 1 ) return 0,0
149,"<S2SV_ModStart>, '/' ) ; if ( ptr == NULL ) return ( ENOENT ) ; ptr ++ <S2SV_ModEnd> ; rw_exit (",1
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; if ( flags & EXT4_GET_BLOCKS_CONVERT ) split_flag |= EXT4_EXT_DATA_VALID2 ;,1
151,"<S2SV_ModStart> ; ret = posix_acl_update_mode ( inode, & inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; ret =",0
152,<S2SV_ModStart> ; if ( p1 == NULL ) return 0 ; if (,0
153,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), & final ) ; rcu_read_unlock ( <S2SV_ModEnd> ) ; dst",1
154,"<S2SV_ModStart> = 0 ; uint32 nstrips = 0 ; uint32 ntiles = 0 ; uint16 <S2SV_ModEnd> read = 0 <S2SV_ModStart> buff ) ; if ( buffsize > 0 && buffsize > 0xFFFFU - 3 ) { TIFFError ( ""loadImage"", ""loadImage"" ) ; return ( - 1 ) ; } <S2SV_ModStart> buffsize ) ; }",0
155,"<S2SV_ModStart> = NULL ; # if CONFIG_VP9EncoderConfig <S2SV_ModEnd> ( arg, <S2SV_ModStart> ; # else { # else if CONFIG_VP9_HIGHBITDEPTH ) { <S2SV_ModStart> == NULL ) { <S2SV_ModEnd> # if CONFIG_VP9_HIGHBITDEPTH status <S2SV_ModStart> ; arg ; } # else if CONFIG_VP9_HIGHBITDEPTH if ( arg, arg_sizeof ( & YV12_FLAG_HIGHBITDEPTH ) ) { <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH ) { arg_error ( & YV12_FLAG_HIGHBITDEPTH ) ; } else { <S2SV_ModEnd> goto out_error ; <S2SV_ModStart> == NULL ) { <S2SV_ModEnd> } else { <S2SV_ModStart> - EINVALID_ERROR ; } }",0
156,<S2SV_ModStart> options. disable_forwarding ||! use_privsep,1
157,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
158,"<S2SV_ModStart> ) ; } if ( ( ( MagickSizeType ) image -> columns * image -> rows ) > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",1
159,"<S2SV_ModStart> errout ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ""xxxx"" ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart> -> gr_ctx. length = 4 <S2SV_ModEnd> ; gr ->",1
160,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; <S2SV_ModStart> -> i_data, ext_size ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size <S2SV_ModEnd> ) ; neh",1
161,<S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( c <S2SV_ModStart> ) ) { <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ; } } <S2SV_ModEnd> } if (,0
162,<S2SV_ModStart> ; int ret ; if ( current_chrooted ( ) ) return - EPERM,1
163,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
164,"<S2SV_ModStart> c -> nreslevels - <S2SV_ModEnd>, s ->",0
165,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
166,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModStart> -> do_vnet_net_vnet_net ; bool do_vnet_vnet = false ; bool do_vnet = false ; <S2SV_ModStart> ; bool do_vnet = false ; do_vnet = false ; do_vnet = false ; do_vnet <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) break ; } do_vnet = false ; do_vnet = false ; <S2SV_ModStart> } if ( do_vnet_vnet <S2SV_ModEnd> ) { if,0
167,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> sctp_auth_asoc_init_active_key ( asoc,1
168,<S2SV_ModStart> return false ; if ( ndp_msg_type_info ( msg_type ) -> addrto_validate ) return ndp_msg_type_info ( msg_type ) -> addrto_validate ( & msg -> addrto ) ; else,1
169,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> lsm_set_label_at ( int lsm_labelfd <S2SV_ModEnd>, int lsm_label <S2SV_ModStart> == 0 ) { int fret <S2SV_ModEnd> = - 1 <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
170,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
171,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
172,<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> -> bits_type ; <S2SV_ModEnd> if ( cpi <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( cpi <S2SV_ModStart> -> oxcf. bits_size ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
173,"<S2SV_ModStart> } num ++ ; if ( num > MaxAllocSize / ITEMSIZE ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> levels <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num, ( int ) ( MaxAllocSize / ITEMSIZE ) ) ) )",1
174,"<S2SV_ModStart> header, struct mb2_cache_entry <S2SV_ModEnd> * * pce <S2SV_ModStart> ) ; struct mb2_cache_entry * ce ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> hash ) ; ce = mb2_cache_find_first <S2SV_ModEnd> ( ext4_mb_cache, <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
175,<S2SV_ModStart> = lineth -> frame_buffer <S2SV_ModEnd> ; char line,0
176,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
177,<S2SV_ModStart> if ( left == 0 && extend ) return 0 ; if ( left,1
178,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ] ) { grub_block = ext4_get_block_block ( inode ) ; if ( ext4_errno ) { grub_errno = 1 ; return 0 ; } <S2SV_ModStart> ) ) { free ( buf ) ; return 0 ; } <S2SV_ModStart> ) ) ; },0
179,<S2SV_ModStart> size_t ) ldblk + 1,0
180,"<S2SV_ModStart> - ENOMEM ; * ( ( struct vbg_ioctl_hdr * ) buf ) = hdr ; <S2SV_ModStart> copy_from_user ( buf + sizeof ( hdr ) <S2SV_ModStart> * ) arg + sizeof ( hdr ), hdr. size_in - sizeof ( hdr ) <S2SV_ModEnd> ) ) {",1
181,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; int numrows <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; numrows = <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; jas_alloc (,0
182,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
183,"<S2SV_ModStart> number_colormaps, number_planes, number_planes_filled <S2SV_ModStart> -> rows ; number_planes_filled = ( number_planes + 1 == 0 )? number_planes : number_planes + 1 ; <S2SV_ModStart> ( number_planes_filled * number_planes_filled <S2SV_ModEnd> )!= ( <S2SV_ModStart> ( number_planes_filled <S2SV_ModEnd> ) * number_planes_filled <S2SV_ModStart> ( number_planes_filled <S2SV_ModEnd> )!= ( <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ) ThrowReaderException <S2SV_ModStart> ( number_planes_filled, number_planes_planes_filled <S2SV_ModEnd> )!= MagickMemory <S2SV_ModStart> ( number_planes_filled <S2SV_ModEnd> )!= MagickMemory",0
184,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_mb_cache ) { ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ; sbi -> s_mb_cache = NULL ; } <S2SV_ModEnd> if (!,1
185,<S2SV_ModStart> ) ; } if ( alt -> desc. btsetting < 1 ) { dev_err ( & GFP_KERNEL ) ; return - ENOMEM ; },0
186,"<S2SV_ModStart> ""setregid"" ) ; <S2SV_ModEnd> char * arg <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [",1
187,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) <S2SV_ModStart> ci_parent ) ; else return NULL ;,1
188,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, state, fmode <S2SV_ModEnd> ) ; write_sequnlock",0
189,<S2SV_ModStart> ( pb ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA,1
190,<S2SV_ModStart> if ( q < p || q,1
191,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = &,1
192,<S2SV_ModStart> * fdname = NULL <S2SV_ModEnd> ; if (,0
193,<S2SV_ModStart> prev ) ; n -> mounts += n -> pending_mounts ; n -> pending_mounts = 0 ;,1
194,"<S2SV_ModStart> ; savesegment ( fsindex, fsindex ) ; savesegment ( gsindex, gsindex ) ; savesegment ( next -> dsindex ) ; savesegment ( next_context ) ; savesegment ( fsindex, cpu <S2SV_ModEnd> ) ; savesegment",0
195,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
196,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> return value ; },0
197,<S2SV_ModStart> 1u << DB_VECTOR ) | ( 1u << AC_VECTOR,1
198,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> 4 ] ; stringlen = stringlen ; stringlen ; if ( stringlen > NFSX_V3FHMAX ) stringlen = NFSX_V3FHMAX ; <S2SV_ModStart>, sfsname, stringlen <S2SV_ModEnd> ) ; temp",0
199,"<S2SV_ModStart> unsigned int flags, struct rt6_info * rt <S2SV_ModStart> ( & fhdr, rt",1
200,<S2SV_ModStart> ( res ) goto err_add_port <S2SV_ModEnd> ; res = <S2SV_ModStart> port ) ; err_add_port : hsr_del_node ( & hsr -> self_node_db ) ;,1
201,<S2SV_ModStart> 0 ) { # ifdef CONFIG_PARSE_MODE_BUFFER_LEN ; # endif # endif,0
202,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> const int mi <S2SV_ModStart> src, int <S2SV_ModEnd> yv_stride, int <S2SV_ModStart> -> uv_stride, PREDICTION_MODE <S2SV_ModEnd> * bd = <S2SV_ModStart> src ; const vp9_buffer <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
203,<S2SV_ModStart> 0 ) ; if (! xdr_len ) return 0,0
204,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { return assign_eip_far ( ctxt, dst, ctxt -> mode == X86EMUL_MODE_PROT64 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
205,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
206,"<S2SV_ModStart> ; remaining = tvb_reported_length_remaining <S2SV_ModEnd> ( tvb,",1
207,<S2SV_ModStart> * inode = read_block_unlock <S2SV_ModEnd> ( inode ),0
208,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
209,<S2SV_ModStart> ; if ( safe_calloc <S2SV_ModEnd> ( strlen (,0
210,<S2SV_ModStart> ; if ( pmc_overflow ( val ) <S2SV_ModEnd> ) write_pmc (,1
211,"<S2SV_ModStart> ( * b + len, * avail - len <S2SV_ModEnd>, nl )",1
212,"<S2SV_ModStart> * fmode_t fmode, <S2SV_ModEnd> const char * <S2SV_ModStart> char * str_name ) ; char * str_name = NULL ; char * strcpy <S2SV_ModEnd> ( o_name, <S2SV_ModStart> str ) ; size_t fname_end - 1 ; if ( strlen ( o_name ) == NULL ) { PyErr_SetString ( & PyExc_Type_name ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ( fname, o_name_name_name_name <S2SV_ModEnd> ) ; } <S2SV_ModStart> = strcpy ( fname, o_name, o_name_name_name <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> cpy ) ; if ( str == NULL ) { if ( strcmp ( fname, & fname, o_name ) ) { PyErr_SetString ( fname ) ; return NULL ; } } <S2SV_ModEnd> if (! <S2SV_ModStart> ( o_name_name <S2SV_ModEnd> ) ; } <S2SV_ModStart> cpy ) ; } <S2SV_ModEnd> return NULL ; <S2SV_ModStart> FALSE ; } <S2SV_ModEnd> if (!",0
213,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
214,"<S2SV_ModStart> string ) ), <S2SV_ModEnd> c = c",0
215,"<S2SV_ModStart> == 0 ) mark_key_instantiated ( key, 0 <S2SV_ModEnd> ) ; up_write",1
216,<S2SV_ModStart> <= * len && plen > 0,1
217,<S2SV_ModStart> ; args. rmtvaluelen = valuelen ; args.,1
218,<S2SV_ModStart> ; if ( <S2SV_ModEnd> timeout == NULL <S2SV_ModStart> ; if ( compat_get_timespec <S2SV_ModEnd> ( & ktspec <S2SV_ModStart> > 0 && compat_put_timespec <S2SV_ModEnd> ( & ktspec,1
219,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
220,<S2SV_ModStart> ndev ) ; <S2SV_ModEnd> assert ( ndev <S2SV_ModStart> q_num ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
221,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
222,<S2SV_ModStart> } if ( <S2SV_ModEnd> udp_specified && settings,1
223,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
224,<S2SV_ModStart> -> files ) ; <S2SV_ModEnd> if ( x,0
225,<S2SV_ModStart> found = 0 <S2SV_ModEnd> ; const char <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( found,1
226,"<S2SV_ModStart> int validate_event ( struct pmu * pmu, <S2SV_ModStart> arm_pmu * armpmu <S2SV_ModEnd> ; struct armpmu <S2SV_ModStart> return 1 ; armpmu <S2SV_ModEnd> ; if (",0
227,"<S2SV_ModStart> bool new_idmap_permitted ( const struct file * file, <S2SV_ModStart>, cap_setid ) && file_ns_capable ( file, ns -> parent, cap_setid )",1
228,<S2SV_ModStart> j ++ ) { if ( a -> type == szMAPI_BINARY ) <S2SV_ModStart> ) ; } },1
229,"<S2SV_ModStart> usb_cypress * buf <S2SV_ModEnd> ; int ret <S2SV_ModStart> = 0 ; u8 * buf = kmalloc ( 1, GFP_KERNEL ) ; if (! buf ) return - ENOMEM ; hx = ( udev, cpu_cs_cs_register, buf <S2SV_ModEnd>, 1, <S2SV_ModStart> ( udev, cpu_cs_register, cpu_cs_register, buf <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ; kfree ( buf <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ; kfree ( buf <S2SV_ModEnd> ) ; return",0
230,"<S2SV_ModStart> u_char * ptr, u_int length <S2SV_ModStart>, val_l ; if ( ptr < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ptr ++ ; length -= 2 ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; length = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ptr ++ ; ptr2SV_null>",0
231,"<S2SV_ModStart> princ ) ; success = data_eq_string ( * realm, <S2SV_ModEnd> handle -> params <S2SV_ModStart> params. realm ) && data_eq_string ( * c2, ""kadmin"" ) &&! data_eq_string ( * c2, ""history"" ) && data_eq_string ( * c2, data_eq_string ( * c2, ""ctx"" ) &&! data_eq_string ( * c2, data_eq_string ( * c2, data_eq_string ( * c2, ""history"" ) && data_eq_string ( * params ) && data_eq_string ( * c2, data_eq_string ( * c2, ""ctx"" ) && data_string ( * c2, data_eq_string ( * c2, ""handle"" ) && data_eq_string ( * c2 -> params. realm_eq_string ( * c2, ""ctx"" ) && data -> params. params. params. realm_eq_string ( * ctx -> params. realm_eq_string ( * c2, data_eq_string ( * params, data, data, <S2SV_ModEnd> handle -> params. realm,",0
232,<S2SV_ModStart> ; if ( shader_rec_offset < args -> bin_cl_size ||,1
233,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
234,<S2SV_ModStart> vma -> vm_file ) ; down_read ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModStart> ; out : up_read ( & EXT4_I ( inode ) -> i_mmap_sem ) ;,1
235,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
236,<S2SV_ModStart> arg ) { char ch = * arg ; switch ( ch <S2SV_ModEnd> ) { case <S2SV_ModStart> ';' : case '=' : case <S2SV_ModStart> b ++ = ch <S2SV_ModEnd> ; break ;,1
237,"<S2SV_ModStart> && nmap ) <S2SV_ModEnd> cp = ikev1_attrmap_print <S2SV_ModStart>, cp, ep2, map, nmap ) ; else cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> < ep2 ) <S2SV_ModEnd> ND_PRINT ( (",1
238,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
239,<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) < skb -> head +,1
240,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
241,<S2SV_ModStart>. flags =!!!!!!!!!!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart>. flags =! <S2SV_ModStart>. flags ) <S2SV_ModEnd> ; break ;,0
242,<S2SV_ModStart> & RCV_SHUTDOWN ) return 0 ; <S2SV_ModEnd> return err ; <S2SV_ModStart> msg_namelen ) ; <S2SV_ModEnd> } skb_free_datagram (,1
243,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
244,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> stride, int <S2SV_ModStart> src [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> vp_buffer <S2SV_ModEnd> * 2 ; const <S2SV_ModStart> src -> vp_stride <S2SV_ModEnd> } ; const <S2SV_ModStart> int stride, stride <S2SV_ModEnd> } ; int",0
245,"<S2SV_ModStart>, j ; * md_out = NULL ; md = NULL ; if ( <S2SV_ModEnd> md -> subject_dn <S2SV_ModStart> goto cleanup ; ret = rfc2253_name <S2SV_ModEnd> ( X509_get_subject_subject_name ( <S2SV_ModStart> md -> issuer_dn ), & <S2SV_ModEnd> md -> subject_dn <S2SV_ModStart> md -> subject_dn ) ; if ( ret ) goto cleanup ; ret = X509_X509_get_issuer_subject_dn ( md, & <S2SV_ModEnd> md -> issuer_dn <S2SV_ModStart> md -> issuer_dn ) ; if ( ret ) goto cleanup ; <S2SV_ModEnd> ret = md",0
246,<S2SV_ModStart> (! npages || base_gfn!= old. base_gfn,1
247,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ru,1
248,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
249,<S2SV_ModStart> * ni ; u_int length_left ; unsigned <S2SV_ModStart> case RIP6_REQUEST : if ( length_left!= sizeof ( struct rip6 ) ) goto trunc ; ND_TCHECK ( rp -> rip6 ) ; length_left -= ( sizeof ( struct rip6 ) ) ; length_left -= ( length_left ) ; if ( length_left < sizeof ( struct rip6 ) ) goto trunc ; length_left <S2SV_ModEnd> ; ND_TCHECK ( <S2SV_ModStart> case IPS6_REQUEST : ND_TCHECK ( rp -> rip6 ) ; length_left -= sizeof ( rp -> rip6 ) ) ; if ( length_left < sizeof ( struct rip6 ) ) goto trunc ; <S2SV_ModStart> ni ) { ND_TCHECK ( rp -> rip6_nets ) ; } ND_TCHECK ( rp -> rip6_left ) ; length_left -= ( length_left ) ; if ( length_left < sizeof ( struct rip6 ) ) goto trunc ; length_left <S2SV_ModEnd> ; ND_TCHECK ( <S2SV_ModStart> ni ) ; length_left -= rip6_nets ; length_left -= ( length_left ) ; <S2SV_ModStart> ni ) ; length_left -= ( length_left ) ; length,0
250,<S2SV_ModStart> < 0 ) goto error ; <S2SV_ModEnd> goto set ;,1
251,<S2SV_ModStart> ; # endif memset <S2SV_ModEnd> ( cpi ->,0
252,"<S2SV_ModStart> argc ++ ; retval = bprm_change_interp ( iname, bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> ; interp_file =",1
253,<S2SV_ModStart> ; int iSrc <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> res -> ContribRow <S2SV_ModStart> u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ].,1
254,<S2SV_ModStart> refcount ) ; free ( user ) ;,0
255,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".cfg\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n""",1
256,<S2SV_ModStart> ) { size_t <S2SV_ModEnd> len ; if,0
257,"<S2SV_ModStart> ( mobj ) { size_t granularity = BIT ( tee_mm_sec_ddr. shift ) ; <S2SV_ModStart>, 0, ROUNDUP ( size, granularity ) ) ; } <S2SV_ModEnd> return mobj ;",1
258,<S2SV_ModStart> -> it_overrun += 1LL <S2SV_ModEnd> << i ;,1
259,"<S2SV_ModStart>, expr_async, bool <S2SV_ModEnd> is_async ) { <S2SV_ModStart> == NULL ) { CHILD ( n, 1 ) ; n = CHILD ( n, 1 ) ; if (! str_async ( c, CHILD ( n, 1 ) ) ) { return NULL ; } if (! str ) { <S2SV_ModStart> ( c, CHILD ( n, CHILD ( n, CHILD ( n, ""\\"" ) ) ) ; } else { i = CHILD ( n, CHILD ( n, 1 ) ) ; } else if (! str ) { i = CHILD ( n, CHILD ( n, CHILD ( n, CHILD ( n, 1 ) ) ; } else { if ( n, CHILD ( n, 1 ) ) ) == NULL ) { i = CHILD ( n, NAME ) ; } else { if (! str_is_async_async ( c, CHILD ( n, CHILD ( n, 1 ) ) ) ) { if (! str ) { i = CHILD ( n, CHILD ( n, CHILD ( n, CHILD ( n, 1 ) ) ; for ( i = 0 ; i = 0 ; i",0
260,<S2SV_ModStart> src ) ; if ( dst -> cur_state == NULL ) return - EINVAL,0
261,"<S2SV_ModStart> * mi, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> ) { const MACROBLOCKD * const xd = & xd -> mbmi ; const MB_MODE_INFO * const mbmi = & xd -> mi [ 0 ] -> mbmi ; const MB_MODE_INFO * const mbmi = & mbmi -> mi [ 0 ] <S2SV_ModEnd> ; const int <S2SV_ModStart> BLOCK_SIZE bsize ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; const vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_free ( w ) ;",0
262,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
263,"<S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; n <S2SV_ModStart> = r -> qiov. size <S2SV_ModEnd> / 512 ; <S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; }",1
264,<S2SV_ModStart> if ( cs >= <S2SV_ModEnd> CQSPI_MAX_CHIPSELECT ) {,1
265,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
266,<S2SV_ModStart> ) break ; if ( l > ll ) l = ll ;,1
267,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
268,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ND_TTEST ( *,0
269,<S2SV_ModStart> -> skip_task ) <S2SV_ModEnd> ; if (,0
270,"<S2SV_ModStart> ret ; uint8_t * buffer ; uint8_t value ; buffer = kmalloc ( 1, GFP_KERNEL ) ; if (! buffer ) return - ENOMEM <S2SV_ModEnd> ; dev_dbg ( <S2SV_ModStart>, reg, buffer <S2SV_ModEnd>, 1, <S2SV_ModStart> 1000 ) ; if ( <S2SV_ModEnd> ret >= 0 <S2SV_ModStart> ret >= 0 ) { value = buffer [ 0 ] ; kfree ( buffer ) ; return value ; } else { kfree ( buffer ) ; return <S2SV_ModEnd> ret ; } <S2SV_ModStart> ret ; } }",1
271,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModEnd> nArgument ( void <S2SV_ModStart> ) ; return ( void ),0
272,"<S2SV_ModStart> ; } } s -> append_char ( s, 0 ) ; strncpy <S2SV_ModEnd> ( outbuffer,",1
273,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
274,<S2SV_ModStart> = 0 ; ( i + 3 ) <S2SV_ModEnd> < sec -> <S2SV_ModStart> = 0 ; ( i + 7 ) <S2SV_ModEnd> < sec ->,1
275,<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_BW_CONSTRAINTS_OLD : if ( subl == 0 ) break ; <S2SV_ModStart> ++ ) { <S2SV_ModEnd> bw. i,1
276,<S2SV_ModStart> ) ++ ) <S2SV_ModEnd> memcpy ( &,0
277,<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( p * low ) { <S2SV_ModStart> low ) ; },0
278,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bqkf_cache_lock ( <S2SV_ModStart> * bqqdu ) { <S2SV_ModEnd> unlock ( bq <S2SV_ModStart> ) ; BQPTR ( bqqq ) ; <S2SV_ModEnd> } <S2SV_null>,0
279,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
280,"<S2SV_ModStart> ) continue ; if ( vif -> tx. sring -> req_cons > XEN_NETIF_TX_SIZE ) { netdev_err ( vif -> req_cons, vif -> req_cons, XEN_NETIF_RING_TX_SIZE ) ; netbk_fatal_tx_err ( vif -> tx, 0 ) ; continue ; } <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } vif ->",0
281,<S2SV_ModStart> 0 ) { # ifdef CONFIG_PARSE_MODE_BUFFER_LEN ; # endif # endif,0
282,<S2SV_ModStart> xfrm_walk * cb <S2SV_ModEnd> ; struct xdr,0
283,<S2SV_ModStart> conn ) ; if ( <S2SV_ModStart> ( conn )!= 0 ) return,1
284,"<S2SV_ModStart> ) ) ; <S2SV_ModEnd> err = XEN_NETIF_RSP_ERROR <S2SV_ModStart> netbk, pending_idx, pending_idx, pending_idx <S2SV_ModEnd>, XEN_NETIF_RSP_ERROR ) <S2SV_ModStart> netbk, pending_idx, pending_idx, pending_idx, XEN_NETIF_RSP_OKAY",0
285,,1
286,"<S2SV_ModStart> ) NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; }",0
287,"<S2SV_ModStart> len < 0 <S2SV_ModEnd> ) { syslog <S2SV_ModStart> 1 ; } if ( addr. nl_pid ) { syslog ( LOG_WARNING, ""Received <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> untrusted <S2SV_blank> pid:%u"", addr. nl_pid ) ; continue ; }",1
288,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
289,<S2SV_ModStart> ipc == NULL && client -> session == NULL,1
290,<S2SV_ModStart> * ret ; if ( outLength < 0 ) { return - EOF ; } <S2SV_ModStart> ( outLength > <S2SV_ModEnd> 3 ) { <S2SV_ModStart> * out ; ret =,0
291,"<S2SV_ModStart>, nameptr, lfi, fname, UDF_NAME_LEN <S2SV_ModEnd> ) ; if",1
292,"<S2SV_ModStart> ip_vs_timeout_user t ; memset ( & t, 0, sizeof ( t ) ) ;",1
293,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
294,<S2SV_ModStart> ; ssize_t result ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
295,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, path1, & next <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ) { ret = - EACCES ; goto out ; } if (!",0
296,<S2SV_ModStart> ) ) { put_disk ( disk ) ;,1
297,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
298,"<S2SV_ModStart> { if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( ( image <S2SV_ModStart> { if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( number_pixels,",1
299,<S2SV_ModStart> ; if ( s -> data_offset == 0 ) return AVERROR_INVALIDDATA ; if (,0
300,<S2SV_ModStart> ; rinfo = kzalloc <S2SV_ModEnd> ( SZ_SG_REQ_INFO *,1
301,"<S2SV_ModStart> ; # endif install_keyword ( ""umask"", & umask_handler ) ;",1
302,"<S2SV_ModStart> ( ctx, <S2SV_ModEnd> data ) {",0
303,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> kfree ( tmpbuf,1
304,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; }",1
305,"<S2SV_ModStart> info = boxinfo <S2SV_ModEnd> ; box -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> jas_eprintf ( ""cannot <S2SV_blank> copy <S2SV_blank> box <S2SV_blank> data\\n""",0
306,<S2SV_ModStart> * self ; size_t <S2SV_ModEnd> new_size = 0,0
307,<S2SV_ModStart> ; int copylen = 0 <S2SV_ModStart> goto err ; if ( count > MAX_SKB_FRAGS ) { err = - EINVAL ; goto err ; } if ( unlikely ( count > MAX_SKB_FRAGS ) ) { err = - EINVAL ; goto out_length ; },0
308,<S2SV_ModStart> ( struct ipv6hdr <S2SV_ModEnd> ) ; unsigned <S2SV_ModStart> while ( offset <S2SV_ModEnd> <= packet_len ) <S2SV_ModStart> packet_len ) { struct ipv6_opt_hdr * exthdr ; <S2SV_ModStart> offset ; } if ( offset + sizeof ( struct ipv6_opt_hdr ) > packet_len ) return - EINVAL ; exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + offset ) ; <S2SV_ModStart> -> nexthdr ; } return - EINVAL <S2SV_ModEnd> ; } <S2SV_null>,1
309,"<S2SV_ModStart> write_bit_buffer ( struct vpx_wb_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 6 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
310,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
311,"<S2SV_ModStart> sll_addr_t msg_name ) ; memcpy <S2SV_ModEnd> ( msg, <S2SV_ModStart> msg -> msg_name ) ; msg -> msg_namelen = 0 ;",0
312,<S2SV_ModStart> } if ( <S2SV_ModEnd> djrcv_dev -> paired_dj_devices,1
313,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
314,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
315,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> asconf_ack_addip_chunk_t * <S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_chunk_id ) ; sctp_addip_chunk_t * ) sctp_en = ( param. addip_hdr. addip = true ; if ( sctp_len!= SCTP_IPV6_ADDRESS || param. params. addip_id == SCTP_PARAM_IPV6_ADDRESS || param. type == SCTP_ERROR_PARAM_PARAM_IPV6_ADDRESS ) { sctp_error ( param, param. addip, param_id ) ; if ( param. addip_id == SCTP_PARAM_ADDRESS ) break ; case SCTP_ERROR_IPV4_ADDRESS : if ( sctp_id == SCTP_PARAM_IPV4_ADDRESS || param. add",0
316,"<S2SV_ModStart> 101, ( ""jas_realloc(%x, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",1
317,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
318,<S2SV_ModStart> CPU_FTR_TM_COMP ) && hv_enabled <S2SV_ModEnd> ; break ;,1
319,<S2SV_ModStart> msci_map ) ; if ( msi == 0 ) return - 1 ;,0
320,"<S2SV_ModStart> key_name ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. key, HV_KVP_EXCHANGE_MAX_VALUE_SIZE / 2",0
321,"<S2SV_ModStart> -> file = vhost_context_set_context ( dctx, <S2SV_ModEnd> d ) ;",0
322,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
323,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void _IOC_DIR ( void * ) parg = _IOC_SIZE ( void * ) parg ; if ( _IOC_SIZE ( cmd ) ) return - EINVAL ; mbuf = _IOC_SIZE ( cmd, cmd ) ; if ( _IOC_SIZE ( cmd ) & _IOC_SIZE ( cmd ) ) { mbuf = _IOC_SIZE ( cmd ) ; if ( _IOC_SIZE ( cmd )!= _IOC_SIZE ( cmd ) ) { mbuf = - EINVAL ; goto out ; } if ( _IOC_SIZE ( cmd ) - ENOMEM ; } else { memset ( cmd, 0, 0, _IOC_SIZE ( cmd ) ) ; if ( _IOC_SIZE ( cmd ) ) goto out ; } if ( _IOC_SIZE ( cmd ) ) { _IOC_SIZE ( cmd ) ; parg = _IOC_SIZE ( cmd ) ; if ( _IOC_SIZE ( cmd ) - n ) { _IOC_SIZE ( cmd )",0
324,<S2SV_ModStart> server. command <S2SV_ModEnd> ) ; } if,0
325,"<S2SV_ModStart> u16 size, const <S2SV_ModStart> data ) { void * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, buf <S2SV_ModEnd>, size, <S2SV_ModStart> 500 ) ; kfree ( buf ) ; return ret ;",1
326,<S2SV_ModStart> ) ; } if ( alt -> desc. btsetting < 1 ) { dev_err ( & GFP_KERNEL ) ; return - ENOMEM ; },0
327,"<S2SV_ModStart> ) { case GTK_RESPONSE_OK : { nautilus_file_set_metadata ( parameters -> file, parameters -> file ) ; nautilus_set_metadata ( parameters -> file, NAUTILUS_METADATA_DESKTOP_DESKTOP_FILE_MAX, NULL, ""yes"" ) ; nautilus_file_set_attributes ( parameters -> file, parameters -> file, parameters -> file, NULL, NULL, NULL, NULL, NULL ) ; <S2SV_ModEnd> ) ; }",0
328,<S2SV_ModStart> ; if ( urb -> actual_length > 0 &&,1
329,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> sse2SV_null> <S2SV_null> static <S2SV_ModStart> sesInfo * server <S2SV_ModEnd>, struct sesInfo * <S2SV_ModStart> server ) { if ( vol -> linuxName ) continue ; <S2SV_ModEnd> } if (",0
330,<S2SV_ModStart> vpx_codec_err_t res ; if ( cfg -> g_pass == 1 || ( cfg -> g_pass == 1 ) || ( cfg -> g_w > cfg -> g_pass ) || ( cfg -> g_pass == 1 ) || ( cfg -> g_pass == VPX_CURITY_PASS ) || ( cfg -> g_pass == 1 ) || ( cfg -> g_pass == 1 ) || ( cfg -> g_pass == 1 ) || ( cfg -> g_pass_pass == cfg -> g_pass_pass_pass && ( cfg -> g_pass_pass == 1 ) || ( cfg -> g_h > cfg -> g_h ) || ( cfg -> g_pass == - 1 ) || ( cfg -> g_pass == 1 && cfg -> g_pass_pass && ( cfg -> g_pass_pass == 1 ) || ( cfg -> g_h > cfg -> g_h > cfg -> g_h ) || ( cfg -> g_pass_pass == 1 || ( cfg -> g_h > cfg -> g_,0
331,<S2SV_ModStart> =='<S2SV_blank>') { input ++ ; } <S2SV_ModEnd> ptr = strchr <S2SV_ModStart> ) ) ) { <S2SV_ModStart> ) ) ; } <S2SV_ModStart> ) ) ) { <S2SV_ModStart> input ) ) ; },0
332,"<S2SV_ModStart> inode ) ; struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> ; if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",1
333,<S2SV_ModStart> key * keyring ; if ( new -> thread_keyring ) return 0,1
334,"<S2SV_ModStart>, read_rndbuf, size_t readlen, <S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ) ; if",0
335,"<S2SV_ModStart> orig ) ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; <S2SV_ModStart> mrb_io_alloc ( mrb <S2SV_ModEnd> ) ; DATA_TYPE",1
336,<S2SV_ModStart>. key_data = - 1 <S2SV_ModEnd> ; if (,0
337,<S2SV_ModStart> cpi ) { vpx_writer <S2SV_ModEnd> * cpi -> <S2SV_ModStart> cpi ] ; vpx_reader <S2SV_ModEnd> * cpi -> <S2SV_ModStart> cpi ) ; vpx_free_context ( cpi ) ;,0
338,"<S2SV_ModStart> return res ; res = utee_param_to_param ( utc, <S2SV_ModEnd> param, callee_params <S2SV_ModStart>, callee_params ) ; if ( res!= TEE_SUCCESS ) return res",1
339,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; const struct x86_emulate_ops * ops = ctxt -> ops ; int cpl = ctxt -> ops -> cpl ( ctxt ) ; cpl = ctxt -> get_segment ( ctxt, & old_desc, NULL, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE ) { WARN_ON ( ctxt, VCPU_SREG_CS ) ; ops -> get_segment ( ctxt, & old_desc, NULL, VCPU_SREG_CS ) ; rc = X86EMUL_CONTINUE ; rc = assign_eip_far ( ctxt <S2SV_ModEnd>, ctxt -> <S2SV_ModStart> -> src. val, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) { WARN_ON (! ctxt -> mode!= X86EMUL_MODE_PROT64 ) ; ops -> set_segment ( ctxt, old_cs, & old_desc, VCPU_SREG_CS ) ; return rc ; rc = assign_eip_far ( ctxt,",0
340,<S2SV_ModStart> -> band = av_calloc <S2SV_ModEnd> ( reslevel -> <S2SV_ModStart> -> prec = av_calloc <S2SV_ModEnd> ( reslevel ->,1
341,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
342,"<S2SV_ModStart> & TEMP_ERROR, 1 <S2SV_ModEnd> ) ; if",0
343,<S2SV_ModStart> ; if ( info -> si_code!= NULL ) return - EINVAL,0
344,"<S2SV_ModStart> * p_tx0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdx, <S2SV_ModEnd> p_image -> x0 <S2SV_ModStart> * p_cp1 = ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdx, <S2SV_ModEnd> p_image -> x0 <S2SV_ModStart> * p_ty0 = ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdy, <S2SV_ModEnd> p_image -> x0 <S2SV_ModStart> * p_cp -> tdy = ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdy, <S2SV_ModEnd> p_image -> tdy <S2SV_ModStart> p_cp -> tdy, <S2SV_ModEnd> p_image -> x0 <S2SV_ModStart> p_cp -> tdy = ( OPJ_INT32 ) ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdy, <S2SV_ModEnd> p_image -> x0 )",0
345,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * create_output_output_name <S2SV_ModStart> * fname = ( <S2SV_ModEnd> char * fname <S2SV_ModStart> char * fname ) { char * out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( * fname == '/' || * fname == '\\\\' && * fname == '\\\\' <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( p [ 0 ] == '/' || * fname == '\\\\' || * p [ 1 ] == '\\\\' <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ) { strcpy ( out, out, '\\\\' <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; } } } return out <S2SV_ModEnd> ; } <S2SV_null>",0
346,"<S2SV_ModStart> classes = NULL ; zval * retval <S2SV_ModStart> ; } } retval = php_ex_unserialize ( & retval <S2SV_ModEnd>, & retval <S2SV_ModStart> ) ; } retval = retval <S2SV_ModEnd> ; php_unserialize_ex (",0
347,<S2SV_ModStart> goto __err ; tu -> qhead = tu -> qtail = tu -> qused = 0 ;,1
348,<S2SV_ModStart> ] ) ; if (! zfound ) { zfound = GF_ISOM_INVALID_FILE ; break ; } <S2SV_ModStart> j ++ ; } <S2SV_ModEnd> j ++ ; if,0
349,"<S2SV_ModStart>. get_alg_priv ( ctx ) <S2SV_ModEnd>, ctx ->",0
350,"<S2SV_ModStart> == 0 ) if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; }",0
351,<S2SV_ModStart> ; if ( info -> si_code!= NULL ) return - EINVAL,0
352,"<S2SV_ModStart> -> off = strtoull <S2SV_ModEnd> ( p, <S2SV_ModStart> -> filesize = strtoull <S2SV_ModEnd> ( slash +",1
353,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> maxw, offx, offx, upb <S2SV_ModEnd>, upb, <S2SV_ModStart> ; upb = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> goto fails ; offx = img -> comps [ 0 ]. w = img -> comps [ 0 ]. data ; cr = img -> comps [ 0 ]. data ; d0 = img -> comps [ 1 ]. w ; cr = img -> comps [ 1 ]. r = img -> comps [ 0 ]. data ; r = img -> comps [ 1 ]. data ; cr = img -> comps [ 1 ]. data ; y = img -> comps [ 1 ]. w = img -> comps [ 1 ]. w ; cr = img -> comps [ 0 ]. data ; loopmaxh = img -> comps [ 1 ]. w = img -> comps [ 0 ]. w ; y = img -> comps [ 0 ].",0
354,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> * state ; fmode = fmode_t fmode <S2SV_ModEnd> ; if ( <S2SV_ModStart> = state ; spin_unlock ( & fmode <S2SV_ModEnd> ) ; }",0
355,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; ssh_dispatch_set ( ssh, SSH2_MSG_KEXINIT, NULL ) ;",1
356,"<S2SV_ModStart> { assert_true_rule ( ""import <S2SV_blank> \\""tests\\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> test <S2SV_blank> == <S2SV_blank> \\""tests\\"" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\"" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
357,<S2SV_ModStart> read_info ) ; <S2SV_ModEnd> if ( EOFBlob,1
358,<S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; if,0
359,<S2SV_ModStart> intf ) { <S2SV_ModEnd> if ( cdc_ncm_select_altsetting <S2SV_ModStart> - ENODEV ; return <S2SV_ModEnd> cdc_ncm_bind_common ( dev <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
360,<S2SV_ModStart> - EINVAL ; if ( buf == 0 ) return - EINVAL ;,0
361,"<S2SV_ModStart> int i ; memcpy ( 0, 0, sizeof ( qpc ) ) ;",0
362,"<S2SV_ModStart>, e -> elems, e ->",1
363,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
364,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
365,<S2SV_ModStart> q ) { mutex_lock ( & q -> timer_mutex ) ; <S2SV_ModStart> snd_seq_timer_close ( q ) ; mutex_unlock ( & q -> timer_mutex,1
366,"<S2SV_ModStart> int error ; unsigned int nr_blks ; unsigned int bh_size = 0 ; gfs2_inode -> i_blkbits = gfs2_map ( ip, inode -> i_blkbits ) ; if ( error ) goto out ; error = gfs2_inode_unmap ( ip, NULL ) ; if ( error ) goto out ; error = gfs2_mutex_unlock ( & bh_unmap ) ; if ( error ) goto out ; error <S2SV_ModEnd> ; error =",0
367,<S2SV_ModStart> VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; if ( load -> error ) return ( NULL <S2SV_ModEnd> ) return (,0
368,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
369,<S2SV_ModStart> ; if (! retval ) <S2SV_ModEnd> retval = context,1
370,<S2SV_ModStart> * state ; <S2SV_ModEnd> return - EINVAL,0
371,<S2SV_ModStart> miux_tlv_length ) ; if (! service_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if (! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; },0
372,<S2SV_ModStart> * sub = 0 <S2SV_ModEnd> ; mutex_lock (,0
373,"<S2SV_ModStart> vpx_codec_alg_priv ( vpx_codec_alg_priv_t * i <S2SV_ModEnd>, int i <S2SV_ModStart> ; if ( vpx_codec_alg_priv_t res <S2SV_ModEnd> ) return 0",0
374,<S2SV_ModStart> = 0 ; c -> ioff = 0 ;,0
375,"<S2SV_ModStart> ( interface, EINVAL ) ; } else {",0
376,<S2SV_ModStart> ) ; if ( tcp_filter <S2SV_ModEnd> ( skb ),0
377,<S2SV_ModStart> len ; } ND_TCHECK_32BITS <S2SV_ModEnd> ( p + <S2SV_ModStart> p + 2 <S2SV_ModEnd> ) ; ND_PRINT,1
378,<S2SV_ModStart> 0 ; } if ( unlikely ( IPCB ( skb ) -> opt. optlen ) ) skb_dst_force ( skb ) ; else,1
379,<S2SV_ModStart> private ) { struct skcipher_tfm * tfm = private ; crypto_free_skcipher ( tfm -> skcipher ) ; kfree ( tfm <S2SV_ModEnd> ) ; },1
380,<S2SV_ModStart> bprm ) { <S2SV_ModEnd> int retval ; <S2SV_ModStart> int retval ; bprm_fill_uid ( bprm ) ; <S2SV_ModEnd> retval = security_bprm_set_creds,1
381,<S2SV_ModStart> out ) ; kfree ( headcount ) ;,0
382,<S2SV_ModStart> ; dlen -= 3 <S2SV_ModEnd> ; for (,0
383,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
384,<S2SV_ModStart> ( sys ) <S2SV_ModEnd> ; if (,0
385,<S2SV_ModStart> - EOPNOTSUPP ; msg -> msg_namelen = 0 ; <S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( msg,0
386,<S2SV_ModStart> skb ) ; if ( skb -> len < 0 ) return 0,0
387,"<S2SV_ModStart>, arg -> offset <S2SV_ModEnd> ) ; return",0
388,"<S2SV_ModStart> bp, len ) ; break ; case ETHERTYPE_TEB : ether_print ( ndo, bp, len <S2SV_ModStart> ndo_snapend - bp <S2SV_ModEnd>, NULL,",1
389,<S2SV_ModStart> ; } } <S2SV_ModEnd> if ( tile_buffsize <S2SV_ModStart> ) ) { tile_buffsize = 0 ; tilebuf [ tile_buffsize ] = 0xFFFFU - 1,0
390,<S2SV_ModStart> O_APPEND | O_CREAT | O_NOFOLLOW,1
391,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
392,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; ret = o2nm_lock_subsystem ( ) ; if ( ret ) goto out <S2SV_ModEnd> ; ret = <S2SV_ModStart> - EINVAL ; } ret = <S2SV_ModEnd> - EINVAL ;,0
393,<S2SV_ModStart> ( buf ) - 1 <S2SV_ModEnd> ) ) {,0
394,<S2SV_ModStart> case 0x05 : if ( opcode == 0 ) { return ; },0
395,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
396,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
397,<S2SV_ModStart> return - E_NOTHANDLED ; if ( ninst == 0 ) return - E_INVALID,1
398,<S2SV_ModStart> ; if ( ND_TCHECK2 ( * 2 ),0
399,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
400,"<S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> p + offset <S2SV_ModEnd>, tim.",0
401,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { ret = - EFAULT ; goto out :",0
402,<S2SV_ModStart> ( ) ; if (! tbuf ) { return NULL ; },1
403,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> return - EIO ; } <S2SV_ModEnd> for ( i,0
404,"<S2SV_ModStart> NULL, NULL, ""mcc%s"" <S2SV_ModEnd>, flags, <S2SV_ModStart> NULL, NULL <S2SV_ModEnd>, flags,",0
405,<S2SV_ModStart> NULL ) ; if ( st -> remote_address &&,0
406,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> rowstride ) { if (! context ||! context || ( rowstride == 0 ) ) return FALSE ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
407,"<S2SV_ModStart> void vp9_tree_index ( vpx_tree_tree <S2SV_ModEnd> * tree,",0
408,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS,1
409,<S2SV_ModStart> return ( ( ( <S2SV_ModStart> ) / 8 ) * GetPSDPacketSize ( image ),1
410,"<S2SV_ModStart> p_flags ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
411,<S2SV_ModStart> bMasterInterface0 ) ; if (! pcu -> ctrl_intf ) return - EINVAL ; <S2SV_ModStart> bSlaveInterface0 ) ; if (! pcu -> data_intf ) return - EINVAL ;,1
412,"<S2SV_ModStart> const char * devname = kstrdup ( dev_name ( & <S2SV_ModEnd> d -> udev <S2SV_ModStart> d ), GFP_KERNEL ) ; const char * dev = kfree ( devname ) ; drvname ( devname ) ; kfree ( devname ) ; kfree ( devname ) ;",0
413,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpx ) <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpy )",1
414,<S2SV_ModStart> target_enc ) { return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION <S2SV_ModEnd> ; } else,1
415,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static MagickBooleanType <S2SV_ModEnd> image_t image, <S2SV_ModStart> image, exception ) { <S2SV_ModEnd> image -> columns <S2SV_ModStart> image -> columns, image -> columns, image -> colormap ) ; switch ( ssize_t ) { <S2SV_ModEnd> ( ssize_t ) <S2SV_ModStart> index ; ssize_t bit ; ssize_t bit <S2SV_ModEnd> ; register Quantum <S2SV_ModStart> ; register Quantum <S2SV_ModEnd> ( ssize_t ) <S2SV_ModStart> index ; ssize_t bit <S2SV_ModEnd> ; register Quantum <S2SV_ModStart> ; register Quantum <S2SV_ModEnd> ( ssize_t ) <S2SV_ModStart> ; switch ( ssize_t ) { <S2SV_ModEnd> ( ssize_t ) <S2SV_ModStart> ; switch ( ssize_t ) { <S2SV_ModEnd> if ( index <S2SV_ModStart> 0x01 ) { if ( index < image -> colormap + 1 ) index <S2SV_ModEnd> ; switch ( <S2SV_ModStart> 0x01 ) { <S2SV_ModEnd> ( ssize_t ) <S2SV_ModStart> 0x01 ) ; ssize_t bit <S2SV_ModEnd> ( ssize_t ) <S2SV_ModStart> 0x01 ; ssize_t ) ; if ( index < image -> columns ) return ( ssize_t ) SetPixelInfo ( image, image, image -> colormap + ( ssize_t ) ;",0
416,"<S2SV_ModStart> u_char * tptr, u_int length <S2SV_ModStart> case INT_MAX : if ( length < 1 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> length <S2SV_blank> %u)"", tptr + 1 ) ) ; hexdump = TRUE ; break ; }",0
417,"<S2SV_ModStart> ; u64 msr_data, rcx, rdx <S2SV_ModStart> = X86EMUL_MODE_PROT64 : rcx ; rdx = reg_read ( ctxt, VCPU_REGS_RSP ) ; if ( rcx == X86EMUL_MODE_CONTINUE ) return rcx ; rdx = reg_read ( ctxt, rdx, 0 ) ; if ( rcx == X86EMUL_MODE_PROT64 ) return emulate_read ( ctxt, VCPU_REGS_REGS_RSP ) ; rdx = reg_read ( ctxt, VCPU_REGS_RX ) ; return rcx <S2SV_ModEnd> ; } <S2SV_null>",0
418,<S2SV_ModStart> dev ) ; ssize_t len ; device_lock ( dev ) ; len = <S2SV_ModEnd> sprintf ( buf <S2SV_ModStart> driver_override ) ; device_unlock ( dev ) ; return len ;,1
419,"<S2SV_ModStart> BIO * tmpout ; tmpout = cms_get_text_bio ( in, flags ) ; if (! tmpout ) { CMSerr ( BIO_CMS_TEXT, ERR_M_CONTENT ) ; goto err ; } if (",0
420,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( retval == 0 ) rs. enc_tkt_reply -> flags |= TKT_FLG_PRE_AUTH ;,1
421,<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> prob ( v,0
422,"<S2SV_ModStart> = ""/tmp"" ; # endif",0
423,"<S2SV_ModStart> = 0 ; size_t pathlen = 0 ; <S2SV_ModStart> case AF_UNIX : pathlen = pathlen <S2SV_ModEnd> ( ( <S2SV_ModStart> ) -> sun_path, pathlen <S2SV_ModEnd> ) ; if",0
424,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output,",0
425,<S2SV_ModStart> goto out ; if ( event_count > buf ) return - EINVAL ;,0
426,"<S2SV_ModStart> ) { struct hugepage_subpool * spool = subpool_vma ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> ) ; long hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",0
427,"<S2SV_ModStart> filegen_string ) ; if ( NULL == filegen ) { msyslog ( LOG_ERR, ""filegen <S2SV_blank> unrecognized"", filegen_string ) ; continue ; }",0
428,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; timer_set_state",1
429,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart>, s1, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t <S2SV_ModEnd> x5 ; tran_high_t <S2SV_ModStart> output ) ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 2 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 1 ] ; tran_low_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 5 ] ; tran_low_t <S2SV_ModEnd> x7 ; tran_low_t <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 5 ] ; tran_low_t <S2SV_ModEnd> x7 ; tran_low_t <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 5 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 6 ] = ( tran_low_t ) <S2SV_ModStart> 5 ] = ( tran_low_t ) <S2SV_ModStart> 6 ] = ( tran_low_t ) <S2SV_ModStart> 5 ]",0
430,<S2SV_ModStart> flags ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
433,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
434,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> AVINDEX_KEYFRAME ) ; },1
435,"<S2SV_ModStart> 1 ), len <S2SV_ModEnd> ) ; if",0
436,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, controller, cgdir, & next ) ) { ret = - ENOENT ; goto out ; } if (! <S2SV_ModStart>, fc_may_access ( fc, controller, controller, cgdir, NULL, & next ) ) { ret = - ENOENT ; goto out ; } if (! <S2SV_ModStart> cgdir ) { ret = - EACCES ; goto out ; } if (!",0
437,<S2SV_ModStart> ; if ( <S2SV_ModEnd> mnt -> mnt_flags <S2SV_ModStart> ; if ( mnt -> mnt. mnt_flags & MNT_NODEV ) mnt -> mnt. mnt_flags |= MNT_NODEV ; if <S2SV_ModEnd> ( mnt -> <S2SV_ModStart> ; if ( mnt -> mnt_flags & MNT_NOSUID ) mnt -> mnt_flags |= MNT_NODEV ; mnt -> mnt. mnt_flags |= MNT_NODEV ; if ( mnt -> mnt. mnt_flags & MNT_NOSUID ) mnt -> mnt. mnt_flags |= MNT_NODEV ; if <S2SV_ModEnd> mnt -> mnt_flags,0
438,<S2SV_ModStart> rds_loop_transport ; } <S2SV_ModEnd> } conn ->,1
439,<S2SV_ModStart> * rsize >= 112 <S2SV_ModEnd> && rdesc [,1
440,<S2SV_ModStart> if ( ( ( <S2SV_ModStart> ) < bodyLength ) || ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ),1
441,<S2SV_ModStart> ( likely ( serio <S2SV_ModEnd> &&! filtered,1
442,"<S2SV_ModStart>! er ) { ND_TCHECK ( <S2SV_ModEnd> dp [ 0 <S2SV_ModStart> 0 ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> c <S2SV_blank> %04x"", EXTRACT_32BITS ( & dp [ 0 ] ) ) ) ; } <S2SV_ModEnd> return ; case",1
443,"<S2SV_ModStart> * udfName, int udfName, <S2SV_ModStart> * udfName, <S2SV_ModEnd> uint8_t * fidName <S2SV_ModStart> ( newName, newName, udfName, <S2SV_ModEnd> * udfName, <S2SV_ModStart> ( udfName, newName, ""%s"", newName, newName [ udfName_LEN <S2SV_ModEnd> ) newName [",0
444,"<S2SV_ModStart> void vp9_segs ( VP9_COMMON * cm, MACROBLOCKD * td <S2SV_ModEnd>, int mi_str, <S2SV_ModStart> mi_str ) { <S2SV_ModEnd> int mi_cols = <S2SV_ModStart> int mi_cols = mi_cols + mi_stride <S2SV_ModEnd> ; MODE_INFO * <S2SV_ModStart> BLOCKD * mi <S2SV_ModEnd> ; vp9_segment_idx8 ( <S2SV_ModStart>, mi, mi_stride ) ; vp9_decode_segment_idx8 ( & td, tile, tile, mi <S2SV_ModEnd> ) ; if",0
445,<S2SV_ModStart> ; if ( c -> start &&,0
446,<S2SV_ModStart> ; } } if ( ext4_has_blocks < 0 ) {,0
447,"<S2SV_ModStart> * s ; const unsigned char * p = sigbuf ; unsigned char * der = NULL ; int derlen = - 1 ; <S2SV_ModStart> s, & p <S2SV_ModEnd>, siglen ) <S2SV_ModStart> == NULL ) goto err ; derlen = i2d_SV_null>",0
448,"<S2SV_ModStart> NULL ) ; if (! _gdImageWBMPCtx <S2SV_ModEnd> ( im, <S2SV_ModStart>, out ) ) { <S2SV_ModEnd> rv = gdDPExtractData <S2SV_ModStart> size ) ; } else { rv = NULL ; }",0
449,<S2SV_ModStart> ) ; } if ( bprm -> interp!= bprm -> filename ) kfree ( bprm -> interp ) ;,1
450,"<S2SV_ModStart> <S2SV_null> <S2SV_null> & oe_sockaddr <S2SV_ModEnd>, struct oe_addr <S2SV_ModStart> struct oe_addr * oe_addr <S2SV_ModEnd>, & oe_addr <S2SV_ModStart> struct oe_addr * oe_addr ; oe_sockaddr *",0
451,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
452,"<S2SV_ModStart> ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> image <S2SV_blank> dimensions"" ) ; goto done ; }",1
453,<S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> coef_probs. fc,0
454,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; else if ( ret <= size ) memcpy ( data, buf, ret ) ; kfree ( buf ) ;",0
455,<S2SV_ModStart> * p ; type_comment = p -> as. type_comment ; p ->,0
456,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
457,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> parallel_decode_frame ( vpx_setup <S2SV_ModStart> ; vpx_reader <S2SV_ModEnd> ( & ctx <S2SV_ModStart> ) ) { vpx_reader <S2SV_ModEnd> ; vpx_set_offset <S2SV_ModStart> ; vpx_reader <S2SV_ModEnd> ( buf,",0
458,<S2SV_ModStart> ) ; } fuse_conn_put ( & cc -> fc ) ;,1
459,"<S2SV_ModStart> ( code ) { * status = ""DECODE_PA_S4U_X509_USER"" ; return code ; } <S2SV_ModEnd> code = verify_s4u_x509_user_checksum",1
460,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
461,<S2SV_ModStart> cur_pic. field_picture <S2SV_ModEnd> ) return 0,1
462,<S2SV_ModStart> off ) { struct sgp_data * sgp = & rm -> op_sg [ sg ] ; int ret = sizeof ( struct rm -> data. size_t ) - sizeof ( struct rds_header ) - EINVAL ) ; goto out <S2SV_ModEnd> ; } <S2SV_null>,0
463,<S2SV_ModStart> buf ) ) { return 0 ; } <S2SV_ModEnd> ext_block = (,1
464,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,1
465,<S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },0
466,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
467,"<S2SV_ModStart> -> hmi_data ; uint32_t data_siz ; <S2SV_ModStart> } if ( hmi_track_offset [ i ] >= hmi_size ) { hmi_track_offset ( hmi, hmi_track_size, hmi_track_offset, hmi_siz, hmi_data, hmi_siz, hmi_size, hmi_track_size, hmi_track_offset, hmi_size, hmi_track_offset, hmi_track_offset, hmi_track_offset, hmi_track_offset, hmi_offset, hmi_track_offset, hmi_data <S2SV_ModEnd> ) ; } <S2SV_ModStart> += 4 ; data_size -= hmi_track_offset [ i ] ; if ( hmi_track_offset [ i ] == hmi_siz ) { _WM_GLOBAL_ERROR ( __FUNCTION__, WM_ERR_NOT_ERR_ERR_NOT_HMI, ""file <S2SV_blank> too <S2SV_blank> short"", hmi_end ) ; goto _hmi_end ; } data_end ; data_siz = hmi_s",0
468,<S2SV_ModStart> -> id ; haddr -> hci_channel = 0 ;,1
469,<S2SV_ModStart> -> i_iget5_offset ; fh16 [ 3 ] = 0 ;,1
470,"<S2SV_ModStart> ( kdc_active_realm, client. princ <S2SV_ModEnd>, request ->",1
471,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> = S64_MAX ; <S2SV_ModEnd> if ( src_known,1
472,"<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> -> oxcf ; # if CONFIG_VP9_HIGHBITDEPTH int bit_depth ; # if CONFIG_VP9_HIGHBITDEPTH if ( cm -> oxcf. flags & YV12_FLAG_HIGHBITDEPTH ) { vp9_highbit_filter_filter_level ( cpi, oxcf -> bit_level - 1 ) ; } else { <S2SV_ModStart> return ; } }",0
473,"<S2SV_ModStart> ) ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart> ), 0 )",0
474,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
475,"<S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, MAXALIGN",0
476,<S2SV_ModStart> void usage_exit ( void,1
477,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
478,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
479,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
480,<S2SV_ModStart> ; int res ; if ( data_sz == NULL ) return VPX_CODEC_OK ;,0
481,<S2SV_ModStart> ; if ( * value == 0 ||,1
482,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
483,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
484,"<S2SV_ModStart> ; if ( snpal == 0 ) ND_PRINT ( ( ndo, ""\\t <S2SV_blank> SNPA <S2SV_blank> SNPA <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> %s"", snpal, etheraddr_string ( ndo, snpal ) ) ) ; else ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> SNPA <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> %s"", snpal, snpal, etheraddr_string ( ndo, snpa ) ) ) ; if ( snpal == 0 ) ND_PRINT ( ndo, ""\\n\\t <S2SV_blank> NET <S2SV_blank> (length: <S2SV_blank> %s"", snpal ) ) ; else ND_PRINT ( ( ndo, ""\\n\\n\\t <S2SV_blank> SNPA <S2SV_blank> %s"", snpal ) ) ; break ; }",0
485,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> m"", <S2SV_ModStart> y3 ) ; sendClean ( outputbuffer ) ;",0
486,<S2SV_ModStart> } else { return false ; } else if ( r -> CRm == 0 && r -> CRm == CRm ) return false <S2SV_ModEnd> ; } else if,0
487,<S2SV_ModStart> case IS_STRING : { zval dval ; dval = * * tmp ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> ) ; convert_to_double <S2SV_ModStart> i ] = Z_LVAL ( dval ) ; } else { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart> i ] = Z_LVAL ( lval ) ; } else { rect. x = <S2SV_ModStart> ) ; } } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval ) ; convert_to_long ( & lval ) ; rect. x = Z_LVAL ( lval ) ; } else { rect. x = <S2SV_ModStart> tmp ) ; } else { rect.,0
488,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
489,<S2SV_ModStart> SQL_DROP ) ; <S2SV_ModEnd> return 0 ;,1
490,"<S2SV_ModStart> ; r = __copy_from_user <S2SV_ModEnd> ( data,",1
491,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ) { char * line <S2SV_ModEnd> ; isspace ( <S2SV_ModStart> ; isspace ( unsigned char ) <S2SV_ModStart> ; isspace ( ( unsigned char ) <S2SV_ModStart> ; isspace ( unsigned char ) <S2SV_ModStart> ; isspace ( isdigit ( unsigned char ) <S2SV_ModStart> ; isspace ( isdigit ( unsigned char ) <S2SV_ModStart> && isdigit ( unsigned char ) <S2SV_ModStart> ; isspace ( isdigit ( unsigned char ) <S2SV_ModStart> && isdigit ( isdigit ( unsigned char ) <S2SV_ModStart> && isdigit ( ( unsigned char ),0
492,<S2SV_ModStart> = 0 ; info -> port = NULL ;,1
493,<S2SV_ModStart> -> ctx. <S2SV_ModEnd> pmu = pmu,1
494,"<S2SV_ModStart> iovec * iovec, struct iov_iter * iter ) { if ( len > MAX_RW_COUNT ) len = MAX_RW_COUNT ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> = 1 ; iov_iter_init ( iter, rw, iovec, * nr_segs, len ) ;",1
495,<S2SV_ModStart>,0
496,<S2SV_ModStart> ( unlikely ( chunk -> pdiscard ) ) return 0 ; if ( unlikely (,1
497,"<S2SV_ModStart> * p, i ; if ( c == 0 ) { <S2SV_ModStart> = cJSON_New ; } <S2SV_ModEnd> if (!",0
498,"<S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr,'<S2SV_blank>') ; if (",0
499,<S2SV_ModStart> <= w - ( int ),1
500,<S2SV_ModStart> callback_args -> forward_matches ; assert ( match_offset + match_length <= callback_args -> data_size ),1
501,<S2SV_ModStart> options. disable_forwarding && use_privsep,1
502,"<S2SV_ModStart> { if ( length > SMKTREE_DECODE_MAX_RECURSION ) { av_log ( NULL, AV_LOG_ERROR, ""Maximum <S2SV_blank> tree <S2SV_blank> recursion <S2SV_blank> level <S2SV_blank> exceeded.\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",1
503,<S2SV_ModStart> err ; } if ( m -> msg_name ),1
504,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_seq, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""args\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> \\"" ) ; return 1 ; } else <S2SV_ModEnd> { int res <S2SV_ModStart> ) ; res <S2SV_ModEnd> ; res = <S2SV_ModStart> ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_seq, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; type_ignores = NULL ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; type_ignores = NULL ; } else { int res ; res = obj2ast_ty ( tmp, & type_ty, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; type_ignore = NULL ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; type_ignore_ty ( tmp ) ; type_ty",0
505,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ) { numrows <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; n =,0
506,"<S2SV_ModStart> ""REPLY_ADD_STA <S2SV_blank> PASSED\\n"" ) ; ret = iwl_sta_ucode_activate ( priv, sta_id ) <S2SV_ModEnd> ; break ;",1
507,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
508,"<S2SV_ModStart> ""x\\0x\\0x\\0b\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> strings: <S2SV_blank> $a\\0c\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> strings: <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/\\\\babc/\\\\x\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> condition: <S2SV_blank> $a\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a\\0c\\0c\\0c\\0c\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> test <S2SV_blank> condition: <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank>",0
509,"<S2SV_ModStart> & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ) { if (! hashbin -> hb_spinlock ) spin_unlock_irqsave ( & hashbin -> hb_spinlock, flags ) ; spin_unlock_irqrestore ( & hashbin -> hb_spinlock, flags ) ; spin_unlock_irqrestore ( & hashbin -> hb_spinlock, flags ) ; spin_unlock_irqrestore ( & hashbin -> hb_spinlock, flags ) ; spin_unlock_unlock_irqsave ( & 1 ) ; } <S2SV_ModEnd> spin_unlock_irqrestore ( & <S2SV_ModStart> flags ) ; <S2SV_ModEnd> kfree ( queue",0
510,<S2SV_ModStart> EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_NODEV ) &&! ( mnt_flags & MNT_NODEV ) ) &&! ( mnt_flags & MNT_NODEV ) ) { return - EPERM ; } if ( ( mnt -> mnt_flags & MNT_NODEV ) &&! ( mnt_flags & MNT_NOSUID ) ) ) { return - EPERM ; } if ( ( mnt -> mnt_flags & MNT_NOSUID ) &&! ( mnt_flags & MNT_NOSUID ) ) { return - EPERM ; } if ( ( mnt_flags & MNT_NOSUID ) &&! ( mnt_flags & MNT_NOSUID ) ) { return - EPERM ; },0
511,"<S2SV_ModStart> copied, err <S2SV_ModEnd> ; int len <S2SV_ModStart> out_free_ll ) ; memcpy <S2SV_ModEnd> ( sockaddr, <S2SV_ModStart> sll, sockaddr_len ) ; msg -> msg_name = 0 <S2SV_ModEnd> ; if (",0
512,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
513,"<S2SV_ModStart> ( serial -> num_bulk_out <S2SV_ModEnd> < 2 ) <S2SV_ModStart> < 2 ) { dev_err ( & serial -> interface -> dev, ""missing <S2SV_blank> bulk <S2SV_blank> out <S2SV_blank> endpoints\\n"" ) ; return - ENODEV ; } <S2SV_ModEnd> port = serial",1
514,"<S2SV_ModStart> write_chunk ) ; CS64Chunk cs64_chunk ds64_chunk = 0, sizeof ( table_chunk ) ; <S2SV_ModStart> s64Chunk ) ; ds64_chunk. chunk_length = table_length * sizeof ( cs64Chunk ) ; CS64Chunk cs64Chunk. chunk_length = table_chunk. chunk_length * sizeof ( table_chunk ) ; CS64Chunk. chunk_length = table_length * sizeof ( table_chunk ) ; if ( table_length < sizeof ( cs64Chunk. chunk_chunk ) ) goto error_chunk ; } if ( table_length * sizeof ( cs64Chunk. ckID_chunk ) ) { error_chunk. error_line ( & cs64_chunk. s64_chunk. ds64_chunk, sizeof ( table_chunk ), sizeof ( table_chunk ) ) ) ; cs64_chunk. length = total_chunk. data_length ; cs64_chunk. ds64_chunk. cs64_chunk. chunkSize = cs64_chunk.",0
515,"<S2SV_ModStart> ( msg_name, msg_name, <S2SV_ModStart> -> msg_name ) ; if ( msg_name ) <S2SV_ModStart> -> msg_name ; msg_namelen = msg_name ; <S2SV_ModStart> ( msg -> msg_name, msg_name, msg_name <S2SV_ModEnd> ) ; if",0
516,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bh_blocks2SV_null> static <S2SV_ModStart> int bh_blocks ; unsigned int bh_blocks = 0 ; unsigned int bh_blocks = 0 ; unsigned int dblk ; <S2SV_ModStart> - 1 ; dblk = 0 ; dblkfree ( dblk, dblk ) ; if ( dblk ) goto out_unmap = 0 ;",0
517,<S2SV_ModStart> rc = 0 ; # ifdef CONFIG_VP9_HIGHBITDEPTH if ( input -> bit_depth > INT_MAX ) { return NULL ; } <S2SV_ModStart> ) ) ; },0
518,<S2SV_ModStart> return FALSE ; { BOOL rc ; <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) rc = <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) rc ; if (! rc ) return FALSE ; },0
519,"<S2SV_ModStart> -> dict ) && xmlDictOwns ( ctxt -> dict, value )",1
520,"<S2SV_ModStart> ; if ( is_link ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> %s <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( fname, <S2SV_ModStart> 0 ) ; } else { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> invalid <S2SV_blank> %s\\n"", fname ) ; exit ( 1 ) ; } else if ( fname ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> file\\n"", fname ) ; return ; } if ( fname ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> invalid <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( fname ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> invalid <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( fname ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> invalid <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( fname",0
521,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> hdr_len ) { <S2SV_ModStart> - EACCES ; goto out_len ; struct xdr_len ; size_t rdr_len ; <S2SV_ModStart> attr_len ) ; if ( <S2SV_ModEnd> xattr_getattr_len <S2SV_ModStart> + attrmap_len, & acl_len <S2SV_ModEnd> ) ) { <S2SV_ModStart> - ENOMEM ; goto out ; } <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> if (!",0
522,<S2SV_ModStart> -> bf ) { <S2SV_ModEnd> return NULL ;,0
523,,0
524,<S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( &,1
525,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
526,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } break ;,0
527,"<S2SV_ModStart> goto chunk_length ; struct range_data * r = & clt -> clt_stride ; <S2SV_ModStart> range_media ; size_t content_length = & clt -> clt_ranges ; size_t content_length = 0, r -> clt_ranges ; size_t r -> clranges = 0 ; size_t content_length = 0 ; <S2SV_ModStart> if ( clt -> clt_stride ) < sizeof ( clt -> clt_stride ) ) { r -> clt_boundary = & clt -> clranges [ i ] + 1 ] ; r -> clranges = 0 ; range [ nranges <S2SV_ModEnd> ] ; <S2SV_ModStart> } else { range = clt -> clt_strdup ( clt -> clt -> clt_length, & clt -> clt_ranges <S2SV_ModEnd> ) ; range <S2SV_ModStart> } else { range ( clt -> clranges, clt -> clranges <S2SV_ModEnd> ) ; range <S2SV_ModStart> } else { size_t -> clistranges = NULL ; clt -> clranges [ i ] ; size_ranges = NULL ; clt -> clt -> cli ] ; clt",0
528,"<S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( interface, KSZ8851_ISR_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_LCIS <S2SV_ModEnd> ) ; return",0
529,"<S2SV_ModStart> * wb, struct vpx_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_bit_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
530,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
531,<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ms ) ),0
532,<S2SV_ModStart> tmp ) { goto softfail <S2SV_ModEnd> ; } case <S2SV_ModStart> ) ) { goto softfail <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; softfail : state -> offset = 0 ;,1
533,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
534,<S2SV_ModStart> flags ) { spin_lock ( & ctx -> cancel_lock ) ; <S2SV_ModStart> } } else { __timerfd_remove_cancel <S2SV_ModEnd> ( ctx ) <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> cancel_lock ) ;,1
535,"<S2SV_ModStart> ) ) ; if ( c16 -> Curves [ i ] == NULL ) { _cmsFree ( ContextID, c16 ) ; return NULL ; } }",0
536,<S2SV_ModStart> { if (! dev_name ||,1
537,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
538,"<S2SV_ModStart> * msg ) ; memcpy ( msg, 0, sizeof ( * msg ) ) ; <S2SV_ModStart> msg ) ; <S2SV_ModEnd> memcpy ( msg <S2SV_ModStart> -> m_fromio ) ; memcpy <S2SV_ModEnd> ( msg, <S2SV_ModStart> -> m_pdwGetRing ) ; memcpy <S2SV_ModEnd> ( msg, <S2SV_ModStart> -> m_pdwGetRing, sizeof ( * msg ) <S2SV_ModEnd> ) ; if",0
539,<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { efree ( replaced ) ; RETURN_FALSE ; },1
540,<S2SV_ModStart> ; if ( <S2SV_ModEnd> < NULL ) goto err,0
541,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",0
542,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart>, BLOCK_SIZE bsize, MACROBLOCKD * xd <S2SV_ModEnd>, int mi_row <S2SV_ModStart> + mi_row, PREDICTION_MODE <S2SV_ModEnd>, int mi_row <S2SV_ModStart> mi_row ) { PREDICTION_MODE <S2SV_ModEnd> * bsize = <S2SV_ModStart> mi_mode_info ) ; <S2SV_ModEnd> if ( xd <S2SV_ModStart> + mi_row, mi_row, mi_row, mi_row, bsize ) ; if ( xd -> bit_mode == 0 ) return - mi_row ; <S2SV_ModEnd> } } <S2SV_null>",0
543,"<S2SV_ModStart> name ) ; if (! strcmp ( key, ""url"" ) && value && looks_like_command_line_option ( value ) ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_URL, ""disallowed <S2SV_blank> submodule <S2SV_blank> url: <S2SV_blank> %s"", value ) ;",1
544,<S2SV_ModStart> ; int chunk_size ; unsigned int chunk_size <S2SV_ModStart> block ) ; chunk_size = 0 ; if ( chunk_size < s -> height ) { av_assert ( s -> height <= s -> height ) ; break ; },0
545,<S2SV_ModStart> cnt ) { ssize_t <S2SV_ModEnd> n ; assert,1
546,<S2SV_ModStart> ; __be16 type ; if ( NAPI_GRO_CB ( skb ) -> encap_mark ) goto out ; NAPI_GRO_CB ( skb ) -> encap_mark = 1,1
547,<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { return 0 ; } if (,1
548,<S2SV_ModStart> ) ) ; if (! session -> async_buf ) {,0
549,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) ret =,0
550,"<S2SV_ModStart> 128, size - 1",0
551,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> = S64_MAX ; <S2SV_ModEnd> if ( src_known,0
552,<S2SV_ModStart> dentry ) ; <S2SV_ModEnd> if (!,0
553,<S2SV_ModStart> vfio_irq_set hdr ; size_t hdr ; <S2SV_ModStart> ; switch ( hdr ) { case VFio_SET_IRQ_DATA_SET_MAX : hdr = 0 ; break ; case VFIO_IRQ_SET_DATA_NONE : size = 0 ; break ; case VFIO_IRQ_SET_DATA_IRQ : if ( hdr. count > hdr. count ) return - EINVAL ; break ; case VFIO_SET_DATA_IRQ_SET_DATA_TYPE_NONE : size = 0 ; break ; case VFIO_IRQ_SET_DATA_IRQ : size = sizeof ( uint8_t ) ; break ; case VFIO_IRQ_SET_DATA_NONE : size = hdr. flags ; break ; case VFIO_IRQ_SET_DATA_NONE : size = size ; break ; case VFIO_IRQ_IRQ_SET_DATA_NONE : size = size ; break ; case VFIO_IRQ_IRQ_SET_DATA_NONE : size = sizeof ( uint8_t,0
554,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ext4_has_inline_data ( inode,1
555,<S2SV_ModStart> -> filesize = UINT64_MAX <S2SV_ModEnd> ; s ->,1
556,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
557,"<S2SV_ModStart> char * in, size_t olen <S2SV_ModStart> += 4 ; if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ;",1
558,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
559,"<S2SV_ModStart> i ; size_t bytes, <S2SV_ModStart> ++ ) { bytes <S2SV_ModEnd> = min_t ( <S2SV_ModStart>, 0, bytes <S2SV_ModEnd> ) ; for",0
560,<S2SV_ModStart> & CP_RDESC_SWAPPED_MIN_MAX ) ) return rdesc ; if ( * rsize < 4,1
561,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> VP9_COMP * <S2SV_ModStart> i ) { SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> vpx_context_count ) ; <S2SV_ModEnd> int i ; <S2SV_ModStart> ++ ) { VPX_CODEC_LOG_INFO * const svc = & svc_context -> <S2SV_ModEnd> * svc_ctx -> <S2SV_ModStart> -> segment_count ; svc_counts [ i ] = svc_context -> temporal_counts [ i ] ; for ( i = 0 ; i < VPX_COUNT ; ++ i ) { svc_log ( svc_context [ i ] ) ; ++ i ) { svc_log ( svc_context [ i ], sizeof ( svc_context ) ) ; svc_context [ i ] = svc_temporal_layer_context [ i ] ; svc_context [ i ] = ( svc_ctx -> <S2SV_ModEnd> ) ; si",0
562,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> == NULL ) { if ( outSize < 4 ) return FALSE ; <S2SV_ModStart> 4 ; } if ( outSize < 4 ) return FALSE ; <S2SV_ModStart> 4 ; } if ( outSize < 4 ) return FALSE ; outSize -- ; * out ++ ; memcpy ( out, in, 4 ) ; return FALSE <S2SV_ModEnd> ; } <S2SV_null>",0
563,<S2SV_ModStart> ; if ( screen == NULL && screen == 0,0
564,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * * * end, <S2SV_ModEnd> ) { char * <S2SV_ModStart> char * end_end ; <S2SV_ModEnd> * end_end ; <S2SV_ModStart> == NULL ) { if ( * end_end ) { * end_offset = NULL ; <S2SV_ModStart> == '\\0' ) { * end_offset = NULL ; <S2SV_ModEnd> if ( * <S2SV_ModStart> == NULL ) { <S2SV_ModStart> } else { * end_offset = NULL ; <S2SV_ModEnd> if ( * <S2SV_ModStart> 1 == '\\0' || * end_offset == '\\0' || * end_val == '\\0' ) { * end_end = NULL ; <S2SV_ModEnd> } else { <S2SV_ModStart> == '\\0' ) { * end_end = NULL ; <S2SV_ModEnd> } else { <S2SV_ModStart> } else { if ( * end_offset == NULL ) { * end_length = str ; <S2SV_ModEnd> if ( * <S2SV_ModStart> == '\\0' ) { * end_end = NULL ; if ( * end_end ) { * end_end = NULL ; } else { * end_end = NULL ; * end_end ; <S2SV_ModEnd> } else { <S2SV_ModStart> == '\\0' ) ; <S2SV_ModEnd> } else { * <S2SV_ModStart> } else { if ( * end_end ) { * end_",0
565,"<S2SV_ModStart> * m, size_t <S2SV_ModEnd> bufsize ) { <S2SV_ModStart> * buf ; <S2SV_ModEnd> JAS_DBGLOG ( m",0
566,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> d_null> <S2SV_null>,0
567,"<S2SV_ModStart>, reg ), NULL",0
568,<S2SV_ModStart> pcrypt_free ( struct aead_instance <S2SV_ModEnd> * inst ) <S2SV_ModStart> * ctx = aead_instance_ctx <S2SV_ModEnd> ( inst ),1
569,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( ptr,0
570,"<S2SV_ModStart> } if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if (",1
571,<S2SV_ModStart> icmp6_hop_limit ) { if ( <S2SV_ModEnd> ra_msg -> icmph <S2SV_ModStart> icmp6_hop_limit ) { <S2SV_ModEnd> if ( icmp6_hop_limit,0
572,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
573,<S2SV_ModStart> * up ; int ulen ; <S2SV_ModStart> rp ) ; ulen = xfrm_replay_state_esn_len ( up ) ; if ( nla_len ( rp ) < ulen || <S2SV_ModEnd> xfrm_replay_state_esn_len ( replay_esn <S2SV_ModStart> replay_esn )!= ulen <S2SV_ModEnd> ) return -,1
574,"<S2SV_ModStart> int ret = proc_dointvec_minmax <S2SV_ModEnd> ( table,",1
575,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
576,<S2SV_ModStart> opj_calloc ( ( size_t ) ( <S2SV_ModStart> -> numlayers + 1U <S2SV_ModEnd> ) * l_step_l,0
577,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
578,"<S2SV_ModStart> ( kvm, <S2SV_ModEnd> ) ) return",0
579,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9_COMMON * const <S2SV_ModEnd> struct mi_row * <S2SV_ModStart> mi_col ) { VP9_COMMON * const tile_info = & cpi -> mi_row, mi_col ; MACROBLOCKD * const tile_data = & cpi -> mi_row * mi_row ; MACROBLOCKD * mi_row = & cpi -> mi_row ; MACROBLOCKD * mi_row = & mi_row * mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_col ) ; if ( mi_row && mi_row!= NULL ) { vp9_rd_rd ( & cpi -> mi_row, mi_row, mi_col ) ; vp9_rd_rd ( & cpi -> mi_row, mi_cols, mi_cols ) ; vp9_set <S2SV_ModEnd> ( cpi, <S2SV_ModStart>, mi_row, mi_col, mi_cols && mi_cols && mi_cols && mi_cols &&",0
580,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",1
581,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
582,<S2SV_ModStart> } else { # endif,0
583,<S2SV_ModStart> * fdname = NULL <S2SV_ModEnd> ; if (,0
584,<S2SV_ModStart> blkg ) ) <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> blkg ) ; <S2SV_ModEnd> q -> root_blkg,1
585,<S2SV_ModStart> ; if ( bpp == 1 && <S2SV_ModStart> else if ( bpp == 8 &&,1
586,"<S2SV_ModStart> ; krb5_data rspac ; const char * tgt_realm = krb5_principal_get_realm ( context, krbtgt -> entry. principal ) <S2SV_ModStart>, cp, tgt_realm,",1
587,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
588,"<S2SV_ModStart> struct usbdevfs_connectinfo ci ; memset ( & ci, 0, sizeof ( ci ) ) ; ci <S2SV_ModEnd>. devnum = <S2SV_ModStart> dev -> devnum ; ci <S2SV_ModEnd>. slow = <S2SV_ModStart> speed == USB_SPEED_LOW <S2SV_ModEnd> ; if (",1
589,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_options_rcu <S2SV_ModEnd> * ip_options_rcu ( <S2SV_ModStart> * opt, optlen <S2SV_ModEnd> * optlen ) <S2SV_ModStart> ) { struct ip_options_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> * opt -> opt.",0
590,<S2SV_ModStart> ; args -> rmtvaluelen = args -> rmtvaluelen ; args ->,0
591,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
592,<S2SV_ModStart> ; if ( osStrchr <S2SV_ModEnd> ( info ->,0
593,"<S2SV_ModStart> ; if ( dcap_has_snprintf ( dcap, sizeof ( dcap ) ) return - 1 ; n <S2SV_ModEnd> = 0 ; <S2SV_ModStart> case 0 : if ( dcap_get ( dcap_address ( dlen ) ) return - 1 ; <S2SV_ModStart> case 0 : if ( dcap_set ( dcap, sizeof ( dp [ 0 ] ) ) ) return - 1 ; <S2SV_ModStart> case 0 : if ( dlen > sizeof ( dp [ 0 ] ) - 1 <S2SV_ModEnd> ) ; break",0
594,"<S2SV_ModStart> ddr, NULL <S2SV_ModEnd> ) ; }",0
595,<S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> index ) ; q ++ ; p <S2SV_ModEnd> ++ ; } <S2SV_ModStart> % 4 ) > <S2SV_ModEnd> 1 ) { <S2SV_ModStart> % 4 ) > <S2SV_ModEnd> 2 ) {,0
596,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
597,"<S2SV_ModStart>, int tstype, bool tstype <S2SV_ModStart> ; int tstype, opt_stats <S2SV_ModStart> ; int tstype, sizeof ( struct sock_stats * tstr_stats",0
598,"<S2SV_ModStart> 0 ) { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ;",0
599,<S2SV_ModStart> ) ) ; ND_TCHECK2 ( bp [ 0 ] <S2SV_ModEnd> ) ; bp,0
600,<S2SV_ModStart>,0
601,<S2SV_ModStart> ( task ) <S2SV_ModEnd> return - EINVAL,0
602,<S2SV_ModStart> <= w - ( int ),1
603,<S2SV_ModStart> page ) ; <S2SV_ModEnd> memset ( addr,1
604,<S2SV_ModStart> * matrix ; jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,0
605,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> ps_params ) ; },0
606,"<S2SV_ModStart> * priv ; if (! port -> interrupt_out_urb ||! port -> interrupt_in_urb ) { dev_err ( & port -> dev, ""required <S2SV_blank> endpoint <S2SV_blank> is <S2SV_blank> missing\\n"" ) ; return - ENODEV ; }",1
607,<S2SV_ModStart> page_data ) ; <S2SV_ModEnd> if ( dd,0
608,<S2SV_ModStart> -> device_data ; cancel_autoload_drivers ( ) ;,1
609,"<S2SV_ModStart>, int ret, bool ret <S2SV_ModEnd> ) { if",0
610,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> p == q ) || ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> size < 16 ) || ( <S2SV_ModEnd> size > 256 <S2SV_ModStart> size > 256 ),1
611,"<S2SV_ModStart> uint dblocks = xfs_attr3_rmt_blocks <S2SV_ModEnd> ( mp,",1
612,<S2SV_ModStart> ) ) ; if ( pcount > NULL ) {,0
613,<S2SV_ModStart> ; if (! is_name ( r ) &&,0
614,<S2SV_ModStart> ] == EOF || text [ 1 ] == 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 2 ] ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 3 ] ) <S2SV_ModEnd> ) return 0,1
615,<S2SV_ModStart> c -> buf + 1 <S2SV_ModEnd> ) ; if,0
616,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> ++ j ; tran_low_t <S2SV_ModEnd> temp_in [",0
617,"<S2SV_ModStart> NULL ) ; if ( g_strstart ( data, name_len ) == - 1 ) { g_assert ( 0!= NULL ) ; g_assert ( - 1 ) ; break ; }",0
618,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; fh_lock ( fh ) ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT <S2SV_ModEnd>, argp -> <S2SV_ModStart> argp -> acl_default ) ; out_drop_lock : fh_unlock ( fh ) ; <S2SV_ModEnd> fh_drop_write ( fh",1
619,<S2SV_ModStart> * ue ; if <S2SV_ModEnd> ( tree_root == <S2SV_ModStart> == NULL ) return 0,1
620,"<S2SV_ModStart> * config ; fp = log_filename ( LOG_INFO * ) ; <S2SV_ModStart> goto out ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { log_warn ( LOG_INFO, ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> \'%s\\n"", __func__, __func__, sp ) ; return - 1 ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
621,<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) ; <S2SV_ModStart> > 0 ) { elen += pc -> lengthComponentIdent ; break ; } <S2SV_ModEnd> case 2 : <S2SV_ModStart> case 5 : elen += pc -> lengthComponentIdent ; if ( elen > fromlen ) return - EIO ; <S2SV_ModStart> break ; } <S2SV_ModEnd> } if (,1
622,<S2SV_ModStart> ( dp [ 4 <S2SV_ModEnd> ] ) ;,0
623,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr ) ;,0
624,<S2SV_ModStart> } if ( ( ctxt -> options. etype == 0 ) && ( ctxt -> options.,0
625,<S2SV_ModStart> ; bool slow <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ;,1
626,"<S2SV_ModStart>, u_int len, u_int len, <S2SV_ModEnd> * pdu_len ) <S2SV_ModStart> -= pdu_len ; len <S2SV_ModEnd> -= pdu_len ; <S2SV_ModStart> -= pdu_len ; len ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
627,"<S2SV_ModStart> int tagval ; struct stream packet ; <S2SV_ModStart> length ) ; packet = * s ; <S2SV_ModStart> return False ; packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; packet =",0
628,"<S2SV_ModStart> 0 ; int l_offset ; u_int i ; u_int i ; if ( ( ( ndo, cp ) == 0 ) return ( NULL ) ; if ( (! ND_TTEST2 ) return ( NULL ) ) return ( NULL ) ; rp = ( * cp - 1 ) ) ; if ( ( i + offset ) == 0 ) { ND_PRINT ( ( ndo, ""A <S2SV_blank> NULL"" ) ) ; return ( NULL ) ; } if ( i == 0 ) { ND_PRINT ( ( ( ndo, ""A <S2SV_blank> NULL"" ) ) ; return ( NULL ) ; } <S2SV_ModEnd> ndo = cp - <S2SV_ModStart> ndo -> ndo_snapend - 1 ) ; if ( i == 0 ) { if ( i == INDIR_MASK ) { ND_PRINT ( ( ( ( ndo, ""A <S2SV_blank> NULL"" ) ) ; compress = 0 ; } if ( i == INDIR_MASK ) { if (! compress_offset ) return ( NULL ) ; } return ( NULL ) ; } if ( i == INDIR_MASK ) { ND_PRINT ( ( ( ndo, offset ) ) ; compress = 0 ; i = 0",0
629,"<S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; error <S2SV_ModStart> = args -> rmtvaluelen <S2SV_ModEnd> ; while (",1
630,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
631,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> S_IWUSR ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; unlink",0
632,"<S2SV_ModStart> ( bc, fc -> fc_add <S2SV_ModEnd> ) ; return",0
633,"<S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = MagickMin <S2SV_ModEnd> ( 1.0f,",0
634,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_set_str ( GITERR_NET, ""Invalid <S2SV_blank> empty <S2SV_blank> packet"" ) ; return GIT_ERROR <S2SV_ModEnd> ; } if",1
635,<S2SV_ModStart> ; if ( vma -> vm_flags & VM_SHARED ) return VM_FAULT_SIGBUS ; if (,1
636,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
637,<S2SV_ModStart> env -> insn_aux_data ; int i <S2SV_ModStart> ) ) ; for ( i = off ; i < off + cnt - 1 ; i ++ ) new_data [ i ]. seen = true ;,1
638,<S2SV_ModStart> ; ND_TCHECK ( * dp <S2SV_ModEnd> ) ; if,1
639,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;,1
640,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
641,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorDecodeTile"", ""%s"", ""occ0%rowsize <S2SV_blank>!= <S2SV_blank> 0"" ) ; return 0 ; } <S2SV_ModEnd> assert ( sp <S2SV_ModStart> 0 ) { if (! <S2SV_ModStart>, rowsize ) ) return 0",1
642,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ;",0
643,<S2SV_ModStart> ; if ( ctx -> terminated ||,1
644,<S2SV_ModStart> = NULL ; if ( sbi -> spool ) hugepage_put_subpool ( sbi -> spool ) ;,1
645,<S2SV_ModStart> ; if ( len < 0 &&,0
646,<S2SV_ModStart> in ) { int nlen = 0 ; <S2SV_ModStart> out ) { <S2SV_ModEnd> struct olen * <S2SV_ModStart> out ; } <S2SV_ModEnd> memcpy ( o <S2SV_ModStart> ) ) ; size_t,0
647,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
648,"<S2SV_ModStart> ( ) ; iov_iter_advance ( i, copied ) ; <S2SV_ModStart> again ; } <S2SV_ModEnd> pos += copied",1
649,<S2SV_ModStart> unlikely ( len + ring -> frameoffset,1
650,<S2SV_ModStart> ; # endif TEMP_FAILURE_RETRY ( <S2SV_ModStart> - ENOMEM ),0
651,"<S2SV_ModStart> ( obj, <S2SV_ModEnd> name, data <S2SV_ModStart>, show_object, & base <S2SV_ModEnd>, path,",1
652,<S2SV_ModStart> sub ) { if (! strlen ( sub ) ) return - EINVAL ;,0
653,<S2SV_ModStart> src < zsize + ( sub_type!= 2 ) <S2SV_ModStart> bits ) { if ( src >= src_end ) return AVERROR_INVALIDDATA ;,1
654,<S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
655,,0
656,<S2SV_ModStart> ++ ) { if ( length < sizeof ( image ) ) return NULL ;,0
657,<S2SV_ModStart> slave_active_flags ) ; mutex_lock ( & timeri -> lock ) ; <S2SV_ModStart> slave_active_flags ) ; spin_unlock ( & timeri -> lock ) ;,0
658,<S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT,1
659,<S2SV_ModStart> -> arch ; <S2SV_ModEnd> char * arch <S2SV_ModStart> ; char * arch = strdup ( info -> arch ) ; char * cpu = strdup ( info -> cpu ) ; free ( info -> cpu ) ; free ( arch,0
660,"<S2SV_ModStart> sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart>, * n <S2SV_ModEnd> ; list_for_each_entry (",1
661,<S2SV_ModStart> u4_dpb_cmds_read ) { <S2SV_ModEnd> return ret ;,0
662,"<S2SV_ModStart> gint64 offset ; <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; offset <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! parse_netscreen_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> wth -> fh <S2SV_ModEnd>, & wth <S2SV_ModStart> wth -> frame_buffer, line",1
663,<S2SV_ModStart> 0 ) ; if ( <S2SV_ModStart>. seq_num ) < 0 ) return - 1,1
664,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
665,"<S2SV_ModStart> : ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = <S2SV_ModStart> == 0 ) ret = <S2SV_ModEnd> key -> type <S2SV_ModStart> type -> read ( key, buffer, buflen ) ; up_read <S2SV_ModEnd> ( & key <S2SV_ModStart> sem ) ; <S2SV_ModEnd> } error2 :",1
666,<S2SV_ModStart>  ret = 0 ; if ( ret == NULL ) return ret ; <S2SV_ModEnd> } ret =,0
667,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",1
668,"<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - JAS_CAST ( jas_longlong <S2SV_ModEnd>, ( ( <S2SV_ModStart> : JAS_CAST ( jas_longlong <S2SV_ModEnd>, tmp )",1
669,<S2SV_ModStart> page ) ; rm -> atomic. op_active = 0 ;,1
670,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return ;,0
671,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
672,"<S2SV_ModStart> sizeof ( spath ) ) return - 1 ; if ( strstr ( name, "".."" ) || strchr ( name, '/'",1
673,<S2SV_ModStart> ; while (! s <S2SV_ModEnd> ) && t,0
674,"<S2SV_ModStart> -> bcache, cache_id ( <S2SV_ModStart> ] -> data )",1
675,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
676,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
677,<S2SV_ModStart> return 1 ; consume_skb ( skb ) ; return 0 <S2SV_ModEnd> ; } if,1
678,<S2SV_ModStart> pixelsen + 1 <S2SV_ModEnd> ) ; if,0
679,<S2SV_ModStart> ; if ( * dentry -> d_inode ) { err = - EINVAL ; goto out_unlock <S2SV_ModEnd> ; } if,0
680,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
681,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> } if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if (",1
682,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
683,<S2SV_ModStart> 1 ) ; if ( strlen ( line ) == 0 ) return - 1 ;,1
684,<S2SV_ModStart> * sig ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> } if (,0
685,<S2SV_ModStart> ++ ) { if ( band -> prec ) { <S2SV_ModStart> ) ; } },1
686,<S2SV_ModStart> < 0 ) { xmlFreeInputStream ( input ) ; return ; } <S2SV_ModEnd> if ( entity,1
687,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> tclass ), final ) ; rcu_read_unlock ( ) ;",0
688,<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> VP9_COMMON * <S2SV_ModStart> ) { const cpi <S2SV_ModEnd> = cpi -> <S2SV_ModStart> ) return ; } else { if ( cpi -> oxcf. mode == VPX_COMMON * ) { cpi -> sf. sf_mode = cpi -> oxcf. rf_mode ; return ; } else { if ( cpi -> sf. sf_mode == TX_MODE ) return ; } else { if ( cpi -> sf. sf_mode == KEY_FRAME ) { LAYER_MODE ; return ; } } else { return ; } else { cpi -> sf. sf_mode_costs [ cpi ] ] ; } else { return ; } } <S2SV_ModEnd> if ( cpi <S2SV_ModStart> ) { return cpi <S2SV_ModEnd> [ cpi -> <S2SV_ModStart> == VPX_COMPLANE ] ; },0
689,"<S2SV_ModStart> ( u32 size, u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } <S2SV_ModEnd> return malloc ( <S2SV_ModStart> malloc ( size * num",1
690,<S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> { if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,1
691,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,1
692,<S2SV_ModStart> ) ) { if ( buf2 -> size_t ) {,0
693,"<S2SV_ModStart> scn, root_storage <S2SV_ModEnd> ) ) <",1
694,<S2SV_ModStart> size = NULL ; size_t si,0
695,<S2SV_ModStart> (! eof && vars -> str. c!= vars -> ptr,1
696,<S2SV_ModStart> == 0 ) return - EINVAL ; if (,0
697,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
698,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc!= X86EMUL_CONTINUE ) break <S2SV_ModStart> case 4 : rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val )",1
699,"<S2SV_ModStart> 1 ) ; if ( strlen ( buf ) + 1, sizeof ( s ) ) ;",0
700,"<S2SV_ModStart> <S2SV_null> <S2SV_null> void * ticket_buf ; void * ticket_buf ; <S2SV_ModStart> struct * ticket_buf ; void * ticket_buf ; void * ticket_buf = NULL <S2SV_ModStart> struct * ticket_buf ; void * ticket_buf ; void * ticket_buf = NULL <S2SV_ModStart>, & ticket_buf, & ticket_buf, & ticket_buf ) ; if (! ticket_buf ) { ret = - ENOMEM ; goto out ; } <S2SV_ModStart> out ; } tp = ticket_buf ; void * ticket_buf ; ticket_buf = kmalloc ( 0, GFP_NOFS ) ; if (! ticket_buf ) { ret = - ENOMEM ; goto out ; } <S2SV_ModStart> bad ) ; kfree ( dbuf ) ;",0
701,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } if (,0
702,<S2SV_ModStart> -> skip_block ) <S2SV_ModEnd> } if (,0
703,"<S2SV_ModStart> -> session_ctx, 0 <S2SV_ModEnd> ) ; if",0
704,"<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart> b, 0 )",0
705,<S2SV_ModStart> (!= UINT32_MAX <S2SV_ModEnd> ) ) {,0
706,<S2SV_ModStart> NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_FIELD_REF,0
707,<S2SV_ModStart> ) ; } sas_move_dev ( cmd ) ;,0
708,"<S2SV_ModStart>, type_comment, type_comment, <S2SV_ModStart> ; if ( has_type_comment, type_comment ) return NULL ; type_comment = NULL ; if (! type_comment ) return NULL ; <S2SV_ModStart>, type_comment, type_comment,",0
709,"<S2SV_ModStart> err = 0 ; if (! net_eq ( current -> nsproxy -> net_ns, sock_net ( sk ) ) ) return - EINVAL",1
710,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
711,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
712,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
713,<S2SV_ModStart> -> rows = 1 <S2SV_ModEnd> ; image -> <S2SV_ModStart> ( BImgBuff ) <S2SV_ModEnd> ; break ;,1
714,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> == 0 ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,0
715,,1
716,<S2SV_ModStart> val ) ; <S2SV_ModEnd> return ret ;,0
717,<S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> ( psf -> header. indx + psf -> header. indx <S2SV_ModEnd> > psf -> <S2SV_ModStart> < psf -> header. end && psf -> header. indx <S2SV_ModEnd> == psf -> <S2SV_ModStart> == psf -> header. end <S2SV_ModEnd> == psf -> <S2SV_ModStart> ( psf -> header. end <S2SV_ModEnd> ) ) { <S2SV_ModStart> + psf -> header. end <S2SV_ModEnd> + psf -> <S2SV_ModStart> psf -> header. end <S2SV_ModEnd> + psf -> <S2SV_ModStart> + psf -> header. end <S2SV_ModEnd> + psf -> <S2SV_ModStart> == psf -> header. end <S2SV_ModEnd> + psf -> <S2SV_ModStart> == psf -> header. end <S2SV_ModEnd> ) ; psf -> <S2SV_ModStart> + psf -> header. end <S2SV_ModEnd> ; psf ->,0
718,<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ioffset ) ; <S2SV_ModEnd> credits = ext4_writepage_trans_blocks <S2SV_ModStart> ) ; goto out_mmap <S2SV_ModEnd> ; } down_write <S2SV_ModStart> handle ) ; out_mmap : up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModEnd> ext4_inode_resume_unlocked_dio ( inode,1
719,<S2SV_ModStart> uint32_t * midi_data ; uint32_t * track_size ; uint32_t * track_size <S2SV_ModEnd> ; uint32_t track_tracks <S2SV_ModStart> ( midi_tracks ) ; track_size = tmp_data [ sizeof ( * tmp_data ) - tmp_size <S2SV_ModStart> ( midi_data <S2SV_ModEnd> -= * midi_data <S2SV_ModStart> << 8 ) * tmp_data ; tmp_size = tmp_val <S2SV_ModEnd> ; midi_data [ <S2SV_ModStart> ( midi_data [ tmp_size <S2SV_ModEnd> - 1 ] <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> -= malloc ( <S2SV_ModStart> ( midi_data [ tmp_val <S2SV_ModEnd> - 1 ] <S2SV_ModStart> ( midi_data [ tmp_size <S2SV_ModEnd> - 1 ] <S2SV_ModStart> ( midi_data [ tmp_data [ tmp_data [ tmp_val <S2SV_ModEnd> ] ; tmp_data <S2SV_ModStart> ( midi_data [ tmp_val <S2SV_ModEnd> - 1 ] <S2SV_ModStart> ( midi_data [ tmp_val <S2SV_ModEnd> - 1 ] <S2SV_ModStart> ( midi_data [ tmp_val <S2SV_ModEnd> - 1 ] <S2SV_ModStart> ( midi_data [ tmp_size [ tmp_data [ tmp_val <S2SV_ModEnd> - 1 ] <S2SV_ModStart> ; midi_data [ tmp_size,0
720,"<S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val * <S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val *",1
721,<S2SV_ModStart> * bh ; unsigned int table_len ; <S2SV_ModStart> -> b_data ; table_len = le32_to_cpu ( lvd -> s_blocksize - sizeof ( * lvd ) + table_len ; <S2SV_ModStart> -> sb_blocksize - sizeof ( * lvd ) + table_len <S2SV_ModEnd> ; i < sizeof ( <S2SV_ModStart> -> sb_blocks ) <S2SV_ModEnd> ; table_len =,0
722,"<S2SV_ModStart> long n ; info = 0 ; info = 0 ; <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> header\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> 0 ) { goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> info ) ; goto error <S2SV_ModEnd> ; } JAS_CAST (",0
723,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
724,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
725,"<S2SV_ModStart> g_tv_comment, FILENAME_COMMENT ) ; problem_data_reload_from_dump_dir ( ) ; update_gui_state_from_problem_data ( 0",1
726,<S2SV_ModStart> ) ; return count_t <S2SV_ModEnd> ; } if,0
727,<S2SV_ModStart> ++ ) { if ( off < 0 ) continue ;,0
728,"<S2SV_ModStart>, extent, height, <S2SV_ModStart> ""UnableToReadImageData"" ) ; <S2SV_ModEnd> height = sun_info <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( sun_info. type == RT_ENCODED ) <S2SV_ModStart> sun_data ) ; <S2SV_ModEnd> p = sun_pixels",0
729,"<S2SV_ModStart>, krb5_principal client_principal, const char * tgt_realm <S2SV_ModStart> principal ), tgt_realm <S2SV_ModEnd> ) ; if",1
730,<S2SV_ModStart> = MagickFalse ; break <S2SV_ModEnd> ; } image,0
731,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = ireq ->,1
732,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
733,"<S2SV_ModStart>!= 0 ) { int tend_off = skb_transport_offset ( skb ) + tlen ; <S2SV_ModStart> ( csum, skb_checksum ( skb, tend_off, <S2SV_ModEnd> offset, 0 <S2SV_ModStart> ) ) ; }",1
734,"<S2SV_ModStart> pfn ) ; kvm_unpin_pages ( kvm, page_size ) ;",0
735,<S2SV_ModStart> 0x00 } ; if ( cmd -> msg_len > sizeof ( b ) - 4 ) return - EINVAL ;,1
736,"<S2SV_ModStart> perf_event_context * ctx ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> event ) ; _perf_event_disable ( event ) ; perf_event_ctx_unlock ( event, ctx <S2SV_ModEnd> ) ; }",1
737,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> ; return ( <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return (,0
738,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int i, GFP_KERNEL <S2SV_ModEnd> ; int ret <S2SV_ModStart> ) { ret = - EINVAL ; bool ret = - EINVAL ; i -> nid_nid = - EINVAL ; i = - EINVAL ; goto err_free_nid_nid_nid_nid ( ) ; ret = - EINVAL ; if ( free_nid_nid_nid ) goto err_nid_nid ; i = nid_nid_nid_i, GFP_NOFS ) ; if ( ret == NID_NEW ) { ret = - EINVAL ; goto err_free_nid_nid ; } ret = nid_nid_nid ( ) ; i = true ; i -> nid_i = NID_NEW ; err_out : free_nid = nid_i -> nid_nid ; i = true ; i -> nid_nid = true ; i <S2SV_null>",0
739,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
740,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> ++ cons ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> extra. type ) ; netbk_fatal_tx_err ( vif",1
741,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ;,1
742,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
743,"<S2SV_ModStart>, 1 ) ; luaL_checkstack ( luaL, pos + 1, ""offset <S2SV_blank> must <S2SV_blank> be <S2SV_blank> 1 <S2SV_blank> "" ) ; luaL_check ( ld, pos, 3 ) ; lua_debug ( ""offset <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_check ( L, 1, ""too <S2SV_blank> short"" ) ; lua_to <S2SV_blank> short"" ) ; lua_decode ( ld, <S2SV_ModEnd> size <= ld <S2SV_ModStart> size <= ld ) { lua_check_string ( L, ""too <S2SV_blank> short"" ) ; return - 1 ; }",0
744,"<S2SV_ModStart> 0 ) { ND_TCHECK2 ( * tptr, length ) ; <S2SV_ModStart> * msg_len ; if ( tptr == 0 ) { ND_PRINT ( ( ndo, ""\\n"" ) ) ; break ; }",0
745,<S2SV_ModStart> -> data ; unsigned <S2SV_ModStart> body -> unit_size || len < sizeof ( struct oz_multiple_fixed ) - 1,0
746,<S2SV_ModStart> void ) { <S2SV_ModEnd> return - 1,0
747,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0, 0644 <S2SV_ModEnd> ) ; if",0
748,<S2SV_ModStart> status = 1 <S2SV_ModEnd> ; } if,0
749,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
750,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_entries ) + ext_size ) ; memset ( bh -> b_blocksize + ext_size, inode -> i_sb -> s_blocksize - ext_size ) ;",0
751,<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( *,0
752,<S2SV_ModStart> ; cmap_len = get_tga_ushort <S2SV_ModEnd> ( & tga,0
753,<S2SV_ModStart> ; ssize_t ret ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
754,<S2SV_ModStart> == CPUCLOCK_SCHED ) * tp = ns_to_timespec <S2SV_ModEnd> ( cpu. <S2SV_ModStart> cpu. sched ) ; else <S2SV_ModEnd> cputime_to_timespec ( cpu <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
755,<S2SV_ModStart> ; uint32 nstrips <S2SV_ModEnd> ; nstrips =,1
756,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
757,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> == 0 ) { lua_log <S2SV_ModEnd> ( ap, <S2SV_ModStart> expr ) ; for ( i = 0 ; i <S2SV_null> <S2SV_null> <S2SV_null>",0
758,<S2SV_ModStart> ; int error = 0 <S2SV_ModStart> &= PAGE_MASK ; if ( address < mmap_min_addr ) return - EPERM <S2SV_ModEnd> ; prev =,1
759,"<S2SV_ModStart> { umode_t mode <S2SV_ModEnd> ; error = <S2SV_ModStart> ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart>, & mode, & acl <S2SV_ModStart> if ( error <S2SV_ModEnd> ) return error <S2SV_ModStart> return error ; <S2SV_ModEnd> error = xfs_set_mode",1
760,"<S2SV_ModStart>, int optional, const char * rootfs <S2SV_ModStart> endif if ( safe_mount <S2SV_ModEnd> ( fsname, <S2SV_ModStart> MS_REMOUNT, data, rootfs <S2SV_ModStart>, data ) < 0",1
761,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
762,"<S2SV_ModStart> it_overrun = - 1LL <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> info -> si_overrun = timer_overrun_to_int ( timr, info -> si_overrun ) <S2SV_ModEnd> ; } unlock_timer",1
763,<S2SV_ModStart> ) ) { if ( c == NULL ) return - 1 ;,0
764,<S2SV_ModStart> struct static_key * once_key <S2SV_ModEnd> ) { static <S2SV_ModStart> ; __net_random_once_disable_jump ( once_key <S2SV_ModEnd> ) ; return,1
765,"<S2SV_ModStart> -> mm ; mutex_lock ( & io_data -> ffs -> data, ret ) ; if (! io_has_eventfd ( io_complete ( io_data -> data ) ) { mutex_unlock ( & io_data -> ffs_eventfd, ret ) ; ret = - EFAULT ; } io_data -> ffs_has_eventfd = <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> ffs_eventfd_has_eventfd <S2SV_ModEnd> ( io_eventfd,",0
766,<S2SV_ModStart> ; if ( IPCB ( skb ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> &&! opt,1
767,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
768,<S2SV_ModStart> struct trusted_key_payload * p ; struct trusted_key_payload * datablob ; struct trusted_key_payload * p ; <S2SV_ModEnd> if ( prep,0
769,"<S2SV_ModStart> v |= ( JAS_CAST ( uint_fast32_t, c ) <S2SV_ModEnd> << 24 )",1
770,<S2SV_ModStart> NULL ) { if ( skb -> len < ROSE_S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
771,<S2SV_ModStart> (! npages || base_gfn!= old. base_gfn,0
772,<S2SV_ModStart> ) ; } new_flags = 0 ;,0
773,"<S2SV_ModStart> = 0 ; size_t start_offset = 0 ; <S2SV_ModStart> end, end_offset, end_len <S2SV_ModEnd> ) ; return",0
774,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",1
775,"<S2SV_ModStart> } if ( data_body == NULL && in_bio == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_CONTENT ) ; goto err ; } <S2SV_ModEnd> } if (",0
776,<S2SV_ModStart> server. ds_enabled <S2SV_ModEnd> ( server.,0
777,"<S2SV_ModStart> } if ( options -> flags & ( UV_PROCESS_SETUID | UV_PROCESS_SETGID ) ) { SAVE_ERRNO ( setgroups ( 0, NULL ) ) ; } if (",1
778,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> EOPNOTSUPP ; } if ( rlen > MAX_XFER_SIZE ) { ret = - EOPNOTSUPP ; goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> rlen ) ; <S2SV_ModEnd> mutex_unlock ( & <S2SV_ModStart>, rlen, st -> data <S2SV_ModEnd> ) ; if",0
779,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
780,<S2SV_ModStart> book -> dim && i < n,1
781,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
782,<S2SV_ModStart> == - EEXIST || ret == - EOVERFLOW,1
783,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; if <S2SV_ModStart> unix_tot_inflight -- ; } fp -> f_cred -> user -> unix_inflight ++ ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
784,"<S2SV_ModStart> size_t chanmap_size = SF_MIN ( <S2SV_ModStart> sf. channels, layout_tag & 0xffff )",1
785,"<S2SV_ModStart> * s ; memcpy <S2SV_ModEnd> ( s, <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sf ->",0
786,<S2SV_ModStart> ms ) { uint32_t <S2SV_ModEnd> nestsize = ( <S2SV_ModStart> nestsize = ( uint32_t <S2SV_ModEnd> ) ms ->,1
787,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
788,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
789,<S2SV_ModStart> -> xrefs = safe_calloc ( <S2SV_ModEnd> sizeof ( xref_t,1
790,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
791,"<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ) <S2SV_ModStart> ( opt ) { atomic_sub ( <S2SV_ModEnd> opt -> tot_len <S2SV_ModStart> opt -> tot_len, & sk -> sk_omem_alloc ) ; txopt_put ( opt <S2SV_ModStart> ) ; } }",1
792,"<S2SV_ModStart>, * tmpin = NULL, * tmpout <S2SV_ModStart> = dcont ; if (! ( flags & CMS_BINARY ) && dcont ) { tmpout = tmpout ; if (! tmpout && dcont ) { if (! tmpout &&! tmpout &&! ( flags & CMS_BINARY_VERIFY, flags & CMS_TEXT ) ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_VERIFY, NULL ) ; goto err ; } if (! tmpout ) { cmsbio ( tmpout, flags & tmpout, flags & CMS_TEXT_TEXT ) ; if (! tmpout ) { cmsbio ( tmpout, flags & CMS_TEXT ) ; goto err ; } if (! tmpout ) { CMSerr ( CMS_BINARY_VERIFY, tmpout, flags & CMS_TEXT_TEXT ) ; goto err ; } else { <S2SV_ModStart> out ; } else { if (! tmpout && dcont ) { cmsbio ( dcont, tmpout ) ; goto err ; } <S2SV_ModStart> goto err ; }",0
793,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> lock_sock ( sk,0
794,<S2SV_ModStart> * sctp_register_v6_add_hash_t * sctp_mutex_lock <S2SV_ModEnd> ) ; #,0
795,<S2SV_ModStart> cs_flags ) ; hook_del_nick_can_register ( & chan_flags ) ;,0
796,<S2SV_ModStart> ) { struct in_device * idev <S2SV_ModEnd> = ( ( <S2SV_ModStart> ) -> in_dev <S2SV_ModEnd> ; struct netdev_info <S2SV_ModStart> ; struct netdev_info info ; if ( idev ->,0
797,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
798,<S2SV_ModStart> void usage_stats ( void,0
799,<S2SV_ModStart> val ) { int temp_size = malloc ( temp_size ) <S2SV_ModEnd> ; char *,0
800,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
801,<S2SV_ModStart> ; dname = safe_calloc <S2SV_ModEnd> ( str ),0
802,"<S2SV_ModStart> NULL ) { if <S2SV_ModEnd> ( errno == <S2SV_ModStart> == ENOMEM ) <S2SV_ModEnd> log_warn ( ""lldp""",0
803,<S2SV_ModStart> object + size + 1,0
804,"<S2SV_ModStart> ( interface, KSZ8851_C1_IS <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_P1SR ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> ( interface, KSZ8851_R_COOKIE <S2SV_ModEnd> ) ; }",0
805,<S2SV_ModStart> all_channels_lock ) ; put_net ( pch -> chan_net ) ; pch -> chan_net = NULL ;,1
806,"<S2SV_ModStart> btrfs_dir_item * di = NULL <S2SV_ModStart> - ENOMEM ; mutex_lock ( & path -> i_lock ) ; if ( ret < 0 ) { di = - ENOMEM ; di = btrfs_lookup_xattr_ino ( inode, name, name, - 1 ) ; di = NULL ; } ret = btrfs_lookup_ino ( trans, name, name, name, name, NULL ) ; if (! di ) ret = - ENOMEM ; di = btrfs_delete_name <S2SV_ModEnd> ( trans, <S2SV_ModStart>, path, <S2SV_ModEnd> di ) ; <S2SV_ModStart> out ; } ret = btrfs_lookup_name <S2SV_ModEnd> ( trans, <S2SV_ModStart>, NULL, <S2SV_ModEnd> ) ; if",0
807,<S2SV_ModStart> > 0xbf ) { <S2SV_ModStart> return 1 ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto err ; } <S2SV_ModStart> ) ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; },0
808,"<S2SV_ModStart> client -> proxy ) ; g_byte_array_free ( client -> auth_buffer, TRUE",1
809,<S2SV_ModStart> = x -> mbmi <S2SV_ModEnd> ; x ->,0
810,<S2SV_ModStart> ; if ( key_is_negative ( key <S2SV_ModEnd> ) ) return,1
811,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> if ( ( ( ( ip_options_len > 0 ) ) { <S2SV_ModStart> ; break ; } <S2SV_ModEnd> if ( ( ( <S2SV_ModStart> ) )!= 0 <S2SV_ModEnd> ) { <S2SV_ModStart> ; break ; } <S2SV_ModEnd> if ( ( ( <S2SV_ModStart> == IPPRINT ) ) { <S2SV_ModStart> == ( ( ( unsigned int ) <S2SV_ModStart> == 0 ) ) <S2SV_ModStart> == 0 ) ) break ; },0
812,"<S2SV_ModStart> ; if ( safe_calloc ( <S2SV_ModEnd> ( fit_name, <S2SV_ModStart> ( fit_error ) ) { <S2SV_ModStart> ) ) ; } if ( safe_calloc ( fit_error, ""\\n"" ) ) { free ( fit_error ) ; return ret ; } if (",0
813,<S2SV_ModStart> { vpn_packet_t outpkt ; if ( len > sizeof outpkt. data ) return,1
814,<S2SV_ModStart> vmx_vpid_bitmap ) ; <S2SV_ModEnd> for ( msr,0
815,"<S2SV_ModStart> = 0 ; i >= 0 && <S2SV_ModStart> out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; break ; }",0
816,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
817,<S2SV_ModStart>. rc ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
818,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
819,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
820,<S2SV_ModStart> INDENT_INCR ; } if ( tbl -> indent < 0 ) tbl -> indent = 0 ; <S2SV_ModStart> -= INDENT_INCR ; if ( offset < 0 ) offset = 0 ;,1
821,"<S2SV_ModStart> b ) { size_t ss = sst -> sst_dirlen ; size_t ss = CDF_SHORT_SEC_SIZE ( h ) ; <S2SV_ModStart> b ), ss <S2SV_ModEnd> * sst ->",0
822,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""hex_grammar.y"" { RE_AST <S2SV_ModStart> } # line 1348 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 1345 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 126 ""hex_grammar.y"" { incr_ast_levels ( ) ; <S2SV_ModStart> } # line 28 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 205 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1372 <S2SV_ModEnd> ""grammar.y"" { incr_levels ( <S2SV_ModStart> } # line 8 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 220 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 28 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 28 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 205 ""grammar.y"" { incr_ast_levels ( ) ; <S2SV_ModStart> } # line 220 <S2SV_ModEnd> ""grammar.y"" { incr_levels ( <S2SV_ModStart> } # line 1447 <S2SV_ModEnd> ""hex_grammar.y""",0
823,"<S2SV_ModStart> ; # endif memset <S2SV_ModEnd> ( mb,",0
824,<S2SV_ModStart> = 0 ; # endif,0
825,<S2SV_ModStart> ; if ( key_is_positive ( key <S2SV_ModEnd> ) ) zap,1
826,"<S2SV_ModStart> ) -> filter ; memset ( & uf, 0, sizeof ( uf ) )",1
827,"<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( pbi,",0
828,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; } exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
829,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
830,<S2SV_ModStart> - EINVAL ; if ( ret!= 0 ) return - EINVAL ;,0
831,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( cc0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorEncodeTile"", ""%s"", ""(cc0%rowsize)!=0"" ) ; return 0 ; } <S2SV_ModEnd> while ( cc",1
832,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
833,"<S2SV_ModStart> input_data, size_t input_backwards_size, size_t input_backwards_size <S2SV_ModEnd> ) { char <S2SV_ModStart> ( input_backwards_size, size_t input_backwards_size <S2SV_ModEnd> ) ; char <S2SV_ModStart> == 0 && input_backwards_size <= RE_SCAN_LIMIT && input_re_min ( input_bytes_matched ) == 0 &&! ( input_min ( input, character_bytes_matched ) ) ) { action = RE_SCAN_BACKWARDS ; break ; } <S2SV_ModEnd> } } <S2SV_null>",0
834,"<S2SV_ModStart> int block_sse = UINT_MAX <S2SV_ModEnd>, best_sse = <S2SV_ModStart>, best_rd_sse = UINT_MAX <S2SV_ModEnd>, best_sse = <S2SV_ModStart>, best_sse = UINT_MAX <S2SV_ModEnd>, best_sse = <S2SV_ModStart>, best_sse = UINT_MAX <S2SV_ModEnd> ; best_sse = <S2SV_ModStart>, best_sse = 0 <S2SV_ModEnd> ; best_sse = <S2SV_ModStart>, best_sse = INT_MAX <S2SV_ModEnd> ; break ;",0
835,"<S2SV_ModStart> svm, AC_VECTOR ) ; set_exception_intercept ( svm, DB_VECTOR",0
836,"<S2SV_ModStart> ; if ( error = 0,",0
837,"<S2SV_ModStart> sst, const cdf_directory_t * root_storage <S2SV_ModEnd> ) { cdf_summary_info_header_t <S2SV_ModStart> break ; } if ( root_storage ) { <S2SV_ModStart> = cdf_clsid_to_mime ( root_storage -> d_storage_uuid <S2SV_ModEnd>, clsid2desc ) <S2SV_ModStart> - 2 ; } <S2SV_ModStart>, count, root_storage <S2SV_ModEnd> ) ; free",1
838,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> u2SV_null> u2SV_null>,0
839,<S2SV_ModStart> -> length ) ; if ( err ) return - EFAULT,1
840,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args <S2SV_ModStart> ; vpx_codec_alg_priv_t * ) vpx_codec_err_t * ctx <S2SV_ModEnd> ; vpx_codec_alg_priv_t * <S2SV_ModStart> size_t * ) vpx_codec_err_init_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
841,<S2SV_ModStart> if ( prev && <S2SV_ModEnd> ( FRAG6_CB ( <S2SV_ModStart> ) - offset <S2SV_ModEnd> > 0 ) <S2SV_ModStart> > 0 ) goto discard_fq ; if <S2SV_ModEnd> ( next && <S2SV_ModStart> < end ) goto discard_fq ; <S2SV_ModEnd> FRAG6_CB ( skb <S2SV_ModStart> - 1 ; discard_fq : fq_kill ( fq ) ;,1
842,<S2SV_ModStart> { uint16 bitspersample = 1,0
843,"<S2SV_ModStart> * a ; int size_t pathlen ; <S2SV_ModStart> ; if ( a -> archive_set_error ) { archive_set_error ( & a -> archive, ARCHIVE_SET ) ; archive_set_error ( & a -> archive, ARCHIVE_SZERO ) ; if ( <S2SV_ModEnd> ( a -> <S2SV_ModStart> == NULL ) { archive_set_error ( & a -> archive, a -> archive, a -> archive, ARCHIVE_SZERO ) ; } else { archive_set_error ( & a -> archive, a -> archive_error ) ; } else { archive_set_error ( & a -> archive, a -> archive, & a -> archive, & a -> archive, ARCHIVE_SYSERROR ) ; } else { archive_set_error ( & a -> archive, & a -> archive_error ) ; } else if ( <S2SV_ModEnd> == NULL ) <S2SV_ModStart> ; } } } else { archive_set_error ( & a -> archive, a -> archive, a -> archive, & a -> archive, ARCHIVE_SZERO ) ;",0
844,"<S2SV_ModStart> ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL, rootfs -> path? rootfs -> mount : <S2SV_ModEnd> NULL )!=",1
845,"<S2SV_ModStart> == 0 ) { struct iinfo * bb ; udf_cache = ( inode -> i_sb ) + i_len ; if ( udf_file_entry_offset ( inode -> i_sb ) + i_len > b_len ) { return NULL ; } if ( <S2SV_ModStart> ( inode -> i_sb ) + i_len > inode -> i_sb -> i_len ) || ( i_len > b_len ) - 1 ) goto out_error ; } if ( <S2SV_ModStart> ( inode ) > b_len - 1 ) goto out_alloc ; i_offset = ( inode -> i_len - b_len - 1 ) + i_len ; i_len ; if ( inode -> i_sb -> i_len > b_len ) goto out_alloc ; if ( inode -> i_sb -> i_len > b_len - 1 ) goto out_error ; memset <S2SV_ModEnd> ( inode,",0
846,<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm,0
847,<S2SV_ModStart> dst_size ) { if (! gb_get_value ( & gb ) ) return - 1 ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> data == NULL <S2SV_ModStart> ) return - 1 <S2SV_ModEnd> ; } <S2SV_null>,0
848,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",0
849,<S2SV_ModStart> mq ) ; q -> mq = NULL ;,0
850,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
851,"<S2SV_ModStart>, prog ) { if (! strcmp ( sub, sub ) ) return 0 ; <S2SV_ModStart> g ++ ; }",0
852,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; if (! <S2SV_ModStart>, cc ) ) return 0 <S2SV_ModStart> wc ) ; return 1 ;",1
853,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
854,"<S2SV_ModStart> ; int err ; struct ip_options_rcu * inet_opt <S2SV_ModStart>. s_addr ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) { <S2SV_ModStart> ; daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",0
855,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
856,"<S2SV_ModStart> * mgr_hdl ; <S2SV_ModEnd> memset ( s_path <S2SV_ModStart> ( c_path ) <S2SV_ModEnd> ) ; switch <S2SV_ModStart> ( c_path, ""%s%s%d_C_XXXXXX"" <S2SV_ModEnd>, HSM_FM_SCK_PREFIX, <S2SV_ModStart> hdl -> instance <S2SV_ModEnd> ) ; if",1
857,<S2SV_ModStart> ) || ( pCmdData == NULL ) || ( <S2SV_ModStart> == NULL ) ),0
858,"<S2SV_ModStart> ""`%s\'"", option ) ; geometry = DestroyString ( geometry",0
859,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> lock_sock ( sk,0
860,<S2SV_ModStart>. key_data = - 1,0
861,"<S2SV_ModStart> OP_ENDCATCH ) ; emit ( J, F, OP_ENDTRY ) ;",1
862,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_row_idx <S2SV_ModStart> return ; } LIBXSMM_ASSERT ( 0!= l_row && 0!= l_column ) ;",1
863,"<S2SV_ModStart>. apdu, len <S2SV_ModEnd> ) ; if",0
864,"<S2SV_ModStart> uint8 result ; uint32 <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> ; STREAM s ; struct stream packet <S2SV_ModStart> return False ; packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> id <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",1
865,"<S2SV_ModStart> ; cleanup : if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> ; if (",1
866,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
867,<S2SV_ModStart> iSV_null> <S2SV_null> <S2SV_null>,0
868,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
869,<S2SV_ModStart> & new_map ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> lower_first ; } ret = sort_idmaps ( & new_map ) ; if ( ret < 0 ) goto out ;,1
870,<S2SV_ModStart> ; } } if ( g -> data == 0 ) return 0 ;,0
871,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> ) ; } smb_ofile_flush ( sr, <S2SV_ModEnd> sr -> fid_ofile <S2SV_ModStart> sr -> fid_ofile <S2SV_ModEnd> ) ; (",1
872,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
873,<S2SV_ModStart> -> mb_context ; memcpy <S2SV_ModEnd> ( ( pbi <S2SV_ModStart> 8 ) ; memcpy <S2SV_ModEnd> ( ( pbi,0
874,"<S2SV_ModStart> addrtype = TIPC_ADDR_ID ; memset ( & addr -> addr, 0, sizeof ( addr -> addr ) )",1
875,"<S2SV_ModStart> ( user_alloc && ( <S2SV_ModStart> PAGE_SIZE - 1 ) ) ||! access_ok ( VERIFY_WRITE, mem -> userspace_addr, mem -> memory_size",1
876,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
877,<S2SV_ModStart> } if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; } } \\\n} <S2SV_ModEnd> if ( strncasecmp,1
878,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> s ) { const char * p = NULL ; char * p = NULL ; char * buf ; int len ; <S2SV_ModStart> len ) { if (! * end ) return NULL ; <S2SV_ModEnd> * p = <S2SV_ModStart> - 1 ; } <S2SV_ModEnd> if (! <S2SV_ModStart>, s ) { return NULL ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> p ++ ; } <S2SV_ModEnd> if (! <S2SV_ModStart> == NULL ) { Py_DECREF ( buf ) ; return NULL ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
879,"<S2SV_ModStart> 0 ; } if ( record_data_size > ( record_data_size - user_sid_offset ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_RUNTIME, LIBCERROR_DOMAIN_OUT_ERROR_DOMAIN_VALUE_OUT_OF_VALUE_OUT_OF_VALUE ) ; libcerror_set ( error, LIBCERROR_DOMAIN_OUT_RUNTIME, LIBCERROR_DOMAIN_OUT_OUT_ERROR_OUT_VALUE_OUT_OF_ERROR_DOMAIN_RUNTIME, LIBCERROR_OUT_ERROR_OUT_DOMAIN_OUT_OUT_VALUE_OUT_OF_VALUE ) ; if ( data_size > ( error_offset ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_OUT_OUT_OF_ERROR_DOMAIN_OUT_OUT_OF_RUNTIME, LIBCERROR_DOMAIN_OUT_OUT_DOMAIN_RUNTIME, LIBCERROR_DOMAIN_DOMAIN_RUNTIME, LIBCERROR_DOMAIN_SET ( error, LIBC",0
880,"<S2SV_ModStart> WaveHeader WaveHeader ; int format_chunk = 0 ; <S2SV_ModStart>, format ; if ( format_chunk ++ ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",1
881,<S2SV_ModStart> ; uint16_t numChannels = 0,0
882,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr ) ;,0
883,<S2SV_ModStart> ~ SNDRV_TIMER_RUNNING ; list_del_init ( & timeri -> active_list ) ;,0
884,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> strdup ( void <S2SV_ModStart> ) ) { int <S2SV_ModEnd> char * str <S2SV_ModStart> = 0 ; int <S2SV_ModEnd> strdup ( cp <S2SV_ModStart>, st, len, <S2SV_ModEnd> ) ; if <S2SV_ModStart> 0 ] = 0 <S2SV_ModEnd> ; break ;",0
885,<S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_flags_compat &&,1
886,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
887,"<S2SV_ModStart> ; if ( strcmp ( sub_demuxer -> name, ""srt"" ) && strcmp ( sub_demuxer -> name, ""ass"" ) ) goto error ; if (",1
888,<S2SV_ModStart> ( krb5_data ) { <S2SV_ModEnd> if ( in <S2SV_ModStart> ; int retval = 0 ; if ( ret == 0 ) return NULL ; } if ( ret =,0
889,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
890,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
891,<S2SV_ModStart> dptr ++ = ROSE_CALL_REQ_ADDR_LEN_VAL <S2SV_ModEnd> ; memcpy (,1
892,<S2SV_ModStart> = new_ns ; new_ns -> mounts ++ ;,1
893,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
894,<S2SV_ModStart> ; zip_object_handlers. get_gc = php_zip_get_gc ; zip_object_handlers.,1
895,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if <S2SV_ModEnd> ( iova < <S2SV_ModStart> mem -> length - length ) return - EFAULT ; return <S2SV_ModEnd> 0 ; return,0
896,"<S2SV_ModStart> ( ndo, ""%s"", icmp6_tstr <S2SV_ModEnd> ) ) ;",0
897,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
898,<S2SV_ModStart> sent = 0 <S2SV_ModEnd> ; smb_msg.,1
899,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; if ( ref -> ref > INT_MAX / 2 ) return false ; <S2SV_ModStart> ref ++ ; return true ;,1
900,<S2SV_ModStart> fs -> clusters + <S2SV_ModEnd> 1 ) get_fat,1
901,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
902,<S2SV_ModStart> sk_nulls_node ) ; sk_nulls_node_init ( & sk -> sk_nulls_node ) ;,1
903,<S2SV_ModStart> } } } <S2SV_ModEnd> } ps_dec ->,0
904,<S2SV_ModStart> (! mm ||! mm -> env_end,1
905,"<S2SV_ModStart> inode * inode, int relocated ) { int flags = relocated? RR_RELOC_DE : 0 ; <S2SV_ModEnd> int result = <S2SV_ModStart>, inode, flags <S2SV_ModEnd> ) ; if <S2SV_ModStart>, inode, flags | RR_REGARD_XA <S2SV_ModEnd> ) ; }",1
906,<S2SV_ModStart> * inotify_new_data ( <S2SV_ModEnd> unsigned char * inotify_data <S2SV_ModStart> -> inotify_data. user = NULL <S2SV_ModEnd> -> inotify_data. user =,0
907,<S2SV_ModStart> [ p ] && in -> linesize [ p ],1
908,<S2SV_ModStart> ) ) ; if ( pcount > NULL ) {,0
909,<S2SV_ModStart> ( screen ) ; <S2SV_ModEnd> } else if,0
910,"<S2SV_ModStart> SCALAR_VALUE ) { coerce_reg_to_size ( & <S2SV_ModStart> [ value_regno ], size <S2SV_ModEnd> ) ; }",1
911,<S2SV_ModStart> char buf [ stripsize ],0
912,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
913,<S2SV_ModStart> ; if ( <S2SV_ModEnd> is_negative ) < 0,0
914,<S2SV_ModStart> goto out ; <S2SV_ModEnd> lock_sock ( sk,0
915,"<S2SV_ModStart> number_colormaps, number_planes_planes, number_planes_filled <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ; number_planes_filled =",0
916,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if (! context ) return FALSE ; <S2SV_ModStart> == 0 ) { if ( context -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModStart> i ] ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
917,<S2SV_ModStart> policy ) { if (! inode_owner_or_capable ( inode ) ) return - EACCES ;,1
918,<S2SV_ModStart> state ) ; state -> break ;,0
919,<S2SV_ModStart>. key_data = key_cmp <S2SV_ModEnd> ; if (,0
920,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
921,"<S2SV_ModStart> ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> header <S2SV_blank> to <S2SV_blank> header\\n"", __func__, pool ) ; free ( pool ) ; return false ; } <S2SV_ModEnd> cb1 = (",0
922,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
923,"<S2SV_ModStart> size ) { size_t res ; if ( check_mul_overflow ( num, size, & res ) ) abort ( ) ; void * ptr ; <S2SV_ModEnd> ptr = malloc <S2SV_ModStart> = malloc ( res <S2SV_ModEnd> ) ; if <S2SV_ModStart> '\\0', ( res <S2SV_ModEnd> ) ) ;",1
924,<S2SV_ModStart> ; task_lock ( task_context <S2SV_ModEnd> ) ; if,0
925,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int res ; if ( lookup_attr_id ( PyId <S2SV_ModEnd>, NULL, <S2SV_ModStart> ) ; return NULL ; <S2SV_ModEnd> } if (",0
926,<S2SV_ModStart> -> desc. bNumEndpoints ; <S2SV_ModEnd> err = 0,0
927,"<S2SV_ModStart> * arg, <S2SV_ModEnd> arg, struct <S2SV_ModStart> return ret ; perf_event_data ( arg <S2SV_ModEnd>, arg, <S2SV_ModStart> arg, arg <S2SV_ModEnd> ) ; return",0
928,<S2SV_ModStart> sacked_out ) ; if ( newly_acked_sacked <= 0 ) return ;,0
929,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_mode ( VP9_COMMON <S2SV_ModStart> * cm, MACROBLOCKD * xd, PREDICTION_MODE <S2SV_ModEnd> y_mode_mode_mode <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode_mode_mode_mode ( cm <S2SV_ModStart> ) ) { PREDICTION_MODE <S2SV_ModEnd> y_mode = vp9_mode",0
930,"<S2SV_ModStart> * mask, u32 name <S2SV_ModEnd> ) ; return",0
931,<S2SV_ModStart> case ctx -> cmp_length = 0 ; if ( <S2SV_ModStart> -> ctx -> ctx -> ctx. ctx -> ctx -> ctx -> ctx. <S2SV_ModEnd> )!= NULL,0
932,"<S2SV_ModStart> c -> tile_width <S2SV_ModEnd>, 16 ) <S2SV_ModStart>, 16 ) * 3",1
933,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, sig ) ) )",0
934,,1
935,"<S2SV_ModStart> dev ) ; memset ( & s, 0, sizeof ( s ) ) ;",0
936,"<S2SV_ModStart> p ) { return <S2SV_ModEnd> chdlc_print ( ndo <S2SV_ModStart>, p, h -> len <S2SV_ModEnd> ) ; }",1
937,<S2SV_ModStart> (! rc <S2SV_ModEnd> && tcon ),1
938,<S2SV_ModStart> ; if ( skb_is_err_queue ( skb ) &&,0
939,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ) ;",1
940,<S2SV_ModStart> { if (! SSL_C_EXPORT ( s -> s3 -> tmp. new_cipher ) ) { al = SSL_AD_UNEXPECTED_MESSAGE ; goto fail ; },0
941,<S2SV_ModStart> { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE ) { return SECURE_ELEMENT_ERROR_BUF_SIZE,1
942,<S2SV_ModStart> + 1 ; if ( rlen > max_settings ) return rv ;,0
943,<S2SV_ModStart> = ucounts ; new_ns -> mounts = 0 ; new_ns -> pending_mounts = 0 ;,1
944,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
945,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( x,0
946,<S2SV_ModStart>. dimensions ; unsigned int actual_size = rtype == 2? n * n ; unsigned int limit_r_begin = r -> begin < actual_size? r -> begin : actual_size ) ; unsigned int limit_read = r -> end < actual_size? r -> end : actual_size,0
947,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int timer_skb ( TIFF ) <S2SV_ModEnd> ; if (,0
948,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
949,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE vpx_write_tree_tree <S2SV_ModEnd> * w, <S2SV_ModStart> int i ; vpx_write_literal <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_tree_tree, vpx_write_tree_tree_tree, vpx_write_tree_tree_tree <S2SV_ModEnd> * w ) <S2SV_ModStart> * w ) vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> * w, vpx_write_tree, vpx_tree <S2SV_ModEnd> * w ) <S2SV_ModStart> * w ) vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> * w ) ; vpx_write_bit <S2SV_ModEnd> ( w ) ;",0
950,"<S2SV_ModStart> wbpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> * wb ; vpx_wb_write_literal <S2SV_ModEnd> ( wb ) <S2SV_ModStart> 8 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
951,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
952,"<S2SV_ModStart> ret, n ; int num_descriptors ; size_t offset = offsetof ( struct hid_descriptor, offset ) ) ; if ( num_desc -> bLength < sizeof ( struct hid_descriptor ) ) { kfree ( struct hid_descriptor ) ; return - EINVAL ; } n",0
953,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_print_len ( ndo <S2SV_ModStart> ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> len=%u"", id_len ) ) ; <S2SV_ModStart> ; } if ( <S2SV_ModEnd> ND_PRINT ( ndo <S2SV_ModStart> ndo_len ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; break ; }",0
954,<S2SV_ModStart>,0
955,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> data ) { <S2SV_ModEnd> add_preferred_base_object ( name <S2SV_ModStart> |= OBJECT_ADDED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
956,<S2SV_ModStart> ; if ( <S2SV_ModEnd>!= 0 ),0
957,<S2SV_ModStart> ) ; } usb_free_skb ( urb ) ;,0
958,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> w2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> w2SV_null> 0 ) ; tran_low_t <S2SV_ModEnd> ( xd, <S2SV_ModStart> 0 ) ; xd_low_t xd_t xd <S2SV_ModEnd> ( xd, <S2SV_ModStart>, xd, xd <S2SV_ModEnd> * xd, <S2SV_ModStart> 0 ) ; if ( x2!= 0 ) { <S2SV_ModStart> 0 ) ; } else { <S2SV_ModStart> 0 ) ; }",0
959,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> number_t ) { if ( len > ASN1_EINVAL ) goto data_length ; <S2SV_ModStart> goto data_t ; len = 0 ; len ; len = sizeof ( len - 1 ) ; if ( len > total_length_length_t ) goto data_length ; <S2SV_ModStart> ) - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> >= 0x8x7 ( len <S2SV_ModEnd> >= 0x00 ) <S2SV_ModStart> goto data_length ; <S2SV_ModEnd> if ( len,0
960,<S2SV_ModStart> ) val ; <S2SV_ModEnd> memset ( ptr,1
961,<S2SV_ModStart> mntentnt_entry * mntentries ) { return mnt -> mount ;,0
962,"<S2SV_ModStart> PHP_SHA256_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_SHA256_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_SHA1_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } while ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, ( error ) ; } return FAILURE ; } <S2SV_ModStart> PHP_CTX context ; if ( read_len > sizeof ( digest_len ) { if ( error ) { spprintf ( error ) ; } return FAILURE ; }",0
963,<S2SV_ModStart> ] <= max && value [ n ] - min < field -> maxusage <S2SV_ModStart> && field -> value [ n ] - min < field -> maxusage && field -> <S2SV_ModStart> <= max && value [ n ] - min < field -> maxusage &&,1
964,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 6 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
965,<S2SV_ModStart> if ( argReg > <S2SV_ModEnd> regsz ) { <S2SV_ModStart> regsz ) { return ;,1
966,"<S2SV_ModStart> ( req, rack_name ) ) ; rb_remove_invalid ( req, res ) ; <S2SV_ModStart> ) ) ; req_free ( req ) ;",0
967,<S2SV_ModStart> 0 ) ; args -> rmtvaluelen <S2SV_ModEnd> = args -> <S2SV_ModStart> -> valuelen ; args -> rmtvaluelen = args -> rmtvaluelen <S2SV_ModEnd> ; return 0 <S2SV_ModStart> -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; } return,0
968,<S2SV_ModStart> size = NULL ; size_t si,0
969,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> SV_null> <S2SV_null> static,0
970,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) &&! test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) &&",1
971,"<S2SV_ModStart> ) ) ; if ( LTXTQUERY_TOO_BIG ( state. num, state. sumlen ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""ltxtquery <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ) ) ;",1
972,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> off = 0 <S2SV_ModStart> ; } for ( i = 0 ; i <S2SV_null> <S2SV_null>,0
973,<S2SV_ModStart> ; if (! EXT4_SB ( inode -> i_sb ) -> s_journal <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd>! handle ),1
974,"<S2SV_ModStart> char * str ) { strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; } strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart>, ""Failed"" ) ; if (! strcmp ( str ) - 1 ) { return 0 ; } <S2SV_ModEnd> if ( str",0
975,"<S2SV_ModStart> ( f, ""PG%c%31[ <S2SV_blank> \\t]"" <S2SV_ModEnd>, temp,",0
976,"<S2SV_ModStart> += 8 ; size_t size ; size_t length ; <S2SV_ModStart> + 1 ; size = 0 ; if ( length < 8 ) { ASSERT ( strcmp ( buf, ""DEADBEEF"", & size ) == 0 ) ; ASSERT ( result == 0 ) ; length = size ; } <S2SV_ModStart> ) ; } memcpy ( result, buf + size, length <S2SV_ModEnd> ) ; if",0
977,<S2SV_ModStart> break ; } <S2SV_ModEnd> if (!,0
978,"<S2SV_ModStart> str ) { memcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; } strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart>, ""str"", len, sizeof ( str ) <S2SV_ModEnd> ) ; if",0
979,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> g. inf, * strlen ( sufx ) - 1 ) ; if ( <S2SV_ModEnd> strlen ( strlen <S2SV_ModStart> g. inf, to ) == 0 ) { sufx = strlen ( char * ) ; memcpy ( g. inf, 0, len ) ; } else sufx = strlen ( char ) ; memcpy ( to, 0, len ) ; <S2SV_ModEnd> } else sufx <S2SV_ModStart> + 1 ; <S2SV_ModEnd> } else sufx =",0
980,,1
981,<S2SV_ModStart> * output ; MagickBooleanType status ; <S2SV_ModStart> ) ; } status = MagickTrue ; <S2SV_ModStart> i ++ ) { <S2SV_ModEnd> input = fopen_utf8 <S2SV_ModStart> input ) ) ; ( void ) fclose ( output ) ;,0
982,<S2SV_ModStart> ( SvcInternal_t ) si,0
983,<S2SV_ModStart> sb ) ; ext4_get_block ( sb ) ;,0
984,"<S2SV_ModStart> passwd * pwd, const char * prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> & tmpname, ""/etc"", prefix <S2SV_ModEnd> ) ) ==",1
985,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
986,"<S2SV_ModStart> s1 ) { const char * s1, const char * s1 ) ; <S2SV_ModStart> s1 ) ; if ( strlen ( s1 ) { return len ; }",0
987,"<S2SV_ModStart> TRUE ; } Jid * my_jid = jid_create ( stanza_jid ) ; Jid * my_jid = jid_jid_jid_get_from ( stanza_jid ) ; Jid * my_jid = jid_jid_create ( stanza_jid -> barejid, jid -> barejid -> barejid -> barejid -> barejid ) ; const char * stanza",0
988,<S2SV_ModStart> = 0 ; if ( server. ptr!= NULL ) return - 1 ;,0
989,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
990,"<S2SV_ModStart> ( arg1, DEFAULT_MODE_OPTIONS * ) { <S2SV_ModEnd> if ( options <S2SV_ModStart> ( opt1, 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } else { fd_log ( LOG_MODE_INFO, ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> option <S2SV_blank> configuration"" ) ; exit ( 1 ) ; } else { fprintf ( LOG_INFO, ""Unable <S2SV_blank> use <S2SV_blank> option <S2SV_blank> %s\\n"", options -> option. s_mode ) ; break ; case CMD_SET_DEFAULT_DEFAULT_MODE_OPTION_MODE <S2SV_ModEnd> ) ; default",0
991,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; BT_DBG (,1
992,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
993,<S2SV_ModStart> ; } } if (! ND_TTEST2 ( & md -> dec_buffer ) ) { cb_write_literal <S2SV_ModEnd> ( & e ->,0
994,<S2SV_ModStart> = e_error ; if ( IMPEG2D_UNSUPPORTED_DIMENSIONS == e_error ) { ps_op -> s_video_max_video_t. u4_max_t. u4_max_size = ps_dec -> u4_t. u4_max_t. u4_max_width ; ps_dec -> u4_max_t. u4_max_t. u4_max_bytes = ps_dec -> u4_max_t. u4_t ; ps_video_dec -> u4_t. u4_max_t. u4_max_height = ps_dec -> u4_t. u4_max_t. u4_max_t ; ps_dec -> u4_reinit_error = ps_video_t. u4_max_t. u4_reinit_max_height ; ps_video_dec -> u4_t. u4_max_t. u4_max_t ; ps_dec -> u4_reinit_max_height = ps_reinit_error ; ps_dec -> u,0
995,<S2SV_ModStart> * zone ; size_t tilemap_size ; <S2SV_ModStart>. height ; tilemap_size = <S2SV_ModEnd> x_size * y_size <S2SV_ModStart> struct map_tile ) ; tilemap_size = malloc ( tilemap_size,0
996,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ; return ( 0 ) <S2SV_ModStart>, length ) ) ; ND_TCHECK ( cp [ 2 ] <S2SV_ModStart> 4 ) { ND_TCHECK2 ( cp [ len ], 4 ) ; <S2SV_ModStart> ) ; } return ( 0 ) ; trunc : return ( - 1 ) ;",1
997,<S2SV_ModStart> <S2SV_null> <S2SV_null> static void * item <S2SV_ModEnd> return 0 ;,0
998,<S2SV_ModStart>. enc = 0 <S2SV_ModEnd> ; if (,0
999,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> ( buf ) > L_BUFSIZE <S2SV_ModEnd> ) { L_BUFSIZE <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""ring=%511s"" <S2SV_ModStart> ( buf ), L_BUFSIZE <S2SV_ModEnd> + 1, <S2SV_ModStart> + 1,",0
1000,<S2SV_ModStart> if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks,1
1001,"<S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu,",1
1002,<S2SV_ModStart> ( err = 0 <S2SV_ModEnd> ; break ;,0
1003,<S2SV_ModStart> studio_profile ) { <S2SV_ModEnd> if (!,1
1004,<S2SV_ModStart> nsops < 1 || nsops > SEMOPM,1
1005,"<S2SV_ModStart> i, i, 0",0
1006,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; },1
1007,<S2SV_ModStart> ; if ( i -> parent -> parent &&,0
1008,<S2SV_ModStart> >> 2 ; if ( q + o >= e ) goto out ;,0
1009,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( bytes_matched,0
1010,"<S2SV_ModStart> len ) { assert ( len > 3 ) ; <S2SV_ModStart> case LEX_EOF : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""EOF"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_ID : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""FLO"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_ID : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""INT"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart>",0
1011,"<S2SV_ModStart> mnt_instance ) ; if ( unlikely (! list_empty ( & mnt -> mnt_mounts ) ) ) { struct mount * p, * tmp ; list_for_each_entry_safe ( p, tmp, & mnt -> mnt_mounts, mnt_child ) { umount_mnt ( p ) ; } }",1
1012,"<S2SV_ModStart> write_bit_offset, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> w ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> } else { vpx_write_literal <S2SV_ModEnd> ( w,",0
1013,,1
1014,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
1015,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> uint32_t pos ; if ( inode -> i_size > inode -> i_sb -> s_blocksize ) { err = - ENOMEM ; goto out_unlock <S2SV_ModEnd> ; } <S2SV_ModStart> return 0 ; out_unmap :,0
1016,<S2SV_ModStart> else if ( cpu_has_secondary_exec_ctrls ( ) && ( vmcs_read32 ( SECONDARY_VM_EXEC_CONTROL ) & SECONDARY_EXEC_VIRTUALIZE_X2APIC_MODE ) <S2SV_ModEnd> ) { if,1
1017,"<S2SV_ModStart> if ( ent == NULL ) { st = KRB5_KDB_NOENTRY ; <S2SV_ModEnd> goto cleanup ; <S2SV_ModStart> cleanup ; } st = populate_policy ( context, ld, ent, pol_name, * policy ) ;",1
1018,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> return value ; },0
1019,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bh_blocks2SV_null> static <S2SV_ModStart> int bh_blocks ; unsigned int bh_blocks = 0 ; unsigned int bh_blocks = 0 ; unsigned int dblk ; <S2SV_ModStart> - 1 ; dblk = 0 ; dblkfree ( dblk, dblk ) ; if ( dblk ) goto out_unmap = 0 ;",0
1020,<S2SV_ModStart> } if ( psf -> header. size > 0 &&,0
1021,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( i,1
1022,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
1023,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1024,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0644 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",0
1025,"<S2SV_ModStart> int num_items_scanned ; guint pkt_len ; int <S2SV_ModEnd> pktnum, hr <S2SV_ModStart> + 64, ""LEN=%9u"" <S2SV_ModEnd>, & pkt_len <S2SV_ModStart> FALSE ; } if ( pkt_len > WTAP_MAX_PACKET_SIZE ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup_printf ( ""toshiba: <S2SV_blank> File <S2SV_blank> has <S2SV_blank> %u"", pkt_len, & pkt_len, WTAP_MAX_PACKET_SIZE ) ; return FALSE ; }",0
1026,<S2SV_ModStart> ; int err = 0 ; msg -> msg_namelen,1
1027,"<S2SV_ModStart> ; if ( zend_hash_find <S2SV_ModEnd> ( ht,",1
1028,<S2SV_ModStart> == 0 ) return - EINVAL ;,0
1029,<S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> ; } io -> io_cleanup = 0 ;,0
1030,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { ret = - EFAULT ; } <S2SV_ModEnd> obuf = opipe",0
1031,<S2SV_ModStart> p -> tokenpos >= ( <S2SV_ModEnd> p -> tokenlen <S2SV_ModStart> p -> tokenlen - 1 ),1
1032,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> m8x16 ( vpx_reader <S2SV_ModStart> case BLOCK_16x8 : vpx_m8x8_m8_m8x8 ( vpx_m8_m8x8 ( vpx_m8_filter_m8 ( vpx_m8_filter_m8 ( vpx_m8x8 ( vpx_m8_m8x8 ( vpx_m8_m8x8 ( vpx_m8_m8_m8_m8_m8_m8 ( b16x8 ) ) ) ; return vpx_transform <S2SV_ModEnd> ( vpx_m8x8, <S2SV_ModStart> case BLOCK_16X8 : vpx_transform_m8x8 ( vpx_m8x8x8 ( vpx_m8x8_m8 ( bsize, b16x8 ) ) ; else { return vpx_m8_transform_m8 ( vpx_m8x8, BLOCK_16X8 ) ; } else { return vpx_m",0
1033,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1034,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> & 0xFFFF ; },1
1035,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
1036,"<S2SV_ModStart> ( arg, EINVAL <S2SV_ModEnd>, NULL,",0
1037,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1038,"<S2SV_ModStart> -> stratum_port ; snprintf ( address, 254 <S2SV_ModEnd>, ""%s:%s"",",1
1039,<S2SV_ModStart> ) ) { char * filename = r ; <S2SV_ModStart> == '\\0' ) { <S2SV_ModStart> ) ) ; } else { <S2SV_ModStart> return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { <S2SV_ModStart> NULL ) ; },0
1040,<S2SV_ModStart> + i ; unsigned int actual_size = r -> blocksize_1 / 2 ; unsigned int limit_r_begin = r -> begin < actual_size? r -> end : actual_size ; unsigned int limit_r_end = r -> end < actual_size? r -> end : actual_size ; <S2SV_ModStart> int n_read = limit_r_end - limit_r_begin <S2SV_ModEnd> ; int part_read,0
1041,<S2SV_ModStart> head -> iov_base ; if ( hdr > head -> iov_len ) return 0,1
1042,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
1043,"<S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if ( frame_buf -> cur_buf > 0 ) { return ERROR_WARNING ; } <S2SV_ModStart> ( out_buf, vpx_free ( input -> buf_bufs ) ; }",0
1044,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
1045,<S2SV_ModStart> ; ssize_t count ; if ( bytes == 0 || items == 0 ) return 0,1
1046,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1047,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) ret =,0
1048,<S2SV_ModStart> ; if ( addr_len < sizeof ( req ) ) return - EINVAL ; if (,0
1049,<S2SV_ModStart> ( cp + 1,0
1050,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1051,<S2SV_ModStart> 0 ) ; hrtimer_try_to_cancel <S2SV_ModEnd> ( & stime,1
1052,<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( p * low ) { <S2SV_ModStart> low ) ; },0
1053,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> r2cap_conf_req_to_mode ( & rfc -> mode, NULL <S2SV_ModEnd> ) ; struct <S2SV_ModStart> ) ; } return - EFAULT",0
1054,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_WAIT ) )",0
1055,<S2SV_ModStart> -> chunksize = UINT64_MAX <S2SV_ModEnd> ; for (,1
1056,<S2SV_ModStart> u1_first_slice_in_pic && ( ps_dec -> u1_total_mbs_coded!= 0 ),0
1057,<S2SV_ModStart> { buf = osStr <S2SV_ModEnd> ( str ),0
1058,<S2SV_ModStart> } err = crypto_rng_alg ( tfm ) <S2SV_ModEnd> -> seed (,1
1059,<S2SV_ModStart> = uid ; <S2SV_ModEnd> new -> count <S2SV_ModStart> new -> count = 0 <S2SV_ModEnd> ; spin_lock_irq ( <S2SV_ModStart> } if ( <S2SV_ModEnd> ucounts -> count <S2SV_ModStart> ucounts -> count == INT_MAX ) ucounts = NULL ; else ucounts -> count += 1 <S2SV_ModEnd> ; spin_unlock_irq (,1
1060,<S2SV_ModStart> == 0 ) goto out_put ; if ( datagrams <S2SV_ModEnd> == 0 ) <S2SV_ModStart> == 0 ) goto out_put ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1061,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1062,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; ( void ) len ;,0
1063,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { if ( <S2SV_ModStart> ) ; } if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result ) ;,1
1064,"<S2SV_ModStart> * fmode_t fmode, fmode_t fmode <S2SV_ModEnd> ) { int",0
1065,"<S2SV_ModStart> ResourceLimitError, ""MemoryAllocationFailed"" ) ;",0
1066,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1067,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1068,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> * rd_mode_stats ( <S2SV_ModStart> * sse = vp9_decode_stats ( const tran_low_t * sse, int64_t ) { const uint8_t * sse = sse ; unsigned char * sse = pd -> common ; unsigned int64_t * sse ; const int64_t * sse = sse ; int64_t * sse = sse ; unsigned int64_t ret ; if ( sse == 0 ) { unsigned int64_t ret = 0 ; if ( cpi -> cur_mode == 0 ) { if ( cpi -> cur_mode == BLOCK_SIZE out_mode == 0 ) return ; } <S2SV_ModStart> == 0 ) { <S2SV_ModEnd> * out = <S2SV_ModStart> sse ) ; if ( cpi -> cur_tx_size_size_t ) return ; } # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_bufsse > ( sse ) && cpi -> oxcf. tx_size_size_size_t ) {",0
1069,<S2SV_ModStart> ; if ( ENOMEM ) goto next <S2SV_ModEnd> ; } if,0
1070,"<S2SV_ModStart> ; if ( snpal == 0 ) ND_PRINT ( ( ndo, ""\\t <S2SV_blank> SNPA <S2SV_blank> SNPA <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> %s"", snpal, etheraddr_string ( ndo, snpal ) ) ) ; else ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> SNPA <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> %s"", snpal, snpal, etheraddr_string ( ndo, snpa ) ) ) ; if ( snpal == 0 ) ND_PRINT ( ndo, ""\\n\\t <S2SV_blank> NET <S2SV_blank> (length: <S2SV_blank> %s"", snpal ) ) ; else ND_PRINT ( ( ndo, ""\\n\\n\\t <S2SV_blank> SNPA <S2SV_blank> %s"", snpal ) ) ; break ; }",0
1071,"<S2SV_ModStart> CHAR * ptr, * ptr <S2SV_ModEnd> ) return ( <S2SV_ModStart> ; while ( * ptr ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> == '\\0' ) return ( ret <S2SV_ModEnd> ) ) return",0
1072,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> r ) { return vpx_read_tree <S2SV_ModEnd> ( r,",0
1073,<S2SV_ModStart> ; uint32_t backup_handle = 0 <S2SV_ModStart> ret == 0 ) { if ( <S2SV_ModEnd> res -> backup <S2SV_ModStart> goto out_unlock ; } else { backup_handle = req -> buffer_handle ; },1
1074,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> struct desc_struct <S2SV_ModStart> desc_entries ) { struct desc_struct * out ; <S2SV_ModStart> ) { return false <S2SV_ModEnd> ; } <S2SV_null>,0
1075,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1,",0
1076,"<S2SV_ModStart> sptr ; struct ipv6_p * np = np -> inet6_saddr ; struct <S2SV_ModStart> sctp_saddr dst_p, final_p, final_p, final ; struct <S2SV_ModStart>, final ) ; final_p = fl6_update_dst ( fl6, np -> opt, & final ) ; <S2SV_ModStart>, fl6, final_p <S2SV_ModEnd>, final_p, <S2SV_ModStart>, final ) ; final_p = fl6_update_dst ( fl6, np -> opt, & final ) ; <S2SV_ModStart>, fl6, final_p <S2SV_ModEnd>, false )",0
1077,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1078,"<S2SV_ModStart> buf + 1, buf2 <S2SV_ModEnd> ) ) {",0
1079,<S2SV_ModStart> client_conn ) ; <S2SV_ModEnd> if ( client,0
1080,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> < ie && <S2SV_ModEnd> ND_TTEST ( *,1
1081,"<S2SV_ModStart> ( interface, ESRMLS2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, KSZ8851_S2SV_null> 0 <S2SV_ModEnd> ) ; return",0
1082,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1083,<S2SV_ModStart> goto out_leaves_cluster_together ; <S2SV_ModEnd> if ( pr,0
1084,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
1085,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1086,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> i2 ] ; tran_low_t x3 = ( xd_t ) ; if ( xd == 0 ) { ND_TCHECK_16 ( xd, xd - 1 ) ; xd = ( tran_low_t ) <S2SV_ModStart> + 1 ; } <S2SV_ModEnd> x3 = ( <S2SV_ModStart> ++ ; } if ( xd > 0 ) { tran_low_t ) { tran_low_t * xd = 0 ; tran_low_t * xd = 0 ; tran_low_t * xd = 0 ; } <S2SV_ModStart> + 1 ; } }",0
1087,<S2SV_ModStart> clips_ptr ) { ret = - EINVAL ; goto out_err1 ; },0
1088,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1089,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1090,"<S2SV_ModStart> 0 ) ; int minsz = R_MIN ( len, size ) ; minsz = R_MAX ( minsz, 0 ) ; <S2SV_ModStart> ; j < minsz <S2SV_ModEnd> ; j ++ <S2SV_ModStart> ; j < minsz <S2SV_ModEnd> ; j < (",0
1091,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; int fprintf ( stderr, ""%s <S2SV_blank> in <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> %s\\n"", fh ) ; exit ( 1 ) ; <S2SV_ModStart> = 0 ; exit ( 1 ) ; <S2SV_ModStart> = 1 ; exit ( 1 ) ; <S2SV_ModStart> = 1 ; <S2SV_ModEnd> if ( out",0
1092,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; head, tail, tail, size ; head <S2SV_ModEnd> = readw ( <S2SV_ModStart> + JQS_wHead ) ; tail = readw ( chip -> DSPQ + JQS_wTSPQ + JQS_w ( size + JQS_wSize ) ) ; if ( head > size || tail > size ) goto out ; head = 0 ; tail = 0 ; if ( head > size + tail > size ) goto out ;",0
1093,<S2SV_ModStart> * opcode_desc ; if ( len < 2 ) { return NULL ; },1
1094,<S2SV_ModStart> * next ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1095,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
1096,<S2SV_ModStart> [ sizeof ( the_url <S2SV_ModEnd> ) - 1,0
1097,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1098,<S2SV_ModStart>. key_data = key_cmp <S2SV_ModEnd> ; if (,0
1099,<S2SV_ModStart> vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; vpx_codec_alg_priv_t * priv <S2SV_ModStart> ; vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; ctx -> <S2SV_ModStart> ; if ( priv <S2SV_ModEnd> == NULL ) <S2SV_ModStart> ) return priv <S2SV_ModEnd> ; ctx -> <S2SV_ModStart> -> cfg ; ctx ->,0
1100,"<S2SV_ModStart> error ) { if ( bp && ( <S2SV_ModEnd> xfs_da_shrink_inode ( args <S2SV_ModStart>, bp )!= 0 ) <S2SV_ModEnd> ) goto out",1
1101,<S2SV_ModStart> ; if ( cnt >= 0 &&,0
1102,<S2SV_ModStart> slave_active_flags ) ; mutex_lock ( & timeri -> lock ) ; <S2SV_ModStart> slave_active_flags ) ; spin_unlock ( & timeri -> lock ) ;,0
1103,<S2SV_ModStart> attrs [ TIPC_NLA_SOCK <S2SV_ModEnd> ] ; if <S2SV_ModStart> - EINVAL ; err = TIPC_NLA_SOCK_MAX ; if ( attrs [ TIPC_NLA_SOCK ] ) return - EINVAL <S2SV_ModStart> - EINVAL ; if (! sock <S2SV_ModEnd> attrs [ TIPC_NLA_SOCK <S2SV_ModStart> [ TIPC_NLA_SOCK ] ) return - EINVAL,0
1104,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ctx ) { if ( vpx_codec_err ( vpx_codec_alg_priv_t ) { if ( ctx -> fragments. fragment_s > 0 ) { return - 1 ; } <S2SV_ModStart> data ) ; } <S2SV_ModEnd> return 0 ;,0
1105,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1106,<S2SV_ModStart> ) buffer ; if ( total_len < sizeof ( * cap ) || total_len < <S2SV_ModEnd> ) break ;,0
1107,<S2SV_ModStart> task = current <S2SV_ModEnd> ; if (,1
1108,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo ->,0
1109,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd> ) ; }",0
1110,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> if ( char * ptr ) { const char * ptr = ( char * ) malloc ( ( ptr ) ) ; if (! * ptr ) return - 1 ; <S2SV_ModStart> == '\\"" ) { if (! strlen ( out, ptr ) ) return 0 ; } return 0 ;",0
1111,<S2SV_ModStart> sk_owned_by_alloc ) ; sk_put ( sk ) ;,0
1112,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
1113,<S2SV_ModStart>! saw_digit ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\r' ) { bp ++ ; <S2SV_ModStart> goto invalid ; },0
1114,"<S2SV_ModStart> ; args -> rmtvaluelen = be32_to_cpu ( name_rmt -> valuelen ) ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ( name_rmt -> <S2SV_ModEnd> valueblk ) ; <S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; return",1
1115,<S2SV_ModStart> ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ) ; },0
1116,<S2SV_ModStart> ; size_t new_length = 0,0
1117,"<S2SV_ModStart>, j ) int vdaux = verdef -> vd_aux ; if ( vdaux < 1 ) { sdb_free ( sdb_verdef ) ; goto out_error ; } vstart += vdaux <S2SV_ModEnd> ; if (",0
1118,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1119,<S2SV_ModStart> u8 label_len ; <S2SV_ModEnd> GET8 ( label_len <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ;,1
1120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( cc % <S2SV_ModStart> * stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpAcc"", ""%s"", ""cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> tmp ) ; return 1 ;",1
1121,"<S2SV_ModStart> -> vm_ops ) <S2SV_ModEnd> return do_fault ( <S2SV_ModStart>, pte, pmd, pmd, pmd, <S2SV_ModEnd> flags ) ;",0
1122,"<S2SV_ModStart> s ) { size_t len = strlen ( s ) + 1 ; <S2SV_ModStart> = pool_alloc ( len ) ; memcpy <S2SV_ModEnd> ( r, <S2SV_ModStart> r, s, len",1
1123,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1124,"<S2SV_ModStart>! new_idmap_permitted ( file,",1
1125,,0
1126,<S2SV_ModStart> p_encoder ) ; if ( p_stats -> buf_size < 0 ) return 0 ;,0
1127,,0
1128,"<S2SV_ModStart> 0 ) { if ( len < ( u_int ) advance ) goto trunc ; <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) return ; <S2SV_ModStart> case IPPROTO_ROUTING : ND_TCHECK ( * cp ) ; <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) return ; <S2SV_ModStart>, cp ) ; if ( advance < 0 ) return <S2SV_ModStart> padlen ) ; if ( advance < 0 ) return ;",1
1129,<S2SV_ModStart> ; int i ; size_t len ; <S2SV_ModStart> ; JASN2SV_null> <S2SV_null> <S2SV_null> static,0
1130,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo ->,0
1131,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1132,"<S2SV_ModStart>, sse, 0,",0
1133,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",0
1134,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args <S2SV_ModStart> ; va_list args = ( ctx -> pbi <S2SV_ModEnd>, va_list args",0
1135,"<S2SV_ModStart> ctxt ) ; if (! ( em_syscall_is_enabled ( ctxt ) ) ) return emulate_ud ( ctxt ) ; <S2SV_ModStart>, & ss ) ; if (! ( efer & EFER_SCE ) ) return emulate_ud ( ctxt",1
1136,<S2SV_ModStart> ++ ) { if ( i >= AV_LOG_ERROR ) { avctx -> log ( AVERROR_INVALIDDATA ) ; return AVERROR_INVALIDDATA ; },0
1137,"<S2SV_ModStart>, annotation, NULL,",0
1138,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mc_y_y_y_y_stride, <S2SV_ModEnd> r_avg_y_y_avg_y_y_y_y_stride, <S2SV_ModStart> ) { int motion_y_y_avg_y_stride <S2SV_ModEnd> ( c, <S2SV_ModStart> ) ) { <S2SV_ModEnd> unsigned char * <S2SV_ModStart> int i ; unsigned char * running_avg_y = running_avg_y_y_y_stride ; unsigned char * running_avg_y = ( char * running_avg_y, mc_y_avg_y_y, running_avg_avg_y, running_avg_avg_y_stride ) ; <S2SV_ModStart> } else { int motion_y_y_avg_y_stride <S2SV_ModEnd> ( c, <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> } else { <S2SV_ModEnd> } else { <S2SV_ModStart> int i ; unsigned char * running_avg_avg_y = running_avg_avg_y_y_y_y_avg_y_y",0
1139,<S2SV_ModStart> + 1 ; ND_TCHECK_32BITS ( s ) ;,0
1140,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; ret =,0
1141,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
1142,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> gp_dev_opts_opts_dev ( struct <S2SV_ModStart> common_dev ) { if (! xop -> remote_dev ) { return - EPERM ; } <S2SV_ModStart> NULL ; } <S2SV_ModEnd> xop = xop ->,0
1143,"<S2SV_ModStart> ND_TEMP_FAILURE_RETRY ( val, 0 ) ; err = - 1 ; } ret =",0
1144,<S2SV_ModStart> ; error = - EINVAL <S2SV_ModEnd> ; if (,0
1145,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1146,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1147,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc <S2SV_ModEnd> ; break ;",0
1148,"<S2SV_ModStart> image_info -> columns ; status = SetImageExtent ( image, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1149,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1150,<S2SV_ModStart> 3 * len + 8,1
1151,<S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { points [ i ]. x = <S2SV_ModStart> var ) ; } <S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { points [ i ]. y = <S2SV_ModStart> ; } } },1
1152,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1153,"<S2SV_ModStart> ; if ( tran_low_t <S2SV_ModEnd> ( CorruptImageError, <S2SV_ModStart> ; } } if (",0
1154,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",0
1155,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) ;",0
1156,"<S2SV_ModStart>. path ; return Curl_urldecode <S2SV_ModEnd> ( data, <S2SV_ModStart>, 0, & <S2SV_ModEnd> pop3c -> mailbox <S2SV_ModStart> pop3c -> mailbox, NULL, TRUE ) <S2SV_ModEnd> ; } <S2SV_null>",1
1157,<S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ;,1
1158,"<S2SV_ModStart> gb ) ; if ( s -> ref && sh -> first_slice_in_pic_flag ) { av_log ( s -> avctx, AV_LOG_ERROR, ""Two <S2SV_blank> slices <S2SV_blank> reporting <S2SV_blank> being <S2SV_blank> the <S2SV_blank> first <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> frame.\\n"" ) ; return 1 ; }",1
1159,<S2SV_ModStart> } } } <S2SV_ModEnd> } ps_dec ->,0
1160,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> return IMPEG2D_MB_TEX_DECODE_ERR ; IMPEG2D_DECODE_ERR_T ; } if ( u4_num_mbs_num_mbs ) { <S2SV_ModStart> ) ; },0
1161,<S2SV_ModStart> * cm ; # if CONFIG_VP9_HIGHBITDEPTH switch ( cm -> frame_bufs ) { case CONFIG_VP9_HIGHBITDEPTH * const cm = cm -> frame_bufs [ cm -> ref_frame_bufs * const cm -> frame_bufs [ cm -> ref_frame_bufs ] ; cm -> frame_type = cm -> frame_to_bufs [ cpi -> ref_frame ] ; } else if ( cm -> ref_frame == KEY_FRAME ) { cm -> ref_error = cm -> frame_type ; } else ( cm -> frame_type == VPX_CODEC_UNKNOWN ) ; } else { cm -> frame_bufs [ cpi -> ref_frame_buffer ] ; },0
1162,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1163,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_col ; int <S2SV_ModEnd> int mi_cols = <S2SV_ModStart> -> mbmi_ext ; if ( xd -> mbmi_ext == 0 ) { vp9_diff_log ( xd, mi_stride, mbmi -> mbmi_ext, mbmi -> mbmi_ext, mbmi_ext, xd -> mbmi_ext, plane_stride ) ; if ( xd -> mbmi_type == 0 ) return - 1 ; } <S2SV_ModStart> ) ) { if ( <S2SV_ModEnd> intra <S2SV_null> <S2SV_null>",0
1164,<S2SV_ModStart> -> mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor <S2SV_ModEnd> ; if (,1
1165,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
1166,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> fmt, 1 <S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, sizeof",1
1167,"<S2SV_ModStart> ; rowsize = TEMP_FAILURE_RETRY ( <S2SV_ModStart> row, row ), scanline ) ; if ( tif -> rowsize > ( rowsize / sizeof ( row ) ) ) { TIFFErrorExt ( tif -> tif_clientdata, ""Row"" ) ; return 0 ; }",0
1168,<S2SV_ModStart> ; i += 1 <S2SV_ModEnd> ; for (,0
1169,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1170,<S2SV_ModStart> ( upid == INT_MIN ) return - ESRCH ; if ( upid ==,1
1171,"<S2SV_ModStart> siocb -> scm, false",1
1172,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1173,"<S2SV_ModStart>, plane ) * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? 1 ) : 1 ;",0
1174,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> uint8_t * av_len ; uint8_t <S2SV_ModEnd> len ; uint32_t <S2SV_ModStart> block ) ; uint32_t <S2SV_ModEnd> length ; uint32_t <S2SV_ModStart> len ) ; if ( avp -> type == 0 ) { if ( ret == 0 ) return - 1 ; <S2SV_ModStart> -> length - 1 ; <S2SV_ModEnd> ) ; } <S2SV_ModStart> -> length - 1 <S2SV_ModEnd> ) ; if,0
1175,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; int r = 0 ; if <S2SV_ModEnd> ( lc -> <S2SV_ModStart> ( lc -> start || ti -> len!= i_size_read ( dev -> bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL, cmd ) ; return r? : __blkdev_driver_ioctl ( <S2SV_ModStart> -> bdev, <S2SV_ModEnd> dev -> mode",1
1176,<S2SV_ModStart> -> key_data ; if ( len < 0 ) return - 1 ;,0
1177,<S2SV_ModStart> ; if ( <S2SV_ModEnd> mask = name,0
1178,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
1179,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1180,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1181,"<S2SV_ModStart> 0 ) ; memset ( & sa, 0, sizeof ( struct sockaddr_t ) )",0
1182,<S2SV_ModStart> pkt_len > MAX_PACKET_LEN - 1,0
1183,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC | NTLMSSP_NEGOTIATE_SEAL <S2SV_ModStart> -> sign ) <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,1
1184,"<S2SV_ModStart>, ""STARTTLS"" ) ; mutt_socket_empty ( adata -> conn <S2SV_ModEnd> ) ; mutt_socket_empty",0
1185,<S2SV_ModStart> crypto_report_comp rp ; strncpy <S2SV_ModEnd> ( rk ->,0
1186,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
1187,<S2SV_ModStart> -> head <= 0 || ( unsigned char ) ( ( ( unsigned char ) >> FD_SIZECODE ( g ) ) ==,0
1188,<S2SV_ModStart> ( err = - 1 <S2SV_ModEnd> ) ; return,0
1189,"<S2SV_ModStart>, & rlen, 0",1
1190,"<S2SV_ModStart> ( user ) <S2SV_ModEnd> ; int ret <S2SV_ModStart> ) ) ; mutex_lock ( & stderrdata, 0, sizeof ( stderrdata ) ) ; mutex_unlock ( & user -> password ) ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1191,"<S2SV_ModStart> mntent, path, rootfs -> mount",1
1192,"<S2SV_ModStart> ( c, NAME_ASNONE <S2SV_ModEnd> ) ; if",0
1193,<S2SV_ModStart> - offset ; unsigned short prev_bi_vcnt = bio -> bi_vcnt ; <S2SV_ModStart> ) break ; if ( bio -> bi_vcnt == prev_bi_vcnt ) put_page ( pages [ j ] ) ;,1
1194,,0
1195,"<S2SV_ModStart> state. path <S2SV_ModEnd> ; char localhost <S2SV_ModStart> ""localhost"" ; } result = Curl_urldecode ( conn -> data, path, 0, & <S2SV_ModStart> smtpc -> domain, NULL, TRUE ) ; if ( result ) return result <S2SV_ModEnd> ; state (",1
1196,"<S2SV_ModStart> str ) { memcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; } strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart>, ""str"", len, sizeof ( str ) <S2SV_ModEnd> ) ; if",0
1197,<S2SV_ModStart> ( len - 1 <S2SV_ModEnd> ) ; },0
1198,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1199,<S2SV_ModStart> m_flags ) ; if ( conn -> size > INT_MAX - 1 ) return - EINVAL ;,0
1200,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1201,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1202,,1
1203,"<S2SV_ModStart> { r_cons_printf ( ""\\""k <S2SV_blank> bin/%s/%d=%s\\n"" <S2SV_ModEnd>, module,",0
1204,"<S2SV_ModStart>, rqstp, res <S2SV_ModEnd> ) ; out",1
1205,<S2SV_ModStart> mntentnt_entry * mntentries ) { return mnt -> mount ;,0
1206,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, sig ) ) )",0
1207,"<S2SV_ModStart> ) ) { * status = ""INVALID_MISMATCH"" ;",0
1208,<S2SV_ModStart> thread -> tp_value [ 0 ],0
1209,"<S2SV_ModStart> bufsize ) { char * new_buf ; size_t new_buf ; size_t new_bufsize <S2SV_ModEnd> ; JAS_DBGLOG ( <S2SV_ModStart> ; if ( bufsize < 0 ) { jas_deprecated ( ""negative <S2SV_blank> for <S2SV_blank> jas_stream_memopen"" ) ; jas_deprecated ( ""negative <S2SV_blank> for <S2SV_blank> jas_buf.\\n"" ) ; new_buf = 0 ; } <S2SV_ModEnd> if ( buf <S2SV_ModStart> = buf ; new_buf = bufsize <S2SV_ModEnd> ; if (",0
1210,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * <S2SV_ModStart> char * sig = NULL <S2SV_ModStart> char * authctxt = NULL <S2SV_ModStart> r ) ; if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> user"", __func__ ) ; goto done <S2SV_ModStart> ) ) ; goto done ; } if (! authctxt -> valid || authctxt -> valid || authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> user"", __func__ ) ; goto done ; } <S2SV_ModStart> ) ) ; free ( sig ) ;",0
1211,<S2SV_ModStart> ; uint32_t bcount ; CLEAR ( WaveHeader ),1
1212,<S2SV_ModStart> * inode = read_block_unlock <S2SV_ModEnd> ( inode ),0
1213,<S2SV_ModStart> ; if ( <S2SV_ModEnd> chr ) {,0
1214,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1215,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteOlympusEntry ) ) ;",0
1216,"<S2SV_ModStart> failed_mount3 ; } # ifdef CONFIG_EXT2_FS_XATTR sbi -> s_mb_cache = ext2_xattr_create_cache ( ) ; if (! sbi -> s_mb_cache ) { ext2_msg ( sb, KERN_ERR, ""Failed <S2SV_blank> to <S2SV_blank> create <S2SV_blank> an <S2SV_blank> mb_cache"" ) ; goto failed_mount3 ; } # endif <S2SV_ModStart> ; failed_mount3 : if ( sbi -> s_mb_cache ) ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ;",1
1217,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1218,<S2SV_ModStart> len < tcp_hdrlen || tcp_hdrlen < sizeof ( struct tcphdr ) <S2SV_ModStart> ; if ( tcp_hdrlen >= 15 * 4 ) return 0 ; if (,1
1219,<S2SV_ModStart> int i ; size_t size ; matrix = 0 ; <S2SV_ModStart> 0 ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } if,0
1220,"<S2SV_ModStart> ipv6_select_ident ( fh, rt <S2SV_ModStart> ipv6_select_ident ( fh, rt",1
1221,"<S2SV_ModStart> bh ) { <S2SV_ModEnd> int error = <S2SV_ModStart> error ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache ; <S2SV_ModStart> error ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> error ) ; error = mb2_cache_add ( bh, bh -> b_blocknr <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( error ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1222,<S2SV_ModStart> * req ; <S2SV_ModEnd> req = scsi_req_alloc <S2SV_ModStart> hba_private ) ; <S2SV_ModEnd> return req ;,1
1223,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> nip, nip <S2SV_ModStart> sizeof ( UINT32_MAX - 8 <S2SV_ModEnd> ) ; if",0
1224,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> x ) ; <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1225,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
1226,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct xfrm_dump_info <S2SV_ModStart> struct xfrm_dump_info info <S2SV_ModEnd> ; info. <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> ( void ),1
1227,<S2SV_ModStart> (! ret || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1228,"<S2SV_ModStart> dentry * upper <S2SV_ModEnd> ; int err <S2SV_ModStart> ) ; } upper = lookup_len ( upperdir -> d_len, upperdir ) ; if ( IS_ERR ( upperdir ) ) goto out_unlock ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1229,<S2SV_ModStart> ( s_ptr ) - 1,0
1230,<S2SV_ModStart> * ptrptr && <S2SV_ModEnd> nmemb && size <S2SV_ModStart> nmemb && size <S2SV_ModEnd> ) return AVERROR,1
1231,<S2SV_ModStart> ( a -> type == szMAPI_BINARY && a -> <S2SV_ModStart> else if ( a -> type == szMAPI_BINARY &&,1
1232,<S2SV_ModStart> ; if ( i -> parent -> width > i -> height ) { # ifdef CONFIG_NO_FILE_FILE_FILE_NON if ( i -> parent -> parent -> parent -> parent -> parent -> parent -> log ) if ( i -> parent -> log ) > NGI_NO_FILE_SIZE ) if ( i -> log ) { if ( i -> log ) if (! defined ( NGIFLIB_LOG_ERROR ) - 1 ) continue ; } if (,0
1233,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( const size_t * ) val ; return 0 ;,0
1234,"<S2SV_ModStart> { jas_eprintf ( ""got <S2SV_blank> box <S2SV_blank> type <S2SV_blank> %s\\n"" <S2SV_ModEnd>, box ->",1
1235,,1
1236,<S2SV_ModStart> goto out ; if ( event_count > buf ) return - EINVAL ;,0
1237,<S2SV_ModStart> ( page ) <S2SV_ModEnd> ; if (,0
1238,<S2SV_ModStart> int i ; if (! offset ) return 0,0
1239,<S2SV_ModStart> UINT32 nsc_rle_encode ( const,1
1240,"<S2SV_ModStart> ; unsigned char * data ; unsigned int ret <S2SV_ModStart> ; if ( hlen > 0 ) { flen = kmalloc ( len, GFP_KERNEL ) ; if ( ret >= 0 ) return - ENOMEM ; goto out ; } <S2SV_ModStart>, & payload, buf <S2SV_ModEnd> ) ; if",0
1241,"<S2SV_ModStart> * dllhandle ; if ( COM_CompareExtension ( name, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", name ) ; return NULL ; }",1
1242,<S2SV_ModStart> * tmp ; <S2SV_ModEnd> } else {,0
1243,<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> ++ ; } \\\n} <S2SV_ModEnd> typedef struct pc,0
1244,"<S2SV_ModStart>, annotation, NULL,",0
1245,<S2SV_ModStart> ; g -> header.,0
1246,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int e ) { char * e = NULL ; char * strtol ( char * ) <S2SV_ModEnd> if ( * <S2SV_ModStart> 1 ) { if (! * e ) { char * err = NULL ; return NULL ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> * portno = strtol ( e, & e ) <S2SV_ModEnd> if ( get_err <S2SV_ModStart> } } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <SV_null> <S2SV_null>",0
1247,"<S2SV_ModStart> int i ; memcpy ( 0, 0, sizeof ( qpc ) ) ;",0
1248,"<S2SV_ModStart> src ) { memcpy <S2SV_ModEnd> ( src, <S2SV_ModStart> ; } } memcpy <S2SV_ModEnd> ( src ->",0
1249,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHWELCOME ; }",1
1250,<S2SV_ModStart> == * ptr && ptr [ 1 ],1
1251,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> int mi_cols ( <S2SV_ModStart> mi_col ) { VP9_COMMON * const xd = & td -> mi_row, mi_row, mi_col ) ; MACROBLOCK * const xd = & cpi -> mi_row ; MACROBLOCK * const xd = & x -> mi_row ; MACROBLOCK * const xd = & xd -> mi_row * xd ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> mi_row, mi_row, xd -> mbmi_row <S2SV_ModEnd>, mi_row, <S2SV_ModStart> mi -> mbmi_col ) ; memset <S2SV_ModEnd> ( x ->",0
1252,"<S2SV_ModStart> * obj_tptr ; u_int <S2SV_ModEnd> tlen ; u_int <S2SV_ModStart> ) ) ; if ( len < sizeof ( struct olen ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; }",0
1253,<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> int mi_counts [,0
1254,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1255,<S2SV_ModStart> skb ) ; kfree_skb ( skb ) ;,0
1256,<S2SV_ModStart> sta -> lock ) ; spin_lock_init ( & sta -> ps_lock,1
1257,<S2SV_ModStart> tp_event ) && perf_paranoid_tracepoint_raw <S2SV_ModEnd> ( ) &&,1
1258,<S2SV_ModStart> * sctp_register_v6_add_hash_t * sctp_mutex_lock <S2SV_ModEnd> ) ; #,0
1259,"<S2SV_ModStart>, 0 ) ; if (! data_interface ||! control_interface ) return - ENODEV",1
1260,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1261,"<S2SV_ModStart> secm_dir, NULL <S2SV_ModEnd> ) ; }",0
1262,"<S2SV_ModStart> * head ; <S2SV_ModEnd> newsk -> sk_sndbuf <S2SV_ModStart> -> sk_rcvbuf ; sctp_copy_descendant <S2SV_ModEnd> ( newsk,",1
1263,"<S2SV_ModStart> int fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> dev, 0 ) <S2SV_ModStart> ; fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ) ; fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1264,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return sel ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! get_desc ( & desc, sel ) <S2SV_ModEnd> ) return - <S2SV_ModStart>! ( desc. <S2SV_ModEnd> type & BIT <S2SV_ModStart> ( ( desc. <S2SV_ModEnd> l << 1 <S2SV_ModStart> ) | desc. <S2SV_ModEnd> d ) {",1
1265,<S2SV_ModStart> m ) { vpx_free_buffer <S2SV_ModEnd> ( & ctx,0
1266,"<S2SV_ModStart> 1 ) { vpx_writer <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf_horizontal_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> } else { vpx_lpf_horizontal_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf_horizontal_8x8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf_horizontal_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf_horizontal_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> } else { vpx_lpf_horizontal_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; }",0
1267,<S2SV_ModStart> return ret ; fsnotify_put_group ( group ) ;,1
1268,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> ctx ) code",0
1269,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> = S64_MAX ; <S2SV_ModEnd> if ( src_known,0
1270,<S2SV_ModStart> = DirectClass ; if ( image == ( image ) ) NULL,0
1271,<S2SV_ModStart> ; while ( ps_stream -> u4_offset < ps_stream -> u4_max_offset,0
1272,"<S2SV_ModStart>, sizeof ( s )",0
1273,<S2SV_ModStart> ; if ( mono_type == NULL ) { release_method_invalid = ( MonoObject * ) ; } if (,0
1274,"<S2SV_ModStart> count ) { size_t <S2SV_ModEnd> len ; int <S2SV_ModStart> ( buf, count <S2SV_ModEnd>, count ) <S2SV_ModStart> return - EINVAL ; }",0
1275,<S2SV_ModStart> input -> inputNr + 1,0
1276,"<S2SV_ModStart> } if ( le32_to_cpu ( raw_super -> segment_count ) > F2FS_MAX_SEGMENT ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> segment <S2SV_blank> count <S2SV_blank> (%u)"", le32_to_cpu ( raw_super -> segment_count ) ) ; return 1 ; } if (",1
1277,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> is_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> name ) { const char * name = * name ; if ( * name == '\\0' || * name == '\\0' || * name == '\\0' || * name [ len ] == '\\0' || * name [ length ] == '\\0' || * name == '\\0' && * name [ len ] == '\\0' && * name [ len ] == '\\0' &&! ( * name ) ) ) return - 1 ; if (! is_path && name [ len ] == '\\0' && name [ len ] == '\\' || ( name [ 1 ] == '\\' ||! is_path && name [ len ] == '\\0' && * name [ 1 ] == '\\0' ||! is_path && name [ len ] == ':' ) &&! is_path ( name [ 1 ] == '\\' ||! name [ len ] == ',0
1278,,0
1279,<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart>! opt ) { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) ; txopt_put ( opt_to_free ) ;,1
1280,<S2SV_ModStart> if ( opt_len >= 0 <S2SV_ModEnd> ) goto out,0
1281,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1282,"<S2SV_ModStart> rtm_tags ) ; memset ( & rtm, 0, sizeof ( rt ) ) ;",0
1283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1284,<S2SV_ModStart> 0 ) { if ( out_readonly == 0 ) return 0 ;,0
1285,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
1286,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; } tp -> copied_seq = seq ;,1
1287,<S2SV_ModStart> ; if ( key_data. key_size!= NULL ) { krb5_data. key_data = - ENOMEM ; goto err ; } if ( key_data == NULL ) { err = - ENOMEM ; goto err ; } <S2SV_ModStart> key_data ) ; kfree ( key_data ) ;,0
1288,<S2SV_ModStart> * value ) { <S2SV_ModEnd> return 0 ;,0
1289,<S2SV_ModStart> 0 ) ; sqlite3_int64 nr = 0 ;,0
1290,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( inode, inode )",0
1291,"<S2SV_ModStart> expr_ty returns, string type_comment, <S2SV_ModStart> returns = returns ; p -> v. type_comment = type_comment",0
1292,"<S2SV_ModStart> * i, <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ;",0
1293,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
1294,"<S2SV_ModStart> ) { case AC_VECTOR : kvm_queue_exception_e ( vcpu, AC_VECTOR, error_code ) ; return 1 ; case",1
1295,<S2SV_ModStart> ) ; } if (! ND_TCHECK_16BITS_ORAL_ENTRY ) { return 0 ; },0
1296,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1297,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( p,0
1298,<S2SV_ModStart> < 0 ) { ret = chg ; goto out_err ; } <S2SV_ModEnd> if ( hugepage_subpool_get_pages <S2SV_ModStart> chg ) ) { ret = <S2SV_ModEnd> - ENOSPC ; <S2SV_ModStart> - ENOSPC ; goto out_err ; } <S2SV_ModStart> chg ) ; goto out_err <S2SV_ModEnd> ; } if <S2SV_ModStart> return 0 ; out_err : resv_map_put ( vma ) ; return ret ;,1
1299,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> np -> t <S2SV_ModStart> np -> opt. <S2SV_ModStart> ) ; struct ipv6_rcu16_sub ( skb ) ; <S2SV_ModStart> & fl6, rcu_dereference <S2SV_ModEnd> ; struct <S2SV_ModStart> ) ; } <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart>, & final )",0
1300,<S2SV_ModStart> = EINVAL ; if ( s -> d_stack_depth > FILESYSTEM_MAX_STACK_DEPTH ) { rc = - EINVAL ; goto out_free ; },0
1301,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1302,<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ;,0
1303,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1304,"<S2SV_ModStart> ret, n_new_keys <S2SV_ModEnd>, kdb ->",0
1305,"<S2SV_ModStart> * m, result = RLC_ERR <S2SV_ModEnd> ; bn_t t <S2SV_ModStart> ; bn_len = RLC_OK <S2SV_ModEnd> ; bn_mod ( <S2SV_ModStart> m ) ; bn_dig ( m, m_len ) ; <S2SV_ModStart> ; result = RLC_OK <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( m_len < 0 ) { bn_mod_id ( m, m, m_len ) ; bn_dig ( m, m_len ) ; result = RLC_OK ; } bn_mod ( m, m, m_len * m ) ; bn_add ( m, m_len * m ) ; bn_dig ( m ) ; bn_dig ( m, m_dig ( m, m, m_len ) ; result = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; } } <S2SV_ModEnd> if ( result",0
1306,"<S2SV_ModStart> -> length, 0,",1
1307,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1308,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1309,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1310,"<S2SV_ModStart> * cm, FRAME_COUN * counts <S2SV_ModEnd> ) { int",0
1311,"<S2SV_ModStart> { token ++ ; } if ( operand >= MAX_OPERANDS ) { eprintf ( ""Too <S2SV_blank> many <S2SV_blank> operands\\n"" ) ; return false",1
1312,"<S2SV_ModStart> * cpi, MACROBLOCK * const x <S2SV_ModEnd>, int mi_row <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart>, mi_cols ) ; memset <S2SV_ModEnd> ( x ->",0
1313,<S2SV_ModStart> ; dname = safe_calloc <S2SV_ModEnd> ( str ),0
1314,<S2SV_ModStart> ) ) ; if ( ret!= NULL ) return ;,0
1315,"<S2SV_ModStart> number_colormaps, number_planes, number_planes_filled <S2SV_ModStart> -> rows ; number_planes_filled = ( number_planes + 1 == 0 )? number_planes : number_planes + 1 ; <S2SV_ModStart> ( number_planes_filled <S2SV_ModEnd> )!= ( <S2SV_ModStart> ( number_planes_filled <S2SV_ModEnd> )!= ( <S2SV_ModStart> ( number_planes_filled <S2SV_ModEnd> ) ) ThrowReaderException <S2SV_ModStart> ( number_planes_filled <S2SV_ModEnd> )!= ( number_planes_filled <S2SV_ModStart> ( number_planes_filled, number_planes_filled <S2SV_ModEnd> )!= 0",0
1316,<S2SV_ModStart> ctl_files_rwlock ) ; mutex_init ( & card -> user_ctl_lock ) ;,1
1317,"<S2SV_ModStart> ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> out"" ) ; return 0 ; } <S2SV_ModEnd> padlen <S2SV_null> <S2SV_null> <S2SV_null>",0
1318,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1319,<S2SV_ModStart> ; ps_dec -> u2_cur_slice_num = 0 ; ps_dec ->,0
1320,<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },1
1321,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> np -> t <S2SV_ModStart> np -> opt. <S2SV_ModStart> ) ; struct ipv6_rcu16_sub ( skb ) ; <S2SV_ModStart> & fl6, rcu_dereference <S2SV_ModEnd> ; struct <S2SV_ModStart> ) ; } <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart>, & final )",0
1322,<S2SV_ModStart> ( args ) ; ret = - EINVAL ; goto out <S2SV_ModEnd> ; } if,0
1323,"<S2SV_ModStart> int mptctl_getioc ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_do_device * ioc, <S2SV_ModEnd> * mptctl ; <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
1324,"<S2SV_ModStart> 1 ) { luaL_checkstack <S2SV_ModEnd> ( L,",0
1325,"<S2SV_ModStart> char * path, const char * rootfs <S2SV_ModStart> mntdata, optional, rootfs",1
1326,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1327,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_log ( struct <S2SV_ModStart> * buf ; size_t buf ; size_t len ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart>, 0, buf <S2SV_ModEnd>, 1, <S2SV_ModStart> len ) ; kfree ( buf ) ;",0
1328,"<S2SV_ModStart> | O_NOCTTY, ( mode == 0 || mode == MODE_INVALID )? 0644 : mode <S2SV_ModEnd> ) ; if",1
1329,<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; line,0
1330,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ) ; u64 irq_time ; if ( rq -> skip_clock_update ) return <S2SV_ModEnd> ; } <S2SV_null>,0
1331,<S2SV_ModStart> ++ ) { if ( length < sizeof ( image ) ) return NULL ;,0
1332,<S2SV_ModStart> ; int err = - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; } if ( argvname ) {,0
1333,<S2SV_ModStart> { struct blkif_response * <S2SV_ModStart> int status ; <S2SV_ModEnd> spin_lock_irqsave ( & <S2SV_ModStart> case BLKIF_PROTOCOL_32 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart>. rsp_prod_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_32 : resp -> rsp_prod_pvt = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> ) ; break <S2SV_ModEnd> ; } resp,0
1334,<S2SV_ModStart> ; if ( <S2SV_ModEnd> char * mask,0
1335,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( size, buf_size, 0 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( buf_size, 8 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; exif ( en -> log, EXIF_LOG_CORRUPT_DATA, ""ExifMnoteData"", ""Short"" ) ; return 0 ; } if (",0
1336,"<S2SV_ModStart>!= 0 ) { char * tstrdup [ 0 ] ; <S2SV_ModStart> ( sname, ""%s"", tstr ) ; <S2SV_ModEnd> goto outfilename ; <S2SV_ModStart> ( pname, ""%s"", tstr ) ; <S2SV_ModEnd> if ( pname <S2SV_ModStart> ) ) { if (! <S2SV_ModStart> ( s ) || ( psfname [ 0 ] <S2SV_ModEnd> ) ) {",0
1337,<S2SV_ModStart> ndo -> ndo_snapend ; ND_TCHECK_16BITS ( & ip -> ip_len ),1
1338,<S2SV_ModStart> dentry * dir <S2SV_ModEnd> ; int dir_has_key <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ),1
1339,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int lsm_options_get_connector_options ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> const char * ) { const <S2SV_ModEnd> ctl_lock ( & <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1340,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_WARN ) ; return ARCHIVE_WARN ; } <S2SV_ModEnd> } if (",0
1341,"<S2SV_ModStart> parent ) ; if ( ( i -> parent -> width > i -> width ) || ( i -> width > i -> parent -> width ) ) { # if! defined ( NGIFLIB_NO_FILE ) if ( NGIFLIB_NO_FILE ) if ( i -> log ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> log, ""*** <S2SV_blank> Adjusting <S2SV_blank> Adjusting <S2SV_blank> position\\n"" ) ; # if! defined ( NGIFLIB_NO_FILE ) ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> log -> log, ""*** <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Adjusting <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Adjusting <S2SV_blank> position\\n"" ) ; # endif # endif # endif if! defined ( NGIFLIB_NO_FILE ) ) { # if defined ( NGIFLIB_NO_FILE ) if! defined ( NGIFLIB_FILE ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> log -> log -> log_FILE ) if ( i -> log -> log, ""*** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> Adjusting",0
1342,<S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ),1
1343,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
1344,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> break ; } if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",0
1345,<S2SV_ModStart> void ) { recovery_started = false ;,0
1346,"<S2SV_ModStart> ( interface, ENC624J6001 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600ReadReg ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600WriteReg ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600WriteReg ( interface",0
1347,"<S2SV_ModStart> image_info ) ; status = SetImageExtent ( image, image, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1348,"<S2SV_ModStart> error ; } memset ( newserv, 0, sizeof ( struct service ) ) ;",1
1349,"<S2SV_ModStart> ) { WORD32 i, ps_dec -> ps_dpb_cur_slice_idcpy <S2SV_ModEnd>, ps_dec -> <S2SV_ModStart> ; WORD32 i1_MAX ; ps_dec ->",0
1350,<S2SV_ModStart> ) -> tp_value [ 0 ],1
1351,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ;",1
1352,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> child_alloc ( char <S2SV_ModStart> childObject * ptr, 1 ) <S2SV_ModStart> = child ; if ( p -> child == 0 ) { if ( p ) cJSON * ptr = ( p, 1 ) ; if (! ( p ) ) return 0 ; <S2SV_ModStart> = 1 ; i = ( char * ) cJSON * ptr ; p = ( char * ) cJSON_malloc ( p ) ; if (! ( p ) cJSON_malloc ( p ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> + 1 ; if (! ( p ) ) return 0 ; * ptr = ensure ( p, 1 ) ; if ( p ) cJSON_malloc ( out, 1 ) ; p -> child = ensure ( p, 1 ) ; if ( p ) strcpy ( p, 1 ) <S2SV_ModEnd> ) { <S2SV_ModStart>!= child ) ; if ( p ) { out = ensure ( p, 1 ) ; * ptr ++ ; } else { if ( p ) strcpy ( p ) ; * ptr = ensure ( p, 1 ) ; * ptr = ensure ( p ) ; * ptr ++ ; } ptr ++ = ensure ( p ) ; p",0
1353,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_print_len ( ndo <S2SV_ModStart> ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> len=%u"", id_len ) ) ; <S2SV_ModStart> ; } if ( <S2SV_ModEnd> ND_PRINT ( ndo <S2SV_ModStart> ndo_len ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; break ; }",0
1354,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
1355,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = other ; unix_peer_wakeup_disconnect_wakeup ( sk, timeo ) ; <S2SV_ModStart> & unix_dgram_peer_wake_disconnect ) ; else if ( unlikely (! task ) ) { error = - EINVAL ; goto done ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!",0
1356,<S2SV_ModStart> 4 ] ; unsigned int <S2SV_ModEnd> value = 0 <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> value & 0xffff <S2SV_ModEnd> ; value |= <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> value & 0xffff <S2SV_ModEnd> ; value |= (,0
1357,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> m"", <S2SV_ModStart> y3 ) ; sendClean ( outputbuffer ) ;",0
1358,<S2SV_ModStart> skb ) ; kfree_skb ( skb ) ;,0
1359,<S2SV_ModStart> void exit_io_context ( struct task_context * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; task_lock ( task <S2SV_ModEnd> ) ; task <S2SV_ModStart> ; task_unlock ( task <S2SV_ModEnd> ) ; task,0
1360,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; ret =,0
1361,"<S2SV_ModStart> ; size_t ret = 0,",0
1362,"<S2SV_ModStart> ) { int ret = pci_read_config_word <S2SV_ModEnd> ( dev, <S2SV_ModStart> offset, value ) ; const struct pci_cmd_info * cmd = data ; * value |= PCI_COMMAND_GUEST ; * value |= PCI_GUEST ; * value & ~ PCI_COMMAND_GUEST ; <S2SV_ModEnd> return ret ;",0
1363,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ( frame_parallel_decode, vpx_codec_alg_priv_t * ) ctx <S2SV_ModEnd> ; va_list args",0
1364,<S2SV_ModStart> ] ) ; free_uid ( fpl -> user ) ;,1
1365,"<S2SV_ModStart> ( ctx, cpu <S2SV_ModEnd> ) ; }",0
1366,"<S2SV_ModStart> -> dwc ; dwc3_gadget_del_and_unmap_request ( dep, req, status <S2SV_ModEnd> ) ; spin_unlock <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1367,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""grammar.y"" { int <S2SV_ModStart> : # line 28 <S2SV_ModEnd> ""hex_grammar.y"" { type <S2SV_ModStart> } # line 28 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 8 <S2SV_ModEnd> ""grammar.y"" { <S2SV_ModStart> } # line 28 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> : # line ) ; <S2SV_ModStart> } # line 28 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 28 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 945 <S2SV_ModEnd> ""grammar.y""hex_grammar.y"" { ( <S2SV_ModStart> } # line 8 <S2SV_ModEnd> ""grammar.y""hex_grammar.y"" { ( <S2SV_ModStart> } # line 28 <S2SV_ModEnd> ""grammar.y"" break ; <S2SV_ModStart> : # line 28 <S2SV_ModEnd> ""grammar.y""hex_grammar.y"" { ( <S2SV_ModStart> } # line 28 <S2SV_ModEnd> ""grammar.y"" break ; <S2SV_ModStart> : # line ) ; <S2SV_ModStart> : # line 2847 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> ( yyvsp [ ( 1 ) ]. String ) - ( ( 1 ) - ( 1 ) ) ]. String ) ) ; type = NULL ;",0
1368,"<S2SV_ModStart> sas_revalidate_domain, [ <S2SV_ModEnd> DISCE_SUSPEND ] = <S2SV_ModStart> ] = sas_resume_devices <S2SV_ModEnd>, } ;",1
1369,"<S2SV_ModStart>, int no_quick, flags <S2SV_ModEnd> ) { if",0
1370,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } if,0
1371,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1372,<S2SV_ModStart> sk -> sk_family <S2SV_ModEnd> ; struct sk_buff <S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( flags <S2SV_ModStart> AF_INET ) { struct sockaddr_in * <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ; <S2SV_ModStart> skb ) ; <S2SV_ModEnd> struct sockaddr_in6 * <S2SV_ModStart> struct sockaddr_in6 * sin6 = ( struct sockaddr_in6 * <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
1373,<S2SV_ModStart> = fblk ; mutex_unlocked_mutex ( & EXT4_GET_BLOCKS_SIZE ) ; if (! ( inode_mutex ) ) { ret = - EINVAL ; goto out_mutex ; } if ( inode_mutex ) { ret = - EXT4_GET_BLOCKS_SIZE ; goto out_mutex ; } if ( inode_mutex ) { ret = - EINVAL ; goto out_mutex ; } if ( inode_mutex ) { ret = - EINVAL ; goto out_mutex ; } if ( inode_mutex ) { ret = - EINVAL ; goto out_mutex ; } if ( inode_mutex ) { ret = - EINVAL ; goto out_unlocked_mutex ; } ret = round_down ( & EXT4_GET_BLOCKS_SIZE ) ; if ( offset + len > inode_mutex ) { ret = - blkbits ; out_mutex_unlocked_unlocked_newsize ( & EXT4_GET_GET_BLOCKS_BLOCKS_KEEP_SIZE ) ;,0
1374,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1375,<S2SV_ModStart> return map ; map =,1
1376,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> p ) { <S2SV_ModStart> = ( int <S2SV_ModEnd> cpi ; <S2SV_ModStart> == '\\\\' ) { if ( * cp == '\\0' ) { if ( * cp == '\\\\' || tp == '\\\\' ) { ctx -> cp ++ ; } <S2SV_ModEnd> if ( ctx <S2SV_ModStart> == '\\\\' ) return 0 ; } <S2SV_ModEnd> if ( * <S2SV_ModStart>!= '\\0' ) { if ( isdigit ( ctx )!= '\\\\' || ( * cp == '\\0' ) { cval [ 1 ] = '\\0' ; } else { ctx -> pw [ 1 ] = 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> } else { ctx -> cp [ 1 ] = '\\0' ; } <S2SV_ModEnd> if (! <S2SV_ModStart> } else { ctx -> p ++ ; } <S2SV_ModEnd> if ( ctx <S2SV_ModStart> ( dp ) ) { ctx = '\\0' ; } <S2SV_ModEnd> if (! <S2SV_ModStart> == '\\0' ) ) { if ( i == '\\0' ) { ctx -> tp [ 1 ] = '\\0' ; } <S2SV_ModEnd> == '\\0' ; <S2SV_ModStart>,0
1377,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1378,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_left < 4,1
1379,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int64 ) { if ( pix2SV_null> < 0 ) { l_int ( pix, GFP_KERNEL ) ; * pix = 0 ; for ( pix = 0 ; i < 0 ; i ++ ) * pix = 0 ; pix = 0 ; pix ( pix, l ) ; pix ( pix, 0, l ) ; pixR ( pix, l ) ; if ( <S2SV_ModStart>, 3 )!= 0 <S2SV_ModEnd> ) return ( <S2SV_ModStart>, 3 ) ; } if ( pixRasterop ( pix, 3 ) < 0 ) { if ( pixR_BINVAL ) { <S2SV_ModStart> NULL ; } } }",0
1380,<S2SV_ModStart> { int i ; int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( u ) ; int <S2SV_ModEnd> vbits = BN_num_bits,0
1381,<S2SV_ModStart> in_mv. stride <S2SV_ModEnd> ) { if,0
1382,<S2SV_ModStart> crypto_report_comp rp ; strncpy <S2SV_ModEnd> ( rk ->,0
1383,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1384,"<S2SV_ModStart>, nbits ; if ( msg -> cursize > msg -> cursize + 1 ) { return 0 ; } <S2SV_ModStart> + 1 ; if ( msg -> cursize > msg -> cursize ) { msg -> readcount = msg -> cursize + ( msg -> cursize + 1 ) ; return 0 ; } <S2SV_ModStart> ) ) { if ( msg -> cursize + 1 ) { msg -> cursize + 1 ; return 0 ; }",0
1385,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
1386,<S2SV_ModStart> ; out1 : cancel_work_sync ( & dev -> kevent ) ; del_timer_sync ( & dev -> delay ) ;,1
1387,<S2SV_ModStart> * buffer ; size_t <S2SV_ModEnd> len = 0,0
1388,"<S2SV_ModStart>, arg ), NULL <S2SV_ModEnd> ) ; if",0
1389,<S2SV_ModStart> ; if ( plen < 0 ) return - EINVAL ;,0
1390,"<S2SV_ModStart> acl ) { struct iattr iattr ; retval = posix_acl_update_mode ( inode, & iattr. ia_mode, & acl ) ; if ( retval <S2SV_ModEnd> ) goto err_out <S2SV_ModStart> goto err_out ; if (! acl ) { value = NULL ; size = 0 ; } <S2SV_ModEnd> iattr. ia_valid <S2SV_ModStart> iattr ) ; <S2SV_ModEnd> } break ;",1
1391,<S2SV_ModStart> header. types_size <S2SV_ModEnd> ) { continue,1
1392,<S2SV_ModStart> : case NPPVformValue : case NPPVpluginUrlRequestsDisplayedBool : case NPPVpluginWantsAllNetworkStreams : case NPPVpluginCancelSrcStreams : case NPPVSupportsAdvancedKeyHandling : case NPPVpluginCancelSrcStream : case NPPVSupportsAdvancedKeyHandling :,0
1393,<S2SV_ModStart> in ) { int nlen = 0 ; <S2SV_ModStart> out ) { <S2SV_ModEnd> struct olen * <S2SV_ModStart> out ; } <S2SV_ModEnd> memcpy ( o <S2SV_ModStart> ) ) ; size_t,0
1394,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> s ) { return FALSE <S2SV_ModEnd> ; } <S2SV_null>,0
1395,"<S2SV_ModStart> int i ; const VP9EncoderConfig <S2SV_ModEnd> * oxcf = <S2SV_ModStart>, cpi -> oxcf. bit_depth <S2SV_ModEnd> ) { const <S2SV_ModStart> i ) { <S2SV_ModEnd> if ( cpi <S2SV_ModStart> -> bit_depth ; }",0
1396,"<S2SV_ModStart> ( interface, EINVAL ) ; } else {",0
1397,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1398,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ND_TTEST ( *,0
1399,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> data ) ;",1
1400,<S2SV_ModStart> val ) ; <S2SV_ModEnd> return ret ;,0
1401,"<S2SV_ModStart> ; i += 1 ; if ( i < NCH ( i ) && TYPE ( CHILD ( i, i ) ) == COMMA ) i += 1 <S2SV_ModEnd> ; i += <S2SV_ModStart> ; i += 1 ; if ( i < NCH ( i ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i += 1 ; if ( i < NCH ( i ) && TYPE ( CHILD ( n, i ) ) ) i += 1 ; i += 1 ; if ( i < NCH ( i ) && TYPE ( CHILD ( n, i ) ) i += 1 ; i += 1 ; if ( i < NCH ( CHILD ( n, i ) ) && TYPE ( CHILD ( n, i ) ) i += 1 ; if ( i < NCH ( i ) && TYPE ( CHILD ( n, i ) ) i += 1 ; i += 1 ; if ( i < NCH ( i ) && TYPE_COMMENT ( CHILD ( n, i, i ) ) i += 1 ; i < i ) i ++ ) { i += i ; i += i ; i -> type_comment = NEW_COMMENT ( i, i, i ) ; i += 1 ; if",0
1402,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int mi_cols ( <S2SV_ModStart> VP9_HIGHBITDEPTH ) { memset <S2SV_ModEnd> ( xd, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd, <S2SV_ModStart> 16 ] ; memset <S2SV_ModEnd> ( xd,",0
1403,<S2SV_ModStart> ; } else {,0
1404,"<S2SV_ModStart> char * str ) { strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; } strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart>, ""Failed"" ) ; if (! strcmp ( str ) - 1 ) { return 0 ; } <S2SV_ModEnd> if ( str",0
1405,"<S2SV_ModStart> * jas_iccprof_createfrombuf ( jas_uchar <S2SV_ModEnd> * buf,",1
1406,<S2SV_ModStart> i_data ) ; spin_lock_irq ( & ei -> i_lock ) ;,0
1407,<S2SV_ModStart> ; if (! ret &&,0
1408,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> ; return handle <S2SV_ModEnd> ; } <S2SV_null>",1
1409,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm, struct vpx_wb_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> } else { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> i ] ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> i ] ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
1410,<S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; },1
1411,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { p = osStrchr <S2SV_ModEnd> ( p +,0
1412,"<S2SV_ModStart>, i, i,",0
1413,<S2SV_ModStart> = 1 ; memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( xd ->,0
1414,"<S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_RESTAT ) ; struct enc624J600_t status ; <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_RST ) ; enc624J600_r = 0 <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_RSPEED <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & ENC624J600_RST <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_RSPEED <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & ENC624J600_RNOCTXST <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, ENC624J600_EIR ) ; }",0
1415,<S2SV_ModStart> ] == 0x01 && i < gemsafe_cert_max,1
1416,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1417,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE rb_schema ) { VALUE errors ; VALUE errors ; VALUE parse_options ; xmlRelaxNGParserCtxtPtr schema ; VALUE rb_schema ; VALUE rb_schema ; int scanned_args = 0 ; if ( scanned_args == 0 ) { parse_options = rb_get ( rb_schema, ""11"", parse_options ) ; xmlRelaxNGParserCtxt ( rb_intern ( ""ParseOptions"" ) ) ; xmlRelaxNGParserCtxt ( rb_intern ( content ), rb_schema, rb_intern ( ""ParseOptions"" ) ) ; xmlRelaxNGParserCtxt <S2SV_ModEnd> ( rb_intern ( <S2SV_ModStart> errors ) ; }",0
1418,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> info -> par <S2SV_ModEnd> ; vma -> <S2SV_ModStart> _CACHE_MASK ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> ( vma, fbdev -> fb_phys, fbdev -> fb_len <S2SV_ModEnd> ) ; }",1
1419,<S2SV_ModStart> == 0 ) { <S2SV_ModEnd> if ( config,0
1420,<S2SV_ModStart> = 0 ; if ( out -> xsize < 4 ) return out ;,0
1421,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1422,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1423,<S2SV_ModStart> ; err = - EINVAL ; if (,0
1424,<S2SV_ModStart> -> event ) <S2SV_ModEnd> ; mutex_lock ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null>,0
1425,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> char * s ; int <S2SV_ModEnd> u16BITS ( * <S2SV_ModStart> u_t ) { if ( u_char * out, u_char * s ) return - 1 ; <S2SV_ModStart> + u_char * len ; if (! * p ) return - 1 ; <S2SV_ModStart> + 1 ; * end = <S2SV_ModEnd> + 1 ; <S2SV_ModStart> + len ; if (! * s ) return FALSE ; if (! * s ) return FALSE ; <S2SV_ModStart> case VPX_CODEC_UNSUPPORT_LEVEL ) { if (! * s ) return - 1 ; <S2SV_ModStart> + 1 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> + 1 ; } if (! <S2SV_ModEnd> * s ) return <S2SV_ModStart> + 1 ; }",0
1426,"<S2SV_ModStart>, i ; if (! ( s -> state & PNG_IHDR ) ) { av_log ( avctx, AV_LOG_ERROR, ""r\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",0
1427,<S2SV_ModStart> cib = 0 <S2SV_ModEnd> ; if (,0
1428,<S2SV_ModStart> } dt -> proto = IP_GET_IPPROTO ( p ) ; dt ->,1
1429,"<S2SV_ModStart> ( interface, KSZ8851_r, KSZ8851_R_RSPEED <S2SV_ModEnd> ) ) ; if <S2SV_ModStart> ( interface, KSZ8851_RX86EM )!= 0 ) { <S2SV_ModStart> ( interface, KSZ8851_R_RSPEED <S2SV_ModEnd> ) ; return",0
1430,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart>, const char * type_comment, const char * name <S2SV_ModEnd>, const char <S2SV_ModStart>, const char * name, const char * name_t * name <S2SV_ModEnd>, NULL, <S2SV_ModStart>, NULL, * name <S2SV_ModEnd>, NULL,",0
1431,<S2SV_ModStart> out ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1432,"<S2SV_ModStart> ( AUDIT_APPARMOR_DENIED, __aa_current_profile ( ), GFP_KERNEL, & sa, NULL <S2SV_ModEnd> ) ; }",1
1433,<S2SV_ModStart> uint_fast8_t tmp ; siz -> comps = 0 ; <S2SV_ModStart> ) ) { goto error ; } if (! siz -> width ||! siz -> tilexoff >= siz -> height ) { goto error ; } if (,0
1434,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return - EINVAL ;,0
1435,"<S2SV_ModStart>, xmi_data, xmi_size,",1
1436,"<S2SV_ModStart> size_t buf, struct iov_iter * iter <S2SV_ModStart> ; size_t total_len = iov_iter_count ( ) <S2SV_ModStart> ) ; size_t total_len = iov_iter ( buf -> offset, & iter ) ; if ( unlikely ( error ) ) { ret = - EFAULT ; break ; } <S2SV_ModEnd> if (! <S2SV_ModStart> buf -> len ) { <S2SV_ModEnd> return ret ;",0
1437,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> Quantum index ; <S2SV_ModStart> ++ ) { next_pixel = MagickFalse ; displacement = 1 ; <S2SV_ModStart> -= MaxHashTable ; if ( k < 0 ) continue <S2SV_ModEnd> ; if (,0
1438,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1439,<S2SV_ModStart> ] ) { goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> - ENOMEM ; cleanup : res = hdl -> c_hdl -> c_path [ 0 ] ; if ( hdl -> fe_hdl -> c_hdl -> c_hdl ) { if ( hdl -> fe_hdl -> c_hdl -> c_hdl -> c_path [ 0 ] ) unlink ( hdl -> c_hdl -> c_hdl -> c_path [ 0 ] ) ; } <S2SV_ModEnd> } <S2SV_null>,0
1440,"<S2SV_ModStart> size_t max_samples ; size_t max_samples ; size_t max_samples ; <S2SV_ModStart> 0 ; size_t max_samples ; size_t max_samples ; <S2SV_ModStart> 0 ; size_t max_samples = 64 * max_samples ; <S2SV_ModStart> ) ) { if (! ( fmtid ) ) { jas_eprintf ( ""image <S2SV_blank> %d\\n"", optstr, fmtid, sizeof ( fmtname ) ) ) { jas_eprintf ( ""error: <S2SV_blank> %d <S2SV_blank> %d\\n"", image_samples <S2SV_ModEnd>, fmtname, <S2SV_ModStart> ) ) ; break ; } if (! ( fmtid ) ) { jas_eprintf ( ""error: <S2SV_blank> %d <S2SV_blank> name <S2SV_blank> %d\\n"", fmtname <S2SV_ModEnd>, fmtname, <S2SV_ModStart>, fmtname, <S2SV_ModEnd>, fmtname, <S2SV_ModStart>, fmtname, ""%s <S2SV_blank> %d <S2SV_blank> %d\\n"", <S2SV_ModEnd>, numcmpts, <S2SV_ModStart> jas_image_rawsize ( image ) )",0
1441,<S2SV_ModStart> == - 1 ) { <S2SV_ModStart> return - 1 ; },0
1442,<S2SV_ModStart>  ret = 0 ; if ( ret == NULL ) return ret ; <S2SV_ModEnd> } ret =,0
1443,<S2SV_ModStart> ( n = 0 <S2SV_ModEnd> ; if (,0
1444,<S2SV_ModStart> out_dev ) ; kfree ( dl_dev ) ;,0
1445,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
1446,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> kvm_null> <S2SV_null>,0
1447,<S2SV_ModStart> -> bq_data ; mutex_unlock ( & bq -> lock ) ;,0
1448,<S2SV_ModStart> else { return false <S2SV_ModEnd> ; } case,1
1449,"<S2SV_ModStart> 0 ) ; memset ( & sa, 0, sizeof ( struct sockaddr_t ) )",0
1450,<S2SV_ModStart> (! handle ||! SecIsValidHandle ( handle ),1
1451,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1452,"<S2SV_ModStart> -> dentry ; memset ( & old_dentry, 0, 0 ) ;",0
1453,<S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> DATA_ENSURE ( 1 <S2SV_ModStart> ++ ; s <S2SV_ModEnd> ++ ; MOP_OUT,1
1454,"<S2SV_ModStart> * plane, vpx_writer <S2SV_ModEnd> * plane )",0
1455,<S2SV_ModStart> = - EINVAL ; msg -> msg_namelen = 0,0
1456,"<S2SV_ModStart> mntent, path, rootfs -> mount <S2SV_ModEnd> ) ; return",0
1457,<S2SV_ModStart> ; return AVERROR_INVALID1,0
1458,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2SV_null> <S2SV_null> static,0
1459,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> mode_info ( VP9_COMMON <S2SV_ModStart> mi, bsize, MACROBLOCKD * const xd <S2SV_ModEnd>, mi_row, <S2SV_ModStart> mi_col ) ; vpx_free ( xd ) ;",0
1460,<S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if ( <S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if (,1
1461,<S2SV_ModStart> ( err = - 1,0
1462,"<S2SV_ModStart> pixel_info ) ; ( void ) ResetMagickMemory ( pixels, 0, pixel_info_length ) ;",1
1463,"<S2SV_ModStart> count ) { size_t <S2SV_ModEnd> len ; int <S2SV_ModStart> ( buf, count <S2SV_ModEnd>, count ) <S2SV_ModStart> return - EINVAL ; }",0
1464,<S2SV_ModStart> p = length + 1,0
1465,<S2SV_ModStart> ) ) ; if (! xfs_is_invalid ( tmp_address ) ) return <S2SV_ModEnd> ; if (,0
1466,<S2SV_ModStart> ; if ( cnt >= 0 &&,0
1467,<S2SV_ModStart> ; if ( <S2SV_ModEnd>!= 0 ),0
1468,<S2SV_ModStart> ( ctx -> codec_interface <S2SV_ModEnd> ( ) ),0
1469,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",1
1470,<S2SV_ModStart> off = 0 <S2SV_ModEnd> ; } else,0
1471,"<S2SV_ModStart>, flags ; ND_TCHECK2 ( tptr [ 0 ], 3 ) ; <S2SV_ModStart> tlen = len <S2SV_ModEnd> ; ND_PRINT (",0
1472,"<S2SV_ModStart> = NULL ; memset ( res, 0, sizeof ( res ) ) ;",0
1473,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dest_width,",0
1474,<S2SV_ModStart> ( msg ) <S2SV_ModEnd> ; } } while,0
1475,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1476,"<S2SV_ModStart> iovec, iter, & iter",0
1477,"<S2SV_ModStart> } if ( ptr - c -> rcurr > 100 || ( strncmp ( ptr, ""get <S2SV_blank> "", 4 ) && strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "", 5 )",0
1478,<S2SV_ModStart> -> desc. bNumEndpoints ; <S2SV_ModEnd> err = 0,0
1479,<S2SV_ModStart> bdev ) ; if ( bufferSize < sizeof ( buffer ) ) { kfree ( buffer ) ; return - ENOMEM ; },0
1480,<S2SV_ModStart> ; ue -> card = card ; ue ->,0
1481,"<S2SV_ModStart> client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) { exit_client ( client_p, client_p, client_p, ""Malformed <S2SV_blank> AUTHENTICATE""",1
1482,<S2SV_ModStart> ctxt -> rip_relative && likely ( ctxt -> memopp ),1
1483,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
1484,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; dev ->,0
1485,<S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( x ->,0
1486,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, ENC624J600_ECON1, ENC624J600_ECON1 <S2SV_ModEnd> ; interface -> <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, ENC624J600_MAADR1 ) ; enc624J600WriteReg ( interface, ENC624J600_ENC624J600_MAADR624J600_EIR <S2SV_ModEnd> ) ; return",0
1487,"<S2SV_ModStart> maxptr ) { size_t <S2SV_ModEnd> maxlen ; char <S2SV_ModStart> * psf = psf -> header. len ; memset ( psf, 0, sizeof ( psf ) ) ; <S2SV_ModStart> ( psf -> header. len <S2SV_ModEnd> ) ; return",0
1488,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
1489,"<S2SV_ModStart> ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> header <S2SV_blank> to <S2SV_blank> header\\n"", __func__, pool ) ; free ( pool ) ; return false ; } <S2SV_ModEnd> cb1 = (",0
1490,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, ctx -> <S2SV_ModStart> ctx -> priv <S2SV_ModEnd> ) ; if",0
1491,<S2SV_ModStart> case EXIT_REASON_VMON : case EXIT_REASON_INVEPT :,1
1492,"<S2SV_ModStart>, int speed, vpx_flags & VP9_COMP * cpi <S2SV_ModEnd> ) { VP9EncoderConfig <S2SV_ModStart> ) ) { const VP9EncoderConfig <S2SV_ModEnd> * const cpi <S2SV_ModStart> ; sf -> td. mb = cpi -> <S2SV_ModEnd> ; sf -> <S2SV_ModStart> = KEY_FRAME ; vpx_clear_system_state <S2SV_ModEnd> ( ) <S2SV_ModStart> ; sf -> <S2SV_ModEnd> profile = cm -> <S2SV_ModStart> ]. mbmi_extentries_key <S2SV_ModEnd> ; sf ->",0
1493,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1494,"<S2SV_ModStart> ( ) ; memcpy <S2SV_ModEnd> ( txt,",0
1495,"<S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1496,"<S2SV_ModStart> = MIN ( L,",0
1497,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1498,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> = NULL ; char * n <S2SV_ModEnd> = str ; <S2SV_ModStart> 0 ) ; if (! str ) { PyErr_SetString ( n, ""attr"" ) ; return NULL ; } if (! str ) { PyErr ( ""\\"" ) ; return NULL ; } <S2SV_ModEnd> type_comment = str",0
1499,"<S2SV_ModStart> } else { switch ( svc_ctx ) { case VPX_CODEC_OK : case VPX_PARSE_OK : case VPX_CODEC_OK : case VPX_CODEC_OK : case VPX_CODEC_OK : svc_ctx -> spatial_id = 1 ; break ; case VPX_CODEC_OK : if ( svc_ctx -> temporal_name ) { svc_ctx -> temporal_name [ i ] = 1 ; break ; } else { case VPX_CODEC_OK : case VPX_CODEC_ERROR : res = 1 ; break ; case VPX_CODEC_OK : if ( svc_ctx -> temporal_name [ i ] && svc_ctx -> temporal_name [ i ] ) ] = ( svc_ctx -> temporal_name [ i ], options -> temporal_name ) ; break ; case VPX_CODEC_OK : if ( ( svc_ctx -> temporal_name ) ) { res = parse_ctx ( svc_ctx ) ; break ; } else { case VPX_CODEC_ERROR : if (",0
1500,<S2SV_ModStart> off = 0 <S2SV_ModEnd> ; } else,0
1501,<S2SV_ModStart> ; while (! s <S2SV_ModEnd> ) && t,0
1502,<S2SV_ModStart> ; if ( entry == NULL ) return EINVAL ; if (,0
1503,<S2SV_ModStart> frame -> data [ plane ] && frame -> linesize <S2SV_ModStart> [ plane ] && frame -> linesize [ plane ],1
1504,"<S2SV_ModStart> mvs, mb_index <S2SV_ModEnd> ) ; break",0
1505,<S2SV_ModStart> * new_memo ; size_t new_mem = 0,0
1506,,1
1507,<S2SV_ModStart> case 0x05 : if ( opcode == 0 ) { return ; },0
1508,<S2SV_ModStart> ; int result_dbh = 0 <S2SV_ModEnd> ; if (,0
1509,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) <S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> & 0 ) <S2SV_ModEnd> ) ; }",0
1510,<S2SV_ModStart> ; uint32_t phdr ; struct eth_phdr eth ; void * phdr ; <S2SV_ModStart> packet ) { <S2SV_ModEnd> unsigned char tmp_len = <S2SV_ModStart> packet ) { if ( phdr > WTAP_MAX_LEN ) { phdr = - 1 ; break ; },0
1511,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1512,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_decode ( NSC_CONTEXT <S2SV_ModStart> context ) ; BYTE * context ; size_t pos = 0 ; <S2SV_ModStart> ; if (! context ) return FALSE ; if ( context -> width > 0 ) return FALSE ; <S2SV_ModStart> ; } } return FALSE ;,0
1513,<S2SV_ModStart> while ( offset > 0 && offset <S2SV_ModStart> < end_offset ) { <S2SV_ModStart> hf_keybuffer ) ; },1
1514,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> return ERROR ; },0
1515,"<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> = get_layer_context ( cpi <S2SV_ModEnd> ) ; const <S2SV_ModStart> = rc -> twopass. avg_frame_bandwidth <S2SV_ModEnd> = ( cpi <S2SV_ModStart> ; if ( cpi -> oxcf. avg_frame_bandwidth <S2SV_ModEnd> == KEY_FRAME ) <S2SV_ModStart> KEY_FRAME ] = ( cpi -> oxcf. kf_level + ( cpi -> twopass. number_temporal_layers + ( cpi -> oxcf. number_level > 16 ) ) { rf_log ( cpi -> avg_frame, kf_buffer_level + kf_level - ( cpi -> optimal_level ) ) ; } else { <S2SV_ModEnd> if ( cpi",0
1516,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1517,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; else if ( ret <= size ) memcpy ( data, buf, ret ) ; kfree ( buf ) ;",0
1518,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_read_lock ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ) { return vpx_read_literal <S2SV_ModEnd> ( r,",0
1519,<S2SV_ModStart> op + OSPF6HDR_LEN ) ; ND_TCHECK_32BITS ( & hellop -> hello_options,1
1520,<S2SV_ModStart> { if ( datalen!= 1 ) return - EINVAL ; if (,1
1521,<S2SV_ModStart> rc ) { struct task_struct * <S2SV_ModEnd> task = kbd <S2SV_ModStart> ; if ( <S2SV_ModEnd>!= uwbd <S2SV_ModStart> uwbd -> uwbd. task ) { <S2SV_ModEnd> rc -> uwbd <S2SV_ModStart> pid ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1522,"<S2SV_ModStart> : # line 101 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1030 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 102 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1048 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 102 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( ( * yyvaluep ). re_node ) ) ) ; } # line 1042 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1048 <S2SV_ModEnd> ""hex_grammar.y"" { yr_re_node_destroy ( ( ( ( ( * yyvaluep ). re_node ). re_node ) ; } # line 1042 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 107 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( ( ( ( * yyvaluep",0
1523,<S2SV_ModStart> : idx ; assert ( ptr >= gfx -> backendData && ptr < ( ( char * ) gfx -> backendData + graphicsGetMemoryRequired ( gfx ) ) ) ;,1
1524,<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> TX_SIZE tx_size ( <S2SV_ModStart> mbd ) ; MACROBLOCKD * const xd = & cpi -> eob ; MACROBLOCKD * const xd = & cpi -> eob ; <S2SV_ModStart> mbd ) ; tran_low_t <S2SV_ModEnd> * const tran_low_t <S2SV_ModStart> block ) ; tran_low_t <S2SV_ModEnd> ( tp [ <S2SV_ModStart> ] ; tran_low_t <S2SV_ModEnd> * const tran_low_t <S2SV_ModStart> block ) ; tran_low_t <S2SV_ModEnd> * const tp9_low_t <S2SV_ModStart> block ) ; tran_low_t <S2SV_ModEnd> * const coeff <S2SV_ModStart> block ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> eob == TX_SIZE tx_size ) { vp9_get_get_block ( t ) ; return ; } # if CONFIG_VP9_HIGHBITDEPTH if ( xd ) { vp9_get_cache [ t ] [ t ] [ t ] ] [ t ] [ t ] [ t ] [ t ],0
1525,<S2SV_ModStart> ; if ( pParse -> nErr ) return 0 ; if (,0
1526,<S2SV_ModStart> { if ( ( <S2SV_ModStart> shmflg & SHM_RND ) && addr >= shmlba,1
1527,"<S2SV_ModStart> -> priv_ops ; if ( strcmp ( LOG_INFO, 0 ) ) return - ENOMEM ;",0
1528,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1529,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1530,<S2SV_ModStart> : case NPNVSupportsWindowless : case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling,1
1531,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, MSG_DONTWAIT ) )",0
1532,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 )",0
1533,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> attr ) { if ( <S2SV_ModEnd> if (! <S2SV_ModStart> ( xattr ) &&!,0
1534,"<S2SV_ModStart>!= 0 ) { char * tstrdup [ 0 ] ; <S2SV_ModStart> ( sname, ""%s"", tstr ) ; <S2SV_ModEnd> goto outfilename ; <S2SV_ModStart> ( pname, ""%s"", tstr ) ; <S2SV_ModEnd> if ( pname <S2SV_ModStart> ) ) { if (! <S2SV_ModStart> ( s ) || ( psfname [ 0 ] <S2SV_ModEnd> ) ) {",0
1535,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * const svcInternal_t <S2SV_ModStart> create_ctx ( const svcInternal_t <S2SV_ModEnd> * const si,0
1536,<S2SV_ModStart> mq ) ; q -> mq = NULL ;,0
1537,"<S2SV_ModStart> s ) { uint32 length ; struct stream packet = * s <S2SV_ModEnd> ; ber_parse_header ( <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> params <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",1
1538,"<S2SV_ModStart> tmp_hash ) ; zval_copy_ctor ( & tmp, tmp ) ;",0
1539,"<S2SV_ModStart> char * buffer, unsigned int i",0
1540,<S2SV_ModStart> char * buf <S2SV_ModEnd> ; if (,0
1541,<S2SV_ModStart> filter_end ) { <S2SV_ModEnd> const char * <S2SV_ModStart> = NULL ; size_t table_start ; <S2SV_ModStart> ) return FALSE ; if ( <S2SV_ModEnd> == NULL ) <S2SV_ModStart> if (! s_start_end ) return FALSE ; if ( <S2SV_ModEnd> == NULL ) <S2SV_ModStart> <S2SV_null> <S2SV_null>,0
1542,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1543,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1544,"<S2SV_ModStart> * cm ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( seg -> <S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( & cm ->",0
1545,"<S2SV_ModStart>, u32 type_type, <S2SV_ModStart> ; if (! caller_type_type ) return - ENOMEM <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 0 ; for ( i = 0 ; i < 0 ; i ++ ) return 0 ; <S2SV_ModStart> if (! caller_type_type_type_comment ) return 0 ; <S2SV_ModStart> = 0 ; if ( ret < 0 ) return 1 ; <S2SV_ModStart> if (! is_type_type_type_comment ) return 0 ; <S2SV_ModStart> if (! is_type_type <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( is_type_type_type_type_type_comment, ""n"" ) return 1 ; if ( ret < 0 ) return 1 ; <S2SV_ModStart> if (! is_type_type_type_type <S2SV_ModEnd> ) return 1 <S2SV_ModStart> if (! is_type_type_type <S2SV_ModEnd> ) return 1 <S2SV_ModStart> ; i < 0 ) return ret ;",0
1546,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_NOFOLLOW ) ),0
1547,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ; break ; } while ( context -> pass > 0 && context -> pass < 4 && context -> curY >= p -> height ) { switch ( ++ context -> pass ) { case 2 : context -> curY = i -> posY + 4 ; break ; case 3 : context -> curY = i -> posY + 2 ; break ; case 4 : context -> curY = i -> posY + 1 ; break ; },1
1548,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( x ->,0
1549,"<S2SV_ModStart> ) ; } smb_ofile_flush <S2SV_ModEnd> ( sr, <S2SV_ModStart> f_mutex ) ; smb_ofile_flush <S2SV_ModEnd> ( sr,",1
1550,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> char * s ; int <S2SV_ModEnd> u16BITS ( * <S2SV_ModStart> u_t ) { if ( u_char * out, u_char * s ) return - 1 ; <S2SV_ModStart> + u_char * len ; if (! * p ) return - 1 ; <S2SV_ModStart> + 1 ; * end = <S2SV_ModEnd> + 1 ; <S2SV_ModStart> + len ; if (! * s ) return FALSE ; if (! * s ) return FALSE ; <S2SV_ModStart> case VPX_CODEC_UNSUPPORT_LEVEL ) { if (! * s ) return - 1 ; <S2SV_ModStart> + 1 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> + 1 ; } if (! <S2SV_ModEnd> * s ) return <S2SV_ModStart> + 1 ; }",0
1551,"<S2SV_ModStart> ; if ( * cp == '\\0' || <S2SV_ModEnd> strchr ( cp <S2SV_ModStart> )!= NULL || <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ( cp, ""."" ) == 0 || strcmp ( cp, <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { run_err",1
1552,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char * t <S2SV_ModStart> ; char * outputbuffer <S2SV_ModEnd> = '\\0' ) <S2SV_ModStart> = '\\0' ; char * t1 <S2SV_ModEnd> = '\\0' ; <S2SV_ModStart> = '\\0' ; char * t1 <S2SV_ModEnd> = strdup ( <S2SV_ModStart>, '\\0' ) ; if ( strcmp ( & outbuffer ) ) { <S2SV_ModStart> ( s, "" <S2SV_blank> file <S2SV_blank> %s"", outputbuffer ) ; return ( 1 ) ; } if ( strcmp ( & buf ) ) { printf ( "" <S2SV_blank> \' <S2SV_blank> \' <S2SV_blank> \' <S2SV_blank> to <S2SV_blank> \' <S2SV_blank> \' <S2SV_blank> \' <S2SV_blank> \' <S2SV_blank> \'%s\\n"", "" <S2SV_blank> name=%i"", ( * ) ) ; return NULL ; } if ( <S2SV_ModStart> ( s == '\\0' <S2SV_ModEnd> ) ) { <S2SV_ModStart> + 1 ) { int i <S2SV_ModEnd> = '\\0' ; <S2SV_ModStart> ) ) ; if ( strcmp ( & outbuf, ""\\0' <S2SV_ModEnd>, <S2SV_blank> name=%s"", <S2SV_ModStart>, outbuf ) ) { <S2SV_ModStart> ; for ( i = 0 ; i == '\\0' <S2SV_ModEnd> == '\\0' <S2SV_ModStart> +' ) ) { <S2SV_ModStart>",0
1553,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( const size_t * ) val ; return 0 ;,0
1554,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart>, id ; if ( unlikely ( siphash_key_is_zero ( & net -> ipv4. ip_id_key ) ) ) get_random_bytes ( & net -> ipv4. ip_id_key <S2SV_ModEnd>, sizeof ( <S2SV_ModStart>, sizeof ( siphash ) )",0
1555,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lineno, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""lineno\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> exceeds"" ) ; return 1 ; } else { int res ; res = obj2ast_identifier ( tmp, & tmp ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( res!= 0 ) { return 1 ; } if ( lookup_attr_id ( obj, & PyId_id, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; res = NULL ; } else { int res ; res <S2SV_ModEnd> ; res = <S2SV_ModStart> ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_y, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id ( obj, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { Py_CLEAR ( tmp )",0
1556,"<S2SV_ModStart> void write_inter_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * w )",0
1557,"<S2SV_ModStart> ctl -> pw, "".chfn""",1
1558,<S2SV_ModStart> { if ( max_length < sizeof ( struct ieee80211_radiotap_header ) ) return - EINVAL ; if ( <S2SV_ModStart> iterator -> _rtheader + sizeof ( uint32_t ),1
1559,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; err = <S2SV_ModStart> KERNEL ) ; err = - EINVAL ; goto out_unlock <S2SV_ModEnd> ; } <S2SV_null>,0
1560,<S2SV_ModStart> src ) ; if ( dst -> cur_state == NULL ) return - EINVAL,0
1561,"<S2SV_ModStart> return ; } if ( input <= 0.0 || output <= 0.0 ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Gamma <S2SV_blank> values <S2SV_blank> should <S2SV_blank> be <S2SV_blank> positive"" ) ; RETURN_FALSE ; }",1
1562,<S2SV_ModStart> -> stats = 0 <S2SV_ModEnd> ; switch ( <S2SV_ModStart> ( stream -> stats. stats. stats. stats -> <S2SV_ModEnd> rc!= NULL <S2SV_ModStart> ; } } <S2SV_ModEnd> switch ( stream,0
1563,<S2SV_ModStart> ) ; } sas_move_dev ( cmd ) ;,0
1564,"<S2SV_ModStart> NULL ) ; if ( g_strstart ( data, name_len ) == - 1 ) { g_assert ( 0!= NULL ) ; g_assert ( - 1 ) ; break ; }",0
1565,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> tile_cols ( VP9_COMMON <S2SV_ModStart> * const tile, <S2SV_ModEnd> tile_cols, int tile_cols <S2SV_ModStart> tile_col ) { VP9_COMMON * const tile_col = & tile_data -> tile_cols ; MACROBLOCK * const tile_row = & tile_info ; MACROBLOCK * const tile_data = & tile_t tile_info ; int tile_row, tile_row, tile_row, tile_row, tile_row, tile_data -> tile_cols ; <S2SV_ModStart> = 0 ; vpx_encode <S2SV_ModEnd> ( tile_info, <S2SV_ModStart> ) ) { vpx_free ( tile_t ) ; vpx_log2_context ( tile, tile_info ) ; vpx_encode <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) ; vpx_encode <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) ; vpx_set <S2SV_ModEnd> ( w, <S2SV_ModStart>, tile_info, tile_info, tile_data -> tile_info <S2SV_ModEnd> tile_info, <S2SV_ModStart>, tile_info, tile_cols,",0
1566,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const VP9_decoderConfig <S2SV_ModEnd> * const cm <S2SV_ModStart> p9_decoderConfig <S2SV_ModEnd> * const cm <S2SV_ModStart> pbi ) { const VP9_COMMON * const cm = cm -> common ; cm -> frame_parallel_decode = cm -> frame_decoder * const cm = cm -> frame_to_decode ; cm -> frame_data = NULL ; cm -> frame_worker_data = NULL ; cm -> frame_for_data = NULL ; cm -> frame_type = NULL ; cm -> frame_to_parallel_decode = ( cm -> frame_decode == NULL )? 1 : 0 : 1 ; cm -> last_frame = cm -> frame_data <S2SV_ModEnd> ; cm -> <S2SV_ModStart> == NULL ) cm -> frame_parallel_decode = NULL <S2SV_ModEnd> ; for ( <S2SV_ModStart> ; i <S2SV_null> <S2SV_null>,0
1567,<S2SV_ModStart> ) { return <S2SV_ModEnd> ; } if,0
1568,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1569,<S2SV_ModStart> -> count ; new_fpl -> user = get_uid ( fpl -> user ) ;,1
1570,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> * opt ; opt = rcu_read_protected ( opt -> opt.,0
1571,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> tree_index ] ;,0
1572,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> frame_parallel_decode_decode_state ( vpx_codec_alg_priv_t 0, ctx <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; if (! ctx <S2SV_ModEnd> ) { ctx <S2SV_ModStart> ) ) ; } if ( ctx -> codec_interface <S2SV_ModEnd> ( ctx,",0
1573,<S2SV_ModStart> ( ctx ) <S2SV_ModEnd> ) ; },0
1574,"<S2SV_ModStart> ) ; struct mnt_namespace * ns = dest_mnt -> mnt_ns ; struct <S2SV_ModStart> ; if (! parent_path ) { err = count_mounts ( ns, source_mnt <S2SV_ModEnd> ) ; if <S2SV_ModStart> goto out ; } if ( err ) { err = - ENOMEM ; goto out ; } <S2SV_ModStart> mnt_mounts, true <S2SV_ModEnd> ) ; if",0
1575,"<S2SV_ModStart>, & len, 0",1
1576,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = _mm_set1_epi16 ( ( int16_t ),0
1577,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rc -> avg_frame_bandwidth,0
1578,<S2SV_ModStart> char buf [ 1024 <S2SV_ModEnd> ] = 0,0
1579,"<S2SV_ModStart> int fout, int maxoffset <S2SV_ModStart> NULL, fout, maxout,",0
1580,"<S2SV_ModStart> * cpi, ThreadData * td, ThreadDataEnc * td <S2SV_ModEnd>, int mi_row <S2SV_ModStart> -> mb ; MACROBLOCK * const x = & td -> td. <S2SV_ModStart> -> mb ; MB_MODE_INFO * const mbmi_ext = x -> mbmi ; MODE_INFO * const mbmi = cpi -> sf. sf ; <S2SV_ModStart> ) ) ; if ( cpi -> oxcf. sf && cpi -> oxcf. mode == BLOCK_8X8 ) { VPX_COUNTS * const mbmi = & cpi -> oxcf ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( cpi <S2SV_ModStart> ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. subsampling_mode == BLOCK_8X8 ) { vp9_encode_block ( cpi, cm -> oxcf. mbmi_ext, cm -> sf_mode == BLOCK_8X8 && cpi -> oxcf. mode_mode == BLOCK_8X8 ) { vp9_encode_encode_block ( cpi, cm -> sf,",0
1581,<S2SV_ModStart> bdev ) ; if ( bufferSize < sizeof ( buffer ) ) { kfree ( buffer ) ; return - ENOMEM ; },0
1582,<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char * <S2SV_ModStart> ] ; struct crypto_cipher * tfm_des <S2SV_ModEnd> ; tfm_des = <S2SV_ModStart> - 1 ; if (! tfm_des ) { kfree ( tfm_des ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
1583,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1584,"<S2SV_ModStart> i, bits_per_sample <S2SV_ModEnd> ; int bits_per_sample <S2SV_ModStart> 0 ) { int bit_depth ; size_t bit_depth = 0 ; if ( bits_per_sample > 0 ) { return 0 ; } <S2SV_ModStart> 0 ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ( bits_per_sample || bits_per_sample > 0 ) { archive_set ( ctx -> bits_per_sample + 1 ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModEnd> if ( index",0
1585,<S2SV_ModStart> i > pos + delta <S2SV_ModStart> off + 1 <= pos + delta <S2SV_ModEnd> ) insn ->,1
1586,<S2SV_ModStart> case EXIT_REASON_INVEPT : case EXIT_REASON_INVVPID :,1
1587,<S2SV_ModStart> } else { if ( c -> name [ 0 ]. name == '\\0' ) { <S2SV_ModStart> } else { return NULL ; } } else { if ( <S2SV_ModEnd> ( c >,0
1588,<S2SV_ModStart> ; if ( packet_len < NULL ) { payload -> tcp_packet_line = NULL ; },0
1589,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1590,"<S2SV_ModStart> ++ r ; if <S2SV_ModEnd> ( pow ( <S2SV_ModStart>, dim ) <= entries ) return - 1 ; if <S2SV_ModEnd> ( ( int <S2SV_ModStart> dim ) ) > entries ) return - 1 <S2SV_ModEnd> ; return r",1
1591,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> ; } } return ( <S2SV_ModStart> dds_info, exception ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
1592,<S2SV_ModStart> if ( opt_len >= 0 <S2SV_ModEnd> ) goto out,0
1593,"<S2SV_ModStart> tmp_hash ) ; zval_copy_ctor ( & tmp, tmp ) ;",0
1594,"<S2SV_ModStart> error ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1595,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1596,<S2SV_ModStart> cfg ) { struct stat st ; int fd = - 1 ; <S2SV_ModStart> } if ( fd == - 1 && <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1597,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! f2fs_readonly (,1
1598,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1599,"<S2SV_ModStart> y12 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> m"", <S2SV_ModStart> y3 ) ; sendClean ( outputbuffer ) ;",0
1600,"<S2SV_ModStart> * rdp, Stream <S2SV_ModEnd> ) ; return",0
1601,<S2SV_ModStart> refcount ) ; free ( user ) ;,0
1602,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
1603,<S2SV_ModStart> == ARPHRD_ETHER ) { <S2SV_ModStart> ether_setup ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; },1
1604,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (",1
1605,<S2SV_ModStart> pbi ) { <S2SV_ModEnd> if ( pbi,0
1606,<S2SV_ModStart> { if ( l == NULL ) break ; if (,1
1607,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 0 ) { if ( ( ( portBYTE_ALIGNMENT - xWantedSize & portBYTE_ALIGNMENT - ( ) ) ) ) { xWantedSize = 0 ; } else { xWantedSize = 0 ; } else { <S2SV_ModStart> portBYTE_ALIGNMENT - ( xWantedSize <S2SV_ModEnd> ) ; },0
1608,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1609,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1610,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpDiff"", ""%s"", ""(cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> cp -- ) return 1 ;",1
1611,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1612,<S2SV_ModStart> ( cp + 1,0
1613,"<S2SV_ModStart> 0 ) { ND_TCHECK2 ( * tptr, length ) ; <S2SV_ModStart> * msg_len ; if ( tptr == 0 ) { ND_PRINT ( ( ndo, ""\\n"" ) ) ; break ; }",0
1614,<S2SV_ModStart> { uint16 bitspersample = 1,0
1615,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1616,"<S2SV_ModStart> cm, vpx_prob <S2SV_ModEnd> * r ) <S2SV_ModStart> cm -> <S2SV_ModEnd> coef_probs [",0
1617,"<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
1618,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 2 ] = 0x87 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, state -> data, state -> data, 1, 1 ) < 0 ) err ( ""command <S2SV_blank> 0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0x86 ; state -> data [ 1 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0 <S2SV_ModEnd> ; if",0
1619,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( inode, inode )",0
1620,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vpx_codec_alg_priv ( vpx_ctx <S2SV_ModStart> ) || ( vpx_codec_alg_priv_t * ) val <S2SV_ModEnd> ; if (,0
1621,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> int mi_row, <S2SV_ModStart> intra_cols = ( vpv_filter_block_size ( vpv_block_stride, vpv_block_size_t <S2SV_ModEnd> ) ; MACROBLOCKD * <S2SV_ModStart> = 1 ; memset <S2SV_ModEnd> ( xv_block_size, <S2SV_ModStart> * mv_crop_height, vpv_block_height, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( seg,",0
1622,"<S2SV_ModStart> ( bufp, bufp <S2SV_ModEnd> ) ) {",0
1623,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> p ) { if ( cJSON_Decode ( p, i ) { for ( i = 0 ; i = 0 ; i < n, i ) { for ( i = 0 ; i ; i = 0 ; ++ ; i < n ) { if ( cJSON_New ( n, 1 ) ) { for ( i = 0 ; i < 0 ; ++ ) { if ( i ) { for ( i = 0 ; i < n, i ) ; ++ ) { if ( cJSON_New ( n, i ) { if ( cJSON_New ( p ) ) { for ( i = 0 ; i = 0 ; i ; ++ ; } <S2SV_ModEnd> cJSON_New ( p",0
1624,<S2SV_ModStart> task ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1625,"<S2SV_ModStart> == 0 ) { struct iinfo * bb ; udf_cache = ( inode -> i_sb ) + i_len ; if ( udf_file_entry_offset ( inode -> i_sb ) + i_len > b_len ) { return NULL ; } if ( <S2SV_ModStart> ( inode -> i_sb ) + i_len > inode -> i_sb -> i_len ) || ( i_len > b_len ) - 1 ) goto out_error ; } if ( <S2SV_ModStart> ( inode ) > b_len - 1 ) goto out_alloc ; i_offset = ( inode -> i_len - b_len - 1 ) + i_len ; i_len ; if ( inode -> i_sb -> i_len > b_len ) goto out_alloc ; if ( inode -> i_sb -> i_len > b_len - 1 ) goto out_error ; memset <S2SV_ModEnd> ( inode,",0
1626,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
1627,<S2SV_ModStart> ; int i ; size_t len ; <S2SV_ModStart> ; JASN2SV_null> <S2SV_null> <S2SV_null> static,0
1628,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> tile_t tile_frame_tile_t tile_buffers <S2SV_ModStart> -> tile_cols ; TileInfo * const tile_tile_cols = 0 ; TileInfo * const tile_info = & tile_data -> tile_tile_cols [ tile_t tile_data ] <S2SV_ModEnd> ; int tile_t <S2SV_ModStart> tile_cols ; vpx_free ( tile_t ) ; vpx_free ( tile_worker_data ) ; vpx_free ( tile_worker_data <S2SV_ModEnd> * ) <S2SV_ModStart> = 0 ; tile_data -> tile_info ; vpx_free ( tile_t ) ; vpx_free ( tile_tile_t ) ; tile_data -> tile_info <S2SV_ModEnd> * ) <S2SV_ModStart> = 0 ; vpx_free ( tile_worker_data -> tile_data. tile_t ) ; tile_data -> tile_info ) ; vpx_free ( ) ; vpx_get_tile_tile_info ( ) ; vpx_get_tile_tile_info ( ) ; vpx_get_tile_t ),0
1629,<S2SV_ModStart> = 0 ; if ( len < 8 ) break ;,0
1630,<S2SV_ModStart> ; err = - EINVAL ; if (,0
1631,"<S2SV_ModStart> * seg ; const VP9_COMMON * cm = & cpi -> seg ; const <S2SV_ModStart> ) { if ( segfeature_active_active ( & cpi -> seg, segment_id, cm -> seg ) ) { if ( segfeature_active_active ( & cpi -> seg ) ) { vpx_clear_system_state ( ) ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart>, seg ) ; vpx_clear_system_state ( ) ; } else { if ( segfeature_active ( & cpi -> seg, cm -> bit_depth ) ) { if ( segfeature_active_active ( & cpi -> ei ) ) { if ( segfeature_active_active_active ( & cpi -> seg, seg, segment_id, cm -> bit_depth ) ) { if ( segfeature_active_active_active_segdata <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ) { vpx_clear_system_r ( ) ; } else if ( segfeature_active_active ( cpi, cm -> bit_depth <S2SV_ModStart> i ) ; } else if ( segfeature_active",0
1632,<S2SV_ModStart> == 0 ) return - EINVAL ; if (,0
1633,"<S2SV_ModStart> ( void ) TIFFGetFieldDefaulted <S2SV_ModEnd> ( in,",1
1634,<S2SV_ModStart> error_object ) { <S2SV_ModEnd> error_t error =,0
1635,<S2SV_ModStart> ( len - 1 <S2SV_ModEnd> ) ; },0
1636,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1637,"<S2SV_ModStart> ""corrupt <S2SV_blank> BSON"" ) ; VALIDATE_TEST ( ""test59.bson"", BSON_VALIDATE_NONE, 9, BSON_VALIDATE_NONE, ""corrupt <S2SV_blank> BSON"" ) ;",1
1638,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( x,0
1639,<S2SV_ModStart> ; ps_dec -> u4_cur_slice_num = 0 ; ps_dec ->,0
1640,<S2SV_ModStart> -> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock,0
1641,<S2SV_ModStart> ; if ( key_data. key_size!= NULL ) { krb5_data. key_data = - ENOMEM ; goto err ; } if ( key_data == NULL ) { err = - ENOMEM ; goto err ; } <S2SV_ModStart> key_data ) ; kfree ( key_data ) ;,0
1642,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ) ),0
1643,<S2SV_ModStart> ( task ) <S2SV_ModEnd> return - EINVAL,0
1644,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 2 ] = 0x87 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, state -> data, state -> data, 1, 1 ) < 0 ) err ( ""command <S2SV_blank> 0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0x86 ; state -> data [ 1 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0 <S2SV_ModEnd> ; if",0
1645,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV <S2SV_ModEnd> null> int <S2SV_ModStart> break ; return ( - 1 ) <S2SV_ModEnd> ; } return,0
1646,<S2SV_ModStart> L ) ; g -> gcstate = GCSswpallgc ;,0
1647,<S2SV_ModStart> - ENOMEM ; * out = 0 ;,0
1648,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ssl_set_error ( struct ssl_t * ssl_log <S2SV_ModEnd> * buffer ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> ssl_log_log ( c <S2SV_ModStart> ( c, ""SSL_WRITE"" ) ) { SSL_ERROR ( ""Cannot <S2SV_blank> read <S2SV_blank> failed"" ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart>!=SSL_free ( s ) ;",0
1649,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int i, <S2SV_ModStart> sock, struct sockaddr_ctx * <S2SV_ModStart> int result ; struct sockaddr_t * cib = NULL ; int ret ; int ret = 0 ; int ret = 0 ; if (! server -> remote_addr ) { <S2SV_ModEnd> err ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> open <S2SV_blank> %s\\n"" <S2SV_ModStart>, server, & client -> remote_addr ) ; } <S2SV_ModEnd> cib = NULL <S2SV_ModStart> = 0 ; int ret = 0 ; if ( ret < 0 ) { <S2SV_ModEnd> ret = - 1 <S2SV_ModStart> ; } } } result = call_alloc ( ""Failed <S2SV_blank> to <S2SV_blank> port <S2SV_blank> cib <S2SV_blank> to <S2SV_blank> %s\\n"", & cib -> remote_addr ) ; if ( ret < 0 ) { <S2SV_ModEnd> c_protocol_error ( & <S2SV_ModStart> ) ; } if ( ret!= NULL ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> ; } } result = crm_protocol_err ( ""Failed <S2SV_blank> to <S2SV_blank> to <S2SV_blank> %s"", remote_addr, remote_addr ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> = NULL ) { <S2SV_ModEnd> crm_protocol = crm_set_",0
1650,<S2SV_ModStart> ; memcpy <S2SV_ModEnd> ( & cpi <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & cpi,0
1651,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1652,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",1
1653,"<S2SV_ModStart> ( ndo, ""%s"", ndo_tstr <S2SV_ModEnd> ) ) ;",0
1654,"<S2SV_ModStart> ctx, expr -> unary. child",1
1655,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1656,"<S2SV_ModStart> int mptctl_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
1657,,0
1658,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1659,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( strlen (,0
1660,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> <= vpx_read_literal <S2SV_ModEnd> ( r ) <S2SV_ModStart> ) { return vpx_read_literal <S2SV_ModEnd> ( r,",0
1661,<S2SV_ModStart> ; int is_valid = ( error == GIT_OK ) <S2SV_ModStart> giterr_clear ( ) <S2SV_ModEnd> ; error =,1
1662,"<S2SV_ModStart> costs, vpx_writer <S2SV_ModEnd> * tree,",0
1663,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int ctx ; FRAME_COUNTS * counts = xd -> counts ; FRAME_COUNTS * counts = xd -> counts ; FRAME_COUNTS * counts = xd -> counts ; FRAME_COUNTS * counts = xd -> counts ; FRAME_COUNTS * counts = xd -> <S2SV_ModEnd> inter [ ctx",0
1664,<S2SV_ModStart> ; } } if ( g -> data == 0 ) return 0 ;,0
1665,<S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH int flags = 0 ; # if CONFIG_VP9_HIGHBITDEPTH res -> bit_depth = 0 ; # if CONFIG_VP9_HIGHBITDEPTH int flags = 0 ; # endif <S2SV_ModStart> NULL ) { # if CONFIG_VP9_HIGHBITDEPTH res = 0 ; goto error <S2SV_ModEnd> ; } # <S2SV_ModStart> NULL ; # if CONFIG_VP9_HIGHBITDEPTH int new_buf = 0 ; # endif <S2SV_ModStart> NULL ; } # if CONFIG_VP9_HIGHBITDEPTH if ( stream -> bit_depth ) { new_buf. bit_depth = 0 ; } # if CONFIG_VP9_HIGHBITDEPTH if ( decoderConfig. bit_depth!= NULL ) { error = 0 ; } # endif <S2SV_ModStart> NULL ; } # ifdef CONFIG_VP9_HIGHBITDEPTH if ( stream -> bit_depth!= NULL ) { log_warn ( NULL ; } # endif <S2SV_ModStart> NULL ; } # if CONFIG_VP9_HIGHBITDEPTH return NULL ; } # endif <S2SV_ModStart> NULL ; } # endif,0
1666,<S2SV_ModStart> = 0 ; ND_TCHECK_16BITS ( cp ) ;,0
1667,"<S2SV_ModStart> REPLY, 0",0
1668,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = other ; unix_peer_wakeup_disconnect_wakeup ( sk, timeo ) ; <S2SV_ModStart> & unix_dgram_peer_wake_disconnect ) ; else if ( unlikely (! task ) ) { error = - EINVAL ; goto done ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!",0
1669,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> ret ) ; ret = - EINVAL ; } <S2SV_ModEnd> for ( i,0
1670,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; if ( <S2SV_ModStart> -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len - A,1
1671,"<S2SV_ModStart> ]. size ; if ( ~ length < 16 ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" )",1
1672,"<S2SV_ModStart> ; stbbr_send ( ""<message=\'stabber@localhost/xmlns=\'stabber@localhost/xmlns=\'>"" ""<message=\'stabber@localhost/xmlns=\'urn:xmpp:xmpp:xmlns=\'chat\'>""",0
1673,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1674,"<S2SV_ModStart> = NULL ; memset ( tok, 0, sizeof ( * tok ) ) ;",0
1675,<S2SV_ModStart> ( av1_dec -> decoder_interface <S2SV_ModEnd> ) ) ;,0
1676,<S2SV_ModStart> ) { return <S2SV_ModEnd> ; } if,0
1677,"<S2SV_ModStart> ), 0",0
1678,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1679,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_in = 0 ; <S2SV_ModStart>, & addrlen_in, & addrlen_out <S2SV_ModEnd> )!= OE_RAISE_ERRNO <S2SV_ModStart> ; if ( <S2SV_ModEnd> addrlen_in!= OE_RAISE_ERRNO ( OE_EINVAL ) ;",0
1680,,1
1681,"<S2SV_ModStart>, s ) ; if (! <S2SV_ModStart>, length ) ) return FALSE",0
1682,"<S2SV_ModStart> final_p, final ; struct ipv6_txoptions * opt <S2SV_ModStart> ) ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> & fl6, <S2SV_ModEnd> opt, & <S2SV_ModStart> ; if ( opt <S2SV_ModEnd> ) ) { <S2SV_ModStart>. opt = <S2SV_ModEnd> opt -> opt_to_unlock",0
1683,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> goto chunk_t <S2SV_ModStart> size ) { int <S2SV_ModStart> uint8_t ret ; int <S2SV_ModEnd> val ; uint32_t <S2SV_ModStart> - 1 ; uint32_t ret ; int <S2SV_ModStart> ; uint32_t ret ; uint32_t ret ; uint32_t ret ; uint32_t val ; if ( argp [ 0 ] + 1 ] ) { if ( ret >= 0 ) goto out ; break ; case <S2SV_ModStart> case 0 : 0 : if ( ret >= 0 ) { php_error = - 1 ; break ; case UINT_MAX - 1 ) ; break ; case '\\n"" : 0 ; break ; case UINT_MAX : 0 ; break ; default : 0 ; default : 0 ; break ; case <S2SV_ModStart> case 0 : if ( argp [ 0 ] > 0 ] ) { size_t ( uint32_t ) ; uint32_t args [ i ] ) ; unsigned_size = 0 ; uint32_t ( p [ 0 ] ) ; if ( ret < 0 ) goto out ; break ; case <S2SV_ModStart> case '\\n"" ) ; break ; default :",0
1684,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPDRL <S2SV_ModEnd>, 0x000ReadReg ( <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPDRL <S2SV_ModEnd>, dm9000ReadReg ( <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPDRL <S2SV_ModEnd> ) ; while <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR_EPOS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; }",0
1685,"<S2SV_ModStart>, buffer, t2p -> tiff_datasize,",1
1686,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
1687,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_decode ( NSC_CONTEXT <S2SV_ModStart> context ) ; BYTE * context ; size_t pos = 0 ; <S2SV_ModStart> ; if (! context ) return FALSE ; if ( context -> width > 0 ) return FALSE ; <S2SV_ModStart> ; } } return FALSE ;,0
1688,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1689,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1690,"<S2SV_ModStart> REPLY, 0",0
1691,"<S2SV_ModStart> ; rc = kmem_calloc ( cib, <S2SV_ModEnd> ) ; } if",0
1692,<S2SV_ModStart> addr = 0 ; if ( unlikely (! address_len ) ) return - EFAULT ;,0
1693,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int sf_mv_block_size, int <S2SV_ModEnd> VP9_COMP * <S2SV_ModStart>, int best_s, int <S2SV_ModEnd> best_s, int <S2SV_ModStart> ; if ( cpi -> mv. mv_sf -> mv_sf. mv_filter <S2SV_ModEnd> ) { int <S2SV_ModStart> ; return ; } else { memset <S2SV_ModEnd> ( x -> <S2SV_ModStart>, ref_mv. mv_sf -> mv. mv_err ) ; memset <S2SV_ModEnd> ( vp -> <S2SV_ModStart> == NULL ) { <S2SV_ModStart> return - 1 ; }",0
1694,<S2SV_ModStart> ; if ( hd = 0 <S2SV_ModEnd> ; if (,0
1695,<S2SV_ModStart> || child -> status == 0 && child ->,0
1696,"<S2SV_ModStart> ( msg_name, msg_sys -> msg_name, <S2SV_ModStart> -> name, msg_name <S2SV_ModEnd> -> msg_name, <S2SV_ModStart> -> name, msg_name <S2SV_ModEnd> -> name,",0
1697,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
1698,"<S2SV_ModStart> number_colormaps, number_planes, number_planes_filled <S2SV_ModStart> -> rows ; number_planes_filled = ( number_planes % 2 == 0 )? number_planes : number_planes_filled ; <S2SV_ModStart> ( number_planes_filled + number_planes_filled <S2SV_ModEnd> ) == 0",0
1699,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1700,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1701,<S2SV_ModStart> client ) { <S2SV_ModEnd> if ( client <S2SV_ModStart> ) ; } free ( client ) ;,0
1702,<S2SV_ModStart> -> pmu ) <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1703,<S2SV_ModStart> -> files ) ; <S2SV_ModEnd> if ( x,0
1704,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1705,"<S2SV_ModStart> -> dentry ; memset ( & old_dentry, 0, 0 ) ;",0
