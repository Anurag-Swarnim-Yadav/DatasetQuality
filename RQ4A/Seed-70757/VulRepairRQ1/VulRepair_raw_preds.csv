,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; if ( n2size < 1 ) <S2SV_ModEnd> { applog (,0
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : ND_TCHECK_8BITS ( tptr ) ; <S2SV_ModStart> 2 ) { ND_TCHECK_8BITS ( tptr + 2 ) ; <S2SV_ModStart> ( eap_type_values, ""unknown"", subtype ), subtype, * ( tptr + 4 ) )",0
2,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
3,"<S2SV_ModStart> ( ( ym = kmalloc ( sizeof ( struct yamdrv_mcs ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( ( ym -> bits > YAM_MAXBITS ) || ( ym -> bitrate > YAM_MAXBITRATE ) ) { kfree ( ym ) ; return - EINVAL ; } add_mcs ( ym -> bits, ym -> bitrate, 0 ) ; if ( ( ym = kmalloc ( sizeof ( struct yamdrv_mcs ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( ( ym = kmalloc ( sizeof ( struct yamdrv_mcs ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( ( ym = kmalloc ( sizeof ( struct yamdrv_mcs ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( copy_from_user ( ym, ifr -> ifr_data, sizeof ( struct yamdrv_mcs ), GFP_KERNEL )",0
4,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
5,"<S2SV_ModStart>, offset ; if ( avio_feof ( f ) ) { index -> item_count = 0 ; av_freep ( & index -> items ) ; return AVERROR_INVALIDDATA ; }",1
6,<S2SV_ModStart> * tpg ; u16 <S2SV_ModEnd> tpgt ; int <S2SV_ModStart> ; if ( kstrtou16 <S2SV_ModEnd> ( name + <S2SV_ModStart> || tpgt > VHOST_SCSI_MAX_TARGET <S2SV_ModEnd> ) return ERR_PTR,0
7,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
8,"<S2SV_ModStart> { u32 data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; kvm_read_guest_cached ( vcpu -> kvm, & <S2SV_ModEnd> vcpu -> arch <S2SV_ModStart>. apic -> vapic_cache, & data, sizeof ( u32 ) <S2SV_ModEnd> ) ; apic_set_tpr",1
9,<S2SV_ModStart> src ) ; switch ( src -> state ) { case TASK_UNINTERRUPTIBLE : __switch_to_tm ( src ) ; case TASK_UNINTERRUPTIBLE : __switch_to_tm ( src ) ; break ; case TASK_UNINTERRUPTIBLE : __switch_to_tm ( src ) ; break ; case TASK_UNINTERRUPTIBLE : __switch_to_tm ( src ) ; break ; default : return - 1 ; } break ; case TASK_UNINTERRUPTIBLE : __switch_to_tm ( src ) ; __switch_to_tm ( src ) ; case TASK_UNINTERRUPTIBLE : __switch_to_tm ( src ) ; break ; case TASK_UNINTERRUPTIBLE : __switch_to_tm ( src ) ; break ; case TASK_UNINTERRUPTIBLE : __switch_to_tm ( src ) ; break ; default : return - 1 ; },0
10,<S2SV_ModStart> item ) { <S2SV_ModEnd> cJSON * c <S2SV_ModStart> -> child ; <S2SV_ModEnd> while ( c <S2SV_ModStart> > 0 ) <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; <S2SV_ModEnd> return c ;,0
11,"<S2SV_ModStart> ',' ) { ext3_msg ( sb, KERN_ERR, ""invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; * data = ( void * ) options ; return 1 ; } if ( * options!= ',' ) { ext3_msg ( sb, KERN_ERR, ""invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char *",0
12,"<S2SV_ModStart> skb ) ; fptr = kmalloc ( skb -> len + frag_hdr_sz, GFP_ATOMIC ) ; if (! fptr ) goto out ;",0
13,"<S2SV_ModStart> u32 event_id, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart> & data, <S2SV_ModEnd> regs ) ;",0
14,"<S2SV_ModStart> { # ifndef _MSC_VER <S2SV_ModEnd> char buf [ <S2SV_ModStart> ( data ) ] ; # else char * buf ; int i ; leaf = ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) { fileblock -= grub_le_to_cpu32 ( ext [ i ]. block ) ; if ( fileblock >= grub_le_to_cpu16 ( ext [ i ]. len ) ) return 0 ; else { grub_disk_addr_t start ; start = grub_le_to_cpu32 ( ext [ i ]. start_hi ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext",0
15,"<S2SV_ModStart> fdct16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> 8 ] ; tran_high_t temp1, temp2 ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 16 ] ; input [ 2 ] = in [ 2 ] + in [ 14 ] ; input [ 3 ] = in [ 3 ] + in [ 14 ] ; input [ 4 ] = in [ 4 ] + in [ 15 ] ; input [ 5 ] = in [ 5 ] + in [ 16 ] ; input [ 6 ] = in [ 6 ] + in [ 10 ] ; input [ 7 ] = in [ 7 ] + in [ 8 ] ; step1 [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in",0
16,<S2SV_ModStart> goto err_unlock ; if ( ( attr -> prog_flags & BPF_F_STRICT_DATA_WRITE ) && ( attr -> prog_flags & BPF_F_STRICT_DATA_WRITE ) ) { ret = - EINVAL ; goto err_unlock ; } <S2SV_ModStart> env ) ; err_unlock : if (! ret && ( attr -> prog_flags & BPF_F_STRICT_DATA_WRITE ) ) { ret = - EINVAL ; if ( attr -> prog_flags & BPF_F_STRICT_DATA_WRITE ) { ret = - EINVAL ; goto err_unlock ; } else if (! ret && ( attr -> prog_flags & BPF_F_STRICT_DATA_WRITE ) ) { ret = - EINVAL ; goto err_unlock ; },0
17,"<S2SV_ModStart> int i ; if (! config -> sample_rate ) { strcpy ( wpc -> error_message, ""sample <S2SV_blank> rate <S2SV_blank> cannot <S2SV_blank> be <S2SV_blank> zero!"" ) ; return FALSE ; }",1
18,"<S2SV_ModStart> = 0 ; unsigned char sense_buffer [ SCSI_SENSE_BUFFERSIZE ] ; unsigned char sense_buffer [ SCSI_SENSE_BUFFERSIZE ] ; <S2SV_ModStart> -> buflen, sense_buffer, sense_buffer, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( cgc -> sense ) memcpy ( cgc -> sense, sense_buffer, sizeof ( * <S2SV_ModEnd> cgc -> sense <S2SV_ModStart> cgc -> sense ) <S2SV_ModEnd> ) ; if",0
19,"<S2SV_ModStart> ; if ( hlen < 0 || hlen > len ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif <S2SV_ModStart> ; if ( hlen < 0 || hlen > len ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; } else { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif",0
20,"<S2SV_ModStart> void search_filter_level ( const YV12_BUFFER_CONFIG * sd, <S2SV_ModStart> ) { VP9_COMMON * const cm = & cpi -> common ; struct loopfilter * const lf = cm -> lf ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; int filt_mid = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int filter_step = MIN ( filt_mid / 4, max_filter_level ) ; int filter_err = MAX ( filt_mid - filter_step, min_filter_level ) ; int bias = ( best_err >> ( 15 - ( filt_mid / 8 ) ) ) * filter_step ; if ( cpi -> twopass. section_in",0
21,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
22,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write_token <S2SV_ModEnd> ( w, <S2SV_ModStart> ) vpx_write ( <S2SV_ModEnd> sign, mvcomp <S2SV_ModStart> sign ) ; vpx_write_token <S2SV_ModEnd> ( w,",0
23,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ralg -> seedsize,1
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (,1
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> ( ) ) { <S2SV_ModStart> ( ) ; },1
26,"<S2SV_ModStart> char * fmtname ; int verbose_flag <S2SV_ModStart> = 0 ; verbose_flag = 0 ; <S2SV_ModStart> ; while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_VERBOSE : verbose_flag = 1 ; break ; case <S2SV_ModStart> break ; case OPT_INFILE : infile = jas_optarg ; break ; case OPT_HELP : default : usage ( ) ; break ; } } if ( ( fmtid = jas_image_getfmt ( instream ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if (! ( image = jas_image_decode ( image, fmtid, 0 ) ) ) { abort ( ) ; } jas_stream_close ( instream ) ; fmtid = jas_image_getfmt ( image ) ; if (! ( fmtid = jas_image_getfmt ( image ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if (! ( image = jas_image_decode ( image, fmtid, 0 ) ) ) { abort (",0
27,"<S2SV_ModStart> esr ) { console_verbose ( ) ; pr_crit ( ""Bad <S2SV_blank> mode <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> handler <S2SV_blank> detected, <S2SV_blank> code <S2SV_blank> 0x%08x\\n"" <S2SV_ModEnd>, handler [ <S2SV_ModStart> esr ) ; die_if_kernel ( ""Oops <S2SV_blank> - <S2SV_blank> bad <S2SV_blank> mode"", regs, 0 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
28,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ( ndo, ""%s"", tok2str ( l2tp_cc_direction2str, NULL, ""Direction-#%u"", * ( ( const u_char * ) ptr ++ ) ) ) ; ptr ++ ; length -= 2 ; if ( length < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModEnd> if ( length <S2SV_ModStart> 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; print_string ( ndo, ptr, length - 5 ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * <S2SV_ModEnd> alt ; alt <S2SV_ModStart> ; if (! alt ) return - ENODEV <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart> ( udev, alt -> <S2SV_ModEnd> desc. bInterfaceNumber <S2SV_ModStart> bInterfaceNumber, alt -> desc. bAlternateSetting",1
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart> int fromlen, char <S2SV_ModEnd> * to ) <S2SV_ModStart> elen = 0 <S2SV_ModEnd> ; switch ( <S2SV_ModStart> case 2 : if ( elen == fromlen ) return - ENAMETOOLONG ; <S2SV_ModStart> = '/' ; memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += 3 ; elen -= 3 ; <S2SV_ModStart> case 4 : if ( elen == fromlen ) return - ENAMETOOLONG ; <S2SV_ModStart> += 2 ; elen -= 2 ; <S2SV_ModStart> case 5 : if ( elen == fromlen ) return - ENAMETOOLONG ; <S2SV_ModStart> += 2 ; elen -= 2 ; <S2SV_ModStart> case 6 : if ( elen == fromlen ) return - ENAMETOOLONG ; <S2SV_ModStart> = '\\0' ; return 0 ;",0
31,"<S2SV_ModStart> = server. protected_mode == 1 || server. protected_mode == 0 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( server. protected_mode == 0 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( server. protected_mode == 0 && server. protected_mode == 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } } else if ( server. protected_mode == 0 && server. protected_mode == 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( server. protected_mode == 0 && server. protected_mode == 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( server. protected_mode == 0 && server. protected_mode == 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'",0
32,<S2SV_ModStart> unsigned long flags ; if ( qid > NVMET_NR_QUEUES ) return NULL,1
33,"<S2SV_ModStart> ) ) ; usb_set_intfdata ( interface, dev ) ; retval = usb_register_dev ( interface, & tower_class ) ; if ( retval ) { dev_err ( idev, ""Not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> get <S2SV_blank> a <S2SV_blank> minor <S2SV_blank> for <S2SV_blank> this <S2SV_blank> device\\n"" ) ; usb_set_intfdata ( interface, NULL ) ; goto error ; } result = usb_control_msg ( interface, & get_version_reply, 1 ) ; if ( result < 0 ) { dev_err ( idev, ""Not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> get <S2SV_blank> a <S2SV_blank> minor <S2SV_blank> for <S2SV_blank> this <S2SV_blank> device\\n"" ) ; goto error ; } usb_set_intfdata ( interface, dev ) ; retval = usb_register_dev ( interface, & tower_class ) ; if ( retval ) { dev_err ( idev, ""Not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> get <S2SV_blank> a <S2SV_blank> minor <S2SV_blank> for <S2SV_blank> this <S2SV_blank> device\\n"" ) ; goto error ; } if ( result < 0 ) { dev_err ( idev, ""Not <S2SV_blank> able <S2SV_blank> for <S2SV_blank> this <S2SV_blank> device\\n"" ) ; goto error ; } usb_set_intfdata ( interface",0
34,<S2SV_ModStart> + i ; if ( st32vdaux < 1 || st32vdaux > SIZE_MAX ) { sdb_free ( sdb_verdef ) ; goto out_error ; } if ( st32vdaux < 1 || st32vdaux <S2SV_ModEnd> > SIZE_MAX ) <S2SV_ModStart> > SIZE_MAX ) { sdb_free ( sdb_verdef ) ; goto out_error ; } if ( st32vdaux < 1 || st32vdaux <S2SV_ModEnd> > SIZE_MAX ) <S2SV_ModStart> > SIZE_MAX ) { sdb_free ( sdb_verdef ) ; goto out_error ; },0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool construct_get_dest_keyring ( struct key * dest_keyring ) { struct request_key_auth * authkey ; <S2SV_ModStart> ; } else if ( cred -> request_key_auth ) { down_read ( & authkey -> sem ) ; dest_keyring = key_get ( authkey -> dest_keyring ) ; if (! dest_keyring ) goto out ; } break ; case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( cred -> process_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : dest_keyring = key_get ( cred -> user -> session_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : dest_keyring = key_,0
36,<S2SV_ModStart> = create_spnego_ctx ( 0,0
37,"<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if (! sock_flag ( sk, SOCK_ZAPPED ) ) return - EINVAL ; if (",0
38,<S2SV_ModStart> <S2SV_null> static inline size_t <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> void ) { size_t <S2SV_ModEnd> max = 0 <S2SV_ModStart> = ( ( ( <S2SV_ModStart> ) & STACK_RND_MASK <S2SV_ModEnd> ) << PAGE_SHIFT,0
39,"<S2SV_ModStart>, _ ( ""_Cancel"" ), GTK_RESPONSE_CANCEL <S2SV_ModEnd> ) ; if <S2SV_ModStart>, _ ( ""_Cancel"" ), GTK_RESPONSE_CANCEL <S2SV_ModEnd> ) ; } <S2SV_ModStart>, _ ( ""_Launch <S2SV_blank> Anyway"" ), GTK_RESPONSE_RUN <S2SV_ModEnd> ) ; } <S2SV_ModStart>, _ ( ""_Mark <S2SV_blank> as <S2SV_blank> _Trusted"" ), GTK_RESPONSE_MARK_TRUSTED <S2SV_ModEnd> ) ; }",0
40,<S2SV_ModStart> int len ; if (! tm ) { str = g_strdup ( asctime ( & tm ) ) ; len = strlen ( str ) ; } else,0
41,"<S2SV_ModStart> ( password ) ) ; md5_init ( & md5_secret ) ; MD5Update ( & md5_secret, ( unsigned char * ) password, strlen ( password ) ) ; my_md5 = md5_secret ; MD5Final ( misc, & my_md5 ) ; xor ( hashed [ 0 ], misc, AUTH_PASS_LEN ) ; for ( i = 1 ; i < ( length >> 4 ) ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5, & hashed [ i * AUTH_PASS_LEN ], AUTH_PASS_LEN ) ; xor ( hashed [ i * AUTH_PASS_LEN ], misc, AUTH_PASS_LEN ) ; for ( i = 1 ; i < ( length >> 4 ) ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5, & hashed [ i * AUTH_PASS_LEN ], AUTH_PASS_LEN ) ; xor ( hashed [ i * AUTH_PASS_LEN ], misc, AUTH_PASS_LEN ) ; }",0
42,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x51 ; if ( dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; mutex_unlock ( & d -> data_mutex ) ; adap <S2SV_ModEnd> -> fe_adap [ <S2SV_ModStart> ; if ( adap <S2SV_ModEnd> -> fe_adap [ <S2SV_ModStart> ( ts2020_attach, adap <S2SV_ModEnd> -> fe_adap [ <S2SV_ModStart>, & d <S2SV_ModEnd> -> i2c_adap )",0
43,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
44,"<S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> options <S2SV_blank> 0x00000000"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> options <S2SV_blank> 0x00000000"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> options <S2SV_blank> 0x00000000"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> options <S2SV_blank> 0x00000000"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w ->",0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
46,"<S2SV_ModStart> tsample_t s ; uint16 bps = 0 ; ( void ) TIFFGetField ( in, TIFFTAG_BITSPERSAMPLE, & bps ) ; if ( bps!= 8 ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can <S2SV_blank> only <S2SV_blank> handle <S2SV_blank> BitsPerSample=8 <S2SV_blank> in <S2SV_blank> %s"", ""cpContig2SeparateByRow"" ) ; return 0 ; }",1
47,"<S2SV_ModStart> ) ; struct hugepage_subpool * spool = ( struct hugepage_subpool <S2SV_ModEnd> * ) page_private <S2SV_ModStart> hugetlb_lock ) ; hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, 1 )",1
48,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) { return AVERROR_EOF ; } if (,1
49,"<S2SV_ModStart> ; if ( e == NULL ) goto not_found ; r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) goto not_found ; r = sd_bus_call_method ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_bus_message_read ( reply, ""u"", & mapped ) ; if ( r < 0 ) { if ( sd_bus_message_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_bus_call",0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return try_get_page <S2SV_ModEnd> ( buf ->,1
51,"<S2SV_ModStart> cp, ep2, map, nmap ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, cp, ep2 ) ; else cp = ikev2_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev2_",0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart> NULL, NULL, & timeout ) ; if (! FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) return FALSE",0
54,<S2SV_ModStart> config -> pm_max_requests ; fpm_globals. sockets = wp -> config -> pm_sockets,0
55,"<S2SV_ModStart> detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> int j ; TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> twopass -> stats_in ; FIRSTPASS_STATS tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; <S2SV_ModEnd> if ( tmp_next_frame <S2SV_ModStart> pcnt_inter - tmp_next_frame. <S2SV_ModStart> pcnt_motion < 0.999 <S2SV_ModEnd> ) break ; <S2SV_ModStart> } reset_fpf_position ( twopass, position ) ; } return trans_to_still <S2SV_ModEnd> ; } <S2SV_null>",0
56,<S2SV_ModStart> 0 ; } err = handle -> h_err ; <S2SV_ModStart> h_transaction ) { rc <S2SV_ModEnd> = jbd2_journal_stop ( <S2SV_ModStart> ) ; return err? err : rc <S2SV_ModEnd> ; } sb <S2SV_ModStart> t_journal -> j_private <S2SV_ModEnd> ; rc =,1
57,"<S2SV_ModStart> ; if ( unlikely ( offset > i_size_read ( inode ) - size ) ) { ret = ext4_convert_unwritten_extents_nolock ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten <S2SV_blank> extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; goto out ; } }",0
58,<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = args -> valuelen ;,1
59,"<S2SV_ModStart> alg ) { if (! capable ( CAP_SYS_MODULE ) ) { <S2SV_ModStart> name ) ; } else { request_module ( ""crypto-%s"", name ) ; } <S2SV_ModEnd> alg = crypto_alg_lookup <S2SV_ModStart> mask & CRYPTO_ALG_NEED_FALLBACK <S2SV_ModEnd> ) ) request_module <S2SV_ModStart> ) ) request_module ( ""crypto-%s-all"" <S2SV_ModEnd>, name )",0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> len - 2 ; if ( len < stlv_len ) goto trunc ; ND_TCHECK2 ( * tptr, stlv_len ) <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; <S2SV_ModStart> * tptr, stlv_len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; stlv_len = stlv_len - ISIS_",0
61,"<S2SV_ModStart> { return reply_msg ( c, MSG_JOB_TOO_BIG ) ; } if ( body_size + 2 > job_data_size ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ;",0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,<S2SV_ModStart> == 12 && ( <S2SV_ModStart> flags & TH_SYN ),1
64,"<S2SV_ModStart> -> ipc_socket ; int procfd = payload -> procfd ; lxc_attach_options_t * options <S2SV_ModStart> int fd ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0): <S2SV_blank> %s"" <S2SV_ModStart> ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (1): <S2SV_blank> %s"", strerror ( errno ) <S2SV_ModEnd> ) ; shutdown <S2SV_ModStart> { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (2): <S2SV_blank> %s"", strerror ( errno ) ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } status = - 1 ; ret = lxc_read_nointr_expect ( ipc_socket, & status, sizeof ( status ), & expected ) ; if ( ret <= 0 ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (2): <S2SV_blank> %s"", strerror ( errno ) ) ; shutdown ( ipc_socket, SHUT_RDWR",0
65,"<S2SV_ModStart> = GIT_PKT_NG ; if (! ( ptr = strchr <S2SV_ModEnd> ( line, <S2SV_ModStart>'<S2SV_blank>') ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' ; * out = ( git_pkt * ) pkt ; return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
66,"<S2SV_ModStart> ; if ( ( ( OPJ_UINT32 ) header -> biBitCount ) == 0 ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> biBitCount <S2SV_blank> %d\\n"", 0 ) ; return OPJ_FALSE ; } if ( ( ( OPJ_UINT32 ) header -> biWidth ) == ( OPJ_UINT32 ) header -> biHeight ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> biWidth <S2SV_blank> %d\\n"", header -> biWidth ) ; return OPJ_FALSE ; } if ( ( ( OPJ_UINT32 ) header -> biWidth ) == ( OPJ_UINT32 ) header -> biHeight ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> biWidth <S2SV_blank> %d\\n"", header -> biWidth ) ; return OPJ_FALSE ; } if ( ( ( OPJ_UINT32 ) header -> biHeight ) == ( OPJ_UINT32 ) header -> biHeight ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> biHeight <S2SV_blank> %d\\n"", header -> biHeight ) ; return OPJ_FALSE ; }",0
67,<S2SV_ModStart> NULL ; } sas_probe_devices ( port ) ;,1
68,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> ENOBUFS ; } memset ( & line, 0, sizeof ( line ) ) ;",1
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_blk_ioctl ( bd, cmd ) ; if ( ret < 0 ) return ret ;",1
72,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart>, wStream * s ) { if (! Stream_SafeSeek ( s, 4 ) ) return FALSE <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;",0
73,<S2SV_ModStart> * ureq ; unsigned <S2SV_ModStart> return - EFAULT ; if ( req_len > ( QETH_BUFSIZE - IPA_PDU_HEADER_SIZE - sizeof ( struct qeth_ipacmd_setadpparms_hdr ) - sizeof ( struct qeth_ipacmd_setadpparms_hdr ) ) ) return - EINVAL,0
74,"<S2SV_ModStart> int m ; if ( n < 0 ) { jas_deprecated ( ""negative <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_pad"" ) ; }",1
75,"<S2SV_ModStart> ) ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> ) ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> } } } if ( num!= 1 ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; return AVERROR_PATCHWELCOME ; } <S2SV_ModStart> ) ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> ) ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> } den = avio_read_varlen ( pb ) ; if ( den!= 1 ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", den ) ; return AVERROR_PATCHWELCOME ; } if ( num!= den ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d\\n",0
76,"<S2SV_ModStart> AV_LOG_ERROR, ""could <S2SV_blank> not <S2SV_blank> resolve <S2SV_blank> material <S2SV_blank> track <S2SV_blank> strong <S2SV_blank> ref\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! ( source_track = mxf_resolve_strong_ref ( mxf, & mxf -> tracks_refs [ i ], MXFTrack ) ) ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""could <S2SV_blank> not <S2SV_blank> resolve <S2SV_blank> source <S2SV_blank> track <S2SV_blank> strong <S2SV_blank> ref\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! ( source_track = mxf_resolve_strong_ref ( mxf, & mxf -> tracks_refs [ i ], MXFStream ) ) ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""could <S2SV_blank> not <S2SV_blank> resolve <S2SV_blank> source <S2SV_blank> track <S2SV_blank> strong <S2SV_blank> ref\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> if (! ( source_track = mxf_resolve_strong_ref ( mxf, & mxf -> tracks_refs [ i ], MXFTrack ) ) ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""could <S2SV_blank>",0
77,"<S2SV_ModStart> mntent, path, 0",0
78,<S2SV_ModStart> + 10 ; if ( psf -> fileoffset < psf -> filelength ) { <S2SV_ModStart> ; } ; } ;,1
79,<S2SV_ModStart> ] ) ; ND_TCHECK_16BITS ( p + l2info -> cookie_len ) ; <S2SV_ModStart> += jnx_ext_len ; ND_TCHECK_16BITS ( p + l2info -> cookie_len ) ; <S2SV_ModStart> += jnx_ext_len ; ND_TCHECK_16BITS ( p + l2info -> cookie_len ) ; <S2SV_ModStart> += jnx_ext_len ; ND_TCHECK_16BITS ( p + l2info -> cookie_len ) ; <S2SV_ModStart> += jnx_ext_len ; ND_TCHECK_16BITS ( p + l2info -> cookie_len ) ;,0
80,<S2SV_ModStart> NF_STOLEN ; return err == 0? NF_ACCEPT : NF_DROP <S2SV_ModEnd> ; } <S2SV_null>,1
81,"<S2SV_ModStart> * up ; size_t up_len ; <S2SV_ModStart> rta ) ; up_len = nla_len ( rta ) ; if ( up_len > XFRM_REPLAY_STATE_ESN_MAX ) up_len = XFRM_REPLAY_STATE_ESN_MAX ; <S2SV_ModStart> ; p = kzalloc ( up_len, GFP_KERNEL ) ; if (! p ) return - ENOMEM ; pp = kzalloc ( up_len, GFP_KERNEL ) ; if (! pp ) return - ENOMEM ;",0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
83,<S2SV_ModStart> : { result = ( MagickRealType ) <S2SV_ModEnd> pixel & ( <S2SV_ModStart> value + 0.5 <S2SV_ModEnd> ) ; break <S2SV_ModStart> : { result = ( MagickRealType ) <S2SV_ModEnd> pixel << ( <S2SV_ModStart> ; break ; } case RightShiftEvaluateOperator : { result = ( MagickRealType ) ( ( size_t ) pixel >> ( value + 0.5 ) ) ; break ; } case LeftShiftEvaluateOperator : { result = ( MagickRealType ) ( ( size_t ) pixel << ( value + 0.5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> : { result = ( MagickRealType ) <S2SV_ModEnd> pixel << ( <S2SV_ModStart> value + 0.5 <S2SV_ModEnd> ) ; break,0
84,"<S2SV_ModStart> ) ) ; btif_config_set_null ( bdstr, ""LinkKey"", NULL ) ;",0
85,"<S2SV_ModStart> ( buf = jas_alloc3 ( bufsize, numcols <S2SV_ModEnd>, sizeof (",1
86,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if ( usage >= UINT32_MAX ) return VPX_CODEC_INVALID_PARAM ; <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; } else { res = VPX_CODEC_INVALID_PARAM ; for ( map = iface -> enc. cfg_maps ; map -> usage >= 0 ; map -- ) { * cfg = map -> cfg ; cfg -> g_usage = usage ; res = VPX_CODEC_OK ; break ; } } <S2SV_ModEnd> return res ;,0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> gso. type ) ; netbk_fatal_tx_err ( vif",1
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> < 0 ) <S2SV_ModEnd> bitmap_pos = ext_index_add_object <S2SV_ModStart> name ) ; <S2SV_ModEnd> bitmap_set ( base",1
89,"<S2SV_ModStart> xfr_cmd, fname <S2SV_ModEnd> ) ; free",1
90,<S2SV_ModStart> mixer ) { snd_usb_mixer_disconnect ( mixer ) ;,1
91,<S2SV_ModStart> ) { struct packet_rollover * rollover = NULL ; struct <S2SV_ModStart> EINVAL ; } mutex_lock ( & fanout_mutex ) ; err = - EINVAL ; <S2SV_ModStart> -> running ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> fanout ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { err = - ENOMEM ; <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_huge <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } match =,0
92,"<S2SV_ModStart> ( newsk ) ; memcpy <S2SV_ModEnd> ( newnp, <S2SV_ModStart> ) ) ; sctp_copy_sock ( newsk, sk, asoc ) ; rcu_read_lock ( ) ; opt = rcu_dereference ( np -> opt ) ; if ( opt ) opt = ipv6_dup_options ( newsk, opt ) ; RCU_INIT_POINTER ( newnp -> opt, opt ) ; RCU_INIT_POINTER ( newnp -> opt, opt ) ; RCU_INIT_POINTER ( newnp -> opt, opt ) ;",0
93,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
94,"<S2SV_ModStart> uint64_t dx_time ) { if ( frame_in < 0 || frame_out < 0 ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out ) ; return ; }",0
95,"<S2SV_ModStart> JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } if (! DBIc_ACTIVE ( imp_sth ) ) { if ( imp_sth -> fetch_done ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } if (! imp_sth -> done_desc ) { if (! dbd_describe ( imp_sth, imp_sth ) ) { do_error ( sth, JW_ERR_SEQUENCE, ""Error <S2SV_blank> while <S2SV_blank> describe <S2SV_blank> result <S2SV_blank> set."", NULL ) ; return Nullav ; } }",0
96,"<S2SV_ModStart> } enc28j60SetBit ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60SetBit ( interface, ENC28J60_ECON1, ENC28J",0
97,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> start_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_start_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> start_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_start_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o ->",0
98,"<S2SV_ModStart> ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""error"" ) ; http_response_send ( res ) ; return ; } if ( page && ( <S2SV_ModStart> ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""error"" ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response",0
99,"<S2SV_ModStart> ; if ( ext4_should_dioread_nolock ( inode ) ) { set_buffer_uninit ( bh_result ) ; <S2SV_ModStart> inode, EXT4_STATE_DIO_UNWRITTEN ) ; goto out ; } if ( flags == EXT4_GET_BLOCKS_PRE_IO ) { ret = ext4_split_unwritten_extents ( handle, inode, path, iblock, max_blocks, flags ) ; if ( io ) io -> flag = EXT4_IO_UNWRITTEN ; else ext4_set_inode_state ( inode, EXT4_STATE_DIO_UNWRITTEN ) ; goto out ; } if ( flags & EXT4_GET_BLOCKS_CONVERT ) { ret = ext4_ext_convert_unwritten_extents_endio ( handle, inode, path ) ; if ( ret >= 0 ) ext4_update_inode_fsync_trans ( handle, inode, 1 ) ; goto out2 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_uninit ( bh_result",0
100,<S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> len ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> len ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> len ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> len ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> 0 ; } ND_,0
101,"<S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, cgroup ) ) { ret = - ENOENT ; goto out ; } if (!",1
102,"<S2SV_ModStart> flag ) { ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; ( void ) low_var_thresh ; ( void ) flag ; int mb_rows = source -> y_width >> 4 ; int mb_cols = source -> y_height >> 4 ; unsigned char * limits = cm -> pp_limits_buffer ; ; int mbr, mbc ; ( void ) memset ( limits, ( unsigned char ) ppl, 16 * mb_rows ) ; memset ( limits, ( unsigned char ) ppl, 16 * mb_cols ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ;",0
103,"<S2SV_ModStart> ptr ) { if ( ptr -> length > UINT_MAX - sizeof ( * ptr ) ) return - EINVAL ; <S2SV_ModStart> ) ) ; if ( ptr -> flags & FD_RAW_WRITE ) { long length = ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; } else { long length = ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; } }",0
104,"<S2SV_ModStart> : if (! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) bprm -> per_clear |= PER_CLEAR_ON_SETID ; if (",1
105,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; ce = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS, hash <S2SV_ModEnd> ) ; if <S2SV_ModStart> } error = mb2_cache_entry_insert ( ext4_mb_cache, ce, bh -> b_bdev, bh -> b_blocknr, hash <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } else <S2SV_ModStart> hash ) ; <S2SV_ModEnd> } } <S2SV_null>",0
106,"<S2SV_ModStart> ) ) ; r_socket_read ( s, ( int * ) r_socket_read ( s, ( int * ) r_socket_read ( s, ( int * ) r_socket_read ( s, ( int * ) r_socket_read ( s, ( int * ) r_socket_read ( s, ( int * ) r_socket_read ( s, ( int * ) r_socket_read ( s, ( int ) r_socket_read ( s, ( int ) r_socket_read ( s, ( int * ) r_socket_read ( s, ( int * ) r_socket_read ( s, ( int * ) r_socket_read ( s, ( int * ) r_socket_read ( s, ( int * ) r_socket_read ( s, ( int * ) r_socket_read ( s, ( int * ) r_socket_read ( s, ( int ) r_socket_read ( s, ( int ) r_socket_read ( s, ( int * ) r_socket_read ( s, ( int * ) r_socket_read ( s, ( int ) r_socket",0
107,<S2SV_ModStart> tf = ( <S2SV_ModEnd> luaY_parser ) (,1
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.",1
110,"<S2SV_ModStart> ; dl = kzalloc <S2SV_ModEnd> ( size,",1
111,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> * tptr, const u_int len, const <S2SV_ModStart> * msg ; if ( len < sizeof ( rpki_rtr_pdu ) ) { ND_PRINT ( ( ndo, ""%sRPKI-RTRv%u, <S2SV_blank> %s <S2SV_blank> PDU <S2SV_blank> (%u), <S2SV_blank> length: <S2SV_blank> %u"", indent_string ( 8 ), * tptr, len ) ) ; return len ; } ND_TCHECK2 ( * tptr, len ) ; hexdump = FALSE ; switch ( pdu_type ) { case RPKI_RTR_SERIAL_NOTIFY_PDU : case RPKI_RTR_SERIAL_QUERY_PDU : case RPKI_RTR_RESET_QUERY_PDU : case RPKI_RTR_CACHE_RESET_PDU : break ; case RPKI_RTR_END_OF_DATA_PDU : msg = ( const u_char * ) ( pdu_header + 1 ) ; ND",0
113,"<S2SV_ModStart> ; int n <S2SV_ModEnd> ; skb -> <S2SV_ModStart> rose_facilities_struct ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> data + ROSE_CALL_REQ_FACILITIES_OFF, skb -> len - ROSE_CALL_REQ_FACILITIES_OFF, <S2SV_ModEnd> & facilities )",1
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,"<S2SV_ModStart> } else { if ( ( * varp ) [ 0 ] == '\\0' ) { errmsg = ( char_u * ) N_ ( ""E501: <S2SV_blank> Option <S2SV_blank> \'term\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value <S2SV_blank> set"" ) ; } else if ( ( * varp ) [ 0 ] == '\\0' ) { errmsg = ( char_u * ) N_ ( ""E501: <S2SV_blank> Option <S2SV_blank> \'term\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value <S2SV_blank> set"" ) ; } else if ( ( * varp ) [ 0 ] == '\\0' ) { errmsg = ( char_u * ) N_ ( ""E501: <S2SV_blank> Option <S2SV_blank> \'term\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value <S2SV_blank> set"" ) ; } else if ( ( * varp ) [ 0 ] == '\\0' ) { errmsg = ( char_u * ) N_ ( ""E501: <S2SV_blank> Option <S2SV_blank> \'term\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value <S2SV_blank> set"" ) ; } else if ( ( * varp ) [ 0 ] == '\\0' ) { errmsg = ( char_u * ) N_ ( ""E501: <S2SV_blank> Option <S2SV_blank> \'term\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value <S2SV_blank> set"" ) ; } else",0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret ) goto out ; } break ; case ACL_TYPE_DEFAULT : name = XATTR_NAME_POSIX_ACL_DEFAULT ; break ; default : ret = - EINVAL ; goto out ; } if ( acl ) { size = posix_acl_xattr_size ( acl -> a_count ) ; value = kmalloc ( size, GFP_NOFS ) ; if (! value ) { ret = - ENOMEM ; goto out_free ; } ret = posix_acl_to_xattr ( & init_user_ns, acl, value, size ) ; if ( ret < 0 ) goto out_free ; } if ( new_mode!= old_mode ) { newattrs. ia_mode = new_mode ; newattrs. ia_valid = ATTR_MODE ; ret = __ceph_setattr ( inode, name, value, size, 0 ) ; if ( ret ) goto out_free ; } ret = __ceph_setxattr ( inode, name, value, size, 0 ) ; if (",0
117,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; int ret <S2SV_ModStart> ) ; } o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
118,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",1
119,"<S2SV_ModStart> == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> is <S2SV_blank> absolute"" ) ; return ( ARCHIVE_FAILED ) ; } separator = * src ++ ; } <S2SV_ModEnd> for ( ;",1
120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TPM_RC tpm_kdfa ( TSS2_SYS_CONTEXT * sapi_context, <S2SV_ModStart> { TPM2B_DIGEST tmpResult ; TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2 ; TPM2B_DIGEST tpm2bBits, tpm2b_i_2Ptr = & bufferList [ 8 ] ; TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2 ; UINT8 * tpm2bBitsPtr = & tpm2bBits ; UINT32 bitsSwizzled ; * ( UINT32 * ) tpm2bBitsPtr = bitsSwizzled ; * ( UINT32 * ) tpm2b_i_2Ptr = i_Swizzled ; for ( i = 0 ; i < resultKey -> t. size ; i ++ ) { i_Swizzled = string_bytes_endian_convert_32 ( i ) ; * ( UINT32 * ) tpm",0
121,"<S2SV_ModStart> size_t size ; size_t scaled_size ; size_t scaled_size ; <S2SV_ModStart> 0 ) ||! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; } if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & scaled_size ) ||! jas_safe_size_mul ( scaled_size, cmpt -> cps_, & size ) ) { goto error ; } cmpt -> stream_ = inmem? jas_stream_memopen2 ( 0, scaled_size ) : jas_stream_tmpfile ( ) ; if (! inmem ) { jas_stream_memopen2 ( 0, scaled_size ) ; goto error ; } if (",0
122,<S2SV_ModStart> s ) { if ( s == 0 ) return ( ( tdata_t ) NULL ) ;,0
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! ib_safe_file_access ( fp ) ) ) return - EACCES ; if (,1
124,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
125,<S2SV_ModStart> ( peer ) peer = maybe_get_net <S2SV_ModEnd> ( peer ),1
126,<S2SV_ModStart> ; } } if ( i < ( ( int ) header_buf_used ) ) { <S2SV_ModStart> ; } } if ( i < ( ( int ) header_buf_used ) ) { <S2SV_ModStart> ; } } if ( i < ( ( int ) header_buf_used ) ) { <S2SV_ModStart> ; } } if ( i < ( ( int ) header_buf_used ) ) { <S2SV_ModStart> ; } } if ( i < ( ( int ) header_buf_used ) ) { i ++ ; if ( i < ( ( int ) header_buf_used ) ) { i ++ ; if ( i < ( int ) header_buf_used ) { i ++ ; if ( i < ( int ) header_buf_used ) { i ++ ; if ( i < ( int ) header_buf_used ) { i ++ ; if ( i < ( int ) header_buf_used ) { i ++ ; if ( i < ( int ) header_buf_used ) { i ++ ; if ( i < ( int ) header_buf_used ) { i ++ ; if ( i < ( int ) header_buf_used ) { i ++ ; if ( i < ( int ) header_buf_used ),0
127,<S2SV_ModStart> m_family ) ; if ( proto == ETHERTYPE_LLDP ) { # ifdef ENABLE_DOT2 u_int16_t dot2 [ ] = LLDP_TLV_ORG_DOT2 ; # endif } else if ( proto == ETHERTYPE_LLDP_VLAN ) u_int16_t dot3 [ ] = LLDP_TLV_ORG_VLAN ; else if ( proto == ETHERTYPE_LLDP_VLAN ) u_int16_t med2 [ ] = LLDP_TLV_ORG_MED ; else if ( proto == ETHERTYPE_LLDP_VLAN ) u_int16_t med2 [ ] = LLDP_TLV_ORG_VLAN ; else if ( proto == ETHERTYPE_LLDP_VLAN ) u_int16_t med3 [ ] = LLDP_TLV_ORG_VLAN ; else if ( proto == ETHERTYPE_LLDP_VLAN ) u_int16_t med2 [ ] = LLDP_TLV_ORG_MED ; else if ( proto == ETHERTYPE_LLDP_VLAN ) u_int16_,0
128,"<S2SV_ModStart> ( dp == 0 && pc + asn1_op_lengths [ op ] <= datalen ) { flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; } if ( ( op & ASN1_OP_MATCH__COND && flags & FLAG_MATCHED ) || ( dp + asn1_op_lengths [ op ] <= datalen ) ) { flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; } if ( ( op & ASN1_OP__COND && flags & FLAG_LAST_MATCHED ) || ( dp + asn1_op_lengths [ op ] <= datalen ) ) { flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; } if ( unlikely ( dp >= datalen ) ) { pr_debug ( ""next_op: <S2SV_blank> dp=\\e[32m%zu\\e[m/%zu <S2SV_blank> dp=\\e[33m%zu\\e[m/%zu <S2SV_blank> C=%d <S2SV_blank> J=%d\\n",0
129,<S2SV_ModStart> = 0 ; spin_lock_bh ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ; <S2SV_ModStart> = 0 ; spin_unlock_bh ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ;,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModStart> gb ) { if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> profile = 0 ; s -> avctx -> level = 8 ; } else { s -> avctx -> profile = 0 ; } return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
131,"<S2SV_ModStart> + MIDQ_DATA_BUFF ; unsigned int JQS_WSize = 64 * sizeof ( u16 ) ; <S2SV_ModStart> while ( readw ( mpu <S2SV_ModEnd> -> dev -> <S2SV_ModStart> + JQS_wTail ) < JQS_wSize ) { u16 wTmp ; val = readw ( pwMIDQData + 2 * readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 )",0
132,<S2SV_ModStart> rule ) ; if (! entry -> lsm [ lsm_rule ]. rule ) return - EINVAL ;,1
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> function <S2SV_blank> setTimer() <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> checkSession();\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> timerID <S2SV_blank> = <S2SV_blank> setInterval(\'checkSession()\', <S2SV_blank> %d);\\n"" <S2SV_ModEnd> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }\\n"" ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> function <S2SV_blank> receiveMessage(e) <S2SV_blank> {\\n"" <S2SV_ModStart> e.data <S2SV_blank> + <S2SV_blank> \' <S2SV_blank> from <S2SV_blank> \' <S2SV_blank> + <S2SV_blank> e.origin);\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> console.debug(\'receiveMessage: <S2SV_blank> cross-site <S2SV_blank> scripting <S2SV_blank> attack?\');\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }\\n""",0
136,"<S2SV_ModStart> req, size_t acl_len, bool raw <S2SV_ModEnd> ) { __be32 <S2SV_ModStart> int status ; struct kvec * iov = req -> rq_rcv_buf. head ; uint32_t attrlen, bitmap [ 3 ] ; if ( ( status = decode_op_hdr ( xdr, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( likely ( ( status = decode_attr_length ( xdr, & attrlen, & savep )!= 0 ) ) goto out ; hdrlen = ( u8 * ) xdr -> p - ( u8 * ) iov -> iov_base ; recvd = req -> rq_rcv_buf. len - hdrlen ; if ( attrlen > recvd ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; } <S2SV_ModEnd> xdr_read_pages ( xdr",0
137,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,1
138,<S2SV_ModStart> ; while ( ( i < to_read ) && <S2SV_ModStart>!= 0 ) <S2SV_ModEnd> ) { i,1
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,<S2SV_ModStart> [ plane ] && in -> linesize [ plane ],1
141,"<S2SV_ModStart> { strncpy ( szFileName <S2SV_ModEnd>, pszFileName, <S2SV_ModStart>, pszFileName, <S2SV_ModStart> ; } } else { char szPath [ ODBC_FILENAME_MAX + 1 ] ; * szPath = '\\0' ; _odbcinst_FileINI ( szPath ) ; snprintf ( szFileName, sizeof ( szFileName ) - 5, ""%s/%s"", szPath, pszFileName ) ; } if ( strlen ( szFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( <S2SV_ModStart> == INI_SUCCESS ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( pszKeyName == NULL ) { if ( iniObjectSeek ( hIni, ( char * ) pszAppName )!= INI_SUCCESS ) { iniObjectInsert ( hIni, ( char * ) pszKeyName ) ; } if ( iniPropertySeek ( hIni, ( char * ) psz",0
142,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart> ) ; } if ( owner && * owner ) { if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = 0 ; } } if ( group && * group ) { if ( smatch ( group, ""APPWEB"" ) ) { gid = groupToID ( group ) ; } else { gid = 0 ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; }",0
143,"<S2SV_ModStart> if ( q < p ) { DPRINTF ( ( ""Wrapped <S2SV_blank> around <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> %p\\n"", q, p ) ) ; goto out ; } if ( q",0
144,"<S2SV_ModStart> __be32 new_saddr ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. srr ) daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",1
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> ) ) ; goto trunc ; } if ( len < sizeof ( struct eigrp_common_header ) ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> %s, <S2SV_blank> length: <S2SV_blank> %u <S2SV_blank> (too <S2SV_blank> short)"", tok2str ( eigrp_opcode_values, ""unknown <S2SV_blank> (%u)"", eigrp_com_header -> opcode ), len ) ) ; goto trunc ; } <S2SV_ModStart> case EIGRP_TLV_SHORT : if ( len < sizeof ( struct eigrp_tlv_header ) ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> %s, <S2SV_blank> length: <S2SV_blank> %u <S2SV_blank> (too <S2SV_blank> short)"", tok2str ( eigrp_opcode_values, ""unknown <S2SV_blank> (%u)"", eigrp_com_header -> opcode ), len ) ) ; goto trunc ; } <S2SV_ModStart> case EIGRP_TLV_SHORT : if ( len < sizeof ( struct eigrp_tlv_header ) ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> %s, <S2SV_blank> length: <S2SV_blank> %u <S2SV_blank> (too <S2SV_blank> short",0
147,"<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER int number_aau ; <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; if (! addr ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ) ; return NULL ; } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = hmm_alloc ( & hmm_d, number_aau ) ; <S2SV_ModEnd> if ( addr",0
148,"<S2SV_ModStart> int res ; unsigned int indexes ; long long <S2SV_ModEnd> export_index_table [ indexes <S2SV_ModStart> ] ; res = TEMP_FAILURE_RETRY ( <S2SV_ModStart>. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } indexes = TEMP_LOOKUP_BLOCKS ( sBlk. s. inodes ) ; export_index_table [ indexes ] = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table, indexes ) ; * table_start = export_index_table [ 0",0
149,"<S2SV_ModStart> ) ; } if ( ptr [ strlen ( ptr ) - 1 ]!= '/' ) { rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr + 1 ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr + 1 ) ; rw_exit ( & sdvp -> sdev_contents ) ; devzvol_create_pool_dirs ( dvp ) ; rw_enter ( & sdvp -> sdev_contents ) ; return ( devname_readdir_func ( dvp, uiop, cred, eofp, 0 ) ) ; } ptr = ptr + strlen ( ZVOL_DIR ) ; if ( ( strcmp ( ptr, ""/dsk"" ) == 0 ) || ( strcmp ( ptr, ""/rdsk"" ) == 0 ) ) { rw_exit ( & sdvp -> sdev_contents ) ; devzvol_create_pool_dirs ( dvp ) ; rw_exit ( & sdvp -> sdev_",0
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; if ( flags & EXT4_GET_BLOCKS_CONVERT ) split_flag |= EXT4_EXT_DATA_VALID2 ;,1
151,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret ) goto out ; } break ; case ACL_TYPE_DEFAULT : name = XATTR_NAME_POSIX_ACL_DEFAULT ; break ; default : ret = - EINVAL ; goto out ; } if ( acl ) { size = posix_acl_xattr_size ( acl -> a_count ) ; value = kmalloc ( size, GFP_NOFS ) ; if (! value ) { ret = - ENOMEM ; goto out_free ; } ret = posix_acl_to_xattr ( & init_user_ns, acl, value, size ) ; if ( ret < 0 ) goto out_free ; } if ( new_mode!= old_mode ) { newattrs. ia_mode = new_mode ; newattrs. ia_valid = ATTR_MODE ; ret = __ceph_setattr ( inode, name, value, size, 0 ) ; if ( ret ) goto out_free ; } ret = __ceph_setxattr ( inode, name, value, size, 0 ) ; if (",0
152,"<S2SV_ModStart> HASH_DISABLED ; } else { return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 ) ; }",0
153,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), & final ) ; rcu_read_unlock ( <S2SV_ModEnd> ) ; dst",1
154,"<S2SV_ModStart> = 0.0 ; uint32 nstrips = 0, ntiles = 0 ; uint32 nstrips_left = 0 ; uint32 nstrips_right = 0 ; uint32 nstrips_left = 0 ; uint32 nstrips_left = 0 ; uint32 ntiles_left = 0 ; uint32 planar = 0 ; uint32 input_photometric = 0 ; uint16 input_compression = 0 ; uint16 input_photometric = 0 ; if (! read_buff ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return - 1 ; } nstrips_left = nstrips_left ; ntiles_left = ntiles_left ; nstrips_left = nstrips_left ; ntiles_left = ntiles_left ; planar = 0 ; input_photometric = 0 ; input_compression = 0 ; input_photometric = 0 ; if (! read_buff ) { read_buff = new_buff ; } else { read_buff = read_buff ; } } if (! read_buff ) { TIFFError ( ""loadImage",0
155,"<S2SV_ModStart> = 0 ; # if CONFIG_VP10_ENCODER else if ( strcmp ( global -> codec -> name, ""vp10"" ) == 0 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp11"" ) == 0 ) { ctrl_args = vp11_args ; ctrl_args_map = vp11_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp12"" ) == 0 ) { ctrl_args = vp12_args ; ctrl_args_map = vp12_arg_ctrl_map ; # endif } else if ( arg_match ( & arg, & codec_name, argi ) ) { config -> codec_name = arg. val ; } else if ( arg_match ( & arg, & codec_version, argi ) ) { config -> codec_version = arg. val ; } else if ( arg_match ( & arg, & codec_version, argi ) ) { config -> codec_name = arg. val ; } else if ( arg_match",0
156,"<S2SV_ModStart> options. disable_forwarding ||! ( options. allow_tcp_forwarding & FORWARD_REMOTE ) ) { fatal ( ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> has <S2SV_blank> disabled <S2SV_blank> port <S2SV_blank> forwarding."", ( unsigned char ) fwd. listen_host ) ; fatal ( ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> has <S2SV_blank> disabled <S2SV_blank> port <S2SV_blank> forwarding."", ( unsigned char ) fwd. listen_port ) ; no_port_forwarding_flag = 0 ; } else if ( ( options. allow_tcp_forwarding & FORWARD_REMOTE ) == 0 && options. disable_forwarding ) { success = 0 ; packet_send_debug ( ""Server <S2SV_blank> has <S2SV_blank> disabled <S2SV_blank> port <S2SV_blank> forwarding."" ) ; } else if ( options. disable_forwarding ) { success = 0 ; packet_send_debug ( ""Server <S2SV_blank> has <S2SV_blank> disabled <S2SV_blank> port <S2SV_blank> forwarding."" ) ; } else { success = 0 ; packet_send_debug ( ""Server <S2SV_blank> has <S2SV_blank> disabled <S2SV_blank> port <S2SV_blank> forwarding."" ) ; }",0
157,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
158,"<S2SV_ModStart> ""UnableToReadImageData"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
159,"<S2SV_ModStart> errout ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = sg_calloc ( 1, sizeof ( gss_union_ctx_id_desc ), GFP_KERNEL ) ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = sg_calloc ( 1, GFP_KERNEL ) ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = sg_calloc ( 1, GFP_KERNEL ) ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = sg_calloc ( 1, sizeof ( gss_union_ctx_id_desc ), GFP_KERNEL ) ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = sg_calloc ( 1, sizeof ( gss_union_ctx_id_desc ), GFP_KERNEL ) ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = sg_calloc ( 1, GFP_KERNEL ) ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = sg_calloc ( 1, sizeof ( gss_union_ctx_id_desc ), GFP_KERNEL",0
160,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; <S2SV_ModStart> -> i_data, ext_size ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size <S2SV_ModEnd> ) ; neh",1
161,"<S2SV_ModStart> verify_checks ( c, preverify_ok, callback_ctx ) ) { SSL_SESSION * sess = SSL_get_session ( c -> ssl ) ; if (! sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } return 1 ; } <S2SV_ModEnd> if ( c <S2SV_ModStart> -> protocol ) { SSL_SESSION * sess = SSL_get_session ( c -> ssl ) ; if (! sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } <S2SV_ModEnd> return 0 ;",0
162,<S2SV_ModStart> ; int ret ; if ( current_chrooted ( ) ) return - EPERM,1
163,"<S2SV_ModStart> ; if (! memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) goto exit ; if (",0
164,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } <S2SV_ModEnd> c -> nreslevels2decode <S2SV_ModStart> -> reduction_factor ) { avpriv_request_sample ( s -> avctx, ""reduction_factor <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return AVERROR_PATCHWELCOME ; } c -> log2_cblk_width = c -> log2_cblk_width ; c -> log2_cblk_height = c -> log2_cblk_height ; if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHWELCOME ; }",0
165,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
166,<S2SV_ModStart> ; bool is_drop_n_account = false ; bool do_vnet <S2SV_ModStart> = false ; do_vnet = pt -> af_packet_priv -> do_vnet <S2SV_ModStart> ; do_vnet = pt -> af_packet_priv -> do_vnet ; <S2SV_ModStart> ; do_vnet = pt -> af_packet_priv -> do_vnet ; <S2SV_ModStart> ; do_vnet = pt -> af_packet_priv -> do_vnet ; <S2SV_ModStart> ; do_vnet = pt -> af_packet_priv -> do_vnet ; <S2SV_ModStart> ; do_vnet = pt -> af_packet_priv -> do_vnet ; <S2SV_ModStart> ; do_vnet = pt -> af_packet_priv -> do_vnet ; <S2SV_ModStart> ; do_vnet = pt -> af_packet_priv -> do_vnet ; <S2SV_ModStart> ; do_vnet = pt -> af_packet_priv -> do_vnet ; <S2SV_ModStart> ; do_vnet = pt -> af_packet_priv -> do_vnet ; <S2SV_ModStart> ; do_vnet = pt -> af_packet_priv -> do_vnet ; <S2SV_ModStart> ; do_vnet = pt -> af_packet_priv ->,0
167,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> sctp_auth_asoc_init_active_key ( asoc,1
168,<S2SV_ModStart> return false ; if ( ndp_msg_type_info ( msg_type ) -> addr_len ) return ndp_msg_type_info ( msg_type ) -> addr_len < ndp_msg_type_info ( msg_type ) -> addr_len ) return ndp_msg_type_info ( msg_type ) -> addr_len ;,0
169,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> lsm_set_label_at ( int lsm_labelfd <S2SV_ModEnd>, int on_exec <S2SV_ModStart> lsm_set_label_at ( int lsm_labelfd <S2SV_ModEnd>, int on_exec <S2SV_ModStart> lsm_set_label_at ( int lsm_labelfd <S2SV_ModEnd>, int on_exec <S2SV_ModStart> ) goto out <S2SV_ModEnd> ; const char <S2SV_ModStart> name, ""AppArmor"" ) == 0 ) on_exec = 0 ; if ( strcmp ( name, ""SELinux"" ) == 0 ) { if ( write ( lsm_labelfd, lsm_label, strlen ( lsm_label ) + 1 ) < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> LSM <S2SV_blank> label"" ) ; goto out ; } } else if ( strcmp ( name, ""SELinux"" ) == 0 ) { if ( write ( lsm_labelfd, lsm_label, strlen ( lsm_label ) + 1 ) < 0 ) { SYSERROR ( <S2SV_ModStart> ""Unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> LSM <S2SV_blank> label"" ) ; goto out ; } } else if (",0
170,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
171,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
172,"<S2SV_ModStart> cpi ) { const VP9EncoderConfig * const oxcf = & cpi -> oxcf ; <S2SV_ModStart> 0 ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( oxcf -> oxcf. use_highbitdepth ) { <S2SV_ModStart> -= bits_used ; } <S2SV_ModStart> KEY_FRAME ) { cpi -> twopass. gf_group_bits += cpi -> rc. this_frame_target - bits_used ; } else { cpi -> twopass. gf_group_bits -= bits_used ; } <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> 0 ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( oxcf -> oxcf. use_highbitdepth ) { <S2SV_ModStart> -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } else { cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } # endif",0
173,"<S2SV_ModStart> } num ++ ; if ( num > MaxAllocSize / ITEMSIZE ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> levels <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num, ( int ) ( MaxAllocSize / ITEMSIZE ) ) ) )",1
174,"<S2SV_ModStart> header, struct mb2_cache_entry <S2SV_ModEnd> * * pce <S2SV_ModStart> ; struct mb2_cache_entry * ce ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> hash ) ; ce = mb2_cache_entry_find_first <S2SV_ModEnd> ( ext4_mb_cache, <S2SV_ModStart> ; again : ce = mb2_cache_entry_find_next ( ext4_mb_cache, ce, hash ) ; if ( IS_ERR ( ce ) ) { ea_idebug ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; } else if ( le32_to_cpu ( BHDR ( bh ) -> h_refcount ) >= EXT4_XATTR_REFCOUNT_MAX ) { ea_idebug ( inode, ""block <S2SV_blank> %lu <S2SV_blank> refcount <S2SV_blank> %d>=%d"", ( unsigned long ) ce -> e_block, le32_to_cpu ( BHDR ( bh ) -> h_refcount ), EXT4_XATTR_REFCOUNT_MAX ) ; } brelse ( bh ) ; * pce = ce ;",0
175,"<S2SV_ModStart> data_offset ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> = offset ; return parse_cosine_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> wth -> phdr, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> wth -> frame_buffer, line, <S2SV_ModEnd> err, err_info <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
176,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
177,"<S2SV_ModStart> > 0 && extend && left <S2SV_ModStart> > left ) { extend = 0 ; left = left ; } if ( extend && left > 0 && n > left ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( left >= n ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } len = s -> packet_length ; if ( len + left > rb -> len ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( left > ( int ) ( rb -> len - rb -> offset ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( left > ( int ) ( rb -> len - rb -> offset ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; }",0
178,"<S2SV_ModStart> { # ifndef _MSC_VER <S2SV_ModEnd> char buf [ <S2SV_ModStart> ( data ) ] ; # else char * buf ; int i ; leaf = ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) { fileblock -= grub_le_to_cpu32 ( ext [ i ]. block ) ; if ( fileblock >= grub_le_to_cpu16 ( ext [ i ]. len ) ) return 0 ; else { grub_disk_addr_t start ; start = grub_le_to_cpu32 ( ext [ i ]. start_hi ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext",0
179,"<S2SV_ModStart> ) / 3 ) ThrowReaderException ( CorruptImageError, ""InvalidColormapIndex"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries",0
180,"<S2SV_ModStart> - ENOMEM ; vbg_req_free ( size, VBG_IOCTL_HDR_TYPE_DEFAULT ) ; <S2SV_ModStart> copy_from_user ( buf + sizeof ( hdr ) <S2SV_ModStart> - EFAULT ; vbg_req_free ( size, VBG_IOCTL_HDR_TYPE_DEFAULT ) ;",0
181,<S2SV_ModStart> int m ; jpc_fix_t * buf2 <S2SV_ModEnd> ; if ( <S2SV_ModStart> QMFB_SPLITBUFSIZE ) { buf2 <S2SV_ModEnd> = jas_alloc2 ( <S2SV_ModStart> ) ) ) { abort ( ) ; } hstartcol = ( numrows + 1 - parity ) >> 1 ; n = m ; dstptr = buf ; srcptr = buf ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr = & a [ hstartcol * stride ] ; n = m ; dstptr = buf ; srcptr = buf ; n = m ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; dstptr = buf ; srcptr = buf ; n = m ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr = buf ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0,0
182,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
183,"<S2SV_ModStart> EOFOp 0x07 \\\n{ <S2SV_ModEnd> char magick [ <S2SV_ModStart> ReadBlob ( image, 3, magick ) ; if ( ( count!= 3 ) || ( memcmp ( magick, ""\\122\\314"", 2 )!= 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) RelinquishMagickMemory ( pixels ) ; pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixels ) ; if ( pixel_info!= ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixels ) ; if ( pixel_info!= ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixels ) ; if ( pixel_info!= ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) Rel",0
184,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_mb_cache ) { ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ; sbi -> s_mb_cache = NULL ; } <S2SV_ModEnd> if (!,1
185,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> num_altsetting < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_devs ; } dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass",0
186,"<S2SV_ModStart> 0 ) { <S2SV_ModEnd> char * arg <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [ <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [ <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [ <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [ <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [ <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [ <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [ <S2SV_ModStart> 0 ] = ""\\n"" ; arg [ 3 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [ <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [ <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [ <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [ <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [ <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [ <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [ <S2SV_ModStart> 0 ] = ""\\n"" ; arg [ 3 ] = ""\\n"" ; arg [ 4 ] =",0
187,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) <S2SV_ModStart> ci_parent ) ; else return NULL ;,1
188,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
189,"<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) { av_log ( avctx, AV_LOG_ERROR, ""Bad <S2SV_blank> sample <S2SV_blank> rate <S2SV_blank> number"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) { av_log ( avctx, AV_LOG_ERROR, ""Bad <S2SV_blank> sample <S2SV_blank> rate <S2SV_blank> number"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) { av_log ( avctx, AV_LOG_ERROR, ""Bad <S2SV_blank> sample <S2SV_blank> rate <S2SV_blank> number"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) { av_log ( avctx, AV_LOG_ERROR, ""Bad <S2SV_blank> sample <S2SV_blank> rate <S2SV_blank> number"" ) ; return AVERROR_INVALIDDATA ; }",0
190,"<S2SV_ModStart> if ( q < p ) { DPRINTF ( ( ""Wrapped <S2SV_blank> around <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> %p\\n"", q, p ) ) ; goto out ; } if ( q",0
191,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = &,1
192,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( fd = mkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> dir ) ) == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
193,<S2SV_ModStart> prev ) ; n -> mounts += n -> pending_mounts ; n -> pending_mounts = 0 ;,1
194,"<S2SV_ModStart> ; savesegment ( fs, fsindex ) ; savesegment ( gs, gsindex ) ; load_TLS ( next, cpu ) ; arch_end_context_switch ( next_p ) ; savesegment ( <S2SV_ModStart> next -> ds <S2SV_ModEnd> ) ; if",1
195,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
196,<S2SV_ModStart> = value ; if ( ps_sps -> i1_sps_length > ps_sps -> i1_sps_max_length ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ps_sps -> i1_sps_length > ps_sps -> i1_sps_max_length ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ps_sps -> i1_sps_length > ps_sps -> i1_sps_length ) { return IHEVCD_INVALID_HEADER ; },0
197,<S2SV_ModStart> 1u << DB_VECTOR ) | ( 1u << AC_VECTOR,1
198,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> 1 ] ; if ( len > NFSX_V3FHMAX ) { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ) ; goto trunc ; } <S2SV_ModStart> 1 ] ; if ( len > NFSX_V3FHMAX ) { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ) ; goto trunc ; } temp [ sizeof ( temp ) - 1 ] = '\\0' ; spacep = strchr ( temp,'<S2SV_blank>') ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %s/"", temp ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ) ; goto trunc ; }",0
199,"<S2SV_ModStart> unsigned int flags, struct rt6_info * rt <S2SV_ModStart> ; ipv6_select_ident ( rt <S2SV_ModEnd>, & fhdr <S2SV_ModStart> & fhdr ) ; skb_shinfo ( skb ) -> ip_frag_id = fhdr. identification ; __skb_queue_tail ( & sk -> sk_write_queue, skb ) ; return 0 ; } if ( skb_is_gso ( skb ) ) { struct frag_hdr fhdr ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_UDP ; ipv6_select_ident ( & fhdr ) ; skb_shinfo ( skb ) -> ip_frag_id = fhdr. identification ; __skb_queue_tail ( & sk -> sk_write_queue, skb ) ; return 0 ; }",0
200,<S2SV_ModStart> ( res ) goto err_add_port <S2SV_ModEnd> ; res = <S2SV_ModStart> port ) ; err_add_port : hsr_del_node ( & hsr -> self_node_db ) ;,1
201,"<S2SV_ModStart> [ 0 ] && n < ( size_t ) FTPWHO_MAX_FILENAME ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= ftpwho_max_filename ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= ftpwho_max_filename ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( <S2SV_ModStart> [ 0 ] && n < ( size_t ) FTPWHO_MAX_FILENAME ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= ( size_t ) FTPWHO_MAX_FILENAME ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= ( size_t ) FTPWHO_MAX_FILENAME ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
202,"<S2SV_ModStart> void vp9_setup_dst_planes ( <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> src ) { const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; const int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_x, pd -> subsampling_y ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
203,<S2SV_ModStart> ++ ) ; if (! args -> stable ) return 0 ; <S2SV_ModStart> p ++ ) ; if ( hdr > max_blocksize ) { args -> count = max_blocksize ; hdr = ( void * ) p - head -> iov_base ; dlen = XDR_QUADLEN ( hdr ) * 4 ; } if ( dlen > args -> len ) { args -> count = max_blocksize ; args -> len = max_blocksize ; },0
204,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { return assign_eip_far ( ctxt, dst, ctxt -> mode == X86EMUL_MODE_PROT64 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
205,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
206,"<S2SV_ModStart> ; remaining = tvb_reported_length_remaining <S2SV_ModEnd> ( tvb,",1
207,<S2SV_ModStart> == READ ) { mutex_lock ( & inode -> i_mmap_sem ) ; <S2SV_ModStart> = ocfs2_dio_get_block ; mutex_unlock ( & inode -> i_mmap_sem ) ; },0
208,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
209,"<S2SV_ModStart> ; if ( 2 == <S2SV_ModStart>, strparm ) && 3 == sscanf ( f, ""%79s <S2SV_blank> %511s\\n"", def, strparm ) && 4 == sscanf ( f, ""%511s\\n"", def, strparm ) && 5 == sscanf ( f, ""%511s\\n"", def, strparm ) && 6 == sscanf ( f, ""%511s\\n"", def, strparm ) && 6!= sscanf ( f, ""%511s\\n"", def, strparm ) && 6!= sscanf ( f, ""%511s\\n"", def, strparm ) && 6!= sscanf ( f, ""%511s\\n"", def, strparm ) && 6!= sscanf ( f, ""%511s\\n"", def, strparm ) && 6!= sscanf ( f, ""%511s\\n"", def, strparm ) && 6!= sscanf ( f, ""%511s\\n"", def, strparm ) && 6!= sscanf ( f",0
210,<S2SV_ModStart> ; if ( pmc_overflow ( val ) <S2SV_ModEnd> ) write_pmc (,1
211,"<S2SV_ModStart> ( * b + len, * avail - len <S2SV_ModEnd>, nl )",1
212,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> ; int kind <S2SV_ModEnd> ; void * <S2SV_ModStart> ; PyCompilerFlags cf <S2SV_ModEnd> ; char * <S2SV_ModStart> ; PyObject * o, * fstring_name <S2SV_ModStart> ; Py_ssize_t i <S2SV_ModEnd> ; assert ( <S2SV_ModStart> expr_end == ':' ) ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = PyUnicode_GET_LENGTH ( o ) ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! PyUnicode_ISSPACE ( PyUnicode_READ ( PyUnicode_KIND ( o ), data, i ) ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } } cf. cf_flags = PyCF_ONLY_AST ; fstring_name = PyUnicode_FromString ( ""<fstring>"" ) ; Py_DECREF ( fstring_name ) ; Py_DECREF ( fstring_name ) ; Py",0
213,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
214,<S2SV_ModStart> string ) { <S2SV_ModEnd> cJSON * c,0
215,"<S2SV_ModStart> == 0 ) mark_key_instantiated ( key, 0 <S2SV_ModEnd> ) ; up_write",1
216,<S2SV_ModStart> <= * len && plen > 0,1
217,<S2SV_ModStart> ; args. rmtvaluelen = be32_to_cpu ( entry -> valuelen ) ; args. rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args. rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args. rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args. rmtvaluelen = be32_to_cpu ( entry -> valuelen ) ; args. rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args. rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args. rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args. rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args. rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args. rmtblkno <S2SV_ModEnd> ) ; args <S2SV_ModStart> ; args. rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args. rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args. rmtblkno <S2SV_ModEnd> = be32_to_cpu,0
218,<S2SV_ModStart> ; if ( <S2SV_ModEnd> timeout == NULL <S2SV_ModStart> ; if ( compat_get_timespec <S2SV_ModEnd> ( & ktspec <S2SV_ModStart> > 0 && compat_put_timespec <S2SV_ModEnd> ( & ktspec,1
219,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
220,<S2SV_ModStart> ndev ) ; <S2SV_ModEnd> assert ( skb <S2SV_ModStart> q_num ) ; return <S2SV_ModEnd> hns_nic_net_xmit_hw ( ndev <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
221,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
222,<S2SV_ModStart> } int procfd = fork ( ) ; if ( procfd == - 1 ) procfd = fork ( ) ; if ( procfd!= - 1 ) procfd = fork ( ) ; if ( procfd!= - 1 ) procfd = fork ( ) ; if ( procfd!= - 1 ) procfd = fork ( ) ; if ( procfd!= - 1 ) procfd = fork ( ) ; if ( procfd!= - 1 ) procfd = fork ( ) ; if ( procfd!= - 1 ) procfd = fork ( ) ; if ( procfd!= - 1 ) procfd = fork ( ) ; if ( procfd!= - 1 ) procfd = fork ( ) ; if ( procfd!= - 1 ) procfd = fork ( ) ; if ( procfd!= - 1 ) procfd = fork ( ) ; if ( procfd!= - 1 ) procfd = fork ( ) ; if ( procfd!= - 1 ) procfd = fork ( ) ; if ( procfd!= - 1 ) procfd = fork ( ) ; if ( procfd!= - 1 ) procfd = fork ( ) ; if ( procfd!= - 1 ) procfd = fork ( ) ; if ( procfd,0
223,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
224,<S2SV_ModStart> size ) ; <S2SV_ModEnd> px -> ft,0
225,<S2SV_ModStart> found = 0 <S2SV_ModEnd> ; const char <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( found,1
226,"<S2SV_ModStart> int validate_event ( struct pmu * pmu, <S2SV_ModStart> arm_pmu * armpmu <S2SV_ModEnd> ; struct hw_perf_event <S2SV_ModStart> return 1 ; armpmu = to_arm_pmu ( event -> pmu ) ; <S2SV_ModStart> return 1 ; if ( armpmu -> get_event_idx ( hw_events, & fake_event ) < 0 ) return 0 ;",0
227,"<S2SV_ModStart> bool new_idmap_permitted ( const struct file * file, <S2SV_ModStart>, cap_setid ) && file_ns_capable ( file, ns -> parent, cap_setid )",1
228,<S2SV_ModStart> j ++ ) { if ( a -> type == szMAPI_BINARY ) <S2SV_ModStart> ) ; } },1
229,"<S2SV_ModStart> hx ; u8 * buf <S2SV_ModEnd> ; int ret <S2SV_ModStart> = 0 ; u16 cpu_cs_register = <S2SV_ModEnd> cypress [ type <S2SV_ModStart> ]. cpu_cs_register ; buf = kmalloc ( sizeof ( * hx ), GFP_KERNEL ) ; if (! buf ) return - ENOMEM ; hx = ( struct hexline * ) buf ; buf [ 0 ] = 0 ; if ( usb_cypress_writemem ( udev, cpu_cs_register, buf, 1 )!= 1 ) { err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; ret = - EINVAL ; } kfree ( buf <S2SV_ModEnd> ) ; return <S2SV_ModStart> 0 ) { buf [ 0 ] = 0 ; if ( usb_cypress_writemem ( udev, cpu_cs_register, buf, 1 )!= 1 ) { err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; ret = - EIO ; } kfree ( buf <S2SV_ModEnd> ) ; return",0
230,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; val_l = EXTRACT_16BITS ( ptr",0
231,"<S2SV_ModStart> princ ) ; success = ( strncmp ( handle -> params. realm, realm -> data, realm -> length ) == 0 && strncmp ( handle -> params. name, c1 -> data, c1 -> length ) == 0 && strncmp ( handle -> params. name, c2 -> data, c2 -> length ) == 0 ) <S2SV_ModEnd> ; fail_princ :",0
232,<S2SV_ModStart> ; if ( shader_rec_offset < args -> bin_cl_size ||,1
233,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
234,<S2SV_ModStart> vma -> vm_file ) ; down_read ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModStart> ; out : up_read ( & EXT4_I ( inode ) -> i_mmap_sem ) ;,1
235,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
236,<S2SV_ModStart> arg ) { char ch = * arg ; switch ( ch <S2SV_ModEnd> ) { case <S2SV_ModStart> ';' : case '=' : case <S2SV_ModStart> * b ++ = ch <S2SV_ModEnd> ; break ; <S2SV_ModStart> default : * b ++ = ch <S2SV_ModEnd> ; break ;,0
237,"<S2SV_ModStart> cp = ikev1_attrmap_print ( ndo, cp, map, nmap ) ; if ( cp == NULL ) cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev1_attr_print ( ndo, cp,",0
238,"<S2SV_ModStart> ; static gboolean accept_ice_connection ( IceConn ice_conn, IceAcceptCondition condition, GsmIceConnectionData * data ) { IceListenObj listener ; IceAcceptStatus status ; g_debug ( ""GsmXsmpServer: <S2SV_blank> accept_ice_connection()"" ) ; listener = data -> listener ; status = IceAcceptConnection ( ice_conn, & status ) ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return FALSE ; } <S2SV_ModEnd> client = gsm_xsmp_client_new <S2SV_ModStart> ice_conn ) ; <S2SV_ModEnd> gsm_store_add ( server",0
239,<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) < skb -> head +,1
240,"<S2SV_ModStart> void ) { test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModEnd>, "".git/foobar"" ) <S2SV_ModStart> "".git/foobar"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git"" ) ;",0
241,<S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ;,1
242,<S2SV_ModStart> & RCV_SHUTDOWN ) return 0 ; <S2SV_ModEnd> return err ; <S2SV_ModStart> msg_namelen ) ; <S2SV_ModEnd> } skb_free_datagram (,1
243,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
244,"<S2SV_ModStart> int i ; const tran_low_t <S2SV_ModEnd> * const buffers <S2SV_ModStart> 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_y, pd -> subsampling_y, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_y, pd -> subsampling_y, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_y, pd -> subsampling_x, pd -> subsampling_y,",0
245,"<S2SV_ModStart>, j ; const <S2SV_ModStart> goto cleanup ; if ( X509_get_subject_name ( cert ) == NULL ) { ret = EINVAL ; goto cleanup ; } <S2SV_ModEnd> md -> subject_dn <S2SV_ModStart> md -> subject_dn = kstrdup ( <S2SV_ModEnd> buf ) ; <S2SV_ModStart> md -> issuer_dn = kstrdup ( <S2SV_ModEnd> buf ) ; <S2SV_ModStart> } X509_NAME_oneline_ex ( X509_get_issuer_name ( cert ), buf, & bufsize, XN_FLAG_SEP_COMMA_PLUS ) ; if ( md -> issuer_dn == NULL ) { ret = EINVAL ; goto cleanup ; } ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, NULL, NULL ) ; if ( ret ) goto cleanup ; j = 0 ; if ( pkinit_sans!= NULL ) { for ( i =",0
246,"<S2SV_ModStart> old_memslots ) { for ( i = 0 ; i < KVM_MEMORY_SLOTS_NUM ; ++ i ) kvm_iommu_unmap_pages ( kvm, s, i, npages ) ; if ( i == KVM_MEMORY_SLOTS_NUM ) kvm_iommu_unmap_pages ( kvm, s, i, npages ) ; kvm_iommu_unmap_pages ( kvm, s, i, npages ) ; out_free : for ( i = 0 ; i < KVM_MEMORY_SLOTS_NUM ; ++ i ) kvm_iommu_unmap_pages ( kvm, s, i, npages ) ; if ( i == KVM_MEMORY_SLOTS_NUM ) kvm_iommu_unmap_pages ( kvm, s, i, npages ) ;",0
247,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ru,1
248,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
249,"<S2SV_ModStart> * ni ; ND_TCHECK ( rp -> rip6_cmd ) ; ND_TCHECK2 ( rp -> rip6_nets ) ; <S2SV_ModStart> case RIP6_REQUEST : ND_TCHECK2 ( rp -> rip6_nets ) ; <S2SV_ModStart> ( j == 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u[%u]:"", j, length ) ) ; break ; } if ( j * sizeof ( * ni )!= length - 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u[%u]:"", j, length ) ) ; break ; } for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ), ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; rip6_entry_print ( ndo, ni, 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j == 1 ) { ND_PRINT",0
250,<S2SV_ModStart> < 0 ) goto error ; <S2SV_ModEnd> goto set ;,1
251,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
252,"<S2SV_ModStart> argc ++ ; retval = bprm_change_interp ( iname, bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> ; interp_file =",1
253,<S2SV_ModStart> ; int iSrc <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> res -> ContribRow <S2SV_ModStart> u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ].,1
254,<S2SV_ModStart> ( user ) ; cleanup_srcu_struct ( & user -> release_barrier ) ;,0
255,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".cfg\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n""",1
256,"<S2SV_ModStart> * data ; size_t<extra_id_1>int limit = 0 ; mongo_message * mm ; if ( cursor -> limit == 0 ) { cursor -> err = MONGO_CURSOR_EXHAUSTED ; return MONGO_ERROR ; } sl = cursor -> seen + 1 ; if ( sl > cursor -> ns -> length ) sl = cursor -> ns -> length - 1 ; mm = mongo_message_create ( 16 + 4 + 4 + 4 + 4 + 8, 0, 0, MONGO_OP_GET_MORE ) ; data = & mm -> data ; data = mongo_data_append32 ( data, & ZERO ) ; data = mongo_data_append32 ( data, & limit ) ; bson_free ( cursor -> reply ) ; res = mongo_read_response ( cursor -> conn, & ( cursor -> reply ) ) ; if ( res!= MONGO_OK ) { mongo_cursor_destroy ( cursor ) ; return MONGO_ERROR ; } res = mongo_read_response ( cursor -> conn, & ( cursor -> current ) ) ; if ( res!= MONGO_OK ) { mongo_cursor_destroy ( cursor ) ; return MONGO",0
257,"<S2SV_ModStart> & tee_mm_sec_ddr ) ; mobj_mm_unlock ( mobj, & tee_mm_sec_ddr ) ; <S2SV_ModStart> mobj ) { <S2SV_ModEnd> memset ( mobj_get_va <S2SV_ModStart> 0, size ) ; mobj_mm_unlock ( mobj, & tee_mm_sec_ddr ) ;",0
258,<S2SV_ModStart> -> it_overrun += 1LL <S2SV_ModEnd> << i ;,1
259,"<S2SV_ModStart> * for_ch ; bool is_async ; asdl_seq * ifs ; <S2SV_ModStart> comp_for ) ; is_async = 0 ; if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } if ( is_async && c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, for_ch, Store ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( first",0
260,"<S2SV_ModStart> = NULL ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) return - ENOMEM ; dst_state -> frame [ i ] = dst ; } err = copy_func_state ( dst, src -> frame [ i ] ) ; if ( err ) return err ; dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } err = copy_func_state ( dst, src -> frame [ i ] ) ; if ( err ) return err ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst",0
261,"<S2SV_ModStart> void write_mb_modes_kf ( const VP9_COMMON * cm, const MACROBLOCKD * xd, const MB_MODE_INFO * mbmi, vpx_writer * w, const MODE_INFO * * mi <S2SV_ModEnd> ) { const <S2SV_ModStart> 0 ] ; const MODE_INFO * const above_mi = mi <S2SV_ModEnd> [ - xd <S2SV_ModStart> mi_stride ] ; const MODE_INFO * const left_mi = xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const MB_MODE_INFO * const mbmi = mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id ) ; write_skip ( cpi, mbmi -> segment_id, mi, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; else { const int num_4x4_w = num_4x4_blocks_wide_",0
262,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
263,"<S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; n <S2SV_ModStart> = r -> qiov. size <S2SV_ModEnd> / 512 ; <S2SV_ModStart> -> req, r -> qiov. size <S2SV_ModEnd> ) ; }",0
264,<S2SV_ModStart> if ( cs >= <S2SV_ModEnd> CQSPI_MAX_CHIPSELECT ) {,1
265,"<S2SV_ModStart> maxn ) { # ifdef DEBUG fprintf ( stderr, ""%d:\\tACTION[%3.3d]: <S2SV_blank> %s\\n"", n, actionName ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) ) ; # endif <S2SV_ModStart>. ActionCode ) ) { case SWFACTION_END : return 0 ; } switch ( n ) { case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : decompileGOTOFRAME ( n, actions, maxn, 0 ) ; case SWFACTION_GOTOFRAME2 : decompileGOTOFRAME2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n, actions, maxn ) ; return",0
266,<S2SV_ModStart> ) ) { if ( ll > bo -> max_fetch_buffer_size ) { bo -> max_fetch_buffer_size = bo -> max_fetch_buffer_size ; if ( ll > bo -> max_fetch_buffer_size ) { bo -> max_fetch_buffer_size = bo -> max_fetch_buffer_size ; if ( ll > bo -> max_fetch_buffer_size ) { bo -> max_fetch_buffer_size = bo -> max_fetch_buffer_size ; } } else if ( ll > bo -> max_fetch_buffer_size ) { bo -> max_fetch_buffer_size = bo -> max_fetch_buffer_size ; if ( ll > bo -> max_fetch_buffer_size ) { bo -> max_fetch_buffer_size = bo -> max_fetch_buffer_size ; },0
267,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
268,<S2SV_ModStart> ; if ( <S2SV_ModEnd> len < sizeof <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS,0
269,<S2SV_ModStart> rq ) ; rcu_read_lock ( ) ; <S2SV_ModStart> skip_clock_update = 0 ; rcu_read_unlock ( ),0
270,"<S2SV_ModStart> ret ; uint8_t * buffer ; uint8_t value ; buffer = kmalloc ( 1, GFP_KERNEL ) ; if (! buffer ) return - ENOMEM <S2SV_ModEnd> ; dev_dbg ( <S2SV_ModStart>, reg, buffer <S2SV_ModEnd>, 1, <S2SV_ModStart> 1000 ) ; if ( <S2SV_ModEnd> ret >= 0 <S2SV_ModStart> ret >= 0 ) { value = buffer [ 0 ] ; kfree ( buffer ) ; return value ; } else { kfree ( buffer ) ; return <S2SV_ModEnd> ret ; } <S2SV_ModStart> ret ; } }",1
271,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes * 2 <S2SV_ModEnd> ) ; if",0
272,"<S2SV_ModStart> ; } } s -> append_char ( s, 0 ) ;",0
273,"<S2SV_ModStart> { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""AdaptationStates <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero"" ) ; goto Error ; } <S2SV_ModStart> { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""AdaptationStates <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero"" ) ; goto Error ; } <S2SV_ModStart> { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""AdaptationStates <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero"" ) ; goto Error ; } <S2SV_ModStart> } } } if ( ( nProfiles == 1 ) && <S2SV_ModStart> { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""AdaptationStates <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero"" ) ; goto Error ; } <S2SV_ModStart> { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""AdaptationStates <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero"" ) ; goto Error ; }",0
274,<S2SV_ModStart> = 0 ; ( i + 3 ) <S2SV_ModEnd> < sec -> <S2SV_ModStart> = 0 ; ( i + 7 ) <S2SV_ModEnd> < sec ->,1
275,"<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_RESERVABLE_BW_EXT : <S2SV_ModEnd> bw. i <S2SV_ModStart> bw. i = EXTRACT_16BITS ( tptr ) ; ND_PRINT ( ( ndo, "", <S2SV_blank> %.3f <S2SV_blank> Mbps"", bw. i * 8 / 1000000 ) ) ; break ; case ISIS_SUBTLV_EXT_IS_REACH_RESERVABLE_BW_EXT : if ( subl >= 4 ) { bw. i = EXTRACT_32BITS ( tptr ) ; ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; } break ; case ISIS_SUBTLV_EXT_IS_REACH_IPV6_INTF_ADDR : case ISIS_SUBTLV_EXT_IS_REACH_IPV6_NEIGHBOR_ADDR : if ( subl >= 4 ) { bw. i = EXTRACT_32BITS ( tptr ) ; ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo,",0
276,<S2SV_ModStart> ; if ( ptr_hbe_txposer -> noise_sensitivity > INT_MAX / ptr_hbe_txposer -> noise_sensitivity ) { ptr_hbe_txposer -> noise_sensitivity = INT_MAX ; ptr_hbe_txposer -> noise_sensitivity = ptr_hbe_txposer -> noise_sensitivity ; } else if ( ptr_hbe_txposer -> noise_sensitivity > INT_MAX / ptr_hbe_txposer -> noise_sensitivity ) { ptr_hbe_txposer -> noise_sensitivity = ptr_hbe_txposer -> noise_sensitivity ; } else if ( ptr_hbe_txposer -> noise_sensitivity > INT_MAX / ptr_hbe_txposer -> noise_sensitivity ) { ptr_hbe_txposer -> noise_sensitivity = ptr_hbe_txposer -> noise_sensitivity ; },0
277,"<S2SV_ModStart> < q ) { <S2SV_ModStart> p ) ; } <S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str ) ; } else { <S2SV_ModStart> low ) ; } <S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str ) ; } else if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str ) ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str ) ; } else { <S2SV_ModStart> low ) ; }",0
278,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfqq ) { struct bfq_data * bfqd = bfqq -> bfqd <S2SV_ModEnd> ; enum bfqq_expiration <S2SV_ModStart> unsigned long flags <S2SV_ModEnd> ; bfq_clear_bfqq_wait_request ( <S2SV_ModStart> return ; } <S2SV_ModEnd> spin_lock_irqsave ( & <S2SV_ModStart> flags ) ; return true ;,0
279,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
280,"<S2SV_ModStart> ) continue ; if ( vif -> tx. req_prod - vif -> tx. req_cons > XEN_NETIF_TX_RING_SIZE ) { netdev_err ( vif -> dev, ""Impossible <S2SV_blank> number <S2SV_blank> of <S2SV_blank> requests. <S2SV_blank> "" ""req_cons <S2SV_blank> %d\\n"", vif -> tx. req_cons ) ; netdev_err ( vif -> dev, ""Impossible <S2SV_blank> number <S2SV_blank> of <S2SV_blank> requests. <S2SV_blank> "" ""req_cons <S2SV_blank> %d\\n"", vif -> tx. req_cons, vif -> tx. req_cons + vif -> tx. req_cnt ) ; continue ; } <S2SV_ModStart> 0 ) ) { netdev_err ( vif -> dev, ""Impossible <S2SV_blank> number <S2SV_blank> of <S2SV_blank> requests. <S2SV_blank> "" ""req_cons <S2SV_blank> %d\\n"", vif -> tx. req_cons ) ; netdev_err ( vif -> dev, ""Impossible <S2SV_blank> number <S2SV_blank> of <S2SV_blank> requests. <S2SV_blank> "" ""req_cons <S2SV_blank> %d\\n"", vif -> tx. req_cons + vif -> tx. req_cnt ) ; continue ; } <S2SV_ModEnd> idx = vif <S2SV_ModStart>",0
281,"<S2SV_ModStart> [ 0 ] && n < ( size_t ) FTPWHO_MAX_FILENAME ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= ftpwho_max_filename ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= ftpwho_max_filename ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( <S2SV_ModStart> [ 0 ] && n < ( size_t ) FTPWHO_MAX_FILENAME ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= ( size_t ) FTPWHO_MAX_FILENAME ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= ( size_t ) FTPWHO_MAX_FILENAME ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
282,<S2SV_ModStart> cb -> args [ 0 <S2SV_ModEnd> ] ; struct,0
283,<S2SV_ModStart> conn ) ; if ( <S2SV_ModStart> ( conn )!= 0 ) return,1
284,"<S2SV_ModStart> ) ; struct <S2SV_ModEnd> skb_shared_info * shinfo <S2SV_ModStart> err ) ) xen_netbk_idx_release ( netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> XEN_NETIF_RSP_ERROR ) ; <S2SV_ModEnd> start = ( <S2SV_ModStart>, newerr ; <S2SV_ModEnd> pending_idx = frag_get_pending_idx <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> continue ; } xen_netbk_idx_release ( netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> XEN_NETIF_RSP_ERROR ) ; <S2SV_ModEnd> if ( err <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY",0
285,,1
286,<S2SV_ModStart> 0 ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> 0 ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> 0 ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> 0 ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> 0 ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> 0 ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> 0 ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> 0 ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> 0 ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> 0 ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> 0 ) { scanline = ( unsigned char * ) Relin,0
287,"<S2SV_ModStart> 1 ) { struct sockaddr * addr_p = ( struct sockaddr * ) & addr ; socklen_t addr_l = sizeof ( addr ) ; <S2SV_ModStart> ; len = recvfrom <S2SV_ModEnd> ( fd, <S2SV_ModStart> len < 0 ) { syslog ( LOG_ERR, ""recvfrom <S2SV_blank> failed; <S2SV_blank> pid:%u <S2SV_blank> error:%d <S2SV_blank> %s"", addr. nl_pid, errno, strerror ( errno ) ) ; close ( fd ) ; exit ( EXIT_FAILURE ) ; } addr_p = ( struct sockaddr * ) & addr ; socklen_t addr_l = sizeof ( addr ) ; <S2SV_ModStart> len < 0 ) { syslog ( LOG_ERR, ""recvfrom <S2SV_blank> failed; <S2SV_blank> pid:%u <S2SV_blank> error:%d <S2SV_blank> %s"", addr. nl_pid, errno, strerror ( errno ) ) ; close ( fd ) ; exit ( EXIT_FAILURE ) ; } len = recvfrom <S2SV_ModEnd> ( fd, <S2SV_ModStart> len < 0 ) { syslog ( LOG_ERR, ""recvfrom <S2SV_blank> failed; <S2SV_blank> pid:%u <S2SV_blank> error:%d <S2SV_blank> %s"", addr. nl_pid, errno, strerror ( errno ) ) ; close ( fd ) ; exit ( EXIT_FAILURE ) ;",0
288,"<S2SV_ModStart> PERF_COUNT_SW_ALIGNMENT_FAULTS, 1 <S2SV_ModEnd>, regs,",0
289,"<S2SV_ModStart> ; if ( client -> session == NULL && client -> session == NULL <S2SV_ModStart> ipc == NULL && client -> diffs == NULL && client -> replace == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } if ( client -> confirmations == NULL && safe_str_eq ( type, T_CIB_UPDATE_CONFIRM ) ) { do_send = TRUE ; } else if ( client -> pre_notify && safe_str_eq ( type, T_CIB_PRE_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> post_notify && safe_str_eq ( type, T_CIB_POST_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> pre_notify && safe_str_eq ( type, T_CIB_PRE_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> post_notify && safe_str_eq ( type, T_CIB_POST_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> pre_notify && safe_str_eq ( type, T",0
290,"<S2SV_ModStart> + x > ( size_t ) <S2SV_ModStart> + x > ( size_t ) <S2SV_ModStart> NULL ; } if ( diffPtr + x > diffBlock + diffBlockLength || extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, extraPtr, y ) ;",0
291,<S2SV_ModStart> ; if ( UDF_NAME_LEN ( fname ) + lfi > dir -> i_sb -> s_blocksize ) goto out_err ; if ( UDF_NAME_LEN ( fname ) + lfi > dir -> i_sb -> s_blocksize ) goto out_err ; if ( UDF_NAME_LEN ( fname ) + lfi > dir -> i_sb -> s_blocksize ) goto out_err ; if ( UDF_NAME_LEN ( fname ) + lfi > dir -> i_sb -> s_blocksize ) goto out_err ; if ( UDF_NAME_LEN ( fname ) + lfi > dir -> i_sb -> s_blocksize ) goto out_err ;,0
292,"<S2SV_ModStart> ip_vs_timeout_user t ; memset ( & t, 0, sizeof ( t ) ) ;",1
293,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart>, fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
294,<S2SV_ModStart> ; ssize_t result ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
295,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, path1, & next ) ) { ret = - ENOENT ; goto out ; } if (! fc_may_access ( fc, controller, path1, NULL, O_RDWR ) ) { ret = - EACCES ; goto out ; } if (! <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } ret = cgfs_create ( controller, cgroup, fc -> uid, fc -> gid ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; free ( next ) ;",0
296,<S2SV_ModStart> ) ) { put_disk ( disk ) ;,1
297,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
298,"<S2SV_ModStart> == VFF_TYP_BIT ) { if ( CheckMemoryOverflow <S2SV_ModEnd> ( ( image <S2SV_ModStart> ) >> 3UL, <S2SV_ModEnd> image -> rows <S2SV_ModStart> image -> rows )!= MagickFalse ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; max_packets = ( ( image -> columns + 7UL ) >> 3UL ) * image -> rows ; } else { if ( CheckMemoryOverflow <S2SV_ModEnd> ( ( image <S2SV_ModStart> image -> rows )!= MagickFalse ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; max_packets = ( ( image -> rows << 3UL ) >> 3UL ) * image -> columns ; } else { if ( CheckMemoryOverflow ( image -> rows << 3UL )!= MagickFalse ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; max_packets = ( image -> columns + 7UL ) * image -> rows ; } else { if ( CheckMemoryOverflow ( image -> rows, image -> columns )!= MagickFalse ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; max_packets = ( ( image -> rows << 3UL ) * image -> columns ; } else { if ( CheckMemoryOverflow ( image",0
299,<S2SV_ModStart> ; int64_t index_pts ; if ( avio_feof ( s -> pb ) ) { return AVERROR_INVALIDDATA ; },0
300,"<S2SV_ModStart> ; val = scsi_verify_blk_ioctl ( filp, cmd_in ) ; if (! access_ok ( VERIFY_READ, p, SZ_SG_REQ_DATA_HDR ) ) return - EFAULT ;",0
301,"<S2SV_ModStart> ; # endif install_keyword ( ""umask"", & umask_handler ) ;",1
302,<S2SV_ModStart> data ) { ( void ) data ;,0
303,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> kfree ( tmpbuf,1
304,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; }",1
305,"<S2SV_ModStart> ( box = jp2_box_create0 ( ) ) ) { goto error ; } <S2SV_ModEnd> box -> ops <S2SV_ModStart> 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, \'""\', <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( box",0
306,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
307,"<S2SV_ModStart> ; int copylen = 0 <S2SV_ModStart> goto err ; err = - EMSGSIZE ; if ( unlikely ( count > 1 ) ) { err = - EMSGSIZE ; goto err ; } <S2SV_ModStart> zerocopy ) { copylen = min_t ( size_t, count - 1, len - vnet_hdr_len ) ; if ( copylen < vnet_hdr. hdr_len ) { copylen = min_t ( size_t, count - 1, vnet_hdr. hdr_len ) ; } else { copylen = len - vnet_hdr_len ; } if ( copylen < vnet_hdr. hdr_len ) { copylen -= vnet_hdr_len ; skb = macvtap_alloc_skb ( & q -> sk, NET_IP_ALIGN, copylen, vnet_hdr. hdr_len, noblock, & err ) ; if (! skb ) goto err ; skb = macvtap_alloc_skb ( & q -> sk, NET_IP_ALIGN, copylen, vnet_hdr. hdr_len, noblock, & err ) ; if (! skb ) goto",0
308,<S2SV_ModStart> nexthdr ) { unsigned int <S2SV_ModEnd> offset = sizeof <S2SV_ModStart> while ( offset <S2SV_ModEnd> <= packet_len ) <S2SV_ModStart> packet_len ) { struct ipv6_opt_hdr * exthdr ; <S2SV_ModStart> offset ; } if ( offset + sizeof ( struct ipv6_opt_hdr ) > packet_len ) return - EINVAL ; exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + offset ) ; <S2SV_ModStart> -> nexthdr ; } return - EINVAL <S2SV_ModEnd> ; } <S2SV_null>,0
309,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
310,"<S2SV_ModStart> ], refframe, near_mvs [ vcnt ], ref_frame_sign_bias <S2SV_ModEnd> ) ; near_ref <S2SV_ModStart> vcnt ], refframe, near_mvs [ vcnt ], ref_frame_sign_bias <S2SV_ModEnd> ) ; near_ref <S2SV_ModStart> mbmi. ref_frame, near_mvs [ vcnt ], ref_frame_sign_bias <S2SV_ModEnd> ) ; near_ref <S2SV_ModStart> vcnt ] = left -> mbmi. ref_frame ; } if ( left -> mbmi. ref_frame!= INTRA_FRAME ) { near_mvs [ vcnt ]. as_int = near_mvs [ vcnt ]. as_int ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, near_mvs [ vcnt ], ref_frame_sign_bias ) ; near_ref [ vcnt ] = left -> mbmi. ref_frame ; }",0
311,"<S2SV_ModStart> sll_len ) ; copied = skb_copy_datagram_iovec ( skb, 0, msg -> msg_iov, copied ) ; if ( copied > len ) { copied = len ; err = - EFAULT ; goto out_free ; } if ( <S2SV_ModStart> msg -> msg_name ) { copied = len ; } else { copied = skb_copy_datagram_iovec ( skb, 0, msg -> msg_iov, copied ) ; } if ( copied > 0 ) { copied = skb_copy_datagram_iovec ( skb, 0, msg -> msg_iov, copied ) ; } else { copied = skb_copy_datagram_iovec ( skb, 0, copied ) ; } if ( copied > 0 ) { copied = len ; } else { copied = skb_copy_datagram_iovec ( skb, 0, msg -> msg_iov, copied ) ; } if ( copied > 0 ) { copied = skb_copy_datagram_iovec ( skb, 0, msg -> msg_iov, copied ) ; }",0
312,<S2SV_ModStart> } if ( <S2SV_ModEnd> djrcv_dev -> paired_dj_devices,1
313,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
314,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
315,"<S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; bool all_param_pass = true ; union sctp_params param ; <S2SV_ModStart> __u32 serial ; <S2SV_ModEnd> chunk_len = ntohs <S2SV_ModStart> goto done ; sctp_walk_params ( param, addip, addip_hdr. params ) { if ( param -> p -> type == SCTP_PARAM_IPV4_ADDRESS || param -> p -> type == SCTP_PARAM_IPV6_ADDRESS ) continue ; <S2SV_ModEnd> err_code = sctp_process_asconf_param <S2SV_ModStart>, asconf, param. addip ) ; if ( err_code == SCTP_ERROR_NO_ERROR <S2SV_ModEnd> ) all_param_pass = <S2SV_ModStart> ( err_code ) <S2SV_ModEnd> sctp_add_asconf_response ( asconf_ack <S2SV_ModStart> -> crr_id, err_code, param. addip ) ; if ( err_code == SCTP_ERROR_RSRC_LOW <S2SV_ModEnd> ) goto done <S2SV_ModStart> goto done ; } <S2SV_ModEnd> done : sctp_chunk_free",0
316,"<S2SV_ModStart> 101, ( ""jas_realloc(%x, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",1
317,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
318,<S2SV_ModStart> ; break ; # ifdef CONFIG_PPC_BOOK3S_64 case KVM_CAP_SPAPR_TCE_64 : case KVM_CAP_SPAPR_TCE_32 : case KVM_CAP_SPAPR_TCE_64 : case KVM_CAP_SPAPR_TCE_VFIO : r =! hv_enabled ; break ; # endif # ifdef CONFIG_KVM_E500V2 if defined ( CONFIG_KVM_E500MC ) case defined ( CONFIG_KVM_E500MC ) case defined ( CONFIG_KVM_E500MC ) case defined ( CONFIG_KVM_E500MC ) case defined ( CONFIG_KVM_E500V2 ) case defined ( CONFIG_KVM_E500MC ) r =! hv_enabled ; break ; # endif,0
319,"<S2SV_ModStart> msicap msicap ; memset ( & msicap, 0, sizeof ( msicap ) )",0
320,"<S2SV_ModStart> key_name ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. key, HV_KVP_KEY_SZ <S2SV_ModEnd> ) ; kvp_data <S2SV_ModStart> data. value, HV_KVP_VALUE_SZ <S2SV_ModEnd> ) ; kvp_data <S2SV_ModStart> ; valuelen = utf16_to_utf16s ( value, UTF16_HOST_ENDIAN, <S2SV_ModStart> data. value, HV_KVP_VALUE_SZ <S2SV_ModEnd> ) ; kvp_data <S2SV_ModStart> data. value, HV_KVP_VALUE_SZ <S2SV_ModEnd> ) ; kvp_data <S2SV_ModStart> data. value_type <S2SV_ModEnd> = REG_SZ ;",0
321,"<S2SV_ModStart> ; ctx = rcu_dereference_protected ( d -> log_ctx, lockdep_is_held ( & d -> mutex ) )? eventfp : NULL ; r = - EBUSY ; break ; case VHOST_SET_RX_HASH_TABLE : r = vhost_set_rtx_hash_table ( d, argp ) ; break ; case VHOST_SET_RX_HASH_TABLE : r = vhost_set_rx_hash_table ( d, argp ) ; break ; case VHOST_SET_RX_HASH_TABLE : r = vhost_set_rx_hash_table ( d, argp ) ; break ; case VHOST_SET_RX_HASH_TABLE : r = vhost_set_rtx_hash_table ( d, argp ) ; break ; case VHOST_SET_RX_HASH_TABLE : r = vhost_set_rx_hash_table ( d, argp ) ; break ; case VHOST_SET_RX_HASH_TABLE : r = vhost_set_rx_hash_table ( d, argp ) ; break ; case VHOST_SET_",0
322,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
323,<S2SV_ModStart> * parg = ( void * ) arg ; long err = - EINVAL ; int is_ext_ctrl = ( cmd == VIDIOC_S_EXT_CTRLS || cmd == VIDIOC_G_EXT_CTRLS || cmd == VIDIOC_TRY_EXT_CTRLS ) ; void __user * user_ptr = NULL ; long <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
324,"<S2SV_ModStart> ""only <S2SV_blank> (P)SUBSCRIBE <S2SV_blank> / <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> QUIT <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" ) ; return REDIS_OK ; } if (",0
325,"<S2SV_ModStart> u16 size, const <S2SV_ModStart> data ) { void * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, buf <S2SV_ModEnd>, size, <S2SV_ModStart> 500 ) ; kfree ( buf ) ; return ret ;",1
326,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> num_altsetting < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_devs ; } dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass",0
327,"<S2SV_ModStart> ) { case GTK_RESPONSE_OK : { screen = gtk_widget_get_screen ( GTK_WIDGET ( parameters -> parent_window ) ) ; uri = nautilus_file_get_uri ( parameters -> file ) ; DEBUG ( ""Launching <S2SV_blank> untrusted <S2SV_blank> launcher <S2SV_blank> %s"", uri ) ; nautilus_launch_desktop_file ( screen, uri, NULL, parameters -> parent_window ) ; g_object_unref ( file ) ; } break ; case RESPONSE_OK : { <S2SV_ModEnd> screen = gtk_widget_get_screen <S2SV_ModStart> uri ) ; <S2SV_ModEnd> g_object_unref ( screen",0
328,<S2SV_ModStart> ; if ( urb -> actual_length > 0 &&,1
329,"<S2SV_ModStart> * server, struct smb_vol * vol ) { struct <S2SV_ModStart> cifs_tcp_ses_lock ) ; list_for_each_entry ( ses <S2SV_ModEnd>, & server <S2SV_ModStart> server -> smb_ses_list, smb_ses_list ) { if ( strlen ( ses -> userName ) > MAX_USERNAME_SIZE ) { break ; } <S2SV_ModEnd> } ++ ses",0
330,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( & ctx -> vp8_cfg, 0, sizeof ( ctx -> vp8_cfg ) ) ; <S2SV_ModStart> ) && ( <S2SV_ModEnd> cfg -> g_lag_in_frames <S2SV_ModStart> ( cfg -> <S2SV_ModEnd> g_pass!= VPX_RC_ONE_PASS <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; res = validate_config ( ctx, cfg, & ctx -> vp8_cfg, 0 ) ; if ( ( cfg -> g_lag_in_frames > 1 || cfg -> g_pass!= VPX_RC_ONE_PASS ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> lag_in_frames"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; res = validate_config ( ctx, cfg, & ctx -> vp8_cfg, 0 ) ; if (! res ) { ctx -> cfg = * cfg ; vp8e_change_config ( & ctx -> oxcf, & ctx -> vp8_cfg, NULL",0
331,"<S2SV_ModStart> =='<S2SV_blank>') input ++ ; ptr = r_fs_name ( core -> fs, core -> offset ) ; if (! ptr ) { eprintf ( ""Unknown <S2SV_blank> filesystem <S2SV_blank> type\\n"" ) ; goto error ; } <S2SV_ModEnd> off = r_num_math <S2SV_ModStart> 1 ) ; } <S2SV_ModStart> off ) ) { eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; goto error ; } <S2SV_ModEnd> } else { <S2SV_ModStart> if (! r_fs_mount ( core -> fs, ptr, input, off ) ) { eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; goto error ; } } else { <S2SV_ModStart> offset ) ) { eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; goto error ; } free ( ptr ) ; } break ; case '-' : eprintf ( ""List <S2SV_blank> commands <S2SV_blank> in <S2SV_blank> radare <S2SV_blank> format\\n"" ) ; iter = r_list_foreach ( list, iter, file ) { r_cons_printf ( ""m <S2SV_blank> %s <S2SV_blank> 0x%"" PFMT64x\\n"", file -> path ) ; <S2SV_ModStart> offset ) ) { eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s",0
332,"<S2SV_ModStart> inode ) ; struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> ; if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",1
333,<S2SV_ModStart> key * keyring ; if ( new -> thread_keyring ) return 0,1
334,"<S2SV_ModStart> = 0 ; static size_t scanned ; static size_t readnbd ; static size_t scanned2 ; static size_t scanned3 ; static size_t scanned4 ; static size_t scanned5 ; static size_t readnbd ; static size_t scanned6 ; static size_t scanned7 ; static size_t readnbd ; if ( scanned2 > ( size_t ) 0U ) { scanned2 -= scanned2 ; scanned2 = ( size_t ) 0U ; readnbd = scanned2 ; if ( readnbd > ( size_t ) 0 && errno == EINTR ) { return - 2 ; } readnbd2 = readnb ; if ( readnb2 <= ( ssize_t ) 0 && errno == EINTR ) { while ( ( readnb = read ( clientfd, cmd + scanned2, cmdsize - scanned2 ) ) < ( ssize_t ) 0 && errno == EINTR ) ; } if ( readnb2 <= ( ssize_t ) 0 && errno == EINTR ) { return - 2 ; } if ( readnb2 <= ( ssize_t ) 0 && errno == EINTR )",0
335,"<S2SV_ModStart> orig ) ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; <S2SV_ModStart> mrb_io_alloc ( mrb <S2SV_ModEnd> ) ; DATA_TYPE <S2SV_ModStart> ) ; } fptr_orig = io_get_open_fptr ( mrb, orig ) ; DATA_PTR ( copy ) = fptr_copy ;",0
336,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
337,"<S2SV_ModStart> cpi ) { cpi -> oxcf. <S2SV_ModStart> = 0 ; cpi -> oxcf. plane_quantizers = vpx_init_plane_quantizers ( cpi, & cpi -> twopass. plane_quantizers ) ; cpi -> twopass. plane_quantizers = vpx_init_plane_quantizers ( cpi, & cpi -> twopass. plane_quantizers ) ; cpi -> twopass. plane_quantizers = vpx_init_plane_quantizers ( cpi, & cpi -> twopass. plane_quantizers ) ; cpi -> twopass. plane_quantizers = cpi -> twopass. plane_quantizers ; cpi -> twopass. plane_quantizers = vpx_init_plane_quantizers ( cpi, & cpi -> twopass. plane_quantizers ) ; cpi -> twopass. plane_quantizers = vpx_init_plane_quantizers ( cpi, & cpi -> twopass. plane_quantizers ) ; cpi -> twopass. plane_quantizers = cpi -> twopass.",0
338,"<S2SV_ModStart> return res ; res = utee_param_to_param ( utc, <S2SV_ModEnd> param, callee_params",0
339,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; const struct x86_emulate_ops * ops = ctxt -> ops ; int cpl = ctxt -> ops -> cpl ( ctxt ) ; old_eip = ctxt -> _eip ; ops -> get_segment ( ctxt, & old_cs, & old_desc, NULL, VCPU_SREG_CS ) <S2SV_ModStart> 2 ) ; rc = assign_eip_far ( ctxt, ctxt -> src. val, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; ctxt -> src. val = old_cs ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; ctxt -> src. val = old_eip ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; ctxt -> src. val = old_eip ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; ctxt -> src. val = old_cs ; rc = em_push ( ctxt ) ; if ( rc",0
340,<S2SV_ModStart> -> band = av_calloc <S2SV_ModEnd> ( reslevel -> <S2SV_ModStart> -> prec = av_calloc <S2SV_ModEnd> ( reslevel ->,1
341,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
342,"<S2SV_ModStart> reloc_struct_t * got_table = calloc ( 1, <S2SV_ModEnd> n_got * sizeof <S2SV_ModStart> ut32 ) ) ; if (! got_table ) { goto out_error ; } <S2SV_ModEnd> obj -> n_got <S2SV_ModStart> = n_got ; obj -> got_table = got_table ; } for ( i = 0 ; i < n_got ; i ++ ) { ut32 got_entry ; if ( obj -> hdr -> data_start + offset + 4 > obj -> size ) { break ; } len = r_buf_read_at ( obj -> b, obj -> hdr -> data_start + offset + 4, ( ut8 * ) & got_entry, sizeof ( ut32 ) ) ; if (! VALID_GOT_ENTRY ( got_entry ) || len!= sizeof ( ut32 ) ) { break ; } reloc_table [ i ]. addr_to_patch = got_entry ; reloc_table [ i ]. data_offset = got_entry + BFLT_HDR_SIZE ; } obj -> n_got = n_got ; obj -> got_table = got_table ; obj -> got_table = got_table ;",0
343,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) { WARN_ON_ONCE ( info -> si_code < 0 ) ; <S2SV_ModEnd> return - EPERM <S2SV_ModStart> - EPERM ; },1
344,"<S2SV_ModStart> * p_tx0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdx, <S2SV_ModEnd> p_image -> x0 <S2SV_ModStart> * p_tx1 = ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdx, <S2SV_ModEnd> p_image -> x1 <S2SV_ModStart> * p_ty0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdy, <S2SV_ModEnd> p_image -> y0 <S2SV_ModStart> * p_ty1 = ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdy, <S2SV_ModEnd> p_image -> y1",1
345,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * create_output_name <S2SV_ModStart> * create_output_name ( <S2SV_ModEnd> char * fname <S2SV_ModStart> char * fname, <S2SV_ModEnd> int lower, <S2SV_ModStart> ( utf8 ) return create_output_name_utf8 ( fname, dir, lower, isunix, utf8 ) ; if (! fname ) return NULL ; p = ( unsigned char * ) malloc ( strlen ( ( char * ) fname ) + 2 ) ; if (! p ) { free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) { x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { x = ( c & 0x1F ) << 6 ; x |= ( * fname ++ & 0x3F ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F ) ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF0 ) << 12 ; x |= ( * fname ++ &",0
346,"<S2SV_ModStart> classes = NULL ; zval * return_value = NULL <S2SV_ModStart> ; } } if (! php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { RETURN_FALSE ; } <S2SV_ModStart> } if (! <S2SV_ModEnd> php_var_unserialize_ex ( return_value <S2SV_ModStart> buf_len, & var_hash, class_hash ) ) { RETURN_FALSE ; } if ( Z_TYPE_P ( classes ) == IS_ARRAY ) { zval * entry ; zval * return_value = Z_ARRVAL ( return_value ) ; ZEND_HASH_FOREACH_END ( ) ; } if ( class_hash && Z_TYPE_P ( classes ) == IS_ARRAY ) { zval * entry ; zval * lcname ; ZEND_HASH_FOREACH_END ( ) ; zval_release ( lcname ) ; } ZEND_HASH_FOREACH_END ( ) ; } if (! php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { RETURN_FALSE",0
347,<S2SV_ModStart> goto __err ; tu -> qhead = tu -> qtail = tu -> qused = 0 ;,1
348,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ( ( u32 ) ptr -> size / sizeof ( GF_AdobeBootstrapInfoBox ) > tmp_strsize ) { return GF_ISOM_INVALID_FILE ; } <S2SV_ModEnd> tmp_str = gf_malloc <S2SV_ModStart> gf_malloc ( sizeof ( char ) * tmp_strsize ) ; if (! tmp_str ) return GF_OUT_OF_MEM ; memset ( tmp_str, 0, sizeof ( char ) * tmp_strsize ) ; if (! tmp_str [ i ] ) break ; i ++ ; } <S2SV_ModEnd> if ( i",0
349,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
350,"<S2SV_ModStart> = US """" ; # ifdef HAVE_MKDTEMP uschar * tmp_tmp_dir = NULL ; uschar * tmp_tmp_filename = NULL ; uschar * tmp_tmp_filename <S2SV_ModStart> uschar * tmp_tmp_filename <S2SV_ModEnd> ; uschar * <S2SV_ModStart> uschar * tmp_tmp_filename <S2SV_ModEnd> ; uschar * <S2SV_ModStart> uschar * tmp_tmp_filename <S2SV_ModEnd> ; tmp_tmp_filename [ <S2SV_ModStart> uschar * tmp_tmp_filename <S2SV_ModEnd> ; tmp_tmp_filename [ <S2SV_ModStart> uschar * tmp_tmp_filename <S2SV_ModEnd> ; tmp_tmp_filename [ <S2SV_ModStart> uschar * tmp_tmp_tmp_filename <S2SV_ModEnd> ; tmp_tmp_filename [ <S2SV_ModStart> uschar * tmp_tmp_filename <S2SV_ModEnd> ; tmp_tmp_filename [ <S2SV_ModStart> uschar * tmp_tmp_filename <S2SV_ModEnd> ; tmp_tmp_filename [ <S2SV_ModStart> uschar * tmp_tmp_filename <S2SV_ModEnd> ; tmp_tmp_filename [ <S2SV_ModStart> uschar * tmp_tmp_filename <S2SV_ModEnd> ] ; tmp_tmp_filename <S2SV_ModStart> uschar * tmp_tmp_filename <S2SV_ModEnd> ; tmp_tmp_filename [ <S2SV_ModStart> uschar * tmp_tmp_filename <S2SV_ModEnd> ] ; tmp_tmp_filename <S2SV_ModStart> uschar * tmp_tmp_filename",0
351,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) { WARN_ON_ONCE ( info -> si_code < 0 ) ; <S2SV_ModEnd> return - EPERM <S2SV_ModStart> - EPERM ; },1
352,"<S2SV_ModStart> -> off = strtoull <S2SV_ModEnd> ( p, <S2SV_ModStart> -> filesize = strtoull <S2SV_ModEnd> ( slash +",1
353,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> maxh, max, offx, loopmaxw <S2SV_ModStart>, upb ; size_t i <S2SV_ModEnd> ; upb = <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxh = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> max ) ; max = maxw * maxh ; y = img -> comps [ 0 ]. data ; cb = img -> comps [ 1 ]. data ; cr = img -> comps [ 2 ]. data ; d0 = r = ( int * ) malloc ( sizeof ( int ) * max ) ; d1 = g = ( int * ) malloc ( sizeof ( int ) * max ) ; d2 = b = ( int * ) malloc ( sizeof ( int ) * max ) ; offx = img -> x0 & 1U ; for ( j = 0U ; j < maxw ; ++ j ) { sycc_to_rgb ( offset, upb, * y, cb, * cr",0
354,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> == mode ) { list_move ( & state -> open_states, & state -> owner -> so_states ) ; list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } else { state -> state = fmode <S2SV_ModEnd> ; } } <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
355,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; ssh_set_state ( ssh, SSH2_MSG_KEXINIT ) ;",0
356,"<S2SV_ModStart> ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.one <S2SV_blank> + <S2SV_blank> 1 <S2SV_blank> == <S2SV_blank> tests.constants.two <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.foo <S2SV_blank> == <S2SV_blank> \\""foo\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.empty <S2SV_blank> == <S2SV_blank> \\""\\"" <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
357,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, read_info -> columns, read_info -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( ( Image * ) NULL ) ; }",0
358,"<S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strtest [ 512 <S2SV_ModEnd> ] ; if <S2SV_ModStart> ( lbase, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strbase ) <S2SV_ModStart> ( ltest, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( nbase!= 511 <S2SV_ModEnd> && ntest!= <S2SV_ModStart> && ntest!= 511 <S2SV_ModEnd> ) ; if",1
359,<S2SV_ModStart> intf ) { <S2SV_ModEnd> if ( cdc_ncm_select_altsetting <S2SV_ModStart> - ENODEV ; return <S2SV_ModEnd> cdc_ncm_bind_common ( dev <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
360,"<S2SV_ModStart> 0 ; } if ( elem. in_sg_len!= len ) { return 0 ; } <S2SV_ModStart>, buf, elem. in_sg_len <S2SV_ModEnd> ) ; virtqueue_push",0
361,"<S2SV_ModStart> i, ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; } for ( i = 0 ; i < qcd -> compparms. numstepsizes ; ++ i ) { fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", i, ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] )",0
362,"<S2SV_ModStart>, e -> elems, e ->",1
363,<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; if ( c -> format == CHUNKY ) c -> pix_fmt = AV_PIX_FMT_YUV422P ; else if ( c -> format == CHUNKY ) c -> pix_fmt = AV_PIX_FMT_YUV422P ; else if ( c -> format == CHUNKY ) c -> pix_fmt = AV_PIX_FMT_YUV422P ; else if ( c -> format == CHUNKY ) c -> pix_fmt = AV_PIX_FMT_YUV422P ; else c -> pix_fmt = AV_PIX_FMT_YUV422P ; else if ( c -> format == CHUNKY ) c -> pix_fmt = AV_PIX_FMT_YUV422P ; else if ( c -> format == CHUNKY ) c -> pix_fmt = AV_PIX_FMT_YUV422P ; else if ( c -> format == CHUNKY ) c -> pix_fmt = AV_PIX_FMT_YUV422P ; else if ( c -> format == CHUNKY ) c -> pix_fmt = AV_PIX_,0
364,"<S2SV_ModStart> } isoclns_print ( ndo, p <S2SV_ModEnd>, caplen - <S2SV_ModStart> - 1 ) ; return ( 1 ) ; case ETHERTYPE_PPPOED : case ETHERTYPE_PPPOES : case ETHERTYPE_PPPOES2 : pppoe_print ( ndo, p, length ) ; return ( 1 ) ; case ETHERTYPE_EAPOL : rrcp_print ( ndo, p, length, src, dst ) ; return ( 1 ) ; case ETHERTYPE_RRCP : rrcp_print ( ndo, p, length, src, dst ) ; return ( 1 ) ; case ETHERTYPE_REVARP : if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, ""et1 <S2SV_blank> "" ) ) ; atalk_print ( ndo, p, length ) ; return ( 1 ) ; case ETHERTYPE_ATALK : if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, ""et1 <S2SV_blank> "" ) ) ; atalk_print ( ndo, p, length ) ; return ( 1 ) ; }",0
365,<S2SV_ModStart> q ) { mutex_lock ( & q -> timer_mutex ) ; <S2SV_ModStart> snd_seq_timer_close ( q ) ; mutex_unlock ( & q -> timer_mutex,1
366,"<S2SV_ModStart> int error ; pgoff_t curr ; struct buffer_head bh2 ; error = gfs2_meta_inode_buffer ( ip, & bh2 ) ; if ( unlikely ( error ) ) return error ; error = gfs2_meta_inode_buffer ( ip, & bh2 ) ; if ( unlikely ( error ) ) goto out ; gfs2_trans_add_bh ( ip -> i_gl, bh2, 1 ) ; if ( gfs2_is_stuffed ( ip ) ) { error = gfs2_unstuff_dinode ( ip, NULL ) ; if ( unlikely ( error ) ) goto out ; } curr = start ; offset = start << PAGE_CACHE_SHIFT ; to = PAGE_CACHE_SIZE ; error = write_empty_blocks ( page, from, to, mode ) ; if (! error && offset + to > inode -> i_size &&! ( mode & FALLOC_FL_KEEP_SIZE ) ) { i_size_write ( inode, offset + to ) ; } unlock_page ( page ) ; page_cache_release ( page ) ; i_size_write ( inode,",0
367,<S2SV_ModStart> VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; if ( load -> error ) return ( NULL <S2SV_ModStart> -> real ) || <S2SV_ModEnd> vips_foreign_load_iscompat ( load <S2SV_ModStart> out ) ) { vips_operation_invalidate ( VIPS_OPERATION ( load ) ) ; load -> error = TRUE ; return ( NULL ) ; } <S2SV_ModEnd> vips_image_pipelinev ( load,1
368,"<S2SV_ModStart>, image_noffset ) { const char * name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; verified = 1 ; break ; } } else if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; verified = 1 ; break ; } }",0
369,<S2SV_ModStart> ; if (! retval ) <S2SV_ModEnd> { xfs_attr_leaf_name_t * <S2SV_ModStart> ; args. rmtvaluelen = be32_to_cpu ( leaf -> hdr. valuelen ) ; args. rmtvaluelen = be32_to_cpu ( leaf -> hdr. valuelen ) ; } else { args. rmtvaluelen = be32_to_cpu ( leaf -> hdr. valuelen ) ; args. rmtvaluelen = be32_to_cpu ( leaf -> hdr. valuelen ) ; args. rmtvaluelen = args. rmtvaluelen ; } if ( retval ) { if (! args. rmtvaluelen ) { args. rmtvaluelen = be32_to_cpu ( leaf -> hdr. valuelen ) ; args. rmtvaluelen = be32_to_cpu ( leaf -> hdr. valuelen ) ; args. rmtvaluelen = args. rmtvaluelen ; args.,0
370,"<S2SV_ModStart> ; if ( kfifo_alloc ( & state -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL ) ) return - ENOMEM ; state -> <S2SV_ModStart> dev ; sd = & state -> sd ; v4l2_subdev_init ( sd, & cx23888_ir_controller_ops ) ; v4l2_set_subdevdata ( sd, state ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> rx_params_lock ) ; default_params = default_rx_params ; v4l2_subdev_call ( sd, ir, rx_s_parameters, & default_params ) ; mutex_init ( & state -> tx",0
371,<S2SV_ModStart> service_name_tlv_length ) ; if (! service_name_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if (! miux_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if (! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; },1
372,"<S2SV_ModStart> ssh * ssh = active_state <S2SV_ModEnd> ; struct monitor <S2SV_ModStart> ; if ( ( <S2SV_ModStart>. compression ) && mon -> m_zback == NULL ) { mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; } else { mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; } if (! mon -> m_zlib ) { ssh_packet_set_compress_hooks ( ssh, NULL, ( ssh_packet_comp_alloc_func * ) mm_zalloc, ( ssh_packet_comp_free_func * ) mm_zfree ) ; }",0
373,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ( flags & ( VPX_CODEC_USE_XMA | VPX_CODEC_USE_POSTPROC | VPX_CODEC_USE_INPUT_FRAGMENTS ) ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_ERROR_CONCEALMENT ) &&! ( iface -> caps & VPX_CODEC_CAP_ERROR_CONCEALMENT ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FR",0
374,"<S2SV_ModStart> unsigned int channo ; if (! ( cdef -> ents = jas_alloc2 ( cdef -> numchans, sizeof ( jp2_cdefent_t )",0
375,<S2SV_ModStart> value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
376,<S2SV_ModStart> ) ) { struct icmp_bxm icmp_bxm ; <S2SV_ModStart> icmp_param. dst. dev ; icmp_bxm. data = itp ; icmp_bxm. data_len = sizeof ( icmp_bxm ) ; <S2SV_ModStart> icmp_param. data_len = sizeof ( icmp_bxm ) ; icmp_bxm. data_type = code ; icmp_bxm. data_len = icmp_param. data_len ; <S2SV_ModStart> icmp_param. data_len = icmp_bxm. data_len ; icmp_bxm. data_addr = ipc. data_addr ; icmp_bxm. data_len = sizeof ( icmp_bxm ) ; icmp_bxm. data_len = icmp_pointers [ type ]. data_len ; icmp_bxm. data_len = icmp_param. data_len ; icmp_bxm. data_len = icmp_bxm. data_len ; icmp_bxm. data_addr = saddr ;,0
377,"<S2SV_ModStart> len ; } ND_TCHECK_32BITS <S2SV_ModEnd> ( p + <S2SV_ModStart> 4 ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ; break ; default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; break ; } if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; break ;",0
378,<S2SV_ModStart> 0 ; } if ( unlikely ( IPCB ( skb ) -> opt. optlen ) ) skb_dst_force ( skb ) ; else,1
379,<S2SV_ModStart> private ) { struct skcipher_tfm * tfm = private ; crypto_free_skcipher ( tfm -> skcipher ) ; kfree ( tfm <S2SV_ModEnd> ) ; },1
380,<S2SV_ModStart> bprm ) { <S2SV_ModEnd> int retval ; <S2SV_ModStart> int retval ; bprm_fill_uid ( bprm ) ; <S2SV_ModEnd> retval = security_bprm_set_creds,1
381,<S2SV_ModStart> = nlogs ; if ( unlikely (! headcount ) ) { r = - ENOBUFS ; goto err ; },0
382,<S2SV_ModStart> ) ) { if ( * s == '\\\\' ) { * pt ++ = '\\\\' ; * pt ++ = * s ; dlen -- ; } else { * pt ++ = * s ; dlen -- ; } } <S2SV_ModEnd> * pt ++,0
383,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
384,<S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VP,0
385,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
386,<S2SV_ModStart> ; if (! skb_is_nonlinear ( skb ) ) return 0 ; if (,0
387,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
388,"<S2SV_ModStart> bp, len ) ; len -= 2 ; bp += 2 ; <S2SV_ModStart> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> sum <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> off <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; if ( flags & GRE_KP ) { ND_TCHECK_32BITS ( bp ) ; if ( len < 4 ) goto trunc ; ND_PRINT ( ( ndo, "", <S2SV_blank> key=0x%x"", EXTRACT_32BITS ( bp ) ) ) ; bp += 4 ; len -= 4 ; } if ( flags & GRE_SP ) { ND_TCHECK2 ( * bp, 4 ) ; if ( len < 4 ) goto trunc ; ND_PRINT ( ( ndo, "", <S2SV_blank> seq <S2SV_blank> %u"", EXTRACT_32BITS ( bp ) ) ) ; bp += 4 ; len -= 4 ; } if ( flags & GRE",0
389,<S2SV_ModStart> ( tilebuf ) { tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tile,0
390,"<S2SV_ModStart> 'u' }, { ""umask"", required_argument, NULL, 'u' }, <S2SV_ModStart> break ; case 'u' : umask_val = new_umask_val ; break ; case 'a' : umask_val = get_umask ( ) ; if ( umask_val == 0 ) umask_val = current_umask ( ) ; if ( umask_val == 0 ) umask_val = current_umask ( ) ; if ( umask_val!= new_umask_val ) umask_val = new_umask_val ;",0
391,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; return 0 <S2SV_ModStart> break ; } return <S2SV_ModEnd> error ; }",0
392,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> -> nd_num ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_has_local ) { o2nm_unlock_subsystem ( ) ; return <S2SV_ModEnd> - EBUSY ; <S2SV_ModStart> - EBUSY ; } <S2SV_ModStart> nd_num ; } o2nm_unlock_subsystem ( ) ;,0
393,"<S2SV_ModStart> ; if ( fscanf ( fp, ""\\n <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"", & n, typestr )!= 2 ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (",0
394,<S2SV_ModStart> R_ANAL_OP_TYPE_EQ ) ; r_strbuf_init <S2SV_ModEnd> ( & op <S2SV_ModStart> R_ANAL_OP_TYPE_EQ ) ; r_strbuf_init <S2SV_ModEnd> ( & op <S2SV_ModStart> R_ANAL_OP_TYPE_EQ ) ; if ( op -> type == R_ANAL_OP_TYPE_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_,0
395,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
396,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
397,<S2SV_ModStart> return - E_NOTHANDLED ; if ( ninst == 0 ) return - E_INVALID,1
398,"<S2SV_ModStart> goto trunc ; if ( lshp -> ls_type == LS_TYPE_UNKNOWN ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), EXTRACT_32BITS ( & lshp -> ls_age ), lshp -> ls_length ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), EXTRACT_32BITS ( & lshp -> ls_age ), EXTRACT_16BITS ( & lshp -> ls_length ) ) ; }",0
399,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
400,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> pbody -> cf_present <S2SV_ModStart> pbody -> tim_present ) return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> pbody -> cf = & cf ; if ( <S2SV_ModEnd> pbody -> cf_present <S2SV_ModStart> pbody -> cf_present ) return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> pbody -> tim = & tim ; if ( <S2SV_ModEnd> pbody -> cf_present <S2SV_ModStart> pbody -> cf_present ) return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> pbody -> cf = & cf ; pbody -> tim_present = 1 ; break ; case E_TTEST2 : if (! ND_TTEST2 ( * p + offset ), pbody -> cf_present ) return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> pbody -> tim = & tim ; if (! pbody -> cf_present ) return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> pbody -> cf = & cf ; pbody -> cf_present = 1 ; break ; case E_TTEST2 : if (! ND_TTEST2 ( * p + offset,",0
401,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret ) break ; ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf = <S2SV_ModStart> -> flags |= PIPE_BUF_FLAG_GIFT <S2SV_ModEnd> ; obuf ->",0
402,<S2SV_ModStart> ( ) ; if (! tbuf ) { return NULL ; },1
403,"<S2SV_ModStart>, err ; mm_segment_t old_fs ; <S2SV_ModStart> & r ) ; if (! access_ok ( VERIFY_WRITE, ur, sizeof ( * ur ) ) ) return - EFAULT ; err |= __put_user ( r. ru_utime. tv_sec, & ur -> ru_utime. tv_sec ) ; err |= __put_user ( r. ru_stime. tv_sec, & ur -> ru_stime. tv_sec ) ; err |= __put_user ( r. ru_maxrss, & ur -> ru_maxrss ) ; err |= __put_user ( r. ru_ixrss, & ur -> ru_ixrss ) ; err |= __put_user ( r. ru_idrss, & ur -> ru_idrss ) ; err |= __put_user ( r. ru_isrss, & ur -> ru_isrss ) ; err |= __put_user ( r. ru_minflt, & ur -> ru_minflt ) ; err |= __put_user ( r. ru_nswap, & ur -> ru_nswap ) ;",0
404,"<S2SV_ModStart> NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_RW, ""proc"", ""%r/proc"",",0
405,"<S2SV_ModStart> ; } } if ( c -> spd. that. client == NULL ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), ( md -> sender_port ) ) ; } else { if ( ( c -> spd. that. client == NULL ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), ( md -> sender_port ) ) ; return STF_FAIL + v2N_NO_PROPOSAL ; } }",0
406,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> UINT32 rowstride ) { if (! context ) return FALSE ; if (! bmpdata ||! rowstride ) return FALSE ; <S2SV_ModStart>, rowstride ) ; return TRUE ; } <S2SV_ModEnd> if ( context <S2SV_ModStart> ChromaSubsamplingLevel ) { if (! <S2SV_ModStart> ( context ) ) return FALSE ; return TRUE ;",0
407,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
408,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS,1
409,<S2SV_ModStart> return ( ( ( <S2SV_ModStart> ) / 8 ) * GetPSDPacketSize ( image ),1
410,"<S2SV_ModStart> 0 ) { if ( p_dev -> is_fdt == FALSE ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, p_dev -> errno ) ; p_dev -> fd = open_rdt ( dev_path, O_RDWR | O_CLOEXEC, p_dev -> fd ) ; p_dev -> is_fdt = TRUE ; } else { if ( p_dev -> fd == FALSE ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, p_dev -> errno ) ; p_dev -> fd = open ( dev_path, O_RDWR | O_CLOEXEC ) ; } } } <S2SV_ModEnd> if ( p_dev <S2SV_ModStart> fd < 0 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, p_dev -> errno ) ; p_dev -> fd = open ( dev_path, O_RDWR | O_CLOEXEC, p_dev -> fd",0
411,<S2SV_ModStart> bMasterInterface0 ) ; if (! pcu -> ctrl_intf ) return - EINVAL ; <S2SV_ModStart> bSlaveInterface0 ) ; if (! pcu -> data_intf ) return - EINVAL ;,1
412,"<S2SV_ModStart> const char * devname = kstrdup ( dev_name ( & d -> udev -> dev ), GFP_KERNEL ) ; const char * drvname = d -> name <S2SV_ModStart> udev -> dev ; dev_info ( & d -> udev -> dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"" <S2SV_ModEnd>, KBUILD_MODNAME, <S2SV_ModStart> d ) ; kfree ( devname ) ;",0
413,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpx ) <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpy )",1
414,<S2SV_ModStart> target_enc ) { return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION <S2SV_ModEnd> ; } else,1
415,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static Quantum * QueueAuthenticPixels <S2SV_ModEnd> ( Image * <S2SV_ModStart> image, ssize_t columns, <S2SV_ModStart> exception ) { <S2SV_ModEnd> register Quantum * <S2SV_ModStart> register Quantum * q <S2SV_ModEnd> ; index = <S2SV_ModStart> index = 0 <S2SV_ModEnd> ; switch ( <S2SV_ModStart> : { q = QueueAuthenticPixels <S2SV_ModEnd> ( image, <S2SV_ModStart>, y, columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) return ( Quantum * ) NULL ; <S2SV_ModStart> : { q = QueueAuthenticPixels <S2SV_ModEnd> ( image, <S2SV_ModStart>, y, columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) return ( Quantum * ) NULL ; <S2SV_ModStart> bit ++ ) { index = ConstrainColormapIndex ( image, ( * p >> 6 ) & 0x3, exception ) ; SetPixelIndex ( image, index, q ) ; q += GetPixelChannels ( image ) ; } p ++ ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> % 2 ) { index = ConstrainColormapIndex ( image, ( * p >> 4 ) & 0x3, exception ) ; SetPixelIndex ( image, index, q ) ;",0
416,"<S2SV_ModStart> u_char * tptr, u_int length ) { u_int network_addr_type ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> = FALSE ; if ( length < 1 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Network <S2SV_blank> Address <S2SV_blank> Type <S2SV_blank> (invalid)"" ) ) ; return hexdump ; } <S2SV_ModStart> case AFNUM_INET : if ( length!= 1 + 16 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> IPv4 <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %u)"", length - 1 ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> case AFNUM_INET6 : if ( length!= 1 + 16 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %u)"", length - 1 ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> case AFNUM_INET : if ( length!= 1 + 16 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> IPv4 <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %u)"", length - 1 ) ) ; hexdump = TRUE ; break ; }",0
417,"<S2SV_ModStart> ; u64 msr_data, rdx <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; rdx = reg_read ( ctxt, VCPU_REGS_RDX ) ; <S2SV_ModStart> = X86EMUL_MODE_PROT64 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> = 1 ; rdx = reg_read ( ctxt, VCPU_REGS_RDX ) ; <S2SV_ModStart> VCPU_REGS_RSP ) = rdx <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; break ; case X86EMUL_MODE_PROT64 : cs_sel = ( u16 ) ( msr_data + 48 ) ; if ( ( msr_data + 56 ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; break ; case X86EMUL_MODE_PROT128 : cs_sel = ( u16 ) ( msr_data + 56 ) ; if ( ( msr_data + 56 ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; break ; case X86EMUL_MODE_PROT128 : cs_sel = ( u16 ) ( msr_data + 56 ) ; if ( ( msr_data",0
418,<S2SV_ModStart> dev ) ; ssize_t len ; device_lock ( dev ) ; len = <S2SV_ModEnd> sprintf ( buf <S2SV_ModStart> driver_override ) ; device_unlock ( dev ) ; return len ;,1
419,"<S2SV_ModStart>, i ; <S2SV_ModEnd> if ( out <S2SV_ModStart> CMS_TEXT ) { if (! tmpout ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } tmpout = out ; if (! tmpout ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } for ( ; ; ) { i = BIO_read ( in, buf, sizeof ( buf ) ) ; if ( i <= 0 ) { if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; break ; } if ( i < 0 ) goto err ; break ; } if ( tmpout && ( BIO_write ( tmpout, buf, i )!= i ) ) goto err ; } if ( flags & CMS_TEXT ) { if (! SMIME_text ( tmpout, out ) ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_SMIME_TEXT_ERROR ) ; goto err ; } }",0
420,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( retval == 0 ) rs. enc_tkt_reply -> flags |= TKT_FLG_PRE_AUTH ;,1
421,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> / 2 ] <S2SV_ModEnd> ; int b <S2SV_ModStart> b ) ; vpx_tree_index ii = tree [ i + b ] ; if ( ii <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
422,<S2SV_ModStart> & st ) && ( tmp_dir [ strlen ( W3MCONFIG ) - 1 ] == '\\0' || tmp_dir [ strlen ( W3MCONFIG ) - 1 ] == '\\0' || tmp_dir [ strlen ( W3MCONFIG ) - 1 ] == '\\0' || tmp_dir [ strlen ( W3MCONFIG ) - 1 ] == '\\0' || tmp_dir [ strlen ( W3MCONFIG ) - 1 ] == '\\0' || tmp_dir [ 0 ] == '\\0' || tmp_dir [ strlen ( W3MCONFIG ) - 1 ] == '\\0' || tmp_dir [ strlen ( W3MCONFIG ) - 1 ] == '\\0' || tmp_dir [ strlen ( W3MCONFIG ) - 1 ] == '\\0' || tmp_dir [ strlen ( W3MCONFIG ) - 1 ] == '\\0' || tmp_dir [ strlen ( W3MCONFIG ) - 1 ] == '\\0' || tmp_dir [ 0 ] == '\\0' || tmp_dir [ 0 ] == '\\0' ) ) { tmp_dir [ strlen ( W3MCONFIG ) - 1 ] = '\\0' ; },0
423,"<S2SV_ModStart> = 0 ; size_t pathlen = 0 ; <S2SV_ModStart> case AF_UNIX : pathlen = sizeof ( <S2SV_ModEnd> ( ( struct <S2SV_ModStart> ) -> sun_path ) ; if ( pathlen > MAXPATHLEN ) { pathlen = MAXPATHLEN - 1 ; } strncpy ( addr_text, ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, pathlen ) ; addr_text [ pathlen <S2SV_ModEnd> ] = '\\0'",0
424,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
425,"<S2SV_ModStart> & 0xffff ; if ( synth_devs [ dev ] -> load_patch == NULL ) return - ENXIO ; err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err",0
426,"<S2SV_ModStart> avoid_reserve ) { struct hugepage_subpool * spool = subpool_vma ( vma ) ; struct <S2SV_ModStart> page * page <S2SV_ModEnd> ; long chg <S2SV_ModStart> ( chg ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> page ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> ; } } vma_commit_reservation ( h, vma, addr ) ; return page <S2SV_ModEnd> ; } <S2SV_null>",0
427,"<S2SV_ModStart> filegen_string ) ; if ( filegen == NULL ) { DPRINTF ( 4, ( ""not <S2SV_blank> enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s%s\'\\n"", filegen_string, filegen -> prefix, filegen -> basename ) ) ; continue ; } <S2SV_ModStart> filegen_file ) ; if ( filegen == NULL ) { DPRINTF ( 4, ( ""not <S2SV_blank> enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s\'\\n"", filegen_file ) ) ; continue ; }",0
428,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; timer_set_state",1
429,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t x0 = input [ 15 ] ; tran_high_t x1 = input [ 0 ] ; tran_high_t x2 = input [ 1 ] ; tran_high_t x3 = input [ 2 ] ; tran_high_t x4 = input [ 3 ] ; tran_high_t x5 = input [ 4 ] ; tran_high_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> = input [ 7 ] ; tran_high_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> ; int x9 = input [ 8 ] ; tran_high_t x10 = input [ 10 ] ; tran_high_t x11 = input [ 11 ] ; tran_low_t x12 = input [ 3 ] ; tran_high_t x15 = input [ 14 ] ; s0 = x0",0
430,<S2SV_ModStart> ; # if HAVE_EDSP <S2SV_ModStart> ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON <S2SV_ModStart> ; # endif # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
433,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
434,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> } } } if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
435,"<S2SV_ModStart> ( dp == 0 && pc + asn1_op_lengths [ op ] <= datalen ) { flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; } if ( ( op & ASN1_OP_MATCH__COND && flags & FLAG_MATCHED ) || ( dp + asn1_op_lengths [ op ] <= datalen ) ) { flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; } if ( ( op & ASN1_OP__COND && flags & FLAG_LAST_MATCHED ) || ( dp + asn1_op_lengths [ op ] <= datalen ) ) { flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; } if ( unlikely ( dp >= datalen ) ) { pr_debug ( ""next_op: <S2SV_blank> dp=\\e[32m%zu\\e[m/%zu <S2SV_blank> dp=\\e[33m%zu\\e[m/%zu <S2SV_blank> C=%d <S2SV_blank> J=%d\\n",0
436,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> out ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ( stderr, ""rmdir: <S2SV_blank> verifying <S2SV_blank> access <S2SV_blank> to <S2SV_blank> %s:%s <S2SV_blank> (req <S2SV_blank> path <S2SV_blank> %s)\\n"" <S2SV_ModEnd>, controller, <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! <S2SV_ModStart> cgdir ) ; free ( next ) ;",0
437,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flag & CL_UNPRIVILEGED <S2SV_ModStart> & CL_UNPRIVILEGED ) mnt -> mnt. mnt_flags |= MNT_LOCK_ATIME ; if ( mnt -> mnt. mnt_flags & MNT_READONLY ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( mnt -> mnt. mnt_flags & MNT_NODEV ) mnt -> mnt. mnt_flags |= MNT_LOCK_NODEV ; if ( mnt -> mnt. mnt_flags & MNT_NODEV ) mnt -> mnt. mnt_flags |= MNT_LOCK_NODEV ; if ( mnt -> mnt. mnt_flags & MNT_NOSUID ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOSUID ; if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOEXEC ; if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ),0
438,<S2SV_ModStart> rds_loop_transport ; } <S2SV_ModEnd> } conn ->,1
439,<S2SV_ModStart> * rsize >= 112 <S2SV_ModEnd> && rdesc [,1
440,"<S2SV_ModStart> ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Not <S2SV_blank> EAPOL <S2SV_blank> Key"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_NO_VALID_HANDSHAKE ; } if ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Not <S2SV_blank> EAPOL <S2SV_blank> Key"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_NO_VALID_HANDSHAKE ; } if ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Not <S2SV_blank> EAPOL <S2SV_blank> Key"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_NO_VALID_HANDSHAKE ; }",0
441,"<S2SV_ModStart> filtered ) { serio = i8042_select_port ( port, str & I8042_STR_AUXERR ) ; if ( likely ( serio ) && filtered ) { serio = i8042_select_port ( port, str & I8042_STR_AUXDATA ) ; } else if ( filtered ) { serio = i8042_select_port ( port, str & I8042_STR_AUXERR ) ; } else { serio = i8042_select_port ( port, str & I8042_STR_AUXERR ) ; if ( serio ) { serio = i8042_select_port ( port, str & I8042_STR_AUXDATA ) ; } else if (! filtered ) { serio = i8042_select_port ( port, str & I8042_STR_PARITY ) ; } else { serio = i8042_select_port ( port, str & I8042_STR_TIMEOUT ) ; } }",0
442,"<S2SV_ModStart> ( er ) { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } } else if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } } <S2SV_ModEnd> if (! <S2SV_ModStart> ( er ) { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } else if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; }",0
443,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int udf_translate_to_linux ( uint8_t * newName, <S2SV_ModStart> * udfName, int udfLen, <S2SV_ModEnd> uint8_t * fidName <S2SV_ModStart> int udfLen, <S2SV_ModEnd> uint8_t * fidNameLen <S2SV_ModStart> ; } } newName [ newIndex ++ ] = curr ; else needsCRC = 1 ; } } if ( newIndex < 256 ) newName [ newIndex ++ ] = ILLEGAL_CHAR_MARK ; while ( index < EXT_SIZE && ( udfLen - index - 1 ) <= EXT_SIZE ) { curr = udfName [ index ] ; if ( curr == EXT_MARK && ( udfLen - index - 1 ) <= EXT_SIZE ) { if ( index + 1 < udfLen && ( udfName [ index + 1 ] == '/' || udfName [ index + 1 ] == 0 ) ) { newName [ newIndex ++ ] = ILLEGAL_CHAR_MARK ; while ( index + 1 < udfLen && ( udfName [ index + 1 ] == '/' || udfName [ index + 1 ] == 0 ) ) index ++ ; } if ( curr == EXT_MARK && ( udfLen - index - 1",0
444,"<S2SV_ModStart> void count_segs_sb ( const VP9_COMMON * cm, TileInfo * tile_info, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const int mis <S2SV_ModStart> ] ; bh = num_8x8_blocks_high_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ] ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, bs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_un",0
445,"<S2SV_ModStart> ; if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) ) { serverPanic ( ""Connection <S2SV_blank> closed"" ) ; break ; } if (",0
446,"<S2SV_ModStart> = 0 ; if ( ( mpd -> b_state & ( 1 << BH_Unwritten ) ) && ( mpd -> b_size > disksize ) ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> at <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks <S2SV_blank> %zd <S2SV_blank> with <S2SV_blank> "" ""error <S2SV_blank> %d\\n"", mpd -> inode -> i_ino, ext4_count_free_blocks ( mpd -> inode -> i_sb, disksize ) ) ; mpd -> retval = err ; goto out ; } if ( mpd -> b_state & ( 1 << BH_Mapped ) ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> at <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks <S2SV_blank> "" """,0
447,"<S2SV_ModStart> * s ; const unsigned char * p = sigbuf ; unsigned char * der = NULL ; int derlen = - 1 ; <S2SV_ModStart> s, & p <S2SV_ModEnd>, siglen ) <S2SV_ModStart> == NULL ) goto err ; derlen = i2d_DSA_SIG ( s, & der ) ; if ( derlen!= siglen || memcmp ( sigbuf, der, derlen ) ) <S2SV_ModStart> ; err : if ( derlen > 0 ) { OPENSSL_cleanse ( der, derlen ) ; OPENSSL_free ( der ) ; }",1
448,"<S2SV_ModStart> NULL ) ; if (! _gdImageGifCtx <S2SV_ModEnd> ( im, <S2SV_ModStart>, out ) ) { <S2SV_ModEnd> rv = gdDPExtractData <S2SV_ModStart> size ) ; } else { rv = NULL ; }",1
449,<S2SV_ModStart> ) ; } bprm -> filename = NULL ;,0
450,"<S2SV_ModStart> = 0 ; size_t ai_addrlen = 0 ; size_t addrlen = 0 ; <S2SV_ModStart>, handle, & ai_flags, & ai_family, & ai_socktype, & ai_protocol, & ai_addrlen, & addrlen <S2SV_ModStart>, handle, ai_flags, & ai_family, & ai_socktype, & ai_protocol, & ai_addrlen, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, handle, ai_family, ai_socktype, ai_protocol, ai_addrlen, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, handle, ai_flags, & ai_family, & ai_socktype, & ai_protocol, & ai_addrlen, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, handle, ai_addrlen, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, handle, ai_addrlen, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, handle, ai_family, ai_socktype, ai_protocol, ai_addrlen, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, handle, ai_addrlen, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL,",0
451,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
452,"<S2SV_ModStart> ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> image <S2SV_blank> dimensions"" ) ; goto done ; }",1
453,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
454,"<S2SV_ModStart> * pegasus, u8 * buf, u16 size ) { u8 * buf ; int ret ; buf = kmemdup ( buf, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
455,"<S2SV_ModStart> asdl_seq * body, asdl_arena <S2SV_ModEnd> * arena ) <S2SV_ModStart> = body ; p -> v. Module. arena = arena ;",0
456,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
457,"<S2SV_ModStart> * src, const tran_low_t * active_map, const tran_low_t <S2SV_ModEnd> * flags ) <S2SV_ModStart> >> 4 ; # else int row, col, active_end ; # endif <S2SV_ModStart> ; # if USE_PARTIAL_COPY vpx_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_map &&! flags ) ) { for ( row = 0 ; row < mb_rows ; ++ row ) { for ( ; col < mb_cols ; ++ col ) { if (! active_map [ col ] ) break ; active_end = col ; for ( ; active_end < mb_cols ; ++ active_end ) { vpx_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; } } else { vpx_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; } # else vpx_copy_and_extend_frame ( src, & buf",0
458,<S2SV_ModStart> ) ; } fuse_conn_put ( & cc -> fc ) ;,1
459,"<S2SV_ModStart> ( code ) { * status = ""DECODE_PA_S4U_X509_USER"" ; return code ; } <S2SV_ModEnd> code = verify_s4u_x509_user_checksum",1
460,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> scsi_disk_emulate_command ( SCSIDiskReq <S2SV_ModStart> * outbuf ) { scsi_disk_emulate_read_toc ( r, outbuf ) ; if ( buflen < 0 ) goto illegal_request ; break ; case READ_TOC : buflen = scsi_disk_emulate_read_toc ( r, outbuf ) ; if ( buflen < 0 ) goto illegal_request ; break ; case READ_CAPACITY : s -> tray_locked = req -> cmd. buf [ 4 ] & 1 ; bdrv_lock_medium ( s -> bs, nb_sectors * s -> bs -> sector_size ) ; if ( bdrv_is_inserted ( s -> bs, nb_sectors * s -> bs -> sector_size ) ) goto not_ready ; break ; case WRITE_CAPACITY : s -> tray_locked = req -> cmd. buf [ 4 ] & 1 ; bdrv_lock_medium ( s -> bs, nb_sectors * s -> bs -> sector_size )",0
461,<S2SV_ModStart> cur_pic. field_picture <S2SV_ModEnd> ) return 0,1
462,"<S2SV_ModStart> off ) { struct scatterlist * sgp = & rm -> data. op_sg [ sg ] ; int ret = sizeof ( struct rds_header ) + be32_to_cpu ( rm -> m_inc. i_hdr. h_len ) ; <S2SV_ModStart> 0 ) ; ret = min_t ( int, ret, sgp -> length - conn -> c_xmit_data_off ) ; goto out <S2SV_ModEnd> ; } BUG_ON <S2SV_ModStart> m_inc ) ; out : return ret <S2SV_ModEnd> ; } <S2SV_null>",1
463,<S2SV_ModStart> buf ) ) { return 0 ; } <S2SV_ModEnd> ext_block = (,1
464,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,1
465,<S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_16BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ) ) ; },0
466,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
467,"<S2SV_ModStart> = hmi_data ; uint32_t note_size ; <S2SV_ModStart> channel ; } * note = & note ; if ( hmi_size < 18 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; goto _hmi_end ; } if ( memcmp ( note_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; goto _hmi_end ; } if ( hmi_track_offset [ i ] >= note_size ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; goto _hmi_end ; } if ( memcmp ( note_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; goto _hmi_end",0
468,<S2SV_ModStart> -> id ; haddr -> hci_channel = 0 ;,1
469,<S2SV_ModStart> -> i_iget5_offset ; fh16 [ 3 ] = 0 ;,1
470,"<S2SV_ModStart> attributes
471,"<S2SV_ModStart> case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; } <S2SV_ModStart> break ; case BPF_SUB : if ( signed_add_overflows ( dst_reg -> umin_value, umin_val ) ) { dst_reg -> umin_value = 0 ; dst_reg -> umax_value = U64_MAX ; } else { dst_reg -> umin_value = U64_MIN ; dst_reg -> umax_value = U64_MAX ; } <S2SV_ModEnd> if ( src_known <S2SV_ModStart> case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64",0
472,"<S2SV_ModStart>. sharpness ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; } else if ( method == LPF_PICK_FROM_Q ) { const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; } else { search_filter_level ( sd, cpi, method == L",0
473,"<S2SV_ModStart> case BT_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; status = BT_READ_PROPERTY ( BT_PROPERTY_BDNAME, & bdname ) ; if ( status == BT_STATUS_SUCCESS ) { BT_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BT_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } } break ; case BT_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; bt_property_t prop ; status = BT_READ_PROPERTY ( BT_PROPERTY_BDNAME, & prop ) ; if ( status == BT_STATUS_SUCCESS ) { BT_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BT_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } break ; }",0
474,"<S2SV_ModStart> ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { image = DestroyImageList ( image ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageVirtualPixelMethod ( canvas_image, BlackVirtualPixelMethod, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
475,"<S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, MAXALIGN",0
476,<S2SV_ModStart> void usage_exit ( void,1
477,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
478,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
479,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
480,"<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if (! data ||! data_sz ) return VPX_CODEC_INVALID_PARAM ; # endif <S2SV_ModStart>. decode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, data, <S2SV_ModStart> data, data_sz <S2SV_ModEnd>, user_priv,",0
481,"<S2SV_ModStart> ; if ( strchr ( value,'<S2SV_blank>') ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return 0 ; } if (",0
482,<S2SV_ModStart> inode * inode ) { struct iso_directory_record * de2 ; if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { inode -> i_nlink = 0 ; goto fail ; } de2 = ( struct iso_directory_record * ) de ; if ( de2 -> name_len > ISOFS_MAX_DE_NAME_LEN ) { inode -> i_nlink = de2 -> name_len - ISOFS_MAX_DE_NAME_LEN ; } else { if ( de2 -> name_len > ISOFS_MAX_DE_NAME_LEN ) { inode -> i_nlink = de2 -> name_len - ISOFS_MAX_DE_NAME_LEN ; goto fail ; } de2 = ( struct iso_directory_record * ) de ; if ( de2 -> name_len > ISOFS_MAX_DE_NAME_LEN ) { inode -> i_nlink = de2 -> name_len - ISOFS_MAX_DE_NAME_LEN ; } else { if ( de2 -> name_len > ISOFS_MAX_DE_NAME_LEN ) { inode -> i_nlink =,0
483,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
484,"<S2SV_ModStart> return ; } if ( li + 3 > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> PDU <S2SV_blank> size <S2SV_blank> (%u)!"", li + 3, length ) ) ; return ; } if ( li + 4 > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", li + 4 ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; if ( li + 4 > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", li + 4 ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; while ( pptr < ndo -> n",0
485,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } sendClean ( outputbuffer ) ;",1
486,"<S2SV_ModStart> } else { return false ; } } else if ( r -> CRn == 9 && r -> CRm == 13 ) { if ( pmu_access_event_counter_el0_disabled ( vcpu ) ) return false ; idx = ARMV8_PMU_CYCLE_IDX ; } else if ( r -> CRn == 14 && ( r -> CRm & 12 ) == 8 ) { if ( pmu_access_event_counter_el0_disabled ( vcpu ) ) return false ; idx = ( r -> CRm & 3 ) << 3 ; else if ( r -> Op2 & 7 ) { if ( pmu_access_event_counter_el0_disabled ( vcpu ) ) return false ; idx = ( r -> CRm & 3 ) << 3 ; else idx = r -> Op2 & 7 ; } if (! pmu_counter_idx_valid ( vcpu, idx ) ) return false ; if ( p -> is_write ) { if ( pmu_access_el0_disabled ( vcpu ) ) return false ; kvm_pmu_set_counter_value ( vcpu, idx, p -> regval ) ;",0
487,<S2SV_ModStart> case IS_STRING : { zval dval ; dval = * * zval_affine_elem ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> ) ; affine <S2SV_ModStart> i ] = Z_DVAL ( dval ) ; } <S2SV_ModEnd> break ; default <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { rect. x = <S2SV_ModStart> ) ; } } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { rect. y = <S2SV_ModStart> ) ; } } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval,1
488,<S2SV_ModStart> self ) { if ( self -> dict == NULL ) { return ; } <S2SV_ModEnd> Py_CLEAR ( self,0
489,<S2SV_ModStart> SQL_DROP ) ; <S2SV_ModEnd> return 0 ;,1
490,"<S2SV_ModStart> ; r = __copy_from_user <S2SV_ModEnd> ( data,",1
491,"<S2SV_ModStart> q, * r, * p <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\nThis <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\nThere <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\nparticular <S2SV_blank> purpose.\\n"" <S2SV_ModEnd> ) ; exit <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\nThis <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\nThere <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\nparticular <S2SV_blank> purpose.\\n"" <S2SV_ModEnd> ) ; exit",0
492,<S2SV_ModStart> = 0 ; info -> port = NULL ;,1
493,<S2SV_ModStart> -> ctx. <S2SV_ModEnd> pmu = pmu,1
494,"<S2SV_ModStart> iovec * iovec, struct iov_iter * iter ) { if ( len > MAX_RW_COUNT ) len = MAX_RW_COUNT ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> = 1 ; iov_iter_init ( iter, rw, iovec, * nr_segs, len ) ;",1
495,<S2SV_ModStart> ext4_group_t flex_group ; unsigned <S2SV_ModStart> -> s_log_groups_per_flex ; if ( sbi -> s_log_groups_per_flex < 1 || sbi -> s_log_groups_per_flex > 31 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } <S2SV_ModStart> -> s_log_groups_per_flex ; <S2SV_ModEnd> flex_group_count = (,1
496,<S2SV_ModStart> ; if ( unlikely ( <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
497,"<S2SV_ModStart> cJSON_CreateArray ( ) ; if ( a ) a -> child = n ; else suffix_object ( p, n ) ; } for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } for ( ; a && i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } for ( ; a && i < count ; ++ i ) { cJSON_Destroy ( a ) ; n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = n ; else suffix_object ( p, n ) ; }",0
498,"<S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return need_more_params ( cptr, ""AUTHENTICATE"" ) ; if ( <S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return need_more_params ( cptr, ""AUTHENTICATE"" ) ; if ( <S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return need_more_params ( cptr, ""AUTHENTICATE""",0
499,<S2SV_ModStart> <= w - ( int ),1
500,<S2SV_ModStart> callback_args -> forward_matches ; assert ( match_offset + match_length <= callback_args -> data_size ),1
501,<S2SV_ModStart> options. disable_forwarding || ( ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 &&! no_port_forwarding_flag <S2SV_ModEnd> &&! options,0
502,"<S2SV_ModStart> { if ( length > SMKTREE_DECODE_MAX_RECURSION ) { av_log ( NULL, AV_LOG_ERROR, ""Maximum <S2SV_blank> tree <S2SV_blank> recursion <S2SV_blank> level <S2SV_blank> exceeded.\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",1
503,<S2SV_ModStart> err ; } if ( m -> msg_name ),1
504,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } <S2SV_ModEnd> if ( _PyObject_HasAttrId <S2SV_ModStart>, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" )",0
505,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) { hstartrow <S2SV_ModEnd> = ( numrows <S2SV_ModStart> >> 1 ; n = m ; dstptr = buf ; srcptr = buf ; n = m ; dstptr = buf ; srcptr = buf ; n = m ; } dstptr = & a [ hstartrow * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartrow * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } } if ( buf!= splitbuf ) { jas_free ( buf ) ; buf = splitbuf ; n = m ; dstptr = buf ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; src,0
506,"<S2SV_ModStart> ""REPLY_ADD_STA <S2SV_blank> PASSED\\n"" ) ; ret = iwl_sta_ucode_activate ( priv, sta_id ) ; break ; case ADD_STA_NO_ROOM_IN_TABLE : IWL_ERR ( priv, ""Adding <S2SV_blank> station <S2SV_blank> %d <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> room <S2SV_blank> in <S2SV_blank> table.\\n"", sta_id ) ; break ; case ADD_STA_NO_BLOCK_ACK_RESOURCE : IWL_ERR ( priv, ""Adding <S2SV_blank> station <S2SV_blank> %d <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> block <S2SV_blank> ack <S2SV_blank> resource.\\n"", sta_id ) ; break ; case ADD_STA_NO_ROOM_IN_TABLE : IWL_ERR ( priv, ""Adding <S2SV_blank> station <S2SV_blank> %d <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> room <S2SV_blank> in <S2SV_blank> table.\\n"", sta_id ) ; break ; case ADD_STA_NO_BLOCK_ACK_RESOURCE : IWL_ERR ( priv, ""Adding <S2SV_blank> station <S2SV_blank> %d <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> block <S2SV_blank> ack <S2SV_blank> resource.\\n"", sta_id ) ; break",0
507,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
508,"<S2SV_ModStart> ""a\\0x\\0x\\0b\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""\\0a\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""\\0a\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""\\0a\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""\\0a\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\",0
509,"<S2SV_ModStart> & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ) { while ( 1 ) { <S2SV_ModStart> ] ) ; if (! queue ) break ; <S2SV_ModEnd> if ( free_func <S2SV_ModStart> ( free_func ) { if ( hashbin -> hb_type & HB_LOCK ) spin_unlock_irqrestore ( & hashbin -> hb_spinlock, flags ) ; free_func ( queue ) ; if ( hashbin -> hb_type & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; } <S2SV_ModEnd> } } hashbin <S2SV_ModStart> & HB_LOCK ) <S2SV_ModEnd> spin_unlock_irqrestore ( & <S2SV_ModStart> flags ) ; <S2SV_ModEnd> kfree ( hashbin",1
510,<S2SV_ModStart> EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NODEV ) &&! ( mnt_flags & MNT_NODEV ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOSUID ) &&! ( mnt_flags & MNT_NOSUID ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC,0
511,"<S2SV_ModStart> copied, err <S2SV_ModEnd> ; int vnet_hdr_len <S2SV_ModStart> out_free ; } copied = skb -> len ; if ( copied > len ) { copied = len ; msg -> msg_flags |= MSG_TRUNC ; } copied += skb -> len ; err = skb_copy_datagram_iovec ( skb, 0, msg -> msg_iov, copied ) ; if ( copied > len ) { copied = len ; goto out_free ; } copied += skb -> len ; err = skb_copy_datagram_iovec ( skb, 0, msg -> msg_iov, copied ) ; if ( copied > len ) { copied = len ; } err = skb_copy_datagram_iovec ( skb, 0, msg -> msg_iov, copied ) ; if ( err ) goto out_free ; }",0
512,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
513,"<S2SV_ModStart> ( serial -> num_bulk_out <S2SV_ModEnd> < 2 ) <S2SV_ModStart> < 2 ) { dev_err ( & serial -> interface -> dev, ""missing <S2SV_blank> bulk <S2SV_blank> out <S2SV_blank> endpoints\\n"" ) ; return - ENODEV ; } <S2SV_ModEnd> port = serial",1
514,"<S2SV_ModStart> write_junk = 1, do_rf64 = 0, write_junk = 1 ; ChunkHeader ds64hdr, datahdr ; DS64Chunk ds64_chunk ; JunkChunk junkchunk <S2SV_ModStart> riffhdr ; ds64_chunk = NULL ; if ( ds64_chunk == NULL ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header <S2SV_blank> for <S2SV_blank> non-normalized <S2SV_blank> floating <S2SV_blank> data!"" ) ; return FALSE ; } if (! do_rf64 ) { if ( debug_logging_mode ) error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> rf64 <S2SV_blank> chunk!"" ) ; return FALSE ; } do_rf64 = 0 ; ds64_chunk = NULL ; ds64_chunk = NULL ; junkchunk = NULL ; if (! ds64_chunk ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header <S2SV_blank> for <S2SV_blank> non-normalized <S2SV_blank> floating <S2SV_blank> data!"" ) ; return FALSE ; } if (! ds64_chunk ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> data <S2SV_blank> chunk!"" ) ; return FALSE",0
515,"<S2SV_ModStart> ; if ( msg_sys -> msg_name ) { <S2SV_ModStart> addr, VERIFY_WRITE, msg_sys -> msg_name, msg_sys -> msg_iovlen ) ; } else { err = - EINVAL ; goto out_freeiov ; } <S2SV_ModEnd> if ( msg_sys <S2SV_ModStart> msg_flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( msg_sys -> msg_iovlen == UIO_FASTIOV ) { err = - EINVAL ; goto out_freeiov ; } if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nolock : sock_recvmsg ) ( sock, msg, msg_sys, cmsg_ptr, len, msg_sys -> msg_iovlen )",0
516,"<S2SV_ModStart> inode ) ; struct metapath_buffer * bh = mp -> mp_bh [ 0 ] ; struct <S2SV_ModStart> unsigned end_of_metadata ; int ret <S2SV_ModStart> end_of_metadata = height <S2SV_ModEnd> - 1 ; <S2SV_ModStart> - 1 ; ret = gfs2_meta_inode_block_map ( inode, bh_map, branch_start, bh -> b_blocknr <S2SV_ModEnd> ) ; if <S2SV_ModStart> ALLOC_DATA ; } bh -> b_blocknr = bh -> b_blocknr <S2SV_ModEnd> ; if ( <S2SV_ModStart> ALLOC_GROW_HEIGHT ; bh -> b_size >>= inode -> i_blkbits ; ret = gfs2_meta_inode_block_map ( inode, branch_start, bh -> b_size >> inode -> i_blkbits, bh -> b_size >> inode -> i_blkbits ) ; if ( ret < 0 ) { struct buffer_head * bh ; ptr = metapointer ( end_of_metadata, mp ) ; bh = mp -> mp_bh [ end_of_metadata ] ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [",0
517,"<S2SV_ModStart> ( global -> codec -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next ) ; if ( input -> filename ) { fprintf ( stderr, ""\\nSource <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, stream -> config. in_fn ) ; } else { fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; } if ( stream -> rc_dropframe_thresh ) ; SHOW ( rc_resize_allowed ) ; SHOW ( rc_resize_up_thresh ) ; SHOW ( rc_resize_down_thresh ) ; SHOW ( rc_end_usage ) ; SHOW ( rc_buf_pct ) ; SHOW ( rc_2pass_vbr_bias_pct ) ; SHOW ( rc_2pass_vbr_minsection_pct ) ; SHOW ( rc_2pass_vbr_maxsection_pct ) ; SHOW ( rc_2pass_vbr_bias_pct ) ; SHOW ( rc_2",0
518,<S2SV_ModStart> return FALSE ; { BOOL rc ; <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) rc = <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) if (! rc ) return FALSE ; } { BOOL rc ; <S2SV_ModStart> -> prof_nsc_decode ) rc = <S2SV_ModStart> -> prof_nsc_decode ) if (! rc ) return FALSE ; },1
519,"<S2SV_ModStart> ; if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } valueAVT = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( valueAVT == NULL ) valueAVT = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } valueAVT = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> the <S2SV_blank> literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is",0
520,"<S2SV_ModStart> 0 ) { copy_file_as_user ( ""/etc/skel/.zshrc"", fname, u, g, 0644 ) ; fs_logger ( ""clone <S2SV_blank> /etc/skel/.zshrc"" <S2SV_ModEnd> ) ; } <S2SV_ModStart> 0 ) { copy_file_as_user ( ""/etc/skel/.cshrc"", fname, u, g, 0644 ) ; fs_logger ( ""clone <S2SV_blank> /etc/skel/.cshrc"" <S2SV_ModEnd> ) ; } <S2SV_ModStart> 0 ) { copy_file_as_user ( ""/etc/skel/.cshrc"", fname, u, g, 0644 ) ; fs_logger ( ""clone <S2SV_blank> /etc/skel/.cshrc"" <S2SV_ModEnd> ) ; } <S2SV_ModStart> 0 ) { copy_file_as_user ( ""/etc/skel/.cshrc"", fname, u, g, 0644 ) ; fs_logger ( ""clone <S2SV_blank> /etc/skel/.cshrc"" <S2SV_ModEnd> ) ; } <S2SV_ModStart> } free ( fname ) ; } else if (! arg_shell_none && strcmp ( cfg. shell, ""/usr/bin/csh"" ) == 0 ) { copy_file_as",0
521,"<S2SV_ModStart> req, size_t acl_len, bool raw <S2SV_ModEnd> ) { __be32 <S2SV_ModStart> int status ; struct kvec * iov = req -> rq_rcv_buf. head ; uint32_t attrlen, bitmap [ 3 ] ; if ( ( status = decode_op_hdr ( xdr, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( likely ( ( status = decode_attr_length ( xdr, & attrlen, & savep )!= 0 ) ) goto out ; hdrlen = ( u8 * ) xdr -> p - ( u8 * ) iov -> iov_base ; recvd = req -> rq_rcv_buf. len - hdrlen ; if ( attrlen > recvd ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; } <S2SV_ModEnd> xdr_read_pages ( xdr",0
522,<S2SV_ModStart> fv -> b ) ; if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; else SFClearAutoSave ( sf ) ; } else if ( fv -> b. sf -> fv!= & fv -> b ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 ) return ( false ) ; else SFClearAutoSave ( sf ) ; },0
523,<S2SV_ModStart> msix_tab_size ) { if <S2SV_ModEnd> ( msix_tab_size %,0
524,<S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( &,1
525,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
526,"<S2SV_ModStart> : if ( caml_get_oo_id <S2SV_ModEnd> ( ( value <S2SV_ModStart> ) ) >= 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest ) ; } sp -- ; break ; case OSetOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { v = Val_hp ( intern_dest ) ; if ( intern_obj_table!= NULL ) intern_obj_table [ obj_counter ++ ] = v ; * intern_dest = Make_header ( size, tag, intern_color ) ; sp -> dest = ( value * ) v ; sp -> arg = 1 ; PushItem ( ) ; sp -> op = OFreshOID ; sp -> dest = ( value * ) v ; sp -> arg = 1 ; if ( tag == Object_tag ) { Assert ( size >= 2 ) ; ReadItems ( & Field ( v, 2 ), size - 2 ) ; } else { v = Val_int ( code & 0x3F ) ; } }",0
527,"<S2SV_ModStart> multipart_media ; struct range_data * r = & clt -> clt_ranges ; struct range * range <S2SV_ModEnd> ; size_t content_length <S2SV_ModStart> ; size_t content_length = 0 <S2SV_ModStart> nranges, ret <S2SV_ModEnd> ; char content_range <S2SV_ModStart> if ( ( nranges = parse_ranges ( clt, <S2SV_ModEnd> range_str, st <S2SV_ModStart> st -> st_size, & nranges ) ) == NULL ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr = content_range ; goto abort ; } media = media_find_config ( env, srv_conf, path ) ; if ( media == NULL ) { ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> %lld-%lld/%lld"", range -> start, range -> end, st -> st_size ) ; if ( kv_add ( & resp -> http_headers, ""Content-Range"", content_range ) == NULL ) goto abort ; content_length = 0 ; <S2SV_ModStart> } else { <S2SV_ModEnd> boundary = arc4random <S2SV_ModStart>",0
528,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart>!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> ) ; } <S2SV_ModStart> } if ( ( isr & KSZ8851_ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart>!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & ISR_RXIS )!= 0 ) { ksz8851WriteReg ( interface",0
529,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON * cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
530,<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; if ( c -> format == CHUNKY ) c -> pix_fmt = AV_PIX_FMT_YUV422P ; else if ( c -> format == CHUNKY ) c -> pix_fmt = AV_PIX_FMT_YUV422P ; else if ( c -> format == CHUNKY ) c -> pix_fmt = AV_PIX_FMT_YUV422P ; else if ( c -> format == CHUNKY ) c -> pix_fmt = AV_PIX_FMT_YUV422P ; else c -> pix_fmt = AV_PIX_FMT_YUV422P ; else if ( c -> format == CHUNKY ) c -> pix_fmt = AV_PIX_FMT_YUV422P ; else if ( c -> format == CHUNKY ) c -> pix_fmt = AV_PIX_FMT_YUV422P ; else if ( c -> format == CHUNKY ) c -> pix_fmt = AV_PIX_FMT_YUV422P ; else if ( c -> format == CHUNKY ) c -> pix_fmt = AV_PIX_,0
531,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> msglen ) ) ),0
532,<S2SV_ModStart> tmp ) { goto parse_scheme_end <S2SV_ModEnd> ; } case <S2SV_ModStart> ) ) { goto parse_scheme_end <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; parse_scheme_end : state -> offset = 0 ;,0
533,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
534,<S2SV_ModStart> flags ) { spin_lock ( & ctx -> cancel_lock ) ; <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> cancel_lock ) ;,0
535,"<S2SV_ModStart> ) ) ; if ( c16 -> Curves [ i ] == NULL ) { for ( j = 0 ; j < i ; j ++ ) _cmsFree ( ContextID, c16 -> Curves [ j ] ) ; }",0
536,<S2SV_ModStart> { if (! dev_name ||,1
537,"<S2SV_ModStart> } isoclns_print ( ndo, p <S2SV_ModEnd>, caplen - <S2SV_ModStart> - 1 ) ; return ( 1 ) ; case ETHERTYPE_PPPOED : case ETHERTYPE_PPPOES : case ETHERTYPE_PPPOES2 : pppoe_print ( ndo, p, length ) ; return ( 1 ) ; case ETHERTYPE_EAPOL : rrcp_print ( ndo, p, length, src, dst ) ; return ( 1 ) ; case ETHERTYPE_RRCP : rrcp_print ( ndo, p, length, src, dst ) ; return ( 1 ) ; case ETHERTYPE_REVARP : if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, ""et1 <S2SV_blank> "" ) ) ; atalk_print ( ndo, p, length ) ; return ( 1 ) ; case ETHERTYPE_ATALK : if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, ""et1 <S2SV_blank> "" ) ) ; atalk_print ( ndo, p, length ) ; return ( 1 ) ; }",0
538,"<S2SV_ModStart> -> m_pdwGetRing ) { if ( buf ) memcpy ( buf, bus -> m_pdwGetRing + curr_grp - bus -> m_pdwGetRing, buf_size ) ; else memcpy ( buf, bus -> m_pdwGetRing + curr_grp - bus -> m_pdwGetRing, buf_size ) ; } <S2SV_ModStart> peekonly ) { if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m_pdwGetRing + curr_grp - bus -> m_pdwGetRing, buf_size - curr_grp - bus -> m_pdwGetRing, buf_size ) ; } else { if ( buf ) memcpy_fromio ( buf, bus -> m_pdwGetRing + curr_grp - bus -> m_pdwGetRing, buf_size ) ; } else { if ( buf ) memcpy_fromio ( buf, bus -> m_pdwGetRing + curr_grp - bus -> m_pdwGetRing, buf_size - curr_grp - bus -> m_pdwGetRing, buf_size - curr_grp -",0
539,<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { efree ( replaced ) ; RETURN_FALSE ; },1
540,"<S2SV_ModStart> ; if ( ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == 1 && ( localrsa = d2i_RSAPublicKey_bio ( peerec, NULL ) ) == 1 ) { if (! RSA_set1_RSA ( peerec, localrsa ) ) { goto sslerr ; } } else if ( ( localrsa = d2i_RSA_pubkey_bio ( rawcert, NULL ) ) == 1 ) { <S2SV_ModEnd> goto sslerr ; <S2SV_ModStart> } else if ( ( localkey = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == 1 && ( localrsa = d2i_RSA_bio ( peerec, NULL ) ) == 1 ) { if (! RSA_set1_RSA ( localrsa ) ) { goto sslerr ; } } else if ( ( localrsa = d2i_RSA_pubkey_bio ( rawcert, NULL ) ) == 1 ) { goto sslerr ; } } else if ( BIO_reset ( rawcert ) == 1 && ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == 1 )",0
541,"<S2SV_ModStart> ( ) ; strcpy ( t1_buf_array, t1_line_array ) ; t1_line_ptr = eol ( t1_line_array ) ; } else",0
542,"<S2SV_ModStart> BLOCK_SIZE bsize, int * mi <S2SV_ModEnd> ) { MACROBLOCKD <S2SV_ModStart> -> e_mbd ; const <S2SV_ModStart>, hbs = b_height_log2_lookup [ bsize ] <S2SV_ModEnd> ; PARTITION_TYPE partition <S2SV_ModStart> case PARTITION_NONE : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_VERT : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; if ( mi_col + hbs < cm -> mi_cols ) { set_modeinfo_offsets ( cm, xd, mi_row, mi_col + hbs ) ; * ( xd -> mi [ 0 ] )",0
543,"<S2SV_ModStart> name ) ; if (! strcmp ( key, ""url"" ) && value && looks_like_command_line_option ( value ) ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_URL, ""disallowed <S2SV_blank> submodule <S2SV_blank> url: <S2SV_blank> %s"", value ) ;",1
544,"<S2SV_ModStart> ; int pixel_ptr ; int block_ptr ; int pixel_x, pixel_y ; int total_pixels ; int scanned_rows ; int scanned_cols = s -> avctx -> columns ; int scanned_cols = s -> avctx -> rows - row_inc ; int scanned_rows = s -> avctx -> rows - row_inc ; int scanned_cols = s -> avctx -> columns - row_inc ; int scanned_cols = s -> avctx -> rows - row_inc ; int scanned_rows = s -> avctx -> rows - row_inc ; int scanned_rows = s -> avctx -> rows - row_inc ; int scanned_cols = s -> avctx -> columns ; int scanned_cols = s -> avctx -> rows - row_inc ; scanned_rows = s -> avctx -> rows - row_inc ; scanned_cols = s -> avctx -> columns - row_inc ; scanned_cols = s -> avctx -> rows - row_inc ; scanned_rows = s -> avctx -> rows - row_inc ; scanned_rows = s -> avctx -> rows - row_inc ; scanned_cols = s -> avctx -> rows - row",0
545,<S2SV_ModStart> cnt ) { size_t <S2SV_ModEnd> n ; assert,0
546,<S2SV_ModStart> ; __be16 type ; if ( NAPI_GRO_CB ( skb ) -> encap_mark ) goto out ; NAPI_GRO_CB ( skb ) -> encap_mark = 1,1
547,<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { return 0 ; } if (,1
548,"<S2SV_ModStart> string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER <S2SV_ModEnd> * ) & <S2SV_ModStart> ( TPM2B_MAX_BUFFER * ) & key, & ( session -> sessionKey. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> nonceNewer. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } <S2SV_ModStart> ( TPM_RH_NULL && session -> bind == TPM_RH_NULL ) { session -> sessionKey. b. size = 0 ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> salt. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> nonceNewer. b ) ) ; if (! result ) { return",0
549,<S2SV_ModStart> key_ref ) ; if ( key -> state == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> ) goto can_read_key,0
550,<S2SV_ModStart> u4_first_slice_in_pic = 1 ; if ( 0 == ps_dec -> u1_first_slice_in_pic ) { ps_dec -> u1_first_slice_in_pic = 0 ; ps_dec -> u1_first_slice_in_pic = 1 ; } else if ( 0 == ps_dec -> u1_first_slice_in_pic ) { ps_dec -> u1_first_slice_in_pic = 1 ; } else if ( 1 == ps_dec -> u1_first_slice_in_pic ) { if ( ps_dec -> u1_first_slice_in_pic ) { ps_dec -> u1_first_slice_in_pic = 0 ; ps_dec -> u1_first_slice_in_pic = 1 ; } else if ( 0 == ps_dec -> u1_first_slice_in_pic ) { ps_dec -> u1_first_slice_in_pic = 0 ; } else if ( 1 == ps_dec -> u1_first_slice_in_pic ) { ps_dec -> u1_first_slice_in,0
551,"<S2SV_ModStart> -> var_off ) ; if (! src_known ||! dst_known ) { verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> add <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> name ) ; return - EINVAL ; } <S2SV_ModStart> case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } if ( src_known &&! dst_known ) { verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> sub <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> name ) ; return - EINVAL ; }",0
552,"<S2SV_ModStart> ) ) { cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; cFYI ( 1, ""non-existing <S2SV_blank> inode <S2SV_blank> %p"", direntry -> d_inode ) ; } else { cFYI ( 1, ""non-existing <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; cFYI ( 1, ""non-existing <S2SV_blank> inode <S2SV_blank> %p"", direntry -> d_inode ) ; }",0
553,<S2SV_ModStart> ; break ; case VFIO_PCI_BAR0_REGION_INDEX... VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_BAR0_REGION_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar_size ; break ; case VFIO_PCI_BAR0_REGION_INDEX... VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_BAR0_REGION_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar_size ; break ; case VFIO_PCI_BAR0_REGION_INDEX : info. offset = VFIO_PCI_BAR0_REGION_INDEX_TO_OFFSET ( info. index ) ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_BAR5_REGION_INDEX_TO_OFFSET ( info. index ) ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_,0
554,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ext4_has_inline_data ( inode,1
555,<S2SV_ModStart> -> filesize = UINT64_MAX <S2SV_ModEnd> ; s ->,1
556,"<S2SV_ModStart> rcv_wscale ) ; if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) == NULL ) goto out ;",0
557,"<S2SV_ModStart> char * in, size_t olen <S2SV_ModStart> += 4 ; if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ;",1
558,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
559,"<S2SV_ModStart> i ; size_t copied <S2SV_ModEnd> ; loff_t offset <S2SV_ModStart> ++ ) { copied = min_t ( size_t, copied, len ) ; if ( copied > len ) { for ( i = 0 ; i < nr_pages ; i ++ ) { copied = min_t ( size_t, copied, save_len - cur_len ) ; put_page ( wdata -> pages [ i ] ) ; } rc = - EFAULT ; break ; } for ( ; nr_pages > i + 1 ; nr_pages -- ) put_page ( wdata -> pages [ nr_pages - 1 ] ) ; put_page ( wdata -> pages [ nr_pages - 1 ] ) ; put_page ( wdata -> pages [ nr_pages - 1 ] ) ; put_page ( wdata -> pages [ nr_pages - 1 ] ) ; put_page ( wdata -> pages [ nr_pages - 1 ] ) ; put_page ( wdata -> pages [ nr_pages - 1 ] ) ; put_page ( wdata -> pages [ nr_pages - 1 ] ) ; put_page ( wdata -> pages [ nr_pages - 1 ] ) ; put_",0
560,<S2SV_ModStart> & CP_RDESC_SWAPPED_MIN_MAX ) ) return rdesc ; if ( * rsize < 4,1
561,"<S2SV_ModStart> ) { int number_of_layers, number_of_keyframes, encode_frame_count ; SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> ; svc_log_reset ( svc_ctx <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( svc_ctx ) ; number_of_layers = si -> layers ; for ( i = 0 ; i < si -> layers ; ++ i ) { number_of_layers = i ; number_of_keyframes = encode_frame_count / si -> kf_dist + 1 ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_layers -= i ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, number_of_layers, number_of_keyframes, si -> bytes_sum [ i ] ) ; y_scale = ( si -> width * si -> height * si",0
562,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> BYTE * out, UINT32 outSize <S2SV_ModStart> 5 ) { if ( outSize < 1 ) return FALSE ; outSize -- ; <S2SV_ModStart> 4 ; } if ( outSize < len ) return FALSE ; outSize -= len ; <S2SV_ModStart> } else { if ( outSize < 1 ) return FALSE ; outSize -- ; * out ++ = value ; left -- ; } } return TRUE <S2SV_ModEnd> ; } <S2SV_null>",0
563,"<S2SV_ModStart> ; if ( is_altscreen && screen -> buffer ) { VTermBuffer * sb_buffer = screen -> buffer ; <S2SV_ModStart> screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, sb_buffer ) ; screen -> sb_buffer = NULL ; } else { vterm_allocator_free ( screen -> vt, screen -> buffer ) ; screen -> buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; } if ( is_altscreen && screen -> buffer ) { VTermRect rect = { 0, 0, 0, 0 } ; rect. start_row = 0 ; rect. end_row = 0 ; scrollrect ( rect, first_blank_row - new_rows, 0, user ) ; vterm_screen_flush_damage ( screen ) ; delta -> row -= first_blank_row - new_rows ; vterm_screen_flush_damage ( screen ) ; }",0
564,<S2SV_ModStart> n ) { int literal_start = 0 ; int literal_end = 0 ; int in_named_escape = 0 ; int result = 0 ; assert ( * literal == NULL ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str - 2 ) == '\\\\' && ( * str - 1 ) == 'N' ) { in_named_escape = 1 ; } else if ( in_named_escape && ch == '{' && ( * str - 2 ) == '\\\\' && ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_start = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ;,0
565,"<S2SV_ModStart> * m, size_t <S2SV_ModEnd> bufsize ) { <S2SV_ModStart> * buf ; <S2SV_ModEnd> JAS_DBGLOG ( 100 <S2SV_ModStart> 100, ( ""mem_resize(%p, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, m, <S2SV_ModStart> ( 100, ( ""mem_resize(%p, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, m,",0
566,"<S2SV_ModStart> ( pd, g_settings_dump_location <S2SV_ModEnd> ) ; char",0
567,"<S2SV_ModStart> ; if ( expr -> action. args == NULL ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } expr = expr -> action. args ; } else if (! LookupString ( symInterpretMatchMaskNames, expr -> expr. action. name, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } expr = expr -> expr. args ; } else if ( expr -> expr. op == EXPR_IDENT ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. ident ) ; if (! istreq ( pred_txt, ""any"" ) ) { * pred_rtrn = MATCH_ANY ; * mods_rtrn = MOD_REAL_MASK_ALL ; return true ; } <S2SV_ModEnd> return ExprResolveModMask (",0
568,<S2SV_ModStart> pcrypt_free ( struct aead_instance <S2SV_ModEnd> * inst ) <S2SV_ModStart> * ctx = aead_instance_ctx <S2SV_ModEnd> ( inst ),1
569,<S2SV_ModStart> ; if ( ( x1 + w > ( ptr -> width - w1 ) ) { if ( x1 + h1 > ( ptr -> height - h1 ) ) { if ( y1 + h1 > ( ptr -> height - h1 ) ) { if ( y1 + w > ( ptr -> width - w1 ) ) { if ( y1 + h1 > ( ptr -> height - h1 ) ) { if ( x1 + w > ( ptr -> width - w1 ) ) { if ( y1 + h1 > ( ptr -> width - h1 ) ) { if ( x1 + w1 > ( ptr -> width - w1 ) ) { if ( y1 + h1 > ( ptr -> height - h1 ) ) { if ( y1 + h1 > ( ptr -> height - h1 ) ) { if ( y1 + h1 > ( ptr -> height - h1 ) ) { if ( x1 + w1 > ( ptr -> width - w1 ) ) { if ( y1 > ( ptr -> height - h1 ) ) { if ( x1 > ( ptr -> width - w1 ) ) { if ( y1 > ( ptr ->,0
570,"<S2SV_ModStart> image ) ; count = <S2SV_ModEnd> ReadBlob ( image <S2SV_ModStart> iris_info. name ) ; if ( count!= sizeof ( iris_info. name ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> filler ) ; if ( count!= sizeof ( iris_info. filler ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> filler ) ; if ( count!= sizeof ( iris_info. filler ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> filler ) ; if ( count!= sizeof ( iris_info. filler ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> filler ) ; if ( count!= sizeof ( iris_info. filler ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
571,"<S2SV_ModStart> icmp6_hop_limit ) { if ( <S2SV_ModStart> icmp6_hop_limit ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> hop <S2SV_blank> limit <S2SV_blank> exceeded\\n"" ) ; goto done ; } <S2SV_ModStart> icmp6_hop_limit ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> hop <S2SV_blank> limit <S2SV_blank> exceeded\\n"" ) ; goto done ; } <S2SV_ModStart> icmp6_hop_limit ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> hop <S2SV_blank> limit <S2SV_blank> exceeded\\n"" ) ; goto done ; } <S2SV_ModStart> ) ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> hop <S2SV_blank> limit <S2SV_blank> exceeded\\n"" ) ; goto done ; } if ( <S2SV_ModStart> icmp6_hop_limit ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> hop <S2SV_blank> limit <S2SV_blank> exceeded\\n"" ) ; goto done ; } <S2SV_ModStart> icmp6_hop_limit ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> hop <S2SV_blank> limit <S2SV_blank> exceeded\\n"" ) ; goto done ; }",0
572,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
573,<S2SV_ModStart> * up ; int replay_esn_len ; <S2SV_ModStart> rp ) ; replay_esn_len = xfrm_replay_state_esn_len ( up ) ; replay_esn = nla_data ( rp ) ; if ( replay_esn_len < up -> bmp_len || replay_esn_len > up -> bmp_len * sizeof ( __u32 ) * sizeof ( __u32 ) * sizeof ( __u32 ) * sizeof ( __u32 ) * sizeof ( __u32 ) * sizeof ( __u32 ) * sizeof ( __u32 ) * sizeof ( __u32 ) ; if ( replay_esn_len < up -> bmp_len || replay_esn_len > up -> bmp_len * sizeof ( __u32 ) * sizeof ( __u32 ) * sizeof ( __u32 ) * sizeof ( __u32 ) * sizeof ( __u32 ) * sizeof ( __u32 ) * sizeof ( __u32 ) * sizeof ( __u32 ) * sizeof ( __u32 ) * sizeof ( __u32 ) * sizeof ( __u32 ) * sizeof ( __u32 ) * sizeof,0
574,"<S2SV_ModStart> int ret = proc_dointvec_minmax <S2SV_ModEnd> ( table,",1
575,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what <S2SV_ModEnd>, mvsad_err_cost ( <S2SV_ModStart> check_here, in_what <S2SV_ModEnd>, mvsad_err_cost ( <S2SV_ModStart> check_here, in_what <S2SV_ModEnd>, mvsad_err_cost ( <S2SV_ModStart> check_here, in_what <S2SV_ModEnd>, mvsad_err_cost ( <S2SV_ModStart> check_here, in_what <S2SV_ModEnd>, mvsad_err_cost ( <S2SV_ModStart> check_here, in_what <S2SV_ModEnd>, mvsad_err_cost ( <S2SV_ModStart> check_here, in_what <S2SV_ModEnd>, mvsad_err_cost ( <S2SV_ModStart> check_here, in_what <S2SV_ModEnd>, mvsad_err_cost ( <S2SV_ModStart> check_here, in_what <S2SV_ModEnd>, mvsad_err_cost ( <S2SV_ModStart> check_here, in_what <S2SV_ModEnd>, mvsad_err_cost ( <S2SV_ModStart> check_here, in_what <S2SV_ModEnd>, mvsad_err_cost ( <S2SV_ModStart> check_here, in_what <S2SV_ModEnd>, mvsad_err_cost ( <S2SV_ModStart> check_here, in_what <S2SV_ModEnd>, mvsad_err_cost ( <S2SV_ModStart>",0
576,<S2SV_ModStart> opj_calloc ( ( size_t ) ( <S2SV_ModStart> -> numlayers + 1U <S2SV_ModEnd> ) * l_step_l,0
577,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
578,"<S2SV_ModStart> ps ) { <S2SV_ModEnd> u32 prev_legacy, <S2SV_ModStart> -> flags ; memset ( & kvm -> arch. vpit -> pit_state. channels [ 0 ], 0, sizeof ( kvm -> arch. vpit -> pit_state. channels ) ) ; <S2SV_ModStart> -> flags ; memset ( & kvm -> arch. vpit -> pit_state. channels [ 0 ], 0, sizeof ( kvm -> arch. vpit -> pit_state. channels ) ) ;",0
579,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int encode_nonrd_sb_row ( VP9_COMMON * cm, MACROBLOCKD * xd, const TileInfo * tile_info, <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> int idx_str = <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> ; BLOCK_SIZE bsize <S2SV_ModStart> BLOCK_SIZE bsize ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> mi_col = mi <S2SV_ModEnd> -> mi_col_start ; <S2SV_ModStart> mi_col_end ; mi <S2SV_ModEnd> += MI_BLOCK_SIZE ; <S2SV_ModStart> mi_col += MI_BLOCK_SIZE <S2SV_ModEnd> ) { int <S2SV_ModStart> = UINT_MAX ; vp9_zero <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = UINT_MAX ; vp9_zero <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64 ) ; set_source_var_based_partition ( cpi, tile, mi_row, mi_col, BLOCK_64X64 ) ; break ; case SOURCE_VAR_BASED_PART",0
580,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",1
581,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
582,"<S2SV_ModStart> } else { int fd ; <S2SV_ModStart> return HTTP_UNAUTHORIZED ; } fd = fopen_safe <S2SV_ModEnd> ( filename, <S2SV_ModStart>, ""wb"" ) ; if ( fd < 0 ) { ret_code = HTTP_UNAUTHORIZED ; goto ExitFunction ; } parser -> position = POS_ENTITY ; do { if ( ( entity_offset + Data_Buf_Size ) > fd ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_BAD_REQUEST ; goto ExitFunction ; } while ( ( entity_offset + Data_Buf_Size > fd ) ) { if ( membuffer_append ( & parser -> msg. msg, Buf, ( size_t ) num_read )!= 0 ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_INTERNAL_SERVER_ERROR ; goto ExitFunction ; } } else if ( ( status!= PARSE_SUCCESS ) && ( status!= PARSE_CONTINUE_1 ) && ( status!= PARSE_INCOMPLETE ) ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_BAD_REQUEST ; goto ExitFunction ; }",0
583,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart>, dir ) ) == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } <S2SV_ModEnd> copyfile ( lockfd",0
584,<S2SV_ModStart> blkg ) ) <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> blkg ) ; <S2SV_ModEnd> q -> root_blkg,1
585,"<S2SV_ModStart> 8 ) ; if ( bpp == 8 ) { if ( xoffset + 8 > buf_size ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> xoffset <S2SV_blank> value\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 8 ) ; if ( bpp == 4 ) { if ( xoffset + 8 > buf_size ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> xoffset <S2SV_blank> value\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 8 ) ; if ( xoffset + 8 > buf_size ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> xoffset <S2SV_blank> value\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 8 ) ; if ( xoffset + 8 > buf_size ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> xoffset <S2SV_blank> value\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
586,"<S2SV_ModStart> ; krb5_data rspac ; const char * tgt_realm = krb5_principal_get_realm ( context, krbtgt -> entry. principal ) ; const char * tgt_realm_prefix = krb5_principal_get_realm_prefix ( context, krbtgt -> entry. principal ) ; const char * tgt_realm_prefix = krb5_principal_get_realm_prefix ( context, krbtgt -> entry. principal ) ; const char * tgt_realm_prefix = krb5_principal_get_realm_prefix ( context, krbtgt -> entry. principal, 1 ) ; const char * tgt_realm_prefix = krb5_principal_get_realm_prefix ( context, krbtgt -> entry. principal, tgt_realm_prefix ) ; const char * tgt_realm_prefix = krb5_principal_get_realm_prefix ( context, tgt -> entry. principal ) ; const char * tgt_realm_prefix = krb5_principal_get_realm_prefix ( context, tgt -> entry. principal, tgt_realm_prefix ) ; const char * tgt_realm_prefix = krb5_principal",0
587,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
588,"<S2SV_ModStart> struct usbdevfs_connectinfo ci ; memset ( & ci, 0, sizeof ( ci ) ) ; ci <S2SV_ModEnd>. devnum = <S2SV_ModStart> dev -> devnum ; ci <S2SV_ModEnd>. slow = <S2SV_ModStart> speed == USB_SPEED_LOW <S2SV_ModEnd> ; if (",1
589,"<S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> int optlen ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> & 3 ) { <S2SV_ModStart> IPOPT_END ; } <S2SV_ModEnd> if ( optlen <S2SV_ModStart> && ip_options_compile ( net, & opt -> opt, NULL ) ) { kfree ( * optp ) ; * optp = opt ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
590,<S2SV_ModStart> ; args -> rmtvaluelen2 = args -> rmtvaluelen ; args -> rmtvaluelen2 = args -> rmtvaluelen ; args -> op_flags |= XFS_DA_OP_RENAME ; return 0 ; } args -> rmtblkcnt2 = args -> rmtblkcnt ; args -> rmtvaluelen2 = args -> rmtvaluelen ; retval = xfs_attr3_leaf_add ( args ) ; if ( retval ) { args -> op_flags |= XFS_DA_OP_RENAME ; args -> rmtblkcnt2 = args -> rmtblkcnt2 ; args -> rmtblkcnt2 = args -> rmtblkcnt2 ; } args -> rmtblkcnt2 = args -> rmtblkcnt ; args -> rmtvaluelen2 = args -> rmtvaluelen ; args -> rmtblkno2 = args -> rmtblkcnt2 ; args -> rmtblkcnt2 = args -> rmtblkcnt2 ; args -> rmtblkcnt2 = args -> rmtblkcnt ; args -> rmt,0
591,<S2SV_ModStart> ) ) { int <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
592,"<S2SV_ModStart> ; if ( connection == NULL || strcmp ( connection, ""close"" )!= 0 ) goto error ; else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) goto error ; tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, "" <S2SV_blank> "" ) ; if ( strcasecmp ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) goto error ; for ( int i",0
593,"<S2SV_ModStart> uint16 nif = 0 ; uint16 name_len <S2SV_ModStart> 0 ; } name_len = 0 ; <S2SV_ModStart> -> description ) { name_len = strlen ( d -> description ) ; <S2SV_ModStart> -> name ) { name_len = strlen ( d -> name ) ; } <S2SV_ModStart> -> description ) { name_len = strlen ( d -> description ) ; } <S2SV_ModStart> -> name ) { name_len = strlen ( d -> name ) ; } <S2SV_ModStart> ( struct rpcap_findalldevs_if ) ; for ( address = address -> addresses ; address!= NULL ; address = address -> next ) { switch ( address -> addr -> sa_family ) { case AF_INET : case AF_INET6 : # endif break ; default : break ; } } if ( sock_bufferize ( NULL, sizeof ( struct rpcap_header ), NULL, & sendbufidx, RPCAP_NETBUF_SIZE, SOCK_DGRAM, & sendbuf [ RPCAP_NETBUF_SIZE ], & sendbuf [ RPCAP_NETBUF_SIZE ], & sendbuf [ RPCAP_NETBUF_SIZE ], & sendbuf [ RPCAP_NETBUF_SIZE ], & sendbuf [",0
594,"<S2SV_ModStart> struct dump_dir * dd ; int status = 0 ; <S2SV_ModStart> DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } dd_create_basic_files ( dd, client_uid, NULL ) ; dd_save_text ( dd, FILENAME_ABRT_VERSION, VERSION ) ; dd_save_text ( dd, FILENAME_CMDLINE, cmdline ) ; g_hash_table_iter_init ( & iter, problem_info ) ; while ( g_hash_table_iter_next ( & iter, & gpkey, & gpvalue ) ) { dd_close ( dd ) ; } g_hash_table_iter_init ( & iter, problem_info ) ; for ( gpkey = g_hash_table_lookup ( problem_info, FILENAME_UID ) ; gpkey = g_hash_table_iter_next ( & iter, & gpkey, & gpvalue ) { dd_save_text ( dd, FILENAME_UID, ( gchar * ) gpkey, ( gchar * )",0
595,"<S2SV_ModStart> ; x += 4 <S2SV_ModEnd> ) { index <S2SV_ModStart> index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 4 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 4 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( <S2SV_ModStart> % 4 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 4 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( ssize_t ) ( p ) & ( 0x80 >> bit )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 4 ) ; bit ++ ) { index = ( ( * p",0
596,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
597,"<S2SV_ModStart>, int tstype, bool opt_id <S2SV_ModStart> ; int err <S2SV_ModEnd> ; serr = <S2SV_ModStart> ee_info = tstype ; if ( opt_id && sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= sk -> sk_tskey ; } else { serr = SKB_EXT_ERR ( skb ) ; } <S2SV_ModEnd> if ( opt_id",0
598,"<S2SV_ModStart> } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
599,<S2SV_ModStart> = len ; bp [ 0 ] = 0 ; ND_TCHECK ( bp [ 1 ] ) ;,0
600,"<S2SV_ModStart>, CONST_STR_LEN ( ""?q="" ), CONST_STR_LEN ( ""?q="" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""<?xml"" ), CONST_STR_LEN ( ""<?xml"" ), CONST_STR_LEN ( ""<?xml"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""<?xml"" ), CONST_STR_LEN ( ""<?xml"" ), CONST_STR_LEN ( ""<?xml"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""<?xml"" ), CONST_STR_LEN ( ""<?xml"" ), CONST_STR_LEN ( ""<?xml"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""<?xml"" ), CONST_STR_LEN ( ""<?xml"" ), CONST_STR_LEN ( ""<?xml"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE",0
601,<S2SV_ModStart> ; if ( task -> ptrace && <S2SV_ModStart>! dumpable && ptrace_freeze_traced ( task ) <S2SV_ModEnd> ) { rcu_read_unlock,0
602,<S2SV_ModStart> <= w - ( int ),1
603,<S2SV_ModStart> page ) ; <S2SV_ModEnd> memset ( addr,1
604,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
605,"<S2SV_ModStart> ps_parse -> i4_sei_user_data_registered_ITU_t_t35, ps_parse -> <S2SV_ModStart> ps_parse -> i4_sei_user_data_registered_ITU_t_t35, ps_parse -> i4_sei_user_data_registered_ITU_t_t35 <S2SV_ModStart> ps_parse -> i4_sei_user_data_registered_ITU_t_t35, ps_parse -> i4_sei_user_data_registered_ITU_t_t_t35, ps_parse -> i4_sei_user_data_registered_ITU_t_t_t35, ps_parse -> i4_sei_user_data_registered_ITU_t_t35, ps_parse -> i4_sei_user_data_registered_ITU_t_t35, ps_parse -> i4_sei_user_data_registered_ITU_t_t_t35, ps_parse -> i4_sei_user_data_registered_ITU_t_t_t35, ps_parse ->",0
606,"<S2SV_ModStart> * priv ; if (! port -> interrupt_out_urb ||! port -> interrupt_in_urb ) { dev_err ( & port -> dev, ""required <S2SV_blank> endpoint <S2SV_blank> is <S2SV_blank> missing\\n"" ) ; return - ENODEV ; }",1
607,"<S2SV_ModStart> -> sdma_descq_head ; for ( this_idx = 0 ; this_idx < num_engines ; this_idx ++ ) <S2SV_ModStart> -> sdma_descq_head + this_idx <S2SV_ModEnd>, & tmp_sdma_rht <S2SV_ModStart> -> sdma_descq_head, <S2SV_ModEnd> & tmp_sdma_rht [ <S2SV_ModStart> -> sdma_descq_head, <S2SV_ModEnd> & tmp_sdma_rht [ <S2SV_ModStart> -> sdma_descq_head ] <S2SV_ModEnd>, & tmp_sdma_rht <S2SV_ModStart> -> sdma_descq_head, <S2SV_ModEnd> & tmp_sdma_rht [ <S2SV_ModStart> -> sdma_descq_head, <S2SV_ModEnd> & tmp_sdma_rht [ <S2SV_ModStart> -> sdma_descq_head, <S2SV_ModEnd> & tmp_sdma_rht [ <S2SV_ModStart> -> sdma_descq_head, <S2SV_ModEnd> & tmp_sdma_rht [ <S2SV_ModStart> -> sdma_descq_head ] <S2SV_ModEnd>, & tmp_sdma_rht <S2SV_ModStart> -> sdma_descq_head, <S2SV_ModEnd> & tmp_sdma_rht [ <S2SV_ModStart> -> sdma_descq_head, <S2SV_ModEnd> & tmp_sdma_rht",0
608,<S2SV_ModStart> -> device_data ; cancel_autoload_drivers ( ) ;,1
609,"<S2SV_ModStart>, int rep_quick, my_bool verbose <S2SV_ModStart> ) ) { if ( verbose ) printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; else printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; if ( verbose ) printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ;",0
610,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> p == q ) || ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> size < 16 ) || ( <S2SV_ModEnd> size > 256 <S2SV_ModStart> size > 256 ),1
611,"<S2SV_ModStart> uint dblocks = xfs_attr3_rmt_blocks <S2SV_ModEnd> ( mp,",1
612,"<S2SV_ModStart> ) ; } if ( pcount > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) )",0
613,"<S2SV_ModStart> val ) ; if (! val ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value"", r -> name ) ;",0
614,<S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 1 ] ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 2 ] ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 3 ] ) <S2SV_ModEnd> ) return 0,0
615,"<S2SV_ModStart> _agooErr err ; if ( * v == '\\0' ) { agoo_log_cat ( & agoo_req_get, ""%s <S2SV_blank> llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; * hend = '\\r' ; } else if ( * v == '\\0' ) { agoo_log_cat ( & agoo_con_get, ""%s <S2SV_blank> llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; } else { agoo_log_cat ( & agoo_con_get, ""%s <S2SV_blank> llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; * hend = '\\0' ; } for ( b = c -> buf ; * b!= '\\0' ; b ++ ) { if ( 3!= b - c -> buf || 4!= b - c -> buf || 0!= strncmp ( ""GET"", c -> buf, 3 ) ) { agoo_log_cat ( & agoo_con_get, ""%s"", c -> bind -> id, c -> buf ) ; return bad_request ( c, 400,",0
616,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> int i, <S2SV_ModStart> j ; int16_t temp_in [ 16 ], temp_out [ 16 ] ; const transform_2d ht = FHT_16 [ tx_type ] ; for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) outptr [ j * 16 + i ] = ( temp_out [ j ] + 1 ) >> 2 ; } for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) temp_in [ j ] = input [ j * stride + i ] * 4 ; ht. cols ( temp_in, temp_out ) ; for ( j = 0 ; j < 16 ; ++ j ) outptr [ j * 16 + i ] = ( temp_out [ j ] + 1 + ( temp_out [ j ] < 0 ) ) >> 2 ; } for ( i",0
617,"<S2SV_ModStart> ) ) { g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s.%s"", tmpfile_name, g_key_file_get_filename ( keyfile ) ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s.%s"", tmpfile_name, g_key_file_get_filename ( keyfile ) ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s.%s"", tmpfile_name, g_key_file_get_filename ( keyfile ) ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s.%s"", tmpfile_name, g_key_file_get_filename ( keyfile ) ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s.%s"", tmpfile_name, g_key_file_get_filename ( keyfile ) ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""export-desktop-XXXXXX"", tmpfile",0
618,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; fh_lock ( fh ) ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT <S2SV_ModEnd>, argp -> <S2SV_ModStart> argp -> acl_default ) ; out_drop_lock : fh_unlock ( fh ) ; <S2SV_ModEnd> fh_drop_write ( fh",1
619,<S2SV_ModStart> * ue ; if <S2SV_ModEnd> ( tree_root == <S2SV_ModStart> == NULL ) return 0,1
620,"<S2SV_ModStart> char * temp_filename = osi_calloc ( <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; goto error ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const section_t * section = ( const section_t * ) list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ) { const section_t * entry = ( const section_t * ) list_node ( node ) ; fprintf ( fp, ""[%s]\\n"", section -> name ) ; } if ( list_next ( node )!= list_end ( config -> sections ) ) fputc ( '\\n', fp ) ; } fflush ( fp",0
621,<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) ; <S2SV_ModStart> > 0 ) { elen += pc -> lengthComponentIdent ; break ; } <S2SV_ModEnd> case 2 : <S2SV_ModStart> case 5 : elen += pc -> lengthComponentIdent ; if ( elen > fromlen ) return - EIO ; <S2SV_ModStart> break ; } <S2SV_ModEnd> } if (,1
622,"<S2SV_ModStart> case NFSPROC_GETATTR : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { ND_PRINT ( ( ndo, ""%s"", tok2str ( nfsv3_attr_str, ""access-%u"", EXTRACT_32BITS ( & dp -> rm_call. cb_name ) ) ) ; } break ; case NFSPROC_SETATTR : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefh ( ndo, dp, v3 )!= NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsv3_attr_str, ""access-%u"", EXTRACT_32BITS ( & dp -> rm_call. cb_access ) ) ) ; } break ; case NFSPROC_UNLINK : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { ND_PRINT ( ( n",0
623,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_8BITS ( tptr ) ;,0
624,"<S2SV_ModStart> -> userData, ctxt -> lineNo, ctxt -> colNo <S2SV_ModStart> NULL ) ; xmlFree ( buf ) ; ctxt -> instate = state ; return ; } if ( ( RAW == '<' ) && ( ctxt -> input == NULL ) ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""ParsePI: <S2SV_blank> PI <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } SKIP ( 2 ) ; if ( ( ctxt -> sax ) && ( ctxt -> sax -> processingInstruction!= NULL ) ) { ctxt -> sax -> processingInstruction ( ctxt -> userData, ctxt -> lineNo, target, NULL ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if ( buf == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } while ( len + 5 >= size ) { xmlChar * tmp ; size *= 2 ; tmp = ( xmlChar * ) xmlRealloc ( buf, size * sizeof ( xmlChar ) ) ; if ( tmp == NULL ) { xmlErrMemory ( ctxt, NULL ) ; xmlFree (",0
625,<S2SV_ModStart> ; bool slow <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ;,1
626,"<S2SV_ModStart> len ) { u_int <S2SV_ModEnd> tlen, pdu_type <S2SV_ModStart> } while ( len ) { if (! ND_TTEST2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ) { ND_PRINT ( ( ndo, ""\\n\\t%s"", tstr ) ) ; return ; } <S2SV_ModStart> ) ) { if (! ND_TTEST2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ) { ND_PRINT ( ( ndo, ""\\n\\t%s"", tstr ) ; return ; } <S2SV_ModStart> pdu_len ; } if (! ND_TTEST2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ) { ND_PRINT ( ( ndo, ""\\n\\t%s"", tstr ) ) ; return ; }",0
627,"<S2SV_ModStart> int tagval ; struct stream packet ; <S2SV_ModStart> length ) ; packet = * s ; <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> token <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> token <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> token <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
628,"<S2SV_ModStart> 0 ; int elt ; u_int offset ; u_int data_size ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; if ( ( ( i = * cp ++ ) & INDIR_MASK )!= INDIR_MASK ) { compress = 0 ; rp = cp + l ; } if (! compress ) { rp = cp + 1 ; compress = 1 ; } if (! compress ) { rp = cp + 1 ; compress = 1 ; } if (! compress ) { rp = cp + 1 ; compress = 1 ; } if (! compress ) { rp = cp + 1 ; compress = 1 ; } if (! compress ) { rp = cp + 1 ; compress = 1 ; } if (! compress ) { rp = cp + 1 ; compress = 1 ; } if (! compress ) { rp = cp + 1 ; compress = 1 ; } if (! compress ) { rp = cp + 1 ; compress = 1 ; } if (! compress ) { rp = cp + 1 ; compress = 1 ; }",0
629,"<S2SV_ModStart> ; blkcnt = XFS_FSB_TO_BB ( mp, dp -> i_sb. sb_dblocks ) - args -> rmtblkcnt <S2SV_ModEnd> ; error =",0
630,"<S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" <S2SV_ModEnd> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" <S2SV_ModStart> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""Content-MD5: <S2SV_blank> %s\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s"",",0
631,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", src ) ; exit ( 1 ) ; } <S2SV_ModEnd> if ( child <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> copy_file ( src <S2SV_ModStart> ( src, <S2SV_ModEnd> dest ) ;",0
632,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
633,"<S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MagickMin <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f,",0
634,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_set_str ( GITERR_NET, ""Invalid <S2SV_blank> empty <S2SV_blank> packet"" ) ; return GIT_ERROR <S2SV_ModEnd> ; } if",1
635,<S2SV_ModStart> ; if ( vma -> vm_flags & VM_SHARED ) return VM_FAULT_SIGBUS ; if (,1
636,<S2SV_ModStart> -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> sasl_password = g_strdup ( src -> sasl_password ) ;,0
637,<S2SV_ModStart> env -> insn_aux_data ; int i <S2SV_ModStart> ) ) ; for ( i = off ; i < off + cnt - 1 ; i ++ ) new_data [ i ]. seen = true ;,1
638,"<S2SV_ModStart> ) bp2 ; ND_TCHECK_32BITS ( & dp -> ip6f_offlg ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, ""vflag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_32BITS ( & dp -> ip6f_plen ) ) ) ; } else { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_32BITS ( & dp -> ip6f_plen ) ) ) ; } if ( ( EXTRACT_16BITS ( & dp -> ip6f_offlg ) & IP6F_OFF_MASK )!= 0 ) return - 1 ;",0
639,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;,1
640,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
641,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorDecodeTile"", ""%s"", ""(occ0%rowsize)!=0"" ) ; return 0 ; } <S2SV_ModEnd> assert ( sp <S2SV_ModStart> 0 ) { if (! <S2SV_ModStart>, rowsize ) ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorDecodeTile"", ""%s"", ""(occ0)!=0"" ) ; return 0 ; } <S2SV_ModEnd> occ0 -= rowsize",0
642,"<S2SV_ModStart> o, datao ; if ( CHECKOVERFLOW ( buf, buf_size, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + 6, n -> order ) ; o += 2 ; n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( n -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( ne -> log, ""ExifMnoteCanon"", sizeof ( MnoteCanonEntry ) ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_",0
643,<S2SV_ModStart> ; if ( ctx -> terminated ||,1
644,<S2SV_ModStart> = NULL ; if ( sbi -> spool ) hugepage_put_subpool ( sbi -> spool ) ;,1
645,<S2SV_ModStart> = 0 ; if ( ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) &&! ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) &&! ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) &&! ( param -> testflag & ( T_DESCRIPT | T_READONLY ) &&! ( param -> testflag & T_DESCRIPT ) &&! ( param -> testflag & T_FORCE_UNIQUENESS ) &&! ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) &&! ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) &&! ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) &&! ( param -> testflag & ( T_DESCRIPT | T_READONLY ) &&! ( param -> testflag & T_DESCRIPT ) &&! ( param -> testflag & T_FORCE_UNIQUENESS ) &&! ( param -> testflag & T_FORCE_UNIQUENESS ) &&! ( param -> testflag & T_DESCRIPT,0
646,"<S2SV_ModStart> len ) { size_t alloc <S2SV_ModEnd> ; char * <S2SV_ModStart> unsigned long hex <S2SV_ModEnd> ; CURLcode res <S2SV_ModStart> CURLcode res ; if ( alloc < 2 ) { free ( ns ) ; return NULL ; } alloc -= 2 ; strindex ++ ; in = * string ; if ( ( '%' == in ) && ( ISXDIGIT ( string [ 1 ] ) && ( ISXDIGIT ( string [ 2 ] ) ) ) { hex = strtoul ( hexstr, & ptr, 16 ) ; in = curlx_ultouc ( hex ) ; res = Curl_convert_from_network ( handle, & in, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ;",0
647,"<S2SV_ModStart> 4 ) ; RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, len - op -> size, cpu )",0
648,"<S2SV_ModStart> ( ) ; iov_iter_advance ( i, copied ) ; <S2SV_ModStart> again ; } <S2SV_ModEnd> pos += copied",1
649,<S2SV_ModStart> unlikely ( len + ring -> frameoffset,1
650,<S2SV_ModStart> ; def -> pdu_free_state_ref = usm_free_usmStateReference ; def ->,0
651,"<S2SV_ModStart>, name, data ) ; continue ; } if ( obj -> type == OBJ_DIRECTORY ) { process_directory ( revs, show_object, & base, path, data ) ; show_object ( obj, NULL, path, data ) ; continue ; } if ( obj -> type == OBJ_DIRECTORY ) { process_directory ( revs, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_DIRECTORY ) { process_directory ( revs, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TREE ) { process_tree ( revs, ( struct tree * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } <S2SV_ModEnd> if ( obj",0
652,<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) sub -> nsub = 0 ;,0
653,"<S2SV_ModStart> bitbuf ) { if ( src >= src_end ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> j ++, dst += c -> framebuf_stride ) for ( i = 0 ; i < width ; i ++, dst += c -> framebuf_stride ) for ( j = 0 ; j < height ; j ++, dst += c -> framebuf_stride ) for ( i = 0 ; i < width ; i ++, dst += c -> framebuf_stride ) for ( j = 0 ; j < npal ; j ++, dst += c -> framebuf_stride ) for ( i = 0 ; j < width ; j ++, dst += c -> framebuf_stride ) for ( i = 0 ; i < npal ; i ++, dst += c -> framebuf_stride ) for ( j = 0 ; j < height ; j ++, dst += c -> framebuf_stride ) for ( i = 0 ; i < npal ; i ++, dst += c -> framebuf_stride ) for ( j = 0 ; j < npal ; j ++, dst += c -> framebuf_stride ) for ( i = 0 ; j < height ; j ++, dst += c -> frame",0
654,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
655,"<S2SV_ModStart> idx ] ; # ifdef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= 1 ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; }",0
656,<S2SV_ModStart> ; break ; case 3 : { CheckNumberPixels ( 4 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 2 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; break ; } case 4 : { CheckNumberPixels ( 6 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; break ; } case 5 : { CheckNumberPixels ( 6 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 6 ) & 0x03 ) ; * pixels ++ = ( pixel >>,0
657,<S2SV_ModStart> timer ) ; spin_lock ( & timeri -> timer -> lock ) ; <S2SV_ModStart> slave_active_lock ) ; mutex_unlock ( & timeri -> timer -> lock ) ; <S2SV_ModStart> timer = NULL ; spin_unlock ( & timeri -> timer -> lock ) ;,0
658,<S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [,0
659,"<S2SV_ModStart> -> has_va ; <S2SV_ModEnd> char * arch <S2SV_ModStart> * arch = strdup ( info -> arch ) ; char * cpu = info -> cpu? strdup ( info -> cpu ) : NULL <S2SV_ModEnd> ; ut16 bits <S2SV_ModStart> ; if ( <S2SV_ModEnd> cpu && * <S2SV_ModStart> cpu ) { r_config_set <S2SV_ModEnd> ( r -> <S2SV_ModStart> r -> config, ""anal.cpu"", cpu ) ; } else { r_config_set ( r -> config, ""anal.cpu"", arch ) ; } <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> return true ;",0
660,"<S2SV_ModStart> sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart>, * n <S2SV_ModEnd> ; list_for_each_entry (",1
661,"<S2SV_ModStart> -> u1_dpb_commands_read ) { <S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands ( ps_dec ) ; } else { return ERROR_INV_SLICE_HDR_T ; } <S2SV_ModEnd> i_temp = ps_pps <S2SV_ModStart> -> u1_pic_init_qp + ih264d_sev ( pu4_bitstrm_ofst, pu4_bitstrm_buf ) ; if ( i_temp > 51 ) return ERROR_INV_RANGE_QP_T ; i_temp = ps_pps -> u1_pic_init_qp + ih264d_sev ( pu4_bitstrm_ofst, pu4_bitstrm_buf ) ; if ( ( i_temp < 0 ) || ( i_temp > 51 ) ) return ERROR_INV_RANGE_QP_T ; i_temp = ps_pps -> u1_pic_init_qp + ih264d_sev ( pu4_bitstrm_ofst, pu4_bitstrm_buf ) ; if ( i_temp < 0 ) return",0
662,"<S2SV_ModStart> gint64 offset ; <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; offset <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> if (! <S2SV_ModStart>, line, <S2SV_ModEnd> err, err_info <S2SV_ModStart> err, err_info ) ) return FALSE ; if ( <S2SV_ModEnd> wth -> file_encap <S2SV_ModStart> wth -> file_encap!= WTAP_ENCAP_PER_PACKET ) { if ( wth -> file_encap!= WTAP_ENCAP_UNKNOWN ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; } else { if ( wth -> file_encap!= WTAP_ENCAP_PER_PACKET ) { if ( wth -> file_encap!= WTAP_ENCAP_UNKNOWN ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; } else { if ( wth -> file_encap!= WTAP_ENCAP_PER_PACKET ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; }",0
663,"<S2SV_ModStart> 0 ) ; if ( <S2SV_ModStart>. seq_num ) < 0 ) { return - 1 ; } dtls1_buffer_record ( s, & ( s -> d1 -> processed_rcds ), s -> s3 -> rrec. seq_num ) ; s -> s3 -> rrec. seq_num = 0 ; } } else { s -> d1 -> processed_rcds. epoch = s -> d1 -> r_epoch ; s -> d1 -> unprocessed_rcds. epoch = s -> d1 -> r_epoch + 1 ; dtls1_buffer_record ( s, & s -> d1 -> unprocessed_rcds ), s -> s3 -> rrec. seq_num",0
664,<S2SV_ModStart> decode ) { uint_fast32_t originalWidth = gifFilePtr -> Image. Width ; uint_fast32_t originalHeight = gifFilePtr -> Image. Height ; <S2SV_ModStart> originalHeight ; const uint_fast32_t newRasterSize ; if ( widthOverflow > 0 && heightOverflow > 0 ) { newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; } else { newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; } if ( <S2SV_ModEnd> newRasterSize > info,0
665,"<S2SV_ModStart> : ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = <S2SV_ModStart> == 0 ) ret = <S2SV_ModEnd> key -> type <S2SV_ModStart> type -> read ( key, buffer, buflen ) ; up_read <S2SV_ModEnd> ( & key <S2SV_ModStart> sem ) ; <S2SV_ModEnd> } error2 :",1
666,"<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator <S2SV_ModStart> conn -> validator -> user ) ) { return ret_error ; } size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; ret = validate_dn ( props, dn, conn -> validator -> passwd. buf ) ; if ( ret!= ret_ok ) return ret ; re = ldap_count_entries ( ldap -> conn, message ) ; if ( re!= 1 ) { ldap_msgfree ( message ) ; return ret_not_found ; } first = ldap_first_entry ( ldap -> conn, message ) ; if ( first == NULL ) { ldap_msgfree ( message ) ; return ret_not_found ; } dn = ldap_get_dn ( ldap -> conn, first ) ; if ( dn == NULL ) { ret_msgfree ( message ) ; return ret_error ; } ret = validate_dn ( props, dn, conn -> validator -> user ) ; if ( ret!= ret_ok ) return ret_error ;",0
667,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlobShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length <S2SV_ModStart> ReadBlobShort ( image ) ; if ( length <S2SV_ModStart> ReadBlobShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobShort ( image ) ; if ( length > GetBlob",0
668,"<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - JAS_CAST ( jas_longlong <S2SV_ModEnd>, tmp )",0
669,<S2SV_ModStart> page ) ; rm -> atomic. op_active = 0 ;,1
670,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
671,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
672,"<S2SV_ModStart> sizeof ( spath ) ) return - 1 ; if ( strstr ( name, "".."" ) ) { flog ( LOG_ERR, ""interface <S2SV_blank> name <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long: <S2SV_blank> %s"", name, iface ) ; return - 1 ; } if ( strstr ( name, "".."" ) ) { flog ( LOG_ERR, ""interface <S2SV_blank> name <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long: <S2SV_blank> %s"", name, iface ) ; return - 1 ; } if ( strncmp ( name, "".."", sizeof ( name ) - 1 ) ) { flog ( LOG_ERR, ""interface <S2SV_blank> name <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long: <S2SV_blank> %s"", name, iface ) ; return - 1 ; }",0
673,<S2SV_ModStart> 0 ) { const char * t ; <S2SV_ModStart> s ++ ; <S2SV_ModEnd> if ( * <S2SV_ModStart> * t &&! isdigit ( ( unsigned char ) <S2SV_ModStart> ) ) t ++ ; if (! isdigit ( ( unsigned char ) t ) ) { <S2SV_ModStart> t ) ) { if (! isdigit ( ( unsigned char ) t ) ) { free ( font_name ) ; font_name = ( char * ) malloc ( 1 ) ; } else { free ( font_name ) ; font_name = ( char * ) malloc ( 1 ) ; } if (! isdigit ( ( unsigned char ) t ) ) { free ( font_name ) ; font_name = ( char * ) malloc ( 1 ) ; } if (! isdigit ( ( unsigned char ) t ) ) { free ( font_name ) ; font_name = ( char * ) malloc ( 1 ) ; font_name = ( char * ) malloc ( 1 ) ; } else if (! isdigit ( ( unsigned char ) t ) ) { free ( font_name ) ; font_name = ( char * ) malloc ( 1 ) ; } else { free ( font_name ) ; font_name = ( char * ) malloc ( 1 ) ),0
674,"<S2SV_ModStart> -> bcache, cache_id ( <S2SV_ModStart> ] -> data )",1
675,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
676,"<S2SV_ModStart>, NULL, NULL ) ; UIPC_LOCK ( ) ; uipc_check_interrupt_locked ( ) ; uipc_check_task_flags_locked ( ) ; uipc_check_fd_locked ( UIPC_CH_ID_AV_AUDIO ) ; for ( ch_id = 0 ; ch_id < UIPC_CH_NUM ; ch_id ++ ) { if ( ch_id!= UIPC_CH_ID_AV_AUDIO ) uipc_check_fd_locked ( ch_id ) ; } uipc_check_interrupt_locked ( ) ; uipc_check_task_flags_locked ( ) ; uipc_check_fd_locked ( UIPC_CH_ID_AV_AUDIO ) ; for ( ch_id = 0 ; ch_id < UIPC_CH_NUM ; ch_id ++ ) { if ( ch_id!= UIPC_CH_ID_AV_AUDIO ) uipc_check_fd_locked ( ch_id ) ; } UIPC_UNLOCK ( ) ;",0
677,<S2SV_ModStart> return 1 ; dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ; return 1 ; } if ( dh -> dccph_type == DCCP_PKT_RESET ) goto discard ; dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ; return 1 ;,0
678,"<S2SV_ModStart> msixcap msixcap ; if ( msgnum > MAX_MSIX_TABLE_ENTRIES ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> msix_table_entries <S2SV_blank> (%d)\\n"", __func__, msgnum ) ; return - 1 ; } <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_populate_msixcap ( &",0
679,"<S2SV_ModStart> ; upperdentry = lookup_one_len ( dentry -> d_name. name, dentry -> d_name. len ) ; if ( upperdentry && upperdentry -> d_inode ) { mutex_lock ( & upperdentry -> d_inode -> i_mutex ) ; err = notify_change ( upperdentry, attr, NULL ) ; mutex_unlock ( & upperdentry -> d_inode -> i_mutex ) ; } else { err = ovl_copy_up_last ( dentry, attr, false ) ; } ovl_drop_write ( dentry ) ; out :",0
680,<S2SV_ModStart> ( isspace ( ( unsigned char ),1
681,"<S2SV_ModStart> ; if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if (",0
682,"<S2SV_ModStart> int decode_unsigned_max ( vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int max ) { vpx_read_bit_buffer <S2SV_ModEnd> * const int <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",0
683,<S2SV_ModStart> 1 ) ; if ( strlen ( line ) == 0 ) return - 1 ;,1
684,"<S2SV_ModStart> == NULL ) { retval = KRB5KDC_ERR_UNSUPPORTED_CERT ; goto cleanup ; } status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ; } retval = 0 ; cleanup :",0
685,<S2SV_ModStart> ++ ) { if ( band -> prec ) { <S2SV_ModStart> ) ; } },1
686,"<S2SV_ModStart> ; if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error == NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } else if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; ctxt -> valid = 0 ; } else { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } else { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; ctxt -> valid = 0 ; } }",0
687,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart>, & final ) ; rcu_read_unlock ( <S2SV_ModStart> -> ir_v6_rmt_addr ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), <S2SV_ModEnd> np -> tclass <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (",1
688,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE select_tx_mode ( const VP9_COMMON * cm, const VP9EncoderConfig <S2SV_ModEnd> * cpi ) <S2SV_ModStart> ) { return ONLY_4X4 <S2SV_ModEnd> ; } else <S2SV_ModStart> } else { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; if ( frame_type == MV_FRAME_32 ) { return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] : cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]",0
689,"<S2SV_ModStart> ( u32 size, u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } <S2SV_ModEnd> return malloc ( <S2SV_ModStart> malloc ( size * num",1
690,<S2SV_ModStart> : if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> break ; } <S2SV_ModStart> : if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> break ; } <S2SV_ModStart> : if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> break ; } <S2SV_ModStart> : if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> break ; },0
691,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,1
692,<S2SV_ModStart> ; if ( buf1 -> tile_id < buf2 -> tile_id ) { return - 1 ; } else if ( buf1 -> tile_id > buf2 -> tile_id ) { return 1 ; } else if ( buf1 -> tile_id < buf2 -> tile_id ) { return 1 ; } else if ( buf1 -> tile_id > buf2 -> tile_id ) { return - 1 ; } else if ( buf1 -> tile_id > buf2 -> tile_id ) { return 1 ; } else if ( buf1 -> tile_id < buf2 -> tile_id ) { return 1 ; } else if ( buf1 -> tile_id == buf2 -> tile_id ) { return - 1 ; } else if ( buf1 -> tile_id == buf2 -> tile_id ) { return,0
693,<S2SV_ModStart> scn ) ; if ( root_storage == NULL ) { cdf_directory_t * root_storage = cdf_new_directory ( root_storage ) ; if ( root_storage == NULL ) { cdf_directory_t * root_storage = cdf_new_directory ( root_storage ) ; if ( root_storage == NULL ) { cdf_directory_t * root_storage = cdf_new_directory ( root_storage ) ; root_storage = cdf_new_directory ( root_storage ) ; if ( root_storage == NULL ) { cdf_directory_t * root_storage = cdf_new_directory ( root_storage ) ; if ( root_storage == NULL ) { cdf_directory_t * root_storage = cdf_new_directory ( root_storage ) ; if ( root_storage == NULL ) { cdf_directory_t * root_storage = cdf_new_directory ( root_storage ) ; root_storage = cdf_new_directory ( root_storage ) ; if ( root_storage == NULL ) { cdf_directory_t * root_storage = cdf_new_directory ( root_storage ) ; root_storage = NULL ; } } },0
694,<S2SV_ModStart> ; size_t sz ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ;,0
695,<S2SV_ModStart> (! eof && vars -> str. c!= vars -> ptr,1
696,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
697,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
698,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc!= X86EMUL_CONTINUE ) break <S2SV_ModStart> case 4 : rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val )",1
699,"<S2SV_ModStart> url ) ; if ( strcmp ( url. name, list. name )!= 0 ) { mutt_err ( 1, ""Invalid <S2SV_blank> subscribed <S2SV_blank> mailbox <S2SV_blank> name: <S2SV_blank> %s\\n"", errstr ) ; return ; }",0
700,"<S2SV_ModStart> void * end <S2SV_ModEnd> ) { struct <S2SV_ModStart> * th ; <S2SV_ModEnd> int dlen ; <S2SV_ModStart> struct ceph_crypto_key old_key ; void * dbuf = NULL ; void * ticket_buf = NULL <S2SV_ModStart> bad ) ; if ( is_enc ) { dout ( "" <S2SV_blank> encrypted <S2SV_blank> ticket\\n"" ) ; dlen = ceph_x_decrypt ( & old_key, p, end, & dbuf, 0 ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; dp = ticket_buf ; <S2SV_ModStart> bad ) ; ticket_buf = kmalloc ( dlen, GFP_NOFS ) ; if (! ticket_buf ) { ret = - ENOMEM ; goto out ; } ticket_buf = kmalloc ( dlen, GFP_NOFS ) ; if (! ticket_buf ) { ret = - ENOMEM ; goto out ; } tp = ticket_buf ; <S2SV_ModStart> bad ) ; ticket_buf = kmalloc ( dlen, GFP_NOFS ) ; if (! ticket_buf ) { ret = - ENOMEM ; goto out ;",0
701,"<S2SV_ModStart> / 2 ; if ( count > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) )",0
702,<S2SV_ModStart> rq ) ; rcu_read_lock ( ) ; <S2SV_ModStart> skip_clock_update = 0 ; rcu_read_unlock ( ),0
703,"<S2SV_ModStart> -> init_msg ; if (! s -> session ) { al = SSL_AD_INTERNAL_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, ERR_R_MALLOC_FAILURE ) ; goto f_err ; } <S2SV_ModStart> -> tlsext_tick_lifetime_hint ) ; if (! s -> session -> session_id ) { SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, ERR_R_MALLOC_FAILURE ) ; goto f_err ; }",0
704,"<S2SV_ModStart> b ) ; switch ( b -> type ) { case BUTTON_TYPE_BUTTON : r = log_add_event ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; break ; case BUTTON_TYPE_VIDEO : r = log_add_event ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; break ; case BUTTON_TYPE_VIDEO : r = log_add_event ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; break ; case BUTTON_TYPE_CHAT : r = log_add_event ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; break ; case BUTTON_TYPE_VIDEO : r = log_add_event ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; break ; case BUTTON_TYPE",0
705,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
706,<S2SV_ModStart> NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_ARRAY_REF <S2SV_ModStart>. entry ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; default :,0
707,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
708,"<S2SV_ModStart>, end_col_offset ; string type_comment ; <S2SV_ModStart>, funcdef ) ; type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i ) ) ; if (! type_comment ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 1 ) ) == TYPE_COMMENT ) { type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 2 ) ) ; if (! type_comment ) return NULL ; } else { type_comment = NULL ; } get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; if (! type_comment ) return NULL ; type_comment = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! type_comment ) return NULL ; body = ast_for_suite ( c, CHILD ( n, name_i + 4 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & type_comment, & end_lineno, & end_col_offset ) ; if (! type_comment ) return NULL ; type_",0
709,"<S2SV_ModStart> err = 0 ; if (! net_eq ( current -> nsproxy -> net_ns, sock_net ( sk ) ) ) return - EINVAL",1
710,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
711,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
712,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
713,"<S2SV_ModStart> ) / 3 ) ThrowReaderException ( CorruptImageError, ""InvalidColormapIndex"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries",0
714,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) { rc = <S2SV_ModStart> ) ; } return rc <S2SV_ModEnd> ; } <S2SV_null>,0
715,,1
716,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
717,"<S2SV_ModStart> : if ( position < 0 ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; } ; if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> : if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> headindex >= <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; } ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> > psf -> header ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; } ; psf_fseek ( psf, position, whence ) ; return ; case SEEK_SET : if ( position > <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; } ; psf_fseek ( psf, position, whence ) ; return ; case SEEK_CUR : if ( psf -> headerindex + position > <S2SV_ModEnd> psf -> header",0
718,<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ioffset ) ; <S2SV_ModEnd> credits = ext4_writepage_trans_blocks,0
719,<S2SV_ModStart> uint32_t midi_type ; uint8_t * * tracks ; uint32_t end_of_tracks ; uint32_t no_tracks ; uint32_t track_size ; uint32_t * track_end ; uint32_t smallest_track ; uint32_t subtract_track ; uint32_t smallest_track ; uint32_t subtract_track ; uint32_t smallest_track ; uint32_t subtract_track ; uint32_t tmp_val ; tmp_val = * midi_data ++ << 24 ; tmp_val |= * midi_data ++ << 16 ; tmp_val |= * midi_data ++ << 8 ; tmp_val |= * midi_data ++ << 8 ; tmp_val |= * midi_data ++ ; midi_size -= 4 ; tmp_val = * midi_data ++ << 24 ; tmp_val |= * midi_data ++ << 16 ; tmp_val |= * midi_data ++ << 8 ; tmp_val |= * midi_data ++ << 24 ; tmp_val |= * midi_data ++ << 16 ; tmp_val |= * midi_data ++,0
720,"<S2SV_ModStart> sk_sndbuf = max_t <S2SV_ModEnd> ( u32, <S2SV_ModStart> * 2, SOCK_MIN_SNDBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_RCVBUF : val = min_t ( u32, val, sysctl_rmem_max ) ; set_rcvbuf : sk -> sk_userlocks |= SOCK_RCVBUF_LOCK ; sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_MIN_RCVBUF ) ;",0
721,"<S2SV_ModStart> * bh ; unsigned int table_len ; <S2SV_ModStart> -> b_data ; table_len = le32_to_cpu ( lvd -> mapTableLength ) ; if ( table_len > le32_to_cpu ( lvd -> mapTableLength ) ) goto out_bh ; <S2SV_ModStart> -> s_partitions && table_len < le32_to_cpu ( lvd -> mapTableLength ) ) goto out_bh ; for ( i = 0 ; i < sbi -> s_partitions && offset < table_len ; i ++, offset += gpm -> partitionMapLength ) { struct udf_part_map * map = & sbi -> s_partmaps [ i ] ; map -> s_volumeseqnum = le16_to_cpu ( ( ( __le16 * ) upm2 -> partIdent. volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( upm2 -> partIdent. partitionNum ) ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_volumeseqnum = le16_to_cpu ( upm2 -> volSeqNum ) ; map ->",0
722,"<S2SV_ModStart> long n ; image = 0 ; info = 0 ; <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> header\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> 1, ( ""BMP <S2SV_blank> header: <S2SV_blank> len <S2SV_blank> %d; <S2SV_blank> width <S2SV_blank> %d; <S2SV_blank> height <S2SV_blank> %d; <S2SV_blank> numplanes <S2SV_blank> %d; <S2SV_blank> "" ""depth <S2SV_blank> %d; <S2SV_blank> enctype <S2SV_blank> %d; <S2SV_blank> siz <S2SV_blank> %d; <S2SV_blank> hres <S2SV_blank> %d; <S2SV_blank> vres <S2SV_blank> %d;\\n"", info -> len, info -> width, info -> height, info -> numplanes, info -> depth, info -> enctype, info -> siz, info -> hres, info -> vres ) ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> 1, ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %d; <S2SV_blank> width <S2SV_blank> %d; <S2SV_blank> height <S2SV_blank> %d; <S2SV_blank> numplanes <S2SV_blank> %d; <S2SV_blank> "" ""depth <S2SV_blank> %d; <S2SV_blank> enctype <S2SV_blank> %d; <S2SV_blank> siz <S2SV_blank> %d; <S2SV_blank> hres <S2SV_blank> %d; <S2SV_blank> vres <S2SV_blank> %d; <S2SV_blank> vres <S2SV_blank> %d; <S2SV_blank> vres <S2SV_blank> %d; <S2SV_blank> v",0
723,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
724,"<S2SV_ModStart> u4_ofst ) ; if ( PS_GET ( ps_cabac -> u4_bit_ofst, ps_bitstrm -> pu4_buf, ps_bitstrm -> u4_bit_ofst, ps_bitstrm -> u4_cur_word, ps_bitstrm -> u4_nxt_word, 9 )!= u4_range ) { IHEVCD_ERROR_T e = PSS_GET ( ps_cabac -> u4_bit_ofst, ps_bitstrm -> pu4_buf, ps_bitstrm -> u4_bit_ofst, ps_bitstrm -> u4_cur_word, ps_bitstrm -> u4_nxt_word, 9 ) ; if ( ps_get ( ps_cabac -> u4_bit_ofst, ps_bitstrm -> pu4_buf, ps_bitstrm -> u4_cur_word, ps_bitstrm -> u4_nxt_word, 9 )!= u4_range ) { IHEVCD_ERROR_T e = PSS_GET",0
725,"<S2SV_ModStart> g_tv_comment, FILENAME_COMMENT ) ; g_notebook_set_current_page ( assistant, 1 ) ; if ( g_expert_mode ) gtk_notebook_set_current_page ( assistant, 2 ) ; else gtk_notebook_set_current_page ( assistant, 3 ) ; } if ( pages [ PAGENO_REVIEW_DATA ]. page_widget == page ) { gtk_toggle_button_set_active ( GTK_TOGGLE_BUTTON ( g_rb_custom_search ), TRUE ) ; show_warnings ( ) ; } if ( pages [ PAGENO_EDIT_COMMENT ]. page_widget == page ) { gtk_widget_show ( g_btn_detail ) ; gtk_widget_set_sensitive ( g_btn_next, gtk_toggle_button_get_active ( g_tb_approve_bt ) ) ; } if ( pages [ PAGENO_EDIT_COMMENT ]. page_widget == page ) { gtk_widget_show ( g_btn_detail ) ; gtk_widget_set_sensitive ( g_btn_next, false ) ; on_comment_",0
726,"<S2SV_ModStart> media_pad_desc pad ; if ( links -> pads [ p ]. source -> entity!= entity ) continue ; <S2SV_ModStart> ( entity -> pads [ p ]. sink, & pad ) ; if ( copy_to_user ( & links -> pads [ p ]. flags, & link. flags, sizeof ( link. flags ) ) ) return - EFAULT ; media_device_kpad_to_upad ( entity -> pads [ l ]. source, & link. source ) ; media_device_kpad_to_upad ( entity -> pads [ l ]. sink, & link. sink ) ; link. flags = entity -> links [ l ]. flags ;",0
727,<S2SV_ModStart> = off ; if ( line -> indent > 0 && line -> beg > p_end ) { line -> type = MD_LINE_EMPTY ; ctx -> last_line_has_list_loosening_effect = TRUE ; } else if ( line -> type == MD_LINE_FENCEDCODE && CH ( pivot_line -> beg ) == CH ( p_end ) ) { line -> type = MD_LINE_FENCEDCODE ; } else if ( CH ( p_end ) == CH ( p_end ) ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = TRUE ; } else if ( line -> beg > p_end ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = TRUE ; } else if ( line -> type == MD_LINE_FENCEDCODE && CH ( p_end ) == CH ( p_end ) ) { if ( prev_line_has_list_loosening_effect ) { ctx -> last_line_has_list_loosening_effect = TRUE ; },0
728,"<S2SV_ModStart>, extent, height, <S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; height = sun_info. height * sun_info. depth ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( ResourceLimitError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( ResourceLimitError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; bytes_per_line = sun_info. width * sun_info. height ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( ResourceLimitError, ""InsufficientImageDataInFile"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( ResourceLimitError, ""InsufficientImageDataInFile"" )",0
729,"<S2SV_ModStart>, krb5_principal client_principal, const char * tgt_realm <S2SV_ModStart> rk_is_subkey ) { const char * tgt_realm = tgt_name ; const char * tgt_realm = tgt -> realm ; const char * tgt_realm_str = tgt -> realm_str ; const char * tgt_realm_str = tgt -> realm_str ; const char * tgt_realm_str = tgt -> realm_str ; const char * tgt_realm_str = tgt -> realm_str ; const char * tgt_realm_str = tgt -> realm_str ; const char * tgt_realm_str = tgt -> realm_str ; const char * tgt_realm_str = tgt -> realm_str ; const char * tgt_realm_str = tgt -> realm_str ; const char * tgt_realm_str = tgt -> realm_str ; const char * tgt_realm_str = tgt -> realm_str ; const char * tgt_realm_str = tgt -> realm_str ; const char * tgt_realm_str = tgt -> realm_str ; const char * tgt_realm_str = tgt -> realm_str ; const char * tgt_realm_str = tgt",0
730,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
731,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = ireq ->,1
732,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
733,"<S2SV_ModStart>!= 0 ) { int tstart = skb_transport_offset ( skb ) + tlen ; <S2SV_ModStart> ( csum, skb_checksum ( skb, tstart, <S2SV_ModEnd> offset, 0 <S2SV_ModStart> 0 ) ) ; }",0
734,"<S2SV_ModStart> pfn ) ; kvm_unpin_pages ( kvm, pfn, page_size ) ; <S2SV_ModStart> unmap_pages : kvm_unpin_pages <S2SV_ModEnd> ( kvm, <S2SV_ModStart> base_gfn, gfn - slot -> base_gfn",0
735,<S2SV_ModStart> 0x00 } ; if ( cmd -> msg_len > sizeof ( b ) - 4 ) return - EINVAL ;,1
736,<S2SV_ModStart> perf_event_context * ctx ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } <S2SV_null>,0
737,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> ; return ( <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> [ 3 ] ; return <S2SV_ModEnd> ( value & <S2SV_ModStart> & 0xffffffff ) <S2SV_ModEnd> ; } <S2SV_null>,1
738,"<S2SV_ModStart> free_nid * i, * e <S2SV_ModStart> ; int err = - EINVAL <S2SV_ModStart> return false ; e = __lookup_free_nid ( nm_i, nid ) ; if ( e ) return e -> state == NID_NEW ; i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) { err = - ENOMEM ; goto err_out ; } spin_lock ( & nm_i -> nid_list_lock ) ; radix_tree_preload_end ( ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; radix_tree_preload_end ( ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; err_out : spin_unlock ( & nm_i -> nid_list_lock ) ; radix_tree",0
739,<S2SV_ModStart>. post_proc_flag ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ) <S2SV_ModEnd> ; flags ->,0
740,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> ++ cons ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> extra. type ) ; netbk_fatal_tx_err ( vif",1
741,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ;,1
742,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
743,"<S2SV_ModStart> ; defaultoptions ( L <S2SV_ModEnd> ) ; lua_settop <S2SV_ModStart> 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_checkstack ( L, 1, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; switch ( opt ) { case 'a' : { lua_Number a ; memcpy ( & a, data + pos, sizeof ( a ) ) ; correctbytes ( & a, sizeof ( a ), h. endian ) ; lua_pushnumber ( L, a ) ; break ; } case 'b' : { lua_Number b ; memcpy ( & b, data + pos, size ) ; correctbytes ( & b, sizeof ( b ), h. endian ) ; lua_pushnumber ( L, b ) ; break ; } case 'f' : { float f ; memcpy ( & f, data + pos, size ) ; correctbytes ( & d, sizeof ( d ), h. endian ) ; lua_pushnumber ( L, f ) ; break ; } case 'd' : { double d ; memcpy ( & d, data + pos, size ) ; correctbytes ( & d, sizeof ( d ), h. endian ) ; lua",0
744,"<S2SV_ModStart> = 0 ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, EXTRACT_16BITS ( ptr. common -> packet_seq ) ) ) ; tptr += sizeof ( struct olsr_msg4 ) ; } else { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, EXTRACT_16BITS ( ptr. v6 -> packet_seq ) ) ) ; tptr += sizeof ( struct olsr_msg4 ) ; } if ( msg_len_valid ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, EXTRACT_16BITS ( msgptr. v6 ->",0
745,"<S2SV_ModStart> -> data ; unsigned <S2SV_ModStart> ; int n ; if ( len < sizeof ( struct oz_multiple_fixed ) + 1 ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, NULL, 0 ) ; return ; } n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) / body -> unit_size ; if (! n <S2SV_ModEnd> ) break ; <S2SV_ModStart> ( len - ( <S2SV_ModStart> struct oz_multiple_fixed ) + 1 ) / body -> unit_size ; for ( i = 0 ; i < count ; i ++ ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, unit_size ) ; data += unit_size ; } } break ; case OZ_DATA_F_ISOC_FIXED : { struct oz_isoc_fixed * body = ( struct oz_isoc_fixed * ) data_hdr ; int data_len = len - sizeof ( struct oz_isoc_fixed ) + 1 ; int unit_size = body -> unit_size ; u8 * data = body -> data ; int count ; int i ; if",0
746,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
747,"<S2SV_ModStart> { fprintf ( stderr <S2SV_ModEnd>, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) <S2SV_ModStart> ) ; int copy_file = copy_file_as_user ( src, dest, getuid ( ), getgid ( ) ) ; if ( copy_file == - 1 ) errExit ( ""copy_file_as_user"" ) ; if ( copy_file == - 1 ) errExit ( ""copy_file_as_user"" ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } copy_file_as_user ( src, dest, getuid ( ), getgid ( ), 0 ) ; if ( copy_file_as_user ( src, dest, getuid ( ), getgid ( ) == - 1 ) errExit ( ""copy_file_as_user"" ) == - 1 ) errExit ( ""copy_file_as_user"" ) ; <S2SV_ModEnd> return 1 ;",0
748,"<S2SV_ModStart> IMAP_FATAL ; return ; } if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { imap_err ( idata, ""Error <S2SV_blank> parsing <S2SV_blank> STATUS\\n"" ) ; idata -> status = IMAP_FATAL ; return ; } mailbox = idata -> buf ; s = mailbox + litlen ; SKIPWS ( s ) ; status = imap_mboxcache_get ( idata, mailbox, 1 ) ; if ( status == NULL ) { imap_err ( idata, ""Error <S2SV_blank> parsing <S2SV_blank> STATUS\\n"" ) ; return ; }",0
749,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
750,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> ) ) { ext_size = sizeof ( struct ext4_extent_header ) + sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_entries ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size ) ; <S2SV_ModStart> ) ) { ext_size = sizeof ( struct ext4_extent_header ) + sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_entries ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size ) ;",0
751,<S2SV_ModStart> ; if ( sfb >= ptr_hbe_txposer -> max_sfb ) { ptr_hbe_txposer -> max_sfb = ptr_hbe_txposer -> max_sfb ; ptr_hbe_txposer -> max_sfb = ptr_hbe_txposer -> min_sfb ; ptr_hbe_txposer -> max_sfb = ptr_hbe_txposer -> max_sfb ; } else { if ( sfb >= ptr_hbe_txposer -> max_sfb ) { ptr_hbe_txposer -> max_sfb = ptr_hbe_txposer -> max_sfb ; ptr_hbe_txposer -> max_sfb = ptr_hbe_txposer -> min_sfb ; ptr_hbe_txposer -> max_sfb = ptr_hbe_txposer -> max_sfb ; } else { if ( sfb >= ptr_hbe_txposer -> max_sfb ) { ptr_hbe_txposer -> max_sfb = ptr_hbe_txposer -> max_sfb ; ptr_hbe_txposer,0
752,<S2SV_ModStart> ; cmap_len = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> 0 x_origin = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; y_origin = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; image_w = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; image_h = get_tga_ushort <S2SV_ModEnd> ( & tga,0
753,<S2SV_ModStart> ; ssize_t ret ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
754,"<S2SV_ModStart> tp ) { struct timespec rem ; <S2SV_ModStart> == CPUCLOCK_SCHED ) rem <S2SV_ModEnd> = div_long_long_rem ( <S2SV_ModStart> cpu. sched, NSEC_PER_SEC, & rem ) ; <S2SV_ModEnd> cputime_to_timespec ( cpu <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
755,"<S2SV_ModStart> uint32 nstrips ; if ( td -> td_imagelength == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""TIFFNumberOfStrips"", ""%s"", ""missing <S2SV_blank> imagelength"" ) ; return 0 ; }",0
756,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
757,"<S2SV_ModStart> lua_module ) ; luaLuaFunction * function_name = parsed_require_line ; luaLuaFunction * function_ptr = parsed_require_line ; luaLuaFunction * function_ptr = parsed_require_line ; luaLuaFunction * function_ptr = parsed_require_line ; luaLuaFunction * function_ptr = parsed_require_line ; int result ; int nargs = 0 ; luaLuaFunction * function_ptr = parsed_require_line ; if ( function_ptr == NULL ) { lua_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", function_name ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; } lua_getglobal ( L, function_ptr ) ; if (! lua_isfunction ( L, - 1 ) ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO (",0
758,"<S2SV_ModStart> * prev ; unsigned long stack_guard_gap ; <S2SV_ModStart> &= PAGE_MASK ; stack_guard_gap = ( address - vma -> vm_start ) >> PAGE_SHIFT ; <S2SV_ModStart> ; error = acct_stack_growth ( vma, stack_guard_gap, 0 ) ; if ( error ) return error ; prev = vma -> vm_prev ; if ( unlikely ( stack_guard_gap < vma -> vm_pgoff ) ) return - ENOMEM ; grow = ( vma -> vm_pgoff - stack_guard_gap ) >> PAGE_SHIFT ; error = - ENOMEM ; if ( grow <= vma -> vm_pgoff ) { error = acct_stack_growth ( vma, size, grow ) ; if (! error ) { spin_lock ( & mm -> page_table_lock ) ; mm -> locked_vm += grow ; anon_vma_interval_tree_pre_update_vma ( vma ) ; anon_vma_interval_tree_post_update_vma ( vma ) ; } }",0
759,"<S2SV_ModStart> { umode_t mode <S2SV_ModEnd> ; error = <S2SV_ModStart> ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart>, & mode, & acl <S2SV_ModStart> if ( error <S2SV_ModEnd> ) return error <S2SV_ModStart> return error ; <S2SV_ModEnd> error = xfs_set_mode",1
760,"<S2SV_ModStart>, int optional, const char * rootfs <S2SV_ModStart> endif if ( safe_mount <S2SV_ModEnd> ( fsname, <S2SV_ModStart> MS_REMOUNT, data, rootfs <S2SV_ModStart>, data ) < 0",1
761,"<S2SV_ModStart> ""UnableToReadImageData"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
762,"<S2SV_ModStart> it_overrun = - 1LL <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> info -> si_overrun = timer_overrun_to_int ( timr, info -> si_overrun ) <S2SV_ModEnd> ; } unlock_timer",1
763,<S2SV_ModStart> ; if ( proto_end == url <S2SV_ModEnd> ) return 0,0
764,<S2SV_ModStart> static_key * done_key <S2SV_ModEnd> ) { static <S2SV_ModStart> flags ) ; <S2SV_ModEnd> return true ;,0
765,"<S2SV_ModStart> -> actual ; bool kiocb_has_eventfd = <S2SV_ModEnd> io_data -> kiocb <S2SV_ModStart> ki_flags & IOCB_EVENTFD ; if ( io_data -> read && ret > 0 ) { use_mm ( io_data -> mm ) ; ret = copy_to_iter ( io_data -> buf, ret, & io_data -> data ) ; if ( iov_iter_count ( & io_data -> data ) ) ret = - EFAULT ; unuse_mm ( io_data -> mm ) ; } io_data -> kiocb -> ki_complete ( io_data -> kiocb, ret, ret ) ; if ( io_data -> ffs -> ffs_eventfd &&! ( io_data -> kiocb -> ki_flags & IOCB_EVENTFD ) ) eventfd_signal ( io_data -> ffs -> ffs_eventfd, 1 ) ; if ( io_data -> ffs -> ffs_eventfd &&! ( io_data -> kiocb -> ki_flags & IOCB_EVENTFD ) ) eventfd_signal ( io_data -> ffs -> ffs_eventfd, 1",0
766,<S2SV_ModStart> ; if ( IPCB ( skb ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> &&! opt,1
767,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
768,"<S2SV_ModStart> struct trusted_key_payload * p ; struct trusted_key_payload * new_p ; struct trusted_key_options * new_o ; size_t datalen = prep -> datalen ; char * datablob ; int ret = 0 ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ; <S2SV_ModStart> 0 ] ; <S2SV_ModEnd> if (!",1
769,"<S2SV_ModStart> v |= ( JAS_CAST ( uint_fast32_t, c ) <S2SV_ModEnd> << 24 )",1
770,<S2SV_ModStart> NULL ) { if ( skb -> len < ROSE_MIN_LEN ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> 2 ] ; if ( frametype == ROSE_CALL_REQUEST && ( skb -> len <= ROSE_CALL_REQ_FACILITIES_OFF || skb -> data [ ROSE_CALL_REQ_ADDR_LEN_OFF ]!= ROSE_CALL_REQ_ADDR_LEN_VAL ) ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> -> data + ROSE_CALL_REQ_DEST_ADDR_OFF <S2SV_ModEnd> ) ; lci_o,1
771,<S2SV_ModStart> ; out_free : if ( old. base_gfn!= old. base_gfn ) goto out_free ;,0
772,<S2SV_ModStart> ( indev!= NULL && indev -> dead ) { rcu_read_unlock ( ) ; return NF_DROP ; } <S2SV_ModEnd> ifa = indev,0
773,"<S2SV_ModStart> fdt ) ; const char * name_start = path + 1 ; const char * name_end <S2SV_ModEnd> = '\\0' ; <S2SV_ModStart> = nextoffset ; name_start = fdt_get_name ( fdt, offset, & len ) ; <S2SV_ModStart> - FDT_ERR_BADSTRUCTURE ; if (! name_start ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> += len ; if ( end - name_start >= path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> + len ; if ( end - name_start >= path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> - FDT_ERR_NOSPACE ; if ( end - name_start >= path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> - FDT_ERR_NOSPACE ; if ( end - name_start >= path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> - FDT_ERR_NOSPACE ; if ( end - name_start >= path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> - FDT_ERR_NOSPACE ; if ( end - name_start >= path_len ) return -",0
774,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",1
775,"<S2SV_ModStart> case NID_pkcs7_encrypted : if ( p7 -> d. encrypted == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT ) ; goto err ; } if ( p7 -> d. encrypted == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT ) ; goto err ; } if ( p7 -> d. encrypted == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT ) ; goto err ; } if ( p7 -> d. encrypted == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT ) ; goto err ; }",0
776,"<S2SV_ModStart> ) ; } for ( j = 0 ; j < server. dbnum ; j ++ ) { if (! ( loops % 50 ) && ( used || vkeys ) ) { redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys ) ; } else if ( server. activerehashing ) incrementallyRehash ( ) ; } if (! ( loops % 50 ) ) { redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys ) ; } for ( j = 0 ; j < server. dbnum ; j ++ ) { long long size ; size = dictSlots ( server. db [ j ]. dict ) ; if ( used || vkeys ) { redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys",0
777,"<S2SV_ModStart> } if ( ( options -> flags & UV_PROCESS_SETUID ) && setgid ( options -> uid, options -> gid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuid()"" ) ; _exit ( 127 ) ; } if (",0
778,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> EOPNOTSUPP ; } if ( rlen > MAX_XFER_SIZE ) { warn ( ""i2c <S2SV_blank> rd: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", rlen ) ; return - EOPNOTSUPP ; } <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> wlen ) ; <S2SV_ModEnd> ret = dvb_usb_generic_rw <S2SV_ModStart> + wlen, st -> data <S2SV_ModEnd>, rlen, <S2SV_ModStart> rlen, 0 ) ; if (! ret && rbuf && rlen ) memcpy ( rbuf, st -> data, rlen",1
779,"<S2SV_ModStart> -> priv -> remote_auth_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_remote_auth_timeout, client ) ;",0
780,<S2SV_ModStart> book -> dim && i < n,1
781,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
782,"<S2SV_ModStart> if ( ret || btrfs_check_dir_item_collision ( fs_info, dir_item, root ) ) { ret = btrfs_check_dir_item_collision ( fs_info, dir_item, root ) ; if ( ret ) { ret = btrfs_check_dir_item_collision ( fs_info, dir_item, root ) ; if ( ret ) { ret = btrfs_check_dir_item_collision ( fs_info, dir_item, root ) ; if ( ret ) { ret = - EEXIST ; goto root_item_collision_fail ; } } else { ret = btrfs_check_dir_item_collision ( fs_info, dir_item, root ) ; if ( ret ) { ret = btrfs_check_dir_item_collision ( fs_info, dir_item, root ) ; if ( ret ) { ret = btrfs_check_dir_item_collision ( fs_info, root, dir_item, root ) ; goto root_item_collision_fail ; } } }",0
783,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; BUG_ON <S2SV_ModStart> unix_tot_inflight -- ; } fp -> f_cred -> user -> unix_inflight -- ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
784,"<S2SV_ModStart> size_t chanmap_size = SF_MIN ( <S2SV_ModStart> sf. channels, layout_tag & 0xffff )",1
785,"<S2SV_ModStart> ) { if (! check_scale_factors ( other_w, other_h, this_w, this_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if (! check_scale_factors ( other_w, other_h, this_w, this_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; return ; } if (! check_scale_factors ( other_w, other_h, this_w, this_h, sf -> x_step_q4, sf -> y_step_q4 ) ) { sf -> predict [ 0 ] [ 0 ] = vp9_convolve_copy ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve8_horiz ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve8_horiz ; } else { sf -> predict [ 0 ] [ 0 ] = vp9_convolve8_vert ; sf -> predict [ 0 ]",0
786,<S2SV_ModStart> ms ) { uint32_t <S2SV_ModEnd> nestsize = ( <S2SV_ModStart> nestsize = ( uint32_t <S2SV_ModEnd> ) ms ->,1
787,"<S2SV_ModStart> PERF_COUNT_SW_ALIGNMENT_FAULTS, 1 <S2SV_ModEnd>, regs,",0
788,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
789,<S2SV_ModStart> -> xrefs = safe_calloc ( <S2SV_ModEnd> sizeof ( xref_t,1
790,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
791,<S2SV_ModStart> sk ) ; rcu_read_lock ( ) ; <S2SV_ModStart> ( opt ) { <S2SV_ModStart> opt -> tot_len ) ; rcu_read_unlock ( ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
792,"<S2SV_ModStart>, * tmpin = NULL, * tmpout <S2SV_ModStart> } if (! ( flags & ( CMS_NO_SIGNER_CERT_VERIFY | CMS_NO_CRL_VERIFY ) ) ) { tmpout = CMS_get1_bio ( dcont ) ; if (! tmpout ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_SIGNER_CERTIFICATE_NOT_FOUND ) ; goto err ; } <S2SV_ModStart> } if (! ( flags & CMS_NO_CRL_VERIFY ) ) crls = CMS_get1_crls ( cms ) ; for ( i = 0 ; i < sk_CMS_SignerInfo_num ( sinfos ) ; i ++ ) { si = CMS_SignerInfo_value ( sinfos, i ) ; if (! cms_signerinfo_verify_cert ( si, store, cms_certs, crls, flags ) ) goto err ; } if (! ( flags & CMS_NOCRL ) ) crls = CMS_get1_crls ( cms ) ; for ( i = 0 ; i < sk_CMS_SignerInfo_num ( sinfos ) ; i ++ ) { if (! cms_sign",0
793,"<S2SV_ModStart> ( sk, <S2SV_ModEnd> ( struct ipv6_txoptions <S2SV_ModStart> ( sk, <S2SV_ModEnd> ( struct ipv6_txoptions <S2SV_ModStart> ( sk, <S2SV_ModEnd> ( struct ipv6_txoptions <S2SV_ModStart> ( sk, <S2SV_ModEnd> ( struct ipv6_txoptions <S2SV_ModStart> ( sk, <S2SV_ModEnd> ( struct ipv6_txoptions <S2SV_ModStart> ( sk, <S2SV_ModEnd> ( struct ipv6_txoptions <S2SV_ModStart> ( sk, <S2SV_ModEnd> ( struct ipv6_txoptions <S2SV_ModStart> ( sk, <S2SV_ModEnd> ( struct ipv6_txoptions <S2SV_ModStart> ( sk ) ) <S2SV_ModStart> ( sk, <S2SV_ModEnd> ( struct ipv6_txoptions <S2SV_ModStart> ( sk, <S2SV_ModEnd> ( struct ipv6_txoptions <S2SV_ModStart> ( sk, <S2SV_ModEnd> ( struct ipv6_txoptions <S2SV_ModStart> ( sk, <S2SV_ModEnd> ( struct ipv6_txoptions <S2SV_ModStart> ( sk, <S2SV_ModEnd> ( struct ipv6_txoptions <S2SV_ModStart> ( sk, <S2SV_ModEnd> ( struct ipv6_txoptions <S2SV_ModStart> ( sk, <S2SV_ModEnd> ( struct ipv6_txoptions <S2SV_ModStart> ( sk, <S2SV_ModEnd> ( struct ipv6_txoptions <S2SV_ModStart> ( sk ) )",0
794,<S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_exit <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_exit,0
795,"<S2SV_ModStart> cs_flags ) ; struct sockaddr_storage * s = ( struct sockaddr_storage * ) get_sockaddr ( ) ; sockaddr_copy ( & s -> sin6_addr, & s -> sin6_addr, sizeof ( s -> sin6_addr ) ) ; sockaddr_copy ( & s -> sin6_addr, & s -> sin6_addr. sin6_addr. sin6_addr. sin6_addr. sin6_sockaddr, sizeof ( s -> sin6_addr. sin6_addr. sin6_addr. sin6_addr. sin6_addr. sin6_addr. sin6_addr ) ; sockaddr_copy ( & s -> sin6_addr. sin6_addr, & s -> sin6_addr. sin6_addr. sin6_addr. sin6_addr. sin6_addr. sin6_addr. sin6_addr. sin6_addr. sin6_addr. sin6_addr. sin6_addr. sin6_addr. sin6_addr. sin6_addr. sin6_addr. sin6_addr. sin6_addr. sin6_addr.",0
796,"<S2SV_ModStart> ) { struct in_device * idev <S2SV_ModEnd> = ( ( <S2SV_ModStart> ) -> ifa_dev <S2SV_ModEnd> ; struct netdev_notifier_info <S2SV_ModStart> netdev_notifier_info info ; if ( idev -> dead ) return NOTIFY_DONE ; <S2SV_ModStart> & info, idev ->",1
797,"<S2SV_ModStart> ; if (! mm ||! ( vmflag & VM_HUGETLB ) ) { leave_mm ( smp_processor_id ( ) ) ; base_pages_to_flush = TLB_FLUSH_ALL ; goto out ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) ; base_pages_to_flush = ( end - start ) >> PAGE_SHIFT ; if ( base_pages_to_flush > tlb_single_page_flush_ceiling ) base_pages_to_flush = TLB_FLUSH_ALL ; count_vm_tlb_event ( NR_TLB_LOCAL_FLUSH_ONE ) ; __flush_tlb_single ( start ) ; } else { for ( addr = start ; addr < end ; addr += PAGE_SIZE ) { count_vm_tlb_event ( NR_TLB_LOCAL_FLUSH_ONE ) ; __flush_tlb_single ( addr ) ; } } trace_tlb_flush ( TLB_LOCAL_MM_SHOOTDOWN, base_pages_to_flush ) ; if ( base_pages_to_flush == TLB_FLUSH_ALL",0
798,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_sse_total > 255.0 ) { ovpsnr = sse_to_psnr ( stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; } else { ovpsnr = sse_to_psnr ( stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; }",0
799,"<S2SV_ModStart> val ) { int temp_size = 500 ; char * temp = malloc ( temp_size ) <S2SV_ModEnd> ; int i <S2SV_ModStart> ; ) { if ( i >= temp_size ) { temp_size *= 2 ; temp = realloc ( temp, temp_size ) ; }",1
800,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
801,"<S2SV_ModStart> name ) { size_t max_name_len = strlen ( name ) * 2 + 16 ; if ( max_name_len > max_name_len ) { ERR ( ""Maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> components <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", max_name_len, ( int ) ( max_name_len / 2 ) ) ; dst_name = malloc ( max_name_len / 2 ) ; if (! dst_name ) { ERR ( ""Maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> components <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", max_name_len, ( int ) ( max_name_len / 2 ) ) ; } dst_name = malloc ( max_name_len * 2 + 16 ) ; if (! ( dst_name ) ) dst_name = malloc ( max_name_len / 2 ) ; if (! dst_name ) { ERR ( ""Maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> components <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", max_name_len, ( int ) ( max_name_",0
802,"<S2SV_ModStart> NULL ) { if ( addr_str_length > sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""too <S2SV_blank> large <S2SV_blank> management <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; goto ttl_received ; } <S2SV_ModStart> NULL ) { if ( addr_str_length > sizeof ( orgid ) ) { log_warn ( ""lldp"", ""too <S2SV_blank> large <S2SV_blank> management <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; goto ttl_received ; } <S2SV_ModStart> NULL ) { if ( addr_str_length > sizeof ( orgid ) ) { log_warn ( ""lldp"", ""too <S2SV_blank> large <S2SV_blank> management <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; goto ttl_received ; } <S2SV_ModStart> NULL ) { if ( addr_str_length > sizeof ( orgid ) ) { log_warn ( ""lldp"", ""too <S2SV_blank> large <S2SV_blank> management <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; goto ttl_received ; }",0
803,"<S2SV_ModStart> object + size > bplist -> offset_table ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> size <S2SV_blank> node <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> node <S2SV_blank> type <S2SV_blank> 0x%02x <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__, type ) ; return NULL ; } size = UINT_TO_HOST ( * object, size ) ; ( * object + size > bplist -> offset_table ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> size <S2SV_blank> node <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> node <S2SV_blank> type <S2SV_blank> 0x%02x <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__, type ) ; return NULL ; } size = UINT_TO_HOST ( * object, size ) ; ( * object + size ) ; if ( * object + size > bplist -> offset_table ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> size <S2SV_blank> node <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> node <S2SV_blank> type <S2SV_blank> 0x%02x <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__, type ) ; return NULL ; }",0
804,"<S2SV_ModStart> ( ) ; TRACE_DEBUG ( ""CIDER=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { memPoolFree ( context -> txBuffer ) ; memPoolFree ( context -> rxBuffer ) ; memPoolFree ( context -> txBuffer ) ; memPoolFree ( context -> rxBuffer ) ; return ERROR_OUT_OF_MEMORY ; } ksz8851Write",0
805,<S2SV_ModStart> all_channels_lock ) ; put_net ( pch -> chan_net ) ; pch -> chan_net = NULL ;,1
806,"<S2SV_ModStart> btrfs_dir_item * di = NULL <S2SV_ModStart> - ENOMEM ; path -> skip_release_on_error = 1 ; <S2SV_ModStart> & XATTR_REPLACE ) { di = btrfs_lookup_xattr ( NULL, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if (! di ) { ret = - ENODATA ; goto out ; } else if ( di ) { ret = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( ret ) goto out ; } else { ret = btrfs_delete_one_dir_name <S2SV_ModEnd> ( trans, <S2SV_ModStart>, path, <S2SV_ModEnd> di ) ; <S2SV_ModStart> out ; } btrfs_release_path ( path ) ; di = NULL ; } ret = btrfs_insert_xattr_item ( trans, root, path, btrfs_ino ( inode ), name, name_len, value, size ) ; if ( ret == - EOVERFLOW ) ret = - EEXIST ; if ( ret == - EOVERFLOW ) ret = - EOVERFLOW ; btrfs_release_path ( path )",0
807,<S2SV_ModStart> > 0xbf ) { <S2SV_ModStart> return 1 ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; },0
808,"<S2SV_ModStart> client -> proxy ) ; g_byte_array_free ( client -> auth_buffer, TRUE",1
809,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
810,<S2SV_ModStart> ; if ( key_is_negative ( key <S2SV_ModEnd> ) ) return,1
811,"<S2SV_ModStart> ip ++ ; if ( unlikely ( ip >= ip_end ) ) goto input_overrun ; <S2SV_ModStart> # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) { const unsigned char * ie = ip + t ; do { COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; while ( ip < ie ) ; ip = ie ; op = oe ; } else # endif <S2SV_ModStart> ) ; NEED_IP ( t + 3 ) ; do { * op ++ = * ip ++ ; } while ( ip < ie ) ; ip = ie ; op = oe ; } else # endif <S2SV_ModStart> ) ; NEED_IP ( t + 3 ) ; do { * op ++ = * ip ++ ; } while ( -- t > 0 ) ; state = 4 ; continue ; } if ( state == 4 ) { next = t & 3 ; m_pos = op - 1 ; op [ 0 ] = m_pos [ 0 ] ; op [ 1 ] = m_pos [ 1 ] ; op [ 2 ] = m_pos [ 1 ] ; op [ 3 ] = m_pos [ 2 ] ; op [ 2 ] = m_pos [ 2",0
812,"<S2SV_ModStart> ; if ( size > IMAGE_SIZE_MAX ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> size!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; } <S2SV_ModStart> ) ) { if ( size > IMAGE_SIZE_MAX ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> size!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; } <S2SV_ModStart> ) ; return <S2SV_ModEnd> - ENOEXEC ;",0
813,<S2SV_ModStart> { vpn_packet_t outpkt ; if ( len > sizeof outpkt. data ) return,1
814,"<S2SV_ModStart> vmx_vpid_bitmap ) ; <S2SV_ModEnd> for ( msr <S2SV_ModStart> ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_vpid_bitmap ) ; ++ msr ) kvm_define_vpid_bitmap ( msr, vmx_vpid_bitmap [ msr ] ) ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_vpid_bitmap ) ; ++ i ) kvm_define_vpid_bitmap ( i, vmx_vpid_bitmap ) ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_vpid_bitmap ) ; ++ msr ) kvm_define_vpid_bitmap ( msr, vmx_vpid_bitmap [ msr ] ) ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_vpid_bitmap ) ; ++ i ) kvm_define_vpid_bitmap ( i, vmx_vpid_bitmap [ i ] ) ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_vpid_bitmap ) kvm_define_vpid_",0
815,<S2SV_ModStart> + i ; if ( st32vdaux < 1 || st32vdaux > SIZE_MAX ) { sdb_free ( sdb_verdef ) ; goto out_error ; } if ( st32vdaux < 1 || st32vdaux <S2SV_ModEnd> > SIZE_MAX ) <S2SV_ModStart> > SIZE_MAX ) { sdb_free ( sdb_verdef ) ; goto out_error ; } if ( st32vdaux < 1 || st32vdaux <S2SV_ModEnd> > SIZE_MAX ) <S2SV_ModStart> > SIZE_MAX ) { sdb_free ( sdb_verdef ) ; goto out_error ; },0
816,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ),0
817,<S2SV_ModStart> -> baseline_gf_interval * rc -> avg_gf_interval <S2SV_ModEnd> * af_ratio ) <S2SV_ModStart> -> baseline_gf_interval * rc -> avg_gf_interval <S2SV_ModEnd> ; # else <S2SV_ModStart> -> av_per_frame_bandwidth * rc -> avg_gf_interval <S2SV_ModEnd> ; # else,0
818,"<S2SV_ModStart> ++ ) { char * val ; if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> untrusted <S2SV_blank> option"", ""--allow-untrusted"" ) ; else val = strchr ( argv [ i ], '=' ) ; if ( val == NULL ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", val ) ; } for ( i = 1 ; i < argc ; i ++ ) if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; argv [ i ] = path ; for ( i = 1 ; i < argc ; i ++ ) if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ;",0
819,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
820,<S2SV_ModStart> INDENT_INCR ; } if ( tbl -> indent < 0 ) tbl -> indent = 0 ; <S2SV_ModStart> -= INDENT_INCR ; if ( offset < 0 ) offset = 0 ;,1
821,"<S2SV_ModStart> + tail ; size_t ss = CDF_SEC_SIZE ( h ) ; <S2SV_ModStart> b ) <= ss <S2SV_ModEnd> * sst -> <S2SV_ModStart> b ) <= ss <S2SV_ModEnd> * sst -> <S2SV_ModStart> b ), ss <S2SV_ModEnd> * sst -> <S2SV_ModStart> ( h ), ss <S2SV_ModEnd>, sst ->",0
822,"<S2SV_ModStart> } # line 113 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""HEX_LEX_ENVIRONMENT.c"" break ; <S2SV_ModStart>",0
823,"<S2SV_ModStart> ib ] ; memset ( dequant_ptr, 0, sizeof ( dequant_ptr ) ) ;",0
824,<S2SV_ModStart> FN_REFLEN ] ; if ( strlen ( opt_basedir ) > FN_REFLEN ) { error = - 1 ; goto exit ; },0
825,<S2SV_ModStart> ; if ( key_is_positive ( key <S2SV_ModEnd> ) ) zap,1
826,"<S2SV_ModStart> ) -> filter ; memset ( & uf, 0, sizeof ( uf ) )",1
827,"<S2SV_ModStart> int n = MIN ( <S2SV_ModStart> data ) ; if ( n > ( int ) ( data_end - data ) ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; }",0
828,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
829,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
830,"<S2SV_ModStart> cleanup ; } status = aac_fib_send ( dev, srbfib, sizeof ( struct aac_srb ) <S2SV_ModEnd>, sg_list, <S2SV_ModStart> u32 ) ) ; if ( status!= 0 ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> send <S2SV_blank> srb <S2SV_blank> with <S2SV_blank> status <S2SV_blank> %d\\n"", status ) ; rcode = - EPERM ; goto cleanup ; } if ( status!= 0 ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> send <S2SV_blank> srb\\n"" ) ) ; rcode = - EPERM ; goto cleanup ; } if ( status!= 0 ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> send <S2SV_blank> srb <S2SV_blank> with <S2SV_blank> status <S2SV_blank> %d\\n"", status ) ; goto cleanup ; } if ( status!= 0 ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> Sending <S2SV_blank> srb <S2SV_blank> with <S2SV_blank> status <S2SV_blank> %d\\n"" ) ) ; rcode = - EPERM ; goto cleanup ; }",0
831,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( cc0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorEncodeTile"", ""%s"", ""(cc0%rowsize)!=0"" ) ; return 0 ; } <S2SV_ModEnd> while ( cc",1
832,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
833,"<S2SV_ModStart> input_data, size_t input_start_size, size_t input_end_size <S2SV_ModEnd>, int flags <S2SV_ModStart> # define prolog { <S2SV_ModStart> break ; } <S2SV_ModEnd> } # define <S2SV_ModStart> { input -= input_start_size ; input_incr = ( int ) yr_min ( input_incr, RE_SCAN_LIMIT ) ; <S2SV_ModStart> } max_bytes_matched = ( int ) yr_min ( max_bytes_matched % character_size, RE_SCAN_LIMIT ) ; <S2SV_ModStart> } max_bytes_matched = max_bytes_matched - ( int ) yr_min ( max_bytes_matched % character_size, RE_SCAN_LIMIT ) ; <S2SV_ModStart> RE_FLAGS_BACKWARDS ) { max_bytes_matched = ( int ) yr_min ( input_size, RE_SCAN_LIMIT ) ; <S2SV_ModStart> } max_bytes_matched = max_bytes_matched - max_bytes_matched % character_size ; bytes_matched = 0 ; match = ( int ) yr_min ( input_size, RE_SCAN_LIMIT ) ; match = ( int ) yr_min ( input_size, RE_SCAN_LIMIT ) ;",0
834,"<S2SV_ModStart> * returnrate, int * returndistortion, int * returnintra ) { BLOCK * b = & x -> block [ 0 ] ; BLOCKD * d = & x -> e_mbd. block [ 0 ] ; MACROBLOCKD * xd = & x -> e_mbd. block [ 0 ] ; MACROBLOCKD * xd = & x -> e_mbd. block [ 0 ] ; MACROBLOCKD * xd = & x -> e_mbd. block [ 0 ] ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX, zero_mv_sse = INT_MAX, zero_mv_rd_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; unsigned int zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif <S2SV_ModStart> = INT_MAX",0
835,"<S2SV_ModStart> svm, MC_VECTOR ) ; set_exception_intercept ( svm, DB_VECTOR",0
836,<S2SV_ModStart> goto error ; if ( h -> hdr -> magic [ 0 ] == '\\0' || h -> hdr -> magic [ 1 ] == '\\0' ) { h -> hdr -> magic [ 0 ] = '\\0' ; h -> hdr -> magic [ 1 ] = '\\0' ; goto error ; } <S2SV_ModStart>. st_size ; if ( h -> hdr -> magic [ 2 ]!= '\\0' || h -> hdr -> magic [ 3 ]!= '\\0' || h -> hdr -> magic [ 4 ]!= '\\0' || h -> hdr -> magic [ 5 ]!= '\\0' || h -> hdr -> magic [ 6 ]!= '\\0' ) { h -> fd = - 1 ; goto error ; },0
837,"<S2SV_ModStart> sst, const cdf_directory_t * root_storage <S2SV_ModEnd> ) { cdf_summary_info_header_t <S2SV_ModStart> break ; } if ( root_storage ) { <S2SV_ModStart> = cdf_clsid_to_mime ( root_storage -> d_storage_uuid <S2SV_ModEnd>, clsid2desc ) <S2SV_ModStart> - 2 ; } <S2SV_ModStart>, count, root_storage <S2SV_ModEnd> ) ; free",1
838,"<S2SV_ModStart> ; UWORD8 u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id ; WORD32 u4_num_reorder_frames ; <S2SV_ModStart>, u1_frame_cropping_flag, u1_frame_cropping_rect_left_ofst, u1_frame_cropping_rect_right_ofst, u1_frame_cropping_rect_top_ofst, u1_frame_cropping_rect_bottom_ofst <S2SV_ModEnd> ; SWITCHONTRACE ; <S2SV_ModStart>, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_rect_left_ofst, u1_frame_cropping_rect_right_ofst, u1_frame_cropping_rect_top_ofst, u1_frame_cropping_rect_bottom_ofst <S2SV_ModEnd> ) ; COPYTHECONTEXT <S2SV_ModStart> ""SPS: <S2SV_blank> frame_cropping_flag"", u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u",0
839,<S2SV_ModStart> -> length ) ; if ( err ) return - EFAULT,1
840,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; vpx_svc_parameters_t * const svc_params = ( vpx_svc_parameters_t * ) <S2SV_ModStart> ; if ( svc_params <S2SV_ModEnd> == NULL ) <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; <S2SV_ModEnd> cpi -> svc <S2SV_ModStart>. spatial_layer_id = svc_params -> spatial_layer ; cpi -> svc. temporal_layer_id = svc_params -> temporal_layer ; cpi -> lst_fb_idx = svc_params -> lst_fb_idx ; cpi -> gld_fb_idx = svc_params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx",0
841,"<S2SV_ModStart> > 0 ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ; goto err ; } <S2SV_ModStart> > 0 ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ) ; goto err ; } <S2SV_ModEnd> if ( prev <S2SV_ModStart> > 0 ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6",0
842,<S2SV_ModStart> out ) { TIFFField <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
843,"<S2SV_ModStart> a ) { struct stat st ; <S2SV_ModStart> = '\\0' ; if ( ( a -> flags & ARCHIVE_EXTRACT_LSTAT ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED )",0
844,"<S2SV_ModStart> ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL, rootfs -> path? rootfs -> mount : <S2SV_ModEnd> NULL )!=",1
845,"<S2SV_ModStart> int link_count ; if ( udf_file_entry_alloc_offset ( inode ) < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( udf_file_entry_alloc_offset ( inode ) < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( udf_file_entry_alloc_offset ( inode ) < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( udf_file_entry_alloc_offset ( inode ) < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode\\n"", inode -> i_ino ) ; make_bad_inode ( inode )",0
846,"<S2SV_ModStart> -> tx_size ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y [ tx_size_y ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; int index = shift_y ; for ( i = 0 ; i < h ; i ++ ) { memset ( & lfm -> lfl_y [ index ],",0
847,"<S2SV_ModStart> dst_size ) { uint16_t <S2SV_ModEnd> namelen = strlen <S2SV_ModStart> data < data_end <S2SV_ModEnd> ) return - <S2SV_ModStart> - 1 ; if ( data >= data_end ) return - 1 ; <S2SV_ModStart> data ++ ; len = ff_amf_tag_size ( data, data_end ) ; if ( len < 0 || len >= data_end - data ) return - 1 ; data += len ; } for ( ; ; ) { int size = bytestream_get_be16 ( & data ) ; if (! size ) break ; if ( size == namelen &&! memcmp ( data - size, name, namelen ) ) { switch ( * data ) { case AMF_DATA_TYPE_NUMBER : snprintf ( dst, dst_size, ""%g"", av_int2double ( AV_RB64 ( data ) ) ) ; break ; case AMF_DATA_TYPE_BOOL : snprintf ( dst, dst_size, ""%s"", * data? ""true"" : ""false"" ) ; break ; case AMF_DATA_TYPE_STRING : len = bytestream_get_be16 ( & data ) ; av_strlcpy",0
848,"<S2SV_ModStart> ( ) ; strcpy ( t1_buf_array, t1_line_array ) ; t1_line_ptr = eol ( t1_line_array ) ; } else",0
849,"<S2SV_ModStart> mq_flush_lock, flags ) ; fq -> flush_rq = flush_rq",0
850,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
851,<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) sub -> nsub = 0 ;,0
852,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; if (! <S2SV_ModStart>, cc ) ) return 0 <S2SV_ModStart> wc ) ; return 1 ;",1
853,"<S2SV_ModStart> ) ) { if (! smatch ( option, ""value"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option"" ) ; return MPR_ERR_BAD_SYNTAX ; }",0
854,"<S2SV_ModStart> __be32 daddr ; struct ip_options_rcu * inet_opt <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> -> opt. <S2SV_ModEnd> faddr ; rt",0
855,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
856,"<S2SV_ModStart> * mgr_hdl ; <S2SV_ModEnd> memset ( s_path <S2SV_ModStart> ( c_path ) <S2SV_ModEnd> ) ; switch <S2SV_ModStart> ( c_path, ""%s%s%d_C_XXXXXX"" <S2SV_ModEnd>, HSM_FM_SCK_PREFIX, <S2SV_ModStart> hdl -> instance <S2SV_ModEnd> ) ; if",1
857,"<S2SV_ModStart> == NULL || ( effect_param_t * ) pReplyData <S2SV_ModStart> == NULL || ( effect_param_t * ) pReplyData > ( int ) sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || ( effect_param_t * ) pReplyData > ( int ) sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || ( effect_param_t * ) pReplyData > ( int ) sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; }",0
858,"<S2SV_ModStart> ""`%s\'"", option ) ; geometry = DestroyString ( geometry",0
859,"<S2SV_ModStart> ; if ( np -> pmtudisc == IPV6_PMTUDISC_PROCESSED ) { atomic_set ( & sk -> sk_omem_alloc, 1 ) ; } else { atomic_set ( & sk -> sk_omem_alloc, 1 ) ; } <S2SV_ModStart> ; if ( np -> pmtudisc == IPV6_PMTUDISC_PROCESSED ) { atomic_set ( & sk -> sk_omem_alloc, 1 ) ; } else { atomic_set ( & sk -> sk_omem_alloc, 0 ) ; } atomic_set ( & sk -> sk_omem_alloc, 1 ) ; }",0
860,<S2SV_ModStart> berval ) ; if ( code -> key_data_type [ 0 ]!= KRB5_KDB_SALTTYPE_NORMAL || code -> key_data_length [ 0 ]!= sizeof ( struct berval ) || code -> key_data_contents [ 0 ]!= NULL ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> ; if ( code -> key_data_type [ 0 ]!= KRB5_KDB_SALTTYPE_NORMAL || code -> key_data_length [ 0 ]!= sizeof ( struct berval ) || code -> key_data_contents [ 0 ]!= NULL || code -> key_data_length [ 0 ]!= sizeof ( struct berval ) || code -> key_data_contents [ 0 ]!= NULL ) { err = ENOMEM ; goto cleanup ; },0
861,"<S2SV_ModStart> OP_ENDCATCH ) ; emit ( J, F, OP_ENDTRY ) ;",1
862,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_row_idx <S2SV_ModStart> return ; } LIBXSMM_ASSERT ( 0!= l_row && 0!= l_column ) ;",1
863,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > 0 && crgram_len < sizeof ( sbuf ) - 1 ) { <S2SV_ModStart>, crgram, crgram_len - 1",0
864,"<S2SV_ModStart> uint8 result ; uint32 <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> ; STREAM s ; struct stream packet <S2SV_ModStart> return False ; packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> id <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",1
865,"<S2SV_ModStart> status ) ; if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModStart> goto no_reason ; if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModStart> goto no_reason ; if ( status == ""UNKNOWN_REASON"" <S2SV_ModEnd> ) goto no_reason <S2SV_ModStart> goto no_reason ; if ( status == ""UNKNOWN_REASON"" <S2SV_ModEnd> ) goto no_reason <S2SV_ModStart> goto no_reason ; if ( status == ""UNKNOWN_REASON"" <S2SV_ModEnd> ) goto no_reason <S2SV_ModStart> goto no_reason ; if ( status == ""UNKNOWN_REASON"" <S2SV_ModEnd> ) goto no_reason <S2SV_ModStart> goto no_reason ; if ( status == ""UNKNOWN_REASON"" ) goto no_reason ; if ( status == ""UNKNOWN_REASON"" <S2SV_ModEnd> ) goto no_reason <S2SV_ModStart> goto no_reason ; if ( status == ""UNKNOWN_REASON"" <S2SV_ModEnd> ) goto no_reason <S2SV_ModStart> goto no_reason ; if ( status == ""UNKNOWN_REASON"" <S2SV_ModEnd> ) goto no_reason <S2SV_ModStart> goto no_reason ; if ( status == ""UNKNOWN_REASON"" <S2SV_ModEnd> ) goto no_reason <S2SV_ModStart> goto no_reason ;",0
866,<S2SV_ModStart> ) ) { if ( ( ( ctxt -> options & XML_PARSE_NEWLINE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_NEWLINE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_NEWLINE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_NEWLINE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_NEWLINE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_NEWLINE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_NEWLINE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_NEWLINE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_NEWLINE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_NEWLINE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_NEWLINE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_NEWLINE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_NEWLINE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_NEWLINE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_,0
867,"<S2SV_ModStart> -> hw, ""Invalid <S2SV_blank> MAC <S2SV_blank> VLAN <S2SV_blank> ID\\n"" ) ; return ret ; } <S2SV_ModEnd> ch = vsi <S2SV_ModStart> -> hw, ""Invalid <S2SV_blank> MAC <S2SV_blank> VLAN <S2SV_blank> ID\\n"" ) ; if ( ret ) { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> MAC <S2SV_blank> VLAN <S2SV_blank> ID\\n"" ) ; return ret ; } <S2SV_ModEnd> ch = i40e_get_channel <S2SV_ModStart> ( ch ) ; if ( ret ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> MAC <S2SV_blank> VLAN <S2SV_blank> ID\\n"" ) ; return ret ; } <S2SV_ModStart> -> hw, ""Invalid <S2SV_blank> MAC <S2SV_blank> VLAN <S2SV_blank> ID\\n"" ) ; if ( ret ) { dev_err ( & vsi -> pdev -> dev, ""Invalid <S2SV_blank> MAC <S2SV_blank> VLAN <S2SV_blank> ID\\n"" ) ; return ret ; } <S2SV_ModStart> ch ) ; if ( ret ) { dev_err ( & vsi -> pdev -> dev, ""Invalid <S2SV_blank> MAC <S2SV_blank> VLAN <S2SV_blank> ID\\n"" ) ; return ret ; }",0
868,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
869,<S2SV_ModStart> & new_map ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> lower_first ; } ret = sort_idmaps ( & new_map ) ; if ( ret < 0 ) goto out ;,1
870,"<S2SV_ModStart> ; } } if ( strtok ( g -> data, "";"" ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; switch ( action [ 0 ] ) { case 'i' : if ( cmd_cb ( core_ptr, ""ic"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } return send_msg ( g, ""E01"" ) ; } switch ( action [ 0 ] ) { case 'u' : if ( cmd_cb ( core_ptr, ""ic"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } return send_msg ( g, ""E01"" ) ; } if ( strtok ( NULL, "";"" ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; switch ( action [ 0 ] ) { case's' : if ( cmd_cb ( core_ptr, ""ds"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } return send_msg ( g, ""E01",0
871,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> ) ; } smb_ofile_flush ( sr, <S2SV_ModEnd> sr -> fid_ofile <S2SV_ModStart> sr -> fid_ofile <S2SV_ModEnd> ) ; (",1
872,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
873,"<S2SV_ModStart> ; } } # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> mode_info_context ) vpx_loop_filter_frame_init ( pbi, lf_mic, mb_row, mb_col, xd -> mode_info_context, recon_y_stride, recon_uv_stride, yv12_fb_new -> y_buffer, yv12_fb_new -> u_buffer, yv12_fb_new -> v_buffer ) ; else if ( xd -> mode_info_context ) vpx_loop_filter_frame_init ( pbi, lf_mic, mb_row, mb_col, xd -> mode_info_context, recon_y_stride, recon_uv_stride, yv12_fb_new -> uv_stride, yv12_fb_new -> y_buffer, yv12_fb_new -> u_buffer, yv12_fb_new -> v_buffer ) ; else vpx_loop_filter_frame_init ( pbi, lf_mic, mb_row, mb_col, mb_row, xd -> mode_info_context, recon_",0
874,"<S2SV_ModStart> addrtype = TIPC_ADDR_ID ; memset ( & addr -> addr, 0, sizeof ( addr -> addr ) )",1
875,"<S2SV_ModStart> ( user_alloc && ( <S2SV_ModStart> PAGE_SIZE - 1 ) ) ||! access_ok ( VERIFY_WRITE, mem -> userspace_addr, mem -> memory_size",1
876,"<S2SV_ModStart> NULL ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
877,"<S2SV_ModStart> ; if ( tmp_line_len < 1 ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Maximum <S2SV_blank> chunk <S2SV_blank> size <S2SV_blank> exceeded, <S2SV_blank> aborting"" ) ; return NULL ; } if ( <S2SV_ModStart> ; if ( tmp_line_len < 1 ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Maximum <S2SV_blank> chunk <S2SV_blank> size <S2SV_blank> exceeded, <S2SV_blank> aborting"" ) ; return NULL ; } <S2SV_ModStart> ; if ( tmp_line_len < 1 ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Maximum <S2SV_blank> chunk <S2SV_blank> size <S2SV_blank> exceeded, <S2SV_blank> aborting"" ) ; return NULL ; } if ( <S2SV_ModStart> ; if ( tmp_line_len < 1 ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Maximum <S2SV_blank> chunk <S2SV_blank> size <S2SV_blank> exceeded, <S2SV_blank> aborting"" ) ; return NULL ; } <S2SV_ModStart> ; if ( tmp_line_len < 1 ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Maximum <S2SV_blank> chunk <S2SV_blank>",0
878,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * p <S2SV_ModEnd> ; const char <S2SV_ModStart> ; const char * end ; if ( len > SIZE_MAX / 6 ) return NULL ; u = PyBytes_FromStringAndSize ( ( char * ) NULL, len * 6 ) ; if ( u == NULL ) { Py_DECREF ( u ) ; return NULL ; } p = buf = PyBytes_AsString ( u ) ; end = s + len ; while ( s < end ) { if ( * s == '\\\\' ) { * p ++ = * s ++ ; if ( * s & 0x80 ) { strcpy ( p, ""u005c"" ) ; p += 5 ; } } if ( * s & 0x80 ) { PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( u ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; i = 0 ; for ( i =",0
879,"<S2SV_ModStart> 0 ) { if ( user_sid_size > ( ( record_data_size - 4 ) - user_sid_offset ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_RUNTIME, LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS, ""%s: <S2SV_blank> user <S2SV_blank> SID <S2SV_blank> value <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds."", function ) ; goto on_error ; } <S2SV_ModStart> 0 ) { if ( user_sid_size > ( ( record_data_size - 4 ) - user_sid_offset ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_RUNTIME, LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS, ""%s: <S2SV_blank> user <S2SV_blank> SID <S2SV_blank> value <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds."", function ) ; goto on_error ; } <S2SV_ModStart> 0 ) { if ( data_size > ( ( record_data_size - 4 ) - user_sid_offset ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_RUNTIME, LIBCERROR_RUNTIME_ERROR_VALUE",0
880,"<S2SV_ModStart> WaveHeader WaveHeader ; int format_chunk = 0 <S2SV_ModStart> ; uint32_t bcount ; if ( format_chunk ++ ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
881,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",0
882,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_8BITS ( tptr ) ;,0
883,<S2SV_ModStart> ~ SNDRV_TIMER_IFLG_RUNNING ; list_del_init ( & timeri -> ack_list ) ; list_del_init ( & timeri -> active_list ) ;,1
884,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> int setimes, <S2SV_ModStart> ; int setimes <S2SV_ModEnd> ; char ch <S2SV_ModStart> ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> read <S2SV_blank> file"", __func__ ) ; setimes = targisdir = 0 ; mask = umask ( 0 ) ; if (! pflag ) ( void ) umask ( mask ) ; if (! Tflag ) ( void ) umask ( mask ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> read <S2SV_blank> file"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> read <S2SV_blank> file"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> read <S2SV_blank> file"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> read <S2SV_blank> file"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> read",0
885,<S2SV_ModStart> else if ( myentity_find_ext <S2SV_ModEnd> ( target ) <S2SV_ModStart> else if ( myentity_find_ext <S2SV_ModEnd> ( target ) <S2SV_ModStart> else if ( myentity_find_ext <S2SV_ModEnd> ( target ),0
886,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
887,<S2SV_ModStart> ; if (! ast -> sub_ctx ) { av_freep ( & pb ) ; goto error ; } if (,0
888,"<S2SV_ModStart> null_server ; int need_error_free = 0, local_rcache = 0, local_authcon = 0 ; if ( flags & KRB5_RECVAUTH_NOAUTH ) { need_error_free = 1 ; return KRB5_SENDAUTH_NOAUTH ; } if ( flags & KRB5_RECVAUTH_BADAUTHVERS ) { problem = KRB5_SENDAUTH_BADAUTHVERS ; response = 1 ; } if ( appl_version && strcmp ( inbuf. data, appl_version ) ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } else if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( version &&! problem ) { response = 2 ; } if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } <S2SV_ModEnd> if ( flags <S2SV_ModStart> & KRB5_RECVAUTH_SKIP_",0
889,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
890,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
891,<S2SV_ModStart> dptr ++ = ROSE_CALL_REQ_ADDR_LEN_VAL <S2SV_ModEnd> ; memcpy (,1
892,<S2SV_ModStart> = new_ns ; new_ns -> mounts ++ ;,1
893,"<S2SV_ModStart> -> alt_fb_idx ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( width & 0xf0 )!= 0 && ( height & 0xf0 )!= 0 ) { vpx_free ( oci -> alt_fb_idx ) ; return - 1 ; } # endif vpx_free ( oci -> mip ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( height & 0xf0 )!= 0 ) { vpx_free ( oci -> above_context ) ; return - 1 ; } # endif vp8_yv12_alloc_frame_buffer ( & oci -> temp_scale_frame, width, 16, VP8BORDERINPIXELS ) ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> alt_scale_frame, width, 16, VP8BORDERINPIXELS ) < 0 ) { vpx_free ( oci -> alt_fb_idx ) ; return - 1 ; } # endif",0
894,<S2SV_ModStart> ; zip_object_handlers. get_gc = php_zip_get_gc ; zip_object_handlers.,1
895,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if <S2SV_ModEnd> ( iova < <S2SV_ModStart> mem -> iova || length > mem -> length || iova > <S2SV_ModEnd> mem -> iova <S2SV_ModStart> mem -> length - length ) return - EFAULT ; return <S2SV_ModEnd> 0 ; default,1
896,"<S2SV_ModStart> ) ) ; ND_TCHECK2 ( * dp, sizeof ( * ni6 ) ) ; <S2SV_ModStart> ( ndo, ""%s"", icmp6_tstr <S2SV_ModEnd> ) ) ;",0
897,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
898,<S2SV_ModStart> sent = 0 <S2SV_ModEnd> ; smb_msg.,1
899,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; if ( ref -> ref > INT_MAX / 2 ) return false ; <S2SV_ModStart> ref ++ ; return true ;,1
900,<S2SV_ModStart> fs -> clusters + <S2SV_ModEnd> 1 ) get_fat,1
901,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
902,<S2SV_ModStart> sk_nulls_node ) ; sk_nulls_node_init ( & sk -> sk_nulls_node ) ;,1
903,<S2SV_ModStart> u2_cur_slice_num ++ ; <S2SV_ModEnd> u1_num_mbs ++ ; <S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbsNby2 ++ ; <S2SV_ModEnd> ps_dec -> u2_total_mbs_coded <S2SV_ModStart> u2_cur_slice_num ++ ; <S2SV_ModEnd> ps_dec -> u2_total_mbs_coded <S2SV_ModStart> u2_cur_slice_num ++ ; if ( ps_dec -> u2_total_mbs_coded < u1_num_mbs ) { ps_dec -> u2_total_mbs_coded = u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; } <S2SV_ModStart> u2_cur_slice_num ++ ; if ( ps_dec -> u2_total_mbs_coded < u1_num_mbs ) { ps_dec -> u2_total_mbs_coded = u1_num_mbs ; },0
904,<S2SV_ModStart> (! mm ||! mm -> env_end,1
905,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> parse_rock_ridge_inode ( struct <S2SV_ModStart> inode, 0, NULL <S2SV_ModEnd> ) ; if <S2SV_ModStart> { int result = <S2SV_ModEnd> parse_rock_ridge_inode_internal ( de <S2SV_ModStart> inode, 14, NULL <S2SV_ModEnd> ) ; }",0
906,<S2SV_ModStart> * inotify_new_group ( <S2SV_ModEnd> unsigned int max_events <S2SV_ModStart> -> inotify_data. fa = NULL ; group -> inotify_data. user = get_current_user ( ) ; if ( IS_ERR ( group ) ) { fsnotify_put_group ( group ) ; return ERR_CAST ( group ) ; } <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart>. user = get_current_user ( ) <S2SV_ModEnd> ; group -> <S2SV_ModStart> -> inotify_data. fa <S2SV_ModEnd> = NULL ;,0
907,<S2SV_ModStart> [ p ] && in -> linesize [ p ],1
908,"<S2SV_ModStart> ) ; } if ( pcount > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) )",0
909,"<S2SV_ModStart> screen -> buffers [<extra_id_1>vterm_allocator_free ( screen -> vt, screen -> buffers [ 2 ] ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 3 ] ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 4 ] ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 5 ]",0
910,"<S2SV_ModStart> SCALAR_VALUE ) { if (! check_reg_sane_offset ( env, reg, off, size ) ) { verbose ( env, ""R%d <S2SV_blank> leaks <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d+%d, <S2SV_blank> ctx+const <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed, <S2SV_blank> ctx+const+const <S2SV_blank> is <S2SV_blank> not\\n"", regno, off - reg -> off, size - reg -> off ) ; return - EACCES ; } } <S2SV_ModStart> SCALAR_VALUE ) { if (! check_reg_sane_offset ( env, reg, off, size ) ) { verbose ( env, ""R%d <S2SV_blank> leaks <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d+%d, <S2SV_blank> ctx+const <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed, <S2SV_blank> ctx+const+const <S2SV_blank> is <S2SV_blank> not\\n"", regno, off - reg -> off, size - reg -> off ) ; return - EACCES ; }",0
911,"<S2SV_ModStart> uint16 strip, nstrips ; if ( nstrips == 0 ) { TIFFError ( """", ""No <S2SV_blank> contig <S2SV_blank> strips <S2SV_blank> available"" ) ; return 0 ; } uint32 stripsize = TIFFStripSize ( in ) ; uint32 rows = 0 ; uint32 ignore = 0 ; for ( strip = 0 ; strip < nstrips ; strip ++ ) { bytes_read = TIFFReadEncodedStrip ( in, strip, bufp, - 1 ) ; ignore = bytes_read!= ( int32 ) stripsize ) ; if ( bytes_read < 0 ) { TIFFError ( """", ""Strip <S2SV_blank> %d: <S2SV_blank> read <S2SV_blank> %lu <S2SV_blank> bytes, <S2SV_blank> strip <S2SV_blank> size <S2SV_blank> %lu"", ( int ) stripsize ) ; return 0 ; }",0
912,<S2SV_ModStart> base_name ) ; char need_to_append_dot ; struct search_domain * dom ; if (! base_len ) return NULL ; <S2SV_ModEnd> need_to_append_dot = base_name <S2SV_ModStart> : 1 ; <S2SV_ModEnd> for ( dom,1
913,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
914,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = -,1
915,"<S2SV_ModStart>, one, lines, <S2SV_ModStart>, offset, rows, <S2SV_ModStart> ReadBlobLSBShort ( image ) ; rows = ReadBlobLSBShort ( image ) ; if ( rows > GetBlobSize ( image ) ) ThrowReaderException ( ResourceLimitError, ""InsufficientImageDataInFile"" ) ; pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory (",0
916,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if (! context ) return FALSE ; <S2SV_ModStart> planeSize ; } return TRUE ;,0
917,<S2SV_ModStart> policy ) { if (! inode_owner_or_capable ( inode ) ) return - EACCES ;,1
918,"<S2SV_ModStart> { httpSetHostName ( <S2SV_ModEnd> state -> host <S2SV_ModStart> -> host, ssplit <S2SV_ModEnd> ( sclone ( <S2SV_ModStart> value ), "" <S2SV_blank> \\t,"", NULL ) ) ; httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else if ( value ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
919,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data <S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",0
920,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
921,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> cg_wlock ( & <S2SV_ModStart> ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ;,0
922,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
923,"<S2SV_ModStart> size ) { size_t res ; if ( check_mul_overflow ( num, size, & res ) ) abort ( ) ; <S2SV_ModStart> = malloc ( res <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) { memset <S2SV_ModEnd> ( ptr,",0
924,<S2SV_ModStart> ioc ) ; ioc -> nr_tasks = 0 ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
925,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> * res ; <S2SV_ModEnd> dict = _PyObject_GetAttrId <S2SV_ModStart> ( self, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } <S2SV_ModEnd> if ( dict <S2SV_ModStart> dict ) { <S2SV_ModEnd> return Py_BuildValue ( <S2SV_ModStart> ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } <S2SV_ModEnd> return res ;",0
926,"<S2SV_ModStart> USB_DT_OTG, ( struct usb_otg_descriptor * <S2SV_ModStart> ) & desc ) ; if ( err ||! ( desc -> bmAttributes & USB_OTG_HNP ) ) { dev_err ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %s <S2SV_blank> hnp <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; } else if ( port1 == bus -> otg_port ) { err = usb_control_msg ( udev, 0, USB_REQ_SET_FEATURE, 0, USB_DEVICE_B_HNP_ENABLE, 0, NULL, 0, USB_CTRL_SET_TIMEOUT ) ; if ( err < 0 ) { dev_err ( & udev -> dev, ""can\'t <S2SV_blank> set <S2SV_blank> HNP <S2SV_blank> mode: <S2SV_blank> %d\\n"", err ) ; bus -> b_hnp_enable = 0 ; } else { err = usb_control_msg ( udev, 0, USB_REQ_SET_FEATURE, 0, USB_DEVICE_B_HNP_ENABLE",0
927,"<S2SV_ModStart> -> private_data ; struct perf_event_context * ctx ; u64 id ; <S2SV_ModStart> arg ) ; <S2SV_ModEnd> case PERF_EVENT_IOC_PERIOD : <S2SV_ModStart> return perf_event_period ( event, & ctx, ( u64 __user * ) arg ) ; case PERF_EVENT_IOC_ID : { u64 id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_SET_OUTPUT : { int ret ; if ( arg!= - 1 ) { ret = perf_event_set_output ( event, NULL ) ; fdput ( output ) ; } else { ret = perf_event_set_output ( event, NULL ) ; } return ret ; } case PERF_EVENT_SET_FILTER : return perf_event_set_filter ( event, & ctx ) ; }",0
928,<S2SV_ModStart> sacked_out ) ; if ( newly_acked_sacked <= 0 ||! tp -> prior_cwnd ) return ;,0
929,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> ] ) ; ++ cm -> counts -> <S2SV_ModEnd> uv_mode [ y_mode",0
930,"<S2SV_ModStart> mask ) { struct skcipher_tfm * tfm = crypto_alloc_skcipher ( type ) ; if (! tfm ) return NULL ; return tfm -> skcipher <S2SV_ModEnd> ( name, <S2SV_ModStart>, mask ) ;",0
931,<S2SV_ModStart> ) ) { digest_len = CCP_DIGEST_SIZE ( sha -> digest ) ; if ( digest_len + ctx_size > cmd -> src_len ) return - EINVAL ; <S2SV_ModStart> - EINVAL ; } <S2SV_ModStart> src_len ) { digest_len = CCP_DIGEST_SIZE ( sha -> digest ) ; if ( digest_len + ctx_size > cmd -> src_len ) return - EINVAL ; <S2SV_ModStart> - EINVAL ; } <S2SV_ModStart> src_len ) { digest_len = CCP_DIGEST_SIZE ( sha -> digest ) ; if ( digest_len + ctx_size > cmd -> src_len ) return - EINVAL ; <S2SV_ModStart> - EINVAL ; },0
932,"<S2SV_ModStart> c -> tile_width <S2SV_ModEnd>, 16 )",0
933,"<S2SV_ModStart> iv ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
934,<S2SV_ModStart> } srcptr = buf ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += 2 * stride ; srcptr += stride ; } n = numrows - hstartcol ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += 2 * stride ; srcptr += stride ; } srcptr = buf ; dstptr = & a [ 0 ] ; dstptr = buf ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr +=,0
935,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
936,"<S2SV_ModStart> p ) { return <S2SV_ModEnd> chdlc_print ( ndo <S2SV_ModStart>, p, h -> len <S2SV_ModEnd> ) ; }",1
937,"<S2SV_ModStart> = 0 ; rc = cifs_read_super ( cifs_sb, xid, & cifs_sb -> smb_cache, & cifs_sb -> smb_cache, & cifs_sb -> smb_cache, & cifs_sb -> smb_cache, & full_path, sizeof ( full_path ), & cifs_sb -> smb_cache ) ; if ( rc ) { rc = - EINVAL ; goto out ; } rc = cifs_write_super ( cifs_sb, xid, & cifs_sb -> smb_cache, & cifs_sb -> smb_cache, & cifs_sb -> smb_cache, & cifs_sb -> smb_cache, sizeof ( cifs_sb -> smb_cache ), & cifs_sb -> smb_cache ) ; if ( rc ) { rc = - EINVAL ; goto out ; }",0
938,<S2SV_ModStart> -> len && SKB_EXT_ERR ( skb ) -> opt_stats <S2SV_ModEnd> ) put_cmsg (,1
939,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ) ;",1
940,"<S2SV_ModStart> ; if (! SSL_C_IS_EXPORT ( s -> s3 -> tmp. new_cipher ) ) { al = SSL_AD_UNEXPECTED_MESSAGE ; SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE, SSL_R_UNEXPECTED_MESSAGE ) ; SSLerr ( SSL_F_SSL3_GET_CERTIFICATE, SSL_R_UNEXPECTED_MESSAGE ) ; SSLerr ( SSL_F_SSL3_GET_CERTIFICATE, SSL_R_UNEXPECTED_MESSAGE ) ; SSLerr ( SSL_F_SSL3_GET_CERTIFICATE, SSL_R_UNEXPECTED_MESSAGE ) ; SSLerr ( SSL_F_SSL3_GET_CERTIFICATE, SSL_R_UNEXPECTED_MESSAGE ) ; goto f_err ; } if ( alg_k & ( SSL_kDHE | SSL_kECDHE ) ) { al = SSL_AD_UNEXPECTED_MESSAGE ; SSLerr ( SSL_F_SSL3_GET_CERTIFICATE, SSL_R_UNEXPECTED_MESSAGE ) ; SSLerr ( SSL_F_SSL3_GET_CERTIFICATE, SSL_R_UNEXPECTED_MESSAGE ) ; goto",0
941,<S2SV_ModStart> { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE ) { return SECURE_ELEMENT_ERROR_BUF_SIZE,1
942,"<S2SV_ModStart> + 1 ; if ( iframe -> max_settings > session -> max_settings ) { rv = nghttp2_session_set_max_settings ( session, NGHTTP2_MAX_SETTINGS, session -> max_settings ) ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } rv = nghttp2_session_set_max_settings ( session, NGHTTP2_MAX_SETTINGS, session -> max_settings ) ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } rv = nghttp2_session_set_max_settings ( session, NGHTTP2_MAX_SETTINGS, session -> max_settings ) ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } rv = nghttp2_session_set_max_settings ( session, NGHTTP2_MAX_SETTINGS, session -> max_settings ) ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } rv = nghttp2_session_set_max_settings ( session, NGHTTP2_MAX_SETTINGS, session -> max_settings ) ; if ( ng",0
943,<S2SV_ModStart> = ucounts ; new_ns -> mounts = 0 ; new_ns -> pending_mounts = 0 ;,1
944,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
945,"<S2SV_ModStart> ; if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES, & capabilities ) ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, & capabilities ) ; x86_pmu. intel_cap. capabilities |= cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES, & capabilities ) ; } else if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES, & capabilities ) ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, & capabilities ) ; x86_pmu. intel_cap. capabilities |= cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES, & capabilities ) ; }",0
946,"<S2SV_ModStart>. dimensions ; # ifdef STB_VORBIS_DIVIDES_IN_RESIDUE uint16 * * part_classdata = ( uint8 * * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * part_classdata ) ) ; # else int * * classifications = ( int * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * classifications ) ) ; # endif CHECK ( f ) ; for ( i = 0 ; i < ch ; ++ i ) if ( do_not_decode [ i ] ) memset ( residue_buffers [ i ], 0, sizeof ( float ) * n ) ; for ( j = 0 ; j < ch ; ++ j ) if ( do_not_decode [ j ] ) memset ( residue_buffers [ i ], 0, sizeof ( float ) * n ) ) memset ( residue_buffers [ i ], 0, sizeof ( float ) * n ) ; for ( i = 0 ; i < ch ; ++ i ) if ( do_not_decode [ i ] ) memset ( residue_buffers [ i ],",0
947,"<S2SV_ModStart> ) ; u32 last_oow_ack_time = 0 <S2SV_ModStart> ) { last_oow_ack_time = jiffies <S2SV_ModEnd> / HZ ; <S2SV_ModStart> = now ; tp -> last_oow_ack_time = last_oow_ack_time ; challenge_count = 0 ; } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGE ) ; } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; }",0
948,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
949,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * tp, vpx_writer <S2SV_ModEnd> * stop ) <S2SV_ModStart> t ] ; vpx_writer <S2SV_ModEnd> * const b <S2SV_ModStart> & vpx_extra_bits [ t ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { const int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) & 1 ; vpx_write ( w, bb, pb [ i >> 1 ] ) ; i = b -> tree [ i >> 1 ] ; } else { vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write_bit <S2SV_ModEnd> ( w,",0
950,"<S2SV_ModStart> size_t uncompressed_hdr_size ; struct vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> & wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> 16 ) ; vpx_clear_system_state ( ) ; first_part_size = write_compressed_header ( cpi, & data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> = wb ; vpx_clear_system_state <S2SV_ModEnd> ( ) ;",0
951,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
952,"<S2SV_ModStart> ret, n ; u16 version <S2SV_ModStart> ENODEV ; } if ( hdesc -> bLength < sizeof ( struct hid_descriptor ) ) { dbg_hid ( ""hid <S2SV_blank> descriptor <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - EINVAL ; } <S2SV_ModStart> hdesc -> bCountryCode ; for ( n = 0 ; n < hdesc -> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; else if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; else if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; else if ( rsize > HID_MAX_DESCRIPTOR_SIZE ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%",0
953,"<S2SV_ModStart> struct ikev2_id id <S2SV_ModEnd> ; int id_len <S2SV_ModStart> * typedata ; ND_TCHECK2 ( * ext, sizeof ( id ) <S2SV_ModEnd> ) ; UNALIGNED_MEMCPY <S2SV_ModStart> ( * ext, sizeof ( id ) <S2SV_ModEnd> ) ; i <S2SV_ModStart> case ID_VNC_ADDR : ND_PRINT ( ( ndo, "" <S2SV_blank> vnc:"" ) ) ; dumphex = 1 ; break ; case ID_VNC_IPV4_ADDR : ND_PRINT ( ( ndo, "" <S2SV_blank> vnc:"" ) ) ; dumphex = 1 ; break ; case ID_VNC_IPV6_ADDR : ND_PRINT ( ( ndo, "" <S2SV_blank> vnc:"" ) ) ; dumphex = 1 ; break ; case ID_DER_ASN1_DN : ND_PRINT ( ( ndo, "" <S2SV_blank> asn1:"" ) ) ; dumpascii = 1 ; break ; case ID_VNC_IPV4_ADDR : ND_PRINT ( ( ndo, "" <S2SV_blank> vnc:"" ) ) ; dumphex = 1 ; break ; case ID_VNC_IPV6_ADDR : ND_PRINT ( ( ndo, """,0
954,"<S2SV_ModStart> group_dead ) ; if ( group_dead ) { hrtimer_try_to_cancel ( & tsk -> signal -> real_timer ) ; exit_itimers ( tsk -> signal ) ; } if ( group_dead ) acct_collect ( code, group_dead ) ; if ( group_dead ) acct_collect ( code, group_dead ) ; if ( group_dead ) acct_collect ( code, group_dead ) ; if ( unlikely ( tsk -> robust_list ) ) exit_robust_list ( tsk ) ; # ifdef CONFIG_COMPAT if ( unlikely ( tsk -> robust_list ) ) exit_robust_list ( tsk ) ; # endif acct_collect ( code, group_dead ) ; if ( group_dead ) acct_collect ( code, group_dead ) ; if ( group_dead ) acct_collect ( code, group_dead ) ; if ( group_dead ) acct_collect ( code, group_dead ) ; if ( group_dead ) acct_collect ( code, group_dead ) ; if ( group_dead ) acct_collect ( code, group_dead ) ; if ( group_",0
955,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> data ) { <S2SV_ModEnd> add_preferred_base_object ( name <S2SV_ModStart> |= OBJECT_ADDED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
956,"<S2SV_ModStart> = jas_tvparser_getval ( tvp ) ; if (! jas_safe_size_mul3 ( <S2SV_ModEnd> cmpt -> width <S2SV_ModStart> -> width, <S2SV_ModEnd> cmpt -> height <S2SV_ModStart> height ) ; if (! jas_safe_size_mul3 ( <S2SV_ModEnd> cmpt -> prec <S2SV_ModStart> -> prec, <S2SV_ModEnd> cmpt -> data <S2SV_ModStart> -> data ) ) { goto error ; } if (! jas_safe_size_mul3 ( <S2SV_ModEnd> cmpt -> data <S2SV_ModStart> -> data ) ) { jas_tvparser_free ( tvp ) ; goto error ; } if (! jas_safe_size_mul3 ( <S2SV_ModEnd> cmpt -> width <S2SV_ModStart> -> height, <S2SV_ModEnd> cmpt -> width <S2SV_ModStart> -> width ) ; if (! jas_safe_size_mul3 ( <S2SV_ModEnd> cmpt -> data <S2SV_ModStart> -> data ) ) { goto error ; } if (! jas_safe_size_mul3 ( <S2SV_ModEnd> cmpt -> data <S2SV_ModStart> -> data ) ) { jas_tvparser_free ( tvp ) ; goto error ; }",0
957,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
958,"<S2SV_ModStart>, h2, fft_jmp ; WORD32 xt0_0, yt1_0, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1 ; x_l2_0, x_l2_1 ; x_h2_0 = x [ h2 ] ; x_h2_0 = x [ h2 ] ; x_h2_1 = x [ h2 ] ; x_l1 = & ( x [ l1 ] ) ; x_l2 = & ( x [ l2 ] ) ; x_l1 = & ( x [ l1 ] ) ; x_l1 = & ( x [ l1 ] ) ; x_l1 = & ( x [ l1 ] ) ; x_l2 = & ( x [ l2 ] ) ; x_h2 = & ( x [ h2 ] ) ; x_h2 =",0
959,<S2SV_ModStart> ; if ( unlikely ( datalen - dp < 1 ) ) goto data_overrun_error ; if ( ( tag & ASN1_EOC ) == ASN1_EOC ) goto invalid_eoc ; if ( -- indef_level <= 0 ) { if ( datalen - dp < 2 ) goto data_overrun_error ; goto next_tag ; } if ( unlikely ( len <= 0x7f ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } if ( unlikely ( len == ASN1_INDEFINITE_LENGTH ) ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } len = data [ dp ++ ] ; if ( len <= 0x7f ) goto indefinite_len_primitive ; n = len - 0x80 ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto data_overrun_error ; for ( len = 0 ; n > 0 ; n -- ) {,0
960,<S2SV_ModStart> ) val ; <S2SV_ModEnd> memset ( ptr,1
961,<S2SV_ModStart> mntent ) { struct mnt * mnt = real_mount ( mntent -> mnt_dir -> mnt_sb ) ; return mnt -> mnt_sb -> s_stack_depth > 0? mnt -> mnt_sb -> s_stack_depth : 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
962,"<S2SV_ModStart> PHP_MD_CTX ctx ; if ( sig_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""invalid <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD_CTX ctx ; if ( sig_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""invalid <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> FAILURE ; } if ( sig_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""invalid <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD_CTX ctx ; if ( sig_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""invalid <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> FAILURE ; } if ( sig_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sizeof ( buf ) ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD_CTX ctx ; if ( sig_len < sizeof ( buf ) ) {",0
963,<S2SV_ModStart> ] <= max && value [ n ] - min < field -> maxusage <S2SV_ModStart> && field -> value [ n ] - min < field -> maxusage && field -> <S2SV_ModStart> <= max && value [ n ] - min < field -> maxusage &&,1
964,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
965,"<S2SV_ModStart> if ( argReg >= <S2SV_ModEnd> regsz ) { <S2SV_ModStart> regsz ) { return ; } <S2SV_ModEnd> p4 = r_uleb128 <S2SV_ModStart> p4, p4_end <S2SV_ModEnd> - p4, <S2SV_ModStart> ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; if (! ( debug_positions = r_list_newf ( ( RListFree ) free ) ) ) { return ; } if (! ( emitted_debug_locals = r_list_newf ( ( RListFree ) free ) )",0
966,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, server_ip_val, req_server_ip ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; fill_headers ( req, env ) ; rb_hash_aset ( env, rack_name_val, rack_name_val_val ) ; rb_hash_aset ( env, rack_url_scheme_val, rack_url_scheme_val_val ) ; rb_hash_aset ( env, rack_input_val, req_rack_input ( req ) ) ; rb_hash_aset ( env, rack_logger_val, req_rack_logger ( req ) ) ; rb_hash_aset ( env, rack_hijack_val, self ) ; rb_hash_aset ( env, rack_hijack_io_val, Qnil ) ;",0
967,<S2SV_ModStart> 0 ) ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> -> valuelen ) ; if ( args -> rmtvaluelen < args -> valuelen ) { args -> valuelen = args -> rmtvaluelen ; return XFS_ERROR ( ERANGE ) ; } args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; } return,0
968,<S2SV_ModStart> ; size_t sz ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ;,0
969,"<S2SV_ModStart> endif # endif imp_sth_phb_t * fbind ; int <S2SV_ModEnd> prepare_retval ; # <S2SV_ModStart>, prepare_retval ; <S2SV_ModEnd> if ( DBIc_TRACE_LEVEL <S2SV_ModStart> 2 ) PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t-> <S2SV_blank> dbd_st_prepare <S2SV_blank> MYSQL_VERSION_ID <S2SV_blank> %d, <S2SV_blank> SQL <S2SV_blank> statement: <S2SV_blank> %s\\n"", MYSQL_VERSION_ID, statement ) ; # endif <S2SV_ModEnd> if ( DBIc_TRACE_LEVEL <S2SV_ModStart> 2 ) PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t-> <S2SV_blank> dbd_st_prepare <S2SV_blank> MYSQL_VERSION_ID <S2SV_blank> %d, <S2SV_blank> SQL <S2SV_blank> statement: <S2SV_blank> %s\\n"", MYSQL_VERSION_ID, statement ) ; <S2SV_ModEnd> return 0 ;",0
970,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) &&! test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) &&",1
971,"<S2SV_ModStart> ) ) ; if ( LTXTQUERY_TOO_BIG ( state. num, state. sumlen ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""ltxtquery <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ) ) ;",1
972,"<S2SV_ModStart> int need = 0 <S2SV_ModEnd> ; CELL first <S2SV_ModStart> screen, { int width ; int height ; int <S2SV_ModStart> need *= 4 ; width = screen -> width - first. row ; height = screen -> height - last. row ; if ( width < 0 || height < 0 ) { SysError ( ERROR_BMALLOC2 ) ; free ( line ) ; return ; }",0
973,<S2SV_ModStart> ; if (! EXT4_SB ( inode -> i_sb ) -> s_journal <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd>! handle ),1
974,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> 0.0000001 ; if ( len <= 0 ) { if ( isnan ( val ) ) strncpy ( str, ""NaN"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val == 0 ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = 0 ; } else { int v = ( int ) ( val / radix ) ; val = ( val - v ) * radix ; if ( v == radix - 1 ) v = radix - 1 ; if ( hasPt ) v = radix - 1 ; if ( v == radix - 1 ) v = radix - 1 ; if ( v == radix - 1 ) v = radix - 1 ; if ( v == radix - 1 ) v = radix - 1 ; if (! hasPt ) { hasPt = true ; } }",0
975,"<S2SV_ModStart>, ""PG%[ <S2SV_blank> \\t]%c%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d%[ <S2SV_blank> \\t]%d%[ <S2SV_blank> \\t]%d"", temp, & prec, temp, & w, temp, & h )!= 9 ) { fclose ( f ) ; fprintf ( stderr, ""ERROR: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> the <S2SV_blank> right <S2SV_blank> number <S2SV_blank> of <S2SV_blank> element <S2SV_blank> from <S2SV_blank> the <S2SV_blank> fscanf() <S2SV_blank> function!\\n"" ) ; return NULL ; } if ( fscanf ( f, ""PG%[ <S2SV_blank> \\t]%c%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"", temp, & prec, temp, & w, temp, & h )!= 9 ) { fclose ( f ) ; fprintf ( stderr, ""ERROR: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> the <S2SV_blank> right <S2SV_blank> number <S2SV_blank> of <S2SV_blank> element <S2SV_blank> from <S2SV_blank> the <S2SV_blank> fscanf() <S2SV_blank> function!\\n"" ) ; return NULL ; } if ( fscanf ( f, ""PG%[ <S2SV_blank> \\t]%c%c%[ <S2SV_blank> \\t+-]%",0
976,"<S2SV_ModStart> < 6 ) ASSERT ( result!= NULL <S2SV_ModStart> ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; if ( size < 8 ) ASSERT ( result!= buf ) ; ASSERT ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) == 0 ) ; if ( result!= buf ) free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT (",0
977,"<S2SV_ModStart> ( unlikely ( fast_pool -> count >= 64 ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; } if ( ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> pool [ 64 ] ^= cycles ; } if ( ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> pool [ 64 ] ^= cycles ; } if ( ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; }",0
978,"<S2SV_ModStart> ( str, ""ID:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len )",0
979,"<S2SV_ModStart> = "".tgz"" ; if ( ( st. st_mode & S_IFMT ) == S_IFREG && ( st. st_mode & S_IFMT )!= S_IFLNK && ( st. st_mode & S_IFMT )!= S_IFDIR ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFREG && ( st. st_mode & S_IFMT )!= S_IFLNK && ( st. st_mode & S_IFMT )!= S_IFDIR && ( st. st_mode & S_IFMT )!= S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; }",0
980,,1
981,"<S2SV_ModStart> * output ; MagickBooleanType status ; <S2SV_ModStart> ) ; } status = MagickTrue ; <S2SV_ModStart> 2 ; i < ( ssize_t ) ( argc - 1 ) ; i ++ ) { input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( c = fgetc ( input ) ; c!= EOF ; c = fgetc ( input ) ) ( void ) fputc ( ( char ) c, output ) ; ( void ) remove_utf8 ( argv [ i ] ) ; } ( void ) fclose ( input ) ; ( void ) remove_utf8 ( argv [ i ] ) ; } ( void ) fclose ( output ) ; return ( status <S2SV_ModEnd> ) ; }",0
982,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
983,"<S2SV_ModStart> ; fail : if ( IS_ERR ( bdev ) ) { ext3_msg ( sb, KERN_ERR, ""error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s: <S2SV_blank> %ld"", __bdevname ( dev, b ) ) ; blkdev_put ( bdev, FMODE_READ | FMODE_WRITE | FMODE_EXCL ) ; goto fail ; }",0
984,"<S2SV_ModStart> passwd * pwd, const char * prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> ( fp = safe_mkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> atomic_dir ) ) == NULL ) return - 1 ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; namelen = strlen ( pwd -> pw_name ) ; if (! found && linebuf [ namelen ] == ':' &&! strncmp ( linebuf, pwd -> pw_name, namelen ) ) { if ( putpwent ( pwd, fp ) < 0 ) goto fail ; found = true ; continue ; } rc = close_stream ( fp ) ; fp = NULL ; <S2SV_ModEnd> if (!",0
985,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
986,<S2SV_ModStart> s2 ) { size_t len ; <S2SV_ModStart> 1U ) ; len = <S2SV_ModEnd> strlen ( s1,0
987,"<S2SV_ModStart> TRUE ; } Jid * jid_from = jid_create ( from ) ; Jid * jid_to = jid_create ( to ) ; const char * const stanza_txt = xmpp_stanza_get_body ( stanza ) ; if (! stanza_txt ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> no <S2SV_blank> stanza <S2SV_blank> element"" ) ; return TRUE ; } char * const stanza_txt = xmpp_stanza_get_body ( stanza ) ; if (! stanza_txt ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> no <S2SV_blank> stanza <S2SV_blank> body."" ) ; return TRUE ; } char * const stanza_txt = xmpp_stanza_get_body ( stanza ) ; if (! stanza_txt ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> no <S2SV_blank> stanza <S2SV_blank> element"" ) ; return TRUE ; } char * const stanza_txt = xmpp_stanza_get_body ( stanza ) ; if (! stanza_txt ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> no <S2SV_blank> stanza <S2SV_blank> body."" ) ; return TRUE ; } char * const stanza_txt = xmpp",0
988,<S2SV_ModStart> badfmt ; } <S2SV_ModEnd> } config_set_special_field ( <S2SV_ModStart> o -> ptr ) { if ( strlen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { zfree ( server. rdb_filename ) ; server. rdb_filename = o -> ptr ; } else if ( strlen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { zfree ( server. rdb_filename ) ; server. rdb_filename = o -> ptr ; } <S2SV_ModStart> badfmt ; } <S2SV_ModEnd> } config_set_special_field ( <S2SV_ModStart> o -> ptr ) { if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { zfree ( server. rdb_filename ) ; server. rdb_filename = o -> ptr ; } else if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { zfree ( server. rdb_filename ) ; server. rdb_filename = zstrdup ( o -> ptr ) ; },0
989,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
990,"<S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL, NULL, NULL, NULL, NULL ) ; log_flush ( LOG_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-ssls"" ) ) { print_ssl_options ( ) ; log_flush ( LOG_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_global_option ( ) ; log_flush ( LOG_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-fd"" ) ) { if (! arg2 ) { s_log ( LOG_ERR, ""No <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> specified"" ) ; print_syntax ( ) ; return 1 ;",0
991,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; BT_DBG (,1
992,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
993,<S2SV_ModStart> md_v1_new_iv ) ; <S2SV_ModEnd> st -> st_v1_new_iv <S2SV_ModStart> md_v1_new_iv ) ; st -> st_v1_new_iv. data [ st -> st_v1_new_iv. len - st -> st_v1_iv. len ] = 0 ; st -> st_v1_new_iv. data [ st -> st_v1_new_iv. len ] = TRUE ; st -> st_v1_new_iv. len = e -> enc_blocksize ; st -> st_v1_new_iv. data [ st -> st_v1_new_iv. len - st -> st_v1_new_iv. len - st -> st_v1_iv. len ] = 0 ; st -> st_v1_new_iv. data [ st -> st_v1_new_iv. len ] = TRUE ; st -> st_v1_new_iv. len = e -> enc_blocksize ; st -> st_v1_new_iv. data [ st -> st_v1_new_iv. len - st -> st_,0
994,<S2SV_ModStart> = 0 ; ps_op -> s_ivd_video_decode_op_t. u4_ip_num_bytes = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_pic_num_bytes = ps_ip -> s_ivd_video_decode_ip_t. u4_pic_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_pic_num_bytes = ps_ip -> s_ivd_video_decode_ip_t. u4_pic_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_pic_num_bytes = ps_ip -> s_ivd_video_decode_ip_t. u4_pic_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_pic_num_bytes = ps_ip -> s_ivd_video_decode_ip_t. u,0
995,<S2SV_ModStart> * zone ; size_t tilemap_size ; <S2SV_ModStart>. height ; tilemap_size = <S2SV_ModEnd> x_size * y_size <S2SV_ModStart> struct map_tile ) ; if ( x_size == 0 || tilemap_size / x_size / sizeof ( struct map_tile )!= y_size ||! ( tilemap = malloc ( tilemap_size,1
996,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ; return ( - 1 ) <S2SV_ModStart> 3 ) { ND_TCHECK ( cp [ 2 ] ) ; <S2SV_ModStart> ) ) ; return ( - 1 ) <S2SV_ModStart> 4 ) { ND_TCHECK2 ( cp [ len ], 4 ) ; <S2SV_ModStart> ) ; } return ( 0 ) ;",0
997,<S2SV_ModStart> <S2SV_null> <S2SV_null> static char <S2SV_ModEnd> print_string ( cJSON <S2SV_ModStart> item ) { if (! item ) return NULL ; return print_valuestring ( item -> valuestring ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
998,"<S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img,",1
999,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> + 1, ""prestring=%511s"" <S2SV_ModEnd>, buf ) <S2SV_ModStart> + 1, ""protos=%511s"" <S2SV_ModEnd>, buf ) <S2SV_ModStart> + 1, ""protos=%511s"" <S2SV_ModEnd>, buf ) <S2SV_ModStart> } if ( ( L_BUFSIZE <S2SV_ModEnd> - 3 ) <S2SV_ModStart> - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; } else { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; } } else if (! strncmp ( argv [ i ], ""-prestring"", 10 ) ) { ret = sscanf ( argv [ i ] + 1, ""prestring=%511s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> prestring\\n"" ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n",0
1000,<S2SV_ModStart> ; if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks,0
1001,"<S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu,",1
1002,"<S2SV_ModStart> ) ; } else if ( arg1 == <S2SV_ModStart> ) ; } else if ( arg1 == 3 ) { win_set_geom ( 0, - 1, 0, - 1 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 3 ) { win_set_geom ( 0, - 1, 0, - 1 ) ; term. rows0 = rows0 ; term. rows0 = rows0 ; term. cols0 = rows0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; } else if ( arg1 == 1 ) { win_maximise (",0
1003,<S2SV_ModStart> studio_profile ) { <S2SV_ModEnd> if ( s <S2SV_ModStart> studio_profile ) { if (! s -> studio_profile ) s -> avctx -> profile = FF_PROFILE_MPEG4_SIMPLE_STUDIO ; else s -> avctx -> profile = FF_PROFILE_MPEG4_SIMPLE_STUDIO ; } else if ( s -> studio_profile ) s -> avctx -> profile = FF_PROFILE_MPEG4_SIMPLE_STUDIO ; else if ( s -> studio_profile ) s -> avctx -> profile = FF_PROFILE_MPEG4_SIMPLE_STUDIO ; else if ( s -> studio_profile ) s -> avctx -> profile = FF_PROFILE_MPEG4_SIMPLE_STUDIO ; } else if ( s -> studio_profile ) s -> avctx -> profile = FF_PROFILE_MPEG4_SIMPLE_STUDIO ; else if ( s -> studio_profile ) s -> avctx -> profile = FF_PROFILE_MPEG4_SIMPLE_STUDIO ; else if ( s -> studio_profile ) s ->,0
1004,<S2SV_ModStart> nsops < 1 || nsops > SEMOPM,1
1005,<S2SV_ModStart> ; i < ( int ) <S2SV_ModEnd> cols + 17 <S2SV_ModStart> + 17 ; i ++ ) s [ i ] = s [ i - cols - 1 ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] - s [ c - 8 ] ; sum += x ; sumsq += x * y ; d [ c & 15 ] = d [ ( c - 8 ) & 15 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] - s [ c - 8 ] ; sum += x ; sumsq += x * y ; d [ c & 15 ] = 0 ; for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ],0
1006,"<S2SV_ModStart> ] ) ; if ( fileblock < grub_le_to_cpu32 ( leaf -> entries ) ) { grub_error ( GRUB_ERR_BAD_FS, ""file <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range"" ) ; return - 1 ; }",0
1007,"<S2SV_ModStart> ; # endif if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX = i -> parent -> width - i -> width ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif i -> posY = i -> parent -> height - i -> height ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX =",0
1008,"<S2SV_ModStart> if ( q < p ) { DPRINTF ( ( ""Wrapped <S2SV_blank> around <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> %p\\n"", q, p ) ) ; goto out ; } if ( q",0
1009,<S2SV_ModStart> ++ ; } if ( bytes_matched >= max_bytes_matched + input_incr ) break ; <S2SV_ModStart> ++ ; } if ( bytes_matched >= max_bytes_matched + input_incr ) break ;,0
1010,"<S2SV_ModStart> len ) { assert ( len > 0 ) ; <S2SV_ModStart> case LEX_EOF : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""EOF"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_ID : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_INT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""INT"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_FLOAT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""FLOAT"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> TEMPLATE <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""REGEX"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> REGEX"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_COMMENT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UN",0
1011,"<S2SV_ModStart> mnt_instance ) ; if ( unlikely (! list_empty ( & mnt -> mnt_mounts ) ) ) { struct mount * p, * tmp ; list_for_each_entry_safe ( p, tmp, & mnt -> mnt_mounts, mnt_child ) { umount_mnt ( p ) ; } }",1
1012,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
1013,,1
1014,"<S2SV_ModStart> ; if ( e == NULL ) goto not_found ; r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) goto not_found ; r = sd_bus_call_method ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_bus_message_read ( reply, ""u"", & mapped ) ; if ( r < 0 ) { if ( sd_bus_message_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_bus_call",0
1015,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> uint32_t pos ; if ( inode -> i_size > inode -> i_sb -> s_blocksize ) { err = - ENAMETOOLONG ; goto out_unmap ; } <S2SV_ModStart>! bh ) { err = - EIO ; goto out_unlock_inode ; } <S2SV_ModEnd> symlink = bh <S2SV_ModStart> return 0 ; out_unlock_inode <S2SV_ModEnd> : up_read ( <S2SV_ModStart> page ) ; out_unmap :,1
1016,<S2SV_ModStart> else if ( cpu_has_secondary_exec_ctrls ( ) && ( vmcs_read32 ( SECONDARY_VM_EXEC_CONTROL ) & SECONDARY_EXEC_VIRTUALIZE_X2APIC_MODE ) <S2SV_ModEnd> ) { if,1
1017,"<S2SV_ModStart> if ( ent == NULL ) { st = KRB5_KDB_NOENTRY ; <S2SV_ModEnd> goto cleanup ; <S2SV_ModStart> cleanup ; } st = populate_policy ( context, ld, ent, pol_name, * policy ) ;",1
1018,<S2SV_ModStart> = value ; if ( ps_sps -> i1_sps_length > ps_sps -> i1_sps_max_length ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ps_sps -> i1_sps_length > ps_sps -> i1_sps_max_length ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ps_sps -> i1_sps_length > ps_sps -> i1_sps_length ) { return IHEVCD_INVALID_HEADER ; },0
1019,"<S2SV_ModStart> inode ) ; struct metapath_buffer * bh = mp -> mp_bh [ 0 ] ; struct <S2SV_ModStart> unsigned end_of_metadata ; int ret <S2SV_ModStart> end_of_metadata = height <S2SV_ModEnd> - 1 ; <S2SV_ModStart> - 1 ; ret = gfs2_meta_inode_block_map ( inode, bh_map, branch_start, bh -> b_blocknr <S2SV_ModEnd> ) ; if <S2SV_ModStart> ALLOC_DATA ; } bh -> b_blocknr = bh -> b_blocknr <S2SV_ModEnd> ; if ( <S2SV_ModStart> ALLOC_GROW_HEIGHT ; bh -> b_size >>= inode -> i_blkbits ; ret = gfs2_meta_inode_block_map ( inode, branch_start, bh -> b_size >> inode -> i_blkbits, bh -> b_size >> inode -> i_blkbits ) ; if ( ret < 0 ) { struct buffer_head * bh ; ptr = metapointer ( end_of_metadata, mp ) ; bh = mp -> mp_bh [ end_of_metadata ] ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [",0
1020,<S2SV_ModStart> ) ) { if ( psf -> header. indx + count < psf -> header. len && psf -> header. indx + count < psf -> header. len && psf -> header. indx + count < psf -> header. len && psf -> header. indx + count < psf -> header. len && psf -> header. indx + count < psf -> header. len && psf -> header. indx + count < psf -> header. len && psf -> header. indx + count < psf -> header. len && psf -> header. indx + count < psf -> header. len && psf -> header. indx + count < psf -> header. len && psf -> header. indx + count < psf -> header. len && psf -> header. indx + count < psf -> header. len && psf -> header. indx + count < psf -> header. len && psf -> header. indx + count < psf -> header. len && psf -> header. indx + count < psf -> header. len && psf -> header. indx + count < psf -> header. len && psf -> header. indx + count < psf -> header. len && psf -> header. indx + count,0
1021,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( i,1
1022,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
1023,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1024,"<S2SV_ModStart> 0 ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",1
1025,"<S2SV_ModStart> int num_items_scanned ; int pkt_len ; int pkt_offset <S2SV_ModStart> + 64, ""LEN=%9u"" <S2SV_ModEnd>, & pkt_len <S2SV_ModStart> = WTAP_ERR_BAD_FILE ; * err_info = g_strdup_printf ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"", pkt_offset ) ; return FALSE ; } if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup_printf ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_offset % 9u!= 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup_printf ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"", pkt_offset ) ; return FALSE ; } if ( pkt_offset % 9u!= 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info =",0
1026,<S2SV_ModStart> ; int err = 0 ; msg -> msg_namelen,1
1027,"<S2SV_ModStart> ; if ( zend_hash_find <S2SV_ModEnd> ( ht,",1
1028,<S2SV_ModStart> ) ) ; strncpy <S2SV_ModEnd> ( link_info.,0
1029,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1030,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",1
1031,<S2SV_ModStart> p -> tokenpos >= ( <S2SV_ModEnd> p -> tokenlen <S2SV_ModStart> p -> tokenlen - 1 ),1
1032,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> bsize ) { switch ( bsize ) { case BLOCK_8X8 : return vpx_mse8x8 ; case BLOCK_16X8 : return vpx_mse16x8 ; case BLOCK_8X16 : return vpx_mse8x16 ; case BLOCK_16X16 : return vpx_mse16x16 ; default : return vpx_mse8x8 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1033,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1034,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
1035,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
1036,"<S2SV_ModStart> } if (! padata -> pa_type ) { return retval ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, padata, request, reply, encrypting_key, send_pa, cb, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REP9 ) { return return_pkinit_rep9 ( context, padata, request, reply, encrypting_key, send_pa, moddata, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, padata, request, reply, send_pa, cb, moddata, moddata, moddata, moddata ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, encrypting_key, send_pa, moddata, moddata ) ; } if ( padata -> pa",0
1037,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1038,"<S2SV_ModStart> -> stratum_port ; snprintf ( address, 254 <S2SV_ModEnd>, ""%s:%s"",",1
1039,"<S2SV_ModStart> ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""error"" ) ; http_response_send ( res ) ; return ; } if ( page && ( <S2SV_ModStart> ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""error"" ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response",0
1040,"<S2SV_ModStart> ; if ( max_submaps > INT_MAX / f -> blocksize_1 ) return error ( f, VORBIS_invalid_setup ) ; if ( <S2SV_ModStart> goto next_segment ; if ( max_submaps > INT_MAX / f -> blocksize_1 ) return error ( f, VORBIS_invalid_setup ) ; <S2SV_ModStart> goto next_segment ; if ( max_submaps > INT_MAX / f -> blocksize_1 ) return error ( f, VORBIS_invalid_setup ) ; <S2SV_ModStart> goto next_segment ; if (! ( f -> page_flag & PAGEFLAG_continued_packet ) ) return error ( f, VORBIS_invalid_setup ) ; if ( <S2SV_ModStart> goto next_segment ; if ( f -> page_flag & PAGEFLAG_first_page ) return error ( f, VORBIS_invalid_setup ) ; if ( f -> page_flag & PAGEFLAG_first_page ) return error ( f, VORBIS_invalid_setup ) ; if ( f -> page_flag & PAGEFLAG_continued_packet ) return error ( f, VORBIS_invalid_",0
1041,<S2SV_ModStart> head -> iov_base ; if ( hdr > head -> iov_len ) return 0,1
1042,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
1043,"<S2SV_ModStart> flags ) ; if ( vb ) { <S2SV_ModStart> vb2_buf ) ; } <S2SV_ModStart>! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left > frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame_len ) ; return ; } if ( input -> buf_cur_space_left > frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame",0
1044,"<S2SV_ModStart> size ) { size_t res ; if ( check_mul_overflow ( size, PREFIX_SIZE, & res ) ) { zmalloc_oom_handler ( res ) ; zmalloc_stat_alloc ( res ) ; return NULL ; } <S2SV_ModEnd> void * ptr",0
1045,<S2SV_ModStart> ; ssize_t count ; if ( bytes == 0 || items == 0 ) return 0,1
1046,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
1047,<S2SV_ModStart> key_ref ) ; if ( key -> state == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> ) goto can_read_key,0
1048,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, INFO, ""info: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> len <S2SV_blank> = <S2SV_blank> %d\\n"", req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; } else { memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0,",0
1049,"<S2SV_ModStart> valuelen ) ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ], context -> seen_enough ) ; if ( error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } <S2SV_ModEnd> if ( context",0
1050,<S2SV_ModStart> r ) { if ( r == NULL ) return ( - 1 ) ;,0
1051,<S2SV_ModStart> 0 ) ; hrtimer_try_to_cancel <S2SV_ModEnd> ( & stime,1
1052,"<S2SV_ModStart> < q ) { <S2SV_ModStart> p ) ; } <S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str ) ; } else { <S2SV_ModStart> low ) ; } <S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str ) ; } else if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str ) ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str ) ; } else { <S2SV_ModStart> low ) ; }",0
1053,"<S2SV_ModStart> ; struct l2cap_conf_rfc rfc = { } <S2SV_ModStart> sk ) ; BT_DBG ( ""sk <S2SV_blank> %p"", sk ) ; <S2SV_ModStart> = L2CAP_MODE_ERTM ; rfc. txwin_size = L2CAP_DEFAULT_TX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc.",0
1054,"<S2SV_ModStart> { do { size_t len = r ; if ( len < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } len -= ret ; ret = recv ( sock_fd, buf, len, MSG_WAITALL ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } }",0
1055,<S2SV_ModStart> -> chunksize = UINT64_MAX <S2SV_ModEnd> ; for (,1
1056,<S2SV_ModStart> u2_nal_ref_idc ) ; if ( ( ps_dec -> u2_nal_ref_idc_start < 1 ) || ( ( ps_dec -> u2_nal_ref_idc_end < 1 ) || ( ( ps_dec -> u2_nal_ref_idc_end < 1 ) || ( ( ps_dec -> u2_nal_ref_idc_end < 1 ) || ( u1_nal_ref_idc > ps_dec -> u2_nal_ref_idc_end ) ) ) ) { return ERROR_INCOMPLETE_FRAME ; },0
1057,<S2SV_ModStart> while ( pair!= NULL && * pair,0
1058,<S2SV_ModStart> } err = crypto_rng_alg ( tfm ) <S2SV_ModEnd> -> seed (,1
1059,<S2SV_ModStart> = uid ; <S2SV_ModEnd> new -> count <S2SV_ModStart> new -> count = 0 <S2SV_ModEnd> ; spin_lock_irq ( <S2SV_ModStart> } if ( <S2SV_ModEnd> ucounts -> count <S2SV_ModStart> ucounts -> count == INT_MAX ) ucounts = NULL ; else ucounts -> count += 1 <S2SV_ModEnd> ; spin_unlock_irq (,1
1060,"<S2SV_ModStart> ; if ( msg_sys. msg_namelen == 0 ) { datagrams = err ; goto out_put ; } <S2SV_ModEnd> if ( datagrams <S2SV_ModStart> datagrams ; } out_put : fput_light ( sock -> file, fput_needed ) ; <S2SV_ModStart> datagrams ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1061,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1062,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> ; for ( size_t len = 0 ; i < len - 8 * 32 ; i += 8 * 32 <S2SV_ModEnd> ) { ( <S2SV_ModStart> ] ; } for ( ; i < len ; i += 32 ) { ( void ) tab [ i ] ; },0
1063,"<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { if ( <S2SV_ModStart> ) ) { if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result ) ; err = ext4_jbd2_file_inode ( handle, inode, path [ depth ]. p_ext, inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize_bits, inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize_bits, inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize_bits, inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize_bits, inode -> i_blocksize - inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize_bits, inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize_bits, inode -> i_sb -> s",0
1064,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd>, int open_flags <S2SV_ModStart> = 0 ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) ) { rcu_read_lock ( ) ; deleg_cur = rcu_dereference ( nfsi -> deleg ) ; if ( deleg_cur == NULL ) goto no_delegation ; if ( <S2SV_ModStart> -> type & fmode )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, & deleg_cur <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd>, open_flags )",0
1065,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1066,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1067,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> oidc_scrub_headers ( request_rec,0
1068,"<S2SV_ModStart> int * out_rate_sum, int64_t * out_dist_sum ) { # if CONFIG_VP9_HIGHBITDEPTH int i ; # endif <S2SV_ModStart> int sse ; # if CONFIG_VP9_HIGHBITDEPTH for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblock_plane * const p = & x -> plane [ i ] ; const int bs = get_plane_block_size ( bs, pd ) ; ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; int64_t square_error ; int quantizer ; int num_pels_log2_lookup [ bs ] = pd -> dequant [ 1 ] >> 3 ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], & rate, & dist ) ; * out_rate_sum = ( int )",0
1069,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1070,"<S2SV_ModStart> return ; } if ( li + 3 > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> PDU <S2SV_blank> size <S2SV_blank> (%u)!"", li + 3, length ) ) ; return ; } if ( li + 4 > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", li + 4 ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; if ( li + 4 > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", li + 4 ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; while ( pptr < ndo -> n",0
1071,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( <S2SV_ModStart> } if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if (,0
1072,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> seg -> tree_probs <S2SV_ModEnd> ) ; }",0
1073,"<S2SV_ModStart> ; uint32_t backup_handle ; uint32_t backup_size <S2SV_ModStart> ret ) return ret ; backup_size = req -> base_size + 128 * req -> multisample_count ; if ( unlikely ( backup_size > req -> array_size * req -> array_size * req -> multisample_count ) ) backup_size = req -> array_size * req -> multisample_count ; if ( unlikely ( backup_handle > req -> base_size * req -> array_size * req -> multisample_count ) return - EINVAL ; backup_handle = req -> base_size * req -> multisample_count ; ret = ttm_read_lock ( & backup_size, true ) ; if ( unlikely ( ret!= 0 ) ) return - EBUSY ;",0
1074,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct desc_struct * get_desc ( <S2SV_ModStart> SEGMENT_LDT ) { struct ldt_struct * ldt ; <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> -> nr_entries ) { struct desc_struct * desc = & ldt -> entries [ sel ] ; mutex_unlock ( & current -> active_mm -> context. lock ) ; <S2SV_ModStart> ) ; return desc <S2SV_ModEnd> ; } # <S2SV_ModStart> size ) return NULL ; return ( struct desc_struct * ) ( gdt_desc. address + desc_base ) ;,0
1075,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
1076,"<S2SV_ModStart> bp ; struct ipv6_pinfo * np = inet6_sk ( sk ) ; struct <S2SV_ModStart> sctp_addr dst_saddr ; struct ipv6_txoptions * opt <S2SV_ModStart> ) ; } opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart>, fl6, opt <S2SV_ModEnd>, false ) <S2SV_ModStart>, fl6, opt <S2SV_ModEnd>, false )",0
1077,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1078,"<S2SV_ModStart> buf2 = smb_fdata ( ndo, buf, fmt + 1, maxbuf, unicodestr ) ; if ( buf2 == NULL ) return ( NULL ) ; buf = buf2 ; } return ( buf ) ; case '/' : if ( buf >= maxbuf ) return ( buf ) ; fmt = p + 1 ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; fmt = p + 1 ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; s [ p - fmt ] = '\\0' ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len",0
1079,"<S2SV_ModStart> ; if ( client -> priv -> protocol_timeout < 0 ) { g_debug ( ""GsmXSMPClient: <S2SV_blank> Closing <S2SV_blank> client <S2SV_blank> %s"", client -> priv -> description ) ; client -> priv -> protocol_timeout = 0 ; } else if ( client -> priv -> protocol_timeout > 0 ) { g_source_remove ( client -> priv -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; } <S2SV_ModEnd> * mask_ret |= <S2SV_ModStart> client ; * mask_ret |= SmsSaveYourselfRequestProcMask ; callbacks_ret -> save_yourself_phase2_request. callback = save_yourself_phase2_request_callback ; callbacks_ret -> save_yourself_phase2_request. manager_data = client ; * mask_ret |= SmsCloseConnectionProcMask ; callbacks_ret -> close_connection. manager_data = client ; * mask_ret |= SmsSetPropertiesProcMask ; callbacks_ret -> set_properties. manager_data = client ; * mask_ret |= SmsSetPropertiesProcMask ; callbacks_ret -> set_properties. manager_data = client ; * mask_ret |= Sms",0
1080,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> < ie && <S2SV_ModEnd> ND_TTEST ( *,1
1081,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK <S2SV_ModEnd> ; if (",0
1082,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1083,"<S2SV_ModStart> = ptr ; if ( assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> leaf <S2SV_blank> slot <S2SV_blank> %d\\n"", i ) ; edit -> dead_leaf = node -> slots [ i ] ; pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [replace]\\n"", __func__ ) ; } else if ( assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> leaf <S2SV_blank> slot <S2SV_blank> %d\\n"", i ) ; edit -> dead_leaf = node -> slots [ i ] ; pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [replace]\\n"", __func__ ) ; return true ; }",0
1084,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
1085,<S2SV_ModStart> ; # endif # ifdef MONO_HAS_SEMAPHORES mono_semaphore_init ( ) ; # endif,0
1086,"<S2SV_ModStart>, x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 n00, n10, n11, n21, n31, n01, n12, n13, n23, n33 ; WORD32 n00, n10, n20, n01, n12, n22, n32, n03, n13, n23, n33 ; n00 = x_0 + x_2 ; n01 = x_1 + x_3 ; n11 = x_1 - x_2 ; n12 = x_0 + x_3 ; n22 = x_1 - x_3 ; n03 = x_4 + x_6 ; n13 = x_5 + x_7 ; n13 = x_4 + x_6 ; n23 = x_5 + x_7 ; n23 = x_1 - x_3 ; n30 = x_0 - x_2 ; n02 = x_1 + x_3 ; n12 = x_2 + x_4 ; n13 = x_1 - x_3",0
1087,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
1088,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1089,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1090,"<S2SV_ModStart> + 1 ; size = r_config_get_i ( core -> config, ""esil.addr.size"" ) ; <S2SV_ModStart> + 1 ; size = r_config_get_i ( core -> config, ""esil.addr.size"" ) ; <S2SV_ModStart> + 1 ; size = r_config_get_i ( core -> config, ""esil.addr.size"" ) ; <S2SV_ModStart> + 1 ; size = r_config_get_i ( core -> config, ""esil.addr.size"" ) ; <S2SV_ModStart> + 1 ; size = r_config_get_i ( core -> config, ""esil.addr.size"" ) ; <S2SV_ModStart> + 1 ; size = r_config_get_i ( core -> config, ""esil.addr.size"" ) ; <S2SV_ModStart> + 1 ; size = r_config_get_i ( core -> config, ""esil.addr.size"" ) ;",0
1091,"<S2SV_ModStart>, frames ; int width, height ; int target_width, target_height ; if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } if ( argc < 5 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ;",0
1092,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 head, tail ; head <S2SV_ModEnd> = readw ( <S2SV_ModStart> + JQS_wHead ) ; tail = readw ( chip -> DSPQ + JQS_wTail ) ; while ( head!= tail ) { u16 size ; size = <S2SV_ModEnd> readw ( chip <S2SV_ModStart> + JQS_wSize ) ; if ( size > chip -> DSPQ + JQS_wSize ) size = chip -> DSPQ + JQS_wSize ; if ( size > chip -> DSPQ + JQS_wSize ) size = chip -> DSPQ + JQS_wSize ; snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * size ) ) ; snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * size ) ) ; snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * size ) ) ; }",0
1093,<S2SV_ModStart> * opcode_desc ; if ( len < 2 ) { return NULL ; },1
1094,<S2SV_ModStart> acpi_status status ; <S2SV_ModEnd> # ifdef <S2SV_ModStart> * prev ; <S2SV_ModEnd> next = acpi_gbl_module_code_list <S2SV_ModStart> ) ; } <S2SV_ModEnd> # endif acpi_ns_delete_namespace_subtree,0
1095,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
1096,"<S2SV_ModStart> ; # endif if ( strlen ( url_arg ) >= sizeof ( the_url ) ) { fprintf ( stderr, ""Malformed <S2SV_blank> MP4 <S2SV_blank> URL: <S2SV_blank> %s\\n"", url_arg ) ; exit ( 1 ) ; } <S2SV_ModStart> url_arg ) ; if ( strlen ( url_arg ) >= sizeof ( the_url ) ) { fprintf ( stderr, ""Malformed <S2SV_blank> MP4 <S2SV_blank> URL: <S2SV_blank> %s\\n"", url_arg ) ; exit ( 1 ) ; } <S2SV_ModStart> + 1 ; if ( strlen ( url_arg ) >= sizeof ( the_url ) ) { fprintf ( stderr, ""Malformed <S2SV_blank> MP4 <S2SV_blank> URL: <S2SV_blank> %s\\n"", url_arg ) ; exit ( 1 ) ; } <S2SV_ModStart> url_arg ) ; if ( strlen ( url_arg ) >= sizeof ( the_url ) ) { fprintf ( stderr, ""Malformed <S2SV_blank> MP4 <S2SV_blank> URL: <S2SV_blank> %s\\n"", url_arg ) ; exit ( 1 ) ; } <S2SV_ModStart> + 1 ; if ( strlen ( url_arg ) >= sizeof ( the_url ) ) { fprintf ( stderr, ""Malformed <S2SV_blank> MP4 <S2SV_blank> URL: <S2SV_blank> %s\\n"", url",0
1097,"<S2SV_ModStart>, result ; if ( num_fields < 0 ) { return 0 ; } <S2SV_ModEnd> _Py_IDENTIFIER ( _attributes",0
1098,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data <S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",0
1099,"<S2SV_ModStart> = VPX_CODEC_OK ; <S2SV_ModEnd> vpx_codec_alg_priv * priv <S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; vpx_codec_enc_cfg_t * <S2SV_ModStart> vpx_codec_alg_priv ) ) ; if (! ctx -> priv ) { return VPX_CODEC_MEM_ERROR ; } priv = ( vpx_codec_alg_priv * ) calloc ( 1, sizeof ( * priv <S2SV_ModEnd> ) ) ; <S2SV_ModStart> enc = & priv <S2SV_ModEnd> -> base ; <S2SV_ModStart> } cfg = ( vpx_codec_enc_cfg_t * ) <S2SV_ModStart> i ++ ) ; priv -> <S2SV_ModEnd> vp8_cfg = extracfg_map <S2SV_ModStart> i ++ ) ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h * priv -> cfg. g_w ; priv -> vp8_cfg. pkt_list = & priv -> pkt_list. head ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h ; priv -> cx_data_",0
1100,"<S2SV_ModStart> error ) { if ( bp ) { xfs_da_shrink_inode ( args, 0, bp ) ; xfs_idata_realloc ( dp, - size, XFS_ATTR_FORK ) ; memcpy ( ifp -> if_u1. if_data, tmpbuffer, size ) ; goto out ; } <S2SV_ModEnd> xfs_da_shrink_inode ( args <S2SV_ModStart>, 0, bp ) ; xfs_idata_realloc ( dp, - size, XFS_ATTR_FORK ) ; memcpy ( ifp -> if_u1. if_data, tmpbuffer, size ) ; goto out ; } xfs_da_shrink_inode ( args, 0, bp ) ; <S2SV_ModEnd> xfs_da_shrink_inode ( args <S2SV_ModStart>, 0, bp ) ; <S2SV_ModEnd> xfs_idata_realloc ( dp",0
1101,"<S2SV_ModStart> ret ) return ret ; cnt_x = pixel -> lookup [ x ] ; if ( value >= cnt_x ) cumfr += cnt_x ; else break ; x ++ ; } if ( ( ret = s -> decode ( gb, rc, cumfr, cnt_c, totfr ) ) < 0 ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = value ; totfr += step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 256 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; pixel -> lookup [ i ] = sum ; } for ( i = 0 ; i < 256 ; i ++ ) { unsigned sum = 0 ; unsigned",0
1102,<S2SV_ModStart> timer ) ; spin_lock ( & timeri -> timer -> lock ) ; <S2SV_ModStart> slave_active_lock ) ; mutex_unlock ( & timeri -> timer -> lock ) ; <S2SV_ModStart> timer = NULL ; spin_unlock ( & timeri -> timer -> lock ) ;,0
1103,"<S2SV_ModStart> return err ; if (! <S2SV_ModEnd> attrs [ TIPC_NLA_SOCK <S2SV_ModStart> attrs [ TIPC_NLA_SOCK <S2SV_ModEnd> ] ) return <S2SV_ModStart> - EINVAL ; err = nla_parse_nested ( sock, TIPC_NLA_SOCK_MAX, attrs [ TIPC_NLA_SOCK ], tipc_nl_sock_policy ) ; if ( err ) return err ; if (! sock <S2SV_ModEnd> [ TIPC_NLA_SOCK_REF ] <S2SV_ModStart> [ TIPC_NLA_SOCK_REF ] <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; tsk_portid = nla_get_u32 ( sock [ TIPC_NLA_SOCK_REF ] ) ; } if ( done ) return 0 ; tsk = tipc_sk_lookup ( net, tsk_portid ) ; if (! tsk ) return - EINVAL ;",1
1104,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
1105,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1106,<S2SV_ModStart> ) buffer ; if ( total_len < <S2SV_ModEnd> cap -> bLength <S2SV_ModStart> cap -> bLength ) { dev -> bos -> desc -> bNumDeviceCaps = i ; break ; } length = cap -> bLength <S2SV_ModEnd> ; total_len -=,0
1107,<S2SV_ModStart> task = current <S2SV_ModEnd> ; if (,1
1108,<S2SV_ModStart> -> i_lenEAttr ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > inode -> i_sb -> s_blocksize ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > inode -> i_sb -> s_blocksize ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > inode -> i_sb -> s_blocksize ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > inode -> i_sb -> s_blocksize ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > inode -> i_sb -> s_blocksize ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > inode -> i_sb -> s_blocksize ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > inode,0
1109,"<S2SV_ModStart> data ) { uint16_t status ; <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
1110,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { <S2SV_ModEnd> int n =,0
1111,<S2SV_ModStart> sk_forward_alloc ) ; rcu_read_lock ( ) ; <S2SV_ModStart> inet -> opt ) ; rcu_read_unlock (,0
1112,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
1113,<S2SV_ModStart>! saw_digit ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\r' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\n' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart> ; trunc : * endp = bp ; <S2SV_ModStart> ; invalid : * endp = bp ;,1
1114,<S2SV_ModStart> ; args -> rmtvaluelen = be32_to_cpu ( name_rmt -> valuelen ) ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args -> rmtvaluelen = be32_to_cpu ( name_rmt -> rmtblkno <S2SV_ModEnd> ) ; return,0
1115,"<S2SV_ModStart> ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLinuxTest"", IPV6DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakWindowsTest"", IPV6DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakFirstTest"", IPV6DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLastTest"", IPV6DefragSturgesNovakLastTest ) ;",0
1116,"<S2SV_ModStart> ; if ( object_length > 0 && object_length + add_v1_record > 0 && object_data [ 0 ]!= COOLKEY_V1_OBJECT ) { new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( object_length > 0 && add_v1_record ) { new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data [ add_v1_record ]!= COOLKEY_V1_OBJECT ) { new_object. data [ add_v1_record ] = COOLKEY_V1_OBJECT ; new_object. length ++ ; } memcpy ( & new_object. data [ add_v1_record ], object_data, object_length ) ; } r = coolkey_add_object_to_list ( & priv -> objects_list, & new_object ) ; if ( r!= SC_SUCCESS ) { free ( new_object. data ) ; new_object",0
1117,"<S2SV_ModStart> + i ; if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; }",0
1118,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1119,<S2SV_ModStart> u8 label_len ; <S2SV_ModEnd> GET8 ( label_len <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ;,1
1120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( cc % <S2SV_ModStart> * stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpAcc"", ""%s"", ""cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> tmp ) ; return 1 ;",1
1121,"<S2SV_ModStart> -> vm_ops ) <S2SV_ModEnd> return do_fault ( <S2SV_ModStart>, pte, pmd, flags, entry ) ; <S2SV_ModEnd> return do_anonymous_page ( <S2SV_ModStart>, address, pte, pmd, <S2SV_ModEnd> flags ) ;",1
1122,"<S2SV_ModStart> s ) { size_t len = strlen ( s ) + 1 ; <S2SV_ModStart> = pool_alloc ( len ) ; memcpy <S2SV_ModEnd> ( r, <S2SV_ModStart> r, s, len",1
1123,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1124,<S2SV_ModStart> ; } } if ( new_map. nr_extents == UINT_MAX / sizeof ( new_map. extent [ 0 ] ) || ( new_map. nr_extents == UINT_MAX / sizeof ( new_map. extent [ 0 ] ) - 1 ) || ( new_map. nr_extents == UINT_MAX / sizeof ( new_map. extent [ 0 ] ) - 1 ) % sizeof ( new_map. extent [ 0 ] )!= extent -> lower_first || new_map -> nr_extents == UINT_MAX / sizeof ( new_map. extent [ 0 ] ) || ( new_map. nr_extents == UINT_MAX / sizeof ( new_map. extent [ 0 ] ) - 1 ) || ( new_map. nr_extents == UINT_MAX / sizeof ( new_map. extent [ 0 ] ) - 1 ) % sizeof ( new_map. extent [ 0 ] ) % sizeof ( new_map. extent [ 0 ] )!= extent -> lower_first || new_map -> nr_extents > UINT_MAX / sizeof ( new_map. extent [ 0 ] ),0
1125,"<S2SV_ModStart> ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> length <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } if ( cu -> dies [ cu -> length ]. tag == 0 || cu -> dies [ cu -> length ]. tag == 0 || cu -> dies [ cu -> length ]. tag == 0 || cu -> dies [ cu -> length ]. tag == 0 || cu -> dies [ cu -> length ]. tag == 0 || cu -> dies [ cu -> length ]. tag == 0 || cu -> dies [ cu -> length ]. tag == 0 || cu -> dies [ cu -> length ]. tag == 0 || cu -> dies [ cu -> length ]. tag == 0 || cu -> dies [ cu -> length ]. tag == 0 || cu -> dies [ cu -> length ]. tag == 0 || cu -> dies [ cu -> length ]. tag == 0 || cu -> dies [ cu -> length ]. tag == 0 || cu -> dies [ cu -> length ]. tag == 0 || cu -> dies [ cu -> length ]. tag == 0 || cu -> dies [ cu -> length ]. tag == 0 || cu -> dies [ cu -> length ]. tag == 0",0
1126,"<S2SV_ModStart> NULL ; } if ( p_sys -> p_format -> interlaced ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"",! p_sys -> b_auto_field_coding ) ; } else if ( p_sys -> p_format -> interlaced ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"",! p_sys -> b_auto_field_coding ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"", p_sys -> b_auto_field_coding ) ; } else if ( p_sys -> p_format -> interlaced ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"",! p_sys -> b_auto_field_coding ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding",0
1127,"<S2SV_ModStart> bfname ) { if (! mp_path_exists ( entry ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", entry ) ; } else { mp_tarray_append ( mf, mf -> names, mf -> nr_of_files, entry ) ; }",0
1128,"<S2SV_ModStart> ) ) ; if ( advance < len ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", advance - len ) ) ; goto trunc ; } <S2SV_ModStart> ip6_plen ) ; if ( advance < len ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", advance - len ) ) ; goto trunc ; } <S2SV_ModStart> ip6_plen ) ; if ( advance < len ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", advance - len ) ) ; goto trunc ; } <S2SV_ModStart> case IPPROTO_ROUTING : if ( advance < len ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", advance - len ) ) ; goto trunc ; } <S2SV_ModStart> case IPPROTO_ROUTING : if ( advance < len ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", advance - len ) ) ; goto trunc ; } <S2SV_ModStart> case IP",0
1129,"<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> ]. len ) ; CHECKINT16 ( idx, len ) ; a -> type = GETINT16 ( buf + idx ) ; idx += 2 ; CHECKINT16 ( idx, len ) ; a -> name = GETINT16 ( buf + idx ) ; idx += 2 ; if ( a -> name & GUID_EXISTS_FLAG ) { a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ; idx += sizeof ( GUID ) ; } } else { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. data = CHECKED_XMALLOC ( unsigned char, a -> names [ i ]. len ) ; for ( j = 0 ; j < a -> names [ i ]. len ; j ++ ) a -> names [ i ]. data [ j ] =",0
1130,<S2SV_ModStart> -> i_lenEAttr ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > inode -> i_sb -> s_blocksize ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > inode -> i_sb -> s_blocksize ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > inode -> i_sb -> s_blocksize ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > inode -> i_sb -> s_blocksize ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > inode -> i_sb -> s_blocksize ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > inode -> i_sb -> s_blocksize ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > inode,0
1131,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1132,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
1133,"<S2SV_ModStart> ( ) ; strcpy ( t1_buf_array, t1_line_array ) ; t1_line_ptr = eol ( t1_line_array ) ; } else",0
1134,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ) ; if ( ctx -> frame_parallel_decode ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; VPxWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 <S2SV_ModEnd> ; vp9_get_reference_dec ( <S2SV_ModStart> * fb ; frame_worker_data -> idx = frame_worker_data -> idx <S2SV_ModEnd> ; yuvconfig2image (",0
1135,"<S2SV_ModStart> ctxt ) ; if (! ( em_syscall_is_enabled ( ctxt ) ) ) return emulate_ud ( ctxt ) ; <S2SV_ModStart>, & ss ) ; if (! ( efer & EFER_SCE ) ) return emulate_ud ( ctxt",1
1136,"<S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> "" <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOS.\\n"", marker ) ; return AVERROR_INVALIDDATA ; } if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> "" ""marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOI.\\n"", marker ) ; return AVERROR_INVALIDDATA ; }",0
1137,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) expr1 = ast_for_testlist ( c, ch ) ; else expr1 = ast_for_expr ( c, ch ) ; if (! expr1 ) return NULL ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; switch ( expr1 -> kind ) { case Name_kind : case Attribute_kind : case Subscript_kind : expr2 = ast_for_expr ( c, ch ) ; if (! expr2 ) return NULL ; break ; default : ast_error ( c, ch, ""illegal <S2SV_blank> expression <S2SV_blank> for <S2SV_blank> augmented <S2SV_blank> assignment"" ) ; return NULL ; } ch = CHILD ( n, 2 ) ; if ( TYPE ( ch ) == testlist ) expr2 = ast_for_testlist ( c, ch ) ; else expr2 = ast_for_expr ( c, ch ) ; if (! expr2 ) return NULL ; switch ( expr1 -> kind ) { case Name_kind : case Attribute_kind : expr2 = ast_for_expr ( c, ch ) ; break ; default : ast_error (",0
1138,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y, int mc_avg_y_stride, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * running_avg_y, int avg_y_stride, <S2SV_ModEnd> int r, <S2SV_ModStart> int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6, 7, 8, 15 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ; } else { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ; } } for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { if ( mc_running_avg_y [ c ] > 255 ) running_avg_y [ c ]",0
1139,"<S2SV_ModStart> ) ) { if ( ( sockPtr -> flags & NS_CONN_TOO_BIG ) == 0 ) { Ns_Log ( Ns_LogRequestDebug, ""request <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> (%d <S2SV_blank> bytes)"", reqPtr -> avail ) ; } else if ( ( sockPtr -> flags & NS_CONN_ENTITYTOOLARGE ) == 0 ) { Ns_Log ( Ns_LogRequestDebug, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> (%d <S2SV_blank> bytes)"", reqPtr -> avail ) ; } else if ( ( sockPtr -> flags & NS_CONN_TOO_BIG )!= 0 ) { Ns_Log ( Ns_LogRequestDebug, ""request <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> (%d <S2SV_blank> bytes)"", reqPtr -> avail ) ; } else if ( ( sockPtr -> flags & NS_CONN_TOO_BIG )!= 0 ) { Ns_Log ( Ns_LogRequestDebug, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> (%d <S2SV_blank> bytes)"", reqPtr -> avail ) ) ; }",0
1140,<S2SV_ModStart> ret = 0 ; if ( xtregs -> cp0 & 1 ) return - EINVAL,0
1141,<S2SV_ModStart> size ) ; message -> interface = queueItem -> interface ; message ->,0
1142,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> if ( xop <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) { <S2SV_ModStart> -> dst_dev ; } else { struct se_device * <S2SV_ModStart> src_dev ; } pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ;",0
1143,"<S2SV_ModStart> ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close_sock ; } val = 1 ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_RECVHOPLIMIT, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_RECVHOPLIMIT,.""",1
1144,"<S2SV_ModStart> int error ; struct mb2_cache * ext2_mb_cache = EXT2_SB ( sb ) -> s_mb_cache ; <S2SV_ModStart> get_bh ( new_bh ) ; ext2_mb_cache_insert ( ext2_mb_cache, new_bh, header -> h_name_len, new_bh -> b_blocknr <S2SV_ModEnd> ) ; } <S2SV_ModStart> new_bh ) ; ext2_mb_cache_insert ( ext2_mb_cache, header -> h_name_len, new_bh -> b_blocknr <S2SV_ModEnd> ) ; }",0
1145,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1146,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> (! vp9_set_active_map <S2SV_ModEnd> ( ctx ->",0
1147,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; inode -> i_ctime = CURRENT_TIME ; mark_inode_dirty ( inode ) ; } break ; case ACL_TYPE_DEFAULT : ea_name = XATTR_NAME_POSIX_ACL_DEFAULT ; break ; default : return - EINVAL ; } if ( acl ) { size = posix_acl_xattr_size ( acl -> a_count ) ; value = kmalloc ( size, GFP_KERNEL ) ; if (! value ) return - ENOMEM ; rc = posix_acl_to_xattr ( & init_user_ns, acl, value, size <S2SV_ModStart> < 0 ) <S2SV_ModEnd> goto out ;",1
1148,"<S2SV_ModStart> ""UnableToReadImageData"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1149,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1150,<S2SV_ModStart> 3 * len + 4,0
1151,<S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { points [ i ]. x = <S2SV_ModStart> var ) ; } <S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { points [ i ]. y = <S2SV_ModStart> var ) ; } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. y = Z_LVAL ( lval,0
1152,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1153,"<S2SV_ModStart> unsigned char * ) AcquireQuantumMemory ( imsx * imsy, 1 ) ; if ( imbuf == NULL ) { return ( MagickFalse ) ; } <S2SV_ModStart> ) Reset ( dmbuf <S2SV_ModEnd> ) ; for <S2SV_ModStart> n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( n = 0 ; n < 16 ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( i = 0 ; i < 24 ; i ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( i = 0 ; i < 24 ; i ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( i = 0 ; i < 24 ; i ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( i = 0 ; i < 24 ; i ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( i = 0",0
1154,"<S2SV_ModStart> ( ) ; strcpy ( t1_buf_array, t1_line_array ) ; t1_line_ptr = eol ( t1_line_array ) ; } else",0
1155,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 <S2SV_ModEnd> ; return vp9_copy_reference_dec <S2SV_ModStart> vp9_copy_reference_dec ( ctx <S2SV_ModEnd> -> pbi, <S2SV_ModStart> VP9_REFFRAME ) frame_worker_data <S2SV_ModEnd> ) ; }",0
1156,"<S2SV_ModStart>. path ; return Curl_urldecode <S2SV_ModEnd> ( data, <S2SV_ModStart>, 0, & <S2SV_ModEnd> pop3c -> mailbox <S2SV_ModStart> pop3c -> mailbox, NULL, TRUE ) <S2SV_ModEnd> ; } <S2SV_null>",1
1157,<S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ;,1
1158,"<S2SV_ModStart> gb ) ; if ( sh -> nal_unit_type == HEVC_NAL_CRA_NUT && s -> last_eos!= 1 ) { av_log ( s -> avctx, AV_LOG_ERROR, ""NAL_CRA <S2SV_blank> changed <S2SV_blank> between <S2SV_blank> slices.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> gb ) ; if ( sh -> nal_unit_type == HEVC_NAL_CRA_NUT && s -> last_eos!= 1 ) { av_log ( s -> avctx, AV_LOG_ERROR, ""NAL_CRA <S2SV_blank> changed <S2SV_blank> between <S2SV_blank> slices.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> = 1 ; if ( sh -> nal_unit_type == HEVC_NAL_CRA_NUT && s -> last_eos!= 1 ) { av_log ( s -> avctx, AV_LOG_ERROR, ""NAL_CRA <S2SV_blank> changed <S2SV_blank> between <S2SV_blank> slices.\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
1159,<S2SV_ModStart> u2_cur_slice_num ++ ; <S2SV_ModEnd> u1_num_mbs ++ ; <S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbsNby2 ++ ; <S2SV_ModEnd> ps_dec -> u2_total_mbs_coded <S2SV_ModStart> u2_cur_slice_num ++ ; <S2SV_ModEnd> ps_dec -> u2_total_mbs_coded <S2SV_ModStart> u2_cur_slice_num ++ ; if ( ps_dec -> u2_total_mbs_coded < u1_num_mbs ) { ps_dec -> u2_total_mbs_coded = u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; } <S2SV_ModStart> u2_cur_slice_num ++ ; if ( ps_dec -> u2_total_mbs_coded < u1_num_mbs ) { ps_dec -> u2_total_mbs_coded = u1_num_mbs ; },0
1160,"<S2SV_ModStart>, u4_y_offset ; WORD8 * pu1_out_p ; WORD8 * pu1_pred ; WORD32 u4_pred_strd ; IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; <S2SV_ModStart> B_PIC ) { if ( ps_dec -> u2_mb_x + ps_dec -> u2_picture_width > ps_dec -> u2_frame_width ) { break ; } <S2SV_ModStart> u2_pic_type == B_PIC ) { if ( ps_dec -> u2_mb_x + ps_dec -> u2_picture_width > ps_dec -> u2_frame_width ) { break ; } <S2SV_ModStart> ps_dec ) ; } <S2SV_ModStart> == B_PIC ) { if ( ps_dec -> u2_mb_x + ps_dec -> u2_picture_width > ps_dec -> u2_frame_width ) { break ; } <S2SV_ModStart> u2_mb_y + ps_dec -> u2_picture_width > ps_dec -> u2_frame_width ) { break ;",0
1161,"<S2SV_ModStart> VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG_EXT * const cfg = cm -> ref_frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! cfg ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Invalid <S2SV_blank> reference <S2SV_blank> frame"" ) ; } else { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Invalid <S2SV_blank> reference <S2SV_blank> frame"" ) ; } } else { const YV12_BUFFER_CONFIG * const cfg = cm -> ref_frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } }",0
1162,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1163,"<S2SV_ModStart> -> mbmi ; const int num_4x4_w = num_4x4_w ; const int num_4x4_h = num_4x4_h ; const int i ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y",0
1164,<S2SV_ModStart> -> mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor <S2SV_ModEnd> ; if (,1
1165,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
1166,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> fmt, 1 <S2SV_ModStart> return getnum ( <S2SV_ModEnd> fmt, sizeof <S2SV_ModStart> sizeof ( int <S2SV_ModEnd> ) ) ;",0
1167,"<S2SV_ModStart> nrow ) { if ( _TIFFGetFieldDefaulted ( tif, TIFFTAG_ROWSPERSTRIP, & rowsperstrip ) < 0 ) { TIFFErrorExt ( tif, ""gtStripSeparate"", ""%s"", ""(row+img->row_offset) <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds"" ) ; return ( 0 ) ; } rowstoread = ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + rowstoread > h? h - row : rowstoread ) ; buf = ( unsigned char * ) _TIFFReadEncodedStripAndAllocBuffer ( tif, bufsize, ""gtStripSeparate"" ) ; if ( buf == NULL ) { TIFFErrorExt ( tif, ""gtStripSeparate"", ""%s"", ""(row+img->row_offset) <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds"" ) ; return ( 0 ) ; }",0
1168,"<S2SV_ModStart> ; } } if ( TYPE ( n )!= TYPE_COMMENT ) { Py_FatalError ( ""Block <S2SV_blank> type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s <S2SV_blank> %d"", TYPE ( CHILD ( n, 0 ) ) ) ; Py_FatalError ( ""Block <S2SV_blank> type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s <S2SV_blank> %d"", TYPE ( CHILD ( n, 1 ) ) ; Py_FatalError ( ""Block <S2SV_blank> type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n, 2 ) ) ; } if ( l == 0 ) { Py_FatalError ( ""Block <S2SV_blank> type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s <S2SV_blank> %s"", TYPE ( CHILD ( n, 0 ) ) ; Py_FatalError ( ""Block <S2SV_blank> type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n, 1 ) ) ) ; Py_FatalError ( ""Block <S2SV_blank> type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n, 2 ) ) ; Py_FatalError ( ""Block <S2SV_blank> type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n, 2 ) ) ) ; Py_FatalError ( buf ) ;",0
1169,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1170,<S2SV_ModStart> ( upid == INT_MIN ) return - ESRCH ; if ( upid ==,1
1171,"<S2SV_ModStart> siocb -> scm, false",1
1172,<S2SV_ModStart> ( num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) ; else if ( num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) ; else,0
1173,"<S2SV_ModStart>, plane ) * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? 2 : 1 ) ; const int w = vpx_img_plane_width ( img, plane ) ; const int h = vpx_img_plane_height ( img, plane ) * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? 2 : 1 ) ; if ( <S2SV_ModStart> ( buf, 1, w, file )!= w || ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) && ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) && ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) && ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) && ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )",0
1174,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> + 2 ) { <S2SV_ModStart> avp -> length ) ; return - 1 ; } if ( <S2SV_ModEnd> avp -> length <S2SV_ModStart> avp -> length > L2TP_AVP_MAX_AVP_LEN ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; if ( attr_len <= MD5_DIGEST_LENGTH ) { memcpy ( avp -> val, p1, MD5_DIGEST_LENGTH ) ; orig_attr_len = ntohs ( * ( uint16_t * ) p1 ) ; if ( orig_attr_len > attr_len - 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu)",0
1175,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; int r = 0 ; if <S2SV_ModEnd> ( lc -> <S2SV_ModStart> ( lc -> start || ti -> len!= i_size_read ( dev -> bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL, cmd ) ; return r? : __blkdev_driver_ioctl ( <S2SV_ModStart> -> bdev, <S2SV_ModEnd> dev -> mode",1
1176,<S2SV_ModStart> -> tag_len = CHACHA_U8TOU32 ( ( unsigned char * ) ptr ) ; actx -> aad [ 0 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 2 ) ; actx -> aad [ 1 ] = actx -> key. counter [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 4 ) ; actx -> aad [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 8 ) ; actx -> aad [ 3 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 4 ) ; actx -> aad [ 4 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 8 ) ; actx -> aad [ 5 ] = actx -> key. counter [ 5 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx -> aad [ 6 ] = actx -> key. counter [ 7 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr +,0
1177,"<S2SV_ModStart> alg ) { if (! capable ( CAP_SYS_MODULE ) ) { <S2SV_ModStart> name ) ; } else { request_module ( ""crypto-%s"", name ) ; } <S2SV_ModEnd> alg = crypto_alg_lookup <S2SV_ModStart> mask & CRYPTO_ALG_NEED_FALLBACK <S2SV_ModEnd> ) ) request_module <S2SV_ModStart> ) ) request_module ( ""crypto-%s-all"" <S2SV_ModEnd>, name )",0
1178,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1179,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1180,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1181,"<S2SV_ModStart> sock, sk ) ; memset ( sa, 0, sizeof ( * sa )",1
1182,"<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { strncpy <S2SV_ModEnd> ( pass_salt, <S2SV_ModStart>. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } } else if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin,",0
1183,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC | NTLMSSP_NEGOTIATE_SEAL <S2SV_ModStart> -> sign ) <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,1
1184,<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> goto err_close_conn ; } mutt_socket_empty ( adata -> conn ) ;,0
1185,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1186,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
1187,"<S2SV_ModStart> -> head <= 0 || ( unsigned int ) ( ( g -> sect << 2 ) >> FD_SECTBASE ( g ) ) > ( unsigned int ) ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) ) || ( g -> track & FD_TRACKS ) <= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 ) return - EINVAL ; if ( ( cmd == FDDEFPRM ) ) { if ( poll_drive ( true, FD_RAW_NEED_DISK ) == - EINTR ) return - EINTR ; } current_type [ drive ] = & floppy_type [ drive ] ; floppy_sizes [ drive ] = floppy_sizes [ drive + 0x80 ] ; process_fd_request ( ) ; for ( cnt = 0 ; cnt < N_DRIVE ; cnt ++ ) { if (! bdev || ITYPE ( drive_state [ cnt ]. fd_device )!= type ) continue ; floppy_sizes",0
1188,"<S2SV_ModStart> } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; }",0
1189,"<S2SV_ModStart>, & rlen, 0",1
1190,"<S2SV_ModStart> * slavename ; int len <S2SV_ModEnd> ; if ( <S2SV_ModStart> } # endif strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> 82 ) ; len = <S2SV_ModEnd> user -> password <S2SV_ModStart> user -> password ; memcpy ( md5data + 1 + len <S2SV_ModEnd>, curconn -> <S2SV_ModStart> curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, len + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; if ( curconn -> state == STATE_ACTIVE ) { abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; return ; } user = find_user ( curconn -> username ) ; if (! user ) { syslog ( LOG_NOTICE, _ ( ""(%d) <S2SV_blank> Invalid <S2SV_blank> login <S2SV_blank> by <S2SV_blank> %s."" ), curconn -> seskey ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\",0
1191,"<S2SV_ModStart> mntent, path, rootfs -> mount",1
1192,"<S2SV_ModStart> ; if (! PyUnicode_CompareWithASCIIString ( name, ""__debug__"" ) ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( <S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( PyUnicode_CompareWithASCIIString <S2SV_ModStart> * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if (! PyUnicode_CompareWithASCIIString ( name, * p ) ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if (! PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1193,<S2SV_ModStart> ; for ( j = cur_page ; j < page_limit ; j ++ ) { if (! pages [ j ] ) break ; put_page ( pages [ j ] ) ; },0
1194,<S2SV_ModStart> -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; } <S2SV_ModEnd> actualnumcolors = hdr,1
1195,"<S2SV_ModStart> state. path <S2SV_ModEnd> ; char localhost <S2SV_ModStart> ""localhost"" ; } result = Curl_urldecode ( conn -> data, path, 0, & <S2SV_ModStart> smtpc -> domain, NULL, TRUE ) ; if ( result ) return result <S2SV_ModEnd> ; state (",1
1196,"<S2SV_ModStart> ( str, ""ID:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len )",0
1197,<S2SV_ModStart> [ i ] && j < sizeof ( buf ),0
1198,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1199,<S2SV_ModStart> + RDS_CONG_MAP_BYTES ; rm -> data [ off / sizeof ( struct rds_header ) ]. h_len = cpu_to_be32 ( be32_to_cpu ( rm -> data [ off ]. h_len ) ) ; <S2SV_ModStart> 0 ) ; rm -> data [ off / sizeof ( struct rds_header ) ]. h_len = cpu_to_be32 ( rm -> data [ off ]. h_len ) ; <S2SV_ModStart> += sizeof ( struct rds_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1200,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1201,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1202,"<S2SV_ModStart> -> prgvolfirst && ( JAS_CAST ( int, pchg -> lyrnoend - pi -> lyrno ) < JAS_CAST ( int, pchg -> rlvlnostart ) ) { if ( ( JAS_CAST ( int, pchg -> lyrnoend - pi -> lyrno ) < JAS_CAST ( int, pchg -> rlvlnostart ) ) { continue ; } if ( ( JAS_CAST ( int, pchg -> picomp -> prclyrnos ) - pi -> prclyrno ) < JAS_CAST ( int, pchg -> prclyrnos ) ) { if ( ( JAS_CAST ( int, pchg -> lyrnoend - pi -> lyrno ) < JAS_CAST ( int, pchg -> rlvlnostart ) ) { continue ; } if ( ( JAS_CAST ( int, pchg -> picomp -> prclyrnos ) - pi -> prclyrno ) < JAS_CAST ( int, pchg -> prclyrnos ) ) { continue ; }",0
1203,"<S2SV_ModStart> { r_cons_printf ( ""\\n"" ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""\\n\\nFS <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""\\n\\nFS <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_SET ( mode ) ) { r_flag_space_set ( r -> flags, R_FLAGS_FS_SYMBOLS ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""\\n\\nFS <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""\\n\\nFS <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""\\n\\nFS <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""\\n\\nFS <S2SV_blank> symbols\\n"" ) ; } else if ( printHere ) { r_cons_printf",0
1204,"<S2SV_ModStart>, rqstp, res <S2SV_ModEnd> ) ; out",1
1205,<S2SV_ModStart> mntent ) { struct mnt * mnt = real_mount ( mntent -> mnt_dir -> mnt_sb ) ; return mnt -> mnt_sb -> s_stack_depth > 0? mnt -> mnt_sb -> s_stack_depth : 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1206,"<S2SV_ModStart> iv ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1207,"<S2SV_ModStart> ) ) { * status = ""EVIDENCE_TICKET_MISMATCH"" ; <S2SV_ModStart> ) ) { * status = ""EVIDENCE_TICKET_MISMATCH"" ;",0
1208,<S2SV_ModStart> thread -> tp_value [ 0 ] <S2SV_ModStart> childregs -> ARM_r3 ; thread -> tp_value [ 1 ] = get_tpuser ( ),1
1209,"<S2SV_ModStart> bufsize ) { char * new_buf ; size_t new_bufsize <S2SV_ModEnd> ; JAS_DBGLOG ( <S2SV_ModStart> ; if ( bufsize < 0 ) { jas_deprecated ( ""negative <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> for <S2SV_blank> jas_stream_memopen"" ) ; } if ( buf && bufsize <= 0 ) { jas_deprecated ( ""negative <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> for <S2SV_blank> jas_stream_memopen"" ) ; } if ( bufsize <= 0 ) { jas_deprecated ( ""negative <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> for <S2SV_blank> jas_stream_memopen"" ) ; } if ( buf && bufsize < 0 ) { jas_deprecated ( ""negative <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> for <S2SV_blank> jas_stream_memopen"" ) ; } if ( buf && bufsize <= 0 ) { jas_deprecated ( ""negative <S2SV_blank> buffer <S2SV_blank> for <S2SV_blank> jas_stream_memopen"" ) ; } if ( buf && bufsize <= 0 ) { jas_deprecated ( ""negative <S2SV_blank> buffer <S2SV_blank> for <S2SV_blank> jas_stream_memopen"" ) ; } if ( buf && bufsize > 0 ) { jas_deprecated ( ""negative <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> for",0
1210,"<S2SV_ModStart> sshbuf * b = NULL <S2SV_ModStart> char * pkalg = NULL <S2SV_ModStart> u_char * pkblob = NULL <S2SV_ModStart>, * sig = NULL <S2SV_ModStart> ; if ( <S2SV_ModEnd> authctxt -> valid <S2SV_ModStart> { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_string ( ssh, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & blen ) )!= 0 || ( r = sshpkt_get_string ( ssh, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & blen ) )!= 0 || ( r = sshpkt_get_",0
1211,"<S2SV_ModStart> ; uint32_t bcount ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } <S2SV_ModStart> format_chunk ) { if ( bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } <S2SV_ModStart> ; if ( bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
1212,<S2SV_ModStart> == READ ) { mutex_lock ( & inode -> i_mmap_sem ) ; <S2SV_ModStart> = ocfs2_dio_get_block ; mutex_unlock ( & inode -> i_mmap_sem ) ; },0
1213,"<S2SV_ModStart> mech ) ) { _sx_nad_write ( s, _sx_sasl_failure ( s, _sx_sasl_failure ( s, _sx_sasl_failure ( s, _sx_sasl_failure ( s, _sasl_err_INTERNAL_SERVER_ERROR, ""client <S2SV_blank> requested <S2SV_blank> mechanism <S2SV_blank> (%s) <S2SV_blank> that <S2SV_blank> we <S2SV_blank> didn\'t <S2SV_blank> offer"", NULL ), 0 ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ) ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_",0
1214,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1215,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteFujiEntry ) ) ;",1
1216,"<S2SV_ModStart> failed_mount3 ; } # ifdef CONFIG_EXT2_FS_XATTR sbi -> s_mb_cache = ext2_xattr_create_cache ( ) ; if (! sbi -> s_mb_cache ) { ext2_msg ( sb, KERN_ERR, ""Failed <S2SV_blank> to <S2SV_blank> create <S2SV_blank> an <S2SV_blank> mb_cache"" ) ; goto failed_mount3 ; } # endif <S2SV_ModStart> ; failed_mount3 : if ( sbi -> s_mb_cache ) ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ;",1
1217,<S2SV_ModStart> bd_addr ) { if ( bd_addr == NULL ) return BT_STATUS_INVALID_PARAMETER ;,0
1218,<S2SV_ModStart> ; if ( tcp_hdrlen >= sizeof ( struct tcphdr ) - sizeof ( struct tcphdr ) <S2SV_ModStart> - 1 ; if ( tcp_hdrlen >= sizeof ( struct tcphdr ) - sizeof ( struct tcphdr ) - sizeof ( struct tcphdr ) - sizeof ( struct tcphdr ) - sizeof ( struct tcphdr ) <S2SV_ModStart> ; if ( tcp_hdrlen >= sizeof ( struct tcphdr ) - sizeof ( struct tcphdr ) - sizeof ( struct tcphdr ) - sizeof ( struct tcphdr ) - sizeof ( struct tcphdr ) ) return - 1 ; if ( tcp_hdrlen >= sizeof ( struct tcphdr ) - sizeof ( struct tcphdr ) - sizeof ( struct tcphdr ) - sizeof ( struct tcphdr ) - sizeof ( struct tcphdr ) ) return - 1 ; if ( tcp_hdrlen >= sizeof ( struct tcphdr ) - sizeof ( struct tcphdr ) - sizeof ( struct tcphdr ) - sizeof ( struct tcphdr ) - sizeof ( struct tcphdr ) ) return - 1 ;,0
1219,<S2SV_ModStart> int i ; size_t size ; matrix = 0 ; <S2SV_ModStart> 0 ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> return matrix ; error : jas_matrix_destroy ( matrix ) ; return 0 ;,0
1220,"<S2SV_ModStart> ipv6_select_ident ( fh, rt <S2SV_ModStart> ipv6_select_ident ( fh, rt",1
1221,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; ce = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS, hash <S2SV_ModEnd> ) ; if <S2SV_ModStart> } error = mb2_cache_entry_insert ( ext4_mb_cache, ce, bh -> b_bdev, bh -> b_blocknr, hash <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } else <S2SV_ModStart> hash ) ; <S2SV_ModEnd> } } <S2SV_null>",0
1222,<S2SV_ModStart> * req ; <S2SV_ModEnd> req = scsi_req_alloc <S2SV_ModStart> hba_private ) ; <S2SV_ModEnd> return req ;,1
1223,"<S2SV_ModStart> int i ; size_t <S2SV_ModEnd> avail ; txid <S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> * 8 ; size_t expected = buf -> len - buf -> cursor ; if ( expect + nxip * 8 > expected ) goto bad_format ; nxip = pq_getmsgint ( buf, 4 ) ; avail = buf -> len - buf -> cursor ; expect = 8 + 8 + nxip * 8 ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmin > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; }",0
1224,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x >> 16 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1225,"<S2SV_ModStart>!= RDMA_NODE_IB_CA ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; rdma_destroy_id ( cm_id ) ; return ret ; } <S2SV_ModEnd> ret = -",0
1226,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct xfrm_dump_info <S2SV_ModStart> struct xfrm_dump_info info <S2SV_ModEnd> ; info. <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> ( void ),1
1227,"<S2SV_ModStart> - 1 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; <S2SV_ModStart> = 0 ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } <S2SV_ModStart>, buf, count ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
1228,"<S2SV_ModStart> dentry * upper <S2SV_ModEnd> ; int err <S2SV_ModStart> I_MUTEX_PARENT ) ; upper = lookup_one_len ( dentry -> d_name. name, upperdir, dentry -> d_name. len ) ; err = PTR_ERR ( upper ) ; if ( IS_ERR ( upper ) ) { err = PTR_ERR ( upper ) ; goto out_unlock ; } <S2SV_ModStart> if ( upper == ovl_dentry_upper ( dentry ) || upper -> d_parent == upperdir ) { dget ( upper ) ; err = vfs_unlink ( dir, upper, NULL ) ; dput ( upper ) ; ovl_dentry_version_inc ( dentry -> d_parent ) ; } <S2SV_ModStart> ) ; out_unlock :",0
1229,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; <S2SV_ModStart> eof ) { errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) s_log ( LOG_ERR, ""Inetd <S2SV_blank> mode: <S2SV_blank> %s"", errstr ) ; else s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", ( * section_ptr ) -> servname, errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", (",0
1230,<S2SV_ModStart> * ptrptr && <S2SV_ModEnd> nmemb && size <S2SV_ModStart> nmemb && size <S2SV_ModEnd> ) return AVERROR,1
1231,<S2SV_ModStart> -> name == MAPI_BODY_HTML || a -> name == MAPI_BODY_RTF ) <S2SV_ModStart> else if ( a -> name == MAPI_BODY_RTF ) { body. rtf_bodies = get_rtf_data ( a ) ; html_size = a -> num_values ; } else if ( a -> name == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_TEXT ) { body. text_body = get_text_data ( a ) ; html_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_TEXT ) { body. text_body = get_text_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_HTML ) <S2SV_ModStart> else if ( a -> name == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size =,0
1232,"<S2SV_ModStart> ; # endif if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX = i -> parent -> width - i -> width ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif i -> posY = i -> parent -> height - i -> height ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX =",0
1233,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : * ( size_t * ) val = ms -> elf_notes_max ; return 0 ;,1
1234,"<S2SV_ModStart> 1 ) { jas_eprintf <S2SV_ModEnd> ( ""box <S2SV_blank> type <S2SV_blank> %s\\n"", <S2SV_ModStart> info -> name ) ; goto error ; } if (! jas_safe_size_mul3 ( JAS_CAST ( jas_uint32, JAS_CAST ( jas_uint32, JAS_CAST ( jas_uint32, JAS_CAST ( jas_uint32, JAS_CAST ( jas_uint32, JAS_CAST ( jas_uint32, JAS_CAST ( jas_uint32, JAS_CAST ( jas_uint32, JAS_CAST ( jas_uint32, JAS_CAST ( jas_uint32, JAS_CAST ( jas_uint32, JAS_CAST ( jas_uint32, JAS_CAST ( jas_uint32, JAS_CAST ( jas_uint32, JAS_CAST ( jas_uint32, JAS_CAST ( jas_uint32, JAS_CAST ( jas_uint32, JAS_CAST ( jas_uint32, JAS_CAST ( jas_uint32,",0
1235,,1
1236,"<S2SV_ModStart> & 0xffff ; if ( synth_devs [ dev ] -> load_patch == NULL ) return - ENXIO ; err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err",0
1237,<S2SV_ModStart> * journal = EXT4_JOURNAL ( page_file_mapping ( page ) ) <S2SV_ModEnd> ; if (,0
1238,<S2SV_ModStart> { trak = GF_GET_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1239,<S2SV_ModStart> UINT32 nsc_rle_encode ( const,1
1240,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> ; # endif strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> = '\\0' ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password, pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; md5sum [ 0 ] = 0 ; init_packet ( & data, MT_PTYPE_DATA, srcmac, dstmac, sessionkey, outcounter ) ; plen = add_control_packet ( & data, MT_CPTYPE_USERNAME, username, strlen ( username ) ) ; plen += add_control_packet ( & data, MT_CPTYPE_TERM_TYPE, terminal, strlen ( terminal ) ) ; if ( is_a_tty && get_terminal_size ( & width, & height )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height ) ; }",0
1241,"<S2SV_ModStart> * dllhandle ; if ( COM_CompareExtension ( name, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", name ) ; return NULL ; }",1
1242,<S2SV_ModStart> ; if ( _mibindex!= 0 && _mibindex_max!= 0 ) SNMP_FREE ( _mibindex ) ; _mibindex = 0 ; _mibindex_max = 0 ;,0
1243,"<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> & 0xffffffff ; \\\n} <S2SV_ModEnd> typedef struct PCDTable <S2SV_ModStart> buffer ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ] ) ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ] ) ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ] ) ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ] ) ; for ( j = 0 ; j < i ; j ++ ) pcd_",0
1244,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_END : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_END : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_END : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg ->",0
1245,<S2SV_ModStart> ; g_hash_table_destroy ( headers ) ; } <S2SV_null> <S2SV_null>,0
1246,"<S2SV_ModStart> # ifdef HAVE_IPV6 <S2SV_ModEnd> if ( * <S2SV_ModStart> 1 ) { char * <S2SV_ModStart> 2 ) ; if (! p ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } <S2SV_ModEnd> * portno = <S2SV_ModStart> p + 2 ) ; if (! * portno ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } <S2SV_ModEnd> return estrndup ( <S2SV_ModStart> colon ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return <S2SV_ModEnd> colon ; }",0
1247,"<S2SV_ModStart> i, ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; } for ( i = 0 ; i < qcd -> compparms. numstepsizes ; ++ i ) { fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", i, ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] )",0
1248,"<S2SV_ModStart> -> y_buffer ; int bytes_per_sample = src_ybc -> y_height * src_ybc -> y_width ; int <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> src, src_ybc -> y_width, bytes_per_sample",0
1249,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> invalid\\n"" ) ; return AVERROR_PATCHWELCOME ; }",0
1250,<S2SV_ModStart> == * ptr && ptr [ 1 ],1
1251,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int64_t encode_rd_sb_row ( VP9_COMMON * cm, const TileInfo * tile_info, MACROBLOCK * x, <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> mi_col < tile_info -> mi_col_end <S2SV_ModEnd> ; mi_col += <S2SV_ModStart> BLOCK_SIZE i ; memset <S2SV_ModEnd> ( x -> <S2SV_ModStart> adaptive_pred_interp_filter ) { memset <S2SV_ModEnd> ( x -> <S2SV_ModStart> ) { for ( int i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 16, num_4x4_w * num_4x4_blk ) ; for ( x -> sb_index = 0 ; x -> mb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index =",0
1252,"<S2SV_ModStart>, obj_tlen ; u_int hexdump ; u_int offset_off ; <S2SV_ModStart> } if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; }",0
1253,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inc_mvs ( const <S2SV_ModStart> MV * ref, nmv_context_counts * counts ) { const MV mvs [ 2 ] = { mvs [ i ]. as_mv. row, mvs [ i ]. as_mv. col } ; const int_mv diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col } ; vp9_inc_mv ( & diff, counts ) ; for ( i = 0 ; i < 2 + has_second_ref ( mbmi ) ; ++ i ) { const MV diff = { mvs [ i ]. as_mv. row, mvs [ i ]. as_mv. col - ref -> col } ; vp9_inc_mv ( & diff, counts ) ; } for ( i = 0 ; i < 2 + has_second_ref ( mbmi ) ; ++ i ) { const MV * diff = & mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ] [ 0 ]. as_mv",0
1254,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>",0
1255,"<S2SV_ModStart> ; if ( pskb_expand_head <S2SV_ModEnd> ( skb_out,",0
1256,<S2SV_ModStart> sta -> lock ) ; spin_lock_init ( & sta -> ps_lock,1
1257,<S2SV_ModStart> tp_event ) && perf_paranoid_tracepoint_raw <S2SV_ModEnd> ( ) &&,1
1258,<S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_exit <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_exit,0
1259,"<S2SV_ModStart>, 0 ) ; if (! data_interface ||! control_interface ) return - ENODEV",1
1260,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1261,"<S2SV_ModStart> ; netsnmp_mibindex_load ( ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = netsnmp_getenv ( ""MIBDIRS"" ) ; if ( env_var!= NULL ) { if ( * env_var == '+' ) entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; else add_mibdir ( entry ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = netsnmp_getenv ( ""MIBFILES"" ) ; if ( env_var!= NULL ) { if ( * env_var == '+' ) entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; else entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ;",0
1262,"<S2SV_ModStart> * head ; <S2SV_ModEnd> newsk -> sk_sndbuf <S2SV_ModStart> -> sk_rcvbuf ; sctp_copy_descendant <S2SV_ModEnd> ( newsk,",1
1263,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, UI_SET_EVBIT, KEY_DOWN <S2SV_ModEnd> ) ; ioctl <S2SV_ModStart>, UI_SET_EVBIT, SYN_DOWN <S2SV_ModEnd> ) ; for <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart>, UI_SET_KEYBIT, key_map [ x ]. mapped_id ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, UI_SET_EVBIT, SYN_DOWN <S2SV_ModEnd> ) ; for <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart>, UI_SET_KEYBIT, key_map [ x ]. <S2SV_ModEnd> mapped_id ) ;",0
1264,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return sel ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! get_desc ( & desc, sel ) <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> switch ( ( <S2SV_ModStart> << 1 ) | ( desc -> l << 1 ) | desc -> d ) { case 0 : return INSN_CODE_SEG_PARAMS ( 2, 4 ) ; case 1 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; case 2 : return INSN_CODE_SEG_PARAMS ( 8, 16 ) ; default : return - EINVAL ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1265,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
1266,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
1267,<S2SV_ModStart> return ret ; fsnotify_put_group ( group ) ;,1
1268,<S2SV_ModStart> <S2SV_null> <S2SV_null> static krb5_error_code <S2SV_ModEnd> iakerb_alloc_context ( iakerb_ctx_id_t <S2SV_ModStart> ; code = krb5_gss_init_context <S2SV_ModEnd> ( & ctx,0
1269,"<S2SV_ModStart> -> var_off ) ; if (! src_known ||! dst_known ) { verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> add <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> name ) ; return - EINVAL ; } <S2SV_ModStart> case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } if ( src_known &&! dst_known ) { verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> sub <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> name ) ; return - EINVAL ; }",0
1270,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
1271,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
1272,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = - EINVAL ; goto out ; } if ( strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) && strcmp ( dentry -> d_name. name, ""ipc_flood_duration_ms"" ) ) { ret = - EINVAL ; goto out ; }",0
1273,<S2SV_ModStart> type_argv ) ; if ( mono_reflection_type_is_unknown ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g_get_type ( g,0
1274,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; unsigned long tmp ; count = min_t ( unsigned long, count, sizeof ( ""nnnnn\\0"" ) ) ; <S2SV_ModStart> ( buf, buffer <S2SV_ModEnd>, count )",0
1275,<S2SV_ModStart> input -> cur ) ; } if ( ( ctxt -> inputNr > 20 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) ) { xmlFreeInputStream ( input ) ; return ( - 1 ) ; },0
1276,"<S2SV_ModStart> } if ( le32_to_cpu ( raw_super -> segment_count ) > F2FS_MAX_SEGMENT ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> segment <S2SV_blank> count <S2SV_blank> (%u)"", le32_to_cpu ( raw_super -> segment_count ) ) ; return 1 ; } if (",1
1277,"<S2SV_ModStart> is_path ) { const <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN}"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( ( strncmp ( & name [ 1 ], ""PLATFORM}"", 8 ) == 0 && ( len = 9 )!= 0 ) ) || ( strncmp ( & name [ 1 ], ""ORIGIN}"", 7 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM}"", 9 ) == 0 && ( len = 9 )!= 0 ) ) ) && ( <S2SV_ModStart> == 'O' )? ( l -> l_origin <S2SV_ModEnd> ) : _dl_platform",0
1278,<S2SV_ModStart> } pDecCont = ( decContainer_t * ) H264SwDecMalloc0 <S2SV_ModEnd> ( sizeof (,0
1279,<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart>! opt ) { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) ; txopt_put ( opt_to_free ) ;,1
1280,<S2SV_ModStart> drop ; } if ( iph -> ihl >= IP_OPTIONS_MAX / sizeof ( struct iphdr ) ) goto inhdr_error ; <S2SV_ModStart> 0 ; } if ( iph -> ihl >= IP_OPTIONS_MAX / sizeof ( struct iphdr ) ) goto inhdr_error ;,0
1281,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1282,<S2SV_ModStart> ; if ( ip_hdr ( skb ) -> flags & IPSKB_DOREDIRECT ) ip_hdr ( skb ) -> flags |= IPSKB_DOREDIRECT <S2SV_ModEnd> ; rt = <S2SV_ModStart> ; if ( rt && rt -> rt_flags & IPSKB_DOREDIRECT ) { if ( rt -> rt_flags & IPSKB_DOREDIRECT ) { if ( rt -> rt_flags & IPSKB_DOREDIRECT ) ip_hdr ( skb ) -> flags |= IPSKB_DOREDIRECT ; } else { if ( rt -> rt_flags & IPSKB_DOREDIRECT ) { if ( rt -> rt_flags & IPSKB_DOREDIRECT ) { if ( rt -> rt_flags & IPSKB_DOREDIRECT ) ip_hdr ( skb ) -> flags |= IPSKB_DOREDIRECT ; } else { if ( rt -> rt_flags & IPSKB_DOREDIRECT ) ip_hdr ( skb ) -> flags |= IPSKB_DOREDIRECT ; } },0
1283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1284,"<S2SV_ModStart> errout ; } for ( j = 0 ; j < info -> partitions ; j ++ ) { if (! _ogg_safe_size_mul3 ( info -> stagemasks, j * 8, sizeof ( info -> stagemasks ), sizeof ( info -> stagemasks ), sizeof ( info -> stagemasks ) ) ) goto errout ; } <S2SV_ModStart> errout ; } for ( j = 0 ; j < info -> partitions ; j ++ ) { if (! _ogg_safe_size_mul3 ( info -> stagemasks, j, sizeof ( info -> stagemasks ), sizeof ( info -> stagemasks ) ) ) goto errout ; } for ( j = 0 ; j < info -> partitions ; j ++ ) { int book = ( unsigned char ) oggpack_read ( opb, 8 ) ; if ( book >= ci -> books ) goto errout ; book = ci -> books [ book ] ; if ( book >= ci -> books )",0
1285,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
1286,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; tp -> copied_offset = offset ;,0
1287,"<S2SV_ModStart> ; krb5_key_data * key_data ; if ( key_data_in == NULL ) goto cleanup ; key_data = k5calloc ( n_key_data, sizeof ( * key_data ), & err ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_kvno!= key_data [ i + 1 ]. key_data_kvno ) { err = EINVAL ; goto cleanup ; } key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents [ 1 ] = NULL ; }",0
1288,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
1289,"<S2SV_ModStart> ] ) ; sqlite3_int64 <S2SV_ModEnd> nByte = sqlite3_value_bytes <S2SV_ModStart> 1 ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; pCsr -> zInput [ nByte ] = 0 ; rc = pTab -> pMod -> xAlloc ( pTab -> pTok, nByte + 1, & pCsr -> pCsr -> pCsr -> pTokenizer ) ; if ( rc == SQLITE_OK ) { pCsr -> pCsr -> pTokenizer = pTab -> pTok ; } }",0
1290,"<S2SV_ModStart> filp ) { struct sockaddr_storage addr ; sock_release ( SOCKET_I ( inode ), & addr ) ; file_accessed ( filp ) ;",0
1291,"<S2SV_ModStart> expr_ty iter, string type_comment, <S2SV_ModStart> ; p -> v. AsyncFor. type_comment = type_comment",0
1292,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ""Can\'t <S2SV_blank> create <S2SV_blank> new <S2SV_blank> tempfile: <S2SV_blank> \'%s\'"", param -> temp_filename ) ; DBUG_RETURN ( - 1 ) ; if (! ( param -> tmpfile_createflag & MYF ( 0 ) ) ) { mi_check_print_error ( param, ""Can\'t <S2SV_blank> create <S2SV_blank> new <S2SV_blank> tempfile: <S2SV_blank> \'%s\'"", param -> tmpfile_filename ) ; DBUG_RETURN ( - 1 ) ; } if (! ( param -> testflag & T_SILENT ) ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> tmpfile_createflag & MYF ( 0 ) ) { mi_check_print_error ( param, ""Can\'t <S2SV_blank> create <S2SV_blank> new <S2SV_blank> tempfile: <S2SV_blank> \'%s\'"", param -> tmpfile_filename ) ; DBUG_RETURN ( - 1 ) ; }",0
1293,<S2SV_ModStart> ; } } if ( opt ),0
1294,"<S2SV_ModStart> & PFERR_RSVD_MASK ) && kvm_gfn_to_hva_cache_init <S2SV_ModEnd> ( vcpu -> <S2SV_ModStart> ) ) { kvm_queue_exception_e ( vcpu, kvm_gfn_to_hva_cache ( vcpu -> kvm, kvm_gfn_to_hva_cache ( vcpu -> kvm, kvm_gfn_to_hva_cache ( vcpu -> kvm, kvm_gfn_to_hva_cache_init ( vcpu -> kvm, kvm_gfn_to_hva_cache_init <S2SV_ModEnd> ( vcpu -> <S2SV_ModStart> ) ) ; kvm_queue_exception ( vcpu, kvm_gfn_to_hva_cache_init ( vcpu -> kvm, kvm_gfn_to_hva_cache_init ( vcpu -> kvm, kvm_gfn_to_hva_cache_init ( vcpu -> kvm, kvm_gfn_to_hva_cache_init ( vcpu -> kvm, kvm_gfn_to_hva_cache",0
1295,"<S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_BAD_GATEWAY : return ""Bad <S2SV_blank> GATEWAY <S2SV_blank> connection"" ; case",0
1296,"<S2SV_ModStart> UINT error ; if (! Stream_SafeSeek ( s, 2, & eventId ) ) return ERROR_INVALID_DATA",0
1297,"<S2SV_ModStart> ; if ( pData -> multicastHops > 0 && pData -> num_multicast_hops > 0 && pData -> num_multicast_hops < 2 ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> multicast_hops <S2SV_blank> failed: <S2SV_blank> %s"", pData -> description ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; } else { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> multicast_hops <S2SV_blank> failed: <S2SV_blank> %s"", pData -> description ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; } if ( pData -> num_multicast_hops > 0 && pData -> num_multicast_hops < 2 ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> multicast_hops <S2SV_blank> failed: <S2SV_blank> %s"", pData -> description ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; }",0
1298,"<S2SV_ModStart> < 0 ) { resv_map_put ( vma, resv_map ) ; <S2SV_ModStart> - ENOSPC ; goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> chg ) ) { resv_map_put ( vma, resv_map ) ; <S2SV_ModStart> return ret ; } out : resv_map_put ( vma, resv_map ) ; return 0 ;",0
1299,"<S2SV_ModStart> struct flowi6 fl6 ; struct ipv6_txoptions * opt <S2SV_ModStart> ) ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; <S2SV_ModStart> & fl6, <S2SV_ModEnd> opt, np <S2SV_ModStart> np -> tclass ) ; if ( np -> pmtudisc ) { <S2SV_ModStart> = 1 ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; } <S2SV_ModStart> ( sk, <S2SV_ModEnd> & fl6, <S2SV_ModStart> & fl6, <S2SV_ModEnd> opt, np <S2SV_ModStart> np -> tclass ) ; rcu_read_lock ( ) ; <S2SV_ModStart> = 1 ; rcu_read_unlock ( ) ;",0
1300,<S2SV_ModStart> ; s -> s_stack_depth = path. dentry -> d_sb -> s_stack_depth + 1 ; s -> s_stack_depth = path. dentry -> d_sb -> s_stack_depth ; s -> s_stack_depth = path. dentry -> d_sb -> s_stack_depth ; s -> s_stack_depth = path. dentry -> d_sb -> s_stack_depth + 1 ; s -> s_stack_depth = path. dentry -> d_sb -> s_stack_depth ; s -> s_stack_depth = path. dentry -> d_sb -> s_stack_depth ; s -> s_stack_depth = path. dentry -> d_sb -> s_stack_depth + 1 ; s -> s_stack_depth = path. dentry -> d_sb -> s_stack_depth ; s -> s_stack_depth = path. dentry -> d_sb -> s_stack_depth ; s -> s_stack_depth = path. dentry -> d_stack_depth ;,0
1301,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1302,<S2SV_ModStart> 6 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
1303,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> UINT32 failureCode ; if (! nego -> sendNegoData ) { <S2SV_ModStart> = NEGO_STATE_FAIL ; return ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; return ;,0
1304,"<S2SV_ModStart> ret, last_pwd, n_new_keys <S2SV_ModStart> keyblocks ) { n_new_keys = count_new_keys ( kdb -> key_data, kdb -> key_data ) ; <S2SV_ModStart> keyblocks ) { n_new_keys = count_new_keys ( kdb -> key_data, kdb -> key_data ) ; }",0
1305,"<S2SV_ModStart> int len, result = RLC_ERR ; bn_t t ; bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; switch ( operation ) { case RSA_ENC : bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; } break ; case RSA_DEC : m_len = k_len - 1 ; bn_rsh ( t, m, 8 * m_len ) ; if (! bn_is_zero ( t ) ) { result = RLC_ERR ; } * p_len = m_len ; m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_OK ;",0
1306,<S2SV_ModStart> ; # endif assert ( sp == 0 ) ; <S2SV_ModStart> ++ ; } if ( sp > MAX_STACK_SIZE ) { stop = TRUE ; break ; } <S2SV_ModStart> ++ ; } if ( sp > MAX_STACK_SIZE ) { yr_free ( stack ) ; stack = ( YR_VALUE * ) yr_malloc ( stack_size ) ; if ( stack == NULL ) return ERROR_INSUFFICIENT_MEMORY ; } <S2SV_ModStart> ++ ; } if ( sp > MAX_STACK_SIZE ) { yr_free ( stack ) ; stack = ( YR_VALUE * ) yr_malloc ( stack_size ) ; if ( stack == NULL ) { yr_free ( stack ) ; return ERROR_INSUFFICIENT_MEMORY ; } yr_free ( stack ) ; stack = ( YR_VALUE * ) yr_malloc ( stack_size ) ; if ( stack == NULL ) return ERROR_INSUFFICIENT_MEMORY ;,0
1307,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1308,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1309,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1310,<S2SV_ModStart> void fix_interp_filter ( VP9_COMMON * cm ) { if ( cm -> counts. switchable_interp == NULL ) { return ; } <S2SV_ModEnd> count [ i <S2SV_ModStart> i ] += <S2SV_ModEnd> cm -> counts,0
1311,"<S2SV_ModStart> { token ++ ; } if ( operand >= MAX_OPERANDS ) { eprintf ( ""Too <S2SV_blank> many <S2SV_blank> operands\\n"" ) ; return false",1
1312,"<S2SV_ModStart> cpi ) { MACROBLOCK * const x = & cpi -> td. frame_mb ; <S2SV_ModStart> mi_cols ) ; # if CONFIG_VP9_HIGHBITDEPTH x -> act_zbin_adj = 0 ; # endif vpx_setup_src_planes ( x, cpi -> Source, 0, 0 ) ; vpx_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_dst_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; xd -> mi [ 0 ] -> mbmi. mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; xd -> above_seg_context [ 0 ], 0, sizeof ( * xd -> above_seg_context [ 0 ] ) * aligned_mi_cols * MAX_MB_",0
1313,"<S2SV_ModStart> name ) { size_t max_name_len = strlen ( name ) * 2 + 16 ; if ( max_name_len > max_name_len ) { ERR ( ""Maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> components <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", max_name_len, ( int ) ( max_name_len / 2 ) ) ; dst_name = malloc ( max_name_len / 2 ) ; if (! dst_name ) { ERR ( ""Maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> components <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", max_name_len, ( int ) ( max_name_len / 2 ) ) ; } dst_name = malloc ( max_name_len * 2 + 16 ) ; if (! ( dst_name ) ) dst_name = malloc ( max_name_len / 2 ) ; if (! dst_name ) { ERR ( ""Maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> components <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", max_name_len, ( int ) ( max_name_",0
1314,"<S2SV_ModStart> ( hp ) ; if ( retval == 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; <S2SV_ModStart> } return ( <S2SV_ModEnd> retval ) ;",0
1315,"<S2SV_ModStart> EOFOp 0x07 \\\n{ <S2SV_ModEnd> char magick [ <S2SV_ModStart> ReadBlob ( image, 2, magick, sizeof ( magick ) <S2SV_ModStart> ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = flags & 0x04 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1316,<S2SV_ModStart> ctl_files_rwlock ) ; mutex_init ( & card -> user_ctl_lock ) ;,1
1317,"<S2SV_ModStart> ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } ( * psig ) = s + <S2SV_ModEnd> padlen + 3 <S2SV_ModStart> + 3 ; sig_len -= padlen + 3 ; <S2SV_ModStart> return s ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1318,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ) ) ),0
1319,<S2SV_ModStart> ; ps_dec -> u2_cur_slice_num = ps_cur_slice -> u2_cur_slice_num ; ps_dec -> <S2SV_ModStart> = ps_dec -> u2_cur_slice_num ; if ( ps_dec -> u2_cur_slice_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_set_in_pic_mode ( ps_dec -> u2_cur_slice_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num,0
1320,<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; <S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf ) { OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },0
1321,"<S2SV_ModStart> struct flowi6 fl6 ; struct ipv6_txoptions * opt <S2SV_ModStart> ) ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; <S2SV_ModStart> & fl6, <S2SV_ModEnd> opt, np <S2SV_ModStart> np -> tclass ) ; if ( np -> pmtudisc ) { <S2SV_ModStart> = 1 ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; } <S2SV_ModStart> ( sk, <S2SV_ModEnd> & fl6, <S2SV_ModStart> & fl6, <S2SV_ModEnd> opt, np <S2SV_ModStart> np -> tclass ) ; rcu_read_lock ( ) ; <S2SV_ModStart> = 1 ; rcu_read_unlock ( ) ;",0
1322,"<S2SV_ModStart> ; if ( args -> buffers_ptr == NULL ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } if ( args -> buffer_count > I915_MAX_EXEC_BUFFERS ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } if ( args -> buffer_count > I915_MAX_EXEC_BUFFERS ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; }",0
1323,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; struct pci_dev <S2SV_ModStart> * pdev ; <S2SV_ModEnd> int port ; <S2SV_ModStart> return PTR_ERR ( karg ) ; } if ( ( ( iocnum = mpt_verify_adapter ( ioc -> name, & ioc ) ) < 0 ) || ( iocnum == MPT_ADAPTER_ID_NONE ) || ( iocnum > MPT_ADAPTER_ID_MAX ) ) { printk ( MYIOC_s_ERR_FMT ""%s@%d <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> structure <S2SV_blank> size <S2SV_blank> %ld\\n"", __FILE__, __LINE__, karg -> hdr. iocnum ) ; kfree ( karg ) ; return - ENODEV ; } if ( ( ( iocnum = mpt_verify_adapter ( ioc -> name, & ioc ) ) < 0 ) || ( iocnum == MPT_ADAPTER_ID_MAX ) ) { printk ( MYIOC_s_ERR_FMT ""%s@%d <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank>",0
1324,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
1325,"<S2SV_ModStart> char * path, const char * rootfs <S2SV_ModStart> mntdata, optional, rootfs",1
1326,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1327,"<S2SV_ModStart> ab ) { <S2SV_ModEnd> size_t i, <S2SV_ModStart> -> arg_start ; <S2SV_ModEnd> char * buf <S2SV_ModStart> ( * ab, ""argc=%d"", context -> execve. argc ) ; buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } <S2SV_ModStart> ; buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if ( len <= 0 ) break ; p += len ; } for ( ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_",0
1328,"<S2SV_ModStart> | O_NOCTTY, ( mode == 0 || mode == MODE_INVALID )? 0644 : mode <S2SV_ModEnd> ) ; if",1
1329,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; if <S2SV_ModStart> FALSE ; } return parse_netscreen_packet ( wth -> random_fh, phdr, buf <S2SV_ModEnd>, line, <S2SV_ModStart>, line, <S2SV_ModEnd> err, err_info <S2SV_ModStart> err_info ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1330,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ; u64 irq_time ; if ( rq -> skip_clock_update ) return <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1331,<S2SV_ModStart> ; break ; case 3 : { CheckNumberPixels ( 4 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 2 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; break ; } case 4 : { CheckNumberPixels ( 6 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; break ; } case 5 : { CheckNumberPixels ( 6 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 6 ) & 0x03 ) ; * pixels ++ = ( pixel >>,0
1332,"<S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv",0
1333,<S2SV_ModStart> { struct blkif_response * <S2SV_ModStart> int notify ; <S2SV_ModEnd> spin_lock_irqsave ( & <S2SV_ModStart> case BLKIF_PROTOCOL_NATIVE : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> native. rsp_prod_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_X86_32 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> x86_32. rsp_prod_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_X86_64 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart>. rsp_prod_pvt ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> ) ; } resp -> id = id ; resp -> operation = op ; resp -> status = st ;,1
1334,<S2SV_ModStart> ; if ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) { for ( i = 0 ; i < n_ks_tuple ; i ++ ) if ( password [ i ]!= '\\0' || i!= 255,0
1335,"<S2SV_ModStart> ; if ( check_overflow ( n, buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( check_overflow ( n, buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( check_overflow ( n, buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> entries [ tcount ] = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteFuji"", sizeof ( MnoteFujiEntry ) * c ) ; return ; } exif_log_",0
1336,"<S2SV_ModStart> { if ( l_strcmp <S2SV_ModEnd> ( fname, <S2SV_ModStart> fname, "".html"" ) == 0 ) { L_ERROR ( ""fname <S2SV_blank> not <S2SV_blank> found\\n"" ) ; return 1 ; } if ( l_strcmp <S2SV_ModEnd> ( fname, <S2SV_ModStart> fname, "".htm"" ) == 0 ) { L_ERROR ( ""fname <S2SV_blank> not <S2SV_blank> found\\n"" ) ; return 1 ; } if ( l_strcmp <S2SV_ModEnd> ( fname, <S2SV_ModStart> fname, "".htm"" ) == 0 ) { L_ERROR ( ""fname <S2SV_blank> not <S2SV_blank> found\\n"" ) ; return 1 ; } if ( <S2SV_ModStart> fname, "".html"" ) == 0 ) { L_ERROR ( ""fname <S2SV_blank> not <S2SV_blank> found\\n"" ) ; return 1 ; } if ( l_strcmp <S2SV_ModEnd> ( fname, <S2SV_ModStart> fname, "".htm"" ) == 0 ) { L_ERROR ( ""fname <S2SV_blank> not <S2SV_blank> found\\n"" ) ; return 1 ; } if ( <S2SV_ModStart> fname, "".htm"" ) == 0 ) { L_ERROR ( ""fname <S2SV_blank> not <S2SV_blank> found\\n"" ) ; return 1 ; } if ( l_strcmp ( fname, "".htm"" ) == 0 ) { L_ERROR ( ""fname <S2SV_blank> not <S2SV_blank> found\\",0
1337,"<S2SV_ModStart> ext_dp -> icmp_length && ND_TTEST2 ( ext_dp -> icmp_ext_version_res, plen - ICMP_EXTD_MINLEN ) <S2SV_ModStart> - ICMP_EXTD_MINLEN ; if ( ND_TTEST2 ( ext_dp -> icmp_ext_version_res, hlen ) ) { <S2SV_ModStart> ext_dp -> icmp_ext_version_res, hlen - ICMP_EXTD_MINLEN ) ; }",0
1338,<S2SV_ModStart> dentry * dir <S2SV_ModEnd> ; int dir_has_key <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ),1
1339,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> SERVICE_OPTIONS * opt <S2SV_ModStart>. next ; opt = service_options. next ; service_free ( & service_options ) ; while ( opt ) { unsigned i ; SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; SSL_CTX_write_lock ( opt -> stunnel_locks [ LOCK_SECTIONS ] ) ; opt = opt -> next ; opt -> next = NULL ; service_free ( & service_options ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1340,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; <S2SV_ModEnd> } if (",1
1341,<S2SV_ModStart> parent ) ; if ( ( i -> posX + i -> width ) > i -> parent -> width ) i -> posX = i -> parent -> width - i -> width ; if ( ( i -> posY + i -> height ) > i -> parent -> height ) i -> posY = i -> parent -> height - i -> height ; context. curX = i -> posX ; if ( ( i -> posY + i -> height ) > i -> parent -> height ) i -> posY = i -> parent -> height - i -> height ; if ( ( i -> posX + i -> width ) > i -> parent -> width ) i -> posX = i -> parent -> width - i -> width ; if ( ( i -> posY + i -> height ) > i -> parent -> height ) i -> posY = i -> parent -> height - i -> height ;,0
1342,<S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ),1
1343,"<S2SV_ModStart> 4 ) ; RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, len - op -> size, cpu )",0
1344,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> break ; } if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",0
1345,<S2SV_ModStart> void ) { recovery_started = 1 ;,0
1346,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT7 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT8 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT8 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT8 <S2SV_ModEnd> )",0
1347,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1348,"<S2SV_ModStart> ; if ( l > ( unsigned ) ( sizeof ( struct service ) - 6 ) ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> service <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", req -> socket, ( unsigned ) ( sizeof ( struct service ) - 6 ) ) ; goto error ; } DECODELENGTH_CHECKLIMIT ( l, p, buf + n ) ; if ( l > ( unsigned ) ( sizeof ( struct service ) - 6 ) ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> service <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( unsigned ) ( sizeof ( struct service ) - 6 ) ) ; goto error ; } if ( l > ( unsigned ) ( sizeof ( struct service ) - 6 ) ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> service <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( unsigned ) ( sizeof ( struct service ) - 6 ) ) ) ; goto error ; }",0
1349,<S2SV_ModStart> ) { WORD32 <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1350,"<S2SV_ModStart> -> tp_value, datap ) ; break ; case PTRACE_GET_FREGS : ret = copy_regset_from_user ( child, & user_arm_view, REGSET_FPR, 0, sizeof ( union fp_regs ), datap ) ; break ; case PTRACE_SET_THREAD_AREA : ret = put_user ( task_thread_info ( child ) -> fp_value, datap ) ; break ; case PTRACE_GET_FREGS : ret = copy_regset_from_user ( child, & user_arm_view, REGSET_FPR, 0, sizeof ( union fp_state ), datap ) ; break ; case PTRACE_SET_FREGS : ret = copy_regset_from_user ( child, & user_arm_view, REGSET_FPR, 0, sizeof ( union fp_regs ), datap ) ; break ; case PTRACE_SET_FREGS : ret = copy_regset_from_user ( child, & user_arm_view, REGSET_FPR, 0, sizeof ( union fp_state ), datap )",0
1351,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ;",1
1352,"<S2SV_ModStart>, int fmt, printbuffer * p <S2SV_ModStart> = 0 ; size_t indent = 0 ; <S2SV_ModStart> ( child ) { if (! p ) p = ( char * ) cJSON_malloc ( 8 ) ; if (! p ) p = ( char * ) cJSON_malloc ( 8 ) ; if (! p ) p = ( char * ) cJSON_malloc ( 8 ) ; if (! p ) p = ( char * ) cJSON_malloc ( 8 ) ; if (! p ) p = ( char * ) cJSON_malloc ( 8 ) ; if (! p ) p = ( char * ) cJSON_malloc ( 8 ) ; if (! p ) p = ( char * ) cJSON_malloc ( 8 ) ; if (! p ) p = ( char * ) cJSON_malloc ( 8 ) ; if (! p ) p = ( char * ) cJSON_malloc ( 8 ) ; if (! p ) p = ( char * ) cJSON_malloc ( 8 ) ; if (! p ) p = ( char * ) cJSON_malloc ( 8 ) ; if (! p ) p = ( char",0
1353,"<S2SV_ModStart> struct ikev2_id id <S2SV_ModEnd> ; int id_len <S2SV_ModStart> * typedata ; ND_TCHECK2 ( * ext, sizeof ( id ) <S2SV_ModEnd> ) ; UNALIGNED_MEMCPY <S2SV_ModStart> ( * ext, sizeof ( id ) <S2SV_ModEnd> ) ; i <S2SV_ModStart> case ID_VNC_ADDR : ND_PRINT ( ( ndo, "" <S2SV_blank> vnc:"" ) ) ; dumphex = 1 ; break ; case ID_VNC_IPV4_ADDR : ND_PRINT ( ( ndo, "" <S2SV_blank> vnc:"" ) ) ; dumphex = 1 ; break ; case ID_VNC_IPV6_ADDR : ND_PRINT ( ( ndo, "" <S2SV_blank> vnc:"" ) ) ; dumphex = 1 ; break ; case ID_DER_ASN1_DN : ND_PRINT ( ( ndo, "" <S2SV_blank> asn1:"" ) ) ; dumpascii = 1 ; break ; case ID_VNC_IPV4_ADDR : ND_PRINT ( ( ndo, "" <S2SV_blank> vnc:"" ) ) ; dumphex = 1 ; break ; case ID_VNC_IPV6_ADDR : ND_PRINT ( ( ndo, """,0
1354,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
1355,<S2SV_ModStart> ; other = <S2SV_ModEnd> unix_peer_get ( sk <S2SV_ModStart> ( other ) <S2SV_ModEnd>!= sk ) <S2SV_ModStart> = 0 ; <S2SV_ModEnd> sock_put ( other,0
1356,<S2SV_ModStart> 4 ] ; unsigned int <S2SV_ModEnd> value ; if <S2SV_ModStart> value = ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 <S2SV_ModEnd> ; value |= <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; quantum. unsigned_value = <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ; return (,0
1357,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",0
1358,"<S2SV_ModStart> ; if ( pskb_expand_head <S2SV_ModEnd> ( skb_out,",0
1359,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; task_lock ( task <S2SV_ModEnd> ) ; ioc <S2SV_ModStart> ; ioc = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context ; task <S2SV_ModEnd> -> io_context = <S2SV_ModStart> ; task_unlock ( task <S2SV_ModEnd> ) ; if,1
1360,<S2SV_ModStart> ret = 0 ; if ( xtregs -> cp0 & 1 ) return - EINVAL,0
1361,<S2SV_ModStart> 0 ) { if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; <S2SV_ModStart> KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( header -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( <S2SV_ModStart> buffer. length > token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } ptr = ( unsigned char * ) header -> buffer. value + token_wrapper_len ; signalg = ptr [ 0 ] ; sealalg = ptr [ 1 ] ; signalg |= ptr [ 2 ] << 8 ; sealalg |= ptr [ 3 ] << 8 ; if ( ptr [ 4 ]!= 0xFF || ptr [ 5 ]!= 0xFF || ptr [ 6 ]!= 0xFF ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } ptr = ( unsigned char * ) header -> buffer. value + token_wrapper_len ;,0
1362,"<S2SV_ModStart> data ) { struct pci_cmd_info * cmd = data ; <S2SV_ModStart> ; int ret ; * value &= PCI_COMMAND_GUEST ; value |= cmd -> val & ~ PCI_COMMAND_GUEST ; <S2SV_ModStart> ret = xen_pcibk_read_config_word <S2SV_ModEnd> ( dev, <S2SV_ModStart> * value |= cmd -> val & ~ PCI_COMMAND_GUEST ; <S2SV_ModEnd> return ret ;",0
1363,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_ref_frame_t <S2SV_ModEnd> * frame = <S2SV_ModStart> NULL ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModStart> YV12_BUFFER_CONFIG * fb <S2SV_ModEnd> ; vp9_get_reference_enc ( <S2SV_ModStart> cpi, frame_worker_data <S2SV_ModEnd> -> idx, <S2SV_ModStart> idx, & fb <S2SV_ModEnd> ) ; yuvconfig2image",0
1364,<S2SV_ModStart> ] ) ; free_uid ( fpl -> user ) ;,1
1365,<S2SV_ModStart> & plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { ret = - EPERM ; break ; },0
1366,"<S2SV_ModStart> -> dwc ; dwc3_gadget_del_and_unmap_request ( dep, req, status <S2SV_ModEnd> ) ; spin_unlock <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1367,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""grammar.y"" { int <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 126 <S2SV_ModEnd>",0
1368,"<S2SV_ModStart> sas_revalidate_domain, [ <S2SV_ModEnd> DISCE_SUSPEND ] = <S2SV_ModStart> ] = sas_resume_devices <S2SV_ModEnd>, } ;",1
1369,"<S2SV_ModStart> * info, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart>! rep_quick && init_io_cache ( & info -> read_cache, info -> dfile, ( uint ) param -> read_buffer_length, READ_CACHE, param -> write_buffer_length, MYF ( MY_WME ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, READ_CACHE, param -> write_buffer_length, MYF ( MY_WME ) ) || init_io_cache ( & info -> read_cache, info -> dfile, ( uint ) param -> read_buffer_length, WRITE_CACHE, param -> write_buffer_length, MYF ( MY_WME ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, param -> write_buffer_length, MYF ( MY_WME ) )",0
1370,"<S2SV_ModStart> } ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN uECC_word_t * p ; # else uECC_word_t carry ; wordcount_t num_words = curve -> num_words ; bitcount_t num_n_bits = curve -> num_n_bits ; if ( uECC_vli_isZero ( k, num_words ) || uECC_vli_cmp ( curve -> n, k, num_n_words )!= 1 ) { return 0 ; } carry = regularize_k ( k, tmp, s, curve ) ; if (! uECC_vli_isZero ( p, num_words ) || uECC_vli_cmp ( curve -> n, k, num_n_words )!= 1 ) { return 0 ; } if (! uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! uECC_vli_cmp ( p, curve -> G, k2 [! carry ], 0, num_n_bits + 1, curve ) ) { return 0 ; }",0
1371,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1372,<S2SV_ModStart> sk -> sk_family <S2SV_ModEnd> ; struct sk_buff <S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( flags <S2SV_ModStart> AF_INET ) { struct sockaddr_in * <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ; <S2SV_ModStart> sin6 ) ) ; * addr_len = sizeof ( * sin6,0
1373,"<S2SV_ModStart> -= lblk ; mutex_lock ( & inode -> i_mutex ) ; if (! ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) ) { ret = - EOPNOTSUPP ; goto out_mutex ; } if (! ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) ) { ret = - EOPNOTSUPP ; goto out_mutex ; } flags |= EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN | EXT4_EX_NOCACHE ; if ( mode & FALLOC_FL_KEEP_SIZE ) <S2SV_ModStart> |= EXT4_GET_BLOCKS_KEEP_SIZE ; out_mutex : if (! ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) { ret = - EOPNOTSUPP ; goto out_mutex ; } <S2SV_ModStart> |= EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | EXT4_GET_BLOCKS_CON",0
1374,"<S2SV_ModStart> ; } else if ( pool -> free_total < NW_BUF_POOL_SIZE / 2 ) { uint32_t new_free_total = pool -> free_total * 2 + sizeof ( nw_buf * ) ; if ( new_free_total < NW_BUF_POOL_SIZE / 2 ) { pool -> free_total = new_free_total ; pool -> free_arr = new_arr ; } else { free ( buf ) ; } } } else { uint32_t new_free_total = pool -> free_total * 2 ; void * new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ), new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total ; pool -> free_arr = new_arr ; } else { free ( buf ) ; } }",0
1375,<S2SV_ModStart> return map ; map =,1
1376,"<S2SV_ModStart> tp ; { int cval = 0, meta = 0 ; const char hex [ ] = { ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"" } <S2SV_ModStart> 2 ] ) { <S2SV_ModEnd> if ( * <S2SV_ModStart> == 'x' || <S2SV_ModEnd> * cp == <S2SV_ModStart> == 'X' ) for ( ++ cp ; * cp && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; } else if ( * cp == '\\\\' && cp [ 1 ] )",0
1377,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1378,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_left < 4 <S2SV_ModStart> size_left < 4 ) { LogError ( ""Process_ipfix <S2SV_blank> [%u] <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } if ( <S2SV_ModEnd> ( size_left < <S2SV_ModStart> && size_left < 4 ) { LogError ( ""Process_ipfix <S2SV_blank> [%u] <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } size_left -= 4 ; translation_table = calloc ( sizeof ( input_translation_t ), sizeof ( input_translation_table ) ) ; if (! translation_table ) { LogError ( ""Process_ipfix <S2SV_blank> [%u] <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue",0
1379,"<S2SV_ModStart> l_uint32 * pixc, * pixm, * pixg, * pixd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if (! pixs ) return ( PIX * ) ERROR_PTR ( ""pixFewColorsOctcubeQuant1"" ) ; if ( ( pixc = pixFewColorsOctcubeQuant2 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; pixc = pixFewColorsOctcubeQuant3 ( pixs, level ) ; if ( ( pixc = pixFewColorsOctcubeQuant4 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; cmap = pixGetColormap ( pixc ) ; ncolors = pixcmapGetCount ( cmap ) ; cmapd = pixcmapCreate ( ncolors ) ; lut = ( l_int32 * ) LEPT_CALLOC ( 256, sizeof ( l_int32 ) ) ; for ( i = 0 ; i < ncolors ; i ++",0
1380,"<S2SV_ModStart> { int i, <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( u ) ; int <S2SV_ModEnd> vbits = BN_num_bits <S2SV_ModStart> ( u ) ; int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( v ) ; int <S2SV_ModEnd> vshift = BN_num_bits <S2SV_ModStart> ( u ) ; int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( v ) ; int <S2SV_ModEnd> vshift = BN_num_bits <S2SV_ModStart> ( u ) ; if (! BN_GF2m_add ( u, u, p ) ) goto err ; if (! BN_GF2m_mod ( u, a, p ) ) goto err ; if (! BN_is_zero ( u ) ) goto err ; if (! BN_rshift1 ( u, u ) ) goto err ; if (! BN_is_zero ( v ) ) goto err ; if (! BN_is_zero ( v ) ) goto err ; if (! BN_is_zero ( v ) ) goto err ; if (! BN_is_zero ( v ) ) goto err ; if (! BN_is_zero (",0
1381,<S2SV_ModStart> = 256 ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH,0
1382,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1383,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1384,"<S2SV_ModStart>, nbits ; if ( msg -> readcount + ( bits >> 3 ) > msg -> size ) { msg -> readcount = msg -> size << 3 ; return 0 ; } <S2SV_ModStart> oob ) { if ( msg -> readcount + ( bits >> 3 ) > msg -> size ) { msg -> readcount = msg -> size << 3 ; return 0 ; } <S2SV_ModStart> & 7 ; if ( msg -> bit + nbits > msg -> size << 3 ) { msg -> readcount = msg -> size << 3 ; return 0 ; } <S2SV_ModStart> & 7 ; if ( msg -> bit + nbits > msg -> size << 3 ) { msg -> readcount = msg -> size << 3 ; return 0 ; } <S2SV_ModStart> & 7 ; if ( msg -> bit + nbits > msg -> size << 3 ) { msg -> readcount = msg -> size << 3 ; return 0 ; }",0
1385,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
1386,<S2SV_ModStart> ; out1 : cancel_work_sync ( & dev -> kevent ) ; del_timer_sync ( & dev -> delay ) ;,1
1387,"<S2SV_ModStart> * data ; size_t size ; size_t overhead ; overhead = 16 + 4 + strlen ( ns ) + 1 ; if ( mongo_validate_ns ( conn, ns )!= MONGO_OK ) return MONGO_ERROR ; for ( i = 0 ; i < count ; i ++ ) { size = bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } mm = mongo_message_create ( size, 0, 0, MONGO_OP_INSERT ) ; data = & mm -> data ; if ( flags & MONGO_CONTINUE_ON_ERROR ) { data = mongo_data_append ( data, & ZERO ) ; } else { data = mongo_data_append",0
1388,<S2SV_ModStart> ) ) { gtk_window_destroy ( GTK_WINDOW ( g_wnd_assistant ) ) ; <S2SV_ModStart> FALSE ) { gtk_window_destroy ( GTK_WINDOW ( g_wnd_assistant ) ) ; <S2SV_ModStart> FALSE ) { gtk_window_destroy ( GTK_WINDOW ( g_wnd_assistant ) ) ; } else { gtk_window_destroy ( GTK_WINDOW ( g_wnd_assistant ) ) ; } },0
1389,<S2SV_ModStart> - 2 ; int <S2SV_ModEnd> wrap = 1,0
1390,"<S2SV_ModStart> acl ) { struct iattr iattr ; retval = posix_acl_update_mode ( inode, & iattr. ia_mode, & acl ) ; if ( retval <S2SV_ModEnd> ) goto err_out <S2SV_ModStart> goto err_out ; if (! acl ) { value = NULL ; size = 0 ; } <S2SV_ModEnd> iattr. ia_valid <S2SV_ModStart> iattr ) ; <S2SV_ModEnd> } break ;",1
1391,"<S2SV_ModStart> header. type_comment ; if ( bin -> header. type_comment ) { eprintf ( ""Invalid <S2SV_blank> type <S2SV_blank> comment\\n"" ) ; return false ; } <S2SV_ModEnd> if ( bin <S2SV_ModStart> header. type_comment ) { eprintf ( ""Invalid <S2SV_blank> type <S2SV_blank> comment\\n"" ) ; return false ; } <S2SV_ModEnd> if ( bin <S2SV_ModStart> header. type_comment ) { eprintf ( ""Invalid <S2SV_blank> type <S2SV_blank> comment\\n"" ) ; return false ; } if ( bin -> header. type_comment <S2SV_ModStart> header. type_comment ) { eprintf ( ""Invalid <S2SV_blank> type <S2SV_blank> comment\\n"" ) ; return false ; } <S2SV_ModEnd> if ( bin <S2SV_ModStart> header. type_comment ) { eprintf ( ""Invalid <S2SV_blank> type <S2SV_blank> comment\\n"" ) ; return false ; } if ( bin -> header. type_comment ) { eprintf ( ""Invalid <S2SV_blank> type <S2SV_blank> comment\\n"" ) ; return false ; }",0
1392,<S2SV_ModStart> : case NPPVformValue : case NPPVpluginNativeAccessibleAtkPlugId <S2SV_ModStart> case NPPVpluginKeepLibraryInMemory : case NPPVpluginNativeAccessibleAtkPlugId : <S2SV_ModStart> = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginNativeAccessibleAtkPlugId :,0
1393,"<S2SV_ModStart> len ) { size_t alloc <S2SV_ModEnd> ; char * <S2SV_ModStart> unsigned long hex <S2SV_ModEnd> ; CURLcode res <S2SV_ModStart> CURLcode res ; if ( alloc < 2 ) { free ( ns ) ; return NULL ; } alloc -= 2 ; strindex ++ ; in = * string ; if ( ( '%' == in ) && ( ISXDIGIT ( string [ 1 ] ) && ( ISXDIGIT ( string [ 2 ] ) ) ) { hex = strtoul ( hexstr, & ptr, 16 ) ; in = curlx_ultouc ( hex ) ; res = Curl_convert_from_network ( handle, & in, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ;",0
1394,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; goto fail <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; fail : return ;,0
1395,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor_correction = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; i = active_best_quality ; do { const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor_correction ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } else { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } <S2SV_ModEnd> } while ( <S2SV_ModStart> active_worst_quality ) ;",0
1396,<S2SV_ModStart> value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
1397,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1398,<S2SV_ModStart> ; if ( <S2SV_ModEnd> len < sizeof <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS,0
1399,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> data ) ;",1
1400,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
1401,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1402,"<S2SV_ModStart> TX_SIZE tx_size, PREDICTION_MODE <S2SV_ModEnd> mode, int <S2SV_ModStart> plane ] ; <S2SV_ModEnd> DECLARE_ALIGNED_ARRAY ( 16 <S2SV_ModStart> uint8_t, left_col, 64 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; uint8_t * above_row = above_data + 16 ; int frame_width, frame_height ; if ( plane == 0 ) { frame_width = xd -> cur_buf -> x_width ; frame_height = xd -> cur_buf -> y_height ; } else { frame_width = xd -> cur_buf -> uv_width ; frame_height = xd -> cur_buf -> uv_height ; } if ( left_available && right_available ) { for ( i = 0 ; i < bs ; ++ i ) left_col [ i ] = ref [ i * ref_stride - 1 ] ; for ( i = 0 ; i < bs ; ++ i ) left_col [ i ] = ref [ i * ref_stride - 1 ] ; for ( i = 0 ; i < frame_width ; ++ i ) left_col [ i",0
1403,"<S2SV_ModStart> } else { if ( end >= ARRAY_LENGTH ( pattern ) ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern <S2SV_blank> length\\n"" ) ; goto error ; } else if ( end >= ARRAY_LENGTH ( pattern ) ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern <S2SV_blank> length\\n"" ) ; goto error ; } else if ( end >= ARRAY_LENGTH ( pattern ) ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern <S2SV_blank> length\\n"" ) ; goto error ; } else if ( end >= ARRAY_LENGTH ( pattern ) ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern <S2SV_blank> length\\n"" ) ; goto error ; }",0
1404,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> 0.0000001 ; if ( len <= 0 ) { if ( isnan ( val ) ) strncpy ( str, ""NaN"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val == 0 ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = 0 ; } else { int v = ( int ) ( val / radix ) ; val = ( val - v ) * radix ; if ( v == radix - 1 ) v = radix - 1 ; if ( hasPt ) v = radix - 1 ; if ( v == radix - 1 ) v = radix - 1 ; if ( v == radix - 1 ) v = radix - 1 ; if ( v == radix - 1 ) v = radix - 1 ; if (! hasPt ) { hasPt = true ; } }",0
1405,"<S2SV_ModStart> * jas_iccprof_createfrombuf ( jas_uchar <S2SV_ModEnd> * buf,",1
1406,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
1407,"<S2SV_ModStart> BUG ( ) ; if (! thresholds ) { mutex_unlock ( & memcg -> thresholds_lock ) ; return ; } <S2SV_ModStart> ( ) ; mem_cgroup_thresholds_destroy ( memcg, type == _MEMSWAP ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; size = 0 ; for ( i = 0 ; i < thresholds -> primary -> size ; i ++ ) { if ( thresholds -> primary -> entries [ i ]. threshold < usage ) { kfree ( new ) ; new = NULL ; goto swap_buffers ; } new = thresholds -> spare ; if (! size ) { kfree ( new ) ; new = NULL ; goto swap_buffers ; } new -> size = size ; new -> current_threshold = - 1 ; for ( i = 0, j = 0 ; i < thresholds -> primary -> size ; i ++ ) { if ( new -> entries [ j ]. threshold < usage ) { ++ new -> current_threshold ; } j ++ ; } swap_buffers : thresholds -> spare = thresholds -> secondary ; mutex_unlock ( & memcg -> thresholds_lock ) ; }",0
1408,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> ; return handle <S2SV_ModEnd> ; } <S2SV_null>",1
1409,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> show_frame ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vp9_wb_write_bit ( wb, cm -> error_resilient_mode ) ; if ( cm -> frame_type == KEY_FRAME ) { const COLOR_SPACE cs = UNKNOWN ; write_sync_code ( wb ) ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vpx_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } else { assert ( cm -> profile == PROFILE_1 ) ; vpx_wb_write_bit ( wb, 0 ) ; } write_frame_size ( cm, wb ) ; } else { if (! cm -> show_frame ) vpx_wb_write_bit ( wb, 0 ) ; if (! cm -> error_resilient_mode ) vpx_wb",0
1410,<S2SV_ModStart> } if ( bad_format_arg ( argc ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> } if ( bad_format_arg ( argc ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> } if ( bad_format_arg ( argc ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> } if ( bad_format_arg ( argc ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> } if ( bad_format_arg ( argc ) ) { <S2SV_ModEnd> return ; },0
1411,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
1412,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_END : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_END : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_END : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (!",0
1413,"<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ; vpx_memset ( xd -> mb_segement_abs_delta, 0, sizeof ( xd -> ref_lf_deltas ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ; vpx_memset ( xd -> mode_lf_deltas, 0, sizeof ( xd -> mode_lf_deltas ) ) ; pc -> refresh_golden_frame = 1 ; pc -> copy_buffer_to_arf = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc",0
1414,"<S2SV_ModStart> error ; uint16_t n <S2SV_ModEnd> ; uint32_t status <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & status, sizeof ( uint32_t ) ) ; status = letoh32 ( status ) ; if ( ( status & RSV_RECEIVED_OK )!= 0 ) { enc624j600WriteReg ( interface, ENC624J600_ERXTAIL, ENC624J600_RX_BUFFER_STOP ) ; } else { enc624j600WriteReg ( interface, ENC624J600_ERXTAIL, ENC624J600_RX",0
1415,<S2SV_ModStart> ] == 0x01 && i < gemsafe_cert_max,1
1416,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1417,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass, VALUE content ) { VALUE rb_schema ; VALUE ctx ; xmlSchemaPtr schema ; xmlSchemaParserCtxtPtr ctx ; VALUE rb_schema ; VALUE errors ; VALUE rb_schema ; VALUE rb_schema ; VALUE errors ; VALUE rb_schema ; VALUE errors ; VALUE rb_schema ; VALUE rb_schema ; VALUE errors ; VALUE rb_schema ; VALUE errors ; VALUE rb_schema ; VALUE errors ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; schema = xmlSchemaParse ( ctx ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSchemaFreeParserCtxt ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; else rb_raise ( rb_eRuntimeError, ""Could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> document"" ) ; return Qnil ; } rb_iv_set ( rb_schema, ""@errors",0
1418,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> info -> par <S2SV_ModEnd> ; vma -> <S2SV_ModStart> _CACHE_MASK ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> ( vma, fbdev -> fb_phys, fbdev -> fb_len <S2SV_ModEnd> ) ; }",1
1419,"<S2SV_ModStart> << 2 ; if ( strlen ( config_opt ) > 3 * CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option <S2SV_blank> line <S2SV_blank> length"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> << 2 ; if ( strlen ( config_opt ) > 3 * CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option <S2SV_blank> line <S2SV_blank> length"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> << 2 ; if ( strlen ( config_opt ) > 3 * CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option <S2SV_blank> line <S2SV_blank> length"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> << 2 ; if ( strlen ( config_opt ) > 3 * CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option <S2SV_blank> line <S2SV_blank> length"" ) ; print_syntax ( ) ; return 1 ; }",0
1420,"<S2SV_ModStart> / 2 ] ; memset ( out, 0, 4 ) ; <S2SV_ModStart> / 2 ] ; memset ( out, 0, 4 ) ;",0
1421,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1422,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1423,"<S2SV_ModStart> fanout_mutex ) ; if (! list_empty ( & fanout_list ) ) { list_add_tail ( & po -> fanout_list, & fanout_list ) ; err = - EINVAL ; goto out ; } <S2SV_ModEnd> if (!",0
1424,<S2SV_ModStart> ; if ( <S2SV_ModEnd> handle -> nmi <S2SV_ModStart> nmi ) { <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> pending ) ; <S2SV_ModEnd> } else perf_event_wakeup,0
1425,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * s, int maxlen, wchar_t <S2SV_ModEnd> * pwcs ) <S2SV_ModStart> - EINVAL ; op = pwcs ; <S2SV_ModStart> >= PLANE_SIZE ) { <S2SV_ModStart> -= PLANE_SIZE ; <S2SV_ModEnd> * op ++ <S2SV_ModStart> * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u >> 10 ) & SURROGATE_BITS ) ; } s += size ; len -= size ; } else { * op ++ = ( wchar_t ) u ; } op += size ; len -- ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1426,"<S2SV_ModStart>, i ; if (! ( s -> state & PNG_IHDR ) ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> before <S2SV_blank> IHDR"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> state & PNG_IDAT ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> before <S2SV_blank> IDAT"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> state & PNG_IDAT ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> after <S2SV_blank> IDAT"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> state & PNG_IDAT ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> before <S2SV_blank> IDAT"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> state & PNG_IDAT ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> after <S2SV_blank> IDAT"" ) ; return AVERROR_INVALIDDATA ; }",0
1427,"<S2SV_ModStart> EPROTONOSUPPORT ) { crm_trace ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; st -> state = stonith_disconnected ; } if ( rc == pcmk_ok ) { st -> cmds -> disconnect ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> state = stonith_disconnected ; } if ( rc == pcmk_ok ) { crm_trace ( ""Disconnected <S2SV_blank> from <S2SV_blank> stonith"" ) ; st -> cmds -> disconnect ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T",0
1428,<S2SV_ModStart> } dt -> proto = IP_GET_IPPROTO ( p ) ; dt ->,1
1429,"<S2SV_ModStart> -> nicContext ; if ( ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart>!= 0 ) { status = ksz8851ReadReg ( interface, KSZ8851_RXFHSR ) ; if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) { status = ksz8851ReadReg ( interface, KSZ8851_RXFHBCR ) & RXFHBCR_RXBC_MASK ; if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) { ksz8851WriteReg ( interface, KSZ8851_RXFDPR, RXFDPR_RXFPAI ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, RXQCR_S",0
1430,"<S2SV_ModStart> const node * n2, asdl_seq * decorator_seq, bool <S2SV_ModEnd> is_async ) { <S2SV_ModStart> is_async ) { identifier name ; arguments_ty args ; expr_ty returns = NULL ; int name_i = 1 ; if ( TYPE ( CHILD ( n, name_i + 1 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 1 ) ) ; if (! name ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 2 ) ) ; n_i += 2 ; } if (! type_comment && NCH ( CHILD ( n, name_i + 3 ) ) > 1 ) type_comment = NULL ; if (! type_comment && NCH ( CHILD ( n, name_i + 4 ) > 1 ) type_comment = NULL ; if ( TYPE ( CHILD ( n, name_i + 4 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i",0
1431,"<S2SV_ModStart> int i ; if ( mm_pgd_none_or_clear_bad ( mm ) ) goto out ; pgd = pgd_offset ( mm, 0xA0000 ) ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pmd = pmd_offset ( pmd, 0xA0000 ) ; split_huge_page_pmd ( mm, pmd ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1432,"<S2SV_ModStart> ( AUDIT_APPARMOR_DENIED, __aa_current_profile ( ), GFP_KERNEL, & sa, NULL <S2SV_ModEnd> ) ; }",1
1433,"<S2SV_ModStart> uint_fast8_t tmp ; siz -> comps = 0 ; <S2SV_ModStart> ) ) { jas_eprintf ( ""invalid <S2SV_blank> image <S2SV_blank> area\\n"" ) ; goto error ; } if (! siz -> width ||! siz -> height ) { jas_eprintf ( ""invalid <S2SV_blank> image <S2SV_blank> area\\n"" ) ; goto error ; } if (! siz -> tilewidth ||! siz -> tileheight ) { jas_eprintf ( ""invalid <S2SV_blank> tile <S2SV_blank> area\\n"" ) ; goto error ; } if (! siz -> numcomps || siz -> numcomps > 16384 ) { jas_eprintf ( ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> components\\n"" ) ; goto error ; } if ( siz -> xoff >= siz -> width ) { jas_eprintf ( ""xoff <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; goto error ; } if ( siz -> yoff >= siz -> height ) { jas_eprintf ( ""yoff <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; goto error ; } if ( siz -> tilexoff >= s",0
1434,"<S2SV_ModStart> 1 ; } } sn_coap_protocol_free_copy ( handle, dst_coap_msg_ptr -> token_ptr, dst_coap_msg_ptr -> token_len ) ; if ( sn_coap_protocol_free_copy ( handle, dst_coap_msg_ptr -> token_ptr ) < 0 ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> free <S2SV_blank> token!"" ) ; return - 1 ; } sn_coap_protocol_free_copy ( handle, dst_coap_msg_ptr -> token_ptr, dst_coap_msg_ptr -> token_len ) ; if ( sn_coap_protocol_malloc_copy ( handle, dst_coap_msg_ptr -> token_ptr, dst_coap_msg_ptr -> token_len ) < 0 ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> token!"" ) ; return - 1 ; }",0
1435,<S2SV_ModStart> << 24 ; xmi_tmpdata |= ( <S2SV_ModStart> << 16 ; xmi_tmpdata |= ( <S2SV_ModStart> << 8 ; xmi_tmpdata |= ( * xmi_data ++ << 24 ) ; xmi_tmpdata |= ( * xmi_data ++ << 16 ) ; xmi_tmpdata |= ( * xmi_data ++ << 8 ) ; xmi_tmpdata |= ( * xmi_data ++ << 24 ) ; xmi_tmpdata |= ( * xmi_data ++ << 16 ; xmi_tmpdata |= ( * xmi_data ++ << 16 ) ; xmi_tmpdata |= ( * xmi_data ++ << 24 ) ; xmi_tmpdata |= ( * xmi_data ++ << 16 ) ; xmi_tmpdata |= ( * xmi_data ++ << 8 ) ; xmi_tmpdata |= ( * xmi_data ++ << 24 ) ; xmi_tmpdata |= ( * xmi_data ++ << 16 ) ; xmi_tmpdata |= ( * xmi_data ++ << 8 ) ; xmi_tmpdata |= ( * xmi_data ++ << 24 ) ; xmi_tmpdata |= ( *,0
1436,"<S2SV_ModStart> size_t total_len ; struct iov_iter iter ; <S2SV_ModStart> ; size_t total_size = iov_iter_count ( iov, nr_segs ) ; <S2SV_ModStart> -> ops ; <S2SV_ModEnd> size_t chars = <S2SV_ModStart> buf -> len ; size_t written <S2SV_ModStart> ; int error <S2SV_ModEnd> ; if ( <S2SV_ModStart> break ; } written = copy_page_to_iter ( buf -> page, buf -> offset, chars, & iter ) ; if ( unlikely ( written < chars ) ) { if (! ret ) ret = - EFAULT <S2SV_ModEnd> ; break ; <S2SV_ModStart> break ; } written = copy_page_to_iter ( buf -> page, buf -> offset, chars, & iter ) ; if ( unlikely ( written < chars ) ) { if (! ret ) ret = - EFAULT <S2SV_ModEnd> ; break ; <S2SV_ModStart> } atomic =! iov_fault_in_pages_write ( iov, chars, & iter ) ; if (! ret ) ret = - EFAULT <S2SV_ModEnd> ; break ;",0
1437,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> MaxGIFBits ) ; \\\n} <S2SV_ModEnd> # define IndexPacket,0
1438,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1439,"<S2SV_ModStart> { p_fm_config_conx_hdlt hdl = NULL <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } for <S2SV_ModStart> 0 ) { res = <S2SV_ModEnd> commandList [ i <S2SV_ModStart> ] ) ; goto cleanup <S2SV_ModEnd> ; } } <S2SV_ModStart> 0 ) { res = <S2SV_ModEnd> commandList [ i <S2SV_ModStart> ] ) ; goto cleanup <S2SV_ModEnd> ; } } <S2SV_ModStart> 0 ) { res = <S2SV_ModEnd> commandList [ i <S2SV_ModStart> ] ) ; cleanup : if ( hdl ) { if ( res!= FM_CONF_OK ) { if ( res!= FM_CONF_OK ) { if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto cleanup <S2SV_ModEnd> ; } } <S2SV_ModStart> 0 ) { res = <S2SV_ModEnd> commandList [ i <S2SV_ModStart> ] ) ; cleanup : if ( hdl ) { if ( res!= FM_CONF_OK ) { if ( res!= FM_CONF_OK ) { if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%",0
1440,"<S2SV_ModStart> size_t max_mem ; size_t max_samples ; size_t max_samples ; <S2SV_ModStart> 0 ] ; max_samples = JAS_DEFAULT_MAX_SAMPLES ; <S2SV_ModStart> break ; case OPT_MAXSAMPLES : max_samples = strtoull ( jas_optarg, 0, 10 ) ; break ; case <S2SV_ModStart> ; break ; default : usage ( ) ; break ; } if ( ( id = jas_getopt ( argc, argv, opts ) ) < 0 ) { usage ( ) ; exit ( EXIT_FAILURE ) ; } if ( ( id = jas_getopt ( argc, argv, opts ) ) < 0 ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> standard <S2SV_blank> input\\n"" ) ; exit ( EXIT_FAILURE ) ; } if ( ( fmtid = jas_image_getfmt ( instream ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if (! ( fmtname = jas_image_getfmtname ( image ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if (! (",0
1441,"<S2SV_ModStart> ""LinkKey"" ) &&! bdaddr_is_valid ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> invalid <S2SV_blank> link <S2SV_blank> address <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
1442,"<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator <S2SV_ModStart> conn -> validator -> user ) ) { return ret_error ; } size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; ret = validate_dn ( props, dn, conn -> validator -> passwd. buf ) ; if ( ret!= ret_ok ) return ret ; re = ldap_count_entries ( ldap -> conn, message ) ; if ( re!= 1 ) { ldap_msgfree ( message ) ; return ret_not_found ; } first = ldap_first_entry ( ldap -> conn, message ) ; if ( first == NULL ) { ldap_msgfree ( message ) ; return ret_not_found ; } dn = ldap_get_dn ( ldap -> conn, first ) ; if ( dn == NULL ) { ret_msgfree ( message ) ; return ret_error ; } ret = validate_dn ( props, dn, conn -> validator -> user ) ; if ( ret!= ret_ok ) return ret_error ;",0
1443,"<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # endif for ( row = 0 ; row < height ; row ++ ) { for ( col = 0 ; col < raw_width ; col ++ ) { if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; } } <S2SV_ModEnd> } } <S2SV_null>",0
1444,"<S2SV_ModStart> ; if (! nl ) { struct dm_dev_info * dev_info ; <S2SV_ModStart> needed ) ; dev_info = dm_disk_dev ( disk ) ; dm_device_info_init ( & dev_info -> dev, dev_info -> bdev -> bd_dev ) ; if ( dev_info -> bdev -> bd_dev_info [ dev_info -> bd_dev_info [ dev_info -> bd_dev_info [ 0 ] -> bd_dev_info [ dev_info -> bdev_info [ dev_info -> bd_dev_info [ dev_info -> bd_dev_info [ 0 ] -> bd_dev ], dev_info -> bdev_info [ dev_info -> bdev -> bd_dev ] ) ; if ( dev_info -> bd_dev_info [ dev_info -> bd_dev_info [ dev_info -> bd_dev_info [ 0 ] -> bd_dev_info [ 0 ] -> bd_dev_info [ dev_info -> bd_dev_info [ dev_info -> bd_dev_info [ 0 ] -> bd_dev_info [ 0 ] -> bd_dev_info [",0
1445,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
1446,"<S2SV_ModStart> vcpu_info ; int nr_entries ; <S2SV_ModStart> irq_srcu ) ; nr_entries = irq_rt -> nr_rt_entries ; for ( e = NULL ; e ; e = e -> next ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! hlist_unhashed ( & e -> link ) ) continue ; if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! kvm_intr_is_single_vcpu ( kvm, & irq, & vcpu ) ) { ret = irq_set_vcpu_affinity ( host_irq, NULL ) ; if ( ret < 0 ) { printk ( KERN_INFO ""failed <S2SV_blank> to <S2SV_blank> back <S2SV_blank> to <S2SV_blank> remapped <S2SV_blank> mode, <S2SV_blank> irq: <S2SV_blank> %u\\n"", host_irq ) ; goto out ; } continue ; }",0
1447,<S2SV_ModStart> bfqq ) { spin_lock_irq ( & bfqd -> bfq_lock ) ; <S2SV_ModStart> ) bfq_idle_slice_timer_body ( bfqq ) ; spin_unlock_irq ( & bfqd -> bfq_lock,0
1448,"<S2SV_ModStart> else { return false <S2SV_ModEnd> ; } case <S2SV_ModStart> -> umin_value == U64_MIN && rold -> umax_value == U64_MAX && rold -> smin_value == S64_MIN && rold -> smax_value == S64_MAX ; case SCALAR_VALUE_OR_NULL : if ( rcur -> type == PTR_TO_MAP_VALUE_OR_NULL ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) == 0 && tnum_in ( rold -> var_off, rcur -> var_off ) == 0 && rold -> smin_value == S64_MIN && rold -> smax_value == S64_MAX ; break ; case SCALAR_VALUE_OR_NULL : if ( rcur -> type == PTR_TO_MAP_VALUE_OR_NULL ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) == 0 && tnum_in ( rold -> var_off, rcur -> var_off ) ==",0
1449,"<S2SV_ModStart> sock, sk ) ; memset ( sa, 0, sizeof ( * sa )",1
1450,<S2SV_ModStart> (! handle ||! SecIsValidHandle ( handle ),1
1451,<S2SV_ModStart> [ orderInfo -> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1452,<S2SV_ModStart> if (! ( flags & RENAME_EXCHANGE ) && ( new -> d_inode && new -> d_inode -> i_uid == old -> d_inode -> i_uid ) && ( new -> d_inode -> i_uid!= old -> d_inode -> i_uid ) && ( new -> d_inode -> i_uid!= new -> d_inode -> i_uid ) && ( new -> d_inode && new -> d_inode -> i_uid!= old -> d_inode -> i_uid && new -> d_inode -> i_uid!= new -> d_inode -> i_uid ) && ( new -> d_inode -> i_uid!= old -> d_inode -> i_uid ) && ( new -> d_inode -> i_uid!= new -> d_inode -> i_uid ) && ( new -> d_inode!= old -> d_inode && new -> d_inode -> i_uid!= new -> d_inode -> i_uid && new -> d_inode -> i_uid!= new -> d_inode -> i_uid ) &&,0
1453,"<S2SV_ModStart> OP_MATCH ) ; if ( num_mem > INT_MAX / 2 ) { fprintf ( stderr, ""num_mem <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num_mem, INT_MAX ) ; num_mem = INT_MAX ; } <S2SV_ModStart> OP_MATCH ) ; if ( num_mem > INT_MAX / 2 ) { fprintf ( stderr, ""num_mem <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num_mem, INT_MAX ) ; num_mem = INT_MAX ; } <S2SV_ModStart> num_mem > INT_MAX / 2 ) { fprintf ( stderr, ""num_mem <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> (%d)"", INT_MAX ) ; num_mem = INT_MAX ; } <S2SV_ModStart> OP_MATCH ) ; if ( num_mem > INT_MAX / 2 ) { fprintf ( stderr, ""num_mem <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num_mem, INT_MAX ) ; num_mem = INT_MAX ; }",0
1454,"<S2SV_ModStart> int plane ; # if CONFIG_VP9_HIGHBITDEPTH switch ( bsize ) { case BLOCK_SIZE_8BITS : # endif vpx_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_10BITS : # endif vpx_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_12BITS : # if CONFIG_VP9_HIGHBITDEPTH vpx_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; # endif",0
1455,<S2SV_ModStart> * skb ; message_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1456,"<S2SV_ModStart> mntent, path, 0",0
1457,<S2SV_ModStart> = hash ; sr -> session_started = 0 ;,0
1458,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool construct_get_dest_keyring ( struct key * dest_keyring ) { struct request_key_auth * authkey ; <S2SV_ModStart> ; } else if ( cred -> request_key_auth ) { down_read ( & authkey -> sem ) ; dest_keyring = key_get ( authkey -> dest_keyring ) ; if (! dest_keyring ) goto out ; } break ; case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( cred -> process_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : dest_keyring = key_get ( cred -> user -> session_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : dest_keyring = key_,0
1459,"<S2SV_ModStart> void nonrd_pick_sb_modes ( VP9_COMMON * cm, TileDataEnc * tile_data, MACROBLOCK * const x <S2SV_ModEnd>, int mi_row <S2SV_ModStart> -> e_mbd ; const TileInfo * const tile_info = & tile_data -> tile_info ; <S2SV_ModStart> x -> e_mbd ; xd -> mi [ 0 ] -> mbmi. sb_type = bsize ; if ( frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile_info, x, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } <S2SV_ModEnd> duplicate_mode_info_in_sb ( cm",0
1460,<S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if ( <S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if (,1
1461,<S2SV_ModStart> = NULL ; if ( reader. superblock == NULL ) { reader. superblock = & mysofa_superblock ; } else { reader. superblock = mysofa_superblockCreate ( <S2SV_ModEnd> reader. gcol <S2SV_ModStart> gcol ) ; },0
1462,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1463,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; unsigned long tmp ; count = min_t ( unsigned long, count, sizeof ( ""nnnnn\\0"" ) ) ; <S2SV_ModStart> ( buf, buffer <S2SV_ModEnd>, count )",0
1464,"<S2SV_ModStart> = 1 ; memset ( pMap -> ranges, 0, sizeof ( MappedRange ) ) ;",0
1465,<S2SV_ModStart> ) ) { if ( be16_to_cpu ( dip -> di_nblocks ) > mp -> m_sb. sb_inodesize ) return __this_address ; if ( be32_to_cpu ( dip -> di_nextents ) > be64_to_cpu ( dip -> di_anextents ) ) return __this_address ; if ( be16_to_cpu ( dip -> di_anextents ) > be64_to_cpu ( dip -> di_nblocks ) ) return __this_address ; if ( mode && be32_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) > be64_to_cpu ( dip -> di_blocks ) ) return __this_address ; if ( mode && be16_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) > be64_to_cpu ( dip -> di_anextents ) ) return __this_address ; if ( mode && be32_to_cpu ( dip -> di_nextents ) + be16_to_cpu,0
1466,"<S2SV_ModStart> ret ) return ret ; cnt_x = pixel -> lookup [ x ] ; if ( value >= cnt_x ) cumfr += cnt_x ; else break ; x ++ ; } if ( ( ret = s -> decode ( gb, rc, cumfr, cnt_c, totfr ) ) < 0 ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = value ; totfr += step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 256 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; pixel -> lookup [ i ] = sum ; } for ( i = 0 ; i < 256 ; i ++ ) { unsigned sum = 0 ; unsigned",0
1467,"<S2SV_ModStart> = jas_tvparser_getval ( tvp ) ; if (! jas_safe_size_mul3 ( <S2SV_ModEnd> cmpt -> width <S2SV_ModStart> -> width, <S2SV_ModEnd> cmpt -> height <S2SV_ModStart> height ) ; if (! jas_safe_size_mul3 ( <S2SV_ModEnd> cmpt -> prec <S2SV_ModStart> -> prec, <S2SV_ModEnd> cmpt -> data <S2SV_ModStart> -> data ) ) { goto error ; } if (! jas_safe_size_mul3 ( <S2SV_ModEnd> cmpt -> data <S2SV_ModStart> -> data ) ) { jas_tvparser_free ( tvp ) ; goto error ; } if (! jas_safe_size_mul3 ( <S2SV_ModEnd> cmpt -> width <S2SV_ModStart> -> height, <S2SV_ModEnd> cmpt -> width <S2SV_ModStart> -> width ) ; if (! jas_safe_size_mul3 ( <S2SV_ModEnd> cmpt -> data <S2SV_ModStart> -> data ) ) { goto error ; } if (! jas_safe_size_mul3 ( <S2SV_ModEnd> cmpt -> data <S2SV_ModStart> -> data ) ) { jas_tvparser_free ( tvp ) ; goto error ; }",0
1468,"<S2SV_ModStart> ; if ( flags & ( VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; vp8_use_as_reference ( ctx -> cpi, ref ) ;",0
1469,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
1470,<S2SV_ModStart> event ) ; WARN_ON_ONCE (! head ) ; <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
1471,"<S2SV_ModStart>, const u_char * pptr <S2SV_ModEnd>, u_int len <S2SV_ModStart> case BGP_AIGP_TLV : if ( len < BGP_AIGP_TLV_LEN + 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_AIGP_TLV : if ( len < BGP_AIGP_TLV_LEN + 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_AIGP_TLV_TLV : if ( len < BGP_AIGP_TLV_LEN + 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_AIGP_TLV : if ( len < BGP_AIGP_TLV_LEN + 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_AIGP_TLV_TLV : if ( len < BGP_AIGP_TLV_LEN + 4 ) { ND_PRINT ( ( ndo",0
1472,"<S2SV_ModStart> -> outputbuffer, ""<table <S2SV_blank> id=\'daemon-status-table\'><tr>"" ""<td>Environment <S2SV_blank> name</td>"" ""<td>%s</td>"", Run. Env. name ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Host <S2SV_blank> id</td><td>%d</td></tr>"", Run. system -> name ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Pidfile</td><td>%d</td></tr>"", Run. files. pid ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Controlfile <S2SV_blank> file</td><td>%s</td></tr>"", Run. files. control ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Logfile</td><td>%d</td></tr>"", Run. files. log ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Pidfile</td><td>%d</td></tr>"", Run. files. pid ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>State <S2SV_blank> file</td><td>%s</td></tr>"", Run. files.",0
1473,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
1474,"<S2SV_ModStart> ( uint16_t ) constr1 [ 0 ], sizeof ( constr1 ) <S2SV_ModStart> ( uint16_t ) constr2 [ 0 ], sizeof ( constr2 ) <S2SV_ModEnd> ) ; bn_from_bytes <S2SV_ModStart> ( uint16_t ) constr1 [ 0 ], sizeof ( constr1 ) <S2SV_ModEnd> ) ; bn_from_bytes <S2SV_ModStart> ( uint16_t ) constr2 [ 0 ], sizeof ( constr2 ) <S2SV_ModEnd> ) ; bn_from_bytes <S2SV_ModStart> ( uint16_t ) constr1 [ 1 ], sizeof ( constr1 ) <S2SV_ModEnd> ) ; bn_from_bytes <S2SV_ModStart> ( uint16_t ) constr2 [ 1 ], sizeof ( constr2 ) <S2SV_ModEnd> ) ; bn_from_bytes <S2SV_ModStart> ( uint16_t ) constr1 [ 0 ], sizeof ( constr1 ) <S2SV_ModEnd> ) ; bn_from_bytes <S2SV_ModStart> tokbuf ) ; if ( bn_from_bytes ( bn_from_bytes ( bn_from_bytes ( bn_from_bytes ( bn_from_bytes ( bn_from_bytes (",0
1475,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1476,"<S2SV_ModStart> iovec, compat, & iter <S2SV_ModStart> iter_op ) { ret = iter_op ( req, iter ) ; if ( ret ) goto error ; } <S2SV_ModStart> iter_op ) { ret = iter_op ( req, iter ) ; if ( ret ) goto error ; } ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if ( ret < 0 ) { if ( iovec!= inline_vecs ) kfree ( iovec ) ; return ret ; } ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if ( ret < 0 ) { if ( iovec!= inline_vecs ) kfree ( iovec ) ; return ret ; } ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if ( ret < 0 ) { if ( iovec!= inline_vecs ) kfree ( iovec ) ; return ret ; } ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if ( ret < 0 ) { if ( iovec!= inline_vecs ) kfree (",0
1477,"<S2SV_ModStart> ; if ( ptr - c -> rcurr > 100 || ( strncmp ( ptr, ""get <S2SV_blank> "", 4 ) && strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "", 4 ) ) { if ( strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "", 5 ) ) { if ( strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "", 5 ) ) { if ( strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "", 5 ) ) { if ( strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "", 5 ) ) { if ( strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "", 5 ) ) { if ( strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "", 5 ) ) { if ( strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "", 5 ) ) { if ( strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "", 5 ) ) { if ( strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "" ) ) { if ( strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "", 6 ) )",0
1478,"<S2SV_ModStart> USB_DT_OTG, ( struct usb_otg_descriptor * <S2SV_ModStart> ) & desc ) ; if ( err ||! ( desc -> bmAttributes & USB_OTG_HNP ) ) { dev_err ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %s <S2SV_blank> hnp <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; } else if ( port1 == bus -> otg_port ) { err = usb_control_msg ( udev, 0, USB_REQ_SET_FEATURE, 0, USB_DEVICE_B_HNP_ENABLE, 0, NULL, 0, USB_CTRL_SET_TIMEOUT ) ; if ( err < 0 ) { dev_err ( & udev -> dev, ""can\'t <S2SV_blank> set <S2SV_blank> HNP <S2SV_blank> mode: <S2SV_blank> %d\\n"", err ) ; bus -> b_hnp_enable = 0 ; } else { err = usb_control_msg ( udev, 0, USB_REQ_SET_FEATURE, 0, USB_DEVICE_B_HNP_ENABLE",0
1479,"<S2SV_ModStart> USB_MAXINTERFACES ) ; if ( config -> desc. bNumInterfaces < 1 ) { dev_err ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; } else if ( config -> desc. bNumInterfaces == 1 ) { dev_err ( ddev, ""config <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, config -> desc. bNumInterfaces ) ; nintf = USB_MAXINTERFACES ; } else if ( config -> desc. bNumInterfaces < nintf ) { dev_err ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, config -> desc. bNumInterfaces ) ; nintf = USB_MAXINTERFACES ; }",0
1480,<S2SV_ModStart> ; if ( card -> user_ctl_count >= MAX_USER_CONTROLS ) { ret <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1481,"<S2SV_ModStart> client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) { exit_client ( client_p, client_p, client_p, ""Malformed <S2SV_blank> AUTHENTICATE""",1
1482,"<S2SV_ModStart> OpMask ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> -> _eip ; rc = __x86_emulate_memopp ( ctxt, & opcode, ctxt -> memopp, true ) ; if ( rc!= X86EMUL_CONTINUE ) return rc <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> _eip ; rc = __x86_emulate_memopp ( ctxt, & opcode, ctxt -> memopp, true ) ; if ( rc!= X86EMUL_CONTINUE ) return rc <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> _eip ; rc = __x86_emulate_memopp ( ctxt, & opcode, ctxt -> memopp, true ) ; if ( rc!= X86EMUL_CONTINUE ) return rc <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> _eip ; rc = __x86_emulate_memopp ( ctxt, & opcode, ctxt -> memopp, true ) ; if ( rc!= X86EMUL_CONTINUE ) return rc <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> _eip ; rc = __x86_emulate_memopp ( ctxt, & opcode, ctxt -> memopp, true ) ; if ( rc!= X86EMUL",0
1483,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
1484,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1485,"<S2SV_ModStart> 16 ) ; sse = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & error16x16 ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; this_rd = RDCOST ( x -> rdmult, x -> rddiv, rate, distortion ) ; if ( error16x16 > this_rd ) { error16x16 = this_rd ; best_mode = mode ; best_sse = sse ; } } xd -> mode_info_context -> mbmi. mode = B_PRED ; error4x4 = pick_intra4x4mby_modes ( x, & rate, & best_rate ) ; if ( error4x4 < error16x16 ) { xd -> mode_info_context -> mbmi. mode = B_PRED ; best_rate = best_rate ; }",0
1486,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 ) ; interface -> macAddr. w [ 0 ] = 0 ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR2 ) ; interface -> macAddr. w [ 1 ] = 0 ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR3 ) ; interface -> macAddr. w [ 2 ] = 0 ; temp = htole16 ( interface -> macAddr. w [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR1, temp ) ; temp = htole16 ( interface -> macAddr. w [ 1 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR2, temp ) ; temp = htole16 ( interface -> macAddr. w [ 2 ] ) ; enc624",0
1487,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; start = ( ( char * ) psf -> header ) + strlen ( format ) ; maxlen = va_start ( argptr, format ) ; maxlen = sizeof ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header ) - start <S2SV_ModEnd> ; va_end ( <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1488,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
1489,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> cg_wlock ( & <S2SV_ModStart> ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ;,0
1490,<S2SV_ModStart> alg_priv ) { vpx_alg_destroy_priv <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> -> destroy ( ( vpx_alg_destroy_priv_t * ) <S2SV_ModStart> priv -> alg_priv ) ; } else { vpx_alg_destroy_priv ( ( vpx_alg_destroy_priv_t * ) <S2SV_ModStart> iface -> destroy ( ( vpx_alg_destroy_priv_t * ) <S2SV_ModStart> priv -> alg_priv <S2SV_ModEnd> ) ; ctx,0
1491,<S2SV_ModStart> case EXIT_REASON_VMON : case EXIT_REASON_INVEPT :,1
1492,"<S2SV_ModStart> speed ) { memset ( sf, 0, sizeof ( SPEED_FEATURES ) ) ; <S2SV_ModStart> 1 ) { <S2SV_ModEnd> sf -> use_square_partition_only <S2SV_ModStart> ; sf -> less_rectangular_check = 1 ; sf -> tx_size_search_method = vp9_frame_is_boosted ( cpi )? USE_FULL_RD : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; else sf -> disable_split_mask = DISABLE_ALL_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; } <S2SV_ModEnd> if ( speed <S2SV_ModStart> 2 ) { <S2SV_ModEnd> sf -> tx_size_search_method <S2SV_ModStart> : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = DISABLE_ALL_INTER_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; else sf -> mode_skip_start = 10 ; sf -> adaptive_pred_interp_filter =",0
1493,"<S2SV_ModStart> ; dh = skb_header_pointer ( skb, dataoff, sizeof ( _dh ), & dh ) ; BUG_ON ( dh == NULL ) ; type = dh -> dccph_type ; if ( type == DCCP_PKT_RESET ) { nf_ct_kill_acct ( ct, ctinfo, skb ) ; return NF_ACCEPT ; } spin_unlock_bh ( & ct -> lock ) ; break ; case CT_DCCP_TIMEWAIT : if ( old_state == CT_DCCP_RESPOND ) ct -> proto. dccp. handshake_seq = dccp_hdr_seq ( dh ) ; else set_bit ( IPS_ASSURED_BIT, & ct -> status ) ; break ; case CT_DCCP_TIMEWAIT : if ( old_state == CT_DCCP_RESPOND ) ct -> proto. dccp. role [! dir ] = CT_DCCP_ROLE_SERVER ; if ( old_state == CT_DCCP_RESPOND ) ct -> proto. dccp. handshake_seq = dccp_hdr_seq ( dh ) ;",0
1494,"<S2SV_ModStart> struct compat_timex ) ; memset ( & txc -> tx32, 0, sizeof ( txc -> tx32 ) ) ;",0
1495,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. poll_count ),0
1496,<S2SV_ModStart> ; int goodsize ; if ( inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK,0
1497,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1498,"<S2SV_ModStart>, * s = STR ( CHILD ( n, 0 ) ) ; int quote <S2SV_ModEnd> = Py_CHARMASK ( <S2SV_ModStart> * s = """" <S2SV_ModEnd> ; char buf <S2SV_ModStart> ( errstr ) { char buf [ 128 ] ; s = _PyUnicode_AsString ( errstr ) ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", s ) ; ast_error ( n, buf ) ; Py_DECREF ( errstr ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; return NULL ; } # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { PyErr_Fetch ( & type, & value, & tback ) ; errstr = PyObject_Str ( value ) ; if ( errstr ) { char * s = """" ; char * buf = _PyUnicode_AsString ( errstr ) ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" )",0
1499,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> } if ( ( option_name == NULL ) || ( option_name [ strlen ( ""encoding-mode"" ) ]!= '=' ) ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> name <S2SV_blank> missing <S2SV_blank> value: <S2SV_blank> %s\\n"", option_name ) ; res = VPX_CODEC_INVALID_PARAM ; break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { res = parse_layers ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK )",0
1500,<S2SV_ModStart> event ) ; WARN_ON_ONCE (! head ) ; <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
1501,<S2SV_ModStart> 0 ) { const char * t ; <S2SV_ModStart> s ++ ; <S2SV_ModEnd> if ( * <S2SV_ModStart> * t &&! isdigit ( ( unsigned char ) <S2SV_ModStart> ) ) t ++ ; if (! isdigit ( ( unsigned char ) t ) ) { <S2SV_ModStart> t ) ) { if (! isdigit ( ( unsigned char ) t ) ) { free ( font_name ) ; font_name = ( char * ) malloc ( 1 ) ; } else { free ( font_name ) ; font_name = ( char * ) malloc ( 1 ) ; } if (! isdigit ( ( unsigned char ) t ) ) { free ( font_name ) ; font_name = ( char * ) malloc ( 1 ) ; } if (! isdigit ( ( unsigned char ) t ) ) { free ( font_name ) ; font_name = ( char * ) malloc ( 1 ) ; font_name = ( char * ) malloc ( 1 ) ; } else if (! isdigit ( ( unsigned char ) t ) ) { free ( font_name ) ; font_name = ( char * ) malloc ( 1 ) ; } else { free ( font_name ) ; font_name = ( char * ) malloc ( 1 ) ),0
1502,<S2SV_ModStart> ; if ( entry == NULL ) return EINVAL ; if ( <S2SV_ModStart> KADM5_POLICY ) && entry -> policy == NULL <S2SV_ModEnd> ) return KADM5_BAD_MASK <S2SV_ModStart> ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK <S2SV_ModEnd> ; if (,1
1503,<S2SV_ModStart> frame -> data [ plane ] && frame -> linesize <S2SV_ModStart> [ plane ] && frame -> linesize [ plane ],1
1504,"<S2SV_ModStart> ) ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""Mbs <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. mb_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs,",0
1505,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
1506,,1
1507,<S2SV_ModStart> R_ANAL_OP_TYPE_EQ ) ; r_strbuf_init <S2SV_ModEnd> ( & op <S2SV_ModStart> R_ANAL_OP_TYPE_EQ ) ; r_strbuf_init <S2SV_ModEnd> ( & op <S2SV_ModStart> R_ANAL_OP_TYPE_EQ ) ; if ( op -> type == R_ANAL_OP_TYPE_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_EQ_,0
1508,<S2SV_ModStart> ) ) { <S2SV_ModEnd> do_error ( dbh,0
1509,"<S2SV_ModStart> ( flags & ( SOCK_THREAD_FD_RD | SOCK_THREAD_FD_WR ) <S2SV_ModEnd> ) || ( <S2SV_ModStart> size ) == 0 <S2SV_ModEnd> ) pthread_mutex_unlock ( <S2SV_ModStart> slot_lock ) ; BTA_JvRfcommRead ( slot -> rfc_handle, slot -> id ) ; } else if ( flags & SOCK_THREAD_FD_WR ) { if (! slot -> f. connected ||! flush_incoming_que_on_wr_signal ( slot ) ) { LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for <S2SV_blank> write <S2SV_blank> while <S2SV_blank> disconnected <S2SV_blank> (or <S2SV_blank> write <S2SV_blank> failure), <S2SV_blank> slot: <S2SV_blank> %d, <S2SV_blank> channel: <S2SV_blank> %d"", __func__, slot -> id, slot -> scn ) ; need_close = true ; } } else if ( flags & SOCK_THREAD_FD_WR ) { if (! slot -> f. connected ||! flush_incoming_que_on_wr_signal ( slot ) ) { LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for <S2SV_blank> write <S2SV_blank> while <S2SV_blank> disconnected <S2SV_blank> (or <S2SV_blank> write <S2SV_blank> failure), <S2SV_blank> slot: <S2SV_blank> %d, <S2SV_blank> channel: <S2SV_blank> %",0
1510,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; struct ieee_802_11_hdr * hdr <S2SV_ModStart> struct ieee_802_11_phdr phdr ; if ( len_remain < sizeof ( struct ieee_802_11_hdr ) - sizeof ( struct ieee_802_11_hdr ) - sizeof ( struct ieee_802_11_hdr ) - sizeof ( struct ieee_802_11_hdr ) { hdr = ( struct ieee_802_11_phdr * ) tvb_copy_bits ( tvb, offset, sizeof ( struct ieee_802_11_phdr ) - sizeof ( struct ieee_802_11_hdr ) - sizeof ( struct ieee_802_11_hdr ) - sizeof ( struct ieee_802_11_hdr ) - sizeof ( struct ieee_802_11_hdr ) - sizeof ( struct ieee_802_11_hdr ) - sizeof ( struct ieee_802_11_hdr ) - sizeof ( struct ieee_802_11_hdr ) - sizeof ( struct ieee_802",0
1511,<S2SV_ModStart> ; sh = s_malloc0 <S2SV_ModEnd> ( hdrlen +,0
1512,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; if (! context ) return FALSE <S2SV_ModStart> ; } } return TRUE ;,0
1513,<S2SV_ModStart> while ( offset > 0 && offset <S2SV_ModStart> < end_offset ) { <S2SV_ModStart> hf_keybuffer ) ; },1
1514,"<S2SV_ModStart> > nr_parens ) { kfree ( op_stack ) ; <S2SV_ModStart> - EINVAL ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; }",0
1515,<S2SV_ModStart> cpi ) { RATE_CONTROL * const rc = & cpi -> rc ; int kf_boost <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) { target = ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> > INT_MAX ) <S2SV_ModStart> > INT_MAX )? cpi -> oxcf. starting_buffer_level / 2 : ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) ; } else { target = ( ( cpi -> oxcf. starting_buffer_level / 2 ) > INT_MAX? INT_MAX : ( cpi -> oxcf. starting_buffer_level / 2 ) )? cpi -> oxcf. starting_buffer_level / 2 : ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) ; } else { target = ( cpi -> oxcf. starting_buffer_level / 2 ) ; } if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / cpi -> output_framerate ) ; },0
1516,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1517,"<S2SV_ModStart> * pegasus, u8 * buf, u16 size ) { u8 * buf ; int ret ; buf = kmemdup ( buf, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
1518,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_bit_t <S2SV_ModEnd> read_tx_mode ( vpx_reader <S2SV_ModStart> r ) { vpx_bit_t <S2SV_ModEnd> tx_mode = vp9_read_literal <S2SV_ModStart> 2 ) ; vpx_bit_t <S2SV_ModEnd> tx_mode = vp9_read_bit <S2SV_ModStart> == ALLOW_32X32 ) vpx_read_bit <S2SV_ModEnd> ( r ) <S2SV_ModStart> tx_mode += vpx_read_bit <S2SV_ModEnd> ( r ),0
1519,<S2SV_ModStart> op + OSPF6HDR_LEN ) ; ND_TCHECK_32BITS ( & hellop -> hello_options,1
1520,<S2SV_ModStart> { if ( datalen!= 1 ) return - EINVAL ; if (,1
1521,"<S2SV_ModStart> rc ) { struct task_struct * <S2SV_ModEnd> task = kthread_run <S2SV_ModStart> ; if ( IS_ERR ( task ) ) { <S2SV_ModStart> uwbd. task = NULL ; <S2SV_ModEnd> printk ( KERN_ERR <S2SV_ModStart> ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; } else { rc -> uwbd. task = task ; <S2SV_ModEnd> rc -> uwbd <S2SV_ModStart> pid ; } }",1
1522,"<S2SV_ModStart> : # line 101 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). class_vector ) ) ; } # line 1046 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 102 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1048 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 103 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1054 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 104 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1054 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 107 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1055 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> :",0
1523,<S2SV_ModStart> : idx ; if ( ptr >= gfx -> backendDataLength ) { ptr = ( char * ) gfx -> backendData ; ptr = ( char * ) gfx -> backendData ; } <S2SV_ModStart> : idx ; if ( ptr >= gfx -> backendDataLength ) { ptr = ( char * ) gfx -> backendData ; ptr = ( char * ) gfx -> backendData ; },0
1524,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const x = & cpi -> td. plane [ plane ] ; MACROBLOCKD * const xd = & x -> xd <S2SV_ModEnd> ; TOKENEXTRA * <S2SV_ModStart> 32 ] ; MACROBLOCK * const p = & x -> mb. plane [ plane ] ; MB_MODE_INFO * mbmi = & x -> mbmi [ 0 ] -> mbmi ; int pt ; int c ; int e ; const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const int ref = is_inter_block ( mbmi ) ; const int fc_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; unsigned int ( * const eob_branch ) [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ] [ type ] [ ref ] ; const uint8_t * const band = get_band_translate ( tx_size ) ; const int",0
1525,<S2SV_ModStart> pSelect -> pSrc ; if ( pSelect -> selFlags & SF_View ) return WRC_Prune,1
1526,<S2SV_ModStart> { if ( ( <S2SV_ModStart> shmflg & SHM_RND ) && addr >= shmlba,1
1527,"<S2SV_ModStart> ) ; serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; if (! serv ) { dprintk ( ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; }",0
1528,"<S2SV_ModStart> point, const CurveZZ_p curve ) { PointZZ_p R0, R1, tmp ; mpz_set ( R0. x, R0. x ) ; mpz_set ( R0. y, R1. y ) ; mpz_set ( R1. x, R1. x ) ; mpz_set ( R1. y, R1. y ) ; pointZZ_pDouble ( & R0, & tmp, curve ) ; for ( i = dbits - 1 ; i >= 0 ; i -- ) { if ( mpz_tstbit ( scalar, i ) ) { if ( mpz_tstbit ( scalar, i ) ) { mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R0. y ) ; mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R0. y ) ; pointZZ_pDouble ( & R1, & tmp, curve ) ; } else { mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R",0
1529,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1530,<S2SV_ModStart> : case NPNVSupportsWindowless : case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling,1
1531,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
1532,<S2SV_ModStart> s ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ),0
1533,"<S2SV_ModStart> xIter = crm_first_attr <S2SV_ModEnd> ( xml ) <S2SV_ModStart> -> name ; if ( strlen ( <S2SV_ModEnd> xIter -> name <S2SV_ModStart> -> name ) == 0 ) continue ; if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ) ) ; break ; } else if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ) ) ; break ; } else { char * path = xml_get_path ( xml ) ; free ( path ) ; return ; } <S2SV_ModEnd> while (",0
1534,"<S2SV_ModStart> { if ( l_strcmp <S2SV_ModEnd> ( fname, <S2SV_ModStart> fname, "".html"" ) == 0 ) { L_ERROR ( ""fname <S2SV_blank> not <S2SV_blank> found\\n"" ) ; return 1 ; } if ( l_strcmp <S2SV_ModEnd> ( fname, <S2SV_ModStart> fname, "".htm"" ) == 0 ) { L_ERROR ( ""fname <S2SV_blank> not <S2SV_blank> found\\n"" ) ; return 1 ; } if ( l_strcmp <S2SV_ModEnd> ( fname, <S2SV_ModStart> fname, "".htm"" ) == 0 ) { L_ERROR ( ""fname <S2SV_blank> not <S2SV_blank> found\\n"" ) ; return 1 ; } if ( <S2SV_ModStart> fname, "".html"" ) == 0 ) { L_ERROR ( ""fname <S2SV_blank> not <S2SV_blank> found\\n"" ) ; return 1 ; } if ( l_strcmp <S2SV_ModEnd> ( fname, <S2SV_ModStart> fname, "".htm"" ) == 0 ) { L_ERROR ( ""fname <S2SV_blank> not <S2SV_blank> found\\n"" ) ; return 1 ; } if ( <S2SV_ModStart> fname, "".htm"" ) == 0 ) { L_ERROR ( ""fname <S2SV_blank> not <S2SV_blank> found\\n"" ) ; return 1 ; } if ( l_strcmp ( fname, "".htm"" ) == 0 ) { L_ERROR ( ""fname <S2SV_blank> not <S2SV_blank> found\\",0
1535,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> NULL ; return ( SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,0
1536,"<S2SV_ModStart> mq_flush_lock, flags ) ; fq -> flush_rq = flush_rq",0
1537,"<S2SV_ModStart> s ) { uint32 length ; struct stream packet = * s ; struct stream packet = * s ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> params <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> params <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
1538,"<S2SV_ModStart> ; } } if ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_index_exists ( params, hkey. num ) ) { Z_ADDREF_PP ( ptr ) ; MAKE_STD_ZVAL ( tmp ) ; array_init ( tmp ) ; add_assoc_zval_ex ( tmp, ZEND_STRS ( ""value"" ), * ptr ) ; * current_param = tmp ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. num, sizeof ( hkey. num ), ( void * ) & tmp, sizeof ( hkey. str ), ( void * ) & tmp ) ; * current_args = tmp ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. num, hkey. len, ( void * ) & tmp, sizeof ( hkey. str ), ( void * ) & tmp, sizeof ( hkey. len ), ( void * ) & tmp ), ( void * ) & ptr, sizeof ( hkey.",0
1539,"<S2SV_ModStart> char buffer [ 79 <S2SV_ModEnd> ] ; int <S2SV_ModStart> ; _y4m -> vpx_fmt = VPX_IMG_FMT_I420 <S2SV_ModEnd> ; if ( <S2SV_ModStart> _y4m -> chroma_fmt <S2SV_ModEnd> = VPX_IMG_FMT_I420 ; <S2SV_ModStart> _y4m -> chroma_bps <S2SV_ModEnd> = 12 ; <S2SV_ModStart> ; if ( only_420 ) { _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; } else { _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; } if (! _y4m -> vpx_fmt ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format; <S2SV_blank> assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; } if (! _y4m -> vpx_fmt ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format; <S2SV_blank> "" ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; } _y4m ->",0
1540,"<S2SV_ModStart> buf ) { char * tmp ; if ( strlen ( buf ) >= 60 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } tmp = kstrdup ( buf, GFP_ATOMIC ) ; if ( tmp == NULL ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
1541,"<S2SV_ModStart> long long directory_table_end <S2SV_ModEnd>, table_start ; <S2SV_ModStart> 0 ) return FALSE <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( read_inode_table ( & sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( & sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; <S2SV_ModStart> TRUE ; } return TRUE ;",0
1542,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> createenv ( const <S2SV_ModStart> rule ) { return false ; } <S2SV_ModEnd> if ( rule <S2SV_ModStart> count = 0 ; if (! ( rule -> options & KEEPENV ) ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; size_t len ; char keybuf [ 1024 ] ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } } else { env -> count ++ ; } }",0
1543,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
1544,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; vp9_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_enable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vpx_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vpx_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; } } } else { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> base_qindex, cm -> in_frame_q_adj_ratio [ segment ] ) ; vpx",0
1545,"<S2SV_ModStart> ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 5 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"", stmt_type, ClassDef_fields, 5 ) ; if (! ClassDef_type ) return 0",0
1546,"<S2SV_ModStart> ) ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_TRUNC, S_IRUSR | S_IWUSR | S_IWGRP | S_IROTH ) <S2SV_ModStart> } write ( TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry, ""btsnoop\\0\\0\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"", 16 ) ; TEMP_FAILURE_RETRY_RETRY_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_",0
1547,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ; break ; } while ( context -> pass > 0 && context -> pass < 4 && context -> curY >= p -> height ) { switch ( ++ context -> pass ) { case 2 : context -> curY = i -> posY + 4 ; break ; case 3 : context -> curY = i -> posY + 2 ; break ; case 4 : context -> curY = i -> posY + 1 ; break ; },1
1548,<S2SV_ModStart> ) ; } ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ;,0
1549,"<S2SV_ModStart> ) ; } smb_ofile_flush <S2SV_ModEnd> ( sr, <S2SV_ModStart> f_mutex ) ; smb_ofile_flush <S2SV_ModEnd> ( sr,",1
1550,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * s, int maxlen, wchar_t <S2SV_ModEnd> * pwcs ) <S2SV_ModStart> - EINVAL ; op = pwcs ; <S2SV_ModStart> >= PLANE_SIZE ) { <S2SV_ModStart> -= PLANE_SIZE ; <S2SV_ModEnd> * op ++ <S2SV_ModStart> * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u >> 10 ) & SURROGATE_BITS ) ; } s += size ; len -= size ; } else { * op ++ = ( wchar_t ) u ; } op += size ; len -- ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1551,<S2SV_ModStart> ; if ( <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ) == 0 && <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ) == 0 && <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ) == 0 && <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ) == 0 && <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ) == 0 && <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ) == 0 && <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ) == 0 && <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ) == 0 && <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ) == 0 && <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ) == 0 && <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ) == 0 && <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ) == 0 && <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ) == 0 && <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ) == 0 && <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ) == 0 && <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ) == 0 && <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ) == 0 && <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ) == 0 && <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ) == 0 && <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ) == 0,0
1552,"<S2SV_ModStart> cinput ) { int <S2SV_ModStart>, * s, * t, * StartClean <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> ; s = cinput ; t = s ; while ( * s!= '[' ) s ++ ; t ++ ; * t ++ = 0 ; * t ++ = 0 ; <S2SV_ModStart> ++ ; outpos = outputbuffer ; outpos += sprintf ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", s, t, TERMCHAR ) ; if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; if ( argbuf ) free ( argbuf ) ; return ( - 1 ) ; } } StartClean = outpos ; nameobject = t ; while ( * t",0
1553,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : * ( size_t * ) val = ms -> elf_notes_max ; return 0 ;,1
1554,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart> id ; net_get_random_once <S2SV_ModEnd> ( & ip_idents_hashrnd <S2SV_ModStart> sizeof ( ip_idents_hashrnd <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ; hash = jhash_3u32 <S2SV_ModEnd> ( ( __force <S2SV_ModStart> iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs <S2SV_ModEnd> ) ; id",0
1555,"<S2SV_ModStart> expr_ty step ; size_t size ; <S2SV_ModStart> int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_lower ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( exists_not_none ( obj, & PyId_upper ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_upper ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( exists_not_none ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper, step, arena ) ;",0
1556,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
1557,"<S2SV_ModStart> ctl -> pw, "".chfn""",1
1558,<S2SV_ModStart> { if ( max_length < sizeof ( struct ieee80211_radiotap_header ) ) return - EINVAL ; if ( <S2SV_ModStart> iterator -> _rtheader + sizeof ( uint32_t ),1
1559,"<S2SV_ModStart> int err ; struct list_head dscp_map ; <S2SV_ModStart> extack ) ) goto err_free <S2SV_ModEnd> ; tos_off = <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; nfp_abm_u32_knode_delete ( alink, knode ) ; return - EOPNOTSUPP ; } list_for_each_entry ( iter, & dscp_map, list ) { u32 cmask ; if ( ( iter -> val & cmask ) == ( val & cmask ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_free ; } } match -> handle = knode -> handle ; match -> band = knode -> res -> classid ; match -> mask = mask ; match -> val = val ; err = nfp_abm_update_band_map ( alink ) ; if ( err ) goto err_free ;",0
1560,"<S2SV_ModStart> = NULL ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) return - ENOMEM ; dst_state -> frame [ i ] = dst ; } err = copy_func_state ( dst, src -> frame [ i ] ) ; if ( err ) return err ; dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } err = copy_func_state ( dst, src -> frame [ i ] ) ; if ( err ) return err ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst",0
1561,"<S2SV_ModStart> return ; } if ( input <= 0.0 || output <= 0.0 ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Gamma <S2SV_blank> values <S2SV_blank> should <S2SV_blank> be <S2SV_blank> positive"" ) ; RETURN_FALSE ; }",1
1562,"<S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } <S2SV_ModEnd> stream -> config <S2SV_ModStart>. g_pass = pass? VPX_RC_LAST_PASS : VPX_RC_FIRST_PASS ; <S2SV_ModEnd> stream -> config <S2SV_ModStart>. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ;",0
1563,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
1564,"<S2SV_ModStart> ) ) { g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s.%s"", tmpfile_name, g_key_file_get_filename ( keyfile ) ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s.%s"", tmpfile_name, g_key_file_get_filename ( keyfile ) ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s.%s"", tmpfile_name, g_key_file_get_filename ( keyfile ) ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s.%s"", tmpfile_name, g_key_file_get_filename ( keyfile ) ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s.%s"", tmpfile_name, g_key_file_get_filename ( keyfile ) ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""export-desktop-XXXXXX"", tmpfile",0
1565,"<S2SV_ModStart> data_end ) { const VP9EncoderConfig <S2SV_ModEnd> * const cm <S2SV_ModStart>, tile_col ; <S2SV_ModEnd> int tile_rows = <S2SV_ModStart> 6 ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ; vpx_reader r ; memset <S2SV_ModEnd> ( tile_buffers [ <S2SV_ModStart> tile_row ) { memset <S2SV_ModEnd> ( tile_buffers [ <S2SV_ModStart> tile_col ) { memset <S2SV_ModEnd> ( tile_buffers [ <S2SV_ModStart> tile_buffers [ tile_row ] [ tile_col ], 0, sizeof ( * tile_buffers [ tile_row ] [ tile_col ] ) ; } } for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) { const int last_tile = tile_row == tile_rows - 1 && tile_col == tile_cols - 1 ; const size_t size = get_tile ( data_end, last_tile, & cm -> error, & data ) ; TileBuffer * const buf = & tile_buffers [ tile_row ] [ tile_col ] ; buf -> data = data ; buf -> size = size ; } } for (",0
1566,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9Decoder * vpx_decoder_create ( const VP9D_CONFIG * oxcf ) { VP9Decoder * const pbi = vpx_memalign ( 32, sizeof ( * pbi ) ) ; VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if (! pbi ) return NULL ; vpx_zero ( * pbi ) ; if ( setjmp ( cm -> error. setjmp ) ) { cm -> error. setjmp = 0 ; vpx_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vpx_initialize_dec ( ) ; vpx_rtcd ( ) ; vpx_memset ( & pbi -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; pbi -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; vpx_init_dequantizer ( cm ) ;",0
1567,"<S2SV_ModStart> -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> ) ) -> box_type = GF_ISOM_BOX_TYPE_DREF ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1568,"<S2SV_ModStart> -> priv -> remote_auth_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_remote_auth_timeout, client ) ;",0
1569,<S2SV_ModStart> -> count ; new_fpl -> user = get_uid ( fpl -> user ) ;,1
1570,"<S2SV_ModStart> req ) { <S2SV_ModEnd> struct inet_request_sock * <S2SV_ModStart> * opt ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( req -> rsk_opt, sock_owned_by_user ( req ), 1 ) ; if ( inet_opt <S2SV_ModEnd> == NULL || <S2SV_ModStart> == NULL || inet_opt <S2SV_ModEnd> -> cipso ==",0
1571,"<S2SV_ModStart> void tree2tok ( vpx_token <S2SV_ModEnd> * tokens, <S2SV_ModStart> { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> i ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tree2tok ( tokens, tree, i, v, l ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1572,"<S2SV_ModStart> ; if (! ( flags & VP8_EFLAG_NO_REF_LAST ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_UPD_LAST | VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF ) ) { int upd = 7 ; if ( flags & VP8_EFLAG_NO_UPD_LAST ) upd ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_UPD_GF ) upd ^= VP9_GOLD_FLAG ; if ( flags & VP8_E",0
1573,"<S2SV_ModStart> -> wqh ) ; init_waitqueue_func_entry ( & ctx -> wqe, timerfd_wakeup ) ;",0
1574,"<S2SV_ModStart> ) ; struct mnt_namespace * ns = dest_mnt -> mnt_ns ; struct <S2SV_ModStart> int err ; hlist_node * n ; <S2SV_ModStart> ( dest_mnt ) ) { err = invent_group_ids ( source_mnt, true ) ; if ( err ) goto out ; propagate_mnt ( dest_mnt, dest_mp, source_mnt, & tree_list ) ; } else { err = propagate_mnt ( dest_mnt, dest_mp, source_mnt, & tree_list ) ; } if ( parent_path ) { mnt_set_mountpoint ( dest_mnt, parent_path ) ; detach_mnt ( source_mnt, parent_path ) ; } else { mnt_set_mountpoint ( dest_mnt, dest_mp, source_mnt ) ; } unlock_mount_hash ( ) ; <S2SV_ModStart> ; out : hlist_for_each_entry_safe ( child, n, & tree_list, mnt_hash ) { struct mount * q ; hlist_del_init ( & child -> mnt_hash ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt,",0
1575,"<S2SV_ModStart>, & len, 0",1
1576,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = pair_set_epi16 ( cospi_21_64, - cospi_21_64 ) ; const __m128i k__cospi_p05_p21 = pair_set_epi16 ( cospi_27_64, - cospi_5_64 ) ; const __m128i k__cospi_p05_m21 = pair_set_epi16 ( cospi_27_64, - cospi_5_64 ) ; const __m128i k__cospi_p23_p09 = pair_set_epi16 ( cospi_23_64, - cospi_9_64 ) ; const __m128i k__cospi_p17_p15 = pair_set_epi16 ( cospi_17_64, - cospi_15_64 ) ; const __m128i k__cospi_p17_m17 = pair_set_epi16 ( cospi_17_64, - cospi_17_64 ) ; const __m128i k__cospi_p",0
1577,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int frame_max_bits ( const RATE_CONTROL * rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) rc -> avg_frame_bandwidth <S2SV_ModEnd> * ( (",0
1578,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
1579,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> NULL ) { if ( fout == NULL ) return ;,0
1580,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int encode_superblock ( VP9_COMMON * cm, MACROBLOCK * x, <S2SV_ModEnd> int mi_row, <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModStart> x = & x -> e_mb ; MACROBLOCKD * const xd = & x -> e_mbd ; <S2SV_ModStart> -> mbmi ; const int mi_height = num_8x8_blocks_wide_lookup [ mi_height ] ; const int mi_width = num_8x8_blocks_high_lookup [ mi_width ] ; const int mi_height = num_8x8_blocks_high_lookup [ mi_height ] ; const int segment_id = cpi -> oxcf. aq_mode == COMPLEXITY_AQ && cpi -> oxcf. aq_mode!= CYCLIC_REFRESH_AQ && cpi -> sf. allow_skip_recode ; x -> skip_optimize = ctx -> is_coded ; x -> use_lp32x32fdct = cpi -> sf.",0
1581,"<S2SV_ModStart> USB_MAXINTERFACES ) ; if ( config -> desc. bNumInterfaces < 1 ) { dev_err ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; } else if ( config -> desc. bNumInterfaces == 1 ) { dev_err ( ddev, ""config <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, config -> desc. bNumInterfaces ) ; nintf = USB_MAXINTERFACES ; } else if ( config -> desc. bNumInterfaces < nintf ) { dev_err ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, config -> desc. bNumInterfaces ) ; nintf = USB_MAXINTERFACES ; }",0
1582,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> ] ; struct crypto_cipher * tfm_des <S2SV_ModEnd> ; str_to_key ( <S2SV_ModStart> ; tfm_des = crypto_alloc_cipher ( ""des"" <S2SV_ModEnd>, 0, <S2SV_ModStart>, 0, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ) { <S2SV_ModEnd> cifs_dbg ( VFS <S2SV_ModStart> ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; return PTR_ERR ( tfm_des ) ; } crypto_cipher_setkey <S2SV_ModEnd> ( tfm_des, <S2SV_ModStart> 8 ) ; crypto_cipher_encrypt_one ( tfm_des, out, in ) ; crypto_free_cipher <S2SV_ModEnd> ( tfm_des ) <S2SV_ModStart> tfm_des ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",1
1583,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1584,"<S2SV_ModStart> uint32_t value ; int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) position = get_bits_count ( gbc ) ; zeroes = i = 0 ; while ( 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR",0
1585,<S2SV_ModStart> i > pos + delta <S2SV_ModStart> off + 1 <= pos + delta <S2SV_ModEnd> ) insn ->,1
1586,<S2SV_ModStart> case EXIT_REASON_INVEPT : case EXIT_REASON_INVVPID :,1
1587,"<S2SV_ModStart> { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"",",0
1588,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> http_contentlen. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet ->",0
1589,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1590,"<S2SV_ModStart> ++ r ; if <S2SV_ModEnd> ( pow ( <S2SV_ModStart> dim ) > entries ) { r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; } <S2SV_ModEnd> return r ;",0
1591,"<S2SV_ModStart> 4 ) { if ( x > ( ssize_t ) dds_info -> width ) { return MagickFalse ; } <S2SV_ModStart> dds_info, 8, exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBLong ( image ) ; CalculateColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { if ( ( x + j ) < ( ssize_t ) dds_info -> width ) { for ( j = 0 ; j < 4 ; j ++ ) { if ( ( j + i ) < ( ssize_t ) dds_info -> height ) { q = QueueAuthenticPixels ( image, x, y, Min ( 4, dds_info -> width - x ), Min ( 4, dds_info -> height - y ), exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; q = QueueAuthenticPixels ( image, x, y, Min ( 4, dds_info -> width - j )",0
1592,"<S2SV_ModStart> drop ; } if ( iph -> ihl >= IP_OPTIONS_MAX / sizeof ( struct iphdr ) ) goto inhdr_error ; <S2SV_ModStart> 0 ; } if ( unlikely ( iph -> ihl * 4 > IP_OPTIONS_MAX / sizeof ( struct iphdr ) - sizeof ( struct iphdr ) ) ) { memset ( IPCB ( skb ), 0, iph -> ihl * 4 - sizeof ( struct iphdr ) ) ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt ->",0
1593,"<S2SV_ModStart> ; } } if ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_index_exists ( params, hkey. num ) ) { Z_ADDREF_PP ( ptr ) ; MAKE_STD_ZVAL ( tmp ) ; array_init ( tmp ) ; add_assoc_zval_ex ( tmp, ZEND_STRS ( ""value"" ), * ptr ) ; * current_param = tmp ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. num, sizeof ( hkey. num ), ( void * ) & tmp, sizeof ( hkey. str ), ( void * ) & tmp ) ; * current_args = tmp ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. num, hkey. len, ( void * ) & tmp, sizeof ( hkey. str ), ( void * ) & tmp, sizeof ( hkey. len ), ( void * ) & tmp ), ( void * ) & ptr, sizeof ( hkey.",0
1594,"<S2SV_ModStart> length ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) )",0
1595,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
1596,<S2SV_ModStart> cfg ) { # if defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG,0
1597,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! f2fs_readonly (,1
1598,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1599,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",1
1600,"<S2SV_ModStart> ; WLog_VRB ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; if ( Stream_GetRemainingLength ( s ) < 4 ) return FALSE",0
1601,<S2SV_ModStart> ( user ) ; cleanup_srcu_struct ( & user -> release_barrier ) ;,0
1602,<S2SV_ModStart> ) ) { const int mb_cols = cpi -> common. mb_cols ; const int * last_row_current_mb_col = current_mb_col ; const int * last_row_current_mb_col = & last_row_current_mb_col ; const int * current_mb_col = & cpi -> mt_current_mb_col ; if ( ( cpi -> b_multi_threaded!= 0 ) && ( mb_row!= 0 ) ) last_row_current_mb_col = last_row_current_mb_col ; else last_row_current_mb_col = & rightmost_col ; } # if CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING ) if ( num_part > 1 ) { const int recon_yoffset = ( mb_row * recon_y_stride * 16 ) ; recon_uvoffset = ( mb_row * recon_uv_stride * 16 ) ; } else { recon_yoffset = ( mb_row * recon_y_stride * 16 ) ; recon_uvoffset = ( mb_row * recon_uv_stride * 16 ) ;,0
1603,<S2SV_ModStart> == ARPHRD_ETHER ) { <S2SV_ModStart> ether_setup ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; },1
1604,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (",1
1605,"<S2SV_ModStart> -> b_multithreaded_rd ) vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
1606,<S2SV_ModStart> -> currentLine -> lineBuf [ spos ] = '\\0' ; if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ) { if ( l -> lineBuf [ spos ]!= '\\0' ),0
1607,<S2SV_ModStart> { if ( ( <S2SV_ModStart> > 0 ) && ( ( xWantedSize + xHeapStructSize ) > xWantedSize ) <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) > xWantedSize ) { xWantedSize = 0 ; } else { xWantedSize = 0 <S2SV_ModEnd> ; } } <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) > xWantedSize ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) { xWantedSize = 0 ; } } else { xWantedSize = 0 <S2SV_ModEnd> ; } },0
1608,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1609,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1610,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpDiff"", ""%s"", ""(cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> cp -- ) return 1 ;",1
1611,"<S2SV_ModStart> { uint16 num_updates = 0 <S2SV_ModStart> int i ; struct stream packet = * s ; struct stream packet2 ; <S2SV_ModStart> ++ ) { if (! s_check_rem ( s, 2 * sizeof ( packet ) ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> bitmap <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s, 2 * sizeof ( packet ) ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> bitmap <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
1612,"<S2SV_ModStart> valuelen ) ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ], context -> seen_enough ) ; if ( error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } <S2SV_ModEnd> if ( context",0
1613,"<S2SV_ModStart> = 0 ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, EXTRACT_16BITS ( ptr. common -> packet_seq ) ) ) ; tptr += sizeof ( struct olsr_msg4 ) ; } else { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, EXTRACT_16BITS ( ptr. v6 -> packet_seq ) ) ) ; tptr += sizeof ( struct olsr_msg4 ) ; } if ( msg_len_valid ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, EXTRACT_16BITS ( msgptr. v6 ->",0
1614,<S2SV_ModStart> out ) { TIFFField <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1615,"<S2SV_ModStart> } else { if ( smatch ( option, <S2SV_ModStart>, "" <S2SV_blank> =\\t,"", & ovalue ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Filename <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> too <S2SV_blank> large. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Filename <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } } else if ( smatch ( option, <S2SV_ModStart> ovalue ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Filename <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } else if ( smatch ( option, ""flags"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""path"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank>",0
1616,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> coef_probs = cpi <S2SV_ModEnd> -> frame_coef_probs [",0
1617,"<S2SV_ModStart> { } ; struct termios old_tc = tcgetattr ( fd, & tc ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> termios <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; old_tc = tcgetattr ( fd, & tc ) ; if ( old_tc < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> termios <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", name ) ; r = tcsetattr ( fd, TCSANOW, & tc ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = tcsetattr ( fd, TCSANOW, & tc ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if",0
1618,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data [ 2 ] = 1 ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data [ 2 ] = 1 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] =",0
1619,"<S2SV_ModStart> filp ) { struct sockaddr_storage addr ; sock_release ( SOCKET_I ( inode ), & addr ) ; file_accessed ( filp ) ;",0
1620,"<S2SV_ModStart> * iface, <S2SV_ModEnd> vpx_codec_enc_cfg_t * cfg <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps",0
1621,"<S2SV_ModStart> int stride, <S2SV_ModEnd> int uv_block_size, <S2SV_ModStart> const kernel = vp9_filter_kernels <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> const kernel = vp9_filter_kernels <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ( uv_block_size == 16 <S2SV_ModEnd> ) { uv_stride <S2SV_ModStart> } vpx_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_",0
1622,"<S2SV_ModStart> = TRUE ; if ( strchr ( buf,'<S2SV_blank>') ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( buf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { bufp = find_optparam ( origbuf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( buf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { bufp = find_optparam ( origbuf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE",0
1623,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static cJSON * cJSON_CreateFloatArray ( double <S2SV_ModEnd> * numbers, <S2SV_ModStart> = cJSON_CreateFloat ( <S2SV_ModEnd> numbers [ i <S2SV_ModStart> [ i ] <S2SV_ModEnd> ) ; if <S2SV_ModStart>! i ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1624,"<S2SV_ModStart> goto retry_rebind ; } if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_unlock",0
1625,"<S2SV_ModStart> int link_count ; if ( udf_file_entry_alloc_offset ( inode ) < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( udf_file_entry_alloc_offset ( inode ) < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( udf_file_entry_alloc_offset ( inode ) < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( udf_file_entry_alloc_offset ( inode ) < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode\\n"", inode -> i_ino ) ; make_bad_inode ( inode )",0
1626,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
1627,"<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> ]. len ) ; CHECKINT16 ( idx, len ) ; a -> type = GETINT16 ( buf + idx ) ; idx += 2 ; CHECKINT16 ( idx, len ) ; a -> name = GETINT16 ( buf + idx ) ; idx += 2 ; if ( a -> name & GUID_EXISTS_FLAG ) { a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ; idx += sizeof ( GUID ) ; } } else { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. data = CHECKED_XMALLOC ( unsigned char, a -> names [ i ]. len ) ; for ( j = 0 ; j < a -> names [ i ]. len ; j ++ ) a -> names [ i ]. data [ j ] =",0
1628,"<S2SV_ModStart> data_end ) { const VP9EncoderConfig <S2SV_ModEnd> * const cm <S2SV_ModStart> int num_workers = MIN ( MAX_DECODE_THREADS <S2SV_ModEnd>, tile_cols ) <S2SV_ModStart> tile_rows ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int n ; int final_worker = - 1 ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_rows <= ( 1 << 6 ) ) ; if ( pbi -> tile_workers == 0 ) { CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_threads * sizeof ( * pbi -> tile_workers ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; if ( i < num_threads - 1 &&! vp9_worker_reset ( worker ) ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Tile <S2SV_blank> decoder <S2SV_blank> thread <S2SV_blank> creation <S2SV_blank> failed"" ) ;",0
1629,"<S2SV_ModStart> + 8 ; # ifdef LIBRAW_LIBRARY_BUILD tag = 0x505244 ; high = 0 ; wide = 0 ; # endif <S2SV_ModStart> get4 ( ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( strncasecmp ( model, ""DSLR-A100"", 9 ) ) { fseek ( ifp, 8, SEEK_CUR ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 0 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 1 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 2 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 3 ] = get2 ( ) ; } break ; case 0x524946 : if (! strncasecmp ( model, ""DSLR-A100"", 9 ) ) { fseek ( ifp, 8, SEEK_CUR ) ; img",0
1630,"<S2SV_ModStart> fanout_mutex ) ; if (! list_empty ( & fanout_list ) ) { list_add_tail ( & po -> fanout_list, & fanout_list ) ; err = - EINVAL ; goto out ; } <S2SV_ModEnd> if (!",0
1631,"<S2SV_ModStart> -> common ; vpx_clear_system_state ( ) ; int i ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; RDMULT_RATIO ( i ) = 1 ; <S2SV_ModStart> = SEGMENT_DELTADATA ; vpx_clear_segmentation ( seg ) ; vp9_clear_system_state ( ) ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; segment_rd",0
1632,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
1633,"<S2SV_ModStart> int bychunk ; uint32 config ; if ( bitspersample > 8 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } config = TIFFGetField32 ( in, TIFFTAG_PLANARCONFIG, & shortv ) ; if ( shortv == config && bitspersample!= 8 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( shortv == config && bitspersample!= 8 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if (",0
1634,<S2SV_ModStart> -> error_code ) { <S2SV_ModStart>. err_detail = ( error -> has_detail && error -> detail )? error -> detail : NULL ; return error -> error_code ; } <S2SV_ModEnd> return error ->,0
1635,<S2SV_ModStart> [ i ] && j < sizeof ( buf ),0
1636,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1637,"<S2SV_ModStart> ""corrupt <S2SV_blank> BSON"" ) ; VALIDATE_TEST ( ""test59.bson"", BSON_VALIDATE_NONE, 9, BSON_VALIDATE_NONE, ""corrupt <S2SV_blank> BSON"" ) ;",1
1638,"<S2SV_ModStart> ; if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES, & capabilities ) ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, & capabilities ) ; x86_pmu. intel_cap. capabilities |= cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES, & capabilities ) ; } else if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES, & capabilities ) ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, & capabilities ) ; x86_pmu. intel_cap. capabilities |= cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES, & capabilities ) ; }",0
1639,"<S2SV_ModStart> * ps_cur_slice ; pocstruct_t * ps_prev_poc, * ps_cur_poc ; memset ( ps_dec -> ps_cur_slice, 0, sizeof ( dec_slice_params_t ) )",0
1640,<S2SV_ModStart> ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,0
1641,"<S2SV_ModStart> ; krb5_key_data * key_data ; if ( key_data_in == NULL ) goto cleanup ; key_data = k5calloc ( n_key_data, sizeof ( * key_data ), & err ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_kvno!= key_data [ i + 1 ]. key_data_kvno ) { err = EINVAL ; goto cleanup ; } key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents [ 1 ] = NULL ; }",0
1642,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
1643,<S2SV_ModStart> ; if ( task -> ptrace && <S2SV_ModStart>! dumpable && ptrace_freeze_traced ( task ) <S2SV_ModEnd> ) { rcu_read_unlock,0
1644,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data [ 2 ] = 1 ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data [ 2 ] = 1 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] =",0
1645,<S2SV_ModStart> int getnum ( <S2SV_ModEnd> const char * <S2SV_ModStart> int df ) <S2SV_ModEnd> { int a <S2SV_ModStart> = 0 ; <S2SV_ModEnd> while ( isdigit,0
1646,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival, g -> reallyold ) ; markold ( L, g, psurvival, g -> old <S2SV_ModEnd> ) ; g",0
1647,<S2SV_ModStart> else return - EINVAL <S2SV_ModEnd> ; deb_info (,0
1648,"<S2SV_ModStart> 'S' } ; uint8_t * ssl_request = { 0 } ; <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; <S2SV_ModStart> ; if (! safe_memcmp ( ssl_request, buffer, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_request, sizeof ssl_request ) ; return NULL ; } s_read ( c, c -> local_rfd. fd, ssl_request, sizeof ssl_request ) ; if (! safe_memcmp ( ssl_request, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> return NULL ;",0
1649,"<S2SV_ModStart> int cib_tls_signon ( cib_t * private <S2SV_ModEnd>, struct remote_connection_s <S2SV_ModStart> ; char * server <S2SV_ModEnd> ; int rc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct mainloop_fd_callbacks cib_fd_callbacks <S2SV_ModStart> struct mainloop_fd_callbacks cib_fd_callbacks ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } ret_ga = getaddrinfo ( server, NULL, & hints, & res ) ; if ( ret_",0
1650,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; cpi -> frames_till_gf_update_due = 0 ; cpi -> non_gf_bitrate_adjustment = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> kf_overspend_bits = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> kf_bitrate_adjustment = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> gf_overspend_bits = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> kf_bitrate_adjustment = 0 ; cpi -> frames_till_gf_update_due = 0 ; cpi -> gf_overspend_bits = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> gf_overspend_bits = 0 ; cpi -> non_gf_bitrate_adjustment = 0 ;",0
1651,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1652,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",1
1653,"<S2SV_ModStart> return ; } ND_TCHECK_16BITS ( & icp -> icmp6_data8 [ 0 ] ) ; if ( icp -> icmp6_data8 [ 1 ] & 0x80 ) { mrt = ( ( mrc & 0x7fff ) | 0x1000 ) << ( ( ( mrc & 0x7000 ) >> 12 ) + 3 ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 26 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 26 ] & 0x08 ) ) ; } if ( bp [ 26 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 26 ] & 0x07 ) ) ; } if ( bp [ 26 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 26 ] & 0x07 ) { ND_PRINT ( ( ndo, """,0
1654,"<S2SV_ModStart> ctx, expr -> unary. child",1
1655,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1656,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command <S2SV_ModStart> MF ) ; <S2SV_ModEnd> return rc ;",0
1657,"<S2SV_ModStart> Image * image ; ImagePacket * indexes ; IndexPacket * p <S2SV_ModStart>, length, padding, value, version, width ; if ( image_info == ( ImageInfo * ) NULL ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; }",0
1658,"<S2SV_ModStart> = JAS_CAST ( uint_fast16_t <S2SV_ModEnd>, JAS_CAST ( <S2SV_ModStart>, JAS_CAST ( uint_fast16_t <S2SV_ModEnd>, JAS_CAST ( <S2SV_ModStart>, JAS_CAST ( uint_fast16_t <S2SV_ModEnd>, JAS_CAST ( <S2SV_ModStart>, JAS_CAST ( uint_fast16_t, JAS_CAST ( uint_fast16_t, JAS_CAST ( uint_fast16_t, JAS_CAST ( uint_fast16_t, JAS_CAST ( uint_fast16_t, JAS_CAST ( uint_fast16_t, JAS_CAST ( uint_fast16_t, JAS_CAST ( uint_fast16_t, JAS_CAST ( uint_t, JAS_CAST ( uint_fast16_t, JAS_CAST ( uint_fast16_t, JAS_CAST ( uint_fast16_t, JAS_CAST ( uint_fast16_t, JAS_CAST ( uint_fast16_t, JAS_CAST ( uint_fast16_t, JAS_CAST ( uint_fast16_t, JAS_",0
1659,<S2SV_ModStart> | WEECHAT_STRING_SPLIT_STRIP_LEFT | WEECHAT_STRING_SPLIT_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS | 0,0
1660,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - 191 ; vpx_read_bit <S2SV_ModEnd> ( r )",0
1661,<S2SV_ModStart> ; int is_valid = ( error == GIT_OK ) <S2SV_ModStart> giterr_clear ( ) <S2SV_ModEnd> ; error =,1
1662,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1663,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> ] ) ; ++ xd -> counts -> <S2SV_ModEnd> comp_inter [ ctx",0
1664,"<S2SV_ModStart> ; } } if ( strtok ( g -> data, "";"" ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; switch ( action [ 0 ] ) { case 'i' : if ( cmd_cb ( core_ptr, ""ic"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } return send_msg ( g, ""E01"" ) ; } switch ( action [ 0 ] ) { case 'u' : if ( cmd_cb ( core_ptr, ""ic"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } return send_msg ( g, ""E01"" ) ; } if ( strtok ( NULL, "";"" ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; switch ( action [ 0 ] ) { case's' : if ( cmd_cb ( core_ptr, ""ds"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } return send_msg ( g, ""E01",0
1665,"<S2SV_ModStart>! stream ) { stream -> index = 0 ; <S2SV_ModStart> fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModEnd> if ( prev <S2SV_ModStart> { vpx_codec_err_t res ; vpx_codec_enc_config_default ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; stream -> ebml. last_pts_ms = - 1 ; stream -> ebml. debug = global -> debug ; } <S2SV_ModEnd> stream -> config",0
1666,"<S2SV_ModStart> nd_opt_mtu * opm ; if ( nd_opt_mtu_to_int ( opm )!= opm -> nd_opt_mtu ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opm -> nd_opt_mtu ), opm -> nd_opt_mtu ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opm -> nd_opt_mtu ) ) ) ; } if ( nd_opt_mtu_to_int ( opm -> nd_opt_mtu )!= opm -> nd_opt_mtu ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opm -> nd_opt_mtu ) ) ) ;",0
1667,"<S2SV_ModStart> = 0 ; if ( yr_re_ast_get_root_node ( * re_ast ) == NULL ) { yr_log ( yr_log_info ( yr_log_info ( yr_log_info ( yr_log_info ( yr_log_info ( yr_log_info ( ), ""re_ast <S2SV_blank> is <S2SV_blank> missing <S2SV_blank> root_node\\n"" ) ), NULL ) ) ; return ERROR_INSUFFICIENT_MEMORY ; } else { yr_log ( yr_log_info ( yr_log_info ( ), ""re_ast <S2SV_blank> is <S2SV_blank> missing <S2SV_blank> root_node\\n"" ) ) ; return ERROR_INSUFFICIENT_MEMORY ; } * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ) ; if ( * re_ast == NULL ) { yr_log ( yr_log_info ( yr_log_info ( yr_log_info ( yr_log_info ( ), ""re_ast <S2SV_blank> is <S2SV_blank> missing <S2SV_blank> root_node\\n"" ) ) ) ; return ERROR_INSUFFICIENT_MEMORY ; }",0
1668,<S2SV_ModStart> ; other = <S2SV_ModEnd> unix_peer_get ( sk <S2SV_ModStart> ( other ) <S2SV_ModEnd>!= sk ) <S2SV_ModStart> = 0 ; <S2SV_ModEnd> sock_put ( other,0
1669,"<S2SV_ModStart> ) ) ; if ( key -> key -> key && iter -> var_expand_table ) { <S2SV_ModStart>, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, key -> <S2SV_ModStart> 0 ) { <S2SV_ModEnd> auth_request_log_error ( iter <S2SV_ModStart>, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found, <S2SV_blank> using <S2SV_blank> default <S2SV_blank> value <S2SV_blank> %s"", str_c ( path ), key -> value ) ;",0
1670,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; if ( <S2SV_ModStart> -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len - A,1
1671,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1672,"<S2SV_ModStart> ; stbbr_send ( ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'stabber@localhost\'>"" <S2SV_ModEnd> ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost/mobile\'>""",1
1673,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1674,<S2SV_ModStart> ; tok -> type_comments = 0 ; tok -> <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1675,"<S2SV_ModStart> maxBitrate ; } if ( av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> dataLength ) ; av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo = NULL ; } }",0
1676,"<S2SV_ModStart> -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> ) ) -> box_type = GF_ISOM_BOX_TYPE_DREF ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1677,"<S2SV_ModStart> ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; if ( r ) goto done <S2SV_ModStart> ] = '\\0' ; if ( field_length > sizeof ( buff ) - 1 ) field_length = sizeof ( buff ) - 1 <S2SV_ModStart> ] = '\\0' ; if ( field_length > sizeof ( buff ) - 1 ) field_length = sizeof ( buff ) - 1 <S2SV_ModStart> ] = '\\0' ; if ( field_length > sizeof ( buff ) - 1 ) field_length = sizeof ( buff ) - 1 ;",0
1678,"<S2SV_ModStart> maxFrameNum ) ; if ( picSizeInMbs > INT_MAX / dpbSize ) return ( MEMORY_ALLOCATION_ERROR <S2SV_ModStart> dpbSize ) ; if ( dpb -> numRefFrames > MAX_NUM_REF_PICS ) return ( MEMORY_ALLOCATION_ERROR <S2SV_ModStart> 1 ) ; for ( i = 0 ; i < dpb -> dpbSize + 1 ; i ++ ) { if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; dpb -> buffer [ i ]. pAllocatedData = ALIGN ( dpb -> buffer [ i ]. pAllocatedData, 16 ) ; if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; } for ( i = 0 ; i < dpb -> dpbSize + 1 ; i ++ ) { if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; <S2SV_ModStart> u8 ) ; if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; <S2SV_ModStart>",0
1679,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> OE_EINVAL ) ; addrlen_out = 0 ; <S2SV_ModStart> ; if (! addr ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_in = * addrlen ; if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_out = addrlen_out ; if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_out = addrlen_out ; * addrlen = addrlen_out ;,0
1680,,1
1681,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
1682,"<S2SV_ModStart> ( sk ) ; struct ipv6_txoptions * opt = NULL <S2SV_ModStart> final_p ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> & IPV6_TXOPTIONS_MASK ) { opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { err = - EINVAL ; opt_space = & opt_space ; } else { <S2SV_ModStart> & IPV6_TXOPTIONS_MASK ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; } } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) { opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { err = - EINVAL ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_",0
1683,"<S2SV_ModStart>, found, upx_success = 0 <S2SV_ModStart> size_t fsize ; size_t <S2SV_ModEnd> valign, hdr_size <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; struct pe_hook_data <S2SV_ModStart> = CL_CLEAN ; # ifdef HAVE__INTERNAL__SHA_COLLECT int sha_collect = ctx -> sha_collect ; # endif const char * archtype = NULL ; const char * subsystem = NULL ; uint32_t viruses_found = 0 ; # endif <S2SV_ModStart> if (! archtype ||! subsystem ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> archtype <S2SV_blank> == <S2SV_blank> NULL\\n"" ) ; return CL_ENULLARG ; } # endif <S2SV_ModStart> = CL_CLEAN ; # ifdef HAVE__INTERNAL__SHA_COLLECT if (! sha_collect ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> archtype <S2SV_blank> == <S2SV_blank> NULL\\n"" ) ; return CL_ENULLARG ; } # endif <S2SV_ModStart> = CL_CLEAN ; if (! archtype ||! subsystem ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> archtype <S2SV_blank> == <S2SV_blank> NULL\\n"" ) ; return CL_ENULLARG ; } # endif <S2SV_ModStart>",0
1684,"<S2SV_ModStart> address ) { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> ; return ( dm9000ReadReg ( DM9000_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_EPDRL ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1685,"<S2SV_ModStart> if ( striplength > max_striplength ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> %lu <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> max_striplength <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", striplength, ( int ) t2p -> tiff_datasize ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } <S2SV_ModStart> if ( striplength > max_striplength ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> %lu <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> max_striplength <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( int ) t2p -> tiff_datasize ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; }",0
1686,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gid <S2SV_ModEnd> ( inode,",0
1687,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; if (! context ) return FALSE <S2SV_ModStart> ; } } return TRUE ;,0
1688,<S2SV_ModStart> inode * inode ) { struct iso_directory_record * de2 ; if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { inode -> i_nlink = 0 ; goto fail ; } de2 = ( struct iso_directory_record * ) de ; if ( de2 -> name_len > ISOFS_MAX_DE_NAME_LEN ) { inode -> i_nlink = de2 -> name_len - ISOFS_MAX_DE_NAME_LEN ; } else { if ( de2 -> name_len > ISOFS_MAX_DE_NAME_LEN ) { inode -> i_nlink = de2 -> name_len - ISOFS_MAX_DE_NAME_LEN ; goto fail ; } de2 = ( struct iso_directory_record * ) de ; if ( de2 -> name_len > ISOFS_MAX_DE_NAME_LEN ) { inode -> i_nlink = de2 -> name_len - ISOFS_MAX_DE_NAME_LEN ; } else { if ( de2 -> name_len > ISOFS_MAX_DE_NAME_LEN ) { inode -> i_nlink =,0
1689,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1690,"<S2SV_ModStart> = 0 ; if ( yr_re_ast_get_root_node ( * re_ast ) == NULL ) { yr_log ( yr_log_info ( yr_log_info ( yr_log_info ( yr_log_info ( yr_log_info ( yr_log_info ( ), ""re_ast <S2SV_blank> is <S2SV_blank> missing <S2SV_blank> root_node\\n"" ) ), NULL ) ) ; return ERROR_INSUFFICIENT_MEMORY ; } else { yr_log ( yr_log_info ( yr_log_info ( ), ""re_ast <S2SV_blank> is <S2SV_blank> missing <S2SV_blank> root_node\\n"" ) ) ; return ERROR_INSUFFICIENT_MEMORY ; } * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ) ; if ( * re_ast == NULL ) { yr_log ( yr_log_info ( yr_log_info ( yr_log_info ( yr_log_info ( ), ""re_ast <S2SV_blank> is <S2SV_blank> missing <S2SV_blank> root_node\\n"" ) ) ) ; return ERROR_INSUFFICIENT_MEMORY ; }",0
1691,"<S2SV_ModStart> pcmk_ok ) { if ( private -> command. session == NULL ) { free ( private -> command. session ) ; } <S2SV_ModStart> pcmk_ok ) { if ( private -> callback. token == NULL ) { free ( private -> callback ) ; } else { free ( private -> command. session ) ; } } <S2SV_ModEnd> if ( rc <S2SV_ModStart> pcmk_ok ) { if ( private -> command. session == NULL ) { free ( private -> command. encrypted ) ; free ( private -> callback ) ; } else { free ( private -> command. session ) ; } } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; free ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. session, CRM_OP_REGISTER, NULL, NULL, 0, 0, NULL ) ; free ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. session",0
1692,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ; <S2SV_ModStart> = sizeof ( <S2SV_ModEnd> address ) ;",0
1693,"<S2SV_ModStart> 3 } ; int num00, tmp_err, n, sr = 0 ; int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( step_param + sr ) < MAX_MVSEARCH_STEPS ) ++ sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; tmp_err = cpi -> diamond_search_sad ( x, & ref_mv_full, & tmp_mv, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> nmvjointcost, x -> mvcost, ref_mv ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, tmp_mv, ref_mv, & v_fn_ptr",0
1694,"<S2SV_ModStart> ntreg_header ) ; if ( h -> addr == NULL ) { SET_ERRNO ( EPERM, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; }",0
1695,<S2SV_ModStart> ; merged -> resbody_no_files_limit = ( child -> resbody_no_files_limit == NOT_SET? parent -> resbody_no_files_limit : child -> resbody_no_files_limit ; merged -> if_limit_action = ( child -> if_limit_action == NOT_SET? parent -> if_limit_action : child -> if_limit_action ) ; if ( merged -> reqbody_limit == NOT_SET ) parent -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_buffering = ( child -> reqbody_buffering == NOT_SET? parent -> reqbody_inmemory_limit : child -> reqbody_inmemory_limit ; merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> resbody_access = ( child,0
1696,"<S2SV_ModStart> -> iov_base, msg_sys <S2SV_ModEnd> -> msg_iovlen, <S2SV_ModStart> -> iov_base, msg_sys <S2SV_ModEnd> -> msg_iovlen, <S2SV_ModStart> -> iov_len, msg_sys <S2SV_ModEnd> -> msg_iovlen, <S2SV_ModStart> -> iov_len, msg_sys <S2SV_ModEnd> -> msg_iovlen,",0
1697,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
1698,"<S2SV_ModStart>, one, line_count, line_count <S2SV_ModStart> ) break ; line_count = ( MagickSizeType ) ReadBlob ( image, line_count ) ; if ( line_count > GetBlobSize ( image ) ) ThrowReaderException ( ResourceLimitError, ""InsufficientImageDataInFile"" ) ; line_count = ( MagickSizeType ) ReadBlob ( image, line_count ) ; if ( line_count > GetBlobSize ( image ) ) ThrowReaderException ( ResourceLimitError, ""InsufficientImageDataInFile"" ) ; line_count = ( MagickSizeType ) ReadBlob ( image, line_count ) ; if ( line_count > GetBlobSize ( image ) ) ThrowReaderException ( ResourceLimitError, ""InsufficientImageDataInFile"" ) ; line_count = ( MagickSizeType ) ReadBlob ( image, line_count ) ; if ( line_count > GetBlobSize ( image ) ) ThrowReaderException ( ResourceLimitError, ""InsufficientImageDataInFile"" ) ; line_count = ( MagickSizeType ) ReadBlob ( image, line_count ) ; if ( line_count > GetBlobSize ( image ) ) ThrowReader",0
1699,"<S2SV_ModStart>!= 0 || ( r = sshbuf_put_u32 ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> type ) )",0
1700,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1701,"<S2SV_ModStart> user_data ) { <S2SV_ModEnd> crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"" <S2SV_ModStart> num_clients ) ; <S2SV_ModEnd> client -> callback_id <S2SV_ModStart> user ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
1702,"<S2SV_ModStart> * uv ; for ( uv = thread -> openupval ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; markvalue ( g, uv -> v ) ; } } thread -> twups = thread ; for ( uv = thread -> openupval ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; markvalue ( g, uv -> v ) ; } <S2SV_ModEnd> } } <S2SV_null>",0
1703,<S2SV_ModStart> size ) ; <S2SV_ModEnd> px -> ft,0
1704,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1705,<S2SV_ModStart> if (! ( flags & RENAME_EXCHANGE ) && ( new -> d_inode && new -> d_inode -> i_uid == old -> d_inode -> i_uid ) && ( new -> d_inode -> i_uid!= old -> d_inode -> i_uid ) && ( new -> d_inode -> i_uid!= new -> d_inode -> i_uid ) && ( new -> d_inode && new -> d_inode -> i_uid!= old -> d_inode -> i_uid && new -> d_inode -> i_uid!= new -> d_inode -> i_uid ) && ( new -> d_inode -> i_uid!= old -> d_inode -> i_uid ) && ( new -> d_inode -> i_uid!= new -> d_inode -> i_uid ) && ( new -> d_inode!= old -> d_inode && new -> d_inode -> i_uid!= new -> d_inode -> i_uid && new -> d_inode -> i_uid!= new -> d_inode -> i_uid ) &&,0
