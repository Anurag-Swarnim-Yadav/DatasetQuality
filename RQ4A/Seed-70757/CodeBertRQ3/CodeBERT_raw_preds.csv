,raw_predictions,correctly_predicted
0,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1,,0
2,,0
3,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
4,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",0
5,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
6,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
7,"<S2SV_ModStart> cgc, sense_buffer, 0",0
8,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
9,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int64_t filt filt filt filt filt <S2SV_ModEnd> ; int <S2SV_ModStart> ; int filt filt filt_frame ; int64_t filt filt filt filt <S2SV_ModEnd> ; int <S2SV_ModStart> ; int filt_offsets <S2SV_ModEnd> ; int filt_level = <S2SV_ModStart> ; int filt filt filt filt filt filt filt_level ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ( cpi, filt_level ) ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ( cpi -> <S2SV_ModEnd> > <S2SV_null>",0
10,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
11,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
12,<S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE ; },0
13,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
14,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
15,,0
16,<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_len ) ) return - EINVAL ; if (,0
17,,0
18,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
19,<S2SV_ModStart> goto err ; <S2SV_ModEnd> if ( address,0
20,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
21,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if (!,0
22,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0.2SV_null> <S2SV_null> static <S2SV_ModStart> 2SV_null> static int <S2SV_ModEnd> frame_null> 0.2SV_null> <S2SV_null>,0
23,<S2SV_ModStart> inode ) ; <S2SV_ModEnd> struct inode *,0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
25,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
26,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
27,<S2SV_ModStart> ) ) ; avio_feof ( pb ) ;,0
28,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
29,<S2SV_ModStart> out ; } io -> io_cleanup ;,0
30,,0
31,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
32,"<S2SV_ModStart> ( cfg, <S2SV_ModEnd> g ) {",0
33,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) return - EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart> mutex_lock ( err ) ; err = - EINVAL ; if ( err ) return - EINVAL ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; if ( err ) goto out_mutex_unlock ( err ) ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ;,0
34,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
36,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return NULL ;,0
37,"<S2SV_ModStart> ( interface, ENC28J60_ECON, ENC28J60_ECON_ECON1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_ECON_ECON_ECON1 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC28J60_ECON2 <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_ECON_ECON2 <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_ECON_ECON_ECON1 <S2SV_ModEnd> ) ; interface -> <S2SV_ModStart> ( interface, ENC28J60_ECON_ECON1 <S2SV_ModEnd> ) ; } else",0
38,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
39,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
40,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
41,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
42,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
43,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
44,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt =,0
45,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
46,<S2SV_ModStart> ( uid >= UINT32 <S2SV_ModEnd> ) { if,0
47,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode",0
48,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
49,<S2SV_ModStart> } while ( ( ( int ),0
50,"<S2SV_ModStart>, 1,",0
51,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
52,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
53,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
54,"<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( addr,",0
55,<S2SV_ModStart> int sb_table_bytes ; int ret = SQUASHFS_FS_FSIZE <S2SV_ModEnd> ; if (,0
56,,0
57,<S2SV_ModStart> final ) ; rcu_read_lock ( ) ;,0
58,<S2SV_ModStart> { uint16 buffsize = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) { if ( buffsize > 0xFFFFU - 3 ) { return ( - 1 ) ; },0
59,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
60,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
61,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
62,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
63,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
64,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
65,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
66,<S2SV_ModStart> 0 ) { const VP9EncoderConfig <S2SV_ModEnd> * oxcf <S2SV_ModStart> = cpi -> oxcf ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ] ) ; memset <S2SV_ModEnd> ( cpi ->,0
67,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
68,<S2SV_ModStart> ; if (! buffer ) return - EINVAL ; if (,0
69,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { switch",0
70,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
71,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
72,<S2SV_ModStart> ; if (,0
73,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
74,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
75,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
76,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
77,"<S2SV_ModStart> ( strlen ( 0,",0
78,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
79,,0
80,<S2SV_ModStart> { if ( <S2SV_ModEnd> } if (,0
81,<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( cm ->,0
82,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ) { ND_PRINT ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ; return ; } ptr ++ ; if ( ptr ++ ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; ptr ++ ; if ( ptr ++ ) { ND_PRINT ( ndo, ""AVP <S2SV_blank> short"" ) ; ptr ++ ; ptr ++ ; ptr ++ ; if ( ptr ++ ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ; return ; ptr ++ ; ptr ++ ; ptr ++ ; if ( ptr ++ ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; if ( ptr ++ ) { ND_PRINT ( ndo, ""AVP <S2SV_blank> short"" ) ptr ++",0
83,,0
84,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
85,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
86,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
87,<S2SV_ModStart> } else { memset <S2SV_ModEnd> ( cpi ->,0
88,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
89,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
90,<S2SV_ModStart> const node * n ; const int n = 0 ; int n = 0 ; <S2SV_ModStart> == 0 ) { if ( n == 0 ) { assert ( n == 0 ) ; assert ( n == 0 ) ; assert ( n == 0 ) ; assert ( n == 0 ) ; assert ( n == 0 ) ; assert ( n == 0 ) ; assert ( n == 0 ) ; assert ( c == 0 ) ; assert ( n == 0 ) ; assert ( n == 0 ) ; assert ( n == 0 ) ; assert ( n == 0 ) ; assert ( n == 0 ) ; assert ( n == 0 ) ; assert ( n == 0 ) ; assert ( n == 0 ) ; assert ( n == 0 ) ; assert ( n == 0 ) ; assert ( n == 0 ) ; assert ( n == 0 ) ; assert ( n == 0 ) ; assert ( n == 0 ) ; assert ( n == 0 ) ; assert ( n == 0 ) ;,0
91,,0
92,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const VP9_COMMON * const VP9_COMMON * const MACROBLOCKD * const MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const BLOCKD * xd, int mi_8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8_split <S2SV_ModEnd> ( cm, <S2SV_ModStart>, BLOCK_SIZE bsize, <S2SV_ModEnd>, mbmi -> <S2SV_ModStart> BLOCK_8_8x8x8x4_8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8_split <S2SV_ModEnd> ( cm, <S2SV_ModStart> cm -> <S2SV_ModStart>, m, vpx_write_bit <S2SV_ModEnd>, mb,",0
93,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
95,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
96,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
97,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
98,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
99,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
100,,1
101,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
102,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
103,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
104,<S2SV_ModStart> NULL ) { status = MagickFalse ; break <S2SV_ModEnd> ; } image,0
105,<S2SV_ModStart> ) ) { if ( avio_feof ( s ) ) return AVERROR_INVAL ;,0
106,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
107,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
108,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
109,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
110,<S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( msg,0
111,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
112,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
113,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
114,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
115,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) ; },0
116,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
117,<S2SV_ModStart> cpi ) { memset <S2SV_ModEnd> ( cpi ->,0
118,"<S2SV_ModStart> int rc ; struct desc_struct old_desc ; struct x86_emulate_ops * ops = cpl ( ctxt, & old_desc, & old_desc ) ; if ( rc!= X86EMUL_CONTINUE ) return X86EMUL_CONTINUE ; rc = assign_far ( ctxt, & old_cs, & old_cs ) ; if ( rc!= X86EMUL_CONTINUE ) return X86EMUL_CONTINUE ; if ( rc!= X86EMUL_CONTINUE ) return X86EMUL_CONTINUE ; if ( rc!= X86EMUL_CONTINUE ) return X86EMUL_CONTINUE ; if ( rc!= X86EMUL_CONTINUE ) return X86EMUL_CONTINUE ; if ( rc!= X86EMUL_CONTINUE ) return X86EMUL_CONTINUE ; if ( rc!= X86EMUL_CONTINUE ) return rc ; if ( rc!= X86EMUL_CONTINUE ) return X86EMUL_CONTINUE ; if ( rc!= X86EMUL_CONTINUE ) return X86EM",0
119,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
120,<S2SV_ModStart> ] ) { if (! zfound ) { zfound = GF_FALSE ; zfound = GF_FALSE ; zfound = GF_TRUE ; zfound = GF_TRUE ; zfound = GF_TRUE ; zfound = GF_FALSE ; zfound = GF_FALSE ; zfound = GF_FALSE ; zfound = GF_FALSE ; zfound = GF_FALSE ; zfound = GF_FALSE ; zfound = GF_FALSE ; zfound = GF_FALSE ; zfound = GF_FALSE ; zfound = GF_FALSE ; zfound = GF_ISOM_FALSE ; zfound = GF_FALSE ; zfound = GF_FALSE ; break ; },0
121,<S2SV_ModStart>. get_alg_priv ( ctx ) <S2SV_ModEnd> ; if (,0
122,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { switch",0
123,<S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> fputc ( c,0
124,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> return 0 ;,0
125,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
126,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
127,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",0
128,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
129,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ;,0
130,<S2SV_ModStart> ( ctx ) <S2SV_ModEnd> ; if (,0
131,,0
132,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
133,,0
134,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
135,<S2SV_ModStart> ( cpi ) <S2SV_ModEnd> ; if (,0
136,<S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( msg,0
137,<S2SV_ModStart> ; if ( skb -> len < 0 ) return 0,0
138,<S2SV_ModStart> -> arg. fmode <S2SV_ModEnd> ) ; return,0
139,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> bufsize + 1 ),0
140,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> return ;,0
141,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; size_t,0
142,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",0
143,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( line,",0
144,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
145,"<S2SV_ModStart>, bufsize, <S2SV_ModEnd> ) ; }",0
146,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
147,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
148,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
149,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
150,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output,",0
151,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
152,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> x8x8x8 ( tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] ; tran_t <S2SV_ModEnd> x4 = ( tran_low_t <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModEnd> ; x4 = <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModEnd> x4 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran",0
153,<S2SV_ModStart> flags ) ; <S2SV_ModEnd> return 0 ;,0
154,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
155,"<S2SV_ModStart> 1 ) ; atomic_set ( & opt2, 1 ) ;",0
156,<S2SV_ModStart> ; if ( mnt -> mnt. mnt_flags & MNT_READONLY ) mnt -> mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt_flags |= MNT_LOCK_LOCK_NODEV ; if ( mnt -> mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt.,0
157,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
158,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
159,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
160,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
161,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( line,",0
162,"<S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> * probs,",0
163,"<S2SV_ModStart> * buf ; int ret ; buf = kmemdup ( buf, GFP_NOIO, GFP_KERNEL ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret =",0
164,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
165,<S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if ( src ) return 0 ;,0
166,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
167,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
168,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
169,"<S2SV_ModStart> ( L, L,",0
170,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
171,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
172,"<S2SV_ModStart>, iov, bsize <S2SV_ModEnd> ) ; if",0
173,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
174,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
175,,0
176,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
177,<S2SV_ModStart>. mnt_flags & ~ MNT_SETTABLE_MASK <S2SV_ModEnd> ; if (,0
178,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 0,0
179,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> chunks64_chunk ) ; if (! cs64_chunk. table_bytes ) { error_samples ; return FALSE ; },0
180,"<S2SV_ModStart> -> msg_name ; if ( msg -> msg_name ) <S2SV_ModEnd> ( msg_name, <S2SV_ModStart> -> msg_name, msg_name, sizeof ( msg_name ) <S2SV_ModEnd> ) ; if",0
181,<S2SV_ModStart> ( bsize >= UINT32_MAX <S2SV_ModEnd> ) { if,0
182,"<S2SV_ModStart> ( fprintf <S2SV_ModEnd>, ""%s"",",0
183,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
184,<S2SV_ModStart> ; if ( fname <S2SV_ModEnd> )!= 0,0
185,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
186,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
187,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
188,"<S2SV_ModStart> ( interface, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) <S2SV_ModStart> ( interface, ENC28J60_MAILURE_RETRY ( <S2SV_ModStart> ) ) )!= 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, ENC28J60_MAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J60_MAILURE_RETRY ( <S2SV_ModStart> ( interface, <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_RETRY ( interface, <S2SV_ModEnd> ) ) ) ; if",0
189,"<S2SV_ModStart> void write_buffer ( vpx_wb_write_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
190,"<S2SV_ModStart> ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
191,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
192,"<S2SV_ModStart> ( ) ; memset <S2SV_ModEnd> ( t1,",0
193,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BLOCK_SIZE bsize_8x8x8x8x8 <S2SV_ModEnd> ( cm, <S2SV_ModStart> BLOCK_SIZE bsize_8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8_split <S2SV_ModEnd> ( cm, <S2SV_ModStart> BLOCK_SIZE bsize_8x8x8x8x8x8x8x8x8x8x8x8x8x8x8_split <S2SV_ModEnd> ( cm, <S2SV_ModStart>, mi_row, mi_row, mi_row, mi <S2SV_ModEnd> ) ; if <S2SV_ModStart> BLOCK_8 xd -> mi_row, bsize_8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8 <S2SV_ModEnd> ( cm, <S2SV_ModStart> cm -> mi_row, xd -> mi_col, xd -> mi_row <S2SV_ModEnd> ) ; if <S2SV_ModStart> case BLOCK_8 xd -> mi_8",0
194,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
195,,0
196,<S2SV_ModStart> u4_first_slice_in_pic = 1,0
197,<S2SV_ModStart> break ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
198,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
199,"<S2SV_ModStart> & fl6, rcu_dereference (",0
200,<S2SV_ModStart> size_t olen ) { if ( olen == olen ) return len ;,0
201,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
202,<S2SV_ModStart> ( bufsize!= 0,0
203,,0
204,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null>,0
205,<S2SV_ModStart> ; if ( data == NULL ) return ; if (,0
206,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
207,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
208,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
209,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row, MACROBLOCK * mi_row, MACROBLOCKD * mi_row, MACROBLOCKD * mi_row, MACROBLOCKD * mi_row, MACROBLOCKD * const xd_row, xd -> mi_row, mi_col, xd -> mi_row, mi_col ) ; const xd_row = & xd -> mi_col ; const xd_row = & xd -> mi_row, xd -> mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_row, mi_row, mi_row, mi_col, mi_col, mi_col, mi_row, mi_col, mi_col, mi_row, mi_row, mi_row, mi_row, mi_col ) ;",0
210,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
211,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
212,<S2SV_ModStart> ; if (,0
213,<S2SV_ModStart> ( opt -> opt.,0
214,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
215,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ifs_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> size_null> <SV_null> <S2SV_null>,0
216,"<S2SV_ModStart>, dname, <S2SV_ModEnd> ) ; }",0
217,<S2SV_ModStart> % 4 ) > <S2SV_ModEnd> 2 ) {,0
218,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
219,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
220,<S2SV_ModStart> ( bp [ 0 <S2SV_ModEnd> ] ) ;,0
221,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
222,<S2SV_ModStart> * jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_t,0
223,,0
224,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
226,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 16,0
227,<S2SV_ModStart> val ) ; <S2SV_ModEnd> } if (,0
228,,0
229,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
230,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
231,,0
232,<S2SV_ModStart> char * file <S2SV_ModEnd> ; char *,0
233,<S2SV_ModStart> elen ) ; elen += sizeof ( elen ) ;,0
234,"<S2SV_ModStart> ( tptr, tptr <S2SV_ModEnd> ) ) ;",0
235,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
236,"<S2SV_ModStart> int len ; struct stream packet = * s ; <S2SV_ModStart> ; s_check_rem ( s, length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""consume <S2SV_blank> overrun"", & packet ) ; }",0
237,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
238,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
239,<S2SV_ModStart> ( hdr ) <S2SV_ModEnd> ; if (,0
240,"<S2SV_ModStart> ( 1.0f, MagickMin <S2SV_ModEnd> ( 1.0f,",0
241,,0
242,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
243,"<S2SV_ModStart> size_t s, 0",0
244,<S2SV_ModStart> ; } } if (,0
245,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
246,,0
247,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
248,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
249,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
250,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
251,<S2SV_ModStart> lock ) ; spin_lock ( & lock ) ;,0
252,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
253,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
254,<S2SV_ModStart> ret = 1 <S2SV_ModEnd> ; if (,0
255,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> if ( length > GetBlobMSBShort ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile""",0
256,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
257,<S2SV_ModStart> ; msg -> msg_namelen = 0,0
258,<S2SV_ModStart> ( s + 1,0
259,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
260,<S2SV_ModStart> msr ) { <S2SV_ModEnd> if ( ms,0
261,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
262,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
263,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> return 0 ;,0
264,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ;,0
265,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
266,<S2SV_ModStart> { if ( bad_format_print <S2SV_ModEnd> ( im ->,0
267,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
268,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
269,<S2SV_ModStart> ; default : switch (,0
270,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
271,<S2SV_ModStart> ctxt ) rc = assign_eip_eip ; if ( rc!= X86EMUL_CONTINUE ) return rc,0
272,"<S2SV_ModStart> list. name, true",1
273,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
274,"<S2SV_ModStart> ( fd, fmode <S2SV_ModEnd> ) ; return",0
275,,0
276,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
277,"<S2SV_ModStart>, annotation, NULL,",0
278,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
279,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
280,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) rc = <S2SV_ModEnd> ; rc <S2SV_null> <S2SV_null>,0
281,,1
282,<S2SV_ModStart> ret ; },0
283,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <SV_null>,0
284,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
285,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
286,"<S2SV_ModStart> ( event, <S2SV_ModEnd> ) ; }",0
287,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
288,"<S2SV_ModStart> ( ndo, ""%s"", olen <S2SV_ModEnd> ) ) ;",0
289,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
290,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
291,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
292,<S2SV_ModStart> ++ ) { if (,0
293,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
294,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
295,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
296,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
297,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) server.,0
298,,0
299,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
300,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
301,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
302,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
303,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
304,<S2SV_ModStart> = xchg ( <S2SV_ModEnd> opt -> opt,0
305,<S2SV_ModStart> ( sk ) ||! opt -> opt.,0
306,<S2SV_ModStart> ( ) ;,0
307,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
308,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
309,<S2SV_ModStart> ; if ( safe_calloc <S2SV_ModEnd> ( strlen (,0
310,"<S2SV_ModStart> ( interface, ENC28J60_MAH <S2SV_ModEnd> ) ; if",0
311,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
312,"<S2SV_ModStart> NEED_OP ( t, 0",0
313,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
314,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
315,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
317,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
318,<S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( & 0,0
319,<S2SV_ModStart> ; # endif ifdef CONFIG_HOLD_RETRY (,0
320,"<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( pbi,",0
321,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
322,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
323,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> struct VP9_COMMON <S2SV_ModStart> ) { const VP9_COMMON * const PREDICTION_MODE <S2SV_ModEnd> intra_mode = & <S2SV_ModStart> intra_mode ; const PREDICTION_REFERENCE_REFERENCE_REFERENCE_MODE <S2SV_ModEnd> ; const PREDICTION_MODE <S2SV_ModStart> intra_mode = vp9_mv_y_mv_mode <S2SV_ModEnd> ; int <S2SV_ModStart> this_mode = vp9_mv_mv_mode <S2SV_ModEnd> ; int <S2SV_ModStart> ) ; # if CONFIG_VP9_REFERENCE_HIGHBITDEPTHRESHIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTHRESHIGHBITDEPTHRESHIGHBITDEPTHRES_FRAME <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ) ; # if CONFIG_VP9_VP9_ENCODING if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( recon_VP9_",0
324,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & (,0
325,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
326,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vpx_codec_alg_priv_t * ctx <S2SV_ModStart> ; vpx_codec_err_t * const VPxWorker * const VPxWorker * const VPxWorker * const VPxWorker * const VPxWorker * const ctx = ( ctx -> frame_workers == NULL ) { VPX_CODEC_PARAM ; if ( ctx -> frame_workers == NULL ) return VPX_CODEC_PARAM ; } if ( ctx -> frame_workers == NULL ) { VPX_CODEC_PARAM = ( ctx -> frame_workers == VPX_CODEC_CODEC_PARAM ) ; if ( ctx -> frame_workers == NULL ) return VPX_CODEC_CODEC_PARAM ; } if ( ctx -> frame_workers == VPX_CODEC_PARAM ) { VPX_CODEC_CODEC_PARAM ; ctx -> last_frame_frame = ( ctx -> num_frame_frame_frame_frame_frame,0
327,<S2SV_ModStart> { uint16 bitspersample = 1,0
328,"<S2SV_ModStart> 0 ) { if ( s == '\\0' ) { fprintf ( stderr, stderr, stderr, stderr, stderr, st_path, stderr, stderr, st_error ( stderr, stderr, ""error"" ) ; return 0 ; } <S2SV_ModEnd> } if (",0
329,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
330,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( lfm,",0
331,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
332,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
333,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
334,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
335,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
336,"<S2SV_ModStart> ""`%s\'"", option ) ; geometry = DestroyString",0
337,<S2SV_ModStart> ( sk ) ||! opt -> opt.,0
338,,0
339,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
340,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
341,<S2SV_ModStart> 1 ) ; if ( hdr == 0 ) return - EINVAL ;,0
342,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; ret =,0
343,,0
344,<S2SV_ModStart> ; size = 0,0
345,"<S2SV_ModStart> } memcpy <S2SV_ModEnd> ( src_stride,",0
346,<S2SV_ModStart> 1 ) ; quantum_info = ( QuantumInfo * ) NULL ;,0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) { return NULL ; } if ( len <S2SV_null> <S2SV_null>,0
348,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> strdup ( * <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { if,0
349,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
350,"<S2SV_ModStart> void vpx_writer <S2SV_ModEnd> ( w,",0
351,,0
352,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
353,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> } } ps_dec ->,0
354,<S2SV_ModStart> 1 ) ;,0
355,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
356,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
357,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
358,,0
359,"<S2SV_ModStart> ( LOG_ERROR, ""%s: <S2SV_blank> %s: <S2SV_blank> %s"", __func__,",0
360,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
361,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
362,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
363,<S2SV_ModStart> ; int err = - ENOMEM <S2SV_ModEnd> ; if (,0
364,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
365,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode ( VP9_COMMON <S2SV_ModStart> * cm, PREDICTION_MODE <S2SV_ModEnd> intra_mode, PREDICTION_MODE <S2SV_ModStart> intra_mode = vpx_read_prob ( PREDICTION_intra_intra_mode, vpx_read_prob <S2SV_ModEnd> ( r,",0
366,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
367,,0
368,<S2SV_ModStart> return ; } <S2SV_ModEnd> return ;,0
369,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
370,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
371,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
372,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
373,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> data, struct vpx_wb_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> 1 ) { const vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> i ) ; vpx_literal <S2SV_ModEnd> ( wb,",0
374,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
375,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
376,<S2SV_ModStart> ; if (,0
377,<S2SV_ModStart> ) ; } kfree ( urb ) ;,0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
379,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
380,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
381,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
382,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
383,,0
384,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
385,<S2SV_ModStart> ( buf + 1 <S2SV_ModEnd> ) ; ASSERT (,0
386,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; if (,0
387,,0
388,,1
389,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
390,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
391,<S2SV_ModStart> char * prefix <S2SV_ModEnd> ; if (,0
392,"<S2SV_ModStart> int n, const",0
393,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
394,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
395,<S2SV_ModStart> ) ; goto out_free <S2SV_ModEnd> ; } if,0
396,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
397,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
398,<S2SV_ModStart> = 1 ; if ( ps_dec -> u4_error == ps_dec -> u4_error ) { ps_op -> u4_error = ps_dec -> u4_error ; },0
399,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
400,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
401,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ],",0
402,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
403,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
404,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
405,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
406,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
407,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
408,<S2SV_ModStart> = 0 ; if ( psf -> header. count > psf -> header. count ) return 0 ;,0
409,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
410,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> columns, image -> rows ) ; if ( status == MagickFalse ) break",0
411,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
412,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
413,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
414,"<S2SV_ModStart> ( krb5_data, NULL,",0
415,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
416,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
417,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
418,<S2SV_ModStart> 0 ) { if ( bytes == 0 ) return 0 ;,0
419,,0
420,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
421,<S2SV_ModStart> ( buf + 1,0
422,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
423,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> T,0
424,<S2SV_ModStart> u1_first_slice_in_pic = 1,0
425,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
426,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
427,"<S2SV_ModStart> * fmode, fmode_t fmode <S2SV_ModEnd> ) { if",0
428,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
429,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> sse2SV_null> <S2SV_null> static <S2SV_ModStart> sse2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> sse2SV_null> <S2SV_null> static <S2SV_ModStart> sse2SV_null> static vp9_sse2SV_null> <S2SV_null> <SV_null> static int64_t <S2SV_ModEnd> se2SV_null>,0
430,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
431,<S2SV_ModStart> return NULL ; <S2SV_ModEnd> return NULL ;,0
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
433,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1,",0
434,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
435,"<S2SV_ModStart> ( bufp, sizeof ( buf )",0
436,"<S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> ) ; if",0
437,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
438,,0
439,<S2SV_ModStart> ) ; },0
440,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
441,<S2SV_ModStart> clips_ptr ) { ret = - EINVAL ; goto out_clips ; },0
442,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
443,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
444,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) return - 1 <S2SV_ModEnd> ; const char <S2SV_ModStart> 0 ) { const char * const char * <S2SV_ModStart> 0 ] ; const char * const char * outfilename = fprintf ( stderr, ""\\n"" ) ; <S2SV_ModStart> ) ; if ( fprintf ( fprintf ( stderr, sizeof ( stderr, ""\\n"" ) ) ) { fprintf ( stderr, ""\\n"" ) ; return 1 ; } if ( fprintf ( stderr, ""\\n"" ) ) { fprintf ( stderr\\n"" ) ; return 1 ; } if ( stderr, sizeof ( stderr ) ) { fprintf ( stderr, ""\\n"" ) ; } if ( stderr\\n"" ) { fprintf ( stderr, ""\\n"" ) ; return 1 ; } if ( fprintf ( stderr, sizeof ( stderr ) ) ) { fprintf ( stderr, ""\\n"" ) ; return 1 ; }",0
445,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
446,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; vpx_codec_priv_t * <S2SV_ModStart> ctx_t * priv <S2SV_ModEnd> ; vpx_codec_alg_priv_t * <S2SV_ModStart> ctx_t * priv <S2SV_ModEnd> ; vpx_codec_priv_t * <S2SV_ModStart> ctx_t * priv <S2SV_ModEnd> ; vpx_codec_alg_priv_t * <S2SV_ModStart> ctx_t * priv <S2SV_ModEnd> ; vpx_t * <S2SV_ModStart> ; vpx_codec_priv_t * vpx_t * priv <S2SV_ModEnd> ; vpx_codec_codec_alg_priv_t * <S2SV_ModStart> ctx_t * priv <S2SV_ModEnd> ; vpx_codec_priv_t * priv <S2SV_ModEnd> ; vpx_codec_priv_priv_t * <S2SV_ModStart> cfg_t * priv <S2SV_ModEnd> ; vpx_priv_t * <S2SV_ModStart> -> cfg ; vpx_codec_priv_t * priv = vpx_codec_priv_t * priv <S2SV_ModEnd> -> cfg ;,0
447,<S2SV_ModStart> ; if ( data >= 64 ) return ;,0
448,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
449,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
450,"<S2SV_ModStart> ( iinfo, iinfo -> iinfo. iinfo_len <S2SV_ModEnd> ) ; if",0
451,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
452,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
453,<S2SV_ModStart> ) ) ; return,0
454,,0
455,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
456,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
457,,0
458,,0
459,<S2SV_ModStart> 0 ) ; if ( index == 0 ) return 0 ;,0
460,"<S2SV_ModStart> ( iinfo, fstrlen <S2SV_ModEnd> ) ; if",0
461,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
462,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
463,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
464,<S2SV_ModStart> ; if ( data -> buf_size > 0 &&,0
465,"<S2SV_ModStart>, annotation, NULL,",0
466,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int uint char * const char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned int <S2SV_ModEnd> ; unsigned char * <S2SV_ModStart> 0 ] ; unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned int <S2SV_ModStart> 0 ) { unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned int <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> 0 ) { unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * <S2SV_ModStart> 0 ; unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned char * unsigned int <S2SV_ModEnd> ; unsigned char * <S2SV_ModStart> 0 ) { unsigned char * unsigned char * unsigned char *,0
467,<S2SV_ModStart> )!= 0 <S2SV_ModEnd> ) { if,0
468,,0
469,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
470,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
472,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
473,<S2SV_ModStart> ( size_t ) floor,0
474,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
475,"<S2SV_ModStart> AcquireQuantumMemory ( im, immsy <S2SV_ModEnd> ) ; if",0
476,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
477,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> } } ps_dec ->,0
478,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
479,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
480,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
481,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const MACROBLOCKD * xd_mbd = xd -> mbmi ; const xd_mbmi -> mbmi. mbmi. mbmi. mbmi. mbmi. mbmi <S2SV_ModEnd> ) { const <S2SV_ModStart> BLOCK_SIZE tx_size ) { const <S2SV_ModStart> BLOCK_SIZE tx_size ; const int64_t * mbmi = xd -> mbmi ; const int64_ext = xd -> mbmi -> mbmi -> mbmi. mbmi -> mbmi. mbmi. mbmi ; const int64_ext = xd -> mbmi -> mbmi -> mbmi ; const int64_ext = xd -> mbmi ; const int64_ext = xd -> mbmi -> plane [ 0 ]. mbmi -> mbmi -> plane [ 0 ]. stride ]. stride ]. mbmi -> mbmi -> mbmi ; const int64_ext = mbmi -> mbmi -> mbmi ->,0
482,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
483,<S2SV_ModStart> 0 ) { if ( row < 0 ) return - 1 ;,0
484,,0
485,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header,0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
487,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
488,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
489,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
490,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
491,"<S2SV_ModStart> size, 0",0
492,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
493,"<S2SV_ModStart> sockaddr, 0",0
494,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
495,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
496,,0
497,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
498,"<S2SV_ModStart>, & rlen, 0",1
499,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
500,,0
501,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
502,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
503,<S2SV_ModStart> ; } } if (,0
504,,0
505,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
507,"<S2SV_ModStart> size_t buf_size, 0",0
508,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
509,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ;,0
510,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header,0
511,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
512,<S2SV_ModStart> (! buf || count > OE_SSIZE_MAX <S2SV_ModEnd> ) ; },0
513,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
514,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
515,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
516,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
517,"<S2SV_ModStart>, 1 ) <S2SV_ModEnd> ; if (",0
518,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
519,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return NULL ;,0
520,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
521,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
522,<S2SV_ModStart> ) ) ; g_str_check_ret <S2SV_ModEnd> ( ) ;,0
523,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
524,"<S2SV_ModStart> * cpi, MACROBLOCK * const MACROBLOCKD * const MACROBLOCKD * const xd, MACROBLOCKD * xd, MACROBLOCKD * const xd ; MACROBLOCKD * const xd = xd -> mbmi ; MACROBLOCKD * const xd ; MACROBLOCKD * const xd = xd -> mbmi ; MACROBLOCKD * const xd = & xd -> mb ; MACROBLOCK_INFO * const xd = & xd -> mb ; MB_MODE_INFO * const xd_INFO * xd_ext = xd -> mbmi ; MB_MODE_INFO * xd -> mbmi_ext = xd -> mbmi. mbmi_ext ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( xd -> mbmi_high_highbitdepth > 0 ) { vp9_high_variance ( xd -> mbmi, xd -> mb",0
525,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
526,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
527,"<S2SV_ModStart> ( decoder -> codec_interface <S2SV_ModEnd> ( ),",0
528,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
529,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
530,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return NULL ;,0
531,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
532,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
533,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
534,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> ctx -> ctx",0
535,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) break ;",0
536,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
537,"<S2SV_ModStart> ( kfree ( entry,",0
538,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
539,<S2SV_ModStart> ; size_t count = 0,0
540,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
541,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
542,<S2SV_ModStart> <S2SV_null> <S2SV_null> opt_put ( opt ) ;,0
543,<S2SV_ModStart> ; if ( tcp_filter <S2SV_ModEnd> ( skb ),0
544,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
545,<S2SV_ModStart> ; if ( blk < 0 ||,0
546,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
547,,0
548,<S2SV_ModStart> keylen ) { kfree ( data ) ;,0
549,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
550,,0
551,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
552,"<S2SV_ModStart> expr_ty returns, string type_comment, int <S2SV_ModEnd> lineno, int",0
553,,0
554,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
555,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
556,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
557,,0
558,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
559,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
560,"<S2SV_ModStart>, sizeof ( double )",0
561,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
562,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> T * t ; if ( t ) { t = RLC_OK ; bn_dig ( t, t, t, t, t, t ) ; bn_dig ( t ) ; t = t ; bn_dig ( t ) ; bn_dig ( t, t ) ; t = t ; bn_dig ( t ) ; bn_dig ( t, t ) ; bn_dig ( t, t ) ; bn_dig ( t, t, 1 ) ; bn_dig ( t, 1 ) ; t = t ; bn_dig ( t, 1 ) ; bn_dig ( t, 1 ) ; bn_dig ( t, 1 ) ; bn_dig ( t ) ; bn_dig ( t, 1 ) ; bn_dig ( t, 1 ) ; bn_dig ( t ) ; bn_dig ( t ) ; bn_len = RLC_OK ; bn_dig ( t, 1 ) ; bn_dig ( t, 1 ) ; bn_",0
563,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
564,<S2SV_ModStart> hctx ) { <S2SV_ModEnd> hctx -> h,0
565,"<S2SV_ModStart> ( psf, <S2SV_ModEnd> ) ) {",0
566,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
567,<S2SV_ModStart> } if ( strlen ( strlen (,0
568,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
569,,0
570,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
571,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
572,<S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> ps_dec ->,0
573,"<S2SV_ModStart> int mptctl_info ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_ioctl_lock ) ; <S2SV_ModEnd> return - EFAULT",0
574,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
575,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
576,<S2SV_ModStart> ) return ; <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
577,<S2SV_ModStart> ; # ifdef HAVE_LEN - 1 <S2SV_ModEnd> ) { char <S2SV_ModStart> 0 ) ; } # endif,0
578,"<S2SV_ModStart> size_t s ; memset <S2SV_ModEnd> ( buf,",0
579,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; if,0
580,,0
581,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
582,"<S2SV_ModStart> ; if ( ( i -> parent -> width > i -> parent -> log ) || ( i -> parent -> parent -> parent -> log ) > i -> log ) if ( i -> log ) if ( i -> parent -> log ) > i -> log ) { if ( i -> log, ""*** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> ***\\n"" ) ; if ( i -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> log ) if ( i -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> log ) > i -> log ) if ( i -> log ) if ( i -> parent -> log ) if ( i -> parent -> parent -> parent -> log, i -> parent -> log ) if ( i -> log ) > i -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> log ) if ( i -> log ) if ( i -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> log ) > i -> parent -> log ) if ( i -> log ) if ( i -> log ) if ( i -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> log ) if ( i -> parent -> parent ->",0
583,,0
584,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info",0
585,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
586,,0
587,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
588,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
589,<S2SV_ModStart> -> u4_first_slice_in_pic = 0,0
590,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * ) { const char * ptr = ensure ( const char * ) cJSON_malloc ( int ) cJSON_malloc ( size_t ) cJSON_t <S2SV_ModEnd> ; if ( <S2SV_ModStart> * ) { size_t fmt = ensure ( fmt, len ) ; if (! child -> len ) return 0 ; if ( strlen ( len ) ) return 0 ; if ( len = '\\0' ; if ( len = '\\0' ; ptr ++ ) { if ( len = '\\0' ; return 0 ; } if ( len = '\\0' ; if ( len ) return 0 ; } if ( len = ensure ( len ) ptr -> len = '\\0' ; if ( len = ensure ( len ) cJSON_malloc ( len ) ptr, len ) ; if ( len = ensure ( len ) ptr -> len = '\\0' ; if ( len ) { if ( len = ensure ( len ) ; len = ensure ( len ) ; if ( len = ensure ( len ) ) ptr ++ ; if ( len = ensure ( len = ensure (",0
591,,0
592,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
593,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
594,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
595,,0
596,<S2SV_ModStart> == 0 ) <S2SV_ModEnd> ; if (,0
597,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
598,<S2SV_ModStart> goto out ; err = - EINVAL ;,0
599,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
600,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
601,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
602,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * cpi ) { const char * const char * const char * const char * const char * ep = * const char * const char * cp ; char * const char * const char * const char * const char * const char * ep = '\\0' ; char * ep = * cp ; char * const char * const char * ep = '\\0' ; char * ep = '\\0' ; char * ep = '\\0' ; char * ep = str ; char * ep = '\\0' ; char * cp ++ ; if ( * cp =='<S2SV_blank>') { * ep ='<S2SV_blank>'; if (! str ) { * ep ='<S2SV_blank>'; return 0 ; } else { * ep ='<S2SV_blank>'; } else if (! str ) return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> == '\\0' ) { * p [ 1 ] = '\\0' ; char * p [ 1 ] = '\\0' ; char * p [ 0 ] = '\\0' ; char * p [ 0 ] = '\\0',0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
605,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
606,"<S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( arg,",0
607,,0
608,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
609,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
610,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
611,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
612,,0
613,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
614,"<S2SV_ModStart> ; if ( CHILD ( n, n ) && TYPE ( CHILD ( n ) == COMMA ) && TYPE ( CHILD ( CHILD ( CHILD ( n, n ) ) == TYPE_COMMENT ) ) && TYPE ( CHILD ( CHILD ( n, n ) == TYPE_COMMENT ) ) && TYPE ( CHILD ( CHILD ( n, n ) ) == TYPE_COMMENT ) ) && TYPE ( CHILD ( CHILD ( n, CHILD ( n, CHILD ( n, 2 ) ) == TYPE_COMMENT ) ) ) { return NULL ; } if ( CHILD ( CHILD ( n, TYPE ( CHILD ( n ) == TYPE ( n ) ) && TYPE_COMMENT ) == TYPE ( CHILD ( CHILD ( CHILD ( n, CHILD ( n, CHILD ( n, 1 ) ) ) ) == TYPE_COMMENT ) ) && TYPE ( CHILD ( CHILD ( n, CHILD ( n, CHILD ( n, CHILD ( n ) ) ) ) == TYPE ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( n, CHILD ( n, TYPE_COMMENT ) ) ) ) ) )",0
615,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
616,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
617,<S2SV_ModStart> iode ) ; memset ( & i_mmap_sem ) ;,0
618,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; } },0
619,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle *,0
620,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> 0 ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 2 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 2 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
621,<S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; },1
622,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( p +,0
623,"<S2SV_ModStart>, annotation, NULL,",0
624,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
625,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
626,<S2SV_ModStart> ] == 0,0
627,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
628,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
629,,0
630,<S2SV_ModStart> += out ; <S2SV_ModEnd> if ( out,0
631,"<S2SV_ModStart> ( event, <S2SV_ModEnd> data, regs",0
632,<S2SV_ModStart> out_free ; } out_unlock ( & rollover ) ;,0
633,<S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null>,0
634,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> n ++ ; if <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> u8SV_null> <S2SV_null> <S2SV_null> static,0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
636,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
637,"<S2SV_ModStart>, annotation, NULL,",0
638,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
639,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
640,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( index,0
641,,0
642,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
643,,0
644,<S2SV_ModStart> 1 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
645,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
646,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
647,<S2SV_ModStart> goto out_dentry ; if ( err == - EINVAL ) goto out_free ;,0
648,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
649,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
650,"<S2SV_ModStart> ( seq,",0
651,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
652,"<S2SV_ModStart> ( map,",0
653,"<S2SV_ModStart> ; if ( dip_skip <S2SV_ModEnd> ( mp,",0
654,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
655,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",1
656,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
657,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
658,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
659,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
660,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
661,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
662,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
663,"<S2SV_ModStart> size, 0",0
664,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; dev ->,0
665,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( x ->,0
666,"<S2SV_ModStart> ( interface, ENC624J600_ET <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> )!= 0",0
667,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
668,<S2SV_ModStart>. get_alg_priv ( ctx ) <S2SV_ModEnd> ) { if,0
669,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vp9_rc ) { const VP9EncoderConfig * const VP9EncoderConfig * const oxcf = & cpi -> oxcf. subsampling_mode ; const VP9_FMT_HIGHBITDEPTH if ( cpi -> oxcf. subsampling_mode == KEY_FRESH_FRESH_FRESH_FRAME ) || ( cpi -> oxcf. subsampling_mode == VP9_FACTOR ) || ( cpi -> oxcf. subsampling_mode == VP9_FACTOR ) || ( cpi -> oxcf. subsampling_mode == VP9_FACTOR ) ) || ( cpi -> oxcf. subsampling_mode == VP9_FACTOR ) ) || ( cpi -> sf_mode == VP9_FMT_HIGHBITDEPTH if ( cpi -> oxcf. sf_mode == VP9_mode ) || ( cpi -> oxcf -> oxcf -> oxcf. sf_mode == VP9_correction_,0
670,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, 0 )",0
671,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
672,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
673,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } if,0
674,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
675,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
676,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
677,,0
678,,1
679,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return NULL ;,0
680,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
681,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
682,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
683,<S2SV_ModStart> return FALSE ; if (! data ) return FALSE ;,0
684,,0
685,<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> = ( cpi -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf -> <S2SV_ModStart> = cpi -> avg_frame_bandwidth <S2SV_ModEnd> ; } <S2SV_null>,0
686,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
687,,0
688,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> intra_inter_block ( VP9_COMMON <S2SV_ModStart> * const MACROBLOCK * const MACROBLOCK * const MACROBLOCKD * const MACROBLOCK * const MACROBLOCKD * const xd = & xd -> mbmi -> mbmi ; MACROBLOCK_SIZE bsize = & xd -> plane [ BLOCK_SIZE ] ; MACROBLOCK_SIZE bsize = xd -> plane [ BLOCK_SIZE ] ; const int layer = BLOCK_SIZE tx_size ; const int layer = BLOCK_SIZE bsize ; const int layer = BLOCK_8X8X8X8X8X8X8X8X8X8X8X8 * const int <S2SV_ModEnd> ; int <S2SV_ModStart>, tx_size, <S2SV_ModEnd>, tx_size, <S2SV_ModStart>, tx_size, tx_size, <S2SV_ModStart> block ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_HIGHBITDEP",0
689,,0
690,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
691,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
692,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
693,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
694,<S2SV_ModStart> ; msg -> msg_name = 0 ;,0
695,"<S2SV_ModStart> * buf = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
696,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
697,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
698,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
699,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
700,<S2SV_ModStart> val ) ; zval_copy_ctor ( & dval <S2SV_ModEnd> ) ; },0
701,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
702,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
703,<S2SV_ModStart> ) ) { if ( id == NULL ) return NULL ;,0
704,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
705,<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cm ->,0
706,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",0
707,,0
708,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; break,0
709,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
710,<S2SV_ModStart> ; char * cp <S2SV_ModEnd> ; if (,0
711,"<S2SV_ModStart> char buf [ L_STRING_BUFSIZE <S2SV_ModEnd> ] ; char <S2SV_ModStart> ( buf [ i <S2SV_ModEnd> ] ; char <S2SV_ModStart> + 1 ] = strdup ( buf ) <S2SV_ModStart> ( buf, ""\\n"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( buf ) { <S2SV_ModEnd> ++ ) { <S2SV_ModStart> ( buf, "" <S2SV_blank> output <S2SV_blank> output <S2SV_blank> %s\\n"" <S2SV_ModEnd> ) ; return",0
712,"<S2SV_ModStart> saddr ) { struct ip_options_idents_hashrnd_hash <S2SV_ModEnd> ( & net -> <S2SV_ModStart>, & net -> ip_key <S2SV_ModEnd>, sizeof (",0
713,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
714,"<S2SV_ModStart> void write_prob ( vpx_writer <S2SV_ModEnd> * w,",0
715,"<S2SV_ModStart> f -> pw, "".chg""",0
716,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
717,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
718,,0
719,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> v_null> static <S2SV_ModStart> 2SV_null> <S2SV_null> static int <S2SV_ModEnd> v_null> <S2SV_null> static <S2SV_ModStart> 2SV_null> <SV_null> static <S2SV_ModEnd> v_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> v_null>,0
720,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vp9_decode ) { VP9_COMMON * const VP9_COMMON * const VP9_CODEC * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const cm = & cpi -> common ; MACROBLOCK * const VP9_COMMON * const VP9_COMMON * const cm = & cpi -> common ; MACROBLOCK * const VP9_COMMON * const VP9_COMMON * const VP9_CODEC_COMMON * cm = & cm -> common ; vpx_get_frame = & cm -> common ; vp9_decode ( cm -> common. mbmi ) ; vpx_decode ) ; vp9_get_frame ( & cm -> frame_decode ) ; # if CONFIG_VP9_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_HIGHBITDEPTH if ( vpx_decode ) { vpx_,0
721,<S2SV_ModStart> ; return NULL <S2SV_ModEnd> ; } return,0
722,<S2SV_ModStart> ( opt -> opt.,0
723,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
724,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
725,"<S2SV_ModStart>, & len, 0",1
726,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
727,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
728,"<S2SV_ModStart> { if ( jas_uchar <S2SV_ModEnd> ( buf,",0
729,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BLOCK_SIZE bsize ) { const VP9_COMMON * const VP9_COMMON * const xd = & xd -> mbmi. mbmi ; MACROBLOCK_8x8x8x8x8x8x8x8x8x8x8x8x8 ; const xd = & x -> mb ; MB_MODE_INFO * xd -> mbmi. mbmi. mbmi. mbmi_ext = x -> mbmi. mbmi. mbmi. mbmi. mbmi. mbmi. mbmi. mbmi -> mbmi. mbmi. mbmi. mbmi. mbmi. mbmi ; if ( x -> mbmi. mbmi. mbmi. mbmi. mbmi. subsampling_8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8,0
730,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header,0
731,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
732,<S2SV_ModStart> case EXIT_REASON_INVEPT : case EXIT_REASON_INVEPT :,0
733,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
734,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
735,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
736,<S2SV_ModStart> ++ ) return - 1 <S2SV_ModEnd> ; if (,0
737,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4,",0
738,<S2SV_ModStart> ; if ( tcp_filter <S2SV_ModEnd> ( skb ),0
739,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 1 )",0
740,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
741,"<S2SV_ModStart> ; # ifdef CONFIG_VP9_COMP [ 1 ] == - 1 ) { fprintf ( stderr, ""conf"" ) ; return - 1 ; }",0
742,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
743,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
744,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cm ->,0
745,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
746,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
747,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
748,<S2SV_ModStart> } if ( ( ( xWantedSize + ( portBYTE_ALIGNMENT_MASK ) > xWantedSize ) ) { xWantedSize = 0 ; } else { xWantedSize = ( portBYTE_ALIGNMENT_MASK ) ; } else { xWantedSize = 0 ; } else { xWantedSize = ( portBYTE_ALIGNMENT_ALIGNMENT_ALIGNMENT_MASK ) ; } else { xWantedSize = ( xWantedSize + ( xWantedSize + ( portBYTE_ALIGNMENT_MASK ) ) ) ; } else { xWantedSize = ( xWantedSize + ( portBYTE_ALIGNMENT_ALIGNMENT_MASK ) ) ; } else { xWantedSize = 0 ; } else { xWantedSize = 0 ; } else { xWantedSize = ( xWantedSize + ( xWantedSize + ( portBYTE_ALIGNMENT_ALIGNMENT_ALIGNMENT_ALIGNMENT_MASK ) ) ) ; } else { xWantedSize = 0 ; } else { xWantedSize = 0 ; } else,0
749,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
750,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
751,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
752,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
753,<S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> coef_probs [ cpi,0
754,"<S2SV_ModStart>, fstr,",0
755,"<S2SV_ModStart> = 0 ; state -> data [ 1 ] = 0 ; state -> data [ 1 ] = 0x0 ; state -> data [ 1 ] = 0x0 ; state -> data [ 1 ] = 0x0 ; state -> data [ 1 ] = 0x0 ; state -> data [ 1 ] = 0x0 ; state -> data [ 1 ] = 0x0 ; state -> data [ 1 ] = 0x0 ; state -> data [ 1 ] = 0x0 ( d, state -> data, state -> data ) ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0x0 ; state -> data [ 1 ] = 0x0 ; state -> data [ 1 ] = 0x0 ; state -> data [ 1 ] = 0x0 ( d, state -> data, state -> data, state -> data, state -> data, state -> data, state -> data ) ; state -> data [ 1 ] = 0x0 ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 0xe ; state -> data",0
756,<S2SV_ModStart> ( ctx ) <S2SV_ModEnd> ; if (,0
757,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
758,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
759,"<S2SV_ModStart> ( c, <S2SV_ModEnd> const char *",0
760,<S2SV_ModStart> retry ; } <S2SV_ModEnd> if ( ret,0
761,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
762,<S2SV_ModStart> 0 ) ; if ( index == 0 ) return 0 ;,0
763,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
764,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
765,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int seg ; vpx_writer <S2SV_ModEnd> ( seg, <S2SV_ModStart> int seg ; vpx_get_seg ; vpx_prob ( seg, seg ) ; memset <S2SV_ModEnd> ( seg,",0
766,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
767,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
768,<S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> ps_dec ->,0
769,<S2SV_ModStart> -> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock,0
770,"<S2SV_ModStart> ; buf = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL )",0
771,<S2SV_ModStart> ( ( int ) <S2SV_ModEnd> ; if (,0
772,,0
773,<S2SV_ModStart> ( dev ) ; kfree ( buf ) ;,0
774,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
775,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
776,<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cpi ->,0
777,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
778,<S2SV_ModStart> ( bp [ 0 <S2SV_ModEnd> ] ) ;,0
779,<S2SV_ModStart> ) break ; <S2SV_ModEnd> } status =,0
780,"<S2SV_ModStart> int mptctl_eventquery ( MPT_ADAPTER * ioc,",0
781,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
782,<S2SV_ModStart> ) ) { jas_eprintf <S2SV_ModEnd> ( siz ->,0
783,,0
784,,0
785,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
786,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r )",0
787,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> NULL ) { const uint8_t vpx_file = 0 ; const uint8_t vpx_codec_get_encoderConfig ( ) ; const uint8_t fmt = 0 ; const uint8_t vpx_t vpx_codec_get_encoder ( ) ; # if CONFIG_VP9_HOST : 0 ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH <S2SV_ModEnd> ( ) { <S2SV_ModStart> NULL ) ; } <S2SV_null>,0
788,"<S2SV_ModStart> ( ndo, ""%s"", olen <S2SV_ModEnd> ) ) ;",0
789,,0
790,<S2SV_ModStart> ret ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
791,<S2SV_ModStart> ; if ( skb -> len < 0 ) return 0,0
792,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
793,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
794,,0
795,<S2SV_ModStart> ; # endif # endif,0
796,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
797,<S2SV_ModStart> ; return NULL <S2SV_ModEnd> ; } return,0
798,<S2SV_ModStart> ; if ( len < 0 ) return 0 ;,0
799,<S2SV_ModStart> ; if (,0
800,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct oe_sockaddr *,0
801,,1
802,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
803,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
804,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <SV_null>,0
805,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
806,,0
807,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
808,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( private,0
809,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
810,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> _err_mv_err_err ; int <S2SV_ModStart> ; int64_t col, int64_t best_sse, int <S2SV_ModStart> ; int64_t best_sse ; uint64_t best_sse ; uint64_t best_sse ; uint64_t best_sse ; uint64_t best_sse = 0 ; uint64_t best_mv_sse ; uint64_t best_mv = 0 ; uint64_t best_t best_mv_mv_mv_mv = 0 ; uint64_t best_t best_sse ; uint64_t best_mv = 0 ; int64_mv_mv_mv = 0 ; uint64_t best_mv_mv_mv_mv_mv, zero_mv_mv_mv, zero_mv, zero_mv_mv, zero_mv, zero_mv, ref_mv, zero_mv,",0
811,,0
812,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
813,"<S2SV_ModStart> -> msg_name, msg_name, <S2SV_ModStart> -> msg_name, msg_name <S2SV_ModEnd> -> msg_name,",0
814,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
815,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
816,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
817,<S2SV_ModStart> client ) { <S2SV_ModEnd> free ( client,0
818,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
