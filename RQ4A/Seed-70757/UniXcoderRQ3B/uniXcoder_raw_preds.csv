,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ) ; return - EINVAL <S2SV_ModEnd> ; } },0
1,<S2SV_ModStart> < skb ) return error <S2SV_ModEnd> ; if (,0
2,"<S2SV_ModStart> filename, NULL",0
3,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
4,"<S2SV_ModStart> u64 regs <S2SV_ModEnd>, struct perf_event *",0
5,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> blk_block_block ( <S2SV_ModStart> ext ) ) { <S2SV_ModStart> ext4_block ) ; } <S2SV_ModEnd> block ) { <S2SV_ModStart> ] ) ; },0
6,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
7,<S2SV_ModStart> = 0 ; TEMP_FAILURE_RETRY ( ),0
8,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const VP9_COMMON * const VP9_COMMON * td = & cpi -> common ; const VP9_COMMON * td ; MACROBLOCKD * const cm = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const uint8_t * const xd = & cpi -> common ; MACROBLOCKD * const uint8_t * const xd = & cpi -> common ; if ( cpi -> common ) { const int64_t * const int64_t * cpi -> common ; const uint8_t * const uint8_t * const uint8_t * td ; const uint8_t * const uint8_t * td = cpi -> common ; const int64_t * const int64_t * const int64_t * td ; const uint8_t * const uint8_t * const uint16_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * cpi -> common ; const,0
9,,0
10,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_256 ; } else { <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> = COAP_256 ; } else { <S2SV_ModStart> = COAP_BLOCK_32 ; } else { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> = COAP_256 ; } else { <S2SV_ModStart> = COAP_BLOCK_256 ; } else { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } else { <S2SV_ModEnd> } else { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } else { <S2SV_ModStart> = COAP_BLOCK_32 ; },0
12,"<S2SV_ModStart> u_char * ptr, u_int length <S2SV_ModStart> ) dat ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ( ( ndo, ""AVP <S2SV_blank> short"" ) ) ) ; return ; } <S2SV_ModEnd> ND_PRINT ( <S2SV_ModStart>, ""AVP <S2SV_blank> too <S2SV_blank> short"", length <S2SV_ModEnd> ) ) ; length <S2SV_ModStart> if ( length < 4 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; }",0
13,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> key_keyring_keyring_keyring <S2SV_ModStart> dest_keyring ) { return key_keyring ; <S2SV_ModStart> ) ; } return key_keyring <S2SV_ModEnd> ; } <S2SV_null>,0
14,<S2SV_ModStart> = create_spnego_ctx ( 1,1
15,<S2SV_ModStart> char * str <S2SV_ModEnd> ; str =,0
16,,0
17,,0
18,"<S2SV_ModStart> ) ) { struct inode_uid_capable ( inode, inode ) ; <S2SV_ModStart> ) ) ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) ) return - EPERM <S2SV_ModEnd> ; if (",0
19,"<S2SV_ModStart> NULL, NULL <S2SV_ModEnd> ) ; return",0
20,<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9Encoder,0
21,<S2SV_ModStart> ; if ( inode -> i_read ) <S2SV_ModEnd> return ret ;,0
22,<S2SV_ModStart>,0
23,<S2SV_ModStart> ( line = 0 <S2SV_ModEnd> ; if (,0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
25,"<S2SV_ModStart>, pb ) ; if ( pb ->",0
26,<S2SV_ModStart> mntent ) ; return - 1 ;,0
27,<S2SV_ModStart> - EIO ; } <S2SV_ModEnd> if ( io,0
28,<S2SV_ModStart> ; } } return ( void ) ;,0
29,<S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ),0
30,<S2SV_ModStart> ( map ) <S2SV_ModEnd> ; res =,0
31,<S2SV_ModStart> ) ; } page_size ( page ) ;,0
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
33,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; if (,0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28J60_ECON1 <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28J60_ECON1 <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_ECON1 <S2SV_ModEnd> ) ; enc28J60_ECON1 <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28J60_ECON1 <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1, ENC28J60_ECON1_ECON1 | ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28J60_ECON1 <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC",0
35,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } if,0
36,<S2SV_ModStart> { int page_request <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( res ) ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> } else { <S2SV_ModEnd> } else { <S2SV_ModStart> } if ( res == 0 ) {,0
37,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP8_COMMON * const VP8_COMMON * const VP8_HIGHBITDEPTH const int mi_rows = 0 ; const int mbmi_width_width_width_height = 0 ; const int mbmi -> y_width_width = 0 ; const int mbmi -> uv_width = 0 ; int mbmi_width = 0 ; int mbmi -> uv_stride <S2SV_ModEnd> ( 16, <S2SV_ModStart> ) ; # if CONFIG_VP8_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH memcpy <S2SV_ModEnd> ( source, <S2SV_ModStart> ) ) ; # if CONFIG_VP8_VP8_HIGHBITDEPTH memcpy <S2SV_ModEnd> ( source -> <S2SV_ModStart> = 1 ; memcpy <S2SV_ModEnd> ( src -> <S2SV_ModStart> ) ; memcpy <S2SV_ModEnd> ( dest_stride,",0
38,"<S2SV_ModStart> int error ; <S2SV_ModEnd> int error = <S2SV_ModStart> error ; } mb2_cache_cache <S2SV_ModEnd> ( ext4_mb_mb_cache, <S2SV_ModStart> ( bh, <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) { <S2SV_ModEnd> error = 0 <S2SV_ModStart> error ) ; } <S2SV_ModStart> error ) ; <S2SV_ModEnd> } <S2SV_null>",0
39,<S2SV_ModStart> ; } return r ;,0
40,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
41,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
42,,0
43,<S2SV_ModStart> { if (! acl ) return ret <S2SV_ModEnd> ; break ;,0
44,<S2SV_ModStart> size < 0 || height < 0,0
45,<S2SV_ModStart> ] + dp <S2SV_ModEnd> ) ) { if,0
46,"<S2SV_ModStart> * aclp, struct acl_len, <S2SV_ModStart> aclp ) ) { <S2SV_ModEnd> struct acl_len ; <S2SV_ModStart> acl_len - EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart> acl_len - EINVAL <S2SV_ModEnd> ) ) { if <S2SV_ModStart> goto out ; }",0
47,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
48,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
49,<S2SV_ModStart> * x ; <S2SV_ModEnd> return NULL ;,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> uint8_table_table_table_table_table_table ( long <S2SV_ModStart> index ) ; if ( index_table_index <S2SV_null>,0
51,,0
52,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> arg_null>S2SV_null>,0
53,"<S2SV_ModStart> ; if ( check_session <S2SV_ModEnd> ( c, <S2SV_ModStart> ) ) { int <S2SV_ModEnd> return 0 ;",0
54,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
55,<S2SV_ModStart> ) { const VP9_COMMON * const twopass = & cpi -> twopass ; if ( cpi -> twop!= & cpi -> twopass. twopass. twopass. gf_group. twopass. gf_group ) { int_group = & cpi -> twopass. gf_zero ( cpi -> twopass. gf_group. gf_group. gf_group ) ; if ( cpi -> twopass. gf_group. gf_zero ( cpi -> twopass. gf_group ) ) { if ( cpi -> twopass. gf_group. gf_zero ( cpi -> twopass. gf_group. gf_group. gf_zero ( cpi -> twopass. gf_group. gf_group. gf_group. gf_group. gf_group. gf_bits ) ) ; if ( cpi -> twopass. gf_group. gf_group. gf_group. gf_group. gf_group. gf_zero ( cpi ) ) ; if ( cpi -> twopass -> twopass. gf_group. gf_group. gf_group. gf_group. gf_group. gf_,0
56,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
57,<S2SV_ModStart> ) ) ; if (! buffer ) return - EINVAL ;,0
58,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd>, int",0
59,<S2SV_ModStart> dir ) { <S2SV_ModEnd> const char *,0
60,,0
61,<S2SV_ModStart> ; # endif # ifdef HAVE_TCHECK ( long ) <S2SV_ModEnd> return ;,0
62,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int plane ; const VP9_HIGHBITDEPTH const VP9_HIGHBITDEPTH const VP9_HIGHBITDEPTH const int y_buffer [ 3 ] = & YV12_FLAG_PLANE [ 2 ] -> uv_buffer [ 2 ] -> uv_buffer [ 2 ] -> uv_buffer [ 2 ] -> uv_buffer [ 2 ] -> uv_buffer [ 2 ] -> uv_buffer [ 2 ] <S2SV_ModEnd> ] = <S2SV_ModStart> ] -> uv_buffer <S2SV_ModEnd> ] ; const <S2SV_ModStart> int y_stride, y_stride, y_stride <S2SV_ModEnd>, src -> <S2SV_ModStart> src -> uv_buffer <S2SV_ModEnd>, 2,",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ( iter ) <S2SV_ModEnd> ; } <S2SV_null>,0
65,<S2SV_ModStart> (,0
66,<S2SV_ModStart> * o ; int res ; int res ; <S2SV_ModStart> return NULL ; <S2SV_ModEnd> if (! <S2SV_ModStart> } <S2SV_null> <S2SV_null>,0
67,<S2SV_ModStart> string ) ; <S2SV_ModEnd> c = c,0
68,"<S2SV_ModStart> -> img, NULL <S2SV_ModEnd> ) ; }",0
69,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static ND_TCHECK_16BITS ( ptr ) ; if ( ptr_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l ) { ND_PRINT ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ; return ; } ptr ++ ; ptr = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ptr ++ ; ptr = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ptr ++ ; length = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ptr ++ ; if ( ptr ++ ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ( ptr + 1 ) ; } ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; length -= 2 <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> ) ) ; if ( length < 4 ) { ND_PRINT ( ( ( ndo, "" <S2SV_blank> too <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; } ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++",0
70,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
71,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
72,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
73,<S2SV_ModStart> count ) ; memset <S2SV_ModEnd> ( cpi ->,0
74,"<S2SV_ModStart> user ) { memset <S2SV_ModEnd> ( user,",0
75,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
76,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> c_null> <S2SV_null> <S2SV_ModEnd> c_null>,0
77,,0
78,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static MACROBLOCKD * const vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> -> mbmi ; const MACROBLOCKD * const mbmi = & cpi -> mbmi -> mbmi ; const MACROBLOCKD * const MACROBLOCKD * const mbmi = & cpi -> mbmi -> mbmi ; const MACROBLOCKD * const mbmi = & cpi -> mbmi -> mbmi ; const MACROBLOCKD * const <S2SV_ModStart> MODE_INFO * const vpx_writer <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write <S2SV_ModEnd> ( w,",0
79,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
80,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
81,<S2SV_ModStart> } <S2SV_null> <S2SV_null> static,0
82,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
83,,0
84,<S2SV_ModStart> low ) { if ( g -> enc_prev ) { <S2SV_ModStart> prev ) ; } },0
85,<S2SV_ModStart> <S2SV_null>,0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,<S2SV_ModStart> 0 ) { return NULL ; } <S2SV_ModEnd> return NULL ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> } if,0
89,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
90,"<S2SV_ModStart> ) AcquireQuantumMemory ( status, status,",0
91,<S2SV_ModStart>,0
92,"<S2SV_ModStart> * new_size, <S2SV_ModEnd> new_size_size",0
93,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> literal ) { vpx_wb_wb_write_bit <S2SV_ModEnd> ( wb,",0
94,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( mv ->,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
97,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
98,"<S2SV_ModStart> ( c, server -> server.",0
99,"<S2SV_ModStart> vpx_codec_err_t cfg ; if ( cfg -> g_w > 1 || ( cfg -> g_h > 1 ) || ( cfg -> g_width > 1 || ( int ) cfg -> g_h!= VPX_HIGHBITDEPTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> g_w <S2SV_ModEnd> g_w, cfg -> g_w <S2SV_ModStart> ) ) ) ) { if ( ( ( ( ( ( cfg -> g_h, cfg -> g_h, cfg -> g_h )!= VPX_ERROR ) ) ) { if ( ( ( ( ( ( ( cfg -> g_frame == VPX_HIGHBITDEPTH )!= ctx -> g_frame ) ) ) ) { if ( ( ( ( ( ( cfg -> g_frame!= ctx -> g_frame == VPX_HIGHBITDEPTH ) ) ) || ( ( cfg -> g_frame!= ctx -> g_frame!= ctx -> g_frame ) ) ) ) { if ( ( ( ( ( ( ( cfg -> g_frame == VPX_HIGHBITDEPTH <S2SV_ModEnd> ) )!= ctx -> <S2SV_ModStart> ) ) ) ) || ( ( ( ctx -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> oxcf.",0
100,<S2SV_ModStart> cpi ) { memset <S2SV_ModEnd> ( cpi ->,0
101,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
102,<S2SV_ModStart> ptr -> size <S2SV_ModEnd> ; if (,0
103,<S2SV_ModStart>. buf ) <S2SV_ModEnd> ; } else,0
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { int <S2SV_ModStart> = fmode_t fmode <S2SV_ModEnd> ; if <S2SV_ModStart> ( mode, fmode <S2SV_ModEnd> ) ) { <S2SV_ModStart> { if <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
105,<S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( c,0
106,"<S2SV_ModStart> ( buf, len",0
107,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
108,<S2SV_ModStart> VP9_COMMON * c -> width <S2SV_ModEnd> ; if (,0
109,"<S2SV_ModStart> length, length <S2SV_ModEnd> ) ; return",0
110,"<S2SV_ModStart> { if ( fit_name <S2SV_ModEnd> ( fit,",0
111,<S2SV_ModStart> ; ret = <S2SV_ModEnd> ( sd ->,0
112,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vpx_codec_priv_t res ; <S2SV_ModStart> flags ) { res = 1 ; } else if ( flags & VPX_CODEC_OK ) { res = VPX_CODEC_ERROR_ERROR_ERROR_ERROR_ERROR_ERROR_ERROR ; } else if (! (! ( flags & VPX_CODEC_ERROR ) ) { res = VPX_CODEC_ERROR_ERROR_ERROR ; } else if (! ( flags & VPX_CODEC_ERROR ) ) { res = VPX_ERR_ERROR_ERROR_ERROR ; } else if (! ( cfg -> flags & VPX_CODEC_OK ) ) { res = VPX_CODEC_ERROR_ERROR_ERROR_ERROR ; } else { res = VPX_CODEC_ERROR_ERROR ; } else if (! ( ctx -> flags & VPX_CODEC_OK ) ) { res = VPX_CODEC_ERROR ; } else { res = VPX_CODEC_ERROR_ERROR_ERROR_ERROR_ERROR ; },0
113,<S2SV_ModStart> ; value = TEMP_FAILURE_RETRY (,0
114,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
115,,0
116,<S2SV_ModStart> return err ; <S2SV_ModEnd> if ( msg,0
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; return",0
118,<S2SV_ModStart> { return error <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>,0
119,<S2SV_ModStart> { buf [ 0 ] <S2SV_ModEnd> ] = 0,0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> ) + 1 <S2SV_ModEnd> ) ; },0
122,<S2SV_ModStart> } else { if (! <S2SV_ModStart> ) ret = - EFAULT ; } <S2SV_ModEnd> * obuf =,0
123,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
124,<S2SV_ModStart> { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ),0
125,"<S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> * probs )",0
126,"<S2SV_ModStart> * output, tran_low_t <S2SV_ModEnd> * output,",0
127,,0
128,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const tran_low_t <S2SV_ModEnd> input, <S2SV_ModStart> output ) { tran_low_t <S2SV_ModEnd> s = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 0 ] ; tran_high_low_t <S2SV_ModEnd> x7 ] ; tran_low_t <S2SV_ModStart> 0 ] ; tran_low_low_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 0 ] ; tran_low_low_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 0 ] ; tran_low_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 0 ] ; tran_low_low_t <S2SV_ModEnd> x7 ] = ( tran_low_low_low_t ) <S2SV_ModStart> 0 ] ; tran_low_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_low_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran",0
129,<S2SV_ModStart> flags ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( flags,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
131,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9_COMMON * cpi, VP9_COMMON * td, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * const <S2SV_ModStart> mi, int mi_col, int mi_col, int mi_col, int mi_col, int mi_col, int mi_col, int mi_col, mi_col, mi_col, int mi_col, mi_col, mi_col, mi_col, mi_col, & mi_col ) { PREDICTION_MODE_INFO * mi [ 0 ] -> mi [ 0 ] -> mi [ 0 ] -> mi [ 0 ] -> mi [ 0 ] -> mi [ 0 ] -> mi [ 0 ] -> mi [ 0 ] -> mi [ 0 ] -> mi [ 0 ] -> mi [ 0 ] -> mi [ 0 ] -> mi [ 0 ] -> mi [ 0 ] -> mi [ 0 ] -> partition [ 0 ]. col ]. col = MIN ( mi [ 1 ], mi_col ], mi_col ],",0
132,<S2SV_ModStart> ; if ( c -> command &&,0
133,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
134,"<S2SV_ModStart>, int ret <S2SV_ModEnd>, int ret <S2SV_ModStart> = 0 ; if (! <S2SV_ModStart> -> ai_addr ) ) { ret = - 1 ; ret = - 1 ; } if (! ret ) { ret = - EE_RAISE_ERRNO ( OE_EINVAL ) ; goto out ; } if (",0
135,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",0
136,<S2SV_ModStart> common ) { memcpy <S2SV_ModEnd> ( cm ->,0
137,"<S2SV_ModStart> * buf, void * buf <S2SV_ModEnd>, size, <S2SV_ModStart>, size, u8 * buf <S2SV_ModEnd>, size, <S2SV_ModStart>, size, buf <S2SV_ModEnd>, size,",0
138,<S2SV_ModStart> <S2SV_null>,0
139,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> frame_end ( int <S2SV_ModStart> flags ) { int flags ; <S2SV_ModStart> = 0 ; # endif <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if (! ( ctx -> flags & YV12_HIGHBITDEPTH ) ) { return - 1 ; } # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> flags & YV2SV_null> 0 ) { vp9_null>,0
140,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_pick_frame ( VP9_COMMON * <S2SV_ModStart>, int <S2SV_ModEnd> ) { int <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( cm -> bit_depth == 1 ) { # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( cm -> flags & VPX_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cm -> flags & VPX_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cm -> flags & YV12_HIGHBITDEPTH ) { vp9_HIGHBITDEPTH if ( cm -> flags & YV12_HIGHBITDEPTH ) ; } # else { # if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( cm -> flags & cpi -> flags & YV12_HIGHBITDEPTH ) ; # else { vp9_HIGHBITDEPTH if ( cm -> flags & YV12_HIGHBITDEPTH ) ; } # endif",0
141,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> ) ; }",0
142,<S2SV_ModStart> =,0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart>, data, get_sz <S2SV_ModEnd>, data,",0
145,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> inode ( int <S2SV_ModStart>, inode -> i_len ) <S2SV_ModEnd> ) { int <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( inode",0
146,"<S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank>",0
147,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
148,<S2SV_ModStart> { i ++ <S2SV_ModEnd> c = c,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_ignores, & PyId_ignores, & PyId_ignores, arena ) < 0 ) { return 1 ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; } if ( tmp == NULL ) goto failed ; Py_CLEAR ( tmp ) ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; } else { Py_CLEAR ( tmp ) ; } <S2SV_ModStart> goto failed ; } if ( tmp == Py_CLEAR ( tmp ) ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; } else { Py_CLEAR ( tmp ) ; } else { Py_CLEAR ( tmp ) ; res = obj2ast_attr_id ( obj, arena ) ; } if ( tmp == NULL ) goto failed ; Py_CLEAR ( tmp ) ; Py_CLEAR ( tmp ) ; } if ( tmp == NULL ) goto failed ; Py_CLEAR ( tmp ) ; Py_CLEAR ( tmp ) ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; Py_CLEAR ( tmp ) ;",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
152,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> mp2_block_blocks ( <S2SV_ModStart> ) ) { int bh = 0 <S2SV_ModStart> ; bh = 0 ; if ( unlikely (! bh ) ) return - EINVAL ; },0
153,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
154,<S2SV_ModStart> } if (,0
155,"<S2SV_ModStart> ; if ( fname == 0 ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> %s\\n"", fname ) ; return - 1 ; } if ( fname == 0 ) { fprintf ( stderr, ""Error: <S2SV_blank> %s\\n"", fname ) ; return - 1 ; } if ( fname == 0 ) { fprintf ( stderr, ""Error: <S2SV_blank> file <S2SV_blank> %s\\n"", fname ) ; exit ( 1 ) ; } if (",0
156,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
157,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
158,<S2SV_ModStart> == 0 ) return ;,0
159,"<S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( status & KSZ8851_ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_TXIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR_TXIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_TXIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_TXIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_TXIS <S2SV_ModEnd> ) ; }",0
160,"<S2SV_ModStart> cm, const vpx_write_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> cm ) { vpx_write_bit <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ), 0 )",0
162,<S2SV_ModStart>,0
163,,0
164,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> block_offset ( MACROBLOCKD * <S2SV_ModStart> x, MACROBLOCK * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, <S2SV_ModStart> x, <S2SV_ModEnd>, BLOCK_SIZE bsize, <S2SV_ModStart> x, <S2SV_ModEnd> ) ; if <S2SV_ModStart> int bbs = get_block_offset <S2SV_ModEnd> ( x, <S2SV_ModStart> x, bbs <S2SV_ModEnd>, bbs, <S2SV_ModStart>, bbs, <S2SV_ModEnd>, bh, <S2SV_ModStart> int bbs, <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
165,<S2SV_ModStart> key_ref ) ; ret =,0
166,<S2SV_ModStart> u4_first_pic = 1 <S2SV_ModEnd> ; ps_dec ->,0
167,"<S2SV_ModStart> ) ) { coerce_reg_offset ( dst_reg, 4 ) ; coerce_reg_reg_size <S2SV_ModStart> ( dst_reg, 4 ) <S2SV_ModEnd> ) ; }",0
168,,0
169,<S2SV_ModStart> ; if ( <S2SV_ModEnd> opt -> opt,0
170,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> svc_log2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
171,<S2SV_ModStart> ( screen ) <S2SV_ModEnd> ; if (,0
172,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> const char * <S2SV_ModStart> * str ; const char * str <S2SV_ModStart> * str ; int end_end = * str ; int end_end ; int end_end = 0 ; int end_end = 0 ; int end_end_end_end = * end_end_end <S2SV_ModEnd> ; int <S2SV_ModStart> ( * end_end ) ; if ( * str == 0 && * end_end && * end_end == 0 && * end_end == 0 && * end_end == 0 && * end_end && * end_end && * str == '\\0' && * end_end && * end_end && * str == 0 && * str == '\\0' ) { * str = * str ; return 0 ; * str = * str ; * str ; * str = * str ; * str ; if ( * str == NULL ) { * str = str ; * str ; * str = str ; * str = str ; * str = str ; * str ; * str ; * str ; * str = str ; * str ; * str = str ; * str ; * str = str ; *,0
173,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
174,,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> in_what, in_stride <S2SV_ModEnd> ) + mvsad_err_err_cost",0
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9_COMMON * cpi -> td = & cpi -> <S2SV_ModStart> cpi -> td. <S2SV_ModEnd> ; MACROBLOCKD * <S2SV_ModStart>, BLOCK_SIZE bsize, <S2SV_ModEnd>, BLOCK_SIZE bsize, <S2SV_ModStart> BLOCK_SIZE bsize, MACROBLOCK_SIZE bsize, MACROBLOCK_SIZE bsize, <S2SV_ModStart> BLOCK_SIZE bsize, <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( cpi, <S2SV_ModStart> cpi -> mi_row, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, & cpi -> plane <S2SV_ModStart> -> mi_row, mi_col, & pc_row, & cpi -> plane <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( cpi,",0
178,"<S2SV_ModStart> ), false",0
179,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_options_options_rcu <S2SV_ModEnd> ( struct <S2SV_ModStart> optlen ) { struct ip_options_rcu <S2SV_ModEnd> * opt, <S2SV_ModStart> optlen ) { struct ip_options_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ; } return ip_options_rcu <S2SV_ModEnd> ; } return",0
180,,0
181,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> } if ( strlen ( d -> name ) > sizeof ( struct ip_name ) ) return - 1 ; if ( <S2SV_ModStart> return - 1 ; if ( len < sizeof ( d ) ) return - 1 ; <S2SV_ModStart> return - 1 ; if ( len < sizeof ( d -> name ) ) return - 1 ; <S2SV_ModStart> return - 1 ; if ( len < sizeof ( d -> name ) ) return - 1 ;,0
182,"<S2SV_ModStart> ; if ( g_safe_name, ""%s"", ""%s"" ) <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> -> columns - 1 <S2SV_ModEnd> ) ; x,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart>!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
186,"<S2SV_ModStart> len ; } if ( len < 4 ) goto trunc ; <S2SV_ModStart> len ) { ND_TCHECK2 ( bp [ 2 ], 4 ] ) ; <S2SV_ModStart> len ; } if ( len < 4 ) goto trunc ; <S2SV_ModStart> 1 ) { ND_TCHECK2 ( bp [ 1 ], 2 <S2SV_ModEnd> ) ; }",0
187,<S2SV_ModStart>,0
188,<S2SV_ModStart> int i ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,0
189,,0
190,<S2SV_ModStart> ) ) ; return <S2SV_ModEnd> ; } if,0
191,"<S2SV_ModStart>, int ret <S2SV_ModEnd>, int idx",0
192,<S2SV_ModStart> ( * p + 1 <S2SV_ModEnd> ) ) ; if,0
193,<S2SV_ModStart> ; if ( <S2SV_ModEnd> val == 0,0
194,,0
195,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> int j ; tran_low_t <S2SV_ModEnd> * outputptr = <S2SV_ModStart> int i, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> ] ; tran_low_t <S2SV_ModEnd> ( input, <S2SV_ModStart>, j ) { tran_low_t <S2SV_ModEnd> out [ j <S2SV_ModStart> ] ; } <S2SV_ModEnd> } } <S2SV_null>",0
196,,0
197,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> log ( <S2SV_ModStart> ) ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> ( fp ) ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { log_error ( ""%s\\n"", ""%s: <S2SV_blank> %s\\n"" <S2SV_ModEnd> ) ) ;",0
198,"<S2SV_ModStart> ( tptr, length <S2SV_ModEnd> ) ) {",0
199,<S2SV_ModStart> ( ctxt ->,0
200,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
201,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> S_IWUSR ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; unlink",0
202,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( fc,0
203,"<S2SV_ModStart> ( 1.0f, MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 0.0f, MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 0.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 0.0f, MagickMin <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 0.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 0.0f, MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 0.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 0.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0",0
204,<S2SV_ModStart> ; rc -> sas_username = 0 <S2SV_ModEnd> ; rc ->,0
205,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
206,<S2SV_ModStart> size_size + 1,0
207,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } #,0
208,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> size_t <S2SV_ModStart> len ) { size_t <S2SV_ModEnd> len = sizeof <S2SV_ModStart> len ) ; if ( len > sizeof ( * olen ) { return NULL ; } <S2SV_ModStart> return NULL ; } <S2SV_ModEnd> return NULL ;,0
209,<S2SV_ModStart> ; op [ 0 ] <S2SV_ModEnd> ] = (,0
210,<S2SV_ModStart> ) ; } <S2SV_ModEnd> S2SV_null> <S2SV_null>,0
211,<S2SV_ModStart> ; if (,0
212,,0
213,<S2SV_ModStart> ++ - 1 <S2SV_ModEnd> ) { if,0
214,<S2SV_ModStart> timer_list ) { mutex_lock ( & timeri -> lock ) ; <S2SV_ModStart> ) ) ; mutex_unlock <S2SV_ModEnd> ( & timer_lock,0
215,<S2SV_ModStart> ) ) { if ( ( ps_d_dec -> u4_remaining > 0 ) ) { ps_d_d_d_d_d_dec -> u4_remaining = 1 ; ps_d_d_d_dec -> u4_remaining = 1 ; ps_d_d_d_dec -> u4_remaining = 1 ; ps_d_dec -> u4_remaining = 0 ; ps_d_d_d_dec -> u4_remaining = 1 ; ps_d_d_dec -> u4_remaining = 1 ; ps_dec -> u4_mbs_remaining = 0 ; ps_dec -> u4_remaining = 0 ; ps_dec -> u4_remaining = 0 ; },0
216,<S2SV_ModStart> ; uint32_t height ; uint32_t height ; int_t height ; <S2SV_ModStart> ; if ( info -> image_size > image_size ) { info -> image_size ; break ; },0
217,<S2SV_ModStart> return ret ; <S2SV_ModEnd> if ( conn,0
218,<S2SV_ModStart> dev ) ; if ( bi == NULL ) return NULL ;,0
219,<S2SV_ModStart> ) ) ; msg -> msg_namelen = 0 ;,0
220,<S2SV_ModStart> ; if ( ( * s &&,0
221,"<S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
222,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
223,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
224,<S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; if (,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> cpi -> common ; const VP9_COMP * const VP9_COMP * cpi <S2SV_ModEnd> * cpi <S2SV_ModStart> cpi -> common ; if ( cpi -> oxcf. frame_mode == 2 ) return cpi -> oxcf. frame_mode ; if ( cpi -> oxcf. frame_mode == 2 ) return TX_SIZE <S2SV_ModEnd> ; } else <S2SV_ModStart> ] ) { return VPX_MODE <S2SV_ModEnd> ; } <S2SV_null>,0
226,<S2SV_ModStart> ) { <S2SV_ModEnd> return - 1,0
227,<S2SV_ModStart> ( buf1 + 1 <S2SV_ModEnd> ) { if,0
228,<S2SV_ModStart> size = 0 <S2SV_ModEnd> ; if (,0
229,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
230,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
231,<S2SV_ModStart> } r = memcpy <S2SV_ModEnd> ( b ->,0
232,<S2SV_ModStart> ;,0
233,<S2SV_ModStart> ) ) { return <S2SV_ModEnd> ; } <S2SV_null>,0
234,"<S2SV_ModStart>, type_comment, type_comment, <S2SV_ModStart>, type_comment, type_comment ) ; if (! type_comment ) return NULL ; <S2SV_ModStart>, type_comment, type_comment, <S2SV_ModStart>, type_comment, type_comment, type_comment <S2SV_ModEnd>, type_comment, <S2SV_ModStart>, type_comment,",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> ) / 2 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
237,,1
238,"<S2SV_ModStart> ( res, <S2SV_ModEnd> ) ; if",0
239,<S2SV_ModStart>,0
240,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( ps_dec,0
241,,0
242,"<S2SV_ModStart> event ) { struct perf_event_context * ctx ; ctx = perf_event_event_context ( event ) ; ctx = perf_event_event_event_event_ctx ( event, ctx ) ; perf_event_event_event_event_unlock ( event ) ;",0
243,<S2SV_ModStart> flags ) ; <S2SV_ModEnd> return ;,0
244,"<S2SV_ModStart> ) ) ; ND_TCHECK ( * tptr, sizeof ( tptr ) ) ;",0
245,<S2SV_ModStart> ) { uint8_t <S2SV_ModEnd> ; # if <S2SV_ModStart> return 1 ; # endif # endif # if CONFIG_VP8_HIGHBITDEPTH # endif <S2SV_ModStart> ) # endif # endif # endif # endif # endif <S2SV_ModStart> ; # endif # endif # endif # endif # endif # endif # endif <S2SV_ModStart> # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif <S2SV_ModStart> ; # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif <S2SV_ModStart> ; # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif <S2SV_ModStart> # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # # endif # endif # endif # endif # endif # # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # # endif # endif # endif # # endif # endif # endif # endif # endif # endif # endif # endif # # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif,0
246,"<S2SV_ModStart> ) ; } copy_user <S2SV_ModEnd> ( src,",0
247,,0
248,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
249,<S2SV_ModStart> 0 ; } if ( ( status == MagickFalse ) break,0
250,,0
251,<S2SV_ModStart> goto end ; <S2SV_ModEnd> if (! <S2SV_ModStart> ++ ) ) return - 1 ; <S2SV_ModEnd> ; if (,0
252,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) server.,0
253,<S2SV_ModStart> ( client -> priv ->,0
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
256,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
257,<S2SV_ModStart> ( count > OE_EINVAL ) { ret = - 1 ; OE_ERRNO ( OE_EINVAL ) ; },0
258,<S2SV_ModStart> ; if ( <S2SV_ModEnd> opt -> opt,0
259,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
261,"<S2SV_ModStart> ; if ( safe_name <S2SV_ModEnd> ( dst_name,",0
262,"<S2SV_ModStart> ( interface ) ; if <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, KSZ8851_R2SV_null> <S2SV_null>",0
263,"<S2SV_ModStart>, plane, 0",0
264,<S2SV_ModStart> ( size_t ) { size_t base_name ; <S2SV_ModStart> return - 1 ; } <S2SV_ModEnd> } if (,0
265,<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ),0
266,<S2SV_ModStart> 1 ) { VP9EncoderConfig <S2SV_ModEnd> ( cpi ->,0
267,,0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,"<S2SV_ModStart> ; # endif memset <S2SV_ModEnd> ( b, <S2SV_ModStart> mbd ) ; memset <S2SV_ModEnd> ( d,",0
270,<S2SV_ModStart> char buf [ 1 ] <S2SV_ModEnd> ] ; if,0
271,<S2SV_ModStart> -> data ; ( void ) pbi ;,0
272,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_stat, & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
273,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> int best_rd_rd_rd_sse = INT_MAX <S2SV_ModStart> = INT_MAX ; memset <S2SV_ModEnd> ( x -> <S2SV_ModStart> int i, INT_MAX, INT_MAX, INT_MAX, INT_MAX, MAX_MAX, INT_MAX, INT_MAX, INT_MAX, INT_MAX ) ; int ret = INT_MAX ; int best_MAX ; int ret = INT_MAX ; int best_MAX ; int ret = INT_MAX ; int best_MAX ; int best_MAX ; int ret = INT_MAX ; int best_MAX ; int best_MAX ; int best_max = INT_MAX ; int best_MAX ; int best_MAX ; int best_max = INT_MAX ; int best_MAX ; int best_MAX ; int ret = INT_MAX ; int best_MAX ; INT_MAX ; int best_MAX = INT_MAX ; int best_MAX ; int best_MAX ; int best_cost = INT_MAX ; int best_MAX ; int best_MAX ; int best_",0
274,<S2SV_ModStart> ; size = h -> size_t res -> size_size - 1 <S2SV_ModEnd> ; if (,0
275,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
276,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP9EncoderConfig <S2SV_ModEnd> vp9EncoderConfig * <S2SV_ModStart> vpx_codec_alg_priv_t * const oxcf = & cpi -> oxcf. <S2SV_ModEnd> -> oxcf. <S2SV_ModStart> -> oxcf. <S2SV_ModEnd> ; vp9_get_idx ( <S2SV_ModStart> -> oxcf, & cpi -> oxcf. <S2SV_ModEnd>, & <S2SV_ModStart> -> oxcf. <S2SV_ModEnd> ) { return VPX_CODEC_ERROR <S2SV_ModStart> ; } } }",0
277,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
278,"<S2SV_ModStart> } if ( a -> name, a -> name_name ) { if ( a -> name ) { assert ( a -> name [ 0 ] == '\\0' ) ; return ( - 1 ) ; } <S2SV_ModEnd> if (",0
279,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ; struct <S2SV_ModStart> ; int bh = sizeof ( struct bs ),0
280,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
281,<S2SV_ModStart> flags ) { <S2SV_ModEnd> if ( q,0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
284,<S2SV_ModStart> ) == 0 || replySize,0
285,,0
286,"<S2SV_ModStart> ], len <S2SV_ModEnd> ) ; return",0
287,"<S2SV_ModStart> ( vsi, vsi <S2SV_ModEnd> ) ; break",0
288,<S2SV_ModStart> ] ) ; return - 1 ;,0
289,<S2SV_ModStart> * data ; dataptr = 0,0
290,"<S2SV_ModStart> 1 ) { memcpy <S2SV_ModEnd> ( pbi,",0
291,<S2SV_ModStart> ) break ; clone_info = DestroyImageInfo ( image ) ;,0
292,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
293,"<S2SV_ModStart> ; int cp, int cp, <S2SV_ModStart> = 0 ; char * cp = 0 <S2SV_ModStart>, cp, <S2SV_ModEnd>, cp, <S2SV_ModStart> ; if ( <S2SV_ModEnd> (! <S2SV_ModStart> ) return - 1",0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
295,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( oci ->,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> } } } ps_dec -> ps_dec -> ps_cur_slice_pic = 0 ; ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_cur_slice_slice_slice ) ;,0
298,<S2SV_ModStart> ( screen ) <S2SV_ModEnd> ; if (,0
299,<S2SV_ModStart> ( err!= - 1 <S2SV_ModEnd> ) { err,0
300,<S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ; number_filled =,0
301,,0
302,,0
303,<S2SV_ModStart> ) ) { return false ; } <S2SV_ModEnd> } if (,0
304,"<S2SV_ModStart> ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, length )",0
305,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
306,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
307,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct perf_event_event_event_event_event_event_event ( void <S2SV_ModStart> ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>,0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> uv_mode_mode_mode ( PREDICTION_MODE <S2SV_ModStart> * cm, PREDICTION_MODE <S2SV_ModEnd> * y_mode, <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode, PREDICTION_mode",0
309,<S2SV_ModStart> } if (,0
310,<S2SV_ModStart> ) ; } if ( idkey == NULL ) ostr = NULL ;,0
311,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> return -,0
312,,0
313,<S2SV_ModStart> ) ; return - EINVAL <S2SV_ModEnd> ; } if,0
314,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static const vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, const vpx_prob <S2SV_ModEnd> * w, <S2SV_ModStart> ) { const vpx_prob <S2SV_ModEnd> * w, <S2SV_ModStart> * w ) { vpx_prob <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write <S2SV_ModEnd> ( w,",0
315,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct vpx_wb_write_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> data ; struct vpx_wb_write_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> data ) ; vpx_wb_wb_write_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> length ) ; vpx_wb_wb_write_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> data ) ; vpx_wb_wb_wb_write_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> data ) ; vpx_wb_wb_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> size ) ; vpx_wb_wb_wb_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> data ) ; vpx_wb_wb_write_literal <S2SV_ModEnd> ( wb,",0
316,,0
317,<S2SV_ModStart> if ( id <S2SV_ModEnd> ) { ND_TCHECK2 ( id,0
318,,0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart>, y1, <S2SV_ModEnd> y1 ) { <S2SV_ModStart> y1 ) ; <S2SV_ModEnd> if ( y",0
321,<S2SV_ModStart> mntpath ) { if ( mntpath -> mount ) return NULL ;,0
322,"<S2SV_ModStart> cm, struct vpx_wb_write_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_wb_write_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb_literal <S2SV_ModEnd> ( wb,",0
323,"<S2SV_ModStart> ) ) ; if ( env_get ( env, env, env, env, rb_set ) ) )",0
324,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> INT_MAX_MAX_MAXLEN - 1 <S2SV_ModEnd> ; int <S2SV_ModStart> = 0 ; INT_MAX_MAX_MAXLEN - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { mysql_error ( NULL, - 1 ) - 1 <S2SV_ModEnd>, NULL,",0
325,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
326,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
327,<S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) ) return,0
328,"<S2SV_ModStart> len ) { jas_str <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; if ( len < 4 ) { return ; } <S2SV_ModStart> len ) ; }",0
329,,1
330,<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * const si,0
331,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
332,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> ( void,0
333,"<S2SV_ModStart> ( arg ) { int log_options_options_options_options_options ( LOG_FAILURE ) ; <S2SV_ModStart> ( LOG_ERROR, ""Failed <S2SV_blank> options"" ) ; exit ( 1 ) ; } if (",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,,0
336,,0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
338,<S2SV_ModStart>,0
339,<S2SV_ModStart> } else { <S2SV_ModEnd> return 0 ;,0
340,,0
341,"<S2SV_ModStart>, i -> width ) <S2SV_ModEnd> ; # if",0
342,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static vpx_write_literal <S2SV_ModEnd> ( w,",0
343,,0
344,<S2SV_ModStart> ) { return - 1 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>,0
345,<S2SV_ModStart> ( sun_info. length <S2SV_ModEnd> ) break,0
346,"<S2SV_ModStart> ) ; } copy_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, & dest <S2SV_ModEnd> ) ; return",0
347,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> > static vpx_mse8x8_mse8x8_mse8x8x8_mse16 ( const vpx_mse8x16_mse16 ( const vpx_mse16_mse16_mse8x16 <S2SV_ModEnd> * ctx, <S2SV_ModStart> case BLOCK_8X8X8X16_8 : return BLOCK_8X16_8X16_8X16 <S2SV_ModEnd> ( BLOCK_8 ) <S2SV_ModStart> case BLOCK_8X8X16 : return BLOCK_8X8X8X8X8X8X16 <S2SV_ModEnd> ; case <S2SV_ModStart> case BLOCK_8X8X8 : return BLOCK_8X16_8 ) { return BLOCK_8X64_8 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>",0
348,<S2SV_ModStart> ; if ( NULL == NULL &&,0
349,<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart> 1 ) return ; <S2SV_ModEnd> v4_buffer_buf,0
350,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
351,,0
352,<S2SV_ModStart> return 0 ; memset ( & usb_desc ) ;,0
353,,0
354,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static struct l2cap_conf_conf_conf_conf ( struct l2cap_options * pi -> l2cap_mode ) { struct L2cap_MODE_REQ, & l2cap_conf_conf_conf_mode ) ; struct l2cap_mode = & pi -> l2cap_mode ; struct l2cap_mode = & pi -> l2cap_mode ; return - EPERM ; } <S2SV_ModStart>, pi -> l2cap_mode ) ; if (! l2cap_mode ) { if ( pi -> l2cap_mode ) { struct l2cap_mode = L2CAP_REQ, & pi -> l2cap_mode ) { struct l2cap_mode = l2cap_mode ; return - EPERM ; }",0
355,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & len )",0
356,<S2SV_ModStart> { ps_dec -> u1_offset = 1 <S2SV_ModEnd> ; ps_dec ->,0
357,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
358,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd>, struct <S2SV_ModStart>, fmode_t fmode, fmode <S2SV_ModEnd> ) { fmode <S2SV_ModStart> ; if ( fmode <S2SV_ModEnd> ) goto",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> sse2SV_null> int64_t <S2SV_ModStart> int mi ; int64_t res = 0 ; int64_t res = 0 ; int64_t * const int64_t * const int64_t <S2SV_ModEnd> ; int64_t <S2SV_ModStart> int i, int64_t res ; int64_t res = 0 ; int64_t res = 0 ; int64_t res = 0 ; int64_t res = 0 ; int64_t res = 0 ; int64_t res = 0 ; int64_t res = 0 ; int64_t <S2SV_ModEnd> ; if ( <S2SV_ModStart> int64_t ) { int64_t ; int64_t res = 0 ; int64_t res = 0 ; int64_t res = 0 ; if ( int64_t ) { int64_t * const int64_t * out ; int64_t * rate = 0 ; int64_t * rate ; int64_t <S2SV_ModEnd> ; int64_t <S2SV_ModStart> int64_t ) ; int64_t <S2SV_ModEnd> ; if ( <S2SV_ModStart> int64_t )",0
361,<S2SV_ModStart> ( pmd ) <S2SV_ModEnd> ; if (,0
362,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ; char * <S2SV_ModStart> ; char * ptr = * ptr <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( * ) == NULL ) { return tmp_buf ; } if ( * ptr == ( * ) == - 1 ) { return ERROR_ERR_ERR_ERR_ERR_ERR_ERR_ERR_ERR_ERR_ERR_ERR_ERR_ERR_ERR_ERR_ERR_ERR ; } } if ( * ptr == NULL ) { if ( ( * ) == - 1 ) return p ++ ; } if ( * ptr [ 1 ] == - 1 ] == - 1 ] ) { if ( * ptr ++ ; } if ( * ptr == NULL ) { return tmpbuf ; } <S2SV_ModEnd> } if (,0
363,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
364,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1 +",0
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,,0
367,"<S2SV_ModStart> ( interface, KSZ8851_R2SV_null> <S2SV_null> static int <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, KSZ8851_R2SV_null>",0
368,<S2SV_ModStart>,0
369,"<S2SV_ModStart> x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x ) ; <S2SV_ModEnd> p ++",0
370,<S2SV_ModStart> ; if (,0
371,"<S2SV_ModStart> ) ; return 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { printf <S2SV_ModEnd> ( stderr, <S2SV_ModStart> ) ) ; return 1 ; } if <S2SV_ModEnd> ( stderr, <S2SV_ModStart> ) ) { fprintf ( stderr, ""Error\\n"" ) ; return 1 ; }",0
372,,0
373,<S2SV_ModStart> vpx_codec_alg_priv_t * cfg ; vpx_codec_alg_priv_t * ctx = 0 ; <S2SV_ModStart> -> cfg ; vpx_codec_alg_priv_t * priv <S2SV_ModEnd> = 1 ; <S2SV_ModStart> ; if (! priv <S2SV_ModEnd> ) return <S2SV_ModStart> ; if (! ( priv <S2SV_ModEnd> ) return VPX_CODEC_ERR_ERROR <S2SV_ModStart> -> cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg ; priv <S2SV_ModEnd> -> cfg. <S2SV_ModStart> ; if (! ( priv <S2SV_ModEnd> ) return VPX_CODEC_ERROR <S2SV_ModStart> ) return VPX_CODEC_ERROR <S2SV_ModEnd> ; } },0
374,,0
375,<S2SV_ModStart>,0
376,<S2SV_ModStart> ( iinfo -> i_len <S2SV_ModEnd> ) ; if,0
377,"<S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ( interface, ENC28J60_MISTAT ) <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ( interface, ENC28J60_MISTAT ) <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) ; status & ( interface, ENC28J60_MISTAT ) <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
379,<S2SV_ModStart> ) ) ; },0
380,<S2SV_ModStart>,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,,0
384,,0
385,"<S2SV_ModStart>, idx + 1, size_t i",0
386,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
388,,0
389,"<S2SV_ModStart> ), false",0
390,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
391,,0
392,"<S2SV_ModStart>, uregs, 0",0
393,<S2SV_ModStart> ; message -> interface = queueItem ->,0
394,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int dest_dev -> src_dev = xop -> src_dev -> src_dev -> src_dev -> src_dev -> src_dev -> src_dev ) ; <S2SV_ModStart> xop = xop -> src_dev -> src_dev -> src_dev -> src_dev -> src_dev -> src_dev -> src_dev -> src_dev_dev -> src_dev ) ; if ( xop -> src_dev ) return xop ;,0
395,<S2SV_ModStart> ( new_bh ) { <S2SV_ModEnd> if ( new_bh <S2SV_ModStart> new_bh ) { <S2SV_ModEnd> error = 0 <S2SV_ModStart> ; } } } if ( new_bh ) { <S2SV_ModEnd> error =,0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
399,"<S2SV_ModStart>, imbuf, 0",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
401,<S2SV_ModStart> } } } ps_dec -> ps_cur_slice ++ ;,0
402,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
403,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
407,"<S2SV_ModStart>, row, rowrow <S2SV_ModEnd> ) ; if",0
408,"<S2SV_ModStart>, 1, 0,",0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> ( num ) return ( 1,0
411,<S2SV_ModStart>,0
412,<S2SV_ModStart> ; uint8_t data_len ; uint8_t * avp <S2SV_ModStart> ) ) ; if ( avp -> type == NULL ) { uint8_t * ) ; <S2SV_ModStart> ) ; } if (! avp -> type == NULL ) { uint8_t * ) { if (! ( ( * ) ) return - 1 ; } <S2SV_ModStart> ) { uint8_t * ) ; } <S2SV_ModStart> ) ; },0
413,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( actx,0
414,"<S2SV_ModStart> size, size <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart> sk_addr, 0",0
416,<S2SV_ModStart> ( cptype - 1 <S2SV_ModEnd> ) { if,0
417,<S2SV_ModStart> ) ) { <S2SV_ModEnd> } } },0
418,"<S2SV_ModStart> ) ) { strncpy <S2SV_ModEnd> ( skb,",0
419,<S2SV_ModStart> ; return - 1 <S2SV_ModEnd> ; if (,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,<S2SV_ModStart> i ) { <S2SV_ModEnd> int i ; <S2SV_ModStart> ) ) ; if ( <S2SV_ModEnd> (! <S2SV_ModStart> ) ) { <S2SV_ModStart> ) ; } <S2SV_ModEnd> return ;,0
422,<S2SV_ModStart> ; if (,0
423,,0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> ) ; return false,0
426,<S2SV_ModStart> size_t s ; memset ( & tcount ) ;,0
427,<S2SV_ModStart> ( void ) return NULL,0
428,"<S2SV_ModStart> ( buf, sizeof ( buf ) <S2SV_ModEnd> ) ; if",0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>,0
430,<S2SV_ModStart> ( count > OE_EINVAL ) { ret = - 1 ; OE_ERRNO ( OE_EINVAL ) ; },0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
432,<S2SV_ModStart> return 0 ; return 0 ;,0
433,<S2SV_ModStart> ( page ) <S2SV_ModEnd> ; if (,0
434,<S2SV_ModStart> ; if (! gf_file ) return GF_FALSE ;,0
435,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ] ) { memcpy <S2SV_ModEnd> ( & md2SV_null>,0
436,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
437,<S2SV_ModStart> ; i += 1 <S2SV_ModEnd> ; i +=,0
438,<S2SV_ModStart> ;,0
439,"<S2SV_ModStart> row ) { memset <S2SV_ModEnd> ( src,",0
440,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static MACROBLOCKD * const VP9_COMMON * td <S2SV_ModEnd> ; MACROBLOCKD * <S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> mi_col ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> mi_col ) ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> -> common, & tile_col ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> -> common, & mi_col ) ; memcpy <S2SV_ModEnd> ( cpi ->",0
441,"<S2SV_ModStart> ) ) ; ND_TCHECK <S2SV_ModEnd> ( * <S2SV_ModStart> ) ) ; if ( len < 4 ) { ND_PRINT ( ( ( ( ( ndo, "" <S2SV_blank> short)"" ) ) ) ; return ; }",0
442,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,<S2SV_ModStart> skb_hdr ) { kfree_skb ( skb ) ;,0
445,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
446,"<S2SV_ModStart> { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) <S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ) )",0
447,<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( ctx ->,0
448,"<S2SV_ModStart> 1 ) { vpx_lpf_horizontal_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> } else { vpx_lpf_lpf_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> } else { vpx_lpf_lpf_lpf_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> } else { vpx_lpf_lpf_lpf_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> } else { vpx_lpf_lpf_lpf_4 <S2SV_ModEnd> ( s,",0
449,<S2SV_ModStart> ctx ) { kfree_ctx = NULL ;,0
450,<S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
451,"<S2SV_ModStart>, ps_stream -> u4_offset < ps_stream -> u4_offset",0
452,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
453,,0
454,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart>, count ) return - EPERM",0
455,<S2SV_ModStart> { if (! is_path <S2SV_ModEnd> ( ( <S2SV_ModStart> == '/' ) <S2SV_ModEnd> ( ( <S2SV_ModStart> == '\\0' ) <S2SV_ModEnd> ( ( <S2SV_ModStart> == '\\0' ) <S2SV_ModEnd> && ( *,0
456,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
457,<S2SV_ModStart> ( skb ) <S2SV_ModEnd> ; if (,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> if ( op!= 0 ) return 0,0
460,<S2SV_ModStart> ; if ( k5_data_data_data_data_data ; if ( key_data_data_data_data_data_data_data -> key_data_data_data_data. key_data ; if ( key_data_data_data_data_data_data -> key_data_data_data_data. key_data_data ) < sizeof ( * ) ) return - EINVAL ; if (,0
461,,0
462,,0
463,<S2SV_ModStart> inode * inode ) <S2SV_ModEnd> ; if (,0
464,"<S2SV_ModStart> * orelse, int <S2SV_ModEnd> relse, char *",0
465,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char *,0
466,<S2SV_ModStart> return ( ( ( * ) ),0
467,<S2SV_ModStart> int error ; if ( status == 0 ) return FALSE,0
468,,0
469,<S2SV_ModStart> ) ) { struct fl6_rcu <S2SV_ModEnd> * fl6 ; <S2SV_ModStart> np -> opt. <S2SV_ModStart> ) ) ; rcu_dereference ( <S2SV_ModStart> np -> opt. <S2SV_ModEnd> np -> opt,0
470,<S2SV_ModStart> 0 ) { MATLAB_KO : break ; },0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> > <S2SV_null>,0
472,<S2SV_ModStart> int result = RLC_OK <S2SV_ModEnd> ; bn_len <S2SV_ModStart> 8 ) { <S2SV_ModEnd> bn_len = RLC_ERR <S2SV_ModStart> 8 ) ; bn_len = m_len <S2SV_ModEnd> ; } bn_len <S2SV_ModStart> 8 ) { <S2SV_ModEnd> if ( p_len <S2SV_ModStart> 8 ) { <S2SV_ModStart> 8 ) ; bn_len = RLC_ERR ; } bn_len = <S2SV_ModEnd> if ( p_len <S2SV_ModStart> ( p_len > <S2SV_ModEnd> 1 ) { <S2SV_ModStart> 8 ) { <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> 8 ) ; <S2SV_ModStart> 8 ) ; } <S2SV_ModEnd> } else { <S2SV_ModStart> 8 ) ; } bn_len = p_len ; <S2SV_ModStart> 8 ) { <S2SV_ModEnd> bn_len ; <S2SV_ModStart> 8 ) ; } <S2SV_ModEnd> } else { <S2SV_ModStart> 8 ) ; } bn_len = p_len ; <S2SV_ModStart> 8 ) { <S2SV_ModEnd> bn_len ; <S2SV_ModStart> 8 ) ;,0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
476,<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( x -> <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( x ->,0
477,<S2SV_ModStart> ; return 0 <S2SV_ModEnd> ; } return,0
478,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
479,"<S2SV_ModStart> ), ret",0
480,<S2SV_ModStart> ; ps_dec -> u4_in_pic = 0 ; ps_dec ->,0
481,"<S2SV_ModStart> int mptctl_ioctl_ioctl_ioctl_info ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_ioctl_ioctl_info ( ioc, <S2SV_ModEnd> ) ; int <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
482,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
483,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
484,"<S2SV_ModStart> ; if ( datao + o, o, data_size <S2SV_ModEnd> ) ) { exif_log <S2SV_ModStart> ; if ( exif_log ( exif_log, ""ExifMnote_log"", exif_log ( en -> entries [ tcount ] -> entries [ tcount ]. tag, n -> entries [ tcount ]. tag, n -> entries [ tcount ]. size ) ) ; if ( o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + o + 3 <S2SV_ModEnd> ) ) { exif_log",0
485,,0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static struct ip_options_options_options_options_options_options_options ( void * ) opt = NULL ; <S2SV_ModStart> ; if ( opt ) { if ( opt == NULL ) { s_free ( opt ) ; },0
487,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
488,"<S2SV_ModStart> ( interface, ENC624J600_E_ESTAT ) ; memset <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ESTAT ) ; enc624J600_ESTAT <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2, ENC624J600_E <S2SV_ModEnd> ) ; return",0
489,<S2SV_ModStart> ) break ; if ( status == MagickFalse ) break,0
490,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
491,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> cJSON_null> int <S2SV_ModStart> - 1 ; if (! str ) return 0 ; <S2SV_ModStart> = out ; if (! out ) return 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> == 0 ) return 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> ++ ) return 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> ++ ) ) return 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> ++ ) return 0 ; <S2SV_ModEnd> return 0 ;,0
492,<S2SV_ModStart> ; if ( sk ) return false ; if (,0
493,"<S2SV_ModStart> w ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12",0
494,<S2SV_ModStart> * header ; <S2SV_ModEnd> if ( header,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
496,"<S2SV_ModStart> out ( ctx, 0",0
497,"<S2SV_ModStart>, int ret <S2SV_ModEnd>, void *",0
498,<S2SV_ModStart> ) ) ; u16 <S2SV_ModEnd> return 0 ;,0
499,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
500,<S2SV_ModStart> ; } } free ( buf ) ;,0
501,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart> = NULL ; if ( * p [ 0 ] == NULL ) goto ERROR_ERROR ; <S2SV_ModStart> ( pixc, l [ 0 ] <S2SV_ModEnd> ] = <S2SV_ModStart> ( pixb [ 0 ]",0
504,"<S2SV_ModStart> = 1 ; memcpy <S2SV_ModEnd> ( v,",0
505,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static,0
507,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
508,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( interface,0
509,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
510,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> ( xd, <S2SV_ModStart> TX_SIZE x, uint8_t <S2SV_ModEnd>, y_col, <S2SV_ModStart> stride, uint8_t <S2SV_ModEnd>, y_col, <S2SV_ModStart> int y_col ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( xd -> flags & YV12_HIGHBITDEPTH ) { memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; # endif # if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( xd -> flags & YV12_HIGHBITDEPTH ) { memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; # endif # endif # if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( xd -> flags & YV12_HIGHBITDEPTH ) { memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( xd -> cur_",0
511,<S2SV_ModStart> } if ( end < end &&,0
512,<S2SV_ModStart> ; ei -> i_cache = NULL <S2SV_ModEnd> ; ei ->,0
513,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_wb_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm, vpx_wb_wb_wb_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_wb_wb_write_bit <S2SV_ModEnd> ( wb,",0
514,<S2SV_ModStart> : if ( optarg ) { <S2SV_ModEnd> return ; },0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
516,"<S2SV_ModStart>, i + 1,",0
517,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,0
518,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static uint16_t status ; uint16_t status <S2SV_ModStart> ( interface, ENC624J600_EID <S2SV_ModEnd> ) ; int <S2SV_ModStart> ( interface, ENC624J600_ECON1 ) & ENC624J600_START <S2SV_ModEnd> ) { int <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_LINKIF <S2SV_ModEnd> ) ; int <S2SV_ModStart> ( interface, ENC624J600_ECON1, ENC624J600_ECON1, ENC624J600_START <S2SV_ModEnd> ) ; int <S2SV_ModStart> ( interface, ENC624J600_ECON1, ENC624J600_ECON2 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_ECON2 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_ECON1, ENC624J600_ECON1, ENC624J600_EIR <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( interface, ENC624J600_ECON1, ENC624J600 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; }",0
519,<S2SV_ModStart> <S2SV_null>,0
520,,0
521,<S2SV_ModStart> size ) ; if ( buf -> size < 4 ) return - 1 ; <S2SV_ModStart> size ) ; <S2SV_ModEnd> ++ ) { <S2SV_ModStart> ++ ) ; },0
522,<S2SV_ModStart> ; err = - EBUSY ; goto out <S2SV_ModEnd> ; err =,0
523,<S2SV_ModStart> event ) { <S2SV_ModEnd> mutex_unlock ( & <S2SV_ModStart> event -> event <S2SV_ModEnd> ) ; },0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> u32_t ( unsigned char * <S2SV_ModStart> * u32_t * u32_t len, u32_t len <S2SV_ModEnd> ) { u32_t <S2SV_ModStart> len ; if ( len > UINT32_MAX_MAX_MAX_MAX_MAX_MAX_SIZE ) return - EPERM ; * <S2SV_ModStart> if ( len <S2SV_ModEnd> ) { if <S2SV_ModStart> if ( size_t * op2SV_null> size_null>",0
525,"<S2SV_ModStart>, rc ) ; <S2SV_ModEnd> if ( cib",0
526,"<S2SV_ModStart> int status ; uint32_t status ; <S2SV_ModStart> ( interface, KSZ8851_I <S2SV_ModEnd> ) ) { if <S2SV_ModStart> ( interface, KSZ8851_RSR_ERROR <S2SV_ModEnd> ) ) <S2SV_ModStart> ( interface, KSZ8851_R2SV_null> <S2SV_null>",0
527,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
528,"<S2SV_ModStart>, 0, 0,",0
529,,0
530,,0
531,<S2SV_ModStart> } if ( row >= height ) return 0 ; if (,0
532,,0
533,"<S2SV_ModStart>, ""MemoryAllocationFailed"" ) ;",0
534,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
535,"<S2SV_ModStart> ), length <S2SV_ModEnd> ) ; length",0
536,<S2SV_ModStart> ; if (! new_mode ) return - EPERM ;,0
537,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
538,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp9_pick_row ( VP9_COMMON <S2SV_ModStart> * cpi, MACROBLOCKD * const tile, MACROBLOCKD * const tile, MACROBLOCKD * const tile, MACROBLOCKD * const tile, <S2SV_ModStart>, BLOCK_SIZE bsize, <S2SV_ModEnd>, BLOCK_SIZE bsize, <S2SV_ModStart> ) ; return ; }",0
539,<S2SV_ModStart> ; if (,0
540,"<S2SV_ModStart> 1 ) ; if ( length == 0 ) { LOG_ERROR ( ""Memory <S2SV_blank> range: <S2SV_blank> %u"", size ) ; return - 1 ; }",0
541,,0
542,<S2SV_ModStart> 0 ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
543,<S2SV_ModStart> ) ; } if <S2SV_ModEnd> ( event ->,0
544,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> NULL ) { ND_TCHECK ( * tptr, tptr, length <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_PRINT ( ndo, "" <S2SV_blank> "", ""%s"", length <S2SV_ModEnd> ) ; break",0
545,"<S2SV_ModStart> -> outputbuffer, res -> outputbuffer <S2SV_ModEnd> ) ; if",0
546,"<S2SV_ModStart> ) ) memcpy <S2SV_ModEnd> ( src_width,",0
547,<S2SV_ModStart> ] + 1 <S2SV_ModEnd> ) ; },0
548,,0
549,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
550,<S2SV_ModStart> y_stride ) ; ( void ) cpi ;,0
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; uint16_t <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_MACON2 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MACON2, ENC624J600_ECON2 <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_MACON2 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_MACON2, ENC624J600_ECON2, ENC624J600_MACON2 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_MACON2, ENC624J600_ECON2 <S2SV_ModEnd> ) ; return",0
552,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> ( ( <S2SV_ModStart> ( psf_header ( <S2SV_ModEnd>, psf_header ( <S2SV_ModStart> ( psf <S2SV_ModEnd> ) ) <S2SV_ModStart> ( psf -> header ) ; if ( <S2SV_ModEnd> ( psf -> <S2SV_ModStart> ( psf -> header ) == NULL ) return 1 <S2SV_ModEnd> ; } <S2SV_null>",0
553,<S2SV_ModStart>,0
554,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
555,"<S2SV_ModStart> { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
556,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,<S2SV_ModStart> * s ; char * ch = NULL ; if (! str ) { return NULL ; } <S2SV_ModStart> ) ) ; },0
559,<S2SV_ModStart> ; # if CONFIG_VPX_CODEC_NONE <S2SV_ModEnd> ( svc_ctx -> <S2SV_ModStart> == 0 ) { res = 1 ; } else { res = get_ctx_ctx ( ) ; } else { if ( svc_ctx -> codec_ctx -> svc_type == 1 ) { res = 1 ; } if ( svc_ctx -> svc_ctx -> svc_id == 1 ) { return 1 ; } else { if ( svc_ctx -> codec_ctx -> svc_ctx -> svc_id = 1 ; } <S2SV_ModEnd> } else { <S2SV_ModStart> == 0 ) { if ( svc_ctx -> codec_ctx -> svc_id <S2SV_ModEnd> ) break ; } <S2SV_ModStart> == - 1 ) { if ( svc_ctx -> codec_id <S2SV_ModEnd> ( svc_ctx ->,0
560,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( mvs,",0
561,<S2SV_ModStart> * new_memo ; size_t,0
562,,1
563,"<S2SV_ModStart> ) ), NULL,",0
564,<S2SV_ModStart> if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> id ) ) <S2SV_ModStart> if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> id ),0
565,"<S2SV_ModStart> struct phdr ; struct phdr ; uint32_t phdr ; uint32_len = 0 <S2SV_ModStart> ( phdr, phdr ) { return - 1 ; }",0
566,,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PRESC_CONTEXTS2SV_null> static UINT32 ( UINT32_MAX - 1 ) { UINT32_MAX ; const uint16_t * const uint16_t * const uint16_t * const uint16_t * const uint16_t * const UINT32_MAX ; uint16_t * const UINT32_MAX ; const UINT32_MAX ; const uint16_t * const UINT32_MAX ; const uint16_t * const UINT32_MAX ; const UINT32_MAX ; const uint16_t * const UINT32_MAX ; const UINT32_MAX ; const uint16_t * const UINT32_MAX ; const UINT32_MAX ; const UINT32_MAX ; const UINT32_MAX ; if (! input ) return FALSE ; },0
568,<S2SV_ModStart> out_free ; } else { goto out_free ; },0
569,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static const VP9EncoderConfig <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) { const VP9EncoderConfig <S2SV_ModEnd> cpi -> <S2SV_ModStart>, cpi -> frames_FRAME ) ; } <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> } if (",0
570,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> * r, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ) { vpx_read_literal <S2SV_ModEnd> ( r,",0
571,"<S2SV_ModStart> : # line 104 ""re_grammar.y"" { yr_re_re_grammar.c"" { yr_re_re_re_node ( ( ( * yyvaluep ) -> yyvaluep ). re_node ). re_node ) ; } # line 104 ""grammar.c"" { ( ( ( ( ( * yyvaluep ) -> yyvaluep ). re_node ). re_node ). re_node ). re_node ). re_node ) ; } # line 104 ""re_grammar.c"" { yr_re_grammar.c"" { yr_re_grammar.c"" { yr_re_re_re_re_node ( ( ( ( * yyvaluep ). re_node ). re_node ). re_node ). re_node ). re_node ). re_node ) ; } # line 104 ""grammar.c"" { yr_re_grammar.c"" { yr_node ( ( ( ( ( * yyvaluep ). re_node ). re_node ). re_node ). re_node ). re_node ). re_node ) ; } #",0
572,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static tran_low_t <S2SV_ModEnd> * const tran_low_t <S2SV_ModStart> ) { VP9_COMMON * const tran_COMMON * const tran_low_low_t <S2SV_ModEnd> * const <S2SV_ModStart> VP9_COMMON * const tran_low_low_t <S2SV_ModEnd> * const tran_low_low_t <S2SV_ModStart> ] ; const tran_low_t * const tran_low_t <S2SV_ModEnd> ; const tran_low_t <S2SV_ModStart> VP9_COMMON * const tran_low_low_t * const tran_low_low_t <S2SV_ModEnd> ; const uint8_t <S2SV_ModStart> VP9_COMMON * const tran_low_low_t * const tran_low_t <S2SV_ModEnd> ; const uint8_t <S2SV_ModStart> VP9_COMMON * const tran_low_low_t <S2SV_ModEnd> ; const uint8_t <S2SV_ModStart> cpi ) { const uint8_t * const uint8_t <S2SV_ModEnd> ; const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const int,0
573,,0
574,<S2SV_ModStart> = 0 ;,0
575,,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg ),0
578,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
579,<S2SV_ModStart> ) { return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * const svc_ctx,0
581,,0
582,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
583,"<S2SV_ModStart>, & otmp, NULL",0
584,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> table_table_table_table_table_table ( unsigned long <S2SV_ModStart> inode_table_table_table_table_table_table_table_table_table_offset <S2SV_ModEnd> ( ) <S2SV_ModStart> NULL ) ) { return FALSE ; } <S2SV_ModEnd> if (! <S2SV_ModStart> NULL ) ) return FALSE ; if (! <S2SV_ModEnd> if (! <S2SV_ModStart> NULL ) ) return FALSE ; <S2SV_ModEnd> if (! <S2SV_ModStart> NULL ) ) return FALSE ; <S2SV_ModEnd> return FALSE ;,0
585,<S2SV_ModStart> rule ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> return 0 ;,0
586,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( seg ->,0
587,<S2SV_ModStart> ; if (! type_type ) return 0 ; if ( <S2SV_ModEnd>,0
588,<S2SV_ModStart> ; log_fd <S2SV_ModEnd> ( LOG_CREAT |,0
589,<S2SV_ModStart> i ] ; memset <S2SV_ModEnd> ( x ->,0
590,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_id, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; } if ( tmp == NULL ) { return 1 ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; } else { Py_CLEAR ( tmp ) ; } if ( tmp == NULL ) goto failed ; } else { Py_CLEAR ( tmp ) ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; } else { int res ; res = obj2ast_id ( tmp ) ; res = obj2ast_id ( tmp ) ; if ( tmp == NULL ) goto failed ; } if ( tmp == NULL ) goto failed ; } if ( tmp == Py_CLEAR ( tmp == NULL ) { return 1 ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; } if ( tmp == NULL ) { int res = NULL ;",0
592,"<S2SV_ModStart> * cpi, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_prob <S2SV_ModEnd> * w,",0
593,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> (! <S2SV_ModStart> ) ) { err = - EINVAL ; goto out <S2SV_ModEnd> ; } <S2SV_ModStart> - EINVAL ; goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto out <S2SV_ModEnd> ; },0
594,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
595,,0
596,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> cm -> tile_cols <S2SV_ModStart> cm -> tile_cols ) { int tile_cols = 0 ; <S2SV_ModStart> cm -> tile_cols ) ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> cm -> tile_cols ) ; tile_cols = & tile_cols <S2SV_ModEnd> ( cm -> <S2SV_ModStart> cm -> tile_cols ) ; tile_cols = tile_cols + tile_cols <S2SV_ModEnd> ( cm -> <S2SV_ModStart> cm -> tile_cols ) ; tile_cols = tile_cols + tile_cols + tile_cols <S2SV_ModEnd> ( cm -> <S2SV_ModStart> cm -> tile_cols ) ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> cm -> tile_cols, <S2SV_ModEnd> ( cm -> <S2SV_ModStart> cm -> tile_cols ) ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> cm -> tile_cols,",0
597,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP9_COMMON * const cm <S2SV_ModStart> = NULL ; vpx_write_frame ( ) ; vpx_read_frame ( ) ; <S2SV_ModStart> = 0 ; vpx_free ( ) ; vpx_write <S2SV_ModEnd> ( ) <S2SV_ModStart> = 0 ; vpx_write <S2SV_ModEnd> ( ) <S2SV_ModStart> = NULL ; vpx_free ( * ) ;,0
598,"<S2SV_ModStart> ) ) { GF_LOG_LOG ( s,",0
599,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> && opt -> opt. <S2SV_ModStart> opt. <S2SV_ModEnd> opt -> opt,0
600,"<S2SV_ModStart> * tree, vpx_tree_index <S2SV_ModEnd> * tree )",0
601,"<S2SV_ModStart> ( ctx, vpx_read_t flags <S2SV_ModEnd> ) ) { vpx_err_err_t <S2SV_ModStart> ; if ( get_flags ( ctx ) ) { vpx_err_err ( & VPX_CODEC ) ; } if ( ctx -> flags & VPX_MODE ) { vpx_err_err_error <S2SV_ModEnd> ( ctx, <S2SV_ModStart> ) ) { vpx_err <S2SV_ModEnd> ( ctx, <S2SV_ModStart> ) ) ; } else { vpx_err_err <S2SV_ModEnd> ( & VPX_ERR, <S2SV_ModStart> ) ) ; }",0
602,"<S2SV_ModStart>, & len, 0",1
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
605,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
606,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP9_COMMON * const VP9_COMMON * td = & cpi -> td <S2SV_ModStart> -> common ; MACROBLOCKD * const x = & cpi -> td. mbmi ; MACROBLOCKD * const td = & cpi -> td. mb ; <S2SV_ModStart> -> mbmi ; MACROBLOCKD * const td = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> -> mb ; x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> ( x -> mbmi_mode == BLOCK_SIZE bsize ) { x -> mbmi ; } <S2SV_ModStart> x8x8x8x8x8x8x8x8x8x8x8x8_lookup [ bsize ] <S2SV_ModEnd> ] ; <S2SV_ModStart> ( x -> mbmi_mode == BLOCK_8X8X8X8X8X8X8X8X8X8X8X8X8X8X8X8_HIGHBITDEPTH,0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>,0
608,"<S2SV_ModStart> ; uint32_t value, & 0 <S2SV_ModEnd> ) { uint32_t <S2SV_ModStart>, j ; int bit_max_max_max_max_max <S2SV_ModEnd> ; if ( <S2SV_ModStart> ++ ] == 0 <S2SV_ModEnd> ) { int",0
609,<S2SV_ModStart> } if ( c &&,0
610,<S2SV_ModStart> 0 ) ; if ( len == NULL ) len = 0 ;,0
611,"<S2SV_ModStart> -> height, error,",0
612,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
613,,0
614,"<S2SV_ModStart> ) ) { printf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f\\n"", outputbuffer ) ;",0
615,<S2SV_ModStart> ) ; return FALSE,0
616,<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( cpi ->,0
617,<S2SV_ModStart> ( pbi -> mb_mb_rows,0
618,,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> int i ; uint16_t width ; uint16_t width ; uint8_t <S2SV_ModEnd> ; uint8_t <S2SV_ModStart> stride ) { uint8_t i ; uint16_t width ; uint16_t width ; uint16_t <S2SV_ModEnd> = 4 <S2SV_ModStart> stride ) { if (! s ) { if (! s ) { rdp_assert ( s, 4 ) ; }",0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,<S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> coef_probs [ tx_size,0
623,"<S2SV_ModStart> { r = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, name, 0 )",0
624,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int state -> data <S2SV_ModEnd> ; struct <S2SV_ModStart> = 0x0x0x0x0 ; mutex_mutex ( & d -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ( d -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> = 0x0 ; state -> data <S2SV_ModEnd> = 0x0 ; <S2SV_ModStart> = 0x0 ; mutex_unlock ( & d -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ( d -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ( d -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd> ) ; state -> <S2SV_ModStart> = 0x0x0x0x0x0x0x0 ; mutex_mutex <S2SV_ModEnd> ( d -> <S2SV_ModStart> ( d -> data <S2SV_ModEnd>, 0, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd> ) ; <S2SV_ModStart> ( d -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ( d -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd> ) ; mutex_mutex ) <S2SV_ModStart> = 0x0x0x0x0x0x0x0x0x0x0x0x0x0x0",0
625,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> vpx_codec_priv_t *",0
626,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> VP9_COMMON * const VP9_COMMON * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const <S2SV_ModStart> VP9_VP9_COMMON * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const MACROBLOCKD * const xd, <S2SV_ModStart> VP9_HIGHBITDEPTH ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_HIGHBITDEPTH # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_HIGHBITDEPTH if ( xd -> uv_VP9_HIGHBITDEPTH ) { vp9_HIGHBITDEPTH const vp9_HIGHBITDEPTH vpx_HIGHBITDEPTH memcpy <S2SV_ModEnd> ( vp9_uv, <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( uv_mbd, <S2SV_ModStart> VP9_HIGHBITDEPTH ) ; memcpy <S2SV_ModEnd> ( uv_mbd,",0
627,"<S2SV_ModStart> ( buf, 0,",0
628,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
629,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_worker_worker_worker_worker_worker_worker ( const VP9WorkerData * ) { const tile_worker_worker_worker_worker_worker_worker_workers = & cm -> tile_worker <S2SV_ModEnd> ; const int i <S2SV_ModStart> ) ) { int i ; int i, tile_cols = 0 ; int i <S2SV_ModEnd> ; int i <S2SV_ModStart> ) ) { int i ; for ( i ; i ; i ; i = 0 ; i < tile_data -> tile_cols ; i ++ i ) { int i ; for ( i ) i ; i ; i = 0 ; i < tile_cols ; i ) { int i ; i ++ i ; i ; i ++ i ++ i ; ++ i ; ++ i ; ++ i ; ++ i ; ++ i <S2SV_ModEnd> if (! <S2SV_ModStart> ) break ; ++ i <S2SV_ModEnd> cpi -> tile_data <S2SV_ModStart> ) { int i <S2SV_ModEnd> cpi -> tile_data <S2SV_ModStart> cm -> tile_rows ; } cm -> tile_workers [ i ] = & cm -> tile_data <S2SV_ModStart> cm -> tile_workers [ i ] ) ; cm -> tile_workers ] = &",0
630,"<S2SV_ModStart> ) + offset, 0",0
631,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int i ) <S2SV_ModStart> int i ; vpx_read_depth <S2SV_ModEnd> ( i, <S2SV_ModStart>, i ) { int i, cm -> bit_depth <S2SV_ModStart> i ) ; vpx_write_depth <S2SV_ModEnd> ( i, <S2SV_ModStart> cm -> bit_depth ) ; vpx_read_depth <S2SV_ModEnd> ( seg,",0
632,<S2SV_ModStart> ( ctx -> error == NULL ),0
633,<S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> ; ps_dec ->,0
634,"<S2SV_ModStart> ) ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
636,<S2SV_ModStart> g ) ; g -> gcstate = 0 ;,0
637,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> if ( ret,0
638,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static UINT_MAX <S2SV_ModEnd> ( c, <S2SV_ModStart>, flags, SSL_WRITE <S2SV_ModEnd>, NULL, <S2SV_ModStart>, NULL, NULL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; if ( <S2SV_ModEnd> > <S2SV_null> <S2SV_null> <S2SV_null>",0
639,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> cib_conn_conn_conn_conn <S2SV_ModStart> ; int disconnected = 0 <S2SV_ModStart> ; int server ; int ret <S2SV_ModEnd> ; int rc ; <S2SV_ModStart> ; int ret = 0 ; int ret = 0 <S2SV_ModStart> ; if (! crm_client -> server -> server -> session ) { crm_client -> server. session = 0 ; if (! crm_client -> server -> session ) return - EINVAL ; } if (! crm_client -> server -> server -> server. session ) { crm_client -> session = NULL ; } if (! crm_client -> server -> server -> server -> server. session ) { cib_client = 0 ; if (! crm_client -> server -> server -> server -> server -> server. session ) return - EINVAL ; } if (! crm_client -> server -> server -> server. session ) ) { crm_client_client = - EINVAL ; },0
640,<S2SV_ModStart> 0 ) ; memset <S2SV_ModEnd> ( cpi ->,0
641,<S2SV_ModStart> ( bp [ 0 ] <S2SV_ModEnd> ] ) ;,0
642,"<S2SV_ModStart> int mptctl_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> arg ) <S2SV_ModEnd> return -",0
643,"<S2SV_ModStart>, length, length <S2SV_ModEnd> ) ; image",0
644,,0
645,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> if (!,0
646,"<S2SV_ModStart> * r, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> } <S2SV_null> <S2SV_null>",0
647,"<S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> * probs,",0
648,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>",0
649,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
650,"<S2SV_ModStart> ) ) ; ND_TCHECK <S2SV_ModEnd> ( bp,",0
651,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return error ;,0
652,"<S2SV_ModStart>, & name, NULL <S2SV_ModEnd> ) ; } <S2SV_ModStart> - 1 ; <S2SV_ModEnd> err ) ;",0
653,<S2SV_ModStart> ;,0
654,,0
655,<S2SV_ModStart> ) ; } if <S2SV_ModEnd> ( dpb ->,0
656,"<S2SV_ModStart> ; size_t addrlen_in = 0 ; oe_socklen_out <S2SV_ModStart>, & addrlen_in, & addrlen_in <S2SV_ModStart> OE_RAISE_ERRNO ( OE_EINVAL ) ; if (! addrlen_out ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_out > ( ssize_in ) ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
657,,1
658,<S2SV_ModStart> } return FALSE <S2SV_ModEnd> ; } if,0
659,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ipv6_txoptions * opt,0
660,"<S2SV_ModStart> char * hdr, 0 <S2SV_ModEnd>, int32_t hdr <S2SV_ModStart> = 0 ; uint32_t hdr ; <S2SV_ModStart> = 0 ; uint32_t start_size ; uint32_t <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; uint32_t start_size <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; uint32_t <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; uint32_t start_size = 0 ; <S2SV_ModStart> = 0 ; if ( <S2SV_ModEnd> < 4 ) { <S2SV_ModStart> = 0 ; } if ( <S2SV_ModEnd> < 4 ) { <S2SV_ModStart> = 0 ; goto error ; }",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000ReadReg ( DM9000WriteReg <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ; dm9000WriteReg ( DM9000ReadReg ( DM9000ReadReg ( DM9000WriteReg <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ; dm9000WriteReg ( DM9000WriteReg ( DM9000WriteReg ( DM9000_EPCR <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPCR_EPCR_EPCR_EPCR_EPCR_EPCR_EPCR_EPCR <S2SV_ModEnd> ) ; }",0
662,<S2SV_ModStart> ) { return rc ; <S2SV_ModEnd> } } } if,0
663,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; msg ->,0
664,<S2SV_ModStart> <S2SV_null>,0
665,,0
666,,0
667,<S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ; number_filled =,0
668,"<S2SV_ModStart> ( r, name,",0
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,<S2SV_ModStart> client ) { <S2SV_ModEnd> free ( client,0
671,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
