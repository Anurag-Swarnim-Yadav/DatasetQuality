,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz - sizeof ( struct frag_hdr ) ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz - sizeof ( struct frag_hdr ) ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) ) ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) ) ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz - sizeof ( struct frag,0
2,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
3,<S2SV_ModStart> item ) { return <S2SV_ModEnd> cJSON_GetArrayItem ( array <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
4,"<S2SV_ModStart> u32 event_id, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart> ( PERF_TYPE_SOFTWARE, <S2SV_ModEnd> event_id, nr",0
5,"<S2SV_ModStart> { # ifdef HAVE_MSC_VER if ( EXT2_BLOCK_SIZE ( data ) > sizeof ( buf ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModEnd> leaf = grub_ext4_find_leaf <S2SV_ModStart> leaf ) { <S2SV_ModEnd> grub_error ( GRUB_ERR_BAD_FS <S2SV_ModStart> ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; } if ( -- i >= 0 ) { grub_disk_addr_t start ; start = grub_le_to_cpu32 ( ext [ i ]. start_hi ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu32 (",0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart>, temp3 ; out [ 0 ] = 0 ; out [ 1 ] = 0 ; out [ 2 ] = 0 ; out [ 3 ] = 0 ; out [ 4 ] = 0 ; out [ 5 ] = 0 ; out [ 6 ] = 0 ; out [ 7 ] = 0 ; temp1 = 0 ; temp2 = 0 ; input [ 0 ] = 0 ; input [ 1 ] = 0 ; input [ 2 ] = 0 ; input [ 3 ] = 0 ; input [ 4 ] = 0 ; s0 = input [ 0 ] + input [ 7 ] ; s1 = input [ 1 ] + input [ 6 ] ; s2 = input [ 2 ] + input [ 4 ] ; s3 = input [ 3 ] + input [",0
7,"<S2SV_ModStart> = 0 ; unsigned char sense_buffer [ SCSI_SENSE_BUFFERSIZE ] ; <S2SV_ModStart> -> buflen, sense_buffer, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { err = - EIO ; goto out ; } result = scsi_execute ( SDev, cgc -> cmd, cgc -> data_direction, cgc -> buffer, cgc -> buflen, <S2SV_ModEnd> cgc -> sense <S2SV_ModStart> cgc -> sense, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { err = - EIO ; goto out ; } result = scsi_execute ( SDev, cgc -> cmd, cgc -> data_direction, cgc -> buffer, cgc -> buflen, sense_buffer, cgc -> buflen, sense_buffer, cgc -> sense, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, 0, NULL ) ; if ( driver_byte ( result )",0
8,<S2SV_ModStart> ( ) ; # ifdef LIBRAW_LIBRARY_BUILD <S2SV_ModEnd> imgdata. lens <S2SV_ModStart>. CameraMount = LIBRAW_MOUNT_FixedLens <S2SV_ModEnd> ; # endif,0
9,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> partial_frame ) { VP9_COMMON * const cm = & cpi -> common ; struct loopfilter * const lf = & cm -> lf ; <S2SV_ModEnd> const int min_filter_level <S2SV_ModStart> = get_max_filter_level ( cpi <S2SV_ModEnd> ) ; int <S2SV_ModStart> ; int best_err <S2SV_ModEnd> ; int filt_mid <S2SV_ModStart> / 4 ; memset <S2SV_ModEnd> ( ss_err, <S2SV_ModStart> + 1 ] ; memset ( ss_err, 0xFF, sizeof ( ss_err ) ) ; vpx_yv12_copy_y ( cm -> frame_to_show, & cpi -> last_frame_uf ) ; best_err = try_filter_frame ( sd, cpi, filt_mid, partial_frame ) ; filt_best = filt_mid ; ss_err [ filt_mid ] = best_err ; while ( filter_step > 0 ) { const int bias = ( best_err >> ( 15 - ( filt_mid / 8 ) ) ) * filter_step ; if ( cpi -> twopass. section_intra_",0
10,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
11,"<S2SV_ModStart> encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> i ] ) ; vpx_write <S2SV_ModEnd> ( w,",0
12,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; },0
13,"<S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
14,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; if ( dest_keyring ) { key_get ( dest_keyring ) ; return 0 ; } <S2SV_ModEnd> switch ( cred <S2SV_ModStart> KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : if ( cred -> request_key_auth ) { authkey = cred -> request_key_auth ; up_read ( & authkey -> sem ) ; if (! test_bit ( KEY_FLAG_REVOKED, & authkey -> flags ) ) dest_keyring = key_get ( authkey -> dest_keyring ) ; break ; } case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( rcu_dereference ( cred -> process_keyring ) ) ; if ( dest_keyring ) break ; <S2SV_ModEnd> }",0
15,<S2SV_ModStart> create_spnego_ctx ( ) ; if ( sc == NULL ) return GSS_S_FAILURE ;,0
16,<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> ret = - <S2SV_ModStart> ; if ( addr -> l2tp_family!= AF_INET <S2SV_ModEnd> ) return - <S2SV_ModStart> EINVAL ; ret = - EADDRINUSE ; if ( sk -> sk_state!= TCP_CLOSE || addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_LOCAL && chk_addr_ret!= RTN_BROADCAST ) goto out ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_MULTICAST && chk_addr_ret!= RTN_BROADCAST ) goto out ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_MULTICAST && chk_addr_ret!= RTN_BROADCAST ) goto out ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_,0
17,<S2SV_ModStart> ; tm = g_localtime <S2SV_ModEnd> ( & t,0
18,"<S2SV_ModStart> length ) ; md5_update ( & my_md5, password, strlen ( password ) ) ; md5_update ( & my_md5, vector, AUTH_VECTOR_LEN ) ; md5Final ( & my_md5, & hashed [ ( length >> 4 ) * AUTH_PASS_LEN ], AUTH_PASS_LEN ) ; for ( i = 1 ; i < length >> 4 ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5, & hashed [ ( i - 1 ) * AUTH_PASS_LEN ], AUTH_PASS_LEN ) ; md5_update ( & my_md5, vector, AUTH_VECTOR_LEN ) ; md5Final ( & my_md5, & hashed [ ( i >> 4 ) * AUTH_PASS_LEN ], AUTH_PASS_LEN ) ; for ( i = 1 ; i < length >> 4 ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5, & hashed [ ( i - 1 ) * AUTH_PASS_LEN ], AUTH_PASS_LEN ) ; md5Final ( &",0
19,"<S2SV_ModStart> ; if ( e == NULL ) { r = ENOMEM ; goto fail ; } r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) goto not_found ; r = sd_bus_call_method ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1.Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_bus_message_read ( reply, ""u"", & mapped ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_",0
20,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode,",0
21,"<S2SV_ModStart> = 0 ; if ( select ( reader -> bytes_available_fd + 1, & read_fds, NULL, NULL, & timeout ) < 0 ) { FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return FALSE ; } if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return FD_ISSET ( reader -> bytes_available_fd + 1, & read_fds, NULL, NULL, & timeout ) ; } if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if (! FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return FALSE ; }",0
22,"<S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> int trans_to_still = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> > MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 <S2SV_ModEnd> ) { int <S2SV_ModStart> int j ; TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> twopass -> stats_in <S2SV_ModEnd> ; for ( <S2SV_ModStart> j ) { TWO_PASS <S2SV_ModEnd> tmp_next_frame ; if <S2SV_ModStart> pcnt_inter - tmp_next_frame. pcnt_motion <S2SV_ModEnd> < 0.999 ) <S2SV_ModStart> pcnt_inter - tmp_next_frame. <S2SV_ModEnd> pcnt_motion < 0.999 <S2SV_ModStart> pcnt_inter - tmp_next_frame. <S2SV_ModEnd> pcnt_motion < 0.999 <S2SV_ModStart> pcnt_inter - tmp_next_frame. <S2SV_ModEnd> pcnt_motion < 0.999 <S2SV_ModStart> pcnt_inter - tmp_next_frame. <S2SV_ModEnd> pcnt_motion < 0.999 <S2SV_ModStart> pcnt_inter - tmp_next_frame. <S2SV_ModEnd> pcnt_motion < 0.999 <S2SV_ModStart> pcnt_inter - tmp_next_frame. <S2SV_ModEnd> pc",0
23,"<S2SV_ModStart> return ret ; ret = ext4_convert_unwritten_extents_nolock ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten <S2SV_blank> extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" ""inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, inode -> i_ino, io -> flag ) ; return ret ; } if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten <S2SV_blank> extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" ""inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"" ""inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, inode -> i_ino, io -> flag ) ; return ret ; }",0
24,<S2SV_ModStart> alg ) { if <S2SV_ModEnd> (! ( <S2SV_ModStart> mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! try_module_get ( THIS_MODULE ) ) { if (! try_module_get ( THIS_MODULE ) ) { if (! try_module_get ( THIS_MODULE ) ) { if (! try_module_get ( THIS_MODULE ) ) { if (! try_module_get ( THIS_MODULE ) ) { if (! module_get ( THIS_MODULE ) ) { if (! try_module_get ( THIS_MODULE ) ) { if (! try_module_get ( THIS_MODULE ) ) { if (! try_module_get ( THIS_MODULE ) ) { if (! try_module_get ( THIS_MODULE ) ) { if (! try_module_get ( THIS_MODULE ) ) { if (! try_module_get ( THIS_MODULE ) ) { if (! module_get ( THIS_MODULE ) ) { if (! try_module_get ( THIS_MODULE ) ) { if (! module_get ( THIS_MODULE ) ) { if (! module_get ( THIS,0
25,"<S2SV_ModStart> = GIT_PKT_NG ; if ( strlen ( line ) < 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; git__free ( pkt ) ; return - 1 ; } <S2SV_ModStart> += 3 ; if ( strlen ( line ) < 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; git__free ( pkt ) ; return - 1 ; } <S2SV_ModStart> + 1 ; if ( strlen ( line ) < 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; git__free ( pkt ) ; return - 1 ; } <S2SV_ModStart> = '\\0' ; if ( strlen ( line ) < 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; git__free ( pkt ) ; return - 1 ; } if ( strlen ( line ) < 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; git__free ( pkt ) ; return - 1 ; }",0
26,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;,0
27,<S2SV_ModStart> pb ) ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> pb ) ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ;,0
28,"<S2SV_ModStart> 1 ; } ret = mount_entry_on_generic_nolock <S2SV_ModEnd> ( mntent,",0
29,"<S2SV_ModStart> - ENODEV ; for ( idx = 0 ; idx < io -> io_size ; idx ++ ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME ) == NULL ) { mem_region_cleanup ( io, idx ) ; return - EIO ; } } } for ( idx = 0 ; idx < io -> io_size ; idx ++ ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME ) == NULL ) { mem_region_cleanup ( io, idx ) ; return - EIO ; } } for ( idx = 0 ; idx < io -> io_size ; idx ++ ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME ) == NULL ) { mem_region_cleanup ( io, idx ) ; return - EIO ; } } for ( idx = 0 ; idx < io -> io_size ; idx ++ ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME ) ==",0
30,<S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ),0
31,<S2SV_ModStart> ) ) ; if ( ret ) { btif_storage_free_bonded_devices ( remote_bd_addr ) ; return BT_STATUS_FAIL ; },0
32,<S2SV_ModStart> res ; vpx_codec_enc_cfg_map_t <S2SV_ModEnd> * map ; <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if (! iface -> enc. cfg_maps ) return VPX_CODEC_INCAPABLE ; if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCOD,0
33,"<S2SV_ModStart> type_flags ) { struct <S2SV_ModEnd> packet_sock * po <S2SV_ModStart> EINVAL ; } mutex_lock ( & fanout_mutex ) ; po = rcu_dereference_protected ( sk -> sk_wq, sock_owned_by_user ( sk ) ) ; if (! po ) { err = - EINVAL ; goto out ; } <S2SV_ModEnd> if ( type <S2SV_ModStart> ) ) { err = <S2SV_ModEnd> - ENOMEM ; <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_huge <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_huge <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_huge <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover ->",0
34,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
35,"<S2SV_ModStart> uint64_t dx_time ) { if ( frame_in < 0 || frame_out < 0 ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out ) ; return ; }",0
36,"<S2SV_ModStart> ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> rows <S2SV_blank> of <S2SV_blank> type <S2SV_blank> %d\\n"", <S2SV_ModEnd> num_fields, ChopBlanks <S2SV_ModStart> ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> rows <S2SV_blank> of <S2SV_blank> type <S2SV_blank> %d\\n"", <S2SV_ModEnd> num_fields, ChopBlanks <S2SV_ModStart> ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> fields <S2SV_blank> of <S2SV_blank> type <S2SV_blank> %d\\n\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> fields <S2SV_blank> %d\\n"", <S2SV_ModEnd> num_fields, ChopBlanks <S2SV_ModStart> ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> rows <S2SV_blank> of <S2SV_blank> type <S2SV_blank> %d\\n"", <S2SV_ModEnd> num_fields, ChopBlanks <S2SV_ModStart> ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> fields <S2SV_blank> of <S2SV_blank> type <S2SV_blank> %d\\n\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> fields <S2SV_blank> %d\\n"", <S2SV_ModEnd> num_fields, <S2SV_ModEnd> ChopBlanks,",0
37,"<S2SV_ModStart> NO_ERROR ; } <S2SV_ModEnd> enc28j60SetBit ( interface <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteBuffer ( interface, buffer, offset ) ; enc28j60SetBit ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRTS <S2SV_ModEnd> ) ; return <S2SV_ModStart>",0
38,"<S2SV_ModStart> ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset",0
39,"<S2SV_ModStart> ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""error"" ) ; http_response_send ( res ) ; return ; } <S2SV_ModEnd> } else if <S2SV_ModStart> ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""error"" ) ; http_response_send ( res ) ; return ; } <S2SV_ModEnd> } else if <S2SV_ModStart> req ) ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } <S2SV_ModEnd> } else if <S2SV_ModStart> ) ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""error"" ) ; http_response_send ( res ) ; return ; } <S2SV_ModEnd> } else if <S2SV_ModStart> req ) ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } <S2SV_ModEnd> } else if",0
40,"<S2SV_ModStart> flag ) { ( void ) low_var_thresh ; ( void ) post ; ( void ) low_var_thresh ; ( void ) low_var_thresh ; ( void ) flag ; int mb_rows = source -> y_width >> 4 ; int mb_cols = source -> y_height >> 4 ; unsigned char * limits = cm -> pp_limits_buffer ; int mbr, mbc ; ( void ) low_var_thresh ; ( void ) flag ; memset ( limits, ( unsigned char ) ppl, 16 * mb_cols ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vpx_post_proc_down_and_",0
41,"<S2SV_ModStart> ptr ) { if ( copy_to_user ( param, ptr, sizeof ( * ptr ) ) ) return - EFAULT ; param += sizeof ( struct floppy_raw_cmd ) ; if ( ( ptr -> flags & FD_RAW_READ ) && ptr -> buffer_length ) { long length = ptr -> buffer_length - ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; } ret = copy_to_user ( param, ptr -> kernel_data, sizeof ( * ptr ) ) ; if ( ret ) return ret ; param += sizeof ( struct floppy_raw_cmd ) ; if ( ( ptr -> flags & FD_RAW_WRITE ) && ptr -> buffer_length ) { long length = ptr -> buffer_length - ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; } ret = copy_to_user ( param, ptr -> kernel_data, sizeof ( * ptr ) ) ; if ( ret ) return ret ; param += sizeof ( struct floppy_raw_cmd",0
42,"<S2SV_ModStart> void ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> ce = mb_cache_entry_alloc <S2SV_ModStart> = mb_cache_entry_insert ( ext4_mb_cache, <S2SV_ModEnd> bh -> b_bdev <S2SV_ModStart> bh -> b_blocknr <S2SV_ModEnd>, hash ) <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } <S2SV_null>",0
43,"<S2SV_ModStart> ) ) ; if (! r_socket_http_answer ( s, code, rlen ) ) { r_socket_protocol_error ( s, ""POST <S2SV_blank> /%s <S2SV_blank> HTTP/1.0\\r\\n"" ""User-Agent: <S2SV_blank> radare2 <S2SV_blank> "" R2_VERSION ""\\r\\n"" ""User-Agent: <S2SV_blank> radare2 <S2SV_blank> "" R2_VERSION ""\\r\\n"" ) ; r_socket_protocol_error ( s, ""POST <S2SV_blank> /%s <S2SV_blank> HTTP/1.0\\r\\n"" ""User-Agent: <S2SV_blank> radare2 <S2SV_blank> "" R2_VERSION ""\\r\\n"", ""POST <S2SV_blank> /%s <S2SV_blank> HTTP/1.0\\r\\n"" ""User-Agent: <S2SV_blank> radare2 <S2SV_blank> "" R2_VERSION ""\\r\\n"" ""User-Agent: <S2SV_blank> radare2 <S2SV_blank> "" R2_VERSION ""\\r\\n"" ) ; r_socket_protocol_error ( s, ""POST <S2SV_blank> /%s <S2SV_blank> HTTP/1.0\\r\\n"" ""User-Agent: <S2SV_blank> radare2 <S2SV_blank> "" R2_VERSION ""\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n""",0
44,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ip_options_get_from_user ( struct <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> - ENOMEM ; rcu_read_lock ( ) ; <S2SV_ModStart> copy_from_user ( & opt -> opt, data, optlen ) ; rcu_read_unlock ( ) ;",0
45,"<S2SV_ModStart> ) ) ; if ( length < sizeof ( struct rpl_dio_genoption ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; return ; }",0
46,"<S2SV_ModStart> e_invarg ; } else if ( ( * varp ) [ 0 ] == NUL ) { errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; } else if ( ( * varp ) [ 0 ] == NUL ) { errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; } else if ( ( * varp ) [ 0 ] == NUL ) { errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; } else if ( ( * varp ) [ 0 ] == NUL ) { errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; } else if ( ( * varp ) [ 0 ] == NUL ) { errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string",0
47,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
48,"<S2SV_ModStart> size_t size ; if ( width < 0 || height < 0 || hstep <= 0 || vstep <= 0 ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_intfast32_add ( tlx, tly, 0 ) ||! jas_safe_intfast32_add ( tlx, tly, 0 ) ||! jas_safe_intfast32_add ( tly, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; } if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } cmpt -> stream_ = ( inmem )? jas_stream_memopen2 ( 0, size ) : jas_stream_tmpfile ( ) ; if (!",0
49,<S2SV_ModStart> ++ ) { if ( i < ( int ) header_buf_used && <S2SV_ModStart> ++ ) { if ( i < ( int ) header_buf_used && <S2SV_ModStart> ++ ) { if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] ==,0
50,"<S2SV_ModStart> ; if ( unlikely ( pc + asn1_op_lengths [ op ] > datalen ) ) { pr_debug ( ""asn1_ber_decoder: <S2SV_blank> pc=\\e[32m%zu\\e[m/%zu <S2SV_blank> dp=\\e[33m%zu\\e[m/%zu-dp=\\e[33m%zu\\e[m/%zu-dp=\\e[33m%zu\\e[m/%zu-dp=\\e[33m%zu\\e[m/%zu-dp=\\e[32m%zu\\e[m/%zu-dp=\\e[33m%zu\\e[m/%zu-dp=\\e[33m%zu\\e[m/%zu-dp=\\e[33m%zu\\e[m/%zu-dp=\\e[33m%zu\\e[m/%zu-dp=\\e[33m%zu\\e[m/%zu-dp=\\e[33m%zu\\e[m/%zu-dp=",0
51,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> acl_len ) { __be32 * savep = req -> rq_rcv_buf. head ; struct kvec * iov = req -> rq_rcv_buf. head ; struct kvec * kvec = req -> rq_rcv_buf. head <S2SV_ModEnd> ; int status <S2SV_ModStart> int status ; if ( ( status = decode_op_hdr ( xdr, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out ; if ( unlikely ( status!= - EIO ) ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; } <S2SV_ModEnd> xdr_read_pages ( xdr <S2SV_ModStart> attrlen ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> acl_len = attrlen ;",0
52,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
53,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart> ) ; } if ( owner && * owner ) { if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = 0 ; } } if ( group && * group ) { if ( smatch ( group, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = groupToID ( group ) ; } }",0
54,"<S2SV_ModStart> NULL ; # if CONFIG_MEM_MANAGER int number_aau ; if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = hmm_alloc ( & hmm_d, number_aau ) ; <S2SV_ModEnd> if ( addr",0
55,"<S2SV_ModStart> int res ; unsigned<extra_id_1>long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) + 1 <S2SV_ModEnd> ] ; res <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) + 1 <S2SV_ModEnd> ] ; res <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) + 1 ] ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } <S2SV_ModEnd> * table_start =",0
56,"<S2SV_ModStart> HASH_DISABLED ; } else { return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 ) ; }",0
57,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
58,"<S2SV_ModStart> = 0.0 ; uint32 nstrips = 0, ntiles = 0 ; uint16 <S2SV_ModEnd> planar = 0 <S2SV_ModStart> = 0 ; nstrips = TIFFGetField ( in, TIFFTAG_NSTRIPS, & nstrips ) ; ntiles = TIFFGetField ( in, TIFFTAG_NTILERS, & ntiles ) ; nstrips = TIFFGetField ( in, TIFFTAG_NTILERS, & ntiles ) ; ntiles = TIFFGetField ( in, TIFFTAG_NTILERS, & ntiles ) ; if (! nstrips ) { TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> nstrips <S2SV_blank> tag"" ) ; TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> nstrips <S2SV_blank> tag"" ) ; return - 1 ; } nstrips = TIFFGetField ( in, TIFFTAG_NTILERS, & nstrips ) ; ntiles = TIFFGetField ( in, TIFFTAG_NTILERS, & ntiles ) ; if (! nstrips ) { TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> nstrips <S2SV_blank> tag"" ) ; TIFFError ( ""loadImage",0
59,"<S2SV_ModStart> = 0 ; # if CONFIG_VP8_ENCODER if ( strcmp ( global -> codec -> name, ""vp8"" ) == 0 || strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp10"" ) == 0 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp11"" ) == 0 ) { ctrl_args = vp11_args ; ctrl_args_map = vp11_arg_ctrl_map ; # endif } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & arg, & fpf_name, argi ) ) { config -> stats_fn = arg",0
60,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
61,"<S2SV_ModStart> = 0 ; size_t ext_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; <S2SV_ModStart> out ; } ext_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size <S2SV_ModEnd> ) ; neh <S2SV_ModStart> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, 0 ) ) ; neh = ext_block_hdr ( bh ) ; if ( ext_depth ( inode ) ) neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( inode, 0 ) ) ; else neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, 0 ) ) ; neh -> eh_magic = cpu_to_le16 ( EXT4_EXT_MAGIC ) ; ext4_extent_block_csum_set ( inode, neh ) ;",0
62,"<S2SV_ModStart> verify_checks ( c <S2SV_ModEnd>, preverify_ok, <S2SV_ModStart> callback_ctx ) ) { SSL_SESSION * sess ; if (! sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } <S2SV_ModEnd> return 1 ; <S2SV_ModStart> 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
63,"<S2SV_ModStart> ; if (! IS_ALIGNED ( cmac [ AT91_AES_BLOCK_SIZE_BYTE ], sizeof ( computed_cmac ) ) ) { rc = - EINVAL ; goto exit ; } rc = at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ; if ( rc!= 0 ) { at91_aes_cleanup ( ) ; memset ( cmac_key, 0, sizeof ( cmac_key ) ) ; memset ( cipher_key, 0, sizeof ( cipher_key ) ) ; memset ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { at91_aes_cleanup ( ) ; memset ( cmac_key, 0, sizeof ( cmac_key ) ) ; memset ( cipher_key, 0, sizeof ( cipher_key ) ) ; memset ( iv, 0, sizeof ( iv ) ) ;",0
64,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
65,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
66,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. gf_group_bits += cpi -> rc. this_frame_target - bits_used ; } else { cpi -> twopass. gf_group_bits -= bits_used ; } # else if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } else { cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } # else if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group",0
67,"<S2SV_ModStart> EOFOp 0x07 <S2SV_ModEnd> char magick [ <S2SV_ModStart> ( image, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( image, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( image, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( image, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( image, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( image, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( image, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( image, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( image, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( image, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( image, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( image, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( unsigned char, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( unsigned char, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( unsigned char, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( unsigned char, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( unsigned char, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( unsigned char, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( unsigned char, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( unsigned char, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( unsigned char, 12 <S2SV_ModEnd>, unsigned char",0
68,"<S2SV_ModStart> err_free_buf ; } dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceNumber ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
69,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
70,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> dir = ""/tmp"" ) == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
71,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE (,0
72,"<S2SV_ModStart> n ++ ; if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
73,"<S2SV_ModStart> void vp9_setup_dst_planes ( <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> mi_col ) { <S2SV_ModEnd> const uint8_t * <S2SV_ModStart> uint8_t * const buffers <S2SV_ModEnd> [ 4 ] <S2SV_ModStart> 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_x, pd -> subsampling_y ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
74,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { return assign_eip_near ( ctxt, dst, <S2SV_ModEnd> ctxt -> op_bytes <S2SV_ModStart> ctxt -> op_bytes ) <S2SV_ModEnd> ; } <S2SV_null>",0
75,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
76,"<S2SV_ModStart> == READ ) { ssize_t ret ; mutex_lock ( & inode -> i_mmap_sem ) ; ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; mutex_unlock ( & inode -> i_mmap_sem ) ; return ret <S2SV_ModEnd> ; } return <S2SV_ModStart> == READ ) { mutex_unlock ( & inode -> i_mmap_sem ) ; get_block = ocfs2_get_block ; mutex_lock ( & inode -> i_mmap_sem ) ; ret = blockdev_direct_IO ( iocb, inode -> i_sb -> s_bdev, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; mutex_unlock ( & inode -> i_mmap_sem ) ; mutex_unlock ( & inode -> i_mmap_sem ) ; mutex_unlock ( & inode -> i_mmap_sem ) ; mutex_unlock ( & inode -> i_mmap_sem ) ; mutex_unlock ( & inode -> i_mmap_sem ) ; mutex_unlock",0
77,"<S2SV_ModStart> ; if ( ( sscanf ( f, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == 2 ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strcpy ( newstring, strparm + 1 ) ; } else if ( sscanf ( f, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == 2 ) { if ( sscanf ( f, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == 2 ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strcpy ( newstring, strparm + 1 ) ; } else if ( sscanf ( f, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == 2 ) { if ( sscanf ( f, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm )",0
78,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> ; int kind <S2SV_ModEnd> ; void * <S2SV_ModStart> ; PyCompilerFlags cf <S2SV_ModEnd> ; char * <S2SV_ModStart> ; char * str ; PyObject * o, * fstring_name ; Py_ssize_t len ; Py_ssize_t i ; assert ( expr_end >= expr_start ) ; assert ( * ( expr_start - 1 ) == '{' ) ; assert ( * ( expr_start - 1 ) == '}' || * ( expr_end - expr_start ) == '!' || * ( expr_end - expr_start ) == ':' ) ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = PyUnicode_GET_LENGTH ( o ) ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! Py_UNICODE_ISSPACE ( kind, data, i ) ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } }",0
79,<S2SV_ModStart> string ) { return <S2SV_ModEnd> cJSON_strcasecmp ( object <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
80,"<S2SV_ModStart>, NO_HASHEXPAND, <S2SV_ModEnd> NO_HASHEXPAND, SLAB_AUTOMOVE_RATIO <S2SV_ModStart> NO_HASHEXPAND, SLAB_AUTOMOVE_WINDOW <S2SV_ModEnd>, TAIL_REPAIR_TIME, <S2SV_ModStart> NO_HASHEXPAND, SLAB_AUTOMOVE_RATIO <S2SV_ModEnd>, TAIL_REPAIR_TIME, <S2SV_ModStart> NO_HASHEXPAND, SLAB_AUTOMOVE_WINDOW <S2SV_ModEnd>, SLAB_AUTOMOVE_RATIO, <S2SV_ModStart> NO_HASHEXPAND, SLAB_AUTOMOVE_RATIO <S2SV_ModEnd>, SLAB_AUTOMOVE_WINDOW <S2SV_ModEnd>, TAIL_REPAIR_TIME, <S2SV_ModStart> NO_HASHEXPAND, SLAB_AUTOMOVE_RATIO <S2SV_ModEnd>, TAIL_REPAIR_TIME, <S2SV_ModStart> NO_HASHEXPAND, SLAB_AUTOMOVE_WINDOW <S2SV_ModEnd>, SLAB_AUTOMOVE_RATIO, SLAB_AUTOMOVE_RATIO <S2SV_ModEnd>, SLAB_AUTOMO",0
81,<S2SV_ModStart> size ) ; <S2SV_ModEnd> px -> ft,0
82,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> val_h, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> val_l ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; length -= 2 ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; <S2SV_ModStart> val_l ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> val_l ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
83,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
84,"<S2SV_ModStart> void ) { test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/foobar"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1",0
85,"<S2SV_ModStart> int i ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, <S2SV_ModEnd> src -> alpha_buffer <S2SV_ModStart> src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_z <S2SV_ModEnd> ) ; }",0
86,"<S2SV_ModStart> ; lock_sock ( sk ) ; if (! msg -> msg_name ) { msg -> msg_name = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; msg -> msg_namelen = 0 ; msg -> msg_name = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; msg -> msg_name = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; } else { if (! msg -> msg_name ) { msg -> msg_name = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; msg -> msg_name = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; msg -> msg_name = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; } msg -> msg_name = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; if (! msg -> msg_name ) ) { msg -> msg_name = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; msg -> msg_namelen =",0
87,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
88,<S2SV_ModStart> user ) { if (! user ) return - EINVAL ;,0
89,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
90,"<S2SV_ModStart> * for_ch ; type_ty type ; <S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } type = TYPE ( CHILD ( n, 0 ) ) ; if ( type == TYPE_COMMENT ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } if ( is_async && c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ;",0
91,"<S2SV_ModStart> NULL ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe + 1 ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe + 1 ; i <= dst_state -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } dst_",0
92,"<S2SV_ModStart> void write_mb_modes_kf ( <S2SV_ModEnd> const VP9_COMP * <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> w ) { const MACROBLOCKD * const xd = & cpi -> mb. e_mbd ; const MODE_INFO * const left_mi = xd -> left_available? mi_8x8 [ - xd -> mi_stride ] : NULL ; const MODE_INFO * const above_mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * const above_mi = xd -> above_available? mi_8x8 [ - xd -> mi_stride : NULL ; const MODE_INFO * const above_mi = mi -> above_mi ; const MODE_INFO * const above_mi = mi -> above_mi ; const MODE_INFO * const left_mi = mi -> left_mi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id ) ; write_skip ( cpi, above_mi -> tx_size, bsize, w )",0
93,"<S2SV_ModStart> maxn ) { switch ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETPROPERTY : decompileGETPROPERTY ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n, actions, maxn ) ; return 0 ; case SWFACTION_CALLFRAME : decompileCALLFRAME ( n, actions, maxn ) ; return 0 ; case SWFACTION_CALLFRAME2 : decompileCALLFRAME2 ( n, actions, maxn ) ; return 0 ;",0
94,"<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & prep -> pp_n ) ; <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS <S2SV_ModStart> n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", ps -> slot, ps -> nid ) ) ; ps = ( const struct pgstate * ) ( ps + 1 ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %c%s:%u"", c, ipaddr_string ( ndo, & ps -> page. p_sid ), EXTRACT_32BITS ( & ps -> page. p_uid ) ) ) ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) ( ps + 1 ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %c%s:%u"", c, ipaddr_string ( ndo, & ps -> page. p_sid ),",0
95,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
96,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * * azModuleArg = sqlite3DbRealloc ( db, <S2SV_ModEnd> pTable -> azModuleArg",0
97,<S2SV_ModStart> ++ ) { if ( i >= anal_size ) { ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> synth_size - 1 ] = 0 ; } else { ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> synth_size - 1 ] = 0 ; } else if ( i >= anal_size ) { ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> synth_size - 1 ] = 0 ; } else { ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> synth_size - 1 ] = 0 ; } else { ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN,0
98,"<S2SV_ModStart> -> dmin ; if ( p >= q ) { rdp_protocol_error ( 0x534e4554, ""forward_search_range: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> range: <S2SV_blank> %d\\n"", ( int ) str, ( int ) p, ( int ) q ) ; } else { rdp_protocol_error ( 0x534e4554, ""forward_search_range: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> range: <S2SV_blank> %d\\n"", ( int ) ( ""forward_search_range: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> low: <S2SV_blank> %d\\n"", ( int ) str, ( int ) low, ( int ) high, ( int ) low_prev ) ; } else { rdp_protocol_error ( 0x534e4554, ""forward_search_range: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d\\n"", ( int ) ( ""forward_search_range: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> range:",0
99,<S2SV_ModStart> <S2SV_null> static void <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfqq ) { <S2SV_ModEnd> struct bfq_data * <S2SV_ModStart> flags ) ; <S2SV_ModEnd> if ( bfq_bfqq_budget_timeout <S2SV_ModStart> return ; } <S2SV_ModEnd> spin_lock_irqsave ( & <S2SV_ModStart> flags ) ; <S2SV_ModEnd> bfq_clear_bfqq_wait_request ( bfqq,0
100,,1
101,"<S2SV_ModStart> PERF_COUNT_SW_ALIGNMENT_FAULTS, 1 <S2SV_ModEnd>, regs,",0
102,<S2SV_ModStart> + x > ( Py_ssize_t ) <S2SV_ModStart> NULL ; } if ( diffPtr + x + diffBlockLength > ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) <S2SV_ModStart> NULL ; } if ( diffPtr + x > ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ),0
103,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
104,"<S2SV_ModStart> ; if ( MagickMax ( number_pixels, ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ( number_pixels, ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMaxType ) ( MagickMax",0
105,<S2SV_ModStart> ) pktnum ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; } <S2SV_ModStart> ) pktnum ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; } <S2SV_ModStart> ) pktnum ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; } <S2SV_ModStart> ) pktnum ; } if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; } <S2SV_ModStart> ) pktnum ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; } <S2SV_ModStart> ) pktnum ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; },0
106,<S2SV_ModStart> data ) { # if CONFIG_VP9_HIGHBITDEPTH switch ( data -> mode ) { case VPX_ENC_MODE_HIGHBITDEPTH : case VPX_ENC_MODE_LOWBITDEPTH : case VPX_ENC_MODE_HIGHBITDEPTH : case VPX_ENC_MODE_HIGHBITDEPTH : return encoder_common_init_highbitdepth ( ctx ) ; case VPX_ENC_MODE_HIGHBITDEPTH : return encoder_common_init_highbitdepth ( ctx ) ; } # if CONFIG_VP9_HIGHBITDEPTH switch ( data -> mode ) { case VPX_ENC_MODE_HIGHBITDEPTH : case VPX_ENC_MODE_HIGHBITDEPTH : case VPX_ENC_MODE_HIGHBITDEPTH : case VPX_ENC_MODE_HIGHBITDEPTH : return encoder_common_init_highbitdepth ( ctx ) ; # else return encoder_common_init_highbitdepth ( ctx ) ; # endif # if CONFIG_VP9_HIGHBITDEPTH switch ( data -> mode ) { case VPX_ENC_MODE_HIGHBITDEPTH : case VPX_ENC_MODE,0
107,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
108,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
109,"<S2SV_ModStart> mbmi. mv. as_int ; memcpy <S2SV_ModEnd> ( mvp, <S2SV_ModStart> mbmi. mv. as_int, sizeof ( near_mvs [ 0 ]. as_int ) ) ; memcpy <S2SV_ModEnd> ( mvp, <S2SV_ModStart> mbmi. mv. as_int, sizeof ( near_mvs [ 0 ]. as_int ) ) ; memcpy <S2SV_ModEnd> ( mvp, <S2SV_ModStart> mbmi. mv. as_int, sizeof ( near_mvs [ 0 ]. as_int ) ) ; memcpy <S2SV_ModEnd> ( mvp, <S2SV_ModStart> mbmi. mv. as_int, sizeof ( near_mvs [ 0 ]. as_int ) ) ; memcpy <S2SV_ModEnd> ( mvp, <S2SV_ModStart> mbmi. mv. as_int, sizeof ( near_mvs [ 0 ]. as_int ) ) ; memcpy <S2SV_ModEnd> ( mvp, <S2SV_ModStart> mbmi. mv. as_int, sizeof ( near_mvs [ 0 ]. as_int ) ) ; memcpy <S2SV_ModEnd> ( mvp,",0
110,"<S2SV_ModStart> out_free ; } copied = skb_copy_datagram_iovec ( skb, 0, msg -> msg_iov, msg -> msg_namelen ) ; if ( copied < 0 ) { err = copied ; goto out_free ; }",0
111,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
112,"<S2SV_ModStart> asconf ) { <S2SV_ModEnd> __u32 serial ; <S2SV_ModStart> serial ; int param_len = ntohs ( asconf -> chunk_hdr -> length ) - sizeof ( sctp_addiphdr_t ) ; <S2SV_ModStart> goto done ; param_len = ntohs ( asconf -> param_hdr. length ) ; err_code = sctp_process_asconf_param ( asoc, asconf, param_len <S2SV_ModEnd> ) ; if <S2SV_ModStart>! err_code ) <S2SV_ModEnd> sctp_add_asconf_response ( asconf_ack <S2SV_ModStart> goto done ; <S2SV_ModEnd> if ( SCTP_ERROR_NO_ERROR <S2SV_ModStart>!= err_code ) <S2SV_ModEnd> sctp_add_asconf_response ( asconf_ack <S2SV_ModStart> goto done ; param_len = ntohs ( asconf_param -> param_hdr. length ) ; if ( param_len > 0 ) { err_code = sctp_process_asconf_param ( asoc, asconf, param_len <S2SV_ModEnd> ) ; if <S2SV_ModStart> goto done ; param_len = ntohs ( asconf_param -> param_hdr. length ) ; asconf_param = ( void * ) param_",0
113,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
114,"<S2SV_ModStart> msicap ; int rc ; rc = pci_populate_msicap ( dev <S2SV_ModEnd>, msgnum,",0
115,"<S2SV_ModStart>!= infoCommand && <S2SV_ModEnd> cmd -> proc <S2SV_ModStart>!= slaveofCommand ) { addReplyError ( c, ""link <S2SV_blank> with <S2SV_blank> MASTER <S2SV_blank> is <S2SV_blank> down <S2SV_blank> and <S2SV_blank> slave-serve-data <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; return REDIS_OK ; }",0
116,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( & ctx -> vp8_cfg, 0, sizeof ( ctx -> vp8_cfg ) ) ; <S2SV_ModStart>!= VPX_RC_ONE_PASS ) <S2SV_ModEnd> ) ERROR ( <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; res = validate_config ( ctx, cfg, & ctx -> vp8_cfg, 0",0
117,"<S2SV_ModStart> cpi ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. frame_mode == VPX_FRAME_MODE_HIGHBITDEPTH ) { cpi -> oxcf. frame_mode = VPX_FRAME_MODE_HIGHBITDEPTH ; } else { cpi -> oxcf. frame_mode = VPX_FRAME_MODE_HIGHBITDEPTH ; } # endif vpx_init_plane_quantizers ( cpi, & cpi -> mb ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. frame_mode == VPX_FRAME_MODE_HIGHBITDEPTH && cpi -> oxcf. frame_mode == VPX_FRAME_MODE_HIGHBITDEPTH ) { vp9_init_plane_quantizers ( cpi, & cpi -> mb ) ; } # else vpx_init_plane_quantizers ( cpi, & cpi -> mb ) ; # endif } # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. frame_mode == VPX_FRAME_MODE_HIGHBITDEPTH ) {",0
118,"<S2SV_ModStart> int rc ; if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { rc = assign_eip_far ( ctxt, ctxt -> src. val, ctxt -> src. val + ctxt -> op_bytes, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE ) { rc = assign_eip_far ( ctxt, ctxt -> src. val + ctxt -> op_bytes, ctxt -> src. val + ctxt -> op_bytes, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE ) { rc = assign_eip_far ( ctxt, ctxt -> src. val + ctxt -> op_bytes, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE ) { rc = assign_eip_far ( ctxt, ctxt -> src. val + ctxt -> op_bytes, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE ) { rc = assign_eip_far ( ctxt, ctxt -> src. val + ctxt -> op_bytes, VCPU_SREG_CS ) ; return rc",0
119,"<S2SV_ModStart> info -> si_code < 0 || info -> si_signo <S2SV_ModEnd> >= 0 ) <S2SV_ModStart> - EPERM ; if ( info -> si_signo <S2SV_ModEnd> >= 0 ) <S2SV_ModStart> - EPERM ; if ( info -> si_code >= 0 ) { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } else { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
120,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> movie_identifier == NULL ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_LEVEL_ERROR, GF_LOG_LEVEL_ERROR, GF_LOG_LEVEL_ERROR, GF_LOG_LEVEL_ERROR, GF_LOG_LEVEL_ERROR, GF_LOG_LEVEL_ERROR, GF_LOG_LEVEL_ERROR, GF_LOG_LEVEL_ERROR, GF_LOG_LEVEL_ERROR, GF_LOG_LEVEL_ERROR, GF_LOG_LEVEL_ERROR, GF_LOG_LEVEL_ERROR, GF_LOG_LEVEL_ERROR, GF_LOG_LEVEL_ERROR ) ; return GF_LOG_LEVEL_ERROR ; } <S2SV_ModEnd> tmp_str = gf_malloc <S2SV_ModStart> tmp_strsize ) ; if (! tmp_str ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_LEVEL_ERROR, GF_LOG_LEVEL_ERROR, GF_LOG_LEVEL_ERROR, GF_LOG_LEVEL_ERROR, GF",0
121,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
122,"<S2SV_ModStart> void nfs4_state_set_mode_locked ( fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> == mode ) { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } <S2SV_ModEnd> state -> state <S2SV_ModStart> = mode ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
123,<S2SV_ModStart>!= EOF ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= EOF ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= EOF ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= EOF ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= EOF ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= EOF ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= EOF ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= EOF ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= EOF ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= EOF ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= EOF ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= EOF ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError,0
124,"<S2SV_ModStart> 0 ; } if ( elem. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } <S2SV_ModStart> len ) ; if ( elem. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; }",0
125,"<S2SV_ModStart> i ] ), ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] )",0
126,"<S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; }",0
127,"<S2SV_ModStart> 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; length = caplen - 1 ; } <S2SV_ModStart> 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; length = caplen - 1 ; }",0
128,"<S2SV_ModStart> image_noffset ) { const char * name ; if ( strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, sig_blob, sig_offset ) ; if ( ret!= - FDT_ERR_BADSIGNATURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } } else { name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, sig_blob, sig_offset ) ; if ( ret!= - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } }",0
129,<S2SV_ModStart> ( kfifo_alloc ( & state -> rx_kfifo_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
130,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> VPX_CODEC_ABI_MISMATCH ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags",0
131,<S2SV_ModStart> value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
132,"<S2SV_ModStart> icmp_param ) ; ipc = rcu_dereference_protected ( net -> ipv4. icmp_cookie, sock_owned_by_user ( sk ) ) ; if (! ipc ) { icmp_param = rcu_dereference ( net -> ipv4. icmp_param ) ; ipc = rcu_dereference_protected ( net -> ipv4. icmp_param, sock_owned_by_user ( sk ) ) ; ipc = rcu_dereference_protected ( net -> ipv4. icmp_cookie, sock_owned_by_user ( sk ) ) ; if (! ipc ) { icmp_param = rcu_dereference ( net -> ipv4. icmp_param ) ; ipc = rcu_dereference_protected ( net -> ipv4. icmp_param, sock_owned_by_user ( sk ) ) ; icmp_param = rcu_dereference_protected ( net -> ipv4. icmp_param, sock_owned_by_user ( sk ) ) ; if (! ipc ) { icmp_",0
133,<S2SV_ModStart> = nlogs ; if ( unlikely ( headcount > UIO_MAXIOV ) ) { r = - ENOBUFS ; goto err ; },0
134,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
135,<S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_,0
136,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
137,<S2SV_ModStart> skb_is_nonlinear ( skb ) ) return 0 ; if ( skb -> len < sizeof ( struct nlattr,1
138,"<S2SV_ModStart> ; encode_share_access ( xdr <S2SV_ModEnd>, arg ->",0
139,<S2SV_ModStart> ) ) { tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [,0
140,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; return - EINVAL <S2SV_ModEnd> ; } switch <S2SV_ModStart> break ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
141,"<S2SV_ModStart> ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, & n",0
142,"<S2SV_ModStart> : if ( len < sizeof ( snes_op ) ) { op -> type = R_ANAL_OP_TYPE_UNKNOWN ; break ; } <S2SV_ModStart> : if ( len < sizeof ( snes_op ) ) { op -> type = R_ANAL_OP_TYPE_UNKNOWN ; break ; } <S2SV_ModStart> : if ( len < sizeof ( snes_op ) ) { op -> type = R_ANAL_OP_TYPE_UNKNOWN ; break ; } <S2SV_ModStart> : if ( len < sizeof ( snes_op ) ) { if ( len < sizeof ( snes_op ) ) { op -> type = R_ANAL_OP_TYPE_UNKNOWN ; break ; } <S2SV_ModStart> : if ( len < sizeof ( snes_op ) ) { op -> type = R_ANAL_OP_TYPE_UNKNOWN ; break ; } <S2SV_ModStart> : if ( len < sizeof ( snes_op ) ) { op -> type = snes_op_get_size ( 1, 1, & snes_op [ data [ 0 ] ] ) ; } else { if ( len < sizeof ( snes_op ) ) { op -> type = R_ANAL_OP_TYPE_UNKNOWN ;",0
143,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
144,"<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), lshp -> ls_seq, lshp -> ls_age, lshp -> ls_length ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), lshp -> ls_age, lshp -> ls_length ) ) ) ; }",0
145,<S2SV_ModStart> } else { if ( ( flags & SPLICE_F_NONBLOCK ) &&! ( flags & SPLICE_F_NONBLOCK ) &&! ( flags & SPLICE_F_NONBLOCK ) &&! ( flags & SPLICE_F_NONBLOCK ) &&! ( flags & SPLICE_F_NONBLOCK ) &&! ( flags & SPLICE_F_NONBLOCK ) &&! ( flags & SPLICE_F_NONBLOCK ) &&! ( flags & SPLICE_F_NONBLOCK ) &&! ( flags & SPLICE_F_NONBLOCK ) &&! ( flags & SPLICE_F_NONBLOCK ) &&! ( flags & SPLICE_F_NONBLOCK ) &&! ( flags & SPLICE_F_NONBLOCK ) &&! ( flags & SPLICE_F_NONBLOCK ) &&! ( flags & SPLICE_F_NONBLOCK ) ) { if ( ret ) break ; ret = - EAGAIN ; break ; } * obuf = * obuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf,0
146,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
147,"<S2SV_ModStart> = open ( p_dev -> dev_path <S2SV_ModEnd>, O_RDWR | <S2SV_ModStart> O_CLOEXEC ) ; if ( p_dev -> fd < 0 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, p_dev -> fd ) ; p_dev -> fd = - 1 ; break ; }",0
148,"<S2SV_ModStart> ; u64 msr_data <S2SV_ModEnd> ; int usermode <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; <S2SV_ModEnd> cs. dpl <S2SV_ModStart> = 1 ; <S2SV_ModEnd> } cs_sel |= <S2SV_ModStart> VCPU_SREG_SS ) ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; if ( ( msr_data",0
149,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_tree <S2SV_ModEnd> prob = probs <S2SV_ModStart> / 2 ] <S2SV_ModEnd> ; int b <S2SV_ModStart> b ) ; vpx_tree_index ii <S2SV_ModEnd> = tree [",0
150,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
151,<S2SV_ModStart> & 0xffff ; if ( p + 4 + c > sizeof ( event_rec ) ) return - EINVAL ;,0
152,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fadst16 ( const <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s14, s15 ; tran_high_t x0 = input [ 15 ] ; tran_high_t x1 = input [ 0 ] ; tran_high_t x2 = input [ 1 ] ; tran_high_t x3 = input [ 2 ] ; tran_high_t x4 = input [ 3 ] ; tran_high_t x5 = input [ 4 ] ; tran_high_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> = input [ 5 ] ; tran_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> = input [ 6 ] ; tran_high_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> = input [ 7 ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> = input [ 8 ] ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> = input",0
153,<S2SV_ModStart> ; # if HAVE_EDSP <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> # endif # if HAVE_MEDIA <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> # endif # if HAVE_NEON <S2SV_ModEnd> flags |= HAS_NEON,0
154,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
155,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
156,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flag & CL_UNPRIVILEGED <S2SV_ModStart> ; if ( <S2SV_ModEnd> flag & CL_UNPRIVILEGED <S2SV_ModStart> & CL_UNPRIVILEGED ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && mnt -> mnt. mnt_flags & MNT_READONLY ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && list_empty ( & mnt -> mnt_expire ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_LOCKED ; atomic_inc ( & sb -> s_active ) ; mnt -> mnt. mnt_mountpoint = mnt -> mnt. mnt_root ; mnt -> mnt_parent = mnt ;,0
157,"<S2SV_ModStart> void count_segs_sb ( const VP9_COMMON * cm, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int mi_row <S2SV_ModStart> bsize ) { <S2SV_ModEnd> int bw, <S2SV_ModStart> bw = num_8x8_blocks_wide_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ] ; bh = num_8x8_blocks_high_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ] ; } else if ( bw < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_",0
158,"<S2SV_ModStart> break ; if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) ) { serverPanic ( ""Connection <S2SV_blank> closed"" ) ; }",0
159,"<S2SV_ModStart> = EXT4_GET_BLOCKS_CREATE ; if ( ( mpd -> b_state & ( 1 << BH_Mapped ) ) &&! ( mpd -> b_state & ( 1 << BH_Unwritten ) ) ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> at <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks <S2SV_blank> "" ""error <S2SV_blank> %d\\n"", mpd -> inode -> i_ino, mpd -> b_size >> mpd -> inode -> i_blkbits ), mpd -> b_state & ( 1 << BH_Mapped ) ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> at <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks <S2SV_blank> %zd <S2SV_blank> with <S2SV_blank> "" ""error <S2SV_blank> %d\\n"", mpd -> inode -> i_blkbits, err ) ; return err",0
160,"<S2SV_ModStart> = 0 ; size_t addrlen = 0 ; <S2SV_ModStart>, handle, & addrlen <S2SV_ModEnd>, & p <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, & p <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, & p <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, & p <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, & p <S2SV_ModStart>, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & p -> ai_addrlen, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart> OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret =",0
161,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
162,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
163,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
164,"<S2SV_ModStart> asdl_seq * body, PyArena * arena ) { return ( mod_ty ) PyArena_Malloc ( arena, sizeof ( * p ) ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
165,"<S2SV_ModStart> * src, const tran_low_t <S2SV_ModEnd> ts_start, int64_t <S2SV_ModStart> ts_end, unsigned int <S2SV_ModEnd> flags ) { <S2SV_ModStart> -> write_idx ) ; # else ( void ) ts_start ; # endif ( void ) ts_end ; # if USE_PARTIAL_COPY if ( ctx -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) return 1 ; ctx -> sz ++ ; buf = pop ( ctx, & ctx -> write_idx ) ; # else ( void ) ts_start ; # endif if ( ctx -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) return 1 ; if ( ctx -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) return 1 ; ctx -> sz ++ ; if ( buf -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) return 1 ; ctx -> sz ++ ; buf = pop ( ctx, & ctx -> write_idx ) ; # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row )",0
166,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
167,"<S2SV_ModStart> sharpness ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; if ( method == LPF_PICK_FROM_Q ) { const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK_",0
168,"<S2SV_ModStart> case BTA_DM_DISABLE_EVT : { BTIF_TRACE_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> ev: <S2SV_blank> %s"", dump_dm_event ( event ) ) ; BTIF_DBG_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> ev: <S2SV_blank> %s"", dump_dm_event ( event ) ) ; BTIF_DBG_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> ev: <S2SV_blank> %s"", dump_dm_event ( event ) ) ; BTIF_TRACE_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> ev: <S2SV_blank> %s"", dump_dm_event ( event ) ) ; } break ; case BT_DM_DISABLE_EVT : { BT_DBG_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> ev: <S2SV_blank> %s"", dump_dm_event ( event ) ) ; BTIF_DBG_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> ev: <S2SV_blank> %s"", dump_dm_event ( event ) )",0
169,<S2SV_ModStart> : { int <S2SV_ModEnd> a = getnum,0
170,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> rows ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> rows ) ; if ( status ==",0
171,"<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if ( data_sz > VPX_CODEC_MAX_DECODE_SIZE || ( data_sz > VPX_CODEC_MAX_DECODE_SIZE ) || ( data_sz > VPX_CODEC_MAX_DECODE_SIZE ) res = VPX_CODEC_MAX_DECODE_SIZE ; else if ( data_sz > VPX_CODEC_MAX_DECODE_SIZE ) res = VPX_CODEC_MAX_DECODE_SIZE ; else res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; if ( res!= VPX_CODEC_OK ) { res = VPX_CODEC_ERROR ; } else { res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; } return SAVE_STATUS ( ctx, res ) <S2SV_ModEnd> ; } <S2SV_null>",0
172,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> isofs_read_inode ( struct <S2SV_ModStart> inode ) ; if ( de -> name_len > inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize ) { inode -> i_sb -> s_blocksize = inode -> i_sb -> s_blocksize - inode -> i_iget5_offset ; inode -> i_sb -> s_blocksize = inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize ; } else { if ( de -> name_len > inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - de -> name_len ) { inode -> i_sb -> s_blocksize = inode -> i_sb -> s_blocksize - de -> name_len ; inode -> i_sb -> s_blocksize = inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - de -> name_len ;,0
173,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> k ) ; }",0
174,<S2SV_ModStart> self ) { <S2SV_ModEnd> Py_CLEAR ( self,0
175,"<S2SV_ModStart> ; for ( ; a && i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] ) ; } else n -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] ) ; for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] ) ; else n -> child = cJSON_CreateString ( strings [ i ] )",0
176,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == Py_None ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" )",0
177,<S2SV_ModStart> EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_EXCL ) &&! ( mnt_flags & MNT_EXCL ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_EXCL ) &&! ( mnt_flags & MNT_EXCL ) ) { return - EPERM ; },0
178,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
179,"<S2SV_ModStart> write_junk = 1 <S2SV_ModEnd> ; ChunkHeader ds64hdr <S2SV_ModStart>, datahdr, fmthdr <S2SV_ModEnd> ; RiffChunkHeader riffhdr <S2SV_ModStart> ; DS64Chunk ds64_chunk ; JunkChunk junkchunk ; uint32_t bcount ; int64_t total_data_bytes ; int64_t total_riff_bytes ; if ( total_data_bytes > 0x7fffffffffffffff ) { if ( debug_logging_mode ) error_line ( ""total_data_bytes <S2SV_blank> = <S2SV_blank> %lld, <S2SV_blank> so <S2SV_blank> rf64"", total_data_bytes ) ; do_rf64 = 0 ; } else if ( total_data_bytes > 0x7fffffffffffffff ) { if ( debug_logging_mode ) error_line ( ""total_data_bytes <S2SV_blank> = <S2SV_blank> %lld, <S2SV_blank> so <S2SV_blank> rf64"", total_data_bytes ) ; do_rf64 = 1 ; } else { if ( debug_logging_mode ) error_line ( ""total_data_bytes <S2SV_blank> = <S2SV_blank> %lld, <S2SV_blank> so <S2SV_blank> riff"", total_data_bytes ) ; do_rf64 = 1 ; }",0
180,"<S2SV_ModStart> ; if ( msg_sys -> msg_name ) { <S2SV_ModStart> verify_compat_iovec ( msg_sys, msg_sys -> msg_name, msg_sys -> msg_iovlen, & addr, VERIFY_WRITE ) ; } else { err = verify_iovec ( msg_sys, msg_sys -> msg_iovlen, & addr, VERIFY_READ ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = msg_sys -> msg_flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; } else { err = verify_iovec ( msg_sys, msg_sys -> msg_control, & addr, VERIFY_READ ) ; if ( err < 0 ) goto out_freeiov ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = msg_sys -> msg_flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; } <S2SV_ModEnd> if",0
181,<S2SV_ModStart> inode ) ; struct gfs2_meta_inode * ip2 = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip2 = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip2 = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip2 = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip2 = ip2_meta_inode ( ip ) ; struct gfs2_meta_inode * meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip2 = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip2 = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip2 = GFS2_I ( inode ) ; struct gfs2_meta_inode * meta = GFS2_I ( inode ) ; struct gfs2_meta_in,0
182,"<S2SV_ModStart> codec -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ""Codec: <S2SV_blank> %s\\n"", vpx_codec_iface_name <S2SV_ModEnd> ( global -> <S2SV_ModStart> input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next ) ; if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; if ( input -> use_i420 ) { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( input -> use_i420 ) { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream ->",0
183,"<S2SV_ModStart> ; if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } valueAVT = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } valueAVT = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error",0
184,"<S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"",",0
185,<S2SV_ModStart> msix_tab_size % 4096 <S2SV_ModEnd> == 0 ),0
186,"<S2SV_ModStart> if (! js_doregexec ( J, <S2SV_ModEnd> re -> prog",1
187,"<S2SV_ModStart> case OFreshOID : if ( caml_set_oo_id ( ( value ) dest ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; } <S2SV_ModEnd> if ( Int_val <S2SV_ModStart> case OFreshOID : if ( caml_set_oo_id ( ( value ) dest ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; } else { if ( caml_set_oo_id ( ( value ) dest ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest ) ; } break ; case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; break ; } else { if ( caml_set_oo_id ( ( value ) dest ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest",0
188,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( isr & KSZ8851_ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & KSZ8851_ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> = ksz8851Read",0
189,"<S2SV_ModStart> void encode_quantization ( VP9EncoderConfig <S2SV_ModEnd> * cm, <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex, QINDEX_BITS ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
190,"<S2SV_ModStart> ( write ( <S2SV_ModEnd> uipc_main. ch <S2SV_ModStart> msglen ) < 0 ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> (%s)"", strerror ( errno ) ) ; }",0
191,"<S2SV_ModStart> ; if ( ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { ret = - 1 ; goto sslerr ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( peerec = d2i_RSA_pubkey_bio ( rawcert, NULL ) ) == NULL ) { ret = - 1 ; goto sslerr ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { ret = - 1 ; goto sslerr ; } <S2SV_ModEnd> } else { <S2SV_ModStart> ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == 1 && ( localrsa = d2i_RSA_pubkey_bio ( rawcert, NULL ) ) == NULL ) { ret = - 1 ; goto sslerr ; } <S2SV_ModEnd> } else { <S2SV_ModStart> ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { ret = - 1 ; goto sslerr ; } <S2SV_ModEnd> } else {",0
192,"<S2SV_ModStart> t1_getline ( ) ; if ( strlen ( t1_buf_array ) > sizeof ( t1_line_array ) ) strcpy ( t1_buf_array, t1_line_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; } else { strcpy ( t1_buf_array, t1_line_array ) ; strcpy ( t1_buf_array, t1_buf_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; }",0
193,"<S2SV_ModStart> BLOCK_SIZE subsize, int partition, int * index <S2SV_ModEnd> ) { MACROBLOCKD <S2SV_ModStart> -> e_mbd ; <S2SV_ModEnd> int bsl = <S2SV_ModStart> bsl ) / 4, hbs = ( 1 << bsl ) / 4 ; assert ( subsize >= BLOCK_8X8 ) ; if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_cols ) { * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; } <S2SV_ModStart> case PARTITION_NONE : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 1 ] ) = get_block_context ( x, subsize",0
194,"<S2SV_ModStart> name ) ; if (! name ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ;",0
195,"<S2SV_ModStart> key_ref ) ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; goto error2 ; } ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; } if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } error2 : key_put ( key ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
196,<S2SV_ModStart> u4_first_slice_in_pic ) { if ( ps_dec -> u4_first_slice_in_pic == 1 ) { ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 1 ; } else { if ( ps_dec -> u4_first_slice_in_pic == 1 ) { if ( ps_dec -> u4_first_slice_in_pic == 1 ) { ps_dec -> u4_first_slice_in_pic = 0 ; } else { if ( ps_dec -> u4_first_slice_in_pic == 1 ) { ps_dec -> u4_first_slice_in_pic = 1 ; } } else { if ( ps_dec -> u4_first_slice_in_pic == 1 ) { if ( ps_dec -> u4_first_slice_in_pic == 1 ) { ps_dec -> u4_first_slice_in_pic = 0 ; } else { if ( ps_dec -> u4_first_slice_in_pic == 1 ) { ps_dec,0
197,<S2SV_ModStart> var_off ) ; if ( src_known && dst_reg -> var_off == src_reg. var_off ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else if ( dst_reg -> var_off == src_reg -> var_off ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; dst_reg -> smin_value = S64_MIN ; } <S2SV_ModEnd> switch ( opcode,0
198,"<S2SV_ModStart> ) ) { cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s"", parent_dir_inode, direntry -> d_name. name, direntry ) ; cFYI ( 1, ""non-existing <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", direntry -> d_inode ) ; cFYI ( 1, ""non-existing <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", direntry -> d_inode ) ; cFYI ( 1, ""non-existing <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", direntry -> d_inode ) ; cFYI ( 1, ""non-existing <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", direntry -> d_inode ) ; cFYI ( 1, ""non-existing <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", direntry -> d_inode ) ; cFYI ( 1, ""non-existing <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", direntry",0
199,"<S2SV_ModStart> ; if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) ) { ret = NULL ; goto out ; } <S2SV_ModEnd> icq -> rcv_wscale <S2SV_ModStart> icq -> rcv_wscale = rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) ; if (! rcu_dereference_protected ( sk, sock_owned_by_user ( sk ) ) ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIESFAILED ) ; goto out ; } <S2SV_ModEnd> icq -> rcv_wscale <S2SV_ModStart> -> rcv_wscale = rcu_dereference_protected ( sk -> sk_owned_by_user ( sk ) ) ; if (! rcu_dereference_protected ( sk, sock_owned_by_user ( sk ) ) ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIES",0
200,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> += 4 ; if ( len < 4 ) return - 1 ; <S2SV_ModStart> = ( ( base64val <S2SV_ModEnd> ( digit1 ) <S2SV_ModStart> ( base64val ( <S2SV_ModEnd> digit2 ) << <S2SV_ModStart> ( base64val ( <S2SV_ModEnd> digit3 ) << <S2SV_ModStart> ( base64val ( <S2SV_ModEnd> digit4 ) >> <S2SV_ModStart> ( base64val ( <S2SV_ModEnd> digit4 ) >>,0
201,"<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> = get_svc_internal ( svc_ctx <S2SV_ModEnd> ) ; svc_log_reset <S2SV_ModStart> svc_ctx ) ; svc_log_reset ( svc_ctx ) ; if ( svc_ctx == NULL || si == NULL ) return NULL ; svc_log ( svc_ctx, SVC_LOG_INFO, ""\\n"" ) ; <S2SV_ModEnd> number_of_keyframes = encode_frame_count <S2SV_ModStart> -> kf_dist + 1 ; for ( i = 0 ; i < <S2SV_ModEnd> si -> layers <S2SV_ModStart> ++ i ) { number_of_frames = encode_frame_count ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> psnr_sum [ i ] ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.",0
202,"<S2SV_ModStart> = new_cols ; vterm_allocator_free ( screen -> vt, screen -> buffer ) ; screen -> buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if (! screen -> buffer ) { vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] ) ; screen -> buffers [ 0 ] = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; screen -> buffer = vterm_allocator_malloc ( screen -> vt, screen -> buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new",0
203,<S2SV_ModStart> { const char * literal_start = * str ; const char * literal_end = * str ; int in_named_escape = 0 ; int result = 0 ; assert ( * literal == NULL ) ; <S2SV_ModEnd> assert ( * <S2SV_ModStart> str < end && ( * str ) - literal_start >= 2 && * ( * str ) - literal_end >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 1 ; } else if ( in_named_escape && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == '\\\\' && * ( * str - 1 ) == '\\\\' && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } <S2SV_ModEnd>,0
204,"<S2SV_ModStart> g_settings_dump_location ) ; if ( dd ) { char * problem_id = xstrdup ( dd -> dd_dirname ) ; dd_close ( dd ) ; dd = create_dump_dir_from_problem_data ( pd, g_settings_dump_location ) ; if ( dd ) { char * problem_id = NULL ; log_info ( ""problem <S2SV_blank> id: <S2SV_blank> \'%s\'"", problem_id ) ; dd = create_dump_dir_from_problem_data ( pd, g_settings_dump_location ) ; if ( dd ) { char * problem_id = xstrdup ( dd -> problem_dirname ) ; dd = create_dump_dir_from_problem_data ( pd, g_settings_dump_location ) ; if ( dd ) { char * problem_id = xstrdup ( dd -> problem_dirname ) ; log_info ( ""problem <S2SV_blank> id: <S2SV_blank> \'%s\'"", problem_id ) ; log_info ( ""problem <S2SV_blank> id: <S2SV_blank> \'%s\'"", problem_id ) ; } }",0
205,<S2SV_ModStart> 0 ) { if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( y1 + h1 ) > ( ptr -> height - h1 ) ) { if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( y1 + h1 ) > ( ptr -> height - h1 ) ) { if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( y1 + h1 ) > ( ptr -> height - h1 ) ) { if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( y1 + h1 ) > ( ptr -> height - h1 ) ) { if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( y1 + h1 ) > ( ptr -> height - h1 ) ) { if ( ( x1 + w1 ) >,0
206,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
207,"<S2SV_ModStart> bestaddress, in_what_stride, mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_err_cost ( mvsad_",0
208,<S2SV_ModStart> ) { return try_then_request_module <S2SV_ModEnd> ( __crypto_lookup_template (,0
209,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> const tile, MACROBLOCKD * xd <S2SV_ModEnd>, int mi_row <S2SV_ModStart> mi_col ; MODE_INFO_EXT <S2SV_ModEnd> * * mi_8x8 <S2SV_ModStart> * * prev_mi_8x8 <S2SV_ModEnd> = cm -> <S2SV_ModStart> idx_str ; MODE_INFO_EXT <S2SV_ModEnd> * * prev_mi_8x8 <S2SV_ModStart> BLOCK_SIZE bsize ; # if CONFIG_VP9_HIGHBITDEPTH switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64 ) ; nonrd_use_partition ( cpi, tile, mi_row, mi_col, BLOCK_64X64, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64 ) ; set_source_var_based_partition ( cpi, tile, mi",0
210,<S2SV_ModStart> ( _dh ) ; if ( ( ct -> proto. dccp. role [ IP_CT_DIR_ORIGINAL ]!= CT_DCCP_ROLE_CLIENT ) || ( ct -> proto. dccp. role [ IP_CT_DIR_REPLY ]!= CT_DCCP_ROLE_SERVER ) || ( ct -> proto. dccp. state!= CT_DCCP_REQUEST ) || ( ct -> proto. dccp. role [ IP_CT_DIR_ORIGINAL ]!= CT_DCCP_ROLE_SERVER ) || ( ct -> proto. dccp. role [ IP_CT_DIR_REPLY ]!= CT_DCCP_ROLE_SERVER ) || ( ct -> proto. dccp. role [ IP_CT_DIR_ORIGINAL ]!= CT_DCCP_ROLE_SERVER ) || ( ct -> proto. dccp. state!= CT_DCCP_NONE ) || ( ct -> proto. dccp. role [ IP_CT_DIR_ORIGINAL ]!= CT_DCCP_ROLE_SERVER ) || ( ct -> proto. dccp. role [ IP_CT_DIR_ORIGINAL ]!= CT,0
211,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> dir = ""/tmp"" ) == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
212,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
213,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_options_rcu <S2SV_ModEnd> * ip_options_get_finish ( <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * optp, <S2SV_ModStart> int optlen ) { struct ip_options_rcu * opt ; opt = rcu_dereference_protected ( net -> ipv4. ip_options, lockdep_is_held ( & net -> ipv4. ip_options. lock ) ) ; if (! opt ) return - ENOMEM <S2SV_ModEnd> ; if ( <S2SV_ModStart> && ip_options_compile ( & net -> ipv4. ip_options, NULL ) ) { kfree ( opt ) ; * optp = opt ; return 0 ; } opt = rcu_dereference_protected ( net -> ipv4. ip_options, lockdep_is_held ( & net -> ipv4. ip_options ) ) ; * optp = opt ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
214,"<S2SV_ModStart> ; if ( http_request_get_header ( info -> request, ""Sec-WebSocket-Connection"" ) == NULL ) { const char * ws_connection = http_request_get_header ( info -> request, ""Sec-WebSocket-Connection"" ) ; if ( ws_connection == NULL ) goto error ; else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( ws_connection, strlen ( ws_connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) { const char * ws_connection = http_request_get_header ( info -> request, ""Sec-WebSocket-Connection"" ) ; if ( ws_connection == NULL ) goto error ; } else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( ws_connection, "","", 1, & count ) ; if ( sdstrim ( ws_connection, "" <S2SV_blank> "" ) == 0 ) goto error ; sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) goto error ; }",0
215,"<S2SV_ModStart> * findalldevs_if ; if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } <S2SV_ModStart> d -> description ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } if ( d -> name ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } if ( d -> description ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } if ( d -> name ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } <S2SV_ModStart> -> name ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } if ( d -> description ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } if ( d -> description ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } if ( d -> description ) { rpcapd_discard ( pars -> sockctrl, plen",0
216,"<S2SV_ModStart> ; struct dump_dir * dd ; int err ; dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } g_hash_table_remove ( problem_info, ""basename"" ) ; dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } dd_create_basic_files ( dd, client_uid, NULL ) ; dd_save_text ( dd, FILENAME_ABRT_VERSION, VERSION ) ; dd_save_text ( dd, FILENAME_CMDLINE, cmdline ) ; g_hash_table_iter_init ( & iter, problem_info ) ; while ( g_hash_table_iter_next ( & iter, & gpkey, & gpvalue ) ) { dd_save_text ( dd, FILENAME_UID, ( gchar *",0
217,"<S2SV_ModStart> 1 ) ; q ++ ; index = ConstrainColormapIndex ( image, ( * p >> 6 ) & 0x3 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; index = ConstrainColormapIndex ( image, ( * p >> 4 ) & 0x3 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; index = ConstrainColormapIndex ( image, ( * p >> 5 ) & 0x3 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO",0
218,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
219,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
220,"<S2SV_ModStart> len ; if (! in_cksum ( & vec [ 0 ], len ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModEnd> ND_TCHECK ( bp <S2SV_ModStart> len ; if (! in_cksum ( & vec [ 0 ], len ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModEnd> ND_TCHECK ( bp <S2SV_ModStart> len ; if (! in_cksum ( & vec [ 0 ], len ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModEnd> ND_TCHECK ( bp <S2SV_ModStart> len ; if (! in_cksum ( & vec [ 0 ], len ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
221,<S2SV_ModStart> ; if ( dumpable &&! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { rcu_read_unlock ( ) ; return - EPERM ; } } else { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { rcu_read_unlock ( ) ; return - EPERM ; } } else { if (! capable ( CAP_SYS_PTRACE ) ) { rcu_read_unlock ( ) ; return - EPERM ;,0
222,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
223,<S2SV_ModStart> case SEI_USER_DATA_REGISTERED_ITU_T_T36 : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 <S2SV_ModEnd> ; ihevcd_parse_user_data_registered_ITU_t_t35 ( <S2SV_ModStart> case SEI_USER_DATA_REGISTERED_ITU_T_T36 : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 <S2SV_ModEnd> ; ihevcd_parse_user_data_registered_ITU_t_t35 ( <S2SV_ModStart> case SEI_USER_DATA_REGISTERED_ITU_T_T_T36 : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 <S2SV_ModEnd> ; ihevcd_parse_user_data_registered_ITU_t_t35 (,0
224,"<S2SV_ModStart> * tmp_sdma_rht ; memset ( tmp_sdma_rht, 0, sizeof ( * tmp_sdma_rht ) ) ;",0
225,"<S2SV_ModStart> name, int <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart>, MY_MUTEX_INIT_FAST ) ; mi_key_mutex_init ( mi_key_mutex_MI_SORT_INFO_mutex, & sort_info. mutex, MY_MUTEX_INIT_FAST ) ; mi_key_cond_init ( mi_key_cond_MI_SORT_INFO_cond, & sort_info. cond <S2SV_ModEnd>, MY_MUTEX_INIT_FAST ) <S2SV_ModStart> ) ) { mi_key_mutex_destroy ( mi_key_mutex_MI_SORT_INFO_mutex ) ; mi_key_mutex_destroy ( mi_key_mutex_MI_SORT_INFO_mutex, MY_MUTEX_INIT_FAST ) ; mi_key_cond_destroy ( mi_key_cond_MI_SORT_INFO_cond, MY_MUTEX_INIT_FAST ) ; mi_key_mutex_destroy ( mi_key_mutex_MI_SORT_INFO_mutex, MY_MUTEX_INIT_FAST ) ; mi_key_cond_destroy ( mi_key_cond_MI_SORT_INFO",0
226,<S2SV_ModStart> ; if ( ( int ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( unsigned char ) ( ( unsigned char ) ( unsigned char ) ( ( unsigned char ) ( unsigned char ) ( unsigned char ) ( unsigned char ) ( ( unsigned char ) ( unsigned char ) ( ( unsigned char ) ( unsigned char ) ( unsigned char ) ( unsigned char ) ( unsigned char ) ( ( unsigned char ) ( unsigned char ) ( ( unsigned char ) ( unsigned char ) ( unsigned char ) ( unsigned char ) ( unsigned char ) ( unsigned char ) ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ),0
227,"<S2SV_ModStart> ) ; } if ( pcount > MAX_HSTORE_PAIRS ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, MAX_HSTORE_PAIRS ) ) ) ;",0
228,"<S2SV_ModStart> val ) ; if (! val ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value"", r -> name ) ;",0
229,"<S2SV_ModStart> ) ) { agoo_log_cat ( & agoo_req_cat, ""%s: <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), ( unsigned long long ) c -> id, c -> buf ) ; agoo_log_cat ( & agoo_req_cat, ""%s: <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; } else { agoo_log_cat ( & agoo_req_cat, ""%s: <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), ( unsigned long long ) c -> id, c -> buf ) ; agoo_log_cat ( & agoo_req_cat, ""%s: <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; } else { agoo_log_cat ( & agoo_req_cat, ""%s: <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), ( unsigned long long ) c",0
230,"<S2SV_ModStart> vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16 <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 0 ] ; <S2SV_ModEnd> int i, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",0
231,"<S2SV_ModStart> error ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s\\n"", g_strdup_printf ( ""%s\\n"", tmpfile_name ) ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s\\n"", g_strdup_printf ( ""%s\\n"", tmpfile_name ) ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s\\n"", tmpfile_name ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s\\n"", tmpfile_name ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s\\n"", g_strdup_printf ( ""%s\\n"", tmpfile_name ) ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s\\n"", tmpfile_name ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s",0
232,"<S2SV_ModStart> char * temp_filename ; FILE * fp = fopen ( filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; goto error ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list",0
233,<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) ; <S2SV_ModStart> > 0 ) { elen += pc -> lengthComponentIdent ; break ; } <S2SV_ModEnd> case 2 : <S2SV_ModStart> case 5 : elen += pc -> lengthComponentIdent ; if ( elen < pc -> lengthComponentIdent ) return - ENAMETOOLONG ; * p ++ = '/' ; tolen -= pc -> lengthComponentIdent ; break ; } <S2SV_ModEnd> elen += sizeof <S2SV_ModStart> struct pathComponent ) + elen <S2SV_ModEnd> ; } <S2SV_null>,0
234,"<S2SV_ModStart> tlv_len ) ; if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> Mgmt <S2SV_blank> Len <S2SV_blank> %d]"", tlv_len ) ) ; goto trunc ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> Mgmt <S2SV_blank> Len <S2SV_blank> %d]"", tlv_len ) ) ; goto trunc ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> Mgmt <S2SV_blank> Len <S2SV_blank> %d]"", tlv_len ) ) ; goto trunc ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> Mgmt <S2SV_blank> Len <S2SV_blank> %d]"", tlv_len ) ) ; goto trunc ; }",0
235,"<S2SV_ModStart> userData, ctxt -> input, ctxt -> input + ctxt -> pos - ctxt -> pos - ctxt -> pos <S2SV_ModStart> ctxt -> userData, ctxt -> input + ctxt -> pos - ctxt -> pos <S2SV_ModStart> ctxt -> userData, ctxt -> input + ctxt -> pos - ctxt -> pos <S2SV_ModStart> ctxt -> userData, ctxt -> input + ctxt -> pos - ctxt -> pos <S2SV_ModStart> ctxt -> userData + ctxt -> pos - ctxt -> pos <S2SV_ModStart> ctxt -> userData + ctxt -> pos <S2SV_ModStart> ctxt -> userData + ctxt -> pos - ctxt -> pos <S2SV_ModStart> ctxt -> input, ctxt -> input + ctxt -> pos - ctxt -> pos <S2SV_ModStart> ctxt -> pos - ctxt -> pos",0
236,"<S2SV_ModStart> int tagval ; struct stream packet = * s ; <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> tsrequest <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; return False ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> tsrequest <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; return False ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> tsrequest <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; return False ; } if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> tsrequest <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet",0
237,"<S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" <S2SV_ModEnd> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModStart> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"" ""\\r\\n"" ""%s""",0
238,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", src ) ; exit ( 1 ) ; } <S2SV_ModEnd> child = fork <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
239,<S2SV_ModStart> ( rc!= BFA_STATUS_OK <S2SV_ModEnd> ) return NULL <S2SV_ModStart> return NULL ; <S2SV_ModEnd> hstats -> seconds_since_last_reset <S2SV_ModStart> hstats -> seconds_since_last_reset = fcstats -> fc. secs_reset ; hstats -> lip_count = fcstats -> fc. lip_count ; hstats -> nos_count = fcstats -> fc. nos_count ; hstats -> error_count = fcstats -> fc. error_count ; hstats -> dumped_count = fcstats -> fc. dropped_count ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_syncs = fcstats -> fc. loss_of_syncs ; hstats -> link_success_count = fcstats -> fc. link_success_count ; hstats -> link_failure_count = fcstats -> fc. link_failure_count ; hstats -> loss_of_syncs = fcstats -> fc. loss_of_syncs ; hstats -> link_failure_count = fcstats -> fc. link_failure_count ; hstats -> loss_of_syncs = fcstats -> fc. loss,0
240,"<S2SV_ModStart> value ) { <S2SV_ModEnd> value -> x <S2SV_ModStart> ( 1.0f, MaxF <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MaxF <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MaxF <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MaxF <S2SV_ModEnd> ( 0.0f,",0
241,<S2SV_ModStart> -> sasl_mechanism ; rec -> <S2SV_ModEnd> sasl_username = src <S2SV_ModStart> -> sasl_username ; rec -> <S2SV_ModEnd> sasl_password = src <S2SV_ModStart> -> sasl_password ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src,0
242,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
243,"<S2SV_ModStart>, o, datao ; if ( CHECKOVERFLOW ( datao, buf_size, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { exif_log ( ne -> log, EXIF_LOG_CODE_NO_MEMORY, ""ExifMnoteCanon"", sizeof ( MnoteCanonEntry ) * c ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCan",0
244,"<S2SV_ModStart> HA_ERR_CRASHED : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> a <S2SV_blank> correct <S2SV_blank> index <S2SV_blank> definition. <S2SV_blank> You <S2SV_blank> need <S2SV_blank> to <S2SV_blank> recreate <S2SV_blank> it <S2SV_blank> before <S2SV_blank> you <S2SV_blank> can <S2SV_blank> do <S2SV_blank> a <S2SV_blank> repair"" <S2SV_ModEnd>, filename ) <S2SV_ModStart> HA_ERR_CRASHED_ON_USAGE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"" <S2SV_ModEnd>, filename ) <S2SV_ModStart> break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"" <S2SV_ModEnd>, filename ) <S2SV_ModStart> HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"" <S2SV_ModEnd>, filename ) <S2SV_ModStart> break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> mark",0
245,<S2SV_ModStart> len ) { <S2SV_ModEnd> char * ns <S2SV_ModStart> int alloc = <S2SV_ModEnd> ( length? <S2SV_ModStart> string ) ) + 1 <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> long hex ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) * olen = strindex ; return ns ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
246,"<S2SV_ModStart> 4 ) ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, len - op -> size, cpu ) ;",0
247,"<S2SV_ModStart> = usm_secmod_process_in_msg ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ;",0
248,<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) {,0
249,"<S2SV_ModStart> idx ] ; # ifdef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= 1 ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; }",0
250,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> return ( DecodePSDPixels_t <S2SV_ModStart> ++ ) { <S2SV_ModEnd> return ( DecodePSDPixels_t <S2SV_ModStart> ++ ) { <S2SV_ModEnd> return ( DecodePSDPixels_t <S2SV_ModStart> ++ ) { <S2SV_ModEnd> return ( DecodePSDPixels_t <S2SV_ModStart> ++ ) { <S2SV_ModEnd> return ( DecodePSDPixels_t <S2SV_ModStart> ++ ) { <S2SV_ModEnd> return ( DecodePSDPixels_t <S2SV_ModStart> ++ ) { <S2SV_ModEnd> return ( DecodePSDPixels_t <S2SV_ModStart> ++ ) { <S2SV_ModEnd> return ( DecodePSDPixels_t <S2SV_ModStart> ++ ) { <S2SV_ModEnd> return ( DecodePSDPixels_t <S2SV_ModStart> ++ ) { <S2SV_ModEnd> return ( DecodePSDPixels_t <S2SV_ModStart> ++ ) { <S2SV_ModEnd> return ( DecodePSDPixels_t <S2SV_ModStart> ++ ) { <S2SV_ModEnd> return ( DecodePSDPixels_t,0
251,"<S2SV_ModStart> timer ) ; spin_lock_irq ( & slave_active_lock ) ; <S2SV_ModStart> NULL ; } spin_unlock_irq ( & slave_active_lock ) ; mutex_unlock ( & register_mutex ) ; <S2SV_ModStart> NULL ; mutex_unlock ( & register_mutex ) ; <S2SV_ModEnd> list_for_each_entry_safe ( slave <S2SV_ModStart> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; <S2SV_ModStart> NULL ; mutex_unlock ( & register_mutex ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
252,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
253,<S2SV_ModStart> { int_fast32_t widthOverflow = gifFilePtr -> Image. Width - info -> originalWidth ; int_fast32_t heightOverflow = gifFilePtr -> Image. Height - info -> originalHeight ; const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize ) { break ; } if ( widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } SavedImage * sp = & gifFilePtr -> SavedImages [ gifFilePtr -> ImageCount - 1 ] ; int_fast32_t topOverflow = gifFilePtr -> Image. Top + gifFilePtr -> Image -> SWidth ; int_fast32_t leftOverflow = gifFilePtr -> Image. Left + gifFilePtr -> Image. Left + gifFilePtr -> Image. Height - gifFilePtr -> SHeight ; if ( topOverflow > 0 ) { gifFilePtr -> SHeight += topOverflow ; } SavedImage * sp = & gifFilePtr -> SavedImages [ gifFilePtr -> ImageCount -,0
254,"<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator <S2SV_ModStart> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; ret = validate_dn ( props, dn, conn -> validator -> passwd. buf ) ; if ( ret!= ret_ok ) return ret ; re = ldap_count_entries ( ldap -> conn, message ) ; if ( re!= 1 ) { LOG_ERROR ( CHEROKEE_ERROR_VALIDATOR_LDAP_SEARCH, ""subtree <S2SV_blank> search <S2SV_blank> (%s): <S2SV_blank> done\\n"", ldap -> filter. buf ) ; return ret_not_found ; } first = ldap_first_entry ( ldap -> conn, first ) ; if ( first == NULL ) { ret = ret_not_found ; } dn = ldap_get_dn ( ldap -> conn, first ) ; if ( dn == NULL ) { ret = ret_not_found ; } ret = validate_dn ( props, dn, conn -> validator -> passwd. buf ) ; if ( ret!=",0
255,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlobByte ( image ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlobByte ( image ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlobByte ( image ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlobByte ( image ) ; \\\n} <S2SV_ModEnd> char geometry [",0
256,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
257,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
258,"<S2SV_ModStart> 0 ) { if ( len < 9 ) { t1mac_output_data ( ( byte * ) s, len ) ; return ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> * t && len < 9 ) { t1mac_output_data ( ( byte * ) t, len ) ; return ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> * t && len < 9 ) { t1mac_output_data ( ( byte * ) t, len ) ; return ; } <S2SV_ModEnd> if ( * <S2SV_ModStart>!= '/' ) { t1mac_output_data ( ( byte * ) t, len ) ; t1mac_output_data ( ( byte * ) s, len ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; memcpy ( font_name, s, t - s ) ; font_name [ t - s ] = 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
259,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, TEMP_FAILURE_RETRY (",0
260,<S2SV_ModStart> msixcap ; assert ( msgnum <= MAX_MSIX_TABLE_ENTRIES ) ; <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_populate_msixcap ( &,0
261,"<S2SV_ModStart> ; if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; }",0
262,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
263,"<S2SV_ModStart> NULL ) { pkiDebug ( ""found <S2SV_blank> kdcPkId <S2SV_blank> in <S2SV_blank> AS <S2SV_blank> REQ\\n"" ) ; return retval ; } status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc",0
264,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock ( ) ;",0
265,<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; if ( frame_type == MV_REFERENCE_FRAME ) { return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32,0
266,<S2SV_ModStart> gf == GF_VDEF && <S2SV_ModEnd> im -> gdes <S2SV_ModStart> gf == GF_VDEF && <S2SV_ModEnd> im -> gdes <S2SV_ModStart> gf == GF_VDEF && <S2SV_ModEnd> im -> gdes <S2SV_ModStart> gf == GF_VDEF && <S2SV_ModEnd> im -> gdes <S2SV_ModStart> gf == GF_VDEF && <S2SV_ModEnd> im -> gdes <S2SV_ModStart> gf == GF_VDEF && <S2SV_ModEnd> im -> gdes <S2SV_ModStart> gf == GF_VDEF <S2SV_ModEnd> ) { if <S2SV_ModStart> gf == GF_VDEF && <S2SV_ModEnd> im -> gdes <S2SV_ModStart> gf == GF_VDEF && <S2SV_ModEnd> im -> gdes <S2SV_ModStart> gf == GF_VDEF && <S2SV_ModEnd> im -> gdes <S2SV_ModStart> gf == GF_VDEF && <S2SV_ModEnd> im -> gdes <S2SV_ModStart> gf == GF_VDEF && <S2SV_ModEnd> im -> gdes <S2SV_ModStart> gf == GF_VDEF && <S2SV_ModEnd> im -> gdes,0
267,"<S2SV_ModStart> ; if ( tile_buffer_size_cmp ( buf1 -> size, buf2 -> size ) ) { return - 1 ; } else if ( tile_buffer_size_cmp ( buf1 -> size, buf2 -> size ) ) { return 1 ; } else if ( tile_buffer_size_cmp ( buf2 -> size, buf1 -> size ) ) { return - 1 ; } else if ( tile_buffer_size_cmp ( buf1 -> size, buf2 -> size ) ) { return 1 ; } else if ( tile_buffer_size_cmp ( buf1 -> size, buf2 -> size ) ) { return 1 ; } else if ( tile_buffer_size_cmp ( buf1 -> size, buf2 -> size ) ) { return - 1 ; }",0
268,"<S2SV_ModStart> NULL ; size_t alloc_size = <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> info ) + size ; if ( alloc_size < sizeof ( * info ) ) return NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY | __GFP_NOWARN | __GFP_NORETRY | __GFP_NORETRY ) ; if (! info ) return NULL ; if (! info ) { info = kmalloc ( alloc_size, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY | __GFP_NORETRY ) ; if (! info ) return NULL ; }",0
269,<S2SV_ModStart> ; if ( protocol < 0 || protocol > AX25_MAX_PROTOCOL ) return - EINVAL ; if (,0
270,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
271,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val <S2SV_ModEnd> ) ; break",0
272,"<S2SV_ModStart> list. name, true",1
273,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
274,"<S2SV_ModStart> b ) ; if ( b -> manager -> event == NULL ) { r = log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { r = log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = log_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { r = log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = log_debug_errno ( SYNTHETIC_ERRNO ( EADDRNOTAVAIL ), ""Device <S2SV_blank> %s <S2SV_blank> does <S2SV_blank> not <S2SV_blank> expose <S2SV_blank> keys <S2SV_blank> or <S2SV_blank> switches <S2SV_blank> relevant <S2SV_blank> to <S2SV_blank> us, <S2SV_blank> ign",0
275,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
276,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
277,"<S2SV_ModStart> ; REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 3 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; if ( TYPE ( CHILD ( n, name_i + 4 ) == TYPE_COMMENT ) { returns = ast_for_comment ( c, CHILD ( n, name_i + 4 ) ) ; if (!",0
278,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
279,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
280,"<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ( ctxt, rc <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ) return rc <S2SV_ModEnd> ; } <S2SV_null>",0
281,,1
282,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
283,"<S2SV_ModStart> : if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> > psf -> header. end <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> > psf -> header. end <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> > psf -> header. end <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> > psf -> header. end <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> > psf -> header. end <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> > psf -> header. end <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> > psf -> header. end <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> > psf -> header. end <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> > psf -> header. end <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> ; psf_fseek ( <S2SV_ModEnd> psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ;",0
284,<S2SV_ModStart> ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER <S2SV_ModEnd> ; } <S2SV_null>,0
285,<S2SV_ModStart> prev_line_has_list_loosening_effect ) { if ( prev_line_has_list_loosening_effect ) { if ( prev_line_has_list_loosening_effect!= line -> type ) { if ( prev_line_has_list_loosening_effect!= line -> type ) { if ( prev_line_has_list_loosening_effect!= line -> type ) { if ( prev_line_has_list_loosening_effect!= line -> type ) { if ( prev_line_has_list_loosening_effect ) { if ( prev_line_has_list_loosening_effect!= line -> type ) { if ( prev_line_has_list_loosening_effect!= line -> type ) { if ( prev_line_has_list_loosening_effect!= line -> type ) { if ( prev_line_has_list_loosening_effect!= line -> type ) { if ( prev_line_has_list_loosening_effect ) { if ( prev_line_has_list_loosening_effect!= line -> type,0
286,<S2SV_ModStart> event ) { <S2SV_ModEnd> struct task_struct * <S2SV_ModStart> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } raw_spin_lock_irq,0
287,<S2SV_ModStart>. post_proc_flag ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) ; flags -> color_b_modes_flag = ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ) <S2SV_ModEnd> ; flags ->,0
288,"<S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, EXTRACT_16BITS ( ptr. common -> packet_seq ), length ) ) ; goto trunc ; } if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg6 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, EXTRACT_16BITS ( ptr. v6 -> packet_seq ), length ) ) ; goto trunc ; } <S2SV_ModStart> ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, EXTRACT_16BITS ( ptr. v6 -> packet_seq ), length )",0
289,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
290,"<S2SV_ModStart> { fprintf ( stderr <S2SV_ModEnd>, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) <S2SV_ModStart> 0 ) ; fchown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""fchmod"" ) ; return 1 ; } <S2SV_ModEnd> return 0 ;",0
291,"<S2SV_ModStart> = 0 ; memset ( bh -> b_data + inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize, 0, inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - 1 ), inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - 1 ) ;",0
292,<S2SV_ModStart> p_num_sfb [ LOW ] - ptr_hbe_txposer -> start_band ; if ( ptr_hbe_txposer -> end_band < ptr_hbe_txposer -> start_band ) ptr_hbe_txposer -> end_band = ptr_hbe_txposer -> start_band ; <S2SV_ModStart> p_num_sfb [ LOW ] - ptr_hbe_txposer -> start_band ; if ( ptr_hbe_txposer -> core_frame_length == 768 ) { if ( ptr_hbe_txposer -> k_start < 0 ) ptr_hbe_txposer -> k_start = ptr_hbe_txposer -> k_start ; } else if ( ptr_hbe_txposer -> core_frame_length == 768 ) { if ( ptr_hbe_txposer -> k_start < ptr_hbe_txposer -> k_start ) ptr_hbe_txposer -> k_start = ptr_hbe_txposer -> k_start ; } else { if ( ptr_hbe_txposer -> k_start < ptr_hbe_txposer,0
293,"<S2SV_ModStart> ; const lua_authz_provider_spec * prov_spec = parsed_require_line ; int result ; int nargs = 0 ; spec = create_vm_spec ( & pool, r, cfg, server_cfg, NULL, 0, ""authz <S2SV_blank> provider"" ) ; L = ap_lua_get_lua_state ( pool, spec, r ) ; if ( L == NULL ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02314 ) ""Unable <S2SV_blank> to <S2SV_blank> compile <S2SV_blank> VM <S2SV_blank> for <S2SV_blank> authz <S2SV_blank> provider <S2SV_blank> %s"", prov_spec -> name ) ; return AUTHZ_GENERAL_ERROR ; } lua_getglobal ( L, prov_spec -> function_name ) ; if (! lua_isfunction ( L, - 1 ) ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name",0
294,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
295,"<S2SV_ModStart>! proto_end ) { printk ( KERN_WARNING ""Malformed <S2SV_blank> credential <S2SV_blank> URL: <S2SV_blank> %s\\n"", url ) ; return 0 ; } <S2SV_ModEnd> cp = proto_end",0
296,<S2SV_ModStart> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
297,"<S2SV_ModStart> ) ; } if ( server. bgsavechildpid!= - 1 && server. bgrewritechildpid!= - 1 ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; server. bgsavechildpid = - 1 ; } if ( server. maxidletime &&! ( loops % 100 ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), zmalloc_used_memory ( ) ) ) ; }",0
298,"<S2SV_ModStart> channel ) ; if ( client -> priv -> protocol_timeout == 0 ) { g_debug ( ""GsmXSMPClient: <S2SV_blank> Protocol <S2SV_blank> timeout <S2SV_blank> set <S2SV_blank> to <S2SV_blank> zero"" ) ; client -> priv -> protocol_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_protocol_timeout, client ) ; } else { g_debug ( ""GsmXSMPClient: <S2SV_blank> Protocol <S2SV_blank> timeout <S2SV_blank> set <S2SV_blank> to <S2SV_blank> zero"" ) ; client -> priv -> protocol_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_protocol_timeout, client ) ; } if ( client -> priv -> protocol_timeout == 0 ) { g_debug ( ""GsmXSMPClient: <S2SV_blank> Protocol <S2SV_blank> timeout <S2SV_blank> set <S2SV_blank> to <S2SV_blank> zero"" ) ; client -> priv -> protocol_timeout = 0 ; } else { g_debug ( ""GsmXSMPClient: <S2SV_blank> Protocol <S2SV_blank> timeout <S2SV_blank> set <S2SV_blank> to <S2SV_blank> zero"" ) ; client -> priv -> protocol_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_protocol_timeout, client ) ; }",0
299,<S2SV_ModStart> - 1 ; if ( i + book -> dim > n ) return - 1 ;,0
300,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"",",0
301,"<S2SV_ModStart> { if ( check_scale_factors ( sf -> x_scale_fp, sf -> y_scale_fp, other_w, other_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } <S2SV_ModEnd> sf -> x_step_q4 <S2SV_ModStart> 16 ) { if ( check_scale_factors ( sf -> x_scale_fp, sf -> y_step_q4, this_w, this_h ) ) { sf -> predict [ 0 ] [ 0 ] = vp9_convolve_copy ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve8_horiz ; } else { if ( check_scale_factors ( sf -> x_scale_fp, sf -> y_scale_fp, other_w, other_h, this_w, this_h ) ) { sf -> predict [ 0 ] [ 0 ] = vp9_convolve_copy ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve_avg ; sf ->",0
302,"<S2SV_ModStart> PERF_COUNT_SW_ALIGNMENT_FAULTS, 1 <S2SV_ModEnd>, regs,",0
303,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
304,"<S2SV_ModStart> sk ) ; rcu_read_lock ( ) ; <S2SV_ModStart> ( opt ) rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> ( opt ) rcu_assign_pointer ( np -> opt, NULL ) ; <S2SV_ModEnd> sock_kfree_s ( sk <S2SV_ModStart> tot_len ) ; rcu_read_unlock ( ) ;",0
305,"<S2SV_ModStart> 0 ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; memcpy ( & opt -> opt, & np -> opt, sizeof ( struct ipv6_txoptions ) ) ; memcpy ( & opt -> opt, & np -> opt, sizeof ( struct ipv6_txoptions ) ) ; memcpy ( & opt -> opt, sizeof ( struct ipv6_txoptions ) ) ; <S2SV_ModStart> 0 ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; memcpy ( & opt -> opt, & np -> opt, sizeof ( struct ipv6_txoptions ) ) ; memcpy ( & opt -> opt, & opt -> opt, sizeof ( struct ipv6_txoptions ) ) ; memcpy ( & opt -> opt, sizeof ( struct ipv6_txoptions ) ) ; memcpy ( & opt -> opt, & opt -> opt, sizeof ( struct ipv6_txoptions ) ) ; memcpy ( & opt -> opt,",0
306,<S2SV_ModStart> sctp_net_ops ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_ops <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_pf_ops,0
307,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; <S2SV_ModEnd> ovpsnr = sse_to_psnr,0
308,<S2SV_ModStart> task ) { <S2SV_ModEnd> complete ( &,0
309,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
310,"<S2SV_ModStart> init ( ) ; <S2SV_ModEnd> TRACE_DEBUG ( ""CIDER=0x%04"" <S2SV_ModStart> ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { memPoolFree ( context -> txBuffer ) ; memPool",0
311,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
312,"<S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HA",0
313,"<S2SV_ModStart> ; if ( memcmp ( fit_base_uname_config, fit_base_uname_config, sizeof ( fit_base_uname_config ), sizeof ( fit_base_uname_config ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; } if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; }",0
314,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY (,0
315,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> -> avg_frame_bandwidth * rc -> avg_gf_interval <S2SV_ModEnd> ) / <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
316,"<S2SV_ModStart> ++ ) { if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; }",0
317,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
318,"<S2SV_ModStart> ib ] ; # if CONFIG_VP8_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vp8_strict_quantize_b ( b, d ) ; # else ( void ) mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ; # endif } # if CONFIG_VP12_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vp8_strict_quantize_b ( b, d ) ; } else { vp8_strict_quantize_b ( b, d ) ; # endif } # if CONFIG_VP12_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { if ( mb -> e_mbd.",0
319,<S2SV_ModStart> FN_REFLEN ] ; if ( strlen ( opt_basedir ) > sizeof ( buff ) - 1 ) { error = - 1 ; goto exit ; },0
320,"<S2SV_ModStart> int n = MIN ( <S2SV_ModStart> - data ) ; if ( n < 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Corrupt <S2SV_blank> packet"" ) ; }",0
321,<S2SV_ModStart> getprivs_ret ret ; struct gss_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
322,"<S2SV_ModStart>. sack_needed ; if (! list_empty ( & asoc -> peer. transport_addr_list ) ) { sctp_tsnmap_init ( & asoc -> peer. tsn_map, GFP_ATOMIC, new -> peer. i. initial_tsn, GFP_ATOMIC ) ; } else { sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, new -> peer. i. initial_tsn, GFP_ATOMIC ) ; }",0
323,"<S2SV_ModStart> returnrate, int <S2SV_ModEnd> returndistortion, int <S2SV_ModStart> returnintra ) { # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart> best_rd_sse = INT_MAX <S2SV_ModEnd> ; # endif",0
324,<S2SV_ModStart> goto error ; if ( h -> hdr -> magic [ 0 ] == 'r' || h -> hdr -> magic [ 1 ] == 'e' ) { h -> hdr -> magic [ 0 ] = 'r' ; h -> hdr -> magic [ 1 ] = 'e' ; h -> hdr -> magic [ 1 ] = 'r' ; h -> hdr -> magic [ 0 ] = 'r' ; h -> hdr -> magic [ 1 ] = 'e' ; } else { h -> hdr -> magic [ 0 ] = 'r' ; h -> hdr -> magic [ 1 ] = 'e' ; },0
325,"<S2SV_ModStart> ; UWORD8 u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id ; WORD32 i4_num_reorder_frames ; WORD32 pic_height_in_map_units_minus1 ; WORD32 pic_width_in_map_units_minus1 ; WORD32 pic_height_in_map_units_minus1 ; WORD32 pic_height_in_map_units_minus1 ; u2_pic_wd = 0 ; u2_pic_ht = 0 ; u2_pic_ht = 0 ; u2_crop_offset_y = 0 ; u2_crop_offset_uv = 0 ; ret = ih264d_parse_bit_stream ( ps_dec, ps_bitstrm, u4_num_reorder_frames, pic_height_in_map_units_minus1, pic_width_in_map_units_minus1, u2_pic_wd, u2_pic_ht, u2_pic_wd, u2_pic_ht, u2_crop_offset_y, u2_crop_offset",0
326,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * cpi ; <S2SV_ModEnd> VP9_COMP * const <S2SV_ModStart> * ) ; <S2SV_ModEnd> if ( vp9_set_size_literal <S2SV_ModStart> cpi, params <S2SV_ModEnd> -> lst_fb_idx, <S2SV_ModStart> -> gld_fb_idx, <S2SV_ModEnd> params -> alt_fb_idx <S2SV_ModStart> -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; set_encoder_config ( & ctx -> oxcf, & ctx -> extra_cfg, & ctx -> extra_cfg ) ; set_encoder_config ( & ctx -> oxcf, & ctx -> cfg, & ctx -> extra_cfg ) ; set_encoder_config ( & ctx -> oxcf, & ctx -> cfg, & ctx -> extra_cfg ) ; set_encoder_config ( & ctx -> oxcf, & ctx -> extra_cfg ) ; set_encoder",0
327,"<S2SV_ModStart> out ) { <S2SV_ModEnd> copyFunc cf ; <S2SV_ModStart> uint16 input_compression, input_photometric ; uint32 width, length ; CopyField ( TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( TIFFTAG_IMAGELENGTH, length ) ; CopyField ( TIFFTAG_BITSPERSAMPLE, bitspersample ) ; CopyField ( TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; if ( compression!= ( uint16 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> copy/convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } TIFFGetFieldDefaulted ( in, TIFFTAG_COMPRESSION, & input_compression ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_JPEGCOLORMODE, & jpegcolormode ) ; if ( subsamplinghor!= 1 || subsamplingver!= 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> copy/convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } if ( input_photometric == PHOTOMETRI",0
328,"<S2SV_ModStart> { # if defined ( HAVE_LSTAT ) return ( ARCHIVE_OK <S2SV_ModEnd> ) ; # <S2SV_ModStart> = '\\0' ; if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( AR",0
329,"<S2SV_ModStart> sbi ) ; if ( sbi -> udf_flags & UDF_FLAG_NOATIME ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( sbi -> udf_flags & UDF_FLAG_NOATIME ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( sbi -> udf_flags & UDF_FLAG_NOATIME ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( sbi -> udf_flags & UDF_FLAG_NOATIME ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ;",0
330,<S2SV_ModStart> -> tx_size ; const uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y [ tx_size_y ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const above_uv = & lfm -> above_uv [ tx_size_uv,0
331,"<S2SV_ModStart> mq_flush_lock, flags ) ; fq -> flush_running_idx ^= 1 ; if (! q -> mq_ops ) { spin_lock_irqsave ( & fq -> mq_flush_lock, flags ) ; flush_rq -> tag = - 1 ; } running = & fq -> flush_queue [ fq -> flush_pending_idx ] ; BUG_ON ( fq -> flush_pending_idx == fq -> flush_running_idx ) ; if (! q -> mq_ops ) spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ;",0
332,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
333,<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) {,0
334,"<S2SV_ModStart> ) ) { if (! smatch ( option, ""name"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; }",0
335,"<S2SV_ModStart> || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> NULL || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( * ( effect_param_t * ) pCmdData < sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } <S2SV_ModStart> sizeof ( effect_param_t ) ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( * ( effect_param_t * ) pCmdData < sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; }",0
336,"<S2SV_ModStart> ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
337,"<S2SV_ModStart> 0 ) { struct ipv6_txoptions * txopt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; memcpy ( & txopt, np -> tx_opt, sizeof ( * txopt ) ) ; rcu_read_lock ( ) ; txopt = rcu_dereference_protected ( np -> tx_opt, sock_owned_by_user ( sk ) ) ; atomic_dec ( & sk -> sk_omem_alloc ) ; atomic_set ( & txopt -> refcnt, 1 ) ; atomic_set ( & txopt -> refcnt, 1 ) ; atomic_set ( & txopt -> refcnt, 1 ) ; atomic_set ( & txopt -> refcnt, 1 ) ; atomic_set ( & txopt -> refcnt, 1 ) ; atomic_set ( & txopt -> refcnt, sock_owned_by_user ( sk ) ) ; atomic_dec ( & sk -> sk_omem_alloc ) ; atomic_set ( & txopt -> refcnt, 1 ) ; atomic_set ( & txopt -> refcnt, 1 )",0
338,"<S2SV_ModStart> berval ) ; memset ( ret [ j ], 0, sizeof ( struct berval ) ) ;",0
339,<S2SV_ModStart> 0x02 ) ; memcpy <S2SV_ModEnd> ( sbuf +,0
340,"<S2SV_ModStart> uint8 result ; unsigned <S2SV_ModStart> ; int length <S2SV_ModEnd> ; STREAM s <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", __func__ ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", __func__ ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", __func__ ) ; return False ; }",0
341,"<S2SV_ModStart> dev_err ( & vdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> mac <S2SV_blank> vlans\\n"" ) ; return ret ; } <S2SV_ModEnd> ch = i40e_find_channel <S2SV_ModStart> ch ) ; if ( ret ) { dev_err ( & vdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> mac <S2SV_blank> vlans\\n"" ) ; return ret ; } <S2SV_ModEnd> ch = i40e_find_channel <S2SV_ModStart> ch ) ; if ( ret ) { dev_err ( & vdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> mac <S2SV_blank> vlans\\n"" ) ; return ret ; } <S2SV_ModEnd> ch = i40e_find_channel <S2SV_ModStart> ch ) ; if ( ret ) { dev_err ( & vdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> mac <S2SV_blank> vlans\\n"" ) ; return ret ; }",0
342,"<S2SV_ModStart> goto out ; ret = uid_gid_map_update_extent ( file, & new_map, extent. first, extent. count ) ; if ( ret < 0 ) { ret = - EINVAL ; goto out ; } ret = uid_gid_map_update_extent ( file, & new_map, extent. lower_first, extent. count ) ; if ( ret < 0 ) goto out ; ret = uid_gid_map_update_extent ( file, & new_map, extent. count ) ; if ( ret < 0 ) goto out ; ret = map_update_extent ( file, & new_map ) ; if ( ret < 0 ) { ret = - EINVAL ; goto out ; } ret = uid_gid_map_update_extent ( file, & new_map, extent. count ) ; if ( ret < 0 ) goto out ; ret = uid_gid_map_update_extent ( file, & new_map, extent. count ) ; if ( ret < 0 ) goto out ; ret = map_update_extent ( file, & new_map ) ; if ( ret < 0 ) { ret = - EINVAL ; goto",0
343,"<S2SV_ModStart> } } } return send_msg ( g, ""E01"" ) ;",0
344,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
345,"<S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, <S2SV_ModEnd> pc -> filter_level <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_col, <S2SV_ModEnd> pc -> filter_level <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_col, <S2SV_ModEnd> pc -> filter_level <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, <S2SV_ModEnd> pc -> filter_level <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, <S2SV_ModEnd> pc -> filter_level <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, <S2SV_ModEnd> pc -> filter_level <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, <S2SV_ModEnd> pc -> filter_level <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi",0
346,"<S2SV_ModStart> NULL ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ;",0
347,"<S2SV_ModStart> len ) { PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = p - buf ; s = buf ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; p += 10 ; } assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; }",0
348,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart>, targisdir, <S2SV_ModEnd> wrerrno = 0 <S2SV_ModStart> wrerrno = 0 <S2SV_ModEnd> ; char ch <S2SV_ModStart> = 0 ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> find <S2SV_blank> pattern"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> find <S2SV_blank> pattern"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> find <S2SV_blank> pattern"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> find <S2SV_blank> "" ""pattern"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> find <S2SV_blank> pattern"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> find <S2SV_blank> pattern"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s:",0
349,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
350,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
351,"<S2SV_ModStart> -> above_context ) { vpx_free ( oci -> mip ) ; memset ( oci -> mip, 0, sizeof ( MODE_INFO ) ) ; memset ( oci -> mi, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> mip, 0, sizeof ( MODE_INFO ) ) ; memset ( oci -> mi, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci",0
352,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
353,"<S2SV_ModStart> i2_cur_mb_addr, i2_pic_wdin_mbs, <S2SV_ModEnd> u1_num_mbs, u1_num_mbsNby2 <S2SV_ModStart> i2_pic_wdin_mbs, i2_pic_wdin_mbs, <S2SV_ModEnd> u1_num_mbs, u1_num_mbsNby2 <S2SV_ModStart> i2_pic_wdin_mbs, i2_pic_wdin_mbs <S2SV_ModEnd>, i2_pic_wdin_mbs, <S2SV_ModStart> i2_pic_wdin_mbs, <S2SV_ModEnd> u1_num_mbsNby2, <S2SV_ModEnd> u1_num_mbsNby2, i2_pic_wdin_mbs <S2SV_ModStart> i2_pic_wdin_mbs, <S2SV_ModEnd> u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_pic_wdin_mbs, i2_pic_wdin_mbs <S2SV_ModStart> i2_pic_wdin_mbs, <S2SV_ModEnd> u1_num_mbsNby2, <S2SV_ModEnd> u1_num_mbsNby2",0
354,"<S2SV_ModStart> ; if ( screen -> buffers [ 0 ] && screen -> buffers [ 0 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] -> flags ) ; if ( screen -> buffers [ 1 ] && screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 1 ] -> flags ) ; if ( screen -> buffers [ 0 ] && screen -> buffers [ 0 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] -> flags ) ; if ( screen -> buffers [ 1 ] && screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 1 ] -> flags ) ;",0
355,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
356,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t pixel_info_length <S2SV_ModStart> ReadBlobLSBShort ( image ) ; pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_",0
357,"<S2SV_ModStart> { httpSetHostName ( <S2SV_ModEnd> state -> host <S2SV_ModStart> value ), sfmt ( ""default-%s"", state -> host -> name ) ) ; httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
358,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
359,<S2SV_ModStart>! job_id ||! prev_hash ||! coinbase1 ||! coinbase2 ||! bbversion ||! nbit ||! ntime ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; free ( header ) ;,0
360,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
361,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
362,"<S2SV_ModStart> unused ) { _Py_IDENTIFIER <S2SV_ModEnd> ( __dict__ ) <S2SV_ModStart> * res ; _Py_IDENTIFIER <S2SV_ModEnd> ( __dict__ ) <S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart>, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) return NULL ; } else { res = _BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } <S2SV_ModEnd> return res ;",0
363,"<S2SV_ModStart> USB_DT_OTG, ( struct usb_otg_descriptor * ) <S2SV_ModEnd> desc ) ;",0
364,<S2SV_ModStart> -> private_data ; u64 <S2SV_ModEnd> flags = arg <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : return <S2SV_ModEnd> perf_event_period ( event <S2SV_ModStart> arg ) ; <S2SV_ModEnd> case PERF_EVENT_ID : <S2SV_ModStart> ret ; } <S2SV_ModEnd> return perf_event_set_filter (,0
365,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
366,"<S2SV_ModStart> ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp",0
367,<S2SV_ModStart> ; return Qnil ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
368,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
369,"<S2SV_ModStart> ""recv: <S2SV_blank> [IB_READ_SETTINGS]\\n"" ) ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - first ; }",0
370,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
371,"<S2SV_ModStart> ( MSR_IA32_PERF_CAPABILITIES, & x86_pmu. intel_cap. capabilities, sizeof ( x86_pmu. intel_cap. capabilities ), sizeof ( x86_pmu. intel_cap. capabilities ) ) ; if ( version > 1 ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, & x86_pmu. intel_cap. capabilities, sizeof ( x86_pmu. intel_cap. capabilities ), & x86_pmu. intel_cap. capabilities, sizeof ( x86_pmu. intel_cap. capabilities ), sizeof ( x86_pmu. intel_cap. capabilities ), sizeof ( x86_pmu. intel_cap. capabilities ), sizeof ( x86_pmu. intel_cap. capabilities ), sizeof ( x86_pmu. intel_cap. capabilities ), sizeof ( x86_pmu. intel_cap. capabilities ), sizeof ( x86_pmu. intel_cap. capabilities ), sizeof ( x86_pmu. intel",0
372,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * * tp, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * stop ) { const TOKENEXTRA * p = * tp ; while ( p < stop && p -> token!= EOSB_TOKEN ) { const int t = p -> token ; const struct vp9_token * const a = & vp9_coef_encodings [ t ] ; const struct vp9_extra_bit * const b = & vp9_extra_bits [ t ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) ; vwrite_tree ( w, vp9_coef_tree, p -> context_tree, bits, len, i ) ; vp9_write_tree ( w, vp9_coef_con_tree, vp9_pareto8_full [ p -> context_tree [ PIVOT_NODE ] - 1 ], v, n - len, 0",0
373,"<S2SV_ModStart> size_t uncompressed_hdr_size ; <S2SV_ModEnd> write_uncompressed_header ( cpi <S2SV_ModStart> struct vp9_write_bit_buffer wb <S2SV_ModEnd> ; write_uncompressed_header ( <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_rb_bytes_written ( & wb ) ; vpx_clear_system_state ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
374,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
375,"<S2SV_ModStart> struct ikev2_id id ; <S2SV_ModEnd> int id_len, <S2SV_ModStart> * typedata ; ND_TCHECK2 ( * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; id_len = ntohs ( id. h. len ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> len=%d"", id_len ) ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) ) goto trunc ; }",0
376,"<S2SV_ModStart> = jas_tvparser_getval ( tvp ) ; jas_tvparser_settag ( tvp, jas_taginfo_lookup ( mif_tags, jas_tvparser_gettag ( tvp ) ) ) ; jas_tvparser_settag ( tvp, jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_tvparser_gettag ( tvp ) ) ) ; jas_tvparser_settag ( tvp, jas_tvparser_gettag ( tvp ), jas_taginfo_lookup ( mif_tags, jas_tvparser_gettag ( tvp ) ) ) ; jas_tvparser_settag ( tvp, jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_tvparser_gettag ( tvp ) ) ) ) ; jas_tvparser_settag ( tvp, jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_taginfo_gettag ( tvp ) )",0
377,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
378,"<S2SV_ModStart>, yt0_0, xt1_0, yt1_0, xt2_0, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_1, x_l1_1, x_l1_1, x",0
379,<S2SV_ModStart> mntent -> mnt_dir -> mnt_sb -> s_root -> d_sb -> s_root -> d_sb -> s_root -> d_sb -> s_root -> d_sb -> s_root -> d_sb -> s_root -> d_sb -> s_root -> d_sb -> s_root -> d_sb -> s_root -> d_sb -> s_root -> d_sb -> s_root -> d_sb -> s_sb -> s_sb -> s_root -> d_sb -> s_root -> d_sb -> s_root -> d_sb -> s_root -> d_sb -> s_root -> d_sb -> s_root -> d_sb -> s_root -> d_sb -> s_root -> d_sb -> s_root -> d_sb -> s_root -> d_sb -> s_root -> d_sb -> s_root -> d_sb -> s_bdev -> d_sb -> s_bdev -> d_sb -> d_sb -> d_sb -> d_sb -> d_sb -> d_sb -> d_sb -> d_sb -> d_,0
380,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
381,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, remote_addr_val, rb_hash_new ( ) ) ; rb_hash_aset ( env, remote_port_val, rb_hash_new ( ) ) ; rb_hash_aset ( env, remote_addr_val, rb_hash_new ( ) ) ; rb_hash_aset ( env, remote_addr_val, rb_hash_new ( ) ) ; rb_hash_aset ( env, remote_addr_val, rb_hash_new ( ) ) ; rb_hash_aset ( env, remote_port_val, rb_hash_new ( ) ) ; rb_hash_aset ( env, remote_addr_val, rb_hash_new ( ) ) ; rb_hash_aset ( env, remote_addr_val, rb_hash_new ( ) ) ; rb_hash_aset ( env, remote_addr_val, rb_hash_new ( ) ) ; rb_hash_aset ( env, remote_addr_val, rb_hash_new ( ) ) ; rb_hash_aset ( env, remote_addr_val, rb_new ( ) )",0
382,"<S2SV_ModStart> endif # endif MYSQL_BIND * bind, * bind_end <S2SV_ModEnd> ; imp_sth_phb_t * <S2SV_ModStart>, prepare_retval ; <S2SV_ModEnd> if ( DBIc_TRACE_LEVEL <S2SV_ModStart> 2 ) PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t-> <S2SV_blank> dbd_st_prepare <S2SV_blank> MYSQL_VERSION_ID <S2SV_blank> %d, <S2SV_blank> SQL <S2SV_blank> statement: <S2SV_blank> %s\\n"", MYSQL_VERSION_ID, statement ) ; if ( DBIc_TRACE_LEVEL ( imp_xxh ) >= 2 ) PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t-> <S2SV_blank> dbd_st_prepare <S2SV_blank> MYSQL_VERSION_ID <S2SV_blank> %d, <S2SV_blank> SQL <S2SV_blank> statement: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, MYSQL_VERSION_ID,",0
383,<S2SV_ModStart> int need ; if ( screen -> data_limit <= ( size_t ) need ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; } if ( need < 0 ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_limit = ( size_t ) need ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ) ; } if ( need < 0 ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ),0
384,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> JsVarFloat stopAtError = 0.0000001 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( val ) ) { strncat ( str, ""NaN"", len ) ; else strncat ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) ; if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) ; strncat ( str, ""Infinity"", len ) ; } else { if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) ; val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val",0
385,"<S2SV_ModStart> 5 ) ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ;",0
386,"<S2SV_ModStart> cycles ) ; if ( unlikely ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; } <S2SV_ModEnd> if ( (",0
387,"<S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len )",0
388,,1
389,"<S2SV_ModStart> * output ; <S2SV_ModEnd> ssize_t i ; <S2SV_ModStart> MagickFalse ) ; } input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( i = 2 ; i < ( ssize_t ) ( argc - 1 ) ; i ++ ) { # if 0 fprintf ( stderr, ""DEBUG: <S2SV_blank> Concatenate <S2SV_blank> Image: <S2SV_blank> \\""%s\\""\\n"", argv [ i ] ) ; # endif input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( c = fgetc ( input ) ; c!= EOF ; c = fgetc ( input ) ) ( void ) fputc ( ( char ) c, output ) ; ( void ) remove_utf8 ( argv [ i ] ) ; ( void ) fclose ( input ) ; ( void ) fclose ( output ) ;",0
390,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
391,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( fp = safe_mkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> atomic_dir ) ) == NULL ) return - 1 ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fgets ( linebuf, buflen, pwf ) == NULL ) goto fail ; linebuf = malloc ( buflen ) ; if (! found && linebuf [ namelen ] == ':' &&! strncmp ( linebuf, pwd -> pw_name, namelen ) ) { if ( putpwent ( pwd, fp ) < 0 ) goto fail ;",0
392,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
393,<S2SV_ModStart> s2 ) { size_t len ; len = <S2SV_ModEnd> strlen ( s1,0
394,"<S2SV_ModStart> TRUE ; } gchar * to = xmpp_stanza_get_to ( message ) ; if (! to ) to = from ; Jid * jid_from = jid_create ( from ) ; Jid * jid_to = jid_create ( to ) ; if (! jid_from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> jid <S2SV_blank> from: <S2SV_blank> %s"", from ) ; return TRUE ; } gchar * from = xmpp_stanza_get_from ( message ) ; gchar * from = xmpp_stanza_get_from ( message ) ; if (! from ) from = from ; Jid * jid_from = jid_create ( from ) ; Jid * jid_to = jid_create ( to ) ; if ( g_strcmp0 ( name, ""received"" )!= 0 ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> unrecognised <S2SV_blank> stanza <S2SV_blank> name: <S2SV_blank> %s"", name ) ; return TRUE ; } if ( g_strcmp0 ( name, ""sent"" )!= 0 ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> unrecognised <S2SV_blank>",0
395,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_HELP, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; }",0
396,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
397,"<S2SV_ModStart> st_v1_new_iv ) ; if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message"" ) ; return ; } if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message"" ) ; return ; } st -> st_v1_new_iv. len = e -> enc_blocksize ; st -> st_v1_new_iv.",0
398,<S2SV_ModStart> { if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else { if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } },0
399,<S2SV_ModStart> <S2SV_null> static char * <S2SV_ModEnd> print_string ( cJSON <S2SV_ModStart> item ) { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> valuestring ) ; } <S2SV_null> <S2SV_null>,0
400,<S2SV_ModStart> enc. encode <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> enc. encode <S2SV_ModEnd> ( ctx ->,0
401,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> + 1, ""prestring=%s"" <S2SV_ModEnd>, buf ) <S2SV_ModStart> buf ) ; if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; } else if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; } else if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; } else if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; } else if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large;",0
402,"<S2SV_ModStart> ; } } term. screen_chars = win_get_screen_chars ( & rows, & cols ) ; term. screen_pixels = win_get_pixels ( & rows, & cols ) ; term. screen_points = win_get_screen_points ( & rows, & cols ) ; term. screen_points = win_get_screen_points ( & rows, & cols ) ; term. screen_points = win_get_screen_points ( & rows, & cols ) ; term. screen_points = win_get_screen_points ( & rows, & cols ) ; term. screen_points = win_get_screen_points ( & rows, & cols ) ; term. screen_points = win_get_screen_points ( & rows, & cols ) ; term. screen_points = win_get_screen_points ( & rows, & cols ) ; term. screen_points = win_get_screen_points ( & rows, & cols ) ; term. screen_points = win_get_screen_points ( & rows, & cols ) ; term. screen_points = win_get_screen_points ( & rows, & cols ) ;",0
403,<S2SV_ModStart> ++ ) s [ i ] = 0 ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; d [ i + 8 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] ; int y = s [ c +,0
404,"<S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NG",0
405,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> word ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 16 ) ) vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 32 ) ) vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) vpx_write_literal <S2SV_ModEnd> ( w,",0
406,"<S2SV_ModStart>!= NULL && ( st = populate_policy ( context, ld, ent, pol_name, * policy ) )!= 0 <S2SV_ModEnd> ) goto cleanup <S2SV_ModStart> cleanup ; } st = populate_policy ( context, ld, ent, pol_name, * policy ) ; if ( st!= 0 ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; }",0
407,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE (,0
408,"<S2SV_ModStart> ) ) { switch ( c ) { case'<S2SV_blank>': break ; case 'e' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'E' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'T' : trunc_8to4 = SF_FALSE ; break ; case'm' : data = va_arg ( argptr, unsigned int ) ; header_put_marker ( psf, data ) ; count += 1 ; break ; case '2' : data = va_arg ( argptr, unsigned int ) ; header_put_byte ( psf, data ) ; count += 2 ; break ; case '3' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else { header_put_le_long ( psf, data ) ; } ; count += 3 ; break ; case '4' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_",0
409,"<S2SV_ModStart>, ret ; struct cx24116_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
410,"<S2SV_ModStart> RMT_EQUAL_RGB ) ThrowReaderException <S2SV_ModEnd> ( CorruptImageError, <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; bytes_per_line <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; bytes_per_line <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; bytes_per_line <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; bytes_per_line <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; bytes_per_line <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; bytes_per_line <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; bytes_per_line <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; bytes_per_line <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; bytes_per_line <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; bytes_per_line <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; bytes_per_line",0
411,"<S2SV_ModStart> 0 ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",1
412,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> : return vp9_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> : return vp9_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> : return vp9_mse8x16 <S2SV_ModEnd> ; case BLOCK_16X16 <S2SV_ModStart> : return vp9_mse8x16 <S2SV_ModEnd> ; default :,0
413,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
414,"<S2SV_ModStart> send_pa ) ; if ( retval == 0 ) { retval = return_pkinit_kx ( context, padata, request, reply, cb, rock, moddata, modreq ) ; if ( retval == 0 ) { retval = return_pkinit_kx ( context, padata, request, reply, cb, rock, moddata, modreq ) ; if ( retval == 0 ) retval = return_pkinit_kx ( context, padata, request, reply, cb, rock, moddata, modreq ) ; if ( retval == 0 ) retval = return_pkinit_kx ( context, padata, request, reply, cb, rock, moddata, modreq ) ; if ( retval == 0 ) retval = return_pkinit_kx ( context, padata, request, reply, cb, rock, moddata, modreq ) ; if ( retval == 0 ) retval = return_pkinit_kx ( context, padata, request, reply, cb, rock, moddata, moddata, modreq ) ; if ( retval == 0 ) retval = return_pkinit_kx ( context, padata, request, reply, cb,",0
415,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
416,"<S2SV_ModStart> flags ) ; if ( vb && input -> buf_cur_space_left < frame_len ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_left, frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, """,0
417,"<S2SV_ModStart> size ) { size_t ptr = calloc ( 1, size + PREFIX_SIZE ) ; if (! ptr ) zmalloc_oom_handler ( size ) ; return NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
418,<S2SV_ModStart> ; ssize_t count ; if ( bytes == 0 || items == 0 ) return 0,1
419,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
420,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, INFO, ""info: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> = <S2SV_blank> %s\\n"", adhoc_start -> ssid ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_",0
421,"<S2SV_ModStart> ; sfe -> valuelen = xfs_attr_sf_valuelen_to_disk ( sfe -> valuelen ) ; if ( sfe -> namelen > XFS_ATTR_SF_MAXNAMELEN ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, <S2SV_ModEnd> sfe -> valuelen <S2SV_ModStart> sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, sfe -> valuelen, & sfe -> valueval [ sfe -> valuelen ] ) ; if ( context -> seen_enough ) break ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } <S2SV_ModEnd> return 0 ;",0
422,"<S2SV_ModStart> = data ; <S2SV_ModEnd> BT_DBG ( ""sk <S2SV_blank> %p"" <S2SV_ModStart> sk ) ; BT_DBG ( ""sk <S2SV_blank> %p"", sk ) ; req -> dcid = cpu_to_le16 ( pi -> dcid ) ; req -> flags = cpu_to_le16 ( 0 ) ; req -> mtu = cpu_to_le16 ( pi -> mtu ) ; req -> max_transmit = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RECEIVE ) ; req -> retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; req -> monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; req -> max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; req -> max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; req -> max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_AP",0
423,"<S2SV_ModStart> { do { if ( r < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
424,<S2SV_ModStart> return ERROR_INCOMPLETE_FRAME ; } if ( ( ps_dec -> u1_nal_unit_type > IDR_SLICE_NAL ) || ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( u1_nal_ref_idc > IDR_SLICE_,0
425,<S2SV_ModStart>!= 0 ) <S2SV_ModEnd> { mprAddItem (,0
426,<S2SV_ModStart> = uid ; <S2SV_ModEnd> spin_lock_irq ( & <S2SV_ModStart> new ; } <S2SV_ModEnd> ucounts = NULL,0
427,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd>, int open_flags <S2SV_ModStart> = 0 ; fmode <S2SV_ModEnd> &= ( FMODE_READ <S2SV_ModStart> FMODE_WRITE ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> deleg_cur ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> ) ; __update_open_stateid <S2SV_ModEnd> ( state, <S2SV_ModStart> NULL ) { fmode_t fmode = fmode & ( FMODE_READ | FMODE_WRITE ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> ( state, fmode & ( FMODE_READ | FMODE_WRITE ) <S2SV_ModEnd> ) ; ret",0
428,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
429,"<S2SV_ModStart>, int64_t * out_rate_sum, int64_t * out_dist_sum, int64_t * out_dist_sum ) { int i ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; int64_t * out_dist_sum = 0 ; int64_t * out_sse = 0 <S2SV_ModEnd> ; const BLOCK_SIZE <S2SV_ModStart> ) ; ( void ) cpi <S2SV_ModEnd> -> fn_ptr [ <S2SV_ModStart>. vf ( <S2SV_ModEnd> p -> src <S2SV_ModStart>. buf, <S2SV_ModEnd> p -> src <S2SV_ModStart>. stride, <S2SV_ModEnd> pd -> dst <S2SV_ModStart>. buf, <S2SV_ModEnd> pd -> dst <S2SV_ModStart>. stride, & x -> <S2SV_ModEnd> pred_sse [ ref <S2SV_ModStart> -> pred_sse [ ref <S2SV_ModEnd> ] = sse <S2SV_ModStart> = sse ; * out_rate_sum = ( int ) rate_sum ; * out_dist_sum = ( int ) dist_sum ; * out_dist_sum = ( int ) dist_sum ; } else { int64_t rate ; int64_t dist ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ],",0
430,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
431,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if (,0
432,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> return vpx_read_tree ( <S2SV_ModEnd> r, vp9_segment_tree",0
433,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
434,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
435,"<S2SV_ModStart> buf2 = smb_fdata <S2SV_ModEnd> ( ndo,",0
436,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd>, RXQCR_SDA ) <S2SV_ModStart> ( interface, KSZ8851_TXQCR <S2SV_ModEnd>, TXQCR_METFE ) <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK",0
437,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get (",0
438,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
439,<S2SV_ModStart> ; # endif # ifdef MONO_HAS_SEMAPHORES mono_semaphore_init ( ) ; # else <S2SV_ModStart> ; # endif # ifdef MONO_HAS_SEMAPHORES g_assert ( g_slist_is_empty ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( ) ) ) ) ) ; g_assert ( g_slist_is_empty ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( ) ) ) ) ) ) ) ; g_assert ( g_slist_is_empty ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g,0
440,"<S2SV_ModStart>, x_7 ; WORD32 x_0, x_1, x_2, x_3, x_4, x_5, x_6, x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_9, x_a, x_b, x_c, x_d, x_e, x_f ; x_0 = x_0 + x_1 ; x_1 = x_1 + x_2 ; x_4 = x_4 + x_6 ; x_5 = x_5 + x_7 ; x_6 = x_6 ; x_7 = x_7 ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_a = x_0 + x_2 ; x_b = x_1 + x_3 ; x_c = x_4 + x_6 ; x_d = x_1 + x_7 ; x_e = x_4 + x_6 ; x_f = x_5 +",0
441,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
442,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
443,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
444,"<S2SV_ModStart>, frames ; <S2SV_ModEnd> if ( argc <S2SV_ModStart> 5 ) { usage ( argv [ 1 ] ) ; return 1 ; } if ( argc < 4 ) { usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( """,0
445,"<S2SV_ModStart> { int i <S2SV_ModEnd>, result ; <S2SV_ModStart>, result ; if ( num_fields < 0 ) { return 0 ; } _Py_IDENTIFIER ( _attributes ) ; PyObject * s, * l = PyTuple_New ( num_fields ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; Py_DECREF ( l ) ; return result <S2SV_ModEnd> ; } <S2SV_null>",0
446,"<S2SV_ModStart> = VPX_CODEC_OK ; <S2SV_ModEnd> struct vpx_codec_alg_priv * <S2SV_ModStart> priv ) { memset ( & priv, 0, sizeof ( struct vpx_codec_alg_priv ) ) ; <S2SV_ModStart> enc ) { memset ( & priv -> base, 0, sizeof ( struct vpx_codec_alg_priv ) ) ; <S2SV_ModStart> VPX_CODEC_MEM_ERROR ; } <S2SV_ModEnd> cfg = & <S2SV_ModStart> i ++ ) { memset ( & priv -> cfg, 0, sizeof ( struct vpx_codec_enc_cfg_t ) ) ; <S2SV_ModStart> i ++ ) { memset ( & priv -> vp8_cfg, 0, sizeof ( struct vpx_codec_enc_cfg_t ) ) ; priv -> cfg. g_w = cfg -> g_w ; priv -> cfg. g_h = cfg -> g_h ; priv -> vp8_cfg. pkt_list = malloc ( priv -> vp8_cfg. pkt_list. head ) ; priv -> cx_data = malloc ( priv -> cx_data_sz ) ; if (! priv -> cx_data ) { return VPX_CODEC_MEM_ERROR ; }",0
447,"<S2SV_ModStart> c ++ ; } if ( ( ret = s -> decode ( gb, rc, cumfr, cnt_c, totfr ) ) < 0 ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> total_freq = totfr ;",0
448,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void,0
449,<S2SV_ModStart> = v ; if <S2SV_ModEnd> ( priv ->,0
450,"<S2SV_ModStart>! efe ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) ) { udf_err ( inode -> i_sb, ""(",0
451,"<S2SV_ModStart> data ) { uint16_t status ; <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & MISTAT_BUSY",0
452,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { <S2SV_ModEnd> int n =,0
453,"<S2SV_ModStart> ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakWindowsTest"", IPV6DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakFirstTest"", IPV6DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLastTest"", IPV6DefragSturgesNovakLastTest ) ;",0
454,<S2SV_ModStart> ; if ( object_length + add_v1_record > sizeof ( new_object. data ) ) { sc_cardctl_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object ; new_object = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. length + add_v1_record > sizeof ( new_object. data ) ) { sc_cardctl_coolkey_object_t new_object ; new_object. data = malloc (,0
455,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
456,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
457,"<S2SV_ModStart> b_go ) { if ( p_enc -> fmt_in. i_size < p_enc -> fmt_in. i_size ) { msg_Err ( p_enc, ""Block <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d) <S2SV_blank> (%d)"", p_enc -> fmt_in. i_size, p_enc -> fmt_in. i_size ) ; p_enc -> fmt_in. i_size = 0 ; } else { if ( p_enc -> fmt_in. i_size < p_enc -> fmt_in. i_size ) { msg_Err ( p_enc, ""Block <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d) <S2SV_blank> (%d)"", p_enc -> fmt_in. i_size, p_enc -> fmt_in. i_size ) ; p_enc -> fmt_in. i_size = p_enc -> fmt_in. i_size ; } else { if ( p_enc -> fmt_in. i_size < p_enc -> fmt_in. i_size ) { msg_Err ( p_enc, ""Block <S2SV_blank>",0
458,"<S2SV_ModStart> bfname ) ; if ( bfname. len < 1 ) { mp_err ( log, ""invalid <S2SV_blank> filename\\n"" ) ; break ; }",0
459,"<S2SV_ModStart> 4 ) ; size_t num_properties = GETINT32 ( buf + idx ) ; idx += 4 ; CHECKINT16 ( idx, len ) ; num_properties = GETINT16 ( buf + idx ) ; idx += 2 ; CHECKINT16 ( idx, len ) ; a -> name = GETINT16 ( buf + idx ) ; idx += 2 ; if ( a -> name & GUID_EXISTS_FLAG ) { a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ; idx += sizeof ( GUID ) ; } } else { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. len = GETINT32 ( buf + idx ) ; idx += 4 ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i",0
460,"<S2SV_ModStart>! efe ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) ) { udf_err ( inode -> i_sb, ""(",0
461,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
462,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
463,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; <S2SV_ModEnd> YV12_BUFFER_CONFIG * fb <S2SV_ModStart> * fb ; <S2SV_ModEnd> return VPX_CODEC_OK ;",0
464,"<S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVER",0
465,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) )!= testlist ) { ast_error ( c, ch, ""illegal <S2SV_blank> expression <S2SV_blank> for <S2SV_blank> testlist"" ) ; return NULL ; } <S2SV_ModEnd> ch = CHILD <S2SV_ModStart> ch ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; switch ( TYPE ( CHILD ( n, 2 ) ) { case Name_kind : case Attribute_kind : case Subscript_kind : break ; default : ast_error ( c, ch, ""illegal <S2SV_blank> expression <S2SV_blank> for <S2SV_blank> augmented <S2SV_blank> assignment"" ) ; return NULL ; } ch = CHILD ( n, 3 ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; switch ( TYPE ( ch ) == testlist ) expr1 = ast_for_testlist ( c, ch ) ; else expr1 = ast_for_expr ( c, ch ) ; if (! expr1 ) return NULL ; switch ( TYPE ( ch ) == testlist ) expr2 = ast_for_testlist ( c, ch ) ; else expr2 = ast_for_expr ( c, ch ) ; if (!",0
466,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 16 ; unsigned char * mc_running_avg_y = mc_running_avg -> y_buffer + y_offset ; int mc_avg_y_stride = mc_running_avg -> y_stride ; unsigned char * running_avg_y = running_avg -> y_buffer + y_offset ; unsigned char * avg_avg_y = running_avg -> y_buffer + y_offset ; int avg_y_stride = running_avg -> y_stride ; int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; ++ i ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ; } else",0
467,"<S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; if ( ( sockPtr -> flags & NS_CONN_ENTITYTOOLONG )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; } <S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; if ( ( sockPtr -> flags & NS_CONN_OVERFLOW )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; if ( ( sockPtr -> flags & NS_CONN_OVERFLOW )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; } else { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; if ( ( sockPtr -> flags & NS_CONN_OVERFLOW )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; if ( ( sockPtr -> flags & NS_CONN_OVERFLOW )!= 0u ) { Ns_Log ( Ns_",0
468,<S2SV_ModStart> = 0 ; if ( xtregs -> cp0 >= sizeof ( xtregs_coprocessor_t ) ) return - EINVAL,0
469,<S2SV_ModStart> size ) ; # if ( ETH_SUPPORT == ENABLED ) message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; message -> destMacAddr = queueItem -> ancillary. destMacAddr ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif,0
470,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> if ( xop <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; } else { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; } <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for""",0
471,<S2SV_ModStart> int error ; spin_lock ( & EXT2_I ( inode ) -> i_mmap_lock ) ; <S2SV_ModStart> new_bh ) ; spin_unlock ( & EXT2_I ( inode ) -> i_mmap_lock ) ; <S2SV_ModStart> get_bh ( new_bh ) ; spin_lock ( & EXT2_I ( inode ) -> i_mmap_lock ) ; <S2SV_ModStart> new_bh ) ; spin_unlock ( & EXT2_I ( inode ) -> i_mmap_lock ) ;,0
472,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { <S2SV_ModEnd> return VPX_CODEC_OK ;",0
473,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image,",0
474,<S2SV_ModStart> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
475,"<S2SV_ModStart> AcquireQuantumMemory ( imsx, imsy <S2SV_ModEnd>, 1 ) <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if",0
476,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { <S2SV_ModEnd> if ( data <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; vpx_ref_frame_t * const frame = ( vpx_ref_frame_t * ) <S2SV_ModEnd> data ; YV12_BUFFER_CONFIG <S2SV_ModStart> VP9_REFFRAME sd ; vpx_copy_reference_dec <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> vp9_copy_reference_dec ( ctx <S2SV_ModEnd> -> pbi, <S2SV_ModStart> VP9_REFFRAME ) frame -> frame_type <S2SV_ModEnd>, & sd <S2SV_ModStart> return vp9_copy_reference_dec ( <S2SV_ModEnd> ctx -> pbi",0
477,"<S2SV_ModStart> i2_cur_mb_addr, i2_pic_wdin_mbs, <S2SV_ModEnd> u1_num_mbs, u1_num_mbsNby2 <S2SV_ModStart> i2_pic_wdin_mbs, i2_pic_wdin_mbs, <S2SV_ModEnd> u1_num_mbs, u1_num_mbsNby2 <S2SV_ModStart> i2_pic_wdin_mbs, i2_pic_wdin_mbs <S2SV_ModEnd>, i2_pic_wdin_mbs, <S2SV_ModStart> i2_pic_wdin_mbs, <S2SV_ModEnd> u1_num_mbsNby2, <S2SV_ModEnd> u1_num_mbsNby2, i2_pic_wdin_mbs <S2SV_ModStart> i2_pic_wdin_mbs, <S2SV_ModEnd> u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_pic_wdin_mbs, i2_pic_wdin_mbs <S2SV_ModStart> i2_pic_wdin_mbs, <S2SV_ModEnd> u1_num_mbsNby2, <S2SV_ModEnd> u1_num_mbsNby2",0
478,"<S2SV_ModStart>, u4_y_offset ; IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; <S2SV_ModStart> B_PIC ) impeg2d_dec_pnb_mb_params <S2SV_ModEnd> ( ps_dec ) <S2SV_ModStart> else impeg2d_dec_p_mb_params <S2SV_ModEnd> ( ps_dec ) <S2SV_ModStart> else impeg2d_dec_p_mb_params ( ps_dec ) ; IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; <S2SV_ModEnd> if ( ps_dec <S2SV_ModStart> == B_PIC ) impeg2d_dec_pnb_mb_params <S2SV_ModEnd> ( ps_dec ) <S2SV_ModStart> else impeg2d_dec_p_mb_params <S2SV_ModEnd> ( ps_dec ) <S2SV_ModStart> else impeg2d_dec_p_mb_params ( ps_dec ) ; IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; if ( ps_dec -> e_",0
479,"<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> const cfg = <S2SV_ModEnd> cm -> frame_bufs <S2SV_ModStart> ] ]. buf ; if ( cfg == NULL ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Missing <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> buffer <S2SV_blank> config"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = & cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; }",0
480,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
481,<S2SV_ModStart> -> mbmi ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; const int step = 1 << ( tx_size << 1 ) ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ),0
482,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst,",0
483,"<S2SV_ModStart> nrow ) { if ( _TIFFReadEncodedStripAndAllocBuffer ( tif, buf, bufsize ) < 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""TIFFReadEncodedStripAndAllocBuffer"", ""TIFFReadEncodedStripAndAllocBuffer"" ) ; return ( 0 ) ; } <S2SV_ModEnd> nrow = ( <S2SV_ModStart> img -> row_offset <S2SV_ModEnd> ) % rowsperstrip <S2SV_ModStart> ; if ( _TIFFReadEncodedStripAndAllocBuffer ( tif, buf, bufsize ) < 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""TIFFReadEncodedStripAndAllocBuffer"", ""TIFFReadEncodedStripAndAllocBuffer"" ) ; return ( 0 ) ; } buf = ( unsigned char * ) _TIFFReadEncodedStripAndAllocBuffer ( tif, bufsize, ""gtStripSeparate"" ) ; if ( buf == NULL ) { TIFFErrorExt ( tif -> tif_clientdata, ""TIFFReadEncodedStripAndAllocBuffer"", ""TIFFReadEncodedStripAndAllocBuffer"" ) ; return ( 0 ) ; }",0
484,"<S2SV_ModStart> } } } if ( TYPE ( CHILD ( n, 0 ) )!= TYPE_COMMENT ) { Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 0 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 0 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", NCH ( n ) ) ; } if ( TYPE ( CHILD ( n, 1 ) )!= TYPE_COMMENT ) { Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 1 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 1 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", NCH ( n ) ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d"", TYPE ( CHILD ( n, 2 ) ) ) ; Py_FatalError (",0
485,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
486,<S2SV_ModStart> ( num & ( <S2SV_ModEnd> 1 << (,0
487,"<S2SV_ModStart> ] ; const int x = vpx_img_plane_width ( img, plane ) ; const int y = vpx_img_plane_height ( img, plane ) ; const int y2 = vpx_img_plane_height ( img, plane ) ; const int h = vpx_img_plane_width ( img, plane ) ; const int w = ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH : ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH : ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? img -> fmt : ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH )? img -> fmt : ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH )? img -> fmt : ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH )? img -> fmt",0
488,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small",0
489,"<S2SV_ModStart> ; if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_ALGORITHM_ERROR ) ; return 0 ; }",0
490,<S2SV_ModStart> alg ) { if <S2SV_ModEnd> (! ( <S2SV_ModStart> mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! try_module_get ( THIS_MODULE ) ) { if (! try_module_get ( THIS_MODULE ) ) { if (! try_module_get ( THIS_MODULE ) ) { if (! try_module_get ( THIS_MODULE ) ) { if (! try_module_get ( THIS_MODULE ) ) { if (! module_get ( THIS_MODULE ) ) { if (! try_module_get ( THIS_MODULE ) ) { if (! try_module_get ( THIS_MODULE ) ) { if (! try_module_get ( THIS_MODULE ) ) { if (! try_module_get ( THIS_MODULE ) ) { if (! try_module_get ( THIS_MODULE ) ) { if (! try_module_get ( THIS_MODULE ) ) { if (! module_get ( THIS_MODULE ) ) { if (! module_get ( THIS_MODULE ) ) { if (! module_get ( THIS_MODULE ) ) { if (! module_get ( THIS_MODULE,0
491,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
492,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
493,"<S2SV_ModStart> sk ) ; memset ( sa, 0, sizeof ( struct sockaddr_rc ) ) ;",0
494,"<S2SV_ModStart> ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } <S2SV_ModEnd> success = parse_control_packet",0
495,<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> err_close_conn ; } mutt_socket_empty ( adata -> conn ) ;,0
496,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
497,"<S2SV_ModStart> line ) ; if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> memset ( G <S2SV_ModStart> gpsd_sock ) ; if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""CLASS\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> memset ( G <S2SV_ModStart> gpsd_sock ) ; if ( strncmp ( line, ""{\\""class\\"":\\""CLASSS\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""CLASSS\\"",\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; }",0
498,"<S2SV_ModStart>, & rlen, 0",1
499,"<S2SV_ModStart> ; read_userfile ( & slavename ) ; if ( slavename == NULL ) { syslog ( LOG_NOTICE, _ ( ""(%d) <S2SV_blank> Invalid <S2SV_blank> login <S2SV_blank> by <S2SV_blank> %s."" ), curconn -> seskey, curconn -> username ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect",0
500,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString ( name, ""__debug__"" ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } <S2SV_ModEnd> if ( full_checks <S2SV_ModStart> ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * const p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
501,<S2SV_ModStart> [ i ] && j < sizeof ( buf ),0
502,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
503,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
504,<S2SV_ModStart> ; return Qnil ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
505,"<S2SV_ModStart> -> pw ; <S2SV_ModEnd> char * pkalg <S2SV_ModStart> = NULL ; <S2SV_ModEnd> u_char * pkblob <S2SV_ModStart> ; u_char * sig <S2SV_ModEnd> ; size_t blen <S2SV_ModStart> ; if (! authctxt -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_string ( ssh, & sig, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & sig, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh,",0
506,"<S2SV_ModStart> ; uint32_t bcount ; if (! ( config -> qmode & QMODE_NO_STORE_WRAPPER ) &&! WavpackAddWrapper ( wpc, & WaveHeader, sizeof ( WaveHeader ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
507,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> entries [ tcount ]. entry = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteDataFuji"", sizeof ( MnoteFujiEntry ) *",0
508,<S2SV_ModStart> bd_addr ) { if ( interface_ready ( ) == FALSE ) return BT_STATUS_NOT_READY ;,0
509,"<S2SV_ModStart> int i ; size_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> int i ; size_t <S2SV_ModEnd> nxip = pq_getmsgint <S2SV_ModStart> 4 ) ; expect = buf -> len - buf -> cursor ; if ( expect < 0 || expect > avail ) goto bad_format ; xmin = 0 ; xmax = 0 ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax || cur > MAX_TXID ) goto bad_format ; snap -> xip [ i ] = cur ; snap -> xmin = xmin ; snap -> xmax = xmax ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format",0
510,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] =,0
511,"<S2SV_ModStart>!= RDMA_NODE_IB_CA ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; rdma_destroy_id ( cm_id ) ; return ret ; } <S2SV_ModEnd> rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n""",0
512,<S2SV_ModStart> - 1 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> = 0 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
513,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options ) { s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_ERR,",0
514,"<S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NG",0
515,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_NAME_MAX : * ( size_t * ) val = ms -> name_max ; return 0 ; case MAGIC_PARAM_ELF_PHNUM_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ;,0
516,<S2SV_ModStart> journal_t * journal ; if ( page -> mapping -> host!= ext4_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
517,<S2SV_ModStart> { trak = GF_GET_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
518,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> ; # endif memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> = '\\0' ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> strlen ( password ), pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; md5sum [ 0 ] = 0 ; init_packet ( & data, MT_PTYPE_DATA, srcmac, dstmac, sessionkey, outcounter ) ; plen = add_control_packet ( & data, MT_CPTYPE_PASSWORD, md5data, 17 ) ; plen += add_control_packet ( & data, MT_CPTYPE_USERNAME, username, strlen ( username ) ) ; plen += add_control_packet ( & data, MT_CPTYPE_TERM_TYPE, terminal, strlen ( terminal ) ) ) ; if ( is_a_tty && get_terminal_",0
519,<S2SV_ModStart> ; if ( _mibindex < _mibindex_max ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; _mibindexes [ i ] = NULL ; },0
520,"<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> bits -= 24 ; \\\n} <S2SV_ModEnd> typedef struct PCDTable <S2SV_ModStart> ) AcquireQuantumMemory ( 0x800, sizeof ( * pcd_table ) ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( CorruptImageError, ""InsufficientImageDataInFile"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( CorruptImageError, ""InsufficientImageDataInFile"", image -> filename ) ; \\\n} <S2SV_ModEnd> typedef struct PCDTable <S2SV_ModStart> ) AcquireQuantumMemory ( 0x800, sizeof ( * pcd_table ) ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( CorruptImageError, ""InsufficientImageDataInFile"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( CorruptImageError, ""InsufficientImageDataInFile"", image -> filename ) ;",0
521,"<S2SV_ModStart> ; if (! TYPE_COMMENT ( CHILD ( n, i ) ) ) { ast_error ( c, CHILD ( n, i ), ""unexpected <S2SV_blank> node"" ) ; goto error ; } <S2SV_ModEnd> i += 1 <S2SV_ModStart> case TYPE_COMMENT : if (! TYPE_COMMENT ( CHILD ( n, i ) ) ) { ast_error ( c, CHILD ( n, i ), ""unexpected <S2SV_blank> node"" ) ; goto error ; } <S2SV_ModEnd> i += 1 <S2SV_ModStart> case TYPE_COMMENT : if (! TYPE_COMMENT ( CHILD ( n, i ) ) ) { ast_error ( c, CHILD ( n, i ), ""unexpected <S2SV_blank> node"" ) ; goto error ; } <S2SV_ModEnd> i += 1 <S2SV_ModStart> case TYPE_COMMENT : if (! TYPE_COMMENT ( CHILD ( n, i ) ) ) { ast_error ( c, CHILD ( n, i ), ""unexpected <S2SV_blank> node"" ) ; goto error ; } <S2SV_ModEnd> i += 1 <S2SV_ModStart> case TYPE_COMMENT : if (! TYPE ( CHILD ( n, i ) ) ) { ast_error ( c, CHILD ( n, i ), ""unexpected <S2SV_blank> node"" ) ; goto error ; } <S2SV_ModEnd> i += 1",0
522,<S2SV_ModStart> g_assert_not_reached ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
523,"<S2SV_ModStart> -> y_buffer ; const int y_width = src_ybc -> y_width ; const int y_height = src_ybc -> y_height ; const int y_stride = dst_ybc -> y_stride ; <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> mi_col += MI_BLOCK_SIZE <S2SV_ModEnd> ) { int <S2SV_ModStart> dummy_rate ; int64_t dummy_dist ; MACROBLOCK * x = & cpi -> mb ; if ( sf -> adaptive_pred_interp_filter ) { for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 16, num_4x4_blk ) ; for ( x -> sb_index = 0 ; x -> mb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index < 16 / num_4x4_blk",0
525,"<S2SV_ModStart> obj_tlen ; int hexdump ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; tptr = pptr ; ND_TCHECK ( * tptr ) ; if ( tlen < sizeof ( struct lmp_common_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", tlen ) ) ; return ; } if ( tlen < sizeof ( struct lmp_object_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", tlen ) ) ; return ; } if ( tlen < sizeof ( struct lmp_object_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", tlen ) ) ) ; return ; } if ( tlen < sizeof ( struct lmp_object_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", t",0
526,"<S2SV_ModStart> MB_MODE_INFO * mbmi <S2SV_ModEnd>, const int_mv <S2SV_ModStart> * ref = <S2SV_ModEnd> mbmi -> ref_mvs <S2SV_ModStart> i ) { MV diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col } ; vp9_inc_mv ( & diff, counts ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
527,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
528,"<S2SV_ModStart> ; if ( pskb_expand_head ( skb_out, size - skb -> len, GFP_ATOMIC ) < 0 ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; }",0
529,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
530,"<S2SV_ModStart> return ; DEBUGMSGTL ( ( ""init_mib"", ""Seen <S2SV_blank> MIBDIRS: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> dirs <S2SV_blank>...\\n"", env_var ) ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strdup ( netsnmp_getenv ( ""MIBFILES"" ) ) ; env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( env_var ) { add_mibfile ( env_var, NULL, NULL ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( env_var ) { add_mibfile ( env_var, NULL, NULL, NULL ) ; }",0
531,"<S2SV_ModStart> O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } <S2SV_ModStart> 1 ; } if ( write ( fd, & dev, sizeof ( dev ) ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } if ( write ( fd, & dev, sizeof ( dev ) <S2SV_ModEnd> ) < 0 <S2SV_ModStart> 1 ; } fd = open ( uinput_dev_path [ x ], O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; return - 1 ; } if ( write ( fd, & dev, sizeof ( dev ) ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; return - 1 ; } fd = open ( uinput_dev_path [ x ], O_RD",0
532,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
533,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
534,<S2SV_ModStart> <S2SV_null> <S2SV_null> static krb5_error_code <S2SV_ModEnd> iakerb_alloc_context ( iakerb_ctx_id_t <S2SV_ModStart> ; code = krb5_gss_init_context <S2SV_ModEnd> ( & ctx,0
535,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
536,<S2SV_ModStart>!= START_CODE_PREFIX ) { if ( ps_stream -> u4_offset < ps_stream -> u4_offset ) { ps_stream -> u4_offset -= ps_stream -> u4_offset ; break ; } <S2SV_ModEnd> u4_start_code = impeg2d_bit_stream_nxt,0
537,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = kstrtoul ( string, 0, & ipc_count ) ; if ( ret < 0 ) goto out ; ret = kstrtoul ( string, 0, & ipc_duration_ms ) ; if ( ret < 0 ) goto out ; ret = kstrtoul ( string, 0, & ipc_count ) ; if ( ret < 0 ) goto out ; ret = kstrtoul ( string, 0, & ipc_count ) ; if ( ret < 0 ) goto out ; ret = kstrtoul ( string, 0, & ipc_count ) ; if ( ret < 0 ) goto out ; ret = kstrtoul ( string, 0, & ipc_count ) ; if ( ret < 0 ) goto out ; ret = kstrtoul ( string, 0, & ipc_count ) ; if ( ret < 0 ) goto out ; ret = kstrtoul ( string, 0, & ipc_count ) ; if ( ret < 0 ) goto out ; ret = kstrtoul ( string, 0, & ipc_count ) ; if (",0
538,"<S2SV_ModStart> ; imethod = g_new0 ( MonoMethodInflated, count ) ; if ( imethod == NULL ) { g_deprecated ( ""use <S2SV_blank> mono_reflection_bind_generic_method_parameters <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst",0
539,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; unsigned long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> copy_from_user ( buf <S2SV_ModEnd>, buffer, <S2SV_ModStart> count ) ) return - EFAULT <S2SV_ModEnd> ; tmp =",0
540,"<S2SV_ModStart> char * last_elem = NULL, * <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM"", 8 ) == 0 && ( len = 9 )!= 0 ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 11 )!= 0 ) ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == '/' || ( is_path && name [ len ] == '/' || ( is_path && name [ len ] == '/' || ( is_path && name [ len ] == '/' || ( is_path && name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) ) ) ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? NULL : l -> l_origin ) : _dl_platform ) ; if ( repl!= NULL && repl!= ( const char *",0
541,"<S2SV_ModStart> decContainer_t ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; }",0
542,"<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_init = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt_init ) opt_init = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if (! opt_init ) opt_init = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if (! opt_init ) opt_init = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt_init = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if (! opt_init ) opt_init = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if (! opt_init ) opt_init = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) )",0
543,"<S2SV_ModStart> drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen < sizeof ( struct iphdr ) ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt ->",0
544,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
545,"<S2SV_ModStart> goto errout ; if ( info -> end - info -> begin < info -> grouping || info -> end - info -> grouping < info -> grouping ) { vorbis_info_residue_err ( info, vi, ( vorbis_info_residue * ) ( ( ( vorbis_info_residue * ) ( ( ( vorbis_info_residue ) ( ( ( vorbis_info_residue ) ( ( ( vorbis_info_residue ) ( ( ( vorbis_info_residue ) ( ( ( vorbis_info_residue ) ( ( ( vorbis_info_residue ) ( ( ( vorbis_info_residue ) ( ( vorbis_info_residue * ) ( ( ( vorbis_info_residue * ) ( ( ( vorbis_info_residue ) ( ( ( vorbis_residue ) ( ( ( vorbis_residue ) ( ( ( vorbis_residue ) ( ( ( vorbis_residue ) ( ( ( vorbis_residue ) ( ( ( vorbis_residue ) ( ( ( vorbis_residue ) ( ( ( vorbis_residue ) ( (",0
546,"<S2SV_ModStart> if (! js_doregexec ( J, <S2SV_ModEnd> re -> prog",1
547,"<S2SV_ModStart> break ; } if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; }",0
548,"<S2SV_ModStart> ; krb5_key_data * key_data = k5_calloc ( n_key_data, sizeof ( * key_data ), & err ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_kvno!= currkvno ) { err = ENOMEM ; goto cleanup ; } key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents [ 1 ] = k5_malloc ( sizeof ( struct berval ), & err ) ; key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_length [ 1 ]",0
549,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
550,<S2SV_ModStart> ] ) ; sqlite3_int64 <S2SV_ModEnd> nByte = sqlite3_value_bytes,0
551,<S2SV_ModStart> filp ) { if ( IS_ERR ( filp ) ) return PTR_ERR ( filp ) ;,0
552,"<S2SV_ModStart> expr_ty iter, type_comment * type_comment, <S2SV_ModStart> = body ; p -> v. AsyncFor. type_comment = type_comment",0
553,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> mi_sort_index ( MI_CHECK <S2SV_ModStart>, name ) ; if ( param -> testflag & T_SILENT ) { mi_check_print_error ( param, ""Can\'t <S2SV_blank> create <S2SV_blank> tempfile: <S2SV_blank> \'%s\'"", param -> temp_filename ) ; DBUG_RETURN ( - 1 ) ; } if ( param -> testflag & T_SILENT ) { mi_check_print_error ( param, ""Can\'t <S2SV_blank> create <S2SV_blank> tempfile: <S2SV_blank> \'%s\'"", param -> temp_filename ) ; DBUG_RETURN ( - 1 ) ; }",0
554,"<S2SV_ModStart> } } return rcu_dereference_protected ( inet6_sk ( sk ) -> inet_opt, sock_owned_by_user ( sk ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
555,"<S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR",0
556,"<S2SV_ModStart> UINT error ; # ifdef WITH_DEBUG_RDPEI WLog_DBG ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" PRIu16 "" <S2SV_blank> (%s) <S2SV_blank> length: <S2SV_blank> %"" PRIu32 """", eventId, rdpei_eventid_string ( eventId ), pduLength",0
557,"<S2SV_ModStart> ) ; } if ( pData -> socket == NULL ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed: <S2SV_blank> %s"", pData -> description ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; }",0
558,"<S2SV_ModStart> np ) ; struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> daddr ) ; <S2SV_ModEnd> SCTP_INC_STATS ( sock_net <S2SV_ModStart> SCTP_MIB_OUTSCTPPACKS ) ; rcu_read_lock ( ) ; <S2SV_ModStart> = 1 ; rcu_read_unlock ( ) ;",0
559,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
560,"<S2SV_ModStart> goto END_OF_READING ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
561,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> ; WLog_DBG ( TAG <S2SV_ModEnd>, ""RDP_NEG_FAILURE"" ) <S2SV_ModStart> = NEGO_STATE_FAIL ; return TRUE ;",0
562,<S2SV_ModStart> = 0 ; bn_t t ; bn_null ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_new ( t,0
563,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
564,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
565,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
566,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> j ] [ <S2SV_ModEnd> i ] ;,0
567,"<S2SV_ModStart> { token ++ ; } op -> operands [ operand ]. type = ARM_UNDEFINED ; op -> operands [ operand ]. reg_type = ARM_REG64 ; op -> operands [ operand ]. reg = r_num_math ( NULL, token + 1 ) ; if ( op -> operands [ operand ]. reg > 31 ) { return false ; } op -> operands [ operand ]. type = ARM_GPR ; op -> operands [ operand ]. reg = r_num_math ( NULL, token + 1 ) ; if ( op -> operands [ operand ]. reg > 31 ) { return false ; } op -> operands [ operand ]. reg = r_num_math ( NULL, token + 1 ) ; if ( op -> operands [ operand ]. reg > 31 ) { return false ; } op -> operands [ operand ]. type = ARM_GPR ; op -> operands [ operand ]. reg_type = ARM_REG64 ; op -> operands [ operand ]. reg = r_num_math ( NULL, token + 1 ) ; if ( op -> operands [ operand ]. reg > 31 ) { return false ; }",0
568,"<S2SV_ModStart> cpi ) { VP9_COMMON * const cm = & cpi -> td. cm ; <S2SV_ModStart> -> act_zbin_adj = 0 <S2SV_ModEnd> ; vp9_setup_src_planes ( <S2SV_ModStart> ; vp9_setup_pre_planes ( xd, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_dst_planes ( xd, get_ref_frame_new_buffer ( cm ), 0, 0 ) ; vp9_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; xd -> mi [ 0 ] -> mbmi. mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_",0
569,"<S2SV_ModStart> ( hp ) ; if ( retval == 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; }",0
570,"<S2SV_ModStart> EOFOp 0x07 <S2SV_ModEnd> char magick [ <S2SV_ModStart> ( image, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( image, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( image, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( image, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( image, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( image, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( image, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( image, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( image, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( image, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( image, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( image, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( unsigned char, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( unsigned char, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( unsigned char, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( unsigned char, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( unsigned char, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( unsigned char, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( unsigned char, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( unsigned char, 12 <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( unsigned char, 12 <S2SV_ModEnd>, unsigned char",0
571,"<S2SV_ModStart> len ) ; if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len + sizeof ( tETH_HDR ) ) ; return - 1 ; } <S2SV_ModStart> ) ) ; if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len + sizeof ( tETH_HDR ) ) ; return - 1 ; }",0
572,<S2SV_ModStart> u1_field_pic_flag ) ; if ( ps_prev_poc -> i4_pic_order_cnt_lsb!= ps_cur_poc -> i4_pic_order_cnt_lsb || ps_prev_poc -> i4_pic_order_cnt_msb!= ps_cur_poc -> i4_pic_order_cnt_msb ) { ps_dec -> ps_cur_slice -> i4_delta_pic_order_cnt_lsb = ps_cur_poc -> i4_pic_order_cnt_lsb ; ps_dec -> ps_cur_slice -> i4_pic_order_cnt_msb = ps_cur_poc -> i4_pic_order_cnt_msb ; ps_dec -> ps_cur_slice -> i4_pic_order_cnt_lsb = ps_cur_poc -> i4_pic_order_cnt_lsb ; ps_dec -> ps_cur_slice -> i4_pic_order_cnt_msb = ps_cur_poc -> i4_pic_order_cnt_ms,0
573,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; struct pci_dev <S2SV_ModStart> * pdev ; <S2SV_ModEnd> int port ; <S2SV_ModStart> return PTR_ERR ( karg ) <S2SV_ModEnd> ; } if <S2SV_ModStart> karg ) ; kfree ( karg ) ;",0
574,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
575,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
576,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ; u64 irq_time ; if ( rq -> skip_clock_update ) return <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
577,"<S2SV_ModStart> } else { <S2SV_ModEnd> raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModStart> } else { <S2SV_ModEnd> raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModStart> } else { <S2SV_ModEnd> raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModStart> } else { <S2SV_ModEnd> raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModStart> } else { <S2SV_ModEnd> raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s""",0
578,"<S2SV_ModStart> ; if ( datao > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { exif_log ( en -> log, EXIF_LOG_NO_MEMORY, ""ExifMnoteDataFuji"", sizeof ( MnoteFujiEntry ) * c ) ; return ; } exif_log ( en -> log, EXIF_LOG_CODE_NO_MEMORY, ""ExifMnoteDataFuji""",0
579,"<S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> } else { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> } else { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, procName,",0
580,"<S2SV_ModStart> flags ) { <S2SV_ModEnd> int dir_has_key, <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> d_lock ) ; <S2SV_ModEnd> return 1 ;",0
581,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> service_free ( & <S2SV_ModStart> servname ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
582,<S2SV_ModStart> ; context. curX = i -> posX ; context. curY = i -> posY ; # ifdef NGIFLIB_HIGHBITDEPTH if ( ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) && ( ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) && ( ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) && ( ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) && ( ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) && ( ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) && ( ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) && ( ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) && ( ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) && ( ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) && ( ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) &&,0
583,"<S2SV_ModStart> 4 ) ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, len - op -> size, cpu ) ;",0
584,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [",0
585,<S2SV_ModStart> void ) { if ( mnemonic [ strlen ( mnemonic ) - 1 ] == '\\0' ) { mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; },0
586,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT7 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT8 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT9 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT10 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT11 <S2SV_ModEnd> ) ) ;",0
587,"<S2SV_ModStart> == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
588,"<S2SV_ModStart> ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" <S2SV_ModEnd> ) ; goto",0
589,<S2SV_ModStart> { WORD32 i <S2SV_ModEnd> ; WORD32 st_rps_idx <S2SV_ModStart> st_rps_idx ) { ps_dpb_mgr -> ai4_num_st_curr_before = MAX_DPB_SIZE ; ps_dpb_mgr -> ai4_num_st_curr_after = MAX_DPB_SIZE ; ps_dpb_mgr -> ai4_num_st_curr_before = MAX_DPB_SIZE ; ps_dpb_mgr -> ai4_num_st_curr_before = MAX_DPB_SIZE ; ps_dpb_mgr -> ai4_num_st_curr_after = MAX_DPB_SIZE ; ps_dpb_mgr -> ai4_num_st_curr_before = MAX_DPB_SIZE ; ps_dpb_mgr -> ai4_num_st_curr_after = MAX_DPB_SIZE ; ps_dpb_mgr -> ai4_num_st_curr_after = MAX_DPB_SIZE ; ps_dpb_mgr -> ai4_num_st_curr_before = MAX_DPB_SIZE ; ps_dpb_,0
590,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart> child ) { <S2SV_ModEnd> ++ numentries ; <S2SV_ModStart> ++ numentries ; <S2SV_ModEnd> child = child <S2SV_ModStart> next ; } out = ( char * ) cJSON_malloc ( len ) ; if (! out ) { cJSON_free ( entries ) ; cJSON_free ( names ) ; cJSON_free ( entries ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> fail ) { for ( i = 0 ; i < numentries ; ++ i ) { if ( names [ i ] ) cJSON_free ( names [ i ] ) ; cJSON_free ( names ) ; cJSON_free ( entries ) ; cJSON_free ( entries ) ; return 0 ; } <S2SV_ModEnd> if ( fail <S2SV_ModStart> 1 ; } out = ( char * ) cJSON_malloc ( len ) ; if (! out ) { cJSON_free ( entries ) ; cJSON_free ( names ) ; cJSON_free ( entries ) ; cJSON_free ( entries ) ; cJSON_free ( names ) ; cJSON_free ( entries ) ; cJSON_free ( entries ) ; cJSON_free (,0
591,"<S2SV_ModStart> int tagval, struct stream packet, <S2SV_ModStart> length ) { struct stream packet = * s ; if (! s_check ( s ) ) { rdp_protocol_error ( ""ber_parse_header(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; rdp_protocol_error ( ""ber_parse_header(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; return False ; } if (! s_check ( s ) ) { rdp_protocol_error ( ""ber_parse_header(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
592,<S2SV_ModStart> ( sk ) ; mutex_lock ( & sk -> sk_wmem_lock ) ; <S2SV_ModStart>!= sk ) { mutex_unlock ( & sk -> sk_wmem_lock ) ; <S2SV_ModStart> 0 ; } <S2SV_ModEnd> sock_poll_wait ( file <S2SV_ModStart> wait ) ; mutex_unlock ( & sk -> sk_wmem_lock ) ; <S2SV_ModEnd> sock_put ( other,0
593,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> w, h ) ;",0
594,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> * ioc ; mutex_lock ( & task -> io_context_mutex ) ; ioc = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context ; task -> <S2SV_ModEnd> io_context = NULL <S2SV_ModStart> = NULL ; mutex_unlock ( & task -> io_context_mutex ) ; <S2SV_ModEnd> if ( atomic_dec_and_test <S2SV_ModStart> nr_tasks ) ) { if ( ioc -> aic -> exit ) ioc -> aic -> exit ( ioc -> aic ) ; cfq_exit ( ioc ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
595,<S2SV_ModStart> = 0 ; if ( xtregs -> cp0 >= sizeof ( xtregs_coprocessor_t ) ) return - EINVAL,0
596,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return GSS_S_DEFECTIVE_TOKEN ; <S2SV_ModStart> ) KRB5_BAD_MSIZE ; <S2SV_ModEnd> return GSS_S_DEFECTIVE_TOKEN ; <S2SV_ModStart> ) KRB5_BAD_MSIZE ; <S2SV_ModEnd> return GSS_S_DEFECTIVE_TOKEN ;,0
597,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { <S2SV_ModEnd> vp9_ref_frame_t * frame <S2SV_ModStart> vp9_ref_frame_t * ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL ) { <S2SV_ModEnd> vp9_get_reference_enc ( ctx <S2SV_ModStart> idx, & frame -> enc <S2SV_ModEnd> ) ; yuvconfig2image",0
598,<S2SV_ModStart> plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { ret = - EPERM ; break ; },0
599,"<S2SV_ModStart> * info, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart>! rep_quick && init_io_cache ( & info -> read_cache, info -> dfile, ( uint ) param -> read_buffer_length, READ_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, READ_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_",0
600,"<S2SV_ModStart> } ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN uECC_word_t carry ; wordcount_t num_words = curve -> num_words ; bitcount_t num_n_bits = curve -> num_n_bits ; if ( uECC_vli_isZero ( k, num_words ) ) { return 0 ; } carry = regularize_k ( k, tmp, s, curve ) ; if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC",0
601,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
602,<S2SV_ModStart> buf ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
603,"<S2SV_ModStart> { while ( cp < tp ) { int cval = 0, meta = 0 ; const char hex [ ] = { ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEf",0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
605,"<S2SV_ModStart> lined ; PIX * pixc, * pixm, * pixg, * pixd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if ( pixc == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; pixm = pixFewColorsOctcubeQuant1 ( pixs, level ) ; pixg = pixGetColormap ( pixc ) ; pixg = pixGetColormap ( pixc ) ; ncolors = pixcmapGetCount ( cmap ) ; cmapd = pixcmapCreate ( 8 ) ; lut = ( l_int32 * ) LEPT_CALLOC ( 256, sizeof ( l_int32 ) ) ; for ( j = 0 ; j < w ; j ++ ) lut [ j ] = ( l_int32 ) LEPT_CALLOC ( 256, sizeof ( l_int32 ) ) ; for ( j = 0 ; j < w ; j ++ ) lut [ j ] = ( l_int32 ) LEPT_CALLOC ( 256, sizeof ( l_int32 ) ) ; for ( j = 0 ; j < w ; j ++ )",0
606,<S2SV_ModStart> ; v_fn_ptr. <S2SV_ModEnd> mv = vp8_mse16x16,0
607,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
608,"<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> -> count ; for ( idx = 0 ; idx < count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ;",0
609,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> = overhead ; if ( bson_size ( bsons [ 0 ] ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; },0
610,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_response ( rdpNego <S2SV_ModStart> NEGO_STATE_FAIL ; return FALSE <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;,1
611,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; i = active_best_quality ; do { const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } else if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb",0
612,<S2SV_ModStart> value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
613,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
614,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart
615,"<S2SV_ModStart> TX_SIZE tx_size, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> plane ] ; <S2SV_ModEnd> DECLARE_ALIGNED_ARRAY ( 16 <S2SV_ModStart> uint8_t, left_col, 64 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; uint8_t * const above_row = above_data + 16 ; const int bs = 4 << pd -> subsampling_x ; if ( pd -> subsampling_y ) { for ( i = 0 ; i < bs ; ++ i ) left_col [ i ] = ref [ i * ref_stride - 1 ] ; for ( ; i < bs ; ++ i ) left_col [ i ] = ref [ i * ref_stride - 1 ] ; for ( ; i < bs ; ++ i ) left_col [ i ] = ref [ i * ref_stride - 1 ] ; for ( ; i < bs ; ++ i ) left_col [ i ] = ref [ i * ref_stride - 1 ] ; for ( ; i < bs ; ++ i ) left_col [ i ] = ref [ i * ref_stride - 1 ] ;",0
616,"<S2SV_ModStart> } else { if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern: <S2SV_blank> pattern <S2SV_blank> is <S2SV_blank> empty\\n"" ) ; goto error ; } <S2SV_ModStart> } else { if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern: <S2SV_blank> pattern <S2SV_blank> is <S2SV_blank> empty\\n"" ) ; goto error ; } <S2SV_ModStart> } else { if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern: <S2SV_blank> pattern <S2SV_blank> is <S2SV_blank> empty\\n"" ) ; goto error ; }",0
617,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
618,"<S2SV_ModStart> BUG ( ) ; if (! thresholds -> primary ) { mutex_unlock ( & memcg -> thresholds_lock ) ; return ; } <S2SV_ModEnd> usage = mem_cgroup_usage <S2SV_ModStart> ( memcg, type == _MEMSWAP ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; mutex_unlock ( & memcg -> thresholds_lock ) ; return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
619,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ion_handle * <S2SV_ModEnd> ion_handle_get_by_id ( struct <S2SV_ModStart> lock ) ; mutex_lock ( & client -> lock ) ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> lock ) ; mutex_unlock ( & client -> lock ) ; return handle <S2SV_ModEnd> ; } <S2SV_null>",0
620,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> -> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> show_frame ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
621,"<S2SV_ModStart> parsetime_error ) ; if ( strchr ( parsetime_error, '\\0' ) ) { <S2SV_ModEnd> parsetime_error = strchr <S2SV_ModStart> parsetime_error ) ; if ( strchr ( parsetime_error, '\\0' ) ) { <S2SV_ModEnd> parsetime_error = strchr <S2SV_ModStart> parsetime_error = strchr ( parsetime_error, '\\0' ) ; if ( strchr ( parsetime_error, '\\0' ) ) { parsetime_error = strchr ( parsetime_error, '\\0' ) ; } else { parsetime_error = strchr ( parsetime_error, '\\0' ) ; if ( strchr ( parsetime_error, '\\0' ) ) { <S2SV_ModEnd> parsetime_error = strchr <S2SV_ModStart> parsetime_error = strchr ( parsetime_error, '\\0' ) ; if ( strchr ( parsetime_error, '\\0' ) ) { parsetime_error = strchr ( parsetime_error, '\\0' ) ; } else { parsetime_error = strchr ( parsetime_error, '\\0'",0
622,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
623,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ;",0
624,<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd ->,0
625,"<S2SV_ModStart> error ; uint16_t nextPacket <S2SV_ModEnd> ; uint32_t status <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( uint8_t ) ) ; nextPacket = letoh16 ( nextPacket ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!=",0
626,<S2SV_ModStart> == 0x01 ) { if ( i >= gemsafe_cert_max ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_INTERNAL ) return SC_ERROR_INTERNAL ; } <S2SV_ModStart> == 0x01 ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_INTERNAL ) return SC_ERROR_INTERNAL ; } },0
627,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
628,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE klass, VALUE * argv, VALUE klass, VALUE content ) { VALUE schema ; xmlSchemaParserCtxtPtr ctx = xmlSchemaNewMemParserCtxt ( argc, argv ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; schema = xmlSchemaParse ( ctx ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher",0
629,"<S2SV_ModStart> ] ) ; config_arg = strchr ( config_opt,'<S2SV_blank>') ; if ( strlen ( config_arg ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option <S2SV_blank> line"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_arg ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option <S2SV_blank> line"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_arg ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option <S2SV_blank> line"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_arg ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option <S2SV_blank> line"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_arg ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option <S2SV_blank> line"" ) ; print_syntax ( ) ; return 1 ; }",0
630,"<S2SV_ModStart> / 2 ] ; memcpy <S2SV_ModEnd> ( out, <S2SV_ModStart> / 2 ] ; memcpy <S2SV_ModEnd> ( out + <S2SV_ModStart> / 2 ] ; memcpy <S2SV_ModEnd> ( out +",0
631,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
632,<S2SV_ModStart> fanout_mutex ) ; if ( id >= PACKET_FANOUT_MAX ) { err = - EINVAL ; goto out ; } <S2SV_ModEnd> if (!,0
633,<S2SV_ModStart> ) ; <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> pending ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
634,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int utf8s_to_utf16s ( const u8 * s, size_t <S2SV_ModEnd> len, wchar_t <S2SV_ModStart> * s, size_t <S2SV_ModEnd> len, wchar_t <S2SV_ModStart> - EINVAL ; op [ size - 1 ] = ( wchar_t ) <S2SV_ModEnd> SURROGATE_PAIR | SURROGATE_LOW <S2SV_ModStart> SURROGATE_BITS ) ; op [ size - 1 ] = <S2SV_ModEnd> ( wchar_t ) <S2SV_ModStart> ( wchar_t ) <S2SV_ModEnd> SURROGATE_PAIR | SURROGATE_LOW <S2SV_ModStart> ( wchar_t ) <S2SV_ModEnd> SURROGATE_LOW | ( <S2SV_ModStart> ( wchar_t ) <S2SV_ModEnd> SURROGATE_PAIR | SURROGATE_LOW <S2SV_ModStart> SURROGATE_PAIR | SURROGATE_LOW | <S2SV_ModEnd> ( ( u <S2SV_ModStart> & SURROGATE_BITS ) <S2SV_ModEnd> ) ; }",0
635,"<S2SV_ModStart> EPROTONOSUPPORT ) { crm_trace ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> register_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st",0
636,<S2SV_ModStart> -> nicContext ; if ( ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXFHSR_RXRF | KSZ8851_RXFHSR_RXCE <S2SV_ModEnd> ) )!= <S2SV_ModStart>!= 0 ) { if ( ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXRF | KSZ8851_RXCE ) )!= 0 ) { if ( ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXRF | KSZ8851_RXCE ) )!= 0 ) { if ( ( status & ( KSZ8851_RXFH,0
637,"<S2SV_ModStart> const node * n, const asdl_seq * decorator_seq <S2SV_ModEnd>, int is_async <S2SV_ModStart> is_async ) { const identifier name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 2 ) ; if (! type_comment ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 3 ) ) == TYPE_COMMENT ) type_comment = NULL ; body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; type_comment = NULL ; if (! type_comment && NCH ( CHILD ( n, name_i + 3 ) ) > 1 ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3 ) ) ; if (! type_comment )",0
638,"<S2SV_ModStart> ; pgd = find_pgd ( mm, 0xA0000 ) ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pud = pud_offset ( pud, 0xA0000 ) ; if ( pud_none_or_clear_bad ( pud ) ) goto out ; pmd = pmd_offset ( pmd, 0xA0000 ) ; split_huge_page_pmd ( mm, pmd ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
639,"<S2SV_ModStart> ; } } sn_coap_protocol_malloc_copy ( handle, <S2SV_ModEnd> dst_coap_msg_ptr -> token_ptr <S2SV_ModStart> dst_coap_msg_ptr -> token_ptr, <S2SV_ModEnd> dst_coap_msg_ptr -> token_len <S2SV_ModStart> ; } sn_coap_protocol_malloc_copy ( handle, <S2SV_ModEnd> dst_coap_msg_ptr -> token_ptr <S2SV_ModStart> dst_coap_msg_ptr -> token_len ) ; if ( sn_coap_protocol_malloc_copy ( handle, <S2SV_ModEnd> dst_coap_msg_ptr -> token_ptr <S2SV_ModStart> dst_coap_msg_ptr -> token_ptr, <S2SV_ModEnd> dst_coap_msg_ptr -> token_len <S2SV_ModStart> ; } sn_coap_protocol_malloc_copy ( handle, <S2SV_ModEnd> dst_coap_msg_ptr -> token_ptr <S2SV_ModStart> dst_coap_msg_ptr -> token_len ) ; if ( sn_coap_protocol_malloc_copy ( handle, <S2SV_ModEnd> dst_coap_msg_ptr -> token_ptr <S2SV_ModStart> dst_coap_msg_ptr -> token_ptr, <S2SV_ModEnd> dst_coap_msg",0
640,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> IndexPacket index ; <S2SV_ModStart> = MaxHashTable ; \\\n} <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
641,"<S2SV_ModStart> bt_remote_bdaddr ) ; if ( bdaddr_is_invalid ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> invalid <S2SV_blank> address <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
642,"<S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; } } # else for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { if ( ( RAW ( row, col ) > 4098 && col < width ) derror ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW",0
643,"<S2SV_ModStart> ; if ( nl ) { struct dm_dev * dev = dm_disk ( hc -> md ) ; if ( dev -> bd_dev!= dev -> bd_dev ) { dm_ioctl_set_error ( filp, DM_ERR, ERR_PTR ( - EINVAL ) ) ; goto out ; } <S2SV_ModStart> len < needed ) { dm_ioctl_set_error ( filp, DM_ERR, ERR_PTR ( - EIO ) ) ; goto out ; } for ( i = 0 ; i < NUM_BUCKETS ; i ++ ) { struct dm_disk * disk = dm_disk ( hc -> md ) ; nl = align_ptr ( nl -> name + strlen ( hc -> name ) + 1 ) ; event_nr = align_ptr ( nl -> name + strlen ( hc -> name ) + 1 ) ; if ( len < needed ) { dm_ioctl_set_error ( filp, DM_ERR, ERR_PTR ( - EIO ) ) ; goto out ; } if ( len < needed ) { dm_ioctl_set_error ( filp, DM_ERR, ERR_PTR ( - EIO ) ) ;",0
644,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
645,<S2SV_ModStart> bfqq ) bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
646,<S2SV_ModStart> += PRIMARY_DRAWING_ORDER_FIELD_BYTES [ <S2SV_ModEnd> orderInfo -> orderType,0
647,<S2SV_ModStart> if (! ( flags & RENAME_EXCHANGE ) &&! ( flags & RENAME_NOREPLACE ) ) { if (! ( flags & RENAME_EXCHANGE ) &&! ( flags & RENAME_NOREPLACE ) ) { if (! ( flags & RENAME_EXCHANGE ) &&! ( flags & RENAME_NOREPLACE ) ) { err = - EPERM ; goto out ; } } else { if (! ( flags & RENAME_EXCHANGE ) &&! ( flags & RENAME_NOREPLACE ) &&! ( flags & RENAME_NOREPLACE ) ) { if (! ( flags & RENAME_EXCHANGE ) &&! ( flags & RENAME_NOREPLACE ) ) { if (! ( flags & RENAME_EXCHANGE ) &&! ( flags & RENAME_NOREPLACE ) ) { err = - EPERM ; goto out ; } } else { if (! ( flags & RENAME_NOREPLACE ) &&! ( flags & RENAME_NOREPLACE ) ) ) { err = - EPERM ; goto out ; } } else { if (! ( flags & RENAME_NOREPLACE ) &&! ( flags & RENAME_NOREPLACE ) ),0
648,"<S2SV_ModStart> int plane ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
649,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> -> e_mbd ; if ( xd -> mi [ 0 ] -> mbmi. sb_type!= bsize ) { vp9_pick_inter_mode ( cpi, x, <S2SV_ModEnd> tile, mi_row <S2SV_ModStart> mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } <S2SV_ModEnd> duplicate_mode_info_in_sb ( cm",0
650,<S2SV_ModStart> = NULL ; if ( reader. superblock == NULL ) { * err = EINVAL ; return NULL ; },0
651,<S2SV_ModStart> ReadBlobLSBShort ( image ) ; pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL,0
652,"<S2SV_ModStart> = 1 ; memset ( pMap -> ranges, 0, sizeof ( MappedRange ) ) ;",0
653,<S2SV_ModStart> ; if ( be32_to_cpu ( dip -> di_namelen ) > mp -> m_sb. sb_inodes || be32_to_cpu ( dip -> di_rmtblks ) > mp -> m_sb. sb_inodes || be16_to_cpu ( dip -> di_rmtblks ) > mp -> m_sb. sb_inodes || be32_to_cpu ( dip -> di_anextents ) > mp -> m_sb. sb_inodes || be32_to_cpu ( dip -> di_anextents ) ) return fa ; if ( mode && be16_to_cpu ( dip -> di_rmtblks ) > mp -> m_sb. sb_inodes || be16_to_cpu ( dip -> di_rmtblks ) > mp -> m_sb. sb_inodes || be32_to_cpu ( dip -> di_anextents ) + be16_to_cpu ( dip -> di_anextents ) + be16_to_cpu ( dip -> di_anextents ) > mp -> m_sb. sb_inodesize ) ),0
654,"<S2SV_ModStart> ; if ( ( ( flags & ( VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF ) ) && ( ( flags & ( VP8_EFLAG_FORCE_GF | VP8_EFLAG_FORCE_ARF ) ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( ( ( flags & ( VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF ) ) && ( ( flags & ( VP8_EFLAG_FORCE_GF | VP8_EFLAG_FORCE_ARF ) ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) && ( flags &",0
655,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
656,<S2SV_ModStart> event ) ; WARN_ON_ONCE (! swhash -> online ) ; <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
657,"<S2SV_ModStart>, const u_char <S2SV_ModEnd> * pptr, <S2SV_ModStart> len ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; }",0
658,"<S2SV_ModStart> ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'40%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'40%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>""",0
659,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
660,"<S2SV_ModStart> ( tokbuf, sizeof ( tokbuf ) <S2SV_ModEnd>, ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"", <S2SV_ModStart> ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ) ; snprintf ( tokbuf, sizeof ( tokbuf ) <S2SV_ModEnd>, ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"", <S2SV_ModStart> ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ) ; snprintf ( tokbuf, sizeof ( tokbuf ), ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ) ; snprintf ( tokbuf, sizeof ( tokbuf ), ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap",0
661,"<S2SV_ModStart> iad_num ++ ; if ( iad_num > USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; } <S2SV_ModStart> iad_num ++ ; if ( iad_num > USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; }",0
662,"<S2SV_ModStart> ; if ( info -> count < 1 ) return - EINVAL ; access = info -> access == 0? SNDRV_CTL_ELEM_ACCESS_READWRITE : ( info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ) ; if ( replace ) access = info -> access == 0? SNDRV_CTL_ELEM_ACCESS_READWRITE : ( info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ) ; info -> id. numid = 0 ; memset ( & kctl, 0, sizeof ( kctl ) ) ; memcpy ( & kctl, & info -> id, sizeof ( info -> id ) ) ; memcpy ( & kctl, & info -> id, sizeof ( info -> id ) ) ; mem",0
663,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
664,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
665,"<S2SV_ModStart> 16 ) ; for ( mode = DC_PRED ; mode <= TM_PRED ; mode ++ ) { vp8_build_intra_predictors_mby_s ( xd, x -> rdmult, x -> rddiv, rate, distortion ) ; distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; } for ( mode = TM_PRED ; mode <= TM_PRED ; mode ++ ) { vp8_build_intra_predictors_mby_s ( xd, x -> rdmult, x -> rddiv, rate, distortion ) ; distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ mode ] ; } for ( mode = DC_PRED ; mode <= TM_PRED ; mode ++ ) { vp8_build_intra_predictors_mby_s ( xd, x -> rdmult, x -> rddiv, rate, distortion ) ;",0
666,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 ) ; interface -> macAddr. w [ 0 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR2 ) ; interface -> macAddr. w [ 1 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR3 ) ; interface -> macAddr. w [ 2 ] = letoh16 ( temp ) ; macAddrToEui64 ( & interface -> macAddr, & interface -> eui64 ) ; } else { temp = htole16 ( interface -> macAddr. w [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR1, temp ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR2, temp",0
667,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; <S2SV_ModStart> = strlen ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> = 0 ; <S2SV_ModEnd> va_end ( argptr <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headindex",0
668,<S2SV_ModStart> else { if <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> alg_priv ) { if ( ctx -> iface -> destroy ) ctx -> iface -> destroy ( ctx -> priv -> alg_priv ) ; ctx -> priv -> alg_priv = NULL ; } ctx -> iface = NULL ; ctx -> name = NULL ; ctx -> priv = NULL ; res = VPX_CODEC_OK ; },0
669,"<S2SV_ModStart> speed ) { <S2SV_ModEnd> sf -> adaptive_rd_thresh <S2SV_ModStart> -> use_square_partition_only = <S2SV_ModEnd> frame_is_intra_only ( cm <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( speed <S2SV_ModStart> 2 ) { <S2SV_ModEnd> sf -> tx_size_search_method <S2SV_ModStart> = vp9_frame_is_boosted ( cpi )? USE_FULL_RD : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; else sf -> disable_split_mask = DISABLE_ALL_INTER_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; sf -> mode_skip_start = 10 ; sf -> recode_loop = ALLOW_RECODE_KFARFGF ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ]",0
670,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
671,<S2SV_ModStart> ; int goodsize ; <S2SV_ModEnd> if ( inuse,0
672,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
673,"<S2SV_ModStart>, * s = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; char buf [ 128 ] ; char buf [ 128 ] ; s = _PyUnicode_AsString ( s ) ; if (! s ) { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_DECREF ( tback ) ; PyArena_AddPyObject ( c -> c_arena, str ) ; return Str ( str, kind, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; ast_error ( str, kind, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; PyArena_AddPyObject ( c -> c_arena, str ) ; PyArena_AddPyObject ( c -> c_arena, str ) ; return Str ( str, kind, Load, LINENO ( n ), n -> n_col_offset, c -> c_are",0
674,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> break ; } if ( strcmp ( option_name, ""encoding-mode"" ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, <S2SV_ModEnd> 0 ) ; <S2SV_ModStart>! is_keyframe_qaunt_set ) { SvcInternal * const si = get_svc_internal ( svc_ctx ) ; memcpy ( get_svc_internal ( svc_ctx ) -> quantizer_keyframe, si -> quant",0
675,<S2SV_ModStart> event ) ; WARN_ON_ONCE (! swhash -> online ) ; <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
676,"<S2SV_ModStart> ) ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; } fprintf ( mvs, ""Mbs <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. mb_mode ) ; mb_index ++ ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for",0
677,"<S2SV_ModStart> self ) { PyObject * new_memo ; size_t i ; if ( self -> unpickler -> memo_size == 0 ) { Py_DECREF ( new_memo ) ; return NULL ; } new_memo = PyDict_New ( ) ; if ( new_memo == NULL ) return NULL ; for ( i = 0 ; i < self -> unpickler -> memo_size ; i ++ ) { status = PyDict_SetItem ( new_memo, PyLong_FromSsize_t ( i ), value ) ; Py_DECREF ( key ) ; if ( status < 0 ) goto error ; status = PyDict_SetItem ( new_memo, PyLong_FromSsize_t ( self -> unpickler -> memo_size ), value ) ; if ( status < 0 ) goto error ; status = PyDict_SetItem ( new_memo, PyLong_FromSsize_t ( self -> unpickler -> memo_size ), value ) ; Py_DECREF ( key ) ; if ( status < 0 ) goto error ; status = PyDict_SetItem ( new_memo, PyLong_FromSsize_t ( self -> unpickler",0
678,,1
679,"<S2SV_ModStart> do_error ( dbh <S2SV_ModEnd>, mysql_errno (",0
680,"<S2SV_ModStart> = 0 ; pthread_mutex_lock ( & slot_lock ) ; <S2SV_ModStart> size )!= 0 <S2SV_ModEnd> ) { BTA_JvRfcommWrite <S2SV_ModStart> id ) ; pthread_mutex_unlock ( & slot_lock ) ; cleanup_rfc_slot ( slot ) ; } if ( need_close || ( flags & SOCK_THREAD_FD_EXCEPTION ) ) { <S2SV_ModStart> = 0 ; pthread_mutex_unlock ( & slot_lock ) ; cleanup_rfc_slot ( slot ) ; } } if ( flags & SOCK_THREAD_FD_WR ) { if (! flush_incoming_que_on_wr_signal ( slot ) ) { LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for <S2SV_blank> write <S2SV_blank> while <S2SV_blank> disconnected <S2SV_blank> (or <S2SV_blank> write <S2SV_blank> failure), <S2SV_blank> slot: <S2SV_blank> %d, <S2SV_blank> channel: <S2SV_blank> %d"", __func__, slot -> scn ) ; need_close = true ; } } if ( flags & SOCK_THREAD_FD_RD ) { if (! slot -> f. connected ||! flush_incoming_que_on_rd_signal ( slot ) ) { LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for",0
681,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; col_set_str ( pinfo -> cinfo, COL_PROTOCOL, ""PPI"" ) ; col_clear ( pinfo -> cinfo, COL_INFO ) ; mpdu_str = kmalloc ( sizeof ( struct ieee_802_11_phdr ), GFP_ATOMIC ) ; if ( mpdu_str == NULL ) mpdu_str = kmalloc ( sizeof ( struct ieee_802_11_phdr ), GFP_ATOMIC ) ; if ( mpdu_str == NULL ) mpdu_str = kmalloc ( sizeof ( struct ieee_802_11_phdr ), GFP_ATOMIC ) ; if ( mpdu_str == NULL ) mpdu_str = kmalloc ( sizeof ( struct ieee_802_11_phdr ), GFP_ATOMIC ) ; if ( mpdu_str == NULL ) mpdu_str = kmalloc ( sizeof ( struct ieee_802_11_phdr ) ; if ( mpdu_str == NULL ) mpdu_str = kmalloc ( sizeof ( struct ieee",0
682,<S2SV_ModStart> ; sh = s_malloc0 <S2SV_ModEnd> ( hdrlen +,0
683,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; if (! context ) return FALSE ;,0
684,"<S2SV_ModStart> - EINVAL ) ; if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; }",0
685,<S2SV_ModStart> cpi ) { RATE_CONTROL * const rc = & cpi -> rc ; int target ; if ( cpi -> common. current_video_frame == 0 ) { target = ( ( cpi -> oxcf. starting_buffer_level / 2 ) > INT_MAX )? INT_MAX : ( cpi -> oxcf. starting_buffer_level / 2 ) ; } else { target = ( ( cpi -> oxcf. starting_buffer_level / 2 ) > INT_MAX )? INT_MAX : <S2SV_ModEnd> ( int ) <S2SV_ModStart> -> starting_buffer_level / ( cpi -> oxcf. starting_buffer_level / ( cpi -> oxcf. starting_buffer_level / 2 ) ) ; } else if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { const int kf_boost = rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( rc -> frames_since_key / ( cpi -> output,0
686,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_bit_depth_t <S2SV_ModEnd> read_tx_mode ( vpx_reader <S2SV_ModStart> r ) { vpx_bit_depth_t <S2SV_ModEnd> tx_mode = vpx_read_literal <S2SV_ModStart> tx_mode = vpx_read_bit <S2SV_ModEnd> ( r ),0
687,"<S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> ) ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node",0
688,"<S2SV_ModStart> ; MACROBLOCKD * const xd = & cpi -> td. <S2SV_ModEnd> plane [ plane <S2SV_ModStart> 32 ] ; MACROBLOCK * const p = & cpi -> td. plane [ plane ] ; MB_MODE_INFO * const mbmi = & xd -> mi [ 0 ] -> mbmi ; const PLANE_TYPE type = pd -> plane_type ; const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const int ref = is_inter_block ( mbmi ) ; const int16_t * scan, * nb ; const scan_order * so ; const int ref = is_inter_block ( mbmi ) ; vp9_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; vp9_prob ( * const eob_branch ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. counts. eob_branch [ tx_size ]",0
689,<S2SV_ModStart> pSelect -> pSrc ; if ( pSelect -> pTab == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
690,<S2SV_ModStart> shmflg & SHM_RND <S2SV_ModEnd> ) addr &=,0
691,"<S2SV_ModStart> ) ; serv = svc_create ( <S2SV_ModEnd> cb_info -> serv <S2SV_ModStart> cb_info -> serv ) ; if ( IS_ERR ( serv ) ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_CAST ( serv ) ; } <S2SV_ModEnd> dprintk ( ""nfs_callback_create_svc:",0
692,"<S2SV_ModStart> point, const CurveZZ_p curve ) { PointZZ_p R0, R1 ; mpz_inits ( R0. x, R0. y, R1. x, R1. y, NULL ) ; mpz_inits ( R1. x, R1. y, <S2SV_ModEnd> R0. x",0
693,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
694,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
695,"<S2SV_ModStart> s ) { if ( s < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
696,"<S2SV_ModStart> = NULL ; if ( xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ) ; break ;",0
697,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> get_const_svc_internal ( const <S2SV_ModStart> NULL ; return ( SvcInternal_t <S2SV_ModEnd> * ) svc_ctx <S2SV_ModStart> -> internal ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
698,"<S2SV_ModStart> mq_flush_lock, flags ) ; fq -> flush_running_idx ^= 1 ; if (! q -> mq_ops ) { spin_lock_irqsave ( & fq -> mq_flush_lock, flags ) ; flush_rq -> tag = - 1 ; } running = & fq -> flush_queue [ fq -> flush_pending_idx ] ; BUG_ON ( fq -> flush_pending_idx == fq -> flush_running_idx ) ; if (! q -> mq_ops ) spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ;",0
699,"<S2SV_ModStart> { int length ; struct stream packet = * s ; if (! s_check ( s ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; return RD_FALSE ; } <S2SV_ModStart> length ) ; if (! s_check ( s ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
700,"<S2SV_ModStart> ; } } if ( hkey. type == HASH_KEY_IS_LONG ) { zval tmp ; Z_ADDREF_PP ( tmp ) ; add_assoc_zval_ex ( tmp, ZEND_STRS ( ""num"" ), * ptr ) ; MAKE_STD_ZVAL ( tmp ) ; array_init ( tmp ) ; zend_hash_update ( params, hkey. str, hkey. len, ( void * ) & tmp, sizeof ( zval * ), ( void * ) & tmp ) ; * current_param = tmp ; if ( hkey. type == HASH_KEY_IS_STRING ) { zval tmp ; Z_ADDREF_PP ( tmp ) ; add_assoc_zval_ex ( tmp, ZEND_STRS ( ""value"" ), * ptr ) ; MAKE_STD_ZVAL ( tmp ) ; array_init ( tmp ) ; zend_hash_update ( params, hkey. str, hkey. len, ( void * ) & tmp ) ; * current_param = tmp ; if ( hkey. type == HASH_KEY_IS_LONG ) { zval tmp ;",0
701,"<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> = VPX_IMG_FMT_I420 ; if (! _y4m -> vpx_fmt ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> video <S2SV_blank> format; <S2SV_blank> assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 12 ; if (! _y4m -> chroma_fmt ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> chroma <S2SV_blank> format; <S2SV_blank> assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 12 ; if (! _y4m -> vpx_bps ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> chroma <S2SV_blank> format; <S2SV_blank> assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 12 ; if (! _y4m -> vpx_fmt ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> video <S2SV_blank> format; <S2SV_blank> assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; }",0
702,"<S2SV_ModStart> obj * otmp ; if ( strlen ( buf ) >= sizeof ( struct obj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } otmp = readobjnam ( buf, ( struct obj * ) 0 ) ; if ( otmp == NULL ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } if ( otmp!= ( struct obj * ) 0 ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
703,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> 0 ) return FALSE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( & table_start ) == FALSE ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, sBlk. s. directory_table_end ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return",0
704,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct env * <S2SV_ModEnd> createenv ( const <S2SV_ModStart> rule ) ; if ( rule -> options & KEEPENV ) { extern char * * environ ; size_t i ; env = malloc ( sizeof ( * env ) ) ; if (! env ) err ( 1, NULL ) ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } }",0
705,"<S2SV_ModStart> -> seg ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; vp9_clear_system_state ( ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; vp9_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_enable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_set_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vp9_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; } vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; vp9_enable_segfeature ( seg, 0, SEG_LVL_ALT_Q",0
706,"<S2SV_ModStart> return 0 ; Type_type = make_type ( ""Type"", mod_type, Type_fields, 1 ) ; if (! Type_type ) return 0 ; <S2SV_ModStart>, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 5 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"", stmt_type, Class",0
707,"<S2SV_ModStart> ( logfile_fd, ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"" <S2SV_ModEnd>, 16 )",0
708,<S2SV_ModStart> curY >= p -> <S2SV_ModEnd> height ) { <S2SV_ModStart> curY >= p -> <S2SV_ModEnd> height ) { <S2SV_ModStart> curY >= p -> <S2SV_ModEnd> height ) { <S2SV_ModStart> curY >= p -> <S2SV_ModEnd> height ) { <S2SV_ModStart> curY >= p -> <S2SV_ModEnd> height ) { <S2SV_ModStart> curY >= p -> <S2SV_ModEnd> height ) { <S2SV_ModStart> curY >= p -> <S2SV_ModEnd> height ) { <S2SV_ModStart> curY >= p -> <S2SV_ModEnd> height ) { <S2SV_ModStart> curY >= p -> <S2SV_ModEnd> height ) { <S2SV_ModStart> curY >= p -> <S2SV_ModEnd> height ) { <S2SV_ModStart> curY >= p -> <S2SV_ModEnd> height ) { <S2SV_ModStart> curY >= p -> <S2SV_ModEnd> height ) { <S2SV_ModStart> curY >= p -> <S2SV_ModEnd> height ) { <S2SV_ModStart> curY >= p -> <S2SV_ModEnd> height ) { <S2SV_ModStart> curY >= p -> <S2SV_ModEnd> height ) { <S2SV_ModStart> curY >= p -> <S2SV_ModEnd> height ) { <S2SV_ModStart> curY >= p -> <S2SV_ModEnd> height ) {,0
709,<S2SV_ModStart> ) ; } ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ;,0
710,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> atomicio ( read <S2SV_ModStart> remin, cp <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> atomicio ( read <S2SV_ModStart> remin, cp <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> atomicio ( read <S2SV_ModStart> remin, cp <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> atomicio ( read <S2SV_ModStart> remin, cp <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> atomicio ( read <S2SV_ModStart> remin, cp <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> atomicio ( read <S2SV_ModStart> remin, cp <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> atomicio ( read <S2SV_ModStart> remin, cp <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> atomicio ( read <S2SV_ModStart> remin, cp <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> atomicio ( read <S2SV_ModStart> remin, cp <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> atomicio ( read <S2SV_ModStart> remin, cp <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> atomicio ( read <S2SV_ModStart> remin, cp <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> atomicio ( read <S2SV_ModStart> remin, cp <S2SV_ModEnd>, 1 )",0
711,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, * <S2SV_ModStart>, * t <S2SV_ModEnd>, * StartClean <S2SV_ModStart> = 0 ; <S2SV_ModEnd> SetDefaults ( ) <S2SV_ModStart> ; s = cinput ; t = cinput ; while ( * s == '0' && s [ 1 ] == '[' ) { s ++ ; while ( * s == '0' && s [ 1 ] == '0' ) { s ++ ; while ( * s == '0' && s [ 1 ] == '0' ) s ++ ; while ( * s == '0' && s [ 1 ] == ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; if ( argbuf ) free ( argbuf ) ; return ( -",0
712,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart> id ; net_get_random_once <S2SV_ModEnd> ( & ip_idents_hashrnd <S2SV_ModStart> sizeof ( ip_idents_hashrnd ) ) ; hash = jhash_3words ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, ( __force u32 ) iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs <S2SV_ModEnd> ) ; iph",0
713,"<S2SV_ModStart> expr_ty step ; PyObject * tmp = NULL ; <S2SV_ModStart> int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_lower ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( exists_not_none ( obj, & PyId_upper ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_upper ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( exists_not_none ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper, step, arena",0
714,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
715,"<S2SV_ModStart> = gecos ; <S2SV_ModEnd> warn ( ""Finger <S2SV_blank> information <S2SV_blank> *NOT* <S2SV_blank> changed. <S2SV_blank> <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n""",0
716,"<S2SV_ModStart> int err ; struct list_head dscp_map ; <S2SV_ModStart> extack ) ) { list_add_tail ( & dscp_map, & alink -> dscp_map ) ; <S2SV_ModStart> err_delete ; } list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; if ( iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } } list_for_each_entry ( iter, & dscp_map, list ) { if ( iter -> handle == knode -> handle ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } } cmask = iter -> mask & mask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" )",0
717,"<S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; <S2SV_ModEnd> stream -> config <S2SV_ModStart> cfg. g_pass = <S2SV_ModEnd> pass? VPX_RC_LAST_PASS <S2SV_ModStart> : VPX_RC_ONE_PASS ; <S2SV_ModEnd> stream -> frames_out",0
718,"<S2SV_ModStart> error ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s\\n"", g_strdup_printf ( ""%s\\n"", tmpfile_name ) ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s\\n"", g_strdup_printf ( ""%s\\n"", tmpfile_name ) ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s\\n"", tmpfile_name ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s\\n"", tmpfile_name ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s\\n"", g_strdup_printf ( ""%s\\n"", tmpfile_name ) ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s\\n"", tmpfile_name ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s",0
719,"<S2SV_ModStart> { VP9_COMMON * const pbi = & pbi -> common ; TileBuffer * const tile_buffers = pbi -> tile_buffers ; <S2SV_ModStart> tile_col ; vpx_reader <S2SV_ModEnd> r ; assert <S2SV_ModStart> 6 ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) * aligned_cols <S2SV_ModEnd> ) ; for <S2SV_ModStart> ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) { for ( tile_col = 0 ; tile_col < tile_cols ; ++ tile_col ) { const int last_tile = tile_row == tile_rows - 1 && tile_col == tile_cols - 1 ; const size_t size = get_tile ( data_end, last_tile, & cm -> error, & data ) ; tile_buffers [ tile_row ] [ tile_col ] ; buf -> data = data ; buf -> size = size ; data += size ; } } } for ( tile_row = 0 ; tile_col < tile_cols ;",0
720,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9Decoder * <S2SV_ModEnd> vp9_decoder_create ( const <S2SV_ModStart> ) { VP9Decoder * const pbi = vpx_memalign ( 32, sizeof ( * pbi ) ) ; VP9_COMMON * const cm = pbi? pbi -> common : NULL ; if (! pbi ) return NULL ; vp9_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { vp9_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vp9_initialize_dec ( ) ; vpx_memset ( & pbi -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; pbi -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; vp9_init_dequantizer ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_init ( & pbi -> lf_worker ) ; cm -> error. setjmp =",0
721,"<S2SV_ModStart> { GF_LOG ( GF_LOG_ERROR <S2SV_ModEnd>, GF_LOG_CONTAINER, <S2SV_ModStart> GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
722,"<S2SV_ModStart> req ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> -> opt ; rcu_read_lock ( ) ; opt = rcu_dereference_protected ( req_inet -> inet_opt, sock_owned_by_user ( req -> sk ) -> opt, sock_owned_by_user ( req -> sk ) ) ; if ( rcu_dereference_protected ( req_inet -> inet_opt, sock_owned_by_user ( req -> sk ) -> opt. cipso, GFP_KERNEL ) ) ; <S2SV_ModEnd> cipso_v4_delopt ( &",0
723,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> tree2tok ( struct <S2SV_ModStart> i ++ ] <S2SV_ModEnd> ; if (,0
724,<S2SV_ModStart> ; if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_ALT_FLAG ; if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_,0
725,"<S2SV_ModStart>, & len, 0",1
726,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i,0
727,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf )",0
728,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
729,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> int mi_row, <S2SV_ModEnd> BLOCK_SIZE bsize ) <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> -> select_txfm_size && td <S2SV_ModEnd> -> sb_type >= <S2SV_ModStart> -> select_txfm_size && td <S2SV_ModEnd> -> sb_type >= <S2SV_ModStart> -> select_txfm_size && td <S2SV_ModEnd> -> sb_type >= <S2SV_ModStart> -> select_txfm_size && td <S2SV_ModEnd> -> sb_type >= <S2SV_ModStart> -> select_txfm_size && td <S2SV_ModEnd> -> sb_type >= <S2SV_ModStart> -> select_txfm_size && td <S2SV_ModEnd> -> sb_type >= <S2SV_ModStart> -> select_txfm_size && td <S2SV_ModEnd> -> sb_type >= <S2SV_ModStart> -> select_txfm_size && td <S2SV_ModEnd> -> sb_type >= <S2SV_ModStart> -> select_txfm_size && td <S2SV_ModEnd> -> sb_type >= <S2SV_ModStart> -> select_txfm_size && td <S2SV_ModEnd> -> sb_type >= <S2SV_ModStart> -> select_txfm_size && td <S2SV_ModEnd> -> sb_type >= <S2SV_ModStart> -> sb_type >= BLOCK_8X8 && td <S2SV_ModEnd> -> sb_type",0
730,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_null>,0
731,"<S2SV_ModStart> { uint32_t value ; int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) position = get_bits_count ( gbc ) ; if ( position < 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits1 ( gbc ) ) { bits [ i ++ ] =",0
732,"<S2SV_ModStart> ) ) { kvm_read_guest_cached ( vcpu -> kvm, & vmx -> guest. cached_vmid, & vmx -> guest. cached_vmid, sizeof ( vmx -> guest. cached_vmid ) ) ; kvm_read_guest_cached ( vcpu -> kvm, & vmx -> guest. cached_vmid, sizeof ( vmx -> guest. cached_vmid ) ) ; kvm_read_guest_cached ( vcpu -> kvm, & vmx -> guest. cached_vmid, sizeof ( vmx -> guest. cached_vmid ), & vmx -> guest. cached_vmid, sizeof ( vmx -> guest. cached_vmid ) ) ; kvm_write_guest_cached ( vcpu -> kvm, & vmx -> guest. cached_vmid, sizeof ( vmx -> guest. cached_vmid ) ) ; kvm_write_guest_cached ( vcpu -> kvm, & vmx -> guest. cached_vmid, sizeof ( vmx -> guest. cached_vmid ) ) ;",0
733,"<S2SV_ModStart> { } else { if ( strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> } else { if ( strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> } else { if ( strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> } else { if ( strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> } else { if ( strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> } else { if ( strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> } else { if ( strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> } else { if ( strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> } else { if ( strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"",",0
734,"<S2SV_ModStart> = 0, <S2SV_ModEnd> packet -> http_cookie",0
735,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
736,<S2SV_ModStart> ; assert ( <S2SV_ModEnd> pow ( ( <S2SV_ModStart> ; assert ( <S2SV_ModEnd> pow ( ( <S2SV_ModStart> ; assert ( <S2SV_ModEnd> pow ( ( <S2SV_ModStart> ; assert ( <S2SV_ModEnd> pow ( ( <S2SV_ModStart> ; assert ( <S2SV_ModEnd> pow ( ( <S2SV_ModStart> ; assert ( <S2SV_ModEnd> pow ( ( <S2SV_ModStart> ; assert ( <S2SV_ModEnd> pow ( ( <S2SV_ModStart> ; assert ( <S2SV_ModEnd> pow ( (,0
737,"<S2SV_ModStart>, y, <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
738,"<S2SV_ModStart> drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen < sizeof ( struct iphdr ) ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( unlikely ( opt ->",0
739,"<S2SV_ModStart> length ) { int ret ; if ( length < 0 ) { ERROR ( ""ack <S2SV_blank> failed <S2SV_blank> (%s)"", strerror ( errno ) ) ; ret = recv ( common -> ctrl_fd, buffer, length, MSG_NOSIGNAL ) ; if ( ret < 0 ) { ERROR ( ""ack <S2SV_blank> failed <S2SV_blank> (%s)"", strerror ( errno ) ) ; ret = recv ( common -> ctrl_fd, buffer, length, MSG_NOSIGNAL ) ; if ( ret < 0 ) { ERROR ( ""ack <S2SV_blank> failed <S2SV_blank> (%s)"", strerror ( errno ) ) ; ret = recv ( common -> ctrl_fd, buffer, length, MSG_NOSIGNAL ) ; ret = recv ( common -> ctrl_fd, buffer, length, MSG_NOSIGNAL ) ; if ( ret < 0 ) { ERROR ( ""ack <S2SV_blank> failed <S2SV_blank> (%s)"", strerror ( errno ) ) ; ret = recv ( common -> ctrl_fd, buffer, length, MSG_NOSIGNAL ) ; if ( ret < 0 ) { ERROR ( ""ack <S2SV_blank> failed <S2SV_blank> (%s)"", strerror ( errno ) ) ; ret = recv ( common -> ctrl_fd, buffer, length, MSG_NO",0
740,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ;",0
741,<S2SV_ModStart> cfg ) { <S2SV_ModEnd> memset ( cfg,0
742,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; } else { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; }",0
743,"<S2SV_ModStart> ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; if ( Stream_GetRemainingLength ( s ) < 4 ) return FALSE ;",0
744,<S2SV_ModStart> vp8_writer * w ; # if CONFIG_TEMPORAL_DENOISING if ( ( cpi -> common. mb_rows > cpi -> common. mb_cols ) || ( cpi -> common. mb_rows < cpi -> common. mb_cols * cpi -> common. mb_cols * cpi -> common. mb_rows * cpi -> common. mb_rows * cpi -> common. mb_cols * cpi -> common. mb_cols ) || ( cpi -> common. mb_cols * cpi -> common. mb_cols * cpi -> common. mb_rows < cpi -> common. mb_cols * cpi -> common. mb_cols * cpi -> common. mb_cols * cpi -> common. mb_cols * cpi -> common. mb_cols * cpi -> common. mb_rows * cpi -> common. mb_cols * cpi -> common. mb_cols * cpi -> common. mb_cols * cpi -> common. mb_cols * cpi -> common. mb_cols * cpi -> common. mb_cols ) ; # endif,0
745,"<S2SV_ModStart> ( pvc ) ; alloc_netdev ( 0, ""pvc%d"", pvc_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } <S2SV_ModStart> ether_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; }",0
746,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
747,"<S2SV_ModStart> -> b_multithreaded_rd ) vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
748,<S2SV_ModStart> 0 ) { xWantedSize -= xHeapStructSize ; if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; },0
749,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
750,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
751,"<S2SV_ModStart> s ) { <S2SV_ModEnd> uint16 left, <S2SV_ModStart> int i ; if (! s_check_rem ( s, 4 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", __func__ ) ; return ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s, 4 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", __func__ ) ; return ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s, 4 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", __func__ ) ; return ; }",0
752,"<S2SV_ModStart> } else { if (! smatch ( option, ""filename"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Missing <S2SV_blank> filename"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""backup"" ) ) { flags |= MPR_LOG_ANEW ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Backup <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; }",0
753,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_tree_probs_from_distribution <S2SV_ModEnd> ( vp9_coef_tree, <S2SV_ModStart> coef_probs = cpi <S2SV_ModEnd> -> frame_coef_probs [",0
754,"<S2SV_ModStart> { } ; struct termios old = get_termios ( fd ) ; if ( old < 0 ) return r ; r = set_termios ( fd, & old, & tc ) ; if ( r < 0 ) return r ; r = ioctl ( fd, KDSKBMODE, utf8? K_UNICODE : K_XLATE ) ; if ( r < 0 ) return r ; r = loop_write ( fd, ""\\033%G"", 3, false ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> UTF-8 <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( r < 0 ) return r ; r = set_termios ( fd, old, & tc ) ; if ( r < 0 ) return r ; r = set_termios ( fd, & old, & tc ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name )",0
755,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> ) ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb",0
756,"<S2SV_ModStart> * iface, <S2SV_ModEnd> vpx_codec_enc_cfg_t * cfg <S2SV_ModStart> ( flags & ( VPX_CODEC_USE_XMA | VPX_CODEC_USE_PSNR | VPX_CODEC_USE_OUTPUT_PARTITION ) ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX",0
757,"<S2SV_ModStart> int stride, <S2SV_ModEnd> int uv_block_size, <S2SV_ModStart> const kernel = vp9_get_interp_kernel ( <S2SV_ModEnd> xd -> mi <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> -> mbmi. <S2SV_ModStart> const kernel = vp9_get_interp_kernel ( xd -> mi [ 0 ] -> mbmi. interp_filter ) ; enum mv_precision mv_precision_uv ; int uv_stride ; if ( uv_block_size == 8 ) { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q4 ; } else { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q3 ; } vp9_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, mv_precision_uv, x, y ) ; vp9_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, which_mv, kernel, mv_precision_uv",0
758,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) < 4 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( buf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ;",0
759,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static cJSON * cJSON_CreateFloatArray ( const double <S2SV_ModEnd> * numbers, <S2SV_ModStart> < count ; ++ i <S2SV_ModEnd> ) { n <S2SV_ModStart> cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } <S2SV_ModEnd> return a ;",0
760,"<S2SV_ModStart> tk_status ) ; if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_unlock ; } if ( status == NLM_LCK_GRANTED ) { printk ( KERN_WARNING ""lockd: <S2SV_blank> unexpected <S2SV_blank> unlock <S2SV_blank> status: <S2SV_blank> %d\\n"", status ) ; die : return",0
761,<S2SV_ModStart> -> previous_length ; # if CONFIG_STB_HIGHBITDEPTH if ( f -> previous_window == NULL ) { f -> previous_window = NULL ; return 0 ; } # endif for ( i = 0 ; i < f -> channels ; ++ i ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * w [ n - 1 - j ] ; for ( j = 0 ; j < f -> channels ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * w [ n - 1 - j ] ; # else for ( j = 0 ; j < f -> channels ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * w [ j ] ; for ( j = 0 ; j < f -> channels ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * w [ j ] ; for ( j = 0 ; j < f -> channels,0
762,"<S2SV_ModStart> 4 ) ; size_t num_properties = GETINT32 ( buf + idx ) ; idx += 4 ; CHECKINT16 ( idx, len ) ; num_properties = GETINT16 ( buf + idx ) ; idx += 2 ; CHECKINT16 ( idx, len ) ; a -> name = GETINT16 ( buf + idx ) ; idx += 2 ; if ( a -> name & GUID_EXISTS_FLAG ) { a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ; idx += sizeof ( GUID ) ; } } else { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. len = GETINT32 ( buf + idx ) ; idx += 4 ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i",0
763,"<S2SV_ModStart> data_end ) { <S2SV_ModEnd> const uint8_t * <S2SV_ModStart> const cm = & pbi -> oxcf ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int num_workers = MIN ( pbi -> oxcf. max_threads & ~ 1, tile_cols ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int n ; int final_worker = - 1 ; if ( num_workers <= ( 1 << 6 ) ) { CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_workers * sizeof ( * pbi -> tile_workers ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data",0
764,<S2SV_ModStart> * 0x101 ; if ( ( fgetc ( ifp ) - 'M' ) || ( fgetc ( ifp ) - 'R' ) || ( fgetc ( ifp ) - 'M' ) || ( fgetc ( ifp ) - 'M' ) || ( fgetc ( ifp ) - 'M' ) || ( fgetc ( ifp ) - 'R' ) ) {
765,"<S2SV_ModStart> -> common ; VP9EncoderConfig <S2SV_ModEnd> * seg = <S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> = SEGMENT_DELTADATA ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> = SEGMENT_DELTADATA ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, base_q * Q_RATIO ( i ) ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; vpx_set_rdmult ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; vpx_",0
766,"<S2SV_ModStart> -> error_code ) { memset ( & ctx -> base. err_detail, 0, sizeof ( ctx -> base. err_detail ) ) ;",0
767,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
768,<S2SV_ModStart> * ps_cur_slice ; <S2SV_ModEnd> ih264d_free_dynamic_bufs ( ps_dec,0
769,<S2SV_ModStart> goto out_unlock ; if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAW,0
770,"<S2SV_ModStart> ssize_t ret ; if (! btpan_cb. congest_packet ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; GKI_freebuf ( buffer ) ; btsock_thread_add_fd ( pan_pth, fd, 0, SOCK_THREAD_FD_RD, 0 ) ; return ; } ret = read ( fd, btpan_cb. congest_packet, sizeof ( btpan_cb. congest_packet ) ) ; if ( ret!= sizeof ( UINT8 ) ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; GKI_freebuf ( buffer ) ; btsock_thread_add_fd ( pan_pth, fd, 0, SOCK_THREAD_FD_RD, 0 ) ; return ; }",0
771,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int getnum ( <S2SV_ModStart> return df ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
772,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> old ) ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> allgc = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = g -> allgc ;",0
773,<S2SV_ModStart> else return - ENODEV <S2SV_ModEnd> ; deb_info (,0
774,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> return NULL ;",0
775,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> variant_opaque ; struct sockaddr_in <S2SV_ModEnd> addr ; int <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct mainloop_fd_callbacks cib_fd_callbacks <S2SV_ModStart> cib_fd_callbacks = { <S2SV_ModEnd>. dispatch = <S2SV_ModStart>. destroy = cib_remote_connection_destroy <S2SV_ModEnd>, } ; <S2SV_ModStart> = NULL ; <S2SV_ModEnd> connection -> socket <S2SV_ModStart> ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ;",0
776,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ; cpi -> gf_bitrate_adjustment = 0 ; cpi -> frames_till_gf_update_due = 0 ; cpi -> non_gf_bitrate_adjustment = 0 ; if ( setjmp ( cm -> error. jmp ) ) { cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ) ; vp8_create_common ( & cpi -> common ) ; init_config ( & cpi -> mb ) ; memcpy ( & cpi -> base_skip_false_prob, vp8cx_base_skip_false_prob ) ; memcpy ( & cpi -> base_skip_false_prob, sizeof ( vp8cx_base_skip_false_prob ) ) ; memcpy ( & cpi -> base_skip_false_prob, sizeof ( vp8cx_base_skip_false_prob ) ) ; memcpy (",0
777,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",0
778,"<S2SV_ModStart> ndo_vflag ) { ND_TCHECK2 ( bp [ 26 ], sizeof ( struct in6_addr ) ) ; <S2SV_ModStart> ndo_vflag ) { ND_TCHECK2 ( bp [ 26 ], sizeof ( struct in6_addr ) ) ; <S2SV_ModStart> ndo_vflag ) { ND_TCHECK2 ( bp [ 26 ], sizeof ( struct in6_addr ) ) ; } <S2SV_ModStart> ndo_vflag ) { ND_TCHECK2 ( bp [ 26 ], sizeof ( struct in6_addr ) ) ; } if ( ndo -> ndo_vflag ) { ND_TCHECK2 ( bp [ 26 ], sizeof ( struct in6_addr ) ) ; } if ( ndo -> ndo_vflag ) { ND_TCHECK2 ( bp [ 26 ], sizeof ( struct in6_addr ) ) ; } if ( ndo -> ndo_vflag ) { ND_TCHECK2 ( bp [ 26 ], sizeof ( struct in6_addr ) ) ; } if ( ndo -> ndo_vflag ) { ND_TCHECK2 ( bp [ 26 ], sizeof ( struct",0
779,"<S2SV_ModStart> ; } } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
780,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> return mptctl_do_mpt_command ( <S2SV_ModStart> MF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
781,<S2SV_ModStart> Image <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
782,"<S2SV_ModStart> ++ ) { if ( mainhdrlen < 0 ) { jas_eprintf ( ""mainhdr <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - 1 ; } <S2SV_ModStart> ++ ) { if ( mainhdrlen < 0 ) { jas_eprintf ( ""mainhdr <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - 1 ; } <S2SV_ModStart> ++ ) { if ( mainhdrlen < 0 ) { jas_eprintf ( ""mainhdr <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - 1 ; } if ( mainhdrlen < 0 ) { jas_eprintf ( ""mainhdr <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - 1 ; } <S2SV_ModStart> ++ ) { if ( mainhdrlen < 0 ) { jas_eprintf ( ""mainhdr <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - 1 ; } <S2SV_ModStart> ++ ) { if ( mainhdrlen < 0 ) { jas_eprintf ( ""mainhdr <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - 1 ; } if ( mainhdrlen < 0 ) { jas_eprintf ( ""mainhdr <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - 1 ; }",0
783,"<S2SV_ModStart> = '\\0' ; if (! strchr ( str_temp, chanmode ) ) { irc_protocol_error ( server, ""irc_mode_channel_update(), <S2SV_blank> channel <S2SV_blank> name <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; irc_protocol_error ( server, ""irc_mode_channel_update(), <S2SV_blank> channel <S2SV_blank> name <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; irc_protocol_error ( server, ""irc_mode_channel_name(), <S2SV_blank> channel <S2SV_blank> name <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; irc_protocol_error ( server, ""irc_mode_channel_update(), <S2SV_blank> channel <S2SV_blank> name <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return ; } <S2SV_ModEnd> strcpy ( new_args <S2SV_ModStart> = '\\0' ; irc_protocol_error ( server, ""irc_mode_channel_update(), <S2SV_blank> channel <S2SV_blank> name <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; irc_protocol_error ( server, ""irc_mode_channel_update(), <S2SV_blank> channel <S2SV_blank> name <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; irc_protocol_error ( server, ""irc_mode_channel_update(), <S2SV_blank> channel <S2SV_blank> name <S2SV_blank>",0
784,"<S2SV_ModStart> decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - 191 ; vpx_read_bit <S2SV_ModEnd> ( r )",0
785,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
786,"<S2SV_ModStart>, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> comp_inter_prob [ ctx <S2SV_ModEnd> ] ) ;",0
787,"<S2SV_ModStart>! stream ) { <S2SV_ModEnd> fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" <S2SV_ModStart> fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModEnd> if ( prev <S2SV_ModStart> ; res = vpx_codec_enc_config_default <S2SV_ModEnd> ( global -> <S2SV_ModStart> ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; stream -> ebml. debug = global -> debug ; if ( global -> deadline == VPX_DL_REALTIME ) stream -> ebml. last_pts_ms = - 1 ; if ( global -> deadline == VPX_DL_REALTIME ) stream -> ebml. debug = global -> debug ; if ( global -> deadline == VPX_DL_REALTIME ) stream -> ebml",0
788,"<S2SV_ModStart> ; if ( op -> nd_opt_len < sizeof ( struct icmp6_opt_hdr ) ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_type ) ) ) ; break ; }",0
789,<S2SV_ModStart> = 0 ; if ( yr_root_node_create ( re_ast ) == ERROR_INSUFFICIENT_MEMORY ) { yr_free ( re_ast ) ; return ERROR_INSUFFICIENT_MEMORY ; },0
790,"<S2SV_ModStart> ) ) ; if ( key -> key -> key == NULL ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } <S2SV_ModStart> 0 ) { <S2SV_ModEnd> auth_request_log_error ( iter <S2SV_ModStart> AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_",0
791,"<S2SV_ModStart> return 0 ; skb_pull ( skb, sizeof ( struct nlattr ) ) ; <S2SV_ModStart> A ] ; skb_pull ( skb, sizeof ( struct nlattr ) ) ; <S2SV_ModStart> -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len <S2SV_ModEnd> ) return 0",0
792,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
793,"<S2SV_ModStart> ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</message>"" ""</forwarded>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost/mobile\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>""",0
794,"<S2SV_ModStart> SC_MAX_SERIALNR ) ; if (! serial -> value ) { SC_LOG ( card, SC_LOG_ERROR_FILE_NOT_FOUND, SC_ERROR_FILE_NOT_FOUND, SC_ERROR_FILE_NOT_FOUND, SC_ERROR_FILE_NOT_FOUND, SC_ERROR_FILE_NOT_FOUND, SC_ERROR_FILE_NOT_FOUND, SC_ERROR_FILE_NOT_FOUND, SC_ERROR_FILE_NOT_FOUND, SC_ERROR_FILE_NOT_FOUND, SC_ERROR_FILE_NOT_FOUND, SC_ERROR_FILE_NOT_FOUND, SC_ERROR_FILE_NOT_FOUND ) ; return SC_ERROR_FILE_NOT_FOUND, SC_ERROR_FILE_NOT_FOUND, SC_ERROR_FILE_NOT_FOUND, SC_ERROR_FILE_NOT_FOUND, SC_ERROR_FILE_NOT_FOUND, SC_ERROR_FILE_NOT_FOUND, SC_ERROR_FILE_NOT_FOUND, SC_ERROR_FILE_NOT_FOUND, SC_ERROR_FILE_NOT_FOUND ) ; }",0
795,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> altwarning <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
796,"<S2SV_ModStart> maxBitrate ; } if ( av1 -> av1_config ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> dataLength ) ; gf_odf_av1_cfg_del ( av1_cfg ) ; }",0
797,"<S2SV_ModStart> { GF_LOG ( GF_LOG_ERROR <S2SV_ModEnd>, GF_LOG_CONTAINER, <S2SV_ModStart> GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
798,"<S2SV_ModStart> ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; if ( r < 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""empty <S2SV_blank> document <S2SV_blank> number"" ) ; if ( r >= sizeof ( buff ) ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""empty <S2SV_blank> document <S2SV_blank> number"" ) ; if ( r < 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""empty <S2SV_blank> document <S2SV_blank> number"" ) ; } else { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""empty <S2SV_blank> document <S2SV_blank> number"" ) ; if ( r >= 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""empty <S2SV_blank> document <S2SV_blank> number"" ) ; if ( r < 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""empty <S2SV_blank> document <S2SV_blank> number"" ) ; } else { r = SC_TEST_RET ( card -> ctx,",0
799,<S2SV_ModStart> maxFrameNum ) ; if ( picSizeInMbs > SIZE_MAX / dpbSize ) return ( MEMORY_ALLOCATION_ERROR <S2SV_ModStart> dpbSize ) ; if ( picSizeInMbs > SIZE_MAX / dpb -> dpbSize ) return ( MEMORY_ALLOCATION_ERROR <S2SV_ModStart> MAX_NUM_REF_PICS ) ; if ( picSizeInMbs > SIZE_MAX / dpb -> dpbSize ) return ( MEMORY_ALLOCATION_ERROR ) <S2SV_ModStart> MAX_NUM_REF_PICS ) ; if ( picSizeInMbs > SIZE_MAX / dpb -> dpbSize ) return ( MEMORY_ALLOCATION_ERROR <S2SV_ModStart> dpbSize ) ; if ( picSizeInMbs > SIZE_MAX / dpb -> dpbSize ) return ( MEMORY_ALLOCATION_ERROR <S2SV_ModStart> MAX_NUM_REF_PICS ) ; if ( picSizeInMbs > SIZE_MAX / dpb -> dpbSize ) return ( MEMORY_ALLOCATION_ERROR ) ; if ( picSizeInMbs > SIZE_MAX / dpb -> dpbSize ) return ( MEMORY_ALLOCATION_ERROR ) ;,0
800,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; addrlen_out = sizeof ( struct oe_sockaddr_storage ) ; if ( addrlen_out > sizeof ( struct oe_socklen_t ) ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } <S2SV_ModEnd> if ( oe_syscall_getpeername_ocall <S2SV_ModStart>, addrlen_in, & addrlen_out )!= OE_OK ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_out > sizeof ( struct oe_socklen_t ) ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
801,,1
802,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; }",0
803,"<S2SV_ModStart> ipv6_pinfo * np = rcu_dereference_protected ( np -> inet6_opt, sock_owned_by_user ( sk ) ) ; struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> inet6_opt, sock_owned_by_user ( sk ) ) ; if ( opt ) { rcu_read_lock ( ) ; opt = rcu_dereference_protected ( np -> inet6_opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> inet6_opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> inet6_opt, sock_owned_by_user ( sk ) ) ; if ( opt ) { rcu_read_unlock ( ) ; opt = rcu_dereference_protected ( np -> inet6_opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> inet6_opt, sock_owned_by_user",0
804,"<S2SV_ModStart>, at ; size_t <S2SV_ModEnd> hdr_size, j <S2SV_ModStart>, j ; size_t <S2SV_ModEnd> hdr_size, j <S2SV_ModStart>, j ; size_t <S2SV_ModEnd> hdr_size, j <S2SV_ModStart>, j ; if ( fsize > sizeof ( struct pe_image_optional_hdr64 ) ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> fsize <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return CL_ENULLARG ; } <S2SV_ModStart>, j ; if ( hdr_size > sizeof ( struct pe_image_optional_hdr32 ) ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> fsize <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return CL_ENULLARG ; } <S2SV_ModStart>, j ; if ( fsize > sizeof ( struct pe_image_optional_hdr64 ) ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> fsize <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return CL_ENULLARG ; } if ( fsize > sizeof ( struct pe_image_optional_hdr32 ) ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> fsize <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return CL_ENULLARG",0
805,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> | address ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000ReadReg ( DM9000_EPDRH ) << 8 ) | dm9000ReadReg ( DM",0
806,"<S2SV_ModStart> == 0 ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } # ifdef CCITT_SUPPORT if ( t2p -> pdf_compression == T2P_COMPRESS_G4_HIGHBITDEPTH ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } # ifdef CCITT_SUPPORT if ( t2p -> pdf_compression == T2P_COMPRESS_G4 ) { buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ; if ( buffer == NULL ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank>",0
807,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
808,"<S2SV_ModStart> pcmk_ok ) { xmlNode * hello ; rc = cib_create_op ( 0, private -> command. session, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( hello, F_CIB_CLIENTNAME, name ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( hello, F_CIB_CLIENTNAME, name ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. session, CRM_OP_REGISTER, NULL, NULL, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ;",0
809,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
810,"<S2SV_ModStart> >> 3 } ; int <S2SV_ModEnd> sr = 0 <S2SV_ModStart> bsize ] ; vpx_variance_fn_ptr_t <S2SV_ModEnd> v_fn_ptr = cpi <S2SV_ModStart> bsize ] ; vpx_variance_fn_ptr_t <S2SV_ModEnd> v_fn_ptr = cpi <S2SV_ModStart> -> diamond_search_sad ( <S2SV_ModEnd> x, & <S2SV_ModStart> ref_mv_full, & v_fn_ptr <S2SV_ModEnd>, step_param, <S2SV_ModStart> v_fn_ptr, x -> nmvjointcost, x -> mvcost, ref_mv ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if (",0
811,"<S2SV_ModStart> ntreg_header ) ; if ( h -> addr == NULL ) { SET_ERRNO ( EPERM, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } <S2SV_ModStart> ntreg_header ) ; if ( h -> addr == NULL ) { SET_ERRNO ( EPERM, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" ) ; goto error ; }",0
812,"<S2SV_ModStart> ) ; } # ifdef DEBUG_CONF ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", _parent, merged ) ; ap_log_perror ( APLOG_MARK, APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", parent, merged ) ; ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", _parent, merged ) ; ap_log_perror ( APLOG_MARK, APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", _parent, merged ) ; ap_log_perror ( APLOG_MARK, APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp""",0
813,"<S2SV_ModStart> -> msg_name, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_name, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_sys <S2SV_ModEnd> -> msg_name, <S2SV_ModStart> -> msg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen,",0
814,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t pixel_info_length <S2SV_ModStart> ReadBlobLSBShort ( image ) ; pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_",0
815,"<S2SV_ModStart>!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )",0
816,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
817,"<S2SV_ModStart> user_data ) { <S2SV_ModEnd> if ( client <S2SV_ModStart> num_clients ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
818,"<S2SV_ModStart> * uv ; <S2SV_ModEnd> thread -> twups <S2SV_ModStart> = thread -> twups = NULL ; if (! iswhite ( thread ) ) markvalue ( g, uv -> v ) ; else markvalue ( g, uv -> v ) ; } <S2SV_ModEnd> } } <S2SV_null>",0
