,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; if ( n2size < 1 ) <S2SV_ModEnd> { applog (,0
1,"<S2SV_ModStart> * tptr, 2 <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; ND_TCHECK_16BITS ( tlen ) ;",0
2,<S2SV_ModStart> out_mutex ) ; return - EIO ;,0
3,"<S2SV_ModStart> case SIOCYAMGCFG : memset ( & yi, 0, sizeof ( yi ) ) ;",1
4,<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ),0
5,"<S2SV_ModStart>, offset ; if ( avio_feof ( f ) ) { index -> item_count = 0 ; av_freep ( & index -> items ) ; return AVERROR_INVALIDDATA ; }",1
6,<S2SV_ModStart> * tpg ; u16 <S2SV_ModEnd> t ; if,0
7,<S2SV_ModStart> goto out ; if ( s,0
8,"<S2SV_ModStart> { u32 data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; kvm_read_guest_cached ( vcpu -> kvm, & <S2SV_ModEnd> vcpu -> arch <S2SV_ModStart>. apic -> vapic_cache, & data, sizeof ( u32 ) <S2SV_ModEnd> ) ; apic_set_tpr",1
9,<S2SV_ModStart> src ) ; __switch_to_tm ( src ) ; tm_recheckpoint_new_task ( src ) ;,1
10,<S2SV_ModStart> ( c ) <S2SV_ModEnd> return 0 ;,0
11,"<S2SV_ModStart> ( sb, KERN_ERR,",1
12,"<S2SV_ModStart> ipv6_select_ident ( fptr, ( struct rt6_info * ) skb_dst ( skb )",1
13,"<S2SV_ModStart>, regs, <S2SV_ModEnd> struct perf_sample_data *",0
14,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; },0
15,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> sse2SV_null> static <S2SV_ModStart> 8 ) { tran_low_t <S2SV_ModEnd> output ( tran_high_t <S2SV_ModStart> 8 ) ; tran_high_t <S2SV_ModEnd> 16 = input <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> temp_in [ <S2SV_ModStart> ] = ( tran_low_t ) <S2SV_ModStart> output ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> ; input [ 2 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModEnd> [ 2 ],0
16,<S2SV_ModStart> == 0 ) sanitize_dead_code ( env ) ; if ( ret == 0 ),1
17,"<S2SV_ModStart> int i ; if (! config -> sample_rate ) { strcpy ( wpc -> error_message, ""sample <S2SV_blank> rate <S2SV_blank> cannot <S2SV_blank> be <S2SV_blank> zero!"" ) ; return FALSE ; }",1
18,<S2SV_ModStart> ; if ( <S2SV_ModEnd> mem == NULL,0
19,<S2SV_ModStart> # ifdef CONFIG_HIGHBITDEPTH if ( fprintf ( fstride ),0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_col ; const VP9EncoderConfig * const VP9_COMMON * const cm = & cpi -> common ; MACROBLOCKD * const cm = & cpi -> common ; MACROBLOCKD * const cm = & cpi -> twopass. gf_group = & cpi -> twopass. gf_group <S2SV_ModStart> ( cpi, twopass, cpi, twopass, twopass, twopass, cpi -> twopass, twopass, twopass, twopass, cpi -> twopass. gf_group <S2SV_ModStart> ( cpi, twopass, cpi -> twopass, twopass, twopass, cpi -> twopass. gf_group <S2SV_ModStart> ( cpi, twopass, 0, twopass, cpi, twopass, twopass, cm -> twopass. number_layers ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HOLD ( cpi",0
21,<S2SV_ModStart> size ) { <S2SV_ModEnd> d ; },0
22,"<S2SV_ModStart> void write_mv_list ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> cm, vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> } else { vpx_writer <S2SV_ModEnd> ( w, <S2SV_ModStart> 1 ) ; vpx_write_bit <S2SV_ModEnd> ( w,",0
23,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ralg -> seedsize,1
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (,1
25,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> } else { SOCKSV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> S2SV_null> <S2SV_null> static <S2SV_ModStart> block_offset ) { return 0 ; } <S2SV_ModStart> } else { return 0 ; } } <S2SV_ModStart> } else { if ( <S2SV_ModEnd> invalidate_block_size ) return FALSE ; <S2SV_ModStart> } else { if ( s -> tx_size == 0 ) return ERROR_INVALID_INVALIDDATA ; <S2SV_ModStart> } } } return <S2SV_ModEnd> ; } <S2SV_null>,0
26,<S2SV_ModStart> char * fmtname ; int debug <S2SV_ModStart> = 0 ; debug = 0 ; debug = 0 ; break ; case,0
27,"<S2SV_ModStart> esr, regs <S2SV_ModEnd>, regs, <S2SV_ModStart> = 0 ; info_regs = 0 ; info. si_code = 0 ; info. si_notify_user <S2SV_ModEnd> ( regs, <S2SV_ModStart>, regs, & info <S2SV_ModEnd>, regs,",0
28,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; } <S2SV_ModStart> ptr ++ ; length -= 3 ; <S2SV_ModStart> if ( length == 0 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> if ( length == 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; } <S2SV_ModStart> ++ ) { ND_PRINT ( ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> if ( length == 0 ) { ND_PRINT ( ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ptr <S2SV_ModStart> ptr, length <S2SV_ModEnd> ) ; length <S2SV_ModStart> ) ; }",0
29,<S2SV_ModStart> return ret ; if ( alt -> desc. bNumEndpoints < 1 ) return - EINVAL ;,0
30,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> en ) return - <S2SV_ModStart> case 2 : if ( tolen == 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 2 : if ( tolen < 2 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 2 : if ( tolen < 2 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 2 : if ( tolen == '\\0' ) return - ENAMETOOLONG ; <S2SV_ModStart> += 2 ; tolen -= comp_len ; <S2SV_ModStart> case 2 : if ( tolen == '\\0' ) return - ENAMETOOLONG ; <S2SV_ModStart> case 2 : if ( tolen == '\\0' ) return - ENAMETOOLONG ; <S2SV_ModStart> += 2 ; tolen -= 2 ; <S2SV_ModStart> case 2 : if ( tolen < 2 ) return - ENAMETOOLONG ; <S2SV_ModStart> += 2 ; tolen -= comp_len ; <S2SV_ModStart> += 2 ; tolen -= comp_len ; <S2SV_ModStart> = '\\0' ; return - ENAMETOOLONG ;,0
31,<S2SV_ModStart> } err = - 1 <S2SV_ModEnd> ; err =,0
32,<S2SV_ModStart> unsigned long flags ; if ( qid > NVMET_NR_QUEUES ) return NULL,1
33,"<S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> ) ; if",0
34,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,0
35,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> r_dest_keyring ) { if ( dest_keyring_set ( dest_keyring, dest_keyring ) ) return - ENOMEM ; }",0
36,<S2SV_ModStart> = create_spnego_ctx ( 1,1
37,"<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if ( addr -> l2tp_family!= AF_INET <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> ret = - <S2SV_ModStart> ( sk ) ; if (! sock_flag ( sk, SOCK_ZAPPED ) ) goto out",1
38,<S2SV_ModStart> <S2SV_null> static unsigned long <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> ) { unsigned long <S2SV_ModEnd> max = 0 <S2SV_ModStart> ( ( - 1UL <S2SV_ModEnd> ) & STACK_RND_MASK,1
39,"<S2SV_ModStart> ) ) ; nautilus_file_set_metadata ( file, NAUT_DESTRUE, ""async"" ) ; nautilus_file_set_mark_exec ( NULL, 0, sizeof ( * file ) ) ; nautilus_file_set_metadata ( file, NULL, ""autilus <S2SV_blank> to <S2SV_blank> arguments"" ) ; nautilus_set_mark_mark_exec ( file, NULL, 0, sizeof ( * file ) ) ; nautilus_file_set_mark_output ( EINVALIDTH ) ; nautilus_mark_mark_mark_mark_mark_mark_value ( file, NAUT_FAILUS_REJECT_TEXT, ""exec"" ) ; nautilus_file_set_data ( file, NULL, NULL, NULL, NULL ) ; nautilus_set_file_mark_mark_file_set_mode <S2SV_ModEnd> ) ;",0
40,,0
41,<S2SV_ModStart> } if (! buffer ) return ; if (,0
42,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; mutex_unlock ( & d -> data, & d -> data_mutex ) ; if ( & d -> data_mutex ) < 0 ) { mutex_unlock ( & d -> data_mutex ) ; mutex_unlock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x80 ; mutex_unlock ( & d -> i2c_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ i2c_usb_generic_rw ( & d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1,",0
43,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
44,<S2SV_ModStart> } } } fix_google_param ( google_out ) ;,0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
46,"<S2SV_ModStart> tsample_t s ; uint16 bps = 0 ; ( void ) TIFFGetField ( in, TIFFTAG_BITSPERSAMPLE, & bps ) ; if ( bps!= 8 ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can <S2SV_blank> only <S2SV_blank> handle <S2SV_blank> BitsPerSample=8 <S2SV_blank> in <S2SV_blank> %s"", ""cpContig2SeparateByRow"" ) ; return 0 ; }",1
47,"<S2SV_ModStart> ) ; struct hugepage_subpool * spool = ( struct hugepage_subpool <S2SV_ModEnd> * ) page_private <S2SV_ModStart> hugetlb_lock ) ; hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, 1 )",1
48,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) { return AVERROR_EOF ; } if (,1
49,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return try_get_page <S2SV_ModEnd> ( buf ->,1
51,"<S2SV_ModStart>, cp, ep2, map, nmap ) ; } else cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> < ep2 ) <S2SV_ModEnd> ND_PRINT ( (",1
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
54,<S2SV_ModStart> config -> pm_max_requests ; fpm_globals. listening_socket = dup ( wp -> listening_socket ),1
55,<S2SV_ModStart> int i ; TWO_PASS <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
56,<S2SV_ModStart> 0 ; } err = handle -> h_err ; <S2SV_ModStart> h_transaction ) { rc <S2SV_ModEnd> = jbd2_journal_stop ( <S2SV_ModStart> ) ; return err? err : rc <S2SV_ModEnd> ; } sb <S2SV_ModStart> t_journal -> j_private <S2SV_ModEnd> ; rc =,1
57,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ext4_inode,0
58,<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = args -> valuelen ;,1
59,<S2SV_ModStart> ) ; } else return <S2SV_ModEnd> ; } <S2SV_null>,0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> len - 2 ; if ( len < stlv_len ) goto trunc ; ND_TCHECK2 ( * ( tptr ), stlv_len ) <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; <S2SV_ModStart> case ISIS_SUBTLV_INSTANCE_LEN : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SUBTLV_SPB_INSTANCE_MIN_LEN ; <S2SV_ModStart> case ISIS_SUB",0
61,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, command ) )",0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,<S2SV_ModStart> == 12 && ( <S2SV_ModStart> flags & TH_SYN ),1
64,"<S2SV_ModStart> -> ipc_socket ; int procfd = payload -> procfd ; <S2SV_ModStart> & LXC_ATTACH_LSM ) && init_ctx -> lsm_label <S2SV_ModStart> int on_exec ; <S2SV_ModEnd> on_exec = options <S2SV_ModStart> : 0 ; if ( lsm_set_label_at ( procfd, on_exec, <S2SV_ModEnd> init_ctx -> lsm_label <S2SV_ModStart> init_ctx -> lsm_label ) <S2SV_ModEnd> < 0 ) <S2SV_ModStart> } } close ( procfd ) ;",0
65,<S2SV_ModStart> error = 0 <S2SV_ModEnd> ; if (,0
66,"<S2SV_ModStart> ( header -> biBitCount == 0 ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> biBitCount <S2SV_blank> %d\\n"", 0 ) ; return OPJ_FALSE ; } if ( header ->",1
67,<S2SV_ModStart> NULL ; } sas_probe_devices ( port ) ;,1
68,<S2SV_ModStart> 0 ) { if ( image -> colors < tga_info. colormap_index ) image -> colors = tga_info. colormap_index ;,1
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> ENOBUFS ; } memset ( & line, 0, sizeof ( line ) ) ;",1
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_blk_ioctl ( bd, cmd ) ; if ( ret < 0 ) return ret ;",1
72,"<S2SV_ModStart> ; uint16_t length ; if (! <S2SV_ModStart>, s ) ) return FALSE",0
73,<S2SV_ModStart> * ureq ; unsigned <S2SV_ModEnd> return - EFAULT,0
74,"<S2SV_ModStart> int m ; if ( n < 0 ) { jas_deprecated ( ""negative <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_pad"" ) ; }",1
75,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) { return AVERROR_INVALIDDATA ; },0
76,<S2SV_ModStart> av_log ( mxf -> fc,1
77,"<S2SV_ModStart> } if ( safe_mount <S2SV_ModEnd> ( path,",0
78,<S2SV_ModStart> + 10 ; if ( psf -> fileoffset < psf -> filelength ) { <S2SV_ModStart> ; } ; } ;,1
79,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( p + l2info -> cookie_len ) ;,1
80,<S2SV_ModStart> NF_STOLEN ; return err == 0? NF_ACCEPT : NF_DROP <S2SV_ModEnd> ; } <S2SV_null>,1
81,"<S2SV_ModStart> * up ; ulen = kzalloc ( up, ulen, ulen ) ; memcpy ( up, ulen, nla_len ) ; memcpy ( up, ulen ) ; memcpy ( up, ulen, ulen ) ; <S2SV_ModStart> ( up, nla_len ) ; memcpy ( up, ulen ) ; memcpy ( up, ulen, ulen ) ; memcpy ( up, nla_len ( up, ulen ), ulen ) ; memcpy ( up, ulen, ulen ) ; }",0
82,<S2SV_ModStart> ) ; } <S2SV_ModEnd> switch ( io,0
83,,0
84,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> if (!,0
85,,0
86,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; netbk_fatal_tx_err ( vif",0
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> < 0 ) <S2SV_ModEnd> bitmap_pos = ext_index_add_object <S2SV_ModStart> name ) ; <S2SV_ModEnd> bitmap_set ( base",1
89,"<S2SV_ModStart> xfr_cmd, fname <S2SV_ModEnd> ) ; free",1
90,<S2SV_ModStart> mixer ) { snd_usb_mixer_disconnect ( mixer ) ;,1
91,<S2SV_ModStart> ) { struct packet_rollover * rollover = NULL ; struct <S2SV_ModStart> EINVAL ; } mutex_lock ( & fanout_mutex ) ; err = - ENOMEM ; <S2SV_ModStart> -> fanout ) ; err = - ENOMEM ; err = - EINVAL ; <S2SV_ModStart> -> fanout ) goto out <S2SV_ModEnd> ; } mutex_unlock ( & <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } out : <S2SV_ModStart> atomic_set ( & <S2SV_ModEnd> rollover -> num_long_set ( & <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> rollover ) ; <S2SV_ModStart> atomic_set ( & <S2SV_ModEnd> rollover -> num_long_set ( & <S2SV_ModEnd> rollover -> rollover <S2SV_ModStart> atomic_set ( & <S2SV_ModEnd> rollover -> num_set <S2SV_ModStart> atomic_set ( & <S2SV_ModEnd> rollover -> rollover <S2SV_ModStart> atomic_set ( & <S2SV_ModEnd> rollover -> fanout <S2SV_ModStart> atomic_set ( & <S2SV_ModEnd> rollover -> rollover <S2SV_ModStart> ( & <S2SV_ModEnd> rollover -> rollover -> rollover <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> rollover = NULL <S2SV_ModStart> } out : <S2SV_ModEnd> -> fanout ;,0
92,<S2SV_ModStart> ipv6_pinfo ) ) ; newnp -> ipv6_mc_list = NULL ; newnp -> ipv6_ac_list = NULL ; newnp -> ipv6_fl_list = NULL,1
93,<S2SV_ModStart> ; if ( table_start <S2SV_ModEnd> ( page ),0
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
95,,0
96,"<S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, ENC28J60_ESTAT ) <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, ENC28J60_ECON1 <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_EIE, ENC28J60_ECON1 <S2SV_ModEnd> ) ) ;",0
97,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
98,<S2SV_ModStart> } <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
99,"<S2SV_ModStart>, inode, map,",0
100,<S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_TCHECK,0
101,"<S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, cgroup ) ) { ret = - ENOENT ; goto out ; } if (!",1
102,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int row = 0 ; memset <S2SV_ModEnd> ( yv_stride, <S2SV_ModStart> y ) { memset <S2SV_ModEnd> ( source, <S2SV_ModStart> stride ) ; memset <S2SV_ModEnd> ( y_stride, <S2SV_ModStart> stride ) ; memcpy <S2SV_ModEnd> ( ybf -> <S2SV_ModStart> mi_stride ) ; memset <S2SV_ModEnd> ( y_stride, <S2SV_ModStart> stride ) ; memset <S2SV_ModEnd> ( ybf ->",0
103,"<S2SV_ModStart> ptr ) { struct floppy_raw_cmd cmd = * ptr ; cmd. next = NULL ; cmd. kernel_data = NULL ; <S2SV_ModStart> ( param, & cmd <S2SV_ModEnd>, sizeof ( <S2SV_ModStart>, sizeof ( cmd <S2SV_ModEnd> ) ) ;",1
104,"<S2SV_ModStart> : if (! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) bprm -> per_clear |= PER_CLEAR_ON_SETID ; if (",1
105,"<S2SV_ModStart> bh ) { <S2SV_ModEnd> int error ; <S2SV_ModStart> error ; struct mb2_cache * ext2_mb_cache <S2SV_ModEnd> * ext2_mb_cache = <S2SV_ModStart> bh = mb2_cache_entry_insert ( ext2_mb_cache, hash, hash, bh -> bh -> b_blocknr <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( ext2_mb_cache, hash <S2SV_ModEnd> ) ; } <S2SV_ModStart> } } mb2_cache_entry_entry_insert ( bh, bh -> b_block,",0
106,<S2SV_ModStart> rlen ) ; if ( rlen < 0 ) { return socket_protocol_error ; },0
107,<S2SV_ModStart> tf = ( <S2SV_ModEnd> luaY_parser ) (,1
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.",1
110,"<S2SV_ModStart> ; dl = kzalloc <S2SV_ModEnd> ( size,",1
111,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static u_int <S2SV_ModEnd> rtr_pki_rtr_print ( netdissect_options <S2SV_ModStart> * tptr, const u_int len, const u_int len, const <S2SV_ModStart> * tptr ; ND_TCHECK_8BITS ( tptr ) ; if ( * tptr!= 0 ) { ND_PRINT ( ( ndo, ""[|T]"" ) ) ; return len ; } if (! ND_TCHECK_16BITS ( * tptr ) ) { ND_TCHECK_16BITS ( tptr + 2 ) ; ND_TCHECK_16BITS ( * tptr, sizeof ( * tptr ) ) ; return ; } ND_TCHECK_16BITS ( tptr + 2 ) ;",0
113,"<S2SV_ModStart> ; int n <S2SV_ModEnd> ; skb -> <S2SV_ModStart> rose_facilities_struct ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> data + ROSE_CALL_REQ_FACILITIES_OFF, skb -> len - ROSE_CALL_REQ_FACILITIES_OFF, <S2SV_ModEnd> & facilities )",1
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,<S2SV_ModStart> } if ( ( safe_calloc <S2SV_ModEnd> ( (,0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return - EINVAL ;",0
117,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; int ret <S2SV_ModStart> ) ; } o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
118,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",1
119,"<S2SV_ModStart> == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> is <S2SV_blank> absolute"" ) ; return ( ARCHIVE_FAILED ) ; } separator = * src ++ ; } <S2SV_ModEnd> for ( ;",1
120,<S2SV_ModStart> <S2SV_null> <S2SV_null> static TPM_2SV_null TPM_2SV_null> TPM2SV_null> TPM_2SV_null> <S2SV_ModEnd> r2SV_null>,0
121,"<S2SV_ModStart> inmem )? jas_stream_memopen2 <S2SV_ModEnd> ( 0,",0
122,<S2SV_ModStart> s ) { if ( s == 0 ) return ( ( void * ) NULL ) ;,1
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! ib_safe_file_access ( fp ) ) ) return - EACCES ; if (,1
124,<S2SV_ModStart> ; END_OF_READING : <S2SV_ModEnd> CloseBlob ( image <S2SV_ModStart> -> previous ; if ( tmp == image2 ) image2 = ( Image * ) NULL ;,0
125,<S2SV_ModStart> ( peer ) peer = maybe_get_net <S2SV_ModEnd> ( peer ),1
126,,0
127,<S2SV_ModStart> m_family ) ; if ( proto == LLDP_MGMT_ADDR_NONE ) continue <S2SV_ModEnd> ; if (,1
128,<S2SV_ModStart> - 1 ; if ( length < 2 ) goto trunc ;,0
129,<S2SV_ModStart> default_asconf ) { spin_lock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ; <S2SV_ModStart> = 0 ; },0
130,"<S2SV_ModStart> GetBitContext * gb, int * profile, int * level ) { * <S2SV_ModEnd> profile = * <S2SV_ModStart> 4 ) ; * <S2SV_ModEnd> profile = get_bits <S2SV_ModStart> 8 ) ; * <S2SV_ModEnd> profile = * <S2SV_ModStart> 8 ) * <S2SV_ModEnd> profile = get_bits <S2SV_ModStart> 8 ) ; * <S2SV_ModEnd> profile = get_bits <S2SV_ModStart> ; } * <S2SV_ModEnd> level = get_bits",0
131,<S2SV_ModStart> unsigned char * head ; size = readw ( mpu -> MIDQ + JQS_wHead ) ; if ( ++ head > size ) goto out ; spin_unlock_irqrestore ( & head -> dev -> dev -> dev -> MIDQ + JQS_wHead ) ; size = readw ( mpu -> dev -> dev -> MIDQ + JQS_wSize ) ; if ( ++ head > size ) goto out ; spin_unlock_irqrestore ( & size ) ; <S2SV_ModStart> + JQS_null> <S2SV_null> <S2SV_null>,0
132,<S2SV_ModStart> = 0 ;,0
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> ( s_poll_interval <S2SV_ModEnd>, ""\\n"" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> =\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> ""\\n"" ) ; int poll_interval = s_poll_interval * 8 ; int poll_poll_interval = strtol ( poll_poll_interval, poll_interval, NULL ) ; if ( poll_interval > 0 ) || ( poll_interval > 0 ) ) { poll_error ( ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> ""\\n"" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> ""\\n"" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> ""\\n""\\n"" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
136,<S2SV_ModStart> * buf ; unsigned int res ; <S2SV_ModStart> int err = posix_acl_len <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) return - EFAULT <S2SV_ModEnd> ; if (,0
137,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,1
138,<S2SV_ModStart> ; while ( ( <S2SV_ModStart>!= 0 ) && i < <S2SV_ModEnd> ) { i,0
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,<S2SV_ModStart> [ plane ] && in -> linesize [ plane ],1
141,"<S2SV_ModStart> ( szFileName, pszFileName, <S2SV_ModStart> ) - 5 <S2SV_ModEnd> ) ; }",1
142,<S2SV_ModStart> ; if ( * state == NULL ||,0
143,<S2SV_ModStart> >> 2 ; if ( q + o >= e ) goto out ;,0
144,"<S2SV_ModStart> __be32 new_saddr ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. srr ) daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",1
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( * tptr, sizeof ( struct eigrp_common_header ) ) ; <S2SV_ModStart> ) ) ; if ( len < sizeof ( struct eigrp_common_header ) ) { ND_PRINT ( ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ) ; goto trunc ; } if ( len < sizeof ( struct eigrp_header ) ) { ND_PRINT ( ( ( ( ndo, ""AVP <S2SV_blank> (too <S2SV_blank> short, <S2SV_blank> short, <S2SV_blank> < <S2SV_blank> %u)"", ( u_int ) sizeof ( struct eigrp_header ) ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < sizeof ( struct eigrp_header ) ) { ND_PRINT ( ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> (too <S2SV_blank> short, <S2SV_blank> < <S2SV_blank> %u)"", ( u_int ) sizeof ( struct eigrp_header ) ) ) ) ; return ; }",0
147,<S2SV_ModStart> ) ; } <S2SV_ModEnd> memset ( addr,0
148,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> r_null>,0
149,"<S2SV_ModStart>, '/' ) ; if ( ptr == NULL ) return ( ENOENT ) ; ptr ++ <S2SV_ModEnd> ; rw_exit (",1
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; if ( flags & EXT4_GET_BLOCKS_CONVERT ) split_flag |= EXT4_EXT_DATA_VALID2 ;,1
151,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return - EINVAL ;",0
152,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
153,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), & final ) ; rcu_read_unlock ( <S2SV_ModEnd> ) ; dst",1
154,<S2SV_ModStart> { uint32 nstrips <S2SV_ModEnd> ; } if (,0
155,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2SV_null> <S2SV_null>,0
156,<S2SV_ModStart> options. disable_forwarding ||! use_privsep,1
157,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
158,"<S2SV_ModStart> ) ; } if ( ( ( MagickSizeType ) image -> columns * image -> rows ) > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",1
159,<S2SV_ModStart> ret ) ; <S2SV_ModEnd> } if (,0
160,<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = 0 ;,0
161,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( c,0
162,<S2SV_ModStart> ( gns -> user ) > 0,0
163,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
164,"<S2SV_ModStart> c -> nreslevels <= <S2SV_ModEnd> s -> reduction_factor <S2SV_ModStart> -> reduction_factor ) { av_log ( s -> avctx, AV_LOG_ERROR, ""reduction_factor <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return AVERROR ( EINVAL ) ; }",0
165,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
166,<S2SV_ModStart> ; bool do_vnet = false ; bool do_vnet_vnet <S2SV_ModStart> -> has_vnet_hdr ) { <S2SV_ModStart> = false ; do_vnet_hdr_len ; do_vnet = false ; } <S2SV_ModStart> ; if ( do_vnet <S2SV_ModEnd> ) { if,0
167,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> sctp_auth_asoc_init_active_key ( asoc,1
168,<S2SV_ModStart> return false ; if ( ndp_msg_type_info ( msg_type ) -> addrto_validate ) return ndp_msg_type_info ( msg_type ) -> addrto_validate ( & msg -> addrto ) ; else,1
169,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> label_null> <S2SV_null>,0
170,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
171,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
172,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> if ( cpi <S2SV_ModStart> = 0 ; } <S2SV_ModEnd> if ( cpi <S2SV_ModStart> -> oxcf.,0
173,"<S2SV_ModStart> } num ++ ; if ( num > MaxAllocSize / ITEMSIZE ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> levels <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num, ( int ) ( MaxAllocSize / ITEMSIZE ) ) ) )",1
174,"<S2SV_ModStart> * bh ; struct mb2_cache * ce ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> ( ext4_mb_cache, <S2SV_ModStart> ) ; ce = mb2_cache_entry_find_mb_cache <S2SV_ModEnd> ( ext4_mb_cache,",0
175,<S2SV_ModStart> err_info ) { <S2SV_ModEnd> if (! <S2SV_ModStart> goto err ; } return FALSE,0
176,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
177,<S2SV_ModStart> if ( left == 0 && extend ) return 0 ; if ( left,1
178,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; },0
179,"<S2SV_ModStart> ) / 3 ) ThrowReaderException ( CorruptImageError, ""InvalidColormapIndex"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries",0
180,"<S2SV_ModStart> - ENOMEM ; * ( ( struct vbg_ioctl_hdr * ) buf ) = hdr ; <S2SV_ModStart> copy_from_user ( buf + sizeof ( hdr ) <S2SV_ModStart> * ) arg + sizeof ( hdr ), hdr. size_in - sizeof ( hdr ) <S2SV_ModEnd> ) ) {",1
181,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) { hstartrow <S2SV_ModEnd> = ( numrows <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; n = <S2SV_ModStart> & a [ hstartrow <S2SV_ModEnd> * stride ],0
182,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
183,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
184,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_mb_cache ) { ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ; sbi -> s_mb_cache = NULL ; } <S2SV_ModEnd> if (!,1
185,"<S2SV_ModStart> ""return - EINVAL <S2SV_ModEnd> ; } if",0
186,"<S2SV_ModStart> ""setregid"" ) ; <S2SV_ModEnd> char * arg <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [",1
187,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) <S2SV_ModStart> ci_parent ) ; else return NULL ;,1
188,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { spin_unlock",0
189,<S2SV_ModStart> ( pb ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA,1
190,<S2SV_ModStart> if ( q < p || q,1
191,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = &,1
192,<S2SV_ModStart> char * dest <S2SV_ModEnd> ; if (,0
193,<S2SV_ModStart> prev ) ; n -> mounts += n -> pending_mounts ; n -> pending_mounts = 0 ;,1
194,<S2SV_ModStart> ) ; } <S2SV_ModEnd> goto out ;,0
195,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
196,<S2SV_ModStart> } else { if ( ps_dec -> ai4_num_mbs ) { return IHEVCD_INVALID_PARAMETER ; },0
197,<S2SV_ModStart> 1u << DB_VECTOR ) | ( 1u << AC_VECTOR,1
198,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> 1 ] ; u_int stringlen ; stringlen = len ; if ( stringlen > NFSX_V3FHMAX ) stringlen = NFSX_V3FHMAX ; <S2SV_ModStart>, sfsname, stringlen <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ; temp [ stringlen <S2SV_ModEnd> ] = '\\0'",1
199,"<S2SV_ModStart> unsigned int flags, struct rt6_info * rt <S2SV_ModStart> ( & fhdr, rt",1
200,<S2SV_ModStart> ( res ) goto err_add_port <S2SV_ModEnd> ; res = <S2SV_ModStart> port ) ; err_add_port : hsr_del_node ( & hsr -> self_node_db ) ;,1
201,<S2SV_ModStart> ; # endif <S2SV_ModEnd> if ( cmd,0
202,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int stride_stride ; const <S2SV_ModStart> int bw = vpx_get_buffer <S2SV_ModEnd> ( w, <S2SV_ModStart> stride, vpx_stride <S2SV_ModEnd> ) { const <S2SV_ModStart> stride ; const int stride <S2SV_ModEnd> ; const uint16_t",0
203,<S2SV_ModStart> p ++ ) ; if ( ( void * ) p > head -> iov_base + head -> iov_len ) return 0,1
204,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { return assign_eip_far ( ctxt, dst, ctxt -> mode == X86EMUL_MODE_PROT64 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
205,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
206,"<S2SV_ModStart> ; remaining = tvb_reported_length_remaining <S2SV_ModEnd> ( tvb,",1
207,"<S2SV_ModStart> -> inode, fmode_t <S2SV_ModEnd> ) ; if",0
208,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
209,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> return 1 ; },0
210,<S2SV_ModStart> ; if ( pmc_overflow ( val ) <S2SV_ModEnd> ) write_pmc (,1
211,"<S2SV_ModStart> ( * b + len, * avail - len <S2SV_ModEnd>, nl )",1
212,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd> ; int string type <S2SV_ModStart> ; if (! PyS2SV_null> <S2SV_null> <S2SV_null>",0
213,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
214,"<S2SV_ModStart> string ) ) i ++, <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; <S2SV_ModEnd> if ( c",0
215,"<S2SV_ModStart> == 0 ) mark_key_instantiated ( key, 0 <S2SV_ModEnd> ) ; up_write",1
216,<S2SV_ModStart> <= * len && plen > 0,1
217,<S2SV_ModStart> ; if (! retval ) <S2SV_ModEnd> retval = context,0
218,<S2SV_ModStart> ; if ( <S2SV_ModEnd> timeout == NULL <S2SV_ModStart> ; if ( compat_get_timespec <S2SV_ModEnd> ( & ktspec,0
219,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
220,<S2SV_ModStart> ndev ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
221,<S2SV_ModStart> |= MSG_TRUNC ; msg -> msg_namelen = 0 ;,0
222,<S2SV_ModStart> } if ( <S2SV_ModEnd> udp_specified && settings,1
223,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
224,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( x,0
225,<S2SV_ModStart> found = 0 <S2SV_ModEnd> ; const char <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( found,1
226,"<S2SV_ModStart> int validate_event ( struct pmu * pmu, <S2SV_ModStart> arm_pmu * armpmu <S2SV_ModEnd> ; struct hw_perf_event <S2SV_ModStart> -> pmu!= pmu ) return 0 ; if ( event -> pmu!= <S2SV_ModStart> return 1 ; armpmu = to_arm_pmu ( event -> pmu ) ;",1
227,"<S2SV_ModStart> bool new_idmap_permitted ( const struct file * file, <S2SV_ModStart>, cap_setid ) && file_ns_capable ( file, ns -> parent, cap_setid )",1
228,<S2SV_ModStart> j ++ ) { if ( a -> type == szMAPI_BINARY ) <S2SV_ModStart> ) ; } },1
229,"<S2SV_ModStart> ; u8 * buf <S2SV_ModEnd> ; int ret <S2SV_ModStart> = 0 ; buf = kmalloc ( sizeof ( buf ), GFP_KERNEL ) ; if (! buf <S2SV_ModEnd> ) return - ENOMEM <S2SV_ModStart> ; kfree ( buf <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; kfree ( buf <S2SV_ModEnd> ) ; return",0
230,"<S2SV_ModStart> ) ) { ND_TCHECK2 ( * tptr, 1 ) ; <S2SV_ModStart> ; if ( len < 4 ) goto trunc ; ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; if ( len < 2 ) goto trunc ; ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; <S2SV_ModStart> ) ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return - 1 ; } <S2SV_ModStart> ++ ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return <S2SV_ModEnd> ; } <S2SV_null>",0
231,"<S2SV_ModStart> princ ) ; success = data_eq_string ( * realm, <S2SV_ModEnd> handle -> params <S2SV_ModStart> params. realm ) && data_eq_string ( * c1, ""kadmin"" ) &&! data_eq_string ( * c2, ""history"" ) ; <S2SV_ModEnd> fail_princ : if",1
232,<S2SV_ModStart> ; if ( shader_rec_offset < args -> bin_cl_size ||,1
233,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
234,<S2SV_ModStart> vma -> vm_file ) ; down_read ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModStart> ; out : up_read ( & EXT4_I ( inode ) -> i_mmap_sem ) ;,1
235,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
236,<S2SV_ModStart> arg ) { char ch = * arg ; switch ( ch <S2SV_ModEnd> ) { case <S2SV_ModStart> ';' : case '=' : case <S2SV_ModStart> b ++ = ch <S2SV_ModEnd> ; break ;,1
237,"<S2SV_ModStart>, cp, ep2 <S2SV_ModEnd>, map,",0
238,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static GsmIceConnection_connection <S2SV_ModEnd> ( void,0
239,<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) < skb -> head +,1
240,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> return 0 ;,0
241,<S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ;,1
242,<S2SV_ModStart> & RCV_SHUTDOWN ) return 0 ; <S2SV_ModEnd> return err ;,0
243,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
244,<S2SV_ModStart> const buffers [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> v_stride <S2SV_ModEnd> } ; int,0
245,"<S2SV_ModStart> * md ; ret = <S2SV_ModEnd> md -> subject <S2SV_ModStart> md ) goto cleanup ; ret = rfc2253_name <S2SV_ModEnd> ( X509_dn <S2SV_ModStart> md -> subject_name <S2SV_ModEnd>, & <S2SV_ModStart> cert ), & <S2SV_ModEnd> md -> subject_dn <S2SV_ModStart> md -> subject_dn ) ; if ( ret ) goto cleanup ; ret =",0
246,"<S2SV_ModStart> srcu ) ; kvm_iommu_unmap_pages ( kvm, & old ) ;",0
247,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ru,1
248,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
249,<S2SV_ModStart> j ; u_int length_left ; length_left = length ; ND_TCHECK ( rp -> rip6 ) ; if ( length_left < ( length_left ) ) goto trunc ; <S2SV_ModStart> ni ) ; length_left -= length ; length_left -= ( length_left ) ; <S2SV_ModStart> ni ) goto trunc ; length_left <S2SV_ModEnd> = ( length_left <S2SV_ModStart> ni ) ; length_left -= length_left ; length_left -= length ; <S2SV_ModStart> case RIP6 : if ( length_left!= length_left ) goto trunc ; length_left -= length_left ; length_left -= length ; <S2SV_ModStart> ni -> rip6_left ; if ( length_left!= length_left ) goto trunc ; if ( length_left >= length_left ) goto trunc ; length_left -= ( length_left <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ni ) { ND_TCHECK ( rp -> rip6 ) ; length_left -= ( rp -> rip6_left ) ; if ( length_left!= length_left ) goto trunc ; length_left ; length_left -= ( length_left <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ni ) goto trunc ; length_left <S2SV_ModEnd> ( length_left <S2SV_ModStart> ni ) ; length_left,0
250,<S2SV_ModStart> < 0 ) goto error ; <S2SV_ModEnd> goto set ;,1
251,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( cpi,0
252,"<S2SV_ModStart> argc ++ ; retval = bprm_change_interp ( iname, bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> ; interp_file =",1
253,<S2SV_ModStart> ; int iSrc <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> res -> ContribRow <S2SV_ModStart> u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ].,1
254,"<S2SV_ModStart> user -> user,",0
255,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".cfg\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n""",1
256,<S2SV_ModStart> len = 0 <S2SV_ModEnd> ; if (,0
257,"<S2SV_ModStart> ( mobj ) { size_t granularity = BIT ( tee_mm_sec_ddr ) ; <S2SV_ModStart> ( mobj, granularity ) ; } <S2SV_ModEnd> return mobj ;",0
258,<S2SV_ModStart> -> it_overrun += 1LL <S2SV_ModEnd> << i ;,1
259,"<S2SV_ModStart> const node * n0, bool <S2SV_ModEnd> is_async ) { <S2SV_ModStart> is_async ) { const n = CHILD ( n, 0 ) ; if ( n0 == 2 ) { n0 = CHILD ( n, ""async"", n0 ) ; return NULL ; } else if ( CHILD ( n, n0 ) == 0 ) { n = CHILD ( n, ""async"" ) ; return NULL ; } <S2SV_ModStart> -> type_comment = CHILD ( n0 )? CHILD ( n0 <S2SV_ModEnd>, NULL )",0
260,<S2SV_ModStart> == 0 ) return ;,0
261,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static const VP9_COMMON * const MACROBLOCKD * const xd = xd -> mbmi. mbmi_ext ; MACROBLOCKD * const xd = xd -> mbmi_ext ; const MB_MODE_INFO * const mbmi_ext = xd -> mbmi_ext ; <S2SV_ModStart> ( mbmi, mi_row, mi_col, mi_col, mi_col, mbmi_col, xd -> mbmi_ext, mbmi_ext, mbmi_ext <S2SV_ModEnd>, mi_row, <S2SV_ModStart> mi_col, xd <S2SV_ModEnd>, mi_col, <S2SV_ModStart> = BLOCK_SIZE bsize ; <S2SV_ModEnd> if ( xd",0
262,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
263,<S2SV_ModStart> ) ; uint32_t <S2SV_ModEnd> n ; if <S2SV_ModStart> = r -> qiov. size <S2SV_ModEnd> / 512 ;,0
264,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
265,<S2SV_ModStart> SV_null> <S2SV_null> static,0
266,<S2SV_ModStart> ) break ; if ( l > ll ) l = ll ;,1
267,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
268,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( *,0
269,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
270,"<S2SV_ModStart> ret ; char * buffer ; uint8_t value ; buffer = kmalloc ( 1, GFP_KERNEL ) ; if (! buffer ) return - ENOMEM <S2SV_ModEnd> ret ; value <S2SV_ModStart>, 1, buffer <S2SV_ModEnd>, 0, <S2SV_ModStart> ret ) ; if ( <S2SV_ModEnd> ret >= 0 <S2SV_ModStart> ret ) { kfree ( buffer ) ; return value ; } buffer = buffer ; kfree ( buffer ) ; return value ; }",0
271,"<S2SV_ModStart> * arg ; memset <S2SV_ModEnd> ( pTab,",0
272,"<S2SV_ModStart> ; } } s -> append_char ( s, 0 ) ; strncpy <S2SV_ModEnd> ( outbuffer,",1
273,<S2SV_ModStart> Lut ) ; Lut = NULL ;,0
274,<S2SV_ModStart> = 0 ; ( i + 3 ) <S2SV_ModEnd> < sec -> <S2SV_ModStart> = 0 ; ( i + 7 ) <S2SV_ModEnd> < sec ->,1
275,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2 ) ) { ND_TCHECK2 ( tptr, tptr, tptr + 2 ) ; <S2SV_ModStart> 2 ) ; ND_TCHECK2 ( tptr, tptr, 2 )",0
276,<S2SV_ModStart> ; if ( ptr_hbe_txposer ->,0
277,"<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> low ) ; }",0
278,<S2SV_ModStart> int fq ; struct blk_fq ; <S2SV_ModStart> q ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
279,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
280,<S2SV_ModStart> ) continue ; if ( vif -> tx. sring -> req_prod - vif -> req_prod - vif -> tx. tx. tx. sring -> req_prod - vif <S2SV_ModEnd> ) { netdev <S2SV_ModStart> size ) ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> size ) ) continue ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> 0 ) ) continue ; netbk_fatal_tx_err ( vif <S2SV_ModEnd> ) ; netdev,0
281,<S2SV_ModStart> ; # endif <S2SV_ModEnd> if ( cmd,0
282,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct net,1
283,<S2SV_ModStart> conn ) ; if ( <S2SV_ModStart> ( conn )!= 0 ) return,1
284,"<S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_ERROR <S2SV_ModEnd> ) ; netbk <S2SV_ModStart> netbk, XEN_NETIF_RSP_ERROR <S2SV_ModEnd>, XEN_NETIF_ERROR ) <S2SV_ModStart> netbk, pending_idx <S2SV_ModEnd>, XEN_NETIF_NETIF_ERROR ) <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY",0
285,,1
286,"<S2SV_ModStart> ) NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ;",0
287,"<S2SV_ModStart> len < 0 <S2SV_ModEnd> ) { syslog <S2SV_ModStart> 1 ; } if ( addr. nl_pid ) { syslog ( LOG_WARNING, ""Received <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> untrusted <S2SV_blank> pid:%u"", addr. nl_pid ) ; continue ; }",1
288,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
289,<S2SV_ModStart> client ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
290,<S2SV_ModStart> * output ; <S2SV_ModEnd> } if (,0
291,"<S2SV_ModStart>, nameptr, lfi, fname, UDF_NAME_LEN <S2SV_ModEnd> ) ; if",1
292,"<S2SV_ModStart> ip_vs_timeout_user t ; memset ( & t, 0, sizeof ( t ) ) ;",1
293,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
294,<S2SV_ModStart> ; ssize_t result ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
295,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> out ; } ret = - ENOENT <S2SV_ModEnd> ; if (",0
296,<S2SV_ModStart> ) ) { put_disk ( disk ) ;,1
297,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
298,"<S2SV_ModStart> { if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( ( image <S2SV_ModStart> { if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( number_pixels,",1
299,<S2SV_ModStart> 0 ) ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; },1
300,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
301,"<S2SV_ModStart> ; # endif install_keyword ( ""umask"", & umask_handler ) ;",1
302,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
303,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> kfree ( tmpbuf,1
304,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; }",1
305,<S2SV_ModStart> info = boxinfo <S2SV_ModEnd> ; box ->,0
306,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) {",0
307,<S2SV_ModStart> ; int copylen = 0 <S2SV_ModStart> goto err ; err = - EMSGSIZE ; err = - EMSGSIZE ; if ( unlikely ( count > MAX_SKBIO ) copylen = 0 ; if ( copylen > MAX_SKB_FRAGS ) copylen = 0 ; if ( copylen < vnet_hdr_len ) copylen = 0 ;,0
308,<S2SV_ModStart> nexthdr ) { unsigned int <S2SV_ModEnd> offset = sizeof <S2SV_ModStart> ( struct ipv6_optlen <S2SV_ModEnd> ; struct ipv6_opt_hdr <S2SV_ModStart> offset ) ; } if ( offset >= packet_len ) return - EINVAL ;,0
309,"<S2SV_ModStart> sync_data, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> int vpx_wb_write_bit_buffer ) vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
310,<S2SV_ModStart> D_S2SV_null> <S2SV_null> <S2SV_null> static,0
311,<S2SV_ModStart> 0 ; } aux. tp_padding = 0 ;,1
312,<S2SV_ModStart> } if ( <S2SV_ModEnd> djrcv_dev -> paired_dj_devices,1
313,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
314,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
315,"<S2SV_ModStart> asconf ) { sctp_asconf_chunk_t * addip = ( sctp_chunk_t * ) sctp_addip ; if ( param. p -> chunk_hdr == SCTP_PARAM_IPV6_PARAM_IPV6_ERROR ) { sctp_asconf_ack = false ; sctp_asconf_chunk_tohs ( param, param, param. p -> chunk_id ) ; if ( param. p -> type == SCTP_PARAM_ADDRESS || param. p -> type == SCTP_PARAM_IPV6_PARAM_IPV6_IPV6_ASF_ERROR ) continue ; sctp_asconf_ack = false ; sctp_chunk_t ( param. p -> type ) ; if ( param. p -> type == SCTP_PARAM_PARAM_IPV4_PARAM_IPV_ADDRESS || param. p -> type == SCTP_PARAM_IPV4_IPV6_PARAM_IPV6_ip || param. p",0
316,"<S2SV_ModStart> 101, ( ""jas_malloc(%zu)\\n"" <S2SV_ModEnd>, size )",0
317,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
318,<S2SV_ModStart> CPU_FTR_TM_COMP ) && hv_enabled <S2SV_ModEnd> ; break ;,1
319,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
320,"<S2SV_ModStart> key_name ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. key, HV_KVP_EXCHANGE_MAX_KEY_SIZE / 2 <S2SV_ModStart> value ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. value, HV_KVP_EXCHANGE_MAX_VALUE_SIZE / 2",1
321,<S2SV_ModStart> -> log_file ; d -> log_file = eventfp ;,1
322,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
323,"<S2SV_ModStart> * parg ; unsigned long n ; void * cmd = kmalloc ( size_t * ) arg ; void * ) arg = NULL ; void _IOC_DIR ( _IOC_SIZE, _IOC_SIZE ( cmd ), _IOC_DIR ( cmd ) ) ; if ( _IOC_SIZE ( cmd )!= _IOC_SIZE ) { ret = - EINVAL ; goto out ; } else { ret = - EINVAL ; if ( _IOC_SIZE ( cmd ) * ) mbuf = mbuf ; if ( _IOC_DIR ( _IOC_SIZE ( cmd ) & _IOC_SIZE ( _IOC_SIZE ( cmd ) & _IOC_SIZE ( cmd ), n ) ; if ( _IOC_SIZE ( cmd )!= _IOC_SIZE ( _IOC_SIZE ) ) { memset ( parg, 0, n ) ; } else { memset ( parg, n ) ; } else { copy_from_user ( cmd ) ; } else { memset ( parg, 0, n ) ; } else { memset ( cmd ) ; } else { copy_from_user (",0
324,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) ; },0
325,"<S2SV_ModStart> u16 size, const <S2SV_ModStart> data ) { void * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, buf <S2SV_ModEnd>, size, <S2SV_ModStart> 500 ) ; kfree ( buf ) ; return ret ;",1
326,"<S2SV_ModStart> ""return - EINVAL <S2SV_ModEnd> ; } if",0
327,"<S2SV_ModStart> ) { file = nautilus_file_get_metadata ( file, NAUTILUS_METADATA_FILE_DESKTOP_FILE_TRUSTED, NULL, ""%s"", nautilus_file_file -> file ) ; nautilus_file_set_metadata ( file, NAUTILUS_METADATA_KEY_FILE_FILE_DESKTOP_FILE_FILE_FILE_FILE_TRUSTED, NULL, nautilus_file -> file ) ; nautilus_file_file_file_file_set_metadata ( file, NAUTILUS_DESKTOP_FILE_FILE_FILE_FILE_FILE_TRUSTED, ""%s"", parameters -> file ) ; <S2SV_ModEnd> screen = file",0
328,<S2SV_ModStart> ; if ( urb -> actual_length > 0 &&,1
329,"<S2SV_ModStart> * server, struct smb_vol * vol ) { <S2SV_ModStart> server ) continue ; if ( strncmp ( server -> smb_ses_list ) continue ; if ( vol -> smb_list ) continue ; if ( strncmp ( server -> password, vol -> smb_ses_uid ) continue ;",0
330,<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if ( cfg -> cfg. g_w || cfg -> g_h!= ctx -> cfg. g_w || cfg -> g_h!= ctx -> cfg. g_w || cfg -> g_h!= ctx -> g_h ) || ( ctx -> cfg. g_pass!= ctx -> cfg. g_h ) || ( ctx -> cfg. g_width && ( ctx -> cfg. g_h!= ctx -> cfg. g_h ) || ( ctx -> cfg. g_frame_width && ( ctx -> cfg. g_h!= ctx -> initial_height ) || ( ctx -> cfg. g_width && cfg. g_w > ctx -> cpi -> cpi -> initial_height ) ) || ( cpi -> initial_frame_width && ( int ) force_width && ( ctx -> cfg. g_w > cpi -> ctx -> initial_height ) ) || ( cpi -> cfg. g_,0
331,"<S2SV_ModStart> =='<S2SV_blank>') { input ++ ; } <S2SV_ModEnd> ptr = strchr <S2SV_ModStart> off ) ) { <S2SV_ModStart> ) ; } } <S2SV_ModStart> ) ) ) { <S2SV_ModStart> ""Unknown <S2SV_blank> filesystem <S2SV_blank> type\\n"" ) ; } <S2SV_ModStart> offset ) ) { <S2SV_ModStart> input ) ; }",1
332,"<S2SV_ModStart> inode ) ; struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> ; if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",1
333,<S2SV_ModStart> key * keyring ; if ( new -> thread_keyring ) return 0,1
334,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( scanned,1
335,"<S2SV_ModStart> orig ) ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; <S2SV_ModStart> mrb_io_alloc ( mrb <S2SV_ModEnd> ) ; DATA_TYPE",1
336,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
337,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> if ( cpi,0
338,"<S2SV_ModStart> return res ; res = utee_param_to_param ( utc, <S2SV_ModEnd> param, callee_params <S2SV_ModStart>, callee_params ) ; res = res",0
339,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, old_desc, new_desc ; const struct x86_emulate_ops * ops = cpl ( ctxt ) ; ops -> ops -> ops = cpl ( ctxt ) ; ops -> get_segment ( ctxt, & old_cs, & old_desc, NULL, VCPU_SREG_CS ) <S2SV_ModStart> ; rc = __load_segment_descriptor <S2SV_ModEnd> ( cpl, <S2SV_ModStart> sel, VCPU_SREG_CS ) ; rc = __load_segment_descriptor <S2SV_ModEnd> ( cpl, <S2SV_ModStart> sel, VCPU_SREG_CS, false, & old_desc <S2SV_ModEnd>, VCPU_SREG_CS ) <S2SV_ModStart> return X86EMUL_CS <S2SV_ModEnd> ; rc = <S2SV_ModStart> return X86EMUL_CONTINUE ; rc = assign_eip_far ( ctxt, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE ) { WARN_ON (! ctxt -> mode!= X86EMUL_MODE_PROT64 ) ; ops -> set_segment ( ctxt, old_cs, & old_desc,",0
340,<S2SV_ModStart> -> band = av_calloc <S2SV_ModEnd> ( reslevel -> <S2SV_ModStart> -> prec = av_calloc <S2SV_ModEnd> ( reslevel ->,1
341,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
342,<S2SV_ModStart> * sizeof ( struct reloc_struct_t <S2SV_ModEnd> ) ) ;,1
343,<S2SV_ModStart> info. si_code!= SI_QUE ) { SIGUE ; },0
344,<S2SV_ModStart> * p_tx0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> * p_ty0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( OPJ_INT32 ),0
345,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * create_null>,0
346,"<S2SV_ModStart> classes = NULL ; zval * retval <S2SV_ModStart> ; } } retval = php_var_ex ( & var_unserialize_conv ( & value, retval <S2SV_ModEnd> ) ; } <S2SV_ModStart> RETURN_FALSE ; } <S2SV_ModEnd> if (!",0
347,<S2SV_ModStart> goto __u64 <S2SV_ModEnd> ; tu ->,0
348,"<S2SV_ModStart> tmp_strsize ) { ISOM_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> ) ; } ISOM_DECREASE_SIZE ( ptr, 1 )",0
349,"<S2SV_ModStart>. get_alg_priv ( ctx ) <S2SV_ModEnd>, get_alg_priv (",0
350,"<S2SV_ModStart> } else { u_int res ; uint32_t * args ; <S2SV_ModStart> = NULL ; } <S2SV_ModEnd> } if ( strlen ( <S2SV_ModStart> ( args, ""%s"", _Iu"", __LINE__ ) == - 1 ) { pr_err ( ""%s: <S2SV_blank> %s"", __func__, __func__, strchunk ) ; } else { log_printf ( ""%s"", __func__, err_args ) ; return - 1 ; }",0
351,<S2SV_ModStart> info. si_code!= SI_QUE ) { SIGUE ; },0
352,<S2SV_ModStart> ; char * p <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) <S2SV_ModEnd> return 0 ;,0
353,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxw, offx <S2SV_ModEnd> ) img -> <S2SV_ModStart> int ) * <S2SV_ModEnd> ; upb = <S2SV_ModStart> maxw = ( size_t ) malloc ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> goto fails ; offx = img -> comps [ 0 ]. w ; offx = b ; loopmaxw = img -> comps [ 0 ]. w ; offx = img -> comps [ 0 ]. w = w ; loopmaxw = b ; offx = offx = img -> comps [ 0 ]. w = img -> comps [ 0 ]. w = img -> comps [ 0 ]. w ; offx = img -> comps [ 0 ]. w = w ; offx = img -> comps [ 0 ]. w = img -> comps [ 0 ]. w = w ; loopmaxw = img -> comps [ 0 ]. w ; offx = img -> comps [ 0 ]. w = img -> comps [ 0",0
354,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { switch <S2SV_ModStart> { switch ( fmode <S2SV_ModEnd> ) { case <S2SV_ModStart> ( state == fmode <S2SV_ModEnd> ) { switch <S2SV_ModStart> { switch ( fmode <S2SV_ModEnd> ) ; }",0
355,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; ssh_dispatch_set ( ssh, SSH2_MSG_KEXINIT, NULL ) ;",1
356,"<S2SV_ModStart> { assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.one <S2SV_blank> + <S2SV_blank> 1 <S2SV_blank> == <S2SV_blank> tests.constants.two <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.empty <S2SV_blank> == <S2SV_blank> \\"" <S2SV_blank> \\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
357,<S2SV_ModStart> read_info ) ; <S2SV_ModEnd> if ( EOFBlob,1
358,"<S2SV_ModStart> char strbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strtest [ 512 <S2SV_ModEnd> ] ; if <S2SV_ModStart> ( ltest, ""%511[^\\r\\r\\r\\r\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( ltest!= 511 <S2SV_ModEnd> ) ; if",0
359,<S2SV_ModStart> intf ) { <S2SV_ModEnd> if ( cdc_ncm_select_altsetting <S2SV_ModStart> - ENODEV ; return <S2SV_ModEnd> cdc_ncm_bind_common ( dev <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
360,<S2SV_ModStart> ; vma -> type = NULL ; if (,0
361,<S2SV_ModStart> ( q ) <S2SV_ModEnd> ; if (,0
362,"<S2SV_ModStart>, e -> elems, e ->",1
363,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
364,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",0
365,<S2SV_ModStart> q ) { mutex_lock ( & q -> timer_mutex ) ; <S2SV_ModStart> snd_seq_timer_close ( q ) ; mutex_unlock ( & q -> timer_mutex,1
366,"<S2SV_ModStart> = 0 ; unsigned int error ; error = inode -> i_size >> inode -> i_blk >> inode -> i_blk >> inode ) ; error = 0 ; if ( error ) goto error ; if ( unlikely ( error ) ) { error = gfs2_get_bh ( ip -> i_map, gfs2_map ) ; if ( unlikely ( error ) ) return error ; } error = gfs2_bh ( ip, 0 ) ; if ( error ) goto error ; if ( error ) { error = gfs2_if ( error ) ; error = gfs2_trans_map ( error ) ; if ( unlikely ( error ) goto out ; } if ( error ) { error = - EFAULT ; len -= bh_map. b_size >> bh_map -> i_map. bh_map ) ; error = gfs2_map ( inode -> i_size >> b_map. b_size ) ; if ( error ) return error ; error = 0 ; error = gfs2_map. b_size >> bh_map. bh_map >> ( error ) ; if ( error ) goto out_",0
367,<S2SV_ModStart> VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; if ( load -> error ) return ( NULL <S2SV_ModStart> -> error ) || <S2SV_ModEnd> vips_load_invalidate ( load,0
368,"<S2SV_ModStart> name, const char * name <S2SV_ModEnd> ) ; if",0
369,<S2SV_ModStart> ; if (! retval ) <S2SV_ModEnd> retval = context,1
370,<S2SV_ModStart> ) ; return <S2SV_ModEnd> 0 ; },0
371,<S2SV_ModStart> service_name_tlv_length ) ; if (! service_name_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if (! miux_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if (! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; },1
372,<S2SV_ModStart> void ) { <S2SV_ModEnd> struct monitor * <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> return mon ;,1
373,<S2SV_ModStart> ; if ( ctx -> flush < 0 ) return ; if (,0
374,<S2SV_ModStart> unsigned int channo ; cdef -> ents = 0,1
375,"<S2SV_ModStart> ( interface, ENC28J600_BUFS <S2SV_ModEnd> ) ; }",0
376,<S2SV_ModStart> ; if ( <S2SV_ModEnd> hdr ) goto out,0
377,<S2SV_ModStart> len ; } ND_TCHECK_32BITS <S2SV_ModEnd> ( p + <S2SV_ModStart> p + 2 <S2SV_ModEnd> ) ; ND_PRINT,1
378,<S2SV_ModStart> 0 ; } if ( unlikely ( IPCB ( skb ) -> opt. optlen ) ) skb_dst_force ( skb ) ; else,1
379,<S2SV_ModStart> private ) { struct skcipher_tfm * tfm = private ; crypto_free_skcipher ( tfm -> skcipher ) ; kfree ( tfm <S2SV_ModEnd> ) ; },1
380,<S2SV_ModStart> ; if (! IS_ERR ( inode ) ) return 0 ; if (,0
381,<S2SV_ModStart> ) ; goto out <S2SV_ModEnd> ; } if,0
382,<S2SV_ModStart> ; dlen -= 3 <S2SV_ModEnd> ; for (,0
383,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
384,<S2SV_ModStart> ; } } if ( vpx_codec_alg_priv_t ) return - EINVAL ;,0
385,<S2SV_ModStart> - EOPNOTSUPP ; msg -> msg_namelen = 0 ; <S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( msg,0
386,<S2SV_ModStart> skb_is_nonlinear ( skb ) ) return 0 ; if ( skb -> len < sizeof ( struct nlattr,1
387,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> } if (,0
388,"<S2SV_ModStart> bp, len ) ; break ; case ETHERTYPE_TEB : ether_print ( ndo, bp, len <S2SV_ModStart> ndo_snapend - bp <S2SV_ModEnd>, NULL,",1
389,,0
390,<S2SV_ModStart> O_APPEND | O_CREAT | O_NOFOLLOW,1
391,<S2SV_ModStart> ; if ( <S2SV_ModEnd> err < 0,0
392,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> -> nd_num ) { ret = - EINVAL ; o2nm_unlock_subsystem ( ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>,0
393,"<S2SV_ModStart> ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %127s\\n"" <S2SV_ModEnd>, & n",1
394,<S2SV_ModStart> { if ( len < 2 ) { <S2SV_ModStart> - 1 ; },0
395,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
396,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
397,<S2SV_ModStart> -> in_opt = fmode <S2SV_ModEnd> ; if (,0
398,<S2SV_ModStart> ] ) ; ND_TCHECKLEN ;,0
399,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
400,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( &,0
401,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",1
402,<S2SV_ModStart> r ) { <S2SV_ModEnd> return NULL ;,0
403,"<S2SV_ModStart>, err ; unsigned int status = 0 ; <S2SV_ModStart> ( pid, ( unsigned int __user * ) & status <S2SV_ModEnd>, options, <S2SV_ModStart> ; err |= put_user ( status, ustatus ) ; err |=",1
404,"<S2SV_ModStart>, ""%r/proc/sys/net"", ""%r/proc/tty"" <S2SV_ModEnd>, NULL, <S2SV_ModStart>, LXC_AUTO_PROC_MIXED, ""%r/proc/tty"" <S2SV_ModEnd>, ""%r/proc/sys/net"", <S2SV_ModStart> ; r = safe_mount ( source, default_mounts [ i ], conf -> rootfs. path? conf -> rootfs. mount : NULL <S2SV_ModEnd> ) ; if",0
405,<S2SV_ModStart> ; if ( c -> pid == NULL ) return - EINVAL,0
406,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> rowstride ) { if (! context || ( rowstride == 0 ) ) return FALSE ; if (! <S2SV_ModStart> ( context ) ) return FALSE ; } return FALSE ;,0
407,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
408,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS,1
409,<S2SV_ModStart> return ( ( ( <S2SV_ModStart> ) / 8 ) * GetPSDPacketSize ( image ),1
410,"<S2SV_ModStart> ( dev, EINVAL <S2SV_ModEnd> ) ; }",0
411,<S2SV_ModStart> bMasterInterface0 ) ; if (! pcu -> ctrl_intf ) return - EINVAL ; <S2SV_ModStart> bSlaveInterface0 ) ; if (! pcu -> data_intf ) return - EINVAL ;,1
412,"<S2SV_ModStart> const char * devname = kstrdup ( dev_name ( & udev -> devname, GFP_KERNEL ) ; const char * drvname = drvname ( devname, GFP_KERNEL ) ; const char * drvname = kfree ( devname ) ; <S2SV_ModStart> - ENOMEM ; kfree ( devname <S2SV_ModEnd> ) ; }",0
413,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( uint_t",0
414,<S2SV_ModStart> target_enc ) { return ONIGERR_NOT_COMBINATION <S2SV_ModEnd> ; } else,0
415,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_decode ( <S2SV_ModStart> q ) ; q += 4 ; <S2SV_ModStart> q ) ; q += GetPixelChannels ( image ) ; <S2SV_ModStart> ) ) { q += GetPixelChannels ( image ) ; } <S2SV_ModEnd> ( ssize_t ) <S2SV_ModStart> ++ ) { if ( q + 4 ) > GetPixelChannels ( image ) ) ) { q ++ ; q ; q ++ ; q ++ ; q ++ <S2SV_ModEnd> ; } <S2SV_ModStart> ++ ) { q ++ <S2SV_ModStart> ) ) ; q ++ <S2SV_ModEnd> ; } <S2SV_ModStart> ++ ; q ++ <S2SV_ModEnd> ; } <S2SV_ModStart> ) ) ; q ++ <S2SV_ModStart> ) ) ; q ++ <S2SV_ModEnd> ; } <S2SV_ModStart> ++ ; q ++ <S2SV_ModEnd> ; } <S2SV_ModStart> ++ ; q ++ <S2SV_ModStart> % 4 ) <S2SV_ModEnd> ; } <S2SV_null>,0
416,"<S2SV_ModStart> u_char * tptr, const u_int length ) { u_int length = FALSE ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> case AFNUM_INET : if ( length!= 1 ) { ND_PRINT ( ( ( ndo, ""(invalid <S2SV_blank> length <S2SV_blank> %u)"", length - 1 ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> case AFNUM_INET6 : if ( length!= 1 + 1 + 1 + 4 ) { ND_PRINT ( ( ( ndo, ""(invalid <S2SV_blank> address <S2SV_blank> address <S2SV_blank> length <S2SV_blank> (invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %u)"", length - 1 ) ) ; hexdump = TRUE ; hexdump = TRUE ; hexdump = TRUE ; hexdump = TRUE ; break ; }",0
417,"<S2SV_ModStart> ; rdx = rcx_read ( rdx, X86EMUL_MODE_PROT64 ) ; rdx = reg_read ( rdx ) ; <S2SV_ModStart> = X86EMUL_MODE_PROTX ; rcx = reg_read ( ctxt, VCPU_REGS_RDX ) ; rdx = is_noncanonical_address ( rdx ) ;",0
418,<S2SV_ModStart> dev ) ; ssize_t len ; device_lock ( dev ) ; len = <S2SV_ModEnd> sprintf ( buf <S2SV_ModStart> driver_override ) ; device_unlock ( dev ) ; return len ;,1
419,"<S2SV_ModStart> BIO * tmpout ; tmpout = BIO_get_cipher_t * tmpout ; if ( flags & BIO_CMS_CMS_TEXT ) { if ( tmpout == BIO_TEXT ) { CMSerr ( CMSerr ) ; goto err ; } if ( tmpout == ( tmpout, buf, buf, flags ) { CMSerr ( BIO_CMS_TEXT ) ; goto err ; } if ( tmpout == BIO_TEXT ) { if ( tmpout == BIO_CMS_CMS_TEXT_TEXT ) { if ( tmpout == BIO_TEXT ) goto err ; } if ( tmpout == BIO_CMS_TEXT ) { if ( tmpout == BIO_TEXT ) { if ( tmpout == BIO_CMS_TEXT ) goto err ; } } if ( tmpout == BIO_TEXT ) { if ( tmpout == BIO_TYPE_TEXT ) goto err ; if ( tmpout == BIO_TEXT ) { if ( tmpout!= buf ) goto err ; goto err ; goto err ; } if ( tmpout && ( tmpout == ( buf, buf, buf, buf, flags )",0
420,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( retval == 0 ) rs. enc_tkt_reply -> flags |= TKT_FLG_PRE_AUTH ;,1
421,"<S2SV_ModStart> tree, vpx_writer <S2SV_ModEnd> * w )",0
422,"<S2SV_ModStart> = ""/tmp"" ; # ifdef HAVE_MKDTEMP tmp_dir = mkd_dir -> tmp_dir ; # endif",0
423,"<S2SV_ModStart> = 0 ; size_t pathlen = 0 ; <S2SV_ModStart> case AF_UNIX : pathlen = sizeof ( <S2SV_ModEnd> ( ( struct <S2SV_ModStart> ) -> sun_path ) ; strncpy ( pathlen <S2SV_ModEnd> ) -> sun_path <S2SV_ModStart> ) -> sun_path, pathlen <S2SV_ModEnd> ) -> pathlen",0
424,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
425,<S2SV_ModStart> * buf ; if ( count > 2 ) return - EINVAL ;,0
426,"<S2SV_ModStart> <S2SV_null> <S2SV_null> struct hugepage_subpool * spool <S2SV_ModEnd> ; struct <S2SV_ModStart> vma ) { struct hugepage_subpool * spool = subpool_vma_inode ( hugepage_subpool * ) ; struct hugepage_subpool * spool = subpool_get_pages ( spool <S2SV_ModEnd>, ( <S2SV_ModStart> page ) ; hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, ( spool",0
427,"<S2SV_ModStart> filegen_string ) ; if ( NULL == filegen ) { msyslog ( LOG_ERR, ""stats <S2SV_blank> %s <S2SV_blank> unrecognized"", filegen_string ) ; continue ; } <S2SV_ModStart> filegen_file ) ; if ( NULL == filegen ) { msyslog ( LOG_ERR, ""filegen <S2SV_blank> category <S2SV_blank> \'%s\' <S2SV_blank> unrecognized"", filegen_file ) ; continue ; }",1
428,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; timer_set_state",1
429,"<S2SV_ModStart> int i, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 6, tran_high_t <S2SV_ModEnd> * output, <S2SV_ModStart> output ) { tran_high_t <S2SV_ModEnd> x8 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x8 [ 8 <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 5 ] ; tran_high_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 5 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 5 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 5 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 5 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 5 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 5 ] ; tran_high_t <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran",0
430,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> flags &= NULL <S2SV_ModStart> ; # ifdef CONFIG_INVALID_MASKERNEL <S2SV_ModEnd> ( - EBUSY <S2SV_ModStart> ( - 1 << 8 ) <S2SV_ModEnd> ; if (,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
433,"<S2SV_ModStart> ( opt ) ; memset ( & rcu, 0, sizeof ( struct ip_options ) ) ;",0
434,<S2SV_ModStart> pb ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
435,<S2SV_ModStart> - 1 ; if ( length < 2 ) goto trunc ;,0
436,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> out ; } ret = - ENOENT <S2SV_ModEnd> ; if (",0
437,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flag & CL_UNPRIVILEGED <S2SV_ModStart> & CL_UNPRIVILEGED ) { mnt -> mnt. mnt_flags |= MNT_LOCK_NOSUID ; if <S2SV_ModEnd> ( mnt -> <S2SV_ModStart> flags & MNT_NOSUID ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOSUID ; if ( mnt -> mnt_flags & MNT_NOSUID ) mnt -> mnt_flags |= MNT_NOSUID ; if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt -> mnt_flags |= MNT_LOCK_NOSUID ; if ( mnt -> mnt_flags & MNT_NOEXEC ) mnt -> mnt_flags |= MNT_LOCK_NOSUID ; if (,0
438,"<S2SV_ModStart> ; } } if ( trans == NULL ) { kmem_cache_free ( rds_conn_slab, conn ) ; conn = ERR_PTR ( - ENODEV ) ; goto out ; }",0
439,<S2SV_ModStart> * rsize >= 112 <S2SV_ModEnd> && rdesc [,1
440,<S2SV_ModStart> if ( ( ( <S2SV_ModStart> ) < bodyLength ) || ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ),1
441,<S2SV_ModStart> ( likely ( serio <S2SV_ModEnd> &&! filtered,1
442,"<S2SV_ModStart>! er ) { ND_TCHECK ( <S2SV_ModEnd> dp [ 0 <S2SV_ModStart> 0 ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> c <S2SV_blank> %04x"", EXTRACT_32BITS ( & dp [ 0 ] ) ) ) ; } <S2SV_ModEnd> return ; case",1
443,"<S2SV_ModStart> * newName, int newName, <S2SV_ModStart> * udfName, int udfName, int newName, <S2SV_ModStart> ( newName [ newIndex > newIndex - CRC_LEN <S2SV_ModEnd> ) newIndex",0
444,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart>, BLOCK_SIZE bsize, <S2SV_ModEnd> BLOCK_SIZE bsize, <S2SV_ModStart> x8_t * const <S2SV_ModEnd> xd, int <S2SV_ModStart> BLOCK_SIZE bsize, bsize, bsize, bsize, bs_t <S2SV_ModEnd>, bsize, <S2SV_ModStart> BLOCK_SIZE bsize, bsize, bs, bsize <S2SV_ModStart> -> mbmi_cols ; <S2SV_ModEnd> } } <S2SV_null>",0
445,<S2SV_ModStart> ; } } else return TEMP_FAILURE_RETRY (,0
446,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ( flags,0
447,"<S2SV_ModStart> * s ; const unsigned char * p = sigbuf ; unsigned char * der = NULL ; int derlen = - 1 ; <S2SV_ModStart> s, & p <S2SV_ModEnd>, siglen ) <S2SV_ModStart> == NULL ) goto err ; derlen = i2d_ECDSA_SV_null>",0
448,"<S2SV_ModStart> NULL ) ; if (! _gdImageGifCtx <S2SV_ModEnd> ( im, <S2SV_ModStart>, out ) ) { <S2SV_ModEnd> rv = gdDPExtractData <S2SV_ModStart> size ) ; } else { rv = NULL ; }",1
449,<S2SV_ModStart> ) ; } if ( bprm -> interp!= bprm -> filename ) kfree ( bprm -> interp ) ;,1
450,"<S2SV_ModStart> = 0 ; size_t len, & buf_size, & OE_RAISE_ERRNO ( OEINVAL <S2SV_ModStart> ) ; } if ( data_size > OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( data_size > OE_RAISE_ERRNO ( OEINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - EINVAL ; OE_RAISE_ERRNO ( OEINVAL ) ; } if ( OE_EINVAL ) { ret = - EINVAL ; OE_RAISE_ERRNO ( OEINVAL ) ; } if ( OE_EINVAL ) { ret = - EINVAL ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( OE_EINVAL ) { ret = - EINVAL ; OE_RAISE_ERRNO ( OEINVAL ) ; } if (! buf ) { ret = - EINVAL ; ret = - EINVAL ; OE_RAISE_ERRNO ( OE_E",0
451,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
452,"<S2SV_ModStart> ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> image <S2SV_blank> dimensions"" ) ; goto done ; }",1
453,"<S2SV_ModStart> cm ) { memcpy <S2SV_ModEnd> ( cpi,",0
454,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmemdup ( & data, 1, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
455,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
456,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
457,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> row_col ) { # if CONFIG_VP9_HIGHBITDEPTH if ( # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH ) return 0 ; # endif <S2SV_ModStart> += 8 ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( flags & YV12_FLAG_BUFFER_HIGHBITDEPTH ) return 0 ; # endif <S2SV_ModStart> += 8 ; # if CONFIG_VP9_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( xd -> flags & YV12_FLAG_HIGHBITDEPTH ) return 0 ; # endif <S2SV_ModStart> return 0 ; # endif,0
458,<S2SV_ModStart> ) ; } fuse_conn_put ( & cc -> fc ) ;,1
459,"<S2SV_ModStart> ( code ) { * status = ""DECODE_PA_USER"" ; return code ; } <S2SV_ModEnd> code = verify_user_checksum",0
460,<S2SV_ModStart> } <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
461,<S2SV_ModStart> cur_pic. field_picture <S2SV_ModEnd> ) return 0,1
462,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( h <S2SV_ModStart>! h ) ) return - EINVAL,0
463,<S2SV_ModStart> buf ) ) { return 0 ; } <S2SV_ModEnd> ext_block = (,1
464,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,1
465,<S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },0
466,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
467,"<S2SV_ModStart> = hmi_data ; uint32_t hmi_siz ; <S2SV_ModStart> ; if ( hmi_track_offset [ hmi_offset ] >= hmi_hmi_offset ) { _WM_GLOBAL_ERROR ( __FUNCTION__, hmi_hmi_hmi_hmi_track_offset, hmi_offset, hmi_offset, hmi_hmi_track_offset, hmi_offset, hmi_track_offset, hmi_end, hmi_end, hmi_hmi_track_offset, hmi_offset, hmi_offset <S2SV_ModStart> += 4 ; hmi_track_offset = 4 ; hmi_offset = hmi_track ( hmi_siz, hmi_siz, hmi_siz, hmi_siz, hmi_siz, hmi_siz, hmi_siz, hmi_siz, hmi_siz, hmi_track_offset, hmi_siz, hmi_offset, hmi_siz, hmi_siz, hmi_hmi_siz, hmi_",0
468,<S2SV_ModStart> -> id ; haddr -> hci_channel = 0 ;,1
469,"<S2SV_ModStart> * inode, fmode_t <S2SV_ModEnd> ) ; if",0
470,"<S2SV_ModStart> ( kdc_active_realm, client. princ <S2SV_ModEnd>, request ->",1
471,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> = S64_MAX ; <S2SV_ModEnd> if ( src_known,1
472,"<S2SV_ModStart> cpi, const VP9EncoderConfig * const cm = & cpi -> td. <S2SV_ModStart> -> oxcf ; const RATE_CONTEXT * cpi = & cpi -> td. mb ; FRAME_COUNTS * const cm = cpi -> td. mb ; FRAME_COUNTS * const cm = cpi -> td. <S2SV_ModStart> -> seg ; vp9_layer_id = cpi <S2SV_ModEnd> -> segfeature_active_active_active_active_active ( cpi <S2SV_ModStart> cpi ) ; vpx_clear_clear_clear_bitrate_clear_clear_system_state ( cpi, cpi <S2SV_ModEnd> ) ; } <S2SV_ModStart> cpi ) { vpx_clear_clear_system_state ( cpi <S2SV_ModEnd> ) ;",0
473,<S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY (,0
474,<S2SV_ModStart> DestroyQuantumInfo ( quantum_info ) ; canvas_image = DestroyImage ( canvas_image,1
475,"<S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, MAXALIGN",0
476,<S2SV_ModStart> void usage_exit ( void,1
477,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
478,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
479,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
480,"<S2SV_ModStart>. get_alg_priv ( ctx ) <S2SV_ModEnd>, ctx ->",0
481,<S2SV_ModStart> ; if ( * value == 0 ||,1
482,<S2SV_ModStart> sb ) ; if ( ext4_inode -> i_sb -> i_len > b_len ) goto out ;,0
483,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
484,<S2SV_ModStart> ND_TCHECK ( * tptr <S2SV_ModEnd> ) ; },0
485,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> l <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> d"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",0
486,<S2SV_ModStart> } else { return false ; } else if ( <S2SV_ModEnd> } else return false,0
487,<S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_double ( & lval <S2SV_ModEnd> ) ; convert_double <S2SV_ModStart> i ] = Z_LVAL ( & lval <S2SV_ModEnd> ) ; } <S2SV_ModStart> i ] = Z_LVAL ( lval ) ; } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( lval )!= IS_LONG ) { zval lval ; lval = * * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. y = Z_LVAL ( & lval <S2SV_ModEnd> ) ; } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( & lval )!= IS_LVAL ( lval ) ) { zval lval ; convert_to_long ( & lval <S2SV_ModEnd> ) ; } <S2SV_ModStart>. y = Z_LVAL ( lval <S2SV_ModEnd> ) ; },0
488,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
489,<S2SV_ModStart> SQL_DROP ) ; <S2SV_ModEnd> return 0 ;,1
490,"<S2SV_ModStart> ; r = __copy_from_user <S2SV_ModEnd> ( data,",1
491,<S2SV_ModStart> ; isspace ( ( unsigned char ) <S2SV_ModStart> ; isspace ( ( unsigned char ) <S2SV_ModStart> && isspace ( ( unsigned char ) <S2SV_ModStart> && isdigit ( ( unsigned char ),0
492,<S2SV_ModStart> = 0 ; info -> port = NULL ;,1
493,<S2SV_ModStart> -> ctx. <S2SV_ModEnd> pmu = pmu,1
494,"<S2SV_ModStart> iovec * iovec, * iter <S2SV_ModStart> = NULL ; iov_iter_init ( iter )",0
495,<S2SV_ModStart> -> s_log_groups_per_flex ; <S2SV_ModEnd> if ( sbi,0
496,<S2SV_ModStart> ( unlikely ( chunk -> pdiscard ) ) return 0 ; if ( unlikely (,1
497,,0
498,<S2SV_ModStart> ( sockstr ) { if ( addr == NULL ) break ;,0
499,<S2SV_ModStart> <= w - ( int ),1
500,<S2SV_ModStart> callback_args -> forward_matches ; assert ( match_offset + match_length <= callback_args -> data_size ),1
501,<S2SV_ModStart> options. disable_forwarding && use_privsep,1
502,"<S2SV_ModStart> { if ( length > SMKTREE_DECODE_MAX_RECURSION ) { av_log ( NULL, AV_LOG_ERROR, ""Maximum <S2SV_blank> tree <S2SV_blank> recursion <S2SV_blank> level <S2SV_blank> exceeded.\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",1
503,<S2SV_ModStart> err ; } if ( m -> msg_name ),1
504,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lineno, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""lineno\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> 2ast\\"" ) ; return 1 ; } else <S2SV_ModEnd> { int res <S2SV_ModStart> int res ; res = obj2ast_identifier ( tmp, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ( obj, & PyId_type_asdl_seq, & PyId_seq, & tmp ) < 0 ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> field <S2SV_blank> \\""type_iter\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> expr"" ) ; return 1 ; } else { int res ; res = obj2ast_seq ( tmp, & tmp, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id ( obj, & PyId_type_",0
505,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) { hstartrow <S2SV_ModEnd> = ( numrows <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; n = <S2SV_ModStart> & a [ hstartrow <S2SV_ModEnd> * stride ],1
506,"<S2SV_ModStart> ""REPLY_ADD_STA <S2SV_blank> PASSED\\n"" ) ; ret = iwl_sta_ucode_activate ( priv, sta_id ) <S2SV_ModEnd> ; break ;",1
507,"<S2SV_ModStart>, fmode, uid <S2SV_ModEnd> ) ; }",0
508,,0
509,"<S2SV_ModStart> & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; if ( <S2SV_ModStart> flags ) { if ( free_func ) spin_unlock_irqrestore ( & HB_LOCK ) spin_irqsave ( & hashbin -> hb_spinlock, flags ) ; if ( hashbin -> hb_spinlock, flags ) spin_irqrestore ( & HB_LOCK ) spin_unlock_irqrestore ( & HB_LOCK ) ; spin_irqsave ( & hashbin -> hb_spinlock, flags ) ; } <S2SV_ModEnd> spinlock_irqsave ( & <S2SV_ModStart> flags ) ; spin_unlock_irqsave ( & hashbin -> hb_spinlock, flags ) ; free_spinlock_irqsave ( & <S2SV_ModStart> flags ) ; spin_irqsave ( & hashbin -> hb_spinlock, flags ) ; if ( hashbin -> hb_spinlock_irqrestore ( & hashbin -> hb_spinlock, flags ) <S2SV_ModEnd> ) ; }",0
510,<S2SV_ModStart> EPERM ; } if ( ( ( ( mnt -> mnt_flags & MNT_NODEV ) &&! ( ( ( mnt_flags & MNT_NOSUID ) ) ) { return - EPERM ; } if ( ( ( ( ( mnt_flags & MNT_NOSUID ) &&! ( ( ( ( mnt_flags & MNT_LOCK_NOSUID ) ) ) &&! ( ( ( mnt_flags & MNT_LOCK_NOSUID ) ) ) { return - EPERM ; } if ( ( ( ( ( ( mnt_flags & MNT_LOCK_NOSUID ) && ( ( ( ( ( ( mnt_flags & MNT_NOSUID ) )!= ( ( ( mnt_flags & MNT_LOCK_NOSUID ) ) ) ) { return - EPERM ; } if ( ( ( ( ( ( ( ( ( ( mnt_flags & MNT_NOEXEC )!= ( ( ( ( ( ( ( ( mnt_flags & MNT_LOCK_NOSUID ) ) && ( ( ( ( mnt_flags & MNT_MASK,0
511,<S2SV_ModStart> 0 ; } aux. msg_namelen = 0 ; <S2SV_ModStart> out ) ; } <S2SV_ModEnd> copied = skb,0
512,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,0
513,"<S2SV_ModStart> ( serial -> num_bulk_out <S2SV_ModEnd> < 2 ) <S2SV_ModStart> < 2 ) { dev_err ( & serial -> interface -> dev, ""missing <S2SV_blank> bulk <S2SV_blank> out <S2SV_blank> endpoints\\n"" ) ; return - ENODEV ; } <S2SV_ModEnd> port = serial",1
514,"<S2SV_ModStart> ) ) ; table_size = ds64_chunk <S2SV_ModStart> ( table_length, table_length, table_length, table_length, table_length ) ; if ( table_size < 464S64S64S64S64S64S64S64S64S2SV_null> <S2SV_null>",0
515,"<S2SV_ModStart> ; if ( msg_name && <S2SV_ModStart> -> msg_name, msg_name, msg_len <S2SV_ModStart> -> msg_name, msg_len <S2SV_ModEnd> )!= 0 <S2SV_ModStart> -> msg_namelen = 0 <S2SV_ModEnd> ; if (",0
516,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ip = bh_blk2 ( struct bh * ) <S2SV_ModEnd> ; if (,0
517,"<S2SV_ModStart> = get_vpx_codec_alg_priv_t ( void ) cfg -> g_fb_bit_depth <S2SV_ModStart> ( ), gss_buffer <S2SV_ModEnd> ) ; return",0
518,<S2SV_ModStart> return FALSE ; if (! rc ) return FALSE ;,0
519,"<S2SV_ModStart> -> dict ) && xmlDictOwns ( ctxt -> dict, value )",1
520,"<S2SV_ModStart> ; if ( is_link ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> %s <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"",",0
521,<S2SV_ModStart> * buf ; unsigned int res ; <S2SV_ModStart> int err = posix_acl_len <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) return - EFAULT <S2SV_ModEnd> ; if (,0
522,<S2SV_ModStart> b ) { return false ;,0
523,<S2SV_ModStart> } } else {,0
524,<S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( &,1
525,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
526,<S2SV_ModStart> = '\\0' ; if ( value == 0 ) { if (! value ) return 0 ; <S2SV_ModStart> size ) ; } <S2SV_ModEnd> if (!,0
527,"<S2SV_ModStart> multipart_media ; struct range * r = & clt -> range <S2SV_ModEnd> ; size_t content_length <S2SV_ModStart> + 1 ; size_t content_length = & r -> range <S2SV_ModStart> + 1 ; size_t content_range ( & r -> range, 0 <S2SV_ModEnd> ) ) { <S2SV_ModStart> list ) ; <S2SV_ModEnd> if ( r <S2SV_ModStart> 0 ) { range = & r -> range <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( r <S2SV_ModStart> 0 ) { range = & r -> range [ 0 ] ; size_t -> range [ 1 ] = & r -> range [ 0 ] ; size_t -> range [ 0 ] = & r -> range [ 0 ] ; <S2SV_ModStart> + 1 ; size_t -> nranges = & r -> range [ 1 ] ; size_t_t -> range [ 1 ] = & r -> range [ 0 ] ; size_t -> range [ 1 ] = & r -> range [ 0 ] ; size_t -> range = & r -> range [ 0 ] ; <S2SV_ModStart> + 1 ; <S2SV_ModEnd> } else { <S2SV_ModStart> } else { range = & r -> clt_boundary = & r -> range [ i ] ; for ( i = 0 ; i + 1 ; i < nranges ; i ++",0
528,"<S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_ISRXISRXIE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR, KSZ8851_ISR <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface, KSZ8851_ISRXISR, KSZ8851_ISR <S2SV_ModEnd> ) )!= <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_ISRXISRXISRXIS <S2SV_ModEnd> )!= <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; }",0
529,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm, vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
530,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
531,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_DONTWAITALL )",0
532,<S2SV_ModStart> tmp ) { goto softfail <S2SV_ModEnd> ; } case <S2SV_ModStart> ) ) { goto softfail <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; softfail : state -> offset = 0 ;,1
533,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
534,<S2SV_ModStart> flags ) { spin_lock ( & ctx -> cancel_lock ) ; <S2SV_ModStart> } } else { __timerfd_remove_cancel <S2SV_ModEnd> ( ctx ) <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> cancel_lock ) ;,1
535,"<S2SV_ModStart> ) ) ; if ( c16 -> Curves [ i ] == NULL ) { for ( j = 0 ; j < i ; j ++ ) { _cmsFree ( ContextID, c16 -> Curves [ j ] ) ; } _cmsFree ( ContextID, c16 -> Curves ) ; _cmsFree ( ContextID, c16 ) ; return NULL ; }",1
536,<S2SV_ModStart> { if (! dev_name ||,1
537,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",0
538,"<S2SV_ModStart> msg ) ; memcpy ( msg, msg_rem, sizeof ( * msg ) ) ; <S2SV_ModStart> -> m_fromio ) ; if ( buf ) { if ( buf + sizeof ( buf ) - sizeof ( buf ) ) { memcpy_fromio ( buf, buf ) ; } else memcpy_fromio ( buf, buf, buf_size, buf_size ) ; <S2SV_ModStart> -> m_rem + sizeof ( buf ) ) ; } else if ( buf ) memcpy_fromio ( buf, buf_size - sizeof ( buf ) ) { if ( buf ) memcpy_fromio ( buf, buf_size ) memcpy_fromio ( buf, buf + sizeof ( buf ) ) ; } else if ( buf ) memcpy_fromio ( buf, buf, buf + sizeof ( buf ) ) { if ( buf + sizeof ( buf ) memcpy_fromio ( buf ) ) memcpy_fromio ( buf, buf, buf ) ; } else if ( buf + sizeof ( buf ) ) memcpy_fromio ( buf ), buf ) ;",0
539,<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { efree ( replaced ) ; RETURN_FALSE ; },1
540,<S2SV_ModStart> ; if ( siglen == NULL ) return - EINVAL ; if (,0
541,"<S2SV_ModStart> ( ) ; alloc_array ( t1_line, strlen ( t1_line_array ) + 1 ) ;",0
542,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> -> common ; MACROBLOCKD * const xd = & td -> mb ; <S2SV_ModStart> -> mb ; <S2SV_ModEnd> int bsl = <S2SV_ModStart>, bsl ) ; <S2SV_ModEnd> if ( bslb_log2_lookup <S2SV_ModStart> ( bh, mi_row, mi_col, mi_col, bsize, bsize, bsize, bsize, bsize ) ; <S2SV_ModStart> ; BLOCK_SIZE bsize = bsize_bmi_row <S2SV_ModEnd> ( bsl, <S2SV_ModStart>, bh, bsize, bsize, bsize, bsl ) ; <S2SV_ModEnd> if ( bslen",0
543,<S2SV_ModStart> char * name <S2SV_ModEnd> ; if (,0
544,<S2SV_ModStart> int pixel_ptr = - 4 <S2SV_ModEnd> ; int block_ptr <S2SV_ModStart> -- ) { ADVANCE_BLOCK ( ) <S2SV_ModStart> row_inc ; } <S2SV_ModEnd> } break ; <S2SV_ModStart> -- ) { ADVANCE_BLOCK ( ) ; <S2SV_ModStart> row_inc ; } <S2SV_ModEnd> } break ; <S2SV_ModStart> ) return ; ADVANCE_BLOCK ( ) ; <S2SV_ModStart> row_inc ; } <S2SV_ModEnd> break ; default,1
545,<S2SV_ModStart> * buf ; size_t <S2SV_ModEnd> newcount ; if,0
546,<S2SV_ModStart> ; __be16 type ; if ( NAPI_GRO_CB ( skb ) -> encap_mark ) goto out ; NAPI_GRO_CB ( skb ) -> encap_mark = 1,1
547,<S2SV_ModStart> * matrix ; size_t <S2SV_ModEnd> i ; assert (,0
548,<S2SV_ModStart> = tpm_kdfa ( <S2SV_ModEnd> session -> authHash,1
549,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,0
550,"<S2SV_ModStart> buflen, buf_size - 8",0
551,"<S2SV_ModStart> BPF_ALU64 ) { coerce_reg_to_size <S2SV_ModEnd> ( & src_reg <S2SV_ModStart> -> src_reg, 4",0
552,<S2SV_ModStart> 0 ) { if (! dentry_name_len ) goto out ;,0
553,<S2SV_ModStart> vfio_irq_set hdr ; size_t size = 0 ; <S2SV_ModStart> - EINVAL ; size_t size ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> count > max <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> return - EINVAL ;,0
554,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ext4_has_inline_data ( inode,1
555,<S2SV_ModStart> -> filesize = UINT64_MAX <S2SV_ModEnd> ; s ->,1
556,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
557,"<S2SV_ModStart> char * in, size_t olen <S2SV_ModStart> += 4 ; if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ;",1
558,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
559,"<S2SV_ModStart> i ; size_t bytes, <S2SV_ModStart> ++ ) { bytes <S2SV_ModEnd> = bytes ;",0
560,<S2SV_ModStart> * rsize >= 62 <S2SV_ModEnd> && rdesc [,0
561,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_frame_stats ( vpx_codec_alg_t <S2SV_ModStart> int i ; const VPX_CODEC_PARSE_STATS * svc_log ( svc_log <S2SV_ModEnd>, int i <S2SV_ModStart> - 1 ; svc_log ( svc_log <S2SV_ModEnd>, 0, <S2SV_ModStart>.0 ], 0.0 ; int i <S2SV_ModEnd>, svc_log <S2SV_ModStart> - 1.0 ; i <S2SV_null>= ( svc_log ( svc_null> 0 ) <S2SV_ModEnd> ; i <S2SV_null>",0
562,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> BYTE * outSize ; BYTE * outSize -- ; if ( outSize < 1 ) return FALSE ; outSize -- ; <S2SV_ModStart> 4 ; } if ( outSize < 1 ) return FALSE ; memcpy ( out, outSize, 4 ) ; outSize < 4 ) return FALSE ; memcpy ( out, outSize, 4 ) ; if ( outSize < 4 ) return FALSE ; outSize -- ; memcpy ( outSize, 4 ) ; if ( outSize < 4 ) return FALSE <S2SV_ModEnd> ; } <S2SV_null>",0
563,<S2SV_ModStart> ; if ( screen == NULL ) return NULL ; if (,0
564,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> string ) { const char * start = '\\0' ; <S2SV_ModStart> list ++ ; if ( * strncpy ( * start == '\\0' ) { const char * start = '\\0' ; <S2SV_ModStart>'; char * end = '\\0' ; <S2SV_ModStart>'; char * end = '\\0' ; if ( * end == '\\0' ) { if ( * fname == '\\0' ) { if ( * end - 1 == '\\0' ) { * end = '\\0' ; break ; } <S2SV_ModStart> ) { char * end = start ++ ; <S2SV_ModStart> = '\\0' ; } else { if ( * end == '\\0' ) { return 0 ; } <S2SV_ModStart> == '\\0' ) { if (! end == '\\0' ) { break ; } else { <S2SV_ModStart> = '\\0' ; } <S2SV_ModStart> end ) { if (! end == '\\0' ) { if (! end == '\\0' ) { if (! * end == '\\0' ) { break ; } else { * end =,0
565,"<S2SV_ModStart> * m, size_t <S2SV_ModEnd> bufsize ) { <S2SV_ModStart> * buf ; <S2SV_ModEnd> JAS_DBGLOG ( 100 <S2SV_ModStart> 100, ( ""mem_resize(%p, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, m,",0
566,<S2SV_ModStart> d ) { <S2SV_ModEnd> if (!,0
567,"<S2SV_ModStart>, pred_rtrn ) ||! expr -> action. args",1
568,<S2SV_ModStart> pcrypt_free ( struct aead_instance <S2SV_ModEnd> * inst ) <S2SV_ModStart> * ctx = aead_instance_ctx <S2SV_ModEnd> ( inst ),1
569,,0
570,"<S2SV_ModStart> } if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if (",1
571,<S2SV_ModStart> icmp6_hop_limit ) { if ( <S2SV_ModStart> cnf. hop_limit < <S2SV_ModEnd> ra_msg -> icmph <S2SV_ModStart> icmph. icmp6_hop_limit ) { in6_dev -> icmph. hop_limit = ra_msg -> icmph. icmp6_hop_limit ; },0
572,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
573,<S2SV_ModStart> * up ; int ulen ; <S2SV_ModStart> rp ) ; ulen = xfrm_replay_state_esn_len ( up ) ; if ( up ) return - EINVAL ;,0
574,<S2SV_ModStart> unsigned long ret <S2SV_ModEnd> ; if (,0
575,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
576,<S2SV_ModStart> opj_calloc ( ( size_t ) ( <S2SV_ModStart> -> numlayers + 1U <S2SV_ModEnd> ) * l_step_l,0
577,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
578,"<S2SV_ModStart> start = 0 ; int i <S2SV_ModStart> -> flags ; for ( i = 0 ; i < 3 ; i ++ ) <S2SV_ModStart> ( kvm, i <S2SV_ModEnd>, kvm -> <S2SV_ModStart>. channels [ i <S2SV_ModEnd> ]. count",1
579,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> -> common ; MACROBLOCK * const x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> int mi_row, mi_row, mi_col, mi_row, mi_col, mi_col, BLOCK_SIZE bsize, mi_row, mi_col ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> mi_row * mi_cols ; BLOCK_SIZE bsize = & cpi -> td. mbmi ; <S2SV_ModStart> BLOCK_SIZE bsize = & cpi -> common <S2SV_ModEnd> ; BLOCK_SIZE bsize <S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> if ( mi_row <S2SV_ModStart> ( mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, bsize, bsize, bsize, mi_row, mi_col, bsize, bd <S2SV_ModEnd>, BLOCK_8X8 ) <S2SV_ModStart> ( cpi, bsize, mi_",0
580,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",1
581,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
582,<S2SV_ModStart> } else { # ifdef UPNP_ENABLE_POST_WRITE <S2SV_ModStart> return HTTP_UNAUTHORIZED ; # else return HTTP_NOT_FOUND ; # endif,1
583,<S2SV_ModStart> char * dest <S2SV_ModEnd> ; if (,0
584,<S2SV_ModStart> blkg ) ) <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> blkg ) ; <S2SV_ModEnd> q -> root_blkg,1
585,<S2SV_ModStart> ; if ( bpp == 1 && <S2SV_ModStart> else if ( bpp == 8 &&,1
586,"<S2SV_ModStart> ; krb5_data rspac ; const char * tgt_realm = krb5_principal_get_realm ( context, krbtgt -> entry. principal ) <S2SV_ModStart>, cp, tgt_realm,",1
587,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
588,"<S2SV_ModStart> struct usbdevfs_connectinfo ci ; memset ( & ci, 0, sizeof ( ci ) ) ; ci <S2SV_ModEnd>. devnum = <S2SV_ModStart> dev -> devnum ; ci <S2SV_ModEnd>. slow = <S2SV_ModStart> speed == USB_SPEED_LOW <S2SV_ModEnd> ; if (",1
589,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * * opt = <S2SV_ModStart> ( opt -> opt. <S2SV_ModStart> = opt -> opt.,0
590,<S2SV_ModStart> -> rmtvaluelen2 ; args -> rmtvaluelen2 = args -> rmtvaluelen2 ; args -> rmtvaluelen2 = args -> rmtvaluelen2 ; args -> rmtvaluelen2 = args -> rmtvaluelen2 ; args -> rmtvaluelen2 = args -> rmtvaluelen2 ;,0
591,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static UINT64_MAX_PARAMETER <S2SV_ModEnd> ; devicePathLen ( <S2SV_ModStart> ) break ; if (! devicePathLen ) { Irp -> DevicePathLen = UINT32_MAX_PARAMETER ; break ; } devicePathLen = 0 ; if (! devicePathLen ) { Irp -> DevicePathLen = TC_MAX_PARAMETER ; break ; } if (! readBuffer. DevicePathLen ) { Irp -> DevicePathLen = 0 ; Irp -> DevicePathLen = 0 ; break ; } <S2SV_ModStart> ) ) { Irp -> IoStatus. DevicePathLen = TC_MAX_PARAMETER ; Irp -> IoStatus. Information = 0 ; break ; } <S2SV_ModStart> ) ) { Irp -> DevicePathLen = STATUS_INVALID_PARAMETER ; if (! readBuffer ) { Irp -> DevicePathLen = TC_MAX_PARAMETER ; Irp -> IoStatus. Information = 0 ; Irp -> IoStatus. Information = TC_MAX_PARAMETER ; Irp -> IoStatus,0
592,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
593,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> UINT32_MAX <S2SV_ModEnd> ; if ( <S2SV_ModStart>, rd ) <S2SV_ModStart> ) return - EINVAL <S2SV_ModEnd> ; if (",0
594,<S2SV_ModStart> goto out ; } <S2SV_ModEnd> if (!,0
595,<S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; index,0
596,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
597,"<S2SV_ModStart>, int tstype, bool opt_stats <S2SV_ModStart> ; int err ; BUILD_BUG_ON ( sizeof ( struct sock_exterr_skb ) > sizeof ( skb -> cb ) ) <S2SV_ModStart> ee_info = tstype ; serr -> opt_stats = opt_stats",1
598,"<S2SV_ModStart> 0 ) { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ;",0
599,<S2SV_ModStart> ] ) ; ND_TCHECK2 ( bp [ 0 ] ) ;,0
600,"<S2SV_ModStart>, CONST_STR_LEN ( ""%2f?"" ), CONST_STR_LEN ( ""/?"" ) ) ; # endif",0
601,<S2SV_ModStart> ; if (! test_bit ( ) ) return 0 ;,0
602,<S2SV_ModStart> <= w - ( int ),1
603,<S2SV_ModStart> page ) ; <S2SV_ModEnd> memset ( addr,1
604,<S2SV_ModStart> val ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,0
605,<S2SV_ModStart> } } } else {,0
606,"<S2SV_ModStart> * priv ; if (! port -> interrupt_out_urb ||! port -> interrupt_in_urb ) { dev_err ( & port -> dev, ""required <S2SV_blank> endpoint <S2SV_blank> is <S2SV_blank> missing\\n"" ) ; return - ENODEV ; }",1
607,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( dev,0
608,<S2SV_ModStart> -> device_data ; cancel_autoload_drivers ( ) ;,1
609,"<S2SV_ModStart>, int mi_len, my_bool no_copy_copy_data flags <S2SV_ModEnd> ) { if",0
610,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> p == q ) || ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> size < 16 ) || ( <S2SV_ModEnd> size > 256 <S2SV_ModStart> size > 256 ),1
611,"<S2SV_ModStart> uint dblocks = xfs_attr3_rmt_blocks <S2SV_ModEnd> ( mp,",1
612,"<S2SV_ModStart> count, 2 <S2SV_ModEnd> ) ; }",0
613,<S2SV_ModStart> ; char * rval <S2SV_ModEnd> ; if (,0
614,<S2SV_ModStart> ] == EOF || text [ 1 ] == 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 2 ] ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 3 ] ) <S2SV_ModEnd> ) return 0,1
615,,0
616,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct8x8_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 64 ] ; <S2SV_ModEnd> int i, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 8 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",0
617,"<S2SV_ModStart> else if ( g_str_has_prefix <S2SV_ModEnd> ( arg, <S2SV_ModStart>, ""@@"" ) <S2SV_ModEnd> ) g_print (",0
618,<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ;,0
619,<S2SV_ModStart> * ue ; if <S2SV_ModEnd> ( tree_root == <S2SV_ModStart> == NULL ) return 0,1
620,"<S2SV_ModStart> * file = fname, <S2SV_ModStart> ( fname, ""%s: <S2SV_blank> for <S2SV_blank> %s\\n"" <S2SV_ModEnd>, name ) <S2SV_ModStart> ( strchroot ( index,",0
621,<S2SV_ModStart> elen ) ; elen += sizeof ( struct elen ) ; <S2SV_ModStart> > 0 ) { elen += pc -> lengthComponentIdent ; break ; } <S2SV_ModEnd> case 2 : <S2SV_ModStart> case 2 : elen += pc -> lengthComponentIdent ; if ( elen > elen ) return - EIO ;,0
622,"<S2SV_ModStart> ( ndo, ""%s"", icmp6_tstr <S2SV_ModEnd> ) ) ;",0
623,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_8BITS ( tptr ) ;,0
624,,0
625,<S2SV_ModStart> ; bool slow <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ;,1
626,"<S2SV_ModStart> len ) { <S2SV_ModEnd> if (! <S2SV_ModStart> = pdu_len ; pdu_len = pdu_len <S2SV_ModEnd> ( ndo, <S2SV_ModStart> pki_len ) ; <S2SV_ModEnd> } } <S2SV_null> <S2SV_null>",0
627,"<S2SV_ModStart> int tagval ; struct stream packet ; <S2SV_ModStart> length ) ; packet = * s ; <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; }",0
628,"<S2SV_ModStart> ND_TCHECK ( * cp, max_offset ) ; if (! ND_TTEST2 ( * cp ) ) return ( NULL ) ; <S2SV_ModStart> ndo -> ndo_snapend ) ; if (! cp == NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ( NULL ) ; } if ( ( ( cp >= max_offset ) ) { if ( ( ( ndo, "" <S2SV_blank> "" )!= INDIR_MASK ) { ND_TCHECK2 ( * cp ) ; return ( NULL ) ; } <S2SV_ModStart> ndo, cp ) ; if (! ND_PRINT ( ( ( ndo, ""\\n\\toffset <S2SV_blank> "" ) ) ) ; return ( NULL ; } if (! ND_PRINT ( ( ( ndo, cp ) ) ) { if (! ND_PRINT ( ( ( ndo, "" <S2SV_blank> offset <S2SV_blank> "" ) ) ) ; return ( ( NULL ) ; } if (! ND_PRINT ( ( ( ( ndo, cp ) ) )!= NULL ) { ND_TTEST_MASK ) ; return ( NULL ) ; } if (! ND_PRINT ( ( ( ( ndo,",0
629,<S2SV_ModStart> ; args -> rmtvaluelen <S2SV_ModEnd> ; args ->,0
630,"<S2SV_ModStart> * buf, size_t <S2SV_ModEnd> len ) {",0
631,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
632,"<S2SV_ModStart> -> fc ; int ret ; <S2SV_ModStart> ( fb, fat_count <S2SV_ModEnd> ) ) ; if",0
633,"<S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f,",0
634,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_set_str ( GITERR_NET, ""Invalid <S2SV_blank> empty <S2SV_blank> packet"" ) ; return GIT_ERROR <S2SV_ModEnd> ; } if",1
635,<S2SV_ModStart> ; if ( vma -> vm_flags & VM_SHARED ) return VM_FAULT_SIGBUS ; if (,1
636,<S2SV_ModStart> = sr -> sas_protocol <S2SV_ModEnd> ; } },0
637,<S2SV_ModStart> == 0 ) return - EINVAL,0
638,<S2SV_ModStart> ; ND_TCHECK ( * dp <S2SV_ModEnd> ) ; if,1
639,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;,1
640,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
641,<S2SV_ModStart> 0 ) { if <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> 0 )!= 0 ) return 0,0
642,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ;",0
643,<S2SV_ModStart> ; if ( ctx -> terminated ||,1
644,<S2SV_ModStart> if (! sbi ) return FALSE ;,0
645,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
646,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> inode_null>,0
647,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
648,"<S2SV_ModStart> ( ) ; iov_iter_advance ( i, copied ) ; <S2SV_ModStart> again ; } <S2SV_ModEnd> pos += copied",1
649,<S2SV_ModStart> unlikely ( len + ring -> frameoffset,1
650,"<S2SV_ModStart> = snm_ack ; memset ( & addr, sizeof ( new_types ) ) ;",0
651,"<S2SV_ModStart> ( obj, <S2SV_ModEnd> name, &",0
652,<S2SV_ModStart> |= 0 ; if (!,0
653,<S2SV_ModStart> src < zsize + ( sub_type!= 2 ) <S2SV_ModStart> bits ) { if ( src >= src_end ) return AVERROR_INVALIDDATA ;,1
654,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
655,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 4,0
656,"<S2SV_ModStart> ( 2, ""%s"",",0
657,<S2SV_ModStart> list ) { spin_lock_irqrest ( & master -> timeri_lock ) ; spin_unlock ( & timeri -> lock ) ; <S2SV_ModStart> slave_head ) ; spin_unlock ( & timeri -> lock ) ;,0
658,<S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT,1
659,<S2SV_ModStart> * arch ; char * arch = NULL ; char * cpu = strdup ( info -> cpu ) ; <S2SV_ModStart> cpu ) ; free ( arch ) ; <S2SV_ModStart> cpu ) ; free ( arch ) ; free ( arch,0
660,"<S2SV_ModStart> sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart>, * n <S2SV_ModEnd> ; list_for_each_entry (",1
661,<S2SV_ModStart> } if ( <S2SV_ModEnd> ps_dec -> u4_first_slice_in_pic,0
662,"<S2SV_ModStart> gint64 offset ; <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; offset <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! parse_netscreen_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> wth -> fh <S2SV_ModEnd>, & wth <S2SV_ModStart> wth -> frame_buffer, line",1
663,<S2SV_ModStart> 0 ) ; if ( <S2SV_ModStart>. seq_num ) < 0 ) return - 1,1
664,<S2SV_ModStart> = image -> <S2SV_ModEnd> ; if (,0
665,"<S2SV_ModStart> : ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = <S2SV_ModStart> == 0 ) ret = <S2SV_ModEnd> key -> type <S2SV_ModStart> type -> read ( key, buffer, buflen ) ; up_read <S2SV_ModEnd> ( & key <S2SV_ModStart> sem ) ; <S2SV_ModEnd> } error2 :",1
666,<S2SV_ModStart> goto out ; if ( * nd = false ;,0
667,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",1
668,"<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - JAS_CAST ( jas_longlong <S2SV_ModEnd>, ( ( <S2SV_ModStart> : JAS_CAST ( jas_longlong <S2SV_ModEnd>, tmp )",1
669,<S2SV_ModStart> page ) ; rm -> atomic. op_active = 0 ;,1
670,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return |= NULL ;,0
671,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
672,"<S2SV_ModStart> sizeof ( spath ) ) return - 1 ; if ( strstr ( name, "".."" ) || strchr ( name, '/'",1
673,<S2SV_ModStart> ; while ( tty >= s ),0
674,"<S2SV_ModStart> -> bcache, cache_id ( <S2SV_ModStart> ] -> data )",1
675,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
676,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
677,<S2SV_ModStart> return 1 ; consume_skb ( skb ) ; return 0 <S2SV_ModEnd> ; } if,1
678,<S2SV_ModStart> ms ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
679,<S2SV_ModStart> goto out ; err = ovl_copy_up ( dentry ) ; if (! err ) { <S2SV_ModStart> dentry ) ; <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> ) ; } <S2SV_ModEnd> ovl_drop_write ( dentry,1
680,<S2SV_ModStart> ( isspace ( ( unsigned char ),1
681,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ( ( <S2SV_ModStart> } if (! authctxt -> user ) &&,0
682,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
683,<S2SV_ModStart> 1 ) ; if ( strlen ( line ) == 0 ) return - 1 ;,1
684,<S2SV_ModStart> 1 ) ; if ( * ptr!= NULL ),0
685,<S2SV_ModStart> ++ ) { if ( band -> prec ) { <S2SV_ModStart> ) ; } },1
686,<S2SV_ModStart> < 0 ) { xmlFreeInputStream ( input ) ; return ; } <S2SV_ModEnd> if ( entity,1
687,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> & fl6, rcu_read_unlock ( <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock ( ) ; <S2SV_ModStart> np -> tclass = rcu_read_unlock ( ) ;",0
688,<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> -> rc ; PREDICTION_MODE <S2SV_ModEnd> if ( cpi <S2SV_ModStart> -> oxcf ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. rd. pass == 0 && cpi -> oxcf. pass == 2 ) { RATE_CBR = cpi -> twopass. gf_group. index ; } else if ( cpi -> oxcf. pass == 0 && cpi -> oxcf. pass == 2 ) { RATE_CBR = cpi -> twopass. gf_group. index <S2SV_ModEnd> ; return <S2SV_ModStart> ; } } <S2SV_null>,0
689,"<S2SV_ModStart> ( u32 size, u32 num ) { if ( size > UINT32_MAX / num ) { android_errorWriteLog ( 0x534e4554, ""allocate <S2SV_blank> bytes"" ) ; return NULL ; } <S2SV_ModEnd> ( num",0
690,<S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> { if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,1
691,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,1
692,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
693,"<S2SV_ModStart> scn, root_storage <S2SV_ModEnd> ) ) <",1
694,<S2SV_ModStart> = malloc ( <S2SV_ModEnd> sizeof ( struct,0
695,<S2SV_ModStart> (! eof && vars -> str. c!= vars -> ptr,1
696,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
697,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
698,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc!= X86EMUL_CONTINUE ) break <S2SV_ModStart> case 4 : rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val )",1
699,"<S2SV_ModStart> list. name, true",1
700,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2SV_null> <S2SV_null>,0
701,"<S2SV_ModStart> / 2 ; if ( count > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ) ;",1
702,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
703,"<S2SV_ModStart> -> session = s -> session_id_ctx -> session_ctx ; if ( i & SSL_SESS_CACHE_INTERNAL_INTERNAL_ERROR ) { if ( s -> session_ctx -> session!= NULL ) s -> session_ctx -> session = sess ; } else { SSLerr ( SSL_F_CACHE_INTERNAL_ERROR, SSL_INTERNAL_ERROR, SSL_SESS_SESS_INTERNAL_INTERNAL_INTERNAL_INTERNAL_ERROR ) ; if ( s -> session!= NULL ) { s -> session = SSL_INTERNAL_ERROR ; SSL_INTERNAL_ERROR ; SSL_INTERNAL_err ( SSL_F_INTERNAL_ERROR, SSL_INTERNAL_SESS ) ; }",0
704,<S2SV_ModStart> = f -> <S2SV_ModEnd> ; if (,0
705,,0
706,<S2SV_ModStart> NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_FIELD_REF,0
707,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> } else if,0
708,"<S2SV_ModStart>, annotation, string type_comment, <S2SV_ModStart> ; if (! type_comment ) return NULL ; if (",0
709,<S2SV_ModStart> return - EINVAL ; if ( waitqueue_active ( & asoc -> wait ) ) return - EBUSY,0
710,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
711,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
712,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
713,"<S2SV_ModStart> ) / 3 ) ThrowReaderException ( CorruptImageError, ""InvalidColormapIndex"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries",0
714,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,1
715,,1
716,<S2SV_ModStart> ; return ret < 0,0
717,<S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> > <S2SV_null> <S2SV_null> <S2SV_null>,0
718,<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ioffset ) ; <S2SV_ModEnd> credits = ext4_writepage_trans_blocks <S2SV_ModStart> ) ; goto out_mmap <S2SV_ModEnd> ; } down_write <S2SV_ModStart> handle ) ; out_mmap : up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModEnd> ext4_inode_resume_unlocked_dio ( inode,1
719,"<S2SV_ModStart> ], size_t data_size, <S2SV_ModStart> += 4 ; uint32_t data_size ; uint32_t data_size ; <S2SV_ModStart> ; uint32_t data_size ; memset ( hmi_data, 0, 0, hmi_offset, hmi_offset, hmi_offset, hmi_size ) ;",0
720,"<S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val * <S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val *",1
721,<S2SV_ModStart> * bh ; unsigned int table_len ; <S2SV_ModStart> -> b_len ; table_len = le32_to_cpu ( lvd -> mapTableLength ) ; if ( sizeof ( * lvd ) + table_len > lvd ) { udf_err ( * lvd ) ; goto out_error <S2SV_ModEnd> ; } <S2SV_null>,0
722,"<S2SV_ModStart> long n ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ""cannot <S2SV_blank> header\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ""Cannot <S2SV_blank> create <S2SV_blank> info\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> "" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> "" ""BMP <S2SV_blank> information: <S2SV_blank> %ld; <S2SV_blank> %ld; <S2SV_blank> numplanes <S2SV_blank> %ld; <S2SV_blank> width <S2SV_blank> %ld; <S2SV_blank> vres <S2SV_blank> len <S2SV_blank> %ld; <S2SV_blank> width <S2SV_blank> %ld; <S2SV_blank> height <S2SV_blank> %ld; <S2SV_blank> vres <S2SV_blank> %ld; <S2SV_blank> "" ""depth <S2SV_blank> %ld; <S2SV_blank> enctype <S2SV_blank> %ld; <S2SV_blank> vres <S2SV_blank> %ld; <S2SV_blank> hres <S2SV_blank> %ld; <S2SV_blank> vres <S2SV_blank> %ld; <S2SV_blank> numcolors <S2SV_blank> %ld; <S2SV_blank> "" ""mincolors <S2SV_blank> %ld\\n"", info -> len, info -> height, info -> height, info -> depth, JAS_CAST ( long ), JAS_CAST ( long ), JAS_CAST ( long <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModStart>",0
723,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
724,"<S2SV_ModStart> ( u4_bits, u32 <S2SV_ModEnd> ) { if",0
725,"<S2SV_ModStart> g_tv_comment, FILENAME_COMMENT ) ; problem_data_reload_from_dump_dir ( ) ; update_gui_state_from_problem_data ( 0",1
726,"<S2SV_ModStart> media_pad_desc pad ; memset ( & pad, 0, sizeof ( pad ) ) ; <S2SV_ModStart> ) continue ; memset ( & link, 0, sizeof ( link ) ) ;",1
727,<S2SV_ModStart> ; if ( j <S2SV_null> <S2SV_null>,0
728,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
729,"<S2SV_ModStart>, krb5_principal client_principal, const char * tgt_realm <S2SV_ModStart> principal ), tgt_realm <S2SV_ModEnd> ) ; if",1
730,"<S2SV_ModStart> ReadBlobLSBLong ( image ) ; if ( bmp_info. number_colors > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
731,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = ireq ->,1
732,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
733,"<S2SV_ModStart>!= 0 ) { int tend_off = skb_transport_offset ( skb ) + tlen ; <S2SV_ModStart> ( csum, skb_checksum ( skb, tend_off, <S2SV_ModEnd> offset, 0 <S2SV_ModStart> ) ) ; }",1
734,"<S2SV_ModStart> pfn ) ; kvm_unpin_pages ( kvm, pfn, page_size ) ; <S2SV_ModStart> base_gfn, gfn - slot -> base_gfn",1
735,<S2SV_ModStart> 0x00 } ; if ( cmd -> msg_len > sizeof ( b ) - 4 ) return - EINVAL ;,1
736,"<S2SV_ModStart> perf_event_context * ctx ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> event ) ; perf_ctx_unlock <S2SV_ModEnd> ( event,",0
737,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 16 ; return <S2SV_ModEnd> ( value & <S2SV_ModStart> & 0xffff ) <S2SV_ModEnd> ; } <S2SV_null>,0
738,"<S2SV_ModStart> m_nid * e ; bool ret = <S2SV_ModStart> return ret ; i = kmem_get_sock ( i -> nid_list ) ; if (! i -> nid_list ) return - EINVAL ; i -> nid_list_new_list [ i ] = true ; i -> nid_list_list_new_list [ i ] = true ; i -> nid_list_new_list [ i ] ; i ++ ] = __DEFAULT ; i -> nid_nid_list_list_list_new_list ( ) ; i -> nid_list_new_list_list ( & nm_i -> nid_list, NULL ) ; if ( ret == NID_NEW ) goto err_out ; i -> nid_list_list_list_new_list_list_list_free ( e ) ;",0
739,<S2SV_ModStart> ; # endif <S2SV_ModEnd> if ( ctx,0
740,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> ++ cons ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> extra. type ) ; netbk_fatal_tx_err ( vif",1
741,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ;,1
742,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
743,"<S2SV_ModStart>, 1 ) ; luaS2SV_null> <S2SV_null> <S2SV_null>",0
744,<S2SV_ModStart> uint16_t length ; if ( length < 2 ) { ND_TCHECK2 ( * tptr ) ; <S2SV_ModStart> length ) ; },0
745,<S2SV_ModStart> -> data ; unsigned <S2SV_ModStart> body -> unit_size || len < sizeof ( struct oz_multiple_fixed ) - 1 <S2SV_ModStart> ( len - ( <S2SV_ModStart> struct oz_multiple_fixed ) - 1 ) <S2SV_ModEnd> ) / body,1
746,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> v_null> <S2SV_null>,0
747,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, dest <S2SV_ModEnd> ) ; unlink",0
748,"<S2SV_ModStart> status = IMAP_FATAL ; return ; } if ( strlen ( idata -> buf ) < litlen ) { mutt_debug ( 1, ""Error <S2SV_blank> parsing <S2SV_blank> STATUS <S2SV_blank> mailbox\\n"" )",1
749,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
750,<S2SV_ModStart> ( ex && ( flag & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> ) == 0,0
751,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( ptr_ptr, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( dst_ptr,",0
752,<S2SV_ModStart> ; cmap_len = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> 0x = get_tga_ushort <S2SV_ModEnd> ( & tga,0
753,<S2SV_ModStart> ; ssize_t ret ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
754,<S2SV_ModStart> == CPUCLOCK_SCHED ) * tp = ns_to_timespec <S2SV_ModEnd> ( cpu. <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
755,<S2SV_ModStart> ; uint32 nstrips <S2SV_ModEnd> ; nstrips =,1
756,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
757,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ; } if (,0
758,<S2SV_ModStart> ; int error = 0 <S2SV_ModStart> &= PAGE_MASK ; if ( address < mmap_min_addr ) return - EPERM <S2SV_ModEnd> ; prev =,1
759,"<S2SV_ModStart> { umode_t mode <S2SV_ModEnd> ; error = <S2SV_ModStart> ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart>, & mode, & acl <S2SV_ModStart> if ( error <S2SV_ModEnd> ) return error <S2SV_ModStart> return error ; <S2SV_ModEnd> error = xfs_set_mode",1
760,"<S2SV_ModStart>, int optional, const char * rootfs <S2SV_ModStart> endif if ( safe_mount <S2SV_ModEnd> ( fsname, <S2SV_ModStart> MS_REMOUNT, data, rootfs <S2SV_ModStart>, data ) < 0",1
761,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
762,<S2SV_ModStart> it_overrun = - 1LL <S2SV_ModEnd> ; ++ si,0
763,,0
764,<S2SV_ModStart> struct static_key * once_key <S2SV_ModEnd> ) { static <S2SV_ModStart> ; __net_random_once_disable_jump ( once_key <S2SV_ModEnd> ) ; return,1
765,"<S2SV_ModStart> -> mmap_sem ) ; if ( io_data -> kiocb_mm ( io_data -> kiocb ) ) ret = - EFAULT ; if ( io_mm ( io_data -> mm ) ) ret = - EIO_mm ( io_mm ) ; if ( io_mm ( io_data -> kiocb, ret ) ) ret = - EFAULT ; if ( io_mm ( io_data -> mm ) ) ret = - EFAULT ; if ( io_mm ( io_data -> ffs -> mm ) ret = - EFAULT ; if ( io_mm ( io_mm ( io_flags & io_mm ) ) ret = - EFAULT ; if ( io_mm ( io_data -> mm ) ) ret = - EFAULT ; if ( io_data -> ffs -> mm ) ret = - EFAULT ; if ( io_mm ( io_data -> ffs -> ffs -> ffs_eventfd, ret ) ) ;",0
766,<S2SV_ModStart> ; if ( IPCB ( skb ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> &&! opt,1
767,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
768,"<S2SV_ModStart> struct trusted_key_payload * new_p ; struct trusted_key_payload * new_p ; int ret = 0 ; if (! test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ; <S2SV_ModStart> 0 ] ; <S2SV_ModEnd> } <S2SV_null>",0
769,"<S2SV_ModStart> v |= ( JAS_CAST ( uint_fast32_t, c ) <S2SV_ModEnd> << 24 )",1
770,<S2SV_ModStart> NULL ) { if ( skb -> len < ROSE_CALL_REQ_ADDR_OFF || skb -> len!= ROSE_REQ_ADDR_LEN ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> 2 ] ; if ( skb -> len <= ROSE_REQUEST || skb -> len <= ROSE_CALL_REQ_REQ_ADDR_OFF ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> 2 ] ; },0
771,"<S2SV_ModStart> srcu ) ; kvm_iommu_unmap_pages ( kvm, & old ) ; <S2SV_ModStart> ) goto out_slots <S2SV_ModEnd> ; if (",0
772,<S2SV_ModStart> if ( indev && indev -> ifa_list <S2SV_ModEnd> ) { ifa,1
773,<S2SV_ModStart> = file ; <S2SV_ModEnd> if ( f,0
774,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",1
775,"<S2SV_ModStart>, p [ 0 ] <S2SV_ModEnd> ) ) {",0
776,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) server.,0
777,"<S2SV_ModStart> } if ( options -> flags & ( UV_PROCESS_SETUID | UV_PROCESS_SETGID ) ) { SAVE_ERRNO ( setgroups ( 0, NULL ) ) ; } if (",1
778,<S2SV_ModStart> ; if ( <S2SV_ModEnd> S2SV_null> <S2SV_null> <S2SV_null>,0
779,<S2SV_ModStart> client ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
780,<S2SV_ModStart> book -> dim && i < n,1
781,"<S2SV_ModStart> ( void ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3lf <S2SV_blank> %12.3f <S2SV_blank> %12.3lf <S2SV_blank> %12.3f <S2SV_blank> %12.3lf <S2SV_blank> %12.3f <S2SV_blank> %12.3lf <S2SV_blank> %12.3f <S2SV_blank> %12.3lf <S2SV_blank> %12.3lf <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3",0
782,<S2SV_ModStart> == - EEXIST || ret == - EOVERFLOW,1
783,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; BUG_ON <S2SV_ModStart> unix_tot_inflight -- ; } fp -> f_cred -> user -> unix_inflight -- ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
784,"<S2SV_ModStart> size_t chanmap_size = SF_MIN ( <S2SV_ModStart> sf. channels, layout_tag & 0xffff )",1
785,<S2SV_ModStart> = 1 ; <S2SV_ModEnd> if ( cpi,0
786,<S2SV_ModStart> ms ) { uint32_t <S2SV_ModEnd> nestsize = ( <S2SV_ModStart> nestsize = ( uint32_t <S2SV_ModEnd> ) ms ->,1
787,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
788,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
789,<S2SV_ModStart> -> xrefs = safe_calloc ( <S2SV_ModEnd> sizeof ( xref_t,1
790,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
791,"<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ) <S2SV_ModStart> ( opt ) { atomic_sub ( opt -> tot_len, & sk -> sk_omem_alloc ) ; txopt_put ( opt ) ; }",0
792,"<S2SV_ModStart>, * tmpout, * tmpout, * tmpout <S2SV_ModStart> = cmsb ; if (! tmpout ) { if (! tmpout ) goto err ; goto err ; } <S2SV_ModStart> out ) ; if (! SMIME_BINARY ) { if (! dcont ) { goto err ; } <S2SV_ModStart>, flags & SMIME_BINARY ) ; goto err ; } <S2SV_ModStart> if (! dcont ) { dcont = cms_get_text ( cms, flags & SMIME_text, flags ) ; goto err ; } if (! dcont ) { if (! SMIME_BINARY ) goto err ; } if (! dcont ) { dcont = cmsbio_get_text ( tmpout, tmpout ) ; if (! dcont ) goto err ; } <S2SV_ModStart> if (! dcont ) { if (! dcont ) goto err ; } else { dcont = cmsbio = cms_get_text ( tmpout, tmpout ) ; if (! (! dcont ) goto err ; } else { cmsbio = SMIME_get_text ( cms, tmpout ) ; } if (! (!",0
793,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * ),0
794,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> return 0 ;,0
795,"<S2SV_ModStart> cs_flags ) ; hook_add_nick_can_register ( check_registration_keywords ) ; hook_add_user_can_register ( check_registration_keywords ) ; del_conf_item ( ""ANOPE_FLAGS_COMPAT"", & chansvs. me -> conf_table ) ;",0
796,"<S2SV_ModStart> ) { struct in_device * idev <S2SV_ModEnd> = ( ( <S2SV_ModStart> ) -> ifa_dev <S2SV_ModEnd> ; struct netdev_notifier_info <S2SV_ModStart> netdev_notifier_info info ; if ( idev -> dead ) return NOTIFY_DONE ; <S2SV_ModStart> & info, idev ->",1
797,<S2SV_ModStart>!= mm ) { smp_mb ( ) ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> ) ) ; smp_mb ( ) ;,1
798,"<S2SV_ModStart>, void * pd <S2SV_ModEnd>, int *",0
799,<S2SV_ModStart> val ) { int temp_size = 500 ; char * temp_size = malloc ( temp_size ) <S2SV_ModEnd> ; int i,0
800,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
801,<S2SV_ModStart> ; dname = safe_calloc <S2SV_ModEnd> ( strlen (,0
802,"<S2SV_ModStart> = PEEK_UINT8 ; if ( addr_str_length > sizeof ( addr_str_buffer ) ) { log_warnx ( ""lldp"", ""too <S2SV_blank> large"" ) ; return - 1 ; }",0
803,<S2SV_ModStart> object + size < * object || * object + size <S2SV_ModStart> : if ( * object + size < * object || <S2SV_ModStart> object + size < * object || * object + size * object + size <S2SV_ModStart> object + size < * object || * object + size < * object + size <S2SV_ModStart> object + size < * object || * object + size < * object + size,0
804,"<S2SV_ModStart> ( interface, KSZ8851_ISRX <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, KSZ8851_MAHTR1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, KSZ8851_ISRX1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_MAHTR3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_MAHTR3 <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, KSZ8851_MAHTR3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_MAHTR1 <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, KSZ8851_MAH <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_MAHTR1 <S2SV_ModEnd> ) ) ;",0
805,<S2SV_ModStart> all_channels_lock ) ; put_net ( pch -> chan_net ) ; pch -> chan_net = NULL ;,1
806,"<S2SV_ModStart> out, * di = btrfs_dir_item <S2SV_ModEnd> ( inode -> <S2SV_ModStart> - ENOMEM ; if ( flags & XATTR_REPLACE ) ret = - ENOMEM ; if ( flags & XATTR_REPLACE ) di = - ENOMEM ; if ( flags & XATTR_REPLACE ) di = - ENOMEM ; if ( flags & XATTR_REPLACE ) di = - ENOMEM ; if ( flags & XATTR_REPLACE ) { if ( flags & XATTR_REPLACE ) ret = - ENXATTR_REPLACE ; if ( flags & XATTR_REPLACE ) ret = - ENXATTR_REPLACE ; di = - ENXATTR_REPLACE ; } if ( flags & XATTR_REPLACE ) { di = - ENXATTR_REPLACE ; if ( flags & XATTR_REPLACE ) ret = - ENXATTR_REPLACE ; di = - ENXATTR_REPLACE ; di = - ENXATTR_REPLACE ; di = - ENXATTR",0
807,"<S2SV_ModStart> count ) ; char * txt = op -> txt ; int txtLen = strlen ( op -> txt ) ; int txtLeft = R_ASM_BUFSIZE - txtLen ; txtLeft -= txtLen ; <S2SV_ModStart> ++ ) { snprintf ( txt, txt ) ; txtLeft = strlen ( txt ) ; txtLeft = strlen ( txt ) ; txtLeft = strlen ( txt ) ; txtLeft = strlen ( txt ) ; txtLeft = strlen ( txt ) ; txtLeft = strlen ( txt ) ; txtLeft = strlen ( txt ) ; snprintf ( txt, ""%d <S2SV_blank> "", txtLeft - 1 <S2SV_ModEnd>, ""%d"",",0
808,"<S2SV_ModStart> client -> proxy ) ; g_byte_array_free ( client -> auth_buffer, TRUE",1
809,<S2SV_ModStart> plane ] ; memset <S2SV_ModEnd> ( x ->,0
810,<S2SV_ModStart> ; if ( key_is_negative ( key <S2SV_ModEnd> ) ) return,1
811,"<S2SV_ModStart> NEED_IP ( t, <S2SV_ModStart> NEED_OP ( t, <S2SV_ModEnd> NEED_IP ( t <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_IP ( t, <S2SV_ModEnd> 3 ) ; <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_OP ( t, <S2SV_ModEnd> 15 ) ) ; <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t,",0
812,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
813,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
814,<S2SV_ModStart> vmx_vpid_bitmap ) ; <S2SV_ModEnd> for ( msr <S2SV_ModStart> 0x83f ) ; <S2SV_ModEnd> if ( enable_ept,1
815,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,0
816,"<S2SV_ModStart> void ) TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
817,<S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> * const rc,0
818,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
819,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
820,<S2SV_ModStart> INDENT_INCR ; } if ( tbl -> indent < 0 ) tbl -> indent = 0 ; <S2SV_ModStart> -= INDENT_INCR ; if ( offset < 0 ) offset = 0 ;,1
821,<S2SV_ModStart> + tail ; size_t ss = sst -> sst_dirlen <S2SV_null> <S2SV_null> <S2SV_null>,0
822,"<S2SV_ModStart> : # line 101 ""hex_grammar.y"" { RE_AST <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1199 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 1347 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1054 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1347 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 1147 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1347 <S2SV_ModEnd> ""hex_grammar.y"" break ; <S2SV_ModStart> } # line 945 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 945 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 1147 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 2523 <S2SV_ModEnd> ""hex_grammar.c"" { compiler <S2SV_ModStart> } # line 1347 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 220 <S2SV_ModEnd> ""hex_grammar.y""hex_grammar.c"" break ;",0
823,"<S2SV_ModStart>, xd -> <S2SV_ModEnd> ) ; if",0
824,<S2SV_ModStart> break ; } if ( strlen ( opt_fs ) + 1 > S_MAX ) return - 1 ;,0
825,<S2SV_ModStart> ; if ( key_is_positive ( key <S2SV_ModEnd> ) ) zap,1
826,"<S2SV_ModStart> ) -> filter ; memset ( & uf, 0, sizeof ( uf ) )",1
827,<S2SV_ModStart> -> buffer_size = 0 <S2SV_ModEnd> ; if (,0
828,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; } exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
829,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
830,<S2SV_ModStart> } if ( ( fibsize < ( sizeof ( struct user_sib ) ) || ( struct user_sibhdr ),0
831,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( cc0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorEncodeTile"", ""%s"", ""(cc0%rowsize)!=0"" ) ; return 0 ; } <S2SV_ModEnd> while ( cc",1
832,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
833,"<S2SV_ModStart> input_data, size_t input_forwards_size, size_t input_size, size_t input_backwards_size <S2SV_ModStart> = input_size ; max_bytes_matched = flags & RE_FLAGS_BACKWARDS? yr_backwards_size : input_size ; <S2SV_ModStart> ( input, character_size <S2SV_ModEnd>, yr_size <S2SV_ModStart> input ) ) { <S2SV_ModEnd> } # define <S2SV_ModStart> ( input_forwards_size, <S2SV_ModStart> ( input, character_size <S2SV_ModEnd>, RE_SCAN_FLAGS_BACKWARDS ) <S2SV_ModStart> ( input, yr_backwards_size, <S2SV_ModStart>, yr_backwards_size <S2SV_ModEnd> ) ; }",0
834,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart>, PREDICTION_MODE <S2SV_ModEnd>, PREDICTION_MODE <S2SV_ModStart> intra_mode, PREDICTION_mode, PREDICTION_MODE <S2SV_ModEnd> best_mode, PRED <S2SV_ModStart> best_mode, PREDICTION_MODE <S2SV_ModEnd>, best_mode, <S2SV_ModStart> best_rd ) { PREDICTION_MODE <S2SV_ModEnd> best_ref_mode = DC_PREDICTION_MODE <S2SV_ModStart> best_mode ] ; PREDICTION_MODE <S2SV_ModEnd> best_mode = x <S2SV_ModStart> = 0 ; <S2SV_ModEnd> best_mode = DC_PRED <S2SV_ModStart> = 0 ; <S2SV_ModEnd> best_rd_rd = UINT_REFERENCE_FRAME <S2SV_ModStart> ; if ( x == 0 &&",0
835,"<S2SV_ModStart> svm, MC_VECTOR ) ; set_exception_intercept ( svm, AC_VECTOR",1
836,<S2SV_ModStart> ; if ( h -> h_size >= 0,0
837,"<S2SV_ModStart> sst, const cdf_t * root_storage <S2SV_ModEnd> ) { cdf_summary_info_clsid_t <S2SV_ModStart> break ; } if ( root_storage ) { <S2SV_ModStart> = cdf_clsid_to_mime ( root_storage -> d_storage_storage_storage <S2SV_ModEnd>, clsid2desc ) <S2SV_ModStart> - 2 ; } <S2SV_ModStart>, count, root_storage <S2SV_ModEnd> ) ; free",0
838,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
839,<S2SV_ModStart> -> length ) ; if ( err ) return - EFAULT,1
840,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { VPX_CODEC_INVALID_PARAM ; <S2SV_ModEnd> if ( ctx",0
841,<S2SV_ModStart> if ( prev && <S2SV_ModEnd> ( FRAG6_CB ( <S2SV_ModStart> ) - offset <S2SV_ModEnd> > 0 ) <S2SV_ModStart> > 0 ) goto discard_fq ; if <S2SV_ModEnd> ( next && <S2SV_ModStart> < end ) goto discard_fq ; <S2SV_ModEnd> FRAG6_CB ( skb <S2SV_ModStart> - 1 ; discard_fq : fq_kill ( fq ) ;,1
842,<S2SV_ModStart> { uint16 bitspersample = 1,0
843,"<S2SV_ModStart> == '/' ) { int archive_set_error ( & a -> archive_number, a -> flags ) ; <S2SV_ModStart> ; } } } archive_set_error ( & a -> archive, a -> flags ) ; if ( r!= ARCHIVE_OK ) { archive_set_error ( a -> archive, ""%s"", error_number, a -> flags ) ; return ( EPERM ) ; } } if ( r!= ARCHIVE_OK ) { archive_set_error ( & a -> archive, ""%s"", error_number, a -> flags ) ; free ( a -> flags ) ; return ( ARCHIVE_OK ) ; } <S2SV_ModStart> ) ; } } archive_set_error ( a -> archive_set_error ( & a -> archive, ""%s"", error_number, a -> flags & RNOEXCHIVE_OK ) ; free ( r ) ; return ( ARCHIVE_OK ) ; }",0
844,"<S2SV_ModStart> ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL, rootfs -> path? rootfs -> mount : <S2SV_ModEnd> NULL )!=",1
845,"<S2SV_ModStart> inode, iinfo -> i_len <S2SV_ModEnd> ) ; if",0
846,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( lfm,",0
847,<S2SV_ModStart> dst_size ) { <S2SV_ModEnd> if ( gb <S2SV_ModStart> ; if ( data >= data_size <S2SV_ModEnd> ) return - <S2SV_ModStart> dst_size ) return - 1 <S2SV_ModEnd> ; } <S2SV_null>,0
848,"<S2SV_ModStart> ( ) ; alloc_array ( t1_line, strlen ( t1_line_array ) + 1 ) ;",0
849,<S2SV_ModStart> mq_ops ) ; hctx -> fq_mq = first_rq ;,0
850,<S2SV_ModStart> uint32_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,0
851,<S2SV_ModStart> |= 0 ; if (!,0
852,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; if (! <S2SV_ModStart>, cc ) ) return 0 <S2SV_ModStart> wc ) ; return 1 ;",1
853,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
854,<S2SV_ModStart> __be32 daddr ; struct ip_options_rcu * inet_opt ; <S2SV_ModStart> return 0 ; rcu_read_lock ( ) ; inet_opt = rcu_dereference ( inet -> inet_opt ) ; <S2SV_ModStart> ; if ( inet_opt && inet_opt -> opt. srr ) daddr = inet_opt -> opt. faddr ; rcu_read_unlock ( ) <S2SV_ModEnd> ; rt =,1
855,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
856,"<S2SV_ModStart> * mgr_hdl ; <S2SV_ModEnd> memset ( s_path <S2SV_ModStart> ( c_path ) <S2SV_ModEnd> ) ; switch <S2SV_ModStart> ( c_path, ""%s%s%d_C_XXXXXX"" <S2SV_ModEnd>, HSM_FM_SCK_PREFIX, <S2SV_ModStart> hdl -> instance <S2SV_ModEnd> ) ; if",1
857,<S2SV_ModStart> ) == NULL || replySize == NULL,0
858,"<S2SV_ModStart> ""`%s\'"", option ) ; page_geometry = DestroyString ( page_geometry",1
859,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * ),0
860,<S2SV_ModStart> data ) ; if ( data_len < 1 ) goto err ;,0
861,"<S2SV_ModStart> OP_ENDCATCH ) ; emit ( J, F, OP_ENDTRY ) ;",1
862,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_row_idx <S2SV_ModStart> return ; } LIBXSMM_ASSERT ( 0!= l_row && 0!= l_column ) ;",1
863,"<S2SV_ModStart>, rsize, 0",0
864,<S2SV_ModStart> uint8 result ; uint32 <S2SV_ModEnd> length ; STREAM,0
865,"<S2SV_ModStart> ; cleanup : if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> ; if (",1
866,"<S2SV_ModStart> l ) ; <S2SV_ModEnd> } } if <S2SV_ModStart> XML_ERR_NAME_TOO_LONG, ""Name"" ) ; return ( NULL ) ; } if ( ctxt -> input -> cur - ctxt -> input -> base < len ) { xmlFatalErr ( ctxt, XML_ERR_INTERNAL_ERROR, ""unexpected <S2SV_blank> change <S2SV_blank> of <S2SV_blank> input <S2SV_blank> buffer""",1
867,<S2SV_ModStart> ( vma ) ; if ( i < 0 ) return - EFAULT ;,0
868,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
869,"<S2SV_ModStart>! new_idmap_permitted ( file,",0
870,<S2SV_ModStart> [ k ] <S2SV_ModEnd> ; if (,0
871,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> ) ; } smb_ofile_flush ( sr, <S2SV_ModEnd> sr -> fid_ofile <S2SV_ModStart> sr -> fid_ofile <S2SV_ModEnd> ) ; (",1
872,,0
873,"<S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( ( <S2SV_ModStart> 4 ) ; memset <S2SV_ModEnd> ( dst,",0
874,"<S2SV_ModStart> = addr_name ; memset ( & addr, 0, sizeof ( addr ) ) ;",0
875,"<S2SV_ModStart> ( user_alloc && ( <S2SV_ModStart> PAGE_SIZE - 1 ) ) ||! access_ok ( VERIFY_WRITE, mem -> userspace_addr, mem -> memory_size",1
876,<S2SV_ModStart> ; END_OF_READING : <S2SV_ModEnd> CloseBlob ( image <S2SV_ModStart> -> previous ; if ( tmp == image2 ) image2 = ( Image * ) NULL ;,0
877,<S2SV_ModStart> } if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; } } \\\n} <S2SV_ModEnd> if ( strncasecmp,1
878,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 0 ) { if (! S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
879,"<S2SV_ModStart> } if ( ( user_sid_size > ( record_size - data_size ) - data_size ) ) { libcerror_error_set ( error, LIBCERROR_RUNTIME, LIBCERROR_OUT_BOUNDS, ""%s: <S2SV_blank> size <S2SV_blank> bounds."", function ) ; return - 1 ; } if (",0
880,"<S2SV_ModStart> WaveHeader WaveHeader ; int format_chunk = 0 ; <S2SV_ModStart>, format ; if ( format_chunk ++ ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",1
881,"<S2SV_ModStart> ; uint16_t numChannels = 0 <S2SV_ModStart> numChannels < 1 || numChannels > 256 <S2SV_ModStart> ) ) { if (! config -> num_channels ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
882,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_8BITS ( tptr ) ;,0
883,<S2SV_ModStart> ~ SNDRV_TIMER_IFLG_RUNNING ; list_del_init ( & timeri -> ack_list ) ; list_del_init ( & timeri -> active_list ) ;,1
884,"<S2SV_ModStart> char * ipv, * cp <S2SV_ModStart>, sizeof ( * cp <S2SV_ModEnd> ) ) { int <S2SV_ModStart> ; } } } <S2SV_ModEnd> = strchr ( cp <S2SV_ModStart> ) ) ; if ( cp == 0 || len == 0 || strcmp ( cp, ""."" ) == 0 || strchr ( cp, sizeof ( cp, ""."" ) ) == 0 <S2SV_ModEnd> ) { run_err ( <S2SV_ModStart> return 0 ; }",0
885,<S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_flags_compat &&,1
886,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
887,"<S2SV_ModStart> ; if ( strcmp ( sub_demuxer -> name, ""srt"" ) && strcmp ( sub_demuxer -> name, ""ass"" ) ) goto error ; if (",1
888,"<S2SV_ModStart> krb5_data null_server ; krb5_data d ; <S2SV_ModStart> retval ) ; d = make_data ( appl_version, strlen ( appl_version ) + 1 ) <S2SV_ModEnd> ) ; if (",0
889,<S2SV_ModStart> void write_segment_id ( vpx_writer <S2SV_ModEnd> * wb ),0
890,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
891,<S2SV_ModStart> dptr ++ = ROSE_CALL_REQ_ADDR_LEN_VAL <S2SV_ModEnd> ; memcpy (,1
892,<S2SV_ModStart> copy_flags |= CL_SHARED_TO_SLAVE | CL_UNPRIVILEGED,0
893,<S2SV_ModStart> = 1 ; memset <S2SV_ModEnd> ( cpi ->,0
894,<S2SV_ModStart> ; zip_object_handlers. get_gc = php_zip_get_gc ; zip_object_handlers.,1
895,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if <S2SV_ModEnd> ( iova < <S2SV_ModStart> mem -> length || length > <S2SV_ModEnd> mem -> iova <S2SV_ModStart> case length : return <S2SV_ModEnd> 0 ; default,0
896,"<S2SV_ModStart> = 0 ; ND_TCHECK2 ( * dp, sizeof ( * ni6 ) ) ; <S2SV_ModStart> ) + 4 ; ND_TCHECK ( cp [ 0 ] )",1
897,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
898,<S2SV_ModStart> sent = 0 <S2SV_ModEnd> ; smb_msg.,1
899,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; if ( ref -> ref > INT_MAX / 2 ) return false ; <S2SV_ModStart> ref ++ ; return true ;,1
900,<S2SV_ModStart> += 4 <S2SV_ModEnd> ; if (,0
901,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
902,<S2SV_ModStart> sk_nulls_node ) ; sk_node_init ( & sk -> sk_node ) ;,0
903,<S2SV_ModStart> } } } <S2SV_ModEnd> } else {,0
904,<S2SV_ModStart> (! mm ||! mm -> env_end,1
905,"<S2SV_ModStart> inode * inode, int relocated ) { int flags = relocated? RR_RELOC_DE : 0 ; <S2SV_ModEnd> int result = <S2SV_ModStart>, inode, flags <S2SV_ModEnd> ) ; if <S2SV_ModStart>, inode, flags | RR_REGARD_XA <S2SV_ModEnd> ) ; }",1
906,<S2SV_ModStart> * inotify_new_group ( <S2SV_ModEnd> unsigned int max_events <S2SV_ModStart> -> inotify_data. fa = NULL <S2SV_ModEnd> ; group -> <S2SV_ModStart> -> inotify_data. user = get_current_user ( ) ; if ( atomic_inc_return ( & group -> inotify_data. user -> inotify_devs ) > inotify_max_instances ) { fsnotify_put_group ( group ) ; return ERR_PTR ( - EPERM ) ; } <S2SV_ModEnd> return group ;,0
907,<S2SV_ModStart> in -> data [ plane ] && in -> linesize,0
908,"<S2SV_ModStart> count, 2 <S2SV_ModEnd> ) ; }",0
909,<S2SV_ModStart> buffer ) ; if ( vpx_free_buffer ( sb ) ) return NULL ;,0
910,"<S2SV_ModStart> SCALAR_VALUE ) { coerce_reg_to_size ( & <S2SV_ModStart> [ value_regno ], size <S2SV_ModEnd> ) ; }",1
911,"<S2SV_ModStart> = 0 ; uint32 <S2SV_ModEnd> strip, nstrips",1
912,,0
913,<S2SV_ModStart> long flags ; } <S2SV_ModEnd> if ( flags,0
914,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = -,1
915,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
916,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if (! context ) return FALSE ; <S2SV_ModStart> originalSize ) ; if ( context -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModStart> 0xFF ) ; if (! <S2SV_ModStart> originalSize ) return FALSE ; if ( context -> PlaneBuffersLength < originalSize ) return FALSE ;,0
917,<S2SV_ModStart> policy ) { if (! inode_owner_or_capable ( inode ) ) return - EACCES ;,1
918,<S2SV_ModStart> state ) ; <S2SV_ModEnd> } } },0
919,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
920,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
921,"<S2SV_ModStart> ) ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> header <S2SV_blank> to <S2SV_blank> header_bin, <S2SV_blank> got <S2SV_blank> %s"", __func__, header ) ; pool_failed ( pool ) ; return false ; } <S2SV_ModEnd> cb1 = (",0
922,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
923,"<S2SV_ModStart> size ) { size_t res ; if ( check_mul_overflow ( num, size, & res ) ) abort ( ) ; void * ptr ; <S2SV_ModEnd> ptr = malloc <S2SV_ModStart> = malloc ( res <S2SV_ModEnd> ) ; if <S2SV_ModStart> '\\0', ( res <S2SV_ModEnd> ) ) ;",1
924,<S2SV_ModStart> ioc ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
925,<S2SV_ModStart> * PyId | PyObject <S2SV_ModEnd> ) ; PyObject,0
926,<S2SV_ModStart> ; if ( u16 port ) return - EINVAL ; if (,0
927,"<S2SV_ModStart> event ) { struct perf_event_ctx * ctx = ctx ; <S2SV_ModStart> ( event, <S2SV_ModEnd> arg ) ; perf_event_ctx_unlock <S2SV_ModStart> ( event, <S2SV_ModEnd>, arg, <S2SV_ModStart>, 1, <S2SV_ModEnd> ) ; }",0
928,"<S2SV_ModStart> acked_out, false",0
929,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode ( VP9_COMMON <S2SV_ModStart> * cm, MACROBLOCKD * xd, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { const PREDICTION_MODE <S2SV_ModEnd> mode = vpx_prob",0
930,"<S2SV_ModStart> mask ) { struct skcipher_tfm * tfm ; struct crypto_skcipher * skcipher ; tfm = kzalloc ( sizeof ( * tfm ), GFP_KERNEL ) ; if (! tfm ) return ERR_PTR ( - ENOMEM ) ; kfree ( skcipher ) ;",0
931,<S2SV_ModStart> - EINVAL ; if ( unlikely (! cmd -> count ) ) return - EINVAL ;,0
932,"<S2SV_ModStart> c -> tile_width <S2SV_ModEnd>, 16 ) <S2SV_ModStart>, 16 ) * 3",1
933,"<S2SV_ModStart> ) ; } if ( rb_ivar_set ( self, id_key_set, Qtrue ) ) ;",0
934,,1
935,<S2SV_ModStart> -> server. nr_enabled <S2SV_ModEnd> ) ; if,0
936,"<S2SV_ModStart> p ) { return <S2SV_ModEnd> chdlc_print ( ndo <S2SV_ModStart>, p, h -> len <S2SV_ModEnd> ) ; }",1
937,<S2SV_ModStart> (! rc <S2SV_ModEnd> && tcon ),1
938,<S2SV_ModStart> ; if ( skb_is_err_queue ( skb ) &&,0
939,,0
940,<S2SV_ModStart> ; # endif al = s -> s3 ->,0
941,<S2SV_ModStart> { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE ) { return SECURE_ELEMENT_ERROR_BUF_SIZE,1
942,<S2SV_ModStart> + 1 ; if ( rv > session -> max_settings ) { return NGHTTP2_ERR_INVALID_SETTINGS ; } if ( s -> max_settings ) { return - 1 ; },0
943,<S2SV_ModStart> = ucounts ; new_ns -> mounts = 0 ; new_ns -> pending_mounts = 0 ;,1
944,"<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( dst,",0
945,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
946,<S2SV_ModStart> + 2 ; unsigned int actual_size = r -> begin < actual_size? r -> begin : actual_size ; unsigned int actual_size = r -> end < actual_size? r -> end : actual_size : actual_size,0
947,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> challenge_net_net ( challenge_challenge_net <S2SV_ModEnd> ( challenge,",0
948,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
949,"<S2SV_ModStart> int vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> * w, vpx_reader <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) { const vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; const vpx_write_bit <S2SV_ModEnd> ( w,",0
950,"<S2SV_ModStart> write_bit_buffer ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> write_buffer ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> write_buffer ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> code ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
951,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int name ;,0
952,"<S2SV_ModStart> desc ; int num_descriptors ; size_t num_descriptors ; num_descriptors = offsetof ( hdesc -> bNumDescriptors, sizeof ( struct hid_descriptor ) ) ; if ( hdesc -> bNumDescriptors < 0 || num_desc -> bLength < sizeof ( struct hid_descriptor ) ) { dev_err ( & interface -> bNumDescriptors, ""invalid <S2SV_blank> descriptors <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - EINVAL ; }",0
953,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> len=%u <S2SV_blank> method=%u"" <S2SV_ModEnd>, len - <S2SV_ModStart> ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> short"" <S2SV_ModEnd>, len - <S2SV_ModStart> ndo -> ndo_vflag ) ) ; break ; }",0
954,<S2SV_ModStart> ) exit_io_context ( tsk,0
955,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> const char * name <S2SV_ModEnd> ) obj",0
956,,0
957,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
958,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> j2 ) { memset <S2SV_ModEnd> ( x1, <S2SV_ModStart> 8 ) ; memset <S2SV_ModEnd> ( x1, <S2SV_ModStart> 2 ) ; memset <S2SV_ModEnd> ( x1, <S2SV_ModStart> 8 ) ; memset <S2SV_ModEnd> ( x1,",0
959,<S2SV_ModStart> ( tag == ASN1_EOC <S2SV_ModEnd> ) { if,0
960,<S2SV_ModStart> ) val ; <S2SV_ModEnd> memset ( ptr,1
961,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
962,"<S2SV_ModStart> PHP_SHA512_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_SHA256_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_SHA1_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> FAILURE ; } if ( sig_len < sizeof ( digest ) ) { spprintf ( error ) ; } return FAILURE ; }",0
963,<S2SV_ModStart> ; if (! counts -> counts ) return 0 ; if (,0
964,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
965,<S2SV_ModStart> if ( argReg > <S2SV_ModEnd> regsz ) { <S2SV_ModStart> regsz ) { return ;,1
966,"<S2SV_ModStart>, rqh_val, req_name <S2SV_ModEnd> ) ; req_to_args",0
967,<S2SV_ModStart> 0 ) ; args -> rmtvaluelen <S2SV_ModEnd> = args ->,0
968,<S2SV_ModStart> = malloc ( <S2SV_ModEnd> sizeof ( struct,0
969,<S2SV_ModStart> S2SV_null> <S2SV_null> <S2SV_null> static,0
970,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) &&! test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) &&",1
971,"<S2SV_ModStart> ) ) ; if ( LTXTQUERY_TOO_BIG ( state. num, state. sumlen ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""ltxtquery <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ) ) ;",1
972,<S2SV_ModStart> Screen ) { <S2SV_ModEnd> return 0 ;,0
973,<S2SV_ModStart> ; if (! EXT4_SB ( inode -> i_sb ) -> s_journal <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd>! handle ),1
974,<S2SV_ModStart> char buf [ 100 <S2SV_ModEnd> ] ; int <S2SV_ModStart> ; if ( numS2SV_null> <S2SV_null>,0
975,"<S2SV_ModStart> ( f, ""PG%31[ <S2SV_blank> \\t]%c%d"" <S2SV_ModEnd>, temp,",0
976,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> r2SV_null>,0
977,"<S2SV_ModStart>, 1 ) <S2SV_ModEnd> ; if (",0
978,"<S2SV_ModStart> char * tty <S2SV_ModEnd> ; if ( <S2SV_ModStart> ), opts <S2SV_ModEnd> ) ; }",0
979,"<S2SV_ModStart> char * sufx = g. inf ; if ( sufx == 0 ) { sufx = sufx ; sufx = g. sufx = sufx ; } <S2SV_ModEnd> * sufx = <S2SV_ModStart> ( sufx, sufx, sufx, <S2SV_ModEnd>, g. <S2SV_ModStart>, len, sufx ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( sufx ) sufx = g. hname <S2SV_ModEnd> sizeof ( <S2SV_ModStart> = g. sufx ) sufx = sufx ; if ( sufx ) sufx = g. outf + pre + pre + len ; if ( sufx ) g. sufx = g. sufx = g. sufx ; } else sufx = g. g. sufx = g. sufx ; for ( sufx = g. sufx = g. outf + pre + pre + len ; } else sufx = g. sufx ; for ( g. sufx = g. outf + len + pre + len + pre + pre + pre + len ; if ( sufx ) g. sufx = g. sufx = g. outf + pre + pre + len ; } else if ( g. outf + len == - sufx ) g. sufx",0
980,,1
981,<S2SV_ModStart> * output ; MagickBooleanType status ; <S2SV_ModStart> ) ; } status = MagickTrue ; <S2SV_ModStart> i ++ ) { status = MagickFalse ; <S2SV_ModStart> ( void ) fclose ( void ) ; ( void ) output ( void ) fclose ( void ) ; return ( void ) ; } status = MagickFalse ) ; <S2SV_ModStart> ( void ) fclose ( <S2SV_ModEnd> output ) ;,0
982,<S2SV_ModStart> si ) { ( SvcInternal_t <S2SV_ModEnd> * ),0
983,"<S2SV_ModStart> ( sb, KERN_ERR,",1
984,"<S2SV_ModStart> passwd * pwd, const char * prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> & tmpname, ""/etc"", prefix <S2SV_ModEnd> ) ) ==",1
985,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
986,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
987,"<S2SV_ModStart> TRUE ; } Jid * my_jid = jid_get_jid ( ) ; Jid_create ( stanza_from ) ; const char * msg_jid = jid_create ( stanza_from ) ; Jid * msg_jid = jid_jid_jid ( stanza_jid -> barejid, msg_jid -> barejid ) ; if ( my_jid -> barejid!= 0 ) { stanza_from ( stanza_jid -> barejid, stanza_jid -> barejid, stanza_from ) ; return FALSE ; }",0
988,<S2SV_ModStart> 0 ) { int class = <S2SV_ModEnd> getClientTypeByName ( v <S2SV_ModStart> j ] ) ; if ( class <S2SV_ModStart> == - 1 || class == CLIENT_TYPE_MASTER,1
989,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int name ;,0
990,"<S2SV_ModStart> FAILURE ) { <S2SV_ModStart> ( LOG_DEBUG, ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> %s"" <S2SV_ModEnd>, NULL ) <S2SV_ModStart> return - 1 ; } # ifdef HAVE_NONLY ) ; # endif",0
991,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; BT_DBG (,1
992,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
993,<S2SV_ModStart> ; if ( sm -> <S2SV_ModEnd> )!= 0,0
994,<S2SV_ModStart> = e_error ; if ( IMPEG2D_UNSUPPORTED_DIMENSIONS == ps_op -> u4_pic_size || ps_dec -> u2_total_width > ps_dec -> u2_max_width ) { return e_error ; },0
995,<S2SV_ModStart> * zone ; size_t tilemap_size ; <S2SV_ModStart>. height ; } <S2SV_ModEnd> x_size = malloc,0
996,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ; return ( 0 ) <S2SV_ModStart>, length ) ) ; ND_TCHECK ( cp [ 2 ] <S2SV_ModStart> ) ; } return ( 0 )",0
997,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
998,<S2SV_ModStart> ; # endif if ( enc_t ) return 0 ;,0
999,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> + 1, ""protos=%490s"" <S2SV_ModEnd>, buf ) <S2SV_ModStart> ) ) > L_BUFSIZE <S2SV_ModEnd> ) ; if",0
1000,<S2SV_ModStart> if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks,1
1001,"<S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu,",0
1002,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } return ;,0
1003,<S2SV_ModStart> ( gb ) ; if (! s -> studio_profile && s -> profile!= 8 ) s -> avctx -> bits_per_sample = 0,0
1004,<S2SV_ModStart> nsops < 1 || nsops > SEMOPM,1
1005,<S2SV_ModStart> = 0 ; ( void ) s ;,0
1006,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; },1
1007,<S2SV_ModStart> -> width ; if ( ( i -> width > i -> height ) && ( ( i -> width ) - 1 ),0
1008,<S2SV_ModStart> >> 2 ; if ( q + o >= e ) goto out ;,0
1009,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( bytes_matched,0
1010,"<S2SV_ModStart> case LEX_ID : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""EOF"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_ID : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_ID : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_ID : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_ID : strcpy <S2SV_ModEnd> ( str,",0
1011,"<S2SV_ModStart> mnt_instance ) ; if ( unlikely (! list_empty ( & mnt -> mnt_mounts ) ) ) { struct mount * p, * tmp ; list_for_each_entry_safe ( p, tmp, & mnt -> mnt_mounts, mnt_child ) { umount_mnt ( p ) ; } }",1
1012,"<S2SV_ModStart> void encode_uniform ( struct vpx_writer * w, <S2SV_ModStart> bit_buffer ) { vpx_wb_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) ; vpx_wb_write_literal <S2SV_ModEnd> ( w,",0
1013,,1
1014,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
1015,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ; } } err =,0
1016,<S2SV_ModStart> else if ( cpu_has_secondary_exec_ctrls ( ) && ( vmcs_read32 ( SECONDARY_VM_EXEC_CONTROL ) & SECONDARY_EXEC_VIRTUALIZE_X2APIC_MODE ) <S2SV_ModEnd> ) { if,1
1017,<S2SV_ModStart> if ( ent == NULL ) { st = KRB5_NOENTRY ; <S2SV_ModEnd> goto cleanup ;,0
1018,<S2SV_ModStart> - 1 ; if ( ps_dec -> u4_num_total_mbs ) { return IHEVCD_SUCCESS ; },0
1019,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ip = bh_blk2 ( struct bh * ) <S2SV_ModEnd> ; if (,0
1020,"<S2SV_ModStart> ) ) ; if ( psf -> num_samples > psf -> data_size ) { return 0 ; <S2SV_ModStart> = '\\n"" ; }",0
1021,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( i,1
1022,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
1023,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1024,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0644 ) ; <S2SV_ModEnd> return 0 ;",0
1025,"<S2SV_ModStart> int num_items_scanned ; guint pkt_len ; int <S2SV_ModEnd> pktnum, hr <S2SV_ModStart> + 64, ""LEN=%9u"" <S2SV_ModEnd>, & pkt_len",0
1026,<S2SV_ModStart> ; int err = 0 ; msg -> msg_namelen,1
1027,"<S2SV_ModStart> ; if ( zend_hash_find <S2SV_ModEnd> ( ht,",1
1028,"<S2SV_ModStart> ) ) ; nla_strlcpy <S2SV_ModEnd> ( link_info. <S2SV_ModStart> TIPC_NLA_LINK_LINK_NAME ], TIPC_MAX_LINK_LINK_LINK_NAME ] )",0
1029,<S2SV_ModStart> ) ; } <S2SV_ModEnd> switch ( io,0
1030,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",1
1031,<S2SV_ModStart> p -> tokenpos >= ( <S2SV_ModEnd> p -> tokenlen <S2SV_ModStart> p -> tokenlen - 1 ),1
1032,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_write_bit <S2SV_ModEnd> ( vpx_bit_literal <S2SV_ModEnd> ) { const <S2SV_ModStart> return vpx_read_bit <S2SV_ModEnd> ( & VP9_CODEV12 ) <S2SV_ModStart> ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) return vpx_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } return vpx_wb_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> ) break ;",0
1033,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1034,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> & 0xFFFF ; },1
1035,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
1036,"<S2SV_ModStart> ( krb5_data, NULL <S2SV_ModEnd> ) ; }",0
1037,<S2SV_ModStart> ( ( void ) malloc ( <S2SV_ModEnd> ) ; },0
1038,"<S2SV_ModStart> -> stratum_port ; snprintf ( address, 254 <S2SV_ModEnd>, ""%s:%s"",",1
1039,<S2SV_ModStart> } <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1040,,0
1041,<S2SV_ModStart> head -> iov_base ; if ( hdr > head -> iov_len ) return 0,1
1042,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
1043,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> len ) ; return - EIO ;,0
1044,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
1045,<S2SV_ModStart> ; ssize_t count ; if ( bytes == 0 || items == 0 ) return 0,1
1046,<S2SV_ModStart> -> serviceId = <S2SV_ModEnd> ; if (,0
1047,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,0
1048,<S2SV_ModStart> nd_cmd ) ; <S2SV_ModEnd> if ( addr_len,0
1049,<S2SV_ModStart> ; if (! retvaluelen ) return NULL ; if (,0
1050,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1051,<S2SV_ModStart> 0 ) ; hrtimer_try_to_cancel <S2SV_ModEnd> ( & stime,1
1052,"<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> low ) ; }",0
1053,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct l2cap_pi ( struct rdp_conf_rsp ) <S2SV_ModEnd> ; switch ( <S2SV_ModStart> ( rfc ) <S2SV_ModEnd> ; switch ( <S2SV_ModStart> case L2CAP_CONF_MAX : case L2CAP_CONF_DISCONF_MAX : sizeof ( rfc ), L2CAP_CONF_DISCONF_MAX, sizeof ( * ), rfc ) ; rfc. mode = L2CAP_CONF_MAX_DEVICE ; rfc. rfc. rfc. l2cap_mode = L2CAP_CONF_MAX ; rfc. mode = l2cap_get_mode ( sk ) ; if (! l2cap_mode ) return - EINVAL ; rfc. mode = l2cap_get_conf_mode ( rfc. mode, L2CAP_CONF_MAX, L2CAP_CONF_MAX, sizeof ( rfc ) ) ; rfc. mode = L2CAP_CONF_DISCONF_MAX ; rfc. mode = L2CAP_CONF_",0
1054,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
1055,"<S2SV_ModStart> s -> size, 0",0
1056,<S2SV_ModStart> } } } else {,0
1057,<S2SV_ModStart> } else { p ++ ; },0
1058,<S2SV_ModStart> } err = crypto_rng_alg ( tfm ) <S2SV_ModEnd> -> seed (,1
1059,<S2SV_ModStart> count ) ; if (! ucounts -> count ) return - EINVAL,0
1060,<S2SV_ModStart> ) ; } if ( err == 0 ) goto out_put ; if ( datagrams <S2SV_ModEnd> == 0 ) <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1061,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1062,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> = 0 ; len - i >= 8 * 32 <S2SV_ModEnd> ; i += <S2SV_ModStart> ] ; } for ( ; i < len ; i += 32 ) { ( void ) tab [ i ] ; },1
1063,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { if ( <S2SV_ModStart> ) ; } if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result ) ;,1
1064,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { spin_unlock <S2SV_ModStart> ( fmode, fmode <S2SV_ModEnd> ) ; spin_unlock <S2SV_ModStart> ( fmode, fmode <S2SV_ModEnd> ) ; spin_unlock",0
1065,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1066,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1067,,0
1068,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static const VP9_null> static <S2SV_ModStart> int mi_dist_quant ; const VP9_COMMON * const cm = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const int mi_row = xd -> mi [ 0 ] ; const int64_t * rd = & cpi -> mi_row, mi_cols [ 0 ] -> mbmi ; const int64_t * rd = & cpi -> mi [ 0 ] ; const int64_t * cpi -> mbmi ; const int64_t * rate = & cpi -> mi [ 0 ] ; const int64_t * rd = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( xd -> flags & YV12_FLAG_HIGHBITDEPTH ) return ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( xd -> flags & YV12_FLAG_FLAG",0
1069,<S2SV_ModStart> ) ) ; if ( pmd < 0 ) goto,0
1070,"<S2SV_ModStart> ND_TCHECK ( * tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> } trunc : ND_PRINT ( ( ndo, ""[|esis]"" ) ) <S2SV_ModEnd> ; } <S2SV_null>",1
1071,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) return - 1 <S2SV_ModEnd> ; if (,0
1072,"<S2SV_ModStart> segment_id, vpx_reader <S2SV_ModEnd> * r )",0
1073,<S2SV_ModStart> ; uint32_t backup_handle = 0 <S2SV_ModStart> ret == 0 ) { if ( <S2SV_ModEnd> res -> backup <S2SV_ModStart> goto out_unlock ; } else { backup_handle = req -> buffer_handle ; },1
1074,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> segment_desc_struct <S2SV_ModEnd> ( struct desc_struct <S2SV_ModStart> desc_t ) { bool success = false <S2SV_ModEnd> ; struct desc_struct <S2SV_ModStart> segment_desc_entries ) return false <S2SV_ModEnd> ; } <S2SV_null>,0
1075,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",0
1076,"<S2SV_ModStart> sctp ) ; struct fl6_p * opt = fl6_dst ( fl6, np -> opt, & final ) ; <S2SV_ModStart>, fl6, final ) ; final_p = fl6_update_dst ( fl6, np -> opt, & final ) ; <S2SV_ModStart>, fl6, & final ) ; fl6_update_s ( fl6, np -> opt, fl6, & final ) ; <S2SV_ModStart>, fl6, np -> opt, fl6, fl6, fl6, & final ) ; <S2SV_ModStart>, fl6, fl6_p <S2SV_ModEnd>, fl6,",0
1077,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1078,<S2SV_ModStart> buf + 2 <S2SV_ModEnd> ) ; },0
1079,"<S2SV_ModStart> = conn ; <S2SV_ModEnd> g_debug ( ""GsmXSMPClient: <S2SV_blank> Initializing <S2SV_blank> client <S2SV_blank> %s""",1
1080,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> < ie && <S2SV_ModEnd> ND_TTEST ( *,1
1081,"<S2SV_ModStart> ( interface, KSZ8851_ISRX <S2SV_ModEnd> ) ; struct <S2SV_ModStart> ( interface, KSZ8851_ISRXR, KSZ8851_ISRX <S2SV_ModEnd> ) ; skb <S2SV_ModStart> ( interface, KSZ8851_ISRXST <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_ISRX ) ; <S2SV_ModStart> ( interface, KSZ8851_MAHDR_LEN <S2SV_ModEnd>, KSZ8851_MASK ) <S2SV_ModStart> ( interface, KSZ8851_TX2 <S2SV_ModEnd> ) ; }",0
1082,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1083,<S2SV_ModStart> } if ( assoc_array_is_leaf ( ptr ) &&,0
1084,<S2SV_ModStart> ; server. ds_flags <S2SV_ModEnd> = 0 ;,0
1085,<S2SV_ModStart> ( instance -> <S2SV_ModEnd> ) ; },0
1086,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( i, <S2SV_ModStart> ; j = 0 ; j <S2SV_null> <S2SV_null> <S2SV_null>",0
1087,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
1088,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1089,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1090,"<S2SV_ModStart> 0 ) ; int minsz = R_MIN ( len, 0 ) ; minsz = R_MAX ( len, 0 ) ; <S2SV_ModStart> ; j < minsz <S2SV_ModEnd> ; j ++ <S2SV_ModStart> ++ ) { <S2SV_ModStart>!= 0 ; } <S2SV_ModStart>!= UT64_MAX ) { <S2SV_ModStart> ptr ) ; }",0
1091,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2 ) ; printf ( ""too <S2SV_blank> many <S2SV_blank> output <S2SV_blank> output <S2SV_blank> (%d)\\n"", fprintf ( stderr, out, fsize ) ; return - 1 ; } if ( strlen ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %d\\n"", fprintf ( stderr, snprintf ( stderr, ""Error: <S2SV_blank> %d\\n"", fprintf ( stderr, fname ) ) ; exit ( 1 ) ; <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> file\\n"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; } fprintf ( stderr, <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> <S2SV_blank> in <S2SV_blank> size: <S2SV_blank> %d\\n"" <S2SV_ModEnd>, <S2SV_blank> %s\\n"", <S2SV_ModStart> ( int f, snprintf ( stderr, <S2SV_ModStart> ( stderr, f, ""Error: <S2SV_blank> %d\\n"" <S2SV_ModEnd>, <S2SV_blank> file )",0
1092,<S2SV_ModStart> + JQ_DATA_BUFF ; size = <S2SV_ModEnd> readw ( chip <S2SV_ModStart> + JQS_wQS_wSize ) ; if ( ++ head > size || readw ( chip -> data + JQS_wDSPQS_wSize > size ) { size = 0 ; goto out ; } size = <S2SV_ModEnd> + JQS_w ( chip <S2SV_ModStart> + JQData + JQS_wSize ) ; if ( ++ pos > size ) return 0 ; } out :,0
1093,<S2SV_ModStart> * opcode_desc ; if ( len < 2 ) { return NULL ; },1
1094,<S2SV_ModStart> acpi_status status ; <S2SV_ModEnd> union acpi_operand_object * <S2SV_ModStart> acpi_operand_object * next ; ACPI_FUNCTION_TRACE ( ns_terminate ) <S2SV_ModStart> ) ; } <S2SV_ModEnd> acpi_object * next_node,0
1095,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
1096,<S2SV_ModStart> [ sizeof ( the_url <S2SV_ModEnd> ) - 1,0
1097,<S2SV_ModStart> * obj ; size_t <S2SV_ModEnd> i ; if,0
1098,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
1099,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx ) { vpx_codec_alg_priv_t * priv = NULL ; <S2SV_ModStart> vpx_codec_alg_priv_t * priv ; vpx_codec_alg_t * priv <S2SV_ModEnd> = NULL ; <S2SV_ModStart> vpx_codec_alg_priv_t * priv <S2SV_ModEnd> = sizeof ( <S2SV_ModStart> vpx_codec_alg_priv_t * priv <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ctx ) ; priv <S2SV_ModEnd> -> cfg = <S2SV_ModStart> vpx_codec_alg_priv_t * priv <S2SV_ModEnd> = NULL ;",0
1100,<S2SV_ModStart> ( args -> rmtvaluelen <S2SV_ModEnd> ) ; if,0
1101,,0
1102,<S2SV_ModStart> list ) { spin_lock_irqrest ( & master -> timeri_lock ) ; spin_unlock ( & timeri -> lock ) ; <S2SV_ModStart> slave_head ) ; spin_unlock ( & timeri -> lock ) ;,0
1103,<S2SV_ModStart> return - EINVAL ; if (! data [ TIPC_SOCK_NLA_SOCK ] ) return - EINVAL ; <S2SV_ModStart> [ TIPC_NLA_SOCK_SOCK_SOCK <S2SV_ModEnd> ; if ( <S2SV_ModStart> [ TIPC_NLA_SOCK_SOCK_SOCK <S2SV_ModEnd> [ TIPC_NLA_SOCK_SOCK_SOCK_REF ] <S2SV_ModEnd> ; if ( <S2SV_ModStart> [ TIPC_NLA_SOCK_SOCK_REF ] <S2SV_ModEnd> ; tsk = <S2SV_ModStart> [ TIPC_NLA_SOCK_SOCK_NLA_NLA_SOCK_SOCK_REF ] <S2SV_ModEnd> ; if ( <S2SV_ModStart> [ TIPC_NLA_NLA_SOCK_SOCK_SOCK_REF ] <S2SV_ModEnd> ; if (,0
1104,"<S2SV_ModStart> data ) ; memset ( ctx, 0, sizeof ( ctx ) ) ;",0
1105,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1106,<S2SV_ModStart> ) buffer ; if ( total_len < sizeof ( * cap ) || total_len < <S2SV_ModEnd> cap -> bLength,0
1107,<S2SV_ModStart> task = current <S2SV_ModEnd> ; if (,1
1108,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo ->,0
1109,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( interface, ENC28J60_MICMD, ENC28J60_MICMD_MIIRD <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MICMD, ENC28J60_MICMD <S2SV_ModEnd> ) ; data <S2SV_ModStart> ( interface, ENC28J60_MICMD <S2SV_ModEnd>, 0 )",0
1110,"<S2SV_ModStart> fmt ) { return bad_format_check ( ""^"" SAFE_STRING ""%lu"" SAFE_STRING ""%lu"" SAFE_STRING ""%lu"" SAFE_STRING ""%lu"" SAFE_STRING ""%lu"", fmt <S2SV_ModEnd> ) ; }",0
1111,"<S2SV_ModStart> ; kfree ( rcu_dereference_protected ( inet -> inet_opt, 1 ) <S2SV_ModEnd> ) ; dst_release",1
1112,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
1113,<S2SV_ModStart>! invalid ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\r' ) { bp ++ ; <S2SV_ModStart> goto invalid ; },0
1114,<S2SV_ModStart> ; args -> rmtvaluelen = args -> rmtvaluelen ; args -> rmtblk = args -> rmtvaluelen ; args -> rmtvaluelen = args -> rmtvaluelen ; args -> rmtvaluelen = be32_to_cpu ( args -> rmtvaluelen ) ; args -> rmtvaluelen = args -> rmtvaluelen ; args -> rmtvaluelen = args -> rmtvaluelen <S2SV_ModEnd> ; return,0
1115,<S2SV_ModStart> ( ) ; if (! Stream_SafeSeekCheck ( ) ),0
1116,,0
1117,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,0
1118,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
1119,<S2SV_ModStart> u8 label_len ; <S2SV_ModEnd> GET8 ( label_len <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ;,1
1120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( cc % <S2SV_ModStart> * stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpAcc"", ""%s"", ""cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> tmp ) ; return 1 ;",1
1121,"<S2SV_ModStart> -> vm_ops ) <S2SV_ModEnd> return do_fault ( <S2SV_ModStart>, pte, pmd, flags, entry ) ; <S2SV_ModEnd> return do_anonymous_page ( <S2SV_ModStart>, address, pte, pmd, <S2SV_ModEnd> flags ) ;",1
1122,"<S2SV_ModStart> s ) { size_t len = strlen ( s ) + 1 ; <S2SV_ModStart> = pool_alloc ( len ) ; memcpy <S2SV_ModEnd> ( r, <S2SV_ModStart> r, s, len",1
1123,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1124,"<S2SV_ModStart>! new_idmap_permitted ( file,",1
1125,"<S2SV_ModStart>. string ; if ( name > 1024 ) { <S2SV_ModStart> ) ; } else { eprintf ( ""Invalid <S2SV_blank> string <S2SV_blank> pointer <S2SV_blank> at <S2SV_blank> %p\\n"", name ) ; } }",1
1126,<S2SV_ModStart> ; } } else ( void ),0
1127,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( m,0
1128,"<S2SV_ModStart> 0 ) { if ( len < ( u_int ) advance ) goto trunc ; <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) return ; <S2SV_ModStart> case IPPROTO_ROUTING : ND_TCHECK ( * cp ) ; <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) return ; <S2SV_ModStart>, cp ) ; if ( advance < 0 ) return <S2SV_ModStart> padlen ) ; if ( advance < 0 ) return ;",1
1129,<S2SV_ModStart> * buf ; size_t <S2SV_ModEnd> len ; if <S2SV_ModStart> ) ) { return AVERROR_INVALIDDATA ; },0
1130,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo ->,0
1131,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1132,<S2SV_ModStart> -> xd ;,0
1133,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + 1 ) ;",0
1134,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1135,<S2SV_ModStart> msr_data ) ; rc = X86EMUL_CONTINUE ; <S2SV_ModStart> msr_data ) ; if ( rc!= X86EMUL_CONTINUE ) return - EINVAL ;,0
1136,,0
1137,"<S2SV_ModStart> ), annotation, true",0
1138,"<S2SV_ModStart> int i ; unsigned int motion_mvsad_diff_y <S2SV_ModEnd> ( ( unsigned int <S2SV_ModStart> char * sig, unsigned int total_stride, unsigned int block_height, unsigned int shift_y <S2SV_ModEnd>, int block_height, <S2SV_ModStart> ; int block_height ; unsigned int shift_y ; unsigned int shift_y = ( unsigned int ) >> 1 ; unsigned int block_height = ( unsigned int ) shift_y ; unsigned int shift_in_val ; unsigned int shift_val ; unsigned int shift_val ; unsigned int shift_y ; unsigned int block_height = ( unsigned int ) >> ( unsigned int ) >> ( unsigned int ) <S2SV_ModEnd> ; int shift_y = <S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTHRES_FLAGS2SV_null> <S2SV_null>",0
1139,<S2SV_ModStart> } else { size_t <S2SV_ModEnd> i ; },0
1140,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",0
1141,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
1142,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> g_null>,0
1143,"<S2SV_ModStart> ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_HOPLIMIT,"" ) ; err = - 1 ; goto close_sockopt <S2SV_ModEnd> ; } ret",0
1144,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if (! <S2SV_ModStart> out ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1145,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1146,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
1147,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, size, <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return - ENOMEM ; value = kmalloc ( size, GFP_KERNEL ) ; if (! acl ) return - EINVAL ; value = kmalloc ( size, GFP_KERNEL ) ; if (! value ) return - EINVAL ; if ( size > size ) return - EINVAL ; if (! value ) return - EINVAL ; value = kmalloc ( size, size ) ; if ( size ) return - EINVAL ; if (! value ) return - EINVAL ; if ( size > size ) return - EINVAL ; } break ;",0
1148,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1149,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1150,<S2SV_ModStart> state ) ; if ( len > INT_MAX ) { return NULL ; } <S2SV_ModStart> = NULL ; },0
1151,<S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( * )!= IS_DOUBLE ) { zval dval ; dval = * * tmp ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> ) ; x <S2SV_ModStart> ; convert_to_double ( & dval <S2SV_ModEnd> ) ; },0
1152,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1153,"<S2SV_ModStart> AcquireQuantumMemory ( dx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart>, background_color_index, ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart>, background_color_index, ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( dmsy <S2SV_ModEnd>, dmsy",0
1154,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + 1 ) ;",0
1155,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; ( void ) ctx ;",0
1156,"<S2SV_ModStart>. path ; return Curl_urldecode <S2SV_ModEnd> ( data, <S2SV_ModStart>, 0, & <S2SV_ModEnd> pop3c -> mailbox <S2SV_ModStart> pop3c -> mailbox, NULL, TRUE ) <S2SV_ModEnd> ; } <S2SV_null>",1
1157,<S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ;,1
1158,<S2SV_ModStart> } else { uint32_t <S2SV_ModEnd> s ; s ->,0
1159,<S2SV_ModStart> } } } <S2SV_ModEnd> } else {,0
1160,<S2SV_ModStart> return IMPEG2D_MB_TEX_DECODE_ERR ; } if ( 0 == ps_dec -> u2_num_mbs_left ) { break ; },0
1161,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1162,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1163,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int block ; const VP9_COMMON * const xd = & xd -> mbmi ; MACROBLOCKD * xd = xd -> mbmi ; MACROBLOCKD * const xd = xd -> mbmi. mbmi ; const xd = xd -> mi [ 0 ]. subsampling_y = 1 ; if ( xd -> mbmi. mbmi. subsampling_y >= BLOCK_SIZE ) { <S2SV_ModEnd> if ( xd <S2SV_ModStart>, bsize, bsize, bsize, bsize, bsize, bsize, bsize, bsize, bsize ) ; } else if ( xd -> flags & YV12_FLAG_HIGHBITDEPTH ) { vp9_highbd_highbd_t <S2SV_ModEnd> ( bsize, <S2SV_ModStart> ) ; }",0
1164,<S2SV_ModStart> -> mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor <S2SV_ModEnd> ; if (,1
1165,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
1166,"<S2SV_ModStart> return getnum ( L, <S2SV_ModStart> = getnum ( L,",0
1167,,0
1168,<S2SV_ModStart> case suite : case func_body_suite :,0
1169,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1170,<S2SV_ModStart> ( upid == INT_MIN ) return - ESRCH ; if ( upid ==,1
1171,"<S2SV_ModStart> siocb -> scm, false",1
1172,<S2SV_ModStart> ( u64 ) <S2SV_ModEnd> return 0 ;,0
1173,"<S2SV_ModStart>, plane ) * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? 2 : 1 )",0
1174,<S2SV_ModStart> * a ; size_t <S2SV_ModEnd> len ; <S2SV_ModStart> ) ) ; if ( * buf_size < 4 ) return - EINVAL <S2SV_ModStart> - 1 ; ASSERT ( size_t ),0
1175,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; int r = 0 ; if <S2SV_ModEnd> ( lc -> <S2SV_ModStart> ( lc -> start || ti -> len!= i_size_read ( dev -> bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL, cmd ) ; return r? : __blkdev_driver_ioctl ( <S2SV_ModStart> -> bdev, <S2SV_ModEnd> dev -> mode",1
1176,<S2SV_ModStart> ) + 1 <S2SV_ModEnd> ; if (,0
1177,<S2SV_ModStart> ) ; } else return <S2SV_ModEnd> ; } <S2SV_null>,0
1178,"<S2SV_ModStart> size, <S2SV_ModEnd> ) ; if",0
1179,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1180,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1181,"<S2SV_ModStart> sock ) { memset ( & sa, 0, sizeof ( sa ) ) ;",0
1182,"<S2SV_ModStart> ; if ( tcp_handle <S2SV_ModEnd> ( ck,",0
1183,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC | NTLMSSP_NEGOTIATE_SEAL <S2SV_ModStart> -> sign ) <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_NEGOTIATE_XCH ;,0
1184,"<S2SV_ModStart>, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn <S2SV_ModEnd> ) ; mutt_socket",0
1185,<S2SV_ModStart> crypto_report_akcipher rakcipher ; strncpy <S2SV_ModEnd> ( rakcipher.,0
1186,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
1187,<S2SV_ModStart> -> head <= 0 || ( unsigned char ) ( ( g -> sect << 2 ) >> FD_SIZECODE ( g ) ) ==,1
1188,<S2SV_ModStart> size ) ; <S2SV_ModEnd> } if (,0
1189,"<S2SV_ModStart>, & rlen, 0",1
1190,"<S2SV_ModStart> ; buf = __u64_t buf <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2_size < 2 <S2SV_ModEnd> ) ||! buf <S2SV_ModStart>, buf, buf <S2SV_ModEnd> ) ) return",0
1191,"<S2SV_ModStart> } if ( ( safe_mount <S2SV_ModEnd> ( path,",0
1192,"<S2SV_ModStart> char * value, const char * p <S2SV_ModEnd> ; if (",0
1193,<S2SV_ModStart> ; if ( bio -> bio_bi_vcnt == bio -> bi_vcnt ) break ; if (,0
1194,<S2SV_ModStart> -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; } <S2SV_ModEnd> actualnumcolors = hdr,1
1195,<S2SV_ModStart> -> conn -> conn <S2SV_ModEnd> ; # endif,0
1196,"<S2SV_ModStart> char * tty <S2SV_ModEnd> ; if ( <S2SV_ModStart> ), opts <S2SV_ModEnd> ) ; }",0
1197,,0
1198,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1199,<S2SV_ModStart> 0 ) ; scat = & conn -> op_sg [ SOCK_BYTES ] ;,0
1200,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1201,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1202,,1
1203,"<S2SV_ModStart> { r_cons_printf ( ""\\""k <S2SV_blank> bin/pe/%d=%s\\""\\""\\n"" <S2SV_ModEnd>, module,",0
1204,"<S2SV_ModStart>, rqstp, res <S2SV_ModEnd> ) ; out",1
1205,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1206,"<S2SV_ModStart> ) ; } if ( rb_ivar_set ( self, id_key_set, Qtrue ) ) ;",0
1207,"<S2SV_ModStart> ) ) { * status = ""INVALID_S2SV_null> <S2SV_null>",0
1208,<S2SV_ModStart> thread -> tp_value [ 1 ],0
1209,<S2SV_ModStart> * obj ; size_t <S2SV_ModEnd> newpos ; JAS_DBGLOG <S2SV_ModStart> ) ) ; JAS_DBGLOG <S2SV_ModEnd> ; JAS_DBGLOG (,0
1210,"<S2SV_ModStart> char * sig = NULL <S2SV_ModStart> ; if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done <S2SV_ModStart> b ) ; if (! authctxt -> user == NULL || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done <S2SV_ModStart> b ) ; } if (! authctxt -> user ) { debug2 ( ""%s: <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done <S2SV_ModStart> b ) ; free ( sig ) ;",0
1211,<S2SV_ModStart> ; uint32_t bcount ; CLEAR ( WaveHeader ),1
1212,"<S2SV_ModStart> -> inode, fmode_t <S2SV_ModEnd> ) ; if",0
1213,"<S2SV_ModStart>, mech ) || ( ctx -> cb ) mech, cb )!= sx_sasl_ret_OK",0
1214,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1215,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ;",0
1216,<S2SV_ModStart> sb ) ; if ( ext2_xattr_create_cache ( sbi -> s_mb_cache ) ) ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ;,0
1217,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1218,<S2SV_ModStart> ( sk ) return - EINVAL,0
1219,<S2SV_ModStart> int i ; size_t size ; <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } size <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> return matrix ;,0
1220,"<S2SV_ModStart> ipv6_select_ident ( fh, rt",0
1221,"<S2SV_ModStart> bh ) { <S2SV_ModEnd> int error ; <S2SV_ModStart> error ; struct mb2_cache * ext2_mb_cache <S2SV_ModEnd> * ext2_mb_cache = <S2SV_ModStart> bh = mb2_cache_entry_insert ( ext2_mb_cache, hash, hash, bh -> bh -> b_blocknr <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( ext2_mb_cache, hash <S2SV_ModEnd> ) ; } <S2SV_ModStart> } } mb2_cache_entry_entry_insert ( bh, bh -> b_block,",0
1222,<S2SV_ModStart> * req ; <S2SV_ModEnd> req = scsi_req_alloc <S2SV_ModStart> hba_private ) ; <S2SV_ModEnd> return req ;,1
1223,<S2SV_ModStart> * buf ; size_t <S2SV_ModEnd> len ; if <S2SV_ModStart> } if (! ND_TTEST2 ( * buf ) ) return - 1 ; <S2SV_ModStart> 1 ) ; if (! IS_LOG_ERROR ) { <S2SV_ModEnd> return - EINVAL,0
1224,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1225,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
1226,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct xfrm_dump_info <S2SV_ModStart> struct xfrm_dump_info info <S2SV_ModEnd> ; info. <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> ( void ),1
1227,<S2SV_ModStart> (! file || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - EINVAL ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1228,<S2SV_ModStart> ) { struct dentry * dentry ; int err = - EINVAL ; udentry -> i_name ; <S2SV_ModStart> dentry ) { if ( error ) goto out ; err = - EINVAL ; <S2SV_ModStart> dentry ) ; err = - EIO ; goto out <S2SV_ModEnd> ; } dentry -> <S2SV_ModStart> dentry ) { <S2SV_ModEnd> return out :,0
1229,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( s_options,0
1230,<S2SV_ModStart> * ptrptr && <S2SV_ModEnd> nmemb && size <S2SV_ModStart> nmemb && size <S2SV_ModEnd> ) return AVERROR,1
1231,<S2SV_ModStart> ( a -> type == szMAPI_BINARY && a -> <S2SV_ModStart> else if ( a -> type == szMAPI_BINARY &&,1
1232,<S2SV_ModStart> -> width ; if ( ( i -> width > i -> height ) && ( ( i -> width ) - 1 ),0
1233,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
1234,"<S2SV_ModStart> { jas_eprintf ( ""got <S2SV_blank> box <S2SV_blank> type <S2SV_blank> %s\\n"" <S2SV_ModEnd>, box ->",1
1235,,1
1236,<S2SV_ModStart> * buf ; if ( count > 2 ) return - EINVAL ;,0
1237,<S2SV_ModStart>!= page_start ( page ) <S2SV_ModEnd> ; if (,0
1238,<S2SV_ModStart> ) ) { if ( gb -> codec_numInt64 ),0
1239,<S2SV_ModStart> UINT32 nsc_rle_encode ( const,1
1240,<S2SV_ModStart> char buf [ 1024 <S2SV_ModEnd> ] = 0 <S2SV_ModStart> ; if ( data_size < 2 ) goto out ;,0
1241,"<S2SV_ModStart> * dllhandle ; if ( COM_CompareExtension ( name, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", name ) ; return NULL ; }",1
1242,<S2SV_ModStart> = NULL ; },0
1243,<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> ++ ; } \\\n} <S2SV_ModEnd> Table [ j,0
1244,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1245,,0
1246,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 6 ) { const char * e = strtol ( * ) + 1, * * e, * <S2SV_ModStart> 2 ) ; if ( * e, * strlen ( & e, & * ) ) { if (! * e ) { return NULL ; } <S2SV_ModStart> ip = strtol ( 1, option + 1, & e, sizeof ( * ) ) ; if ( * e + 1 ) { * e = strtol_print ( '\\0' ) ; return NULL ; } <S2SV_ModEnd> } if ( <S2SV_ModStart> 2SV_null> <S2SV_null> <S2SV_null>",0
1247,<S2SV_ModStart> ( q ) <S2SV_ModEnd> ; if (,0
1248,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst, <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
1249,<S2SV_ModStart> c -> nreslevels <= <S2SV_ModEnd> s -> height,0
1250,<S2SV_ModStart> == * ptr && ptr [ 1 ],1
1251,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModEnd> BLOCK_SIZE bsize, <S2SV_ModStart> -> common ; MACROBLOCKD * const xd = & cpi -> td. <S2SV_ModStart> -> mb ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> mi_row, xd -> mi_row, mi_cols ) ;",0
1252,"<S2SV_ModStart> * obj_tptr ; u_int <S2SV_ModEnd> tlen ; u_int <S2SV_ModStart> uint8_t ) ; tlen = len ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; tlen = len ; tlen = len ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ) ; return ; }",0
1253,"<S2SV_ModStart> void update_mv_update ( MACROBLOCK * x <S2SV_ModEnd>, int mbmi",0
1254,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1255,<S2SV_ModStart> ( sk ) ; hdr -> msg_namelen = 0,0
1256,<S2SV_ModStart> sta -> lock ) ; spin_lock_init ( & sta -> ps_lock,1
1257,<S2SV_ModStart> tp_event ) && perf_paranoid_tracepoint_raw <S2SV_ModEnd> ( ) &&,1
1258,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> return 0 ;,0
1259,"<S2SV_ModStart>, 0 ) ; if (! data_interface ||! control_interface ) return - ENODEV",1
1260,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1261,<S2SV_ModStart> default_msg ) ; <S2SV_ModEnd> } if (,0
1262,"<S2SV_ModStart> * head ; <S2SV_ModEnd> newsk -> sk_sndbuf <S2SV_ModStart> -> sk_rcvbuf ; sctp_copy_descendant <S2SV_ModEnd> ( newsk,",1
1263,"<S2SV_ModStart> * data ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, 0 ) <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 1 ) <S2SV_ModStart>, 0 ) )",0
1264,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return sel ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! get_desc ( & desc, sel ) <S2SV_ModEnd> ) return - <S2SV_ModStart>! ( desc. <S2SV_ModEnd> type & BIT <S2SV_ModStart> ( ( desc. <S2SV_ModEnd> l << 1 <S2SV_ModStart> ) | desc. <S2SV_ModEnd> d ) {",1
1265,<S2SV_ModStart> ctx ) ; vpx_free <S2SV_ModEnd> ( ctx ->,0
1266,"<S2SV_ModStart> 1 ) { vpx_lpf_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf_horizontal_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf_horizontal_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf_horizontal_4 <S2SV_ModEnd> ( s,",0
1267,<S2SV_ModStart> return ret ; fsnotify_put_group ( group ) ;,1
1268,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> struct ctx",0
1269,"<S2SV_ModStart> BPF_ALU64 ) { coerce_reg_to_size <S2SV_ModEnd> ( & src_reg <S2SV_ModStart> -> src_reg, 4",0
1270,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1271,<S2SV_ModStart> ; while ( ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),0
1272,<S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; if (,0
1273,<S2SV_ModStart> { if ( mono_method == 0 ) spin_unserialize = 0,0
1274,<S2SV_ModStart> * buf ; size_t count ; if ( count >= 0 ) return - ENOMEM ;,0
1275,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> return 1 ; },0
1276,"<S2SV_ModStart> } if ( le32_to_cpu ( raw_super -> segment_count ) > F2FS_MAX_SEGMENT ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> segment <S2SV_blank> count <S2SV_blank> (%u)"", le32_to_cpu ( raw_super -> segment_count ) ) ; return 1 ; } if (",1
1277,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) return 0 ; } if (,0
1278,<S2SV_ModStart> } else { return EINVAL ; } <S2SV_ModEnd> } if (,0
1279,<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart>! opt ) { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) ; txopt_put ( opt_to_free ) ;,1
1280,<S2SV_ModStart> ( skb ) ; if ( opt -> optlen < sizeof ( struct ip_options ) ) return - EINVAL ;,0
1281,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1282,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> goto errout_free ;,0
1283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1284,<S2SV_ModStart> } if (! info -> count ) return ERROR ; if (,0
1285,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
1286,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; } tp -> copied_seq = seq ;,1
1287,<S2SV_ModStart> data ) ; if ( data_len < data_len ) goto err ;,0
1288,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> memo_size ) {",0
1289,<S2SV_ModStart> ( sqlite3_int64 ),0
1290,"<S2SV_ModStart> ) ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1291,"<S2SV_ModStart> * orelse, string type_comment, int <S2SV_ModEnd> lineno, orelse = type_comment",0
1292,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1293,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
1294,<S2SV_ModStart> ; if ( is_nmi ( intr_info ) <S2SV_ModEnd> ) return 1,0
1295,<S2SV_ModStart>!= 0x7 <S2SV_ModEnd> ) ; case,0
1296,,0
1297,"<S2SV_ModStart>, 0,",0
1298,<S2SV_ModStart> < 0 ) { ret = chg ; goto out_err ; } <S2SV_ModEnd> if ( hugepage_subpool_get_pages <S2SV_ModStart> chg ) ) { ret = <S2SV_ModEnd> - ENOSPC ; <S2SV_ModStart> - ENOSPC ; goto out_err ; } <S2SV_ModStart> chg ) ; goto out_err <S2SV_ModEnd> ; } if <S2SV_ModStart> return 0 ; out_err : resv_map_put ( vma ) ; return ret ;,1
1299,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
1300,"<S2SV_ModStart> = ECRYPTFS_SUPER_MAGIC ; s -> s_stack_depth = path. dentry -> d_sb -> s_stack_depth + 1 ; rc = - EINVAL ; if ( s -> s_stack_depth > FILESYSTEM_MAX_STACK_DEPTH ) { pr_err ( ""eCryptfs: <S2SV_blank> maximum <S2SV_blank> fs <S2SV_blank> stacking <S2SV_blank> depth <S2SV_blank> exceeded\\n"" ) ; goto out_free ; }",1
1301,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1302,<S2SV_ModStart> ; END_OF_READING : <S2SV_ModEnd> CloseBlob ( image <S2SV_ModStart> -> previous ; if ( tmp == image2 ) image2 = ( Image * ) NULL ;,0
1303,"<S2SV_ModStart> ; status = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, length )",0
1304,"<S2SV_ModStart> ret, n_new_keys <S2SV_ModEnd>, kdb ->",0
1305,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static TSR2SV_null> static <S2SV_ModStart> break ; switch ( t, tp_data, tp_len ) { case TSR2SV_null> g_null> <S2SV_null> tp_null> <S2SV_ModStart> 2SV_null> <S2SV_null> g_null>",0
1306,"<S2SV_ModStart> -> length, 0,",1
1307,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1308,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1309,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1310,<S2SV_ModStart> ) return ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1311,<S2SV_ModStart> } if ( strlen ( token ) > 4 &&,0
1312,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( x ->",0
1313,<S2SV_ModStart> ; dname = safe_calloc <S2SV_ModEnd> ( strlen (,0
1314,"<S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> h, 0 )",0
1315,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
1316,<S2SV_ModStart> ctl_files_rwlock ) ; mutex_init ( & card -> user_ctl_lock ) ;,1
1317,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1318,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1319,<S2SV_ModStart> -> pu4_wts_ofsts_mat ; ps_dec -> u4_first_slice_in_pic = 0 ;,0
1320,<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },1
1321,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
1322,<S2SV_ModStart> buffer_count < 1 || args -> buffer_count > UINT_MAX / sizeof ( * exec2_list ),1
1323,<S2SV_ModStart> int mptctl_info karg ; <S2SV_ModEnd> int mptctl_info <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk,0
1324,<S2SV_ModStart> size ) { <S2SV_ModEnd> d ; },0
1325,"<S2SV_ModStart> char * path, const char * rootfs <S2SV_ModStart> mntdata, optional, rootfs",1
1326,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1327,"<S2SV_ModStart> len ) ; const char * buf_size = 0 ; char * buf_size ; long len_t buf_size ; long len_max ; long len_rem ; long len_rem ; long len_max ; long len_tmp ; long len_rem ; buf_size ; long len_rem ; buf_size ; long len_rem ; buf_size = 0 ; long len_full = 0 ; buf_size = 0 ; buf_size = 0 ; if ( len_full >= MAX_EXECVE_LEN >= MAX_LEN ) len_EXECVE_LEN ; buf_size = MAX ( MAX_LEN - MAX_AUDIT_EXECVE_LEN - 1, MAX_EXECVE_LEN - 1 ) ; if ( len_LEN >= MAX_EXECVE_AUDIT_EXECVE_EXECVE_AUDIT_LEN ) len_LEN ; strlen = MAX_EXECVE_LEN ; buf_size = MAX ( MAX_LEN - 1, MAX_EXECVE_EXECVE_LEN ) ; if ( len_EXECVE_AUDIT ) len_EX",0
1328,<S2SV_ModStart> if ( mode!= MODE_INVALID <S2SV_ModEnd> ) { r,0
1329,<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> line ] ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
1330,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1331,"<S2SV_ModStart> ( 2, ""%s"",",0
1332,<S2SV_ModStart> ; # endif <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ) ; } } # endif,0
1333,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> RSP_GET_RESPONSE_GET_RESPONSE ( <S2SV_ModStart> flags ) ; resp = <S2SV_ModEnd> ND_PROTOCOL_GET_RESPONSE ( & <S2SV_ModStart> & rqsave ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> case BLKIF_X86_32 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> ) ; resp -> status <S2SV_ModEnd> ; break ; <S2SV_ModStart> ) ; } resp -> status = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> & resp -> <S2SV_ModEnd> ) ; resp -> <S2SV_ModStart> ) ; ret = resp -> <S2SV_ModEnd> ; break ;,0
1334,<S2SV_ModStart> ; if ( password == NULL ||,1
1335,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ;",0
1336,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; char <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""%s"",",0
1337,"<S2SV_ModStart> ext_dp -> icmp_length && ND_TTEST2 ( ext_dp -> icmp_ext_version_res, plen - ICMP_EXTD_MINLEN ) <S2SV_ModStart> - ICMP_EXTD_MINLEN ; if ( ND_TTEST2 ( ext_dp -> icmp_ext_version_res, hlen ) ) { <S2SV_ModStart> ) ) ; }",0
1338,<S2SV_ModStart> ) ; struct <S2SV_ModEnd> inode * inode <S2SV_ModStart> * inode = vfs_select_inode ( fscrypt_info <S2SV_ModEnd> ) ; if,0
1339,<S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1340,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; <S2SV_ModEnd> } if (",1
1341,<S2SV_ModStart> parent ) ; if ( ( i -> width > i -> height ) || ( i -> width > i -> height ) if ( ( i -> height > i -> height ) ) fprintf ( i -> height ),0
1342,<S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ),1
1343,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
1344,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> break ; } if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",0
1345,<S2SV_ModStart> == 0 ) {,0
1346,"<S2SV_ModStart> ( interface, ENC28J600_EHT0 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT0 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EHT0 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT0 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT0 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ) ;",0
1347,"<S2SV_ModStart> ( packets + 257UL <S2SV_ModEnd>, image ->",1
1348,"<S2SV_ModStart> error ; } memset ( newserv, 0, sizeof ( struct service ) ) ;",1
1349,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } else {,0
1350,<S2SV_ModStart> ) -> tp_value [ 0 ],1
1351,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ;",1
1352,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> r2SV_null> <S2SV_ModStart> 2SV_null> <S2SV_ModEnd> 2SV_null>,0
1353,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> len=%u <S2SV_blank> method=%u"" <S2SV_ModEnd>, len - <S2SV_ModStart> ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> short"" <S2SV_ModEnd>, len - <S2SV_ModStart> ndo -> ndo_vflag ) ) ; break ; }",0
1354,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
1355,<S2SV_ModStart> = current ; <S2SV_ModEnd> lock_sock_sk ( sk,0
1356,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 8 <S2SV_ModEnd> ; value |= <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart>. unsigned_value = <S2SV_ModEnd> value & 0xffff <S2SV_ModStart> value & 0xffff <S2SV_ModEnd> ; return (,0
1357,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> l <S2SV_blank> m"", <S2SV_ModStart> y3 ) ; sendClean ( outputbuffer ) ;",0
1358,<S2SV_ModStart> ( sk ) ; hdr -> msg_namelen = 0,0
1359,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; task = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> ; task = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context ; task <S2SV_ModEnd> -> io_context =,0
1360,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",0
1361,<S2SV_ModStart> = KADF_S2_null> <S2SV_null> <S2SV_null> static,0
1362,"<S2SV_ModStart> ) { int ret = pci_read_config_word <S2SV_ModEnd> ( dev, <S2SV_ModStart> offset, value ) ; <S2SV_ModEnd> return ret ;",0
1363,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; vpx_free <S2SV_ModEnd> ( ctx ->",0
1364,<S2SV_ModStart> ] ) ; free_uid ( fpl -> user ) ;,1
1365,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1366,"<S2SV_ModStart> -> dwc ; dwc3_gadget_del_and_unmap_request ( dep, req, status <S2SV_ModEnd> ) ; spin_unlock <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1367,<S2SV_ModStart> char prefix [ 0 ] ; char type = ( yyvsp [ ( 1 ) - ( 1 ) - ( 1 ) - ( yyvsp [ ( 1 ) ]. String ) - ( 1 ) - ( yyvsp [ ( 1 ]. String ) - ( 1 ) - ( 1 ) - ( yyvsp [ ( 1 ]. String ) [ ( 1 ]. String ) - ( 1 ) - ( 1 ) ]. String ) [ ( 1 ]. String ) - ( yyvsp [ 0 ]. String ) ]. String ) - ( 1 ) - ( 1 ) - ( 1 ) - ( 1 ) - ( yyvsp [ ( 1 ]. String ) - ( 1 ) - ( 1 ) - ( 1 ) - ( 1 ) - ( 1 ) - ( 1 ) - ( yyvsp [ ( 1 ]. String ) - ( 1 ) ]. String ) - ( 1 ) - ( yyvsp [ ( 1 ]. String ) ]. String ) - ( yyvsp [ ( 1 ) ]. String ) - ( yyvsp [ ( 2 ) - ( 3 ) - ( 1 ) - ( 1 ) - (,0
1368,"<S2SV_ModStart> sas_revalidate_domain, [ <S2SV_ModEnd> DISCE_SUSPEND ] = <S2SV_ModStart> ] = sas_resume_devices <S2SV_ModEnd>, } ;",1
1369,"<S2SV_ModStart>, int rep_quick, my_bool flags <S2SV_ModEnd> ) { if <S2SV_ModStart> - EINVAL ; } no_copy_copy_copy_from_user ( mi, flags ) <S2SV_ModEnd> ; if (",0
1370,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1371,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1372,<S2SV_ModStart> sk -> sk_family <S2SV_ModEnd> ; struct sk_buff <S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( flags <S2SV_ModStart> AF_INET ) { struct sockaddr_in * <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ; <S2SV_ModStart> skb ) ; <S2SV_ModEnd> struct sockaddr_in6 * <S2SV_ModStart> struct sockaddr_in6 * sin6 = ( struct sockaddr_in6 * <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
1373,<S2SV_ModStart> -= offset ; unsigned int blkbits ; <S2SV_ModStart> |= EXT4_GET_BLOCKS_SIZE ; if (! ( flags & EXT4_GET_BLOCKS_SIZE ) ) { ret = - EINVAL ; goto out_mutex ; } if (! ( flags & EXT4_GET_BLOCKS_SIZE ) ) { ret = - ENOM_GET_BLOCKS_PRE_BLOCKS_SIZE ; if (! ( ext4_alloc_file_down ( inode ) ) { ret = - EOPNOTSUPP ; goto out_mutex ; } if (! ( offset + len ) { ret = - ENOM_GET_BLOCKS_SIZE ; if (! ( mode & EXT4_GET_BLOCKS_SIZE ) ) { ret = - ENCALLOC_FLOW ; goto out_size ; } blkbits = offset + len - blkbits ; if (! ( offset + len ) goto out_put_down (! ( offset + len ) ) ; if (! (! ( offset + len ) ) goto out_down_down ( offset + len ) ; ret = blkbits ;,0
1374,<S2SV_ModStart> } } } free_alloc ( buf ) ;,0
1375,<S2SV_ModStart> return map ; map =,1
1376,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> b ) { if ( * cp == '\\0' ) return 0 ; <S2SV_ModStart> = '\\0' ; } else { if ( * cp == '\\0' ) return - 1 ; <S2SV_ModStart> = '\\0' ; } else if ( * cp == '\\0' ) return 0 ; <S2SV_ModStart> = '\\0' <S2SV_ModEnd> ; } else <S2SV_ModStart> = '\\0' ; if ( * cp == '\\0' ) { if ( * cp == '\\0' ) { if ( * cp == '\\0' ) return - 1 ; } else { <S2SV_ModStart> = '\\0' ; } <S2SV_ModStart> = '\\0' ; } <S2SV_ModEnd> return 0 ;,0
1377,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1378,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_left < 4,1
1379,"<S2SV_ModStart> char * pixam, L_BUFSIZE <S2SV_ModEnd>, int16 <S2SV_ModStart> ) ) { L_BUFSIZE <S2SV_ModEnd> ( pix1, <S2SV_ModStart> ( 0, L_BUFSIZE <S2SV_ModEnd>, 0, <S2SV_ModStart> ( ssize_t ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( pix1, L_BUFSIZE <S2SV_ModEnd>, 0, <S2SV_ModStart> ( pix1, 0, 0,",0
1380,<S2SV_ModStart> { int i ; int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( ubits ) ; int <S2SV_ModEnd> vbits = BN_num_bits <S2SV_ModStart> ( ubits ) ; int <S2SV_ModEnd> vbits = p <S2SV_ModStart> ubits <= 0 ) { if ( <S2SV_ModEnd> udp [ 0 <S2SV_ModStart> 0 ] == 0 ) goto err ; if ( udp [ 0 ] == <S2SV_ModStart> ) break ; },0
1381,"<S2SV_ModStart> best_address, vp8_stride <S2SV_ModEnd> ) ; if",0
1382,<S2SV_ModStart> crypto_report_akcipher rakcipher ; strncpy <S2SV_ModEnd> ( rakcipher.,0
1383,<S2SV_ModStart> len ) ; size_t <S2SV_ModEnd> len = 0,0
1384,"<S2SV_ModStart>, nbits ; if ( msg -> readcount > msg -> readcount ) { return 0 ; } <S2SV_ModStart> oob ) { if ( msg -> cursize > msg -> readcount ) { msg -> cursize << 3 ; return 0 ; }",0
1385,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
1386,<S2SV_ModStart> ; out1 : cancel_work_sync ( & dev -> kevent ) ; del_timer_sync ( & dev -> delay ) ;,1
1387,"<S2SV_ModStart> m, mlen <S2SV_ModEnd> ) ; if",0
1388,<S2SV_ModStart> == GTK_RESPONSE_OK ) { <S2SV_ModStart> item_name ) ; },0
1389,<S2SV_ModStart> - 2 ; if ( plen < 0 ) return 0 ;,1
1390,"<S2SV_ModStart> acl ) { struct iattr iattr ; retval = posix_acl_update_mode ( inode, & iattr. ia_mode, & acl ) ; if ( retval <S2SV_ModEnd> ) goto err_out <S2SV_ModStart> goto err_out ; <S2SV_ModEnd> } break ;",0
1391,<S2SV_ModStart> header. types_size <S2SV_ModEnd> ) { continue,1
1392,<S2SV_ModStart> : case NPPVformValue : case NPPVpluginNativeAccessibleAtkPlugId <S2SV_ModStart> case NPPVpluginKeepLibraryInMemory : case NPPVpluginUrlRequestsDisplayedBool : case NPPVpluginWantsAllNetworkStreams : case NPPVpluginCancelSrcStream : case NPPVSupportsAdvancedKeyHandling :,1
1393,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> inode_null>,0
1394,<S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } if,0
1395,<S2SV_ModStart> - 1 ; <S2SV_ModEnd> if ( i,0
1396,"<S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> ) ; }",0
1397,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1398,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( *,0
1399,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> data ) ;",1
1400,<S2SV_ModStart> ; return ret < 0,0
1401,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
1402,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> ( y_bufd, <S2SV_ModStart> int stride, memset <S2SV_ModEnd> ( y_stride, <S2SV_ModStart> 16 ) ; memset <S2SV_ModEnd> ( y_stride, <S2SV_ModStart> 16 ) ; memset <S2SV_ModEnd> ( y_stride,",0
1403,,0
1404,<S2SV_ModStart> char buf [ 100 <S2SV_ModEnd> ] ; int <S2SV_ModStart> ; if ( numS2SV_null> <S2SV_null>,0
1405,"<S2SV_ModStart> * jas_iccprof_createfrombuf ( jas_uchar <S2SV_ModEnd> * buf,",1
1406,<S2SV_ModStart> i_flags ) ; <S2SV_ModEnd> if ( i,0
1407,<S2SV_ModStart> stream ) ; <S2SV_ModEnd> } } <S2SV_null> <S2SV_null>,0
1408,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> ; return handle <S2SV_ModEnd> ; } <S2SV_null>",1
1409,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
1410,<S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; },1
1411,<S2SV_ModStart> ; q = osStrchr <S2SV_ModEnd> ( context ->,0
1412,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1413,<S2SV_ModStart> = 1 ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
1414,"<S2SV_ModStart> ( interface, ENC624J600_ESTAT ) ; uint16_t status ; uint16_t status ; <S2SV_ModStart> ( interface, ENC624J600_ESTAT )!= ENC624J600_ECON2 <S2SV_ModEnd>, ENC624J600_ESTAT ) <S2SV_ModStart> ( interface, ENC624J600_ETXST <S2SV_ModEnd>, ENC624J600_ESTAT ) <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_TXIF <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_TXIF <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2 <S2SV_ModEnd> ) ; enc624j600_t <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_TXXST <S2SV_ModEnd> ) ; enc624J600_t <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON1 <S2SV_ModEnd>, NULL ) <S2SV_ModStart> ( interface, ENC624J600_",0
1415,<S2SV_ModStart> ] == 0x01 && i < gemsafe_cert_max,1
1416,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1417,"<S2SV_ModStart> VALUE from_document ( int argc, VALUE * argv, VALUE * argc, VALUE * argc, VALUE * argc, VALUE klass ) { VALUE rb_schema ; VALUE rb_schema ; VALUE rb_schema ; VALUE parse_options = doc ; scanned_args = rb_scan_args ( argc, argc, ""11"", & parse_options ) ; if ( scanned_args == 0 ) { parse_options = rb_const_get ( rb_const_get ( mNokogiriXml, rb_intern ( ""ParseOptions"" ), rb_intern ( ""DEFAULT_SCHEMA"" ) ) ) ; } parse_options = rb_options ;",0
1418,"<S2SV_ModStart> * fbdev ; <S2SV_ModEnd> fbdev = to_au1100fb_device <S2SV_ModStart> ( fbi ) <S2SV_ModEnd> ; vma -> <S2SV_ModStart> 9 ) ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> ( vma, fbdev -> fb_phys, fbdev -> fb_len ) <S2SV_ModEnd> ; } <S2SV_null>",0
1419,"<S2SV_ModStart> } else { if ( s_log ( LOG_WARNING, ""Filename"" ) )!= 0 ) { fprintf ( stderr, ""Error: <S2SV_blank> Cannot <S2SV_blank> error: <S2SV_blank> %s <S2SV_blank> in <S2SV_blank> file <S2SV_blank> \'%s\\n"", cid ) ; break ; } if (",0
1420,"<S2SV_ModStart> size_t i ; memset ( & d -> bytes, 0, sizeof ( * state ) ) ;",0
1421,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1422,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1423,<S2SV_ModStart> out_free ; } mutex_lock ( & fanout ) ; err = - EINVAL ;,0
1424,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1425,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char * <S2SV_ModStart> uint16_t * s ; <S2SV_ModStart> uint8 * s ; if ( len < 8 ) return - 1 ; <S2SV_ModStart> uint16_t ) ; <S2SV_ModEnd> while ( * <S2SV_ModStart> uint16_t ) { if ( * <S2SV_ModStart> unsigned char * ) > ( u, * ) ) return FALSE ; <S2SV_ModStart> + 1 ; * len -= len ; <S2SV_ModStart> + 1 ; * s = len - 1 ; if ( len < len ) return FALSE ; <S2SV_ModStart> ; } } return len <S2SV_ModEnd> ; } <S2SV_null>",0
1426,<S2SV_ModStart> ; if ( s -> length > 16 ) return AVERROR_INVALIDDATA ; if (,0
1427,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } } <S2SV_null> <S2SV_null>,0
1428,<S2SV_ModStart>!= NULL ),0
1429,"<S2SV_ModStart> ( interface, KSZ8851_ISRX <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_ISRX <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_ISRXTR1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_MAHDRRX <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_RXS2SV_null>",0
1430,"<S2SV_ModStart> const node * n0, bool <S2SV_ModEnd> is_async ) { <S2SV_ModStart> is_async ) { const node * const n = is_async? CHILD ( n0 <S2SV_ModEnd>, NULL,",0
1431,<S2SV_ModStart> mmap_sem ) ; <S2SV_ModEnd> if (! pmt,0
1432,"<S2SV_ModStart> ( AUDIT_APPARMOR_DENIED, __aa_current_profile ( ), GFP_KERNEL, & sa, NULL <S2SV_ModEnd> ) ; }",1
1433,"<S2SV_ModStart> } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if (",0
1434,<S2SV_ModStart> } if ( <S2SV_ModEnd> data_offset == NULL,0
1435,"<S2SV_ModStart>, xmi_data, xmi_size,",1
1436,<S2SV_ModStart> size_t total_len ; struct iov_iter * iter ; <S2SV_ModStart> size_t total_len ; size_t total_len = buf -> size_t total_len ; if ( unlikely (! iter ) ) return 0 ; <S2SV_ModStart> size_t chars ; if ( unlikely ( written < chars ) ) return - EFAULT <S2SV_ModEnd> ; break ;,0
1437,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> Quantum index ; <S2SV_ModStart> ++ ) { next_pixel = MagickFalse ; displacement = 1 ; <S2SV_ModStart> -= MaxHashTable ; if ( k < 0 ) continue <S2SV_ModEnd> ; if (,0
1438,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1439,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> close ( hdl <S2SV_ModStart> ] ) { if ( hdl -> sm_path ) { if ( hdl -> sm_path ) { if ( hdl -> sm_path ) unlink ( hdl -> sm_path ) ; goto cleanup ; } <S2SV_ModStart> 0 ) { if ( hdl -> sm_path ) { if ( hdl -> fe_path [ 0 ] ) unlink ( hdl -> sm_path ) unlink ( hdl -> c_path ) ; } if ( hdl -> c_path ) unlink ( hdl -> c_path ) unlink ( hdl -> c_path ) ; if ( hdl -> c_path ) { if ( hdl -> c_hdl -> c_path [ 0 ] ) unlink ( hdl -> c_path ) ; } if ( hdl -> c_path ) unlink ( hdl -> c_path ) { if ( hdl -> fe_path [ 0 ] ) unlink ( hdl -> c_path ) unlink ( hdl -> c_path ) ; } if ( hdl ->,0
1440,"<S2SV_ModStart> size_t max_samples ; size_t max_samples ; size_t max_samples ; size_t max_samples = 0 ; <S2SV_ModStart> size_t max_samples, max_samples, max_samples, max_samples, max_samples, sizeof ( * max_samples ) ) ; if (! max_samples ) { printf ( ""error: <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %zu\\n"", optstr ) ; return - 1 ; } snprintf ( fmtid, max_samples, max_samples, max_samples, max_samples, max_samples ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
1441,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
1442,<S2SV_ModStart> goto out ; if ( * nd = false ;,0
1443,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( pad = 0 <S2SV_ModEnd> ; if (,0
1444,<S2SV_ModStart> ( name ) ; if ( unlikely (! name_len ) ) return - EINVAL,0
1445,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
1446,"<S2SV_ModStart>, ret = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> irq_srcu ) ; if <S2SV_ModEnd> ( guest_irq >= <S2SV_ModStart> irq_rt -> nr_entries || irq >= guest_rt -> nr_entries",0
1447,<S2SV_ModStart> ( fb ) <S2SV_ModEnd> ; if (,0
1448,<S2SV_ModStart> else { return false <S2SV_ModEnd> ; } case,1
1449,"<S2SV_ModStart> sock ) { memset ( & sa, 0, sizeof ( sa ) ) ;",0
1450,<S2SV_ModStart> (! handle ||! SecIsValidHandle ( handle ),1
1451,"<S2SV_ModStart> * ctx, size_t <S2SV_ModEnd> len ) return MODE_INFO_SIZE",0
1452,<S2SV_ModStart>! old_dentry ) { if ( <S2SV_ModEnd> goto out_put_name (,0
1453,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1454,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1455,<S2SV_ModStart> = - EINVAL <S2SV_ModEnd> ; if (,1
1456,"<S2SV_ModStart> } if ( safe_mount <S2SV_ModEnd> ( path,",0
1457,<S2SV_ModStart> = hash ; sr -> fd_is_fdt = MK_TRUE ;,1
1458,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> r_dest_keyring ) { if ( dest_keyring_set ( dest_keyring, dest_keyring ) ) return - ENOMEM ; }",0
1459,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> -> common ; MACROBLOCK * const x = & cpi -> td. mb ; MACROBLOCKD * const x = & cpi -> td. <S2SV_ModStart> -> e_mbd ; MACROBLOCKD * const x -> mi_row = & cpi -> mi_row, mi_row, mi_cols ) ; <S2SV_ModStart> = cpi -> td <S2SV_ModEnd> -> e_mbd ;",0
1460,<S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if ( <S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if (,1
1461,<S2SV_ModStart> ( file ) <S2SV_ModEnd> ; if (,0
1462,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
1463,<S2SV_ModStart> * buf ; size_t count ; if ( count >= 0 ) return - ENOMEM ;,0
1464,<S2SV_ModStart> size_t * page <S2SV_ModEnd> ; if (,0
1465,"<S2SV_ModStart> case S_IFDIR : fa = xfs_dinode_verify_fork ( dip, mp, fa ) ; if ( fa ) { fa = fa ; break ; } else { fa = xfs_dinode_fork_dinode_fork ( dip, mp, mp, XFS_FORK ) ; if ( fa ) return fa ; } else { if ( fa ) return fa ; } if ( fa!= fa ) { fa = fa = fa ; break ; } <S2SV_ModEnd> if ( fa",0
1466,,0
1467,,0
1468,<S2SV_ModStart> ; if ( ( vpx_codec_alg_priv_t ) <S2SV_ModEnd> || ( flags,0
1469,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",1
1470,<S2SV_ModStart>! hdr ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> event ) ) return - EINVAL ;,0
1471,<S2SV_ModStart> ] ) ) ) ; ND_TCHECK ( tptr [ 3 ],0
1472,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> = 0 ; },0
1473,"<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( dst,",0
1474,<S2SV_ModStart> ) ) ; if ( len < 0 ) return 0 ;,0
1475,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1476,"<S2SV_ModStart> iovec, compat, & iter <S2SV_ModStart> len, iovec, & iter",0
1477,"<S2SV_ModStart> } if ( ptr -> strncmp <S2SV_ModEnd> ( ptr,",0
1478,<S2SV_ModStart> ; if ( u16 port ) return - EINVAL ; if (,0
1479,<S2SV_ModStart> ; } } if ( config -> desc. bNumEndpoints < 1 ) { dev_err ( & interface -> config. bNumEndpoints < 1 ) ; return - ENODEV ; },0
1480,<S2SV_ModStart> ; if ( count <S2SV_null> <S2SV_null> <S2SV_null>,0
1481,"<S2SV_ModStart> client_p, client_name <S2SV_ModEnd> ) ; }",0
1482,<S2SV_ModStart> OpMask ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> -> _eip ; done :,0
1483,"<S2SV_ModStart> size, file <S2SV_ModEnd> ) ; size",0
1484,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1485,"<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( x,",0
1486,"<S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_EIR_LINKIF <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_MACON2 <S2SV_ModEnd> ) ; enc624J600WriteReg <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR_PKTIF <S2SV_ModEnd>, 0 <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_LINKIF <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR_TX3 <S2SV_ModEnd> ) ; enc624J600SetBit <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_EIR, ENC624J",0
1487,<S2SV_ModStart> * buf ; size_t size_t len <S2SV_ModStart> len ) { if ( len >= sizeof ( * ) ) { return - 1 ; } <S2SV_ModStart> 1 ) ; },0
1488,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
1489,"<S2SV_ModStart> ) ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> header <S2SV_blank> to <S2SV_blank> header_bin, <S2SV_blank> got <S2SV_blank> %s"", __func__, header ) ; pool_failed ( pool ) ; return false ; } <S2SV_ModEnd> cb1 = (",0
1490,"<S2SV_ModStart>. get_alg_priv_priv ( ctx ) <S2SV_ModEnd>, cfg )",0
1491,<S2SV_ModStart> case EXIT_REASON_VMON : case EXIT_REASON_INVEPT :,1
1492,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> choose_inter_mode ( VP9_COMP <S2SV_ModStart> * cpi, vp9_filter ) { VP9_COMP * const cm = cpi -> common ; const VP9_COMMON * const cm = cpi -> common ; const VP9_COMMON * const cm = & cpi -> oxcf. frame_type == KEY_FRAME ; const int is_key = ( cpi -> sf. frame_key == KEY_FRAME )? 0 : 2 : <S2SV_ModEnd> ; sf -> <S2SV_ModStart> = is_key ; <S2SV_ModEnd> if ( cpi <S2SV_ModStart> ; sf -> mode == KEY_FRAME && cpi -> mode == KEY_FRAME ) { vp9_filter = cpi -> ref_frame_flags |= INTRA_FRAME ; sf -> frame_type == KEY_FRAME ; cpi -> ref_frame = INTRA_FRAME ; } else if ( cpi -> segment_id == KEY_FRAME ) { cpi -> ref_frame = cpi -> ref_frame_flags &= INT_FRAME ; sf ->",0
1493,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1494,"<S2SV_ModStart> compat_timex tx32 ; memset ( txc, 0, sizeof ( struct timex ) ) ;",1
1495,"<S2SV_ModStart> } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, 0 )",0
1496,"<S2SV_ModStart> = getstack <S2SV_ModEnd> ( L,",0
1497,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1498,,0
1499,"<S2SV_ModStart> vpx_codec_err_t res ; int svc_ctx_t <S2SV_ModEnd> ; vpx_codec_err_t * <S2SV_ModStart> ; if ( vpx_codec_err_t ) { if ( vpx_codec_err_t ) return 0 ; } else { if ( <S2SV_ModStart> ( vpx_codec_err_t ) vpx_free ( svc_ctx ) ) { return res = svc_ctx -> number_temporal_layers ; } else { set_mode ( svc_ctx, VPX_CODEC_INVALID_S2SV_null>= (S2SV_null>",0
1500,<S2SV_ModStart>! hdr ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> event ) ) return - EINVAL ;,0
1501,<S2SV_ModStart> ; while ( tty >= s ),0
1502,<S2SV_ModStart> ; if ( entry == NULL ) return EINVAL ; if ( <S2SV_ModStart> KADM5_POLICY ) && entry -> policy == NULL <S2SV_ModEnd> ) return KADM5_BAD_MASK <S2SV_ModStart> ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK <S2SV_ModEnd> ; if (,1
1503,<S2SV_ModStart> frame -> data [ plane ] && frame -> linesize <S2SV_ModStart> [ plane ] && frame -> linesize [ plane ],1
1504,"<S2SV_ModStart> ++ ) { memset ( mvs, 0, sizeof ( mvs ) ) ;",0
1505,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyMemoTable * new,0
1506,,1
1507,<S2SV_ModStart> { if ( len < 2 ) { <S2SV_ModStart> - 1 ; },0
1508,"<S2SV_ModStart> return NULL ; memcpy ( query, 0,",0
1509,"<S2SV_ModStart> ) ; } spin_lock_irqrestore ( & fd -> io_lock, flags ) ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1510,<S2SV_ModStart> ; # endif switch <S2SV_ModEnd> ( data_len ),0
1511,<S2SV_ModStart> * ) goto out <S2SV_ModEnd> ; } if (,0
1512,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_decode ( NSC_CONTEXT <S2SV_ModStart> ; uw ; if (! context ) return FALSE ;,0
1513,<S2SV_ModStart> while ( offset > 0 && offset <S2SV_ModStart> < end_offset ) { <S2SV_ModStart> hf_keybuffer ) ; },1
1514,<S2SV_ModStart> out_free ; } if (! N ) { ret = - EINVAL ; goto out_free ; },0
1515,"<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * oxcf = <S2SV_ModStart> = get_layer_context ( cpi -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf, <S2SV_ModStart>, rc -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf, <S2SV_ModStart> ; int i, cpi -> avg_frame_bandwidth <S2SV_ModEnd> target = cpi <S2SV_ModStart> ; rc -> avg_frame_bandwidth <S2SV_ModEnd> ; } <S2SV_null>",0
1516,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1517,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmemdup ( & data, 1, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
1518,"<S2SV_ModStart> void vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_bit <S2SV_ModEnd> ( w,",0
1519,<S2SV_ModStart> op + OSPF6HDR_LEN ) ; ND_TCHECK_32BITS ( & hellop -> hello_options,1
1520,<S2SV_ModStart> { if ( datalen!= 1 ) return - EINVAL ; if (,1
1521,<S2SV_ModStart> rc ) { struct task_struct * <S2SV_ModEnd> task = task <S2SV_ModStart> task ) ; <S2SV_ModEnd> rc -> uw_run,0
1522,"<S2SV_ModStart> : # line 101 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1030 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 102 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1036 <S2SV_ModEnd> ""hex_grammar.c"" break ;",0
1523,<S2SV_ModStart> : idx ; assert ( ptr >= gfx -> backendData && ptr < ( ( char * ) gfx -> backendData + graphicsGetMemoryRequired ( gfx ) ) ) ;,1
1524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int tx_size ; const VP9_COMMON * const xd = & cpi -> td. mbmi ; MACROBLOCK * const xd = & x -> mbmi ; MACROBLOCKD * const xd = & x -> mb ; MACROBLOCK_SIZE tx_size = x -> mb ; <S2SV_ModStart> ] -> mbmi ; const tran_low_t * const <S2SV_ModStart> block ) ; const tran_low_t * const <S2SV_ModEnd> coeff = & pd <S2SV_ModStart> block ) ; tran_low_t <S2SV_ModEnd> eob <S2SV_ModStart> block ) ; tran_low_t <S2SV_ModEnd> ( pd, <S2SV_ModStart>, tx_size, pd <S2SV_ModEnd>, tx_size, <S2SV_ModStart> TX_SIZE tx_size, pd <S2SV_ModEnd>, tx_size, <S2SV_ModStart> ) ; }",0
1525,<S2SV_ModStart> } if ( pParse -> nErr ) return 0,0
1526,<S2SV_ModStart> { if ( ( <S2SV_ModStart> shmflg & SHM_RND ) && addr >= shmlba,1
1527,"<S2SV_ModStart> -> sbi_ncpy <S2SV_ModEnd> ( LOG_DEBUG,",0
1528,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1529,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1530,<S2SV_ModStart> : case NPNVSupportsWindowless : case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling,1
1531,<S2SV_ModStart> uint32_t ret ; msg -> msg_namelen = 0 ;,0
1532,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 )",0
1533,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1534,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; char <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""%s"",",0
1535,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1536,<S2SV_ModStart> mq_ops ) ; hctx -> fq_mq = first_rq ;,0
1537,"<S2SV_ModStart> s ) { uint32 length ; struct stream packet = * s <S2SV_ModEnd> ; ber_parse_header ( <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> params <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",1
1538,"<S2SV_ModStart> NULL ) ; Z_TYPE_LEN ( tmp, <S2SV_ModEnd> val ) ;",0
1539,<S2SV_ModStart> ] ) { int i ; <S2SV_ModStart> = 0 ; } <S2SV_ModEnd> } else { <S2SV_ModStart> = 0 ; },0
1540,<S2SV_ModStart> len ) { if ( len < 0 ) return - 1 ;,0
1541,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i_table ) ; if (! IS_ERR ( sb ) ) return FALSE ; <S2SV_ModStart> = NULL ; if (! IS_ERR ( char * ) ) return FALSE ; <S2SV_ModStart> return - 1 ; if (! s_table_start ( s_start ) ) return FALSE ; <S2SV_ModStart> = NULL ; if (! IS_ERR ( sb, <S2SV_ModStart> int ) ) return NULL <S2SV_ModEnd> ; if ( <S2SV_ModStart> goto fail ; if (! ( s_table_start ( sb, <S2SV_ModStart> int ) ) ) return NULL <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL ) return FALSE ;",0
1542,"<S2SV_ModStart> env ) ; memset ( & env, 0, sizeof ( struct ) ) ;",0
1543,<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ),0
1544,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> cm -> mi_cols ; memset <S2SV_ModEnd> ( cm ->,0
1545,"<S2SV_ModStart> ( ), ""array"", false <S2SV_ModStart> ) ; return <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) return false",0
1546,<S2SV_ModStart> O_RDONLY | O_NONBLOCK | O_NOFOLLOW,0
1547,<S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ; break ; } while ( context -> curY >= p -> height ) { switch ( context -> curY >= p -> height ) { case 3 : context -> curY = i -> posY + 2 ; break ; case 2 : context -> curY = i -> height ; break ; case 2 : context -> curY = i -> posY + 2 ; break ; case 3 : context -> curY = i -> posY + 2 ; break ; case 2 : context -> curY = i -> curY + 2 ; break ; case 3 : context -> curY >= p -> curY = i -> height ; i -> width -- ; ++ curY = i -> height ; i -> height ; ++ curY = i -> height ; if ( ++ context -> height ) break ; } if (! context -> curY >= p -> height ) return 0 ;,0
1548,<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( cpi ->,0
1549,"<S2SV_ModStart> ) ; } smb_ofile_flush <S2SV_ModEnd> ( sr, <S2SV_ModStart> f_mutex ) ; smb_ofile_flush <S2SV_ModEnd> ( sr,",1
1550,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char * <S2SV_ModStart> uint16_t * s ; <S2SV_ModStart> uint8 * s ; if ( len < 8 ) return - 1 ; <S2SV_ModStart> uint16_t ) ; <S2SV_ModEnd> while ( * <S2SV_ModStart> uint16_t ) { if ( * <S2SV_ModStart> unsigned char * ) > ( u, * ) ) return FALSE ; <S2SV_ModStart> + 1 ; * len -= len ; <S2SV_ModStart> + 1 ; * s = len - 1 ; if ( len < len ) return FALSE ; <S2SV_ModStart> ; } } return len <S2SV_ModEnd> ; } <S2SV_null>",0
1551,"<S2SV_ModStart> ; if ( * cp == '\\0' || <S2SV_ModEnd> strchr ( cp <S2SV_ModStart> )!= NULL || <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ( cp, ""."" ) == 0 || strcmp ( cp,",0
1552,"<S2SV_ModStart> * targ ; int strlen ( outputbuffer ) ; <S2SV_ModStart> } if ( strlen ( outputbuffer ) == 0 ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long\\n"", strlen ( outputbuffer ) ; } else strlen ( outputbuffer ) ; <S2SV_ModStart> ( outputbuffer, "" <S2SV_blank> name: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, <S2SV_blank> name ) <S2SV_ModStart> } else { <S2SV_ModStart> 2 ] ; } if ( strlen ( outputbuffer ) == '\\0' || strlen ( outputbuffer ) == '\\0' || strlen ( p [ 1 ] ) == '\\0' || <S2SV_ModStart> + 1 ] == '\\0' || strlen ( p [ 1 ] ) == '\\0' ) { fprintf ( stderr, ""Error: <S2SV_blank> %s\\n"", "" <S2SV_blank> s\\n"", fname ) ; exit ( <S2SV_ModEnd> ) ; } <S2SV_ModStart> + 1 ) ; <S2SV_ModStart> } else { <S2SV_ModStart> 1 ) ; } free ( outputbuffer ) ; <S2SV_ModStart> + 1 ; } <S2SV_ModStart> } if ( strlen ( strlen ( strlen ( strlen ( out, "" <S2SV_blank> string"" ) ) ) == '\\n"" ) {",0
1553,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
1554,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart>, id ; if ( unlikely ( siphash_key_is_zero ( & net -> ip_id_id_key, sizeof ( net -> ip_id_key ) ) ) ) return - EINVAL ; <S2SV_ModStart>, sizeof ( net -> ip_id_key <S2SV_ModEnd> ) ; }",0
1555,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_arg, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""arg\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> arg"" ) ; return 1 ; } else { int res ; res = obj2ast_int res ; res = obj2ast_int ( tmp, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id ( obj, & PyId_type_comment, & PyId_type_comment, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) goto failed ; Py_CLEAR ( tmp ) ; Py_CLEAR ( tmp ) ; } else { int res = obj2ast_string ( tmp, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id ( obj, & PyId_type_comment, & tmp ) < 0 ) goto failed ; PyEr",0
1556,"<S2SV_ModStart> void write_inter_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_prob <S2SV_ModEnd> prob ) {",0
1557,"<S2SV_ModStart> ctl -> pw, "".chfn""",1
1558,<S2SV_ModStart> { if ( max_length < sizeof ( struct ieee80211_radiotap_header ) ) return - EINVAL ; if ( <S2SV_ModStart> iterator -> _rtheader + sizeof ( uint32_t ),1
1559,<S2SV_ModStart> u32 offset ; <S2SV_ModEnd> int err = <S2SV_ModStart> k -> len ; if ( unlikely (! path -> len ) ) { err = - ENOMEM ; err = - EINVAL ; goto out_free ; } <S2SV_ModStart> ex_unlock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
1560,<S2SV_ModStart> == 0 ) return ;,0
1561,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2SV_null> <S2SV_null>,0
1562,<S2SV_ModStart> ( stream ) <S2SV_ModEnd> ; if (,0
1563,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> } else if,0
1564,"<S2SV_ModStart> else if ( g_str_has_prefix <S2SV_ModEnd> ( arg, <S2SV_ModStart>, ""@@"" ) <S2SV_ModEnd> ) g_print (",0
1565,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> row_cols ) { const VP9EncoderConfig * const tile_row, MACROBLOCKD * const tile_row, int tile_cols = ( tile_row * tile_cols + tile_row * tile_cols ) ; MACROBLOCKDICTION_INFO * const tile_row * tile_row = ( tile_row * tile_row * tile_cols + 1 ) ; MACROBLOCK * const uint8_t * tile_row = ( tile_cols + tile_row * tile_cols - 1 ) ; <S2SV_ModStart> ) ) { vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) ; vpx_end <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( w,",0
1566,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> update_frame ( VP9_COMMON <S2SV_ModStart> cm ) { VP9_COMMON * const cm = & cm -> frame_worker_data ; MACROBLOCKD * const cm = & cm -> frame_buffers ; MACROBLOCKD * const cm -> frame_num = 0 ; <S2SV_ModStart> cm -> frame_parallel_decode ) { VP9_COMMON * const cm = & cm -> frame_worker_data ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( cm -> frame_bufs ) { vpx_wb_write_bit_buffer ( & cm -> frame_bufs ) ; cm -> frame_buffers = 0 ; } <S2SV_ModStart> cm -> frame_parallel_decode ) ; vpx_free ( ) ; # endif vpx_wb_write_bit_buffers ( & cm -> bit_depth, 0 ) ; vpx_wb_write_bit_buffer ( & cm -> bit_depth ) ; # endif vpx_",0
1567,"<S2SV_ModStart> ) ) { if (! <S2SV_ModStart>, sizeof ( * ) )",0
1568,<S2SV_ModStart> client ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1569,<S2SV_ModStart> = new_uid ; fpl -> user = NULL ;,0
1570,<S2SV_ModStart> opt_len ; struct ip_options_rcu * opt ; <S2SV_ModStart> || opt -> opt. <S2SV_ModStart> ; opt -> opt.,0
1571,<S2SV_ModStart> tree ) { if ( vpx_tree_index <S2SV_ModEnd> ( tree ),0
1572,<S2SV_ModStart> ; vpx_codec_alg_priv_t flags <S2SV_ModEnd> ; if ( <S2SV_ModStart> VP9_CODEC_HIGHBITDEPTH ) { return VPX_IMG_FMT_HIGHBITDEPTH ; } <S2SV_ModEnd> if ( ( flags,0
1573,<S2SV_ModStart> wqh ) ; spin_lock_init ( & ctx -> cancel_lock ) ;,1
1574,<S2SV_ModStart> ) { struct user_namespace * user_ns = current -> mnt_ns -> mnt_ns ; struct user_ns * user_ns = current -> mnt_ns -> mnt_ns -> mnt_ns ; <S2SV_ModStart> mnt_ns ) ; if (! check_ns -> mnt_ns ) return - EINVAL ;,0
1575,"<S2SV_ModStart>, & len, 0",1
1576,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = _mm_set1_epi16 ( ( ( int16_t ),0
1577,<S2SV_ModStart> rc ; const VP9EncoderConfig <S2SV_ModEnd> * oxcf = <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1578,,0
1579,"<S2SV_ModStart> byte * fout, int maxoffset <S2SV_ModStart> NYT, fout, maxoffset",0
1580,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModEnd>, BLOCK_SIZE bsize, <S2SV_ModStart> -> mb ; RD_COST * rd = & cpi -> td. <S2SV_ModStart> -> mb ; RD_COST * const xd = & cpi -> td. mbmi. mbmi ; BLOCK_SIZE bsize = x -> mbmi. mbmi ; <S2SV_ModStart> ; BLOCK_SIZE bsize = vp9_zero ( x -> mbmi. mbmi, x -> mbmi. mbmi_ext ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( x -> flags & YV12_FLAG_FLAG_HIGHBITDEPTH ) { vp9_set_highbitdepth ( cpi -> oxcf, bsize, bsize, bsize, bsize, bsize, x -> mbmi ) ; } else { <S2SV_ModStart> ; } } # if CONFIG_VP9_HIGHBITDEPTH if ( x -> flags & YV12_FLAG_HIGHBITDEPTH ) { cpi",0
1581,<S2SV_ModStart> ; } } if ( config -> desc. bNumEndpoints < 1 ) { dev_err ( & interface -> config. bNumEndpoints < 1 ) ; return - ENODEV ; },0
1582,"<S2SV_ModStart> tfm ) { <S2SV_ModEnd> struct crypto_cipher * <S2SV_ModStart> "" ) ; crypto_cipher <S2SV_ModEnd> ( tfm_des, <S2SV_ModStart>, 0, crypto_cipher <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ; } crypto_cipher <S2SV_ModEnd> ( tfm_des, <S2SV_ModStart>, 0, out <S2SV_ModEnd>, 0,",0
1583,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1584,<S2SV_ModStart> ++ ) { if ( bits_left == 0 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 0 ; } <S2SV_ModEnd> return AVERROR_INVALIDDATA ;,0
1585,<S2SV_ModStart> i > pos + delta <S2SV_ModStart> off + 1 <= pos + delta <S2SV_ModEnd> ) insn ->,1
1586,<S2SV_ModStart> case EXIT_REASON_INVEPT : case EXIT_REASON_INVVPID :,1
1587,"<S2SV_ModStart> { if ( osStrchr <S2SV_ModEnd> ( name,",0
1588,<S2SV_ModStart> TX_SIZE + 1,0
1589,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1590,"<S2SV_ModStart> ++ r ; if <S2SV_ModEnd> ( pow ( <S2SV_ModStart>, dim ) <= entries ) return - 1 ; if <S2SV_ModEnd> ( ( int <S2SV_ModStart> dim ) ) > entries ) return - 1 <S2SV_ModEnd> ; return r",1
1591,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> ; } } } return ( <S2SV_ModStart> dds_info, 16, exception ) <S2SV_ModEnd> ; } <S2SV_null>",0
1592,<S2SV_ModStart> ( skb ) ; if ( opt -> optlen < sizeof ( struct ip_options ) ) return - EINVAL ;,0
1593,"<S2SV_ModStart> NULL ) ; Z_TYPE_LEN ( tmp, <S2SV_ModEnd> val ) ;",0
1594,"<S2SV_ModStart> 1 ; } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, MSG_DONTWAIT ) )",0
1595,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3lf <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3lf <S2SV_blank> %12.3lf <S2SV_blank> %12.3lf <S2SV_blank> %12.3f <S2SV_blank> %12.3lf <S2SV_blank> %12.3lf <S2SV_blank> %12.3f <S2SV_blank> %12.3lf <S2SV_blank> %12.3lf <S2SV_blank> %12.3lf <S2SV_blank> %12.3lf <S2SV_blank> %12.3lf <S2SV_blank> %12.3lf <S2SV_blank> %12.4lf <S2SV_blank> %12.3lf <S2SV_blank> %12.3lf <S2SV_blank> %12.3lf <S2SV_blank> %12.3lf <S2SV_blank> %12.3f <S2SV_blank> %12.4lf <S2SV_blank> %12.3f <S2SV_blank> %12.3lf <S2SV_blank> %12.3f <S2SV_blank> %12.3",0
1596,"<S2SV_ModStart> cfg ) { struct stat st ; FILE * file = NULL ; int fd = - 1 ; <S2SV_ModStart> } else { fd = open ( filename, O_WRONLY | O_APPEND | O_CLOEXEC | O_NOFOLLOW | O_NOFOLLOW | O_NOCTTY ) ; if ( fstat ( fd <S2SV_ModEnd>, & st <S2SV_ModStart> == 0 ) fclose ( st <S2SV_ModEnd> == 0 ) <S2SV_ModStart> = file ; fclose ( file ) ; <S2SV_ModEnd> } else { fd <S2SV_ModStart> = file ; <S2SV_ModEnd> } else { fd",0
1597,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! f2fs_readonly (,1
1598,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1599,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n"" ) ;",0
1600,<S2SV_ModStart> = 0 ; if ( ( uint16_t ),0
1601,"<S2SV_ModStart> user -> user,",0
1602,<S2SV_ModStart> -> td ; memset <S2SV_ModEnd> ( cpi ->,0
1603,<S2SV_ModStart> == ARPHRD_ETHER ) { <S2SV_ModStart> ether_setup ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; },1
1604,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (",1
1605,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1606,<S2SV_ModStart> -> columns - 1 <S2SV_ModEnd> ) ; },0
1607,<S2SV_ModStart> } if ( ( ( <S2SV_ModStart> xWantedSize + ( ( portBYTE_ALIGNMENT_MASK ) > xWantedSize ) ) && ( ( xWantedSize + ( portBYTE_ALIGNMENT_MASK ) > xWantedSize ) ) ) { xWantedSize = 0 ; } else { xWantedSize = 0 ; } else { xWantedSize = 0 ; } } if ( ( ( xWantedSize + ( portBYTE_ALIGNMENT_MASK ) > 0 ) &&,0
1608,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1609,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1610,<S2SV_ModStart> uint8 * tmp <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ; } tmp = ( uint8 * ) _TIFFmalloc ( cc ) ;,0
1611,,0
1612,<S2SV_ModStart> ; if (! retvaluelen ) return NULL ; if (,0
1613,<S2SV_ModStart> uint16_t length ; if ( length < 2 ) { ND_TCHECK2 ( * tptr ) ; <S2SV_ModStart> length ) ; },0
1614,<S2SV_ModStart> { uint16 bitspersample = 1,0
1615,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1616,<S2SV_ModStart> * fc ; <S2SV_ModEnd> if ( cpi,0
1617,"<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, fd )",0
1618,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 2 ] = 0x0 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, state -> data, state -> data, 1, 2 ) < 0 ) err ( ""command <S2SV_blank> 0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 2 ] = 0xe ; state -> data [ 2 ] = 0x80 ; if ( dvb_usb_generic_rw ( d, state -> data, state -> data, state -> data, state -> data, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0e <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd>",0
1619,"<S2SV_ModStart> ) ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1620,"<S2SV_ModStart> ; if ( ( vpx_codec_alg_priv_t ) <S2SV_ModEnd> ( ctx,",0
1621,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> u8x8 ( MACROBLOCKD * vpx_prob <S2SV_ModEnd>, struct vpx_writer <S2SV_ModStart> * kernel, vpx_mode_probmi, vpx_prob <S2SV_ModEnd> * kernel, <S2SV_ModStart> mbd ) ; memset <S2SV_ModEnd> ( xd ->",0
1622,"<S2SV_ModStart> file, NULL, <S2SV_ModEnd> ) ; }",0
1623,"<S2SV_ModStart> * cJSON_CreateIntArray ( const int <S2SV_ModEnd> * numbers, <S2SV_ModStart> < count ; i ++ <S2SV_ModEnd> ) { n",0
1624,<S2SV_ModStart> tk_status ) ; switch ( task -> tk_status ) { case - EACCES : case - EIO : goto die ; default : <S2SV_ModStart> goto retry_rebind ; },1
1625,"<S2SV_ModStart> inode, iinfo -> i_len <S2SV_ModEnd> ) ; if",0
1626,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1627,<S2SV_ModStart> * buf ; size_t <S2SV_ModEnd> len ; if <S2SV_ModStart> ) ) { return AVERROR_INVALIDDATA ; },0
1628,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> void vpx_codec_err ( VP9_COMMON <S2SV_ModStart> * pbi, TileInfo * tile_info ) { VP9_COMMON * const tile_info = & tile_data -> tile_info ; MACROBLOCKD * const tile_info = & tile_data -> tile_info ; MACROBLOCKD * const tile_info = & tile_data -> tile_info ; <S2SV_ModStart> ) ) { VP9_COMMON * const tile_info = & tile_data <S2SV_ModEnd> ; MACROBLOCKD * <S2SV_ModStart> ) ) { <S2SV_ModEnd> int i ; vpx_write_bit_buffer ( & pbi <S2SV_ModStart> ] ) ; vpx_wb_write <S2SV_ModEnd> ( & <S2SV_ModStart> ) ) { VP9_COMMON <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) ; vpx_wb_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1629,"<S2SV_ModStart> += 8 ; memset <S2SV_ModEnd> ( input,",0
1630,<S2SV_ModStart> out_free ; } mutex_lock ( & fanout ) ; err = - EINVAL ;,0
1631,"<S2SV_ModStart> ; if ( segfeature_active <S2SV_ModEnd> ( cm, <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cm, <S2SV_ModStart> q ) ; memset <S2SV_ModEnd> ( cm, <S2SV_ModStart> q ) ; memset <S2SV_ModEnd> ( cm,",0
1632,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
1633,"<S2SV_ModStart> ( void ) TIFFGetFieldDefaulted <S2SV_ModEnd> ( in,",1
1634,<S2SV_ModStart> ; # else ( void ) ctx ;,0
1635,,0
1636,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1637,"<S2SV_ModStart> ""corrupt <S2SV_blank> BSON"" ) ; VALIDATE_TEST ( ""corrupt <S2SV_blank> BSON"" ) ;",0
1638,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1639,<S2SV_ModStart> ; ps_dec -> u4_num_mbs = 0 ; ps_dec ->,0
1640,<S2SV_ModStart> goto out_unlock ; ret = - EPERM ; if ( unlikely (! ( cur -> vm_flags & VM_MAYWRITE ) ) ) goto out_unlock ; <S2SV_ModStart> ctx!= ctx ) ; WARN_ON (! ( vma -> vm_flags & VM_MAYWRITE ),1
1641,<S2SV_ModStart> data ) ; if ( data_len < data_len ) goto err ;,0
1642,"<S2SV_ModStart> } } TEMP_FAILURE_RETRY ( <S2SV_ModStart> ), FIT_MAX )",0
1643,<S2SV_ModStart> ; if (! test_bit ( ) ) return 0 ;,0
1644,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 2 ] = 0x0 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, state -> data, state -> data, 1, 2 ) < 0 ) err ( ""command <S2SV_blank> 0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 2 ] = 0xe ; state -> data [ 2 ] = 0x80 ; if ( dvb_usb_generic_rw ( d, state -> data, state -> data, state -> data, state -> data, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0e <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd>",0
1645,<S2SV_ModStart> int getnum ( <S2SV_ModEnd> const char *,0
1646,<S2SV_ModStart> L ) ; g -> gcstate = GCSswpallgc ;,0
1647,<S2SV_ModStart> mem ) { kfree ( buf ) ;,0
1648,<S2SV_ModStart> void ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
1649,"<S2SV_ModStart> int flags = TEMP_FAILURE_RETRY ( <S2SV_ModStart> char * sock, struct sockaddr * ) <S2SV_ModStart> int flags ; struct sockaddr * addr ; int ret = - EINVAL ; if (! addr ) return - EINVAL <S2SV_ModStart> ( sock, addr <S2SV_ModEnd> ) return - EINVAL <S2SV_ModStart> ; if ( <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1650,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
1651,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1652,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",1
1653,<S2SV_ModStart> ) ) ; ND_TCHECK <S2SV_ModEnd> ( bp [ <S2SV_ModStart> ] ) ;,0
1654,<S2SV_ModStart> ) ) ; if (! str ) return false ;,0
1655,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1656,"<S2SV_ModStart> int mptctl_eventquery ( MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
1657,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1658,"<S2SV_ModStart> = JAS_CAST ( jas_uint <S2SV_ModEnd>, jas_stream_size",0
1659,<S2SV_ModStart> } # endif,0
1660,"<S2SV_ModStart> int decode_mv_sync ( vpx_reader <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ) { const vpx_read_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ) ; vpx_read_literal <S2SV_ModEnd> ( r,",0
1661,<S2SV_ModStart> ; int is_valid = ( error == GIT_OK ) <S2SV_ModStart> giterr_clear ( ) <S2SV_ModEnd> ; error =,1
1662,"<S2SV_ModStart> val, vpx_tree <S2SV_ModEnd> * probs,",0
1663,"<S2SV_ModStart> int segment_id, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> cm -> fc",0
1664,<S2SV_ModStart> [ k ] <S2SV_ModEnd> ; if (,0
1665,"<S2SV_ModStart> stream ) ; # if CONFIG_VPX_HIGHBITS_null> <S2SV_null> static vpx_codec_alg_set_encoder ( stream ), cfg -> codec_interface <S2SV_ModEnd>, config.",0
1666,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return ; },0
1667,,0
1668,<S2SV_ModStart> = current ; <S2SV_ModEnd> lock_sock_sk ( sk,0
1669,<S2SV_ModStart> ; if ( key -> state == NULL ) return ; if (,0
1670,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; if ( <S2SV_ModStart> -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len - A,1
1671,"<S2SV_ModStart> ]. size ; if ( ~ length < 16 ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" )",1
1672,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1673,<S2SV_ModStart> ; if ( ass_len < 1 ),0
1674,<S2SV_ModStart> ; # endif tok -> type_comments = 0 ;,0
1675,<S2SV_ModStart> ( u8 ) || ( u8 ),0
1676,"<S2SV_ModStart> ) ) { if (! <S2SV_ModStart>, sizeof ( * ) )",0
1677,"<S2SV_ModStart> ; buff [ MIN ( ( size_t ) r, ( sizeof buff ) - 1 ) <S2SV_ModEnd> ] = '\\0'",1
1678,<S2SV_ModStart> p8 ) ; if ( void ) return NULL ;,0
1679,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; OE_SSIZE_MAX ; OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_out > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ) ; } if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1680,,1
1681,"<S2SV_ModStart>, - 1 <S2SV_ModEnd> ) ; }",0
1682,"<S2SV_ModStart> final_p, final ; struct ipv6_txoptions * opt <S2SV_ModStart> ) ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> & flowlabel ) ; <S2SV_ModEnd> if ( flowlabel",0
1683,"<S2SV_ModStart> uint32_t ret ; int i ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>, sizeof ( size_t ) <S2SV_ModEnd> ) ) { <S2SV_ModStart> = 1 ; } if (! dp [ 0 ] == 0 ] ) { <S2SV_ModStart> = 1 ; } <S2SV_ModStart> ) ) ; } <S2SV_ModStart> return - EPERM ; } if ( ( ( pchunks [ 0 ], sizeof ( <S2SV_ModStart> size - 1 ] ) <S2SV_ModEnd> ) ) { <S2SV_ModStart> - 1 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> break ; } }",0
1684,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPCR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_ERR ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_ERR ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_ERR ) ; if ( ( dm9000ReadReg ( DM9000_EPCR )!= 0 ) { dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR, DM9000_EPCR ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_ERRE <S2SV_ModEnd> ) ; }",0
1685,<S2SV_ModStart> uint8 ) ; <S2SV_ModEnd> if ( c,0
1686,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
1687,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_decode ( NSC_CONTEXT <S2SV_ModStart> ; uw ; if (! context ) return FALSE ;,0
1688,<S2SV_ModStart> sb ) ; if ( ext4_inode -> i_sb -> i_len > b_len ) goto out ;,0
1689,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1690,,0
1691,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> cnt ) ),0
1692,"<S2SV_ModStart> len = INT_MAX ; if ( unlikely (! access_ok ( VERIFY_WRITE, size ) ) ) return - EFAULT",0
1693,"<S2SV_ModStart> const tile, vpx_writer <S2SV_ModEnd> * *S2SV_null> <S2SV_null>",0
1694,<S2SV_ModStart> ; h -> h_errno = h ->,0
1695,<S2SV_ModStart> ) { } <S2SV_ModEnd> return err ;,0
1696,"<S2SV_ModStart> ( msg_name && msg_sys -> msg_name && <S2SV_ModStart> -> name, msg_sys <S2SV_ModEnd> -> name,",0
1697,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
1698,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
1699,<S2SV_ModStart> comp -> type <S2SV_ModEnd> ) ) ==,0
1700,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1701,<S2SV_ModStart> client ) ; <S2SV_ModEnd> if ( client,0
1702,<S2SV_ModStart> ) ) return 0 <S2SV_ModEnd> ; if (,0
1703,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( x,0
1704,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1705,<S2SV_ModStart>! old_dentry ) { if ( <S2SV_ModEnd> goto out_put_name (,0
