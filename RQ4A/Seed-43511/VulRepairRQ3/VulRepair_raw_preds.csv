,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ; <S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,0
1,<S2SV_ModStart> ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
2,"<S2SV_ModStart> ) ) { GF_Box * stco = gf_list_get ( writers, 0 ) ; GF_Box * stsc = gf_list_get ( writers, 1 ) ; gf_isom_box_del ( stco ) ; gf_isom_box_del ( stsc",0
3,<S2SV_ModStart> item ) { return <S2SV_ModEnd> cJSON_GetArrayItem ( array <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
4,"<S2SV_ModStart> u32 event_id, u64 <S2SV_ModEnd> nr, int <S2SV_ModStart>, & data, NULL <S2SV_ModEnd> ) ; perf_swevent_put_recursion_context",0
5,"<S2SV_ModStart> { # ifndef _MSC_VER char * buf = grub_malloc ( <S2SV_ModEnd> EXT2_BLOCK_SIZE ( data <S2SV_ModStart> ( data ) ) ; # else char * buf = grub_malloc ( <S2SV_ModEnd> EXT2_BLOCK_SIZE ( data <S2SV_ModStart> ( data ) ) ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } leaf = ( struct grub_ext4_extent * ) buf ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block",0
6,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fdct16 ( const <S2SV_ModStart> 16 ] ) { int step1 [ 8 ] ; int step2 [ 8 ] ; int step3 [ 8 ] ; int input [ 8 ] ; int temp1, temp2 ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 13 ] ; input [ 3 ] = in [ 3 ] + in [ 14 ] ; input [ 4 ] = in [ 4 ] + in [ 11 ] ; input [ 5 ] = in [ 5 ] + in [ 12 ] ; input [ 6 ] = in [ 6 ] + in [ 10 ] ; input [ 7 ] = in [ 7 ] + in [ 8 ] ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 15 ] ; input [ 2 ] = in [ 2 ] + in [ 14 ] ; input [ 3 ] = in [ 3 ] + in [ 11 ] ; input [ 4 ] = in [ 4 ] + in [",0
7,"<S2SV_ModStart> = 0 ; if (! scsi_block_when_processing_errors ( SDev ) ) { err = - ENODEV ; goto out ; } result = scsi_execute ( SDev, cgc -> cmd, cgc -> data_direction, cgc -> buffer, cgc -> buflen, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { err = - EIO ; goto out ; } result = scsi_execute ( SDev, cgc -> cmd, cgc -> data_direction, cgc -> buffer, cgc -> buflen, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { err = - EIO ; goto out ; } result = scsi_execute ( SDev, cgc -> cmd, cgc -> data_direction, cgc -> buffer, cgc -> buflen, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( driver_byte",0
8,<S2SV_ModStart> ( ) == 0x48454150 || get4 ( ) == 0x48454320 ) { imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; } else if ( get4 ( ) == 0x48454320 ) { imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; } else if ( get4 ( ) == 0x48454320 ) { imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MO,0
9,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> partial_frame ) { VP9_COMMON * const cm = & cpi -> common ; struct loopfilter * const lf = & cm -> lf ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; int filter_step = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ;",0
10,"<S2SV_ModStart> left == 0 ) { luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; <S2SV_ModStart> left == 0 ) { luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack",0
11,"<S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write ( w, <S2SV_ModEnd> sign, mvcomp <S2SV_ModStart> sign ) ; vpx_write ( w, mvcomp -> sign ) ; vpx_write_token ( w, vp9_mv_class_tree, mvcomp -> classes, & mv_class_encodings [ mv_class ] ) ; if ( mv_class == MV_CLASS_0 ) { vpx_write_token ( w, vp9_mv_class0_tree, mvcomp -> class0, & mv_class0_encodings [ d ] ) ; } vpx_write_token ( w, vp9_mv_fp_tree, mvcomp -> class0_fp [ d ] <S2SV_ModEnd>, & mv_fp_encodings",0
12,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> == 1024 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
13,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModEnd> if ( length <S2SV_ModStart> 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 6 ) { ND_PRINT ( (",0
14,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; if ( dest_keyring ) { key_get ( dest_keyring ) ; } else { switch ( cred -> jit_keyring ) { case KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : if ( cred -> request_key_auth ) { authkey = cred -> request_key_auth ; if (! test_bit ( KEY_FLAG_REVOKED, & authkey -> flags ) ) dest_keyring = key_get ( authkey -> dest_keyring ) ; up_read ( & authkey -> sem ) ; if ( dest_keyring ) break ; } } case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( rcu_dereference ( cred -> process_keyring",0
15,"<S2SV_ModStart> ; sc = NULL ; if ( sc == NULL ) { ret = create_spnego_ctx ( ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; ret = get_der_mechs ( minor_status, spcred, GSS_C_INITIATE, & sc -> mech_set ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; sc -> internal_mech = & sc -> mech_set -> elements [ 0 ] ; if ( put_der_mech_set ( sc -> mech_set, & sc -> DER_mechTypes ) < 0 ) { ret = GSS_S_FAILURE ; goto cleanup ; } ret = set_der_mech_types ( sc -> mech_set, & sc -> DER_mechTypes ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; ret = set_der_mech_types ( sc -> mech_set, & sc -> DER_mechTypes ) ; if ( put_der_mech_set ( sc -> DER_mechTypes, & sc -> DER_mechTypes ) < 0 ) { ret = GSS_S",0
16,"<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if ( addr -> l2tp_family!= AF_INET ) return - EINVAL ; ret = - EADDRINUSE ; read_lock_bh ( & l2tp_ip_lock ) ; if ( __l2tp_ip_bind_lookup ( net, addr -> l2tp_addr. s_addr, sk -> sk_bound_dev_if, addr -> l2tp_conn_id ) ) goto out_in_use ; ret = - EADDRINUSE ; read_unlock_bh ( & l2tp_ip_lock ) ; if ( __l2tp_ip_bind_lookup ( net, addr -> l2tp_addr. s_addr, sk -> sk_bound_dev_if, addr -> l2tp_conn_id ) ) goto out_in_use ; ret = - EADDRINUSE ; read_unlock_bh ( & l2tp_ip_lock ) ; if ( sk -> sk_state!= TCP_CLOSE || addr_len < sizeof ( struct sockaddr_l2tp",0
17,<S2SV_ModStart> tm = localtime <S2SV_ModEnd> ( & t,0
18,"<S2SV_ModStart> length ) ; if ( type == PW_PASSWORD ) { vector = request -> vector ; } else { vector = ( unsigned char * ) secret ; } MD5Init ( & md5_secret ) ; MD5Update ( & md5_secret, ( unsigned char * ) password, strlen ( password ) ) ; my_md5 = md5_secret ; MD5Update ( & my_md5, vector, AUTH_VECTOR_LEN ) ; MD5Final ( misc, & my_md5 ) ; xor ( hashed, misc, AUTH_PASS_LEN ) ; for ( i = 1 ; i < ( length >> 4 ) ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5, ( unsigned char * ) password, strlen ( password ) ) ; my_md5 = md5_secret ; MD5Update ( & my_md5, vector, AUTH_VECTOR_LEN ) ; MD5Final ( misc, & my_md5 ) ; xor ( hashed, misc, AUTH_PASS_LEN ) ; for ( i = 1 ; i < ( length >> 4 ) ; i ++ ) { my_md5 = md",0
19,"<S2SV_ModStart> ; if ( e == NULL ) { * errnop = ENOMEM ; return NSS_STATUS_TRYAGAIN ; } r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) goto not_found ; r = sd_bus_call_method ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_bus_message_read ( reply, ""u"", & mapped ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ;",0
20,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode,",0
21,"<S2SV_ModStart> = 0 ; if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) return false ; } } else { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) return false ; } else { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) )",0
22,"<S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { int trans_to_still = 0 ; const FIRSTPASS_STATS * position = twopass -> stats_in ; if ( frame_interval > MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 ) { int j ; const FIRSTPASS_STATS * tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame.",0
23,"<S2SV_ModStart> ; if ( unlikely ( offset > i_size_read ( inode ) ) ) { ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; } } else { ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; }",0
24,<S2SV_ModStart> alg ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (!,0
25,"<S2SV_ModStart> = GIT_PKT_NG ; ptr = line ; if (! ( ptr = strchr ( line,'<S2SV_blank>') ) ) goto out_err ; <S2SV_ModStart> = ptr + 1 ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> ref [ len ] = '\\0' ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' ; if (! ( ptr =",0
26,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> state = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_DBG ( TAG, ""RDP_NEG_REQ: <S2SV_blank> RequestedProtocol: <S2SV_blank> 0x%08"" PRIX32 """", nego -> RequestedProtocols ) ; WLog_DBG ( TAG, ""RDP_NEG_REQ: <S2SV_blank> RequestedProtocol: <S2SV_blank> 0x%08"" PRIX32 """", <S2SV_ModStart> -> state = NEGO_STATE_FINAL ; return ; } if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_DBG ( TAG, ""RDP_NEG_REQ: <S2SV_blank> RequestedProtocol: <S2SV_blank> 0x%08"" PRIX32 """", nego -> RequestedProtocols ) ; WLog_DBG ( TAG, ""RDP_NEG_REQ: <S2SV_blank> RequestedProtocol: <S2SV_blank> 0x%08"" PRIX32 """", <S2SV_ModStart> -> state",0
27,"<S2SV_ModStart> num_video ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num_video ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num_video ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num_video ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num_video ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num_video ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num_video ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks",0
28,"<S2SV_ModStart> 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ; return ret ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ; return ret ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ; return ret",0
29,"<S2SV_ModStart> - ENODEV ; io -> inputb = intf_mem_inb ; io -> outputb = intf_mem_outb ; io -> inputb = intf_mem_inw ; io -> outputb = intf_mem_outw ; io -> inputb = intf_mem_inl ; io -> outputb = intf_mem_outl ; break ; # ifdef readq case 8 : io -> inputb = mem_inq ; io -> outputb = mem_outq ; break ; # endif for ( idx = 0 ; idx < io -> io_size ; idx ++ ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME ) == NULL ) { mem_region_cleanup ( io, idx ) ; return - EIO ; } } mapsize = ( ( io -> io_size * io -> regspacing ) - ( io -> regspacing - io -> regsize ) ) ; if ( io -> addr == NULL ) { mem_region_cleanup ( io, idx ) ; return - EIO ; } io -> addr = ioremap ( addr, mapsize ) ; if ( io",0
30,<S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ; result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t,0
31,<S2SV_ModStart> LINK_KEY ) ) ; if ( ret < 0 ) { btif_storage_del_bonded_device ( remote_bd_addr ) ; btif_storage_del_bonded_device ( remote_bd_addr ) ; btif_storage_del_bonded_device ( remote_bd_addr ) ; return BT_STATUS_FAIL ; } if ( ret < 0 ) { btif_storage_del_bonded_device ( remote_bd_addr ) ; btif_storage_del_bonded_device ( remote_bd_addr ) ; btif_storage_del_bonded_device ( remote_bd_addr ) ; btif_storage_del_bonded_device ( remote_bd_addr ) ; btif_storage_del_bonded_device ( remote_bd_addr ) ; return BT_STATUS_FAIL ; } if ( ret < 0 ) { btif_storage_del_bonded_device ( remote_bd_addr ) ; btif_storage_del_bonded_device ( remote_bd_addr ) ; btif_storage_del_bonded_device ( remote_bd_addr ),0
32,<S2SV_ModStart> vpx_codec_err_t res ; vpx_codec_enc_cfg_map_t <S2SV_ModEnd> * map ; <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if ( iface -> enc. cfg_maps == NULL ) return VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else { res = VPX_CODEC_INVALID_PARAM ; if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_,0
33,"<S2SV_ModStart> type_flags ) { struct packet_rollover * rollover = NULL <S2SV_ModStart> EINVAL ; } mutex_lock ( & fanout_mutex ) ; if ( po -> fanout ) return - EALREADY ; if ( type == PACKET_FANOUT_HASH || ( type_flags & PACKET_FANOUT_CPU ) ) { rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) return - ENOMEM ; rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) return - ENOMEM ; rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) return - ENOMEM ; rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) return - ENOMEM ; atomic_long_set ( & rollover -> num, 0 ) ; atomic_long_set ( & rollover -> num_huge, 0 ) ; atomic_long_set ( & rollover -> num_failed,",0
34,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
35,"<S2SV_ModStart> int frame_in, int frame_out, uint64_t dx_time ) { if ( frame_in < 0 || frame_out < 0 ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time ) ; return ; } <S2SV_ModEnd> fprintf ( stderr",0
36,"<S2SV_ModStart> NULLav ; } # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION if ( imp_sth -> use_server_side_prepare ) { if ( imp_sth -> done_desc ) { if ( dbd_describe ( sth, imp_sth ) ) { do_error ( sth, JW_ERR_SEQUENCE, ""Error <S2SV_blank> while <S2SV_blank> describe <S2SV_blank> result <S2SV_blank> set."", NULL ) ; return Nullav ; } } } # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION if ( imp_sth -> use_server_side_prepare ) { if (! DBIc_ACTIVE ( imp_sth ) ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } } # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION if ( imp_sth -> use_server_side_prepare ) { if (! DBIc_ACTIVE ( imp_sth ) ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav",0
37,"<S2SV_ModStart> NO_ERROR ; } <S2SV_ModEnd> enc28j60SetBit ( interface <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTL, LSB ( ENC28J60_TX_BUFFER_START + length ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTH, MSB ( ENC28J60_TX_BUFFER_START + length ) ) ; enc28j60SetBit ( interface, ENC28J",0
38,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o ->",0
39,"<S2SV_ModStart> ( page && ( access_ok <S2SV_ModEnd> ( page, <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0",0
40,"<S2SV_ModStart> low_var_thresh, int <S2SV_ModEnd> flag ) { <S2SV_ModStart>.5 ) ; <S2SV_ModEnd> int mb_rows = <S2SV_ModStart> -> y_width >> 4 ; int mb_cols = source -> y_height >> 4 ; unsigned char * limits ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; memset <S2SV_ModEnd> ( limits, <S2SV_ModStart> unsigned char ) ppl, 16 * mb_cols ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source",0
41,"<S2SV_ModStart> { ret = __copy_to_user <S2SV_ModEnd> ( param, <S2SV_ModStart> ) ) ; if ( ret ) return - EFAULT ; param += sizeof ( struct floppy_raw_cmd ) ; if ( ( ptr -> flags & FD_RAW_READ ) && ptr -> buffer_length ) { long length = ptr -> buffer_length - ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; param += sizeof ( struct floppy_raw_cmd ) ; if ( ( ptr -> flags & FD_RAW_WRITE ) && ptr -> buffer_length ) { long length = ptr -> buffer_length - ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; ret = fd_copyout ( ptr -> kernel_data, ptr -> length ) ; if ( ret ) return ret ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret",0
42,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> int error ; <S2SV_ModStart> error ; ce = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS ) ; if (! ce ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } error = mb2_cache_entry_insert ( ce, bh -> b_bdev, bh -> b_blocknr, hash ) ; <S2SV_ModEnd> if ( error <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> error = 0 <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } } <S2SV_null>",0
43,"<S2SV_ModStart> ) ) ; if ( r_socket_http_answer ( s, code, rlen ) < 0 ) { r_socket_free ( s ) ; r_socket_free ( s ) ; r_socket_free ( s ) ; r_socket_free ( s ) ; r_socket_free ( s ) ; r_socket_free ( s ) ; r_socket_free ( s ) ; r_socket_free ( s ) ; return NULL ; } if ( r_socket_http_answer ( s, code, rlen ) < 0 ) { r_socket_free ( s ) ; r_socket_free ( uri ) ; r_socket_free ( s ) ; r_socket_free ( s ) ; r_socket_free ( s ) ; r_socket_free ( s ) ; r_socket_free ( s ) ; r_socket_free ( s ) ; return NULL ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
44,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int ip_options_get_from_user ( <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> optlen && copy_from_user ( & opt -> opt, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } <S2SV_ModEnd> return ip_options_get_finish (",0
45,"<S2SV_ModStart> : ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ;",0
46,"<S2SV_ModStart> ; # ifdef FEAT_GUI if ( gui. in_use ) errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( term_is_gui ( T_NAME ) ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( term_is_gui ( T_NAME ) ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( set_termname ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( term_is_gui ( T_NAME ) ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if",0
47,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
48,"<S2SV_ModStart> size_t size ; size_t old_size ; <S2SV_ModStart> 0 ) ||! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_intfast32_add ( tlx, tly, hstep, 0 ) ||! jas_safe_intfast32_add ( tly, vstep, 0 ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & old_size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & old_size ) ||! jas_safe_size_mul ( cmpt -> hstep_, cmpt -> vstep_, & old_size ) ||! jas_safe_size_mul ( cmpt -> prec_, & old_size ) ||! jas_safe_size_mul ( cmpt -> prec_, & old_size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & old_",0
49,<S2SV_ModStart> + 1 ; if ( i < ( int ) header_buf_used && ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i + 1 ; } } else if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i + 1 ; } } else if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i + 1 ; } } else if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [,0
50,"<S2SV_ModStart> && ( ( op & ASN1_OP_MATCH__COND && flags & FLAG_LAST_MATCHED ) || ( op & ASN1_OP_MATCH__COND && flags & FLAG_INDEFINITE_LENGTH ) ) { flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; } if ( ( op & ASN1_OP_MATCH__COND && flags & FLAG_LAST_MATCHED ) || ( op & ASN1_OP_MATCH__COND && flags & FLAG_LAST_MATCHED ) || ( op & ASN1_OP_MATCH__COND && flags & FLAG_INDEFINITE_LENGTH ) ) { pr_debug ( ""next_op: <S2SV_blank> pc=\\e[32m%zu\\e[m/%zu <S2SV_blank> dp=\\e[33m%zu\\e[m/%zu <S2SV_blank> C=%d <S2SV_blank> J=%d\\n"", pc, datalen, csp, jsp ) ; pr_debug ( ""next_op: <S2SV_blank> pc=\\e[32m%zu\\e[m/%zu <S2SV_blank> C=%d <S2SV_blank> J=%",0
51,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> * acl_len ) { __be32 * savep = & req -> rq_rcv_buf. head <S2SV_ModStart> ; int status <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) goto out ; if ( ( status = decode_op_hdr ( xdr, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep )!= 0 ) goto out ; if ( ( status = xdr_read_pages ( xdr, attrlen ) )!= 0 ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; } xdr_read_pages ( xdr, attrlen ) ; * acl_",0
52,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
53,"<S2SV_ModStart> ':', & auth ) ; if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = HTTP -> uid ; } else { uid = 0 ; } } if ( group && * group ) { if ( snumber ( group ) ) { gid = HTTP -> gid ; } else { gid = groupToID ( group ) ; } } if ( perms && snumber ( perms ) ) { mode = stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; }",0
54,"<S2SV_ModStart> NULL ; # if CONFIG_MEM_MANAGER int number_aau ; if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; if ( hmm_alloc ( & hmm_d, number_aau ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } <S2SV_ModEnd> number_aau = (",0
55,"<S2SV_ModStart> int res ; <S2SV_ModEnd> long long export_index_table <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) + 1 <S2SV_ModStart> ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } <S2SV_ModEnd> res = read_fs_bytes <S2SV_ModStart> sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table, indexes ) ; SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index",0
56,<S2SV_ModStart> } else return apr_psprintf <S2SV_ModEnd> ( cmd ->,0
57,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & final ) ; rcu_read_unlock ( ) ;,0
58,"<S2SV_ModStart> = 0.0 ; <S2SV_ModEnd> uint16 nstrips = <S2SV_ModStart> = 0.0 ; <S2SV_ModEnd> uint16 planar = <S2SV_ModStart> = 0.0 ; if (! TIFFCompareField ( in, TIFFTAG_NSTRIPS, & nstrips ) ) TIFFError ( ""loadImage"", ""Missing <S2SV_blank> number <S2SV_blank> of <S2SV_blank> strips <S2SV_blank> in <S2SV_blank> image"" ) ; if (! TIFFCompareField ( in, TIFFTAG_Ntiles, & ntiles ) ) TIFFError ( ""loadImage"", ""Missing <S2SV_blank> number <S2SV_blank> tiles <S2SV_blank> in <S2SV_blank> image"" ) ; if (! TIFFCompareField ( in, TIFFTAG_SCANLINESIZE, & tlsize ) ) TIFFError ( ""loadImage"", ""Missing <S2SV_blank> scanlinesize <S2SV_blank> in <S2SV_blank> image"" ) ; if (! TIFFCompareField ( in, TIFFTAG_SCANLINESIZE, & tlsize ) ) TIFFError ( ""loadImage"", ""Missing <S2SV_blank> scanlinesize <S2SV_blank> in <S2SV_blank> image"" ) ; if (! TIFFCompareField ( in, TIFFTAG_SCANLINESIZE, & tlsize ) ) TIFFError ( ""loadImage"", ""Missing <S2SV_blank> scanlinesize <S2SV_blank> in <S2SV_blank> image"" ) ; if (! TIFFCompareField (",0
59,"<S2SV_ModStart> = 0 ; # if CONFIG_VP8_ENCODER else if ( strcmp ( global -> codec -> name, ""vp8"" ) == 0 || strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp8_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif <S2SV_ModStart> } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & arg, & fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm = 0 ; } else if ( arg_match ( & arg, & profile, argi ) ) { config -> cfg. g_profile = arg_parse_uint ( & arg ) ;",0
60,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
61,"<S2SV_ModStart> ; if (! ( flags & EXT4_MB_HINT_TRY_GOAL ) ) { flags |= EXT4_MB_HINT_TRY_GOAL ; } else if ( goal < le32_to_cpu ( es -> s_first_data_block ) ) { flags |= EXT4_MB_HINT_TRY_GOAL ; goal = ext4_idx_pblock ( EXT_FIRST_INDEX ( ext_inode_hdr ( inode ) ) ) ; } else if ( goal < le32_to_cpu ( es -> s_first_data_block ) ) { flags |= EXT4_MB_HINT_TRY_GOAL ; } <S2SV_ModEnd> neh = ext_block_hdr <S2SV_ModStart> bh ) ; if ( ext_depth ( inode ) ) neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( inode, 0 ) ) ; else neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, 0 ) ) ; else neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block",0
62,"<S2SV_ModStart> if ( verify_checks ( c, preverify_ok, callback_ctx ) ) { SSL_SESSION * sess = NULL ; if (! sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } else if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; if (! ok ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } else if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free (",0
63,"<S2SV_ModStart> ; if ( fixed_length < AT91_AES_BLOCK_SIZE_BYTE || <S2SV_ModStart> ) ) { if ( fixed_length < AT91_AES_BLOCK_SIZE_BYTE || <S2SV_ModStart> ) ) { if ( fixed_length < AT91_AES_BLOCK_SIZE_BYTE || <S2SV_ModStart> ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { if ( fixed_length < AT91_AES_BLOCK_SIZE_BYTE ) { if ( fixed_length < AT91_AES_BLOCK_SIZE_BYTE ) { if ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { if ( fixed_length < AT91_AES_BLOCK_SIZE_BYTE ) { if ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { if ( fixed_length < AT91_AES_BLOCK_SIZE_BYTE ) { if ( fixed_length < AT91_AES_BLOCK_SIZE_BYTE ) { if ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) { if ( mem",0
64,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH, "" <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
65,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
66,"<S2SV_ModStart> ) { # ifdef DISABLE_RC_LONG_TERM_MEM uint64_t bits_used = cpi -> rc. this_frame_target ; # else const uint64_t bits_used = cpi -> rc. projected_frame_size ; # endif <S2SV_ModStart> KEY_FRAME ) { cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } else { cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_",0
67,"<S2SV_ModStart>, operand, status <S2SV_ModEnd> ; Image * <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; if ( exception!= ( ExceptionInfo * ) NULL ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; if ( exception!= ( ExceptionInfo * ) NULL ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, exception ) ; if ( status ==",0
68,"<S2SV_ModStart> ; } dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""num",0
69,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
70,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( fd = mkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> dir ) ) == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( tmpname [ strlen ( tmpname ) - 1 ]!= '/' ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( tmpname [ strlen ( tmpname ) - 1 ]!= '/' ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( tmpname [ strlen ( tmpname ) - 1 ]!= '/' ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( tmpname [ strlen ( tmpname ) - 1 ]!= '/' ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary",0
71,"<S2SV_ModStart> ) ) { if ( ps_codec -> i4_pps_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; else ps_pps -> i1_pps_id = CLIP3 ( ps_pps -> i1_pps_id, 0, MAX_PPS_CNT - 1 ) ; ps_sps -> i1_sps_id = CLIP3 ( ps_sps -> i1_sps_id, 0, MAX_SPS_CNT - 2 ) ; if ( ps_codec -> i4_pps_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; ps_pps -> i1_pps_id = CLIP3 ( ps_pps -> i1_pps_id, 0, MAX_SPS_CNT - 1 ) ; ps_sps -> i1_sps_id = CLIP3 ( ps_s -> i1_sps_id, 0, MAX_SPS_CNT - 2 ) ; if ( ps_codec -> i4_sps_done ) return IHEVCD_INVALID_",0
72,"<S2SV_ModStart> ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( <S2SV_ModStart> ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
73,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_setup_dst_planes ( MACROBLOCKD <S2SV_ModStart> mi_col ) { <S2SV_ModEnd> const uint8_t * <S2SV_ModStart> uint8_t * const buffers = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y, NULL, pd -> subsampling_x, pd -> subsampling_y",0
74,<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { <S2SV_ModStart> } } } } } else { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) {,0
75,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
76,"<S2SV_ModStart> == READ ) { int ret ; <S2SV_ModStart> = ocfs2_get_block ; ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; if ( ret < 0 ) return ret ; <S2SV_ModStart> == READ ) ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; if ( ret < 0 ) return ret ; <S2SV_ModStart> == READ ) ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; if ( ret < 0 ) return ret ; <S2SV_ModStart> == READ ) ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_get_block, ocfs2_dio_end_io, NULL, 0 ) ;",0
77,"<S2SV_ModStart>, ""%79s <S2SV_blank> %[^\\n]\\n"", def <S2SV_ModEnd>, strparm ) <S2SV_ModStart> 2 ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strparm [ len - 1 ] = 0 ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm + 2, ""%i"", & parm ) ; for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) { if (! isstring ) * defaults [ i ]. location = parm ; else * defaults [ i ]. location = scantokey [ parm ] ; }",0
78,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int kind ; <S2SV_ModStart> * data ; <S2SV_ModEnd> PyCompilerFlags cf ; <S2SV_ModStart> mod_ty mod ; <S2SV_ModEnd> char * str <S2SV_ModStart> * str ; <S2SV_ModEnd> PyObject * o <S2SV_ModStart> * fstring_name ; <S2SV_ModEnd> Py_ssize_t len ; <S2SV_ModStart> ; PyObject * o <S2SV_ModEnd> ; Py_ssize_t i <S2SV_ModStart> ; Py_ssize_t i <S2SV_ModEnd> ; assert ( <S2SV_ModStart> expr_end == ':' ) ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = expr_end - expr_start ; str [ 0 ] = '(' ; memcpy ( str + 1, expr_start, len ) ; str [ len + 1 ] = ')' ; memcpy ( str + 2, expr_start, len ) ; str [ len + 2 ] = 0 ; Py_DECREF ( str ) ; Py_DECREF ( fstring_name ) ; Py_DECREF ( fstring_name ) ; Py_DECREF ( fstring_name ) ; Py_DECREF ( fstring_name ) ; Py_DECREF ( fstring_name",0
79,<S2SV_ModStart> string ) { return <S2SV_ModEnd> cJSON_GetObjectItem ( object <S2SV_ModStart> string ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
80,"<S2SV_ModStart>, NO_HASHEXPAND, <S2SV_ModEnd> SLAB_AUTOMOVE, SLAB_AUTOMOVE_RATIO <S2SV_ModStart>, NO_HASHEXPAND, <S2SV_ModEnd> SLAB_AUTOMOVE_RATIO, SLAB_AUTOMOVE_WINDOW <S2SV_ModStart>, NO_HASHEXPAND, <S2SV_ModEnd> SLAB_AUTOMOVE, SLAB_AUTOMOVE_RATIO <S2SV_ModStart>, NO_HASHEXPAND, <S2SV_ModEnd> SLAB_AUTOMOVE_RATIO, SLAB_AUTOMOVE_WINDOW <S2SV_ModStart>, NO_HASHEXPAND, <S2SV_ModEnd> SLAB_AUTOMOVE_RATIO, SLAB_AUTOMOVE_RATIO <S2SV_ModStart>, NO_HASHEXPAND, <S2SV_ModEnd> SLAB_AUTOMOVE_RATIO, SLAB_AUTOMOVE_RATIO,",0
81,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
82,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ; return ; }",0
83,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
84,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
85,"<S2SV_ModStart> int i ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y <S2SV_ModEnd> ) ; }",0
86,"<S2SV_ModStart> ; lock_sock ( sk ) ; for ( iov = msg -> msg_iov, iovlen = iov -> iov_len ; iovlen > 0 ; iov ++ ) { if (! msg -> msg_name ) msg -> msg_name = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; msg -> msg_name = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; if (! msg -> msg_name ) msg -> msg_name = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; if (! msg -> msg_name ) msg -> msg_name = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; } if (! msg -> msg_name ) msg -> msg_name = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; if (! msg -> msg_name ) msg -> msg_name = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; if (! msg -> msg_name ) msg -> msg_name = kzalloc ( sizeof",0
87,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
88,<S2SV_ModStart> user ) { if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM,0
89,"<S2SV_ModStart> * data ;<extra_id_1>int sl = strlen ( cursor -> ns ) + 1 ; int limit = 0 ; mongo_message * mm ; if ( cursor -> seen >= cursor -> limit ) { cursor -> err = MONGO_CURSOR_EXHAUSTED ; return MONGO_ERROR ; } cursor -> seen = 0 ; mm = mongo_message_create ( 16 + 4 + 4 + 4 + 8, 0, 0, MONGO_OP_GET_MORE ) ; data = & mm -> data ; data = & mm -> data ; data = mongo_data_append32 ( data, & ZERO ) ; data = mongo_data_append ( data, & cursor -> reply -> fields. cursorID ) ; mongo_data_append32 ( data, & limit ) ; mongo_data_append64 ( data, & cursor -> reply -> fields. num ) ; res = mongo_read_response ( cursor -> conn, & ( cursor -> reply ) ) ; if ( res!= MONGO_OK ) { mongo_cursor_destroy ( cursor ) ; return MONGO_ERROR ; } res = mongo_read_response ( cursor -> conn, & ( cursor -> reply ) ) ; if",0
90,"<S2SV_ModStart> * for_ch ; if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } if ( NCH ( n ) == ( 3 + is_async ) ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async ) ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if (! first ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if (! comp ) return NULL ; if ( NCH",0
91,"<S2SV_ModStart> NULL ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe + 1 ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe + 1 ; i <= dst_state -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } dst_state -> frame [ i ] = dst ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state",0
92,"<S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> 0 ] ; const MODE_INFO * const above_mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * const left_mi = mi_8x8 [ - xd -> left_stride ] ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id ) ; write_skip ( cpi, mbmi -> tx_size, bsize, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size",0
93,"<S2SV_ModStart> maxn ) { switch ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME2 : decompileGOTOFRAME2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETPROPERTY : decompileGETPROPERTY ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n, actions, maxn",0
94,"<S2SV_ModStart> ( len < 4 <S2SV_ModEnd> ) { return <S2SV_ModStart> 1 ) ; } ND_TCHECK_32BITS ( & prep -> pp_n ) ; ps = ( const struct pgstate * ) ( prep + 1 ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", ps -> slot, ps -> page. p_sid, ps -> page. p_uid ) ) ; ps = ( const struct pgstate * ) ( ps + 1 ) ; for ( ie = io + ps -> nid ; ie < ie && ND_TTEST ( * io ) ; ++ io ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) ( ie + 1 ) ; for ( ie = io + ps -> nid ; ie < ie + ps -> nid ; ++ io ) { ND_PRINT (",0
95,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
96,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * ) * ( sqlite3_int64 ) <S2SV_ModEnd> * ( 2 <S2SV_ModStart> pTable -> nModuleArg ) ; sqlite3_int64 * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return SQLITE_OK ; } <S2SV_ModEnd> azModuleArg = sqlite3DbRealloc",0
97,<S2SV_ModStart> ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 2 * ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 2 * ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 2 * ptr_hbe_,0
98,<S2SV_ModStart> -> dmin ; if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { return - 1 ; } <S2SV_ModStart> q ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { return - 1 ; } } else { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { return - 1 ; } } } else { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { return - 1 ; } } else { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ),0
99,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfqq ) { <S2SV_ModEnd> enum bfqq_expiration reason <S2SV_ModStart> flags ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else goto schedule_dispatch ; spin_lock_irqsave ( & bfqd -> lock, flags ) ; bfq_clear_bfqq_wait_request ( bfqq ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else goto schedule_dispatch ; spin_unlock_irqrestore ( & bfqd -> lock, flags ) ;",0
100,,1
101,"<S2SV_ModStart> PERF_COUNT_SW_ALIGNMENT_FAULTS, 1 <S2SV_ModEnd>, regs,",0
102,"<S2SV_ModStart> + diffBlockLength || <S2SV_ModEnd> extraPtr + y <S2SV_ModStart> NULL ; } if ( diffPtr + x > diffBlock + diffBlockLength || extraPtr + y > extraBlock + extraBlockLength ) { PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( extraPtr + y > extraBlock + extraBlockLength ) { PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, diffPtr, x ) ; if ( diffPtr + x > diffBlock + diffBlockLength || extraPtr + y > extraBlock + extraBlockLength ) { PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, extraPtr, y ) ; if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
103,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> opt, & rcu_dereference ( <S2SV_ModStart> np -> tclass ), & rcu_dereference ( <S2SV_ModStart> np -> tclass ), & rcu_dereference ( <S2SV_ModStart> np -> tclass ), & rcu_dereference ( <S2SV_ModStart> np -> tclass ), & rcu_dereference ( <S2SV_ModStart> np -> tclass ), & rcu_dereference ( rcu )",0
104,"<S2SV_ModStart> ; if ( number_pixels > MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMin ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( bytes_per_pixel, MagickMax ( bytes_per_pixel, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( bytes_per_pixel, MagickMax ( bytes_per_pixel, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_",0
105,<S2SV_ModStart> ) pktnum ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; } <S2SV_ModStart> ) pktnum ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; } <S2SV_ModStart> ) pktnum ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; } <S2SV_ModStart> ) pktnum ; } if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; } <S2SV_ModStart> ) pktnum ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; } <S2SV_ModStart> ) pktnum ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; },0
106,<S2SV_ModStart> data ) { vpx_codec_priv_enc_mr_cfg_t priv_enc_mr_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) data ; vpx_codec_priv_enc_mr_cfg_t * priv_enc_mr = ( vpx_codec_priv_enc_mr_cfg_t * ) priv ; vpx_codec_priv_enc_mr_cfg_t * priv_enc_mr = ( vpx_codec_priv_enc_mr_cfg_t * ) priv_enc_mr ; vpx_codec_priv_enc_mr_cfg_t * priv_enc_mr = ( vpx_codec_priv_enc_mr_cfg_t * ) priv_enc_mr ; vpx_codec_priv_enc_mr_cfg_t * priv_enc_mr = ( vpx_codec_priv_enc_mr_cfg_t * ) priv_enc_mr ; vpx_codec_priv_enc_mr_cfg_t * priv_enc_mr = ( vpx_codec_priv_enc_mr_cfg_t *,0
107,"<S2SV_ModStart> * self, <S2SV_ModEnd> Py_ssize_t new_size ) <S2SV_ModStart> new_size ) { <S2SV_ModEnd> assert ( new_size <S2SV_ModStart> ) { Py_ssize_t <S2SV_ModEnd> i ; Py_ssize_t",0
108,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
109,"<S2SV_ModStart> mv_bias ( ref_frame_sign_bias [ above -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ]",0
110,<S2SV_ModStart> MSG_CMSG_COMPAT ) { msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_name = & vnet_hdr ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; } else { msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; } <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg -> msg_name = & vnet_hdr ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ;,0
111,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
112,<S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip_chunk = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; sctp_addip_chunk_t * addip_chunk = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; sctp_addip_chunk_t * addip_chunk = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; __u32 serial ; sctp_addip_chunk_t * addip_chunk = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; <S2SV_ModEnd> serial = ntohl <S2SV_ModStart> serial ) ; addip_chunk -> addip_hdr = addip_chunk ; addip_chunk -> addip_hdr. serial = serial ; addip_chunk -> addip_hdr. addip_hdr. addip_hdr. addip_hdr_len = ntohs ( addip_chunk -> addip_hdr. addip_hdr. addip_hdr. addip_hdr. addip_hdr. addip_hdr. addip_,0
113,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
114,<S2SV_ModStart> msicap ; return pci_populate_msicap <S2SV_ModEnd> ( & msicap,0
115,"<S2SV_ModStart> return REDIS_OK ; } if ( listLength ( c -> pubsub_channels ) > 0 && listLength ( c -> pubsub_patterns ) > 0 && cmd -> proc!= punsubscribeCommand && cmd -> proc!= psubscribeCommand && cmd -> proc!= punsubscribeCommand ) { addReplyError ( c, ""only <S2SV_blank> (P)SUBSCRIBE <S2SV_blank> / <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> QUIT <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" ) ; return REDIS_OK ; } if ( listLength ( c -> pubsub_channels ) > 0 && listLength ( c -> pubsub_patterns ) > 0 && cmd -> proc!= psubscribeCommand && cmd -> proc!= punsubscribeCommand && cmd -> proc!= punsubscribeCommand && cmd -> proc!= punsubscribeCommand ) { addReplyError ( c, ""only <S2SV_blank> (P)SUBSCRIBE <S2SV_blank> / <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> QUIT <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" ) ; return REDIS_OK ; }",0
116,<S2SV_ModStart> vpx_codec_err_t res ; const vpx_codec_enc_cfg_t * old_cfg = cfg ; const vpx_codec_enc_cfg_t * new_cfg = & ctx -> cfg ; const vpx_codec_enc_cfg_t * old_cfg = & ctx -> oxcf. cfg ; const vpx_codec_enc_cfg_t * old_cfg = & ctx -> oxcf. cfg ; const vpx_codec_enc_cfg_t * old_cfg = & ctx -> oxcf. old_cfg ; const vpx_codec_enc_cfg_t * old_cfg = & ctx -> oxcf. old_cfg ; const vpx_codec_enc_cfg_t * old_cfg = & ctx -> oxcf. cfg ; const vpx_codec_enc_cfg_t * old_cfg = & ctx -> oxcf. cfg ; const vpx_codec_enc_cfg_t * old_cfg = & ctx -> oxcf. old_cfg ; const vpx_codec_enc_cfg_t * old_cfg = & ctx -> oxcf.,0
117,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> vp9_init_plane_quantizers ( cpi <S2SV_ModStart> -> zbin_mode_boost = 1 <S2SV_ModEnd> ; vp9_init_plane_quantizers ( <S2SV_ModStart> -> mb ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
118,"<S2SV_ModStart> ; int rc <S2SV_ModEnd> ; old_eip = <S2SV_ModStart> 2 ) ; rc = __load_segment_descriptor <S2SV_ModEnd> ( ctxt, <S2SV_ModStart> VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE ) { rc = assign_eip_far ( ctxt, ctxt -> src. val, ctxt -> src. val + ctxt -> op_bytes ) ; if ( rc!= X86EMUL_CONTINUE ) { rc = assign_eip_far ( ctxt, ctxt -> src. val + ctxt -> op_bytes, ctxt -> src. val + ctxt -> op_bytes, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE ) { rc = assign_eip_far ( ctxt, ctxt -> src. val, ctxt -> src. val + ctxt -> op_bytes ) ; if ( rc!= X86EMUL_CONTINUE ) { rc = assign_eip_far ( ctxt, ctxt -> src. val + ctxt -> op_bytes, ctxt -> src. val + ctxt -> op_bytes, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; } }",0
119,"<S2SV_ModStart> < 0 ) { info -> si_signo = sig ; return - EPERM ; } <S2SV_ModEnd> info -> si_code <S2SV_ModStart> >= 0 ) { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
120,"<S2SV_ModStart> ; tmp_strsize = ( u32 ) <S2SV_ModStart> ptr -> size - 8 ; if (! tmp_strsize ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR ) ; return GF_LOG_ERROR ; } <S2SV_ModStart> ptr -> size - 8 ; if (! tmp_strsize ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF",0
121,<S2SV_ModStart> alg_priv ) ; else if (! ctx -> iface -> enc. get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> priv -> alg_priv -> enc. get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> priv -> alg_priv -> enc. get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> priv -> alg_priv -> enc. get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> priv -> alg_priv -> enc. get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> priv -> alg_priv -> enc. get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> priv -> alg_priv -> enc. get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ;,0
122,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> if ( ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> & FMODE_WRITE ) <S2SV_ModEnd> ) { if <S2SV_ModStart> & FMODE_WRITE ) <S2SV_ModEnd> { list_move ( <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } else <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
123,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; <S2SV_ModStart> ) break ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ;",0
124,"<S2SV_ModStart> 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtio_abort_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. out_sg [ 0 ]. iov_len!= len ) { virtio_abort_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. out_sg [ 0 ]. iov_base!= buf ) { virtio_abort_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. out_sg [ 0 ]. iov_len!= len ) { virtio_abort_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. out_sg [ 0 ]. iov_len!= len ) { virtio_abort_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; }",0
125,"<S2SV_ModStart> { fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( int ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( int ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ), ( int ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ), ( int ) JPC_QCX_GETEXPPN ( qcd -> compparms. stepsizes [ i ] ), ( int ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( int ) JPC_QCX_GETEXPPN ( qcd -> compparms. stepsizes [ i ] ), ( int ) JPC_QCX_GET",0
126,"<S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } <S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } <S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%",0
127,"<S2SV_ModStart> 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; length = caplen - 1 ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; caplen = length - 1 ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; length = caplen - 1 ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; length = caplen - 1 ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; length = caplen - 1 ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; caplen = length - 1 ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" )",0
128,"<S2SV_ModStart> image_noffset ) { const char * name = fit_get_name ( fit, noffset, NULL ) ; if ( strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; } else { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; } else { if ( ret ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; } else { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) {",0
129,"<S2SV_ModStart> ( kfifo_alloc ( & state -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL <S2SV_ModEnd> ) ) return <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> sd = & <S2SV_ModStart> = dev ; mutex_init ( & state -> rx_params_lock ) ; default_params = default_rx_params ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_write4 ( dev, CX23",0
130,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t * dec <S2SV_ModEnd>, vpx_codec_flags_t flags <S2SV_ModStart> VPX_CODEC_ABI_MISMATCH ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_",0
131,<S2SV_ModStart> value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
132,<S2SV_ModStart> icmp_param ) ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH,0
133,<S2SV_ModStart> = nlogs ; if ( unlikely ( headcount > UIO_MAXIOV ) ) { r = - ENOBUFS ; goto err ; },0
134,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
135,<S2SV_ModStart> else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = V,0
136,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
137,<S2SV_ModStart> skb_is_nonlinear ( skb ) ) return 0 ; if ( skb -> len < sizeof ( struct nlattr,1
138,"<S2SV_ModStart> ; encode_share_access ( xdr <S2SV_ModEnd>, arg ->",0
139,<S2SV_ModStart> ) ) { tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [,0
140,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; <S2SV_ModEnd> return ; } <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
141,"<S2SV_ModStart> ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"", & n, typestr )!= 2 ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""float"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""uint"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""uint"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""uint"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""uint"" ) ) return ( PTA * ) ERROR_PTR ( """,0
142,<S2SV_ModStart> case 0x0a : case 0x0b : case 0x0c : case 0x0f : <S2SV_ModStart> case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x,0
143,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
144,"<S2SV_ModStart> goto trunc ; if ( lshp -> ls_type == 0 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), lshp -> ls_seq, lshp -> ls_age, lshp -> ls_length ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), lshp -> ls_age, lshp -> ls_length ) ) ; }",0
145,<S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; opipe -> nrbufs ++ ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; opipe -> nrbufs ++ ; } <S2SV_ModEnd> * obuf =,0
146,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
147,<S2SV_ModStart> O_RDWR | O_CLOEXEC | O_NOCTTY <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_RDWR | O_NOCTTY <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE,0
148,"<S2SV_ModStart> ; u64 msr_data <S2SV_ModEnd> ; int usermode <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; <S2SV_ModStart> = 1 ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; <S2SV_ModStart> = 1 ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; <S2SV_ModStart> = 1 ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; <S2SV_ModStart> = reg_read ( ctxt, VCPU_REGS_RDX ) ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; <S2SV_ModStart> = 1 ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; <S2SV_ModStart> = 1 ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp",0
149,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_tree <S2SV_ModEnd> * tree = <S2SV_ModStart> i / 2 ] ; vpx_tree <S2SV_ModEnd> * tree = <S2SV_ModStart> i + b ] ; vpx_tree_index ii = tree [ i + b ] ; if ( ii <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
150,"<S2SV_ModStart> write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",0
151,"<S2SV_ModStart> 0xffff ; err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ; err =",0
152,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fadst16 ( const <S2SV_ModStart> output ) { int s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; int x0, x1, x2, x3, x4, x5, x6, x7, input [ 8 ], input [ 9 ] ; int x10, x11, x12, x13, x14, x15 ; int s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; int x0 = input [ 15 ] ; int x1 = input [ 0 ] ; int x2 = input [ 13 ] ; int x3 = input [ 2 ] ; int x4 = input [ 4 ] ; int x5 = input [ 5 ] ; int x6 = input [ 6 ] ; int x7 = input [ 7 ] ; int x",0
153,<S2SV_ModStart> ; # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_EDSP <S2SV_ModEnd> flags |= HAVE_EDSP,0
154,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
155,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
156,<S2SV_ModStart> MNT_MARKED ) ; mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> m,0
157,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( VP9_COMP <S2SV_ModStart> const TileInfo * tile_info <S2SV_ModEnd>, MODE_INFO * <S2SV_ModStart> MODE_INFO * * mode_info <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const VP9_COMMON * <S2SV_ModStart> cm = & tile_info <S2SV_ModEnd> -> common ; <S2SV_ModStart> bw = num_8x8_blocks_wide_lookup <S2SV_ModEnd> [ mi_8x8 [ <S2SV_ModStart> ] ; bh = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts",0
158,<S2SV_ModStart> ; if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) <S2SV_ModEnd> ) break ;,0
159,<S2SV_ModStart> = EXT4_GET_BLOCKS_CREATE ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_GET_BLOCKS_UNWRITTEN ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) get_blocks_flags |= EXT4_GET_BLOCKS_UNWRITTEN_RESERVE ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_GET_BLOCKS_UNWRITTEN_RESERVE ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_GET_BLOCKS_UNWRITTEN_RESERVE ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_GET_BLOCKS_UNWRITTEN_RESERVE,0
160,"<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> canonnamelen = 0 <S2SV_ModStart> ( p = oe_calloc ( 1, sizeof ( struct oe_addrinfo ) ) ) ) { ret = OE_EAI_MEMORY ; goto done ; } if ( p == NULL ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } if ( p -> ai_flags, p -> ai_family, p -> ai_socktype, p -> ai_protocol, p -> ai_addrlen, & p -> ai_addrlen, NULL, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( p == NULL ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } if ( p == NULL ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EIN",0
161,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
162,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
163,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { int ret <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, data, size, 100 ) ; if ( ret < 0 ) { netif_err ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; return ret ; } <S2SV_ModEnd> ret = usb_control_msg <S2SV_ModStart>, 0, <S2SV_ModEnd> indx, data <S2SV_ModStart>, size, 100 ) ; if ( ret < size ) { netif_err ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; return ret ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
164,"<S2SV_ModStart> * body, asdl_seq * type_comments <S2SV_ModStart> arena ) { asdl_seq * type_comments = ( asdl_seq * ) type_comments ; asdl_seq * type_comments = ( asdl_seq * ) type_comments ; asdl_seq * type_comments = ( asdl_seq * ) type_comments ; asdl_seq * type_comments = ( asdl_seq * ) type_comments ; asdl_seq * type_comments = ( asdl_seq * ) type_comments ; if ( type_comments ) { asdl_seq * type_comments = ( asdl_seq * ) type_comments ; type_comments = ( asdl_seq * ) type_comments ; type_comments = ( asdl_seq * ) type_comments ; type_comments = ( asdl_seq * ) type_comments ; } else { type_comments = ( asdl_seq * ) type_comments ; type_comments = ( asdl_seq * ) type_comments ; type_comments = ( asdl_seq * ) type_comments ; type_comments = ( asdl_seq * ) type_comments ; type_",0
165,"<S2SV_ModStart> src, int64_t <S2SV_ModEnd> ts_start, int64_t <S2SV_ModStart> ts_end, unsigned int <S2SV_ModEnd> flags ) { <S2SV_ModStart> 4 ; # endif # if USE_PARTIAL_COPY int row, col, active_end ; # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { for ( col = 0 ; col < mb_cols ; ++ col ) { if ( active_map [ col ] ) break ; } active_map += mb_cols ; } } else { vpx_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; } # else vpx_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; # endif } # else vpx_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4",0
166,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
167,"<S2SV_ModStart> LPF_PICK_FROM_Q ) { const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; else filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( method == LPF_PICK_FROM_SUBIMAGE ) { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_SUBIMAGE ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_",0
168,<S2SV_ModStart> } break ; case BTA_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; bt_property_t prop ; status = btif_storage_get_adapter_property ( & prop ) ; if ( status == BT_STATUS_SUCCESS ) { BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_DISABLED ) ; } else { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } # if defined ( BLE_INCLUDED ) && ( BLE_INCLUDED == TRUE ) BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_ENABLED ) ) { BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_DISABLED ) ; } # endif,0
169,<S2SV_ModStart> : { int <S2SV_ModEnd> a = getnum,0
170,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowFileException ( exception, CorruptImageError, ""UnexpectedEndOfFile"", image -> filename ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns, image -> rows, image -> columns ) ; if ( status == MagickFalse ) ThrowFileException ( exception, CorruptImageError, ""UnexpectedEndOfFile"", image -> filename ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns, image -> rows, image -> columns ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowFileException ( exception, CorruptImageError, ""UnexpectedEndOfFile"", image ->",0
171,<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if ( <S2SV_ModStart> (! data ||! data_sz ||! ctx -> priv -> alg_priv ) ) res = VPX_CODEC_ERROR ; else if ( ctx -> iface -> dec. decode == NULL ) res = VPX_CODEC_ERROR ; else if ( ctx -> priv -> alg_priv -> decode == NULL ) res = VPX_CODEC_INVALID_PARAM ; else if ( ctx -> priv -> alg_priv -> decode == NULL ) res = VPX_CODEC_ERROR ; else if ( ctx -> priv -> alg_priv -> decode == NULL ) res = VPX_CODEC_ERROR ; else if ( ctx -> iface -> dec. decode == NULL ) res = VPX_CODEC_ERROR ; else if ( ctx -> priv -> alg_priv -> decode == NULL ) res = VPX_CODEC_ERROR ; else if ( ctx -> priv -> alg_priv -> decode == NULL ) res = VPX_CODEC_ERROR ; else if ( ctx -> priv -> alg_priv -> decode == NULL ) res = VPX,0
172,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> isofs_read_inode ( struct <S2SV_ModStart> inode ) ; if ( de -> name_len > inode -> i_sb -> s_blocksize - offset ) { if ( de -> name_len > inode -> i_sb -> s_blocksize - offset ) { if ( de -> name_len > inode -> i_sb -> s_blocksize - offset ) { ret = - EIO ; goto fail ; } } } else { if ( de -> name_len > inode -> i_sb -> s_blocksize - offset ) { if ( de -> name_len > inode -> i_sb -> s_blocksize - offset ) { if ( de -> name_len > inode -> i_sb -> s_blocksize - offset ) { if ( de -> name_len > inode -> i_sb -> s_blocksize - offset ) { ret = - EIO ; goto fail ; } } else { if ( de -> name_len > inode -> i_sb -> s_blocksize - offset ) { if ( de -> name_len > inode -> i_sb -> s_blocksize,0
173,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> ) ; } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> ) ; }",0
174,<S2SV_ModStart> self ) { if ( Py_TYPE ( self ) -> tp_free ) Py_TYPE ( self ) -> tp_free ( self ) ;,0
175,"<S2SV_ModStart> cJSON_CreateArray ( ) ; if (! a ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] ) ; else suffix_object ( p, n ) ; p = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] ) ; else suffix_object ( p, n ) ; p = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = cJSON_CreateString ( strings [ i",0
176,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == Py_None ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == Py_None ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == Py_None ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ;",0
177,<S2SV_ModStart> EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_READONLY ) &&! ( mnt_flags & MNT_READONLY ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_READONLY ) &&! ( mnt_flags & MNT_READONLY ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_READONLY ) &&! ( mnt_flags & MNT_READONLY ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_READONLY ) &&! ( mnt_flags & MNT_READONLY ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_READONLY ) &&! ( mnt_flags & MNT_READONLY ) ) { return - EPERM ; },0
178,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
179,"<S2SV_ModStart> qmode ) { int do_rf64 = 0, write_junk = 1 ; ChunkHeader ds64hdr, datahdr, fmthdr ; RiffChunkHeader riffhdr ; DS64Chunk ds64_chunk ; JunkChunk junkchunk <S2SV_ModStart> ; DS64Chunk ds64_chunk ; JunkChunk junkchunk ; WaveHeader wavhdr ; uint32_t bcount ; int64_t total_data_bytes, total_riff_bytes ; if ( total_samples == - 1 ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header <S2SV_blank> for <S2SV_blank> non-normalized <S2SV_blank> floating <S2SV_blank> data!"" ) ; return FALSE ; } if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header <S2SV_blank> for <S2SV_blank> non-normalized <S2SV_blank> floating <S2SV_blank> data!"" ) ; return",0
180,"<S2SV_ModStart> ; if ( msg_sys -> msg_name ) { <S2SV_ModStart> VERIFY_WRITE ) ; } else { err = verify_iovec ( msg_sys, iov, & addr, VERIFY_READ ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( msg_sys -> msg_flags & MSG_CMSG_COMPAT ) msg_sys -> msg_flags |= MSG_CMSG_COMPAT ; } else { err = verify_iovec ( msg_sys, iov, & addr, VERIFY_READ ) ; if ( err < 0 ) goto out_freeiov ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( msg_sys -> msg_flags & MSG_CMSG_COMPAT ) msg_sys -> msg_flags |= MSG_CMSG",0
181,"<S2SV_ModStart> inode ) ; struct buffer_head * dibh = bh_map -> b_page <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> unsigned end_of_metadata = <S2SV_ModEnd> height - 1 <S2SV_ModStart> end_of_metadata = height <S2SV_ModEnd> - 1 ; <S2SV_ModStart> end_of_metadata = height <S2SV_ModEnd> - 1 ; <S2SV_ModStart> end_of_metadata = height <S2SV_ModEnd> - 1 ; <S2SV_ModStart> gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; gfs2_trans_add_bh ( ip -> i_gl, bh_map -> b_page, 1 ) ; gfs2_trans_add_bh ( ip -> i_gl, bh_map -> b_page, 1 ) ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if ( height == ip -> i_height ) { struct buffer_head * bh ; ptr = metapointer ( end_of_metadata, mp ) ; bh = mp -> mp_bh [ end_of_metadata ] ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ end_of_",0
182,"<S2SV_ModStart> codec -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> input -> filename, input -> use_i420? ""I420"" : ""YV12"" <S2SV_ModEnd> ) ; } <S2SV_ModStart> g_h ) ; if ( input -> use_i420 ) { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } else { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( input -> use_i420 ) { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } else { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i4",0
183,"<S2SV_ModStart> { if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> attributes <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } <S2SV_ModStart> { if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> attributes <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; } else { if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> attributes <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } <S2SV_ModStart> { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> attributes <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element",0
184,"<S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel",0
185,<S2SV_ModStart> msix_tab_size % 4096 <S2SV_ModEnd> == 0 ),0
186,"<S2SV_ModStart> ; if (! js_doregexec ( J, re -> prog, text, & m, 0 ) ) { js_doregexec ( J, re -> prog, text, & m, 0 ) ; if (! js_doregexec ( J, re -> prog, text, & m, 0 ) ) { js_doregexec ( J, re -> prog, text, & m, 0 ) ; js_pushnumber ( J, - 1 ) ; } else if (! js_regexec ( J, re -> prog, text, & m, 0 ) ) { js_doregexec ( J, re -> prog, text, & m, 0 ) ; if (! js_doregexec ( J, re -> prog, text, & m, 0 ) ) { js_doregexec ( J, re -> prog, text, & m, 0 ) ; js_pushnumber ( J, - 1 ) ; } else if (! js_regexec ( J, re -> prog, text, & m, 0 ) ) { js_doregexec ( J, re -> prog, text, & m, 0 ) ;",0
187,"<S2SV_ModStart> case OFreshOID : if ( <S2SV_ModStart> ( dest, 1 ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest ) ; } <S2SV_ModStart> case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest ) ; } <S2SV_ModStart> case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; } <S2SV_ModStart> case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest ) ; } <S2SV_ModStart> case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ;",0
188,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_RXIS",0
189,"<S2SV_ModStart> * cm, vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { write_delta_q ( wb, cm -> y_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_dc_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> uv_ac_delta_q ) ; write_delta_q ( wb, cm -> y_dc_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> uv_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_ac_delta_q ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
190,"<S2SV_ModStart> ; if ( safe_write ( uipc_main. ch [ ch_id ]. fd, p_buf, msglen ) < 0 ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> (%s)"", strerror ( errno ) ) ; } else { if ( safe_write ( uipc_main. ch [ ch_id ]. fd, p_buf, msglen ) < 0 ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> (%s)"", strerror ( errno ) ) ; } else { if ( safe_write ( uipc_main. ch [ ch_id ]. fd, p_buf, msglen ) < 0 ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> (%s)"", strerror ( errno ) ) ; } else { if ( safe_write ( uipc_main. ch [ ch_id ]. fd, p_buf, msglen ) < 0 ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> (%s)"", strerror ( errno ) ) ; }",0
191,"<S2SV_ModStart> ; if ( BIO_reset ( rawcert ) == 1 && ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) == 1 && ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if (! EVP_PKEY_set1_EC ( peerec, localrsa ) ) { goto sslerr ; } } else if ( BIO_reset ( rawcert ) == 1 && ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) == 1 && ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == 1 && ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if (! EVP_PKEY_set1_EC ( peerec, localrsa ) ) { goto sslerr ; } } else if ( BIO_reset ( rawcert ) == 1 && ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) == 1 && ( localec = d2i_EC_PUBKEY_bio ( raw",0
192,"<S2SV_ModStart> t1_getline ( ) ; strcpy ( t1_line_array, t1_buf_array ) ; strcpy ( t1_buf_array, t1_line_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; } else { strcpy ( t1_buf_array, t1_line_array ) ; strcpy ( t1_buf_array, t1_buf_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; }",0
193,"<S2SV_ModStart> BLOCK_SIZE bsize, <S2SV_ModEnd> BLOCK_SIZE subsize ) <S2SV_ModStart> BLOCK_SIZE subsize ) { <S2SV_ModEnd> MACROBLOCKD * xd <S2SV_ModStart> -> e_mbd ; <S2SV_ModEnd> int bsl = <S2SV_ModStart> / 4 ; <S2SV_ModEnd> PARTITION_TYPE partition = <S2SV_ModStart> case PARTITION_NONE : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_VERT : * get_sb_index ( x, subsize ) = 1 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_",0
194,"<S2SV_ModStart> name ) ; if (! name ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ;",0
195,"<S2SV_ModStart> ; ret = key_permission ( key_ref, KEY_NEED_READ ) ; if ( ret == 0 ) goto can_read_key ; if ( is_key_possessed ( key_ref ) ) { ret = - EOPNOTSUPP ; goto error2 ; } if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOP",0
196,<S2SV_ModStart> u4_first_slice_is_aud ) { if ( 1 == ps_dec_op -> u4_first_slice_is_aud ) { if ( 1 == ps_dec_op -> u4_first_slice_is_aud ) { if ( 1 == ps_dec_op -> u4_first_slice_is_aud ) { if ( 1 == ps_dec_op -> u4_first_slice_is_aud ) { if ( 1 == ps_dec_op -> u4_first_slice_is_aud ) { if ( 1 == ps_dec_op -> u4_first_slice_is_aud ) { if ( 1 == ps_dec_op -> u4_first_slice_is_aud ) { if ( 1 == ps_dec_op -> u4_first_slice_is_aud ) { if ( 1 == ps_dec_op -> u4_first_slice_is_aud ) { if ( 1 == ps_dec_op -> u4_first_slice_is_aud ) { if ( 1 == ps_dec_op -> u4_first_slice_is_aud ),0
197,<S2SV_ModStart> var_off ) ; if ( src_known ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else if ( dst_reg -> smin_value > S64_MAX ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else if ( dst_reg -> smin_value > S64_MAX ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else if ( dst_reg -> smin_value > S64_MAX ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smin_value = S64_MAX ; } else if ( dst_reg -> smin_value > S64_MAX ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smin_value = S64_MAX ; } else if ( dst_reg -> smin_value > S64_MAX ) { dst_reg -> smin,0
198,"<S2SV_ModStart> ; if ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_NO_XATTR ) { cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; rc = - EPERM ; goto lookup_out ; } <S2SV_ModStart> -> f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f",0
199,"<S2SV_ModStart> ; if ( rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ) ) ) { ret = NULL ; goto out ; } <S2SV_ModEnd> rt = rcu_dereference_protected <S2SV_ModStart> ( rt, sock_owned_by_user ( sk ) ) ; if (! rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ) ) ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIESFAILED ) ; goto out ; } <S2SV_ModEnd> rcv_wscale = rcu_dereference_protected <S2SV_ModStart> ( rt, sock_owned_by_user ( sk ) ) ) ; if (! rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ) ) ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIESFAILED ) ; goto out ; }",0
200,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> mutt_b64_decode ( char <S2SV_ModStart> out ++ = ( ( base64val ( digit1 ) << 2 ) & 0xf0 ) | ( base64val ( digit2 ) >> 4 ) ; len ++ ; if ( digit3!= '=' ) { * out ++ = ( ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 2 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit3 ) << 4 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; } } } while ( * in && digit4!= '=' ) { * out ++ = ( ( base64val ( digit1 ) << 2 ) & 0xf0 ) | ( base64val ( digit2 ) >> 4 ) ; len ++ ; if ( digit3!= '=' ) { * out ++ = ( ( base64val ( digit3 ) << 6 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len,0
201,"<S2SV_ModStart> { int number_of_frames, <S2SV_ModEnd> number_of_keyframes, encode_frame_count <S2SV_ModStart> ; SvcInternal * const <S2SV_ModEnd> si = get_svc_internal <S2SV_ModStart> svc_ctx ) ; svc_log_reset ( svc_ctx ) ; if ( svc_ctx == NULL || si == NULL ) return NULL ; <S2SV_ModEnd> svc_log_reset ( svc_ctx <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> number_of_keyframes = encode_frame_count <S2SV_ModStart> ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> psnr_sum [ i ] [ 0 ], ( double ) si -> psnr_sum [ i ] [ 1 ], ( double ) si -> psnr_sum [ i ] [ 2 ], ( double )",0
202,"<S2SV_ModStart> = new_cols ; <S2SV_ModEnd> screen -> sb_buffer <S2SV_ModStart> -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] ) ; screen -> buffers [ 1 ] = realloc_buffer ( screen, screen -> buffers [ 1 ], new_rows, new_cols ) ; if ( screen -> buffers [ 0 ] ) screen -> buffers [ 0 ] = realloc_buffer ( screen, screen -> buffers [ 0 ], new_rows, new_cols ) ; if ( screen -> buffers [ 1 ] ) screen -> buffers [ 1 ] = realloc_buffer ( screen, screen -> buffers [ 1 ], new_rows, new_cols ) ; if ( screen -> buffers [ 0 ] ) screen -> buffers [ 0 ] = realloc_buffer ( screen, screen -> buffers [ 0 ], new_rows, new_cols ) ; if ( screen -> buffers [ 1 ] ) screen -> buffers [ 1 ] = realloc_buffer ( screen, screen -> buffers [ 1 ], new_rows, new_cols ) ; if ( screen -> buffers [ 0 ] ) screen -> buffers [ 0 ] = realloc_buffer ( screen, screen -> buffers [ 0 ],",0
203,<S2SV_ModStart> ) { const char * literal_start = * str ; const char * literal_end = * str ; int in_named_escape = 0 ; int result = 0 ; assert ( * literal == NULL ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == '\\\\' && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; result = 1 ; goto,0
204,"<S2SV_ModStart> = create_dump_dir_from_problem_data ( <S2SV_ModEnd> pd, g_settings_dump_location",0
205,<S2SV_ModStart> ; if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( x1 + h1 ) > ( ptr -> height - h1 ) ) { if ( ( y1 + w1 ) > ( ptr -> height - h1 ) ) { if ( ( y1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( y1 + h1 ) > ( ptr -> height - h1 ) ) { if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( y1 + h1 ) > ( ptr -> height - h1 ) ) { if ( ( y1 + h1 ) > ( ptr -> width - h1 ) ) { if ( ( y1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( y1 + h1 ) > ( ptr -> height - h1 ) ) { if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( y1 + h1 ) > ( ptr,0
206,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
207,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_cost",0
208,"<S2SV_ModStart> name ) { if (! name ) return NULL ; return try_then_request_module ( __crypto_lookup_template ( name ), ""%s"", name ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
209,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> < S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> * mi_8x8 = cm -> mi_grid_visible <S2SV_ModEnd> + idx_str ; <S2SV_ModStart> BLOCK_SIZE bsize ; cpi -> mb. source_variance = UINT_MAX ; int64_t dummy_rate = 0 ; int64_t dummy_dist = 0 <S2SV_ModEnd> ; switch ( <S2SV_ModStart> case VAR_BASED_PARTITION : <S2SV_ModEnd> choose_partitioning ( cpi <S2SV_ModStart>, mi_row, mi_col, BLOCK_64X64, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64 ) ; set_source_var_based_partition ( cpi, tile, mi_row, mi_col, BLOCK_64X64",0
210,"<S2SV_ModStart> ; dh = skb_header_pointer ( skb, dataoff, sizeof ( _dh ), & _dh ) ; if ( dh == NULL ) { msg = ""nf_ct_dccp: <S2SV_blank> packet <S2SV_blank> too <S2SV_blank> short"" ; goto out_invalid ; } state = dccp_state_table [ CT_DCCP_ROLE_CLIENT ] [ dh -> dccph_type ] [ CT_DCCP_NONE ] ; break ; case CT_DCCP_REQUEST : break ; case CT_DCCP_INVALID : msg = ""nf_ct_dccp: <S2SV_blank> invalid <S2SV_blank> state <S2SV_blank> transition <S2SV_blank> "" ; goto out_invalid ; } if ( LOG_INVALID ( net, IPPROTO_DCCP ) ) nf_log_packet ( net, <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
211,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( fd = mkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> dir ) ) == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( tmpname [ strlen ( tmpname ) - 1 ]!= '/' ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( tmpname [ strlen ( tmpname ) - 1 ]!= '/' ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( tmpname [ strlen ( tmpname ) - 1 ]!= '/' ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( tmpname [ strlen ( tmpname ) - 1 ]!= '/' ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary",0
212,"<S2SV_ModStart> mnt ) ; if ( dentry -> d_inode -> i_op -> follow_link ) { dentry -> d_inode -> i_op -> follow_link ( dentry, nd ) ; error = PTR_ERR ( cookie ) ; if (! IS_ERR ( cookie ) ) { char * s = nd_get_link ( nd ) ; error = 0 ; if ( s ) error = __vfs_follow_link ( nd, s ) ; else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } if ( dentry -> d_inode -> i_op ->",0
213,"<S2SV_ModStart> ip_options_get_finish ( struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> * opt, u32 <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END",0
214,"<S2SV_ModStart> ; if ( connection == NULL ) goto error ; else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, ""Upgrade"" ) ; if ( strcasecmp ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, "" <S2SV_blank> "" ) ; if ( strcasecmp ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1,",0
215,"<S2SV_ModStart> * findalldevs_if ; <S2SV_ModEnd> if ( pcap_findalldevs <S2SV_ModStart> 0 ; } if ( pcap_findalldevs ( & alldevs, errmsgbuf ) == - 1 ) { rpcapd_log ( LOGPRIO_ERROR, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."", errbuf ) ; return - 1 ; } <S2SV_ModStart> -> description ) { if ( pcap_findalldevs ( & alldevs, errmsgbuf ) == - 1 ) { rpcapd_log ( LOGPRIO_ERROR, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."", errbuf ) ; return - 1 ; } <S2SV_ModStart> -> name ) { if ( pcap_findalldevs ( & alldevs, errmsgbuf ) == - 1 ) { rpcapd_log ( LOGPRIO",0
216,"<S2SV_ModStart> ; struct dump_dir * <S2SV_ModEnd> dd = dd_create <S2SV_ModStart> DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } dd_create_basic_files ( dd, client_uid, NULL ) ; dd_save_text ( dd, FILENAME_ABRT_VERSION, VERSION ) ; dd_save_text ( dd, FILENAME_CMDLINE, cmdline ) ; g_hash_table_iter_next ( & iter, & gpkey, & gpvalue ) ) { g_hash_table_iter_destroy ( & iter ) ; g_hash_table_iter_destroy ( & iter ) ; g_hash_table_iter_init ( & iter, & gpkey, & gpvalue ) ; g_hash_table_iter_next ( & iter, & gpkey, & gpvalue ) ; dd_save_text ( dd, FILENAME_UID, uid_str ) ; g_hash_table_iter_next ( & iter, & gpkey, & gpvalue ) ; g_hash_table_iter_",0
217,"<S2SV_ModStart> ) ; for ( q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; q!= ( PixelPacket * ) NULL ; q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( PixelPacket * ) NULL ) break ; for ( q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; q!= ( PixelPacket * ) NULL ) break ; index = ConstrainColormapIndex ( image, ( * p >> 6 ) & 0x3 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; index = ConstrainColormapIndex ( image, ( * p >> 4 ) & 0x3 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; index = ConstrainColormapIndex ( image, ( * p >> 5 ) & 0x3 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRG",0
218,"<S2SV_ModStart> { BN_ULONG t1 = 0 ; BN_ULONG t2 = 0 ; BN_ULONG c1, c2, c3 ; c1 = 0 ; c2 = 0 ; c3 = 0 ; r [ 0 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 1, c2, c3 ) ; r [ 1 ] = c2 ; c2 = 0 ; sqr_add_c ( a, 2, 0, c2, c3 ) ; r [ 2 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 3, 0, c2, c3 ) ; r [ 3 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 4, 0, c2, c3 ) ; r [ 5 ] = c2 ; c2 = 0 ; sqr_add_c ( a, 5, 0, c2, c3 ) ; r [ 6 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 1, c2, c3 ) ; r [ 7 ] = c1 ; c",0
219,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
220,"<S2SV_ModStart> len ; if (! in_cksum ) { ND_PRINT ( ( ndo, "" <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> len ; if (! in_cksum ) { ND_PRINT ( ( ndo, "" <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> len ; if (! in_cksum ) { ND_PRINT ( ( ndo, "" <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> len ; if (! in_cksum ) { ND_PRINT ( ( ndo, "" <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> len ; if (! in_cksum ) { ND_PRINT ( ( ndo, "" <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> len ; if (! in_cksum ) { ND_PRINT ( ( ndo, "" <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> len ; if (! in_cksum ) { ND_PRINT ( ( ndo, "" <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
221,<S2SV_ModStart> ; if ( task -> flags & PF_EXITING ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if,0
222,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
223,<S2SV_ModStart> SEI_USER_DATA_REGISTERED_ITU_T_T35 : ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t35 = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t35 = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t35 = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t35 = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t35 = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t35 = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t35 = 1 ; ps_parse -> s_sei_params. i,0
224,<S2SV_ModStart> ; if ( <S2SV_ModEnd> num_engines > SDMA_MAX_ENGINES <S2SV_ModStart> num_engines > SDMA_MAX_ENGINES ) { if ( <S2SV_ModEnd> num_engines > SDMA_MAX_ENGINES <S2SV_ModStart> num_engines ) { if ( <S2SV_ModEnd> num_engines > SDMA_MAX_ENGINES <S2SV_ModStart> num_engines ) { if ( <S2SV_ModEnd> num_engines > SDMA_MAX_ENGINES <S2SV_ModStart> num_engines > SDMA_MAX_ENTRIES ) { if ( <S2SV_ModEnd> num_engines > SDMA_MAX_ENGINES <S2SV_ModStart> num_engines > SDMA_MAX_ENGINES ) { if ( <S2SV_ModEnd> num_engines > SDMA_MAX_ENGINES <S2SV_ModStart> num_engines ) { if ( <S2SV_ModEnd> num_engines > SDMA_MAX_ENGINES <S2SV_ModStart> num_engines ) { if ( <S2SV_ModEnd> num_engines > SDMA_MAX_ENGINES <S2SV_ModStart> num_engines > SDMA_MAX_ENTRIES ) { if ( <S2SV_ModEnd> num_engines > SDMA_MAX_ENGINES <S2SV_ModStart> num_engines > SDMA_MAX_ENGINES ) { if ( <S2SV_ModEnd> num_engines > SDMA_MAX,0
225,"<S2SV_ModStart> const char * name <S2SV_ModEnd>, int rep_quick <S2SV_ModStart>, rep_quick ) <S2SV_ModEnd> { int got_error <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; printf <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; printf <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; } <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; printf <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; printf <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; }",0
226,"<S2SV_ModStart> q, 10 ) ; if ( q == ( char * ) NULL ) { p = q ; sizes [ i ++ ] = size ; while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) || ( * p == ',' ) ) || ( * p == '\\0' ) ) { p = q ; while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) || ( * p == '\\0' ) ) || ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) ) { p = q ; sizes [ i ++ ] = size ; while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) || ( * p == ',' ) ) ) { p = q ; while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) || ( * p == '\\0' ) ) { p = q ; while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) { p = q ; while ( ( isspace ( ( int ) ( ( unsigned char ) ( ( unsigned char )",0
227,"<S2SV_ModStart> ) ; } if ( pcount > HSTORE_MAX_PAIRS ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, HSTORE_MAX_PAIRS ) )",0
228,"<S2SV_ModStart> val ) ; if (! strcmp ( var, ""command"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> command <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile <S2SV_blank> or <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if (! strcmp ( var, ""rspfile"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if (! strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if (! strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ;",0
229,"<S2SV_ModStart> & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), ( unsigned long long ) c -> id, c -> buf ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), ( unsigned long long ) c -> id, c -> buf ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), c -> id, c -> buf ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), c -> id, c -> buf ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind )",0
230,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",0
231,"<S2SV_ModStart> g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""export-desktop-%s.pkl"", g_strndup ( tmpfile_name, strlen ( "".service"" ) ) ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""export-desktop-%s.pkl"", g_strndup ( tmpfile_name, strlen ( "".service"" ) ) ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""export-desktop-%s.pkl"", g_strndup ( tmpfile_name, strlen ( "".service"" ) ) ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""export-desktop-%s.pkl"", g_strndup ( tmpfile_name, strlen ( "".service"" ) ) ) ; g_autoptr ( GOutputStream ) out_",0
232,"<S2SV_ModStart> ; char * temp_filename <S2SV_ModEnd> = osi_calloc ( <S2SV_ModStart> ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_",0
233,"<S2SV_ModStart> elen ) ; if ( elen + pc -> lengthComponentIdent > fromlen ) return - ENAMETOOLONG ; <S2SV_ModStart> case 1 : if ( elen + pc -> lengthComponentIdent > fromlen ) return - ENAMETOOLONG ; <S2SV_ModStart> case 2 : if ( elen + pc -> lengthComponentIdent > fromlen ) return - ENAMETOOLONG ; * p ++ = '/' ; tolen -= pc -> lengthComponentIdent ; break ; case 3 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""../"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 4 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 2 ) ; p += 2 ; tolen -= 2 ; break ; case 5 : comp_len = udf_get_filename ( sb, pc -> componentIdent, pc -> lengthComponentIdent, p, tolen ) ; p += comp_len ; tolen -= comp_len ; if ( comp_len == 0 ) return - ENAMETOOLONG ; * p ++ = '/' ; tolen -= comp_len ; break ; } elen += sizeof",0
234,"<S2SV_ModStart> tlv_len ) ; if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %d]"", mgmtd_len ) ) ; break ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %d]"", tlv_len ) ) ; break ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %d]"", mgmtd_len ) ) ; break ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %d]"", tlv_len ) ) ; break ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %d]"", mgmtd_len ) ) ; break ;",0
235,"<S2SV_ModStart> userData, target, ctxt <S2SV_ModStart> ) ) { xmlFree ( buf ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if ( buf == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if ( buf == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if ( buf == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if ( buf == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if ( buf == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt ->",0
236,"<S2SV_ModStart> int tagval ; struct stream packet <S2SV_ModStart> return False ; packet = * s ; <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER_TAG_SEQUENCE|BER_TAG_CONSTRUCTED, <S2SV_blank> got <S2SV_blank> %x"", packet -> p [ 0 ] ) ; return False ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER_TAG_SEQUENCE|BER_TAG_CONSTRUCTED, <S2SV_blank> got <S2SV_blank> %x"", packet -> p [ 0 ] ) ; return False ; } if (! s_check_rem ( s, length ) ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER_TAG_SEQUENCE|BER_TAG_CONSTRUCTED, <S2SV_blank> got <S2SV_blank> %x"", packet -> p [ 0 ] ) ; return False ; } if (! s_check_rem ( s, length ) ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER",0
237,"<S2SV_ModStart> ; int rv = Socket_print ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModStart> ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"", <S2SV_ModStart>, request, _auth? _auth : """" <S2SV_ModEnd>, StringBuffer_toString (",0
238,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", src ) ; exit ( 1 ) ; } <S2SV_ModEnd> if ( chown <S2SV_ModStart> getuid ( ), getgid ( ), S_IRUSR | S_IWUSR ) < 0 ) errExit ( ""chown"" ) ; if ( chmod ( dest, S_IRUSR | S_IWUSR ) < 0 ) errExit ( ""chmod"" ) ; unlink ( src ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
239,<S2SV_ModStart> flags ) ; wait_for_completion ( & fcomp. comp ) ; hstats -> seconds_since_last_reset = fcstats -> fc. secs_reset ; hstats -> tx_frames = fcstats -> fc. tx_frames ; hstats -> tx_words = fcstats -> fc. tx_words ; hstats -> tx_words = fcstats -> fc. tx_words ; hstats -> rx_frames = fcstats -> fc. rx_frames ; hstats -> tx_words = fcstats -> fc. rx_words ; hstats -> lip_count = fcstats -> fc. lip_count ; hstats -> nos_count = fcstats -> fc. nos_count ; hstats -> error_frames = fcstats -> fc. error_frames ; hstats -> dumped_frames = fcstats -> fc. dumped_frames ; hstats -> dropped_frames = fcstats -> fc. dropped_frames ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_sync_count = fcstats -> fc. loss_of_syncs ; hstats -> link_failure_count = fcstats -> fc.,0
240,"<S2SV_ModStart> value ) { value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> h = MinF ( 1.0f, MaxF ( 0.0f, value -> h ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
241,<S2SV_ModStart> -> sasl_mechanism ; rec -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> sasl_password = g_strdup ( src -> sasl_password ) ;,0
242,<S2SV_ModStart> ; } memset <S2SV_ModEnd> ( cpi ->,0
243,"<S2SV_ModStart>, o, datao ; if ( CHECKOVERFLOW ( 6 + n -> offset, buf_size ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { exif_log ( ne -> log, EXIF_LOG_CODE_NO_MEMORY ( ne -> log, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } exif_log ( ne -> log, EXIF_LOG_CODE_NO_MEMORY ( ne -> log, ""ExifMnoteCanon",0
244,"<S2SV_ModStart> HA_ERR_NOT_A_TABLE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; break ; case HA_ERR_CRASHED_ON_USAGE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRASHED_ON_",0
245,"<S2SV_ModStart> olen ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; CURLcode <S2SV_ModEnd> res ; if <S2SV_ModStart> CURL_convert_from_network ( handle <S2SV_ModEnd>, & in <S2SV_ModStart> 1 ) ; if ( alloc < 2 ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; if ( alloc < 2 ) { free ( ns ) ; return NULL ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( alloc < 2 ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
246,"<S2SV_ModStart> ; RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; ESIL_A ( ""?{,%"" PFMT64d "",pc,=,},"", next_op. esil. addr ) ; ESIL_A ( ""?{,%"" PFMT64d "",pc,=,},"", next_op. esil. addr ) ; ESIL_A ( ""?{,%"" PFMT64d "",pc,=,},"", next_op. esil. addr ) ; ESIL_A ( ""?{,%"" PFMT64d "",pc,=,},"", op -> jump ) ; ESIL_A ( ""?{,%"" PFMT64d "",pc,=,},"", next_op. esil. addr ) ; ESIL_A ( ""?{,%"" PFMT64d "",pc,=,},"", next_op. esil. addr ) ; ESIL_A ( ""?{,%"" PF",0
247,"<S2SV_ModStart> pdu_free_state_ref = usm_free_usmStateReference ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_POST_PREMIB_READ_CONFIG, init_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN,",0
248,<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) {,0
249,"<S2SV_ModStart> ] ; # ifdef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= 1 ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; }",0
250,<S2SV_ModStart> pixels ++ = ( pixel >> 7 ) & 0x01? 0U : 255U ; * pixels ++ = ( pixel >> 5 ) & 0x01? 0U : 255U ; * pixels ++ = ( pixel >> 4 ) & 0x01? 0U : 255U ; * pixels ++ = ( pixel >> 2 ) & 0x01? 0U : 255U ; * pixels ++ = ( pixel >> 3 ) & 0x01? 0U : 255U ; * pixels ++ = ( pixel >> 0 ) & 0x01? 0U : 255U ; * pixels ++ = ( pixel >> 0 ) & 0x01? 0U : 255U ; * pixels ++ = ( pixel >> 0 ) & 0x01? 0U : 255U ; * pixels ++ = ( pixel >> 1 ) & 0x01? 0U : 255U ; * pixels ++ = ( pixel >> 0 ) & 0x01? 0U : 255U ; * pixels ++ = ( pixel >> 0 ) & 0x01? 0U : 255U ; * pixels ++ = ( pixel >> 1 ) & 0x01? 0U : 255U ; * pixels ++ = ( pixel >> 0 ) & 0x01?,0
251,"<S2SV_ModStart> timer ) ; mutex_unlock ( & register_mutex ) ; list_for_each_entry ( slave, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; list_move_tail ( & slave -> open_list, & snd_timeri -> open_list_head ) ; list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; slave -> timer = NULL ; spin_unlock_irq ( & slave_active_lock ) ; mutex_unlock ( & register_mutex ) ; list",0
252,<S2SV_ModStart> -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1,0
253,<S2SV_ModStart> { int_fast32_t widthOverflow = ( uint_fast32_t ) ( gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ) ; int_fast32_t heightOverflow = ( uint_fast32_t ) ( gifFilePtr -> Image. Height * gifFilePtr -> Image. Width ) - ( uint_fast32_t ) ( gifFilePtr -> Image. Height * gifFilePtr -> Image. Height ) ; if ( widthOverflow > 0 || heightOverflow > 0 ) { Gif <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
254,"<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> & conn -> <S2SV_ModStart> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; ret = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret ; ret = validate_dn ( props, dn, conn -> validator -> passwd. buf ) ; if ( ret!= ret_ok ) return ret",0
255,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( Corrupt",0
256,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> is <S2SV_blank> missing <S2SV_blank> bus <S2SV_blank> %d\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",0
257,"<S2SV_ModStart> ) ; rdsdebug <S2SV_ModEnd> ( ""size <S2SV_blank> %zu <S2SV_blank> flags <S2SV_blank> 0x%x <S2SV_blank> timeo <S2SV_blank> %ld\\n"",",0
258,<S2SV_ModStart> 0 ) { if ( len < 9 ) { t1mac_output_data ( '\\n' ) ; t1mac_output_data ( '\\r' ) ; t1mac_output_data ( '\\n' ) ; t1mac_output_data ( '\\r' ) ; t1mac_output_data ( '\\n' ) ; t1mac_output_data ( '\\r' ) ; t1mac_output_data ( '\\n' ) ; } else { if ( len < 9 ) { t1mac_output_data ( '\\n' ) ; t1mac_output_data ( '\\r' ) ; t1mac_output_data ( '\\n' ) ; t1mac_output_data ( '\\r' ) ; t1mac_output_data ( '\\n' ) ; t1mac_output_data ( '\\r' ) ; t1mac_output_data ( '\\n' ) ; } else { if ( len < 9 ) { t1mac_output_data ( '\\n' ) ; t1mac_output_data ( '\\r' ) ; t1mac_output_data ( '\\n' ) ; t1,0
259,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart> NULL, NULL )",0
260,"<S2SV_ModStart> msixcap ; assert ( msgnum >= 1 && msgnum <= MAX_MSIX_TABLE_ENTRIES ) ; assert ( barnum >= 0 && barnum <= PCIR_MAX_BAR_0 ) ; tab_size = roundup2 ( tab_size, 4096 ) ; pci_populate_msixcap ( & msixcap, barnum, tab_size ) ; pci_emul_alloc_bar ( dev, barnum, PBA_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_populate_msixcap ( & msixcap, msgnum, barnum, tab_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size +",0
261,"<S2SV_ModStart> ; if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func",0
262,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
263,"<S2SV_ModStart> NULL ) goto cleanup ; if ( is -> issuer == NULL || is -> serial == NULL ) goto cleanup ; status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ; } retval = 0 ; cleanup : X509_NAME_free ( is -> issuer ) ; ASN1_INTEGER_free ( is -> serial ) ; free ( is ) ;",0
264,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock ( <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock ( <S2SV_ModStart> np -> tclass ) ; rcu_read_lock ( <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock ( <S2SV_ModStart> np -> tclass ) ; rcu_read_lock ( ) ;",0
265,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> VP9_COMP * cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; if ( frame_type == MV_REFERENCE_FRAME ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> sf. <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32,0
266,"<S2SV_ModStart> printval ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> break ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> break ; case CF_MAXIMUM : printval = max ( printval, im -> gdes [ vidx ]. data [ ii ] ) ; break ; case CF_MINIMUM : printval = min ( printval, im -> gdes [ vidx ]. data [ ii ] ) ; break ; case CF_FAILURES : printval = max ( printval, im -> gdes [ vidx ]. data [ ii ] ) ; break ; case CF_MAXIMUM : printval = max ( printval, im -> gdes [ vidx ]. data [ ii ] ) ; break ; case CF_MINIMUM : printval = min ( printval, im -> gdes [ vidx ]. data [ ii ] ) ; break ; case CF_MINIMUM : printval = max ( printval, im -> gdes [ vidx ]. data [ ii ] ) ; break ; case CF_MAXIMUM : printval = max ( printval, im -> gdes [ vidx ]. data [ ii ] ) ; break ; case CF_MINIMUM : printval = min ( printval, im -> g",0
267,<S2SV_ModStart> b ; if ( buf1 -> size > buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size > buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size,0
268,"<S2SV_ModStart> ; size_t sz ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) { info = vmalloc ( sz ) ; if (! info ) return NULL ; } else { info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; } <S2SV_ModEnd> info = vmalloc",0
269,<S2SV_ModStart> ; if ( protocol < 0 || protocol > AX25_MAX_PROTOCOL ) return - EINVAL,0
270,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
271,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val, false",0
272,"<S2SV_ModStart> name ) ; if ( url. path == NULL || url. path [ strlen ( url. path ) - 1 ] == '\\0' || url. path [ strlen ( url. path ) - 1 ] == '\\0' || url. path [ strlen ( url. path ) - 1 ] == '\\0' || url. path [ strlen ( url. path ) - 1 ] == '\\0' || url. user == NULL ) url. user = NULL ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ; mutt_str_strcat ( buf, sizeof ( buf ), ""\\"""" ) ; mutt_buffer_init ( & token ) ; mutt_buffer_init ( & err ) ; if ( mutt_parse_rc_line ( buf, & token, & err ) ) mutt_debug ( 1, ""Error <S2SV_blank> adding <S2SV_blank> subscribed <S2SV_blank> mailbox: <S2SV_blank> %s\\n"", errstr ) ;",0
273,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
274,"<S2SV_ModStart> ; r = sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } log_info ( ""Watching <S2SV_blank> system <S2SV_blank> buttons <S2SV_blank> on <S2SV_blank> /dev/input/%s <S2SV_blank> (%s)""",0
275,<S2SV_ModStart> ( errors ) { test_curl_off_t_formatting ( ) ; errors += test_string_formatting ( ) ; <S2SV_ModStart> ( errors ) { test_curl_off_t_formatting ( ) ; errors += test_string_formatting ( ) ; errors += test_curl_off_t_formatting ( ) ; errors += test_string_formatting ( ) ; if ( errors ) { test_curl_off_t_formatting ( ) ; errors += test_string_formatting ( ) ; errors += test_string_formatting ( ) ; errors += test_curl_off_t_formatting ( ) ; errors += test_string_formatting ( ) ; errors += test_curl_off_t_formatting ( ) ; errors += test_string_formatting ( ) ; errors += test_string_formatting ( ) ; if ( errors ) { test_curl_off_t_formatting ( ) ; errors += test_string_formatting ( ) ; errors += test_string_formatting ( ) ; errors += test_string_formatting ( ) ; errors += test_curl_off_t_formatting ( ) ; errors,0
276,<S2SV_ModStart> lun ) sas_eh_defer_cmd <S2SV_ModEnd> ( cmd ),0
277,"<S2SV_ModStart>, end_col_offset ; if ( TYPE ( CHILD ( n, name_i + 1 ) ) == TYPE_COMMENT ) { name = NEW_IDENTIFIER ( CHILD ( n, name_i + 1 ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 2 ) ) ; if (! args ) return NULL ; returns = ast_for_expr ( c, CHILD ( n, name_i + 3 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ;",0
278,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
279,"<S2SV_ModStart>, <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
280,"<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; if (! test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) rc = <S2SV_ModStart>. val ) ; else rc = <S2SV_ModStart>. val ) ; if ( rc!= X86EMUL_CONTINUE ) { if (! test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if (! test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if (! test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if (! test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if (! test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if (! test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if (! test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if (! test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if (! test_cc ( ctxt -> b ^",0
281,,1
282,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
283,"<S2SV_ModStart> : if ( psf -> header. bytes_per_sample > SIGNED_SIZEOF ( psf -> header. bytes_per_sample ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; <S2SV_ModStart> : if ( psf -> header. bytes_per_sample > SIGNED_SIZEOF ( psf -> header. bytes_per_sample ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; <S2SV_ModStart> : if ( psf -> header. bytes_per_sample > SIGNED_SIZEOF ( psf -> header. bytes_per_sample ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; <S2SV_ModStart> : if ( psf -> header. bytes_per_sample > SIGNED_SIZEOF ( psf -> header. bytes_per_sample ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> header. bytes_per_sample > SIGNED_SIZEOF ( psf -> header. bytes_per_sample ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> header. bytes_per_sample > SIGNED_SIZE",0
284,<S2SV_ModStart> u4_ofst ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
285,<S2SV_ModStart> -> type == MD_LINE_FENCEDCODE && <S2SV_ModEnd> line -> indent <S2SV_ModStart> -> type == MD_LINE_FENCEDCODE && <S2SV_ModEnd> line -> indent <S2SV_ModStart> -> type == MD_LINE_FENCEDCODE && <S2SV_ModEnd> line -> indent <S2SV_ModStart> -> type == MD_LINE_FENCEDCODE && <S2SV_ModEnd> line -> indent <S2SV_ModStart> -> type == MD_LINE_FENCEDCODE && <S2SV_ModEnd> line -> indent <S2SV_ModStart> -> type == MD_LINE_FENCEDCODE && <S2SV_ModEnd> line -> indent <S2SV_ModStart> -> last_line_has_list_loosening_effect && <S2SV_ModEnd> line -> indent <S2SV_ModStart> -> last_line_has_list_loosening_effect && <S2SV_ModEnd> line -> indent <S2SV_ModStart> -> type == MD_LINE_FENCEDCODE && <S2SV_ModEnd> line -> indent <S2SV_ModStart> -> type == MD_LINE_FENCEDCODE && <S2SV_ModEnd> line -> indent <S2SV_ModStart> -> type == MD_LINE_FENCEDCODE && <S2SV_ModEnd> line -> indent <S2SV_ModStart> -> type == MD_LINE_FENCEDCODE && <S2SV_ModEnd> line -> indent <S2SV_ModStart> -> last_line_has_list_loosening_effect && <S2SV_ModEnd> line -> indent <S2SV_ModStart> -> last_line_has_list_loosening_effect && <S2SV_ModEnd> line -> indent,0
286,<S2SV_ModStart> event ) { <S2SV_ModEnd> struct task_struct * <S2SV_ModStart> event ) ; <S2SV_ModEnd> } raw_spin_unlock_irq ( <S2SV_ModStart> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } <S2SV_null>,0
287,<S2SV_ModStart> ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) ; flags -> display_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) ; flags -> display_b_modes_flag = ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BL,0
288,"<S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( ptr. common -> packet_seq ), length ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( ptr. common -> packet_seq ), length ) ) ; goto trunc ; } <S2SV_ModStart> ND_TCHECK2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( ptr. common -> packet_seq ),",0
289,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> timer ) ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,0
290,"<S2SV_ModStart> { fprintf ( stderr <S2SV_ModEnd>, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone""",0
291,"<S2SV_ModStart> ; if ( unlikely (! path [ depth ]. p_ext ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if (",0
292,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ptr_hbe_txposer -> start_band <S2SV_ModStart> ptr_hbe_txposer -> start_band >= IXHEAACD_NUM_BANDS ) { ptr_hbe_txposer -> start_band = IXHEAACD_NUM_BANDS ; ptr_hbe_txposer -> start_band = IXHEAACD_NUM_BANDS ; ptr_hbe_txposer -> end_band = IXHEAACD_NUM_BANDS ; } else { if ( ptr_hbe_txposer -> start_band >= IXHEAACD_NUM_BANDS ) { ptr_hbe_txposer -> start_band = IXHEAACD_NUM_BANDS ; ptr_hbe_txposer -> start_band = IXHEAACD_NUM_BANDS ; ptr_hbe_txposer -> end_band = IXHEAACD_NUM_BANDS ; } else { if ( ptr_hbe_txposer -> start_band >= IXHEAACD_NUM_BANDS ),0
293,"<S2SV_ModStart> lua_module ) ; if ( parsed_require_line == NULL ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02314 ) ""Unable <S2SV_blank> to <S2SV_blank> compile <S2SV_blank> VM <S2SV_blank> for <S2SV_blank> authz <S2SV_blank> provider <S2SV_blank> %s"", prov_spec -> name ) ; return AUTHZ_GENERAL_ERROR ; } spec = create_vm_spec ( & pool, r, cfg, server_cfg, NULL, 0, ""authz <S2SV_blank> provider"" ) ; L = ap_lua_get_lua_state ( pool, spec, r ) ; if ( L == NULL ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; }",0
294,<S2SV_ModStart> MagickFalse ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; quantum_type = DestroyQuantumInfo ( quantum_type ) ; if ( quantum_info == ( QuantumInfo * ) NULL ) quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_type == MagickFalse ) quantum_info = DestroyQuantumInfo ( quantum_type ) ; if ( quantum_info == ( QuantumInfo * ) NULL ) quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_type == MagickFalse ) quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_type == MagickFalse ) quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_type == MagickFalse ) quantum_info = DestroyQuantumInfo ( quantum_type ) ; if ( quantum_info == ( QuantumInfo * ) NULL ) quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_type == MagickFalse ) quant,0
295,<S2SV_ModStart> ; if ( proto_end == NULL || proto_end - url < 3,0
296,"<S2SV_ModStart> fdt ) ; if ( count >= path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> = nextoffset ; if ( count >= path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> case FDT_PROP : include = want >= 2 ; stop_at = offset ; prop = fdt_get_property_by_offset ( fdt, offset, NULL ) ; str = fdt_string ( fdt, fdt32_to_cpu ( prop -> nameoff ) ) ; if (! str_in_list ( path, inc, inc_count ) ) include = 0 ; break ; case FDT_BEGIN_NODE : depth ++ ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR",0
297,"<S2SV_ModStart> ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> clients), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; }",0
298,"<S2SV_ModStart> channel ) ; if ( g_timeout_is_zero ( client -> priv -> protocol_timeout ) ) { g_debug ( ""GsmXSMPClient: <S2SV_blank> Protocol <S2SV_blank> timeout <S2SV_blank> is <S2SV_blank> zero"" ) ; client -> priv -> protocol_timeout = 0 ; } else { client -> priv -> protocol_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_protocol_timeout, client ) ; if ( g_timeout_is_zero ( client -> priv -> protocol_timeout ) ) { g_debug ( ""GsmXSMPClient: <S2SV_blank> Protocol <S2SV_blank> timeout <S2SV_blank> is <S2SV_blank> zero"" ) ; client -> priv -> protocol_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_protocol_timeout, client ) ; } else { client -> priv -> protocol_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_protocol_timeout, client ) ; if ( g_timeout_is_zero ( client -> priv -> protocol_timeout ) ) { g_debug ( ""GsmXSMPClient: <S2SV_blank> Protocol <S2SV_blank> timeout <S2SV_blank> is <S2SV_blank> zero"" ) ; client -> priv -> protocol_",0
299,<S2SV_ModStart> 1 ; for ( j = 0 ; j < book -> used_entries ; j ++ ) a [ i ++ ] += v [ j ] ; for ( j = 0 ; j < book -> used_entries ; j ++ ) for ( j = 0 ; j < book -> dim ; j ++ ) for ( j = 0 ; j < book -> used_entries ; j ++ ) for ( j = 0 ; j < book -> dim ; j ++ ) for ( j = 0 ; j < book -> used_entries ; j ++ ) for ( j = 0 ; j < book -> dim ; j ++ ) a [ i ++ ] += v [ j ] ; for ( j = 0 ; j < book -> dim ; j ++ ) for ( j = 0 ; j < book -> used_entries ; j ++ ) for ( j = 0 ; j < book -> dim ; j ++ ) for ( j = 0 ; j < book -> dim ; j ++ ) for ( j = 0 ; j < book -> used_entries ; j ++ ) for ( j = 0 ; j < book -> dim ; j ++ ) for ( j = 0 ; j < book -> used_entries ; j ++ ) for ( j = 0,0
300,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
301,"<S2SV_ModStart> { if ( sf -> x_scale_fp == REF_INVALID_SCALE || sf -> y_scale_fp == REF_INVALID_SCALE ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if ( sf -> y_scale_fp == REF_INVALID_SCALE ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_scale_fp = get_fixed_point_scale_factor ( other_w, this_w ) ; sf -> y_scale_fp = get_fixed_point_scale_factor ( other_h, this_h ) ; sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; sf -> x_step_q4 = scaled_x ( 16, sf",0
302,"<S2SV_ModStart> PERF_COUNT_SW_ALIGNMENT_FAULTS, 1 <S2SV_ModEnd>, regs,",0
303,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
304,"<S2SV_ModStart> ) ; opt = rcu_dereference_protected ( <S2SV_ModStart> np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt ) { atomic_sub ( opt -> tot_len, & sk -> sk_omem_alloc ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; } <S2SV_ModStart> ( opt ) { atomic_sub ( opt -> tot_len, & sk -> sk_omem_alloc ) ; opt = rcu_dereference_protected ( opt -> tot_len, __ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
305,"<S2SV_ModStart> case IPV6_PKTINFO : if ( np -> rxopt. bits. rxinfo ) { struct in6_pktinfo dst_info ; dst_info = rcu_dereference_protected ( np -> rxopt. bits. srcinfo, sock_owned_by_user ( sk ) ) ; dst_info = rcu_dereference_protected ( np -> rxopt. bits. dstinfo, sock_owned_by_user ( sk ) ) ; } else { dst_info = rcu_dereference_protected ( np -> rxopt. bits. srcinfo, sock_owned_by_user ( sk ) ) ; }",0
306,<S2SV_ModStart> ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_ops <S2SV_ModStart> ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_pf_ops <S2SV_ModStart> ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_sysctl_unregister,0
307,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_samples_total > 255.0 ) ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; else ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", stream -> psnr_totals [ i ] / stream -> psnr_count ) ; } <S2SV_ModEnd> fprintf ( stderr",0
308,<S2SV_ModStart> task ) { <S2SV_ModEnd> complete ( &,0
309,"<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> 2 + 16 ), GFP_KERNEL ) ; if (! dst_name ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> summary\\n"" ) ; return ; }",0
310,"<S2SV_ModStart> ) ; TRACE_DEBUG ( ""CIDER=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { mem",0
311,"<S2SV_ModStart> } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
312,"<S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HA",0
313,"<S2SV_ModStart> ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT )",0
314,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY (,0
315,<S2SV_ModStart> )? ( rc <S2SV_ModEnd> -> av_per_frame_bandwidth * <S2SV_ModStart> -> baseline_gf_interval * ( rc <S2SV_ModEnd> -> baseline_gf_interval + <S2SV_ModStart> -> baseline_gf_interval + ( rc <S2SV_ModEnd> -> baseline_gf_interval + <S2SV_ModStart> -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval +,0
316,"<S2SV_ModStart> ++ ) { if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank>",0
317,"<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch <S2SV_ModStart> o -> v. Module. type_ignores, ast2obj_type_ignore ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_type_ignores, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_list ( o -> v. Module. type_ignores, ast2obj_type_ignore ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_type_ignores, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_list ( o -> v. Module. type_ignores, ast2obj_type_ignore ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_type_ignores, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_list ( o -> v. Module. type_ignores, ast2obj_",0
318,"<S2SV_ModStart> ib ] ; if ( d -> dequant == NULL ) { vp8_strict_quantize_b ( b, d ) ; } else if ( d -> qcoeff == NULL ) { vp8_strict_quantize_b ( b, d ) ; } else if ( d -> dqcoeff == NULL ) { vp8_strict_quantize_b ( b, d ) ; } else if ( d -> dequant == NULL ) { vp8_strict_quantize_b ( b, d ) ; } else if ( d -> qcoeff == NULL ) { vp8_strict_quantize_b ( b, d ) ; } else if ( d -> qcoeff == NULL ) { vp8_strict_quantize_b ( b, d ) ; } else if ( d -> dqcoeff == NULL ) { vp8_strict_quantize_b ( b, d ) ; } else if ( d -> dequant == NULL ) { vp8_strict_quantize_b ( b, d ) ; } else if ( d -> dequant == NULL ) { vp8_strict_quantize_b ( b, d ) ; } else if ( d -> dequant ==",0
319,"<S2SV_ModStart> FN_REFLEN ] ; if ( opt_basedir [ i - 1 ] == FN_LIBCHAR2 ) { strncpy ( buff, opt_basedir, sizeof ( buff ) - 1, sizeof ( buff ) - 1 ) ; } else if ( opt_basedir [ i - 1 ] == FN_LIBCHAR2 ) { strncpy ( buff, opt_basedir, sizeof ( buff ) - 1, sizeof ( buff ) - 1 ) ; } else if ( opt_basedir [ i - 1 ] == FN_LIBCHAR2 ) { strncpy ( buff, opt_basedir, sizeof ( buff ) - 1 ) ; strncat ( buff, FN_DIRSEP, sizeof ( buff ) - 1 ) ; } else if ( opt_basedir [ i - 1 ] == FN_LIBCHAR2 ) { strncpy ( buff, opt_basedir, sizeof ( buff ) - 1, sizeof ( buff ) - 1 ) ; } else if ( opt_basedir [ i - 1 ] == FN_LIBCHAR2 ) { strncpy ( buff, opt_basedir, sizeof ( buff ) - 1 ) ; strncat ( buff, FN_DIRSEP, sizeof ( buff ) - 1 ) ;",0
320,"<S2SV_ModStart> { int n ; if ( data_end - data < 3 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } else { n = ( int ) ( data_end - data ) ; if ( n < 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } else { if ( pbi -> ec_active ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } else { n = ( int ) ( data_end - data ) ; if ( n < 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } else { if ( pbi -> ec_active ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } pbi -> independent_",0
321,"<S2SV_ModStart> getprivs_ret ret ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
322,"<S2SV_ModStart>. sack_needed ; if ( new -> peer. i ) { sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, asoc -> peer. i. initial_tsn, GFP_ATOMIC ) ; } else { list_for_each_entry ( trans, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) { sctp_assoc_rm_peer ( asoc, trans ) ; continue ; } if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) sctp_assoc_rm_peer ( asoc, trans ) ; } else { list_for_each_entry ( trans, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) { sctp_assoc_rm_peer ( asoc, trans ) ; continue ; } if (! sctp_assoc_lookup_paddr",0
323,"<S2SV_ModStart> * returnrate, int * returndistortion, int * returnintra <S2SV_ModStart> CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOIS",0
324,<S2SV_ModStart> goto error ; if ( h -> hdr -> magic [ 0 ] == 'r' || h -> hdr -> magic [ 1 ] == 'e' ) { h -> hdr -> magic [ 0 ] = 'r' ; h -> hdr -> magic [ 1 ] = 'e' ; h -> hdr -> magic [ 0 ] = 'r' ; h -> hdr -> magic [ 1 ] = 'e' ; h -> hdr -> magic [ 2 ] = 'e' ; } else { h -> hdr -> magic [ 0 ] = 'r' ; h -> hdr -> magic [ 1 ] = 'e' ; } if ( h -> hdr -> magic [ 0 ] == 'r' ) { h -> hdr -> magic [ 0 ] = 'r' ; h -> hdr -> magic [ 1 ] = 'e' ; h -> hdr -> magic [ 0 ] = 'r' ; h -> hdr -> magic [ 1 ] = 'e' ; h -> hdr -> magic [ 2 ] = 'e' ; } else { h -> hdr -> magic [ 0 ] = 'r' ; h -> hdr -> magic [ 2 ] = 'e' ; h -> hdr -> magic [ 3 ] = 'e' ; h ->,0
325,"<S2SV_ModStart> ; UWORD8 u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id ; <S2SV_ModEnd> UWORD16 i2_max_frm_num ; <S2SV_ModStart> ps_seq ) ; <S2SV_ModEnd> i2_max_frm_num = ih264d_get_max_frm_num <S2SV_ModStart> ps_bitstrm ) ; <S2SV_ModEnd> i2_max_frm_num = ih264d_get_max_frm_num <S2SV_ModStart> ; i2_max_frm_num = ih264d_get_max_frm_num ( ps_bitstrm ) ; <S2SV_ModEnd> i2_max_frm_num = ih264d_get_max_frm_num <S2SV_ModStart> ps_bitstrm ) ; <S2SV_ModEnd> i2_max_frm_num = ih264d_get_max_frm_num <S2SV_ModStart> i2_max_frm_num ; i2_max_frm_num = ih264d_get_max_frm_num ( ps_bitstrm ) ; <S2SV_ModEnd> i2_max_frm_num = ih264d_get_max_frm",0
326,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; <S2SV_ModEnd> VP9_COMP * const <S2SV_ModStart> * const params = ( vpx_svc_parameters_t * ) <S2SV_ModEnd> va_arg ( args <S2SV_ModStart> * ) ; <S2SV_ModEnd> if ( params <S2SV_ModStart> NULL ) return VPX_CODEC_INVALID_PARAM ; <S2SV_ModEnd> cpi -> svc <S2SV_ModStart>. spatial_layer_id = params -> spatial_layer ; cpi -> svc. temporal_layer_id = params -> temporal_layer ; cpi -> lst_fb_idx = params -> lst_fb_idx ; cpi -> gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_",0
327,"<S2SV_ModStart> out ) { <S2SV_ModEnd> copyFunc cf ; <S2SV_ModStart> input_compression, input_photometric ; CopyField ( TIFFTAG_BITSPERSAMPLE, bitspersample ) ; CopyField ( TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; if ( compression == ( uint16 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> copy/convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } if ( input_photometric == PHOTOMETRIC_YCBCR ) { uint16 subsamplinghor, subsamplingver ; TIFFGetFieldDefaulted ( in, TIFFTAG_YCBCRSUBSAMPLING, & subsamplinghor, & subsamplingver ) ; TIFFSetField ( out, TIFFTAG_YCBCRSUBSAMPLING, & subsamplinghor, & subsamplingver ) ; if ( subsamplinghor!= 1 || subsamplingver!= 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> copy/convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"", TIFFFileName ( in ) )",0
328,"<S2SV_ModStart> { # if defined ( HAVE_LSTAT ) if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return",0
329,"<S2SV_ModStart> int link_count ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if ( ie -> indirectICB. extLength && udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ) { if ( ident == TAG_IDENT_FE || ident == TAG_IDENT_EFE ) { memcpy ( & iinfo -> i_location, & loc, sizeof ( struct <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
330,<S2SV_ModStart> -> tx_size ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; uint32_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; uint32_t * const int_4x4_y = & lfm -> int_4x4_y [ tx_,0
331,"<S2SV_ModStart> mq_ops ) { list_for_each_entry_safe ( rq, n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; BUG_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error ) ; } if ( q -> mq_ops ) spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ; if ( q -> mq_ops ) spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ; flush_rq -> tag = - 1 ; } running = & fq -> flush_queue [ fq -> flush_running_idx ] ; BUG_ON (! q -> mq_ops ) ; elv_completed_request ( q, flush_rq ) ; if (! q -> mq_ops ) spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ;",0
332,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1 ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1,0
333,<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) {,0
334,"<S2SV_ModStart> ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> \' <S2SV_blank> \'"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> \' <S2SV_blank> \'"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> Session",0
335,"<S2SV_ModStart> == NULL || ( uint32_t ) pReplyData > ( uint32_t ) sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || ( uint32_t ) pReplyData > ( uint32_t ) sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || ( uint32_t ) pReplyData > ( uint32_t ) sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || ( uint32_t ) pReplyData > ( uint32_t ) sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; }",0
336,"<S2SV_ModStart> ) ) { if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image -> filename ) ; <S2SV_ModStart> ) ) { if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image -> filename ) ; if ( length > GetBlobSize (",0
337,"<S2SV_ModStart> case IPV6_PKTINFO : if ( np -> rxopt. bits. rxinfo ) { struct in6_pktinfo dst_info ; dst_info = rcu_dereference_protected ( np -> rxopt. bits. rxinfo, sock_owned_by_user ( sk ) ) ; dst_info = rcu_dereference_protected ( np -> rxopt. bits. srcinfo, sock_owned_by_user ( sk ) ) ; } else { dst_info = rcu_dereference_protected ( np -> rxopt. bits. srcinfo, sock_owned_by_user ( sk ) ) ; }",0
338,"<S2SV_ModStart> * ) calloc ( num_versions + 1, sizeof ( struct berval ), & err ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; } ret [ j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_contents [ 0 ] = k5_alloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ] -> key_data_length [ 0 ] == 0 ) { err = ENOMEM ; goto cleanup ; } ret [ j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_contents [ 0 ] = k5_alloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; } ret [ j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_",0
339,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""TCOS3:%d <S2SV_blank> PKCS1:%d\\n"", tcos3,!! ( data -> pad_flags & SC_ALGORITHM_RSA_PAD_PKCS1 ) ) ; LOG_TEST_RET ( card -> ctx, r, ""TCOS3:%d <S2SV_blank> PKCS1:%d\\n"", tcos3,!! ( data -> pad_flags & SC_ALGORITHM_RSA_PAD_PKCS1 ) ) ; } else { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""TCOS3:%d <S2SV_blank> PKCS1:%d\\n"", tcos3,!! ( data -> pad_flags & SC_ALGORITHM_RSA_PAD_PKCS1 ) ) ; r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""T",0
340,"<S2SV_ModStart> uint8 result ; uint32 <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> ; STREAM s <S2SV_ModEnd> ; RD_BOOL is_fastpath <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"" ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"" ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"" ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> connect <S2SV_blank>",0
341,"<S2SV_ModStart> ( ret ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> macvlan <S2SV_blank> count: <S2SV_blank> %d\\n"", vsi -> num_queue_pairs ) ; return ret ; } <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> ( ret ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> macvlan <S2SV_blank> count: <S2SV_blank> %d\\n"", vsi -> num_queue_pairs ) ; return ret ; } <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> ( ret ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> macvlan <S2SV_blank> count: <S2SV_blank> %d\\n"", num_qps ) ; return ret ; } <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> ( ret ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> macvlan <S2SV_blank> count: <S2SV_blank> %d\\n"", vsi -> num_queue_pairs ) ; return ret ; } <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> ch ) ; if (! ch ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> macvlan <S2SV_blank> count: <S2SV_blank> %d\\n"", num_qps ) ; return",0
342,<S2SV_ModStart> ; if ( extent. first == 0 && extent. lower_first == 0 && extent. count == 0 ) { ret = - EINVAL ; goto out ; } if ( extent. count == 0 && extent. first == 0 && extent. lower_first == 0 && extent. count == 0 ) { ret = - EINVAL ; goto out ; } if ( extent. count == 0 && extent. first == 0 && extent. lower_first == 0 && extent. count == 0 && extent. count == 0 && extent. count == 0 && extent. count == 0 && extent. lower_first == 0 && extent. count == 0 ) { ret = - EINVAL ; goto out ; } if ( extent. count == 0 && extent. first == 0 && extent. lower_first == 0 && extent. count == 0 ) { ret = - EINVAL ; goto out ; } if ( extent. count == 0 && extent. first == 0 && extent. lower_first == 0 && extent. count == 0 && extent. count == 0 && extent. count == 0 && extent. lower_first == 0 && extent. count == 0 ) { ret = - EINVAL ; goto out ; },0
343,"<S2SV_ModStart> } } } eprintf ( ""action: <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null>"", action ) ; eprintf ( ""action: <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null>"", action ) ; eprintf ( ""action: <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null>",0
344,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
345,"<S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col, <S2SV_ModEnd> pc -> filter_level <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_col, <S2SV_ModEnd> pc -> filter_level <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col, <S2SV_ModEnd> pc -> filter_level <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_col, <S2SV_ModEnd> pc -> filter_level <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_col, <S2SV_ModEnd> pc -> filter_level <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_col, <S2SV_ModEnd> pc -> filter_level <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col, <S2SV_ModEnd> pc -> filter_level <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_col, <S2SV_ModEnd> pc -> filter_level",0
346,<S2SV_ModStart> NULL ) ; } quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
347,"<S2SV_ModStart> len ) { <S2SV_ModEnd> return decode_unicode_with_escapes ( <S2SV_ModStart> ) { PyObject <S2SV_ModEnd> * u ; <S2SV_ModStart> char * p ; Py_ssize_t i ; PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = decode_utf8 ( c, & s, end ) ; if ( kind == PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; p += 10 ; } assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF (",0
348,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> ; int setimes <S2SV_ModEnd>, targisdir, <S2SV_ModStart>, wrerrno = 0 <S2SV_ModEnd> ; char ch <S2SV_ModStart> ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> find <S2SV_blank> a <S2SV_blank> directory"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> find <S2SV_blank> a <S2SV_blank> file"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> find <S2SV_blank> a <S2SV_blank> file"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> find <S2SV_blank> a <S2SV_blank> directory"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> find <S2SV_blank> a <S2SV_blank> file"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> find <S2SV_blank> a <S2SV_blank> file"", __func__ ) ; if ( stat ( targ, & stb )!=",0
349,"<S2SV_ModStart> -> buffer ; if ( ctx -> flags & GHASH_FLAG_NO_FLUSH ) { ghash_flush ( ctx, dctx ) ; memcpy ( dst, buf, GHASH_BLOCK_SIZE ) ; return - EINVAL ; } if ( ctx -> flags & GHASH_FLAG_NO_BLOCK ) { ghash_flush ( ctx, dctx ) ; memcpy ( dst, buf, GHASH_BLOCK_SIZE ) ; return - EINVAL ; } if ( ctx -> flags & GHASH_FLAG_NO_BLOCK ) { ghash_flush ( ctx, dctx ) ; memcpy ( dst, buf, GHASH_BLOCK_SIZE ) ; return - EINVAL ; } if (! ctx -> flags & GHASH_FLAG_NO_BLOCK ) { ghash_flush ( ctx, dctx ) ; memcpy ( dst, buf, GHASH_BLOCK_SIZE ) ; return - EINVAL ; } if (! ctx -> flags & GHASH_FLAG_NO_BLOCK ) { ghash_flush ( ctx, dctx ) ; memcpy ( dst, buf, GHASH_BLOCK_SIZE ) ; return - EIN",0
350,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
351,<S2SV_ModStart> ; allocation_fail : if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) height += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( width & 0xf )!=,0
352,<S2SV_ModStart> return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,0
353,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> ps_dec -> u1_num_mbsNby2 <S2SV_ModStart> ps_dec -> u1_num_mbsNby2 ++ ; <S2SV_ModEnd> ps_dec -> u1_num_mbsNby2 <S2SV_ModStart> ps_dec -> u1_num_mbsNby2 ++ ; <S2SV_ModEnd> ps_dec -> u1_num_mbsNby2 <S2SV_ModStart> ps_dec -> u1_num_mbsNby2 ++ ; <S2SV_ModEnd> ps_dec -> u1_num_mbsNby2 <S2SV_ModStart> ps_dec -> u1_num_mbsNby2 ++ ; <S2SV_ModEnd> ps_dec -> u1_num_mbsNby2 <S2SV_ModStart> ps_dec -> u1_num_mbsNby2 ++ ; <S2SV_ModEnd> ps_dec -> u1_num_mbsNby2 <S2SV_ModStart> ps_dec -> u1_num_mbsNby2 ++ ; <S2SV_ModEnd> ps_dec -> u1_num_mbsNby2 <S2SV_ModStart> ps_dec -> u1_num_mbsNby,0
354,"<S2SV_ModStart> 1 ] ) { vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 2 ] ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 3 ] ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 4 ] ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 5 ] ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 6 ] ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 7 ] ) ; vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; vterm_allocator_free ( screen -> vt, screen ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
355,<S2SV_ModStart> { err = <S2SV_ModEnd> nanosleep ( & <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
356,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns, image -> rows ) ; if ( exception!= ( ExceptionInfo * ) NULL ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns, image -> rows ) ; if ( exception!= ( ExceptionInfo * ) NULL ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( exception!= ( CorruptImageError ) ThrowReaderException ( CorruptImageError, """,0
357,"<S2SV_ModStart> value ) { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { <S2SV_ModStart> ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) ; } else { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; } else { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host",0
358,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
359,"<S2SV_ModStart> ) ) ; if ( clean ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; free ( pool -> swork. job_id ) ; pool -> swork. job_id = job_id ; snprintf ( pool -> prev_hash, 65, ""%s"", prev_hash ) ; snprintf ( pool -> bbversion, 9, ""%s"", bbversion ) ; snprintf ( pool -> nbit, 9, ""%s"", nbit ) ; snprintf ( pool -> ntime, 9, ""%s"", ntime ) ; pool -> swork. clean = clean ;",0
360,"<S2SV_ModStart> { ssize_t ret ; if ( transmitted_length + ret > length ) { LOG_ERROR ( ""In <S2SV_blank> %s, <S2SV_blank> error <S2SV_blank> writing <S2SV_blank> to <S2SV_blank> the <S2SV_blank> serial <S2SV_blank> port <S2SV_blank> with <S2SV_blank> fd <S2SV_blank> %d: <S2SV_blank> %s"", __func__, fd, strerror ( errno ) ) ; return transmitted_length ; }",0
361,<S2SV_ModStart> cfq_exit ( ioc <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
362,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> ) ; PyObject <S2SV_ModEnd> * dict = <S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart>, & PyId___dict__ ) ; if ( dict == NULL ) { PyErr_Clear ( ) ; return NULL ; } <S2SV_ModEnd> if ( dict <S2SV_ModStart> { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; <S2SV_ModEnd> return res ;",0
363,"<S2SV_ModStart> USB_DT_OTG, ( struct usb_otg_descriptor * * ) & desc, sizeof ( * desc )",0
364,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> arg ) ; <S2SV_ModEnd> case PERF_EVENT_IOC_PERIOD : <S2SV_ModStart> ) ; case PERF_EVENT_IOC_ID : { u64 id = primary_event_id ( event ) ; if ( copy_to_user ( & id, ( void __user * ) arg, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_SET_OUTPUT : { int ret ; if ( arg!= - 1 ) { ret = perf_fget_light ( arg, & output ) ; if ( ret ) return ret ; output_event = output. file -> private_data ; ret = perf_event_set_output ( event, output_event ) ; } else { ret = perf_event_set_output ( event, NULL ) ; } return ret ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
365,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> y_mode ] ) ; <S2SV_ModEnd> return uv_mode ;",0
366,"<S2SV_ModStart> ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || <S2SV_ModStart> ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4,",0
367,<S2SV_ModStart> ) ; OPENSSL_cleanse ( key ) ; OPENSSL_cleanse ( iv ) ;,0
368,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
369,<S2SV_ModStart> case NGHTTP2_IB_READ_CLIENT_MAGIC : if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } if ( iframe -> payloadleft > NGHTTP2_CLIENT_MAGIC_LEN - NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> state = NGHTTP2_IB_READ_CLIENT_MAGIC ; if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN - NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> state = NGHTTP2_IB_READ_CLIENT_MAGIC ; if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN - iframe -> payloadleft ) { return NGHTTP2_ERR_BAD,0
370,<S2SV_ModStart> += dif ; if ( opt2 -> hopopt ) * ( ( char * * ) & opt2 -> hopopt ) += dif ; if ( opt2 -> dst0opt ) * ( ( char * * ) & opt2 -> dst1opt ) += dif ; if ( opt2 -> dst0opt ) * ( ( char * * ) & opt2 -> dst0opt ) += dif ; if ( opt2 -> dst1opt ) * ( ( char * * ) & opt2 -> dst1opt ) += dif ; if ( opt2 -> srcrt ) * ( ( char * * ) & opt2 -> srcrt ) += dif ;,0
371,"<S2SV_ModStart> x86_pmu. num_counters_fixed = min_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; x86_pmu. num_counters_fixed = max_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) { u64 capabilities ; rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. capabilities = capabilities ; } else if ( version > 1 ) { u64 capabilities ; rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. capabilities = capabilities ; } else if ( version > 1 ) { u64 capabilities ; rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. capabilities = capabilities ; } <S2SV_ModEnd> rdmsrl ( MSR_IA32_PERF_CAPABILITIES",0
372,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pack_mb_tokens ( vpx_writer <S2SV_ModStart> * w, <S2SV_ModEnd> TOKENEXTRA * * <S2SV_ModStart> TOKENEXTRA * * tp <S2SV_ModEnd>, const TOKENEXTRA <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> t ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) & 1 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p",0
373,"<S2SV_ModStart> ; struct vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> } ; struct vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_clear_system_state ( ) ; first_part_size = write_compressed_header ( cpi, & wb ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
374,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
375,"<S2SV_ModStart> { struct ikev2_id id <S2SV_ModEnd> ; int id_len <S2SV_ModStart> * typedata ; ND_TCHECK ( * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; id_len = ntohs ( id. h. len ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } idtype_len = idtype_len - sizeof ( struct ikev2_id ) ; ND_",0
376,<S2SV_ModStart> ) ) { if ( atoi ( jas_tvparser_getval ( tvp ) ) == - 1 ) { if ( atoi ( jas_tvparser_getval ( tvp ) ) == - 1 ) { if ( atoi ( jas_tvparser_getval ( tvp ) ) == - 1 ) { if ( atoi ( jas_tvparser_getval ( tvp ) ) == - 1 ) { if ( atoi ( jas_tvparser_getval ( tvp ) ) == - 1 ) { if ( atoi ( jas_tvparser_getval ( tvp ) == - 1 ) ) { if ( atoi ( jas_tvparser_getval ( tvp ) == - 1 ) ) { if ( atoi ( jas_tvparser_getval ( tvp ) == - 1 ) ) { if ( atoi ( jas_tvparser_getval ( tvp ) == - 1 ) ) { if ( atoi ( jas_tvparser_getval ( tvp ) == - 1 ) ) { if ( atoi ( jas_tvparser_getval ( tvp ) == - 1,0
377,"<S2SV_ModStart> urb ) ; if ( ret!= - EINVAL ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; <S2SV_ModStart> urb ) ; if ( ret!= - EINVAL ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_urb ( urb ) ; if ( ret!= - EINVAL ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank>",0
378,"<S2SV_ModStart>, yt0_0, yt1_0, xt2_0, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l1_1, x_l1_1, x_l1_0, x_l1_1, x_l1_1, x_l1_0, x_",0
379,"<S2SV_ModStart> mntent ) { int ret ; ret = mount_entry_on_generic_nolock ( mntent, mntent -> mnt_dir ) ; if ( ret < 0 ) return ret ; ret = mount_entry_on_generic_nolock ( mntent, mntent -> mnt_dir ) ; if ( ret < 0 ) return ret ; ret = mount_entry_on_generic_nolock ( mntent, mnt_dir ) ; if ( ret < 0 ) return ret ; ret = mount_entry_on_generic_nolock ( mntent, mntent -> mnt_dir ) ; if ( ret < 0 ) return ret ; ret = mount_entry_on_generic_nolock ( mntent, mntent -> mnt_dir ) ; if ( ret < 0 ) return ret ; ret = mount_entry_on_generic_nolock ( mntent, mnt_dir ) ; if ( ret < 0 ) return ret ; ret = mount_entry_on_generic_nolock ( mntent, mnt_dir ) ; if ( ret < 0 ) return ret",0
380,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
381,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; rb_hash_aset ( env, server_username_val, req_server_username ( req ) ) ; rb_hash_aset ( env, server_password_val, req_server_password ( req ) ) ; rb_hash_aset ( env, server_password_val, req_server_password ( req ) ) ; rb_hash_aset ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_password_val, req_server_password ( req ) ) ; rb_hash_aset ( env, server_username_val, req_server_username ( req ) ) ; rb_hash_aset ( env, server_password_val, req_server_password ( req ) ) ; rb_hash_aset ( env, server_password_val, req_server_password ( req ) ) ; rb_hash_aset ( env, server_",0
382,<S2SV_ModStart> endif # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= LIMIT_PLACEHOLDER_VERSION # if MYSQL_VERSION_ID < CALL_PLACEHOLDER_VERSION # if MYSQL_VERSION_ID < LIMIT_PLACEHOLDER_VERSION # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= SERVER_PRE,0
383,"<S2SV_ModStart> int need = 0 <S2SV_ModEnd> ; char * <S2SV_ModStart> screen, { } ) ; if ( need < 0 ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; scp -> data_limit = ( size_t ) ( need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; } if ( need < 0 ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) ( need + 1 ) ) ; scp -> data_limit = ( size_t ) ( need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp ->",0
384,"<S2SV_ModStart> char * str <S2SV_ModEnd>, size_t len <S2SV_ModStart> = 0.0000001 ; <S2SV_ModEnd> const JsVarFloat stopAtError <S2SV_ModStart> val ) ) { if ( val < 0 ) strcpy ( str, ""-NaN"", len ) ; else strcpy ( str, ""Infinity"", len ) ; else if ( <S2SV_ModEnd> isfinite ( val <S2SV_ModStart> ) ) { if ( val < 0 ) strcpy ( str, ""-Infinity"", len ) ; else strcpy ( str, ""Infinity"", len ) ; else strcpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) ( val + stopAtError ) ) ) { val = ( JsVarFloat ) ( 1 + ( JsVarInt ) ( val + stopAtError ) ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) ( val + stop",0
385,"<S2SV_ModStart> 5 ) ; <S2SV_ModEnd> ASSERT ( result <S2SV_ModStart> ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; if ( size < 6 ) ASSERT ( result!= buf ) ; ASSERT ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) == 0 ) ; if ( result!= buf ) free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; size = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) == 0 )",0
386,"<S2SV_ModStart> ) ; if ( unlikely ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; } <S2SV_ModEnd> if ( (",0
387,"<S2SV_ModStart> { strncat ( str <S2SV_ModEnd>, ""ID:"", <S2SV_ModStart> ) ; strncat ( str <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> ) ; strncat ( str <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> ), len ) ; strncat ( str, ""\'"", len ) ; } else if ( lex -> tk == LEX_STR ) { strncat ( str <S2SV_ModEnd>, ""String:\'"", <S2SV_ModStart> ) ; strncat ( str <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> ), len ) ; strncat ( str <S2SV_ModEnd>, ""\'"",",0
388,,1
389,"<S2SV_ModStart> * output ; <S2SV_ModEnd> if ( ExpandFilenames <S2SV_ModStart> ( argc, & argv, exception ) == MagickFalse ) { ThrowFileException ( exception, ResourceLimitError, ""MemoryAllocationFailed"", GetExceptionMessage ( errno ) ) ; return ( MagickFalse ) ; } for ( i = 2 ; i < ( ssize_t ) ( argc - 1 ) ; i ++ ) { # if 0 fprintf ( stderr, ""DEBUG: <S2SV_blank> Concatenate <S2SV_blank> Image: <S2SV_blank> \\""%s\\""\\n"", argv [ i ] ) ; # endif input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { fprintf ( stderr, ""DEBUG: <S2SV_blank> Concatenate <S2SV_blank> Image: <S2SV_blank> \\""%s\\""\\n"", argv [ i ] ) ; # endif input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( c = fgetc ( input ) ; c!= EOF ; c = fgetc ( input ) )",0
390,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
391,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> setpwnam ( struct <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> ( fp = mkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> atomic_dir ) ) == NULL ) return - 1 ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( lckpwdf ( ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( lckpwdf ( ) < 0 ) goto fail ; pwf = fopen ( PASSWD_FILE, ""r"" ) ; if (! found && linebuf [ namelen ] == ':' &&! strncmp ( linebuf,",0
392,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned <S2SV_ModStart> int right ; if ( tree [ i ] <= 0 ) left = num_events [ - tree [ i ] ] ; else left = convert_distribution ( tree [ i ], tree, branch_ct, num_events ) ; if ( tree [ i + 1 ] <= 0 ) left = num_events [ - tree [ i + 1 ] ] ; else right = convert_distribution ( tree [ i + 1 ], tree, branch_ct, num_events ) ; if ( tree [ i + 1 ] <= 0 ) left = num_events [ - tree [ i + 1 ] ] ; else left = convert_distribution ( tree [ i + 1 ], tree, branch_ct, num_events ) ; if ( tree [ i + 1 ] <= 0 ) left = num_events [ - tree [ i + 1 ] ] ; else right = convert_distribution ( tree [ i + 1 ], tree, branch_ct, num_events ) ; if ( tree [ i + 1 ] <= 0 ) left = num_events [ - tree [ i + 1 ] ] ; else left = convert_distribution ( tree [ i + 1 ],",0
393,"<S2SV_ModStart> s2 ) { int ret ; ret = memcmp ( s1, s2, strlen ( s2 ) + 1U ) ; if ( ret!= 0 ) return ret <S2SV_ModEnd> ; } <S2SV_null>",0
394,"<S2SV_ModStart> TRUE ; } const gchar * to = xmpp_stanza_get_to ( message ) ; const gchar * from = xmpp_stanza_get_from ( message ) ; const gchar * from = xmpp_stanza_get_from ( message ) ; const gchar * to = xmpp_stanza_get_to ( message ) ; const gchar * from = xmpp_stanza_get_from ( message ) ; if (! to ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> stanza <S2SV_blank> name <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } Jid * jid_from = jid_create ( from ) ; Jid * jid_to = jid_create ( to ) ; if (! jid_from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> stanza <S2SV_blank> name <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } if ( g_strcmp0 ( name, ""received"" )!= 0 ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> stanza <S2SV_blank> name <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } if ( g_strcmp0 ( name, ""sent"" )",0
395,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-help"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-sockets"" ) ) { socket_options_print ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options ( )",0
396,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
397,<S2SV_ModStart> ) ) { if ( st -> st_v1_new_iv. len > st -> st_v1_new_iv. len ) { st -> st_v1_new_iv. len = st -> st_v1_new_iv. len ; st -> st_v1_new_iv. len = st -> st_v1_new_iv. len ; } else if ( st -> st_v1_new_iv. len > st -> st_v1_new_iv. len ) { if ( st -> st_v1_new_iv. len > st -> st_v1_new_iv. len ) { st -> st_v1_new_iv. len = st -> st_v1_new_iv. len ; st -> st_v1_new_iv. len = st -> st_v1_new_iv. len ; } else if ( st -> st_v1_new_iv. len > st -> st_v1_new_iv. len ) { st -> st_v1_new_iv. len = st -> st_v1_new_iv. len ;,0
398,<S2SV_ModStart> u4_num_Bytes ) { if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else { if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else { if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s,0
399,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_string ( cJSON <S2SV_ModStart> item ) { return <S2SV_ModEnd> print_string_ptr ( item <S2SV_ModStart> valuestring ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
400,"<S2SV_ModStart> enc. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img, <S2SV_ModStart> enc. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img,",0
401,"<S2SV_ModStart> ; char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> buf ) ; if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; } else if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; } else if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; } else if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; } else if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ;",0
402,"<S2SV_ModStart> cols0 ) ; } else if ( arg1 == 2 ) { win_set_geom ( 0, 0, 0, 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 3 ) { win_set_geom ( 0, 0, 0, 0 ) ; term. rows0 = rows0 ; term. cols0 = rows0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; } else if ( arg1 == 1 ) { win_set_geom ( 0, 0, 0, 0 ) ; term. rows0 = rows0 ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_set_geom ( 0, 0, 0, 0 ) ; term. rows0 = rows0 ; term. rows0 = rows0 ; term. cols0 = rows0 ; } else if ( arg1 == 3 ) { win_set_geom ( 0, 0, 0, 0 ) ; term. rows0 = rows0 ; term. rows0 = rows0 ; term. cols0 = rows0 ; }",0
403,<S2SV_ModStart> ++ ) s [ i ] = 0 ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ;,0
404,"<S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX = i -> parent -> width - i -> width ; # endif if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; #",0
405,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 16 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 32 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
406,"<S2SV_ModStart> if ( ent == NULL ) { st = EINVAL ; goto cleanup ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> cleanup ; } <S2SV_ModEnd> ldap_msgfree ( result <S2SV_ModStart> ) ; cleanup : if ( st!= 0 ) { krb5_ldap_put_handle_to_pool ( ldap_context, ldap_server_handle ) ; return st ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
407,"<S2SV_ModStart> ) ) { if ( ps_codec -> i4_pps_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; else ps_pps -> i1_pps_id = CLIP3 ( ps_pps -> i1_pps_id, 0, MAX_PPS_CNT - 1 ) ; ps_sps -> i1_sps_id = CLIP3 ( ps_sps -> i1_sps_id, 0, MAX_SPS_CNT - 2 ) ; if ( ps_codec -> i4_pps_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; ps_pps -> i1_pps_id = CLIP3 ( ps_pps -> i1_pps_id, 0, MAX_SPS_CNT - 1 ) ; ps_sps -> i1_sps_id = CLIP3 ( ps_s -> i1_sps_id, 0, MAX_SPS_CNT - 2 ) ; if ( ps_codec -> i4_sps_done ) return IHEVCD_INVALID_",0
408,<S2SV_ModStart> ) ) { switch ( c ) { case'<S2SV_blank>': break ; case 'e' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'E' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'T' : trunc_8to4 = SF_TRUE ; break ; case 'T' : trunc_8to4 = SF_FALSE ; break ; case 'S' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'S' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'S' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'S' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'S' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'S' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'S' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'S' : psf -> rwf_,0
409,"<S2SV_ModStart> ; if ( d -> msg_len > ( CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) ) return - EINVAL ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGOFS + i ] = d -> msg [ i ] ; if ( ++ i < d -> msg_len ) { printk ( KERN_INFO ""cx24116: <S2SV_blank> %s("", __func__ ) ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGOFS + i ] = d -> msg [ i ] ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGOFS + i ] = d -> msg [ i ] ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DI",0
410,"<S2SV_ModStart> ) break ; bytes_per_line = sun_info. width * sun_info. height ; <S2SV_ModStart> ) break ; if ( bytes_per_line > sun_info. length ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( bytes_per_line > sun_info. length ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( bytes_per_line > sun_info. length ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( bytes_per_line > sun_info. length ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( bytes_per_line > sun_info. length ) ThrowReaderException ( CorruptImageError, ""InsufficientImageData",0
411,"<S2SV_ModStart> } pid_t child ; int rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else <S2SV_ModEnd> { fs_logger2 ( <S2SV_ModStart> ""clone"", dest, getuid ( ), getgid ( ), 0600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest, getuid ( ), getgid ( ), 0600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest, getuid ( ), getgid ( ), 0600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart>, dest, getuid ( ), 0600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest, getuid",0
412,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> : return vpx_mse16x8 <S2SV_ModEnd> ; default : <S2SV_ModStart> : return vpx_mse8x8 <S2SV_ModEnd> ; } <S2SV_null>,0
413,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
414,"<S2SV_ModStart> ; } } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, padata, request, reply, encrypting_key, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REP ) { return return_pkinit_rep ( context, padata, request, reply, encrypting_key, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, padata, request, reply, encrypting_key, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, padata, request, reply, encrypting_key, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, padata, request, reply, encrypting_key, send_pa ) ; }",0
415,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
416,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_left, frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n",0
417,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void * zcalloc,0
418,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> ssize_t count ;,0
419,<S2SV_ModStart> == sip && rxent -> callnum == EXTRACT_32BITS ( & rxh -> callNumber ) && rxent -> server. s_addr == clip && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> dport == sport ) { rx_cache_hint = i ; * opcode = rxent -> opcode ; return ( 1 ) ; } if ( rxent -> callnum == EXTRACT_32BITS ( & rxh -> callNumber ) && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> client. s_addr == clip && rxent -> server. s_addr == sip && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> dport == EXTRACT_32BITS ( & rxh -> dport ),0
420,"<S2SV_ModStart> ; memset ( bss_desc -> ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len )",0
421,"<S2SV_ModStart> ) ) { if ( sfe -> valuelen!= sfe -> namelen ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ], sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ] ) ; if ( error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, s",0
422,"<S2SV_ModStart> = data ; struct l2cap_conf_rfc rfc = {. mode = L2CAP_MODE_BASIC,. txwin_size = L2CAP_DEFAULT_TX_WINDOW ;. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ;",0
423,"<S2SV_ModStart> { do { if ( r < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = recv ( sock_fd, buf, r, MSG_WAITALL ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, ret ) ; return - 1 ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
424,<S2SV_ModStart> u4_length ) { if ( ( ps_dec -> u1_nal_unit_type > IDR_SLICE_NAL ) || ( ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL ) && ( ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL ) && ( ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL ) && ( ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL ) && ( ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL ) && ( ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL ) && ( ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL ) && ( ( ps_dec -> u1_nal_ref_idc > IDR_SLICE,0
425,"<S2SV_ModStart> tok ) ; if ( pair == NULL ) { cprintf ( stderr, "" <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
426,"<S2SV_ModStart> = uid ; <S2SV_ModEnd> spin_lock_irq ( & <S2SV_ModStart> new ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! atomic_add_unless ( & ucounts -> count, 1, INT_MAX ) ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ;",0
427,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd>, int open_flags <S2SV_ModStart> = 0 ; fmode = fmode <S2SV_ModEnd> & ( FMODE_READ <S2SV_ModStart> FMODE_WRITE ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) ) { __update_open_stateid ( state, open_stateid, NULL, open_flags ) ; ret = 1 ; } else if ( fmode & ( FMODE_READ | FMODE_WRITE ) ) { __update_open_stateid ( state, open_stateid, NULL, open_flags ) ; ret = 1 ; } rcu_read_unlock ( ) ; if (! ret && open_stateid!= NULL ) { if ( fmode & ( FMODE_READ | FMODE_WRITE ) ) { __update_open_stateid ( state, open_stateid, NULL, open_flags ) ; ret = 1 ; } else if ( fmode & ( FMODE_READ | FMODE_WRITE ) ) { __update_open_stateid ( state, open_stateid, NULL, open_flags ) ; ret = 1 ; } <S2SV_ModEnd> return ret ;",0
428,"<S2SV_ModStart> ""btif_hl_select_close_connected"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ), 0 )",0
429,"<S2SV_ModStart> * xd, int64_t * out_rate_sum, int64_t * out_dist_sum, int64_t * out_dist_sum, int64_t * out_dist_sum, int64_t * out_sse ) { int i ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; int64_t sse ; int64_t dist_sum = 0 ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblock_plane * const p = & x -> plane [ i ] ; struct macroblockd_plane * const pd = & xd -> plane [ i ] ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse",0
430,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
431,"<S2SV_ModStart>!= '\\0' ) { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; <S2SV_ModStart> } if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; <S2SV_ModStart> + 1 ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; <S2SV_ModStart> } if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; strcpy ( * ret_username, username ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BU",0
432,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { return vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> -> tree_probs ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
433,"<S2SV_ModStart> { memset ( dst_ptr1, src_ptr1 [ 0 ], extend_left ) ; memset ( dst_ptr2, src_ptr2 [ 0 ], extend_right ) ; src_ptr1 += src_stride ; src_ptr2 += src_stride ; dst_ptr1 += src_stride ; dst_ptr2 += src_stride ; } src_ptr1 = src + src_stride * ( height - 1 ) - extend_left ; src_ptr2 = src + src_stride * ( height - 1 ) - extend_left ; for ( i = 0 ; i < extend_top ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_bottom ; ++ i ) { memcpy ( dst_ptr2, src_ptr2, linesize ) ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_right ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ;",0
434,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
435,"<S2SV_ModStart> ++ ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) { ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) PTR_DIFF ( maxbuf, buf ) ) ) ; smb_print_data ( ndo, buf, len ) ; return ( buf + len ) ; } buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) { ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; smb_print_data ( ndo, buf, len ) ; return ( NULL ) ; } ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) PTR_DIFF ( maxbuf, buf ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; smb_print",0
436,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE <S2SV_ModEnd> ) ; return",0
437,<S2SV_ModStart> NULL ) ; rb_ary_push ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_,0
438,<S2SV_ModStart> ; settings. <S2SV_ModEnd> udpport = 11211 <S2SV_ModStart>. udpport = 11211 <S2SV_ModEnd> ; settings.,0
439,"<S2SV_ModStart> ; # endif if ( domains_to_finalize ) { mono_finalizer_lock ( ) ; domains_to_finalize = g_slist_remove ( domains_to_finalize, req ) ; domains_to_finalize = g_slist_remove ( domains_to_finalize, req ) ; } else { mono_finalizer_unlock ( ) ; finalize_domain_objects ( req ) ; }",0
440,"<S2SV_ModStart> x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_a = * x0 ++ ; x_b = * x0 ++ ; x_a = * x0 ++ ; x_b = * x0 ++ ; x_c = * x0 ++ ; x_d = * x0 ++ ; x_e = * x0 ++ ; x_e = * x0 ++ ; x_f = * x0 ++ ; x_a = x_0 + x_2 ; x_b = x_1 + x_3 ;",0
441,"<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; } clips = kmalloc ( num_clips * sizeof ( * clips ), GFP_KERNEL ) ; if (! clips ) { ret = - ENOMEM ; goto out_err1 ; } ret = copy_from_user ( clips, clips_ptr, num_clips * sizeof ( * clips ), num_clips * sizeof ( * clips ) ) ; if ( ret ) { ret = - EFAULT ; goto out_err2 ; } ret = copy_from_user ( clips, clips_ptr, num_clips * sizeof ( * clips ), num_clips * sizeof ( * clips ) ) ; if ( ret ) { ret = - EFAULT ; goto out_err2 ; }",0
442,<S2SV_ModStart> ; if ( pmd_trans_huge_or_clear_bad ( pmd ) <S2SV_ModEnd> ) continue ;,0
443,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
444,"<S2SV_ModStart> int width, height, target_width, target_height ; if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 4 ], & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 4 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 5 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters",0
445,"<S2SV_ModStart> num_fields ) { Py_IDENTIFIER ( _attributes ) ; PyObject * s, * l ; int result ; if ( num_fields < 0 ) { return 0 ; } Py_DECREF ( l ) ; l = PyTuple_New ( num_fields ) ; if (! l ) return 0 ; for ( i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } PyTuple_SET_ITEM ( l, i, s ) ; } result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; Py_DECREF ( l ) ; l = PyTuple_New ( num_fields ) ; if (! l ) return 0 ; for ( i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } result = _PyObject_SetAttrId ( ( PyObject * ) type, & Py",0
446,"<S2SV_ModStart> ; struct vpx_codec_alg_priv <S2SV_ModEnd> * priv ; <S2SV_ModStart> vpx_codec_alg_priv ) ) ; if (! ctx -> config ) { return VPX_CODEC_MEM_ERROR ; } ctx -> priv = calloc ( 1, sizeof ( struct vpx_codec_alg_priv ) ) ; ctx -> priv -> sz = sizeof ( * ctx -> priv ) ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> init_flags = ctx -> init_flags ; } cfg = & ctx -> config ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. cfg ; i ++ ) { priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg. pkt_list = & priv -> pkt_list. head ; priv -> vp8_cfg. pkt_list = & priv -> pkt_list. head ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h",0
447,<S2SV_ModStart> } if ( cnt_c > BOT ) { pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_c + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt,0
448,"<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ctx -> fragments. ptrs, 0, sizeof ( ctx -> fragments. ptrs ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ctx -> fragments. sizes, 0, sizeof ( ctx -> fragments. sizes ) ) ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } if (! ctx -> fragments. enabled ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } if (! ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } if (! ctx -> fragments. enabled ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count",0
449,<S2SV_ModStart> = v ; if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ),0
450,<S2SV_ModStart> & <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
451,"<S2SV_ModStart> data ) { uint16_t status ; <S2SV_ModStart> ( interface, ENC28J60_MIREGADR, address >> ENC28J60_MIREGADR_ADDR_SHIFT <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & ENC28J60_MISTAT_BUSY <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
452,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> { char * ptr ; int n = 0 ; ptr = fmt ; while ( * ptr!= '\\0' ) if ( * ptr == '%' ) ptr ++ ; else if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } else if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ;,0
453,"<S2SV_ModStart> ""DefragInOrderSimpleTest"", DefragInOrderSimpleTest ) ; UtRegisterTest ( ""DefragReverseSimpleTest"", DefragReverseSimpleTest ) ; UtRegisterTest ( ""DefragSturgesNovakBsdTest"", DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""DefragSturgesNovakLinuxTest"", DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""DefragSturgesNovakWindowsTest"", DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""DefragSturgesNovakFirstTest"", DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""DefragSturgesNovakLastTest"", DefragSturgesNovakLastTest ) ; UtRegisterTest ( ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragIPv4TooLargeTest"", DefragIPv4TooLargeTest ) ; UtRegisterTest ( ""DefragIPv4NoDataTest"", Def",0
454,"<S2SV_ModStart> ; if (! object_data ) { sc_cardctl_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. length + add_v1_record ) { new_object. data [ 0 ] = COOLKEY_V1_OBJECT ; new_object. length ++ ; } memcpy ( & new_object. data [ add_v1_record ], object_data, object_",0
455,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
456,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
457,"<S2SV_ModStart> NULL ; } if ( p_sys -> p_format -> interlaced ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"",! p_sys -> b_auto_field_coding ) ; schro_encoder_setting_set_double ( p_sys -> p_schro, ""top_field_first"",! p_sys -> b_progressive ) ; } else { if ( p_sys -> p_format -> interlaced ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"",! p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""top_field_first"",! p_sys -> b_progressive ) ; } else { if ( p_sys -> p_format -> interlaced ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"",! p_sys",0
458,"<S2SV_ModStart> ; if (! mp_path_exists ( mf -> names [ 0 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ 0 ] ) ; } else if (! mp_path_exists ( mf -> names [ 0 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ 0 ] ) ; } else if (! mp_path_exists ( mf -> names [ 0 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ 0 ] ) ; } else if (! mp_path_exists ( mf -> names [ 0 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ 0 ] ) ; } else if (! mp_path_exists ( mf -> names [ 0 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ 0 ] ) ; } else if (",0
459,<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> ) ; for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ;,0
460,<S2SV_ModStart> & <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
461,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
462,<S2SV_ModStart> sse ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
463,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; <S2SV_ModEnd> YV12_BUFFER_CONFIG * fb <S2SV_ModStart> YV12_BUFFER_CONFIG * fb <S2SV_ModEnd> ; vp9_get_reference_dec ( <S2SV_ModStart> * fb ; <S2SV_ModEnd> return VPX_CODEC_OK ;",0
464,"<S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
465,"<S2SV_ModStart> ) ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) expr1 = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; else expr1 = ast_for_expr ( c, CHILD ( n, 1 ) ) ; if (! expr1 ) return NULL ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; ch = CHILD ( n, 2 ) ; if ( TYPE ( CHILD ( ch ) == testlist ) expr2 = ast_for_testlist ( c, CHILD ( n, 2 ) ) ; else expr2 = ast_for_expr ( c, CHILD ( n, 1 ) ) ; if (! expr2 ) return NULL ; newoperator = ast_for_augassign ( c, CHILD ( n, 1 ) ) ; if (! newoperator ) return NULL ; newoperator = ast_for_augassign ( c, CHILD ( n, 1 ) ) ; if (! newoperator ) return NULL ; newoperator = ast_for_augassign ( c, CHILD ( n, 1 ) ) ; if (! newoperator ) return NULL ;",0
466,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> YV12_BUFFER_CONFIG * mc_running_avg <S2SV_ModStart> * mc_running_avg_y = mc_running_avg -> y_buffer + y_offset ; int mc_avg_y_stride = mc_running_avg -> y_stride ; unsigned char * running_avg_y = running_avg -> y_buffer + y_offset ; int running_avg_y_stride = running_avg -> y_stride ; int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = mc_running_avg_y [ c ] - sig [ c ] ; int absdiff = abs ( diff ) ; if ( absdiff >= 4 && absdiff <= 7 ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ; } else {",0
467,"<S2SV_ModStart> ) ) { if ( reqPtr -> request. line == NULL ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> request <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; } else { if ( ( reqPtr -> request. line == NULL ) ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; } else { if ( ( reqPtr -> request. line == NULL ) ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; } else { if ( ( reqPtr -> request. line == NULL ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> request <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; } else { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> request <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; } else { if ( ( reqPtr -> request. line == NULL ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; } else { if ( ( reqPtr -> request. line ==",0
468,"<S2SV_ModStart> ; int ret ; if ( xtregs -> cp0 & XTREGS_CP0_BITSP ) { ret |= __copy_from_user ( & xtregs -> cp0, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ) ; } else if ( xtregs -> cp0 & XTREGS_CP0_BITSP ) { ret |= __copy_from_user ( & xtregs -> cp0, & xtregs -> cp0, sizeof ( xtregs -> cp0 ) ) ; } else { ret |= __copy_from_user ( & xtregs -> cp0, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ) ; }",0
469,<S2SV_ModStart> size ) ; if ( message -> length == 0 ) { message -> length = 0 ; message -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; message -> switchPort = queueItem -> ancillary. port ; message -> timestamp = queueItem -> ancillary. timestamp ; } else { message -> length = 0 ; message -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; # if ( ETH_SUPPORT == ENABLED ) message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; message -> destMacAddr = queueItem -> ancillary. destMacAddr ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif if ( ( flags & SOCKET_FLAG_PEEK ),0
470,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> if ( xop <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; } else { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; } <S2SV_ModEnd> pr_debug ( ""Calling",0
471,"<S2SV_ModStart> int error ; struct mb2_cache * mb2_cache = EXT2_SB ( sb ) -> s_mb_cache ; struct mb2_cache * mb2_cache = EXT2_SB ( sb ) -> s_mb_cache ; struct mb2_cache * mb2_cache = EXT2_SB ( sb ) -> s_mb_cache ; <S2SV_ModStart> get_bh ( new_bh ) ; mb2_cache = mb2_cache_find ( inode, header ) ; if ( mb2_cache ) { struct mb2_cache * mb2_cache = EXT2_SB ( sb ) -> s_mb_cache ; struct mb2_cache * mb2_cache = EXT2_SB ( sb ) -> s_mb_cache ; struct mb2_cache * mb2_cache = EXT2_SB ( sb ) -> s_mb_cache ; mb2_cache = mb2_cache_find ( inode, header ) ; if ( mb2_cache ) mb2_cache = mb2_cache_find ( inode, header ) ; if ( mb2_cache ) mb2_cache_insert ( mb2_cache, mb2_",0
472,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> map ) { vpx_active_map_t * const active_map = va_arg ( args, vpx_active_map_t * ) ; if ( active_map && active_map -> rows && active_map -> cols ) { if (! vp9_set_active_map ( ctx -> cpi, map -> active_map, active_map -> rows, active_map -> cols ) ) return VPX_CODEC_INVALID_PARAM ; } else { if (! vp9_set_active_map ( ctx -> cpi, map -> active_map, active_map -> rows, active_map -> cols ) ) return VPX_CODEC_INVALID_PARAM ; } else { if (! vp9_set_active_map ( ctx -> cpi, map -> active_map, active_map -> rows, active_map -> cols ) ) return VPX_CODEC_INVALID_PARAM ; } else { if (! vp9_set_active_map ( ctx -> cpi, map -> active_map, active_map -> rows, active_map -> cols ) ) return",0
473,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> rows, image -> columns ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image -> columns, image -> rows ) ; ( void ) SetImageExtent ( image, image ->",0
474,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
475,<S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ),0
476,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> { vpx_ref_frame_t * data <S2SV_ModEnd> ; YV12_BUFFER_CONFIG sd <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; memset ( & sd, 0, sizeof ( sd ) ) <S2SV_ModEnd> ; return vp9_copy_reference_dec <S2SV_ModStart> vp9_copy_reference_dec ( ctx <S2SV_ModEnd>, ( VP9_REFFRAME <S2SV_ModStart> VP9_REFFRAME ) frame -> frame_type, & sd ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
477,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> ps_dec -> u1_num_mbsNby2 <S2SV_ModStart> ps_dec -> u1_num_mbsNby2 ++ ; <S2SV_ModEnd> ps_dec -> u1_num_mbsNby2 <S2SV_ModStart> ps_dec -> u1_num_mbsNby2 ++ ; <S2SV_ModEnd> ps_dec -> u1_num_mbsNby2 <S2SV_ModStart> ps_dec -> u1_num_mbsNby2 ++ ; <S2SV_ModEnd> ps_dec -> u1_num_mbsNby2 <S2SV_ModStart> ps_dec -> u1_num_mbsNby2 ++ ; <S2SV_ModEnd> ps_dec -> u1_num_mbsNby2 <S2SV_ModStart> ps_dec -> u1_num_mbsNby2 ++ ; <S2SV_ModEnd> ps_dec -> u1_num_mbsNby2 <S2SV_ModStart> ps_dec -> u1_num_mbsNby2 ++ ; <S2SV_ModEnd> ps_dec -> u1_num_mbsNby2 <S2SV_ModStart> ps_dec -> u1_num_mbsNby,0
478,"<S2SV_ModStart> ; UWORD32 u4_x_offset, u4_y_offset ; UWORD8 * pu1_out_p ; UWORD8 * pu1_pred ; WORD32 u4_pred_strd ; <S2SV_ModStart> B_PIC ) { memset ( pu1_out_p, 0, sizeof ( pu1_out ) ) ; memset ( pu1_pred, 0, sizeof ( pu1_pred ) ) ; memset ( pu1_out_p, sizeof ( pu1_out ) ) ; memset ( pu1_pred, 0, sizeof ( pu1_pred ) ) ; memset ( pu1_out_p, 0, sizeof ( pu1_out ) ) ; memset ( pu1_pred, 0, sizeof ( pu1_pred ) ) ; memset ( pu1_pred, 0, sizeof ( pu1_pred ) ) ; memset ( pu1_pred, 0, sizeof ( pu1_pred ) ) ; memset ( pu1_out, 0, sizeof ( pu1_out ) ) ; memset ( pu1_pred, 0, sizeof ( pu1_pred ) ) ; memset ( pu1",0
479,"<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> const YV12_BUFFER_CONFIG * <S2SV_ModEnd> cfg = & <S2SV_ModStart>. buf ; if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ;",0
480,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
481,"<S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> const TX_SIZE tx_size <S2SV_ModStart> int i ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ plane_bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ plane_bsize ] ; const int num_4x4_w = num_4x4_w ; const int num_4x4_h = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y",0
482,<S2SV_ModStart> { # if! defined ( CONFIG_FAST_UNALIGNED ) || defined ( CONFIG_HIGHBITDEPTH ) || defined ( CONFIG_HIGHBITDEPTH ) dst [ 0 ] = src [ 0 ] ; dst [ 1 ] = src [ 1 ] ; dst [ 2 ] = src [ 2 ] ; dst [ 3 ] = src [ 3 ] ; dst [ 4 ] = src [ 4 ] ; dst [ 5 ] = src [ 5 ] ; dst [ 6 ] = src [ 6 ] ; dst [ 7 ] = src [ 7 ] ; # else ( ( uint32_t * ) dst ) [ 0 ] = ( ( uint32_t * ) src ) [ 0 ] ; dst [ 2 ] = src [ 2 ] ; dst [ 3 ] = src [ 3 ] ; dst [ 4 ] = src [ 4 ] ; dst [ 5 ] = src [ 5 ] ; dst [ 6 ] = src [ 6 ] ; dst [ 7 ] = src [ 7 ] ; # else ( ( uint32_t * ) dst ) [ 0 ] = ( ( uint32_t * ) src ) [ 0 ] ; ( ( uint32_t * ) dst ) [ 1 ] = ( ( uint32_t,0
483,"<S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + img -> row_offset ) % rowsperstrip <S2SV_ModEnd> ; offset_row = <S2SV_ModStart> img -> row_offset ; if ( nrow == 0 ) { TIFFErrorExt ( tif, ""gtStripSeparate"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""gtStripSeparate"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s",0
484,"<S2SV_ModStart> } } } if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 3 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 4 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 5 ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 3 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 4 ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 5 ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 5 ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 6 ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 6 ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 6 ) == TYPE_",0
485,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf,0
486,<S2SV_ModStart> ( num & ( 1U << ( number - 1 ) ) ) ) return num - ( 1U << ( number - 1 ) ) ; else if ( num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) ; else if ( num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) ; else if ( num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) return num - ( 1U << ( number - 1 ) ) ; else if ( num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) ; else if ( num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ),0
487,"<S2SV_ModStart> ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int cols = vpx_img_plane_cols ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int cols = vpx_img_plane_cols ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int rows = vpx_img_plane_cols ( img, plane ) ; const int rows = vpx_img_row_cols ( img, plane ) ; const int rows = vpx_img_row_cols ( img, plane ) ; const int cols = vpx_img_row_cols ( img, plane ) ; const int rows = vpx_img_row_cols ( img, plane ) ; const int rows = vpx_img_row_cols ( img, plane ) ; const int rows = vpx_img_row_cols ( img, plane ) ; const int rows = vpx_img_row_cols ( img, plane ) ;",0
488,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> + 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; <S2SV_ModStart> - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp ->",0
489,<S2SV_ModStart> case EVP_CTRL_AEAD_SET_TAG : if ( arg <= 0 || arg > CHACHA_CTR_SIZE ) return 0 ; actx -> tag [ 0 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 2 ) ; actx -> tag [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 3 ) ; actx -> tag [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 5 ) ; actx -> tag [ 3 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx -> tag [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 3 ) ; actx -> tag [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 5 ) ; actx -> tag [ 3 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx -> tag [ 4 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr,0
490,<S2SV_ModStart> alg ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (! capable ( CAP_SYS_MODULE ) ) { if (!,0
491,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
492,"<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ; if ( access ( full_path, R_OK ) ) { if ( arg_debug || arg_debug_private_lib ) printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } if ( access ( full_path, R_OK ) ) { if ( arg_debug || arg_debug_private_lib ) printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } if ( access ( full_path, R_OK ) ) printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } if ( access ( full_path, R_OK ) ) { if ( arg_debug || arg_debug_private_lib ) printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } if ( access ( full_path, R_OK ) ) { if (",0
493,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock,",0
494,"<S2SV_ModStart> { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; }",0
495,"<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> ""Encrypted <S2SV_blank> connection <S2SV_blank> unavailable"" ) ) ; mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> ""Encrypted <S2SV_blank> connection <S2SV_blank> unavailable"" ) ) ; mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> ""Encrypted <S2SV_blank> connection <S2SV_blank> unavailable"" ) ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc!= IMAP_EXEC_ERROR ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc!= IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc!= IMAP_EXEC_ERROR ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc!= IM",0
496,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
497,"<S2SV_ModStart> { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } else if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } else if ( strncmp ( line, ""{\\""class\\"":\\""class\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } else if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } else if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } else if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock )",0
498,"<S2SV_ModStart>, & rlen, 0",1
499,"<S2SV_ModStart> * slavename ; memset ( md5data, 0, sizeof ( md5data ) ) ; <S2SV_ModStart> endif } # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) memcpy ( md5data + 1, user -> password, 82 ) ; memcpy ( md5data + 1 + strlen ( user -> password ), curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, 17 ) ; md5_finish ( & state, ( const md5_byte_t * ) md5sum + 1 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( const md5_byte_t * ) md5sum + 1 ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr,",0
500,"<S2SV_ModStart> ; if (! PyUnicode_CompareWithASCIIString ( name, ""__debug__"" ) <S2SV_ModEnd> ) { ast_error <S2SV_ModStart> ) { if (! PyUnicode_CompareWithASCIIString ( name, * p ) <S2SV_ModEnd> ) { ast_error <S2SV_ModStart> ) { if (! PyUnicode_CompareWithASCIIString ( name, * p ) <S2SV_ModEnd> ) { ast_error <S2SV_ModStart> } } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } else { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword""",0
501,"<S2SV_ModStart> } ; for ( j = 0 ; j < sizeof ( buf ) - 1 && str [ i ] ; j ++ ) { if ( j >= sizeof ( buf ) - 1 ) { return - 1 ; } <S2SV_ModStart> j ++ ) { if ( j >= sizeof ( buf ) - 1 && str [ j ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } buf [ i ] = 0 ; arm_opcode_parse ( & aop, buf ) ; for ( j = 0 ; j < sizeof ( buf ) - 1 ; j ++ ) { if ( j >= sizeof ( buf ) - 1 ) { return - 1 ; } if ( j >= sizeof ( buf ) - 1 && str [ j ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } buf [ i ] = 0 ; arm_opcode_parse ( & aop, buf ) ; for ( j = 0 ; j < sizeof ( buf ) - 1 ; j ++ ) { if ( j >= sizeof ( buf ) - 1 ) { return - 1 ; }",0
502,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
503,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
504,<S2SV_ModStart> ) ; OPENSSL_cleanse ( key ) ; OPENSSL_cleanse ( iv ) ;,0
505,"<S2SV_ModStart> -> pw ; <S2SV_ModEnd> struct sshkey * <S2SV_ModStart> * key = NULL ; <S2SV_ModEnd> char * pkalg <S2SV_ModStart> = NULL ; <S2SV_ModEnd> u_char * pkblob <S2SV_ModStart> u_char * pkblob <S2SV_ModEnd> ; size_t blen <S2SV_ModStart> ; u_char * sig <S2SV_ModEnd>, have_sig ; <S2SV_ModStart> ; if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & sig, & blen ) )!= 0 || ( r = sshpkt_get_string ( ssh, & sig, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & sig, & blen ) )!= 0 || ( r = sshpkt_get_string ( ssh, & sig, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r",0
506,"<S2SV_ModStart> uint32_t bcount ; if (! ( config -> qmode & QMODE_NO_STORE_WRAPPER ) &&! WavpackAddWrapper ( wpc, & filehdr, sizeof ( filehdr ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
507,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> entries [ tcount ] = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries [ tcount ] ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } exif_log ( en -> log, EXIF_LOG_CODE",0
508,<S2SV_ModStart> bd_addr ) { if ( IS_ERR ( btif_dm_remove_bond ( bd_addr ) ) ) return BT_STATUS_GENERAL ; if ( IS_ERR ( btif_dm_remove_bond ( bd_addr ) ) ) return BT_STATUS_GENERAL ;,0
509,"<S2SV_ModStart> int i ; long <S2SV_ModEnd> avail ; int <S2SV_ModStart> 4 ) ; if ( nxip < 0 || nxip > buf -> len - buf -> cursor ) goto bad_format ; expect = 8 + 8 + nxip * 8 ; if ( expect < 0 || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmax == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> nxip = nxip ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; }",0
510,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf,0
511,"<S2SV_ModStart> ( ret ||! cm_id -> device ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; rdma_destroy_id ( cm_id ) ; return ret ; } <S2SV_ModEnd> rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n""",0
512,"<S2SV_ModStart> - 1 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } <S2SV_ModStart> OE_OK ) ; OE_RAISE_ERRNO ( OE_EINVAL ) ; done : return ret ; } ret = oe_syscall_write_ocall ( & ret, epoll -> host_fd, buf, count ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; OE_RAISE_ERRNO ( OE_EINVAL ) ; OE_RAISE_ERRNO ( OE_EINVAL ) ; OE_RAISE_ERRNO ( OE_EINVAL ) ; OE_RAISE",0
513,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section",0
514,"<S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX = i -> parent -> width - i -> width ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif i -> posY = i -> parent -> height - i -> height ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ;",0
515,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_NAME_MAX : * ( size_t * ) val = ms -> name_max ; return 0 ; case MAGIC_PARAM_ELF_PHNUM_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ;,0
516,<S2SV_ModStart> * journal = EXT4_JOURNAL ( page -> mapping -> host ) ; if (! trylock_page ( page ) ) { WARN_ON (! PageLocked ( page ) ) ; return ; },0
517,"<S2SV_ModStart> { GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = trak -> Information -> sampleTable ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stbl ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stbl ) { writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer",0
518,"<S2SV_ModStart> ] ; int <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> ] ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) memcpy ( md5data + 1, password, 82 ) ; md5data [ 83 ] = '\\0' ; memcpy ( md5data + 1 + strlen ( password ), pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( const md5_byte_t * ) md5sum + 1 ) ; md5sum [ 0 ] = 0 ; init_packet ( & data, MT_PTYPE_DATA, srcmac, dstmac, sessionkey, outcounter ) ; plen = add_control_packet ( & data, MT_CPTYPE_USERNAME, username, strlen ( username ) ) ; plen += add_control_packet ( & data, MT_CPTYPE_TERM_TYPE, terminal, strlen ( terminal ) ) ) ; if ( is_a_tty && get",0
519,<S2SV_ModStart> ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindexes = NULL ; },0
520,"<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> ) & 0xffffffff <S2SV_ModEnd> ; bits -= <S2SV_ModStart> } \\\n} <S2SV_ModEnd> typedef struct PCDTable <S2SV_ModStart> buffer ) ; if ( buffer == ( unsigned char * ) NULL ) AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; for ( j = 0 ; j < 3 ; j ++ ) pcd_table [ j ] = ( PCDTable * ) AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( buffer == ( unsigned char * ) NULL ) AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; for ( j = 0 ; j < 3 ; j ++ ) pcd_table [ j ] = ( PCDTable * ) AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( buffer == ( unsigned char * ) NULL ) AcquireQuantumMemory (",0
521,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == TYPE_COMMENT ) arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( CHILD ( n, i + 1 ) ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto",0
522,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
523,"<S2SV_ModStart> -> y_buffer ; const uint32_t y_width = src_ybc -> y_width ; const uint32_t y_height = src_ybc -> y_height ; const uint32_t y_stride = src_ybc -> y_stride ; for ( row = 0 ; row < y_width ; ++ row ) { memcpy ( dst, src, src_ybc -> y_width ) ; src += src_ybc -> y_stride ; dst += dst_ybc -> y_stride ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> int dummy_rate ; <S2SV_ModStart> int dummy_dist ; <S2SV_ModEnd> BLOCK_SIZE i ; <S2SV_ModStart> { int dummy_rate ; int64_t dummy_dist ; MACROBLOCK * x = & cpi -> mb ; if ( sf -> adaptive_pred_interp_filter ) { for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 4, num_4x4_w * num_4x4_h ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> mb_index = 0 ; x -> mb_index < 4 ; ++ x -> mb_index ) for ( x ->",0
525,"<S2SV_ModStart>, obj_tlen ; u_int hexdump ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; ND_TCHECK ( * lmp_obj_header ) ; ND_TCHECK ( * lmp_obj_header ) ; ND_TCHECK ( * lmp_obj_header ) ; ND_PRINT ( ( ndo, ""\\n\\tLMPv%u, <S2SV_blank> msg-type: <S2SV_blank> %s, <S2SV_blank> Flags: <S2SV_blank> [%u]"", lmp_obj_ctype, lmp_obj_len ), bittok2str ( lmp_header_flag_values, ""none"", lmp_obj_len ), bittok2str ( lmp_header_flag_values, ""none"", lmp_obj_ctype ), bittok2str ( lmp_obj_flags_values, ""none"", lmp_obj_ctype ), bittok2str ( lmp_obj_flags_values, ""none"", lmp_obj_ctype ), bittok2str ( lmp_obj_flags_values, ""none",0
526,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inc_mvs ( const <S2SV_ModStart> i ) { const MV * ref = & mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ] [ 0 ]. as_mv ; const int_mv diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col } ; const int_mv diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col } ; const MV diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col } <S2SV_ModEnd> ; vp9_inc_mv (",0
527,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
528,"<S2SV_ModStart> ; if ( pskb_expand_head ( skb_out, size - skb -> len, GFP_ATOMIC ) < 0 ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } <S2SV_ModStart> ; if ( pskb_expand_head ( skb_out, size - skb -> len, GFP_ATOMIC ) < 0 ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_reset_network_header ( skb_out ) ; skb_reset_transport_header ( skb_out ) ; hlist_for_each_entry ( entry, chain, list ) { size = entry -> skb -> len - hdr_size ; memcpy ( skb_put ( skb_out, size ), entry -> skb -> data + hdr_size, size",0
529,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
530,"<S2SV_ModStart> return ; netsnmp_mibindex_init ( <S2SV_ModEnd> ) ; DEBUGMSGTL <S2SV_ModStart> ( entry ) { add_mibfile ( entry, NULL <S2SV_ModEnd>, NULL ) <S2SV_ModStart> ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ;",0
531,"<S2SV_ModStart> { fd = safe_open ( uinput_dev_path [ x ], O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } if ( read ( fd, & dev, sizeof ( dev ) ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } if ( write ( fd, & dev, sizeof ( dev ) ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } if ( write ( fd, & dev, sizeof ( dev ) ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } if ( write ( fd, & dev, sizeof ( dev ) ) < 0 ) { B",0
532,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
533,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s,",0
534,"<S2SV_ModStart> * pctx ) { krb5_error_code code ; iakerb_ctx_id_t ctx ; krb5_error_code code ; ctx = k5alloc ( sizeof ( * ctx ), & code ) ; if ( ctx == NULL ) { krb5_error_code code ; code = krb5_gss_init_context ( & ctx -> k5c ) ; if ( code!= 0 ) goto cleanup ; * pctx = ctx ; return code ; } <S2SV_ModEnd> code = krb5_gss_init_context",0
535,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; bitmapDC = CreateCompatibleDC ( hDC ) ; if ( bitmapDC == ( HDC ) NULL ) { DeleteDC ( hDC ) ; ThrowReaderException ( CoderError, ""UnableToCreateDC"" ) ; } ( void ) InheritException ( exception, & image -> exception ) ; InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; bitmapDC = CreateCompatibleDC ( hDC ) ; if ( bitmapDC == ( HDC ) NULL ) { DeleteDC ( hDC ) ; ThrowReaderException ( CoderError, ""UnableToCreateDC"" ) ; } ( void ) InheritException ( exception, & image -> exception ) ; InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ;",0
536,<S2SV_ModStart> ; while ( <S2SV_ModEnd> impeg2d_bit_stream_nxt ( ps_stream <S2SV_ModStart>!= START_CODE_PREFIX ) <S2SV_ModEnd> { impeg2d_bit_stream_flush (,0
537,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) &&! strcmp ( dentry -> d_name. name, ""ipc_flood_duration_count"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if ( flood_duration_test ) ret = kstrtoul ( string, 0, & ipc_duration_ms ) ; else ret = kstrtoul ( string, 0, & ipc_count ) ; if ( ret < 0 ) { ret = size ; goto out ; }",0
538,"<S2SV_ModStart> = g_new0 ( MonoType *, count ) ; <S2SV_ModStart> = g_new0 ( MonoType *, count ) ; for ( i = 0 ; i < count ; i ++ ) { MonoReflectionType * garg = mono_array_get ( types, gpointer, i ) ; MonoType * garg = mono_reflection_type_get_handle ( garg ) ; MonoType * garg = mono_reflection_type_get_handle ( garg ) ; type_argv [ i ] = g_new0 ( MonoType *, count ) ; for ( i = 0 ; i < count ; i ++ ) { MonoReflectionType * garg = mono_array_get ( types, gpointer, i ) ; MonoType * garg = mono_reflection_type_get_handle ( garg ) ; MonoType * garg = mono_reflection_type_get_handle ( garg ) ; type_argv [ i ] = g_new0 ( MonoType *, count ) ; for ( i = 0 ; i < count ; i ++ ) { MonoType * garg = mon",0
539,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> ( copy_from_user ( buf <S2SV_ModEnd>, buffer, <S2SV_ModStart> count ) ) return - EFAULT ; tmp = simple_strtol ( buf, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ; uml_exitcode = tmp ;",0
540,"<S2SV_ModStart> is_path ) { const char * last_elem, * wp ; if ( * name == '$' ) { const char * repl ; size_t len ; repl = ( ( strncmp ( & name [ 1 ], ""ORIGIN"", 6 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM"", 8 ) == 0 && ( len = 11 )!= 0 ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) ) ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_origin ) : _dl_platform ) ; if ( repl!= NULL && repl!= ( const char * ) - 1 ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_",0
541,"<S2SV_ModStart> decContainer_t ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; }",0
542,"<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_space <S2SV_ModEnd> ; DECLARE_SOCKADDR ( <S2SV_ModStart> ; opt = rcu_dereference_protected ( <S2SV_ModStart> np -> opt, sock_owned_by_user ( sk ) ) ; if (! opt ) { opt_space = rcu_dereference_protected ( <S2SV_ModStart> np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if (! flowlabel ) { opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if (! opt ) { opt_space = rcu_dereference_protected ( <S2SV_ModStart> np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if (! flowlabel ) { opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) )",0
543,"<S2SV_ModStart> ; } if ( iph -> optlen < sizeof ( struct iphdr ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } if ( iph -> optlen < sizeof ( struct iphdr ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } if ( iph -> optlen < sizeof ( struct iphdr ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } if ( iph -> optlen < sizeof ( struct iphdr ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } if ( iph -> optlen < sizeof ( struct iphdr ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } if",0
544,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
545,"<S2SV_ModStart> goto errout ; size_t stagemasks = 0 ; for ( j = 0 ; j < info -> partitions ; j ++ ) { int cascade = oggpack_read ( opb, 3 ) ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( oggpack_read ( opb, 6 ) << 3 ) ; if ( stagemasks [ j ] >> k ) { int book = ( unsigned char ) oggpack_read ( opb, 3 ) ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( book >= ci -> books ) goto errout ; stagemasks [ j ] |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( stagemasks [ j ] >> k ) { int book = ( unsigned char ) oggpack_read ( opb, 8 ) ; if ( book >= ci ->",0
546,"<S2SV_ModStart> ; if (! js_doregexec ( J, re -> prog, text, & m, 0 ) ) { js_doregexec ( J, re -> prog, text, & m, 0 ) ; if (! js_doregexec ( J, re -> prog, text, & m, 0 ) ) { js_doregexec ( J, re -> prog, text, & m, 0 ) ; js_pushnumber ( J, - 1 ) ; } else if (! js_regexec ( J, re -> prog, text, & m, 0 ) ) { js_doregexec ( J, re -> prog, text, & m, 0 ) ; if (! js_doregexec ( J, re -> prog, text, & m, 0 ) ) { js_doregexec ( J, re -> prog, text, & m, 0 ) ; js_pushnumber ( J, - 1 ) ; } else if (! js_regexec ( J, re -> prog, text, & m, 0 ) ) { js_doregexec ( J, re -> prog, text, & m, 0 ) ;",0
547,"<S2SV_ModStart> ) break ; if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } <S2SV_ModStart> = seq ; if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } tp -> copied_seq = seq ; tcp_rcv_space_adjust ( sk ) ;",0
548,"<S2SV_ModStart> ; krb5_key_data * key_data = NULL <S2SV_ModStart> ; if ( key_data_in == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents [ 1 ] = NULL ; } } for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { if ( key_data [ i ]",0
549,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
550,<S2SV_ModStart> ] ) ; sqlite3_int64 <S2SV_ModEnd> nByte = sqlite3_value_bytes <S2SV_ModStart> ] ) ; sqlite3_int64 <S2SV_ModEnd> nByte = sqlite3_value_bytes <S2SV_ModStart> ; sqlite3_int64 <S2SV_ModEnd> nByte = sqlite3_value_bytes <S2SV_ModStart> ; sqlite3_int64 <S2SV_ModEnd> nByte = sqlite3_value_bytes <S2SV_ModStart> ; sqlite3_int64 <S2SV_ModEnd> nByte = sqlite3_value_bytes <S2SV_ModStart> ; sqlite3_int64 <S2SV_ModEnd> nByte = sqlite3_value_bytes,0
551,<S2SV_ModStart> filp ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (!,0
552,"<S2SV_ModStart> * body, asdl_seq * orelse, string type_comment, <S2SV_ModStart> = body ; p -> v. AsyncFor. type_comment = type_comment ; p ->",0
553,"<S2SV_ModStart> MI_CHECK * param <S2SV_ModEnd>, char * <S2SV_ModStart> name ) { if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n",0
554,"<S2SV_ModStart> } } return rcu_dereference_protected ( inet_sk ( sk ) -> inet_opt, sock_owned_by_user ( sk ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
555,"<S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error""",0
556,"<S2SV_ModStart> UINT error ; # ifdef WITH_DEBUG_RDPEI WLog_DBG ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" PRIu16 "" <S2SV_blank> (%s) <S2SV_blank> length: <S2SV_blank> %"" PRIu32 """", eventId, rdpei_eventid_string ( eventId ), pduLength ) ; # endif",0
557,"<S2SV_ModStart> - 1 ) zsocket_set_multicasthops ( pData -> socket, pData -> multicastHops ) ; if ( pData -> rcvHops > - 1 ) zsocket_set_rcvhops ( pData -> socket, pData -> rcvHops ) ; if ( pData -> sndBuf > - 1 ) zsocket_set_sndbuf ( pData -> socket, pData -> sndBuf ) ; if ( pData -> sndBuf > - 1 ) zsocket_set_sndbuf ( pData -> socket, pData -> sndBuf ) ; if ( pData -> rcvBuf > - 1 ) zsocket_set_rcvbuf ( pData -> socket, pData -> rcvBuf ) ; if ( pData -> sndTimeout > - 1 ) zsocket_set_sndtimeo ( pData -> socket, pData -> sndTimeout ) ; if ( pData -> rcvTimeout > - 1 ) zsocket_set_rcvtimeo ( pData -> socket, pData -> rcvTimeout ) ; if ( pData -> sndTimeout > - 1 ) zsocket_set_sndtimeo ( pData -> socket, pData -> snd",0
558,"<S2SV_ModStart> ) ; struct ipv6_txoptions * opt <S2SV_ModStart> struct flowi6 fl6 ; opt = rcu_dereference_protected ( np -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; opt = rcu_dereference_protected ( np -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> opt, np -> tclass ) ; if ( opt ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> inet_opt, sock_owned_by_user ( sk ) ) ; sctp_inc_stats ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; opt = rcu_dereference_protected ( np -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( opt ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> inet_opt, sock_owned_by_user ( sk ) ) ; sctp_",0
559,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
560,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
561,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> UINT32 failureCode ; if ( Stream_Read_UINT8 ( s, flags )!= flags ) { WLog_DBG ( TAG, ""RDP_NEG_FAILURE"" ) ; return ; } Stream_Read_UINT16 ( s, length ) ; Stream_Read_UINT32 ( s, failureCode ) ; switch ( failureCode ) { case SSL_REQUIRED_BY_SERVER : WLog_WARN ( TAG, ""Error: <S2SV_blank> SSL_REQUIRED_BY_SERVER"" ) ; nego -> sendNegoData = TRUE ; break ; case SSL_CERT_NOT_ON_SERVER : WLog_ERR ( TAG, ""Error: <S2SV_blank> SSL_CERT_NOT_ON_SERVER"" ) ; nego -> sendNegoData = TRUE ; break ; case INCONSISTENT_FLAGS : WLog_ERR ( TAG, ""Error: <S2SV_blank> INCONSISTENT_FLAGS"" ) ; break ; case HYBRID_REQUIRED_BY_SERVER : WLog_ERR ( TAG, """,0
562,"<S2SV_ModStart>, result = RLC_OK <S2SV_ModEnd> ; bn_t t <S2SV_ModStart> ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = m_len ; m_len = k_len - 1 ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } while ( pad!= 0 && m_len > 0 ) { * p_len -= ( m_len - 1 ) ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_ERR ; } do { m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ;",0
563,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
564,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
565,"<S2SV_ModStart> ( psf = psf_calloc <S2SV_ModEnd> ( 1,",0
566,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> ( j = 0 ; j < SWITCHABLE_FILTER_CONTEXTS ; ++ j ) count [ i ] += <S2SV_ModEnd> cm -> counts <S2SV_ModStart> ( j = 0 ; j < SWITCHABLE_FILTER_CONTEXTS ; ++ j ) count [ i ] += <S2SV_ModEnd> cm -> counts <S2SV_ModStart> ) count [ i <S2SV_ModEnd> ] += cm,0
567,"<S2SV_ModStart> { token ++ ; } op -> operands_count ++ ; op -> operands [ operand ]. type = ARM_UNDEFINED ; op -> operands [ operand ]. reg_type = ARM_UNDEFINED ; op -> operands [ operand ]. shift = ARM_NO_SHIFT ; while ( token [ 0 ] == '[' || token [ 0 ] == ']' ) { token ++ ; } if (! strncmp ( token, ""lsl"", 3 ) ) { op -> operands [ operand ]. shift = ARM_LSL ; } else if (! strncmp ( token, ""lsr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_LSR ; } else if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } if (! strncmp ( token, ""lsl"", 3 ) ) { op -> operands [ operand ]. shift = ARM_LSL ; } else if (! strncmp ( token, ""lsr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ;",0
568,"<S2SV_ModStart> cpi ) { VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModStart> -> act_zbin_adj = 1 <S2SV_ModEnd> ; vp9_setup_src_planes ( <S2SV_ModStart> cpi -> Source, 0, 0 ) ; vp9_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_dst_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; xd -> mi [ 0 ] -> mbmi. mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd",0
569,"<S2SV_ModStart> ( hp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; <S2SV_ModStart> retval ) ; } if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } http_ProtoVer ( hp ) ; retval = htc_request_check_host_hdr ( hp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_Error, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; }",0
570,"<S2SV_ModStart> 0x07 # define EOFOp 0x08 <S2SV_ModEnd> Image * image <S2SV_ModStart> ReadBlob ( image, 2, magick ) ; if ( ( count < 2 ) || ( memcmp ( magick, ""\\122\\314"", 2 )!= 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> { image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) Read",0
571,"<S2SV_ModStart> len ) ; if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len + sizeof ( tETH_HDR ) ) ; return - 1 ; } <S2SV_ModStart> len ) ; if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len + sizeof ( tETH_HDR ) ) ; return - 1 ; }",0
572,<S2SV_ModStart> ; if ( ps_cur_poc -> i4_delta_pic_order_cnt_lsb < 0 || ps_cur_poc -> i4_delta_pic_order_cnt_msb < 0 ) { ps_dec -> i4_delta_pic_order_cnt_lsb = 0 ; ps_dec -> i4_delta_pic_order_cnt_msb = 0 ; ps_dec -> i4_delta_pic_order_cnt_lsb = ps_cur_poc -> i4_delta_pic_order_cnt_lsb ; ps_dec -> i4_delta_pic_order_cnt_msb = ps_cur_poc -> i4_delta_pic_order_cnt_msb ; } else { ps_dec -> i4_delta_pic_order_cnt_msb = 0 ; ps_dec -> i4_delta_pic_order_cnt_lsb = ps_cur_poc -> i4_delta_pic_order_cnt_lsb ; ps_dec -> i4_delta_pic_order_cnt_msb = ps_cur_p,0
573,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> pci_dev * pdev <S2SV_ModEnd> ; int cim_rev <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } if (",0
574,"<S2SV_ModStart> left == 0 ) { luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; <S2SV_ModStart> left == 0 ) { luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack",0
575,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
576,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ( rq ) <S2SV_ModEnd> ; u64 irq_time <S2SV_ModStart> ) ; u64 <S2SV_ModEnd> irq_time ; rq <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
577,"<S2SV_ModStart> else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; } <S2SV_ModStart> else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; } <S2SV_ModStart> else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; } <S2SV_ModStart> else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; } <S2SV_ModStart> else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; } <S2SV_ModStart> else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; }",0
578,"<S2SV_ModStart> ; if ( exif_test_byte_order ( buf + datao, buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; if ( exif_test_byte_order ( buf + datao, buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( exif_test_byte_order ( buf + o, buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> entries [ tcount ] = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY (",0
579,"<S2SV_ModStart> { if ( strlen ( fname ) > sizeof ( charbuf ) - 1 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } if ( strlen ( fname ) > sizeof ( charbuf ) - 1 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } if ( strlen ( fname ) > sizeof ( charbuf ) - 1 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } if ( strlen ( fname ) > sizeof ( charbuf ) - 1 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } if ( strlen ( fname ) > sizeof ( charbuf ) - 1 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; }",0
580,"<S2SV_ModStart> flags ) { <S2SV_ModEnd> int dir_has_key, <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> d_lock ) ; <S2SV_ModEnd> dir_has_key = ( <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL )",0
581,"<S2SV_ModStart> void unbind_ports ( <S2SV_ModEnd> void ) { <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> CRYPTO_THREAD_write_lock ( stunnel_locks <S2SV_ModStart> LOCK_SECTIONS ] ) ; opt = service_options. next ; service_options. next = NULL ; service_free ( & service_options ) ; while ( opt ) { unsigned i ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; <S2SV_ModEnd> s_log ( LOG_DEBUG <S2SV_ModStart> servname ) ; <S2SV_ModEnd> } } <S2SV_null>",0
582,<S2SV_ModStart> parent ) ; if ( i -> width > <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
583,"<S2SV_ModStart> 4 ) ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, len - op -> size, cpu ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""r%d,r%d,^,",0
584,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart>. scale!= ( Quantum * ) NULL ) info. scale = ( Quantum * ) RelinquishMagickMemory ( info. scale ) ; if ( info. data!= ( unsigned char * ) NULL ) info. data = ( unsigned char * ) RelinquishMagickMemory ( info. data ) ; if ( info. data!= ( unsigned char * ) NULL ) info. data = ( unsigned char * ) RelinquishMagickMemory ( info. data ) ; if ( info. data!= ( unsigned char * ) NULL ) info. data = ( unsigned char * ) RelinquishMagickMemory ( info. data ) ; if ( info. data!= ( unsigned char * ) NULL ) info. data = ( unsigned char * ) RelinquishMagickMemory ( info. data ) ; if ( info. data!= ( unsigned char * ) NULL ) info. data = ( unsigned char * ) RelinquishMagickMemory ( info. data ) ; if ( info. data!= ( unsigned char * ) NULL ) info. data = ( unsigned char * ) RelinquishMagickMemory ( info.",0
585,<S2SV_ModStart> void ) { if ( mnemonic [ strlen ( mnemonic ) - 1 ] == '\\0' || mnemonic [ strlen ( mnemonic ) - 1 ] == '\\0' || mnemonic [ strlen ( mnemonic ) - 1 ] == '\\0' || mnemonic [ strlen ( mnemonic ) - 1 ] == '\\0' || mnemonic [ strlen ( mnemonic ) - 1 ] == '\\0' || mnemonic [ strlen ( mnemonic ) - 1 ] == '\\0' || mnemonic [ strlen ( mnemonic ) - 1 ] == '\\0' || mnemonic [ strlen ( mnemonic ) - 1 ] == '\\0' || mnemonic [ strlen ( mnemonic ) - 1 ] == '\\0' || mnemonic [ strlen ( mnemonic ) - 1 ] == '\\0' || mnemonic [ strlen ( mnemonic ) - 1 ] == '\\0' || mnemonic [ strlen ( mnemonic ) - 1 ] == '\\0' || mnemonic [ strlen ( mnemonic ) - 1 ] == '\\0' || mnemonic [ strlen ( mnemonic ) - 1 ] == '\\0' || mnemonic [ strlen ( mnemonic ) - 1 ] == '\\0' || mnemonic [ strlen ( mnemonic ),0
586,"<S2SV_ModStart> ( interface, ENC624J600_EHT1, hashTable [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT2, hashTable [ 1 ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT3, hashTable [ 2 ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT4, hashTable [ 3 ] ) ; <S2SV_ModEnd> TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> EHT1 <S2SV_blank> = <S2SV_blank> %04"" <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
587,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtentInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtentInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtentInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtentInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataIn",0
588,"<S2SV_ModStart> ) ) { if ( n < sizeof ( rbuf ) ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket, n ) ; goto error ; } <S2SV_ModStart> ) ) { if ( n < sizeof ( rbuf ) ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket, n ) ; goto error ; } n = read ( req -> socket, buf, sizeof ( buf ) ) ; if ( n < sizeof ( rbuf ) ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket, n ) ; goto error ; } if ( n < sizeof ( rbuf ) ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket, n ) ; goto error ; } n = read ( req -> socket, buf, sizeof ( buf ) ) ; if ( n < sizeof ( rbuf ) ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"",",0
589,<S2SV_ModStart> ps_slice_hdr ) { dpb_mgr_t * ps_dpb_mgr = ps_codec -> pv_dpb_mgr ; mv_buf_t * ps_mv_buf_mgr = ( mv_buf_t * ) ps_codec -> pv_mv_buf_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb,0
590,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart> ( child ) <S2SV_ModEnd> { ++ numentries <S2SV_ModStart> ( child ) <S2SV_ModEnd> { entries [ <S2SV_ModStart> i ++ ] = str = print_string_ptr ( child -> string ) ; entries [ i ++ ] = ret = print_value ( child, depth, fmt ) ; if ( str && ret ) len += strlen ( ret ) + 2 + ( fmt? 2 + depth : 0 ) ; if (! out ) { out = ( char * ) cJSON_malloc ( len ) ; if (! out ) fail = 1 ; } if ( fail ) { for ( i = 0 ; i < numentries ; ++ i ) { if ( names [ i ] ) cJSON_free ( names [ i ] ) cJSON_free ( names [ i ] ) ; if ( entries [ i ] ) cJSON_free ( entries [ i ] ) ; if ( entries [ i ] ) cJSON_free ( entries [ i ] ) ; if ( entries [ i ] ) cJSON_free ( entries [ i ] ) cJSON_free ( entries [ i ] ) ; cJSON_free ( entries [ i",0
591,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> ber_parse_header ( STREAM <S2SV_ModStart> length ) { if (! s_check ( s ) ) { logger ( Core, Error, ""ber_parse_header(), <S2SV_blank> expected <S2SV_blank> tagval <S2SV_blank> %d, <S2SV_blank> got <S2SV_blank> tagval <S2SV_blank> %d"", tagval, tag ) ; return False ; }",0
592,"<S2SV_ModStart> ( sk ) ; if ( writable ) { if (! skb_queue_empty ( & sk -> sk_receive_queue ) ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask ; } if (! skb_queue_empty ( & sk -> sk_receive_queue ) ) mask |= POLLOUT | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; } sock_poll_wait ( file, & sk -> sk_socket -> peer_wait, wait ) ; if ( unix_recvq_full ( sk ) ) writable = 0 ; sock_put ( sk ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask <S2SV_ModEnd> ; } <S2SV_null>",0
593,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
594,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> exit_io_context ( void <S2SV_ModStart> * ioc ; atomic_dec ( & ioc -> nr_tasks ) ; if ( atomic_dec_and_test ( & ioc -> nr_tasks ) ) { if ( ioc -> aic && ioc -> aic -> exit ) ioc -> aic -> exit ( ioc -> aic ) ; cfq_exit ( ioc ) ; } else { ioc = current -> io_context ; } task_lock ( current ) ; ioc = current -> io_context ; <S2SV_ModStart> -> io_context = NULL ; task_unlock ( current ) ; if ( atomic_dec_and_test ( & ioc -> nr_tasks ) ) { if ( ioc -> aic && ioc -> aic -> exit ) ioc -> aic -> exit ( ioc -> aic ) ; ioc -> aic = NULL ; } <S2SV_ModEnd> if ( atomic_dec_and_test,0
595,"<S2SV_ModStart> ; int ret ; if ( xtregs -> cp0 & XTREGS_CP0_BITSP ) { ret |= __copy_from_user ( & xtregs -> cp0, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ) ; } else if ( xtregs -> cp0 & XTREGS_CP0_BITSP ) { ret |= __copy_from_user ( & xtregs -> cp0, & xtregs -> cp0, sizeof ( xtregs -> cp0 ) ) ; } else { ret |= __copy_from_user ( & xtregs -> cp0, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ) ; }",0
596,<S2SV_ModStart> 0 ) { if ( token_wrapper_len + 14 > header -> buffer. length ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } <S2SV_ModStart> ; if ( token_wrapper_len + 14 > header -> buffer. length ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( token_wrapper_len + 14 > header -> buffer. length ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( token_wrapper_len + 14 > header -> buffer. length ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if (,0
597,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_ref_frame_t <S2SV_ModEnd> * frame = <S2SV_ModStart> * frame = ( vpx_ref_frame_t <S2SV_ModEnd> * ) ; <S2SV_ModStart> YV12_BUFFER_CONFIG * fb <S2SV_ModEnd> ; vp9_get_reference_enc ( <S2SV_ModStart> YV12_BUFFER_CONFIG * fb <S2SV_ModEnd> ) ; yuvconfig2image",0
598,<S2SV_ModStart> plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { ret = - EPERM ; break ; },0
599,"<S2SV_ModStart> * info, <S2SV_ModEnd> char * name <S2SV_ModStart> char * name <S2SV_ModEnd>, int rep_quick <S2SV_ModStart>, MYF ( MY_WME ) ) || init_io_cache ( & info -> read_cache, info -> dfile, ( uint ) param -> read_buffer_length, READ_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, MYF ( MY_WME ) ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, MYF ( MY_WME ) ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile,",0
600,"<S2SV_ModStart> } ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN uECC_word_t * p = ( uECC_word_t * ) signature ; # else uECC_word_t * p = ( uECC_word_t * ) signature ; # endif <S2SV_ModStart> curve ) ; if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; uECC_vli_modInv ( tmp, tmp, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; } else if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; uECC_vli_modInv ( tmp, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words )",0
601,"<S2SV_ModStart> ; trunc : if ( length < ND_RPL_DAOACK_MIN_LEN ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|dao-truncated]"" ) ) ; goto trunc ; } <S2SV_ModStart> : if ( length < ND_RPL_DAOACK_MIN_LEN ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|dao-length <S2SV_blank> too <S2SV_blank> short]"" ) ) ; goto trunc ; } <S2SV_ModStart> : if ( length < ND_RPL_DAOACK_MIN_LEN ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|dao-length <S2SV_blank> too <S2SV_blank> short]"" ) ) ; goto trunc ; } <S2SV_ModStart> : if ( length < ND_RPL_DAOACK_MIN_LEN ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|dao-length <S2SV_blank> too <S2SV_blank> short]"" ) ) ; goto trunc ; } <S2SV_ModStart> : if ( length < ND_RPL_DAOACK_MIN_LEN ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|dao-length <S2SV_blank> too <S2SV_blank> short]"" ) ) ; goto trunc ; }",0
602,"<S2SV_ModStart> ; } else { uint32_t new_free_total = pool -> free_total * 2 ; void * new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ), new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ), new_free_total * sizeof ( nw_buf * ) ) ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ), new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ), new_free_total * sizeof ( nw_buf * ) ) ; } else { free ( buf ) ; } }",0
603,"<S2SV_ModStart> tp ; { int cval = 0, meta = 0 ; <S2SV_ModEnd> const char hex <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> cp ++ ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10 )",0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
605,"<S2SV_ModStart> * lined ; <S2SV_ModEnd> PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" <S2SV_ModStart> = 15 ; <S2SV_ModEnd> pixc = pixFewColorsOctcubeQuant1 <S2SV_ModStart> = pixFewColorsOctcubeQuant1 ( <S2SV_ModEnd> pixs, level <S2SV_ModStart> = pixFewColorsOctcubeQuant1 ( <S2SV_ModEnd> pixs, level <S2SV_ModStart> = pixFewColorsOctcubeQuant1 ( <S2SV_ModEnd> pixs, level <S2SV_ModStart> = pixFewColorsOctcubeQuant1 ( <S2SV_ModEnd> pixs, level <S2SV_ModStart> = pixFewColorsOctcubeQuant1 ( <S2SV_ModEnd> pixs, level <S2SV_ModStart> = pixFewColorsOctcubeQuant1 ( <S2SV_ModEnd> pixs, level <S2SV_ModStart> = pixFewColorsOctcubeQuant1 ( <S2SV_ModEnd> pixs, level <S2SV_ModStart> = pixFewColorsOctcubeQuant1 ( <S2SV_ModEnd> pixs, level <S2SV_ModStart> = pixFewColorsOctcubeQuant1 ( <S2SV_ModEnd> pixs, level <S2SV_ModStart> = pixFewColorsOctcubeQuant1 ( <S2SV_ModEnd> pixs, level <S2SV_ModStart> = pixFewColorsOctcubeQuant1 ( <S2SV_ModEnd> pixs, level <S2SV_ModStart> = pixFewColorsOctcubeQuant1 ( <S2SV_ModEnd> pixs, level <S2SV_ModStart> = pixFewColorsOctcubeQuant1 ( <S2SV_ModEnd> pixs, level <S2SV_ModStart> = pixFewColorsOctcubeQuant1",0
606,<S2SV_ModStart> vf = vp8_mse16x16 <S2SV_ModEnd> ; xd -> <S2SV_ModStart> vf = vp8_mse16x16 <S2SV_ModEnd> ; xd ->,0
607,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
608,"<S2SV_ModStart> int idx ; struct snd_ctl_elem_id id ; unsigned int count ; <S2SV_ModStart> count ; for ( count = 0 ; idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ; for ( idx = 0 ; idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ; for ( idx = 0 ; idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ; for ( idx = 0 ; idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ; for ( idx = 0 ; idx < kcontrol -> count ; idx ++, id. index ++,",0
609,"<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> = overhead ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> = overhead ; for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_validate_ns ( conn, ns )!= MONGO_OK ) return MONGO_ERROR ; for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK )",0
610,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> state = NEGO_STATE_FAIL ; return ; } if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""Invalid <S2SV_blank> RDP_NEG_RSP"" ) ; <S2SV_ModStart> state = NEGO_STATE_FAIL ; return ; } <S2SV_ModStart> state = NEGO_STATE_FINAL ; return ;",0
611,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; int bits_per_mb_at_this_q ; const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { last_error = bits_per_mb_at_this_q - target_bits_",0
612,<S2SV_ModStart> value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
613,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
614,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart
615,"<S2SV_ModStart>, MB_PREDICTION_MODE mode, int up_available, int left_available, int right_available, int plane, uint8_t * left_col, uint8_t * above_data, 128 + 16 ) { DECLARE_ALIGNED_ARRAY ( 16, uint8_t, left_col, 64 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_row, 128 + 16 ) ; uint8_t * above_row = above_data + 16 ; uint8_t * const_above_row = above_data + 16 ; const int bs = 4 << tx_size ; if ( plane == 0 ) { frame_width = xd -> cur_buf -> y_width ; frame_height = xd -> cur_buf -> y_height ; } else { frame_width = xd -> cur_buf -> y_width ; frame_height = xd -> cur_buf ->",0
616,"<S2SV_ModStart> } else { if ( end >= pattern [ end - 1 ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ end - 1 ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ end - 1 ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ end - 1 ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ end - 1 ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ end - 1 ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n",0
617,<S2SV_ModStart> i_completed_io_list ) ; <S2SV_ModEnd> ei -> cur_aio_dio,0
618,"<S2SV_ModStart>! thresholds ) ; if (! thresholds -> primary ) { mutex_unlock ( & memcg -> thresholds_lock ) ; return ; } <S2SV_ModStart> synchronize_rcu ( ) ; mutex_lock ( & memcg -> thresholds_lock ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; size = 0 ; for ( i = 0 ; i < thresholds -> primary -> size ; i ++ ) { <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
619,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ion_handle <S2SV_ModEnd> * ion_handle_get_by_id ( <S2SV_ModStart> id ) ; mutex_lock ( & client -> lock ) ; handle = ion_handle_get_by_id_nolock <S2SV_ModEnd> ( client, <S2SV_ModStart> lock ) ; mutex_unlock ( & client -> lock ) ;",0
620,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 2 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit ( wb, <S2SV_ModEnd> cm -> frame_type <S2SV_ModStart> ; vpx_wb_write_bit ( wb, <S2SV_ModEnd> cm -> show_frame <S2SV_ModStart> ; vpx_wb_write_bit ( wb, <S2SV_ModEnd> cm -> error_resilient_mode <S2SV_ModStart> ; vpx_wb_write_bit ( wb, <S2SV_ModEnd> cm -> frame_type <S2SV_ModStart> ; vpx_wb_write_bit ( wb, <S2SV_ModEnd> cm -> show_frame <S2SV_ModStart> ; vpx_wb_write_bit ( wb, <S2SV_ModEnd> cm -> error_resilient_mode <S2SV_ModStart> ; vpx_wb_write_bit ( wb, <S2SV_ModEnd> cm -> frame_type <S2SV_ModStart> ; vpx_wb_",0
621,<S2SV_ModStart> ; if ( stroff < 0 ) stroff = strlen ( parsetime_error ) ; if ( stroff < 0 ) stroff = strlen ( parsetime_error ) ; if ( stroff >= strlen ( parsetime_error ) ) stroff = strlen ( parsetime_error ) ; if ( stroff >= strlen ( parsetime_error ) ) stroff = strlen ( parsetime_error ) ; if ( stroff >= 0 ) stroff = strlen ( parsetime_error ) ; if ( stroff >= strlen ( parsetime_error ) ) stroff = strlen ( parsetime_error ) ; if ( stroff >= strlen ( parsetime_error ) ) stroff = strlen ( parsetime_error ) ; if ( stroff >= strlen ( parsetime_error ) ) stroff = strlen ( parsetime_error ) ; if ( stroff >= 0 ) stroff = strlen ( parsetime_error ) ; if ( stroff >= strlen ( parsetime_error ) ) stroff = strlen ( parsetime_error ) ;,0
622,"<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart>'<S2SV_blank>') ; if ( p == NULL ) return ERROR_INVALID_SYNTAX ; p = osStrchr <S2SV_ModEnd> ( p + <S2SV_ModStart>'<S2SV_blank>') ; if ( q == NULL ) return ERROR_INVALID_SYNTAX ; m = q - p ; } else { q = p ; m = 0 ; } n = osStrlen ( queryString ) ; if ( n == 0 ) { n ++ ; if ( ( context -> bufferLen + n - m ) > HTTP_CLIENT_BUFFER_SIZE ) return ERROR_BUFFER_OVERFLOW ; osMemmove ( p + n, q, context -> buffer + context -> bufferLen + 1 - q ) ; } else { n ++ ; if ( ( context -> bufferLen + n - m ) > HTTP_CLIENT_BUFFER_SIZE ) return ERROR_BUFFER_OVERFLOW ; osStrncpy <S2SV_ModEnd> ( p +",0
623,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == TYPE_COMMENT ) arg -> type_comment = NEW_TYPE_COMMENT ( CHILD ( n, i + 1 ) ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( CHILD ( n, i + 1 ) ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( CHILD ( n, i + 1 ) ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( CHILD ( n, i + 1 ) ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( CHILD ( n, i + 1 ) ) ; if (! arg -> type_comment ) goto error ; i += 1 ;",0
624,<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd ->,0
625,"<S2SV_ModStart> error ; uint16_t n <S2SV_ModEnd> ; uint32_t status <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> (",0
626,<S2SV_ModStart> = 2 ; if ( i < gemsafe_cert_max ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_INTERNAL ) { r = SC_ERROR_INTERNAL ; return SC_ERROR_INTERNAL ; } } else { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_INTERNAL ) { r = SC_ERROR_INTERNAL ; return SC_ERROR_INTERNAL ; } } else { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_,0
627,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
628,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass, VALUE content ) { VALUE rb_schema ; VALUE errors ; VALUE rb_schema ; VALUE ctx ; xmlSchemaPtr schema ; xmlSchemaParserCtxtPtr ctx = xmlSchemaNewMemParserCtxt ( argc, argv ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif schema = xmlSchemaParse ( ctx ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSchemaFreeParserCtxt ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ;",0
629,"<S2SV_ModStart> { if ( strlen ( config_opt ) < 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option <S2SV_blank> name"" ) ; print_syntax ( ) ; return 1 ; } else if ( strlen ( config_opt ) < 2 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option <S2SV_blank> name"" ) ; print_syntax ( ) ; return 1 ; } else if ( strlen ( config_opt ) < 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option <S2SV_blank> name"" ) ; print_syntax ( ) ; return 1 ; } else { if ( strlen ( config_opt ) < 2 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option <S2SV_blank> name"" ) ; print_syntax ( ) ; return 1 ; } else if ( strlen ( config_opt ) < 2 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option <S2SV_blank> name"" ) ; print_syntax ( ) ; return 1 ; } else if ( strlen ( config_opt ) < 2 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option <S2SV_blank> name"" ) ; print_syntax ( ) ; return 1 ; }",0
630,<S2SV_ModStart> 2 ] ; out [ 3 ] = 0 ; <S2SV_ModStart> 2 ] ; out [ 0 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 1 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 2 ] = ptr [ ( x + 6 * state -> xsize ) / 2 ] ; out [ 3 ] = ptr [ ( x + 7 * state -> xsize ) / 2 ] ; out [ 4 ] = ptr [ ( x + 8 * state -> xsize ) / 2 ] ; out [ 0 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 2 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 3 ] = ptr [ ( x + 6 * state -> xsize ) / 2 ] ; out [ 4 ] = ptr [ ( x + 7 * state -> xsize ) / 2 ] ; out [ 5 ] = ptr [ ( x + 8 * state -> xsize ) / 2 ] ; out [ 3 ] = ptr [ ( x + 6 * state -> xsize ) / 2 ] ; out [ 4 ] = ptr [ (,0
631,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
632,"<S2SV_ModStart> ; err = - EBUSY <S2SV_ModEnd> ; if ( <S2SV_ModStart> goto out ; if ( type == PACKET_FANOUT_HASH || type == PACKET_FANOUT_LB || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_QM ) { err = - EINVAL ; goto out ; } rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) goto out ; atomic_long_set ( & rollover -> num, 0 ) ; atomic_long_set ( & rollover -> num_huge, 0 ) ; atomic_long_set ( & rollover -> num_failed, 0 ) ; rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover )",0
633,<S2SV_ModStart> -> nmi ) <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
634,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> utf8s_to_utf16s ( const <S2SV_ModStart> len > 0 ) { if ( len < 2 ) return - EINVAL ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> u >= PLANE_SIZE <S2SV_ModStart> { u -= PLANE_SIZE ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ;,0
635,"<S2SV_ModStart> EPROTONOSUPPORT ) { if (! need_pass ) { <S2SV_ModStart> ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds ->",0
636,"<S2SV_ModStart> ; status = ksz8851ReadReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, KSZ8851_RXFHSR ) ; if ( ( status & ( RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXFHSR_RXRF | RXFHSR_RXCE ) )!= 0 ) { if ( ( status & ( RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXRF | KSZ8851_RXCE ) ) == 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) )!= 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_R",0
637,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static stmt_ty <S2SV_ModEnd> ast_for_funcdef_impl ( struct <S2SV_ModStart> * n, asdl_seq * decorator_seq <S2SV_ModEnd>, int is_async <S2SV_ModStart>, int is_async, asdl_seq * returns <S2SV_ModStart> returns, type_comment, LINENO ( n ), n -> n_col_offset, c -> c_arena ) <S2SV_ModEnd> ; identifier name <S2SV_ModStart> returns, type_comment, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; if ( TYPE ( CHILD ( n, name_i + 4 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 4 ) ; body = ast_for_suite ( c, CHILD ( n, name_i + 5 ) ) ; if (! body ) return NULL ; if (! type_comment && NCH ( CHILD ( n, name_i + 4 ) > 1 ) type_comment = NULL ; if ( TYPE ( CHILD ( n, name_i + 5 ) ) == TYPE_COMMENT ) type_comment",0
638,"<S2SV_ModStart> ; pgd = swapper_pg_dir + pgd_index ( mm, 0xA0000 ) ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pmd = pmd_offset ( pmd, 0xA0000 ) ; split_huge_page_pmd ( mm, pmd ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ; pte = pte_offset_map_lock ( mm, pmd, 0xA0000, & ptl ) ; for ( i = 0 ; i < 32 ; i ++ ) { if ( pte_present ( * pte ) ) set_pte ( pte, pte_wrprotect ( * pte ) ) set_pte ( pte, pte_wrprotect ( * pte ) ) ; pte ++ ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
639,"<S2SV_ModStart> ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) )",0
640,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> IndexPacket index ; <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
641,"<S2SV_ModStart> bt_remote_bdaddr ) ; if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
642,<S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ),0
643,<S2SV_ModStart> ; if (! nl ) { if ( param -> data_size < param -> data_start + param -> data_size ) { param -> flags |= DM_BUFFER_FULL_FLAG ; goto out ; } <S2SV_ModStart> len < needed ) { if ( param -> data_size < param -> data_start + param -> data_size ) { param -> flags |= DM_BUFFER_FULL_FLAG ; goto out ; } <S2SV_ModStart> len < needed ) { if ( param -> data_size < param -> data_start + param -> data_size ) { param -> flags |= DM_BUFFER_FULL_FLAG ; goto out ; } param -> data_size = param -> data_start + needed ; nl -> next = 0 ; old_nl = nl ; event_nr = align_ptr ( nl -> name + strlen ( hc -> name ) + 1 ) ; nl = align_ptr ( nl -> name + strlen ( hc -> name ) + 1 ) ; },0
644,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd> QuantumInfo = DestroyQuantumInfo <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd> QuantumInfo = DestroyQuantumInfo <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd> QuantumInfo = DestroyQuantumInfo <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ; }",0
645,"<S2SV_ModStart> bfqq ) { if ( bfq_idle_slice_timer_body ( bfqq ) < 0 ) { bfq_queue_err ( bfqq, ""idle_slice_timer"" ) ; bfq_queue_err ( bfqq, ""idle_slice_timer_body"" ) ; bfq_queue_err ( bfqq, ""idle_slice_timer_body"" ) ; bfq_queue_err ( bfqq, ""idle_slice_timer_body"" ) ; bfq_queue_err ( bfqq, ""idle_slice_timer_body"" ) ; bfq_queue_err ( bfqq, ""idle_slice_timer"" ) ; bfq_queue_err ( bfqq, ""idle_slice_timer_body"" ) ; bfq_queue_err ( bfqq, ""idle_slice_timer_body"" ) ; bfq_queue_err ( bfqq, ""idle_slice_timer_body"" ) ; bfq_queue_err ( bfqq, ""idle_slice_timer_body"" ) ; return HRTIMER_NORESTART ; }",0
646,<S2SV_ModStart> += 1 ; if ( orderInfo -> orderType >= PRIMARY_DRAWING_ORDER_FIELD_COUNT ) return - 1 ; <S2SV_ModStart> orderType ] ; if ( orderInfo -> controlFlags & ORDER_TYPE_CHANGE ) return - 1 ;,0
647,<S2SV_ModStart> ; if (! ovl_dentry_lower ( old ) -> d_inode ) { if (! ovl_dentry_lower ( new ) -> d_inode ) { if (! ovl_dentry_lower ( old ) -> d_inode ) { if (! ovl_dentry_lower ( new ) -> d_inode ) { if (! ovl_dentry_lower ( old ) -> d_inode ) { if (! ovl_dentry_lower ( old ) -> d_inode ) { if (! ovl_dentry_lower ( new ) -> d_inode ) { if (! ovl_dentry_lower ( old ) -> d_inode ) { if (! ovl_dentry_lower ( new ) -> d_inode ) { if (! ovl_dentry_lower ( old ) -> d_inode ) { if (! ovl_dentry_lower ( old ) -> d_inode ) { if (! ovl_dentry_lower ( new ) -> d_inode ) { if (! ovl_dentry_lower ( old,0
648,"<S2SV_ModStart> int plane ; # if CONFIG_VP9_HIGHBITDEPTH switch ( bsize ) { case BLOCK_SIZE_8BIT : # endif vp9_foreach_transformed_block_in_plane ( xd, bsize, visit, arg ) ; break ; case BLOCK_SIZE_8BITDEPTH : # endif vp9_foreach_transformed_block_in_plane ( xd, bsize, visit, arg ) ; break ; case BLOCK_SIZE_8BITDEPTH : # if CONFIG_VP9_HIGHBITDEPTH vp9_foreach_transformed_block_in_plane ( xd, bsize, visit, arg ) ; # endif vp9_foreach_transformed_block_in_plane ( xd, bsize, visit, arg ) ; break ; case BLOCK_SIZE_8BITDEPTH : # endif vp9_foreach_transformed_block_in_plane ( xd, bsize, visit, arg ) ; break ; case BLOCK_SIZE_8BITDEPTH : # if CONFIG_VP9_HIGHBITDEPTH vp9_foreach_transformed_block_in_plane ( xd, bsize, visit, arg ) ; # else vp9_foreach_transformed_",0
649,"<S2SV_ModStart> void nonrd_pick_sb_modes ( VP9_COMMON * const cm, TileDataEnc * tile_data, MACROBLOCKD * const xd, int mi_row, int mi_col, int * rate, int64_t * dist, BLOCK_SIZE bsize ) { <S2SV_ModEnd> set_offsets ( cpi <S2SV_ModStart>, mi_row, mi_col, rate, dist, bsize ) ; xd -> mi [ 0 ] -> mbmi. sb_type = bsize ; if ( frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; } <S2SV_ModEnd> duplicate_mode_info_in_sb ( cm",0
650,<S2SV_ModStart> = NULL ; if ( reader. superblock == NULL ) { reader. superblock = & mysofa_default_superblock ; } else if ( reader. superblock == NULL ) { reader. superblock = & mysofa_default_superblock ; } else if ( reader. superblock == NULL ) { reader. superblock = & mysofa_default_superblock ; } else if ( reader. superblock == NULL ) { reader. superblock = & mysofa_default_superblock ; } else { if ( reader. superblock == NULL ) { reader. superblock = & mysofa_default_superblock ; } else if ( reader. superblock == NULL ) { reader. superblock = & mysofa_default_superblock ; } else if ( reader. superblock == NULL ) { reader. superblock = & mysofa_default_superblock ; } else if ( reader. superblock == NULL ) { reader. superblock = NULL ; },0
651,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; break ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; break ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; break ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; break ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; ThrowReaderException ( CorruptImageError, ""Im",0
652,"<S2SV_ModStart> = 1 ; memset ( pMap -> ranges, 0, sizeof ( MappedRange ) ) ;",0
653,<S2SV_ModStart> return __this_address ; if ( be32_to_cpu ( dip -> di_nblocks ) > mp -> m_sb. sb_inodesize ) return __this_address ; if ( be32_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) > be64_to_cpu ( dip -> di_nblocks ) ) return __this_address ; if ( be32_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) > mp -> m_sb. sb_inodesize ) return __this_address ; if ( be32_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) > be64_to_cpu ( dip -> di_nblocks ) ) return __this_address ; if ( be32_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) > mp -> m_sb. sb_inodesize ) return __this_address ; if (,0
654,"<S2SV_ModStart> ; if ( ( ( flags & VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_FORCE_GF ) ) || ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8",0
655,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
656,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
657,"<S2SV_ModStart>, const u_char * <S2SV_ModEnd> pptr, u_int <S2SV_ModStart> len ) ; if ( len < 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> ipv6 <S2SV_blank> address"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( len < 6 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> ipv6 <S2SV_blank> address"" ) ) ; break ; } if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> ipv6 <S2SV_blank> address"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> ipv6 <S2SV_blank> address"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( len < 6 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> ipv6 <S2SV_blank> address"" ) ) ; break ; } if ( len < 6 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> ipv6 <S2SV_blank> address",0
658,"<S2SV_ModStart> ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</table>"" ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""</tr>""",0
659,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
660,"<S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ) ; if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else { if ( isRemoveLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ; } else { if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else { if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else { if ( isRemoveLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ; } else { if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else { if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else { if",0
661,"<S2SV_ModStart> if ( config -> desc. bNumInterfaces > USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, nalts, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; } else if ( config -> desc. bNumInterfaces > USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, nalts, USB_MAXINTERFACES ) ; nalts = USB_MAXINTERFACES ; } else if ( config -> desc. bNumInterfaces > USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed:",0
662,"<S2SV_ModStart> ; if ( info -> count < 1 ) return - EINVAL ; access = info -> access == 0? SNDRV_CTL_ELEM_ACCESS_READWRITE : ( info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ) ; if ( info -> count < 1 ) return - EINVAL ; access = info -> access == 0? SNDRV_CTL_ELEM_ACCESS_READWRITE : ( info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ) ; info -> id. numid = 0 ; memcpy ( & kctl. id, & info -> id, sizeof (",0
663,"<S2SV_ModStart>. header. size, <S2SV_ModEnd> 0, 0",0
664,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
665,"<S2SV_ModStart> 16 ) ; if ( xd -> mode_info_context -> mbmi. mode == DC_PRED ) { error16x16 = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; } else if ( xd -> mode_info_context -> mbmi. mode == TM_PRED ) { error16x16 = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; } else if ( xd -> mode_info_context -> mbmi. mode == B_PRED ) { xd -> mode_info_context -> mbmi. mode = B_PRED ; } else { error16x16 = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_",0
666,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH ) ; if ( macCompAddr ( & interface -> macAddr, & MAC_UNSPECIFIED_ADDR ) ) { temp = enc624j600ReadReg ( interface, ENC624J600_MAADR1 ) ; interface -> macAddr. w [ 0 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 1 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 2 ] = letoh16 ( temp ) ; macAddrToEui64 ( & interface -> macAddr, & interface -> eui64 ) ; } else { temp = htole16 ( interface -> macAddr. w [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR1, temp ) ; temp = htole16 ( interface -> macAddr. w [ 1 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR2, temp ) ; temp =",0
667,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; vsnprintf ( start, maxlen, format, argptr ) ; va_end ( argptr ) ; start [ maxlen - 1 ] = 0 ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header ) ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header ) ; <S2SV_ModEnd> return ; }",0
668,<S2SV_ModStart> alg_priv ) { if ( ctx -> priv -> iface ) { if ( ctx -> priv -> iface -> destroy ) ctx -> priv -> iface -> destroy ( ctx -> priv -> iface ) ; ctx -> priv -> iface = NULL ; ctx -> priv -> name = NULL ; ctx -> priv = NULL ; } else if ( ctx -> priv -> name ) { if ( ctx -> priv -> name ) ctx -> priv -> name -> destroy ( ctx -> priv -> name ) ; } else if ( ctx -> priv -> iface ) { if ( ctx -> priv -> iface ) ctx -> priv -> iface -> destroy ( ctx -> priv -> iface ) ; ctx -> priv -> iface = NULL ; ctx -> priv -> name = NULL ; ctx -> priv = NULL ; res = VPX_CODEC_OK ; } else if ( ctx -> priv -> name ) { if ( ctx -> priv -> name ) ctx -> priv -> name -> destroy ( ctx -> priv -> name ) ; } else if ( ctx -> priv -> iface ) { if ( ctx -> priv -> iface ) ctx -> priv -> iface -> destroy ( ctx -> priv -> iface ) ; ctx -> priv -> iface = NULL ; ctx -> priv -> name = NULL ; ctx -> priv = NULL ; },0
669,"<S2SV_ModStart> { sf -> <S2SV_ModEnd> adaptive_rd_thresh = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> use_square_partition_only =! <S2SV_ModStart> ; sf -> <S2SV_ModEnd> less_rectangular_check = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> = vp9_frame_is_boosted ( cpi )? USE_FULL_RD : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = DISABLE_ALL_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; sf -> mode_skip_start = 10 ; sf -> adaptive_pred_interp_filter = 1 ; sf -> recode_loop = ALLOW_RECODE_KFARFGF ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] =",0
670,"<S2SV_ModStart> ; int ret ; if ( ts [ h ]. poll_count < 0 ) { APPL_TRACE_ERROR ( ""poll <S2SV_blank> ret <S2SV_blank> -1, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; } ret = select ( pfds, ts [ h ]. poll_count, - 1 ) ; if ( ret == - 1 ) { APPL_TRACE_ERROR ( ""poll <S2SV_blank> ret <S2SV_blank> -1, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; } if ( ret == 0 ) { APPL_TRACE_ERROR ( ""poll <S2SV_blank> ret <S2SV_blank> -1, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; } if ( ret == - 1 ) { APPL_TRACE_ERROR ( ""poll <S2SV_blank> ret <S2SV_blank> -1, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; }",0
671,"<S2SV_ModStart> ; int goodsize ; if ( inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) { luaD_reallocstack ( L, goodsize, 0 ) ; goodsize = LUAI_MAXSTACK ; } else { if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) { luaD_reallocstack ( L, goodsize, 0 ) ; goodsize = LUAI_MAXSTACK ; } else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) { luaD_reallocstack ( L, goodsize, 0 ) ; goodsize = LUAI_MAXSTACK ; } else { if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) { luaD_reallocstack ( L, goodsize, 0 ) ; goodsize = LUAI_MAXSTACK ; }",0
672,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
673,"<S2SV_ModStart> n ) ; <S2SV_ModEnd> int quote = <S2SV_ModStart> * s = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; char buf [ 128 ] ; char buf [ 128 ] ; char buf [ 128 ] ; s = _PyUnicode_AsString ( s ) ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", s ) ; ast_error ( n, buf ) ; Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { Py_DECREF ( type ) ; ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } # endif return NULL ; } # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { Py_DECREF ( type ) ; Py_DECREF ( type ) ; Py_DE",0
674,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> ( ""encoding-mode"", option_name ) == 0 || strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) { svc_log ( svc_ctx",0
675,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
676,"<S2SV_ModStart> ) ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; mb_index = 0 ; fprintf ( mvs, ""Mb <S2SV_blank> mv <S2SV_blank> ref <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. ref_frame ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index ++ ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs,",0
677,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
678,,1
679,"<S2SV_ModStart> ) ) { if ( imp_dbh -> pmysql ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; } else { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; if ( imp_dbh -> pmysql ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; } else { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; }",0
680,<S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> size ) ||! size ),0
681,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; proto_tree_add_item ( ppi_tree, hf_ppi_header_version, tvb, offset, 1, ENC_LITTLE_ENDIAN, & phdr ) ; proto_tree_add_item ( ppi_tree, hf_ppi_header_version, tvb, offset, 1, ENC_LITTLE_ENDIAN, & phdr ) ; proto_tree_add_item ( ppi_tree, hf_ppi_header_version, tvb, offset, 1, ENC_LITTLE_ENDIAN, & phdr ) ; proto_tree_add_item ( ppi_tree, hf_ppi_header_version, tvb, offset, 1, ENC_LITTLE_ENDIAN, & phdr ) ; proto_tree_add_item ( ppi_tree, hf_ppi_header_version, tvb, offset, 1, ENC_LITTLE_ENDIAN, & phdr ) ; proto_tree_add_item ( ppi_tree, hf_ppi_",0
682,"<S2SV_ModStart> * fp ; size_t alloc_size ; if ( hdrlen + initlen + 1 > alloc_size ) alloc_size = hdrlen + initlen + 1 ; if ( init == SDS_NOINIT ) init = NULL ; else if (! init ) memset ( sh, 0, alloc_size ) ; s = ( char * ) sh + hdrlen ; fp = ( ( unsigned char * ) s ) - 1 ; switch ( type ) { case SDS_TYPE_8 : { SDS_HDR_VAR ( 8, s ) ; sh -> len = initlen ; sh -> alloc = initlen ; * fp = type ; break ; } case SDS_TYPE_16 : { SDS_HDR_VAR ( 16, s ) ; sh -> alloc = initlen ; * fp = type ; break ; } case SDS_TYPE_32 : { SDS_HDR_VAR ( 32, s ) ; sh -> len = initlen ; sh -> alloc = initlen ; * fp = type ; break ; } case SDS_TYPE_64 : { SDS_HDR_VAR ( 64, s ) ; sh -> alloc = initlen",0
683,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> UINT32 tempWidth ; if ( <S2SV_ModEnd> context -> ChromaSubsamplingLevel <S2SV_ModStart> -> ChromaSubsamplingLevel ) { src = data + ( context -> height - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * context -> width ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * context -> width ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * context -> width ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * context -> width ; } else { src = data + ( context -> height - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * context -> width ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * context -> width ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * context -> width ; aplane = context -> priv -> PlaneBuffers [,0
684,"<S2SV_ModStart> ) return ERR_PTR ( <S2SV_ModEnd> - EINVAL ) <S2SV_ModStart> - EINVAL ) ; if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } * ( ++ top ) = invert ; continue ; case '!' : if (! is_not ( next ) ) break ; invert =! invert ; continue ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; }",0
685,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int calc_iframe_target_size_one_pass_cbr ( const VP9EncoderConfig <S2SV_ModEnd> * cpi ) <S2SV_ModStart> { const RATE_CONTROL <S2SV_ModEnd> * rc = <S2SV_ModStart> int target = ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> > INT_MAX ) <S2SV_ModStart> INT_MAX : ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> { target = ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> > INT_MAX? <S2SV_ModStart> int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> int ) ( cpi,0
686,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_bit_depth_t <S2SV_ModEnd> read_tx_mode ( vpx_reader <S2SV_ModStart> * r ) { vpx_bit_depth_t <S2SV_ModEnd> tx_mode = vpx_read_literal <S2SV_ModStart> 2 ) ; vpx_bit_depth_t <S2SV_ModEnd> tx_mode += vp9_read_bit <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r ),0
687,"<S2SV_ModStart> : # line 1047 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 1047 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1047 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1047 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1047 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1047 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1047 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1047 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1047 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1047 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1047 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1047 <S2SV_ModEnd> ""re_grammar.y"" { yr",0
688,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const xd = args -> xd ; <S2SV_ModEnd> TOKENEXTRA * * <S2SV_ModStart> 32 ] ; MACROBLOCK * const p = & cpi -> mb. plane [ plane ] ; struct macroblockd_plane * const pd = & xd -> plane [ plane ] ; MB_MODE_INFO * const mbmi = & xd -> mi [ 0 ] -> mbmi ; const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const int16_t * scan, * nb ; const scan_order * so ; const int ref = is_inter_block ( mbmi ) ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = cpi -> fc. coef_counts [ tx_size ] [ type ] [ ref ] ; vp9_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; const uint8_t * const band = get_band",0
689,"<S2SV_ModStart> ; SrcList * pSrc ; if ( pSelect -> pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = & pSrc -> a [ i ] ; if ( pItem -> pTab == p -> pTab ) { renameTokenFind ( pWalker -> pParse, p, pItem -> zName ) ; } }",0
690,<S2SV_ModStart> shmflg & SHM_RND ) { if ( ( addr & ( shmlba - 1 ) ) == ( shmlba - 1 ) ) { if ( ( shmflg & SHM_RND )!= ( shmlba - 1 ) ) { if ( ( addr & ( shmlba - 1 ) )!= ( shmlba - 1 ) ) { if ( ( shmflg & SHM_RND )!= ( shmlba - 1 ) ) { err = - EINVAL ; goto out ; } else { if ( ( addr & ( shmlba - 1 ) )!= ( shmlba - 1 ) ) { if ( ( shmflg & SHM_RND )!= ( shmlba - 1 ) ) { if ( ( shmflg & SHM_RND )!= ( shmlba - 1 ) ) { if ( ( shmflg & SHM_RND )!= ( shmlba - 1 ) ) { err = - EINVAL ; goto out ; } else { if ( ( shmflg & SHM_RND )!= ( shmlba - 1 ) ) { if (,0
691,"<S2SV_ModStart> ; serv = svc_create ( <S2SV_ModEnd> & nfs4_callback_program, <S2SV_ModStart> sv_ops ) ; if (! serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; }",0
692,"<S2SV_ModStart> PointZZ_p * point, const CurveZZ_p * curve ) { PointZZ_p R0, R1 ; mpz_inits ( R0. x, R0. y, tmp. x, tmp. y, NULL ) ; mpz_inits ( R1. x, R1. y, tmp. x, tmp. y, NULL ) ; mpz_init_set ( R0. x, R0. x ) ; mpz_init_set ( R0. y, R0. y ) ; mpz_clears ( R0. x, R0. y, R1. x, R1. y, R0. x, R0. y, tmp. x, tmp. y, NULL ) ; mpz_inits ( R1. x, R1. y, tmp. x, tmp. y, NULL ) ; mpz_init_set ( R0. x, R0. x ) ; mpz_init_set ( R0. y, R1. y ) ; mpz_clears ( R0. x, R0. y, R1. x, R1. y, R",0
693,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
694,"<S2SV_ModStart> = fd ; switch ( header -> cmsg_level ) { case SOL_SOCKET : case SCM_RIGHTS : ret = sendmsg ( socket -> fd, & msg, MSG_DONTWAIT ) ; break ; case SCM_READ : ret = sendmsg ( socket -> fd, & msg, MSG_DONTWAIT ) ; break ; case SCM_WRITE : ret = sendmsg ( socket -> fd, & msg, MSG_DONTWAIT ) ; break ; case SCM_READ : ret = sendmsg ( socket -> fd, & msg, MSG_DONTWAIT ) ; break ; case SCM_READ : ret = sendmsg ( socket -> fd, & msg, MSG_DONTWAIT ) ; break ; case SCM_READ : ret = sendmsg ( socket -> fd, & msg, MSG_DONTWAIT ) ; break ; case SCM_WRITE : ret = sendmsg ( socket -> fd, & msg, MSG_DONTWAIT ) ; break ; case SCM_READ : ret = sendmsg ( socket -> fd, & msg, MSG_DONTWAIT ) ; break ; case SCM_READ : ret = sendmsg ( socket -> fd, & msg,",0
695,"<S2SV_ModStart> s ) { if ( s < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
696,"<S2SV_ModStart> ; for ( const xmlAttr * xIter = crm_first_attr ( xml ) ; xIter!= NULL ; xIter = xIter -> next ) { const char * prop_name = ( const char * ) xIter -> name ; if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 && __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; }",0
697,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> const SvcInternal * <S2SV_ModStart> return ( const SvcInternal <S2SV_ModEnd> * ) svc_ctx <S2SV_ModStart> -> internal ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
698,"<S2SV_ModStart> mq_ops ) { list_for_each_entry_safe ( rq, n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; BUG_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error ) ; } if ( q -> mq_ops ) spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ; if ( q -> mq_ops ) spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ; flush_rq -> tag = - 1 ; } running = & fq -> flush_queue [ fq -> flush_running_idx ] ; BUG_ON (! q -> mq_ops ) ; elv_completed_request ( q, flush_rq ) ; if (! q -> mq_ops ) spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ;",0
699,"<S2SV_ModStart> { int length ; struct stream packet = * s ; <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & packet <S2SV_ModEnd> ) ; in_uint8s <S2SV_ModStart> length ) ; if (! s_check ( s ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> params <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; return RD_FALSE ; } <S2SV_ModStart> length ) ; if (! s_check ( s ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> params <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; if (! s_check ( s ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> params <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; return RD_FALSE ; }",0
700,"<S2SV_ModStart> ) ; } if ( hkey. type == HASH_KEY_IS_STRING ) { zend_hash_update ( params, hkey. str, hkey. len, ( void * ) & tmp, sizeof ( zval * ), ( void * ) & tmp, sizeof ( zval * ), ( void * ) & ptr, sizeof ( zval * ), ( void * ) & ptr, sizeof ( zval * ), ( void * ) & zdata_ptr ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. str, hkey. len, ( void * ) & tmp, sizeof ( zval * ), ( void * ) & ptr, sizeof ( zval * ), ( void * ) & ptr, sizeof ( zval * ), ( void * ) & ptr, sizeof ( zval * ), ( void * ) & zdata_ptr ) ; * current_param = tmp ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. num, hkey. len, ( void *",0
701,<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> = VPX_IMG_FMT_I420 ; if ( only_420 ) { _y4m -> vpx_fmt = VPX_IMG_FMT_GIF ; _y4m -> vpx_bps = 12 ; } else { _y4m -> vpx_fmt = VPX_IMG_FMT_GIF ; _y4m -> vpx_bps = 12 ; } <S2SV_ModStart> = VPX_IMG_FMT_I420 ; if ( _y4m -> vpx_fmt == VPX_IMG_FMT_GIF ) { _y4m -> vpx_fmt = VPX_IMG_FMT_GIF ; } else { if ( _y4m -> vpx_fmt == VPX_IMG_FMT_GIF ) { _y4m -> vpx_fmt = VPX_IMG_FMT_GIF ; } else { _y4m -> vpx_fmt = VPX_IMG_FMT_GIF ;,0
702,"<S2SV_ModStart> obj * otmp ; if ( strlen ( buf ) >= sizeof ( struct obj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } if ( strlen ( buf ) >= sizeof ( struct obj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } if ( strlen ( buf ) >= sizeof ( struct obj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } if ( strlen ( buf ) >= sizeof ( struct obj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } if ( strlen ( buf ) >= sizeof ( struct obj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
703,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> 0 ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, sBlk. s. directory_table_end ) == FALSE ) return FALSE ; if ( read_uids_guids ( & table_start ) == FALSE ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start",0
704,"<S2SV_ModStart> * createenv ( <S2SV_ModEnd> const struct rule <S2SV_ModStart> -> root ) ; if ( rule -> options & KEEPENV ) { extern char * * environ ; size_t i ; env = malloc ( sizeof ( * env ) ) ; if (! environ ) err ( 1, NULL ) ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; size_t len ; char keybuf [ 1024 ] ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } else if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; size_t len ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } }",0
705,"<S2SV_ModStart> -> seg ; vpx_clear_system_state ( ) ; vpx_memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vpx_memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vpx_memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vpx_memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vpx_memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vpx_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> base_qindex, in_frame_q",0
706,"<S2SV_ModStart> ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 5 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"", stmt_type, ClassDef_fields, 5 ) ; if (! ClassDef_type ) return 0",0
707,"<S2SV_ModStart> } logfile_fd = open ( log_path, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IWGRP | S_IROTH ) ; if ( logfile_fd == INVALID_FD ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) ) ; is_logging = false ; return ; } write ( logfile_fd, ""btsnoop\\0\\0\\0\\1\\0\\0\\x3\\xea"", 16 ) ;",0
708,<S2SV_ModStart> curY >= p -> height <S2SV_ModEnd> ) { context <S2SV_ModStart> curY >= p -> height <S2SV_ModEnd> ) { context <S2SV_ModStart> curY >= p -> height <S2SV_ModEnd> ) { context <S2SV_ModStart> curY >= p -> height <S2SV_ModEnd> ) { context <S2SV_ModStart> curY >= p -> height <S2SV_ModEnd> ) { context <S2SV_ModStart> curY >= p -> height <S2SV_ModEnd> ) { context <S2SV_ModStart> curY >= p -> height <S2SV_ModEnd> ) { context <S2SV_ModStart> curY >= p -> height <S2SV_ModEnd> ) { context <S2SV_ModStart> curY >= p -> height <S2SV_ModEnd> ) { context <S2SV_ModStart> curY >= p -> height <S2SV_ModEnd> ) { context <S2SV_ModStart> curY >= p -> height <S2SV_ModEnd> ) { context <S2SV_ModStart> curY >= p -> height <S2SV_ModEnd> ) { context <S2SV_ModStart> curY >= p -> height <S2SV_ModEnd> ) { context <S2SV_ModStart> curY >= p -> height <S2SV_ModEnd> ) { context <S2SV_ModStart> curY >= p -> height <S2SV_ModEnd> ) { context <S2SV_ModStart> curY >= p -> height <S2SV_ModEnd> ) { context <S2SV_ModStart> curY >= p -> height <S2SV_ModEnd> ) { context <S2SV_ModStart> curY >= p -> height <S2SV_ModEnd> ) { context,0
709,<S2SV_ModStart> ) ; } ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ;,0
710,"<S2SV_ModStart> goto screwup ; if ( sizeof ( buf ) > sizeof ( visbuf ) ) { run_err ( ""too <S2SV_blank> large <S2SV_blank> buffer"" ) ; exit ( 1 ) ; } if ( sizeof ( buf ) > sizeof ( visbuf ) ) { run_err ( ""too <S2SV_blank> large <S2SV_blank> buffer"" ) ; exit ( 1 ) ; } if ( sizeof ( buf ) > sizeof ( visbuf ) ) { run_err ( ""too <S2SV_blank> large <S2SV_blank> buffer"" ) ; exit ( 1 ) ; } if ( sizeof ( buf ) > sizeof ( buf ) - sizeof ( visbuf ) ) { run_err ( ""too <S2SV_blank> large <S2SV_blank> buffer"" ) ; exit ( 1 ) ; } if ( sizeof ( buf ) > sizeof ( buf ) ) { run_err ( ""too <S2SV_blank> large <S2SV_blank> buffer"" ) ; exit ( 1 ) ; } if ( sizeof ( buf ) > sizeof ( buf ) ) { run_err ( ""too <S2SV_blank> large <S2SV_blank> buffer"" ) ; exit ( 1 ) ; } if ( sizeof ( buf ) > sizeof ( buf ) - sizeof ( buf ) ) { run_err ( ""too <S2SV_blank> large <S2SV_blank> buffer"" ) ; exit ( 1 ) ; } if ( sizeof ( buf ) > sizeof (",0
711,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, <S2SV_ModEnd> * t, <S2SV_ModStart> * t, <S2SV_ModEnd> * StartClean ; <S2SV_ModStart> * StartClean ; <S2SV_ModEnd> SetDefaults ( ) <S2SV_ModStart> = 0 ; outpos = outputbuffer ; outpos += sprintf ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", s, t, TERMCHAR ) ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } if ( * s == '0' && s [ 1 ] == ']' ) { identification = 1 ; if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject",0
712,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> static u32 ip_idents_hashrnd <S2SV_ModStart> ip_idents_hashrnd __read_mostly ; <S2SV_ModEnd> u32 hash, <S2SV_ModStart> id ; hash = jhash_3_32 ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, ( __force u32 ) iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs ) <S2SV_ModEnd> ; iph ->",0
713,"<S2SV_ModStart> expr_ty step ; int res ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower ) ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id ( obj, & PyId_upper ) ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id ( obj, &",0
714,"<S2SV_ModStart> write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs ) <S2SV_ModStart> * probs ) { vpx_write_token <S2SV_ModEnd> ( w,",0
715,"<S2SV_ModStart> ; if ( getpwnam ( ctl -> pw ) < 0 ) { warn ( ""setpwnam <S2SV_blank> failed"" ) ; # endif printf ( _ ( ""Finger <S2SV_blank> information <S2SV_blank> *NOT* <S2SV_blank> changed. <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ) ; return - 1 ; }",0
716,"<S2SV_ModStart> int err ; list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; if ( iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return - EOPNOTSUPP ; } <S2SV_ModStart> err_delete ; } list_for_each_entry ( iter, & alink -> dscp_map, list ) { cmask = iter -> mask & mask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return - EOPNOTSUPP ; goto err_delete ; } list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; if ( iter -> val & cmask ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" )",0
717,"<S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; <S2SV_ModEnd> if ( pass <S2SV_ModStart>. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
718,"<S2SV_ModStart> g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""export-desktop-%s.pkl"", g_strndup ( tmpfile_name, strlen ( "".service"" ) ) ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""export-desktop-%s.pkl"", g_strndup ( tmpfile_name, strlen ( "".service"" ) ) ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""export-desktop-%s.pkl"", g_strndup ( tmpfile_name, strlen ( "".service"" ) ) ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""export-desktop-%s.pkl"", g_strndup ( tmpfile_name, strlen ( "".service"" ) ) ) ; g_autoptr ( GOutputStream ) out_",0
719,<S2SV_ModStart> { VP9_COMMON * const cm = & pbi -> common ; const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_,0
720,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9Decoder <S2SV_ModEnd> * vp9_decoder_create ( <S2SV_ModStart> ) ) { const VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if (! pbi ) return NULL ; vp9_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 1 ; vpx_initialize_dec ( ) ; vpx_rtcd ( ) ; } cm -> error. setjmp = 1 ; vpx_memset ( & pbi -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; pbi -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_init ( & pbi -> lf_worker",0
721,"<S2SV_ModStart> ) { GF_LOG <S2SV_ModEnd> ( GF_LOG_ERROR, <S2SV_ModStart> GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in",0
722,<S2SV_ModStart> req ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> ; if ( opt == NULL || opt -> opt. cipso == 0 ) return ; <S2SV_ModEnd> cipso_v4_delopt ( & <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
723,"<S2SV_ModStart> * tokens, vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> i ++ ] <S2SV_ModEnd> ; if (",0
724,<S2SV_ModStart> ; if ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) && ( flags & VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9,0
725,"<S2SV_ModStart> 0 ) { if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_tag ( asn1, & t, & contents, & clen, & asn1, & len ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; ret = decode_atype ( & t, contents, clen, elemtype, elem ) ;",0
726,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i,0
727,"<S2SV_ModStart> int frame_max_bits ( const RATE_CONTROL * rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) rc -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf ->",0
728,"<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN <S2SV_ModStart> MIF_MAGICLEN ] ; JAS_DBGLOG ( 10, ( ""header <S2SV_blank> line: <S2SV_blank> len=%d; <S2SV_blank> %s\\n"", strlen ( magicbuf ), magicbuf ) ) ; if (! jas_stream_read ( in, buf, sizeof ( buf ) ) ) { jas_eprintf ( ""error: <S2SV_blank> bad <S2SV_blank> signature\\n"" ) ; goto error ; } if ( jas_stream_read ( in, buf, sizeof ( buf ) )!= sizeof ( buf ) ) { jas_eprintf ( ""error: <S2SV_blank> header <S2SV_blank> line: <S2SV_blank> len=%d; <S2SV_blank> %s\\n"", strlen ( buf ), buf ) ) ; goto error ; } JAS_DBGLOG ( 10, ( ""header <S2SV_blank> line: <S2SV_blank> len=%d; <S2SV_blank> %s\\n"", strlen ( buf ), buf ) ) ; if (! jas_stream_read ( in, buf, sizeof ( buf ) )!= sizeof ( buf ) ) { jas_eprintf ( ""error: <S2SV_blank> header <S2SV_blank> line: <S2SV_blank> len=%d;",0
729,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, MACROBLOCK * const x, MACROBLOCKD * const xd, <S2SV_ModEnd> int mi_row, <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCKD * const xd = & x -> e_mbd ; MACROBLOCK * const x = & xd -> mb ; MACROBLOCKD * const xd = & x -> e_mbd <S2SV_ModEnd> ; MACROBLOCKD * <S2SV_ModStart> -> common ; <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> -> common ; <S2SV_ModEnd> MACROBLOCKD * const <S2SV_ModStart> -> common ; <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> -> common ; <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> -> common ; <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> -> common ; <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> -> common ; <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> -> common ; <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> -> common ; <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> -> common ; <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> -> common ; <S2SV_ModEnd> VP9",0
730,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf,0
731,"<S2SV_ModStart> { uint32_t value <S2SV_ModEnd> ; int position <S2SV_ModStart>, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) position = get_bits_count ( gbc ) ; zeroes = i = 0 ; while ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR",0
732,"<S2SV_ModStart> ) ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmcs_read32 ( VM_INSTRUCTION_ERROR ) ) ; return 1 ; } <S2SV_ModEnd> switch ( exit_reason <S2SV_ModStart> ) ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmcs_read32 ( VM_INSTRUCTION_ERROR ) ) ; return 1 ; } <S2SV_ModEnd> switch ( exit_reason <S2SV_ModStart> ) ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmcs_read32 ( VM_INSTRUCTION_ERROR ) ) ; return 1 ; } if ( exit_reason == EXIT_REASON_NMI_WINDOW ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmcs12 -> guest_cr0 & X86_CR0_TS ) ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__",0
733,"<S2SV_ModStart> { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c )",0
734,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> http_contentlen. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, <S2SV_ModEnd> packet -> http_num_headers",0
735,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
736,"<S2SV_ModStart> ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) > entries ) ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) > entries ) ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) > entries ) ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) > entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) > entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) > entries ) ; assert ( ( int ) floor ( pow ( ( float )",0
737,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> dds_info -> width - x ), MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> dds_info -> height - y ), exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBShort ( image ) ; bits = ReadBlobLSBLong ( image ) ; CalculateColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { if ( ( x + j ) < ( ssize_t ) dds_info -> width && ( y + j ) < ( ssize_t ) dds_info -> height ) { for ( i = 0 ; i < 4 ; i ++ ) { if ( ( j + i ) < ( ssize_t ) dds_info -> width && ( j + i ) < ( ssize_t ) dds_info -> height ) { if ( ( j + i ) < ( ssize_t ) dds_info -> width && ( j + i ) < ( ssize_t )",0
738,"<S2SV_ModStart> ; } if ( iph -> optlen < sizeof ( struct iphdr ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } if ( iph -> optlen < sizeof ( struct iphdr ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } if ( iph -> optlen < sizeof ( struct iphdr ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } if ( iph -> optlen < sizeof ( struct iphdr ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } if ( iph -> optlen < sizeof ( struct iphdr ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } if",0
739,"<S2SV_ModStart> length ) { int ret ; if ( length < 0 ) { ERROR ( ""ack <S2SV_blank> failed <S2SV_blank> (%s)"", strerror ( errno ) ) ; ret = recv ( common -> ctrl_fd, buffer, length, MSG_NOSIGNAL ) ; if ( ret < 0 ) { ERROR ( ""ack <S2SV_blank> failed <S2SV_blank> (%s)"", strerror ( errno ) ) ; ret = recv ( common -> ctrl_fd, buffer, length, MSG_NOSIGNAL ) ; if ( ret < 0 ) { ERROR ( ""ack <S2SV_blank> failed <S2SV_blank> (%s)"", strerror ( errno ) ) ; if ( errno == EINTR ) { ret = recv ( common -> ctrl_fd, buffer, length, MSG_NOSIGNAL ) ; if ( ret < 0 ) { ERROR ( ""ack <S2SV_blank> failed <S2SV_blank> (%s)"", strerror ( errno ) ) ; ret = recv ( common -> ctrl_fd, buffer, length, MSG_NOSIGNAL ) ; if ( ret < 0 ) { ERROR ( ""ack <S2SV_blank> failed <S2SV_blank> (%s)"", strerror ( errno ) ) ; if ( errno == EINTR ) { ret = recv ( common -> ctrl_fd, buffer, length, MSG_NOSIGNAL )",0
740,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
741,"<S2SV_ModStart> cfg ) { <S2SV_ModEnd> memset ( cfg <S2SV_ModStart> i ; } if ( strncmp ( argv [ i ], ""authfile="", 9 ) == 0 ) cfg -> auth_file = argv [ i ] + 9 ; if ( strncmp ( argv [ i ], ""authpending_file="", 17 ) == 0 ) cfg -> authpending_file = argv [ i ] + 17 ; if ( strncmp ( argv [ i ], ""origin="", 6 ) == 0 ) cfg -> origin = argv [ i ] + 6 ; if ( strncmp ( argv [ i ], ""prompt="", 6 ) == 0 ) cfg -> prompt = argv [ i ] + 6 ; if ( strncmp ( argv [ i ], ""appid="", 6 ) == 0 ) cfg -> appid = argv [ i ] + 6 ; if ( strncmp ( argv [ i ], ""prompt="", 6 ) == 0 ) cfg -> prompt = argv [ i ] + 6 ; if ( strncmp ( argv [ i ], ""username="", 6 ) == 0 ) cfg -> username = argv [ i ] + 6 ; if ( strncmp ( argv [ i ], ""password="",",0
742,"<S2SV_ModStart> ( outpos, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; outpos += sprintf ( outpos, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; outpos += sprintf ( outpos, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; outpos += sprintf ( outpos, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.",0
743,"<S2SV_ModStart> ; WLog_VRB ( AUTODETECT_TAG <S2SV_ModEnd>, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" )",0
744,<S2SV_ModStart> ; # endif # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # else # endif # endif # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # else # endif # endif # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENO,0
745,"<S2SV_ModStart> ( pvc ) ; dev = alloc_netdev ( 0, ""pvceth%d"", ether_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if ( type == ARPHRD_ETHER ) dev = alloc_netdev ( 0, ""pvceth%d"", pvc_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if ( type == ARPHRD_ETHER ) dev = alloc_netdev ( 0, ""pvceth%d"", pvc_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; }",0
746,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> length ) ; if (! s_check ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (! s_check ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (! s_check ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
747,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_ModEnd> vp8mt_de_alloc_temp_buffers ( pbi,0
748,<S2SV_ModStart> { if ( ( <S2SV_ModStart> 0x00 ) { xWantedSize += xHeapStructSize ; if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) ; } } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } if ( ( xWantedSize > xFreeBytesRemaining ) ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK,0
749,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
750,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
751,"<S2SV_ModStart> { uint16 num_updates <S2SV_ModEnd> ; uint16 left <S2SV_ModStart>, Debug, ""%s()"" <S2SV_ModEnd>, __func__ ) <S2SV_ModStart> ) { in_uint16_le <S2SV_ModEnd> ( s, <S2SV_ModStart> i ++ ) { in_uint16_le ( s, left ) ; in_uint16_le ( s, top ) ; in_uint16_le ( s, right ) ; in_uint16_le ( s, bottom ) ; in_uint16_le ( s, width ) ; in_uint16_le ( s, height ) ; in_uint16_le ( s, bpp ) ; Bpp = ( bpp + 7 ) / 8 ; if (! compress ) { int y ; bmpdata = ( uint8 * ) xmalloc ( width * height * Bpp ) ; for ( y = 0 ; y < height ; y ++ ) { ui_paint_bitmap ( left, top, cx, cy, width, height, bmpdata ) ; } ui_paint_bitmap ( left, top, cx, cy, width, height, bmpdata ) ; } ui_paint_bitmap ( left, top, cx, cy, width, height",0
752,"<S2SV_ModStart> } else { <S2SV_ModEnd> ovalue = strim <S2SV_ModStart> MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Missing <S2SV_blank> filename"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Missing <S2SV_blank> filename"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Missing <S2SV_blank> filename"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Missing <S2SV_blank> filename"" ) ; return MPR_ERR_BAD_SYNTAX ; }",0
753,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> tx_size ] ; vpx_coeff_count * coef_counts = cpi -> coef_counts [ tx_size ] ; vpx_tree_probs_from_distribution ( vp9_coef_tree, coef_counts [ i ] [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] ) ; for ( i = 0 ; i < PLANE_TYPES ; ++ i ) { for ( j = 0 ; j < REF_TYPES ; ++ j ) { for ( k = 0 ; k < COEF_BANDS ; ++ k ) { for ( l = 0 ; l < BAND_COEFF_CONTEXTS ( k ) ; ++ l ) { for ( m = 0 ; m < UNCONSTRAINED_NODES ; ++ m ) coef_probs [ i ] [ j ] [ k ] [ l ] [ m ] = get_binary_prob ( coef_probs [ i ] [ j ] [ k ] [ l ] [",0
754,"<S2SV_ModStart> { } ; struct termios old = { } ; struct termios new = { } ; r = set_termios ( fd, & old, sizeof ( old ) ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> UTF-8 <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( tcgetattr ( fd, & tc ) < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( tcgetattr ( fd, & new ) < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = tcsetattr ( fd, TCSANOW, & new ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank>",0
755,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> ] = { 0xe, 0x80, 0 } ; u8 obuf [ 4 ] = { 0xe, 0x80, 0 } ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; obuf [ 0 ] = 0xe ; obuf [ 1 ] = 0x83 ; obuf [ 2 ] = 0 ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; obuf [ 0 ] = 0xe ; obuf [ 1 ] = 0x83 ; obuf [ 2 ] = 1 ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; obuf [ 0 ] = 0xe",0
756,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t * cfg, vpx_codec_flags_t flags, int ver ) { if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT",0
757,"<S2SV_ModStart> int stride, <S2SV_ModEnd> int uv_block_size, <S2SV_ModStart>. interp_filter ) ; const InterpKernel * const kernel = vp9_get_interp_kernel ( xd -> mi [ 0 ] -> mbmi. interp_filter ) ; enum mv_precision mv_precision_uv ; int uv_stride ; if ( uv_block_size == 8 ) { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q4 ; } else { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q3 ; } vp9_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, 16, 16, which_mv, kernel, mv_precision_uv, x, y ) ; vp9_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vp9_build_inter_predict",0
758,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) < 4 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } <S2SV_ModEnd> bufp = find_optparam <S2SV_ModStart> bufp ) ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'",0
759,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> cJSON <S2SV_ModEnd> * cJSON_CreateFloatArray ( <S2SV_ModStart> count ; ++ i <S2SV_ModEnd> ) { n <S2SV_ModStart> cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } <S2SV_ModEnd> return a ;",0
760,"<S2SV_ModStart> tk_status ) ; if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_unlock ; } if ( status == NLM_LCK_DENIED_REBIND_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_rebind ; } if ( status == NLM_LCK_GRANTED ) printk ( KERN_WARNING ""lockd: <S2SV_blank> unexpected <S2SV_blank> unlock <S2SV_blank> status: <S2SV_blank> %d\\n"", status ) ;",0
761,"<S2SV_ModStart>, n ) ; if ( f -> previous_window [ i ] [ n - 1 ] == 0.0 ) { f -> previous_window [ i ] [ n - 1 ] = 0.0 ; } else { for ( i = 0 ; i < f -> channels ; ++ i ) { for ( j = 0 ; j < n ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * w [ j ] + f -> previous_window [ i ] [ j ] * w [ n - 1 - j ] ; } } prev = f -> previous_length ; f -> previous_length = len - right ; for ( i = 0 ; i < f -> channels ; ++ i ) { for ( j = 0 ; j < n ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * w [ j ] + f -> previous_window [ i ] [ j ] * w [ n - 1 - j ] ; for ( i = 0 ; i < f -> channels ; ++ i ) for ( j = 0 ;",0
762,<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> ) ; for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ;,0
763,"<S2SV_ModStart> data_end ) { <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> pbi -> common ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int num_workers = MIN ( pbi -> oxcf. max_threads & ~ 1, tile_cols ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int n ; int final_worker = - 1 ; if ( num_workers == 0 ) { CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( sizeof ( * pbi -> tile_workers ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) )",0
764,<S2SV_ModStart> * 0x101 ; if ( fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' ) { fputc ( ifp ) ; return ; } <S2SV_ModStart> ( ) ; if ( fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' ) { fputc ( ifp ) ; return ; } <S2SV_ModStart> ( ) ; if ( fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' ) { if ( fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' ) { fputc ( ifp ) ; return ; } <S2SV_ModStart> ( ) ; if ( fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' ) { fputc ( ifp ) ; return ; } <S2SV_ModStart> ( ) ; if ( fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' ) { if ( fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'M' ),0
765,"<S2SV_ModStart> -> common ; vpx_clear_system_state ( ) ; vpx_clear_segmentation ( seg ) ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const double base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; const int segment_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, base_q * Q_RATIO ( i ) ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL",0
766,<S2SV_ModStart> -> error_code ) { if ( error -> has_detail ) ctx -> base. err_detail = error -> detail ; else ctx -> base. err_detail = NULL ; return error -> error_code ; } <S2SV_ModEnd> return error ->,0
767,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
768,"<S2SV_ModStart> * ps_cur_slice ; pocstruct_t <S2SV_ModEnd> * ps_prev_poc, <S2SV_ModStart> * ps_cur_poc ; if ( ps_dec -> u4_num_cores > MAX_NUM_PIC_PARAMS ) { ps_dec -> i4_num_cores = MAX_NUM_PIC_PARAMS ; ps_dec -> i4_degrade_pics = 0 ; ps_dec -> i4_dec_skip_mode = IVD_SKIP_NONE ; ps_dec -> p_DeblockPicture [ 0 ] = ih264d_deblock_picture_non_mbaff ; ps_dec -> p_DeblockPicture [ 1 ] = ih264d_deblock_picture_mbaff ; ps_dec -> p_DeblockPicture [ 2 ] = ih264d_deblock_picture_mbaff ; ps_dec -> p_DeblockPicture [ 3 ] = ih264d_deblock_picture_mbaff ; ps_dec -> p_DeblockPicture [ 2 ] = ih264d_deblock_picture_non_mbaff ; ps_dec -> p_DeblockPicture [ 3 ] = ih264d_de",0
769,<S2SV_ModStart> ; if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) {,0
770,"<S2SV_ModStart> { ssize_t ret ; if (! btpan_cb. congest_packet ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; GKI_freebuf ( buffer ) ; btsock_thread_add_fd ( pan_pth, fd, 0, SOCK_THREAD_FD_RD, 0 ) ; return ; } ret = read ( fd, btpan_cb. congest_packet, sizeof ( btpan_cb. congest_packet ) ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; GKI_freebuf ( buffer ) ; btsock_thread_add_fd ( pan_pth, fd, 0, SOCK_THREAD_FD_RD, 0 ) ; return ; }",0
771,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> getnum ( const <S2SV_ModStart> return df ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
772,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> allgc, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold =",0
773,<S2SV_ModStart> else return - ENODEV <S2SV_ModEnd> ; deb_info (,0
774,"<S2SV_ModStart> { 'S' } <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } memset ( buffer, 0, sizeof buffer ) ; s_read ( c, c -> local_rfd. fd, buffer, sizeof buffer ) ; if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok ) ; return NULL ; } s_write ( c, c -> local_wfd. fd, buffer, sizeof buffer ) ; if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ;",0
775,"<S2SV_ModStart> int cib_tls_signon ( <S2SV_ModEnd> cib_t * cib <S2SV_ModStart> cib -> variant_opaque <S2SV_ModEnd> ; struct sockaddr_in <S2SV_ModStart> struct sockaddr_in addr <S2SV_ModEnd> ; int rc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> static struct mainloop_fd_callbacks <S2SV_ModStart> cib_fd_callbacks = { <S2SV_ModEnd>. dispatch = <S2SV_ModStart>. destroy = cib_remote_connection_destroy, } ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } bzero ( & hints, sizeof ( struct addrinfo ) ) ; hints. ai_flags = AI_CANONNAME ; hints. ai_family = AF_INET ; hints. ai_sock",0
776,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi,",0
777,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",0
778,"<S2SV_ModStart> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x08 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"" ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ]",0
779,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows, image -> columns ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataIn",0
780,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> ; struct mpt_ioctl_command <S2SV_ModEnd> karg ; MPT_ADAPTER <S2SV_ModStart> ; if ( copy_to_user ( & karg, & uarg, sizeof ( struct mpt_ioctl_command ) ) ) { printk ( KERN_ERR MYNAM ""%s@%d::mptctl_mpt_command() <S2SV_blank> @%d <S2SV_blank> - <S2SV_blank> "" ""Unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> in <S2SV_blank> mpt_ioctl_command <S2SV_blank> struct <S2SV_blank> @ <S2SV_blank> %p\\n"", __FILE__, __LINE__, karg ) ; return - EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command <S2SV_ModStart> MF ) ; <S2SV_ModEnd> return rc ;",0
781,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; MagickBooleanType status <S2SV_ModStart>, length, padding, value, version, width ; if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( DestroyImageList ( image ) )",0
782,"<S2SV_ModStart> ) ) { if ( jas_stream_getrwcount ( enc -> out ) < mainhdrlen ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> mainhdr <S2SV_blank> marker\\n"" ) ; return - 1 ; } <S2SV_ModStart> ) ) { if ( jas_stream_getrwcount ( enc -> out ) < mainhdrlen ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> mainhdr <S2SV_blank> marker\\n"" ) ; return - 1 ; } jas_stream_getrwcount ( enc -> out ) ; if ( jas_stream_getrwcount ( enc -> out ) < mainhdrlen ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> mainhdr <S2SV_blank> marker\\n"" ) ; return - 1 ; } if ( jas_stream_getrwcount ( enc -> out ) < mainhdrlen ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> mainhdr <S2SV_blank> marker\\n"" ) ; return - 1 ; } jas_stream_getrwcount ( enc -> out ) ; if ( jas_stream_getrwcount ( enc -> out ) < mainhdrlen ) { jas_eprintf ( ""cannot",0
783,"<S2SV_ModStart> = '\\0' ; strcpy ( str_mode, "" <S2SV_blank> "" ) ; strcpy ( str_mode [ 2 ], "" <S2SV_blank> "" ) ; strcpy ( str_mode [ 3 ], "" <S2SV_blank> "" ) ; strcpy ( str_mode [ 4 ], "" <S2SV_blank> "" ) ; strcpy ( str_mode [ 5 ], "" <S2SV_blank> "" ) ; strcpy ( str_mode [ 6 ], "" <S2SV_blank> "" ) ; strcpy ( str_mode [ 7 ], "" <S2SV_blank> "" ) ; strcpy ( str_mode [ 13 ], "" <S2SV_blank> "" ) ; strcpy ( str_mode [ 13 ], "" <S2SV_blank> "" ) ; strcpy ( str_mode [ 13 ], "" <S2SV_blank> "" ) ; strcpy ( str_mode [ 13 ], "" <S2SV_blank> "" ) ; strcpy ( str_mode [ 13 ], "" <S2SV_blank> "" ) ; strcpy ( str_mode [ 13 ], "" <S2SV_blank> "" ) ; strcpy ( str_mode [ 13 ], "" <S2SV_blank> "" ) ; strcpy ( str_mode [ 13 ], "" <S2SV_blank> "" ) ; strcpy ( str_mode [ 13 ],",0
784,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_bit_depth_t decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> 1 ) ; vpx_read_bit <S2SV_ModEnd> ( r )",0
785,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs,",0
786,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> * r, vpx_prob <S2SV_ModEnd> * r ) <S2SV_ModStart> * r, vpx_prob <S2SV_ModEnd> * r ) <S2SV_ModStart> * r, vpx_prob <S2SV_ModEnd> * r ) <S2SV_ModStart> * r, vpx_prob <S2SV_ModEnd> * r ) <S2SV_ModStart> * r, vpx_prob <S2SV_ModEnd> * r )",0
787,"<S2SV_ModStart> ; if (! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; <S2SV_ModStart>! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; if ( prev ) { memcpy ( stream, prev, sizeof ( * stream ) ) ; stream -> index ++ ; prev -> next = NULL ; } else { vpx_codec_err_t res ; res = vpx_codec_enc_config_default ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. cfg. stereo_fmt = STEREO_FORMAT",0
788,"<S2SV_ModStart> ; if ( opp -> nd_opt_mtu!= op -> nd_opt_mtu ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> mtu <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opp -> nd_opt_mtu ), opp -> nd_opt_mtu ), opp -> nd_opt_mtu ) ; } else if ( opp -> nd_opt_mtu!= op -> nd_opt_mtu ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> mtu <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opp -> nd_opt_mtu ), opp -> nd_opt_mtu ), opp -> nd_opt_mtu ) ; } else if ( opp -> nd_opt_mtu!= op -> nd_opt_mtu ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> mtu <S2SV_blank> (%u): <S2SV_blank> "", tok2str",0
789,<S2SV_ModStart> = 0 ; if ( yr_re_is_root_node ( * re_ast ) ) { * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; if ( * re_ast == NULL ) { * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; return ERROR_INSUFFICIENT_MEMORY ; } else { * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; if ( * re_ast == NULL ) { * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; if ( * re_ast == NULL ) { * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; return ERROR_INSUFFICIENT_MEMORY ; } else { * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; if ( * re_ast == NULL ) { * re_ast = ( RE_AST * ) yr_malloc ( sizeof,0
790,"<S2SV_ModStart> DICT_PATH_SHARED ) ; if ( key -> key -> key == NULL ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = var_expand ( path, key -> key -> key, iter -> var_expand_table, & error ) ; if ( ret <= 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found, <S2SV_blank> using <S2SV_blank> default <S2SV_blank> value <S2SV_blank> %s"", str_c ( path ), key -> key -> default_value )",0
791,<S2SV_ModStart> ; if ( skb_is_nonlinear ( skb ) ) { kfree_skb ( skb ) ; return 0 ; } <S2SV_ModEnd> nla = ( <S2SV_ModStart> A ] ; if ( nla -> nla_len > skb -> len ) { kfree_skb ( skb ) ; return 0 ; } <S2SV_ModEnd> nla = nla_find_nested,0
792,"<S2SV_ModStart> } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
793,"<S2SV_ModStart> ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</message>"" ""</forwarded>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient""",0
794,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
795,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> altwarning <S2SV_ModStart> = 0 ; tok -> alterror = 0 ; tok -> alttabsize = 1 ; tok -> altindstack [ 0 ] = 0 ; tok -> decoding_state = STATE_INIT ; tok -> decoding_erred = 0 ; tok -> decoding_buffer = NULL ; tok -> filename = NULL ; tok -> decoding_readline = NULL ; tok -> decoding_buffer = NULL ;,0
796,"<S2SV_ModStart> } if ( av1 -> av1_config ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> dataLength ) ; gf_odf_av1_cfg_del ( av1_cfg ) ; av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> dataLength, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> dataLength ) ; gf_odf_av1_cfg_del ( av1_cfg ) ; } }",0
797,"<S2SV_ModStart> ) { GF_LOG <S2SV_ModEnd> ( GF_LOG_ERROR, <S2SV_ModStart> GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in",0
798,"<S2SV_ModStart> r ] = '\\0' ; if ( r < 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; if ( r >= sizeof ( buff ) ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; if ( r >= sizeof ( buff ) ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; if ( r >= 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; if ( r >= 0 ) { r = SC_LOG_DEBUG_NORMAL ; r = SC_LOG_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; if ( r >= 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, """,0
799,"<S2SV_ModStart> maxFrameNum ) ; <S2SV_ModEnd> dpb -> maxLongTermFrameIdx <S2SV_ModStart> MAX_LONG_TERM_FRAME_INDICES ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; if ( noReordering ) dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; else dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; if ( dpb -> buffer == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; H264SwDecMemset ( dpb -> buffer, 0, ( MAX_NUM_REF_IDX_L0_ACTIVE + 1 ) * sizeof ( dpbPicture_t ) ) ; for ( i = 0 ; i < dpb -> dpbSize + 1 ; i ++ ) { H264SwDecMemset ( dpb -> buffer [ i ]. pAllocatedData, ( picSizeInMbs * 384 + 32 + 15 ), u8 ) ; if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; dpb -> buffer [ i ]. pAllocatedData = ALIGN ( dpb -> buffer [ i ]. pAllocated",0
800,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ),0
801,,1
802,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> TPDU <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; }",0
803,"<S2SV_ModStart> ipv6_pinfo * np = inet6_sk ( sk ) ; struct ipv6_txoptions * opt <S2SV_ModStart> final_p ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt_space ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dere",0
804,"<S2SV_ModStart> pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr64 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; struct cli_exe_section",0
805,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> address ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> )!= 0 ) { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_",0
806,"<S2SV_ModStart> # ifdef CCITT_SUPPORT if ( t2p -> pdf_compression == T2P_COMPRESS_G3 ) { buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ; if ( buffer == NULL ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } TIFFReadRawStrip ( input, 0, ( tdata_t ) buffer, t2p -> tiff_datasize ) ; if ( buffer == NULL ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; }",0
807,"<S2SV_ModStart> new_parent ) { struct cred * old_cred ; <S2SV_ModStart> new_parent ) ; old_cred = __task_cred ( child ) ; __ptrace_link ( child, new_parent, old_cred <S2SV_ModEnd> ) ; rcu_read_unlock",0
808,"<S2SV_ModStart> pcmk_ok ) { cib_tls_signon ( cib, & private -> command ) ; } if ( rc == pcmk_ok ) { cib_tls_signon ( cib, & private -> callback ) ; } if ( rc == pcmk_ok ) { cib_tls_signon ( cib, & private -> command ) ; } if ( rc == pcmk_ok ) { cib_tls_signon ( cib, & private -> command ) ; } if ( rc == pcmk_ok ) { cib_tls_signon ( cib, & private -> callback ) ; } if ( rc == pcmk_ok ) { cib_tls_signon ( cib, & private -> command ) ; } if ( rc == pcmk_ok ) { cib_tls_signon ( cib, & private -> command ) ; } if ( rc == pcmk_ok ) { cib_tls_signon ( cib, & private -> command ) ; } if ( rc == pcmk_ok ) { cib_tls_signon ( cib, & private -> command ) ; } if ( rc == pc",0
809,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
810,"<S2SV_ModStart> } ; int <S2SV_ModEnd> num00, tmp_err <S2SV_ModStart>, sr = 0 <S2SV_ModEnd> ; int step_param <S2SV_ModStart> bsize ] ; vpx_variance_fn_ptr_t v_fn_ptr = cpi -> fn_ptr [ bsize ] ; int new_mv_mode_penalty = MIN ( cpi -> common. width, cpi -> common. height ) <S2SV_ModEnd> ; while ( <S2SV_ModStart> quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_",0
811,"<S2SV_ModStart> goto error ; if ( h -> size == 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( h -> size > UINT32_MAX - h -> size ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( h -> size > UINT32_MAX - h -> size ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( h -> size > UINT32_MAX - h -> size ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; }",0
812,"<S2SV_ModStart> ) ; } # ifdef DEBUG_CONF ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", _parent, _child, merged ) ; ap_log_perror ( APLOG_MARK, APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", _parent, _child, merged ) ; ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", _parent, _child, merged ) ; ap_log_perror ( APLOG_MARK, APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", _parent, _child, merged ) ; # endif",0
813,"<S2SV_ModStart> ; if ( ( MSG_CMSG_COMPAT & flags ) && msg_compat -> msg_name ) { <S2SV_ModStart> -> msg_name, msg_compat -> msg_name, msg_compat -> msg_namelen, msg_compat -> msg_namelen, msg_compat -> msg_namelen, msg_compat -> msg_namelen, msg_compat -> msg_namelen, msg_compat -> msg_namelen, msg_compat -> msg_name, msg_compat -> msg_namelen, msg_compat -> msg_namelen, msg_compat -> msg_namelen, msg_compat -> msg_namelen, msg_compat -> msg_namelen, msg_compat -> msg_namelen, msg_compat -> msg_namelen, msg_compat -> msg_namelen, msg_compat -> msg_namelen, msg_compat -> msg_namelen, msg_compat -> msg_namelen, msg_compat -> msg_namelen, msg_compat -> msg_namelen, msg_compat -> msg_namelen, msg_compat -> msg_namel",0
814,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) status = SetImageExtent ( image, image -> rows, image -> columns ) ; if ( status == MagickFalse ) status = SetImageExtent ( image, image -> rows, image ->",0
815,"<S2SV_ModStart> 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> block_size ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> key, comp -> key_len ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> cipher, sizeof ( comp -> cipher ) ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> cipher, sizeof ( comp -> cipher ) ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> block_size ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> key, comp -> key_len ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> cipher, sizeof ( comp -> cipher ) ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> cipher, sizeof ( comp -> cipher ) ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> block_size ) )!= 0",0
816,"<S2SV_ModStart> ) ) { if ( smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""content"" ) ) { httpSetTraceContentSize ( route -> trace, ( ssize ) getnum ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) )",0
817,"<S2SV_ModStart> { cib_client_t * const client = ( cib_client_t * const * ) user_data ; int num_clients = g_hash_table_remove ( client_list, client -> id ) ; if ( client -> name == NULL ) { crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> %s"", crm_str ( client -> name ), client -> id ) ; crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> %s"", crm_str ( client -> name ), client -> id ) ; } <S2SV_ModEnd> crm_trace ( ""Num <S2SV_blank> unfree\'d <S2SV_blank> clients: <S2SV_blank> %d"" <S2SV_ModStart> num_clients ) ; g_hash_table_remove ( client_list, client -> id ) ; free ( client ) ; crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client"" ) ; if ( cib_shutdown_flag ) { cib_shutdown ( 0 ) ; } return ; } <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
818,"<S2SV_ModStart> * uv ; Thread * twups ; if ( thread -> twups == NULL ) twups = & g -> twups ; else twups = & g -> twups ; for ( uv = twups ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; markvalue ( g, uv -> v ) ; } if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; } if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work",0
