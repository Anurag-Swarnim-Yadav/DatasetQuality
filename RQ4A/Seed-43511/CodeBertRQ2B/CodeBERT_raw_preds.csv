,raw_predictions,correctly_predicted
0,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1,<S2SV_ModStart> ipv6_select_ident ( skb,0
2,,0
3,<S2SV_ModStart> c ) { <S2SV_ModEnd> return 0 ;,0
4,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, regs",0
5,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
6,,0
7,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
8,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
9,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
10,,0
11,"<S2SV_ModStart> { if ( vpx_writer <S2SV_ModEnd> ( w,",0
12,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> } if ( S2SV_null> <S2SV_null> static <S2SV_ModStart> 2SV_null> static <S2SV_ModStart> 2SV_null> <SV_null> <S2SV_null> static int <S2SV_ModEnd> r_null>,0
13,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
14,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
15,,0
16,<S2SV_ModStart> ; if (! sockaddr -> sk ) return - EINVAL ; if (,0
17,,0
18,<S2SV_ModStart> } if (!,0
19,<S2SV_ModStart> ; if ( name_len < 0 ||,0
20,"<S2SV_ModStart> ; if ( capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
21,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
22,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
23,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
24,<S2SV_ModStart> (! str ) return 0,0
25,<S2SV_ModStart> error = 0 <S2SV_ModEnd> ; if (,0
26,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
27,<S2SV_ModStart> ) ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
28,<S2SV_ModStart> path ) ; if (! path ) return 0 ;,0
29,<S2SV_ModStart> ; io -> io_cleanup <S2SV_ModEnd> ; if (,0
30,<S2SV_ModStart> ) ) { <S2SV_ModEnd> MagickFalse ; },0
31,,0
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
33,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> rollover_set_set ( struct <S2SV_ModEnd> rollover ) { atomic_set ( & <S2SV_ModStart> rollover ) ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; <S2SV_ModStart> -> fanout ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; goto out_long_long_long_long_long_long_long_long_long_long ( & <S2SV_ModEnd> rollover ) ; <S2SV_ModStart> atomic_long_long_long_long_long_long ( & <S2SV_ModEnd> rollover ) ; <S2SV_ModStart> atomic_long_long_long_long_long_long_long_long_long_long_long_long_long ( & <S2SV_ModEnd> rollover ) ; <S2SV_ModStart> atomic_long_long_long_long_long_long_long_long_long ( & <S2SV_ModEnd> rollover ) ; <S2SV_ModStart> atomic_long_long_long_long_long_long_long_long_long_long_long_long_long_long ( & <S2SV_ModEnd> rollover ) ; <S2SV_ModStart>,0
34,,0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
36,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
37,"<S2SV_ModStart> ( interface, ENC28J60_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_EHT2, ENC28J60_EIR <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_EHT2, ENC28J60_EIR, ENC28J60_EIR, ENC28J60_EIR <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR, ENC28J60_EIR <S2SV_ModEnd>, hashTable <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR, ENC28J60_EIR, ENC28J60_EIR, ENC28J60_EIR <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR, ENC28J60_EIR, ENC28J60_EIR, ENC28J",0
38,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
39,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
40,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
41,"<S2SV_ModStart>, sizeof ( cmd )",0
42,"<S2SV_ModStart> int error ; struct mb2_cache * ext4_cache = ext4_mb_cache ; struct mb2_cache_cache * ext4_mb_cache = ext4_mb_cache_cache ( ext4_insert ( ext4_mb_cache, bh -> i_cache, hash ) ; if ( ext4_mb_cache_insert ( ext4_mb_cache, hash ) { ext4_mb_cache_insert ( bh, hash, hash, hash, hash, hash, hash, hash, hash, hash, bh -> b_hash ) ; if ( ext4_b2_mb_cache_insert ( bh -> bh -> b_cache, hash ) { ext4_b2_mb_cache_cache_insert ( bh, hash, hash, hash, bh -> bh -> b_cache, hash, hash ) ; } else { ext4_b2_insert ( bh, hash, hash, hash, hash, hash, hash ) ; if ( b_hash ) { ext4_b2_b2_b2_b2_b2_b2_insert ( bh )",0
43,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
44,"<S2SV_ModStart> optlen, struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.",0
45,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
46,<S2SV_ModStart> } else { if (,0
47,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode",0
48,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
49,<S2SV_ModStart> } while ( (,0
50,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
51,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
52,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
53,,0
54,,0
55,<S2SV_ModStart> SV_null> <S2SV_null> <S2SV_null>,0
56,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
57,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ;,0
58,<S2SV_ModStart> ) ) { uint16 <S2SV_ModEnd> buff = 0,0
59,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
60,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
61,<S2SV_ModStart> = 0 ; size_t ext_size = 0 ;,0
62,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> return NULL ;,0
63,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
64,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
65,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
66,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
67,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, number_planes_filled",0
68,<S2SV_ModStart> 0 ) ; if (! altsetting ) return - EINVAL ;,0
69,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { switch",0
70,<S2SV_ModStart> dir = dir <S2SV_ModEnd> ; if (,0
71,,0
72,<S2SV_ModStart> ; # endif # endif,0
73,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
74,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline int <S2SV_ModEnd> jmp_eip_near ( struct <S2SV_ModStart> ctxt ) { return assign_eip_eip_eip <S2SV_ModEnd> ; } <S2SV_null>,0
75,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
76,"<S2SV_ModStart> -> i_inode, fmode",0
77,,0
78,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2S2SV_null> <S2SV_null> <S2SV_null>,0
79,,0
80,<S2SV_ModStart> } if (,0
81,,0
82,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int len ; if ( len < 4 ) { ND_PRINT ( ( ( ( ndo, "" <S2SV_blank> short"" ) ) ) ; return 0 ; } <S2SV_ModStart> ; if ( len < 4 ) { ND_PRINT ( ( ( ndo, "" <S2SV_blank> short"" ) ) ) { ND_PRINT ( ( ( ( ( ndo, "" <S2SV_blank> short"" ) ) ) ; return 0 ; } <S2SV_ModStart> 4 ) ; } <S2SV_ModStart> ; if ( len < 4 ) { ND_PRINT ( ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ) ) { ND_PRINT ( ( ( ( ndo, "" <S2SV_blank> short"" ) ) ) ; return ; } <S2SV_ModStart> ; } else { ND_PRINT ( ( ( ( ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ) ) ; if ( ( ndo, "" <S2SV_blank> short"" ) ) ) { ND_PRINT ( ( ( ( ( ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ) ) ) ; return 0 ; } <S2SV_ModStart> 4 ) ) ; } <S2SV_ModStart> ; if ( ndo,",0
83,,0
84,,0
85,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
86,<S2SV_ModStart> sk ) ; msg -> msg_namelen = 0 ;,0
87,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
88,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
89,,0
90,"<S2SV_ModStart>, n, NCH ( n, CHILD ( n, CHILD ( n ), CHILD ( n, NCH ( n, CHILD ( n, CHILD ( n, 0 ), CHILD ( n ), NCH ( n ), NCH ( n ), NCH ( n ), CHILD ( n ), CHILD ( n, CHILD ( n ), CHILD ( n, CHILD ( n, CHILD ( n, CHILD ( n, CHILD ( n, CHILD ( n, 0 ), CHILD ( n, CHILD ( n, 0 ), CHILD ( n, CHILD ( n, 0 ), CHILD ( CHILD ( n, CHILD ( n, CHILD ( n, 0 ), CHILD ( n, CHILD ( n, 0 ), CHILD ( CHILD ( n, 0 ), 0 ), CHILD ( n ), 0 ), CHILD ( CHILD ( CHILD ( CHILD ( n, CHILD ( n, n, 0 ), CHILD ( n, CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( n, CHILD ( n,",0
91,,0
92,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
93,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 1 ) )",0
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
95,<S2SV_ModStart> task ) ; <S2SV_ModEnd> } <S2SV_null>,0
96,,0
97,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
98,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> return 0 ;,0
99,<S2SV_ModStart> q ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
100,,1
101,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
102,,0
103,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ;,0
104,<S2SV_ModStart> ) break ; } image -> rows = MagickFalse ;,0
105,<S2SV_ModStart> 0 ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
106,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
107,,0
108,"<S2SV_ModStart> write_b ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_write_literal <S2SV_ModEnd> ( wb,",0
109,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
110,<S2SV_ModStart> ; out : <S2SV_ModEnd> return err ;,0
111,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
112,"<S2SV_ModStart> asconf_chunk, addip, addip, addip, addip, addip, addip_chunk, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, addip, add",0
113,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
114,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
115,,0
116,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
117,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
118,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static assign_eip_cs <S2SV_ModEnd> ( ctxt, <S2SV_ModStart>, ctxt, VCPU_CONTINUE ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; <S2SV_ModStart> ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc = assign_eip_eip_eip_eip_eip_far ( ctxt, X86EMUL_CONTINUE ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_eip_eip_eip_eip_eip_eip_far ( ctxt, X86EMUL_CONTINUE ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_eip_eip_eip_eip_eip_eip_far ( ctxt, X86EMUL_CONTINUE ) ; if ( rc!= X86EMUL_CONTINUE ) return rc",0
119,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
120,<S2SV_ModStart> 0 ) { zfound = GF_ISOM_INVALID_FILE ; zfound = GF_INVALID_INVALID_TRUE ; <S2SV_ModStart> i ] ) { zfound = GF_FALSE ; zfound = GF_INVALID_INVALID_INVALID_TRUE ; zfound = GF_INVALID_TRUE ; if (! zfound ) return GF_INVALID ; } <S2SV_ModStart> i ] = GF_INVALID_INVALID_INVALID_INVALID ; zfound = GF_INVALID_INVALID_INVALID_INVALID ; if (! zfound ) return GF_INVALID ; zfound = GF_INVALID_INVALID_FILE ; zfound = GF_INVALID ; zfound = GF_INVALID_INVALID ; zfound = GF_INVALID_INVALID ; zfound = GF_INVALID ; zfound = GF_INVALID_INVALID_FILE ; zfound = GF_INVALID ; zfound = GF_INVALID_INVALID ; zfound = GF_INVALID_,0
121,,0
122,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { switch",0
123,"<S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",0
124,,0
125,,0
126,,0
127,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
128,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
129,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } },0
130,<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if (,0
131,"<S2SV_ModStart> ( buffer, EINVAL <S2SV_ModEnd> ) ; }",0
132,<S2SV_ModStart> ; if ( sk ) return - EINVAL ; if (,0
133,,0
134,<S2SV_ModStart> { rq = rq -> tags [ <S2SV_ModEnd> off + bit,0
135,,0
136,<S2SV_ModStart> goto out ; <S2SV_ModEnd> return err ;,0
137,<S2SV_ModStart> skb ) return 0,0
138,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
139,"<S2SV_ModStart> 0 ] ; if ( tile_buffsize > 0 ) { TIFFError ( ""invalid <S2SV_blank> buffer"" ) ; return 0 ; }",0
140,<S2SV_ModStart> ; ret = <S2SV_ModEnd> memcpy ( &,0
141,"<S2SV_ModStart> ( fp ) <S2SV_ModEnd> ( fp,",0
142,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
143,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
144,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
145,"<S2SV_ModStart>, ret = - EFAULT <S2SV_ModEnd> ; if (",0
146,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
147,"<S2SV_ModStart> } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
148,"<S2SV_ModStart> 0 ) ; memset ( ctxt, 0, sizeof ( rdx ) ) ;",0
149,"<S2SV_ModStart> index, vpx_reader <S2SV_ModEnd> * w )",0
150,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
151,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
152,"<S2SV_ModStart> * input, tran_high_t <S2SV_ModEnd> * input, <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> * input, <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x4 ] = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x4 ] = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x4 ] = input <S2SV_ModStart> 4 ] ; tran_high_high_t <S2SV_ModEnd> x4 ] = input <S2SV_ModStart>",0
153,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> return NULL ;,0
154,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
155,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( optlen,0
156,<S2SV_ModStart> ; if ( mnt_flags & CL_UNPRIVILEGED ) mnt -> mnt_flags |= MNT_LOCK_NODEV ; if ( ( mnt -> mnt_flags & MNT_NODEV ) && ( mnt -> mnt_flags & MNT_LOCK_NODEV ) ) mnt -> mnt_flags |= MNT_LOCK_NODEV ; if ( mnt -> mnt_flags & MNT_NOEXEC ) mnt_flags |= MNT_NOEXEC ; if ( mnt -> mnt_flags & MNT_NOEXEC ) && ( mnt -> mnt. mnt. mnt_flags & MNT_LOCK_NODEV ) mnt -> mnt. mnt. mnt_flags |= MNT_LOCK_NOEXEC ; if ( ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) && ( mnt -> mnt. mnt. mnt_flags & MNT_LOCK_NODEV ) mnt_flags |= MNT_NOEXEC ;,0
157,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
158,,0
159,<S2SV_ModStart> ; if ( <S2SV_ModEnd> == 0 ),0
160,"<S2SV_ModStart> ; size_t buf_size = 0 ; size_t data_size <S2SV_ModStart>, & data_size, & OE_RAISE_ERRNO ( OEINVAL <S2SV_ModStart> ; if ( ret > OE_RAISE_ERRNO ( OE_EINVAL ) { ret = - EINVAL ; } if ( ret > OE_E_EINVAL ) { ret = - EINVAL ; } if ( ret > OE_RAISE_ERRNO ( OE_EINVAL ) { ret = - EINVAL ; OE ; } if ( ret > OE_E_E_EINVAL ) { ret = - EINVAL ; } if ( ret > OE_RAISE_ERRNO ( OE_EINVAL ) { ret = - EINVAL ; OE_EINVAL ; } if ( ret > OE_E_EINVAL ) { ret = - EINVAL ; ret = - EINVAL ; OE_RAISE_E ; } if ( ret = - EINVAL ; if ( ret > OE_RAISE_EINVAL ) { ret = - EINVAL",0
161,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
162,<S2SV_ModStart> cm ) { memcpy <S2SV_ModEnd> ( cm ->,0
163,"<S2SV_ModStart> data ) ; memset ( & buf, 0, sizeof ( buf ), GFP_NOIO ) ;",0
164,,0
165,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
166,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
167,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
168,,0
169,"<S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt,",0
170,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
171,<S2SV_ModStart> ; ctx -> <S2SV_ModEnd> ; if (,0
172,<S2SV_ModStart> - EINVAL ; if ( len < 0 ) return - EINVAL ;,0
173,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
174,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
175,,0
176,"<S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
177,<S2SV_ModStart> ; if ( ( ( mnt_flags & MNT_MASK ) && ( mnt -> mnt_flags & MNT_LOCK_MASK ) && ( mnt -> mnt_flags & MNT_LOCK_NODEV ) && ( mnt -> mnt_flags & MNT_MASK ) ) { return - EPERM ; } if ( ( ( mnt_flags & MNT_MASK ) && ( mnt -> mnt_flags & MNT_LOCK_ATIME ) && ( mnt_flags & MNT_MASK ) && ( mnt_flags & MNT_NOEXEC ) && ( mnt -> mnt_flags & MNT_LOCK_MASK )!= MNT_MASK ) { return - EPERM ; } if ( (! ( ( mnt_flags & MNT_MASK ) && ( mnt_flags & MNT_MASK ) && ( mnt -> mnt. mnt_flags & MNT_MASK ) ) { return - EPERM ; } } if ( ( mnt_flags & MNT_MASK ) { return - EPERM ; } },0
178,,0
179,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
180,"<S2SV_ModStart> -> msg_name ; if ( msg_sys -> msg_name ) goto err ; <S2SV_ModStart> -> msg_name ; if ( msg_sys -> msg_name, msg_sys -> msg_name, msg_name, msg_sys <S2SV_ModEnd> ) ; if",0
181,"<S2SV_ModStart>, bh, bh -> bsize",0
182,,0
183,,0
184,"<S2SV_ModStart> ; if ( is_link ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> %s <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> 0 ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s\\n"", fname ) ; exit ( 1 ) ; } <S2SV_ModStart> ; if ( fname ) { copy_file_as_user <S2SV_ModEnd> ( stderr, <S2SV_ModStart> file, fname, fname, fname, fname ) ; exit ( 1 ) ; }",0
185,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
186,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
187,<S2SV_ModStart> ; if ( <S2SV_ModEnd> == 0 ),0
188,"<S2SV_ModStart> ( interface, ENC624J600_EIR_PKTIF <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_PKTIF <S2SV_ModEnd>, mask, <S2SV_ModStart> ( interface, ENC624J600_EIR_PKTIF <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_LEN <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_PKTIF <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_PKTIF <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_PKTIF <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_PKTIF <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EIR_PKTIF <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, ENC624J600_PKTIF <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, ENC624J600_LEN <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_PKTIF <S2SV_ModEnd> )!= 0 <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface <S2SV_ModStart> ( interface, ENC624J600_PKTIF <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface <S2SV_ModStart> ( interface, ENC6",0
189,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
190,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
191,<S2SV_ModStart> ; if ( data == NULL ||,0
192,"<S2SV_ModStart> 1 ) ; memset ( t1, t1_array ) ;",0
193,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
194,,0
195,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),0
196,<S2SV_ModStart> -> u4_first_in_pic = 0,0
197,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null>,0
198,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
199,"<S2SV_ModStart> & fl6, rcu_dereference (",0
200,<S2SV_ModStart> ) { return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
201,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vp9_log2SV_null> <S2SV_null> static Svc_log2SV_null> <S2SV_null> static S2SV_null> static S2SV_null>,0
202,<S2SV_ModStart> 0 ) ; if ( screen == NULL ) return NULL ;,0
203,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2SV_null> <S2SV_null>,0
204,<S2SV_ModStart> dir ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
205,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
206,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
207,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
208,,0
209,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row, MACROBLOCKD * mi_row, MACROBLOCKD * mi_row, int mi_row, mi_row, mi_row, mi_row, <S2SV_ModStart> mi_col, mi_row, mi_row, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_row, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_row, mi_row, mi_row, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_row, mi_row, mi_col, mi_row, mi_row, mi_col, mi_col ) ; if ( cpi -> last_frame == KEY_FRAME ) { if ( cpi -> last_frame_frame == KEY_FRAME ) { vp9_FRAME ; vp9_",0
210,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } if,0
211,,0
212,,0
213,<S2SV_ModStart> optlen ; struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.,0
214,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
215,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
216,,0
217,<S2SV_ModStart> % 4 ) > <S2SV_ModEnd> 2 ) {,0
218,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
219,<S2SV_ModStart>!= MagickFalse ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError,0
220,<S2SV_ModStart> 0 ) ; if ( len < 4 ) goto trunc ;,0
221,<S2SV_ModStart> ; if (!,0
222,<S2SV_ModStart> * j ; jas_matind_t <S2SV_ModEnd> row ; jas_matind_t,0
223,,0
224,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
226,<S2SV_ModStart> ; if ( ( <S2SV_ModEnd> size < 16 ),0
227,,0
228,,0
229,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
230,,0
231,,0
232,"<S2SV_ModStart> } else { const char * file = NULL ; <S2SV_ModStart> } else { if ( filename == '\\n' ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> %s\\n"", __func__ ) ; return ; }",0
233,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
234,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( tptr ) ;,0
235,,0
236,"<S2SV_ModStart> int length ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""Invalid <S2SV_blank> consume <S2SV_blank> overrun"" ) ; return FALSE ; }",0
237,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
238,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
239,<S2SV_ModStart> ( fc -> fc -> fc,0
240,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
241,<S2SV_ModStart> ) ; },0
242,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
243,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, size_t )",0
244,,0
245,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
246,,0
247,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
248,<S2SV_ModStart> ) ) ; if (!,0
249,<S2SV_ModStart> ; # if EINVAL,0
250,<S2SV_ModStart> ; size_t <S2SV_ModEnd> ; if (,0
251,<S2SV_ModStart> -> mutex_lock ) ; mutex_lock ( & tu -> lock ) ;,0
252,,0
253,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
254,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
255,"<S2SV_ModStart> ) break ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile""",0
256,<S2SV_ModStart> bus ) ; if ( bi == NULL ) return ;,0
257,<S2SV_ModStart> ) ) ; msg -> msg_namelen = 0 ;,0
258,<S2SV_ModStart> ; if (,0
259,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
260,"<S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( sb,",0
261,<S2SV_ModStart> } if ( user == NULL ||,0
262,"<S2SV_ModStart> data, vpx_reader <S2SV_ModEnd> ( r,",0
263,<S2SV_ModStart> 1 ] ; <S2SV_ModEnd> } if (,0
264,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ;,0
265,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
266,,0
267,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
268,,0
269,<S2SV_ModStart> ; if (,0
270,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
271,<S2SV_ModStart> ctxt -> _eip ; rc = assign_eip_eip_near ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc,0
272,"<S2SV_ModStart> list. name, true",1
273,<S2SV_ModStart> task ) ; <S2SV_ModEnd> } <S2SV_null>,0
274,"<S2SV_ModStart> -> port, fmode_t fmode <S2SV_ModEnd> ) ; if",0
275,,0
276,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
277,"<S2SV_ModStart>, type_comment, type_comment, type_comment, type_comment",0
278,,0
279,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
280,<S2SV_ModStart> ctxt ) ; rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; if ( rc!= X86EMUL_CONTINUE ) return rc ;,0
281,,1
282,,0
283,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header. indx <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; if ( <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) ) { <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> = 0 ; <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header. indx <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header. indx <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; } <S2SV_null>,0
284,,0
285,<S2SV_ModStart> } else { if (,0
286,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
287,<S2SV_ModStart> ; ctx -> <S2SV_ModEnd> = 0 ;,0
288,<S2SV_ModStart> ) ) { ND_TCHECK2 ( * tptr ) ;,0
289,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
290,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
291,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
292,,0
293,"<S2SV_ModStart> ] ) ; luaL_checkstack ( L, 1, 1 ) ;",0
294,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
295,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
296,,0
297,<S2SV_ModStart> ( server. server.,0
298,,0
299,<S2SV_ModStart> book -> dim && i < n,1
300,"<S2SV_ModStart> 3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n"" ) ;",0
301,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
302,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
303,<S2SV_ModStart> = 0 ; size_t data_size = 0 ;,0
304,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * ),0
305,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( sk,0
306,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } if (,0
307,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
308,<S2SV_ModStart> task ) ; <S2SV_ModEnd> } <S2SV_null>,0
309,,0
310,"<S2SV_ModStart> ( interface, ENC28J60_HTR0 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_HTR1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_HTR3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_HTR1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_EID <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_HTR1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_HTR1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J60_HTR1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_HTR1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J60_EUID <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J60_HTR1, ENC28J60 <S2SV_ModEnd> ) ;",0
311,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
312,,0
313,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
314,<S2SV_ModStart> return - EINVAL,0
315,<S2SV_ModStart> = rc ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
316,"<S2SV_ModStart> ; if ( strchr <S2SV_ModEnd> ( dest,",0
317,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
318,"<S2SV_ModStart> 0 ] ; memset <S2SV_ModEnd> ( xd,",0
319,<S2SV_ModStart> } else { <S2SV_ModEnd> return - 1 ;,0
320,<S2SV_ModStart> ] = 0 <S2SV_ModEnd> ; if (,0
321,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; } exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
322,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
323,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
324,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
325,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
326,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
327,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
328,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2SV_null> <S2SV_null>,0
329,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
330,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
331,<S2SV_ModStart> q ) ; spin_lock_irq ( ) ;,0
332,<S2SV_ModStart> if ( addr + <S2SV_ModEnd> sizeof ( val,0
333,<S2SV_ModStart> ) ) ; if (!,0
334,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
335,<S2SV_ModStart> ( pReplySize == NULL || replySize,0
336,"<S2SV_ModStart> ""`%s\'"", option )",0
337,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( sk,0
338,,0
339,,0
340,"<S2SV_ModStart> uint8 result ; struct stream packet = * s ; struct stream packet ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""stream <S2SV_blank> consume <S2SV_blank> overrun"", & packet ) ; }",0
341,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
342,<S2SV_ModStart> & new_map ) goto out <S2SV_ModEnd> ; if (,0
343,,0
344,,0
345,<S2SV_ModStart> 16 ) { memcpy <S2SV_ModEnd> ( ( ),0
346,<S2SV_ModStart> 0 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) { return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart> if (! <S2SV_ModStart> ) ) { return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { return NULL ; } <S2SV_ModEnd> if (!,0
348,"<S2SV_ModStart> ( buf, size_t <S2SV_ModEnd>, size_t",0
349,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
350,"<S2SV_ModStart> void vpx_write_bit <S2SV_ModEnd> ( w,",0
351,<S2SV_ModStart> 1 ) { memset <S2SV_ModEnd> ( cpi ->,0
352,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
353,<S2SV_ModStart> } } } <S2SV_ModEnd> } else {,0
354,<S2SV_ModStart> vpx_free ( screen ) ;,0
355,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
356,<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled,0
357,,0
358,,0
359,<S2SV_ModStart> ( ) ) { <S2SV_ModEnd> return 1 ; },0
360,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, length )",0
361,<S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
362,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
363,<S2SV_ModStart> ; if (! udev -> desc ) return - EINVAL ; if (,0
364,"<S2SV_ModStart> { ret = perf_event_event_event <S2SV_ModEnd> ( event,",0
365,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> intra_mode_mode ( VP9_COMMON <S2SV_ModStart> * cm, MACROBLOCKD * xd, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { PREDICTION_MODE <S2SV_ModEnd> y_mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> ] ) ; PREDICTION_MODE <S2SV_ModEnd> ( r, <S2SV_ModStart> ] ) ; vpx_read <S2SV_ModEnd> ( r,",0
366,<S2SV_ModStart> ; if ( (,0
367,,0
368,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null>,0
369,,0
370,,0
371,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
372,"<S2SV_ModStart> p, const vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> * w, vpx_write <S2SV_ModEnd> ( w,",0
373,"<S2SV_ModStart> write_buffer ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb_write_buffer ) ; vpx_write_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 2 ) ; vpx_wb_write_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 2 ) ; vpx_wb_write_write_literal <S2SV_ModEnd> ( wb,",0
374,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
375,"<S2SV_ModStart> ; if ( len < 4 ) ND_PRINT ( ( ( ndo, ""\\n"" ) )",0
376,,0
377,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
379,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
380,"<S2SV_ModStart> write_buffer ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
381,,0
382,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
383,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
384,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char *,0
385,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
386,"<S2SV_ModStart>, 1 ) <S2SV_ModEnd> ; if (",0
387,"<S2SV_ModStart> str ) ; if ( strlen ( strlen ( str ) == 0 ) { strlen ( str, ""LEN"" ) ; return 0 ; }",0
388,,1
389,<S2SV_ModStart> ) ; } status = MagickFalse ;,0
390,,0
391,"<S2SV_ModStart> pwd, ""/tmp"" <S2SV_ModEnd> ) ; if",0
392,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
393,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
394,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
395,<S2SV_ModStart> ; # ifdef CONFIG_FAILURE_RETRY (,0
396,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
397,,0
398,<S2SV_ModStart> = e_op ; if (! u4_op -> u4_op -> u4_op_height ) { ps_decode_op -> u4_op -> u4_op_height = 0 ; },0
399,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
400,"<S2SV_ModStart>, 1 ) <S2SV_ModEnd> ; if (",0
401,<S2SV_ModStart> ( buf [ L_BUFSIZE <S2SV_ModEnd> ] ),0
402,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ;,0
403,,0
404,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
405,"<S2SV_ModStart> void ) { vpx_read_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 4 ) ; vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 4 ) ; vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 4 ) ; vpx_write_literal <S2SV_ModEnd> ( w,",0
406,<S2SV_ModStart> if ( ent == NULL ) continue ;,0
407,,0
408,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
409,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if (,0
410,"<S2SV_ModStart> ( ResourceLimitError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; if",0
411,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( dest,",0
412,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
413,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
414,,0
415,<S2SV_ModStart> ( size_t ) count = 0,0
416,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
417,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
418,<S2SV_ModStart> ; if ( bytes == 0 ) return 0,0
419,,0
420,<S2SV_ModStart> ; if ( req_len < 0 ||,0
421,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
422,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static struct ip_rcu_rcu_rcu ( struct ip_options_rcu ( struct rfc, rfc, sizeof ( struct ip_rcu ) <S2SV_ModEnd> ; if (",0
423,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
424,,0
425,,0
426,<S2SV_ModStart> -> ucounts ; spin_lock_irq ( & ucounts -> count ) ; if (! ucounts -> count ) return 0 <S2SV_ModEnd> ; spin_unlock_irq (,0
427,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> ( fmode, fmode <S2SV_ModEnd> ) { mutex_unlock",0
428,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
429,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vp9_variance ( const VP9_COMMON * xd <S2SV_ModEnd>, const <S2SV_ModStart> txd ) { const int64_t * rd = & cpi -> common ; MACROBLOCKD * const tran_high_t * const int64_t * const int64_t * const int64_t * mbmi ; const int64_t * pd = pd -> mbmi -> mbmi ; const int64_t * mbmi ; const int64_t * pd = pd -> mbmi ; const int64_t * pd -> mbmi ; const int64_t * pd = pd -> mbmi -> mbmi ; tran_low_t * mbmi ; const int64_t * pd = pd -> mbmi -> mbmi ; const int64_t * mbmi ; const int64_t * pd = pd -> mbmi -> mbmi ; if ( mbmi -> mbmi -> mbmi",0
430,,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
433,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr2,",0
434,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
435,,0
436,"<S2SV_ModStart> ( interface, EINVALID <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J60_PROT64 ), ENC624J60_Q <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J60_Q <S2SV_ModEnd>, hashTable, <S2SV_ModStart> ( interface, ENC624J60_HTR1, ENC624J60_Q <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J60_Q <S2SV_ModEnd>, length ) <S2SV_ModStart> ( interface, ENC624J60_Q <S2SV_ModEnd>, length )",0
437,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
438,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
439,,0
440,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
441,<S2SV_ModStart> { ret = - EINVAL <S2SV_ModEnd> ; if (,0
442,,0
443,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
444,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2SV_null> <S2SV_null> <S2SV_null>,0
445,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
446,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vpx_codec_alg_t <S2SV_ModEnd> ; vpx_priv_t * <S2SV_ModStart> ctx -> priv <S2SV_ModEnd> ; VPX_CODEC_INVALID_INVALID_PARAMET_INVALID <S2SV_ModEnd> ; vpx_codec_alg_t * <S2SV_ModStart> ctx -> priv <S2SV_ModEnd> ; vpx_ctx ->,0
447,,0
448,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
449,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
450,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
451,"<S2SV_ModStart> ( interface, ENC28J60_EIR <S2SV_ModEnd>, 0, <S2SV_ModStart> ( interface, ENC28J60ReadReg ( interface, ENC28J60_EIR <S2SV_ModEnd>, 0, <S2SV_ModStart> ( interface, ENC28J60WriteReg ( interface, ENC28J60_EIR <S2SV_ModEnd>, 0 )",0
452,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char *,0
453,"<S2SV_ModStart> ""UINT64"" ) ; if (!",0
454,,0
455,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
456,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
457,,0
458,,0
459,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
460,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
461,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
462,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
463,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
464,,0
465,,0
466,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
467,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
468,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 1",0
469,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
470,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
472,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
473,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
474,<S2SV_ModStart> event ) ; <S2SV_ModEnd> } <S2SV_null>,0
475,<S2SV_ModStart> AcquireQuantumMemory ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( size_t ),0
476,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
477,<S2SV_ModStart> } } } <S2SV_ModEnd> } else {,0
478,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
479,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
480,<S2SV_ModStart> * n ; jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_t,0
481,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
482,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
483,,0
484,,0
485,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header,0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
487,<S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( img -> fmt & VPX_IMG_HIGHBITDEPTH ) img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ),0
488,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
489,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
490,<S2SV_ModStart> (! str ) return 0,0
491,,0
492,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
493,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
494,<S2SV_ModStart> } if (,0
495,<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY (,0
496,,0
497,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
498,,0
499,"<S2SV_ModStart> ( buf, buf <S2SV_ModEnd> ) ; if",0
500,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
501,,0
502,<S2SV_ModStart> int i ; jas_uchar <S2SV_ModEnd> buf [ 2,0
503,<S2SV_ModStart>!= cred ) <S2SV_ModEnd> ; if (,0
504,,0
505,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
507,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, size_t )",0
508,<S2SV_ModStart> return - EINVAL,0
509,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
510,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header,0
511,,0
512,<S2SV_ModStart> = 0 ; size_t data_size = 0 ;,0
513,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( s_options,0
514,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
515,,0
516,"<S2SV_ModStart> ( page, page",0
517,,0
518,"<S2SV_ModStart> length ) ; memcpy <S2SV_ModEnd> ( & buf, <S2SV_ModStart>, sizeof ( buf )",0
519,<S2SV_ModStart> ) ; },0
520,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
521,<S2SV_ModStart> ; if ( CHILD ( CHILD,0
522,,0
523,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> bmi_row ) { VP9_COMMON * const xd = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> mi_row ; MACROBLOCKD * const xd = & xd -> mbmi_row ; <S2SV_ModStart> -> mbmi_col ; memset <S2SV_ModEnd> ( xd, <S2SV_ModStart> x ) ; memset <S2SV_ModEnd> ( xd ->",0
525,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
526,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
527,<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ),0
528,<S2SV_ModStart> skb ) ; skb_free_skb ( skb ) ;,0
529,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
530,<S2SV_ModStart> 0 ] ; <S2SV_ModEnd> } if (,0
531,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
532,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
533,"<S2SV_ModStart> 1 ) { vpx_lpf <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf_horizontal_horizontal_t <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf_horizontal_horizontal_t <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf_horizontal_horizontal_literal <S2SV_ModEnd> ( s, <S2SV_ModStart> } else { vpx_lpf_horizontal_horizontal_horizontal_horizontal_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf_horizontal_horizontal_horizontal_t <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf_horizontal_horizontal_horizontal_l <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf <S2SV_ModEnd> ( s, <S2SV_ModStart> } else { vpx_lpf <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf_horizontal_horizontal_horizontal_horizontal_horizontal_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf_horizontal_horizontal_horizontal_horizontal_4 <S2SV_ModEnd> ( s",0
534,,0
535,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
536,,0
537,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
538,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
539,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
540,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
541,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
542,<S2SV_ModStart> ) ) ; txopt_to_free ( flowlabel ) ;,0
543,<S2SV_ModStart> ; if ( in6_opt <S2SV_ModEnd> ( sk ),0
544,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
545,<S2SV_ModStart> 0 ; } if (! info ) return ;,0
546,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
547,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
548,<S2SV_ModStart> { if ( data_data_len < 0 ) goto err ; <S2SV_ModEnd> } if (,0
549,,0
550,,0
551,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null>,0
552,"<S2SV_ModStart> expr_ty returns, string type_comment",0
553,<S2SV_ModStart> ; if ( mi_start == NULL &&,0
554,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
555,<S2SV_ModStart>!= NULL ),0
556,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
557,,0
558,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
559,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
560,<S2SV_ModStart> 0 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
561,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
562,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_nullSV_nullS2SV_nullSV_nullS2SV_null> static <S2SV_ModStart> ; if ( t <S2SV_ModEnd> n_null> static <S2SV_ModStart> if ( tp ) { <S2SV_ModEnd> if ( t <S2SV_ModStart> 8 ) ; result = RLC_OK <S2SV_ModEnd> if ( t <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( t <S2SV_ModStart> 8 ) ; result = RLC_OK ; <S2SV_ModEnd> if ( t <S2SV_ModStart> if ( t ) ; result = RLC_OK <S2SV_ModEnd> if ( t <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( t <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( t <S2SV_ModEnd> if ( t <S2SV_ModStart> ) ; result = RLC_OK <S2SV_ModEnd> if ( t <S2SV_ModStart> 0 ) ; result = RLC_OK <S2SV_ModEnd> ; break ;,0
563,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
564,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
565,"<S2SV_ModStart> ( psf,",0
566,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
567,,0
568,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
569,<S2SV_ModStart> ( TEMP_FAILURE ),0
570,<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled,0
571,"<S2SV_ModStart> = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
572,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } ps_dec ->,0
573,"<S2SV_ModStart> int mptctl_register ( MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
574,,0
575,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
576,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
577,<S2SV_ModStart> ; # endif <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ; } # endif,0
578,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 4 <S2SV_ModEnd> ) ) {",0
579,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; char <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""%s"",",0
580,<S2SV_ModStart> dentry * dir <S2SV_ModEnd> ; int dir_read ( <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> spin_lock ( &,0
581,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( port <S2SV_ModStart> ) ; },0
582,<S2SV_ModStart> += 8 ; if ( ( i -> parent -> parent -> parent -> parent -> parent -> parent. parent -> parent -> parent -> parent -> parent. parent -> parent -> parent -> parent -> parentY + i -> parent -> parent -> parentY + i -> parent -> parent -> parent -> parent ) ; if ( i -> parent -> parent -> parent > i -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent ) { if ( ( ( i -> parent -> parent -> parent -> parent -> parent -> parent ) > i -> parent -> parent -> parent -> parent ) ) ; if ( i -> parent -> parent -> parent -> parent -> parent -> parent = i -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent = i -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent ) ; if ( i -> parent -> parent -> parent -> parent = i -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent = i -> parent -> parent -> parent -> parent + i -> parent -> parent -> parent -> parent -> parent -> parent -> parent ) ; if ( i -> parent -> parent -> parent -> parent -> parent -> parent ->,0
583,,0
584,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( data",0
585,,0
586,"<S2SV_ModStart> ( interface, ENC28J60_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> (",0
587,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
588,<S2SV_ModStart> ; if ( <S2SV_ModEnd> buf + 1,0
589,,0
590,"<S2SV_ModStart> ) ) { size_t <S2SV_ModEnd> offset = <S2SV_ModStart> ; if ( len <S2SV_ModEnd> == '\\0' ) <S2SV_ModStart> ) ) { out = ensure ( p ) ; if ( p ) cJSON_malloc ( p, 2 ) ; if ( out == '.' ) { p = ensure ( p, 1 ) ; } else out = ensure ( p ) ; if ( p ) { error = ensure ( p ) ; } else out = ensure ( p, 1 ) ; if ( p ) ; if ( p ) { out = ensure ( p, 1 ) ; } else out = ensure ( p ) ; if ( p + 1 ) { out = ensure ( p, 1 ) ; } else out = ensure ( p, 1 ) ; if ( p ) { p ) ; } else { p = ensure ( p ) ; } else out = ensure ( p, 1 ) ; } else out = ensure ( p ) ; if ( p + 1 ) { p + 1 ; } else out = ensure ( p ) ; if ( p ) { out = ensure ( p + 1 ) ; } else out = ensure ( p ) ; * ptr = ensure ( p ) ; if ( p + 1 ) ; if ( p + 1 )",0
591,,0
592,<S2SV_ModStart> ) ; return ret <S2SV_ModEnd> ; if (,0
593,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
594,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
595,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 1",0
596,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
597,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
598,<S2SV_ModStart> ; err =,0
599,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
600,,0
601,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
602,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 0' ) { if ( ( * cp == '\\0' ) return - 1 ; <S2SV_ModStart> ; if ( * cp == '\\0' ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= '\\0' ) return 0 <S2SV_ModEnd> ; * <S2SV_ModStart>!= '\\0' <S2SV_ModEnd> ; * <S2SV_ModStart>!= '\\0' ) return 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( * <S2SV_ModStart> == '\\0' ) return 0 <S2SV_ModEnd> ; * <S2SV_ModStart>!= '\\0' <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= '\\0' ) return 0 ;,0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
605,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ], L_BUFSIZE <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pix1, L_BUFSIZE <S2SV_ModEnd> ) ) ; if <S2SV_ModStart> ( pix1, L_BUFSIZE <S2SV_ModEnd>, pix1, <S2SV_ModStart>, pix1, <S2SV_ModStart> ( pix1, L_BUFSIZE <S2SV_ModEnd>, pix1, <S2SV_ModStart>, pix1, <S2SV_ModStart>, pix1, <S2SV_ModEnd>, pix1, <S2SV_ModStart>, pixRasterop ( pix1, <S2SV_ModStart>, pix1, <S2SV_ModEnd>, pix1, <S2SV_ModStart>, pix1, <S2SV_ModEnd>, pix1, <S2SV_ModStart>, pix1,",0
606,<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( x ->,0
607,,0
608,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
609,,0
610,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
611,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
612,<S2SV_ModStart> ) ; } if ( void ) return EINVAL ;,0
613,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
614,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
615,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
616,,0
617,,0
618,<S2SV_ModStart>! thresholds ) goto unlock <S2SV_ModEnd> ; unlock,0
619,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
620,"<S2SV_ModStart> cpi, vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
621,,0
622,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
623,<S2SV_ModStart> ; if ( CHILD,0
624,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
625,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static uint16_t status <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC624J600_TXRX <S2SV_ModEnd>, ENC624J600_TX_TX_SIZE <S2SV_ModStart> ( interface, ENC624J600_TX_TXX <S2SV_ModEnd>, ENC624J600_TX_TX_SIZE <S2SV_ModStart> ( interface, ENC624J600_TXX <S2SV_ModEnd>, ENC624J600_TXRX <S2SV_ModEnd>, ENC624J600_TXX <S2SV_ModStart> ( interface, ENC624J600_TXX <S2SV_ModEnd>, ENC624J600_TXX <S2SV_ModStart> ( interface, ENC624J600_TXX <S2SV_ModEnd>, ENC624J600_TXX <S2SV_ModStart> ( interface, ENC624J600_TXX <S2SV_ModEnd>, ENC624J600_TXX <S2SV_ModStart> ( interface, ENC624J600_TXX <S2SV_ModEnd> )!= <S2SV_ModStart> ( interface, ENC624J600_TXX, ENC624J600_TXX <S2SV_ModEnd>, ENC624J600_TXX <S2SV_ModStart> ( interface, ENC624J600_TX",0
626,,0
627,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
628,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
629,<S2SV_ModStart> } if ( (,0
630,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
631,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
632,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
633,<S2SV_ModStart> } <S2SV_null> <S2SV_null>,0
634,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2SV_null> <S2SV_null> static <S2SV_ModStart> 2SV_null> <S2SV_null> static <S2SV_ModStart> 2SV_null> <S2SV_null> static <S2SV_ModStart> 2SV_null> <S2SV_null> <SV_null> static <S2SV_ModStart> 2SV_null>,0
635,<S2SV_ModStart> ) ; } if (!,0
636,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, ENC6_PRINT32X <S2SV_ModEnd>, 1, <S2SV_ModStart> ( interface, ENC624J600_TXRX <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_PTR_TXRX <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_PTR_PTR_TXRX <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_TXRX <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_TXRX <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_PTR1, ENC624J600_PTR_TXRX <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_TXRX, ENC624J600_TXRX <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, ENC624J600_PTRXRX <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_REQ <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, <S2SV_ModStart> ( interface, ENC624J600_TX",0
637,,0
638,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
639,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return - 1,0
640,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits,0
641,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
642,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
643,,0
644,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
645,<S2SV_ModStart> return ret ;,0
646,,0
647,,0
648,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
649,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
650,,0
651,<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled,0
652,,0
653,<S2SV_ModStart> fs_dinode ) { if ( fa ) return fa ; } <S2SV_ModEnd> if ( fa,0
654,<S2SV_ModStart> ; vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if (,0
655,<S2SV_ModStart> ) break ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
656,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
657,"<S2SV_ModStart>, len + 4 <S2SV_ModEnd> ) ; if",0
658,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
659,,0
660,,0
661,<S2SV_ModStart> ; if ( usb_len < sizeof ( int ) ) return - EINVAL,0
662,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return err ;,0
663,<S2SV_ModStart> file ) ; <S2SV_ModEnd> } <S2SV_null>,0
664,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,0
665,,0
666,"<S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR <S2SV_ModEnd>, ENC624J600_EIR, <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_EIR <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600WriteReg ( interface, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_EIR <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_EIR, ENC624J600WriteReg ( interface, ENC624J600_EIR, ENC624J",0
667,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
668,,0
669,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
670,"<S2SV_ModStart> } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, 0 )",0
671,,0
672,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
673,"<S2SV_ModStart> ), _PyObject <S2SV_ModEnd> ) ; }",0
674,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
675,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
676,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
677,,0
678,,1
679,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
680,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
681,,0
682,<S2SV_ModStart> = 0 ; size_t len = 0 ;,0
683,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
684,<S2SV_ModStart> out_free ; } out_free ;,0
685,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
686,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_read_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ) return vpx_read_literal <S2SV_ModEnd> ( r,",0
687,"<S2SV_ModStart> : # line 102 <S2SV_ModEnd> ""hex_grammar.y"" { yr_destroy ( ( ( ( ( ( yyvaluep ), ""hex_node"" ) ) ) ; }",0
688,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> intra_block ( <S2SV_ModStart> block ) { const MACROBLOCKD * const xd = & xd -> mbmi ; MACROBLOCKD * const xd = xd -> mbmi ; const <S2SV_ModStart> block ] ; const tran_low_t * const mbmi = xd -> mbmi ; const tran_low_t * const uint8_t * const BLOCK_SIZE bsize = xd -> mbmi ; const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const tran_t * const <S2SV_ModStart> block ) ; const tran_low_t * const tran_t * const BLOCK_OFFSET ( x, bsize, bsize, bsize, bsize ) ; const uint8_t * const uint8_t * const uint8_t * const uint8_t * pd = ( pd -> mbmi ) ; const uint8_t * pd -> mbmi_t * pd",0
689,,0
690,<S2SV_ModStart> shm_perm ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
691,<S2SV_ModStart> -> priv_flags &= 0 ;,0
692,,0
693,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
694,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( msg,0
695,<S2SV_ModStart> } ret = TEMP_FAILURE_RETRY (,0
696,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
697,,0
698,<S2SV_ModStart> q ) ; spin_lock_irq ( ) ;,0
699,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
700,,0
701,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
702,,0
703,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int64_table ) return NULL <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL ) return NULL <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL ) return NULL <S2SV_ModEnd> ; if (,0
704,<S2SV_ModStart> env ) ; <S2SV_ModEnd> struct env *,0
705,"<S2SV_ModStart> ) { memset <S2SV_ModEnd> ( seg,",0
706,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
707,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
708,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case,0
709,<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( cpi,0
710,,0
711,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2SV_null> <S2SV_null> <S2SV_null>,0
712,"<S2SV_ModStart> ip_idents_idents_idents_idents_idents_hashrnd __read_idents_hashrnd __read_hashrnd __read_hashrnd __read_hashrnd <S2SV_ModEnd> ( ip_hashrnd,",0
713,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
714,"<S2SV_ModStart> * cm, vpx_writer <S2SV_ModEnd> * w,",0
715,,0
716,<S2SV_ModStart> err ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
717,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
718,,0
719,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
720,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vp9_decode_update ( const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const frame_decode ) { VP9Enc * const frame_decode = & cm -> common ; MACROBLOCKD * const frame_p9_decode ) { VP9_COMMON * const frame_decode = & cm -> common ; MACROBLOCKD * const tile_data = & frame_data -> frame_data ; MACROBLOCKD * const frame_size = & frame_size ; MACROBLOCKD * const frame_size = & frame_data -> frame_size ; MACROBLOCKD * const frame_size = & pbi -> frame_size ; FrameWorkerDataEnc * const frame_t * const frame_t * pbi -> frame_size = & frame_t * pbi -> frame_size ; FrameWorkerDataEnc ) { VP9_t * const frame_p9_t * const frame_t * const frame_map = ( frame_,0
721,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
722,<S2SV_ModStart> ; struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.,0
723,,0
724,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
725,"<S2SV_ModStart>, & len, 0",1
726,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
727,<S2SV_ModStart> rc ; const VP9EncoderConfig <S2SV_ModEnd> * oxcf =,0
728,,0
729,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
730,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
731,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
732,<S2SV_ModStart> case EXIT_RELEASE : case EXIT_REASON_ENT :,0
733,,0
734,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
735,,0
736,<S2SV_ModStart> ++ ) return - 1 <S2SV_ModEnd> ; if,0
737,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ) ; }",0
738,<S2SV_ModStart> ; if ( in6_opt <S2SV_ModEnd> ( sk ),0
739,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
740,<S2SV_ModStart> 3 ) { sprintf ( outputbuffer <S2SV_ModEnd> * output ),0
741,<S2SV_ModStart> } if ( fd!= NULL ) { fd = - 1 ; } <S2SV_ModEnd> if ( fd,0
742,,0
743,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
744,<S2SV_ModStart> { if ( cpi -> td.,0
745,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
746,<S2SV_ModStart> * s ; struct stream packet = * s ;,0
747,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
748,,0
749,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
750,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
751,<S2SV_ModStart> uint16 ; struct stream packet = * s ;,0
752,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
753,<S2SV_ModStart> cm -> fc -> fc,0
754,,0
755,<S2SV_ModStart> struct dvb_adapter * state ; struct dvb_device * state = 0 ; mutex_lock ( & d -> data_mutex ) ; mutex_lock ( & d -> data_mutex ) ; state -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 0 ] = 0xe ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 0 ] = 0xe ; state -> data [ 0 ] = 0 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 0 ] = 0xe ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data,0
756,<S2SV_ModStart> ; ctx -> <S2SV_ModEnd> ; if (,0
757,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
758,"<S2SV_ModStart> ; # ifdef USE_SUPPORTED <S2SV_ModEnd> ( sb,",0
759,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
760,<S2SV_ModStart> ; if ( task -> tk_status == NULL ) break ;,0
761,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
762,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
763,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i ; const <S2SV_ModStart> int i ; const VP9_COMMON * const tile_data = & tile_data -> tile_data ; MACROBLOCKD * const tile_data = & tile_data -> tile_data ; MACROBLOCKD * const tile_data = & tile_data -> tile_data ; tile_data -> tile_data [ tile_data -> tile_data [ tile_data ] ; tile_data -> tile_data [ tile_data ] ; tile_data [ 0 ] = 0 ; tile_data -> tile_data -> tile_data -> tile_data [ 0 ] ; tile_data [ 0 ] ; tile_data -> tile_data [ 0 ] = 0 ; tile_data -> tile_data -> tile_size ; tile_data -> tile_data [ 0 ] ; tile_data -> tile_data [ 0 ] ; tile_data -> tile_size ] = 0 ; tile_data -> tile_data -> tile_data -> tile_data [ tile_size ] ; tile_data [ tile_data [ tile_,0
764,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
765,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i ; memset <S2SV_ModEnd> ( seg,",0
766,,0
767,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
768,<S2SV_ModStart> ; ps_dec ->,0
769,<S2SV_ModStart> -> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock,0
770,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
771,,0
772,,0
773,<S2SV_ModStart> - EINVAL ; kfree ( dev ) ;,0
774,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> return 0 ;,0
775,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct sock_t * sock = NULL ; struct sock * sockaddr * sock = NULL ; struct sockaddr * sock = NULL ; struct sockaddr * sockaddr * sock = NULL ; struct sockaddr * sock = sock ; if (! sockaddr_t sock, sock, sock, sock, sock, sock, sock, sock, sock, sock, sock, sock, sock, sock, sock, sock, sock, sock, sock, sock <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( sock, & sock, & sock, sock, sock, sock, sock, sock, sock, sock <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( sock, & sock, sock, sock, sock, & sock, sock, sock, sock, sock <S2SV_ModEnd> ) ; if",0
776,<S2SV_ModStart> 0 ) ; memset <S2SV_ModEnd> ( cpi ->,0
777,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
778,<S2SV_ModStart> = 0 ; if ( len < 4 ) goto trunc ;,0
779,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
780,<S2SV_ModStart> int mptctl_eventquery ( MPT_ADAPTER * ioc,0
781,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
782,"<S2SV_ModStart> ; JAS_CAST ( ( JAS_CAST ( jas_uint <S2SV_ModEnd>, JAS_CAST (",0
783,,0
784,"<S2SV_ModStart> int m, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ) if ( vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ( r, vpx_read_literal <S2SV_ModEnd> ( r,",0
785,,0
786,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r )",0
787,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
788,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
789,<S2SV_ModStart> ( ret = 0,0
790,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
791,<S2SV_ModStart> skb -> nlattr <S2SV_ModEnd> ; if (,0
792,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
793,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
794,,0
795,<S2SV_ModStart> ; # endif # endif,0
796,,0
797,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
798,,0
799,,0
800,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart>, & OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModEnd> ) ; } if",0
801,,1
802,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
803,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ;,0
804,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2SV_null> <S2SV_null> <S2SV_null>,0
805,"<S2SV_ModStart>, dm9000ReadReg ( dm9000ReadReg ( DM9000_EPCR <S2SV_ModEnd>, dm9000ReadReg ( <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR <S2SV_ModEnd>, dm9000ReadReg ( <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, dm9000ReadReg ( DM9000_EPOS <S2SV_ModEnd>, dm9000_EPCR_EPCR, <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, dm9000ReadReg ( DM9000_EPCR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; if",0
806,,0
807,,0
808,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
809,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
810,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
811,,0
812,,0
813,<S2SV_ModStart> ; if ( msg_sys <S2SV_ModEnd> ( msg ->,0
814,<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled,0
815,<S2SV_ModStart> ; if (! <S2SV_ModEnd> ( r ),0
816,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
817,<S2SV_ModStart> client ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
818,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
