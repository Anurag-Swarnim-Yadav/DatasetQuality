,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> ; if ( unfrag_ip6hlen > sizeof ( struct frag_hdr ) - frag_hdr_sz ) { unfrag_ip6hlen = sizeof ( struct frag_hdr ) - frag_hdr_sz ; unfrag_ip6hlen = sizeof ( struct frag_hdr ) - unfrag_ip6hlen ; } else if ( unfrag_ip6hlen > sizeof ( struct frag_hdr ) - frag_hdr_sz ) { unfrag_ip6hlen = sizeof ( struct frag_hdr ) - frag_hdr_sz ; unfrag_ip6hlen = sizeof ( struct frag_hdr ) - frag_hdr_sz ; } else if ( unfrag_ip6hlen > sizeof ( struct frag_hdr ) - frag_hdr_sz ) { unfrag_ip6hlen = sizeof ( struct frag_hdr ) - frag_hdr_sz ; unfrag_ip6hlen = sizeof ( struct frag_hdr ) - frag_hdr_sz ; },0
2,"<S2SV_ModStart> ) ) { GF_Box * stco = ( GF_Box * ) gf_list_get ( writers, 0 ) ; GF_Box * stsc = ( GF_Box * ) gf_list_get ( writers, 1 ) ; if ( stco ) gf_isom_box_del ( stco ) ; gf_isom_box_del ( stsc",0
3,<S2SV_ModStart> item ) { return <S2SV_ModEnd> c -> child <S2SV_ModStart> -> next ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
4,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
5,"<S2SV_ModStart> { # ifndef _MSC_VER char * buf = grub_malloc ( <S2SV_ModEnd> EXT2_BLOCK_SIZE ( data <S2SV_ModStart> { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } leaf = grub_ext4_find_leaf ( data, buf, ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks, fileblock ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) leaf ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; fileblock -= grub_le_to_cpu32 ( ext [ i ]. block ) ; if ( fileblock >= grub_le_to_cpu32 ( ext [ i ]. len ) ) return 0 ; else { grub_disk_addr_",0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 0 <S2SV_ModStart> 0 ] ; tran_high_t temp1 = 0 ; temp2 = 0 ; s0 = input [ 0 ] + input [ 7 ] ; s1 = input [ 1 ] + input [ 6 ] ; s2 = input [ 2 ] + input [ 7 ] ; s3 = input [ 3 ] + input [ 4 ] ; s4 = input [ 2 ] + input [ 5 ] ; s5 = input [ 3 ] + input [ 6 ] ; s6 = input [ 4 ] + input [ 5 ] ; s7 = input [ 2 ] + input [ 7 ] ; t0 = input [ 0 ] + input [ 7 ] ; t1 = input [ 1 ] + input [ 6 ] ; t2 = input [ 2 ] + input [ 7 ] ; x0 = input [ 0 ] +",0
7,"<S2SV_ModStart> ( get4 ( ) == 0x48454150 && order == 0x4d4d ) { imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; } else if ( order == 0x4d4d && order == 0x4d4d ) { imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; } else { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - h",0
8,"<S2SV_ModStart> void search_filter_level ( const YV12_BUFFER_CONFIG * sd, VP9EncoderConfig <S2SV_ModEnd> * cpi, <S2SV_ModStart> partial_frame ) { <S2SV_ModEnd> struct loopfilter * <S2SV_ModStart> lf = & cpi -> loopfilter <S2SV_ModEnd> ; const int <S2SV_ModStart> ; int best_err <S2SV_ModEnd> ; int filt_best <S2SV_ModStart> ; int filt_direction <S2SV_ModEnd> ; int filt_mid <S2SV_ModStart> / 4 ; if ( cpi -> twopass. section_intra_rating < 20 ) bias = ( best_err >> ( 15 - ( filt_mid / 8 ) ) ) * filter_step ; if ( cpi -> twopass. section_intra_rating < 20 ) bias = ( best_err >> ( 15 - ( filt_mid / 8 ) ) ; if ( cpi -> twopass. section_intra_rating < 20 ) bias = bias * cpi -> twopass. section_intra_rating / 20 ; else bias = ( best_err >> ( 15 - ( filt_mid / 8 ) ) ) * filter_step ; if ( cpi -> twopass. section_intra_rating < 20 ) bias = bias * cpi -> twopass. section_",0
9,"<S2SV_ModStart> left == 0 ) { luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, len ) ; return luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", limit, ( int ) <S2SV_ModEnd> c. left <S2SV_ModStart> left == 0 ) { luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d."", offset, len ) ; return luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, len ) ; return luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", limit, ( int ) <S2SV_ModEnd> c. left",0
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> -> sign ) ; vpx_write ( w, mvcomp -> classes [ mv_class ] ) ; if ( mv_class == MV_CLASS_0 ) { vpx_write_token ( w, vp9_mv_class0_tree, mvcomp -> class0, & mv_class0_encodings [ d ] ) ; } else { for ( i = 0 ; i < CLASS0_BITS - 1 ; ++ i ) vpx_write ( w, ( d >> i ) & 1, mvcomp -> bits [ i ] ) ; } vpx_write_token ( w, vp9_mv_fp_tree, mvcomp -> class0_fp [ d ] <S2SV_ModEnd>, & mv_fp_encodings",0
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
12,"<S2SV_ModStart> ) dat ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; if ( length > 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; print_string ( ndo, ( const u_char * ) ptr, length - 5 ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
13,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; if ( dest_keyring ) { key_get ( dest_keyring ) ; return 0 ; } <S2SV_ModEnd> switch ( cred <S2SV_ModStart> KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : if ( cred -> request_key_auth ) { down_read ( & cred -> request_key_auth -> sem ) ; if (! test_bit ( KEY_FLAG_REVOKED, & cred -> flags ) ) dest_keyring = key_get ( cred -> request_key_auth -> dest_keyring ) ; if ( dest_keyring ) break ; } else { switch ( cred -> jit_keyring ) { case KEY_REQKEY_DEFL_THREAD_KEYRING : if ( cred -> thread_keyring ) dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get (",0
14,<S2SV_ModStart> = create_spnego_ctx ( 0,0
15,<S2SV_ModStart> tm = localtime_real <S2SV_ModEnd> ( & t,0
16,<S2SV_ModStart> length ) ; if ( strlen ( password ) > AUTH_PASS_LEN ) { abort ( ) ; },0
17,"<S2SV_ModStart> == p ) { r = - EINVAL ; goto not_found ; } r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) goto not_found ; r = sd_bus_open_system ( & bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1.Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) goto not_found ; r = sd_bus_call_method ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail",0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> CAP_CHOWN ) ) return - EPERM ; if ( ia_valid & ( ATTR_MODE | ATTR_MTIME_SET | ATTR_ATIME_SET | ATTR_TIMES_SET ) ) return - EPERM ; if ( ia_valid & ATTR_MODE ) { if (! inode_owner_or_capable ( inode ) ) return - EPERM ; if (! capable_wrt_inode_uidgid ( inode, CAP_FSETID ) ) return - EPERM ; } if ( ia_valid & ( ATTR_MTIME_SET | ATTR_ATIME_SET | ATTR_TIMES_SET ) ) return - EPERM ; if ( ia_valid & ATTR_MODE ) { if (! inode_owner_or_capable ( inode ) ) return - EPERM ; if (! in_group_p ( ( ia_valid & ATTR_GID )? attr -> ia_gid : inode -> i_gid ) &&! capable_wrt",0
19,"<S2SV_ModStart> NULL, NULL, NULL, & timeout ) ; if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) return FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ; if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) return FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ; if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) return FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ; if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) return FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ; if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) return FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ; return FD_ISSET ( reader -> bytes_available_fd, & read_",0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> detect_transition_to_still ( TWO_PASS <S2SV_ModStart> { int trans_to_still = 0 ; const FIRSTPASS_STATS * const <S2SV_ModEnd> position = twopass <S2SV_ModStart> ; if ( frame_interval < MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 ) { int j ; const FIRSTPASS_STATS tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; <S2SV_ModEnd> if ( tmp_next_frame <S2SV_ModStart> pcnt_inter - tmp_next_frame. <S2SV_ModStart> pcnt_motion < 0.999 ) break ; } <S2SV_ModEnd> reset_fpf_position ( twopass <S2SV_ModStart> } return trans_to_still <S2SV_ModEnd> ; } <S2SV_null>",0
21,"<S2SV_ModStart> return ret ; if ( offset > i_size_read ( inode ) ) { ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; }",0
22,"<S2SV_ModStart> ) ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) { request_module ( ""%s-",0
23,"<S2SV_ModStart> = GIT_PKT_NG ; ptr = line ; if (! ( ptr = strchr ( line,'<S2SV_blank>') ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' ; line = ptr + 1 ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line,",0
24,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read <S2SV_blank> negotiation <S2SV_blank> request"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read <S2SV_blank> negotiation <S2SV_blank> request"" ) ; return ; }",0
25,"<S2SV_ModStart> num ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num",0
26,"<S2SV_ModStart> 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ; return ret ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ; return ret ;",0
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
28,<S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ),0
29,<S2SV_ModStart> ) ) ; if ( ret < 0 ) { btif_storage_del_bonded_device ( remote_bd_addr ) ; return BT_STATUS_FAIL ; } <S2SV_ModStart> ) ) ; if ( ret < 0 ) { btif_storage_del_bonded_device ( remote_bd_addr ) ; return BT_STATUS_FAIL ; },0
30,<S2SV_ModStart> vpx_codec_err_t res ; <S2SV_ModEnd> if (! <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; <S2SV_ModEnd> for ( map,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> uint64_t dx_time ) { if ( frame_in < 0 || frame_out < 0 || frame_out > UINT64_MAX ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out ) ; return ; } if ( frame_in < 0 || frame_out > UINT64_MAX ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out ) ; return ; } if ( frame_in < 0 || frame_out > UINT64_MAX ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out ) ; return ; }",0
33,"<S2SV_ModStart> ; if ( ChopBlanks && imp_sth -> num_fields > imp_sth -> num_fields ) { if ( imp_sth -> num_fields > imp_sth -> num_fields ) { do_error ( sth, JW_ERR_SEQUENCE, ""number <S2SV_blank> of <S2SV_blank> fields <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", imp_sth -> num_fields, ( int ) ( imp_sth -> num_fields ) ) ) ; } else { if ( imp_sth -> num_fields > imp_sth -> num_fields ) { if ( imp_sth -> num_fields > imp_sth -> num_fields ) { do_error ( sth, JW_ERR_SEQUENCE, ""number <S2SV_blank> of <S2SV_blank> fields <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", imp_sth -> num_fields, ( int ) ( imp_sth -> num_fields ) ) ) ; } else { if ( imp_sth -> num_fields > imp_sth -> num_fields ) { do_error ( sth, JW_ERR_SEQUENCE, ""number <S2SV_blank> of <S2SV_blank> fields <S2SV_blank> (%d) <S2SV_blank>",0
34,"<S2SV_ModStart> NO_ERROR ; } <S2SV_ModEnd> enc28j60SetBit ( interface <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteBuffer ( interface, buffer, offset ) ; enc28j60WriteBuffer ( interface, buffer, offset ) ; enc28j60WriteBuffer ( interface, buffer, offset ) ; enc28j60WriteReg ( interface, ENC28J60_ETXNDL, LSB ( ENC28J60_TX_BUFFER_START + length ) ) ; enc28j60WriteReg ( interface",0
35,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value",0
36,"<S2SV_ModStart> ( page && ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ) ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> (",0
37,"<S2SV_ModStart> flag ) { <S2SV_ModEnd> double level = <S2SV_ModStart>.5 ) ; int mb_rows = source -> y_width >> 4 ; int mb_cols = source -> y_height >> 4 ; unsigned char * limits ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> v_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vpx_post_proc_down_",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> ce = mb_cache_entry_alloc <S2SV_ModStart> GFP_NOFS ) ; if (! ce ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } error = mb2_cache_entry_insert ( ext4_mb_cache, bh -> b_bdev, bh -> b_blocknr, hash ) ; <S2SV_ModEnd> if ( error <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } <S2SV_null>",0
39,"<S2SV_ModStart> ; return r_socket_http_answer <S2SV_ModEnd> ( s,",0
40,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ip_options_get_from_user ( struct <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ; if ( <S2SV_ModEnd> copy_from_user ( opt <S2SV_ModStart> -> __data, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } return ip_options_get_finish ( net, optp, opt, optlen ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
41,<S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
42,"<S2SV_ModStart> ) errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; else if ( term_is_gui ( T_NAME ) ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else <S2SV_ModEnd> if ( set_termcap <S2SV_ModStart> == FAIL ) errmsg = ( char_u * ) N_ ( ""E522: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> termcap"" ) ; else if ( <S2SV_ModStart> == FAIL ) errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( set_termcap ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E522: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> termcap"" ) ; else if ( set_termcap ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E522: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> termcap"" ) ; else",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,"<S2SV_ModStart> size_t size ; if ( width < 0 || height < 0 || hstep <= 0 || vstep <= 0 ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) ) { goto error ; } if (! jas_safe_",0
45,<S2SV_ModStart> == datalen ) { if ( pc + asn1_op_lengths [ op ] > datalen ) { goto machine_overrun_error ; } <S2SV_ModEnd> pc += asn1_op_lengths <S2SV_ModStart> ) || ( pc + asn1_op_lengths [ op ] > datalen ) ) { goto machine_overrun_error ; } <S2SV_ModEnd> pc += asn1_op_lengths <S2SV_ModStart> ) || ( pc + datalen - 1 > datalen ) ) { goto machine_overrun_error ; } <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> == datalen ) { if ( pc + datalen - 1 > datalen ) { goto machine_overrun_error ; } <S2SV_ModEnd> pc += asn1_op_lengths <S2SV_ModStart> ) || ( pc + datalen - 1 > datalen ) ) { goto machine_overrun_error ; } <S2SV_ModEnd> pc += asn1_op_lengths <S2SV_ModStart> ) || ( pc + datalen - 1 > datalen ) ) { goto machine_overrun_error ; } <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> == datalen ) { if ( pc + datalen - 1 > datalen ) { goto machine_overrun_error ; },0
46,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> int status ; struct kvec * kvec = req -> rq_rcv_buf. head <S2SV_ModEnd> ; uint32_t attrlen <S2SV_ModStart> ; int status <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen <S2SV_ModStart> recvd ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen <S2SV_ModStart> ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen <S2SV_ModStart> ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart>, & perms ) ; if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""USERPROFILE"" ) ) { uid = HTTP -> uid ; } else { uid = userToID ( owner ) ; } } if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else { gid = groupToID ( group ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; }",0
49,"<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER int number_aau ; if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; if ( hmm_alloc ( & hmm_d, number_aau ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = VPX_MALLOC_L ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr",0
50,"<S2SV_ModStart> int res ; <S2SV_ModEnd> long long export_index_table <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) + 1 <S2SV_ModEnd> ] ; res <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) ] ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table, indexes ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank>",0
51,"<S2SV_ModStart> HASH_DISABLED ; } else { return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 ) ; }",0
52,"<S2SV_ModStart> 0 ; # if CONFIG_VP8_ENCODER if ( global -> codec -> codec_type == VPX_CODEC_8 ) { ctrl_args = vp8_args ; ctrl_args_map = vp8_arg_ctrl_map ; # endif } else if ( global -> codec -> codec_type == VPX_CODEC_9 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif } else if ( global -> codec -> codec_type == VPX_CODEC_8 ) { ctrl_args = vp8_args ; ctrl_args_map = vp8_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif } else if ( arg_match ( & arg, & codec_type, argi ) ) { config -> codec_type = VPX_CODEC_9 ; } else if ( arg_match ( & arg, & codec_",0
53,"<S2SV_ModStart> } if ( <S2SV_ModEnd> verify_checks ( c <S2SV_ModStart> preverify_ok, callback_ctx ) ) { SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if (! sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } if (! sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } return 1 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
54,"<S2SV_ModStart> ; if ( fixed_length < AT91_AES_BLOCK_SIZE_BYTE ) { rc = - EINVAL ; goto exit ; } if ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { rc = - EINVAL ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) goto exit ; } if ( at91_aes_cmac ( data_length, data, fixed_length, key_size, cipher_key, iv ) ) goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { rc = - EINVAL ; goto exit ; } <S2SV_ModEnd> if ( at91_aes_cmac",0
55,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. bits_left -= bits_used ; cpi -> twopass. bits_left = MAX ( cpi -> twopass. bits_left, 0 ) ; } else { cpi -> twopass. bits_left = MAX ( cpi -> twopass. bits_left, 0 ) ; } if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. kf_group_bits += cpi -> rc. this_frame_target - bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } else { cpi -> twopass. kf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
56,"<S2SV_ModStart> 0x07 # define EOFOp 0x08 <S2SV_ModEnd> Image * image <S2SV_ModStart> ) ) ; image -> page. x = ReadBlobLSBShort ( image ) ; image -> page. y = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> alpha_trait = flags & 0x01 ; if ( image -> debug!= MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ; if ( exception!= ( ExceptionInfo * ) NULL ) assert ( exception -> signature == MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ; if ( image -> debug!= MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ; if ( exception!= ( ExceptionInfo * ) NULL ) { ThrowReaderException ( CorruptImageError, ""ImproperImage",0
57,"<S2SV_ModStart> err_free_urbinfo ; } dev_dbg ( & usbinterface -> dev, ""Using <S2SV_blank> USB <S2SV_blank> interface <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & us",0
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> = ""/tmp"" ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> fd = xfmkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> dir ) ) == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } <S2SV_ModEnd> copyfile ( lockfd",0
60,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; },0
61,"<S2SV_ModStart> ) ) { if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ) ) { if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ) ) { if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ) ) { if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ) ) { if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ) ) { if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ) ) { if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
62,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_setup_dst_planes ( MACROBLOCKD <S2SV_ModStart> mi_col ) { const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,"<S2SV_ModStart> == READ ) { ssize_t ret = 0 ; <S2SV_ModStart> = ocfs2_dio_get_block ; ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; } else { ret = __blockdev_direct_IO ( iocb, inode, file -> f_mapping -> host, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; } <S2SV_ModEnd> return __blockdev_direct_IO (",0
65,"<S2SV_ModStart>, def, strparm ) == 2 ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strparm [ len - 1 ] = 0 ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%i"", & parm ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%i"", & parm ) ; for ( i = 0 ;",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> ; PyCompilerFlags cf <S2SV_ModEnd> ; char * <S2SV_ModStart> * str ; <S2SV_ModEnd> PyObject * o <S2SV_ModStart> * o, * fstring_name ; Py_ssize_t <S2SV_ModEnd> len ; Py_ssize_t <S2SV_ModStart> NULL ) return NULL <S2SV_ModEnd> ; o = <S2SV_ModStart> = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = PyUnicode_GET_LENGTH ( o ) ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! Py_UNICODE_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } } if ( all_whitespace ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } str [ 0 ] = '(' ; memcpy ( str + 1, expr_start, len ) ;",0
67,"<S2SV_ModStart> string ) { while ( c && cJSON_strcasecmp ( c -> string, string ) ) c = c -> next ; <S2SV_ModEnd> while ( c",0
68,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
69,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; length = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length = EXTRACT_16BITS ( ptr )",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,"<S2SV_ModStart> int i ; const int stride [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_z ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
72,<S2SV_ModStart> ; lock_sock ( sk <S2SV_ModEnd> ) ; msg,0
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> user ) { <S2SV_ModEnd> cleanup_srcu_struct ( &,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,"<S2SV_ModStart> * for_ch ; int is_async = 0 ; if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) { ast_error ( c, CHILD ( n, 0 ), ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } if ( <S2SV_ModEnd> c -> c_feature_version <S2SV_ModStart> 6 ) { ast_error ( c, CHILD ( n, 1 ), ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( first, expression, NULL, is_async, c -> c_arena ) ; else comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col",0
77,"<S2SV_ModStart> NULL ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= dst_state -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= dst_state -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } dst_state -> frame [ i ] = dst ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; }",0
78,"<S2SV_ModStart> void write_mb_modes_kf ( const <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> w ) { const MACROBLOCKD * const xd = & cpi -> mb. e_mbd ; <S2SV_ModEnd> const MODE_INFO * <S2SV_ModStart> ; const MODE_INFO * const above_mi = xd -> above_available? mi_8x8 [ - xd -> mi_stride ] : NULL ; const MODE_INFO * const left_mi = xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const MB_MODE_INFO * const mbmi = xd -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ] ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ] ;",0
79,"<S2SV_ModStart> maxn ) { # ifdef DEBUG fprintf ( stderr, ""%d:\\tACTION[%3.3d]: <S2SV_blank> %s\\n"", n, actionName ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) ) ; # endif switch ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : return decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETPROPERTY : decompileGETPROPERTY ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n, actions, maxn ) ; return 0 ;",0
80,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> len < sizeof <S2SV_ModStart> - 1 ) ; ND_TCHECK_32BITS ( & prep -> pp_n ) ; ps = ( const struct pgstate * ) ( prep + 1 ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { const struct id_off * io, * ie ; char c = '<' ; ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & ps -> page. p_sid ), ps -> page. p_uid ) ) ; io = ( const struct id_off * ) ps + ps -> nid ; for ( ie = io + ps -> nid ; ie < ie ; ++ io ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), ps -> page. p_sid ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) io ; if ( ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo,",0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> pTable -> nModuleArg ; sqlite3_int64 <S2SV_ModEnd> azModuleArg = sqlite3DbRealloc,0
83,<S2SV_ModStart> 1 ) { if ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ]!= ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] ) ) { return 0 ; } <S2SV_ModStart> 1 ) { if ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ]!= ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] ) ) { return 0 ; } <S2SV_ModStart> 1 ) { if ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ]!= ( ptr,0
84,<S2SV_ModStart> -> dmin ; if <S2SV_ModEnd> ( p < <S2SV_ModStart> < q ) { if (! ONIGENC_IS_BYTE ( reg -> enc ) ||! ONIGENC_IS_BYTE ( reg -> enc ) ||! ONIGENC_IS_BYTE ( reg -> enc ) ||! ONIGENC_IS_BYTE ( reg -> enc ) ||! ONIGENC_IS_BYTE ( reg -> enc ) ||! ONIGENC_IS_BYTE ( reg -> enc ) ||! ONIGENC_IS_BYTE ( reg -> enc ) ||! ONIGENC_IS_BYTE ( reg -> enc ) ||! ONIGENC_IS_BYTE ( reg -> enc ) ||! ONIGENC_IS_BYTE ( reg -> enc ) ||! ONIGENC_IS_BYTE ( reg -> enc ) ||! ONIGENC_IS_BYTE ( reg -> enc ) ||! ONIGENC_IS_BYTE ( reg -> enc ) ||! ONIGENC_IS_BYTE ( reg -> enc ) ||! ONIGENC_IS_BYTE ( reg -> enc ) ||! ONIGENC_IS_BYTE ( reg -> enc ) ||! ONIGENC_IS_BYTE ( reg -> enc ),0
85,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_data <S2SV_ModEnd> * bfqd, <S2SV_ModStart> bfqd = bfqq -> bfqd <S2SV_ModEnd> ; enum bfqq_expiration <S2SV_ModStart> flags ; spin_lock_irqsave ( & bfqd -> lock, flags ) ; bfq_clear_bfqq_wait_request ( bfqq ) ; if (! bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ;",0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,"<S2SV_ModStart> newDataLength || diffPtr <S2SV_ModEnd> + x > <S2SV_ModStart> + diffBlockLength || extraPtr <S2SV_ModEnd> + y > <S2SV_ModStart> NULL ; } if ( diffPtr + x > diffBlock + diffBlockLength || extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( diffPtr + x > diffBlock + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, diffPtr, x ) ; if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
89,<S2SV_ModStart> pktopts ) ; rcu_read_lock ( ) ;,0
90,"<S2SV_ModStart> { if ( number_pixels > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_pixels > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_pixels > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_pixels > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_pixels > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_pixels > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile",0
91,<S2SV_ModStart> data ) { # if CONFIG_VP9_HIGHBITDEPTH switch ( data -> codec_flags & VPX_CODEC_HIGHBITDEPTH ) { case VPX_CODEC_HIGHBITDEPTH : return encoder_common_init_high ( ctx ) ; case VPX_CODEC_HIGHBITDEPTH : return encoder_common_init_high ( ctx ) ; case VPX_CODEC_HIGHBITDEPTH : return encoder_common_init_high ( ctx ) ; } # if CONFIG_VP9_HIGHBITDEPTH switch ( data -> codec_flags & VPX_CODEC_HIGHBITDEPTH ) { case VPX_CODEC_HIGHBITDEPTH : return encoder_common_init_high ( ctx ) ; case VPX_CODEC_HIGHBITDEPTH : return encoder_common_init_high ( ctx ) ; case VPX_CODEC_HIGHBITDEPTH : return encoder_common_init_high ( ctx ) ; } # endif,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert <S2SV_ModStart> ; Py_ssize_t i ; assert ( new_size > self -> memo_size ) ; PyMem_RESIZE ( memo_new, PyObject *, new_size ) ; if ( memo_new == NULL ) { PyErr_NoMemory ( ) ; return - 1 ; } PyMem_RESIZE ( memo_new, PyObject *, new_size ) ; if ( memo_new == NULL ) { PyErr_NoMemory ( ) ; return - 1 ; } PyMem_RESIZE ( memo_new, PyObject *, new_size ) ; if ( memo_new == NULL ) { PyErr_NoMemory ( ) ; return - 1 ; } PyMem_RESIZE ( memo_new, PyObject *, new_size ) ; if ( memo_new == NULL ) { PyErr_NoMemory ( ) ; return - 1 ; } PyMem_RESIZE ( memo_new, PyObject *, new_size ) ; if ( memo_new == NULL ) { PyErr_NoMemory ( ) ; return - 1 ; }",0
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,<S2SV_ModStart> ; } } # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
97,"<S2SV_ModStart> msicap ; int rc ; if ( pci_populate_msicap ( & msicap, msgnum, 1 ) ) return - EINVAL ; rc = pci_emul_add_capability ( dev, ( u_char * ) & msicap, sizeof ( msicap ) ) ; if ( rc < 0 ) return rc ; rc = pci_emul_add_capability ( dev, ( u_char * ) & msicap, sizeof ( msicap ) ) ; if ( rc < 0 ) return rc ; rc = pci_emul_add_capability ( dev, ( u_char * ) & msicap, sizeof ( msicap ) ) ; if ( rc < 0 ) return rc ; rc = pci_emul_add_capability ( dev, ( u_char * ) & msicap, sizeof ( msicap ) ) ; if ( rc < 0 ) return rc ; rc = pci_emul_add_capability ( dev, ( u_char * ) & msicap, sizeof ( msicap ) ) ; if ( rc < 0 ) return rc ; rc = pci_emul_",0
98,"<S2SV_ModStart>!= slaveofCommand ) { addReplyError ( c, ""link <S2SV_blank> with <S2SV_blank> MASTER <S2SV_blank> is <S2SV_blank> down <S2SV_blank> and <S2SV_blank> slave-serve-stale-data <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; return REDIS_OK ; } <S2SV_ModEnd> if ( server <S2SV_ModStart>!= infoCommand ) { addReplyError ( c, ""link <S2SV_blank> with <S2SV_blank> MASTER <S2SV_blank> is <S2SV_blank> down <S2SV_blank> and <S2SV_blank> slave-serve-stale-data <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYPASS ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYPASS ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return RED",0
99,"<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP8_HIGHBITDEPTH if ( ( cfg -> g_w!= ctx -> cfg. g_w ) || ( cfg -> g_h!= ctx -> cfg. g_h ) || ( cfg -> g_lag_in_frames > 1 || ( cfg -> g_pass!= VPX_RC_ONE_PASS ) ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; res = validate_config ( ctx, cfg, & ctx -> vp8_cfg, 0 ) ;",0
100,<S2SV_ModStart> cpi ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { cpi -> cur_buf -> flags &= ~ YV12_FLAG_HIGHBITDEPTH ; cpi -> cur_buf -> flags |= YV12_FLAG_HIGHBITDEPTH ; } else { cpi -> cur_buf -> flags &= ~ YV12_FLAG_HIGHBITDEPTH ; } # endif # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { cpi -> cur_buf -> flags &= ~ YV12_FLAG_HIGHBITDEPTH ; } else { cpi -> cur_buf -> flags &= ~ YV12_FLAG_HIGHBITDEPTH ; } # endif # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH,0
101,"<S2SV_ModStart> - EINVAL ; info -> si_signo = sig ; <S2SV_ModStart> - EPERM ; <S2SV_ModEnd> info -> si_code <S2SV_ModStart> >= 0 ) { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
102,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> size > ( u32 ) ptr -> size - 8 ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR ) ; return GF_ISOM_INVALID_FILE ; } <S2SV_ModStart> - 8 ; if ( tmp_strsize < 1 ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR ) ; return GF_ISOM_INVALID_FILE ; } <S2SV_ModStart> - 8 ; if ( tmp_strsize < 1 ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF",0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> void nfs4_state_set_mode_locked ( fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> == mode ) return ; if ( ( fmode & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( ( state -> state & FMODE_WRITE )!= ( state -> state & FMODE_WRITE ) ) { if ( ( state -> state & FMODE_READ )!= ( state -> state & FMODE_READ ) ) list_move ( & state -> open_states, & state -> owner -> so_states ) ; else list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } else { if ( ( state -> state & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( state -> state & FMODE_WRITE ) list_move ( & state -> open_states, & state -> owner -> so_states ) ; } else list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } state -> state = mode ; } <S2SV_ModEnd> <S2SV_null> <S2SV_",0
105,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, pwp_image -> columns, pwp_image -> rows ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) { LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; return ( ( Image * ) NULL ) ; } if ( status == MagickFalse ) { LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; return ( ( Image * ) NULL ) ; } status = SetImageExtent ( image, pwp_image -> columns, pwp_image -> rows ) ; if ( status == MagickFalse ) { LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; return ( ( Image * ) NULL ) ; } if ( status == MagickFalse ) { LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; return ( ( Image * ) NULL ) ; }",0
106,<S2SV_ModStart> 0 ; } memcpy <S2SV_ModEnd> ( elem.,0
107,"<S2SV_ModStart> ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", i, ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] )",0
108,<S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( c -> format == CHUNKY ) avctx -> pix_fmt = AV_PIX_FMT_YUV422 ; else if ( c -> format == CHUNKY ) avctx -> pix_fmt = AV_PIX_FMT_YUV422 ; else avctx -> pix_fmt = AV_PIX_FMT_YUV422 ; else if ( c -> format == CHUNKY ) avctx -> pix_fmt = AV_PIX_FMT_YUV422 ; else if ( c -> format == CHUNKY ) avctx -> pix_fmt = AV_PIX_FMT_YUV422 ; else if ( c -> format == CHUNKY ) avctx -> pix_fmt = AV_PIX_FMT_YUV422 ; else avctx -> pix_fmt = AV_PIX_FMT_YUV422 ; else if ( c -> format == CHUNKY ) avctx -> pix_fmt = AV_PIX_FMT_YUV422 ; else if ( c -> format == CHUNKY ) avctx -> pix_fmt = AV_PIX_FMT_YUV422,0
109,"<S2SV_ModStart> 1 ) ; } ND_TCHECK ( caplen ) ; <S2SV_ModStart> 1 ) ; case ETHERTYPE_ISOLP : case ETHERTYPE_ISOLP2 : case ETHERTYPE_ISOLP3 : if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, ""et1 <S2SV_blank> "" ) ) ; decnet_print ( ndo, p, length, caplen ) ; return ( 1 ) ; case ETHERTYPE_ISOLP2 : if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, ""et1 <S2SV_blank> "" ) ) ; decnet_print ( ndo, p, length, caplen ) ; return ( 1 ) ; case ETHERTYPE_PPPOED : case ETHERTYPE_PPPOES : case ETHERTYPE_PPPOES2 : pppoe_print ( ndo, p, length, caplen ) ; return ( 1 ) ; case ETHERTYPE_PPPOES2 : if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, ""et1 <S2SV_blank> "" ) ) ; decnet_print ( ndo, p,",0
110,"<S2SV_ModStart> image_noffset ) { const char * name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; verified = 1 ; break ; } } if ( noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } if ( noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; }",0
111,"<S2SV_ModStart> ; if ( kfifo_alloc_max ( & state -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL ) ) return - ENOMEM ; state -> dev = dev ; sd = & state -> sd ; v4l2_subdev_init ( sd, & cx23888_ir_controller_ops ) ; v4l2_set_subdevdata ( sd, state ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_rx_params ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_write4 (",0
112,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT",0
113,"<S2SV_ModStart> |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_EXTENDED_CTRL ) ; value |= TJA1100_EXTENDED_CTRL_CONFIG_EN ; tja1100WritePhyReg ( interface, TJA1100_EXTENDED_CTRL, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, T",0
114,<S2SV_ModStart> icmp_param. code = code ; icmp_param. code_to_saddr = info ; icmp_param. code_from_saddr = info ; icmp_param. code_to_saddr = code ; icmp_param. code_to_saddr = code ; icmp_param. code_to_saddr = info ; icmp_param. code_to_saddr = info ; icmp_param. code_to_saddr = info ; icmp_param. code_to_saddr = info ; icmp_param. code_to_saddr = info ; icmp_param. code_from_saddr = info ; icmp_param. code_to_saddr = code ; icmp_param. code_to_saddr = code ; icmp_param. code_to_saddr = info ; icmp_param. code_to_saddr = info ; icmp_param. code_to_saddr = info ; icmp_param. code_to_saddr = info ; icmp_param. code_to_saddr = info ; icmp_param. code,0
115,<S2SV_ModStart> else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart> -> open_flags ) ; if ( arg -> fmode & FMODE_READ ) { encode_fmode ( xdr, arg -> fmode, arg -> fmode, arg -> fmode ) ; } else { encode_fmode ( xdr, arg -> fmode, arg -> fmode, arg -> fmode ) ; }",0
118,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; return - ENODEV <S2SV_ModEnd> ; } switch <S2SV_ModStart> break ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
119,<S2SV_ModStart> case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case,0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,"<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), lshp -> ls_seq, lshp -> ls_age, lshp -> ls_length ) ) ; goto trunc ; } if ( lshp -> ls_length < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_age ), lshp -> ls_length ) ) ; goto trunc ; }",0
122,<S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; },0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd =,0
125,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] ; vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,"<S2SV_ModStart> & 0xffff ; if ( synth_devs [ dev ] -> load_patch == NULL ) { err = - ENODEV ; goto out ; } err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ; return err ; } if ( ev_code >= 128 ) { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 4 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; goto out ; } ev_size = 8 ; if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return count - c ; } if ( copy_from_user ( ( char * ) & event_rec [ 4 ], & ( buf ) [ p + 4 ], 4 ) ) goto out ; } if ( ev_code >= 128 ) { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> Invalid <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ;",0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 15 ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 2 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 9 ] ; tran_high_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 10 ] ; tran_high_t <S2SV_ModEnd> x11 = input <S2SV_ModStart> 11 ] ; tran_high_t <S2SV_ModEnd> x12 = input <S2SV_ModStart> 12 ] ; tran_high_t <S2SV_ModEnd> x14 = input <S2SV_ModStart> 1 ] ; tran_high_t <S2SV_ModEnd> x15 = input <S2SV_ModStart> 14 ] ; tran_high_t",0
129,<S2SV_ModStart> ; # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( VP9_COMP <S2SV_ModStart> const tile, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * <S2SV_ModEnd> mi_8x8, int <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const int mis <S2SV_ModStart> = num_8x8_blocks_wide_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; const int bs = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; const int hbs = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; if ( bw == bs && bh == bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8,",0
132,<S2SV_ModStart> -> flags & CLIENT_CLOSE_AFTER_REPLY <S2SV_ModEnd> ) break ;,0
133,"<S2SV_ModStart> = 0 ; err = 0 ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) err = ext4_mb_unmap_blocks ( handle, mpd -> inode, next, max_blocks, & new, get_blocks_flags ) ; if ( err ) return err ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) err = ext4_mb_unmap_blocks ( handle, mpd -> inode, next, max_blocks, & new, get_blocks_flags ) ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) err = ext4_mb_unmap_blocks ( handle, mpd -> inode, next, max_blocks, & new, get_blocks_flags ) ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) err = ext4_mb_unmap_blocks ( handle, mpd -> inode, next, max_blocks, & new, get_blocks_flags ) ; if ( err ) { ext4_msg ( mpd -> inode -> i_sb, KERN_ERR, """,0
134,"<S2SV_ModStart> = 0 ; oe_addrinfo_flags_t ai_flags = 0 ; oe_addrinfo_family_t ai_family = 0 ; oe_addrinfo_socktype_t ai_protocol = 0 ; <S2SV_ModStart>, handle, & ai_flags, & ai_family, & ai_socktype, & ai_protocol, & ai_addrlen, & canonnamelen, NULL, & p -> ai_addrlen, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval == - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval == - 1 || oe_errno!= OE_E_EADDRINVAL ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EADDRINVAL ) ; } if ( retval == - 1 || oe",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> int set_registers ( pegasus_t <S2SV_ModEnd> * pegasus, <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; ret = usb_control_msg ( pegasus -> usb, 0, PEGASUS_REQ_SET_REGS, 0, indx, buf, size, 100 ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; return ret ; }",0
138,"<S2SV_ModStart> asdl_seq * body <S2SV_ModEnd>, PyArena * <S2SV_ModStart> ; return p <S2SV_ModEnd> ; } <S2SV_null>",0
139,"<S2SV_ModStart> * src, vpx_bit_depth_t bit_depth, <S2SV_ModStart> >> 4 ; vpx_bit_depth_t bit_depth = ( src -> bit_depth + 15 ) >> 4 ; # endif <S2SV_ModEnd> struct lookahead_entry * <S2SV_ModStart> write_idx ) ; vpx_copy_and_extend_frame_with_rect ( src, & buf -> img, row << 4, col << 4, 16, ( int ) bit_depth <S2SV_ModEnd> ) ; # <S2SV_ModStart> } else { vpx_copy_and_extend_frame ( src, & buf -> img ) ; } # else vpx_copy_and_extend_frame ( src, & buf -> img ) ; # endif if ( ctx -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) return 1 ; ctx -> sz ++ ; buf = pop ( ctx, & ctx -> write_idx ) ; # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { for ( ; col < mb_cols ; ++ col ) {",0
140,"<S2SV_ModStart> sharpness ; if <S2SV_ModEnd> ( method == <S2SV_ModStart> LPF_PICK_FROM_Q ) { vpx_bit_depth_t bit_depth = cpi -> oxcf. bit_depth ; <S2SV_ModStart> int q = vp9_ac_quant <S2SV_ModEnd> ( cm -> <S2SV_ModStart> 0 ) ; vpx_bit_depth_t <S2SV_ModEnd> filt_guess = ROUND_POWER_OF_TWO <S2SV_ModStart> = ROUND_POWER_OF_TWO ( bit_depth <S2SV_ModEnd> * 20723 + <S2SV_ModStart> * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_SUBIMAGE ) ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
141,"<S2SV_ModStart> BTA_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; bt_property_t prop ; status = btif_storage_get_adapter_property ( & prop ) ; if ( status == BT_STATUS_SUCCESS ) { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BT_ERR ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
142,"<S2SV_ModStart> int a = getnum <S2SV_ModEnd> ( fmt,",0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if ( data_sz > UINT32_MAX / sizeof ( uint32_t ) ) { res = VPX_CODEC_ERROR ; } else { res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; } else { res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> flags & VPX_CODEC_HIGHBITDEPTH ) { if ( ctx -> flags & VPX_CODEC_HIGHBITDEPTH ) res = VPX_CODEC_HIGHBITDEPTH ; else if ( ctx -> flags & VPX_CODEC_HIGHBITDEPTH ) res = VPX_CODEC_ERROR ; else if ( ctx -> flags & VPX_CODEC_HIGHBITDEPTH ) res = VPX_CODEC_ERROR ; else if ( ctx -> flags & VPX_CODEC_HIGHBITDEPTH",0
145,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int isofs_read_inode (,0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> k ) ; }",0
147,<S2SV_ModStart> self ) { if ( self -> dict ),0
148,"<S2SV_ModStart> ; a && i < count ; ++ i <S2SV_ModEnd> ) { n <S2SV_ModStart> ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; } return a ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == Py_None ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,"<S2SV_ModStart> ; if ( msg_sys -> msg_namelen ) { err = - EINVAL ; goto out_freeiov ; } if ( msg_sys -> msg_flags & MSG_CMSG_COMPAT ) { err = verify_compat_iovec ( msg_sys, iov, & addr, VERIFY_WRITE ) ; } else { err = verify_iovec ( msg_sys, iov, & addr, VERIFY_READ ) ; } else { err = verify_iovec ( msg_sys, iov, & addr, VERIFY_READ ) ; } if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( err < 0 ) goto out_freeiov ; }",0
152,"<S2SV_ModStart> ) ; struct buffer_head * dibh = NULL ; struct gfs2_meta_inode * ip_inode = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_inode = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_inode = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_inode = GFS2_I ( inode ) ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if ( height > ip -> i_height ) { struct gfs2_meta_inode * ip_inode = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_inode = GFS2_I ( inode ) ; struct gfs2_meta_inode * gfs2_inode = GFS2_I ( inode ) ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; gfs2_trans_add_bh (",0
153,"<S2SV_ModStart> -> codec -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> filename, input -> filename <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( g_h ) ; SHOW ( g_timebase. num ) ; SHOW ( g_timebase. den ) ; SHOW ( g_error_resilient ) ; SHOW ( g_pass ) ; SHOW ( g_lag_in_frames ) ; SHOW ( rc_dropframe_thresh ) ; SHOW ( rc_resize_allowed ) ; SHOW ( rc_resize_up_thresh ) ; SHOW ( rc_resize_down_thresh ) ; SHOW ( rc_end_usage ) ; SHOW ( rc_2pass_vbr_bias_pct ) ; SHOW ( rc_2pass_vbr_minsection_pct ) ; SHOW ( rc_2pass_vbr_maxsection_pct ) ; SHOW ( rc_2pass_vbr_bias_pct ) ; SHOW ( rc_2pass_vbr_bias_pct ) ; SHOW ( rc_2pass_vbr_minsection_pct ) ; SHOW ( rc_2pass_vbr_maxsection_pct ) ; SHOW ( rc_2pass_vbr_bias_pct ) ; SHOW ( rc",0
154,"<S2SV_ModStart> ; if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } <S2SV_ModEnd> valueAVT = value <S2SV_ModStart> ; if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children",0
155,"<S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc",0
156,"<S2SV_ModStart> % 4096 == 0 ) ; if ( msix_tab_size < 4 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> msix <S2SV_blank> tab <S2SV_blank> size <S2SV_blank> (%d)\\n"", __func__, msix_tab_size ) ; return ; } <S2SV_ModEnd> bzero ( msixcap",0
157,<S2SV_ModStart>! js_regexec ( <S2SV_ModEnd> re -> prog,0
158,"<S2SV_ModStart> case OFreshOID : if ( <S2SV_ModEnd> Int_val ( Field <S2SV_ModStart> 1 ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; } <S2SV_ModEnd> case OShift : <S2SV_ModStart> case OReadItems : if ( size == 0 ) { v = Atom ( tag ) ; } else { v = Make_header ( size, tag, intern_color ) ; } * intern_dest = Make_header ( size, tag, intern_color ) ; * intern_dest += 1 + size ; if ( tag == Object_tag ) { Assert ( size >= 2 ) ; ReadItems ( & Field ( v, 2 ), size - 2 ) ; if ( size == 2 ) { v = Make_header ( size, tag, intern_color ) ; } else { v = Make_header ( size, tag, intern_color ) ; } * intern_dest = Make_header ( size, tag, intern_color ) ; * intern_dest += 1 + size ; if ( tag == Object_tag ) { * intern_dest = Make_header ( size, tag, intern_color ) ; } else { * intern_dest = Make_header ( size",0
159,"<S2SV_ModStart> = FALSE ; uint32_t ier = ksz8851ReadReg ( interface, KSZ8851_IER ) ; uint32_t isr = ksz8851ReadReg ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_LCIS )!= 0 ) { ier |= KSZ8851_IER_LCIE ; interface -> nicEvent = TRUE ; flag |= osSetEventFromIsr ( & netEvent ) ; } if ( ( isr & KSZ8851_ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( <S2SV_ModEnd> ( isr & <S2SV_ModStart> ( interface, KSZ8851_IER, ier <S2SV_ModEnd> ) ; return",0
160,"<S2SV_ModStart> void encode_quantization ( VP9EncoderConfig <S2SV_ModEnd> * cm, <S2SV_ModStart> * cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex, QINDEX_BITS ) ; write_delta_q ( wb, cm -> y_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_ac_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> x_dc_delta_q ) ; write_delta_q ( wb, cm -> x_ac_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> ac_delta_q ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
161,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> msglen ) ),0
162,<S2SV_ModStart> peerkey ) ; if ( peerkey -> type == EVP_PKEY_TYPE_RSA ) { if ( peerkey -> type == EVP_PKEY_TYPE_EC ) { if ( peerkey -> type == EVP_PKEY_TYPE_RSA ) { if ( peerkey -> type == EVP_PKEY_TYPE_EC ) { if ( peerkey -> type == EVP_PKEY_TYPE_EC ) { if ( peerkey -> type == EVP_PKEY_TYPE_EC ) { if ( peerkey -> type == EVP_PKEY_TYPE_RSA ) { if ( peerkey -> type == EVP_PKEY_TYPE_EC ) { if ( peerkey -> type == EVP_PKEY_TYPE_EC ) { if ( peerkey -> type == EVP_PKEY_TYPE_EC ) { if ( peerkey -> type == EVP_PKEY_TYPE_EC ) { if ( peerkey -> type == EVP_PKEY_TYPE_EC ) { if ( peerkey -> type == EVP_PKEY_TYPE_EC ) { if ( peerkey -> type == EVP_PKEY_TYPE_,0
163,<S2SV_ModStart> t1_getline ( ) ; t1_buf_ptr = eol ( t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
164,"<S2SV_ModStart> BLOCK_SIZE bsize, int <S2SV_ModEnd> subsize ) { <S2SV_ModStart> -> e_mbd ; int partition = partition_lookup [ bsize ] <S2SV_ModEnd> ; assert ( <S2SV_ModStart> case PARTITION_NONE : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col ) ; break ; case PARTITION_VERT : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_HORZ : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [",0
165,"<S2SV_ModStart> key_ref, KEY_NEED_READ <S2SV_ModEnd> ) ; if",0
166,<S2SV_ModStart> u4_first_slice_in_pic ) { if ( 0 == ps_dec -> u1_first_slice_in_pic ) { ps_dec -> u1_first_slice_in_pic = 0 ; ps_dec -> u1_first_slice_in_pic = 1 ; } else { if ( 0 == ps_dec -> u1_first_slice_in_pic ) { if ( 0 == ps_dec -> u1_first_slice_in_pic ) { ps_dec -> u1_first_slice_in_pic = 1 ; } else { if ( 0 == ps_dec -> u1_first_slice_in_pic ) { ps_dec -> u1_first_slice_in_pic = 0 ; } } else { if ( 0 == ps_dec -> u1_first_slice_in_pic ) { if ( 0 == ps_dec -> u1_first_slice_in_pic ) { ps_dec -> u1_first_slice_in_pic = 1 ; } else { if ( 0 == ps_dec -> u1_first_slice_in_pic ) { ps_dec,0
167,<S2SV_ModStart> var_off ) ; if ( src_known ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else if ( dst_reg -> smin_value == S64_MIN ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else if ( dst_reg -> smax_value == S64_MAX ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; } else if ( dst_reg -> smin_value == S64_MIN ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smin_value = S64_MAX ; } else if ( dst_reg -> smax_value == S64_MAX ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; },0
168,"<S2SV_ModStart> { cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; newInode = direntry -> d_inode ; <S2SV_ModEnd> filp = filp <S2SV_ModStart> -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_",0
169,"<S2SV_ModStart> ; rt = rcu_dereference_protected ( tp -> rt, sock_owned_by_user ( sk ) ) ; if ( rt == NULL ) goto out ;",0
170,"<S2SV_ModStart> svc_ctx ) { <S2SV_ModEnd> svc_log_reset ( svc_ctx <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> svc_log_reset ( svc_ctx <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> svc_log_reset ( svc_ctx <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> svc_log_reset ( svc_ctx <S2SV_ModStart> svc_ctx ) ; svc_log_reset ( svc_ctx <S2SV_ModStart> ""\\n"" ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i <S2SV_ModStart> ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> psnr_sum [ i ] [ 0 ], ( double ) si -> psnr_sum [ i ] [ 1 ], ( double ) si -> psnr_sum [ i ] [ 2 ], ( double ) si ->",0
171,"<S2SV_ModStart> = new_cols ; if ( screen -> buffer ) vterm_allocator_free ( screen -> vt, screen -> buffer ) ; screen -> buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( screen -> buffer ) vterm_allocator_free ( screen -> vt, screen -> buffer ) ; screen -> buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( screen -> buffer ) vterm_allocator_free ( screen -> vt, screen -> buffer ) ; screen -> buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( screen -> buffer ) vterm_allocator_free ( screen -> vt, screen -> buffer ) ; screen -> buffer = vterm_",0
172,"<S2SV_ModStart> { const char * literal_start = * str ; const char * literal_end = * str ; int in_named_escape = 0 ; int result = 0 ; assert ( * literal == NULL ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '{' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } if ( ch == '{' ) { <S2SV_ModEnd> ast_error ( c <S2SV_ModStart>, n, ""f-string",0
173,"<S2SV_ModStart> = create_dump_dir_from_problem_data ( <S2SV_ModEnd> pd, g_settings_dump_location",0
174,<S2SV_ModStart> 0 ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost",0
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * <S2SV_ModEnd> prev_mi_8x8 = cm <S2SV_ModStart> MODE_INFO * * <S2SV_ModEnd> prev_mi_8x8 = cm <S2SV_ModStart> MODE_INFO * * <S2SV_ModEnd> prev_mi_grid_visible + idx_str <S2SV_ModStart> MODE_INFO * * prev_mi_8x8 = cm -> prev_mi_grid_visible + idx_str <S2SV_ModStart> MODE_INFO * * prev_mi_8x8 = cm -> prev_mi_grid_visible + idx_str ; BLOCK_SIZE bsize ; vp9_zero ( xd -> <S2SV_ModEnd> pred_mv ) ; <S2SV_ModStart> case VAR_BASED_PARTITION : if ( cpi -> sf. partition_search_type == VAR_BASED_PARTITION ) { choose_partitioning ( cpi, tile, mi_row, mi_col ) ; nonrd_use_partition ( cpi, tile, mi_row, mi_col, BLOCK_64X64, & dummy_rate, & dummy_dist",0
178,"<S2SV_ModStart> ; dh = skb_header_pointer <S2SV_ModEnd> ( skb,",0
179,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static u32 <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> * opt, u32 <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) opt -> __data [ <S2SV_ModEnd> optlen ++ ] <S2SV_ModStart> IPOPT_END ; } <S2SV_ModEnd> if ( optlen <S2SV_ModStart> & 3 ) opt -> __data [ <S2SV_ModEnd> optlen ++ ] <S2SV_ModStart> IPOPT_END ; if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( * optp ) ; * optp = opt ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
180,"<S2SV_ModStart> ""Connection"" ) ; if ( connection == NULL ) goto error ; else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( count == 0 ) goto error ; for ( i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, ""Upgrade"" ) == 0 ) { sds token = tokens [ i ] ; sdsfreesplitres ( tokens, count ) ; if ( sdsfreesplitres ( tokens, count ) ; if ( sdsfreesplitres ( tokens",0
181,"<S2SV_ModStart> * findalldevs_if ; uint32 len <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ; } len <S2SV_ModEnd> += strlen ( <S2SV_ModStart> -> description ) len <S2SV_ModEnd> += strlen ( <S2SV_ModStart> -> name ) len <S2SV_ModEnd> += strlen ( <S2SV_ModStart> -> name ) len <S2SV_ModEnd> += sizeof ( <S2SV_ModStart> struct rpcap_findalldevs_if ) ; for ( address = d -> addresses ; address!= NULL ; address = address -> next ) { switch ( address -> addr -> sa_family ) { case AF_INET : case AF_INET6 : # endif break ; default : break ; } } } if ( sock_bufferize ( NULL, sizeof ( struct rpcap_header ), NULL, & sendbufidx, RPCAP_NETBUF_SIZE, SOCK_DGRAM ) == - 1 ) { if ( rpcapd_discard ( pars -> sockctrl, plen ) == - 1 ) { return - 1 ; } if ( pcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"", ""Send <S2SV_blank> to <S2SV_blank> client <S2SV_blank> failed: <S2SV_blank> %s""",0
182,"<S2SV_ModStart> struct dump_dir * <S2SV_ModEnd> dd = dd_create <S2SV_ModStart> DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; }",0
183,"<S2SV_ModStart> image ) ; if ( ( image -> columns % 2 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 2 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( image -> columns % 2 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 2 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( image -> columns % 4 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 4 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixel",0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
186,<S2SV_ModStart> in_cksum ) { <S2SV_ModEnd> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
187,"<S2SV_ModStart> &&! ptrace_has_cap ( task_cred ( task ) -> user_ns, mode ) ) { rcu_read_unlock ( ) ; return - EPERM ; } <S2SV_ModEnd> rcu_read_unlock ( )",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> case SEI_USER_DATA_REGISTERED_ITU_T_T34 : ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t34_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t35_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t37 : ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t37_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t37_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_37 : ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_,0
190,"<S2SV_ModStart> ; sde = kzalloc ( num_engines, GFP_KERNEL ) ; if (! dd -> per_sdma ) { hfi1_err ( dd, ""%s: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory\\n"", __func__ ) ; return - ENOMEM ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { hfi1_err ( dd, ""%s: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory\\n"", __func__ ) ; if (! sde ) { hfi1_err ( dd, ""%s: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory\\n"", __func__ ) ; return - ENOMEM ; } <S2SV_ModStart> ; if (! sde ) { hfi1_err ( dd, ""%s: Cannot <S2SV_blank> allocate <S2SV_blank> memory\\n"", __func__ ) ; return - ENOMEM ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { hfi1_err ( dd, ""%s: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory\\n"", __func__ ) ; if (! sde ) { hfi1_err ( dd, ""%s: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory\\n"", __func__ ) ; return - ENOMEM ; }",0
191,"<S2SV_ModStart> * info, <S2SV_ModEnd> int rep_quick ) <S2SV_ModStart> ""mi_repair_parallel"" ) ; if ( param -> testflag & T_UNPACK ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; } else if ( param -> testflag & T_UNPACK ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; } else if (! ( param -> testflag & T_SILENT ) ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; } else if (! ( param -> testflag & T_SILENT ) ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; } else if (! ( param -> testflag & T_SILENT ) ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank>",0
192,"<S2SV_ModStart> ) ; } if ( pcount > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) )",0
193,<S2SV_ModStart> val ) ; scannewline ( s ) ;,0
194,"<S2SV_ModStart> ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), ( unsigned long long ) c -> id, c -> buf ) ; * hend = '\\r' ; } for ( b = c -> buf ;'<S2SV_blank> '!= * b ; b ++ ) { if ( '\\0' == * b ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), ( unsigned long long ) c -> id, c -> buf ) ; * hend = '\\r' ; * hend = '\\r' ; } for ( b = c -> buf ;'<S2SV_blank> '!= * b ; b ++ ) { if ( '\\0' == * b ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), ( unsigned long long ) c -> id,",0
195,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_fht16x16_c ( const <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { vpx_fdct16_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> ] ; int i, j ; int16_t temp_in [ 16 ] ; temp_out [ 16 ] ; const transform_2d ht = FHT_16 [ tx_type ] ; for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) temp_in [ j ] = input [ j * stride + i ] * 4 ; ht. cols ( temp_in, temp_out ) ; for ( j = 0 ; j < 16 ; ++ j ) temp_in [ j ] = input [ j * stride + i ] * 4 ; ht. rows ( temp_in, temp_out ) ; for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0",0
196,"<S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( tmp_name, <S2SV_ModStart> tmpfile_name ) ) { g_assert ( tmp_name [ 0 ] == '\\0' ) ; g_assert ( tmp_name [ strlen ( tmp_name ) - 1 ] == '\\0' ) ; g_assert ( tmp_name [ strlen ( tmp_name ) - 1 ] == '\\0' ) ; g_assert ( tmp_name [ strlen ( tmp_name ) - 1 ] == '\\0' ) ; g_assert ( tmp_name [ strlen ( tmp_name ) - 1 ] == '\\0' ) ; } g_assert ( tmp_name [ 0 ] == '\\0' ) ; g_assert ( tmp_name [ strlen ( tmp_name ) - 1 ] == '\\0' ) ; if ( tmp_name [ strlen ( tmp_name ) - 1 ] == '\\0' ) { g_assert ( tmp_name [ strlen ( tmp_name ) - 1 ] == '\\0' ) ; tmp_name [ strlen ( tmp_name ) - 1 ] = '\\0' ; } else { g_assert ( tmp_name [ 0 ] == '\\0' ) ;",0
197,"<S2SV_ModStart> char * temp_filename = osi_calloc ( <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ) { fprintf ( fp, ""[%s]\\n"", section -> name ) ; } for ( const list_node_t * enode = list_begin ( config -> entries ) ; enode!= list_end ( config -> entries ) ) { const entry_t * entry = ( const entry_t * ) list_node ( enode ) ; fprintf ( fp",0
198,"<S2SV_ModStart> case VTP_SUMMARY_ADV : ND_TCHECK2 ( * tptr, VTP_UPDATE_TIMESTAMP_LEN ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Timestamp <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( tptr ), ipaddr_string ( ndo, tptr + 4 ) ) ) ; tptr += VTP_UPDATE_TIMESTAMP_LEN ; ND_TCHECK2 ( * tptr, VTP_UPDATE_TIMESTAMP_LEN ) ; ND_PRINT ( ( ndo, "", <S2SV_blank> Timestamp <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( tptr ), ipaddr_string ( ndo, tptr + 4 ) ) ) ; tptr += VTP_UPDATE_TIMESTAMP_LEN ;",0
199,"<S2SV_ModStart> userData, target, NULL <S2SV_ModEnd> ) ; ctxt <S2SV_ModStart> NULL ) ; ctxt -> instate = state ; return ; } if ( ctxt -> instate == XML_PARSER_PI ) { if ( input == NULL ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } else { if ( input == NULL ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } else { if ( input == NULL ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } } else { if ( input == NULL ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; }",0
200,"<S2SV_ModStart> ; int rv = Socket_print ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModStart> ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s"",",0
201,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> waitpid ( child <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> chown ( dest <S2SV_ModStart> ; if ( chmod ( dest, S_IRUSR | S_IWUSR ) < 0 ) errExit ( ""chmod"" ) ; unlink ( src ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
202,"<S2SV_ModStart> flags ) ; spin_lock_irqsave ( & bfad -> bfad_lock, flags ) ; <S2SV_ModStart> comp ) ; spin_unlock_irqrestore ( & bfad -> bfad_lock, flags ) ;",0
203,"<S2SV_ModStart> value ) { value -> x = MinF ( 1.0f, MaxF ( 0.0f, value -> x ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
204,<S2SV_ModStart> -> sasl_mechanism ; rec -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> sasl_password = g_strdup ( src -> sasl_password ) ;,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart>, o, datao ; if ( CHECKOVERFLOW ( buf_size, 6 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } datao = 6 + n -> order ; if ( CHECKOVERFLOW ( datao, buf_size, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } c = exif_get_short ( buf + o + 2, n -> order ) ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } s = exif_get_long ( buf + o + 4, n -> order ) ; if ( CHECKOVERFLOW ( s, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE",0
207,"<S2SV_ModStart> ""myisamchk"" ) ; if ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) { if (! ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) ) { if (! ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) { if (! ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) { if (! ( param -> testflag & T_DESCRIPT ) ) { if (! ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) { if (! ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) { if (! ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) { if (! ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) { if (! ( param -> testflag & T_DESCRIPT ) { if (! ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) { if (! ( param -> testflag & ( T_DESCRIPT | T_",0
208,"<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; CURLcode <S2SV_ModEnd> res ; if <S2SV_ModStart> CURL_convert_from_network ( handle <S2SV_ModEnd>, & in <S2SV_ModStart> 1 ) ; if (! res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = in ; while ( alloc > 0 ) { in = * string ; if ( ( '%' == in ) && ISXDIGIT ( string [ 1 ] ) && ISXDIGIT ( string [ 2 ] ) && ISXDIGIT ( string [ 2 ] ) && ISXDIGIT ( string [ 3 ] ) ) { in = curlx_ultouc ( hex ) ; res = Curl_convert_from_network ( handle, & in, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
209,<S2SV_ModStart> 4 ) ; RAnalOp <S2SV_ModEnd> next_op ; avr_op_analyze,0
210,"<S2SV_ModStart> = usm_secmod_process_in_msg ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_PREMIB_READ_CONFIG, init_usm_premib_read_config, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_premib_read_config, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL, ""MD5|SHA|SHA-512|SHA-384",0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd>! match (,0
212,"<S2SV_ModStart> ] ; # ifdef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= 1 ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; }",0
213,<S2SV_ModStart> case 3 : { CheckNumberPixels ( 4 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 6 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >>,0
214,"<S2SV_ModStart> timer ) ; list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; } list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; } mutex_unlock ( & register_mutex ) ;",0
215,"<S2SV_ModStart> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) ps_dec -> u4_bitoffset = ih264d_read_mmco_commands ( ps_dec ) ; else ps_dec -> ps_bitstrm -> u4_ofst += ps_dec -> u4_bitoffset ; } else { ps_dec -> ps_bitstrm -> u4_bitoffset = 0 ; } <S2SV_ModEnd> i_temp = ps_pps <S2SV_ModStart> -> u1_pic_init_qp + ih264d_sev ( pu4_bitstrm_ofst, pu4_bitstrm_buf ) ; if ( i_temp < 0 ) return ERROR_INV_RANGE_QP_T ; if ( i_temp > 51 ) return ERROR_INV_RANGE_QP_T ; i_temp = ps_pps -> u1_pic_init_qp + ih264d_sev ( pu4_bitstrm_ofst, pu4_bitstrm_buf ) ; if ( i_temp > 51 ) return",0
216,<S2SV_ModStart> { int_fast32_t widthOverflow = gifFilePtr -> Image. Width - info -> originalWidth ; int_fast32_t heightOverflow = gifFilePtr -> Image. Height - info -> originalHeight ; const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { break ; } <S2SV_ModEnd> if ( decode <S2SV_ModStart> decode ) { int_fast32_t widthOverflow = gifFilePtr -> Image. Width - gifFilePtr -> originalWidth ; int_fast32_t heightOverflow = gifFilePtr -> Image. Height - info -> originalHeight ; const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { break ; } if ( decode ) { int_fast32_t widthOverflow = gifFilePtr -> Image. Width - gifFilePtr -> originalWidth ; int_fast32_t heightOverflow = gifFilePtr -> Image. Height - info -> originalHeight,0
217,"<S2SV_ModStart> ) || cherokee_buffer_is_empty ( <S2SV_ModEnd> & conn -> <S2SV_ModStart> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret ; ret = init_filter ( ldap, props -> basedn. buf, LDAP_SCOPE_SUBTREE, props -> filter. buf, attrs, 0, & message ) ; if ( re!= 1 ) { LOG_ERROR ( CHEROKEE_ERROR_VALIDATOR_LDAP_SEARCH, ""subtree <S2SV_blank> search <S2SV_blank> (%s): <S2SV_blank> done\\n"", ldap -> filter. buf ) ; return ret_not_found ; } first = ldap_first_entry ( ldap -> conn, first ) ; if ( first == NULL )",0
218,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
219,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = sizeof ( * sin )",0
220,"<S2SV_ModStart> 0 ) { if ( len < 9 ) { t1mac_output_data ( ( byte * ) s, len - 9 ) ; return ; } <S2SV_ModStart> = ++ s ; if ( len < 9 ) { t1mac_output_data ( ( byte * ) t, len - 9 ) ; return ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> = ++ s ; if ( len < 9 ) { t1mac_output_data ( ( byte * ) t, len - 9 ) ; return ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> = ++ s ; if ( len < 9 ) { t1mac_output_data ( ( byte * ) s, len - 9 ) ; return ; } if ( len < 9 ) { t1mac_output_data ( ( byte * ) t, len - 9 ) ; return ; } <S2SV_ModEnd> if ( *",0
221,"<S2SV_ModStart>. active_set ; if ( uipc_main. read_set < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> failed <S2SV_blank> %s"", strerror ( errno ) ) ; continue ; } if ( uipc_main. read_set < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> failed <S2SV_blank> %s"", strerror ( errno ) ) ; continue ; } uipc_main. read_set = 0 ; result = select ( uipc_main. max_fd + 1, & uipc_main. read_set, NULL, NULL, NULL ) ; if ( result < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> failed <S2SV_blank> %s"", strerror ( errno ) ) ; continue ; }",0
222,<S2SV_ModStart> msixcap ; assert ( <S2SV_ModEnd> msgnum >= 1 <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_populate_msixcap ( &,0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,"<S2SV_ModStart> NULL ) goto cleanup ; status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ; } retval = 0 ;",0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE select_tx_mode ( const VP9EncoderConfig <S2SV_ModEnd> * cpi ) <S2SV_ModStart> ) { return ONLY_4X4 <S2SV_ModEnd> ; } else <S2SV_ModStart> else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL || cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ TX_MODE_SELECT ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL || cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type,0
226,<S2SV_ModStart> gf == GF_MHWPREDICT || gf == GF_DEVSEASONAL || gf == GF_MHWPREDICT || gf == GF_MHWPREDICT || gf == GF_DEVSEASONAL || gf == GF_MHWPREDICT || gf == GF_DEVSEASONAL || gf == GF_MHWPREDICT || gf == GF_DEVSEASONAL || gf == GF_GEASONAL || gf == GF_GEASONAL || gf == GF_GEASONAL || gf == GF_GEASONAL || gf == GF_GEASONAL || gf == GF_GEASONAL || gf == GF_GEASONAL || gf == GF_GEASONAL || gf == GF_GEASONAL || gf == GF_GEASONAL || gf == GF_GEASONAL || gf == GF_GEASONAL || gf == GF_GEASONAL || gf == GF_GEASONAL || gf == GF_GEASONAL || gf == G,0
227,<S2SV_ModStart> b ; if ( buf1 -> size > buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
228,"<S2SV_ModStart> = NULL ; if ( size > xt_max_table_info_size ) return NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __G",0
229,"<S2SV_ModStart> if (! net_eq ( net, & init_net ) ) return - EAFNOSUPPORT ; switch ( protocol ) { case 0 : case PF_AX25 : case PF_INET6 : case PF_INET7 : case PF_INET6 : case PF_INET6 : case PF_INET7 : case PF_INET6 : case PF_INET6 : case PF_INET6 : case PF_INET6 : case PF_INET6 : case PF_INET6 : case PF_INET6 : case PF_INET6 : case PF_INET6 : case PF_INET6 : case PF_INET7 : case PF_INET6 : case PF_INET7 : case PF_INET6 : case PF_INET6 : case PF_INET6 : case PF_INET6 : case PF_INET6 : case PF_INET6 : case PF_INET6 : case PF_INET6 : case PF_INET6 : case PF_INET6 : case PF_INET6 : case PF_INET6 : case PF_INET",0
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
231,"<S2SV_ModStart> b ) ; if ( b -> manager -> event == NULL ) { r = - ENODEV ; goto fail ; } r = sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } <S2SV_ModEnd> log_info ( ""Watching <S2SV_blank> system <S2SV_blank> buttons <S2SV_blank> on <S2SV_blank> /dev/input/%s <S2SV_blank> (%s)""",0
232,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
233,<S2SV_ModStart> lun ) sas_eh_defer_cmd ( cmd <S2SV_ModEnd> ) ; },0
234,"<S2SV_ModStart> ; REQ ( n <S2SV_ModEnd>, funcdef ) <S2SV_ModStart> ; } body = ast_for_suite ( c, CHILD ( n, name_i + 1 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; <S2SV_ModStart> is_async ) return AsyncFunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; else return FunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; } else return FunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse )",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ; <S2SV_ModStart> res ) ) ; <S2SV_ModEnd> return devm_ioremap (,0
239,"<S2SV_ModStart> : if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend,",0
240,<S2SV_ModStart> ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS <S2SV_ModEnd> ; } <S2SV_null>,0
241,<S2SV_ModStart> ; } } if ( line -> type == MD_LINE_BLANK ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 0 ; } else if ( line -> type == MD_LINE_COMMENT ) { line -> type = MD_LINE_COMMENT ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( line -> type == MD_LINE_COMMENT ) { ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( line -> type == MD_LINE_COMMENT ) { ctx -> last_line_has_list_loosening_effect = 0 ; } else if ( line -> type == MD_LINE_COMMENT ) { line -> type = MD_LINE_COMMENT ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( line -> type == MD_LINE_COMMENT ) { ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( line -> type == MD_LINE_COMMENT,0
242,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; struct task_struct <S2SV_ModStart> event ) ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> -> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } raw_spin_unlock_irq,0
243,<S2SV_ModStart>. post_proc_flag ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ) ; flags -> color_mb_modes_flag = ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) ; flags -> color_b_modes_flag = ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ),0
244,"<S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> length <S2SV_blank> %u"", ( int ) ( sizeof ( struct olsr_msg4 ) ) ) ) ; goto trunc ; } if ( msg_len < sizeof ( struct olsr_msg6 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> length <S2SV_blank> %u"", ( int ) ( sizeof ( struct olsr_msg6 ) ) ) ) ; goto trunc ; } if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> length <S2SV_blank> %u"", ( int ) ( sizeof ( struct olsr_msg4 ) ) ) ) ; goto trunc ; } ND_TCHECK2 ( * tptr, msg_len ) ; if ( msg_len_valid ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> length <S2SV_blank> %u"", ( int ) ( sizeof ( struct olsr_msg4",0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
246,"<S2SV_ModStart> { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( copy_file_as_user ( src, dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""fchmod"" ) ; return 1 ; } if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""fchmod"" ) ;",0
247,<S2SV_ModStart> ; if ( sfb >= ptr_hbe_txposer -> num_sfb ) { ptr_hbe_txposer -> num_sfb = ptr_hbe_txposer -> num_sfb ; ptr_hbe_txposer -> num_sfb = ptr_hbe_txposer -> num_sfb ; ptr_hbe_txposer -> num_sfb = ptr_hbe_txposer -> num_sfb ; } else { if ( sfb >= ptr_hbe_txposer -> num_sfb ) { ptr_hbe_txposer -> num_sfb = ptr_hbe_txposer -> num_sfb ; ptr_hbe_txposer -> num_sfb = ptr_hbe_txposer -> num_sfb ; ptr_hbe_txposer -> num_sfb = ptr_hbe_txposer -> num_sfb ; } else { if ( sfb >= ptr_hbe_txposer -> num_sfb ) { ptr_hbe_txposer -> num_sfb = ptr_hbe_txposer -> num_sfb ; ptr_hbe_txposer,0
248,"<S2SV_ModStart> lua_module ) ; <S2SV_ModEnd> int result ; <S2SV_ModStart> ; if ( <S2SV_ModEnd>! lua_checkstack ( <S2SV_ModStart> -> nelts ) ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; } lua_getglobal ( L, prov_spec -> function_name ) ; if (! lua_isfunction ( L, - 1 ) ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name ) ; ap_lua_release_state ( L,",0
249,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,"<S2SV_ModStart>! proto_end ) { printk ( KERN_WARNING ""Malformed <S2SV_blank> credential <S2SV_blank> URL: <S2SV_blank> %s\\n"", url ) ; return - 1 ; } <S2SV_ModEnd> cp = proto_end",0
251,"<S2SV_ModStart> fdt ) ; const char * const name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_BADSTRUCTURE ; <S2SV_ModStart> nextoffset ; switch ( tag ) { case FDT_PROP : include = want >= 2 ; stop_at = offset ; prop = fdt_get_property_by_offset ( fdt, offset, NULL ) ; str = fdt_string ( fdt, fdt32_to_cpu ( prop -> nameoff ) ) ; if (! str ) return - FDT_ERR_BADSTRUCTURE ; if ( str_in_list ( str, exc_prop, exc_prop_count ) ) include = 0 ; break ; case FDT_END_NODE : depth -- ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BAD_NODE ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BAD_DEPTH ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ;",0
252,"<S2SV_ModStart> % 100 ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; } <S2SV_ModEnd> if ( server <S2SV_ModStart> % 100 ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; } if (! ( loops % 100 ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; }",0
253,"<S2SV_ModStart> ( channel ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> Setting <S2SV_blank> up <S2SV_blank> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
254,<S2SV_ModStart> book -> dim && i < n,1
255,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
256,"<S2SV_ModStart> this_h ) { if ( sf -> x_scale_fp == REF_INVALID_SCALE || sf -> y_scale_fp == REF_INVALID_SCALE ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if ( sf -> y_scale_fp == REF_INVALID_SCALE ) { sf -> x_scale_fp = REF_INVALID_SCALE ; return ; } sf -> y_scale_fp = get_fixed_point_scale_factor ( other_w, this_w ) ; sf -> y_scale_fp = get_fixed_point_scale_factor ( other_h, this_h ) ; sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value ; } else { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y",0
257,<S2SV_ModStart> ; if ( count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
258,"<S2SV_ModStart> case IPV6_PKTINFO : if ( np -> rxopt. bits. srcinfo ) { struct in6_pktinfo src_info ; memset ( & src_info, 0, sizeof ( src_info ) ) ; memset ( & src_info, 0, sizeof ( src_info ) ) ; } break ; case IPV6_RXINFO : if ( np -> rxopt. bits. dstinfo ) { struct in6_pktinfo old_info ; old_info = * np -> rxopt. bits. dstinfo ; memset ( & src_info, 0, sizeof ( src_info ) ) ; memset ( & old_info, 0, sizeof ( src_info ) ) ; memset ( & src_info, 0, sizeof ( src_info ) ) ; } break ; case IPV6_RXINFO : if ( np -> rxopt. bits. dstinfo ) { struct ipv6_rxinfo old_info ; old_info = * np -> rxopt. bits. dstinfo ; memset ( & old_info, 0, sizeof ( src_info ) ) ; memset ( & old_info, 0, sizeof ( old_",0
259,<S2SV_ModStart> sctp_v6_del_protocol ( ) ; unregister_pernet_subsys ( & sctp_protosw_ops ) ; unregister_pernet_subsys ( & sctp_protosw_ops ) ; unregister_pernet_subsys ( & sctp_protosw_ops ) ; unregister_pernet_subsys ( & sctp_protosw_ops ) ; unregister_pernet_subsys ( & sctp_protosw_ops ) ; unregister_pernet_subsys ( & sctp_protosw_ops ) ; unregister_pernet_subsys ( & sctp_protosw_ops ) ; unregister_pernet_subsys ( & sctp_protosw_ops ) ; unregister_pernet_subsys ( & sctp_protosw_ops ) ; unregister_pernet_subsys ( & sctp_protosw_ops ) ; unregister_pernet_subsys ( & sctp_protosw_ops ) ; unregister_pernet_subsys ( & sctp_protosw_ops ) ; unregister_pernet_subsys ( & sctp_,0
260,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; return sse_to_psnr ( stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) <S2SV_ModEnd> ; } <S2SV_null>",0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> -> init ( ) ; TRACE_DEBUG ( ""CIDER=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL",0
263,<S2SV_ModStart> skip } ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags,0
264,"<S2SV_ModStart> ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; } if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; }",0
265,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ),0
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval <S2SV_ModEnd> * af_ratio ) <S2SV_ModStart> ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval <S2SV_ModEnd> * af_ratio ) <S2SV_ModStart> ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval <S2SV_ModEnd> * af_ratio ) <S2SV_ModStart> ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval <S2SV_ModEnd> * af_ratio ) <S2SV_ModStart> ) : ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval <S2SV_ModEnd> * af_ratio ) <S2SV_ModStart> ) : ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval <S2SV_ModEnd> * af_ratio ) <S2SV_ModStart> ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval <S2SV_ModEnd> * af_ratio ) <S2SV_ModStart> ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval <S2SV_ModEnd> * af_ratio ) <S2SV_ModStart> ) : ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval <S2SV_ModEnd> * af_ratio ) <S2SV_ModStart> ) : ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval <S2SV_ModEnd> * af_ratio ) <S2SV_ModStart> ( rc -> avg_,0
267,"<S2SV_ModStart> ++ ) { if <S2SV_ModEnd> ( strcmp ( <S2SV_ModStart> ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; } <S2SV_ModEnd> argv [ 0",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,"<S2SV_ModStart> ib ] ; <S2SV_ModEnd> dequant_ptr = d <S2SV_ModStart> ; # endif vp8_strict_quantize_b ( b, d ) ; # if CONFIG_VP8_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vp8_highbitdepth_b ( mb, d ) ; } else if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vp8_highbitdepth_b ( mb, d ) ; } else { # if CONFIG_VP9_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vp8_highbitdepth_b ( mb, d ) ; } else if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vp8_highbitdepth_b ( mb, d ) ; } else if ( mb -> e_mbd. mode_info_context ->",0
270,"<S2SV_ModStart> FN_REFLEN ] ; if ( strlen ( opt_basedir ) > FN_DIRLEN ) { error = - 1 ; goto exit ; } if ( strlen ( opt_basedir ) > FN_DIRLEN ) { error = - 1 ; goto exit ; } strncat ( buff, ""/"", sizeof ( buff ) - strlen ( opt_basedir ) - 1 ) ; # else strncat ( buff, FN_DIRSEP, sizeof ( buff ) - strlen ( opt_basedir ) - 1 ) ; # endif buff [ sizeof ( buff ) - 1 ] = 0 ; my_free ( opt_basedir ) ; opt_basedir = my_strdup ( opt_basedir ) ; opt_datadir = my_strdup ( opt_datadir ) ; opt_ini = my_strdup ( opt_ini ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
271,"<S2SV_ModStart> int n = ( pbi -> decrypt_cb ( pbi -> decrypt_state, data, clear_buffer, 10 ) ) ; if ( n < 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Decryption <S2SV_blank> failed"" ) ; } else { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Decryption <S2SV_blank> failed"" ) ; } if ( pbi -> decrypt_cb ) { int n = ( pbi -> decrypt_cb ( pbi -> decrypt_state, data, clear_buffer, 10 ) ; if ( n < 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Decryption <S2SV_blank> failed"" ) ; } if ( pbi -> decrypt_cb ) { int n = ( pbi -> decrypt_cb ( pbi -> decrypt_state, data, clear_buffer, n ) ; if ( n < 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, """,0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
273,"<S2SV_ModStart> * returnrate, RATE_DISTORTION <S2SV_ModEnd> * returndistortion, <S2SV_ModStart> CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_",0
274,"<S2SV_ModStart> goto error ; if (! h -> writable ) { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; DEBUG ( 2, ""mmap <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; } else { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; DEBUG ( 2, ""malloc <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; } if ( h -> addr == NULL ) { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; DEBUG ( 2, ""malloc <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; } else { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; DEBUG ( 2, ""malloc <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; }",0
275,"<S2SV_ModStart> u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id, uc_constraint_set0_flag, uc_constraint_set1_flag ; WORD32 i4_num_reorder_frames ; WORD32 pic_height_in_map_units_minus1 ; WORD32 u2_pic_wd, u2_pic_ht ; WORD32 u2_crop_offset_y, u2_crop_offset_uv ; WORD32 u4_num_reorder_frames ; WORD32 <S2SV_ModEnd> i4_num_reorder_frames ; WORD32",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; vpx_svc_parameters_t <S2SV_ModEnd> * const params <S2SV_ModStart> ; if ( <S2SV_ModEnd> params == NULL <S2SV_ModStart> == NULL ) return VPX_CODEC_INVALID_PARAM ; cpi -> svc. spatial_layer_id = params -> spatial_layer ; cpi -> svc. temporal_layer_id = params -> temporal_layer ; cpi -> svc. lst_fb_idx = params -> lst_fb_idx ; cpi -> gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; ctx -> cfg.",0
277,"<S2SV_ModStart> out ) { uint32 bitspersample = ( uint32 ) TIFFGetField ( in, TIFFTAG_BITSPERSAMPLE ) ; uint32 samplesperpixel = ( uint32 ) TIFFGetField ( in, TIFFTAG_SAMPLESPERPIXEL <S2SV_ModEnd> ) ; uint16 <S2SV_ModStart> uint16 input_compression, input_photometric ; uint32 length = ( uint32 ) TIFFGetField ( in, TIFFTAG_IMAGELENGTH ) ; if ( length!= ( uint32 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Length <S2SV_blank> of <S2SV_blank> cpTag <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } if ( length!= ( uint32 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Length <S2SV_blank> of <S2SV_blank> cpTag <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } if ( length!= ( uint32 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Length <S2SV_blank> of <S2SV_blank> cpTag <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large.\\n"", TIFFFileName ( in ) ) ;",0
278,"<S2SV_ModStart> a ) { <S2SV_ModEnd> char * pn <S2SV_ModStart> = '\\0' ; if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED",0
279,"<S2SV_ModStart> i_sb ) ; <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ; if (! bh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( ident == TAG_IDENT_IE && ibh ) { struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; if ( ie -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 1, & ident ) ; if (! bh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld)",0
280,"<S2SV_ModStart> -> tx_size ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint16_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y [ tx_size_y ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_",0
281,"<S2SV_ModStart> mq_ops ) { spin_lock_irqsave ( & fq -> mq_flush_lock, flags ) ; flush_rq -> tag = - 1 ; } running = & fq -> flush_queue [ fq -> flush_running_idx ] ; BUG_ON ( fq -> flush_pending_idx == fq -> flush_idx ) ; fq -> flush_running_idx ^= 1 ; if (! q -> mq_ops ) elv_completed_request ( q, flush_rq ) ; if (! q -> mq_ops ) spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ;",0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,"<S2SV_ModStart> ) ) { if (! smatch ( option, ""value"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> value <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> value"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> value <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; }",0
284,"<S2SV_ModStart> || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || * replySize > sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || * replySize > sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || * replySize > sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" )",0
285,<S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
286,<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) crgram_len = SC_MAX_APDU_BUFFER_SIZE - 1 ;,0
287,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> ch = i40e_channel_alloc (,0
288,<S2SV_ModStart> } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,<S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if ( pbi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( pbi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( pbi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( pbi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( pbi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( pbi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( pbi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( pbi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( pbi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( pbi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( pbi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) {,0
291,<S2SV_ModStart> NULL ) ; } quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
292,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * p <S2SV_ModEnd> ; char * <S2SV_ModStart> char * end ; if ( len > SIZE_MAX / 6 ) return NULL ; u = PyBytes_FromStringAndSize ( ( char * ) NULL, len * 6 ) ; if ( u == NULL ) return NULL ; p = buf = PyBytes_AsString ( u ) ; if ( p == NULL ) { Py_DECREF ( u ) ; return NULL ; } if ( * s & 0x80 ) { PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; p += 10 ; } assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> NO, DISPLAYED } <S2SV_ModEnd> wrerrno = 0 <S2SV_ModStart> ; int setimes <S2SV_ModEnd> ; int targisdir <S2SV_ModStart> ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> read <S2SV_blank> %s"", __func__, targ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> read <S2SV_blank> %s"", __func__, targ, stb. st_mode ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> read <S2SV_blank> %s"", __func__, targ, stb. st_mode ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> write <S2SV_blank> %s"", __func__, targ, stb. st_mode ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> read <S2SV_blank> %s"", __func__, targ, stb. st_mode ) ; if ( stat ( targ, & stb )!=",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,"<S2SV_ModStart> 0 ) { memset ( oci -> mip, 0, sizeof ( MODE_INFO ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; } else if ( ( width & 0xf0 )!= 0 ) { memset ( oci -> mip, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; } else if ( ( height & 0xf0 )!= 0 ) { memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; } else if ( ( width & 0xf0 )!= 0 ) { memset ( oci -> mip, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; } else if ( ( width & 0xf0 )!= 0 ) { memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) )",0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> ) ) { ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_in_pic = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_in_pic = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_in_pic = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_in_pic = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_in_pic = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_in_pic = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_in_pic = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_in_pic = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_in_pic =,0
298,"<S2SV_ModStart> ; if ( screen -> buffers [ 1 ] && screen -> buffers [ 0 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) vterm_screen_free_highbitdepth ( screen, screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) ; if ( screen -> buffers [ 0 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) vterm_screen_free_highbitdepth ( screen, screen -> buffers [ 0 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) ; if ( screen -> buffers [ 0 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) vterm_screen_free_highbitdepth ( screen, screen -> buffers [ 0 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) ; if ( screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) vterm_screen_free_highbitdepth ( screen, screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen",0
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart> one ) { if ( number_planes_filled > MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes_filled, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes_filled, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t",0
301,"<S2SV_ModStart> { httpSetHostName ( <S2SV_ModEnd> state -> host <S2SV_ModStart> NULL ) ) ; httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else if ( value ) { httpSetHostName ( state -> host, stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) ; httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
302,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
303,<S2SV_ModStart>! job_id || <S2SV_ModEnd>! prev_hash || <S2SV_ModStart>! prev_hash || <S2SV_ModEnd>! coinbase1 || <S2SV_ModStart>! coinbase2 ||! bbversion ||! nbit ||! ntime ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; if ( job_id ) free ( job_id ) ; if ( prev_hash ) free ( prev_hash ) ; if ( bbversion ) free ( bbversion ) ; if ( nbit ) free ( nbit ) ; if ( ntime ) free ( ntime ) ;,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { _Py_IDENTIFIER ( __dict__ ) ; <S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart> PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; return NULL ; } if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; return NULL ; } if ( dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } <S2SV_ModEnd> return res ;",0
306,"<S2SV_ModStart> & desc ) ; if (! desc ) { dev_err ( & udev -> dev, ""Missing <S2SV_blank> OTG <S2SV_blank> descriptor\\n"" ) ; return 0 ; } if ( desc -> bLength < sizeof ( struct usb_otg_descriptor ) ) { dev_err ( & udev -> dev, ""Invalid <S2SV_blank> OTG <S2SV_blank> descriptor <S2SV_blank> bLength <S2SV_blank> %d\\n"", desc -> bLength ) ; return 0 ; } if ( desc -> bLength > sizeof ( struct usb_otg_descriptor ) ) { dev_err ( & udev -> dev, ""Invalid <S2SV_blank> OTG <S2SV_blank> descriptor\\n"" ) ; return 0 ; } if ( desc -> bLength > sizeof ( struct usb_otg_descriptor ) ) { dev_err ( & udev -> dev, ""Invalid <S2SV_blank> OTG <S2SV_blank> descriptor <S2SV_blank> bLength <S2SV_blank> %d\\n"", desc -> bLength ) ; return 0 ; } if ( desc -> bLength > sizeof ( struct usb_otg_descriptor ) ) { dev_err ( & udev -> dev, ""Invalid <S2SV_blank> OTG <S2SV_blank> descriptor\\n"" ) ; return 0 ; }",0
307,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> ) ; case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_ID : { u64 id ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_SET_OUTPUT : { int ret ; if ( arg!= - 1 ) { struct perf_event * output_event ; struct fd output ; ret = perf_event_get_light ( arg, & output ) ; if ( ret ) return ret ; output_event = output. file -> private_data ; ret = perf_event_set_output ( event, output_event ) ; fdput ( output ) ; } else { ret = perf_event_set_output ( event, NULL ) ; } return ret ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
309,"<S2SV_ModStart> ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp",0
310,"<S2SV_ModStart> ; return Qnil ; } if ( RSTRING_LEN ( vpass ) > sizeof ( key ) ) ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", RSTRING_LEN ( vpass ) ) ; if ( RSTRING_LEN ( vpass ) > sizeof ( iv ) ) ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", RSTRING_LEN ( vpass ) ) <S2SV_ModStart> ) ; } if ( RSTRING_LEN ( vpass ) > sizeof ( key ) ) ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", RSTRING_LEN ( vpass ) ) ) ; if ( RSTRING_LEN ( vpass ) > sizeof ( key ) ) ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", RSTRING_LEN ( vpass ) ) ) ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)""",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,"<S2SV_ModStart> { DEBUGF ( ""recv: <S2SV_blank> [IB_READ_CLIENT_MAGIC]\\n"" ) ; iframe -> state = NGHTTP2_IB_READ_CLIENT_MAGIC ; if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } <S2SV_ModStart> case NGHTTP2_IB_READ_CLIENT_MAGIC : if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> state = NGHTTP2_IB_READ_CLIENT_MAGIC ; if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } <S2SV_ModStart> case NGHTTP2_IB_READ_CLIENT_MAGIC : if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> state = NGHTTP2_IB_READ_CLIENT_MAGIC ;",0
313,"<S2SV_ModStart> ) x86_pmu. num_counters_fixed = max_t ( int, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. num_counters_fixed = max_t ( int, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. num_counters_fixed = max_t ( int, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. num_counters_fixed = max_t ( int, MAX_PEBS_EVENTS, x86_pmu. num_counters_fixed ) ; if ( version > 1 ) x86_pmu. num_counters_fixed = max_t ( int, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. num_counters_fixed = max_t ( int, MAX_PEBS_EVENTS, x86_pmu. num_counters_fixed ) ;",0
314,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pack_mb_tokens ( vpx_writer <S2SV_ModStart> * w, const TOKENEXTRA * <S2SV_ModEnd> tp, const <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> & vp9_extra_bits [ t ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) ; int i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { const int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n -",0
315,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb = wb <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_compute_update_table ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> = wb ; vpx_clear_system_state ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> = wb ; vpx_clear_system_state ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> = saved_",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,"<S2SV_ModStart> ) { struct ikev2_id <S2SV_ModEnd> id ; int <S2SV_ModStart> * typedata ; <S2SV_ModEnd> ND_TCHECK ( * <S2SV_ModStart> * typedata ; ND_TCHECK_16BIT ( * ext ) ; <S2SV_ModStart> case ID_DER_ASN1_DN : if ( id. type == ID_IPV4_ADDR ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ipv4:"" ) ) ; dumpascii = 1 ; break ; } <S2SV_ModStart> case ID_IPV6_ADDR : ND_PRINT ( ( ndo, "" <S2SV_blank> ipv6:"" ) ) ; dumpascii = 1 ; break ; case ID_RFC822_ADDR : ND_PRINT ( ( ndo, "" <S2SV_blank> rfc822:"" ) ) ; dumpascii = 1 ; break ; case ID_RFC822_ADDR : ND_PRINT ( ( ndo, "" <S2SV_blank> rfc822:"" ) ) ; dumpascii = 1 ; break ; case ID_RFC822_ADDR : ND_PRINT ( ( ndo, "" <S2SV_blank> rfc822:"" ) ) ; dumpascii = 1 ; break ; case ID_RFC822_ADDR : ND_PRINT ( ( ndo, "" <S2SV_blank> rfc822:"" ) ) ; dumpascii = 1 ; break",0
318,<S2SV_ModStart> ) ) { if ( atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> height || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> height || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> height ) { goto error ; } if ( atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> height || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp ) ) { goto error ; },0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb_context ) ;,0
320,"<S2SV_ModStart>, fft_jmp ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD",0
321,<S2SV_ModStart> mntent ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ;,0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; fill_headers ( req, env ) ; rb_hash_aset ( env, rack_name_val, rack_name_val_val ) ; rb_hash_aset ( env, rack_url_scheme_val, rack_url_scheme_val ) ; rb_hash_aset ( env, rack_input_val, rack_input ( req ) ) ; rb_hash_aset ( env, rack_errors_val, rack_errors_val_val ) ; rb_hash_aset ( env, rack_multiprocess_val, Qfalse ) ; rb_hash_aset ( env, rack_logger_val, rack_logger_val_val ) ; rb_hash_aset ( env, rack_upgrade_val, req_rack_upgrade ( req ) ) ; rb_hash_aset ( env, rack_hijackq_val, self ) ; rb_hash_aset ( env, rack_hijack_io",0
324,"<S2SV_ModStart> endif # endif MYSQL_BIND * bind, * bind_end ; imp_sth_phb_t * fbind <S2SV_ModEnd> ; # endif <S2SV_ModStart>, prepare_retval ; # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = imp_dbh -> use_server_side_prepare ; if ( attribs ) { svp = DBD_ATTRIB_GET_SVP ( attribs, ""mysql_server_prepare"", 20 ) ; imp_sth -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare ; } if ( attribs ) { svp = DBD_ATTRIB_GET_SVP ( attribs, ""async"", 5 ) ; if ( svp && SvTRUE ( * svp ) ) { # if MYSQL_ASYNC imp_sth -> is_async = TRUE ; imp_sth -> use_server_side_prepare = FALSE ; # else do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"",",0
325,"<S2SV_ModStart> int eol ; size_t <S2SV_ModEnd> need = 0 <S2SV_ModStart> screen, { if ( screen -> screen_width < screen -> screen_height ) { SysError ( ERROR_SCREEN_OVERFLOW ) ; return ; } <S2SV_ModStart> screen, { if ( screen -> screen_height < screen -> screen_width ) { SysError ( ERROR_SCREEN_OVERFLOW ) ; return ; } <S2SV_ModStart> screen, { if ( screen -> screen_height < screen -> screen_width ) { SysError ( ERROR_SCREEN_OVERFLOW ) ; return ; } <S2SV_ModEnd> if ( need <S2SV_ModStart> *= 4 ; if ( screen -> screen_width < screen -> screen_height ) { SysError ( ERROR_SCREEN_OVERFLOW ) ; return ; } if ( screen -> screen_height < screen -> screen_width ) { SysError ( ERROR_SCREEN_OVERFLOW ) ; return ; } <S2SV_ModEnd> if_OPT_WIDE_CHARS ( screen <S2SV_ModStart> screen, { if ( screen -> screen_height < screen -> screen_width ) { SysError ( ERROR_SCREEN_OVERFLOW ) ; return ; } if ( screen -> screen_height < screen -> screen_height ) { SysError ( ERROR_SCREEN_OVERFLOW ) ; return ; }",0
326,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> 0.0000001 ; if ( len <= 0 ) { * str = 0 ; return 0 ; } <S2SV_ModEnd> else if ( <S2SV_ModStart> val < 0 ) { if ( -- len <= 0 ) { * str = 0 ; return 0 ; } <S2SV_ModEnd> str = ""Infinity"" <S2SV_ModStart> len ) ; return 0 ; } else { if ( val < 0 ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) ; val = ( JsVarFloat ) ( 1 + ( JsVarInt ) val ) ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '0' ; return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
327,"<S2SV_ModStart> cycles ) ; if ( unlikely ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; } if ( ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; } if ( ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { if ( ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; }",0
328,"<S2SV_ModStart> { strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_STRING ) { strncat ( str, ""String:\'"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_COMMENT ) { strncat ( str, ""Comment:\'"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; strncat ( str, ""\'"", len ) ; } else if ( lex -> tk == LEX_COMMENT ) { strncat ( str, ""Comment:\'"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_COMMENT ) { strncat ( str, ""Comment:\'"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_COMMENT ) { strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> int right ; if ( tree [ i ] <= 0 ) left = num_events [ - tree [ i ] ] ; else left = convert_distribution ( tree [ i ], tree, branch_ct, num_events ) ; if ( tree [ i + 1 ] <= 0 ) left = num_events [ - tree [ i + 1 ] ] ; else right = convert_distribution ( tree [ i + 1 ], tree, branch_ct, num_events ) ; if ( tree [ i + 2 ] <= 0 ) left = num_events [ - tree [ i + 2 ] ] ; else left = convert_distribution ( tree [ i + 2 ], tree, branch_ct, num_events ) ; if ( tree [ i + 3 ] <= 0 ) left = num_events [ - tree [ i + 3 ] ] ; else right = convert_distribution ( tree [ i + 3 ], tree, branch_ct, num_events ) ; if ( tree [ i + 3 ] <= 0 ) left = num_events [ - tree [ i + 3 ] ] ; else left = convert_distribution ( tree [ i + 3 ],",0
332,<S2SV_ModStart> s2 ) { if ( strlen ( s1 ) > strlen ( s2 ) ) { return - 1 ; } return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
333,"<S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL, NULL ) ; log_flush ( LOG_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL, NULL <S2SV_ModEnd> ) ; log_flush <S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; log_flush ( LOG_INFO ) ; return 2 ; }",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,"<S2SV_ModStart> md -> raw_packet == NULL ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } if ( st -> st_oakley. ta_encrypt == NULL ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } if ( st -> st_oakley. ta_encrypt == NULL ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } if ( st -> st_oakley. ta_encrypt == NULL ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } if ( st -> st_oakley. ta_encrypt == NULL ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because",0
336,<S2SV_ModStart> s_ivd_video_decode_ip_t. u4_num_Bytes ; if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; },0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> static char * <S2SV_ModEnd> print_string ( cJSON <S2SV_ModStart> item ) { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> valuestring ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
338,"<S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img,",1
339,"<S2SV_ModStart> ) ; } else if ( arg1 == 3 ) { win_set_geom ( 0, - 1, 0, 0 ) ; term. rows0 = 0 ; term. cols0 = 0 ; } else if ( arg1 == 4 ) { win_set_geom ( 0, - 1, 0, 0 ) ; term. rows0 = 0 ; term. cols0 = 0 ; } else if ( arg1 == 5 ) { win_set_geom ( 0, - 1, 0, 0 ) ; term. rows0 = 0 ; term. cols0 = 0 ; } else if ( arg1 == 6 ) { win_set_geom ( 0, - 1, 0, 0 ) ; term. rows0 = 0 ; term. cols0 = 0 ; } else if ( arg1 == 4 ) { win_set_geom ( 0, - 1, 0, 0 ) ; term. rows0 = 0 ; } else if ( arg1 == 6 ) { win_set_geom ( 0, - 1, 0, 0 ) ; term. rows0 = 0 ; term. cols0 = 0 ; } else if ( arg1 == 3 ) { win_set_geom ( 0,",0
340,<S2SV_ModStart> ++ ) s [ i ] = 0 ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x,0
341,"<S2SV_ModStart> ; if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return -",0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 16 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 32 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
343,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; },0
344,"<S2SV_ModStart> ) ) { switch ( c ) { case'<S2SV_blank>': break ; case 'e' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'E' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 't' : trunc_8to4 = SF_TRUE ; break ; case'm' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_32 ( psf, data ) ; } else if ( psf -> rwf_endian == SF_ENDIAN_LITTLE ) { header_put_be_32 ( psf, data ) ; } else if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_le_32 ( psf, data ) ; } else if ( psf -> rwf_endian == SF_ENDIAN_LITTLE ) { header_put_le_32 ( psf, data ) ; } else if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_32 ( psf, data ) ; } else { header",0
345,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
346,"<S2SV_ModStart> 0 ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",1
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> : return vp9_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> : return vp9_mse16x8 <S2SV_ModEnd> ; default : <S2SV_ModStart> : return vp9_mse8x16 <S2SV_ModEnd> ; } },0
348,<S2SV_ModStart> } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { padata -> pa_type = KRB5_PADATA_PKINIT_REQ_ZX ; } else if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ_ZX ) { padata -> pa_type = KRB5_PADATA_PKINIT_REQ_ZX ; } else if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ_ZX ) { padata -> pa_type = KRB5_PADATA_PKINIT_REQ_ZX ; } else if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ_ZX ) { padata -> pa_type = KRB5_PADATA_PKINIT_REQ_ZX ; } else if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ_ZX ) { padata -> pa_type = KRB5_PADATA_PKINIT_REQ_ZX ; } else if ( padata -> pa_type == K,0
349,"<S2SV_ModStart> flags ) ; <S2SV_ModEnd> v4l2_buf = to_vb2_v4l2_buffer <S2SV_ModStart> v4l2_buf ) ; <S2SV_ModEnd> if (! <S2SV_ModStart>! vb ) { if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame_len, input -> buf_cur_",0
350,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
351,<S2SV_ModStart> serviceId == EXTRACT_32BITS <S2SV_ModEnd> ( & rxh,0
352,"<S2SV_ModStart> bss_desc ; memset <S2SV_ModEnd> ( adhoc_start -> <S2SV_ModStart>, 0, sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) <S2SV_ModStart>, 0, sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) -",0
353,"<S2SV_ModStart> ; if ( sfe -> valuelen!= sfe -> namelen ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ] ) ; if ( error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } <S2SV_ModEnd> if ( context",0
354,"<S2SV_ModStart> = data ; struct l2cap_conf_rfc <S2SV_ModEnd> rfc = { <S2SV_ModStart> = L2CAP_MODE_ERTM ; rfc. txwin_size = L2CAP_DEFAULT_TX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) <S2SV_ModEnd> ) ; break",0
355,<S2SV_ModStart> { do { if (! TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_WAITALL ) ) ) <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
356,<S2SV_ModStart> return ERROR_INCOMPLETE_FRAME ; } if ( ( ps_dec -> u4_nal_ref_idc_found == 0 ) && ( ps_dec -> u4_nal_ref_idc_found == 1 ) && ( ps_dec -> u4_nal_ref_idc_found == 1 ) && ( ps_dec -> u4_nal_ref_idc_found == 1 ) && ( ps_dec -> u4_nal_ref_idc_found == 1 ) && ( ps_dec -> u4_nal_ref_idc_found == 1 ) && ( ps_dec -> u4_nal_ref_idc_found == 1 ) && ( ps_dec -> u4_nal_ref_idc_found == 1 ) && ( ps_dec -> u4_nal_ref_idc_found == 1 ) && ( ps_dec -> u4_nal_ref_idc_found == 1 ) && ( ps_dec -> u4_nal_ref_idc_found == 1 ) && ( ps_dec -> u4_nal_,0
357,<S2SV_ModStart>!= 0 ) <S2SV_ModEnd> { mprAddItem (,0
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode |= FMODE_READ | FMODE_WRITE ; rcu_read_lock ( ) ; deleg_cur = rcu_dereference ( nfsi -> delegation ) ; if ( deleg_cur == NULL ) goto no_delegation ; if ( fmode & ( FMODE_READ | FMODE_WRITE )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> deleg_cur ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, & deleg_cur <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret",0
359,"<S2SV_ModStart> ""btif_hl_select_close_connected"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
360,"<S2SV_ModStart> * xd, int64_t <S2SV_ModEnd> * out_dist_sum ) <S2SV_ModStart> int sse ; ( void ) cpi -> fn_ptr [ bs ]. vf ( x -> src. buf, x -> src. stride, pd -> dst. stride, & sse ) ; ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; int64_t square_error ; int quantizer ; if ( pd -> dequant [ 1 ] >> 3 ) rate = ( pd -> dequant [ 1 ] >> 3 ) ; else rate = 0 ; dist = ( pd -> dequant [ 1 ] >> 3 ) ; if ( quantizer < 120 ) rate = ( pd -> dequant [ 1 ] >> 3 ) ; else rate = 0 ; dist = ( pd -> dequant [ 1 ] >> 3 ) ; if ( quantizer < 120 ) rate = ( pd -> dequant [ 1 ] >> 3 ) ; else rate = 0 ; dist = ( pd -> dequant [ 1",0
361,"<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_trans_huge_end ( * pmd ) ) { if ( pmd_none_or_trans_huge_end ( * pmd ) ) mincore_unmapped_range ( vma, addr, next, vec ) ; else mincore_pte_range ( vma, pmd, addr, next, vec ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
362,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( * ret_username == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if (,0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { return vpx_read_tree <S2SV_ModEnd> ( r,",1
364,"<S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; dst_ptr2 += src_stride ; } } src_ptr1 = src - extend_left ; src_ptr2 = src + src_stride * ( height - 1 ) - extend_left ; dst_ptr1 = src + src_stride * ( height - 1 ) - extend_left ; dst_ptr2 = src + src_stride * ( height - 1 ) - extend_left ; for ( i = 0 ; i < extend_top ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_bottom ; ++ i ) { memcpy ( dst_ptr2, src_ptr2, linesize ) ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_right ; ++ i ) { memcpy ( dst",0
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,"<S2SV_ModStart> ++ ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ;",0
367,"<S2SV_ModStart> } n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n < ( length + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } netBufferRead ( context -> txBuffer, buffer, offset, length ) ; header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE ) ; <S2SV_ModEnd> netBufferRead ( context <S2SV_ModStart> length ) ; ksz8851ClearBit ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_TXQCR, KSZ8851_TX",0
368,<S2SV_ModStart> ; # endif # ifdef
369,"<S2SV_ModStart> x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_10, x_11, x_12, x_13, x_14, x_15 ; WORD32 x_16, x_17, x_18, x_19, x_19, x_20, n30, n01, n11, n21, n31 ; WORD32 n03, n12, n22, n32, n03, n13, n23, n33 ; WORD32 n13, n24, n33 ; WORD32 n24 ; WORD32 n25 ; WORD32 n26 ; WORD32 n27 ; WORD32 n28 ; WORD32 n29 ; WORD32 n29 ; WORD32 n29 ; WORD32 n30 ; n01 = x_0 + x_2 ; n02 = x_1 + x_3 ; n12 = x_4 + x_6 ; n13 = x_5 + x_7 ; n28 = y_4 + y_6 ; n29 = y_5 + y_7 ;",0
370,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
371,"<S2SV_ModStart>, frames ; <S2SV_ModEnd> if ( argc <S2SV_ModStart> 5 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 3 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> write\\n""",0
372,"<S2SV_ModStart>, result ; if ( num_fields < 0 ) { return 0 ; } _Py_IDENTIFIER ( _attributes ) ; PyObject * s, * l ; if (! PyUnicode_FromString ( attrs [ num_fields ] ) ) { Py_DECREF ( l ) ; return 0 ; } l = PyTuple_New ( num_fields ) ; if (! l ) return 0 ; for ( i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } PyTuple_SET_ITEM ( l, i, s ) ; } for ( i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } PyTuple_SET_ITEM ( l, i, s ) ; } for ( i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ;",0
373,"<S2SV_ModStart> = VPX_CODEC_OK ; <S2SV_ModEnd> struct vpx_codec_alg_priv * <S2SV_ModStart> -> priv ) { struct vpx_codec_alg_priv * priv = calloc ( 1, sizeof ( struct vpx_codec_alg_priv ) ) ; if (! priv ) { return VPX_CODEC_MEM_ERROR ; } } ctx -> priv -> sz = sizeof ( * ctx -> priv ) ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> init_flags = ctx -> init_flags ; ctx -> priv -> init_flags = ctx -> init_flags ; ctx -> priv -> init_flags = ctx -> init_flags ; ctx -> priv -> init_flags = ctx -> init_flags ; ctx -> priv -> init_flags = VPX_CODEC_MEM_ERROR ; } <S2SV_ModEnd> cfg = & <S2SV_ModStart> i ++ ) ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h * 3 / 2 * 2 ; if ( priv -> cx_data_sz < 32768 ) priv -> cx_data_",0
374,<S2SV_ModStart> } if ( cnt_c > BOT ) { pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> total_freq = totfr ; return ret ; } pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_c + step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 16 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; pixel -> lookup [ i ] = sum ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i,0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart>. ptrs ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart>. sizes ) ) ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ ctx -> fragments. count ] = data ; ctx -> fragments. sizes [ ctx -> fragments. count ] = data_sz ; ctx -> fragments. count ++ ; if ( ctx -> fragments. count > ( 1 << EIGHT_PARTITION ) + 1 ) { ctx -> fragments. count = 0 ; * res = VPX_CODEC_INVALID_PARAM ; return - 1 ; } return 0 ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ ctx -> fragments. count ] = data ; ctx -> fragments. sizes [ ctx -> fragments. count ++ ] = data_sz ; ctx -> fragments. count ++ ; if ( ctx -> fragments. count > ( 1 << EIGHT_PARTITION ) + 1 ) { ctx -> fragments. count = 0 ; * res = VPX_CODEC_INVALID_PARAM ; return - 1 ;,0
376,"<S2SV_ModStart> ; if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe",0
377,"<S2SV_ModStart> data ) { <S2SV_ModEnd> enc28j60WriteReg ( interface <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & ENC28J60_MISTAT_BUSY <S2SV_ModStart> ( interface, ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { char * ptr ; int n = 0 ; ptr = fmt ; while ( * ptr!= '\\0' ) if ( * ptr == '%' ) ptr ++ ; else if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } else if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u,0
379,"<S2SV_ModStart> ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragReverseSimpleTest"", DefragReverseSimpleTest ) ; UtRegisterTest ( ""DefragSturgesNovakBsdTest"", DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""DefragSturgesNovakLinuxTest"", DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""DefragSturgesNovakWindowsTest"", DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""DefragSturgesNovakFirstTest"", DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""DefragSturgesNovakLastTest"", DefragSturgesNovakLastTest ) ;",0
380,<S2SV_ModStart> = object_length ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if (,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,"<S2SV_ModStart> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"",! p_pic -> b_progressive ) ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"",! p_pic -> b_progressive ) ; else if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"",! p_pic -> b_progressive ) { if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"",! p_pic -> b_progressive ) { if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"",! p_pic",0
384,"<S2SV_ModStart> ) ) { if (! mp_path_exists ( mf -> names [ 0 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ 0 ] ) ; } else { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ 0 ] ) ; } mp_tarray_append ( mf -> names, mf -> names, 1 ) ; if (! mp_path_exists ( mf -> names [ 0 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ 0 ] ) ; } else if (! mp_path_exists ( mf -> names [ 0 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ 0 ] ) ; } else if (! mp_path_exists ( mf -> names [ 0 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ 0 ] ) ; } else",0
385,"<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> ) ; for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; if ( a -> name & GUID_EXISTS_FLAG ) a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ; idx += sizeof ( GUID ) ; if ( a -> name & GUID_EXISTS_FLAG ) a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ; idx += sizeof ( GUID ) ; if ( a -> name & GUID_EXISTS_FLAG ) a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ; idx += sizeof ( GUID ) ; if ( a -> type",0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; <S2SV_ModEnd> YV12_BUFFER_CONFIG * fb <S2SV_ModStart> * fb ; <S2SV_ModEnd> vp9_get_reference_dec ( ctx <S2SV_ModStart> -> idx, & fb ) ; yuvconfig2image ( & data -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
388,"<S2SV_ModStart> ++ ) { if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ++ ) { if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ++ ) { if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ++ ) { if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" )",0
389,"<S2SV_ModStart> ) == 1 && TYPE ( CHILD ( n, 0 ) ) == testlist ) { node * ch = CHILD ( n, 0 ) ; if (! set_context ( c, e, Store, ch ) ) return NULL ; } ch = CHILD ( n, 2 ) ; if ( TYPE ( ch ) == testlist ) expr1 = ast_for_testlist ( c, ch ) ; else expr1 = ast_for_expr ( c, ch ) ; if (! expr1 ) return NULL ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; ch = CHILD ( n, 2 ) ; if ( TYPE ( ch ) == testlist ) expr1 = ast_for_testlist ( c, ch ) ; else expr1 = ast_for_expr ( c, ch ) ; if (! expr1 ) return NULL ; switch ( TYPE ( ch ) == testlist ) expr1 = ast_for_testlist ( c, ch ) ; else expr1 = ast_for_testlist ( c, ch ) ; else expr1 = ast_for_expr ( c, ch ) ; if (! ch ) return NULL ;",0
390,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y, int mc_avg_y_stride, unsigned char * running_avg_y, int avg_y_stride, <S2SV_ModEnd> int motion_magnitude, <S2SV_ModStart> = 16 ; <S2SV_ModEnd> int r, <S2SV_ModStart> int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; i ++ ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = mc_running_avg_y [ c ] - sig [ c ] ; int absdiff = abs ( diff ) ; if ( absdiff >= <S2SV_ModEnd> 4 && absdiff <S2SV_ModStart> <= 7 ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ; } else { if ( absdiff >= 8 && absdiff <= 15 ) adjustment",0
391,"<S2SV_ModStart> ) ) { if ( reqPtr -> request. line == NULL ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> maxline <S2SV_blank> reached <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> bytes"", drvPtr -> maxline ) ; sockPtr -> flags = NS_CONN_REQUESTURITOOLONG ; } else { if ( reqPtr -> request. line == NULL ) { sockPtr -> keep = NS_FALSE ; if ( reqPtr -> request. line == NULL ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> maxline <S2SV_blank> reached <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> bytes"", drvPtr -> maxline ) ; sockPtr -> flags = NS_CONN_REQUESTURITOOLONG ; } else { sockPtr -> flags = NS_CONN_LINETOOLONG ; } } } else { if ( reqPtr -> request. line == NULL ) { sockPtr -> keep = NS_FALSE ; if ( reqPtr -> request. line == NULL ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> maxline <S2SV_blank> reached <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> bytes"", drvPtr -> maxline ) ; sockPtr -> flags = NS_CONN_",0
392,"<S2SV_ModStart> ret = 0 ; if ( xtregs -> cp0 & XTREGS_CP0_BITMAP ) { ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ) ; } else { ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ) ; }",0
393,<S2SV_ModStart> size ) ; if ( message -> length > message -> size ) { message -> length = message -> size ; message -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; } else { message -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; } message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; # if ( ETH_SUPPORT == ENABLED ) message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif,0
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> if ( xop <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) { struct se_node_acl * se_node_acl = xop -> src_dev -> se_node_acl <S2SV_ModStart> -> dst_dev ; se_node_acl = xop -> src_dev -> se_node_acl <S2SV_ModEnd> ; pr_debug ( <S2SV_ModStart> ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & se_node_acl -> cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; } else { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & se_node_acl -> cg_item ) ; target_undepend_item ( & se_node_acl -> cg_item ) ; target_undepend_item ( & se_node_acl -> cg_item ) ; }",0
395,"<S2SV_ModStart> int error ; struct mb2_cache * ext2_mb_cache = EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModEnd> ; new_bh = <S2SV_ModStart> get_bh ( new_bh ) ; mb2_cache_insert ( ext2_mb_cache, new_bh <S2SV_ModEnd> ) ; } <S2SV_ModStart> new_bh ) ; mb2_cache_put ( ext2_mb_cache, new_bh ) ; return 0 ; cleanup : mb2_cache_put ( ext2_mb_cache, old_bh ) ; mb2_mb_cache_put ( ext2_mb_cache, new_bh ) ; mb2_cache_put ( ext2_mb_cache, old_bh ) ; mb2_cache_put ( ext2_mb_cache, new_bh ) ; mb2_cache_put ( ext2_mb_cache, new_bh ) ; mb2_cache_put ( ext2_mb_cache, new_bh ) ; mb2_mb_cache_put ( ext2_mb_cache, new_bh ) ; mb2_cache_put (",0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> (! vp9_set_active_map <S2SV_ModEnd> ( ctx ->",0
397,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
399,<S2SV_ModStart> = 2048 ; if ( ( size_t ) ( imsx * imsy ) > ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( imsx * imsy ) ) > ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) ( size_t ) (,0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; <S2SV_ModEnd> YV12_BUFFER_CONFIG sd ; <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; if ( ctx -> frame_parallel_decode ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data2 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * )",0
401,<S2SV_ModStart> ) ) { ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_in_pic = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_in_pic = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_in_pic = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_in_pic = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_in_pic = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_in_pic = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_in_pic = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_in_pic = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_in_pic =,0
402,"<S2SV_ModStart>, u4_y_offset ; <S2SV_ModEnd> IMPEG2D_TRACE_MB_START ( ps_dec <S2SV_ModStart> B_PIC ) { memset ( ps_dec -> ai2_pred_mv, 0, sizeof ( ps_dec -> ai2_pred_mv ) ) ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_mb_x = ps_dec -> u2_frame_width ; ps_dec -> u2_mb_y = ps_dec -> u2_frame_width ; <S2SV_ModStart> B_PIC ) { memset ( ps_dec -> ai2_pred_mv, 0, sizeof ( ps_dec -> ai2_pred_mv ) ) ; ps_dec -> ai2_pred_mv = ps_dec -> ai2_pred_mv ; ps_dec -> u2_mb_x = ps_dec -> u2_frame_width ; ps_dec -> u2_mb_y = ps_dec -> u2_frame_width ; } else { memset ( ps_dec -> ai2_pred_mv, 0, sizeof ( ps_dec -> ai2_pred_",0
403,"<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> -> frame_bufs [ <S2SV_ModEnd> cm -> ref_frame_map <S2SV_ModStart> ] ]. buf ; } else if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy",0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,<S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> const int num_4x4_w <S2SV_ModStart> 1 ) ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ),0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; # if! ( CONFIG_FAST_UNALIGNED ) dst [ 0 ] = src [ 0 ] ; dst [ 1 ] = src [ 1 ] ; dst [ 2 ] = src [ 2 ] ; dst [ 3 ] = src [ 3 ] ; dst [ 4 ] = src [ 4 ] ; dst [ 5 ] = src [ 5 ] ; dst [ 6 ] = src [ 6 ] ; dst [ 7 ] = src [ 7 ] ; # else ( ( uint32_t * ) dst ) [ 0 ] = ( ( uint32_t * ) src ) [ 0 ] ; ( ( uint32_t * ) dst ) [ 1 ] = ( ( uint32_t * ) src ) [ 1 ] ; # endif <S2SV_ModEnd> src += src_stride",0
407,"<S2SV_ModStart> nrow ) { if ( ( row + img -> row_offset ) % rowsperstrip!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"", ""%s"", ""(row+img->row_offset) <S2SV_blank> %rowsperstrip!=0"" ) ; return ( 0 ) ; } <S2SV_ModStart> -> row_offset ; if ( ( row + img -> row_offset ) % rowsperstrip!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"", ""%s"", ""(row+img->row_offset) <S2SV_blank> % rowsperstrip!=0"", ""%s"", ""(row+img->row_offset) <S2SV_blank> % rowsperstrip!=0"" ) ; return ( 0 ) ; } <S2SV_ModStart> -> row_offset ; if ( ( row + img -> row_offset ) % rowsperstrip!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"", ""%s"", ""(row+img->row_offset) <S2SV_blank> % rowsperstrip!=0"" ) ; return ( 0 ) ; }",0
408,"<S2SV_ModStart> } } } if ( TYPE ( CHILD ( n, 0 ) )!= TYPE_COMMENT ) { Py_FatalError ( ""Unexpected <S2SV_blank> comment <S2SV_blank> type: <S2SV_blank> %s"", TYPE ( CHILD ( n, 0 ) ) ) ; Py_FatalError ( ""Unexpected <S2SV_blank> comment <S2SV_blank> type: <S2SV_blank> %s"", TYPE ( CHILD ( CHILD ( n, 0 ) ) ) ; Py_FatalError ( ""Unexpected <S2SV_blank> comment <S2SV_blank> type: <S2SV_blank> %s"", CHILD ( CHILD ( n ) ) ) ; } if ( NCH ( n ) < 2 ) { Py_FatalError ( ""Unexpected <S2SV_blank> comment <S2SV_blank> type: <S2SV_blank> %s"", TYPE ( CHILD ( n, 1 ) ) ) ; Py_FatalError ( ""Unexpected <S2SV_blank> comment <S2SV_blank> type: <S2SV_blank> %s"", TYPE ( CHILD ( CHILD ( n, 1 ) ) ) ; Py_FatalError ( ""Unexpected <S2SV_blank> comment <S2SV_blank> type: <S2SV_blank> %s"", CHILD ( CHILD ( n ) ) ; }",0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
410,<S2SV_ModStart> ( num & ( 1 << ( number - 1 ) ) ) return num - ( 1 << ( number - 1 ) ) ; else if ( num & ( 1 << ( number - 1 ) ) ) return num - ( 1 << ( number - 1 ) ) ; else return num ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
411,"<S2SV_ModStart> [ plane ] ; const int x = vpx_img_plane_width ( img, plane ) ; const int y = vpx_img_plane_height ( img, plane ) ; const int y2 = vpx_img_plane_height ( img, plane ) ; const int x = vpx_img_plane_width ( img, plane ) ; const int y2 = vpx_img_plane_height ( img, plane ) ; const int y2 = vpx_img_plane_height ( img, plane ) ; const int z = ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) : ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH )? ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH ) : ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH )? ( img -> fmt & ~ VPX_IM",0
412,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; if ( attr_len > attr_len - 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (",0
413,"<S2SV_ModStart> ; if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_MEMORY_ERROR ) ; return 0 ; } if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_MEMORY_ERROR ) ; return 0 ; } if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_MEMORY_ERROR ) ; return 0 ; } if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_MEMORY_ERROR ) ; return 0 ; } if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_MEMORY_ERROR ) ; return 0 ; }",0
414,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
415,"<S2SV_ModStart> sk ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock,",0
416,"<S2SV_ModStart> cpkt. length ) { send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; }",0
417,<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> err_close_conn ; } mutt_socket_empty ( adata -> conn ) ;,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,"<S2SV_ModStart> { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; }",0
420,"<S2SV_ModStart>, & rlen, 0",1
421,<S2SV_ModStart> * slavename ; int len ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> =,0
422,"<S2SV_ModStart> ( PyUnicode_CompareWithASCIIString ( <S2SV_ModEnd> name, ""__debug__"" <S2SV_ModStart> { if ( <S2SV_ModEnd> PyUnicode_CompareWithASCIIString ( name <S2SV_ModStart> * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( <S2SV_ModEnd> PyUnicode_CompareWithASCIIString ( name <S2SV_ModStart> * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 0 ; }",0
423,"<S2SV_ModStart> off } ; if ( i >= sizeof ( buf ) ) { return - 1 ; } for ( i = 0 ; i < sizeof ( buf ) - 1 && str [ i ] ; i ++, j ++ ) { if ( <S2SV_ModEnd> str [ j <S2SV_ModStart> ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } for ( i = 0 ; i < sizeof ( buf ) - 1 ; i ++ ) { if ( str [ i ] == '#' ) { i -- ; continue ; } for ( j = 0 ; j < sizeof ( buf ) - 1 ; j ++ ) { if ( str [ j ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } for ( j = 0 ; j < sizeof ( buf ) - 1 ; j ++ ) { if ( str [ j ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } for ( j = 0 ; j < sizeof ( buf ) - 1 ; j ++ ) { if ( str [ j ]",0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,"<S2SV_ModStart> ; return FALSE ; } if ( transport -> credssp == NULL ) { fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; connectErrorCode = AUTHENTICATIONERROR ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; connectErrorCode = AUTHENTICATIONERROR ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; return FALSE ; }",0
426,"<S2SV_ModStart> size_t s ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } s = exif_get_long ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; if ( CHECKOVERFLOW ( s, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( s, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji""",0
427,<S2SV_ModStart> bd_addr ) { int status ; if ( interface_ready ( ) == FALSE ) return BT_STATUS_NOT_READY ; if ( dm_interface_ready ( ) == FALSE ) return BT_STATUS_NOT_READY ; status = btif_dm_remove_bond ( bd_addr ) ; if ( status == BT_STATUS_NOT_READY ) return BT_STATUS_NOT_READY,0
428,"<S2SV_ModStart> int i ; int <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; if ( nxip < 0 ) { elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL ; } <S2SV_ModEnd> expect = 8 <S2SV_ModStart> + nxip * 8 ; if ( expect > buf -> len - buf -> cursor ) { elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL ; } <S2SV_ModEnd> xmin = pq_getmsgint64 <S2SV_ModStart> buf ) ; if ( xmin == 0 || xmin > MAX_TXID ) goto bad_format ; xmax = pq_getmsgint64 ( buf ) ; if ( xmax == 0 || xmax == 0 || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) { elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL ; }",0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr_offset <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr_offset <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr_offset <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr_offset <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr_offset <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr_offset <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr_offset <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr_offset <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr_offset <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr_offset <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr_offset <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr_offset <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr_offset <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr_offset <S2SV_ModEnd> ++ ] =,0
430,<S2SV_ModStart> - 1 ; int oe_errno = 0 ; <S2SV_ModStart> = 0 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; <S2SV_ModStart> = 0 ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } <S2SV_ModStart> = 0 ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
431,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_ERR, """,0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_DIR_MAX : * ( size_t * ) val = ms -> elf_dir_max ; return 0 ; case MAGIC_PARAM_NAME_MAX : * ( size_t * ) val = ms -> name_max ; return 0 ; case MAGIC_PARAM_ELF_PHNUM_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ;,0
433,<S2SV_ModStart> ) { journal_t * journal ; journal = EXT4_JOURNAL ( page -> mapping -> host ) ; if (! IS_ERR ( journal ) ) { <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
434,"<S2SV_ModStart> { trak = gf_isom_get_track <S2SV_ModEnd> ( movie -> <S2SV_ModStart> ) ; GF_SAFEALLOC ( writer, TrackWriter ) ; if (! trak ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = trak -> information -> sampleTable ; writer -> all_dref_mode = Media_SelfContainedType ( writer -> mdia ) ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ;",0
435,"<S2SV_ModStart> 17 ] ; <S2SV_ModEnd> md5_state_t state ; <S2SV_ModStart> 0 ] = 0 ; strncpy ( md5data + 1, password, 82 ) ; md5data [ 83 ] = '\\0' ; strncpy ( md5data + 1 + strlen ( password ), pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; <S2SV_ModEnd> init_packet ( & <S2SV_ModStart> ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; init_packet ( & data, MT_PTYPE_PASSWORD, md5data, sizeof ( md5data ) ) ; plen = add_control_packet ( & data, MT_CPTYPE_USERNAME, username, strlen ( username ) ) ; plen += add_control_packet ( & data, MT_CPTYPE_TERM_TYPE, terminal, strlen ( terminal ) ) ; if ( is_a_tty",0
436,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
437,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT_TYPE ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch )",0
438,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
439,"<S2SV_ModStart> -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) ) memcpy_high ( dst, src, src_ybc -> y_width, dst_ybc -> y_stride ) && ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { memcpy_high ( dst, src, src_ybc -> y_",0
440,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> mi_col = tile -> mi_col_start <S2SV_ModEnd> ; mi_col < <S2SV_ModStart> mi_col_end ; mi_col += MI_BLOCK_SIZE <S2SV_ModEnd> ) { int <S2SV_ModStart> int dummy_rate ; int64_t dummy_dist ; BLOCK_SIZE i ; for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 4, num_4x4_w * num_4x4_blk ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index < 16 ; ++ x -> b_index",0
441,"<S2SV_ModStart> obj_tlen ; int <S2SV_ModEnd> hexdump ; u_int <S2SV_ModStart> hexdump ; } if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return",0
442,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inc_mvs ( const <S2SV_ModStart> i ) { MV diff = { mvs [ i ]. as_mv. row - mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ]. as_mv. row, mvs [ i ]. as_mv. col - mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ]. as_mv. col } ; diff = { mvs [ i ]. as_mv. row - mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ]. as_mv. col - mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ]. as_mv. col } <S2SV_ModEnd> ; vp9_inc_mv (",0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,"<S2SV_ModStart> ) ; if ( skb -> len + hdr_size > skb -> len ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ;",0
445,"<S2SV_ModStart> ) return ; <S2SV_ModEnd> DEBUGMSGTL ( ( <S2SV_ModStart> ( ""init_mib"", ""Seen <S2SV_blank> MIBDIRS: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> dirs <S2SV_blank>...\\n"", env_var ) ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0x0000 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ; TEMP_FAILURE_RETRY (",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
449,"<S2SV_ModStart> * pctx ) { iakerb_ctx_id_t ctx ; krb5_error_code code ; * pctx = NULL ; ctx = k5alloc ( sizeof ( * ctx ), & code ) ; if ( ctx == NULL ) goto cleanup ; ctx -> defcred = GSS_C_NO_CREDENTIAL ; ctx -> state = IAKERB_AS_REQ ; ctx -> count = 0 ; code = krb5_gss_init_context ( & ctx -> k5c ) ; if ( code!= 0 <S2SV_ModEnd> ) goto cleanup",0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; bitmapDC = CreateCompatibleDC ( hDC ) ; if ( bitmapDC == ( HDC ) NULL ) { DeleteDC ( hDC ) ; ThrowReaderException ( CoderError, ""UnableToCreateDC"" ) ; }",0
451,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { kfree ( string ) ; <S2SV_ModStart> - EINVAL ; }",0
453,"<S2SV_ModStart> ; imethod = ( ( MonoMethodInflated * ) method ) -> declaring ; if (! method ) { mono_error ( ""invalid <S2SV_blank> generic <S2SV_blank> method <S2SV_blank> signature"", ""%s"", rmethod -> object. vtable -> klass -> name ) ; mono_error ( ""invalid <S2SV_blank> generic <S2SV_blank> method <S2SV_blank> signature"", ""%s"", rmethod -> object. vtable -> klass -> name ) ; mono_error ( ""invalid <S2SV_blank> generic <S2SV_blank> method <S2SV_blank> signature"", ""%s"", rmethod -> object. vtable -> klass -> name ) ; mono_error ( ""invalid <S2SV_blank> generic <S2SV_blank> method <S2SV_blank> signature"", ""%s"", rmethod -> object. vtable -> klass -> name ) ; return NULL ; } if (! inflated ) { mono_error ( ""invalid <S2SV_blank> generic <S2SV_blank> method <S2SV_blank> signature"", ""%s"", rmethod -> object. vtable -> klass -> name ) ; mono_error ( ""invalid <S2SV_blank> generic <S2SV_blank> method <S2SV_blank> signature"", ""%s"", rmethod -> object. vtable -> klass -> name ) ; mono_error ( ""invalid <S2SV_blank> generic <S2SV_blank> method <S2SV_blank> signature"", ""%s"", rmethod -> object. vtable",0
454,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> copy_from_user ( buf, buffer, count ) ) return - EFAULT ; tmp = simple_strtol ( buf, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ; <S2SV_ModEnd> uml_exitcode = tmp",0
455,"<S2SV_ModStart> is_path ) { <S2SV_ModEnd> if ( * <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN}"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM}"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || ( is_path && name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 ) || ( strncmp ( & name [ 2 ], ""O"" )? NULL : l -> l_origin <S2SV_ModEnd> ) : _dl_platform",0
456,"<S2SV_ModStart> ) ; } if ( sizeof ( decContainer_t ) > UINT32_MAX / sizeof ( decContainer_t ) ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; }",0
457,"<S2SV_ModStart> return 0 ; } iph = ip_hdr ( skb ) ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( unlikely ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if (! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( ip_options_rcv_srr ( skb ) ) goto drop ; } return",0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,"<S2SV_ModStart> goto errout ; if ( info -> stagemasks == NULL ) { _ogg_free ( info -> stagemasks ) ; info -> stagemasks = _ogg_malloc ( info -> partitions * 8 * sizeof ( * info -> stagemasks ) ) ; } for ( j = 0 ; j < info -> partitions ; j ++ ) { int cascade = oggpack_read ( opb, 3 ) ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; for ( j = 0 ; j < info -> partitions ; j ++ ) { int book = ( info -> stagemasks [ j ] >> 3 ) ; if ( book >= ci -> books ) goto errout ; book = ( info -> stagemasks [ j ] >> 3 ) ; if ( book >= ci -> books ) goto errout ; book = ( info -> stagemasks [ j ] >> 3 ) ; if ( book >= ci -> books ) goto errout ; } for ( j = 0 ; j < info -> partitions ; j ++ ) {",0
460,"<S2SV_ModStart> krb5_key_data * key_data <S2SV_ModEnd> ; if ( <S2SV_ModStart> err ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_length [ 1 ] = 0 ; } } for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key",0
461,"<S2SV_ModStart> * value ) { if ( idx >= self -> memo_size ) { if ( _Unpickler_ResizeMemoList ( self, idx * 2 ) < 0 ) return - 1 ; }",0
462,"<S2SV_ModStart> 0 ] ) ; if ( pTab -> pMod -> xAlloc == 0 ) { rc = SQLITE_NOMEM ; } else if ( pTab -> pMod -> xAlloc == 0 ) { rc = SQLITE_NOMEM ; } else if ( pTab -> pMod -> xAlloc ( pTab -> pTok, nByte + 1, & pCsr -> pCsr -> zInput ) == 0 ) { rc = SQLITE_NOMEM ; } else { memcpy ( pTab -> pMod -> xAlloc ( pTab -> pTok, nByte + 1, & pCsr -> pCsr -> zInput ) ; if ( rc == SQLITE_NOMEM ) { rc = SQLITE_NOMEM ; } else if ( pTab -> pMod -> xAlloc ( pTab -> pTok, nByte + 1, & pCsr -> pCsr -> zInput ) == 0 ) { rc = SQLITE_NOMEM ; } else { pTab -> pMod -> xAlloc ( pTab -> pTok, nByte + 1, & pCsr -> pCsr -> zInput ) ; }",0
463,<S2SV_ModStart> filp ) { if ( filp -> f_cred -> user_ns == current -> nsproxy -> user_ns ) { atomic_dec ( & SOCKET_I ( inode ) -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns ) ; } else { atomic_dec ( & SOCKET_I ( inode ) -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns ->,0
464,"<S2SV_ModStart> * orelse, string type_comment, int <S2SV_ModEnd> lineno, int <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",1
465,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> mi_sort_index ( MI_CHECK <S2SV_ModStart> ""Can\'t <S2SV_blank> sort <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'"", name ) ; if (! param -> tmpfile_createflag ) { mi_check_print_error ( param, ""Can\'t <S2SV_blank> create <S2SV_blank> temporary <S2SV_blank> file: <S2SV_blank> \'%s\'"", param -> temp_filename ) ; DBUG_RETURN ( - 1 ; } if (! param -> tmpfile_createflag ) { mi_check_print_error ( param, ""Can\'t <S2SV_blank> create <S2SV_blank> temporary <S2SV_blank> file: <S2SV_blank> \'%s\'"", param -> temp_filename ) ; DBUG_RETURN ( - 1 ) ; } if (! param -> tmpfile_createflag ) { mi_check_print_error ( param, ""Can\'t <S2SV_blank> create <S2SV_blank> temporary <S2SV_blank> file: <S2SV_blank> \'%s\'"", param -> temp_filename ) ; DBUG_RETURN ( - 1 ; }",0
466,"<S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR",0
467,"<S2SV_ModStart> UINT error ; # ifdef WITH_DEBUG_RDPEI WLog_DBG ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" PRIu16 """", eventId ) ; WLog_DBG ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" PRIu16 """", eventId ) ; WLog_DBG ( TAG, ""rdpei_recv_pdu: <S2SV_blank> pduLength: <S2SV_blank> %"" PRIu32 """", pduLength ) ; # ifdef WITH_DEBUG_RDPEI if ( ( error = rdpei_recv_sc_ready_pdu ( callback, s ) ) ) { WLog_ERR ( TAG, ""rdpei_recv_sc_ready_pdu <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %"" PRIu32 ""!"", error ) ; return error ; } if ( ( error = rdpei_send_cs_ready_pdu ( callback ) ) ) { WLog_ERR ( TAG, ""rdpei_send_cs_ready_pdu <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %"" PRIu32 ""!"", error ) ; return error ; } break ; case",0
468,"<S2SV_ModStart> ; } } if ( pData -> socket == NULL ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s"", pData -> description ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; } else { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> socket <S2SV_blank> new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s"", pData -> description ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; } if ( pData -> socket == NULL ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s"", pData -> description ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; } else { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s"", pData -> description ) ; ABORT_FINAL",0
469,"<S2SV_ModStart> ) ; struct ipv6_txoptions * opt ; <S2SV_ModStart> ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; opt = rcu_dereference_protected ( np -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart>. daddr ) ; opt -> opt. <S2SV_ModStart> = 1 ; opt -> opt. <S2SV_ModStart> = 1 ; rcu_read_lock ( ) ; <S2SV_ModStart> = 1 ; rcu_read_unlock ( ) ;",0
470,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < length ) { return FALSE ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; return TRUE ;,0
472,"<S2SV_ModStart> = 0 ; bn_t * t ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } while ( pad!= 0 && m_len > 0 ) ; * p_len -= ( m_len - 1 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ; pad = ( uint8_",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,"<S2SV_ModStart> SF_PRIVATE ) ) == NULL ) { sf_errno = SFE_MALLOC_FAILED ; return NULL ; } ; psf_init_files ( psf ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; <S2SV_ModEnd> sf_errno = SFE_MALLOC_FAILED",0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> ++ j ) count [ i ] += <S2SV_ModEnd> cm -> counts,0
476,"<S2SV_ModStart> x = & cpi <S2SV_ModEnd> -> mb ; <S2SV_ModStart> -> act_zbin_adj = 0 <S2SV_ModEnd> ; vp9_setup_src_planes ( <S2SV_ModStart> = 0 ; vpx_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_dst_planes ( xd, get_frame_new_buffer ( cm ), 0, 0 ) ; vpx_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; xd -> mi [ 0 ] -> mbmi. mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_cols ) ; memset ( xd -> above_context",0
477,"<S2SV_ModStart> ( hp ) ; if ( retval!= 0 ) { WSP ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { <S2SV_ModEnd> WSP ( sp <S2SV_ModStart> SLT_Error, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
478,"<S2SV_ModStart> 0x07 # define EOFOp 0x08 <S2SV_ModEnd> Magick [ 12 <S2SV_ModStart> ) ) ; image -> page. x = ReadBlobLSBShort ( image ) ; image -> page. y = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = flags & 0x04 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ;",0
479,<S2SV_ModStart> len ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( tETH_HDR ) ),0
480,<S2SV_ModStart> ; ps_dec -> u4_cur_slice_num = ( ps_dec -> u4_cur_slice_num + 1 ) >> 1 ; ps_dec -> u4_cur_slice_num_max = ( ps_dec -> u4_cur_slice_num + 1 ) >> 1 ; if ( ps_dec -> u4_cur_slice_num_max > ps_dec -> u4_cur_slice_num_max ) { ps_dec -> u4_cur_slice_num_max = ( ps_dec -> u4_cur_slice_num + 1 ) >> 1 ; ps_dec -> u4_cur_slice_num_max = ( ps_dec -> u4_cur_slice_num + 1 ) >> 1 ; if ( ps_dec -> u4_cur_slice_num_max > ps_dec -> u4_cur_slice_num_max ) { ps_dec -> u4_cur_slice_num_max = ( ps_dec -> u4_cur_slice_num + 1 ) >> 1 ; ps_dec -> u4_cur_slice_num_max = ( ps_,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; struct pci_dev <S2SV_ModStart> * pdev ; <S2SV_ModEnd> int port ; <S2SV_ModStart> return PTR_ERR ( <S2SV_ModEnd> karg ) ; <S2SV_ModStart> return PTR_ERR ( <S2SV_ModEnd> karg ) ;",0
482,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
483,"<S2SV_ModStart> else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv",0
484,"<S2SV_ModStart> offset ; if ( datao > buf_size - 12 ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; if ( datao + 2 > buf_size - 12 ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; c = exif_get_short ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteDataFuji"", sizeof ( Mnote",0
485,"<S2SV_ModStart> ( outname ) < 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> ( outname ) < 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> ( outname ) < 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> ( outname ) < 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> ( outname ) < 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; }",0
486,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> unbind_ports ( void <S2SV_ModStart> 1 ) ; while ( service_options. next ) { unsigned i ; service_options. next = opt -> next ; service_options. next = NULL ; service_free ( & service_options ) ; } <S2SV_ModEnd> while ( opt <S2SV_ModStart> ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names ) { SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
487,<S2SV_ModStart> void ) { if ( recovery_is_in_recovery_mode ( ) ) { recovery_is_in_recovery_mode = ( recovery_is_in_recovery_mode ( ) && recovery_is_in_recovery_mode ( ) ) { recovery_is_in_recovery_mode = ( recovery_is_in_recovery_mode ( ) && recovery_is_in_recovery_mode ( ) ) ; recovery_is_in_recovery_mode = ( recovery_is_in_recovery_mode ( ) && recovery_is_in_recovery_mode ( ) ) { recovery_is_in_recovery_mode = ( recovery_is_in_recovery_mode ( ) && recovery_is_in_recovery_mode ( ) ) ; recovery_is_in_recovery_mode = ( recovery_is_in_recovery_mode ( ) && recovery_is_in_recovery_mode ( ) ) ; recovery_is_in_recovery_mode = ( recovery_is_in_recovery_mode ( ) && recovery_is_in_recovery_mode ( ) ) { recovery_is_in_recovery_mode = ( recovery_is_in_recovery_,0
488,"<S2SV_ModStart> } } } <S2SV_ModEnd> enc624j600WriteReg ( interface <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_blank>, hashTable [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT2, hashTable [ 1 ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT3, hashTable [ 2 ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT4, hashTable [ 3 ] ) ; TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> EHT1 <S2SV_blank> = <S2SV_blank> %04"" PRIX16 ""\\r\\n"", enc624j600ReadReg ( interface, ENC624J600_EHT1 ) ) ; TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> EHT2 <S2SV_blank> = <S2SV_blank> %04"" PRIX16 ""\\r\\n"", enc624j600ReadReg ( interface, ENC624J600_EHT2 ) ) ; TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> EHT3 <S2SV_blank> = <S2SV_blank> %04"" PRIX16 ""\\r\\n"", enc624j600ReadReg ( interface, ENC",0
489,"<S2SV_ModStart> == MagickFalse ) status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) status = SetImageExtent ( image, image -> rows, exception ) ; if ( status == MagickFalse ) status = SetImageExtent ( image, exception ) ; if ( status == MagickFalse ) status = SetImageExtent ( image, exception ) ; if ( status == MagickFalse ) status = SetImageExtent ( image, exception ) ; if ( status == MagickFalse ) status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) status = SetImageExtent ( image, exception ) ; if ( status == MagickFalse ) status = SetImageExtent ( image, exception ) ; if ( status == MagickFalse ) status = SetImageExtent ( image, exception ) ; if ( status == MagickFalse ) status = SetImageExtent ( image, exception ) ; if ( status == MagickFalse ) status = SetImageExtent ( image, exception ) ; if ( status == MagickFalse ) status = SetImageExtent ( image, exception ) ; if ( status == MagickFalse ) status = SetImage",0
490,"<S2SV_ModStart> ) { WORD32 st_rps_idx <S2SV_ModEnd> ; WORD32 num_neg_pics <S2SV_ModStart> ; WORD32 ai4_num_st_curr_before, ai4_num_st_curr_after, u4_num_lt_curr, u4_num_lt_foll, u4_num_total_curr ; WORD8 ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai4_num_st_curr_after, u4_num_st_curr_before, u4_num_st_curr_after, u4_num_lt_curr, u4_num_total_curr ; WORD8 ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai4_num_st_curr_before, u4_num_st_curr_after, u4",0
491,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart> 0 ; while ( child ) { ++ numentries ; child = child -> next ; } if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! child ) { ++ numentries ; child = child -> next ; } if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; for ( i = 0 ; i < numentries ; ++ i ) { if ( names [ i ] ) cJSON_free ( names [ i ] ) ; cJSON_free ( names,0
492,"<S2SV_ModStart> ( sk ) ; mask |= POLLOUT | POLLWRNORM | POLLOUT ; if ( writable ) mask |= POLLOUT | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask ; } if ( unix_peer ( sk )!= sk ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; if ( unix_recvq_full ( other ) ) writable = 0 ; } else { if ( unix_peer ( sk )!= sk ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; if ( unix_recvq_full ( other ) ) writable = 0 ; } sock_put ( other ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask ;",0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> w, h ) ;",0
494,<S2SV_ModStart> 0 ) { if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } <S2SV_ModStart> } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { <S2SV_ModEnd> if ( frame <S2SV_ModStart> NULL ) { YV12_BUFFER_CONFIG <S2SV_ModEnd> * fb ; <S2SV_ModStart> YV12_BUFFER_CONFIG * fb ; vpx_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> * info, <S2SV_ModEnd> char * name <S2SV_ModStart> name, int rep_quick ) { if (! ( param -> testflag & T_SILENT ) ) { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; } else if ( ( param -> testflag & T_UNPACK ) ) { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; } else if ( ( param -> testflag & T_UNPACK ) ) { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> unpack) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"",",0
498,"<S2SV_ModStart> } ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN uECC_word_t * p ; # else uECC_word_t carry ; wordcount_t num_words = curve -> num_words ; bitcount_t num_n_bits = curve -> num_n_bits ; if ( uECC_vli_cmp ( curve -> n, k, num_n_words )!= 1 ) { return 0 ; } carry = regularize_k ( k, tmp, s, curve ) ; EccPoint_mult ( p, curve -> G, k2 [! carry ], 0, num_n_bits + 1, curve ) ; if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, num_n_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_vli_modInv ( tmp, curve -> n, num_n_words ) ; return 0 ;",0
499,"<S2SV_ModStart> trunc : ND_TCHECK2 ( * bp, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) goto tooshort ;",0
500,"<S2SV_ModStart> buf ; } else { uint32_t new_free_total = pool -> free_total * 2 ; void * new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; } else { free ( buf ) ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
501,"<S2SV_ModStart> tp ) { const <S2SV_ModEnd> char hex [ <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> int dcount = <S2SV_ModStart> = 0 ; cp ++ ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10 ) + ( * cp - '0'",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart> * lined ; PIX * pixc, * pixm, * pixg, * pixd, * cmapd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if (! pixs || pixGetDepth ( pixs )!= 8 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 8 <S2SV_blank> bpp"", procName, NULL ) ; if ( ( pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; if ( ( pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; cmap = pixGetColormap ( pixc ) ; ncolors = pixcmapGetCount ( cmap ) ; cmapd = pixcmapCreate ( ncolors ) ; lut = ( l_int32 * ) LEPT_CALLOC ( 256, sizeof ( l_int32 ) ) ; for ( i = 0",0
504,<S2SV_ModStart> = 256 ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH,0
505,"<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> = overhead ; if ( count < 0 ) { conn -> err = MONGO_BSON_TOO_SMALL ; return MONGO_ERROR ; } for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; }",0
506,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> NEGO_STATE_FAIL ; return ; } if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Invalid <S2SV_blank> RDP_NEG_RSP"" ) ; nego -> state = NEGO_STATE_FAIL ; <S2SV_ModStart> = NEGO_STATE_FINAL ; return ;",0
507,"<S2SV_ModStart> int i, bits_per_mb_at_this_q ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( target_bits_per_mb - bits_per_mb_at_this_q ) <= last_error ) break ; last_error = bits_per_mb_at_this_q - target_bits_per_mb ; } else { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; }",0
508,"<S2SV_ModStart> |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_EXTENDED_CTRL ) ; value |= TJA1101_EXTENDED_CTRL_CONFIG_EN ; tja1101WritePhyReg ( interface, TJA1101_EXTENDED_CTRL, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_EXTENDED_CTRL ) ; value |= TJA1101_EXTENDED_CTRL_AUTO_OP ; tja1101WritePhyReg ( interface, TJA1101_EXTENDED_CTRL, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_EXTENDED_CTRL ) ; value |= TJA1101_EXTENDED_CTRL_AUTO_OP ; tja1101WritePhyReg ( interface, TJA1101_EXTENDED_CTRL",0
509,"<S2SV_ModStart> ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i",0
510,"<S2SV_ModStart> TX_SIZE tx_size, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> plane ] ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> uint8_t, left_col, 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> uint8_t, above_data, 128 + 16 ) ; uint8_t * const_above_row = above_data + 16 ; const int bs = 4 << tx_size ; if ( plane == 0 ) { frame_width = xd -> cur_buf -> y_width ; frame_height = xd -> cur_buf -> y_height ; } else { frame_width = xd -> cur_buf -> uv_width ; frame_height = xd -> cur_buf -> uv_height ; } } if ( right_available ) { if ( xd -> mb_to_bottom_edge < 0 ) { for ( i = 0 ; i < bs ; ++ i ) left_col [ i ] = ref [ i * ref_stride - 1 ] ; for ( i = 0 ; i < bs ; ++ i ) left_col [ i ] = ref [ i * ref_stride - 1 ] ; for ( i =",0
511,"<S2SV_ModStart> } end ++ ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart>, 2 ) ; write_profile ( cm -> profile, wb ) ; write_bit ( wb, 0 ) ; write_bit ( wb, cm -> bit_depth ) ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vp9_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vp9_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } write_sync_code ( wb ) ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vp9_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8",0
514,<S2SV_ModStart> } # ifdef
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart>'<S2SV_blank>') ; if ( p == NULL ) return ERROR_INVALID_SYNTAX ; q = osStrchr <S2SV_ModEnd> ( p +,0
516,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT_TYPE ( CHILD ( n, i ) ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( CHILD ( n, i ) ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT_TYPE ( CHILD ( n, i ) ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT_TYPE ( CHILD ( n, i ) ) ; if (! arg -> type_comment ) goto error",0
517,<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd ->,0
518,"<S2SV_ModStart> error_t error ; <S2SV_ModEnd> Enc624j600Context * context <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT, context -> nextPacket ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & status, sizeof ( uint32_t ) ) ; status = letoh32 ( status ) ; if ( ( status & RSV_RECEIVED_OK )!= 0 ) { enc624j600WriteReg ( interface, ENC624J600_ERXTAIL, ENC624J600_",0
519,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass ) { VALUE ctx ; VALUE rb_schema ; VALUE errors ; VALUE rb_schema ; VALUE errors ; VALUE schema ; xmlSchemaParserCtxtPtr ctx ; ctx = xmlSchemaNewMemParserCtxt ( argc, argv ) ; errors = rb_ary_new ( ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif schema = xmlSchemaParse ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error )",0
520,"<S2SV_ModStart> { if ( strlen ( errstr ) < 3 ) { s_log ( LOG_ERR, ""Malformed <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> line"" ) ; return 1 ; } errstr = strchr ( errstr,'<S2SV_blank>') ; if ( errstr ) { s_log ( LOG_ERR, ""Malformed <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> line"" ) ; return 1 ; } if ( strlen ( errstr ) < 3 ) { s_log ( LOG_ERR, ""Malformed <S2SV_blank> configuration <S2SV_blank> line"" ) ; return 1 ; } errstr = strchr ( errstr,'<S2SV_blank>') ; if ( errstr ) { s_log ( LOG_ERR, ""Malformed <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> line"" ) ; return 1 ; } if ( strlen ( errstr ) < 3 ) { s_log ( LOG_ERR, ""Malformed <S2SV_blank> configuration <S2SV_blank> line"" ) ; return 1 ; } if ( strlen ( errstr ) < 3 ) { s_log ( LOG_ERR, ""Malformed <S2SV_blank> configuration <S2SV_blank> line"" ) ; return 1 ; } errstr = strchr ( errstr,'<S2SV_blank>') ; if ( errstr ) { s_log ( LOG_ERR, ""Malformed <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> line"" ) ; return 1 ; }",0
521,<S2SV_ModStart> / 2 ] ; out [ 3 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> / 2 ] ; out [ 4 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> / 2 ] ; out [ 5 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 7 ] = ptr [ ( x + 7 * state -> xsize ) / 2 ] ; out [ 8 ] = ptr [ ( x + 8 * state -> xsize ) / 2 ] ; out [ 9 ] = ptr [ ( x + 9 * state -> xsize ) / 2 ] ; out [ 10 ] = ptr [ ( x + 11 * state -> xsize ) / 2 ] ; out [ 11 ] = ptr [ ( x + 11 * state -> xsize ) / 2 ] ; out [ 12 ] = ptr [ ( x + 12 * state -> xsize ) / 2 ] ; out [ 13 ] = ptr [ ( x + 11 * state -> xsize ) / 2 ] ; out [ 10 ] = ptr [ ( x + 11 * state -> xsize ) / 2 ] ; out [ 11 ] = ptr [ ( x + 12 * state -> xsize ) / 2 ] ; out [ 12 ] = ptr [ ( x + 11 * state,0
522,"<S2SV_ModStart> fanout_mutex ) ; if ( type == PACKET_FANOUT_HASH ) { err = - EINVAL ; goto out ; } if ( type == PACKET_FANOUT_LB || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_EBPF ) { err = - EINVAL ; goto out ; } if ( type == PACKET_FANOUT_HASH ) { rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) goto out ; rollover -> num_huge = 0 ; rollover -> num_failed = 0 ; } rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) goto out ; rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) goto out ; rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if",0
523,<S2SV_ModStart> -> nmi ) <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> pending ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
524,"<S2SV_ModStart> int utf8s_to_utf16s ( const u8 * s, int len, u16 * op, wchar_t * pwcs ) { if ( len < 2 ) return - EINVAL ; if ( len < 2 ) return - EINVAL ; <S2SV_ModStart> PLANE_SIZE ) { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SUR",0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { <S2SV_ModEnd> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure""",0
526,"<S2SV_ModStart> nicContext ; status = ksz8851ReadReg ( interface, KSZ8851_RXFHSR ) ; if ( ( status & ( RXFHSR_RXFV | RXFHSR_RXFV_RXFV_RXFV ) ) == 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) { ksz8851WriteReg ( interface, KSZ8851_RXFDPR, RXFDPR_RXFPAI ) ; ks",0
527,"<S2SV_ModStart>, asdl_seq * decorator_seq, bool <S2SV_ModEnd> is_async ) { <S2SV_ModStart> is_async ) { identifier name ; arguments_ty args ; expr_ty returns = NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; name_i += 1 ; } if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 2 ) ) ; name_i += 2 ; if ( TYPE ( CHILD ( n, name_i + 3 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3 ) ) ; if (! type_comment ) return NULL ; body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; if (! type_comment && NCH ( CHILD ( n, name_i + 4 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i",0
528,<S2SV_ModStart> int i ; if ( mm_has_feature ( MMU_FTR_HUGETLB_PAGE ) ) { if (! mm_has_feature ( MMU_FTR_HUGETLB_PAGE ) ) { if (! mm_has_feature ( MMU_FTR_HUGETLB_PAGE ) ) { if (! mm_has_feature ( MMU_FTR_HUGETLB_PAGE ) ) { break ; } } else { if ( mm_has_feature ( MMU_FTR_HUGETLB_PAGE ) ) { if (! mm_has_feature ( MMU_FTR_HUGETLB_PAGE ) ) { if (! mm_has_feature ( MMU_FTR_HUGETLB_PAGE ) ) { if (! mm_has_feature ( MMU_FTR_HUGETLB_PAGE ) ) { break ; } } else { if ( mm_has_feature ( MMU_FTR_HUGETLB_PAGE ) ) { if (! mm_has_feature ( MMU_FTR_HUGETLB_PAGE ) { if (,0
529,"<S2SV_ModStart> ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data",0
530,"<S2SV_ModStart> ) ) { if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
531,<S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { if ( ( i = col % 14 ) == 0 ) sh = 4 ; if ( ( j = pana_bits ( 8 ) ) ) { if ( ( pred [ i & 1 ] -= 0x80 << sh ) < 0 || sh == 4 ) pred [ i & 1 ] &= ~ ( ( ~ 0u ) << sh ) ; nonz [ i & 1 ] = 0 ; } } else if ( ( i = pana_bits ( 8 ) ) ) { if ( ( j = pana_bits ( 8 ) ) ) { if ( ( j = pana_bits ( 4 ) ) ) { if ( ( pred [ i & 1 ] -= 0x80 << sh ) < 0 || sh == 4 ) pred [ i & 1 ] = ( ~ 0u ) << sh ; nonz [ i & 1 ] = ( ~ 0u ) << sh ; } else,0
532,<S2SV_ModStart> len < needed || len > param -> data_size,0
533,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
534,<S2SV_ModStart> bfqq ) { hrtimer_try_to_cancel <S2SV_ModEnd> ( timer ),0
535,<S2SV_ModStart> += PRIMARY_DRAWING_ORDER_FIELD_BYTES [ <S2SV_ModEnd> orderInfo -> orderType,0
536,<S2SV_ModStart> out ; } old_upperdir = ovl_dentry_lower ( old ) -> d_inode ; new_upperdir = ovl_dentry_lower ( new ) -> d_inode ; old_cred = get_current_cred ( ) ; new_cred = get_current_cred ( ) ; err = - EPERM ; if (! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_,0
537,"<S2SV_ModStart> int plane ; switch ( bsize ) { case BLOCK_SIZE_8X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_16X16 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_32X16 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_32X16 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_32X16 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_32X16 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_32X16 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_32",0
538,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> -> e_mbd ; TileInfo * const tile_info = & tile -> tile_info ; MACROBLOCK * const x = & x -> mb ; MACROBLOCKD * const xd = & x -> <S2SV_ModEnd> e_mbd ; set_offsets <S2SV_ModStart> bsize ) ; if ( xd -> mi [ 0 ] -> mbmi. sb_type!= bsize ) { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
539,"<S2SV_ModStart> = NULL ; if (! reader. superblock ) { hrtf = NULL ; } else { hrtf = getHrtf ( & reader, err ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
540,<S2SV_ModStart> = malloc ( <S2SV_ModEnd> sizeof ( MappedRange,0
541,"<S2SV_ModStart> ; if ( ( <S2SV_ModStart> VP8_EFLAG_NO_UPD_GF ) && ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_AL",0
542,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> case BGPTYPE_IPV4_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; }",0
545,"<S2SV_ModStart> ( res -> outputbuffer, ""</table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""</tr>"" ) ; StringBuffer_append ( res -> outputbuffer, ""</table <S2SV_blank> id=\'status-table\'>"" ""<tr>"" ""<td>Process <S2SV_blank> id</td>"" ""<td>%d</td>"", Run. system -> id ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Controlfile</td><td>%s</td></tr>"", Run. Env. user ) ; if ( Run. Env. log ) StringBuffer_append ( res -> outputbuffer, ""<tr><td>Logfile</td><td>%s</td></tr>"", Run. files. log ) ; if ( Run. files. control ) StringBuffer_append ( res -> outputbuffer, ""<tr><td>Controlfile</td><td>%s</td></tr>"", Run. files. control ) ; if ( Run. files. pid ) StringBuffer_append ( res -> outputbuffer, ""<tr><td>Pidfile</td><td>%s</td></tr>"", Run",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart> ( tokbuf, sizeof ( tokbuf ) <S2SV_ModEnd> ) ; strncpy <S2SV_ModStart> ( tokbuf, sizeof ( tokbuf ) - 1, sizeof ( tokbuf ) - 1 ) ; strncpy ( constr1, constr2, sizeof ( constr1 ) - 1 ) ; strncpy ( constr2, constr1, sizeof ( constr2 ) - 1 ) ; strncpy ( constr2, constr1, sizeof ( constr2 ) - 1 ) ; strncpy ( constr1, constr2, sizeof ( constr1 ) - 1 ) ; strncpy ( constr2, ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"", sizeof ( constr2 ) - 1 ) ; strncpy ( constr2, ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", sizeof ( constr2 ) - 1 ) ) ; strncpy ( constr2, ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", sizeof ( constr2 ) - 1 ) ; strncpy ( constr2, constr1, sizeof ( constr1 ) - 1 ) ; strncpy ( constr2, ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", sizeof ( constr2 ) - 1 ) ; strncpy (",0
548,"<S2SV_ModStart> ; if ( len < sizeof ( struct usb_descriptor_header ) ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d\\n"", cfgidx ) ; return - EINVAL ; } if ( len < sizeof ( struct usb_descriptor_header ) ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d\\n"", cfgidx ) ; return - EINVAL ; } if ( len < sizeof ( struct usb_descriptor_header ) ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d\\n"", cfgidx ) ; return - EINVAL ; } if ( len < sizeof ( struct usb_descriptor_header ) ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d\\n"", cfgidx ) ; return - EINVAL ; } if ( len < sizeof ( struct usb_descriptor_header ) ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d\\n"", cfgidx ) ; return - EINVAL ; }",0
549,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
550,"<S2SV_ModStart> 16 ) ; sse = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; this_rd = RDCOST ( x -> rdmult, x -> rddiv, rate, distortion ) ; if ( error16x16 > this_rd ) { error16x16 = this_rd ; best_mode = mode ; best_sse = sse ; best_rate = rate ; } } xd -> mode_info_context -> mbmi. ref_frame = INTRA_FRAME ; for ( mode = DC_PRED ; mode <= TM_PRED ; mode ++ ) { vp8_build_intra_predictors_mby_s ( xd, x -> dst. y_buffer - 1, xd -> dst. y_stride, xd -> predictor, 16 ) ; distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost",0
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd>,",0
552,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; vsnprintf ( start, maxlen, format, argptr ) ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> headindex <S2SV_ModEnd> = strlen ( <S2SV_ModStart> psf -> header ) ; return ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
553,"<S2SV_ModStart> alg_priv ) { vpx_alg_destroy_priv <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> priv -> alg_priv ) ; } if ( ctx -> iface -> destroy ) ctx -> iface = NULL ; ctx -> name = NULL ; ctx -> priv = NULL ; return SAVE_STATUS ( ctx, res ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
554,<S2SV_ModStart> -> adaptive_rd_thresh = ( speed < 1 )? ALLOW_RECODE : ALLOW_RECODE_KFMAXBW ; sf -> allow_skip_recode = 1 ; if ( speed >= 1 ) { sf -> use_square_partition_only =! frame_is_intra_only ( cpi ) ; sf -> less_rectangular_check = 1 ; sf -> tx_size_search_method = vp9_frame_is_boosted ( cpi )? USE_FULL_RD : USE_LARGESTALL ; sf -> subpel_iters_per_step = 1 ; sf -> mode_skip_start = 10 ; sf -> adaptive_pred_interp_filter = 1 ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X,0
555,"<S2SV_ModStart> ) ; int ret ; if ( ts [ h ]. thread_id == - 1 ) { APPL_TRACE_ERROR ( ""socket <S2SV_blank> poll <S2SV_blank> thread <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; } ret = select ( pfds, ts [ h ]. poll_count, - 1 ) ; if ( ret == - 1 ) { APPL_TRACE_ERROR ( ""poll <S2SV_blank> ret <S2SV_blank> -1, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; } if ( ret == - 1 ) { APPL_TRACE_ERROR ( ""poll <S2SV_blank> ret <S2SV_blank> -1, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; }",0
556,"<S2SV_ModStart> ; int goodsize ; if ( inuse < 0 || inuse >= LUAI_MAXSTACK ) { luaL_error ( L, ""in <S2SV_blank> stack <S2SV_blank> too <S2SV_blank> large"" ) ; return ; } goodsize = inuse + ( inuse / 8 ) + 2 * EXTRA_STACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( goodsize < LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else if ( goodsize < LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L,",0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart>, * s = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; char * ch, s_kind [ 3 ] = { 0, 0, 0 } ; raw = s ; while ( * raw && * raw!= '\\'' ) { * ch ++ = * raw ++ ; } kind = PyUnicode_FromString ( s_kind ) ; if (! kind ) { return NULL ; } if (! str ) { return NULL ; } if (! str ) { # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { PyObject * type, * value, * tback ; PyErr_Fetch ( & type, & value, & tback ) ; errstr = PyObject_Str ( value ) ; if ( errstr ) { char * s = """" ; char buf [ 128 ] ; s = _PyUnicode_AsString ( errstr ) ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF (",0
559,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> } else if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0",0
560,"<S2SV_ModStart> ""\\n"" ) ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""Mb <S2SV_blank> mv <S2SV_blank> ref <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. ref_frame ) ; mb_index ++ ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ;",0
561,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
562,,1
563,"<S2SV_ModStart> imp_dbh ) ) { if ( imp_dbh -> pmysql -> mysql_error ) { imp_dbh -> pmysql -> mysql_error = mysql_error ( imp_dbh -> pmysql ) ; do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; } <S2SV_ModStart> imp_dbh ) ) { if ( imp_dbh -> pmysql -> mysql_error ) { imp_dbh -> pmysql -> mysql_error = mysql_error ( imp_dbh -> pmysql ) ; do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; }",0
564,"<S2SV_ModStart> ( flags & ( SOCK_THREAD_FD_READ | SOCK_THREAD_FD_WRITE ) <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & ( SOCK_THREAD_FD_WRITE | SOCK_THREAD_FD_EXCEPTION ) ) <S2SV_ModEnd> ) BTA_JvRfcommWrite ( <S2SV_ModStart> id ) ; } if ( flags & ( SOCK_THREAD_FD_RD | SOCK_THREAD_FD_WR ) ) { if (! slot -> f. connected ||! flush_incoming_que_on_rd_signal ( slot ) ) { LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for <S2SV_blank> read <S2SV_blank> while <S2SV_blank> disconnected <S2SV_blank> (or <S2SV_blank> write <S2SV_blank> failure), <S2SV_blank> slot: <S2SV_blank> %d, <S2SV_blank> channel: <S2SV_blank> %d"", __func__, slot -> id ) ; need_close = true ; } } if ( flags & ( SOCK_THREAD_FD_WR ) ) { if (! slot -> f. connected ||! flush_incoming_que_on_wr_signal ( slot ) ) { LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for <S2SV_blank> write <S2SV_blank> while <S2SV_blank> disconnected <S2SV_blank> (or <S2SV_blank> write <S2SV_blank> failure), <S2SV_blank> slot: <S2SV_blank> %d, <S2SV_blank> channel: <S2SV_blank>",0
565,"<S2SV_ModStart> ieee_802_11_phdr phdr ; if ( len_remain < sizeof ( struct ieee_802_11_phdr ) || ampdu_len < 0 ) { pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> AMPDU <S2SV_blank> length <S2SV_blank> (%u)"", __func__, len_remain ) ; return ; } if ( len_remain < sizeof ( struct ieee_802_11_phdr ) || ampdu_len > sizeof ( struct ieee_802_11_phdr ) || ampdu_len > sizeof ( struct ieee_802_11_phdr ) || ampdu_len > sizeof ( struct ieee_802_11_phdr ) ) { pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> AMPDU <S2SV_blank> length <S2SV_blank> (%u)"", __func__, ampdu_len ) ; return ; } <S2SV_ModStart> phdr ) ; if ( len_remain < sizeof ( struct ieee_802_11_phdr ) || len_remain < sizeof ( struct ieee_802_11_phdr ) || ampdu_len > sizeof ( struct ieee_802_11_",0
566,<S2SV_ModStart> ; sh = s_malloc0 <S2SV_ModEnd> ( hdrlen +,0
567,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> ; UINT32 tempWidth <S2SV_ModEnd> ; rw = <S2SV_ModStart> -> ChromaSubsamplingLevel ; tempWidth = ROUND_UP_TO ( tempWidth, 8 ) ; ccl = context -> ColorLossLevel ; for ( y = 0 ; y < context -> height ; y ++ ) { src = data + ( context -> width - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * context -> width ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * context -> width ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * context -> width ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * context -> width ; for ( x = 0 ; x < context -> width ; x ++ ) { src = data + ( context -> width - x ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + x * context -> width ; coplane = context -> priv -> PlaneBuffers [",0
568,"<S2SV_ModStart> nr_parens ) return ERR_PTR ( - EINVAL ) ; if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; } * ( ++ top ) = invert ; continue ; case '!' : if (! is_not ( next ) ) break ; invert =! invert ; continue ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; }",0
569,"<S2SV_ModStart> cpi ) { const VP9EncoderConfig <S2SV_ModEnd> * rc = <S2SV_ModStart> ) { target = ( cpi -> oxcf. starting_buffer_level > INT_MAX )? INT_MAX : ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) ; } else if ( cpi -> common. current_video_frame == 1 ) { target = ( cpi -> oxcf. starting_buffer_level > INT_MAX )? INT_MAX : ( cpi -> oxcf. starting_buffer_level / 2 ) ; } else { target = ( cpi -> oxcf. starting_buffer_level > INT_MAX )? INT_MAX : ( cpi -> oxcf. starting_buffer_level / 2 ) ; } else { const int initial_boost = 32 ; int kf_boost = MAX ( initial_boost, ( int ) ( 2 * cpi -> output_framerate - 16 ) ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( rc -> frames_since_key / cpi -> output_fram",0
570,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE <S2SV_ModEnd> read_tx_mode ( vpx_reader <S2SV_ModStart> { TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",0
571,"<S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> ) ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node",0
572,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const x = & cpi -> mb. plane [ plane ] ; MACROBLOCKD * const <S2SV_ModEnd> xd = args <S2SV_ModStart> ; struct macroblock_plane <S2SV_ModEnd> * p = <S2SV_ModStart> -> plane_type ; const int16_t * qcoeff = BLOCK_OFFSET ( x -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const scan_order * so = mbmi -> scan_order ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = cpi -> fc. counts [ tx_size ] [ type ] [ ref ] ; unsigned int ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; unsigned int ( * const eob_branch ) [ COEFF_CONTEXT",0
573,<S2SV_ModStart> pSelect -> pSrc ; if ( pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
574,"<S2SV_ModStart> users ) ; switch ( minorversion ) { case 0 : serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, & nfs4_fscache_program ) ; break ; case 1 : serv = svc_create ( & nfs4_fscache_program, NFS4_CALLBACK_BUFSIZE, & nfs4_fscache_program ) ; break ; case 2 : serv = svc_create ( & nfs4_fscache_program, NFS4_CALLBACK_BUFSIZE, & nfs4_fscache_program, NFS4_CALLBACK_BUFSIZE, & nfs4_fscache_program ) ; break ; case 3 : serv = svc_create ( & nfs4_fscache_program, NFS4_CALLBACK_BUFSIZE, & nfs4_fscache_program ) ; break ; case 4 : serv = svc_create ( & nfs4_fscache_program, NFS4_CALLBACK_BUFSIZE, & nfs4_fscache_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ;",0
575,"<S2SV_ModStart> PointZZ_p * point, const CurveZZ_p * curve ) { PointZZ_p R0, R1 ; PointZZ_p tmp ; mpz_inits ( R0. x, R0. y, tmp. x, tmp. y, NULL ) ; R1. x = point -> x ; R1. y = point -> y ; mpz_inits ( R1. x, R1. y, tmp. x, tmp. y, NULL ) ; for ( i = dbits - 1 ; i >= 0 ; i -- ) { if ( mpz_tstbit ( scalar, i ) ) { mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R0. y ) ; pointZZ_pAdd ( & R1, & tmp, curve ) ; mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R0. y ) ; } else { if ( mpz_tstbit ( scalar, i ) ) { mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y",0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> s ) { if ( s < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } do { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = send ( sock_fd, buf, s, 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = send ( sock_fd, buf, s, 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%",0
579,"<S2SV_ModStart> xIter = crm_first_attr <S2SV_ModEnd> ( xml ) <S2SV_ModStart> -> name ; <S2SV_ModEnd> if ( __xml_acl_check <S2SV_ModStart> ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name",0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,0
581,"<S2SV_ModStart> } else if ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_index_exists ( params, hkey. num ) ) { zval tmp ; INIT_PZVAL_ARRAY ( & tmp, params ) ; fprintf ( stderr, ""params <S2SV_blank> = <S2SV_blank> "" ) ; zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_STRING &&! zend_hash_exists ( params, hkey. str, hkey. len ) ) { zval tmp ; Z_ADDREF_PP ( tmp ) ; Z_ADDREF_PP ( tmp ) ; Z_ADDREF_PP ( tmp ) ; Z_ADDREF_PP ( tmp ) ; Z_ADDREF_PP ( tmp ) ; Z_ADDREF_PP ( tmp ) ; Z_ADDREF_PP ( tmp ) ; <S2SV_ModStart> } else if ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_index_exists ( params, hkey. num ) ) { zval tmp ; Z_ADDREF",0
582,"<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> = VPX_IMG_FMT_I420 ; if (! _y4m -> vpx_fmt ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> header; <S2SV_blank> not <S2SV_blank> a <S2SV_blank> YUV4MPEG <S2SV_blank> file?\\n"" ) ; return - 1 ; } _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; } _y4m -> vpx_bps = 12 ; _y4m -> chroma_fmt = VPX_IMG_FMT_I420 ; if ( _y4m -> interlace == '?' ) { fprintf ( stderr, ""Warning: <S2SV_blank> Input <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format <S2SV_blank> unknown; <S2SV_blank> "" ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; } if ( _y4m -> interlace == '?' ) { fprintf ( stderr, ""Warning: <S2SV_blank> Input <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format <S2SV_blank> unknown; <S2SV_blank> "" ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; }",0
583,"<S2SV_ModStart> obj * otmp ; if ( strlen ( buf ) > 1024 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } otmp = read_obj_nam ( buf, ( struct obj * ) 0 ) ; if ( otmp == NULL ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
584,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> 0 ) return FALSE <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( parse_inode_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( no_xattrs ) sBlk. s. xattr_id_table_",0
585,"<S2SV_ModStart> * createenv ( <S2SV_ModEnd> const struct rule <S2SV_ModStart> root ) ; if ( rule -> options & KEEPENV ) { extern char * * environ ; if ( env [ 0 ] == NULL ) environ = NULL ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; if ( RB_INSERT ( envtree, & env -> root, NULL ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } else if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { const char * e ; size_t len ; char keybuf [ 1024 ] ; if ( len > sizeof ( keybuf ) - 1 ) continue ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, NULL ) ) { freenode ( node ) ; } else if ( RB_INSERT ( envtree, & env -> root, NULL ) ) { freenode ( node ) ; } }",0
586,"<S2SV_ModStart> -> seg ; int segment ; memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vp9_enable_segmentation ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio",0
587,"<S2SV_ModStart> return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", mod_type, FunctionDef_fields, 5 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", mod_type, AsyncFunctionDef_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"", stmt_type, ClassDef_fields, 5 ) ; if (! ClassDef_type ) return 0 ; Return_type = make_type ( ""Return"", stmt_type, Return_fields, 1 ) ; if (! Return_type )",0
588,"<S2SV_ModStart> ) ; } open ( log_path, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IWGRP | S_IROTH, 0666 ) ; if ( logfile_fd == INVALID_FD ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) ) ; is_logging = false ; return ; } open ( log_path, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IWGRP | S_IROTH, 0666 ) ; if ( logfile_fd == INVALID_FD ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) ) ; is_logging = false ; return ; } write ( logfile_fd, ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"", 16 ) ;",0
589,<S2SV_ModStart> ) ; } ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ;,0
590,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, * t, * StartClean <S2SV_ModEnd> ; double * <S2SV_ModStart> double * argbuf <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> ; outpos = outputbuffer ; nameobject = cinput ; while ( * s!= '[' ) s ++ ; t ++ ; * t ++ = 0 ; * t ++ = 0 ; * t ++ = 0 ; * t ++ = 0 ; * t ++ = 0 ; * t ++ = 0 ; * t ++ = 0 ; * s ++ = 0 ; while ( * s!= ']' ) s ++ ; * t ++ = 0 ; * t ++ = 0 ; * t ++ = 0 ; * t ++ = 0 ; * t ++ = 0 ; * t ++ = 0 ; while ( * t!='<S2SV_blank>'&& * t!= '\\n' ) t ++ ; * t ++ = 0 ; * t ++ = 0 ; while ( * t!='<S2SV_blank>'&& * t!= '\\t' && * t!= '\\n' ) t ++ ; * t ++ = 0 ; * t ++ = 0 ; while ( * t!='<S2SV_blank>'&& * t!= '\\t' ) t ++ ; * t ++ = 0 ; * t ++ = 0 ;",0
591,"<S2SV_ModStart> expr_ty step ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_lower ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id ( obj, & PyId_upper ) ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, are",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,"<S2SV_ModStart> int err ; if ( nfp_abm_u32_check_knode ( alink -> abm, knode, proto, extack ) ) goto err_delete ; val = be32_to_cpu ( knode -> sel -> keys [ 0 ]. val ) >> tos_off & 0xff ; mask = be32_to_cpu ( knode -> sel -> keys [ 0 ]. mask ) >> tos_off & 0xff ; val = be32_to_cpu ( knode -> sel -> keys [ 0 ]. val ) >> tos_off & 0xff ; val = be32_to_cpu ( knode -> sel -> keys [ 0 ]. mask ) >> tos_off & 0xff ; mask = be32_to_cpu ( knode -> sel -> keys [ 0 ]. mask ) >> tos_off & 0xff ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; }",0
594,"<S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } if ( stream -> config. stats_fn ) { stats_open_file ( & stream -> stats, stream -> config. stats_fn, pass ) ; } else { if ( stream -> config. stats_fn ) { if (! stats_open_mem ( & stream -> stats, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } else { if (! stats_open_file ( & stream -> stats, stream -> config. stats_fn, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } } else { if ( stream -> stats_fn ) { if (! stats_open_mem ( & stream -> stats, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } else { if (! stats_open_file ( & stream -> stats, stream -> config. stats_fn, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } else { if (! stats_open_mem ( & stream -> stats, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank>",0
595,"<S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( tmp_name, <S2SV_ModStart> tmpfile_name ) ) { g_assert ( tmp_name [ 0 ] == '\\0' ) ; g_assert ( tmp_name [ strlen ( tmp_name ) - 1 ] == '\\0' ) ; g_assert ( tmp_name [ strlen ( tmp_name ) - 1 ] == '\\0' ) ; g_assert ( tmp_name [ strlen ( tmp_name ) - 1 ] == '\\0' ) ; g_assert ( tmp_name [ strlen ( tmp_name ) - 1 ] == '\\0' ) ; } g_assert ( tmp_name [ 0 ] == '\\0' ) ; g_assert ( tmp_name [ strlen ( tmp_name ) - 1 ] == '\\0' ) ; if ( tmp_name [ strlen ( tmp_name ) - 1 ] == '\\0' ) { g_assert ( tmp_name [ strlen ( tmp_name ) - 1 ] == '\\0' ) ; tmp_name [ strlen ( tmp_name ) - 1 ] = '\\0' ; } else { g_assert ( tmp_name [ 0 ] == '\\0' ) ;",0
596,<S2SV_ModStart> pbi -> common ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols,0
597,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9Decoder <S2SV_ModEnd> * vp9_decoder_create ( <S2SV_ModStart> ) { VP9Decoder <S2SV_ModEnd> * const pbi <S2SV_ModStart> pbi ) ) ; VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if (! pbi ) return NULL ; vp9_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 0 ; vp9_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vpx_rtcd ( ) ; memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> oxcf = * oxcf ; cm -> ready_for_new_data = 1 ; vp9_init_dequantizer ( cm ) ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; vpx_worker_init ( & pbi -> lf_",0
598,"<S2SV_ModStart> -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } <S2SV_ModEnd> return GF_OK ;",0
599,<S2SV_ModStart> req ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> -> opt ; rcu_read_lock ( ) ; opt = rcu_dereference ( <S2SV_ModStart> -> opt ) ; rcu_read_unlock ( ) ;,0
600,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> tree2tok ( struct,0
601,"<S2SV_ModStart> ; if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_UPD_LAST | VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UP",0
602,"<S2SV_ModStart> 0 ) { if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; }",0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i <S2SV_ModStart> <S2SV_null> <S2SV_null>,0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> ) rc -> avg_frame_bandwidth <S2SV_ModEnd> * ( int64_t,0
605,"<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN <S2SV_ModStart> MIF_MAGICLEN ] ; char buf [ 4096 ] ; if ( jas_stream_read ( in, buf, sizeof ( buf ) )!= MIF_MAGICLEN ) { goto error ; } JAS_DBGLOG ( 10, ( ""header <S2SV_blank> line: <S2SV_blank> len=%d; <S2SV_blank> %s\\n"", strlen ( buf ), buf ) ) ; if ( tvp ) { jas_eprintf ( ""jas_tvparser_destroy <S2SV_blank> failed\\n"" ) ; goto error ; } JAS_DBGLOG ( 10, ( ""header <S2SV_blank> line: <S2SV_blank> len=%d; <S2SV_blank> %s\\n"", strlen ( buf ) ) ) ; goto error ; } JAS_DBGLOG ( 10, ( ""header <S2SV_blank> line: <S2SV_blank> len=%d; <S2SV_blank> %s\\n"", strlen ( buf ), buf ) ) ; if ( tvp ) { jas_eprintf ( ""jas_tvparser_destroy <S2SV_blank> failed\\n"" ) ; goto error ; } JAS_DBGLOG ( 10, ( ""header <S2SV_blank> line: <S2SV_blank> len",0
606,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCK * const x = & cpi -> mb ; MACROBLOCKD * const xd = & x -> e_mbd <S2SV_ModEnd> ; MODE_INFO * <S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> PICK_MODE_CONTEXT * ctx <S2SV_ModStart> -> allow_skip_recode ; x -> skip_optimize = ctx -> is_coded ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fdct ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fdct ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fdct ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fdct ; x -> skip_encode = (! output_enabled && cpi -> sf. skip_encode_frame && x -> q_index < QIDX_SKIP_THRESH ) ;,0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header,0
608,"<S2SV_ModStart> range_max ) { int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } position = get_bits_count ( gbc ) ; zeroes = i = 0 ; while ( 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits1 ( gbc ) )",0
609,"<S2SV_ModStart> { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || <S2SV_ModEnd> c >= 128 <S2SV_ModStart> } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || <S2SV_ModEnd> c >= 128 <S2SV_ModStart> } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || <S2SV_ModEnd> c >= 128 <S2SV_ModStart> { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || <S2SV_ModEnd> c >= 128 <S2SV_ModStart> } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || <S2SV_ModEnd> c >= 128 <S2SV_ModStart> } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || <S2SV_ModEnd> c >= 128 <S2SV_ModStart> } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"",",0
610,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> http_contentlen. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet ->",0
611,"<S2SV_ModStart> 4 ) { if ( ( ( ssize_t ) x + 4 ) > dds_info -> width || ( ( ssize_t ) y + 4 ) > dds_info -> height || ( ( ssize_t ) dds_info -> width - x ) || ( ( ssize_t ) dds_info -> height - y ) || ( ( ( ssize_t ) dds_info -> height - y ) > dds_info -> height ) ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBShort ( image ) ; bits = ReadBlobLSBLong ( image ) ; for ( j = 0 ; j < 4 ; j ++ ) { if ( ( x + j ) < ( ssize_t ) dds_info -> width && ( y + j ) < ( ssize_t ) dds_info -> height ) { q = QueueAuthenticPixels ( image, x, y, Min ( 4, dds_info -> width - x ), Min ( 4, dds_info -> height - y ), exception ) ; if ( q == ( PixelPacket * ) NULL )",0
612,<S2SV_ModStart> length ) { int ret ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> EINTR ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY (,0
613,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; } else { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; }",0
615,"<S2SV_ModStart> FALSE ; WLog_VRB ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU""",0
616,<S2SV_ModStart> ; # endif # if CONFIG_TEMPORAL_DENOISING if ( cpi -> cur_buf -> flags & YV12_FLAG_TEMPORAL_DENOISING ) { # if CONFIG_TEMPORAL_DENOISING if ( cpi -> cur_buf -> flags & YV12_FLAG_TEMPORAL_DENOISING ) { # if CONFIG_TEMPORAL_DENOISING if ( cpi -> cur_buf -> flags & YV12_FLAG_TEMPORAL_DENOISING ) if ( cpi -> cur_buf -> flags & YV12_FLAG_TEMPORAL_DENOISING ) { # if CONFIG_TEMPORAL_DENOISING if ( cpi -> cur_buf -> flags & YV12_FLAG_TEMPORAL_DENOISING ) { # if CONFIG_TEMPORAL_DENOISING if ( cpi -> cur_buf -> flags & YV12_FLAG_TEMPORAL_DENOISING ) if ( cpi -> cur_buf -> flags & YV12_FLAG_TEMPORAL_DENOISING ) { # if CONFIG,0
617,"<S2SV_ModStart> -> b_multithreaded_rd ) vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
618,<S2SV_ModStart> 0 ) { xWantedSize += xHeapStructSize ; if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } if ( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) ) { pxPreviousBlock = & xStart ; pxBlock = xStart ; } while ( ( pxBlock -> xBlockSize < xWantedSize ) && ( pxBlock -> pxNextFreeBlock!= NULL ) ) { pxPreviousBlock = pxBlock ; pxBlock = pxBlock -> pxNextFreeBlock ; } if ( ( pxBlock -> xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE ) { pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + x,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { struct stream packet = * s ; <S2SV_ModStart> int i ; if (! s_check_rem ( s ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume",0
621,"<S2SV_ModStart> } else { if ( smatch ( option, ""format"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Format <S2SV_blank> is <S2SV_blank> \'%s\'"", option ) ; return MPR_ERR_INVALID_FORMAT ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Format <S2SV_blank> is <S2SV_blank> \'%s\'"", option ) ; return MPR_ERR_INVALID_FORMAT ; } } else if ( smatch ( option, ""format"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Format <S2SV_blank> is <S2SV_blank> \'%s\'"", option ) ; return MPR_ERR_INVALID_FORMAT ; } else if ( smatch ( option, ""format"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Format <S2SV_blank> is <S2SV_blank> \'%s\'"", option ) ; return MPR_ERR_INVALID_FORMAT ; } else if ( smatch ( option, ""format"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Format <S2SV_blank> is <S2SV_blank> \'%s\'"", option ) ; return MPR",0
622,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> coef_probs = cpi",0
623,"<S2SV_ModStart> } ; assert ( fd >= 0 ) ; r = safe_chown ( fd, name, utf8 ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> UTF-8 <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = loop_write ( fd, ""\\033%G"", 3, false ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = safe_chown ( fd, name, utf8 ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = safe_chown ( fd, name, utf8 ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag",0
624,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int su3000_frontend_attach ( struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; int ret = 0 ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( d",0
625,"<S2SV_ModStart> * iface, <S2SV_ModEnd> vpx_codec_enc_cfg_t * cfg <S2SV_ModStart> VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & ( VPX_CODEC_USE_PSNR | VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_",0
626,"<S2SV_ModStart> int stride, <S2SV_ModEnd> InterpKernel * const <S2SV_ModStart> const kernel = <S2SV_ModEnd> xd -> mi <S2SV_ModStart> ] -> mbmi. <S2SV_ModEnd> interp_filter ) ; <S2SV_ModStart> = vp9_get_interp_kernel ( <S2SV_ModEnd> xd -> mi <S2SV_ModStart>. interp_filter ) <S2SV_ModEnd> ; enum mv_precision <S2SV_ModStart> ; vp9_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, mv_precision_uv, x, y ) ; vp9_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vp9_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vp9_build_inter_",0
627,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) > 4 * BUFSZ ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } if ( strlen ( origbuf ) > 4 * BUFSZ ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } if ( strlen ( origbuf ) > 4 * BUFSZ ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } if ( strlen ( origbuf ) > 4 * BUFSZ ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } if ( strlen ( origbuf ) > 4 * BUFSZ ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } if ( strlen ( origbuf ) > 4 * BUFSZ ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=",0
628,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> cJSON * <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> { n = cJSON_CreateNumber <S2SV_ModEnd> ( numbers [ <S2SV_ModStart> ] ) ; if (! n ) a -> child = 0 ; else suffix_object ( p, n ) ; } return a ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
629,"<S2SV_ModStart> data_end ) { const VP9EncoderConfig <S2SV_ModEnd> * const cm <S2SV_ModStart> -> log2_tile_rows ; <S2SV_ModEnd> const int num_workers <S2SV_ModStart> int num_workers = MIN ( pbi -> oxcf. max_threads <S2SV_ModEnd>, tile_cols ) <S2SV_ModStart> int num_workers = MIN ( pbi -> oxcf. max_threads <S2SV_ModEnd>, tile_cols ) <S2SV_ModStart> int num_workers = MIN ( pbi -> oxcf. max_threads <S2SV_ModEnd>, tile_cols ) <S2SV_ModStart> = MIN ( pbi -> oxcf. max_threads <S2SV_ModEnd> & ~ 1 <S2SV_ModStart> -> num_tile_workers, vpx_malloc ( num_workers * sizeof ( * pbi -> tile_workers ) ) ) ; for ( int i = 0 ; i < num_workers ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; vpx_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) )",0
630,<S2SV_ModStart> * 0x101 ; if ( ( fgetc ( ifp ) < 'M' ) || ( fgetc ( ifp ) < 'R' ) ) return ; if ( ( fgetc ( ifp ) < 'M' ) return ; if ( ( fgetc ( ifp ) < 'M' ) return ; if ( ( fgetc ( ifp ) < 'R' ) return ; if ( ( fgetc ( ifp ) < 'M' ) return ; if ( ( fgetc ( ifp ) < 'R' ) ) return ; if ( ( fgetc ( ifp ) < 'M' ) return ; if ( ( fgetc ( ifp ) < 'R' ) return ; if ( ( fgetc ( ifp ) < 'M' ) return ; if ( ( fgetc ( ifp ) < 'M' ) return ; if ( ( fgetc ( ifp ) < 'R' ) return ; if ( ( fgetc ( ifp ) < 'M' ) return ; if ( ( fgetc ( ifp ) < 'M' ) return ; if ( ( fgetc ( ifp ) <,0
631,"<S2SV_ModStart> -> common ; <S2SV_ModEnd> const double base_q <S2SV_ModStart> = SEGMENT_DELTADATA ; vpx_clear_segmentation ( seg ) ; vp9_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vpx_clear_system_state ( ) ; for ( int i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vp9_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; segment_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex +",0
632,<S2SV_ModStart> -> error_code ) { if ( error -> has_detail ) ctx -> base. err_detail = error -> detail ; else ctx -> base. err_detail = NULL ; return error -> error_code ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
633,<S2SV_ModStart> * ps_cur_slice ; pocstruct_t * ps_prev_poc ; pocstruct_t * ps_cur_poc ; <S2SV_ModStart> ps_cur_slice ; ps_prev_poc = ps_dec -> ps_prev_poc ; ps_dec -> ps_cur_poc = NULL ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; ps_dec -> ps_sei -> pv_codec_handle = NULL ; ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; ps_dec,0
634,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ) ) <S2SV_ModStart> ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; BTIF_freebuf ( buffer ) ; btsock_thread_add_fd ( pan_pth, fd, 0, SOCK_THREAD_FD_RD, 0 ) ; break ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; BTIF_freebuf ( buffer ) ; btsock_thread_add_fd ( pan_pth, fd, 0, SOCK_THREAD_FD_RD, 0 ) ; break ; }",0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> getnum ( const <S2SV_ModStart> = 0 ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; return a ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
636,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> survival ) ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> allgc, g -> allgcrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ;",0
637,<S2SV_ModStart> else return - ENODEV <S2SV_ModEnd> ; deb_info (,0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModStart> ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok ) ; return NULL ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
639,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> variant_opaque ; struct sockaddr_in <S2SV_ModEnd> addr ; int <S2SV_ModStart> = 0 ; <S2SV_ModEnd> static struct mainloop_fd_callbacks <S2SV_ModStart> cib_fd_callbacks = { <S2SV_ModEnd> dispatch = cib_remote_dispatch <S2SV_ModStart> destroy = cib_remote_connection_destroy, } ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; }",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->",0
641,"<S2SV_ModStart> ndo_vflag ) { ND_TCHECK ( bp [ 24 ] ) ; if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x08 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if (",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command <S2SV_ModStart> return rc ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
643,"<S2SV_ModStart> MaxTextExtent ] ; <S2SV_ModEnd> MagickBooleanType status ; <S2SV_ModStart> length, padding, value, version, width ; if ( image == ( Image * ) NULL ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) { LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows )",0
644,"<S2SV_ModStart> = 0 ; if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> to <S2SV_blank> use\\n"" ) ; return - 1 ; } <S2SV_ModStart> = bandno ; if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> to <S2SV_blank> use\\n"" ) ; return - 1 ; } <S2SV_ModStart> = bandno ; if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> to <S2SV_blank> use\\n"" ) ; return - 1 ; } <S2SV_ModStart> = bandno ; if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> to <S2SV_blank> use\\n"" ) ; return - 1 ; } <S2SV_ModStart> = bandno ; if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> to <S2SV_blank> use\\n"" ) ; return - 1 ; }",0
645,"<S2SV_ModStart> = '\\0' ; str_temp = malloc ( strlen ( str_temp ) + 1 ) ; if (! str_temp ) str_temp = malloc ( strlen ( str_temp ) + 1 ) ; if (! str_temp ) str_temp = weechat_strndup ( str_temp, strlen ( str_temp ) + 1, NULL, WEECHAT_STRING_STRIP_LEFT | WEECHAT_STRING_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS, 0, & argc ) ; if (! str_temp ) str_temp = malloc ( strlen ( str_temp ) + 1 ) ; if (! str_temp ) str_temp = weechat_strndup ( str_temp, strlen ( str_temp ) + 1, NULL, WEECHAT_STRING_STRIP_LEFT | WEECHAT_STRING_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS, 0, & argc ) ; if (! str_temp ) str_temp = malloc ( strlen ( str_temp",0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - 191 ; vpx_read_bit <S2SV_ModEnd> ( r )",0
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> parallel_decoding_mode ) ++",0
649,"<S2SV_ModStart>! stream ) { vpx_codec_err_t res ; <S2SV_ModStart> fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" <S2SV_ModEnd> ) ; } <S2SV_ModStart> ; res = vpx_codec_enc_config_default <S2SV_ModEnd> ( global -> <S2SV_ModStart>. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_timebase. den = 1000 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; stream -> ebml. <S2SV_ModEnd> debug = global",0
650,"<S2SV_ModStart> nd_opt_mtu * opm = & opp -> nd_opt_mtu ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opm -> nd_opt_mtu ), opm -> nd_opt_mtu ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opm -> nd_opt_mtu ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opm -> nd_opt_mtu ) ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opm -> nd_opt_mtu ) ) )",0
651,<S2SV_ModStart> = 0 ; if ( ( * re_ast ) -> root_node == NULL ) { yr_error ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror (,0
652,"<S2SV_ModStart> DICT_PATH_SHARED ) ) ; <S2SV_ModStart> ( ret <= 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_expand ( iter -> conn -> dict, iter -> pool, str_c ( path ), key -> key -> key, iter -> var_expand_table, & error ) ; if ( ret <= 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if (",0
653,<S2SV_ModStart> lineno = 0 ; <S2SV_ModEnd> tok -> level <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
654,"<S2SV_ModStart> } if ( av1 -> av1_config && av1 -> av1_config -> config ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> dataLength ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
655,"<S2SV_ModStart> maxFrameNum ) ; <S2SV_ModEnd> dpb -> maxLongTermFrameIdx <S2SV_ModStart> NO_LONG_TERM_FRAME_INDICES ; dpb -> numRefFrames = MAX ( dpb -> maxRefFrames, 1 ) ; if ( dpb -> numRefFrames > MAX_NUM_REF_PICS ) dpb -> numRefFrames = MAX_NUM_REF_PICS ; else dpb -> numRefFrames = MAX ( dpb -> maxRefFrames, 1 ) ; if ( dpb -> numRefFrames > MAX_NUM_REF_PICS ) dpb -> numRefFrames = MAX_NUM_REF_PICS ; else dpb -> numRefFrames = MAX ( dpb -> maxRefFrames, 1 ) ; if ( noReordering ) dpb -> numRefFrames = MAX ( dpb -> numRefFrames, 1 ) ; for ( i = 0 ; i < dpb -> dpbSize ; i ++ ) { if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; H264SwDecMemset ( dpb -> buffer [ i ]. pAllocatedData, ( picSizeInMbs * 384",0
656,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_in = sizeof ( struct oe_sockaddr_storage ) ; if ( addrlen_in > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_E,0
657,,1
658,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) < length + 6 ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> TPDU <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } if ( Stream_GetRemainingLength ( s ) < length + 6 ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> TPDU <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } if ( Stream_GetRemainingLength ( s ) < length + 6 ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> TPDU <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } if ( Stream_GetRemainingLength ( s ) < length + 6 ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> TPDU <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } if ( Stream_GetRemainingLength ( s ) < length + 6 ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> TPDU <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } if ( Stream_GetRemainingLength ( s ) < length + 6 ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> TPDU <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } if ( Stream_GetRemainingLength ( s ) < length + 6 ) {",0
659,"<S2SV_ModStart> ipv6_pinfo * np = rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) )",0
660,"<S2SV_ModStart> ; unsigned int <S2SV_ModEnd> found, upx_success <S2SV_ModStart> ; uint32_t valign <S2SV_ModEnd> ; uint32_t hdr_size <S2SV_ModStart> ; uint32_t valign <S2SV_ModEnd> ; uint32_t hdr_size <S2SV_ModStart> ; uint32_t valign <S2SV_ModEnd> ; uint32_t hdr_size <S2SV_ModStart> ; uint32_t hdr_size = sizeof ( struct pe_image_optional_hdr64 ) ; uint32_t hdr_size = sizeof ( struct pe_image_optional_hdr32 ) ; uint32_t hdr_size_adjust = sizeof ( struct pe_image_optional_hdr32 ) ; uint32_t hdr_size_adjust = sizeof ( struct pe_image_optional_hdr32 ) ; uint32_t hdr_size_adjust = sizeof ( struct pe_image_optional_hdr64 ) ; uint32_t hdr_size_adjust = sizeof ( struct pe_image_optional_hdr32 ) ; uint32_t hdr_size_adjust = sizeof ( struct pe_image_optional_hdr64 ) ; uint32_t hdr_size_adjust ; uint32_t hdr_size_adjust = sizeof ( struct pe_image_optional_hdr32 ) ;",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart>!= 0 ) { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; }",0
662,"<S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> rc = cib_tls_signon <S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> rc = cib_tls_signon <S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> rc = cib_tls_signon <S2SV_ModStart> private -> callback ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; } <S2SV_ModEnd> if ( rc <S2SV_ModStart> pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, 0, 0, NULL ) ; free_xml ( hello ) ; } <S2SV_ModEnd> if ( rc <S2SV_ModStart> pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, 0, 0, NULL ) ; free_xml ( hello ) ; } <S2SV_ModEnd> if ( rc",0
663,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
664,"<S2SV_ModStart> >> 3 } ; int num00, tmp_err, n, sr = 0, step_param = 3 ; int further_steps = ( MAX_MVSEARCH_STEPS - 1 ) - step_param ; int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr ; step_param += sr ; further_steps -= sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var",0
665,"<S2SV_ModStart> ( EPERM, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; if ( h -> size == 0 ) { SET_ERRNO ( EPERM, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( h -> size == 0 ) { SET_ERRNO ( EPERM, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" ) ; goto error ; } if ( h -> size == 0 ) { SET_ERRNO ( EPERM, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( h -> size == 0 ) { SET_ERRNO ( EPERM, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" ) ; goto error ;",0
666,<S2SV_ModStart> -> reqbody_no_files_limit ; if ( child -> reqbody_no_files_limit == NOT_SET ) { merged -> reqbody_no_files_limit = ( parent -> reqbody_no_files_limit == NOT_SET ) ; merged -> reqbody_access = ( child -> reqbody_access == NOT_SET? parent -> reqbody_access : child -> reqbody_access ) ; merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit == NOT_SET ) ; merged -> reqbody_access = ( child -> reqbody_access == NOT_SET? parent -> reqbody_access : child -> reqbody_access ) ; merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit == NOT_SET? parent -> reqbody_no,0
667,"<S2SV_ModStart> one ) { if ( number_planes_filled > MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes_filled, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes_filled, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t ) MagickMax ( number_planes, ( size_t",0
668,"<S2SV_ModStart>!= 0 || ( r = sshbuf_put_u32 ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> type ) )",0
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,"<S2SV_ModStart> ) { cib_client_t <S2SV_ModEnd> * client = <S2SV_ModStart> num_clients ) ; <S2SV_ModEnd> free ( client <S2SV_ModStart> user ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
671,"<S2SV_ModStart> * uv ; if ( thread -> twups == NULL ) thread -> twups = NULL ; <S2SV_ModStart> next ) { if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; } else { <S2SV_ModStart> next ) { if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; } } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
