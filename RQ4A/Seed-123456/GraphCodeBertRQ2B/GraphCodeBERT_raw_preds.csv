,raw_predictions,correctly_predicted
0,<S2SV_ModStart> exit ; } if ( wmi -> wmi ) return - EIO ;,0
1,<S2SV_ModStart> skb ) ; <S2SV_ModEnd> if ( skb,0
2,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
3,,0
4,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, regs",0
5,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
6,"<S2SV_ModStart> int input, tran_low_t input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> = input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> output = input <S2SV_ModStart> = input ; tran_low_t <S2SV_ModEnd> temp2 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> temp2 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> temp2 = input <S2SV_ModStart> 1 ] ; tran_low_t <S2SV_ModEnd> temp2 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> temp2 = input <S2SV_ModStart> ] ; tran_low_t <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ] ; tran_low_t <S2SV_ModEnd> output = input <S2SV_ModStart> 1 ] ; tran_low_t <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 1 ] = ( tran_low_t )",0
7,"<S2SV_ModStart> = 0 ; size_t senseptr -> senseptr = 0 ; <S2SV_ModStart> gc -> senseptr = 0 ; if ( senseptr -> senseptr -> senseptr -> senseptr -> senseptr, 0, senseptr -> senseptr -> senseptr, 0, senseptr -> senseptr -> senseptr, senseptr -> senseptr, senseptr -> senseptr, senseptr -> senseptr <S2SV_ModEnd> ) ; if",0
8,<S2SV_ModStart> ; # endif # endif,0
9,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int64_t * const VP9_COMMON * const uint8_t * const VP9_COMMON * const VP9_COMMON * const xd = & cpi -> avg_frame ; MACROBLOCK_err = & cpi -> frame_err ; MACROBLOCK_err = & cpi -> td. noise_err ; MACROBLOCK_err = & cpi -> frame_size ; MACROBLOCKD * const int64_t * const int64_t * const int64_t * const int64_t * const uint8_t * const int64_t * const int64_t * const int64_t * const uint8_t * const uint8_t_err ; int64_tok ; int64_tok ; int64_err ; int64_tok ; uint8_t_t filt_err ; uint8_t_err ; int64_t_t filt_err ; memset <S2SV_ModEnd> ( & <S2SV_ModStart> ( &,0
10,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
11,"<S2SV_ModStart> void vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ; vpx_writer <S2SV_ModEnd> ( w,",0
12,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
13,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> too <S2SV_blank> short"" ) ) ; return - 1 ; } <S2SV_ModStart> 2 ) ; if ( length < 2 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 2 ) { ND_PRINT ( ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return - 1 ; } <S2SV_ModEnd> 2SV_null>",0
14,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
15,,0
16,<S2SV_ModStart> ; if ( addr -> l2tp_family <S2SV_ModEnd> ) return -,0
17,<S2SV_ModStart> char * str <S2SV_ModEnd> ; if (,0
18,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
19,,0
20,"<S2SV_ModStart> ) &&! capable_inode_uidgid <S2SV_ModEnd> ( inode,",0
21,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
22,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> this_frame_frame_frame ( const TWO_PASS_PASS <S2SV_ModEnd> * const twopass <S2SV_ModStart> pct ) { const TWO_PASS_PASS_PASS_PASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const twopass = & twopass ; const FIRSTPASS_STATS * const FIRSTPASS_STATS * const twopass = & twopass -> stats_frame_frame_in_frame_frame_in_in_stats ( twopass, twopass, & twopass -> stats_frame_frame -> stats_in_in_frame ) ; if ( twopass -> stats_in_frame == 0 && twopass -> stats_in_frame == 0 && twopass -> stats_in_in_frame -> stats_in_in_in_frame -> stats_frame_in_in_in_in_frame -> stats_in_in_in_frame ) { return 0 ; } <S2SV_ModEnd> if ( is_frame",0
23,<S2SV_ModStart> ext4_io_unlock ( inode <S2SV_ModEnd> ) ; if,0
24,<S2SV_ModStart> char * name <S2SV_ModEnd> ; if (,0
25,<S2SV_ModStart> ; if (! line <S2SV_ModEnd> ) return 0,0
26,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL,0
27,<S2SV_ModStart> ] ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
28,"<S2SV_ModStart> mnt, rootfs",0
29,<S2SV_ModStart> inio -> io_set <S2SV_ModEnd> ; int io ->,0
30,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null>,0
31,,0
32,<S2SV_ModStart> ( vpx_codec_alg_priv_t * ) <S2SV_ModEnd> ; if (,0
33,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> atomic_setover = - EINVAL ; if ( <S2SV_ModEnd> rollover -> num <S2SV_ModStart> ; if ( <S2SV_ModEnd> rollover ) { <S2SV_ModStart> atomic_set_long_long_long_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> ) ) ; err = - EINVAL ; goto out <S2SV_ModEnd> ; } <S2SV_ModStart> ; if ( <S2SV_ModEnd> rollover ) goto out <S2SV_ModEnd> ; err = <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num,0
34,,0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
36,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
37,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28J60_ECON1 <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28J60_ECON1 <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, ENC28J60_ECON1 ) <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28J60_ECON1 <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28J60_ECON1 <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd>, ENC28J60_ECON1_ECON1, ENC28J60_ECON1 <S2SV_ModEnd>, ENC28J60",0
38,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
39,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
40,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_col ) { <S2SV_ModEnd> int i ; <S2SV_ModStart> int mb_width = ( void ) mb_stride <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> ; uint8_t * <S2SV_ModEnd> ; int i <S2SV_ModStart> ; int i ; memset <S2SV_ModEnd> ( y_stride, <S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( q_stride, <S2SV_ModStart> ++ ) ; memcpy <S2SV_ModEnd> ( src,",0
41,"<S2SV_ModStart> ptr ) { struct pci_cmd * cmd = NULL ; cmd = NULL ; <S2SV_ModStart> ( cmd, & cmd <S2SV_ModEnd> ) ; cmd",0
42,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int error = <S2SV_ModStart> h2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
43,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
44,<S2SV_ModStart> * opt ; struct ip_options_rcu <S2SV_ModEnd> * opt =,0
45,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
46,<S2SV_ModStart> ; if (,0
47,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode",0
48,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
49,<S2SV_ModStart> } if ( (,0
50,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
51,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> rv2SV_null> <S2SV_null>,0
52,"<S2SV_ModStart> value ) { u64 tv_sec = div_u64_rem <S2SV_ModEnd> ( tv_sec,",0
53,,0
54,"<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( addr,",0
55,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
56,<S2SV_ModStart> ( pstride <S2SV_ModEnd> ) ; },0
57,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ;,0
58,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
59,"<S2SV_ModStart> arg ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( arg_argc ( arg_arg ) arg_arg_arg ( arg_arg, & arg_args, arg_arg, arg_arguments ) arg_arg ( & arg_arg, arg_arg ) ) ; else if ( arg_argc ( arg_arg ) arg_argc ( & arg_arg, arg_args, arg_args, arg_arguments ) ; else { if ( arg_arg ( & arg_arg, & arg_arg ) ) goto out ; } else if CONFIG_VP9_HIGHBITDEPTH ) { if ( arg_arg ( arg_arg, & arg_argc ( arg_arg, arg_arg, arg_arg, arg, arg_arg, arg_arg, arg_arg ) ) ; } else { if ( arg_arg ( arg, arg_args, & arg_argc ) ) goto out ; } else { if CONFIG_VP9_VP9_HIGHBITDEPTH if (",0
60,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
61,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = ext_size ( EXT4_DATA ( inode -> i_size, inode -> i_size ) -> i_data <S2SV_ModEnd> ) ; if",0
62,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( c,0
63,,0
64,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
65,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
66,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
67,"<S2SV_ModStart> = MagickFalse ; status = SetImageExtent ( image, image -> rows, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; }",0
68,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
69,"<S2SV_ModStart> * fmode, fmode_t fmode <S2SV_ModEnd> ) ; fmode",0
70,<S2SV_ModStart> * fd ; <S2SV_ModEnd> int fd =,0
71,,0
72,<S2SV_ModStart> ; if ( cmd == NULL ||,0
73,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int src, const vp9_null> <S2SV_null> static <S2SV_ModStart> src_null> <S2SV_null> <S2SV_null> static",0
74,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_near ( ctxt <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,0
75,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
76,<S2SV_ModStart> ) ; int ret <S2SV_ModEnd> ; ret =,0
77,,0
78,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> char * o_name = NULL <S2SV_ModEnd> ; int o_name <S2SV_ModStart> ; if ( len < 0 ) { PyErr_decode_decode_name ( o_decode_name, sizeof ( * ) ) ; return NULL ; } if ( * o_decode_name )!= NULL ) { PyErr_DECREF ( ""required <S2SV_blank> decode"" ) ; return NULL ; } if (! PyErr_DECREF ( o_name ) ) { PyErr_DECODE_DECREF ( o_DECREQUAL ) ; } if (! PyErr_DECREF ( n ) ) { PyErr_DECREF ( ""Error: <S2SV_blank> to <S2SV_blank> not <S2SV_blank> not <S2SV_blank> (%s\\n"", o_name ) ; return NULL ; } else { PyErr_DECREF ( * ) ; } return NULL ; } if (! PyErr_DECREF ( f_DECREF ( n ) ) ) ; PyErr_DECREF ( ""\\n"" ) ; return NULL ; }",0
79,,0
80,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
81,,0
82,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> too <S2SV_blank> short"" ) ; return ; } ptr ++ ; ptr ++ ; ptr ++ ; if ( length < 2 ) { ND_PRINT ( ndo, ""AVP <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> short"" ) ; return ; } ptr ++ ; ptr ++ ; ptr = EXTRACT_16BITS ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> too <S2SV_blank> too <S2SV_blank> short"" ) ) ; return NULL ; } if ( ptr < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; } if ( ptr < 2 ) { ND_PRINT ( ndo, EXTRACT_16BITS ( ndo, EXTRACT_16BITS ( ptr ) ) ) ; ptr ) ; return ; }",0
83,,0
84,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
85,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
86,<S2SV_ModStart> sk ) ; msg -> msg_namelen = 0 ;,0
87,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
88,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
89,<S2SV_ModStart> = NULL ; size_t <S2SV_ModEnd> len = 0,0
90,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> if ( CHILD,0
91,,0
92,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row, const VP9_COMMON * const cm, const MACROBLOCKD * const xd = & cm -> mi_row, xd -> mi_row, mi_row, xd -> mi_row, mi_col, mi_col, mi_col, mi_col, xd -> mi_col, xd -> mi_col, xd -> mi_col, mi_col, mi_col, mi_col, mi_cols, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, w, xd -> mi_col, mi_col, xd -> mi_col, mi_col, cm -> mi_cols ) ; const int bh = 0 ; const int bh = 0 ; const int bw = 0 ; const int bw = 0 ; const int bw = 0 ; const int bw = bw ; const int bw = 0 ; const int bw = cpi ->",0
93,<S2SV_ModStart> ) ) { int i ; <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> } <S2SV_null>,0
94,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
95,<S2SV_ModStart> ; if ( rq ->,0
96,,0
97,<S2SV_ModStart> - ENOMEM ; } <S2SV_ModEnd> if ( ptr_hdr,0
98,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
99,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> b2SV_null> <S2SV_null>,0
100,,1
101,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
102,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } if,0
103,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ;,0
104,"<S2SV_ModStart> { if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( image,",0
105,<S2SV_ModStart> 0 ) ; if ( avio_feof ( s -> pb ) ) return AVERROR_INVALIDDATA ;,0
106,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
107,<S2SV_ModStart> * new_size <S2SV_ModEnd> ; new_size =,0
108,"<S2SV_ModStart> void vpx_wb_write_bit_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> int i ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
109,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
110,<S2SV_ModStart> 0 ; } <S2SV_ModEnd> if ( sk,0
111,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
112,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct sctp_ack <S2SV_ModStart> asconf ; sctp_ack = sctp_chunk_chunk_chunk_chunk_chunk <S2SV_ModEnd> ; sctp_chunk_chunk_chunk <S2SV_ModStart> asconf ) { sctp_ack = sctp_ack <S2SV_ModEnd> ; sctp_chunk_chunk_params ( <S2SV_ModStart> asconf ) ; if ( err_pass!= SCTP_IPV2SV_null> <S2SV_null>,0
113,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
114,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
115,,0
116,<S2SV_ModStart> vpx_codec_err_t * ctx <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { if ( cpi -> g_mode == NULL ) { if ( cpi -> g_mode == 0 || cpi -> g_mode == 0 || ( cpi -> g_mode == 0 || ( cpi -> g_mode == 0 || cpi -> oxcf. g_mode == 0 || ( cpi -> g_mode == 0 || ( cpi -> oxcf. g_mode == 0 || ( cpi -> g_mode == 0 || ( cpi -> g_mode == 0 && ( int ) ( int ) ( int ) ( int ) ( int ) ( int ) ( int ) ( int ) ( int ) ( int ) ( cpi -> g_h ) ( int ) ( int ) ( int ) ( int ) ( int ) ( int ) ( int ) ( int ) ( int ) ( int ) ( int ) ( int ) ( int ) ( int ) ( cpi -> g_t ) ( int ) ( int ) ( int ) ( int ) ( int ) ( cpi -> g_t ) ( int ) ( int ) ( int ) ( cpi -> g_,0
117,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( cpi -> oxcf. noise_frame == 0 ) { vp9_free ( cpi -> common ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( cpi -> common ) { vp9_free ( cpi -> common ) ; # if CONFIG_VP9_HIGHBITDEPTH # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH ) { vp9_free ( cpi -> common ) ; # endif vp9_free ( cpi ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH ) { vp9_free ( cpi -> common ) ; } # endif vp9_free ( cpi ->,0
118,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int rc <S2SV_ModEnd> ; struct desc_desc <S2SV_ModStart> ctxt ) ; rc = assign_eip_descriptor <S2SV_ModEnd> ; ctxt -> <S2SV_ModStart> ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc = assign_eip_eip_far ( ctxt, ctxt, & old_desc, VCPU_SREG_CS, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_far ( ctxt, ctxt -> mode!= X86EMUL_CONTINUE ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_eip_far ( ctxt, VCPU_SREG_null>",0
119,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
120,"<S2SV_ModStart> ; if ( ISOM_DECREASE_SIZE ( ptr, 1 )",0
121,<S2SV_ModStart>. get_alg_priv ( ctx ) <S2SV_ModEnd> ; if (,0
122,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> state_null> <S2SV_null> <S2SV_null> static state <S2SV_ModEnd> state_null> <S2SV_null>,0
123,<S2SV_ModStart> ) break ; <S2SV_ModEnd> } if (,0
124,"<S2SV_ModStart> len ) ; memset <S2SV_ModEnd> ( buf,",0
125,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
126,<S2SV_ModStart> { return AVERROR_INVALIDDATA <S2SV_ModEnd> ; if (,0
127,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
128,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
129,<S2SV_ModStart> ; return ret <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>,0
130,<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if (,0
131,"<S2SV_ModStart> ( interface, TEMP_FAILURE_RETRY <S2SV_ModEnd> ) ; }",0
132,,0
133,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
134,<S2SV_ModStart> { rqs [ <S2SV_ModEnd> ] = rqs,0
135,<S2SV_ModStart> ( res ) <S2SV_ModEnd> ; if (,0
136,<S2SV_ModStart> goto err ; <S2SV_ModEnd> if ( skb,0
137,<S2SV_ModStart> skb -> len < sizeof ( struct skb ),0
138,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; return",0
139,<S2SV_ModStart> = 0 ; tile_buffsize = 0 ;,0
140,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
141,,0
142,<S2SV_ModStart> } if ( len < 0 ||,0
143,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
144,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
145,<S2SV_ModStart> } else { <S2SV_ModEnd> obuf = 0,0
146,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
147,<S2SV_ModStart> } return ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
148,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = rcx ; rcx = X86EMUL_CONTINVAL ; if ( rcx >= X86EMUL_REGS_REPL_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS ) ; <S2SV_ModStart> = rdx ; rcx = rcx ; rcx = rcx ; if ( rcx >= X86EMUL_REPL_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS_REGS,0
149,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i, vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * const vpx_tree_tree_tree_prob <S2SV_ModEnd> * probs =",0
150,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
151,<S2SV_ModStart> ; return err <S2SV_ModEnd> ; if (,0
152,"<S2SV_ModStart> * input, tran_low_t input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> output = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> * input = <S2SV_ModStart> 1 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 2 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 2 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 1 ] ; tran_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 2 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) ; tran_low_t ) ; tran_low_t ] = ( tran_low_t ) ; tran_t",0
153,<S2SV_ModStart> flags ) { <S2SV_ModEnd> flags & ( void,0
154,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
155,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
156,,0
157,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int mi_se2SV_null>,0
158,<S2SV_ModStart> ; c ->,0
159,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
160,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> OE_SSIZE_SSIZE_MAX <S2SV_ModEnd> ; int p <S2SV_ModStart> ; int ret = 0 ; OE_SSIZE_MAX <S2SV_ModEnd> p = OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ; if ( p -> data_size!= 0 ) { ret = - EINVAL ; OE_RAISE_ERRNO ( OEINVAL, OE_EINVAL ) ; } if ( p -> data_out!= 0 ) { ret = - EINVAL ; OE_RAISE_ERRNO ( OEINVAL ) ; } if ( p -> data_out!= 0 ) { ret = - EINVAL ; OE_RAISE_ERRNO ( OEINVAL, & p -> data_out, OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( p -> data_out!= 0 ) { ret = - EINVAL ; OEINVAL ; } if ( p -> data_out!= OE_RAISE_ERRNO ( p ->",0
161,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
162,<S2SV_ModStart> cpi ) { memcpy <S2SV_ModEnd> ( cpi ->,0
163,"<S2SV_ModStart> data ) { int ret ; u8 * buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret =",0
164,,0
165,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> start_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_null> <S2SV_null>,0
166,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
167,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> cpi ) { const vp9_null> <S2SV_null> <S2SV_null>,0
168,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
169,,0
170,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
171,"<S2SV_ModStart> vpx_codec_alg_priv ( ctx <S2SV_ModEnd>, ctx ->",0
172,<S2SV_ModStart> inode -> i_sb <S2SV_ModEnd> ) { int i_s,0
173,<S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd> ) ; },0
174,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
175,,0
176,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lineno, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> missing <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> \\"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> from <S2SV_blank> field <S2SV_blank> from <S2SV_blank> from <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> \\""args\\""args\\""type_ignores <S2SV_blank> from <S2SV_blank> from <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> field"" ) ; return 1 ; } if ( tmp == NULL ) { PyExc_CLEAR ( PyExc_CLEAR ( tmp ) ; } else { int res <S2SV_ModEnd> ; res <S2SV_ModStart> ; res = obj2ast_ignores <S2SV_ModEnd> ( obj, <S2SV_ModStart> ) ; } if ( tmp == NULL ) { PyExc_CLEAR ( tmp ) { PyExc_CLEAR ( PyExc_TypeError, """,0
177,<S2SV_ModStart> ; if (! ( mnt_flags & MNT_MASK ) ) { return - EPERM ; } if (,0
178,,0
179,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static CS64S2SV_null> static int64_chunk cs64Chunk <S2SV_ModStart> = 064Chunk ; int64_chunk = 064Chunk = sizeof ( CS64Chunk64Chunk64Chunk64Chunk, CS64Chunk, CS64_s64_s64Chunk ) ; if ( CS64ChunkSize > sizeof ( CS64_s64Chunk ) ) { CS64_s64_s64Chunk64_s64ChunkSize64Chunk64_s64_s64_s64Chunk64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_s64_bytes64",0
180,"<S2SV_ModStart> msg_sys -> msg_sys <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( msg_sys -> msg_sys <S2SV_ModEnd>, msg_sys, <S2SV_ModStart> -> msg_sys ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( msg_sys -> msg_sys, msg_sys, msg_sys <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( msg_sys -> msg_sys, msg_sys <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( msg_sys -> msg_sys, msg_sys <S2SV_ModEnd>, msg_sys ->",0
181,"<S2SV_ModStart>, int kfree <S2SV_ModEnd> ; int i",0
182,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
183,,0
184,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
185,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
186,"<S2SV_ModStart> if (! js_doregexec ( J, <S2SV_ModEnd> re -> prog",1
187,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> size = 0,0
188,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR_ERR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZERO_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR_ISR, KSZ8851_ISR_ISR <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ;",0
189,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb )",0
190,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
191,<S2SV_ModStart> -> id ; <S2SV_ModEnd> } if (,0
192,"<S2SV_ModStart> ( t1_array, t1_array ) + 1",0
193,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> b2SV_null> static <S2SV_ModStart> int mi_row, int mi_row, xd_row, int mi_row, int mi_row, int mi_row <S2SV_ModEnd>, mi_row, <S2SV_ModStart> 0 ) ; if ( x < BLOCK_OFFSET ) return 1 ; <S2SV_ModStart> } if ( x < BLOCK_OFFSET_OFFSET ) { memset ( bsize, bsize, bsize, bsize, mi_rows - mi_rows - mi_rows - mi_rows - mi_row, bsize, bsize, bsize, bsize, bsize, mi_rows - mi_rows - mi_rows - mi_rows - mi_rows - mi_rows - mi_cols - mi_rows - mi_row ) ; if ( x < BLOCK_OFFSET ) { memset ( bh, bsize, bsize, bsize, bsize, b_rows - mi_rows - mi_cols, b_rows - mi_rows - mi_cols, bsize ) ; } if (",0
194,,0
195,<S2SV_ModStart> ret = 0 <S2SV_ModEnd> ; ret =,0
196,,0
197,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( dst_reg,0
198,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
199,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
200,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int64_null> <S2SV_null> <S2SV_null> static,0
201,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> svc_frame_frame_frame ( VP9_COMMON <S2SV_ModStart> * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VPX_COMMON * const svc = svc_ctx -> svc_ctx ; int i ; if ( svc_ctx -> svc. spatial_context [ i ] ) { svc_ctx -> svc. spatial_context [ i ] = 0 ; ++ i ] = 0 ; svc -> svc_ctx -> svc_context [ i ] = 0 ; for ( i = 0 ; i < svc_ctx -> svc_ctx -> svc_ctx -> svc_ctx -> svc_context [ i ] = 0 ; i ] = 0 ; i ] = 0 ; for ( i = 0 ; i < 0 ; i ) { svc_ctx -> svc_context [ i ] = 0 ; i ] [ i ] = 0 ; i ] = 0 ; i ] [ i ] = 0 ; i ] =,0
202,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
203,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> char * <S2SV_ModStart> char * end <S2SV_ModEnd> ; int <S2SV_ModStart> char * end - 1 <S2SV_ModEnd> ; int * <S2SV_ModStart> char * end_start ; if ( * len == '\\0' || * strlen ( * strlen ( * end - 1 ) ) == '\\0' ) ; if ( * end - 1 ) { if ( * end == '\\0' || * end == '\\0' || * end == '\\0' || * end_start == '\\0' || * end_start == '\\0' || * end_start == '\\0' ) { * end_end = '\\0' ; } if ( * end == '\\0' || * end == '\\0' || * end_end == '\\0' || * end_end == '\\0' ) { * end_end = '\\0' ; return 0 ; } else { * end_end = 0 ; if ( * end_end == '\\0' || * end == '\\0' || * end == '\\0' || * end_end,0
204,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
205,<S2SV_ModStart> ) break ; <S2SV_ModEnd> } if (,0
206,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
207,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
208,,0
209,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row ) { VP9_COMMON * const xd = & cpi -> common ; MACROBLOCKD * const <S2SV_ModStart> -> common ; MACROBLOCKD * const xd = & xd -> mi_row ; MACROBLOCKD * const <S2SV_ModStart> -> mi_row, mi_row, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, cpi -> none_col, mi_col, cpi -> none_col, mi_col, cpi -> none_col, 0, mi_col, cpi -> none_col, 0, mi_col",0
210,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( sk,0
211,<S2SV_ModStart> * fd ; <S2SV_ModEnd> int fd =,0
212,,0
213,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_options_op ( int <S2SV_ModStart> ( opt -> opt, opt <S2SV_ModEnd> opt -> opt <S2SV_ModStart> ( opt -> opt <S2SV_ModEnd> ) return 0",0
214,<S2SV_ModStart> error = 1 <S2SV_ModEnd> ; if (,0
215,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> = sizeof ( struct daddrptr <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ) ; if ( daddr_errno == 0 ) { pr_err_err ( ""Failed <S2SV_blank> to <S2SV_blank> to <S2SV_blank> to <S2SV_blank> packet <S2SV_blank> to <S2SV_blank> packet <S2SV_blank> to <S2SV_blank> from <S2SV_blank> to <S2SV_blank> to <S2SV_blank> with <S2SV_blank> to <S2SV_blank> from <S2SV_blank> to <S2SV_blank> (%d\\n"", __func__, __func__, __func__, __func__ ) ; return - EINVAL ; } if ( dptr -> ipvendor <S2SV_ModEnd> )!= 0",0
216,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
217,<S2SV_ModStart> -> columns - 1 <S2SV_ModEnd> ) ; x,0
218,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
219,<S2SV_ModStart>,0
220,<S2SV_ModStart> ) ) ; ND_TCHECK ( bp [ 0 ] ) ;,0
221,,0
222,<S2SV_ModStart> * jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_t,0
223,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
224,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( dd ->,0
225,<S2SV_ModStart> char new_data [ 0 ] <S2SV_ModEnd> ] ; int,0
226,,0
227,,0
228,,0
229,<S2SV_ModStart> { char * c = c -> remote <S2SV_ModEnd> ; c ->,0
230,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input,",0
231,"<S2SV_ModStart> { gchar * name = g_assert0 ( strlen ( name, '\\0' ) ; if (! strcmp ( name, '\\0' ) ) { g_assert_error ( '\\0' ) ; return - 1 ; }",0
232,"<S2SV_ModStart> const char * fp, const char * fmode <S2SV_ModEnd> ) { int <S2SV_ModStart> ; int fp = safe_calloc ( <S2SV_ModEnd> ) ; const <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd> ) ; return",0
233,"<S2SV_ModStart> elen ) ; memset ( elen, sizeof ( struct elen ) ) ;",0
234,"<S2SV_ModStart> ( tptr, tptr <S2SV_ModEnd> ) ) ;",0
235,"<S2SV_ModStart> ( ctxt, 0",0
236,"<S2SV_ModStart> length ) { struct stream packet = * s ; <S2SV_ModStart> length ) ; packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""rdp_error(), <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> from <S2SV_blank> from <S2SV_blank> consume <S2SV_blank> stream"", & packet ) ; }",0
237,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
238,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
239,<S2SV_ModStart> char fc ; int fc ; fc -> fc = NULL ;,0
240,"<S2SV_ModStart> -> y = MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f,",0
241,,0
242,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
243,,0
244,<S2SV_ModStart> error = T_FAILURE <S2SV_ModEnd> ; if (,0
245,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_encode_unalloc ( int <S2SV_ModStart> str ) ; size_t <S2SV_ModEnd> strlen ( int <S2SV_ModStart> str ) ; <S2SV_ModEnd> return 0 ;,0
246,,0
247,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
248,<S2SV_ModStart> char * par <S2SV_ModEnd> ; if (,0
249,<S2SV_ModStart> } if (,0
250,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
251,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
252,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
253,<S2SV_ModStart> ; uint32_t width <S2SV_ModEnd> ; uint32_t,0
254,"<S2SV_ModStart>, NULL, NULL,",0
255,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( length",0
256,<S2SV_ModStart> bus ] ; <S2SV_ModEnd> return 0 ;,0
257,<S2SV_ModStart> ) ) ; msg -> msg_namelen = 0 ;,0
258,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
259,"<S2SV_ModStart> = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, 0 )",0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
261,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
262,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
263,,0
264,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ;,0
265,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
266,<S2SV_ModStart> else if ( bad_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,0
267,,0
268,,0
269,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
270,"<S2SV_ModStart> PERF_COUNT_SW_FAULTS, 1 <S2SV_ModEnd>, regs,",0
271,"<S2SV_ModStart> -> rc ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc!= X86EMUL_CONTINUE ) return rc",0
272,"<S2SV_ModStart> list. name, true",1
273,<S2SV_ModStart> ; if ( rq ->,0
274,<S2SV_ModStart> error = - EINVAL <S2SV_ModEnd> ; if (,0
275,,0
276,,0
277,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
278,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
279,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
280,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> == 0 ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,0
281,,1
282,<S2SV_ModStart> = 0 ;,0
283,<S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> = psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ) { <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> = psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += psf -> header. indx <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += psf -> header. indx <S2SV_ModStart> psf -> header. indx ; psf -> header. indx = psf -> header. indx ; psf -> header. indx ; psf -> header. indx = psf -> header. indx ; psf -> header. indx ; psf -> header. indx = psf -> header. indx ; psf -> header. indx ; psf -> header. indx = psf -> header. indx ; psf -> header. indx ; psf -> header. indx = psf -> header. indx ; psf -> header. indx,0
284,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
285,<S2SV_ModStart> ; if ( n < 0 ||,0
286,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
287,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
288,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
289,<S2SV_ModStart> ; # endif memset <S2SV_ModEnd> ( cpi ->,0
290,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
291,"<S2SV_ModStart> = 0 ; memset ( & ext4_size, 0, sizeof ( struct ext4_header ) ) ;",0
292,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
293,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
294,<S2SV_ModStart> ) break ; <S2SV_ModEnd> } if (,0
295,<S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; if (,0
296,<S2SV_ModStart> char * name <S2SV_ModEnd> ; if (,0
297,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ( server.,0
298,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
299,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
300,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
301,"<S2SV_ModStart> ; vpx_writer <S2SV_ModEnd> ( sf,",0
302,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
303,<S2SV_ModStart> = 0 ; size_t count = 0 ;,0
304,"<S2SV_ModStart> ( opt -> tot_len, opt <S2SV_ModEnd> ) ; }",0
305,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( sk ->,0
306,<S2SV_ModStart> sock ) ; sctp_null> <S2SV_null> <S2SV_null>,0
307,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
308,<S2SV_ModStart> task ) ; <S2SV_ModEnd> } <S2SV_null>,0
309,"<S2SV_ModStart> ; if ( safe_calloc <S2SV_ModEnd> ( filename,",0
310,"<S2SV_ModStart> ( interface, KSZ8851_ISR1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_ISR2SV_null> <S2SV_null> <S2SV_null>",0
311,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
312,"<S2SV_ModStart> NEED_IP ( t, <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, <S2SV_ModEnd> NEED_IP ( t, <S2SV_ModStart> NEED_IP ( t, <S2SV_ModEnd> 2, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, <S2SV_ModEnd> NEED_IP ( t, <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0, 0 <S2SV_ModStart> NEED_IP ( t, <S2SV_ModEnd> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0, 0 <S2SV_ModEnd> NEED_IP ( t, <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0",0
313,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ) ) { <S2SV_ModStart> - EINVAL ; } <S2SV_ModEnd> if (! <S2SV_ModStart> 0 ) { if (! ret ) return - EINVAL ; } <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } if (,0
314,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
315,<S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; } else,0
316,,0
317,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
318,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( e ;,0
319,"<S2SV_ModStart> ) ) ; memset ( str, 0, sizeof ( str ) ) ;",0
320,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> VP9_COMMON *,0
321,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; } exit_func :,0
322,,0
323,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_mv ; PREDICTION_mode_mode_mode_t <S2SV_ModEnd> best_mode_mode_mv = INTRA_MAX ; <S2SV_ModStart> best_mv = INTRA_MAX ; MACROBLOCKD * mb = INTRA_MAX ; MACROBLOCKD * const mb = & cpi -> mbias [ 0 ]. mbmi. mbmi. mb ; # if CONFIG_VP9_HIGHBITDEPTH # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH # if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH # if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( mode_,0
324,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; if (,0
325,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
326,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
327,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
328,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int archive_set_set_set_set_error ( & a -> archive, ARCHIVE_ERRNO_NO_ERM <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; if ( is_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FILE_NO_FILE ) ) { if ( archive_set_error ( & a -> archive, ARCHIVE_ERM ) == ARCHIVE_ERRNO_NO_NO_NONE ) { archive_error ( & a -> archive, ARCHIVE_ERRNO_NO_NO_FILE_ERRNO_NO_FILE, ARCHIVE, ARCHIVE_ERRNO_NO_ERM ) ; return 0 ; } if ( archive_error ( archive, ARCHIVE_NO_ERM ) { archive_set_error ( & a -> archive, ARCHIVE_ERM ) ; } else { archive_set_error ( & a, ARCHIVE_NO_ERRNO_NO_NO_NO_FILE_NO_NO_",0
329,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int bh <S2SV_ModEnd> ; int bh <S2SV_ModStart> ; int offset <S2SV_ModEnd> ; int i_len <S2SV_ModStart> ; if ( inode -> bh <S2SV_ModEnd> ) goto out_error <S2SV_ModEnd> ; } if,0
330,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( lfm,",0
331,<S2SV_ModStart> fq ) ; fq -> fq = NULL ;,0
332,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
333,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
334,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
335,<S2SV_ModStart> * psize <S2SV_ModEnd> ; if (,0
336,"<S2SV_ModStart> ""`%s"", option",0
337,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( sk ->,0
338,<S2SV_ModStart> ; err = kfree (,0
339,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
340,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void,0
341,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
342,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
343,,0
344,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
345,<S2SV_ModStart> 1 ) { memcpy <S2SV_ModEnd> ( pbi ->,0
346,<S2SV_ModStart> NULL ) { quantum_info = ( QuantumInfo * ) NULL ;,0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> char * s ; if (! s ) { return NULL ; } char * p = NULL ; char * p ; char * p = NULL ; char * p ; char * p ; p = NULL ; p ; if (! s ) return NULL ; <S2SV_ModStart> ; } if (! p ) { PyErr_decode ( s ) ; return NULL ; } if (! p ) { PyErr_DECREF ( p ) ; } return NULL ; } if ( p ) { PyErr_DECREF ( p ) ; } return NULL ; } if ( p ) < 0 ) { PyErr_DECREF ( p ) ; } return NULL ; } return NULL ; } },0
348,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * cp <S2SV_ModStart> char * cp <S2SV_ModEnd> ; int copy_t <S2SV_ModStart> ; int64 <S2SV_ModEnd> ; int copy_t <S2SV_ModStart> = 0 ; if ( strchr <S2SV_ModEnd> ( buf, <S2SV_ModStart> )!= 0 <S2SV_ModEnd> ) { fprintf <S2SV_ModStart> ( stderr, stderr, stderr, stderr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( stderr, stderr, stderr, stderr <S2SV_ModEnd> ) ; }",0
349,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
350,"<S2SV_ModStart> * w, vpx_write_bit <S2SV_ModEnd> ( w,",0
351,"<S2SV_ModStart> } else { memset <S2SV_ModEnd> ( o2,",0
352,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_left,0
353,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } ps_dec ->,0
354,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
355,<S2SV_ModStart> = 0 ; err = 0 ;,0
356,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
357,<S2SV_ModStart> ( state ->,0
358,,0
359,<S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( applog <S2SV_ModStart> ) ) ; } <S2SV_ModStart> ) ) { applog_free ( applog ) ; <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> if ( applog,0
360,"<S2SV_ModStart> { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
361,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
362,<S2SV_ModStart> NULL ) { Py_RETURN_NONE <S2SV_ModEnd> ; } if,0
363,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( desc,0
364,"<S2SV_ModStart> ( arg, <S2SV_ModEnd> arg ) ; struct",0
365,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r )",0
366,<S2SV_ModStart> - EOPNOTSUPP ; return - EINVAL <S2SV_ModEnd> ; } if,0
367,<S2SV_ModStart> key ) ; <S2SV_ModEnd> } if (,0
368,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
369,,0
370,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
371,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } if (,0
372,"<S2SV_ModStart> int vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> int i, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> int i ; vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> int i ; vpx_writer <S2SV_ModEnd> ( w,",0
373,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> struct vpx_write_write_write_bit_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> data ) ; vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; vpx_write_bit <S2SV_ModEnd> ( wb,",0
374,<S2SV_ModStart> net * name <S2SV_ModEnd> ; if (,0
375,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) { ND_TCHECK2 ( ndo, 1 <S2SV_ModEnd> ) ; if",0
376,,0
377,,0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> i2SV_null> <S2SV_null> <S2SV_null>,0
379,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
380,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
381,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
382,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } if (,0
383,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
384,<S2SV_ModStart> } if ( strlen ( val ) < 0 ) { return - 1 ; } if (,0
385,"<S2SV_ModStart> ; size_t size ; ASSERT ( size < 0 ) { ASSERT ( size + 1 ) ; ASSERT ( size < 0 ) ; return 0 ; } if ( size < 0 ) { ASSERT ( size + 2 + 2 ) ; ASSERT ( buf + 2 ) ; ASSERT ( size <= 0 ) ; ASSERT ( buf + size + 2 ) ; ASSERT ( buf + 2, size + 2 ) ; } else { ASSERT ( buf + size >= size + 2 ) ; ASSERT ( size + 2 ) ; ASSERT ( buf + 2, size + 2 ) ; ASSERT ( size <= 0 ) ; }",0
386,"<S2SV_ModStart>, 1 ) <S2SV_ModEnd> ; if (",0
387,"<S2SV_ModStart> str ) { strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str ) ; strcpy <S2SV_ModEnd> ( str,",0
388,,1
389,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> input ) { status = MagickFalse <S2SV_ModEnd> ; exit ( <S2SV_ModStart> ) ; } status = MagickFalse ; if ( status == MagickFalse ) status = MagickFalse ; status = MagickFalse ; <S2SV_ModStart> ( void ) fclose ( status ) ; status = MagickFalse ; status = MagickFalse ; status = MagickFalse ; <S2SV_ModStart> ; } status = MagickFalse ; status = MagickFalse ; status = MagickFalse ;,0
390,,0
391,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
392,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
393,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
394,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
395,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
396,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
397,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
398,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
399,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
400,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ctx,0
401,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_int32,0
402,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
403,,0
404,<S2SV_ModStart> ; # endif # if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( i > UINT32_MAX / 4 ) { return ERROR_INVALIDDATA ; } # endif,0
405,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> write_literal <S2SV_ModEnd> ( wb,",0
406,<S2SV_ModStart> ; if ( st == NULL ) continue ; if (,0
407,,0
408,<S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> ) ) {,0
409,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ;,0
410,"<S2SV_ModStart> ( ResourceLimitError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; if",0
411,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
412,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> return vpx_set2SV_null> <S2SV_null> static vpx_log2SV_null> <S2SV_null>,0
413,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
414,,0
415,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
416,<S2SV_ModStart> 0 ; } <S2SV_ModEnd> if ( void,0
417,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
418,<S2SV_ModStart> ; if ( bytes == 0 || bytes == 0 ) return 0,0
419,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
420,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
421,<S2SV_ModStart> ; if ( <S2SV_ModEnd> == 0 ),0
422,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
423,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
424,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
425,,0
426,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> ucounts -> <S2SV_ModStart> = NULL ; if ( new -> count == NULL ) return 0 <S2SV_ModEnd> ; spin_unlock_irq (,0
427,"<S2SV_ModStart> * fmode_t fmode, fmode_t fmode <S2SV_ModStart> -> fmode, fmode <S2SV_ModEnd> ) ; if",0
428,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
429,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int64_null> <S2SV_null> <S2SV_null> static int64_null> <S2SV_ModEnd> int64_null> <S2SV_null>,0
430,,0
431,<S2SV_ModStart> ; return NULL <S2SV_ModEnd> ; if (,0
432,<S2SV_ModStart> void vpx_reader_reader <S2SV_ModEnd> * r ),0
433,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1,",0
434,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
435,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return 1 ;,0
436,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
437,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_set ) ;",0
438,<S2SV_ModStart> = 0 ; status = 0 ;,0
439,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
440,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> x5_null> <S2SV_null> <S2SV_null> static int i2S2SV_null> <S2SV_null>,0
441,<S2SV_ModStart> clips ) { <S2SV_ModEnd> return - EINVAL ;,0
442,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
443,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
444,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> out2SV_null> <S2SV_null> <S2SV_null>,0
445,,0
446,<S2SV_ModStart> ctx -> priv <S2SV_ModEnd> ; priv ->,0
447,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( cpi ->,0
448,<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ) { ctx,0
449,<S2SV_ModStart> = 0 ; if (!,0
450,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; } if,0
451,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd> ) & ENC28J60_MIREG <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC28J60_BUSY <S2SV_ModEnd> )!= 0",0
452,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
453,,0
454,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
455,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
456,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
457,,0
458,<S2SV_ModStart> ) ) { <S2SV_ModEnd> if (!,0
459,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
460,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; } if,0
461,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
462,"<S2SV_ModStart> ; vpx_reader <S2SV_ModEnd> ( sse,",0
463,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
464,"<S2SV_ModStart> ; } } if ( av_log ( AV_LOG_ERROR, ""Invalid <S2SV_blank> error\\n"" ) ) ; if (",0
465,,0
466,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> intra_y_y_y_y_stride <S2SV_ModEnd> ; int <S2SV_ModStart> int64_y_y_y_y_y_thresh <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> int i ; unsigned int increase_y_y_y_stride <S2SV_ModEnd> = 0 ; <S2SV_ModStart> int64_y_y_y_y_avg_y_y_y_y_y_y_stride ; unsigned int shift_y_y_y_y_y_y_y_stride = 0 ; uint8_y_y_y_y_y_y_y_y_stride = 0 ; uint8_y_y_y_y_y_y_y_y_stride = 0 ; uint8_y_y_y_y_stride = 0 ; uint16_y_y_y_y_y_y_y_stride_y_y_y_stride_y_stride ( shift_y_y_y_stride, mc_y_y_stride,",0
467,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
468,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",0
469,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
470,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
473,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
474,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
475,<S2SV_ModStart> AcquireQuantumMemory ( size_t <S2SV_ModEnd> ) ; if,0
476,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
477,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } ps_dec ->,0
478,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> u2S_null> <S2S_null>,0
479,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
480,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
481,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mbmi_high_frame ( tran_low_t, tran_low_t, tran_low_t <S2SV_ModEnd> ) ; const <S2SV_ModStart> ; const tran_low_t * const tran_low_t * const xd = xd -> plane [ 0 ] ; const xd -> plane [ 0 ] = 0 ; const int xd -> plane [ 0 ] = 0 ; const int64_t fd = 0 ; tran_low_t fd -> plane [ 0 ] = 0 ; const int64_t fd = 0 ; rd -> plane [ 0 ] = 0 ; const int64_t best_high_thresh = 0 ; const int64_thresh = 0 ; tran_low_low_t fd = 0 ; const int64_t fd = 0 ; const int64_t fd = 0 ; tran_low_low_t fd = 0 ; rd -> plane [ 0 ] ; const int64_thresh = 0 ; tran_low_low_low_",0
482,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( src,",0
483,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> row = 0,0
484,,0
485,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr,0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
487,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
488,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> k2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
489,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
490,<S2SV_ModStart> char * name <S2SV_ModEnd> ; if (,0
491,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
492,,0
493,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
494,<S2SV_ModStart> chunk = 0 <S2SV_ModEnd> ; if (,0
495,"<S2SV_ModStart> ) ) { mutt_empty ( adata -> conn, NULL <S2SV_ModEnd> ) ; }",0
496,<S2SV_ModStart> crypto_report_kncpy <S2SV_ModEnd> ; if (,0
497,,0
498,"<S2SV_ModStart>, & rlen, 0",1
499,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> 2SV_null>,0
500,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
501,,0
502,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
503,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
504,<S2SV_ModStart> key ) ; <S2SV_ModEnd> } if (,0
505,"<S2SV_ModStart> char * authctxt = NULL <S2SV_ModStart> NULL ; } if (! authctxt -> authctxt -> authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> invalid <S2SV_blank> invalid <S2SV_blank> auth\\n"", __func__, __func__ ) ; goto done ; } if ( authctxt -> authctxt -> authctxt -> user == NULL || authctxt -> authctxt -> authctxt -> user == NULL ) { r = NULL ; goto out ; } <S2SV_ModStart> NULL ; } if (! authctxt -> valid || authctxt -> authctxt -> user == NULL || authctxt -> authctxt -> user == NULL || authctype == NULL ) { debug2 ( ""%s: <S2SV_blank> invalid <S2SV_blank> invalid <S2SV_blank> %s"", __func__, __func__, __func__, __func__ ) ; goto out ; }",0
506,<S2SV_ModStart> ; uint32_t chan_chunk = 0,0
507,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( CHECKOVERFLOW, 8 ) ) { exif_log ( CHECKOVERFLOW, ""Exif_log <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( CHECKOVERFLOW, buf_size, 8 ) ) { exif_log ( CHECKOVERFLOW, EXIF_LOG, ""Short <S2SV_blank> MakerNote"" ) ; break ; } else { exif_log ( buf, EXIF_LOG_CORRUPTEE_CORRUPT_CORRUPTOO, EXIF_LOG_CODE_CORRUPTOO, ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. order = exif_log ( buf + 2, EXIF_LOG_ERROR, EXIF_CODE_CODE_LOG_DEBUG, ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( buf_get_short ( buf + 4 ) ) { exif_get_short ( buf, EXIF_get_short ( buf, EXIF_LOG_CODE_LOG_CORRNO_CORR",0
508,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
509,<S2SV_ModStart> nx ; size_t <S2SV_ModEnd> buf + 4,0
510,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr,0
511,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
512,"<S2SV_ModStart> ( ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
513,<S2SV_ModStart> SV_null> <S2SV_null> <S2SV_null> static,0
514,<S2SV_ModStart> ; # endif # if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( i > UINT32_MAX / 4 ) { return ERROR_INVALIDDATA ; } # endif,0
515,,0
516,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
517,<S2SV_ModStart> ; if ( bytes_size > 0,0
518,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ; int ret = 0 <S2SV_ModEnd> ; int ret <S2SV_ModStart> ; int ret = <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( ret,0
519,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } if (,0
520,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
521,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
522,,0
523,"<S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row ) { VP9Encoder_COMMON * const xd = & xd -> mi_col ; MACROBLOCKD * const xd = & x -> mi_row, mi_row, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, 0, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, xd -> none_col, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 <S2SV_ModEnd> ) ; } <S2SV_ModStart>, mi_col ) ; vp9_col",0
525,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> len ) { ND_PRINT ( ( ndo, len ) ) ; if ( lmp_obj_obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( lmp_obj_obj_len < 4 ) { ND_PRINT ( ( ndo, "")"" ) ) ; return ; } if ( lmp_obj_obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ) ; return ; } if ( ndo!= 0 ) { ND_PRINT ( ( ndo, "")"" ) ) ; } if ( lmp_obj_tlen < 4 ) { ND_PRINT ( ( ( ( ndo, "")"" ) ) ) ) { ND_PRINT ( ( ( ( ndo, "")"" ) ) ) ) ; return ; }",0
526,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
527,<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ),0
528,<S2SV_ModStart> skb_err ) ; kfree_skb ( skb ) ;,0
529,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
530,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
531,<S2SV_ModStart> int fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 ) ) ; int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 ) ) ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 ) ) ),0
532,<S2SV_ModStart> ctx ) { memset <S2SV_ModEnd> ( ctx ->,0
533,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
534,<S2SV_ModStart> * ctx <S2SV_ModEnd> ; int i,0
535,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
536,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
537,<S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; if (,0
538,,0
539,<S2SV_ModStart> count ) ; if ( count > UINT32_MAX ) return - EINVAL ;,0
540,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> printk2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
541,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
542,<S2SV_ModStart> opt_free ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np ) ; <S2SV_ModStart> opt ) ; opt = rcu_read_unlock ( ) ; opt = rcu_dereference ( np -> opt ) ; } <S2SV_ModEnd> if ( opt,0
543,<S2SV_ModStart> if ( skb <S2SV_ModEnd> && skb ->,0
544,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
545,<S2SV_ModStart> ; if ( opcode == NULL ) return ERROR ; if (,0
546,"<S2SV_ModStart> if (! js_doregexec ( J, <S2SV_ModEnd> re -> prog",1
547,<S2SV_ModStart> = seq ; <S2SV_ModEnd> if ( copied,0
548,<S2SV_ModStart> ; int ret = key_data_data <S2SV_ModEnd> ; if (,0
549,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
550,,0
551,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
552,"<S2SV_ModStart> expr_ty returns, string type_comment",0
553,"<S2SV_ModStart> param -> name, 0 <S2SV_ModEnd> ) ; int",0
554,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
555,,0
556,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
557,,0
558,"<S2SV_ModStart> & fl6, rcu_read_lock ( <S2SV_ModStart> sk ) ; rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> np -> opt ) ; rcu_read_unlock ( ) ;",0
559,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
560,<S2SV_ModStart> NULL ) { quantum_info = ( QuantumInfo * ) NULL ;,0
561,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
562,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> T <S2SV_ModEnd> m_du_len ( struct <S2SV_ModStart> m_len ) { bn_len = bn_len ; bn_len = bn_len ; bn_len = bn_len ; bn_len = bn_len ; bn_len = bn_len ; bn_len = bn_len ; bn_len = bn_len - 1 ; bn_len = bn_len ; bn_len = bn_len ; bn_len ( t ) ; bn_len = bn_len ; bn_len = bn_len ; bn_len = bn_len ; bn_len = bn_len ; bn_len = bn_len ; bn_len = bn_len ; bn_len = bn_len ; bn_len = bn_len ; bn_len = bn_len ; bn_len = bn_len ; bn_len = bn_len ; bn_len,0
563,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
564,<S2SV_ModStart> { rq = <S2SV_ModEnd> ctx -> tags,0
565,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
566,<S2SV_ModStart> cm ->,0
567,"<S2SV_ModStart> { if ( osStrchr <S2SV_ModEnd> ( token,",0
568,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( x ->,0
569,<S2SV_ModStart> return rc ; <S2SV_ModEnd> return 0 ;,0
570,"<S2SV_ModStart> = MagickFalse ; status = SetImageExtent ( image, image -> rows, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; }",0
571,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ) ),0
572,<S2SV_ModStart> = 0 ; ps_dec ->,0
573,"<S2SV_ModStart> int mptctl_getdevice ( MPT_ADAPTER * ioc, <S2SV_ModStart> int mpt_ioctl_ioctl_ioctl_ioctl_ioctl_ioctl <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; if (",0
574,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> * rq ) <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
577,"<S2SV_ModStart> NULL ; } if ( strlen ( argv ) == NULL ) { fprintf ( stderr, ""Error"" ) ; goto cleanup ; } if (",0
578,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( buf_size, 3 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( CHECKOVERFLOW, buf_size, buf_size, 8 ) ) { exif_log ( CHECKOVERFLOW, ""Exif_log <S2SV_blank> MakerNote"" ) ; return AVERFLOW ; } if ( CHECKOVERFLOW ( buf, buf_size, buf_size, 8 ) ) { exif_log ( CHECKOVERFLOW, EXIF_CORRNO_CORRNO_CORRUPTIF_CORRNO_CORRUPT_CORRNO_CORRNO_CORRUPTOO, ""Exif_CORRUPTMP"" ) ; break ; } else { exif_get_short ( buf, ""Exif_short"", ""Exif_short"" ) ; break ; } if ( buf + 4 ) { exif_get_short ( buf + exif_get_short ( buf, buf, EXIF_size, EXIF_CODE_LOG_CORRUPT_CORRNO_CORRNO_CORR",0
579,<S2SV_ModStart> char * name <S2SV_ModEnd> ; char *,0
580,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if (!,0
581,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
582,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> if ( i,0
583,,0
584,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info",0
585,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
586,"<S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd> ) ) ;",0
587,<S2SV_ModStart> = MagickFalse ; image -> rows = MagickFalse ;,0
588,"<S2SV_ModStart> ; memset ( & l, 0",0
589,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
590,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> char * <S2SV_ModStart> = 0 ; if ( strlen ( len, len, len, len ) ) ) return 0 ; <S2SV_ModStart> = 0 ; if (! str ) return 0 ; if (! strlen ( len, len, len, len ) ) ) return 0 ; <S2SV_ModEnd> return 0 ;",0
591,"<S2SV_ModStart> int tagval, struct stream packet",0
592,<S2SV_ModStart> = 0 ; mutex_lock ( & <S2SV_ModStart> ; mutex ) ; mutex_lock_unlock ( & <S2SV_ModEnd> ) ; mutex_unlock,0
593,,0
594,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct <S2SV_ModStart> struct ioc ( task <S2SV_ModEnd> ) ; struct <S2SV_ModStart> ; ioc = task <S2SV_ModEnd> ; task_unlock (,0
595,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",0
596,,0
597,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
598,,0
599,<S2SV_ModStart> = 0 ; int flags ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
600,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; if (,0
601,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
602,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
603,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char * cp <S2SV_ModStart> = '\\0' <S2SV_ModEnd> ; if ( <S2SV_ModStart> = '='' ; if ( * cp <S2SV_ModEnd> ) break ; <S2SV_ModStart> = '\\0' ; if ( * cp <S2SV_ModEnd> =='<S2SV_blank>'<S2SV_ModStart>') cp = ( * cp <S2SV_ModEnd>, '\\"" ) <S2SV_ModStart> = '\\' ; if ( cp <S2SV_ModEnd> =='<S2SV_blank>') <S2SV_ModStart> =' ; if ( cp ++ ) cp = ( * cp <S2SV_ModEnd> ) cp <S2SV_ModStart> = '\\0' ; if ( * cp ++ ) cp ++ ; if ( * cp ++ ) cp [ 0 ] == '\\0' ; if ( cp ++ ) cp [ 0 ] ='<S2SV_blank>'; if ( cp ++ ) cp ++ ] = '\\0' ; if ( cp ++ ] =='<S2SV_blank>'; if (! cp ++ ) cp ++ ) { if ( cp [ 0 ] == '\\0' ; } else if ( cp ++ ) cp ++ ) { if (! ( cp ++ ) cp [ 0 ] = ( * cp [ 0 ] == '\\0' ; } else if ( cp [ 0 ] == '",0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
605,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
606,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( x ->,0
607,<S2SV_ModStart> crypto_report_kncpy <S2SV_ModEnd> ; if (,0
608,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
609,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
610,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
611,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
612,"<S2SV_ModStart> ( interface, TEMP_FAILURE_RETRY <S2SV_ModEnd> ) ; }",0
613,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
614,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
615,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int mi_col_col_col_stride <S2SV_ModEnd> ( dst_col, <S2SV_ModStart> int mi_col_col, <S2SV_ModEnd>, int64_cols",0
616,<S2SV_ModStart> ( ctx ->,0
617,<S2SV_ModStart> = 0 ; ei -> i_inode = 0 ;,0
618,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null>,0
619,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
620,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm ) { vpx_wb_write_bit_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_bit_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_bit_bit_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_bit_literal <S2SV_ModEnd> ( wb,",0
621,<S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; },1
622,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
623,<S2SV_ModStart> ; if ( TYPE ( CHILD,0
624,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & cpi,0
625,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, ENC624J600_OK <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_EIR_ERR <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_EINVALID <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_EINVALID <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_EINVALID <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_EIRDPY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_EIR_RDPY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_RDPY <S2SV_ModEnd> ) ; }",0
626,,0
627,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
628,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
629,,0
630,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
631,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
632,<S2SV_ModStart> ; err = - EINVAL <S2SV_ModEnd> ; if (,0
633,<S2SV_ModStart> -> handle ; <S2SV_ModEnd> } <S2SV_null>,0
634,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static u_t <S2SV_ModEnd> int s ; <S2SV_ModStart> uint8_t * s ; if (! u_t * s ) return - 1 ; if ( len < 2 ) return - 1 ; <S2SV_ModStart> * s ; if ( len < 2 ) return ( * s ) return - 1 ; <S2SV_ModStart> ; if ( len < 2 ) return - 1 ; <S2SV_ModStart> * s ; <S2SV_ModEnd> if (! <S2SV_ModStart> + len <S2SV_ModEnd> ) return ( * <S2SV_ModStart> ) ) return - 1 <S2SV_ModEnd> ; } if,0
635,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
636,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, ENC28SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
637,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
638,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
639,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
640,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( index,0
641,<S2SV_ModStart> } if ( config -> fmode == NULL ||,0
642,,0
643,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
644,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
645,,0
646,,0
647,<S2SV_ModStart> ) ; goto out_entry <S2SV_ModEnd> ; } if,0
648,"<S2SV_ModStart> ( vpx_reader <S2SV_ModEnd> ( plane,",0
649,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row, MACROBLOCK_INFO * const x <S2SV_ModEnd>, MACROBLOCK_INFO * <S2SV_ModStart> cpi, x <S2SV_ModEnd>, x, <S2SV_ModStart>, mi_row, x <S2SV_ModEnd>, mi_row,",0
650,<S2SV_ModStart> = 0 ; # endif,0
651,<S2SV_ModStart> -> rows ; ( void ) rows ;,0
652,"<S2SV_ModStart> sizeof ( size, 0",0
653,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
654,"<S2SV_ModStart> ( ctx, <S2SV_ModEnd> va_list args )",0
655,<S2SV_ModStart> ) ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
656,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
657,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> 2SV_null> static <S2SV_ModStart> length ) { ND_TCHECK2 ( tptr [ 3 ], sizeof ( tptr [ 3 ] ) <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> len ) ) ; ND_PRINT ( tptr [ 3 ] <S2SV_ModEnd> ; ND_PRINT (",0
658,"<S2SV_ModStart> NULL, NULL <S2SV_ModEnd> ; if (",0
659,"<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( dst,",0
660,<S2SV_ModStart> ; if ( <S2SV_ModEnd> remaining + 4,0
661,<S2SV_ModStart> ) + 1 <S2SV_ModEnd> ; if (,0
662,<S2SV_ModStart> ; if ( info -> access == NULL ) return - EINVAL ; if (,0
663,"<S2SV_ModStart> size, 0",0
664,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; dev ->,0
665,<S2SV_ModStart> ; x ->,0
666,"<S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_EIR_EIR <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_EIR_EIR <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR_EIR <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd> ) ; }",0
667,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
668,"<S2SV_ModStart> ( ctx -> priv <S2SV_ModEnd>, ctx ->",0
669,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP9_COMP_COMP <S2SV_ModEnd> MACROBLOCKS2SV_null> <S2SV_null> <S2SV_ModEnd> intra_inter_interval <S2SV_ModStart> ; sf -> sf_interval <S2SV_ModEnd> ; sf -> <S2SV_ModStart> ; sf -> <S2SV_ModEnd> ; sf -> <S2SV_ModStart> ; sf -> <S2SV_ModEnd> ; sf_interval = <S2SV_ModStart> ; sf -> <S2SV_ModEnd> ; sf -> <S2SV_ModStart> ; sf -> <S2SV_ModEnd> ; sf_interval = <S2SV_ModStart> ; sf -> <S2SV_ModEnd> ; if (,0
670,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, 0 )",0
671,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
672,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
673,<S2SV_ModStart> char * n <S2SV_ModEnd> ; char *,0
674,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> v_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> v_null> static <S2SV_ModStart> int svc_null> <S2SV_null> static int <S2SV_ModStart> if ( svc_null> <S2SV_null> <S2SV_null> static uint8_null>,0
675,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
676,"<S2SV_ModStart> ] ) ; memset <S2SV_ModEnd> ( mb,",0
677,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
678,,1
679,,0
680,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModStart> ; int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> ) return 0,0
681,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( phdr,0
682,,0
683,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
684,<S2SV_ModStart> - ENOMEM ; goto out_free ; },0
685,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int rc -> avg_frame_frame_bandwidth <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; if ( cpi -> oxcf. avg_frame_bandwidth <S2SV_ModEnd> ) return <S2SV_ModStart> ; if ( cpi -> avg_frame_bandwidth <S2SV_ModEnd> ) return <S2SV_ModStart> ; } <S2SV_null> <S2SV_null>,0
686,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int r = vpx_read_literal <S2SV_ModEnd> ( r,",0
687,"<S2SV_ModStart> : # line 101 ""hex_grammar.y"" { yr_re_destroy ( * yyvaluep ) ; <S2SV_ModStart> } # line 1037 <S2SV_ModEnd> ""hex_grammar.c""hex_grammar.y"" { yr_destroy ( <S2SV_ModStart> } # line 1054 <S2SV_ModEnd> ""hex_grammar.y""hex_grammar.c""hex_grammar.y""hex_grammar.y""hex_grammar.y""hex_grammar.y"" { yr_destroy ( * yyvaluep ) ) ; <S2SV_ModStart> } # line 1054 <S2SV_ModEnd> ""hex_grammar.y""hex_grammar.y""hex_node_grammar.y"" { yr_re_destroy <S2SV_ModEnd> ""hex_destroy ( <S2SV_ModStart> } # line 1011 <S2SV_ModEnd> ""hex_destroy (",0
688,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> struct MACROBLOCK * <S2SV_ModStart> int mi_row, int mi_row, int mi_row, int mi_col, int mi_col, int mi_col, int mi_col, int mi_col, int mi_col, int mi_col, BLOCK_SIZE bsize, BLOCK_SIZE bsize, BLOCK_SIZE bsize, int64_8_8_OFFSET_8_8x8_8_8_8_8_8x8_8_8_8_8_t * const uint8_t * const uint8_t * const uint8_t * coeff = BLOCK_8_8_8_8_8_8_8_8_8_8_8_8_8_8_8_8_8_8_8_8_8_8_8_8_8_8_8_t * segment_idx8_idx8_id ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEP",0
689,,0
690,<S2SV_ModStart> shm_perm = shm_perm <S2SV_ModEnd> ; if (,0
691,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
692,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
693,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
694,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
695,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
696,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
697,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
698,<S2SV_ModStart> fq ) ; fq -> fq = NULL ;,0
699,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
700,<S2SV_ModStart> ( hval <S2SV_ModEnd> ) ; },0
701,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
702,<S2SV_ModStart> ( buf ) <S2SV_ModEnd> ; if (,0
703,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> read_table_table_table_table_table_table ( <S2SV_ModStart> table_table_table ) return 0 <S2SV_ModEnd> ; if (,0
704,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> const char *,0
705,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( seg,",0
706,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2SV_null> <S2SV_null> static inline_null> <S2SV_null>,0
707,,0
708,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> if ( context <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; } <S2SV_ModStart> += 4 ; if ( context -> pass > 0 && context -> posY >= context -> posY >= p -> posY && context -> posY >= p -> posY >= context -> posY ) { break ; } <S2SV_ModStart> += 4 ; } else { if ( context -> posY >= p -> posY >= context -> posY && context -> posY >= context -> posY >= context -> posY && context -> posY >= context -> posY >= context -> posY >= context -> posY ) { switch ( i -> posY ) { break ; } else { case 4 : context -> posY = i -> posY = i -> posY ; break ; break ; },0
709,<S2SV_ModStart> ; x ->,0
710,"<S2SV_ModStart> ; if ( cp <S2SV_ModEnd> ( cp,",0
711,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ""null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> log2SV_null> <S2SV_null>",0
712,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ip_idents_hashrnd_once ( net <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ipv4. ip_key <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ipv4. ip_key <S2SV_ModEnd>, sizeof ( <S2SV_ModStart>, sizeof ( net -> ipv4. ip_key <S2SV_ModEnd> ) ; net",0
713,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lineno, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_SetString ( tmp ) ; } else { PyErr_SetString ( obj, & tmp ) ; if ( tmp == NULL ) { return 1 ; } if ( tmp == NULL || tmp == NULL || tmp == NULL ) { PyErr_CLEAR ( tmp ) ; } else { Py_CLEAR ( tmp, & tmp ) ; } else { PyErr_CLEAR ( tmp ) ; } else { PyErr_CLEAR ( tmp ) ; } else { return 1 ; } if ( tmp == NULL || tmp == NULL ) { PyErr_CLEAR ( tmp ) ; } else { return 1 ; } else { PyErr_CLEAR ( tmp ) ; } else { if ( tmp == NULL || tmp == NULL || tmp == NULL || tmp == NULL ) { return 1 ; } else { Py_CLEAR ( tmp ) ; } else { Py_CLEAR ( tmp ) ; } else { Py_CLEAR ( tmp ) ; }",0
714,"<S2SV_ModStart> void vpx_writer <S2SV_ModEnd> * w,",0
715,,0
716,<S2SV_ModStart> ; if ( err ) { err = - EINVAL ; goto err ; } if (,0
717,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
718,"<S2SV_ModStart> { gchar * name = g_assert0 ( strlen ( name, '\\0' ) ; if (! strcmp ( name, '\\0' ) ) { g_assert_error ( '\\0' ) ; return - 1 ; }",0
719,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModStart> _null> <S2SV_null> <S2SV_null> <S2SV_null>,0
720,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> cpi ) { const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const cm = & pbi -> common ; MACROBLOCKD * const cm = & pbi -> common ; <S2SV_ModStart> = 0 ; vpx_free ( cm ) ; <S2SV_ModStart> = 0 ; vpx_free ( cm ) ; <S2SV_ModStart> = 0 ; vpx_free ( cm -> frame_decode ) ; vpx_free ( cm -> frame_decode ) ; vpx_decode ) ; vpx_free ( cm -> frame_decode ) ; vpx_free ( pbi, cm -> frame_decode ) ; vpx_free ( cm -> frame_data ) ; vpx_decode ) ; vpx_free ( cm -> frame_decode ) ; vpx_free ( cm -> frame_decode ) ; vpx_free ( cm -> frame_decode ) ; vpx_free ( cm -> frame_",0
721,,0
722,<S2SV_ModStart> * opt ; struct ip_options_rcu <S2SV_ModEnd> * opt =,0
723,"<S2SV_ModStart> int i, vpx_tree_tree <S2SV_ModEnd> * tree,",0
724,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ; if ( ( ( vpx_codec_err_err_t <S2SV_ModEnd> ) { int <S2SV_ModStart> ; if ( ctx -> flags & VPX_IMG_FMT_HIGHBITDEPTH ) { if (! ( ctx -> flags & VPX_FMT_HIGHBITDEPTH ) ) return VPX_CODEC_ERROR ; } else { if ( ctx -> flags & VPX_CODEC_MAX_ERROR, ( ctx -> flags & VPX_IMG_FMT_FMT_HIGHBITDEPTH ) ) ; } else { if ( ctx -> flags & ( ctx -> flags & VPX_IMG_FMT_FMT_FMT_HIGHBITDEPTH ) { ctx -> flags = 0 ; } else { ctx -> flags = 0 ; } else { ctx -> frame_size = 0 ; } else { ctx -> flags & VPX_IMG_FMT_FALSE ; } else { VPX_CODEC_FALSE ; } else {",0
725,"<S2SV_ModStart>, & len, 0",1
726,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
727,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
728,<S2SV_ModStart> char * buf [ 0,0
729,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9_COMMON * const MACROBLOCK * const x <S2SV_ModStart> -> mb ; MACROBLOCKD * const x = & cpi -> mb ; MACROBLOCKD * const x -> mb ; MACROBLOCKD * const x -> mb = & cpi -> mb ; MACROBLOCKD * const x -> mb ; MACROBLOCKD * const x -> mb = & cpi -> mb ; MACROBLOCKD * const x -> mb = cpi -> mb ; <S2SV_ModStart> - mi_row_row_row, mi_row, mi_row, mi_row, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mb ) ; if ( cpi -> oxcf. mb_mode == 0 ) { if ( cpi -> oxcf. mb_mode == 0 && cpi -> mb_mode == KEY_FRAME && cpi -> none_FRAME && cpi ->",0
730,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr,0
731,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2SV_null> static BOOL <S2SV_ModEnd> if ( int <S2SV_ModStart> 0 ) { if ( CHECK_LOG_ERROR_ERROR_ERROR ( ctx, 0, 0, 0 ) ) return AVERROR_INVALID_INVALIDDATA ; } else { if ( ctx -> data_size > 0 ) { return AVERROR_INVALID_INVALID_INVALIDDATA ; } else { if ( ctx -> data_size > 0 ) { return AVERROR_INVALID_INVALID_INVALIDDATA ; } else { if ( ctx -> data_size > 0 ) { return AVERROR_INVALID_INVALID_INVALID_INVALID_INVALIDDATA ; } else { if ( ctx -> data_size > 0 ) { return AVERROR_INVALID_INVALID_INVALID_INVALIDDATA ; } <S2SV_ModStart> + 1 ; } else { if ( ctx -> data_size!= 0 ) { av_log2 ( g_log (",0
732,,0
733,"<S2SV_ModStart> { if ( osStrchr <S2SV_ModEnd> ( token,",0
734,<S2SV_ModStart> ; if (,0
735,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
736,"<S2SV_ModStart> ( r, <S2SV_ModEnd> return 0 ;",0
737,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
738,<S2SV_ModStart> if ( skb <S2SV_ModEnd> && skb ->,0
739,"<S2SV_ModStart> { int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, MSG_NOSIGNAL )",0
740,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
741,<S2SV_ModStart> ; int fd = safe_calloc <S2SV_ModEnd> ; if ( <S2SV_ModStart> } else { fd = open ( file ) ; fd = open ( O_NOFOLLOW | O_NOEXEC | O_NOEXEC | O_NOFOLLOW | O_NOEXEC | O_NOFOLLOW | O_NOFOLLOW | O_NOEXEC | O_NOFOLLOW | O_NOEXEC | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOCTTY <S2SV_ModEnd> ) ) ; if,0
742,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
743,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
744,<S2SV_ModStart> ) { memset <S2SV_ModEnd> ( cpi ->,0
745,<S2SV_ModStart> = dev ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ;,0
746,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct stream packet,0
747,<S2SV_ModStart> pbi ) ; memset <S2SV_ModEnd> ( pbi ->,0
748,<S2SV_ModStart> ( xWantedSize + <S2SV_ModEnd> ) ) {,0
749,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
750,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
751,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
752,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
753,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
754,"<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
755,"<S2SV_ModStart> = 0 ; state -> data [ 0 ] = 0xe ; state -> data [ 0 ] ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 0 ] = 0x80 ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 1 ] = 0xe ; state -> data [ 0 ] = 0x80 ; state -> data [ 0 ] = 0xe ; state -> data [ 0 ] = 0xe ; state -> data [ 0 ] = 0xe ; state -> data [ 0 ] = 0xe ; state -> data <S2SV_ModEnd> ; state -> <S2SV_ModStart> = 0x80 ; state -> data <S2SV_ModEnd> ( d, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> state -> data, state -> data <S2SV_ModEnd>, 1,",0
756,<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if (,0
757,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> struct vp9_null> static <S2SV_ModStart> int mi_row, vp9_row, vp9_set <S2SV_ModEnd>, mi_row, <S2SV_ModStart>, mi_row, vp8x8x8x8x8x8_row <S2SV_ModEnd>, mi_cols_cols_col, <S2SV_ModStart>, mi_cols_col_col, row <S2SV_ModEnd>, mi_cols_col, <S2SV_ModStart> uv_col ) ; vpredictor <S2SV_ModEnd> ( y_stride, <S2SV_ModStart>, y_stride, <S2SV_ModEnd>, y_stride, <S2SV_ModStart>, y_stride, <S2SV_ModStart>, mi_row, <S2SV_ModEnd> ) ; }",0
758,"<S2SV_ModStart> ; bufp = safe_calloc <S2SV_ModEnd> ( buf,",0
759,<S2SV_ModStart> * cJSON_CreateNumber <S2SV_ModEnd> * cJSON_CreateNumber,0
760,<S2SV_ModStart> ) ; goto error <S2SV_ModEnd> ; } switch,0
761,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
762,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
763,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> VP9_HIGHBITS2S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null> <S2SV_null> static VP9_null>,0
764,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> len - 1 ),0
765,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP9_COMP9_COMP * seg <S2SV_ModEnd> ; int seg <S2SV_ModStart> ; int seg = get_seg_seg <S2SV_ModEnd> ( seg, <S2SV_ModStart> ; if ( segfeature_ref_active <S2SV_ModEnd> ( seg, <S2SV_ModStart> ; if ( segfeature_active <S2SV_ModEnd> ( seg, <S2SV_ModStart> ; if ( segfeature_active <S2SV_ModEnd> ( seg, <S2SV_ModStart> ( seg, seg, seg_active <S2SV_ModEnd> * seg, <S2SV_ModStart> ; vp9_set <S2SV_ModEnd> ( seg,",0
766,,0
767,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
768,<S2SV_ModStart> = 0 ; ps_dec ->,0
769,<S2SV_ModStart> -> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock,0
770,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 ) ),0
771,<S2SV_ModStart> char * a <S2SV_ModEnd> * a =,0
772,,0
773,<S2SV_ModStart> ; if ( <S2SV_ModEnd> mutex ) return,0
774,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> S2SV_null> <S2SV_null> <S2SV_null> static struct s_null>,0
775,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> rcv2SV_null> int <S2SV_ModStart> rcv2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
776,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
777,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
778,<S2SV_ModStart> ( bp <S2SV_ModEnd> ) ) ;,0
779,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
780,"<S2SV_ModStart> int mptctl_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; int iocp",0
781,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static status = SetImageExtent ( image, image -> rows ) ; if ( status == MagickFalse ) { ThrowReaderException ( CorruptImageError, ""ImproperImageDataInFile"" ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
782,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
783,,0
784,<S2SV_ModStart> void vpx_read_bit <S2SV_ModEnd> ( r ),0
785,"<S2SV_ModStart> * tree, vpx_prob <S2SV_ModEnd> * probs,",0
786,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r )",0
787,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> v_codec_err ( VP9EncoderConfig <S2SV_ModStart> ; vpxEncoderConfig <S2SV_ModEnd> ; if (,0
788,<S2SV_ModStart> ) ) ; ND_TCHECK ( opt -> opt_len ) ;,0
789,,0
790,<S2SV_ModStart> ; if ( key_is_key <S2SV_ModEnd> ( key ->,0
791,<S2SV_ModStart> skb -> len < sizeof ( struct skb -> len,0
792,<S2SV_ModStart> = MagickFalse ; if ( status == MagickFalse ) break,0
793,<S2SV_ModStart> } if ( false,0
794,"<S2SV_ModStart> -> cac_id, serial -> len",0
795,<S2SV_ModStart> = 0 ; # endif,0
796,,0
797,,0
798,<S2SV_ModStart> ; buff = 0 <S2SV_ModEnd> ; if (,0
799,<S2SV_ModStart> = 0 ; dsize = 0 ;,0
800,<S2SV_ModStart> = 0 ; OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModEnd> ) ; OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ; if ( addrlen_t ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_t ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_EINVAL ) OE_RAISE_ERRNO ( OE_EINVAL ) ;,0
801,,1
802,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
803,<S2SV_ModStart> final ) ; struct ipv6_txoptions * opt = rcu_dereference_protected ( opt ) ; <S2SV_ModStart> ; opt = rcu_read_unlock ( ) ; if (,0
804,<S2SV_ModStart> = 0 ; uint32_t val ; uint32_t val ; <S2SV_ModStart> 0 ; uint32_t val_size = 0 ; uint32_t aux = 0 ; <S2SV_ModStart> 0 ) { uint32_t val_size = 0 ; uint32_t val_size = 0 ; <S2SV_ModStart> 0 ) { uint32_t val_size = 0 ; <S2SV_ModStart> break ; } # if CONFIG_VP_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH # if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH # if CONFIG_HIGHBITDEPTH # if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH # if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH # if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( uint32_t )!= 0 ) { fd_errno = 0 ; goto invalid ; } <S2SV_ModStart> break ; } if ( uint32_t ) { uint8_tol ( uint32_t ) ; <S2SV_ModStart> if ( uint32_t ) { uint8_t ) { uint,0
805,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EIRR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( dm9000WriteReg ( DM9000_EIRR <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EIRR <S2SV_ModEnd> ) ; },0
806,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
807,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
808,<S2SV_ModStart> -> private = NULL <S2SV_ModEnd> ; private ->,0
809,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> size = 0,0
810,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int vpx_err_err_errno <S2SV_ModEnd> ; int bsize <S2SV_ModStart> ; int bsize_cost_cost_cost = 0 <S2SV_ModEnd> ; int <S2SV_ModStart> -> mb_cost ; if ( <S2SV_ModEnd> ( bsize <S2SV_null> <S2SV_null>,0
811,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; if (,0
812,<S2SV_ModStart> ; if ( obj ->,0
813,"<S2SV_ModStart> ( msg_sys <S2SV_ModEnd>, msg_sys ->",0
814,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
815,<S2SV_ModStart> ( b ) <S2SV_ModEnd> ; if (,0
816,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
817,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
818,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
