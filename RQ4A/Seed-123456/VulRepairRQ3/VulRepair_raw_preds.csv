,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr,0
2,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
3,<S2SV_ModStart> item ) { <S2SV_ModEnd> return array -> <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
4,"<S2SV_ModStart> u32 event_id, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",0
5,"<S2SV_ModStart> ) { char * buf = grub_malloc ( EXT2_BLOCK_SIZE ( data ) ) ; int i ; leaf = grub_ext4_find_leaf ( data, buf, ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks, fileblock ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( ext [ i ]. len ) ; i ++ ) { if ( file",0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> 8 ] ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 13 ] ; input [ 3 ] = in [ 3 ] + in [ 10 ] ; input [ 4 ] = in [ 5 ] + in [ 11 ] ; input [ 5 ] = in [ 4 ] + in [ 13 ] ; input [ 6 ] = in [ 7 ] + in [ 8 ] ; s0 = input [ 0 ] + input [ 7 ] ; s1 = input [ 1 ] + input [ 6 ] ; s2 = input [ 2 ] + input [ 4 ] ; s3 = input [ 3 ]",0
7,"<S2SV_ModStart> = 0 ; if ( cgc -> sense == NULL ) return - ENOMEM <S2SV_ModEnd> ; retry : <S2SV_ModStart> cgc -> sense, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { err = - EIO ; goto out ; } result = scsi_execute ( SDev, cgc -> cmd, cgc -> data_direction, cgc -> buffer, cgc -> buflen, cgc -> sense, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { err = - EIO ; goto out ; } result = scsi_execute ( SDev, cgc -> cmd, cgc -> data_direction, cgc -> buffer, cgc -> buflen, cgc -> sense, & sshdr, cgc -> buflen, cgc -> sense, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { err = - EIO ; goto out",0
8,"<S2SV_ModStart> ( get4 ( ) == 0x48454150 ) { # ifdef LIBRAW_LIBRARY_BUILD if ( imgdata. lens. makernotes. CameraMount == LIBRAW_MOUNT_FixedLens && imgdata. lens. makernotes. LensMount == LIBRAW_MOUNT_FixedLens ) imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; } else { # ifdef LIBRAW_LIBRARY_BUILD if ( imgdata. lens. makernotes. CameraMount == LIBRAW_MOUNT_FixedLens && imgdata. lens. makernotes. LensMount == LIBRAW_MOUNT_FixedLens ) imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif",0
9,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> partial_frame ) { VP9_COMMON * const cm = & cpi -> common ; struct loopfilter * const lf = & cm -> lf ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int filter_step = clamp ( lf -> filter_level, min_filter_level, max_filter_level )",0
10,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
11,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write_token <S2SV_ModEnd> ( w, <S2SV_ModStart> i ] ) ; vpx_write_token <S2SV_ModEnd> ( w, <S2SV_ModStart> i ] ) ; vpx_write_token <S2SV_ModEnd> ( w,",0
12,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
13,"<S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, "" <S2SV_blank> "" ) ) ; if ( length < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; print_string ( ndo, ( const u_char * ) ptr, length - 5 ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; print_string ( ndo, ( const u_char * ) ptr, length - 5 ) ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
14,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; if ( dest_keyring ) { key_get ( dest_keyring ) ; } else { switch ( cred -> jit_keyring ) { case KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : if ( cred -> request_key_auth ) dest_keyring = cred -> request_key_auth ; up_read ( & authkey -> sem ) ; if ( dest_keyring ) dest_keyring = key_get ( authkey -> dest_keyring ) ; up_read ( & authkey -> sem ) ; if ( dest_keyring ) dest_keyring = key_get ( authkey -> dest_keyring ) ; break ; } case KEY_REQKEY_DEFL_THREAD_KEYRING : if ( cred -> thread_key_auth ) dest_keyring = cred -> thread_key_auth ; if ( dest_keyring ) dest_keyring = key_get ( cred -> thread_key_auth ) ; if,0
15,<S2SV_ModStart> = create_spnego_ctx ( 0,0
16,"<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return <S2SV_ModStart> - EINVAL ; ret = - EINVAL ; if ( addr -> l2tp_family!= AF_INET <S2SV_ModEnd> ) return - <S2SV_ModStart> ; lock_sock ( sk ) ; if ( sk -> sk_state!= TCP_CLOSE || addr_len < sizeof ( struct sockaddr_l2tpip ) ) goto out ; ret = - EADDRINUSE ; read_lock_bh ( & l2tp_ip_lock ) ; if ( __l2tp_ip_bind_lookup ( net, addr -> l2tp_addr. s_addr, sk -> sk_bound_dev_if, addr -> l2tp_conn_id ) ) goto out ; ret = - EADDRINUSE ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_LOCAL && chk_addr_ret!= RTN_MULTICAST || chk_addr_ret == RTN_BROADCAST ) goto out ; if ( addr -> l2tp_addr. s_addr ) inet -> inet_rcv_saddr",0
17,<S2SV_ModStart> ; tm = g_tm_localtime <S2SV_ModEnd> ( & t,0
18,"<S2SV_ModStart> strlen ( password ) ) ; if ( type == PW_OLD_PASSWORD ) { add_attribute ( request, PW_PASSWORD, hashed, length ) ; }",0
19,"<S2SV_ModStart> || e == NULL ) { * errnop = ENOMEM ; return NSS_STATUS_INVALID_PARAMETER ; } r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) { * errnop = ENOMEM ; return NSS_STATUS_INVALID_PARAMETER ; } r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) goto not_found ; r = sd_bus_call_method ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) goto not_found ; r = sd_bus_message_read ( reply, ""u"", & mapped ) ; if ( r < 0 ) goto not",0
20,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode,",0
21,"<S2SV_ModStart> ; select ( reader -> bytes_available_fd, & read_fds, NULL, NULL, & timeout ) ; if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_ZERO ( & read_fds ) ; FD_SET ( reader -> bytes_available_fd, & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ; } if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_f",0
22,"<S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { const FIRSTPASS_STATS * const <S2SV_ModEnd> position = twopass <S2SV_ModStart> ; if ( frame_interval < MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 ) { int j ; const FIRSTPASS_STATS * const <S2SV_ModEnd> position = twopass <S2SV_ModStart> twopass -> stats_in ; const FIRSTPASS_STATS tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; } <S2SV_ModEnd> reset_fpf_position ( twopass <S2SV_ModStart> } return trans_to_still <S2SV_ModEnd> ; } <S2SV_null>",0
23,"<S2SV_ModStart> return ret ; ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" ""on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; } if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten <S2SV_blank> extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" ""on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; }",0
24,"<S2SV_ModStart> alg ) { if (! capable ( CAP_SYS_MODULE ) ) return ERR_PTR ( - EPERM ) ; <S2SV_ModStart>, name ) ; if (! capable ( CAP_SYS_MODULE ) ) return ERR_PTR ( - EPERM ) ; if (! <S2SV_ModStart> ( ""%s-all"", name ) ; if (! capable ( CAP_SYS_MODULE ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_MODULE ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_MODULE ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_MODULE ) ) return ERR_PTR ( - EPERM ) ; if (! request_module ( ""%s-all"", name ) ; if (! capable ( CAP_SYS_MODULE ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_MODULE ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_MODULE ) ) return ERR_PTR ( - EPERM )",0
25,"<S2SV_ModStart> = GIT_PKT_NG ; ptr = line ; if (! ( ptr = strchr ( line,'<S2SV_blank>') ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> ref [ len ] = '\\0' ; line = ptr + 1 ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> ref [ len ] = '\\0' ; line = ptr + 1 ; if (! ( ptr = strchr ( line, '\\t' ) ) ) goto out_err ;",0
26,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read <S2SV_blank> negotiation <S2SV_blank> request"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read <S2SV_blank> negotiation <S2SV_blank> request"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FINAL ; return ;",0
27,<S2SV_ModStart> = 0 ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> = 0 ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> = 0 ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> = 0 ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> = 0 ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> = 0 ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> = 0 ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> = 0 ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> = 0 ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> = 0 ; if ( avio_fe,0
28,"<S2SV_ModStart> 1 ; } ret = __mount_entry_on_generic ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount <S2SV_blank> entry <S2SV_blank> not <S2SV_blank> found"" ) ; return - 1 ; }",0
29,<S2SV_ModStart> - ENODEV ; io -> inputb = intf_mem_inb ; io -> outputb = intf_mem_outb ; io -> inputb = intf_mem_inw ; io -> outputb = intf_mem_outw ; io -> outputb = intf_mem_outl ; io -> <S2SV_ModStart> EIO ; } io -> inputb = intf_mem_inb ; io -> outputb = intf_mem_outb ; io -> inputb = intf_mem_inb ; io -> inputb = intf_mem_inw ; io -> outputb = intf_mem_outw ; io -> outputb = intf_mem_inl ; io -> outputb = intf_mem_outl ; io -> inputb = intf_mem_inl ; io -> outputb = intf_mem_inl ; io -> outputb = intf_mem_inl ; io -> inputb = intf_mem_inl ; io -> outputb = intf_mem_inl ; io -> inputb = intf_mem_inl ; io -> outputb = intf_mem_outl ; io -> inputb = intf_mem_inl ; io,0
30,"<S2SV_ModStart> : { result = ( MagickRealType ) SetMagickSize ( random_info, <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( size_t ) SetMagickSize ( random_info, <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( size_t ) SetMagickSize ( random_info, <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( size_t ) SetMagickSize ( random_info, <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( size_t ) SetMagickSize ( random_info, <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) SetMagickSize ( random_info, <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( size_t ) SetMagickSize ( random_info, <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( size_t ) SetMagickSize ( random_info, <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( size_t ) SetMagickSize ( random_info, <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( size_t ) SetMagickSize ( random_info, <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( size_t ) SetMagickSize ( random_info, <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( size_t ) SetMagickSize ( random_info, <S2SV_ModEnd> (",0
31,"<S2SV_ModStart> ( LINK_KEY ) ) ; btif_config_set_bin ( bdstr, <S2SV_ModStart> ) ) ; btif_config_set_bin ( bdstr, <S2SV_ModStart> ) ) ; btif_config_flush ( ) ;",0
32,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if ( ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res,0
33,"<S2SV_ModStart> type_flags ) { struct packet_rollover * rollover = NULL ; <S2SV_ModStart> EINVAL ; } mutex_lock ( & fanout_mutex ) ; <S2SV_ModStart> return - EALREADY <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) { <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> atomic_long_set ( & rollover -> num, 0 ) ; atomic_long_set ( & rollover -> num_huge, 0 ) ; atomic_long_set ( & rollover -> num_failed, 0 ) ; } if ( type == PACKET_FANOUT_ROLLOVER || ( type_flags & PACKET_FANOUT_FLAG_ROLLOVER ) ) { rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) { rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) { rollover = kzalloc ( sizeof ( * rollover ), GFP_KERN",0
34,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
35,"<S2SV_ModStart> void show_progress ( int frame_in, int frame_out, uint64_t dx_time ) { if ( frame_in > frame_out ) fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time ) ; if ( frame_in > frame_out ) fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out ) ; else fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out ) ; if ( frame_in > frame_out ) fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in",0
36,"<S2SV_ModStart> ; if ( ChopBlanks ) { if ( imp_sth -> fetch_done ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } <S2SV_ModStart> fields ) { if ( imp_sth -> fetch_done ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } if ( imp_sth -> done_desc ) { if (! dbd_describe ( sth, imp_sth ) ) { do_error ( sth, JW_ERR_SEQUENCE, ""Error <S2SV_blank> while <S2SV_blank> describe <S2SV_blank> result <S2SV_blank> set."", NULL ) ; return Nullav ; } } <S2SV_ModStart> fields ) { if ( imp_sth -> fetch_done ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } if ( imp_sth -> done_desc ) { if (! dbd_describe ( sth, imp_sth ) ) { do_error ( sth, JW_ERR_SEQUENCE,",0
37,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteBuffer ( interface, buffer, offset ) ; enc28j60WriteBuffer ( interface, buffer, offset ) ; enc28j60WriteReg ( interface, ENC28J60_ETXNDL, LSB ( ENC28J60_TX_BUFFER_START + length ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXNDH, MSB ( ENC28J60_TX_BUFFER_START + length )",0
38,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end",0
39,"<S2SV_ModStart> ) ) { char * wikitext = http_request_get_query_string ( req ) ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""error"" ) ; http_response_send ( res ) ; return ; } <S2SV_ModStart> ) ) { char * wikitext = http_request_get_query_string ( req ) ; if ( page && ( access ( page, R_OK ) == 0 ) ) { file_write ( page, wikitext ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""error"" ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""error"" ) ; http_response_send ( res ) ; return ; } if ( page && ( unlink ( page ) > 0 ) ) { http_response_printf ( res, ""error"" ) ; http_response_send ( res )",0
40,"<S2SV_ModStart> low_var_thresh, int flag <S2SV_ModEnd> ) { double <S2SV_ModStart>.5 ) ; int mb_rows = source -> y_width >> 4 ; int mb_cols = source -> y_height >> 4 ; unsigned char * limits = cm -> pp_limits_buffer ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vp8_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_memset ( limits, ( unsigned char ) ppl, 16 * mb_cols ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vp8_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> u_stride, source -> u_stride, source -> u_stride, source -> u_stride, source -> u_width,",0
41,"<S2SV_ModStart> { ret = __copy_to_user <S2SV_ModEnd> ( param, <S2SV_ModStart> ) ) ; if ( ret ) return ret ; param += sizeof ( struct floppy_raw_cmd ) ; if ( ( ptr -> flags & FD_RAW_READ ) && ( ptr -> flags & FD_RAW_WRITE ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags &",0
42,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> ce = mb_cache_entry_alloc <S2SV_ModStart> gfp_nofs ) ; if (! ce ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } error = mb2_cache_entry_insert ( ext4_mb_cache, bh -> b_bdev, bh -> b_blocknr, hash ) ; if ( error ) { ea_bdebug ( bh, ""inserting <S2SV_blank> [%x]"", ( int ) hash ) ; ea_bdebug ( bh, ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; error = 0 ; } } else { ea_bdebug ( bh, ""inserting <S2SV_blank> [%x]"", ( int ) hash ) ; <S2SV_ModEnd> } } <S2SV_null> <S2SV_null>",0
43,"<S2SV_ModStart> ) ) ; if (! r_socket_http_answer ( s, code, rlen ) ) { eprintf ( ""HTTP/1.1 403 <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden",0
44,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int ip_options_get_from_user ( <S2SV_ModStart> int optlen ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( optlen && copy_from_user <S2SV_ModEnd> ( opt -> <S2SV_ModStart> __data, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } if ( copy_from_user ( opt -> __data, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } return ip_options_get_finish ( net, optp, opt, optlen ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
45,<S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
46,"<S2SV_ModStart> ) ) { # ifdef FEAT_GUI if ( gui. in_use ) errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( term_is_gui ( T_NAME ) ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else <S2SV_ModStart> ) ) { # ifdef FEAT_GUI if ( gui. in_use ) errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( term_is_gui ( T_NAME ) ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( set_termname ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E522: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> termcap"" ) ;",0
47,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
48,"<S2SV_ModStart> size_t size ; if ( width < 0 || height < 0 || hstep <= 0 || vstep <= 0 ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, tly, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) { goto error ; } if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size )",0
49,"<S2SV_ModStart> ; if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } <S2SV_ModStart> ; if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } <S2SV_ModStart> ; if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf",0
50,<S2SV_ModStart> || dp == 0 ) { if ( flags & FLAG_LAST_MATCHED ) { pc += asn1_op_lengths [ op ] ; flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; } if ( flags & FLAG_INDEFINITE_LENGTH ) { pc += asn1_op_lengths [ op ] ; flags &= ~ FLAG_INDEFINITE_LENGTH ; pc += asn1_op_lengths [ op ] ; } else { if ( flags & FLAG_MATCHED ) { pc += asn1_op_lengths [ op ] ; flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; } if ( flags & FLAG_INDEFINITE_LENGTH ) { pc += asn1_op_lengths [ op ] ; flags &= ~ FLAG_INDEFINITE_LENGTH ; pc += asn1_op_lengths [ op ] ; } else { if ( flags & FLAG_LAST_MATCHED ) { pc += asn1_op_lengths [ op ] ; flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [,0
51,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> acl_len ) { __be32 <S2SV_ModEnd> * savep ; <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> 0 ) goto out ; if ( ( status = decode_op_hdr ( xdr, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out ; if ( likely ( req -> rq_rcv_buf. len - hdrlen > attrlen ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %",0
52,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
53,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart>, & tok ) ; if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else if ( smatch ( group, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = groupToID ( group ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; } } if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = userToID ( owner ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; }",0
54,"<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER int number_aau ; if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = VPX_MALLOC_L ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ; # else number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = VPX_MALLOC_L ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ; # endif <S2SV_ModEnd> if ( addr",0
55,"<S2SV_ModStart> int res ; <S2SV_ModEnd> long long export_index_table <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) + 1 <S2SV_ModEnd> ] ; res <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) + 1 <S2SV_ModEnd> ] ; res <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ) ] ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } SQUASHFS_INSWAP_LOOKUP_BLOCKS (",0
56,"<S2SV_ModStart> } else { return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 ) ; }",0
57,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> & final ) ; rcu_read_unlock ( ) ;",0
58,"<S2SV_ModStart> = 0.0 ; uint32 nstrips = 0, ntiles = 0 ; uint16 <S2SV_ModEnd> planar = 0 <S2SV_ModStart> = 0 ; nstrips = 0 ; ntiles = 0 ; <S2SV_ModStart> = 0 ; if ( nstrips > 4 ) nstrips = 4 ; ntiles = 4 ; <S2SV_ModStart> = 0 ; if ( ntiles > 4 ) ntiles = 4 ; <S2SV_ModStart> = 0 ; if ( nstrips > 4 ) nstrips = 4 ; <S2SV_ModStart> = 0 ; if ( ntiles > 4 ) ntiles = 4 ; <S2SV_ModStart> = 0 ; if ( nstrips > 4 ) nstrips = 4 ; <S2SV_ModStart> = 0 ; if ( nstrips > 4 ) nstrips = 4 ; <S2SV_ModStart> = 0 ; if ( ntiles > 4 ) ntiles = 4 ; <S2SV_ModStart> = 0 ; if ( nstrips > 4 ) nstrips = 4 ; <S2SV_ModStart> = 0 ; if ( nstrips > 4 ) nstrips = 4 ; if ( ntiles > 4 ) ntiles = 4 ; <S2SV_ModStart> = 0 ; if ( nstrips > 4 ) nstrips = 4 ; if ( ntiles > 4 ) ntiles = 4 ; <S2SV_ModStart> = 0 ; if ( nstrips >",0
59,"<S2SV_ModStart> = 0 ; # if CONFIG_VP8_ENCODER if ( global -> codec -> name == ""vp8"" ) { ctrl_args = vp8_args ; ctrl_args_map = vp8_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp9"" ) ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif if ( strcmp ( global -> codec -> name, ""vp10"" ) == 0 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp11"" ) ) { ctrl_args = vp11_args ; ctrl_args_map = vp11_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp12"" ) == 0 ) { ctrl_args = vp12_args ; ctrl_args_map = vp12_arg_ctrl_map ; # endif } else if ( arg_match",0
60,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
61,"<S2SV_ModStart> = 0 ; memset ( EXT4_I ( inode ) -> i_data, 0, sizeof ( EXT4_I ( inode ) -> i_data ) ) ; <S2SV_ModStart> out ; } memset ( bh -> b_data + bh -> b_size, 0, sizeof ( bh -> b_data ) ) ; <S2SV_ModStart> out ; } if ( ext_depth ( inode ) ) neh = ext_block_hdr ( bh ) ; if ( ext_depth ( inode ) ) neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( inode, 0 ) ) ; else neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, 0 ) ) ; neh -> eh_magic = EXT4_EXT_MAGIC ; ext4_extent_block_csum_set ( inode, neh ) ; if ( ext_depth ( inode ) ) neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( inode, 0 ) ) ; else neh -> eh_max = cpu_to_le16 ( ext4_",0
62,"<S2SV_ModStart> 1 ; } s_log ( LOG_INFO, ""Certificate <S2SV_blank> verification <S2SV_blank> enabled"" ) ; return 1 ; } if ( verify_checks ( c, preverify_ok, callback_ctx ) ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } if ( c -> opt -> option. client || c -> opt -> protocol ) return 0 ; if ( c -> opt -> redirect_addr. names ) return 1 ; if (! verify_checks ( c, preverify_ok, callback_ctx ) ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } <S2SV_ModEnd> return 1 ;",0
63,"<S2SV_ModStart> ; if ( data_length < AT91_AES_BLOCK_SIZE_BYTE ) { rc = - EINVAL ; goto exit ; } if ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { rc = - EINVAL ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) goto exit ; } if ( at91_aes_cmac ( data_length, data, data, 0, key_size, cipher_key, iv ) ) goto exit ; if ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { rc = - EINVAL ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) goto exit ; if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) goto exit ;",0
64,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; s_alInputDevice = Cvar_Get ( ""s_alInputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alInputDevice = Cvar_Get ( ""s_alInputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_",0
65,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
66,"<S2SV_ModStart> cpi ) { # ifdef DISABLE_RC_LONG_TERM_MEM const uint64_t bits_used = cpi -> rc. this_frame_target ; # else const uint64_t bits_used = cpi -> rc. projected_frame_size ; # endif <S2SV_ModStart> ) ; } if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. kf_group_bits += cpi -> rc. this_frame_target - bits_used ; cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } else { cpi -> twopass. kf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; }",0
67,"<S2SV_ModStart> ( image ) ) ; if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) ) ; if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) ; do { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) ; } if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) ) ; if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) ; do { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) ; } if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; do { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( Cor",0
68,"<S2SV_ModStart> ; } endpoint = usbinterface -> altsetting + 1 ; dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""number <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_db",0
69,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart> seqlock ) ; nfs_set_open_stateid_locked <S2SV_ModEnd> ( state, <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",0
70,"<S2SV_ModStart> = NULL ; const <S2SV_ModStart> dir = ""/tmp"" ; if ( tmpname == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } else if ( ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> tmpname, dir ) ) == - 1 ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( TEMP_FAILURE_RETRY ( fd ) ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( TEMP_FAILURE_RETRY ( fd ) ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( TEMP_FAILURE_RETRY ( fd ) ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( TEMP_FAILURE_RETRY ( fd ) ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
71,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER ; <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER ; <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER ;,0
72,"<S2SV_ModStart> ) ) { if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ) ) { if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> } if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
73,"<S2SV_ModStart> void vp9_setup_dst_planes ( MACROBLOCKD * xd <S2SV_ModEnd>, const YV12_BUFFER_CONFIG <S2SV_ModStart> int mi_col ) { const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_x, pd -> subsampling_y ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
74,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { <S2SV_ModStart> ) ; } return 0 ; } <S2SV_ModStart> { switch ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { case 1 : ctxt -> _eip = ( u32 ) dst ; break ; case 2 : ctxt -> _eip = ( u16 ) dst ; break ; case 4 : ctxt -> _eip = ( u32 ) dst ; break ; default : WARN ( 1, ""unsupported <S2SV_blank> eip <S2SV_blank> assignment <S2SV_blank> size\\n"" ) ; } return 1 ; } return 0 ;",0
75,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
76,"<S2SV_ModStart> == READ ) { ssize_t ret ; <S2SV_ModStart> = ocfs2_get_block ; ret = __blockdev_direct_IO ( iocb, inode, file -> f_mapping -> host, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; } else { ret = __blockdev_direct_IO ( iocb, inode, file -> f_mapping -> host, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; }",0
77,"<S2SV_ModStart> if ( fscanf <S2SV_ModEnd> ( f, <S2SV_ModStart> def, strparm ) == 2 ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strparm [ len - 1 ] = 0 ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( strparm [ 1 ]",0
78,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> ; int kind ; <S2SV_ModStart> ; char * str ; PyObject * o, * fstring_name ; Py_ssize_t len ; Py_ssize_t i <S2SV_ModEnd> ; assert ( <S2SV_ModStart> expr_end == ':' ) ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = PyUnicode_GET_LENGTH ( o ) ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! Py_UNICODE_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } } if ( all_whitespace ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } len = expr_end - expr_start ; str = PyMem_RawMalloc ( len + 3 ) ; if (",0
79,<S2SV_ModStart> string ) { <S2SV_ModEnd> while ( c,0
80,"<S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>,",0
81,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE,0
82,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> val_h, val_l ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> val_l ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" )",0
83,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
84,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
85,"<S2SV_ModStart> int i ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; const int strides [ i ] = { src -> y_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_x, pd -> subsampling_y ) ; setup_pred_plane ( & pd -> pre [ idx ]",0
86,<S2SV_ModStart> ; lock_sock ( sk <S2SV_ModEnd> ) ; for,0
87,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
88,<S2SV_ModStart> ipmi_destroy_user ( user <S2SV_ModEnd> ) ; cleanup_srcu_struct,0
89,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen <S2SV_ModStart> + 1 ; size_t <S2SV_ModEnd> limit = 0,0
90,"<S2SV_ModStart> * for_ch ; if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } <S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 2 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, for_ch, Store ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( first, expression, NULL, is_async, c -> c_arena ) ; else comp = compre",0
91,"<S2SV_ModStart> NULL ; } for ( i = 0 ; i <= src -> curframe + 1 ; i ++ ) { free_func_state ( dst_state -> frame [ i ] ) ; dst_state -> frame [ i ] = NULL ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe + 1 ; i <= dst_state -> curframe + 1 ; i ++ ) { free_func_state ( dst_state -> frame [ i ] ) ; dst_state -> frame [ i ] = NULL ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe + 1 ; i <= dst_state -> curframe + 1 ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } dst_state -> frame [ i ] = dst ; } err = copy_func_state ( dst_state -> frame [ i ], src -> frame [ i ] ) ; if ( err ) return",0
92,"<S2SV_ModStart> void write_mb_modes_kf ( const <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> w ) { const VP9_COMMON * const cm = & cpi -> common ; const MACROBLOCKD * const xd = & cpi -> mb. e_mbd ; const <S2SV_ModStart> ; const MODE_INFO * const above_mi = xd -> above_available? mi_8x8 [ - xd -> mi_stride ] : NULL ; const MODE_INFO * const left_mi = xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ] ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_w = num_4",0
93,"<S2SV_ModStart> maxn ) SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ; switch ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : return decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME2 : decompileGOTOFRAME ( n, actions, maxn, 0 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_CALLFRAME : decompileCALLFRAME ( n, actions, maxn ) ; return 0 ; case SWFACTION",0
94,"<S2SV_ModStart> ) ) { ND_TCHECK_32BITS ( & prep -> pp_n ) ; <S2SV_ModStart> 1 ) ; } n = EXTRACT_32BITS ( & prep -> pp_n ) ; ps = ( const struct pgstate * ) ( prep + 1 ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", ps -> slot, ipaddr_string ( ndo, & ps -> page. p_sid ), EXTRACT_32BITS ( & ps -> page. p_uid ) ) ; ps = ( const struct pgstate * ) ( ps + 1 ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", ps -> slot, ipaddr_string ( ndo, & ps -> page. p_sid ), EXTRACT_32BITS ( & ps -> page. p_uid ) ) ) ; ps = ( const struct pgstate * ) ( ps + 1 ) ; while ( -- n >= 0 && ND_TTEST ( *",0
95,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
96,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return - 1 ; } <S2SV_ModStart> * * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return - 1 ; }",0
97,"<S2SV_ModStart> j ] ; memcpy ( u_in, ptr_hbe_txposer -> qmf_in_buf [ idx + TWICE_QMF_SYNTH_CHANNELS_NUM * sizeof ( FLOAT32 ) ) ; memcpy ( u_out, ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ], TWICE_QMF_SYNTH_CHANNELS_NUM * sizeof ( FLOAT32 ) ) ; memcpy ( u_in, ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ], sizeof ( FLOAT32 ) ) ; <S2SV_ModStart> j ] ; memcpy ( u_out, ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ], TWICE_QMF_SYNTH_CHANNELS_NUM * sizeof ( FLOAT32 ) ) ) ; memcpy ( u_out, ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ]",0
98,<S2SV_ModStart> -> dmin ; if ( p >= q ) { * low_prev = ( UChar * ) NULL ; * low = ( UChar * ) NULL ; * low = ( UChar * ) NULL ; * high = ( UChar * ) NULL ; * low = ( UChar * ) NULL ; * low = ( UChar * ) NULL ; * low = ( UChar * ) NULL ; * high = ( UChar * ) NULL ; * low_prev = ( UChar * ) NULL ; <S2SV_ModStart> -> dmin ; if ( p >= q ) { * low_prev = ( UChar * ) NULL ; * low = ( UChar * ) NULL ; * low = ( UChar * ) NULL ; * low = ( UChar * ) NULL ; * high = ( UChar * ) NULL ; * high = ( UChar * ) NULL ; * high = ( UChar * ) NULL ; * low = ( UChar * ) NULL ; * high = ( UChar * ) NULL ; <S2SV_ModStart> -> dmin ; if ( p >= q ) { * low_prev = ( UChar * ) NULL ; * low = ( UChar * ) NULL ; * high = ( UChar * ) NULL ;,0
99,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> struct bfq_data * bfq <S2SV_ModEnd> = bfqq -> <S2SV_ModStart> flags ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else goto schedule_dispatch ; spin_lock_irqsave ( & bfqd -> lock, flags ) ; bfq_clear_bfqq_wait_request ( bfqq ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else goto schedule_dispatch ; spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; return ;",0
100,,1
101,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
102,"<S2SV_ModStart> + x > ( Py_ssize_t ) <S2SV_ModStart> NULL ; } if ( diffPtr + x + diffBlockLength > ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( PyPtr + x ) ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } <S2SV_ModStart> x ) ; if ( diffPtr + x + diffBlockLength > ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( Py_ssize_t ) ( PyPtr + x ) ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos",0
103,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart>, fl6, rcu_dereference <S2SV_ModEnd> ( np -> <S2SV_ModStart> np -> tclass, rcu_dereference ( <S2SV_ModStart> np -> tclass, rcu_dereference ( <S2SV_ModStart> np -> tclass, rcu_dereference ( <S2SV_ModStart> np -> tclass, rcu_dereference ( <S2SV_ModStart> np -> tclass, rcu_dereference ( <S2SV_ModStart> np -> tclass )",0
104,"<S2SV_ModStart> MagickFalseType status ; status = SetImageExtent ( image, image_info -> columns, image_info -> rows ) ; status = SetImageExtent ( image, image_info -> columns, image_info -> rows ) ; status = SetImageExtent ( image, image_info -> rows ) ; if ( status == MagickFalseType ) { SetImageExtent ( image, image_info -> columns, image_info -> rows ) ; status = SetImageExtent ( image, image_info -> rows ) ; status = SetImageExtent ( image, image_info -> columns, image_info -> rows ) ; status = SetImageExtent ( image, image_info -> rows, image_info -> columns, image_info -> rows ) ; status = SetImageExtent ( image, image_info -> rows ) ; if ( status == MagickFalseType ) { SetImageExtent ( image, image_info -> columns, image_info -> rows ) ; status = SetImageExtent ( image, image_info -> rows ) ; status = SetImageExtent ( image, image_info -> columns, image_info -> rows ) ; status = SetImageExtent ( image, image_info -> columns, image_info ->",0
105,<S2SV_ModStart> ) pktnum ; if ( avio_feof ( s -> pb ) ) { goto end ; },0
106,"<S2SV_ModStart> data ) { # if CONFIG_VP9_HIGHBITDEPTH if ( data -> flags & VPX_CODEC_FLAG_HIGHBITDEPTH ) return encoder_common_init_high ( ctx, data -> flags & VPX_CODEC_FLAG_HIGHBITDEPTH ) ; # endif <S2SV_ModStart> ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( data -> flags & VPX_CODEC_FLAG_HIGHBITDEPTH ) return encoder_common_init_high ( ctx, data -> flags & VPX_CODEC_FLAG_HIGHBITDEPTH ) ; # if CONFIG_HIGHBITDEPTH if ( data -> flags & VPX_CODEC_FLAG_HIGHBITDEPTH ) return encoder_common_init_high ( ctx, data -> flags & VPX_CODEC_FLAG_HIGHBITDEPTH ) return encoder_common_init_high ( ctx, data -> flags & VPX_CODEC_FLAG_HIGHBITDEPTH ) ; return encoder_common_init_high ( ctx, data -> flags & VPX_CODEC_FLAG_HIGHBITDEPTH ) ; # endif",0
107,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
108,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
109,"<S2SV_ModStart> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ above -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], ref_frame_sign_bias ) ;",0
110,"<S2SV_ModStart> sll ) { memset ( msg -> msg_name, 0, sizeof ( * msg -> msg_name ) ) ; memset ( msg -> msg_namelen, 0, sizeof ( * msg -> msg_namelen ) ) ; msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; msg -> msg_namelen = sizeof ( * msg -> msg_namelen ) ; msg -> msg_namelen = sizeof ( * msg -> msg_namelen ) ; msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; msg -> msg_namelen = sizeof ( * msg -> msg_namelen ) ; msg -> msg_namelen = sizeof ( * msg -> msg_namelen ) ; msg -> msg_namelen = sizeof ( * msg -> msg_namelen ) ; msg -> msg_namelen = sizeof ( *",0
111,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
112,"<S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr <S2SV_ModEnd> ; __u32 serial <S2SV_ModStart> __u32 serial ; sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) addip ; <S2SV_ModStart> goto done ; addip = ( sctp_addip_chunk_t * ) addip ; chunk_len = ntohs ( addip -> chunk_hdr -> length ) - sizeof ( sctp_chunkhdr_t ) ; serial = ntohl ( addip -> serial ) ; length = ntohs ( addip -> p. length ) ; asconf_param = ( void * ) addip + length ; chunk_len -= length ; err_code = sctp_process_asconf_param ( asoc, asconf, addip ) ; if ( err_code!= SCTP_ERROR_NO_ERROR ) all_param_pass = 0 ; if (! all_param_pass ) sctp_add_asconf_response ( asconf_ack, addip -> crr_id,",0
113,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
114,<S2SV_ModStart> msicap ; pci_populate_msicap <S2SV_ModEnd> ( & msicap,0
115,"<S2SV_ModStart>!= psubscribeCommand ) { addReplyError ( c, ""only <S2SV_blank> (P)SUBSCRIBE <S2SV_blank> / <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> QUIT <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" )",0
116,"<S2SV_ModStart> vpx_codec_err_t res ; const vpx_codec_enc_cfg_t * old_cfg = cfg ; const vpx_codec_enc_cfg_t * new_cfg = & old_cfg ; const vpx_codec_enc_cfg_t * old_cfg = & old_cfg ; const vpx_codec_enc_cfg_t * new_cfg = & new_cfg ; const vpx_codec_enc_cfg_t * old_cfg ; if ( ( cfg -> g_w!= ctx -> cfg. g_w ) || ( cfg -> g_h!= ctx -> cfg. g_h ) ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w!= ctx -> cfg. g_w ) || ( cfg -> g_h!= ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w!= ctx -> cfg. g_w ) || ( cfg -> g_h!= ctx -> cfg. g_h ) ) ERROR ( """,0
117,"<S2SV_ModStart> cpi ) { vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi,",0
118,"<S2SV_ModStart> int rc ; unsigned long eip ; <S2SV_ModStart> 2 ) ; eip = get_segment_selector ( ctxt, VCPU_SREG_EIP <S2SV_ModEnd> ) ; memcpy <S2SV_ModStart> sel, VCPU_SREG_EIP <S2SV_ModEnd> ) ) return <S2SV_ModStart> return X86EMUL_CONTINUE ; rc = assign_eip_far ( ctxt, eip, ctxt -> src. val, ctxt -> src. len ) ; if ( rc!= X86EMUL_CONTINUE <S2SV_ModEnd> ) return rc <S2SV_ModStart> return X86EMUL_CONTINUE ; memcpy ( & ctxt -> _eip, eip, ctxt -> src. len - ctxt -> op_bytes ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; memcpy ( & ctxt -> _eip, eip, ctxt -> src. len - ctxt -> op_bytes ) ; ctxt -> src. val = old_cs ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_far ( ctxt, eip, ctxt -> src. len - ctxt -> op_bytes ) ; if ( rc!= X86EMUL_",0
119,"<S2SV_ModStart> info -> si_signo < 0 ) { info -> si_signo = sig ; return - EPERM ; } <S2SV_ModEnd> info -> si_code <S2SV_ModStart> >= 0 ) { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
120,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> size > ( u32 ) ptr -> size - 8 ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_TEXT, GF_LOG_TEXT, GF_LOG_TEXT, GF_LOG_TEXT, ptr -> size ) ; return GF_ISOM_INVALID_FILE ; } <S2SV_ModStart> - 8 ; if ( tmp_strsize > sizeof ( tmp_str ) ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_TEXT, GF_LOG_TEXT, GF_LOG_TEXT, GF_LOG_TEXT, GF_LOG_TEXT, GF_LOG_TEXT, GF_LOG_TEXT, GF_LOG_TEXT ) ; return GF_ISOM_INVALID_FILE ; } <S2SV_ModStart> - 8 ; if ( tmp_strsize > sizeof ( tmp_str ) ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_TEXT, GF_LOG_TEXT, GF_LOG_TEXT, GF_LOG_TEXT, GF",0
121,<S2SV_ModStart> = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> iface -> enc. caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> iface -> enc. caps & VPX_CODEC_CAP_GLOB_HDR ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> priv -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> priv -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> priv -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> priv -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC,0
122,"<S2SV_ModStart> <S2SV_null> <S2SV_null> void nfs4_state_set_mode_locked ( fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> { if ( fmode & ( FMODE_READ | FMODE_WRITE ) )!= ( state -> state & FMODE_READ ) ) { if ( ( state -> state & FMODE_WRITE )!= ( state -> state & FMODE_WRITE ) ) { if ( state -> state & FMODE_READ ) list_move ( & state -> open_states, & state -> owner -> so_states ) ; else list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } else { if ( ( state -> state & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( state -> state & FMODE_WRITE ) list_move ( & state -> open_states, & state -> owner -> so_states ) ; else list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } else list_move_tail ( & state -> open_states, & state -> owner",0
123,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataIn",0
124,"<S2SV_ModStart> 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; }",0
125,"<S2SV_ModStart> ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", i <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", i <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] )",0
126,"<S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( c -> format == CHUNKY ) avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; else if ( c -> format == CHUNKY ) avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; else if ( c -> format == CHUNKY ) avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; else if ( c -> format == CHUNKY ) avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; else if ( c -> format == CHUNKY ) avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; else if ( c -> format == CHUNKY ) avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; else if ( c -> format == CHUNKY ) avpriv_request_sample ( avctx,",0
127,"<S2SV_ModStart> 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( - 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( - 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( - 1 ) ; } <S2SV_ModStart> caplen - 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( - 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( - 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( - 1 ) ; }",0
128,"<S2SV_ModStart> { const char * name ; name = fdt_get_name ( fit, noffset, NULL ) ; if (! strcmp ( name, FIT_SIG_NODENAME ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; } else { puts ( ""+ <S2SV_blank> "" ) ; } } if ( noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } if ( noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } if ( noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; }",0
129,"<S2SV_ModStart> ; if ( cx23888_ir_rx_kfifo_alloc ( & state -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL ) ) { <S2SV_ModStart> - ENOMEM ; } <S2SV_ModStart> = dev ; state -> sd = & state -> sd ; v4l2_subdev_init ( sd, & cx23888_ir_controller_ops ) ; v4l2_set_subdevdata ( sd, state ) ; snprintf ( sd -> name, sizeof ( sd -> name ), ""%s/888-ir"", dev -> name ) ; sd -> grp_id = CX23885_HW_888_IR ; ret = cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_",0
130,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) && ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) && ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) && ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS",0
131,"<S2SV_ModStart> |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value &= ~ TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 )",0
132,"<S2SV_ModStart> ; ipc = rcu_dereference_protected ( icmp_param, sock_owned_by_user ( sk ) ) ; if ( ipc == NULL ) { icmp_param = rcu_dereference_protected ( ipc, sock_owned_by_user ( sk ) ) ; goto out ; } if ( code == ICMP_DEST_UNREACH ) ipc = rcu_dereference_protected ( ipc, sock_owned_by_user ( sk ) ) ; if ( code == ICMP_DEST_UNREACH ) ipc = rcu_dereference_protected ( ipc, sock_owned_by_user ( sk ) ) ; if ( code == ICMP_DEST_UNREACH ) ipc = rcu_dereference ( ipc ) ; if ( code == ICMP_DEST_UNREACH ) ipc = rcu_dereference_protected ( ipc, sock_owned_by_user ( sk ) ) ; if ( code == ICMP_DEST_UNREACH ) ipc = rcu_dereference_protected (",0
133,<S2SV_ModStart> = nlogs ; if ( unlikely ( headcount >= UIO_MAXIOV ) ) { r = - ENOBUFS ; goto err ; },0
134,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
135,<S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = V,0
136,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
137,<S2SV_ModStart> skb_is_nonlinear ( skb ) ) return 0 ; if ( skb -> len < sizeof ( struct nlattr,1
138,"<S2SV_ModStart> ; encode_share_access ( xdr <S2SV_ModEnd>, arg ->",0
139,"<S2SV_ModStart> = 0 ; if ( tile_buffsize < 0 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size"" ) ; exit ( - 1 ) ; } <S2SV_ModStart> = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buff",0
140,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; return 0 <S2SV_ModEnd> ; } switch <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null>",0
141,"<S2SV_ModStart> ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, & n <S2SV_ModStart>!= 2 ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if ( strcmp ( typestr, ""int"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""double"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""double"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""double"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""double"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank>",0
142,<S2SV_ModStart> case 0x06 : case 0x0a : case 0x0b : case 0x0c : case 0x0f : case 0x10 : case 0x11 : case 0x12 : case 0x13 : case 0x1a : case 0x0b : case 0x0c : case 0x1f : case 0x13 : case 0x1a : case 0x0b : case 0x0c : case 0x0f : case 0x10 : case 0x11 : case 0x11 : case 0x11 : case 0x11 : case 0x11 : case 0x12 : case 0x13 : case 0x14 : case 0x15 : case 0x16 : case 0x19 : case 0x1a : case 0x1b : case 0x1c : case 0x1f : case 0x1d : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x14 : case 0x15 : case 0x16 : case 0x17 : case 0x18 : case 0x19 : case 0x1e : case,0
143,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
144,"<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), EXTRACT_32BITS ( & lshp -> ls_seq ), lshp -> ls_length ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), EXTRACT_32BITS ( & lshp -> ls_seq ), EXTRACT_16BITS ( & lshp -> ls_age ), lshp -> ls_length ) ) ; }",0
145,<S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; obuf -> len = len ; opipe -> nrbufs ++ ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; if ( obuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * obuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; * obuf = * obuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; opipe -> nrbufs ++ ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; if ( obuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * obuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT,0
146,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, const",0
147,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd =,0
148,"<S2SV_ModStart> ; u64 msr_data, rdx <S2SV_ModEnd> ; int usermode <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; rdx <S2SV_ModEnd> = reg_read ( <S2SV_ModStart> VCPU_REGS_RDX ) ; rdx <S2SV_ModEnd> = * reg_read <S2SV_ModStart> VCPU_REGS_RSP ) = rdx <S2SV_ModEnd> ; * reg_write <S2SV_ModStart> VCPU_REGS_RSP ) = rdx <S2SV_ModEnd> ; * reg_write <S2SV_ModStart> VCPU_REGS_RSP ) = rdx <S2SV_ModEnd> ; * reg_write <S2SV_ModStart> VCPU_REGS_RSP ) = rdx <S2SV_ModEnd> ; * reg_write <S2SV_ModStart> VCPU_REGS_RSP ) = rdx <S2SV_ModEnd> ; * reg_write <S2SV_ModStart> VCPU_REGS_RSP ) = rdx <S2SV_ModEnd> ; * reg_write <S2SV_ModStart> VCPU_REGS_RSP ) = rdx <S2SV_ModEnd> ; * reg_write <S2SV_ModStart> VCPU_REGS_RSP ) = rdx <S2SV_ModEnd> ; * reg_write <S2SV_ModStart> VCPU_REGS_RSP ) = rdx <S2SV_ModEnd> ; * reg_write <S2SV_ModStart> VCPU_REGS_RSP ) = rdx <S2SV_ModEnd> ; * reg_write <S2SV_ModStart> VCPU_REGS_R",0
149,"<S2SV_ModStart> void cost ( vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> tree, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> c ) { vpx_tree <S2SV_ModEnd> * probs = <S2SV_ModStart> i / 2 ] ; int b ; for ( b = 0 ; b <= 1 ; ++ b ) { const int cc = c + vp9_cost_bit ( prob, b ) ; const vpx_tree_index ii = tree [ i + b ] ; if ( ii <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
150,"<S2SV_ModStart> write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",0
151,<S2SV_ModStart> & 0xffff ; if ( p + 4 + c > sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event_rec ) ) return - EINVAL ; if ( p + 4 + c > sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event_rec ) ) return - EINVAL ; if ( p + 4 + c > sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event_rec ) - sizeof ( event,0
152,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static tran_low_t <S2SV_ModEnd> fadst16 ( const <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> * output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t x0 = input [ 15 ] ; tran_high_t x1 = input [ 0 ] ; tran_high_t x2 = input [ 1 ] ; tran_high_t x3 = input [ 2 ] ; tran_high_t x4 = input [ 3 ] ; tran_high_t x5 = input [ 4 ] ; tran_high_t x6 = input [ 5 ] ; tran_high_t x7 = input [ 6 ] ; tran_high_t x8 = input [ 7 ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 10 ] ; tran_high_t <S2SV_ModEnd> x11 = input",0
153,<S2SV_ModStart> ; # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_NEON <S2SV_ModEnd> flags |= HAS_NEON <S2SV_ModStart> flags |= HAS_NEON <S2SV_ModEnd> ; # endif,0
154,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
155,"<S2SV_ModStart> tot_len ) ; rcu_assign_pointer ( opt2 -> opt, opt ) ;",0
156,<S2SV_ModStart> ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_WRITE_HOLD ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_WRITE_HOLD ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && list_empty ( & mnt -> mnt_expire ) ) mnt -> mnt. mnt_flags |= M,0
157,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( VP9_COMP <S2SV_ModStart> const tile, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mode_info <S2SV_ModEnd>, int * <S2SV_ModStart> BLOCK_SIZE bsize ) { <S2SV_ModEnd> const int mis <S2SV_ModStart> = num_8x8_blocks_wide_lookup [ mode_info -> mbmi. sb_type ] ; const int bs = num_8x8_blocks_high_lookup [ mode_info -> mbmi. sb_type ] ; const int hbs = num_8x8_blocks_high_lookup [ mode_info -> mbmi. sb_type ] ; if ( bw == bs && bh == bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count",0
158,<S2SV_ModStart> flags & CLIENT_CLOSE_AFTER_REPLY ) { c -> flags &= ~ CLIENT_CLOSE_AFTER_REPLY ; if (! c -> reqtype ) { c -> reqtype = PROTO_REQ_INLINE ; } else if ( c -> querybuf [ 0 ] == '*' ) { c -> reqtype = PROTO_REQ_MULTIBULK ; } else if ( c -> querybuf [ 0 ] == '*' ) { c -> reqtype = PROTO_REQ_INLINE ; } else if ( c -> querybuf [ 0 ] == '*' ) { c -> reqtype = PROTO_REQ_INLINE ; } else if ( c -> reqtype == PROTO_REQ_MULTIBULK ) { if ( processMultibulkBuffer ( c )!= C_OK ) break ; } else if ( c -> reqtype == PROTO_REQ_INLINE ) { if ( processInlineBuffer ( c )!= C_OK ) break ; } else if ( c -> reqtype == PROTO_REQ_MULTIBULK ) { if ( processMultibulkBuffer ( c )!= C_OK ) break ; } else if ( c -> reqtype == PROTO_,0
159,"<S2SV_ModStart> = 0 ; err = 0 ; if ( ( mpd -> b_state & ( 1 << BH_Mapped ) ) &&! ( mpd -> b_state & ( 1 << BH_Unwritten ) ) ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed"" ""for <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> at <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks <S2SV_blank> %zd\\n"", mpd -> inode -> i_ino, mpd -> b_blocknr ) ; mpd -> retval = err ; return err ; } if ( mpd -> b_state & ( 1 << BH_Mapped ) ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed"" ""for <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> at <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks <S2SV_blank> %zd\\n"", mpd -> inode -> i_ino ) ; mpd -> retval = err ; return err ; }",0
160,"<S2SV_ModStart> = 0 ; oe_addrinfo_data_t * p = NULL ; <S2SV_ModStart>, handle, & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & p -> ai_addrlen, NULL, & head, & tail <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart>, handle, & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & head, & tail <S2SV_ModEnd>, & canonnamelen <S2SV_ModStart>, handle, & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & p -> ai_addrlen, NULL, & tail, & head )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
161,"<S2SV_ModStart> = '\\0' ; token = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> = '\\0' ; token = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> = '\\0' ; token = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> = '\\0' ; token = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> = '\\0' ; token = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> = '\\0' ; token = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> = '\\0' ; token = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> = '\\0' ; if ( token [ osStrlen ( token ) - 1 ] == \'\\""\' ) token [ osStrlen ( token ) - 1 ] = '\\0' ; <S2SV_ModStart> = '\\0' ; token = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> = '\\0' ; if ( token [ osStrlen ( token ) - 1 ] == \'\\""\' ) token [ osStrlen ( token ) - 1 ] = '\\0' ; <S2SV_ModStart> = '\\0' ; token = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> = '\\0' ; if ( token [ osStrlen ( token ) - 1 ] == \'\\""\' ) token [ osStrlen ( token ) - 1 ] = '\\0'",0
162,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
163,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { int ret ; ret = usb_control_msg ( pegasus -> usb, 0, PEGASUS_REQ_SET_REGS, 0, indx, data, size, 100 ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
164,"<S2SV_ModStart> asdl_seq * body <S2SV_ModEnd>, PyArena * <S2SV_ModStart> body ; return ( mod_ty ) PyArena_Malloc ( arena, sizeof ( * p ) ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
165,"<S2SV_ModStart> * src, vpx_bit_depth_t bit_depth <S2SV_ModStart> >> 4 ; vpx_bit_depth_t bit_depth <S2SV_ModStart> ; # endif if ( ctx -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) return 1 ; ctx -> sz ++ ; buf = pop ( ctx, & ctx -> write_idx ) ; # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { for ( col = 0 ; col < mb_cols ; ++ col ) { if (! active_map [ col ] ) break ; } vp9_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; } active_map += mb_cols ; } } else { vp9_copy_and_extend_frame ( src, & buf -> img, row <<",0
166,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
167,"<S2SV_ModStart> if ( method == LPF_PICK_FROM_Q ) { const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; lf -> sharpness_level = clamp ( lf -> sharpness_level, min_filter_level, max_filter_level ) ; } else { const int q = vp9_ac_quant ( <S2SV_ModEnd> cm -> base_qindex <S2SV_ModStart> cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; lf -> sharpness_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
168,<S2SV_ModStart> } break ; case BTA_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; status = btif_storage_get_adapter_property ( & bdname ) ; if ( status == BT_STATUS_SUCCESS ) { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } if ( status == BT_STATUS_SUCCESS ) { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } # if defined ( BLE_INCLUDED ) && ( BLE_INCLUDED == TRUE ) ) BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_ENABLED ) ; # endif,0
169,"<S2SV_ModStart> int a = getnum <S2SV_ModEnd> ( fmt,",0
170,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image",0
171,<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_ERROR ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC,0
172,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int isofs_read_inode (,0
173,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank>",0
174,<S2SV_ModStart> self ) { if ( self -> dict ) <S2SV_ModEnd> Py_CLEAR ( self,0
175,"<S2SV_ModStart> ; for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; } a = cJSON_CreateArray ( ) ; for ( i = 0 ; a && i < count ; ++ i ) { cJSON * n = 0 ; if (! n ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] )",0
176,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == Py_None ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id",0
177,<S2SV_ModStart> EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&,0
178,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
179,"<S2SV_ModStart> qmode ) { RiffChunkHeader <S2SV_ModEnd> riffhdr ; DS64Chunk <S2SV_ModStart> DS64Chunk ds64_chunk ; JunkChunk junkchunk ; WaveHeader wavhdr ; uint32_t bcount ; int64_t total_data_bytes, total_riff_bytes ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples > 0x7ffff000 / ( bytes_per_sample * num_channels ) ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples > 0x7ffff000 / ( bytes_per_sample * num_channels ) ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples > 0",0
180,"<S2SV_ModStart> ( msg ) ; err = verify_compat_iovec <S2SV_ModEnd> ( msg_sys, <S2SV_ModStart> VERIFY_WRITE ) ; if ( err < 0 ) goto out_freeiov ; <S2SV_ModStart> msg_flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nosec : sock_recvmsg ) ( sock, msg ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nosec : sock_recvmsg ) ( sock, msg ) ; if ( err < 0 ) goto out_freeiov ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys ->",0
181,"<S2SV_ModStart> inode ) ; struct buffer_head * dibh = NULL <S2SV_ModStart> unsigned end_of_metadata = ( height + 1 ) >> inode -> i_blkbits <S2SV_ModEnd> ; int eob <S2SV_ModStart> end_of_metadata = ( height + 1 ) >> inode -> i_blkbits <S2SV_ModEnd> ; int state <S2SV_ModStart> ALLOC_DATA ; } dibh -> b_size = bh_map -> b_size ; if ( dibh -> b_size > bh_map -> b_size ) { dibh -> b_size = bh_map -> b_size ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; } else { dibh -> b_size = bh_map -> b_size ; if ( dibh -> b_size > bh_map -> b_size ) { dibh -> b_size = bh_map -> b_size ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; dibh -> b",0
182,<S2SV_ModStart> -> codec -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart>,0
183,"<S2SV_ModStart> ; if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } valueAVT = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( valueAVT == NULL ) valueAVT = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error",0
184,"<S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel",0
185,<S2SV_ModStart> msix_tab_size % 4096 <S2SV_ModEnd> == 0 ),0
186,"<S2SV_ModStart> if (! js_doregexec ( J, <S2SV_ModEnd> re -> prog",1
187,"<S2SV_ModStart> case OFreshOID : if (! caml_set_oo_id <S2SV_ModEnd> ( ( value <S2SV_ModStart> ) dest ) ) { caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; } if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; case OShift : * dest += sp -> arg ; if ( -- ( sp -> arg ) == 0 ) sp -- ; break ; case OReadItems : sp -> dest ++ ; if ( -- ( sp -> arg ) == 0 ) { * intern_dest = Make_header ( size, tag, intern_color ) ; * intern_dest += 1 + size ; if ( tag == Object_tag ) { * intern_dest = Make_header ( size, tag, intern_color ) ; * intern_dest += 1 + size ; } else { * intern_dest = Make_header ( size, tag, intern_color ) ; * intern_dest += 1 + size ; } else { * intern_dest = Make_header ( size, tag, intern_color ) ; * intern_dest",0
188,"<S2SV_ModStart> = FALSE ; if ( ksz8851ReadReg ( interface, KSZ8851_IER )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_IER, 0 ) ; } <S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_ISR ) ; if ( ( isr & ISR_LCIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, ISR_LCIS ) ; } if ( ( isr & ISR_TXIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, ISR_TXIS ) ; } if ( ( isr & ISR_RXIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, ISR_RXIS ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTx",0
189,"<S2SV_ModStart> void encode_quantization ( VP9EncoderConfig <S2SV_ModEnd> * cm, <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex, QINDEX_BITS ) ; write_delta_q ( wb, cm -> y_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_ac_delta_q ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
190,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> msglen ) ),0
191,"<S2SV_ModStart> ; if ( d2i_RSA_pubkey_bio ( rawcert, NULL ) ) { if ( d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) { if ( d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) { if ( d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) { if ( d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) { if ( d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( d2i",0
192,"<S2SV_ModStart> t1_getline ( ) ; if ( strcmp ( t1_buf_array, t1_line_array )!= 0 ) strcpy ( t1_buf_array, t1_line_array ) ; if ( strcmp ( t1_buf_array, t1_line_array )!= 0 ) strcpy ( t1_line_array, t1_buf_array ) ; if ( strcmp ( t1_buf_array, t1_line_array )!= 0 ) strcpy ( t1_line_array, t1_buf_array ) ; if ( strcmp ( t1_buf_array, t1_line_array )!= 0 ) strcpy ( t1_line_array, t1_buf_array ) ; if ( strcmp ( t1_buf_array, t1_line_array )!= 0 ) strcpy ( t1_line_array, t1_buf_array ) ; if ( strcmp ( t1_buf_array, t1_line_array )!= 0 ) strcpy ( t1_line_array, t1_buf_array ) ; t1_line_",0
193,"<S2SV_ModStart> BLOCK_SIZE bsize, int <S2SV_ModEnd> subsize ) { <S2SV_ModStart> int bsl = b_width_log2_lookup [ bsize ], hbs = ( 1 << bsl ) / 4 ; <S2SV_ModStart> case PARTITION_NONE : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; <S2SV_ModStart> case PARTITION_VERT : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; * ( xd -> mi [ 1 ] ) = get_block_context ( x, subsize ) -> mic ; <S2SV_ModStart> case PARTITION_HORZ : * get_sb_index ( x, subsize ) = 1 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> m",0
194,"<S2SV_ModStart> name ) ; if ( name == NULL ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ;",0
195,"<S2SV_ModStart> key_ref, KEY_NEED_READ ) ; if ( ret == 0 ) goto can_read_key ; if ( is_key_possessed ( key_ref ) ) { ret = - EOPNOTSUPP ; goto error2 ; } ret = key_permission ( key_ref, KEY_NEED_READ ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret",0
196,<S2SV_ModStart> u4_first_slice_in_pic ) { ps_dec_op -> u4_first_slice_in_pic = 1 ; ps_dec_op -> u4_first_slice_in_pic = 0 ; ps_dec_op -> u4_first_slice_in_pic = 1 ; } else if ( ps_dec_op -> u4_first_slice_in_pic == 1 ) { ps_dec_op -> u4_first_slice_in_pic = 1 ; } else if ( ps_dec_op -> u4_first_slice_in_pic == 1 ) { ps_dec_op -> u4_first_slice_in_pic = 0 ; ps_dec_op -> u4_first_slice_in_pic = 1 ; } else if ( ps_dec_op -> u4_first_slice_in_pic == 1 ) { ps_dec_op -> u4_first_slice_in_pic = 1 ; } else if ( ps_dec_op -> u4_first_slice_in_pic == 1 ) { ps_dec_op -> u4_first_slice,0
197,<S2SV_ModStart> = tnum_is_const ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_is_const ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_add ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_sub ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_sub ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_sub ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_sub ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_sub ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_sub ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_sub ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_sub ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_sub ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_sub ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_sub ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_sub ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_sub ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_sub ( <S2SV_ModEnd> dst_,0
198,"<S2SV_ModStart> ) ) { cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; cFYI ( 1, ""child <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", direntry -> d_inode ) ; cFYI ( 1, ""child <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", direntry -> d_name. name, direntry ) ; cFYI ( 1, ""child <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", direntry -> d_inode ) ; cFYI ( 1, ""child <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", direntry -> d_inode ) ; } else { cFYI ( 1, ""child <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", direntry -> d_name. name, direntry ) ; cFYI ( 1, ""child <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", direntry -> d_inode",0
199,"<S2SV_ModStart> ; if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) ) { if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) == NULL ) { if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) == NULL ) { if ( rcu_dereference_protected ( sk, sk -> sk_owned_by_user ( sk ) )!= sock_owned_by_user ( sk ) ) ) { if ( rcu_dereference_protected ( sk -> sk_owned_by_user ( sk ) ) == NULL ) { if ( rcu_dereference_protected ( sk -> sk_owned_by_user ( sk ) ) == NULL ) { if ( rcu_dereference_protected ( sk, sk -> sk_owned_by_user ( sk ) )!= sock_owned_by_user ( sk ) ) ) { if ( rcu_dereference_protected ( sk -> sk_owned_by",0
200,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> in += 4 ; if ( * in!= '=' ) { * out ++ = ( base64val ( digit1 ) << 4 ) | ( base64val ( digit2 ) >> 4 ) ; len ++ ; if ( digit3!= '=' ) { * out ++ = ( ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 2 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 4 ) ; len ++ ; } } else { * out ++ = ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 4 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit3 ) << 6 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; } else { * out ++ = ( base64val ( digit3 ),0
201,"<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> = get_svc_internal ( svc_ctx <S2SV_ModEnd> ) ; svc_log_reset <S2SV_ModStart> svc_ctx ) ; svc_log_reset <S2SV_ModEnd> ( svc_ctx ) <S2SV_ModStart> ""\\n"" ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> psnr_sum [ i ] ) ; for ( i = 0 ; i < si -> layers ; ++ i ) { number_of_frames = encode_frame_count ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank>",0
202,"<S2SV_ModStart> = new_cols ; if ( screen -> vt_buffer ) vterm_allocator_free ( screen -> vt, screen -> vt_buffer ) ; screen -> vt_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( new_cols > screen -> vt_buffer ) vterm_allocator_free ( screen -> vt, screen -> vt_buffer ) ; screen -> vt_buffer = vterm_allocator_malloc ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( new_cols > screen -> vt_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_alloc",0
203,<S2SV_ModStart> { const char * literal_start = * str ; const char * literal_end = * str ; int in_named_escape = 0 ; int result = 0 ; assert ( * literal == NULL ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == '\\\\' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str +,0
204,"<S2SV_ModStart> = create_dump_dir_from_problem_data ( pd <S2SV_ModEnd>, g_settings_dump_location )",0
205,<S2SV_ModStart> ; if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> height ) ) { if ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr -> width ),0
206,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
207,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mv_stride <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array",0
208,"<S2SV_ModStart> name ) { if ( IS_ERR ( name ) ) return ERR_CAST ( struct crypto_template, name ) ; if ( IS_ERR ( name ) ) return ERR_CAST ( struct crypto_template, name ) ; if (! try_then_request_module ( __crypto_lookup_template ( name ), ""%s"", name ) ) return ERR_CAST ( struct crypto_template, name ) ; if ( IS_ERR ( name ) ) return ERR_CAST ( struct crypto_template, name ) ; if ( IS_ERR ( name ) ) return ERR_CAST ( struct crypto_template, name ) ; if ( IS_ERR ( name ) ) return ERR_CAST ( struct crypto_template, name ) ; if (! IS_ERR ( name ) ) return ERR_CAST ( struct crypto_template, name ) ) return ERR_CAST ( struct crypto_template, name ) ; if ( IS_ERR ( name ) ) return ERR_CAST ( struct crypto_template, name ) ; if ( IS_ERR ( name ) ) return ERR_CAST ( struct crypto_template, name ) ; if ( IS_ERR ( name ) ) return ERR_CAST ( struct crypto_template,",0
209,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMMON <S2SV_ModStart> int mi_col ; const <S2SV_ModStart> * mi_8x8 = cm -> mi_grid_visible <S2SV_ModEnd> + idx_str ; <S2SV_ModStart> * prev_mi_8x8 = cm -> prev_mi_grid_visible <S2SV_ModEnd> + idx_str ; <S2SV_ModStart> BLOCK_SIZE bsize ; memset <S2SV_ModEnd> ( & cpi <S2SV_ModStart> -> sf. partition_search_type ) { case VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64, 1, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64, 1, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64 ) ; set_source_var_based_partition ( cpi",0
210,"<S2SV_ModStart> ; dh = skb_header_pointer <S2SV_ModEnd> ( skb,",0
211,"<S2SV_ModStart> = NULL ; const <S2SV_ModStart> dir = ""/tmp"" ; if ( tmpname == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } else if ( ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> tmpname, dir ) ) == - 1 ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( TEMP_FAILURE_RETRY ( fd ) ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( TEMP_FAILURE_RETRY ( fd ) ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( TEMP_FAILURE_RETRY ( fd ) ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( TEMP_FAILURE_RETRY ( fd ) ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
212,"<S2SV_ModStart> mnt ) ; if ( dentry -> d_inode -> i_op -> follow_link ) { dentry -> d_inode -> i_op -> follow_link ( dentry, nd ) ; error = PTR_ERR ( cookie ) ; if (! IS_ERR ( cookie ) ) { char * s = nd_get_link ( nd ) ; error = 0 ; if ( s ) error = __vfs_follow_link ( nd, s ) ; else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } }",0
213,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static u32 <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> * optp, u32 <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) opt -> __data [ <S2SV_ModEnd> optlen ++ ] <S2SV_ModStart> IPOPT_END ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } opt -> optlen = optlen ; if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( * optp ) ; * optp = opt ; return 0 ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( * optp ) ; * optp = opt ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
214,"<S2SV_ModStart> ; if ( connection == NULL || strcmp ( connection, ""close"" )!= 0 ) goto error ; else { bool found_upgrade = false ; double count = 0 ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; if ( count < 1 ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) goto error ; tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( count < 1 ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, ""Upgrade"" ) == 0 ) { sdsfreesplitres ( tokens, count ) ; break ; } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) goto error ;",0
215,"<S2SV_ModStart> * findalldevs_if ; <S2SV_ModEnd> if ( rpcapd_discard <S2SV_ModStart> ( pars -> sockctrl, plen ) == - 1 ) { return - 1 ; } if ( pcap_findalldevs ( & findalldevs_if, errmsgbuf ) == - 1 ) { if ( rpcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."", errbuf ) == - 1 ) { rpcapd_log ( LOGPRIO_ERROR, ""Send <S2SV_blank> to <S2SV_blank> client <S2SV_blank> failed: <S2SV_blank> %s"", errbuf ) ; return - 1 ; } return 0 ; } for ( d = alldevs ; d!= NULL ; d = d -> next ) { nif ++ ; if ( d -> description ) { if ( strlen ( d -> description ) ) { if ( strlen ( d -> name ) ) { if ( strlen ( d -> name ) ) { if ( strlen ( d -> name ) ) { if",0
216,"<S2SV_ModStart> struct dump_dir * dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } g_hash_table_remove ( problem_info, ""basename"" ) ; dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; goto error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } g_hash_table_remove ( problem_info, ""basename"" ) ; dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; goto error_msg_and_die ; }",0
217,"<S2SV_ModStart> image ) ; if ( ( image -> columns % 2 )!= 0 ) { index = ConstrainColormapIndex ( image, ( * p >> 6 ) & 0x3 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( image -> columns % 4 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 4 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( image -> columns % 4 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 4 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixel",0
218,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2 <S2SV_ModStart>, c3 ; r [ 0 ] = 0 ; c1 = 0 ; c2 = 0 ; c3 = 0 ; sqr_add_c ( a, 0, c1, c2 ) ; r [ 1 ] = c2 ; c2 = 0 ; sqr_add_c ( a, 2, 0, c1, c2 ) ; r [ 2 ] = c3 ; c3 = 0 ; sqr_add_c ( a, 3, 0, c1, c2 ) ; r [ 3 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 2, 0, c2, c3 ) ; r [ 4 ] = c2 ; c2 = 0 ; sqr_add_c ( a, 5, 0, c1, c2 ) ; r [ 5 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 6, 0, c1, c2 ) ; r [ 6 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 0, c1, c2,",0
219,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError,",0
220,"<S2SV_ModStart> = len ; if (! ND_TTEST2 ( bp [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> = len ; if (! ND_TTEST2 ( bp2 [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> = len ; if (! ND_TTEST2 ( bp2 [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> = len ; if (! ND_TTEST2 ( bp2 [ 0 ], len ) ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> = len ; if (! ND_TTEST2 ( bp2 [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> = len ; if (! ND_TTEST2 ( bp2 [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> = len ; if (! ND_TTEST2 ( bp2 [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> = len ; if (! ND_TTEST2 ( bp2 [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> = len ; if (! ND_TTEST2 ( bp2 [ 0 ], len ) ) goto trunc ;",0
221,<S2SV_ModStart>! dumpable && capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { rcu_read_unlock ( ) ; return - EPERM ; } } } else { if ( capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { rcu_read_unlock ( ) ; return - EPERM ; } } else { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { rcu_read_unlock ( ) ; return - EPERM ; } } },0
222,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
223,<S2SV_ModStart> case SEI_USER_DATA_REGISTERED_ITU_T_T36 : ps_parse -> s_sei_params. i4_sei_user_data_registrationed_ITU_t_t36 = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registrationed_ITU_t_t35 = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registrationed_ITU_t_T36 = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registration_ed_ITU_t_t36 = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registrationed_ITU_t_t35 = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registrationed_ITU_t_t35 = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registration_ed_ITU_t_t35 = 1 ; ps_,0
224,<S2SV_ModStart> ; if ( num_engines > SDMA_MAX_ENGINES ) num_engines = SDMA_MAX_ENGINES ; <S2SV_ModStart> ) ) ; if ( num_engines > SDMA_MAX_ENGINES ) num_engines = SDMA_MAX_ENGINES ; <S2SV_ModStart> ) ) ; if ( num_engines > SDMA_MAX_ENGINES ) num_engines = SDMA_MAX_ENGINES ; <S2SV_ModStart> ) ) ; if ( num_engines > SDMA_MAX_ENTRIES ) num_engines = SDMA_MAX_ENTRIES ; <S2SV_ModStart> ) ) ; if ( num_engines > SDMA_MAX_ENTRIES ) num_engines = SDMA_MAX_ENTRIES ; <S2SV_ModStart> ) ) ; if ( num_engines > SDMA_MAX_ENTRIES ) num_engines = SDMA_MAX_ENTRIES ; <S2SV_ModStart> ) ) ; if ( num_engines > SDMA_MAX_ENTRIES ) num_engines = SDMA_MAX_ENTRIES ; if ( num_engines > SDMA_MAX_ENTRIES ) num_engines = SDMA_,0
225,"<S2SV_ModStart> * info, myisam_table_name_t <S2SV_ModEnd> name, int <S2SV_ModStart> ) ) ; if ( param -> testflag & T_UNPACK ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; } else if ( param -> testflag & T_SILENT ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; if ( param -> testflag & T_SILENT ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; } else { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; }",0
226,"<S2SV_ModStart> == q || * p == '\\0' <S2SV_ModEnd> || size < <S2SV_ModStart> || size > ( size_t ) MAX_SIZES ) return ( DestroyImageList ( images ) ) ; p = q ; sizes [ i ++ ] = size ; while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) || ( * p == ',' ) ) ) p ++ ; if ( ( isspace ( ( int ) ( ( unsigned char ) ( ( unsigned char ) * p ) )!= 0 ) ) ) ) p ++ ; if ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) ) return ( DestroyImageList ( images ) ) ; p = q ; sizes [ i ++ ] = size ; while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) ) p ++ ; if ( ( isspace ( ( int ) ( ( unsigned char ) ( ( unsigned char ) * p ) )!= 0 ) ) ) p ++ ; if ( ( isspace ( ( int ) ( ( unsigned char ) ( ( unsigned char ) * p ) )!= 0 ) ) return ( DestroyImageList ( images ) ) ; if (",0
227,"<S2SV_ModStart> ) ; } if ( pcount > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ;",0
228,"<S2SV_ModStart> val ) ; if ( strcmp ( var, ""rspfile"" ) == 0 ) hasrspfile = true ; else if ( strcmp ( var, ""rspfile_content"" ) == 0 ) hasrspcontent = true ; else if ( strcmp ( var, ""command"" ) == 0 ) hascommand = true ; else if ( strcmp ( var, ""rspfile"" ) == 0 ) hasrspfile = true ; else if ( strcmp ( var, ""rspfile_content"" ) == 0 ) hasrspcontent = true ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile <S2SV_blank> content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rsp",0
229,"<S2SV_ModStart> case 'Q' : if ( 3 == b - c -> buf && 0 == strncmp ( ""GET"", c -> buf, 3 ) ) { method = AGOO_GET ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""POST"", c -> buf, 4 ) ) { method = AGOO_POST ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""GET"", c -> buf, 4 ) ) { method = AGOO_GET ; } else if ( 3 == b - c -> buf && 0 == strncmp ( ""PUT"", c -> buf, 4 ) ) { method = AGOO_PUT ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""POST"", c -> buf, 4 ) ) { method = AGOO_POST ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""PUT"", c -> buf, 4 ) ) { method = AGOO_PUT ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""POST"",",0
230,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> int i, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",1
231,"<S2SV_ModStart> error ) ) { g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s\\n"", tmpfile_name ) ; g_auto ( GStrv ) old_argv = NULL ; g_auto ( GStrv ) groups = NULL ; g_auto ( GStrv ) new_argv = NULL ; g_auto ( GStrv ) groups = NULL ; g_auto ( GStrv ) groups = NULL ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s\\n"", tmpfile_name ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s\\n"", tmpfile_name ) ; g_auto ( GStrv ) new_argv = NULL ; g_auto ( GStrv ) groups = NULL ; g_auto ( GStrv ) groups = NULL ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s\\n"", tmpfile_name ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s\\",0
232,"<S2SV_ModStart> char * temp_filename = osi_calloc ( strlen ( filename ) + 1 <S2SV_ModEnd> ) ; if <S2SV_ModStart> (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const section_t * section = ( const section_t * ) list_node ( node ) ; fprintf ( fp, ""[%s]\\n"", section -> name ) ; for ( const entry_t * entry = ( const entry_t * ) list_node ( enode ) ; fprintf ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s\\n"", entry -> key, entry -> value ) ; } if ( list_next ( node )!= list_end ( config -> sections",0
233,"<S2SV_ModStart> elen ) ; elen += pc -> lengthComponentIdent ; <S2SV_ModStart> case 1 : if ( pc -> lengthComponentIdent < 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 2 : elen += pc -> lengthComponentIdent ; break ; case 3 : if ( tolen < 3 ) return - ENAMETOOLONG ; memcpy ( p, ""../"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 4 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 5 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 2 ) ; p += 2 ; tolen -= 2 ; break ; case 6 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 2 ) ; p += 2 ; tolen -= 2 ; break ; case 7 : comp_len = udf_get_filename ( sb, pc -> componentIdent, pc -> lengthComponentIdent, p, tolen ) ; p += comp_len ; tolen -= comp_",0
234,"<S2SV_ModStart> case VTP_SUMMARY_ADV : if ( tlv_len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %u]"", tlv_len ) ) ; break ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %u]"", tlv_len ) ) ; break ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %u]"", tlv_len ) ) ; break ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %u]"", tlv_len ) ) ; break ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %u]"", tlv_len )",0
235,"<S2SV_ModStart> ) ) { xmlFree ( buf ) ; ctxt -> instate = state ; return ; } if ( ctxt -> instate == XML_PARSER_PI ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if ( buf == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if ( buf == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } xmlFree ( buf ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if ( buf == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if ( buf == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ;",0
236,"<S2SV_ModStart> int tagval ; struct stream packet = * s ; <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> tag <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun <S2SV_blank> stream"", & packet ) ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> tag <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & ) ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; if (! s_check_rem (",0
237,"<S2SV_ModStart> ; int rv = Socket_print ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"" ""\\r\\n"" <S2SV_ModStart> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"", request, StringBuffer_length ( data ), _auth? _auth : """", StringBuffer_toString ( data ) ) ; if ( rv < 0 ) THROW ( IOException, ""Monit: <S2SV_blank> cannot <S2SV_blank> send <S2SV_blank> command <S2SV_blank> to <S2SV_blank> the <S2SV_blank> monit <S2SV_blank> daemon <S2SV_blank> -- <S2SV_blank> %s"", STRERROR ) ;",0
238,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", src ) ; exit ( 1 ) ; } child = copy_file ( src, dest ) ; if ( child < 0 ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", src ) ; exit ( 1 ) ; } if ( child == 0 ) { drop_privs ( 0 ) ; int rv = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } waitpid ( child, NULL, 0 ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) < 0 ) errExit ( ""chown"" ) ; if ( chmod ( dest, S_IRUSR | S_IWUSR ) < 0 ) errExit ( ""chmod"" ) ; unlink (",0
239,"<S2SV_ModStart> flags ) ; spin_lock_irqsave ( & bfad -> bfad_lock, flags ) ; <S2SV_ModStart> return NULL ; rc = bfa_port_get_stats ( BFA_FCPORT ( & bfad -> bfa ), fcstats, bfad_hcb_comp, & fcomp ) ; if ( rc!= BFA_STATUS_OK ) { spin_unlock_irqrestore ( & bfad -> bfad_lock, flags ) ; return NULL ; } hstats -> seconds_since_last_reset = fcstats -> fc. secs_reset ; hstats -> tx_frames = fcstats -> fc. tx_frames ; hstats -> tx_words = fcstats -> fc. tx_words ; hstats -> rx_frames = fcstats -> fc. rx_frames ; hstats -> rx_words = fcstats -> fc. rx_words ; hstats -> lip_count = fcstats -> fc. lip_count ; hstats -> nos_count = fcstats -> fc. nos_count ; hstats -> error_frames = fcstats -> fc. error_frames ; hstats -> dumped_frames = fcstats -> fc. dumped_",0
240,"<S2SV_ModStart> ) { value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.",0
241,<S2SV_ModStart> -> sasl_mechanism ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> <S2SV_ModStart> -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> <S2SV_ModStart> -> sasl_password = g_strdup ( src -> sasl_password ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick,0
242,<S2SV_ModStart> ; } vpx_memset <S2SV_ModEnd> ( cpi ->,0
243,"<S2SV_ModStart>, o, datao ; if ( CHECKOVERFLOW ( buf_size, 6 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } datao = 6 + n -> offset ; if ( CHECKOVERFLOW ( datao, buf_size, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } c = exif_get_long ( buf + datao, n -> order ) ; if ( CHECKOVERFLOW ( c, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> Maker",0
244,"<S2SV_ModStart> HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; break ; case HA_ERR_CRASHED_ON_USAGE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRA",0
245,"<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; CURLcode <S2SV_ModEnd> res ; if <S2SV_ModStart> CURL_convert_from_network ( handle <S2SV_ModEnd>, & in <S2SV_ModStart> 1 ) ; if (! res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; if ( ns ) { free ( ns ) ; return NULL ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; } if ( olen ) * olen = strindex ; return ns ; } if ( olen ) * olen = strindex ; return NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
246,"<S2SV_ModStart> ; RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, len - op -> size, cpu )",0
247,"<S2SV_ModStart> = usm_secmod_process_in_msg ; <S2SV_ModEnd> def -> pdu_free_state_ref <S2SV_ModStart> NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ;",0
248,"<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) { <S2SV_ModStart>, sp, prog -> flags | eflags, sub ) ; } else { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog",0
249,"<S2SV_ModStart> # ifndef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if (! exten ||! exten -> efix_entry ) { snmp_log ( LOG_ERR, ""No <S2SV_blank> command <S2SV_blank> to <S2SV_blank> run\\n"" ) ; return SNMP_ERR_GENERR ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;",0
250,<S2SV_ModStart> } case 3 : { CheckNumberPixels ( 4 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 7 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >>,0
251,"<S2SV_ModStart> timer ) ; list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; slave -> master = NULL ; slave -> timer = NULL ; list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; slave -> master = NULL ; slave -> timer = NULL ; list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active",0
252,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
253,<S2SV_ModStart> { int_fast32_t widthOverflow = gifFilePtr -> Image. Width * gifFilePtr -> Image. Width ; int_fast32_t heightOverflow = gifFilePtr -> Image. Height * gifFilePtr -> Image. Height ; const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } <S2SV_ModEnd> if ( decode <S2SV_ModStart> ) { int_fast32_t widthOverflow = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } if ( decode ) { int_fast32_t widthOverflow = gifFilePtr -> Image. Width * gifFilePtr -> Image. Width ;,0
254,"<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> & conn -> <S2SV_ModStart> user ) ) { ret = ret_error ; } size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = conn -> validator -> user -> len ; if ( size!= conn -> validator -> user -> len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user -> len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user -> len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0",0
255,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"", length ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"", length ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"", length ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"", ""InsufficientImageDataInFile"", length ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"", length ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"", length ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( Cor",0
256,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> no <S2SV_blank> bus <S2SV_blank> %d\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",0
257,"<S2SV_ModStart> ( ""size <S2SV_blank> %zu <S2SV_blank> flags <S2SV_blank> 0x%x <S2SV_blank> timeo <S2SV_blank> %ld\\n"" <S2SV_ModEnd>, size,",0
258,"<S2SV_ModStart> 0 ) { if ( len < 9 ) { fprintf ( stderr, ""%s <S2SV_blank> too <S2SV_blank> short"", __func__ ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ++ s ; if ( len < 1 ) { fprintf ( stderr, ""%s <S2SV_blank> too <S2SV_blank> short"", __func__ ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> = ++ s ; if ( len < 1 ) { fprintf ( stderr, ""%s <S2SV_blank> too <S2SV_blank> short"", __func__ ) ; exit ( EXIT_FAILURE ) ; } if ( len < 1 ) { fprintf ( stderr, ""%s <S2SV_blank> too <S2SV_blank> short"", __func__ ) ; exit ( EXIT_FAILURE ) ; } if ( len < 1 ) { fprintf ( stderr, ""%s <S2SV_blank> too <S2SV_blank> short"", __func__ ) ; exit ( EXIT_FAILURE ) ; } if ( * s == '/' ) { const char * t = ++ s ; while ( * t &&! isspace ( * t ) ) t ++ ; if (! isspace ( * t ) ) t ++ ; if ( len < 1 ) { fprintf ( stderr, ""%s <S2SV_blank> too <S2SV_blank> short"", __func__ ) ; exit ( EXIT_FAILURE )",0
259,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. active_set, TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. active_set, TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. active_set, TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. active_set, TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. active_set, TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. active_set, TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. active_set, TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. active_set, TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. active_set, TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. active_set, TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. active_set, TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. active_set, TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. active_set, TEMP_FAILURE_RETRY (",0
260,<S2SV_ModStart> msixcap ; assert ( <S2SV_ModEnd> msgnum >= 1 <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_populate_msixcap ( &,0
261,"<S2SV_ModStart> ; if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func",0
262,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
263,"<S2SV_ModStart> == NULL ) { retval = KRB5KDC_ERR_PREAUTH_FAILED ; goto cleanup ; } status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ; } retval = 0 ; cleanup : X509_NAME_free ( is -> issuer ) ; ASN1_INTEGER_free ( is -> serial ) ; free ( is ) ;",0
264,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock ( ) ;",0
265,<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; if ( frame_type == MV_REFERENCE_FRAME ) { return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return ALLOW,0
266,"<S2SV_ModStart> gf == GF_VDEF ) { printval = DNAN ; localtime_r ( & now, & tmvdef ) ; } else if ( isnan ( printval ) ) { validsteps ++ ; printval = im -> gdes [ vidx ]. data [ ii ] ; } else if ( isnan ( printval ) ) { validsteps ++ ; printval = im -> gdes [ vidx ]. data [ ii ] ; } else if ( finite ( printval ) ) { printval = im -> gdes [ vidx ]. data [ ii ] ; } else { if ( isnan ( printval ) ) { printval = im -> gdes [ vidx ]. data [ ii ] ; validsteps ++ ; printval = im -> gdes [ vidx ]. data [ ii ] ; } else if ( isnan ( printval ) ) { printval = im -> gdes [ vidx ]. data [ ii ] ; } else if ( finite ( printval ) ) { printval = im -> gdes [ vidx ]. data [ ii ] ; } else { if ( isnan ( printval ) ) { printval = im -> gdes [ vidx ]. data",0
267,<S2SV_ModStart> ) b ; if ( buf1 -> size > buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; },0
268,"<S2SV_ModStart> = NULL ; size_t <S2SV_ModEnd> sz = sizeof <S2SV_ModStart> info ) + size ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) { info = vmalloc ( sz ) ; if (! info ) return NULL ; }",0
269,<S2SV_ModStart> ; if ( protocol < 0 || protocol > AX25_MAX_PROTOCOL ) return - EINVAL ; if (,0
270,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
271,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val, false <S2SV_ModStart> case 4 : rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val, false",0
272,"<S2SV_ModStart> list. name, true",1
273,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
274,<S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ;,0
275,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ; },0
276,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
277,"<S2SV_ModStart> ; REQ ( n <S2SV_ModEnd>, funcdef ) <S2SV_ModStart> funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 3 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; if ( is_async ) { AsyncFunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset",0
278,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
279,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image ) ; if (",0
280,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) { rc = <S2SV_ModStart> ) ) ; if ( rc!= X86EMUL_CONTINUE <S2SV_ModEnd> ) return X86EMUL_CONTINUE <S2SV_ModStart> ) return X86EMUL_CONTINUE <S2SV_ModEnd> ; } <S2SV_null>,0
281,,1
282,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ; <S2SV_ModStart> res ) ) ; if (! freq_reg ) return - ENOMEM,0
283,<S2SV_ModStart> case SEEK_SET : <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart>,0
284,<S2SV_ModStart> ) IHEVCD_SUCCESS ) ; if ( ps_cabac -> u4_ofst > ps_bitstrm -> u4_cur_word + ps_bitstrm -> u4_nxt_word ) { IHEVCD_ERROR_T e ; ps_cabac -> au1_ctxt_models = NULL ; return ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; } <S2SV_ModStart> ) IHEVCD_INVALID_PARAMETER ) ; if ( ps_cabac -> u4_ofst > ps_bitstrm -> u4_cur_word + ps_bitstrm -> u4_nxt_word ) { IHEVCD_ERROR_T e ; ps_cabac -> au1_ctxt_models = NULL ; return ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; },0
285,<S2SV_ModStart> n_children ++ ; if ( line -> type == MD_LINE_BLANK ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( line -> type == MD_LINE_COMMENT ) { line -> type = MD_LINE_COMMENT ; ctx -> last_line_has_list_loosening_effect = 0 ; } else if ( line -> type == MD_LINE_COMMENT ) { line -> type = MD_LINE_COMMENT ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( line -> type == MD_LINE_COMMENT ) { line -> type = MD_LINE_COMMENT ; } else if ( line -> type == MD_LINE_COMMENT ) { line -> type = MD_LINE_COMMENT ; ctx -> last_line_has_list_loosening_effect = 0 ; } else if ( line -> type == MD_LINE_COMMENT ) { line -> type = MD_LINE_COMMENT ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( line -> type ==,0
286,<S2SV_ModStart> perf_event_context * ctx = perf_event_ctx ( event ) <S2SV_ModEnd> ; struct task_struct <S2SV_ModStart> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } <S2SV_null>,0
287,<S2SV_ModStart>. post_proc_flag ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ) | # else ( flags -> color_ref_frame_flag = ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ),0
288,"<S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( int ) sizeof ( struct olsr_msg4 ) ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg6 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( int ) sizeof ( struct olsr_msg6 ) ) ; goto trunc ; } <S2SV_ModStart> struct olsr_hna4 ) ) ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_hna4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( int ) sizeof ( struct olsr_hna4 ) ) ) ;",0
289,"<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> timer ) ; memset ( & timer, 0, sizeof ( timer ) ) ; <S2SV_ModStart> timer ) ; memset ( & timer, 0, sizeof ( timer ) ) ; <S2SV_ModStart> timer ) ; memset ( & timer, 0, sizeof ( timer ) ) ; <S2SV_ModStart> timer ) ; memset ( & timer, 0, sizeof ( timer ) ) ; <S2SV_ModStart> timer ) ; memset ( & timer, 0, sizeof ( timer ) ) ; memset ( & timer, 0, sizeof ( timer ) ) ; <S2SV_ModStart> timer ) ; memset ( & timer, 0, sizeof ( timer ) ) ; memset ( & timer, 0, sizeof ( timer ) ) ; <S2SV_ModStart> timer ) ; memset ( & timer, 0, sizeof ( timer ) ) ; memset ( & timer, 0, sizeof ( timer ) ) ; memset ( & timer, 0, sizeof ( timer ) ) ; memset ( & timer, 0, sizeof ( timer ) ) ; <S2SV_ModStart> timer ) ; memset ( & timer, 0, sizeof ( timer ) ) ; memset ( & timer, 0, sizeof ( timer ) ) ; memset ( & timer, 0, sizeof (",0
290,"<S2SV_ModStart> { fprintf ( stderr <S2SV_ModEnd>, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) <S2SV_ModStart> ; int rv = copy_file ( src, dest, getuid ( ), getgid ( ) ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } <S2SV_ModStart> 0 ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""chown"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""chmod"" ) ;",0
291,"<S2SV_ModStart> ; if ( unlikely (! path [ depth ]. p_ext ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if (",0
292,<S2SV_ModStart> } else { if ( ptr_hbe_txposer -> core_frame_length == 768 ) { if ( ptr_hbe_txposer -> k_start < 0 ) ptr_hbe_txposer -> k_start = 0 ; } else if ( ptr_hbe_txposer -> core_frame_length == 768 ) { if ( ptr_hbe_txposer -> k_start < 0 ) ptr_hbe_txposer -> k_start = 0 ; } else if ( ptr_hbe_txposer -> core_frame_length == 768 ) { if ( ptr_hbe_txposer -> k_start < 0 ) ptr_hbe_txposer -> k_start = 0 ; } else if ( ptr_hbe_txposer -> core_frame_length == 768 ) { if ( ptr_hbe_txposer -> k_start < 0 ) ptr_hbe_txposer -> k_start = 24 ; } else if ( ptr_hbe_txposer -> core_frame_length == 768 ) { if ( ptr_hbe_txposer -> k_start < 0 ) ptr_hbe_tx,0
293,"<S2SV_ModStart> lua_module ) ; if ( parsed_require_line == NULL ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02314 ) ""Unable <S2SV_blank> to <S2SV_blank> compile <S2SV_blank> VM <S2SV_blank> for <S2SV_blank> authz <S2SV_blank> provider <S2SV_blank> %s"", prov_spec -> name ) ; return AUTHZ_GENERAL_ERROR ; } <S2SV_ModStart> ( L, <S2SV_ModEnd> prov_spec -> args <S2SV_ModStart> ) ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; } if (! lua_checkstack ( L, <S2SV_ModEnd> prov_spec -> args <S2SV_ModStart> args -> nelts ) ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02319",0
294,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if (",0
295,"<S2SV_ModStart>! proto_end ) { credential_clear ( c ) ; return 0 ; } cp = url + 3 ; at = strchr ( cp, '@' ) ; colon = strchrnul ( cp, ':' ) ; slash = strchrnul ( cp, '/' ) ; if (! at || slash <= at ) { host = cp ; } else if ( at <= colon ) { host = cp ; } else if ( slash <= at ) { host = at + 1 ; } if ( proto_end - url > 0 ) c -> protocol = xmemdupz ( url, proto_end - url ) ; c -> host = url_decode_mem ( host, slash - host ) ; if ( proto_end - url > 0 ) c -> protocol = xmemdupz ( url, proto_end - url ) ; c -> host = url_decode_mem ( host, slash - host ) ; if ( proto_end - url > 0 ) { if ( proto_end - url > 0 ) c -> protocol = xmemdupz ( url, proto_end - url ) ; c -> host = url_decode_mem ( host, slash - host ) ; if ( proto_end - url",0
296,"<S2SV_ModStart> ; end = fdt_path_end ( path ) ; if ( end - path < path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> nextoffset ; switch ( tag ) { case FDT_PROP : include = want >= 2 ; stop_at = offset ; break ; case FDT_NOP : include = want >= 2 ; break ; case FDT_BEGIN_NODE : depth ++ ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_BADSTRUCTURE ; if (! name ) return - FDT_ERR_BADSTRUCTURE ; if ( str_in_list ( path, exc_prop, exc_prop_count ) ) include = 0 ; break ; case FDT_END_NODE : depth -- ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_BADSTRUCTURE",0
297,"<S2SV_ModStart> ) ) { if (! ( loops % 50 ) ) { redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys, size ) ; } else { redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lldslots <S2SV_blank> HT."", j, used, vkeys, size ) ; } if (! ( loops % 50 ) ) { redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys, size ) ; } else { redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lldslots <S2SV_blank> HT."", j, used, vkeys, size ) ; }",0
298,"<S2SV_ModStart> ; client -> priv -> connection_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_connection_timeout, client ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> connection <S2SV_blank> \'%s\'"", client -> priv -> description ) ;",0
299,<S2SV_ModStart> - 1 ; if ( i + book -> dim > n ) return - 1 ;,0
300,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
301,"<S2SV_ModStart> { if ( sf -> x_scale_fp == REF_INVALID_SCALE ) { sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if ( sf -> y_scale_fp == REF_INVALID_SCALE ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> x_step_q4 = scaled_y ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value ; } else { sf -> predict [ 0 ] [ 0 ] = vp9_convolve_copy ; sf -> predict [ 0 ] [ 0 ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve8_horiz ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve",0
302,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
303,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
304,"<S2SV_ModStart> ) ; opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> ( opt ) rcu_assign_pointer ( np -> txopt, NULL ) ; <S2SV_ModStart> ( opt ) rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> ( opt ) rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
305,"<S2SV_ModStart> case IPV6_PKTINFO : if ( np -> rxopt. bits. srcinfo ) { struct in6_pktinfo src_info ; memset ( & src_info, 0, sizeof ( src_info ) ) ; memcpy ( & src_info, np -> rxopt. bits. srcinfo, sizeof ( src_info ) ) ; } else { if ( np -> rxopt. bits. dstinfo ) { struct in6_pktinfo src_info ; src_info. ipi6_ifindex = np -> rxopt. bits. dstinfo -> ipi6_ifindex ; memset ( & src_info, 0, sizeof ( src_info ) ) ; memcpy ( & src_info, np -> rxopt. bits. dstinfo, sizeof ( src_info ) ) ; } else { if ( np -> rxopt. bits. dstinfo ) { struct in6_pktinfo src_info ; memcpy ( & src_info, np -> rxopt. bits. dstinfo, sizeof ( src_info ) ) ; memcpy ( & src_info, & src_info, sizeof ( src_info ) ) ;",0
306,<S2SV_ModStart> ( ) ; unregister_netdev_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ( ) ; unregister_netdev_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ( ) ; unregister_netdev_subsys <S2SV_ModEnd> ( & sctp_protosw_ops <S2SV_ModStart> ( ) ; unregister_netdev_subsys <S2SV_ModEnd> ( & sctp_protosw_ops <S2SV_ModStart> ( ) ; unregister_netdev_subsys <S2SV_ModEnd> ( & sctp_protosw_ops,0
307,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> ; ovpsnr = sse_to_psnr <S2SV_ModEnd> ( ( double <S2SV_ModStart> double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", stream -> psnr_totals [ i ] / stream -> psnr_count ) ; } }",0
308,<S2SV_ModStart> task ) { <S2SV_ModEnd> complete ( & <S2SV_ModStart> slow_task -> timer ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
309,"<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> 16 ) ) ; if (! dst_name ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> summary\\n"" ) ; return ; }",0
310,"<S2SV_ModStart> -> init ( ) ; TRACE_DEBUG ( ""CIDER=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL",0
311,"<S2SV_ModStart>. skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
312,"<S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NE",0
313,"<S2SV_ModStart> ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; } <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; } <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL <S2SV_ModEnd> ; } bootstage_mark <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT",0
314,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ),0
315,<S2SV_ModStart> )? ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> -> baseline_gf_interval * rc -> avg_frame_bandwidth <S2SV_ModEnd> ) / ( <S2SV_ModStart> ) : ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> -> baseline_gf_interval * rc -> avg_frame_bandwidth <S2SV_ModEnd> ) / ( <S2SV_ModStart> ) : ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> -> baseline_gf_interval * rc -> avg_frame_bandwidth <S2SV_ModEnd> ) / ( <S2SV_ModStart> ) : ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> -> baseline_gf_interval * rc -> avg_frame_bandwidth <S2SV_ModEnd> ) / ( <S2SV_ModStart> ) ; # else target = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # endif,0
316,"<S2SV_ModStart> ++ ) { if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank>",0
317,"<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch <S2SV_ModStart> value ) ; value = ast2obj_list ( o -> v. Module. type_ignores, ast2obj_type_ignore ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_type_ignores, value ) == - 1 ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_type_ignores, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_list ( o -> v. Module. type_ignores, ast2obj_type_ignore ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_type_ignores, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_list ( o -> v. Module. type_ignores, ast2obj_type_ignore ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_type_ignores,",0
318,"<S2SV_ModStart> ib ] ; if ( d -> dequant == NULL ) { vp8_strict_quantize_b ( b, d ) ; } else if ( d -> qcoeff == NULL ) { vp8_strict_quantize_b ( b, d ) ; } else if ( d -> dqcoeff == NULL ) { vp8_strict_quantize_b ( b, d ) ; } else if ( d -> dequant == NULL ) { vp8_strict_quantize_b ( b, d ) ; } else if ( d -> dequant == NULL ) { vp8_strict_quantize_b ( b, d ) ; } else if ( d -> qcoeff == NULL ) { vp8_strict_quantize_b ( b, d ) ; } else if ( d -> dqcoeff == NULL ) { vp8_strict_quantize_b ( b, d ) ; } else if ( d -> dequant == NULL ) { vp8_strict_quantize_b ( b, d ) ; } else if ( d -> dequant == NULL ) { vp8_strict_quantize_b ( b, d ) ; } else if ( d -> dequant ==",0
319,"<S2SV_ModStart> FN_REFLEN ] ; if ( strchr ( opt_basedir, '/' ) ) { error = - 1 ; goto exit ; } strncat ( buff, opt_basedir, sizeof ( buff ) - 1 ) ; strncat ( buff, ""/"", sizeof ( buff ) - strlen ( buff ) - 1 ) ; strncat ( buff, FN_DIRSEP, sizeof ( buff ) - strlen ( buff ) - 1 ) ; strncat ( buff, FN_DIRSEP, sizeof ( buff ) - 1 ) ; buff [ sizeof ( buff ) - 1 ] = 0 ; buff [ sizeof ( buff ) - 1 ] = 0 ; my_free ( opt_basedir ) ; opt_basedir = my_strdup ( buff, MYF ( MY_FAE ) ) ; opt_datadir = my_strdup ( opt_datadir ) ; opt_datadir = my_strdup ( opt_datadir ) ; opt_datadir = my_strdup ( opt_datadir ) ; opt_datadir = my_strdup ( opt_datadir ) ; opt_datadir = my_strdup ( opt_datadir )",0
320,"<S2SV_ModStart> ) ( data_end - pbi -> fragments. ptrs [ 0 ] ) ; if ( data_end - data < 10 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } else { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } if ( pbi -> decrypt_cb ) { int n = ( int ) ( data_end - data ) ; if ( n > 10 ) n = 10 ; pbi -> decrypt_cb ( pbi -> decrypt_state, data, clear_buffer, n ) ; clear = clear_buffer ; } else { int n = ( int ) ( data_end - data ) ; if ( n > 10 ) n = 10 ; pbi -> decrypt_cb ( pbi -> decrypt_state, data, clear_buffer, n ) ; if ( pbi -> decrypt_state ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; }",0
321,"<S2SV_ModStart> getprivs_ret ret ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
322,"<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable <S2SV_ModEnd> ; sctp_tsnmap_init ( <S2SV_ModStart> sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, asoc -> peer. i. initial_tsn, GFP_ATOMIC ) ; if ( asoc -> state >= SCTP_STATE_ESTABLISHED ) sctp_assoc_rm_peer ( asoc, trans ) ; if ( asoc -> state >= SCTP_STATE_ESTABLISHED ) sctp_assoc_rm_peer ( asoc, trans ) ; if ( asoc -> state >= SCTP_STATE_ESTABLISHED ) sctp_transport_reset ( trans ) ; if ( asoc -> state >= SCTP_STATE_ESTABLISHED ) sctp_assoc_rm_peer ( asoc, trans ) ; if ( asoc -> state >= SCTP_STATE_ESTABLISHED ) sctp_transport_reset ( trans ) ; if ( asoc -> state >= SCTP_STATE_ESTABLISHED ) sct",0
323,"<S2SV_ModStart> * returnrate, RATE_DISTORTION * rd_distortion, int * rd_intra <S2SV_ModStart> CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # endif <S2SV_ModStart> # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING",0
324,<S2SV_ModStart> goto error ; if ( statbuf. st_size < 0 ) goto error ; if ( h -> hdr -> magic [ 0 ] == 'r' || h -> hdr -> magic [ 1 ] == 'e' ) { h -> hdr -> magic [ 0 ] = 'r' ; h -> hdr -> magic [ 1 ] = 'e' ; h -> hdr -> magic [ 1 ] = 'e' ; } else { h -> hdr -> magic [ 0 ] = 'r' ; h -> hdr -> magic [ 1 ] = 'e' ; h -> hdr -> magic [ 1 ] = 'e' ; } if ( h -> hdr -> magic [ 0 ] == 'r' || h -> hdr -> magic [ 1 ] == 'e' ) { h -> hdr -> magic [ 0 ] = 'r' ; h -> hdr -> magic [ 1 ] = 'e' ; h -> hdr -> magic [ 1 ] = 'e' ; } else { h -> hdr -> magic [ 0 ] = 'r' ; h -> hdr -> magic [ 1 ] = 'e' ; } if ( h -> writable ) { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL,0
325,"<S2SV_ModStart> ; UWORD8 u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id, uc_constraint_set0_flag, uc_constraint_set1_flag ; WORD32 i4_max_frm_num ; WORD32 i4_pic_wd, i4_pic_ht, i4_cropped_wd ; WORD32 pic_height_in_map_units_minus1 ; WORD32 u2_pic_wd = 0 ; UWORD32 u2_pic_wd_uv = 0 ; WORD32 u2_pic_ht = 0 ; WORD32 u2_crop_offset_y = 0 ; UWORD32 u2_crop_offset_uv = 0 ; WORD32 u4_num_reorder_frames ; WORD32 i4_i ; WORD8 u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_rect_left_ofst, u1_frame_cropping_rect_right_ofst, u1_frame_cropping_rect_top_ofst, u1_frame",0
326,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; vpx_svc_parameters_t * const params = va_arg ( args, vpx_svc_parameters_t * ) ; if ( params == NULL ) return VPX_CODEC_INVALID_PARAM ; <S2SV_ModEnd> cpi -> svc <S2SV_ModStart>. spatial_layer_id = params -> spatial_layer ; cpi -> svc. temporal_layer_id = params -> temporal_layer ; cpi -> lst_fb_idx = params -> lst_fb_idx ; cpi -> gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer =",0
327,"<S2SV_ModStart> out ) { uint32 bitspersample, samplesperpixel ; uint16 input_compression, input_photometric ; copyFunc cf ; uint32 width, length ; CopyField ( TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( TIFFTAG_IMAGELENGTH, length ) ; CopyField ( TIFFTAG_BITSPERSAMPLE, bitspersample ) ; CopyField ( TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; CopyField ( TIFFTAG_COMPRESSION, input_compression ) ; if ( input_compression == ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_COMPRESSION, compression ) ; else if ( input_compression == ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_COMPRESSION, compression ) ; else if ( input_photometric == ( uint16 ) - 1 ) { uint16 subsamplinghor, subsamplingver ; TIFFGetFieldDefaulted ( in, TIFFTAG_YCBCRSUBSAMPLING, & subsamplinghor, & subsamplingver ) ; if ( subsamplinghor!= 1 || subsamplingver!= 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s",0
328,"<S2SV_ModStart> { # if defined ( HAVE_LSTAT ) if ( a -> pst == NULL ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } <S2SV_ModStart> = '\\0' ; if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } } else if ( a -> flags & ARCHIVE_EXTRACT",0
329,"<S2SV_ModStart> ; unsigned int entries_left, entries_right <S2SV_ModStart> ibh ) { entries_left = udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ; if ( entries_left == 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( entries_left == 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( entries_left == 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( entries_left == 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino )",0
330,"<S2SV_ModStart> -> tx_size ; const int filter_level = get_filter_level ( lfi_n, mbmi, shift_y, shift_uv ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_y ] ; uint64_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y [ tx_size_y ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_y [ tx_size_y ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_",0
331,"<S2SV_ModStart> mq_flush_lock, flags ) ; flush_rq -> tag = - 1",0
332,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1,0
333,"<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) return! match ( prog -> start, sp, sp, prog -> flags | eflags | eflags, sub ) ; else if ( prog -> flags & eflags ) return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags & eflags ) return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) return! match ( prog -> start, sp, sp, prog -> flags | eflags | eflags, sub ) ; else if ( prog -> flags & eflags ) return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags & eflags ) return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) return! match ( prog",0
334,"<S2SV_ModStart> ) ) { if (! smatch ( option, ""name"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> \'%s\'"", option ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> \'%s\'"", option ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> \'%s\'"", option ) ; return MPR_ERR_BAD_SYNTAX ; }",0
335,<S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart>,0
336,"<S2SV_ModStart> ) ) { if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image -> filename ) ; if ( length > GetBlobSize ( image ) ) Throw",0
337,"<S2SV_ModStart> case IPV6_PKTINFO : if ( np -> rxopt. bits. srcinfo ) { struct in6_pktinfo src_info ; memset ( & src_info, 0, sizeof ( src_info ) ) ; memcpy ( & src_info, np -> rxopt. bits. srcinfo, sizeof ( src_info ) ) ; } else { if ( np -> rxopt. bits. dstinfo ) { struct in6_pktinfo src_info ; src_info. ipi6_ifindex = np -> rxopt. bits. dstinfo -> ipi6_ifindex ; memset ( & src_info, 0, sizeof ( src_info ) ) ; memcpy ( & src_info, np -> rxopt. bits. dstinfo, sizeof ( src_info ) ) ; } else { if ( np -> rxopt. bits. dstinfo ) { struct in6_pktinfo src_info ; memcpy ( & src_info, np -> rxopt. bits. dstinfo, sizeof ( src_info ) ) ; memcpy ( & src_info, & src_info, sizeof ( src_info ) ) ;",0
338,<S2SV_ModStart> berval ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> berval ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> berval ) ; if ( ret [ j ] -> key_data_length [ 0 ]!= 0 ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> berval ) ; if ( ret [ j ] -> key_data_length [ 0 ]!= 0 ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> berval ) ; if ( ret [ j ] -> key_data_length [ 0 ]!= 0 && ret [ j ] -> key_data_length [ 0 ]!= 0 && ret [ j ] -> key_data_length [ 0 ]!= 0 && ret [ j ] -> key_data_length [ 0 ]!= 0 && ret [ j ] -> key_data_length [ 0 ]!= 0 && ret [ j ] -> key_data_length [ 0 ]!= 0 ) { err = ENOMEM ; goto cleanup ; },0
339,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > len ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", crgram_len ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", len ) ; r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> transmit <S2SV_blank> failed"" ) ; } else { if ( crgram_len > len ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", len ) ; }",0
340,"<S2SV_ModStart> uint8 result ; uint32 <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> ; int length ; struct stream packet = * s ; <S2SV_ModStart> return False ; packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect",0
341,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> =,0
342,"<S2SV_ModStart> ; if ( idx >= map -> nr_extents ) { ret = uid_gid_map_copy_nolock ( & new_map, map, parent_map ) ; if ( ret < 0 ) goto out ; ret = uid_gid_map_copy_nolock ( & new_map, map, parent_map ) ; if ( ret < 0 ) goto out ; ret = uid_gid_map_copy_nolock ( & new_map, map, parent_map ) ; if ( ret < 0 ) goto out ; ret = uid_gid_map_copy_nolock ( & new_map, map, parent_map ) ; if ( ret < 0 ) goto out ; ret = uid_gid_map_copy_nolock ( & new_map, map, parent_map ) ; if ( ret < 0 ) goto out ; ret = uid_gid_map_copy_nolock ( & new_map, map, parent_map ) ; if ( ret < 0 ) goto out ; ret = uid_gid_map_copy_nolock ( & new_map, map, parent_map ) ; if ( ret <",0
343,"<S2SV_ModStart> } } } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; switch ( action [ 0 ] ) { case's' : if ( cmd_cb ( core_ptr, ""ds"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; switch ( action [ 0 ] ) { case 'c' : if ( cmd_cb ( core_ptr, ""dc"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01",0
344,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
345,"<S2SV_ModStart> = mb_row ; memset <S2SV_ModEnd> ( lf_mic, <S2SV_ModStart> = mb_col ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> = mb_row ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> = mb_col ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> = mb_row ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> = mb_col ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> = mb_row ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> = mb_col ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> = mb_col ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> = mb_row ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> = mb_col ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> = mb_row ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> = mb_col ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> = mb_row ; memcpy <S2SV_ModEnd> ( lf_mic ->",0
346,"<S2SV_ModStart> NULL ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; <S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; return ( DestroyImageList ( image ) ) ;",0
347,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * p <S2SV_ModEnd> ; const char <S2SV_ModStart> char * end ; if ( len > SIZE_MAX / 6 ) return NULL ; u = PyBytes_FromStringAndSize ( ( char * ) NULL, len * 6 ) ; if ( u == NULL ) return NULL ; p = buf = PyBytes_AsString ( u ) ; if ( p == NULL ) { Py_DECREF ( u ) ; return NULL ; } if ( * s & 0x80 ) { PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( u ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = decode_utf8 ( c, & s, end ) ; if ( i < len ) { Py_UCS4 chr = decode_utf8 ( c, & s, end",0
348,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> int setimes, <S2SV_ModStart>, targisdir, wrerrno <S2SV_ModEnd> ; char ch <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ; if ( <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) SCREWUP ( <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) ; if <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) SCREWUP ( <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) ; if <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) SCREWUP ( <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) ; if <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) SCREWUP ( <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) ; if <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) SCREWUP ( <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) ; if <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) ; if <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) SCREWUP ( <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) ; if <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) SCREWUP ( <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) ; if <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) SCREWUP ( <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) ; if <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) SCREWUP ( <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) ; if <S2SV_ModStart>, omode,",0
349,"<S2SV_ModStart> -> buffer ; if (! ctx -> ghash_enabled ) return - ENOKEY ; <S2SV_ModStart>, dctx ) ; if (! ctx -> ghash_enabled ) return - ENOKEY",0
350,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
351,<S2SV_ModStart> vp8_de_alloc_frame_buffers ( oci ) ; if ( ( width & 0xf0 )!= 0 ) width += 4 ; if ( ( height & 0xf0 )!= 0 ) height += 4 ; if ( ( width & 0xf0 )!= 0 ) height += 4 ; if ( ( height & 0xf0 )!= 0 ) height += 4 ; if ( ( height & 0xf0 )!= 0 ) height += 4 ; if ( ( width & 0xf0 )!= 0 ) width += 4 ; if ( ( height & 0xf0 )!= 0 ) height += 4 ; if ( ( width & 0xf0 )!= 0 ) height += 4 ; if ( ( width & 0xf0 )!= 0 ) width += 4 ; if ( ( height & 0xf0 )!= 0 ) height += 4 ; if ( ( width & 0xf0 )!= 0 ) height += 4 ; if ( ( height & 0xf0 )!= 0 ) height += 4 ; if ( ( height & 0xf0 )!= 0 ) height += 4 ; if ( ( width & 0xf0 )!= 0 ) height += 4 ; if ( ( height & 0xf0 )!= 0 ) height += 4,0
352,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
353,"<S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, <S2SV_ModEnd> u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, <S2SV_ModEnd> u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby2, <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby2,",0
354,"<S2SV_ModStart> [ 1 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 2 ] ) ; if ( screen -> buffers [ 3 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 3 ] ) ; if ( screen -> buffers [ 4 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 4 ] ) ; if ( screen -> buffers [ 5 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 5 ] ) ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ;",0
355,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay, TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay, TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay, TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay, TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay, TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay, TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay, TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay, TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay, TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY ( GKI_RETRY_RETRY ( GKI_RETRY ( GKI_RETRY ( GKI_RETRY ( GKI_RETRY ( GKI_RETRY ( GKI_RETRY ( GKI_RETRY ( GKI_RETRY ( GKI_RETRY ( GKI_RETRY ( GKI_RETRY ( GKI_RETRY ( GKI_RETRY ( GKI_RETRY_RETRY ( GKI_RETRY ( GKI_RETRY_RETRY ( GKI_RETRY ( GKI_RETRY ( GKI_RETRY ( GKI_RETRY ( GKI_RETRY ( GK",0
356,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent",0
357,"<S2SV_ModStart> { httpSetHostName ( state, stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) ; httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else if ( value ) { httpSetHostName ( state -> host, stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) ; httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; }",0
358,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
359,<S2SV_ModStart>! job_id ||! prev_hash || <S2SV_ModStart>! prev_hash ||! coinbase1 ||! coinbase2 ||! bbversion ||! nbit ||! ntime ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; if ( bbversion ) free ( bbversion ) ; if ( nbit || ntime ) { if ( job_id ) free ( job_id ) ; if ( <S2SV_ModStart> if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; if ( bbversion ) free ( bbversion ) ; if ( nbit ) free ( nbit ) ; if ( ntime ) free ( ntime ) ;,0
360,"<S2SV_ModStart> { ssize_t ret ; if ( transmitted_length + ret > length ) { LOG_ERROR ( ""In <S2SV_blank> %s, <S2SV_blank> error <S2SV_blank> writing <S2SV_blank> to <S2SV_blank> the <S2SV_blank> serial <S2SV_blank> port <S2SV_blank> with <S2SV_blank> fd <S2SV_blank> %d: <S2SV_blank> %s"", __func__, fd, strerror ( errno ) ) ; return transmitted_length ; }",0
361,<S2SV_ModStart> ioc ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
362,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> __dict__ ) ; if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) return NULL ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( dict ) { if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) return NULL ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( dict ) { if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc",0
363,"<S2SV_ModStart>, USB_DT_OTG, NULL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) & desc ) ; if (! desc ) { dev_info ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %s\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; return 0 ; } if ( desc -> bLength < sizeof ( struct usb_otg_descriptor ) ) return 0 ; if ( desc -> bLength > sizeof ( struct usb_otg_descriptor ) ) { err = usb_control_msg ( udev, 0 ), USB_REQ_SET_FEATURE, 0, USB_DEVICE_B_HNP_ENABLE, 0, NULL, 0, USB_CTRL_SET_TIMEOUT ) ; if ( err < 0 ) dev_err ( & udev -> dev, ""can\'t <S2SV_blank> set <S2SV_blank> HNP <S2SV_blank> mode: <S2SV_blank> %d\\n"", err ) ; bus -> b_hnp_enable = 0 ; } else { err = usb_control_msg ( udev, 0 ), USB_REQ_SET_FEATURE, 0, USB_DEVICE",0
364,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> ) ; case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_IOC_SET_PERIOD : return perf_event_set_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_IOC_SET_FILTER : return perf_event_set_filter ( event, ( void __user * ) arg ) ; case PERF_EVENT_IOC_GET_ID : { u64 id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_IOC_SET_OUTPUT : { int ret ; if ( arg!= - 1 ) { struct perf_event * output_event ; struct fd output ; ret = perf_fget_light ( arg, & output ) ; if ( ret ) return ret ; output_event = output. file -> private_data ; ret = perf_event_set_output (",0
365,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
366,"<S2SV_ModStart> ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 5, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 5, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) || cmd_q -> ccp",0
367,"<S2SV_ModStart> iv ) ; rb_ivar_set ( self, id_key_set, Qnil ) ;",0
368,"<S2SV_ModStart> s ) ; memory_region_init_io ( & s -> mmio, OBJECT ( s ), & stellaris_enet_ops, s, ""stellaris_enet"", 0x1000 ) ; memory_region_init_io ( & s -> irq, OBJECT ( s ), & net_stellaris_enet_info, & s -> conf, qemu_get_typename ( OBJECT ( dev ) ), dev -> id, s ) ; qemu_format_nic_info_str ( qemu_get_queue ( s -> nic ), s -> conf. macaddr. a ) ; qemu_format_nic_info_str ( qemu_get_queue ( s -> nic ), s -> conf. macaddr. a ) ; s -> nic = qemu_new_nic ( & net_stellaris_enet_info, & s -> conf, qemu_get_typename ( dev ) ) ; qemu_format_nic_info_str ( qemu_get_queue ( s -> nic ), s -> conf. macaddr. a ) ; qemu_format_nic_info_str ( qemu_",0
369,"<S2SV_ModStart> : DEBUGF ( ""recv: <S2SV_blank> [IB_READ_CLIENT_MAGIC]\\n"" ) ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - first ; } <S2SV_ModStart> : DEBUGF ( ""recv: <S2SV_blank> [IB_READ_CLIENT_MAGIC]\\n"" ) ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - first ; } if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - first ; } if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - last ; } if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - first ; } if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - first ; } if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - last ; } if ( nghttp2_buf_mark_avail ( & iframe -> sb",0
370,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
371,"<S2SV_ModStart> ) ; } if ( version > 1 ) x86_pmu. max_pebs_events = min_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. max_counters = min_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. max_pebs_events = min_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. max_counters = min_t ( unsigned, MAX_PEBS ) ; if ( version > 1 ) x86_pmu. max_counters = min_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. max_pebs_events = min_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. max",0
372,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * * tp, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * stop ) { TOKENEXTRA * p = * tp ; while ( p < stop && p -> token!= EOSB_TOKEN ) { const int t = p -> token ; const struct vpx_token * const a = & vp9_coef_encodings [ t ] ; const struct vpx_extra_bit * const b = & vp9_extra_bits [ t ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) ; vwrite_tree ( w, vp9_coef_tree, p -> context_tree, bits, len, i ) ; vp9_write_tree ( w, vp9_coef_con_tree, vp9_pareto8_full [ p -> context_tree [ PIVOT_NODE ], v, n - len, i ) ; } else",0
373,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> 16 ) ; vpx_compute_update_table ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> uncompressed_hdr_size = vp9_rb_bytes_written ( & wb ) ; data += first_part_size ; vpx_compute_update_table ( ) ; data += encode_tiles ( cpi, data ) ; * size = data - dest ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
374,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
375,"<S2SV_ModStart> struct ikev2_id id <S2SV_ModEnd> ; int id_len <S2SV_ModStart> * typedata ; ND_TCHECK ( * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; id_len = ntohs ( id. h. len ) ; idtype_len = ntohs ( id. h. type ) ; if ( 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ),",0
376,<S2SV_ModStart> = atoi ( jas_tvparser_getval ( tvp ) ) ; if (! ( jas_tvparser_next ( tvp ) ) ) { goto error ; } <S2SV_ModStart> = atoi ( jas_tvparser_getval ( tvp ) ) ; if (! ( jas_tvparser_next ( tvp ) ) ) { goto error ; } if (! ( jas_taginfo_nonull ( jas_taginfos_lookup ( jas_taginfos_lookup ( jas_taginfos_lookup ( jas_taginfos_lookup ( jas_taginfos_lookup ( jas_taginfos_lookup ( jas_taginfos_lookup ( jas_taginfos_lookup ( jas_taginfos_lookup ( jas_taginfos_lookup ( jas_taginfos_lookup ( jas_taginfos_lookup ( jas_taginfos_lookup ( jas_taginfos_lookup ( jas_taginfos_lookup ( jas_taginfos_lookup ( jas_taginfos_lookup ( jas_taginfos_lookup ( jas_taginfos_lookup ( jas_taginfos_lookup,0
377,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
378,"<S2SV_ModStart>, yt0_0, yt1_0, yt2_0, xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_0, x_h2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1",0
379,<S2SV_ModStart> mntent ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ;,0
380,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
381,"<S2SV_ModStart> ( req ) ) ; rb_hash_aset ( env, method_name_val, req_method_name ( req ) ) ; rb_hash_aset ( env, script_name_val, req_script_name ( req ) ) ; rb_hash_aset ( env, path_info_val, req_path_info ( req ) ) ; rb_hash_aset ( env, query_string_val, rb_query_string ( req ) ) ; rb_hash_aset ( env, query_string_val, rb_query_string ( req ) ) ; rb_hash_aset ( env, query_string_val, rb_query_string ( req ) ) ; rb_hash_aset ( env, query_string_val, rb_query_string ( req ) ) ; rb_hash_aset ( env, query_string_val, rb_query_string ( req ) ) ; rb_hash_aset ( env, query_string_val, rb_query_string ( req ) ) ; rb_hash_aset ( env, query_string_val, rb_query_string ( req ) ) ; rb_hash_aset ( env,",0
382,"<S2SV_ModStart> endif int col_type <S2SV_ModEnd>, prepare_retval ; <S2SV_ModStart>, prepare_retval ; # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = imp_dbh -> use_server_side_prepare ; if ( attribs ) { svp = DBD_ATTRIB_GET_SVP ( attribs, ""mysql_server_prepare"", 20 ) ; imp_sth -> use_server_side_prepare = SvTRUE ( * svp ) ; imp_sth -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare ; svp = DBD_ATTRIB_GET_SVP ( attribs, ""async"", 5 ) ; if ( svp && SvTRUE ( * svp ) ) { # if MYSQL_ASYNC imp_sth -> is_async = TRUE ; imp_sth -> use_server_side_prepare = FALSE ; # else do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY",0
383,"<S2SV_ModStart> int eol ; size_t <S2SV_ModEnd> need = 0 <S2SV_ModStart> screen, { if ( screen -> data_limit <= ( size_t ) need ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = 0 ; return ; } <S2SV_ModStart> screen, { if ( screen -> data_limit <= ( size_t ) need ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ) ; free ( line ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = 0 ; return ; } if ( screen -> data_limit <= ( size_t ) need ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; free ( line ) ; scp -> data_buffer = ( Char * ) malloc (",0
384,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> val ) ) strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ( val < 0 ) strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; else strcpy <S2SV_ModEnd> ( str,",0
385,"<S2SV_ModStart> 5 ) ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( length == 5 ) ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( length == 5 ) ; ASSERT ( length == 5",0
386,"<S2SV_ModStart> cycles ) ; if ( unlikely ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; } if ( ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; } else if ( ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { if ( ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; }",0
387,"<S2SV_ModStart> { strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_ID ) { strncat ( str, ""ID:"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_STR ) { strncat ( str, ""String:"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; strncat ( str, ""\'"", len ) ; } else if ( lex -> tk == LEX_STR ) { strncat ( str, ""String:"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_ID ) { strncat ( str, ""ID:"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; strncat ( str, ""\'"", len ) ; } else if ( lex -> tk == LEX_ID ) { strncat ( str, ""ID:"", len ) ; strncat",0
388,,1
389,"<S2SV_ModStart> * output ; size_t i ; <S2SV_ModStart> MagickFalse ) ; input = fopen_utf8 ( argv [ 1 ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ 1 ] ) ; continue ; } for ( i = 2 ; i < ( ssize_t ) ( argc - 1 ) ; i ++ ) { # if 0 fprintf ( stderr, ""DEBUG: <S2SV_blank> Concatenate <S2SV_blank> Image: <S2SV_blank> \\""%s\\""\\n"", argv [ i ] ) ; # endif input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( c = fgetc ( input ) ) ( void ) fputc ( ( char ) c, output ) ; ( void ) fclose ( input ) ; ( void ) remove_utf8 ( argv [ i ] ) ; } ( void ) fclose ( output ) ; <S2SV_ModStart> ( void ) remove_utf8 ( argv [ i ] ) ;",0
390,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
391,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int setpwnam ( <S2SV_ModStart> ( fp = safe_mkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> atomic_dir ) ) == NULL ) return - 1 ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( lckpwdf ( ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( lckpwdf ( ) < 0 ) goto fail ; pwf = fopen ( PASSWD_FILE, ""r"" ) ; if (! found && linebuf [ namelen ] == ':' &&! strncmp ( linebuf, pwd -> pw_name, namelen",0
392,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> int right ; if ( tree [ i ] <= 0 ) left = num_events [ - tree [ i ] ] ; else left = convert_distribution ( tree [ i ], tree, branch_ct, num_events ) ; if ( tree [ i + 1 ] <= 0 ) right = num_events [ - tree [ i + 1 ] ] ; if ( tree [ i + 1 ] <= 0 ) right = convert_distribution ( tree [ i + 1 ], tree, branch_ct, num_events ) ; if ( tree [ i + 2 ] <= 0 ) left = num_events [ - tree [ i + 2 ] ] ; else right = convert_distribution ( tree [ i + 2 ], tree, branch_ct, num_events ) ; if ( tree [ i + 3 ] <= 0 ) left = num_events [ - tree [ i + 3 ] ] ; if ( tree [ i + 3 ] <= 0 ) left = num_events [ - tree [ i + 3 ] ] ; else left = convert_distribution ( tree [ i + 3 ], tree, branch_ct, num_events ) ; if ( tree [",0
393,"<S2SV_ModStart> s2 ) { int ret ; ret = memcmp <S2SV_ModEnd> ( s1,",0
394,"<S2SV_ModStart> TRUE ; } Jid * jid_from = jid_create ( from ) ; Jid * jid_to = jid_create ( to ) ; if (! jid_from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> jid from: <S2SV_blank> %s"", from ) ; return TRUE ; } if ( g_strcmp0 ( name, ""received"" )!= 0 ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> unrecognised <S2SV_blank> stanza <S2SV_blank> name: <S2SV_blank> %s"", name ) ; return TRUE ; } if ( g_strcmp0 ( name, ""sent"" )!= 0 ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> unrecognised <S2SV_blank> stanza <S2SV_blank> name: <S2SV_blank> %s"", name ) ; return TRUE ; } if ( g_strcmp0 ( name, ""received"" )!= 0 ) && ( g_strcmp0 ( name, ""received"" )!= 0 ) ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> unrecognised <S2SV_blank> stanza <S2SV_blank> name: <S2SV_blank> %s"", name ) ; return TRUE ; } if ( g_strcmp0 ( name, ""received"" )",0
395,"<S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options ( ) ; log_flush ( LOG_MODE_INFO ) ; return 1 ; } else if ( type == CONF",0
396,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
397,"<S2SV_ModStart> md -> raw_packet ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } if ( st -> st_oakley. ta_decrypt == NULL ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } if ( st -> st_oakley. ta_decrypt == NULL ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } if ( st -> st_oakley. ta_decrypt == NULL ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } if ( st -> st_oakley. ta_decrypt == NULL ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we",0
398,<S2SV_ModStart> ; if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; },0
399,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_string ( cJSON <S2SV_ModStart> item ) { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> valuestring ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
400,"<S2SV_ModStart> 1 ) res = vpx_codec_encode_one ( ctx <S2SV_ModEnd>, img, <S2SV_ModStart>, img, pts, duration, flags <S2SV_ModEnd> ) ; else <S2SV_ModStart> i -- ) { if ( ( res = vpx_codec_encode_one ( ctx <S2SV_ModEnd>, img, <S2SV_ModStart>, img, pts, duration, flags, deadline ) ) ) break ; ctx -- ; if ( img ) img -- ; } } else { int i ; for ( i = num_enc - 1 ; i >= 0 ; i -- ) { if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) break ; ctx -- ; if ( img ) img -- ; } else { if ( ctx -> priv -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) break ; ctx -- ; if ( img ) img -- ; } else { int i ; for ( i = num_enc - 1 ; i >= 0 ; i -- ) { if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) break ; ctx",0
401,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, spacestr, buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> prestring\\n"" ) ; return 1 ; } <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, spacestr, buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting",0
402,"<S2SV_ModStart> cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 3 ) { win_set_geom ( 0, - 1, 0, - 1 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, rows0 ) ; } else if ( arg1 == 3 ) { win_set_geom ( 0, - 1, 0, - 1 ) ; term. rows0 = rows0 ; term. rows0 = rows0 ; term. cols",0
403,<S2SV_ModStart> ++ ) s [ i ] = 0 ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++,0
404,"<S2SV_ModStart> ; if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return -",0
405,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 16 ) ) vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 32 ) ) vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) vpx_write_literal <S2SV_ModEnd> ( w,",0
406,"<S2SV_ModStart> ( ent!= NULL && st == 0 ) { st = populate_policy ( context, ld, ent, pol_name, * policy ) ; if ( st!= 0 ) goto cleanup ; } <S2SV_ModStart> cleanup ; } st = populate_policy ( context, ld, ent, pol_name, * policy ) ; if ( st!= 0 ) { if ( st!= 0 ) goto cleanup ; ldap_msgfree ( result ) ; if ( st!= 0 ) { if ( * policy!= NULL ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; } }",0
407,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER ; <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER ; <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) return IHEVCD_INVALID_HEADER ;,0
408,"<S2SV_ModStart> ) ) { switch ( c ) { case'<S2SV_blank>': break ; case 'e' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'E' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 't' : trunc_8to4 = SF_TRUE ; break ; case 'T' : trunc_8to4 = SF_FALSE ; break ; case'm' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else { header_put_le_long ( psf, data ) ; } ; count += 1 ; break ; case '2' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else { header_put_le_long ( psf, data ) ; } ; count += 2 ; break ; case '4' : data = va_arg ( argptr, unsigned int ) ; if (",0
409,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGOFS + i ] = d -> msg [ i ] ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN + i ] = d -> msg [ i ] ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGOFS + i ] = d -> msg [ i ] ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN + i ] = d -> msg [ i ] ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN,0
410,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( ResourceLimitError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( ResourceLimitError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( ResourceLimitError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( ResourceLimitError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( ResourceLimitError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( ResourceLimitError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( ResourceLimitError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( ResourceLimitError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( ResourceLimitError, ""InsufficientImageDataInFile"" )",0
411,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } child = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } if ( copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; <S2SV_ModEnd> rv = copy_file <S2SV_ModStart> ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; }",0
412,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> : return vpx_mse16x16 <S2SV_ModEnd> ; } },0
413,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
414,"<S2SV_ModStart> ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, send_pa, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REP ) { return return_pkinit_rep ( context, request, reply, send_pa, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, send_pa, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, send_pa, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, send_pa, cb,",0
415,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
416,"<S2SV_ModStart> flags ) ; <S2SV_ModEnd> v4l2_buf = to_vb2_v4l2_buffer <S2SV_ModStart> v4l2_buf ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left > frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame\\n"", frame_len ) ; return ; } if ( input -> buf_cur_space_left > frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame",0
417,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
418,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> ssize_t count ;,0
419,<S2SV_ModStart> && rxent -> service_id == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> dport == sport ) { rx_cache_hint = i ; * opcode = rxent -> opcode ; return ( 1 ) ; } if ( rxent -> callnum == EXTRACT_32BITS ( & rxh -> callNumber ) && rxent -> server. s_addr == sip && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> dport == sport ) { rx_cache_hint = i ; * opcode = rxent -> opcode ; return ( 0 ) ; } if ( rxent -> callnum == EXTRACT_32BITS ( & rxh -> callNumber ) && rxent -> client. s_addr == clip && rxent -> server. s_addr == sip && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) &&,0
420,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { memset ( adhoc_start -> ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( adhoc_start -> ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid,",0
421,"<S2SV_ModStart> ; if ( sfe -> valuelen > context -> bufsize ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, sfe -> valuelen, & sfe -> valueval [ sfe -> valuelen ] ) ; if ( error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if ( count > context -> bufsize ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, sfe -> valuelen, & sfe -> valueval [ sfe -> namelen ] ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, sfe -> valuelen, & sfe -> valueval [ sfe -> namelen ] ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, sfe -> valuelen, & sfe -> valueval [ sfe ->",0
422,"<S2SV_ModStart> = data ; struct l2cap_conf_rfc <S2SV_ModEnd> rfc = { <S2SV_ModStart>. mode = L2CAP_MODE_ERTM ; rfc. txwin_size = L2CAP_DEFAULT_TX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) ; break ; } req -> dcid = cpu_to_le16 ( pi -> dcid ) ; req -> flags = cpu_to_le16 ( 0 ) ; req -> flags |= cpu_to_",0
423,"<S2SV_ModStart> { do { if ( r < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; break ; }",0
424,<S2SV_ModStart> u1_nal_ref_idc ) ; if ( ( u1_nal_ref_idc < 0 ) || ( u1_nal_ref_idc > MAX_NAL_REF_IDC ) || ( ( u1_nal_ref_idc < 0 ) || ( ( u1_nal_ref_idc > MAX_NAL_REF_IDC ) || ( u1_nal_ref_idc > MAX_NAL_REF_IDC ) || ( ( u1_nal_ref_idc > MAX_NAL_REF_IDC ) || ( u1_nal_ref_idc > MAX_NAL_REF_IDC ) ) || ( u1_nal_ref_idc < 0 ) || ( ( u1_nal_ref_idc > MAX_NAL_REF_IDC ) || ( u1_nal_ref_idc > MAX_NAL_REF_IDC ) || ( u1_nal_ref_idc > MAX_NAL_REF_IDC ) || ( u1_n,0
425,"<S2SV_ModStart>!= 0 ) { if ( stok ( pair, ""="", & tok ) == 0 ) { mprAddItem ( app -> formData, sclone ( tok ) ) ; } else { mprAddItem ( app -> formData, sclone ( tok ) ) ; pair = stok ( 0, ""&"", & tok ) ; while ( pair!= 0 ) { if ( stok ( tok, ""="", & tok ) == 0 ) { mprAddItem ( app -> formData, sclone ( pair ) ) ; pair = stok ( 0, ""&"", & tok ) ; while ( pair!= 0 ) { mprAddItem ( app -> formData, sclone ( tok ) ) ; } else { mprAddItem ( app -> formData, sclone ( tok ) ) ; pair = stok ( 0, ""&"", & tok ) ; while ( pair!= 0 ) { if ( stok ( tok, ""="", & tok ) == 0 ) { mprAddItem ( app -> formData, sclone ( tok ) ) ; pair = stok ( 0, ""&"", & tok ) ; while ( pair!= 0 ) { mprAddItem ( app -> formData, sclone ( tok ) ) ; } }",0
426,"<S2SV_ModStart> = uid ; <S2SV_ModEnd> spin_lock_irq ( & <S2SV_ModStart> new -> count = 0 ; } else if (! atomic_add_unless ( & ucounts -> count, 1, INT_MAX ) ) { ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; ucounts = NULL ; } else if (! atomic_add_unless ( & ucounts -> count, 1, INT_MAX ) ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; ucounts = find_ucounts ( ns, uid, hashent ) ; if (! ucounts ) ucounts = NULL ; spin_lock_irq ( & ucounts_lock ) ; ucounts = find_ucounts ( ns, uid, hashent ) ; if (! ucounts ) ucounts = NULL ; } else if (! atomic_add_unless ( & ucounts -> count, 1, INT_MAX ) ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; return ucounts ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
427,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd>, int open_flags <S2SV_ModStart> = 0 ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) )!= ( FMODE_READ | FMODE_WRITE ) <S2SV_ModEnd> ) goto no_delegation <S2SV_ModStart> ) ; __update_open_stateid <S2SV_ModEnd> ( state, <S2SV_ModStart>, open_stateid, fmode <S2SV_ModEnd>, open_flags ) <S2SV_ModStart>, open_stateid, fmode <S2SV_ModEnd>, open_flags )",0
428,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
429,"<S2SV_ModStart> * xd, vpx_bit_depth_t bit_depth <S2SV_ModStart> int sse ; vpx_bit_depth_t bit_depth <S2SV_ModStart> ) ; ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & bit_depth <S2SV_ModStart> = sse ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist, bit_depth <S2SV_ModStart> = sse ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], & rate, & dist, bit_depth <S2SV_ModStart> } else { vpx_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist, bit_depth ) ; * out_rate_sum = ( int ) rate_sum ; * out_dist_sum =",0
430,"<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_trans_huge_end ( pmd ) ) { if ( pmd_none_or_trans_huge_end ( pmd ) ) { if ( mincore_huge_pmd ( vma, pmd, addr, next, vec ) ) { vec += ( next - addr ) >> PAGE_SHIFT ; continue ; } } else { if ( pmd_none_or_clear_bad ( pmd ) ) mincore_unmapped_range ( vma, addr, next, vec ) ; else if ( pmd_none_or_trans_huge_end ( pmd ) ) { if ( mincore_huge_pmd ( vma, pmd, addr, next, vec ) ) { vec += ( next - addr ) >> PAGE_SHIFT ; continue ; } } } else { if ( pmd_none_or_trans_huge_end ( pmd ) ) mincore_unmapped_range ( vma, addr, next, vec ) ; else if ( pmd_none_or_trans_huge_end ( pmd ) )",0
431,"<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) { return ( PAM_BUF_ERR ) ; } if ( index >= PAM_MAX_RESP_SIZE ) { return ( PAM_BUF_ERR ) ; } if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; ( void ) strcpy ( * ret_username, username ) ; return ( PAM_SUCCESS ) ; } if ( index >= PAM_MAX_RESP_SIZE ) { return ( PAM_BUF_ERR ) ; } if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; ( void ) strcpy ( * ret_username, username ) ; return ( PAM_SUCCESS ) ; }",0
432,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { return vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> -> tree_probs ) <S2SV_ModEnd> ; } <S2SV_null>",0
433,"<S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; dst_ptr2 += src_stride ; } } src_ptr1 = src - extend_left ; src_ptr2 = src + src_stride * ( height - 1 ) - extend_left ; dst_ptr1 = src + src_stride * ( height - 1 ) - extend_left ; dst_ptr2 = src + src_stride * ( height - 1 ) - extend_left ; for ( i = 0 ; i < extend_top ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_bottom ; ++ i ) { memcpy ( dst_ptr2, src_ptr2, linesize ) ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_right",0
434,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
435,"<S2SV_ModStart> depth ++ ; if (! smb_fdata1 ( ndo, buf, NULL, maxbuf, unicodestr ) ) { ND_PRINT ( ( ndo, ""Invalid <S2SV_blank> format\\n"" ) ) ; return ( NULL ) ; } buf = smb_fdata1 ( ndo, buf, NULL, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; buf = smb_fdata1 ( ndo, buf, NULL, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; buf = smb_fdata1 ( ndo, buf, NULL, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; buf = smb_fdata1 ( ndo, buf, NULL, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; buf = smb_fdata1 ( ndo, buf, NULL, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ;",0
436,"<S2SV_ModStart> ; } n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n < ( length + 8 ) ) { return ERROR_FAILURE ; } <S2SV_ModStart> length ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n < ( length + 8 ) ) { return ERROR_FAILURE ; } netBufferRead ( context -> txBuffer, buffer, offset, length ) ; header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA",0
437,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_keyset ) ) ) ) ) ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb",0
438,"<S2SV_ModStart> = 11211 ; if ( settings. port < 0 ) { fprintf ( stderr, ""%s: <S2SV_blank> Invalid <S2SV_blank> port <S2SV_blank> %d\\n"", __FILE__, __LINE__ ) ; exit ( EXIT_FAILURE ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Invalid <S2SV_blank> port <S2SV_blank> %d\\n"", __FILE__, __LINE__ ) ; exit ( EXIT_FAILURE ) ; } if ( settings. socketpath == NULL ) { fprintf ( stderr, ""%s: <S2SV_blank> Invalid <S2SV_blank> socketpath <S2SV_blank> %s"", __FILE__, __LINE__ ) ; exit ( EXIT_FAILURE ) ; } if ( settings. socketpath == NULL ) { fprintf ( stderr, ""%s: <S2SV_blank> Invalid <S2SV_blank> socketpath <S2SV_blank> %s\\n"", __FILE__, __LINE__ ) ; exit ( EXIT_FAILURE ) ; } if ( settings. socketpath == NULL ) { fprintf ( stderr, ""%s: <S2SV_blank> Invalid <S2SV_blank> socketpath <S2SV_blank> %s\\n"", __FILE__, __LINE__ ) ; exit ( EXIT_FAILURE ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Invalid <S2SV_blank> socketpath <S2SV_blank> %s\\n"", __FILE__, __",0
439,"<S2SV_ModStart> ; # endif # ifdef MONO_HAS_SEMAPHORES g_sem_lock ( & finalizer_sem ) ; # else WaitForSingleObjectEx ( finalizer_event, INFINITE, FALSE ) ; # endif",0
440,"<S2SV_ModStart> x_7 ; WORD32 x_0, x_1, x_2, x_3 ; WORD32 x_4, x_5, x_6, x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_0, x_1, x_2, x_3 ; WORD32 x_4, x_5, x_6, x_7 ; WORD32 x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_a = * x0 ++ ; x_b = * x0 ++ ; x_c = * x0 ++ ; x_d = * x0 ++ ; x_e = * x0 ++ ; x_d = * x0 ++ ; x_3 = * x0 ++ ; x_4 = * x0 ++ ; x_5 = * x0 ++ ; x_6 = * x0 ++ ; x_7",0
441,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
442,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
443,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
444,"<S2SV_ModStart>, frames ; size_t width, height ; size_t target_width, target_height ; if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } if ( argc < 5 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if ( fin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> write\\n"", fout ) ; return 1 ; } if ( argc >= 6 ) frames =",0
445,"<S2SV_ModStart>, result ; if ( num_fields < 0 ) { Py_DECREF ( l ) ; return 0 ; } _Py_IDENTIFIER ( _attributes ) ; PyObject * s, * l ; if (! PyUnicode_FromString ( attrs [ num_fields ] ) ) { Py_DECREF ( l ) ; return 0 ; } l = PyTuple_New ( num_fields ) ; if (! l ) return 0 ; for ( i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } PyTuple_SET_ITEM ( l, i, s ) ; } for ( i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } PyTuple_SET_ITEM ( l, i, s ) ; } for ( i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) {",0
446,"<S2SV_ModStart> = VPX_CODEC_OK ; <S2SV_ModEnd> struct vpx_codec_alg_priv * <S2SV_ModStart> struct vpx_codec_alg_priv * priv ; vpx_codec_enc_cfg_t * cfg <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> ; } ctx -> priv = calloc ( 1, sizeof ( * ctx -> priv ) ) ; ctx -> priv -> sz = sizeof ( * ctx -> priv ) ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> init_flags = ctx -> init_flags ; cfg = & ctx -> config ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage ; i ++ ) ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg. pkt_list = malloc ( priv -> vp8_cfg. pkt_list. head ) ; if (! priv -> cx_data ) { return VPX_CODEC_MEM_ERROR ; } priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h * 3 / 2 * 2 ; if ( priv -> cx_",0
447,<S2SV_ModStart> } if ( cnt_c > BOT ) { pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> total_freq = totfr ; return ret ; } pixel -> lookup [ x ] = cnt_c + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = value ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 16 ; i ++ ) pixel -> freq [ i ] = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> lookup [ i ] = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> lookup [ i ] = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> lookup [ i ] = (,0
448,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } if ( ctx -> fragments. enabled,0
449,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
450,"<S2SV_ModStart> ; if (! efe -> icbTag. strategyType ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if (! efe -> icbTag. strategyType ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode",0
451,"<S2SV_ModStart> data ) { enc28j60WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & ENC28J60_MISTAT_BUSY <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & ENC28J60_MISTAT_BUSY <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & ENC28J60_MISTAT_BUSY <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & ENC28J60_MISTAT_BUSY <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & ENC28J60_MISTAT_BUSY",0
452,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { int n = 0 ; char * ptr = fmt ; while ( * ptr!= '\\0' ) if ( * ptr == '%' ) return 1 ; if ( * ptr =='s' || * ptr == 'S' ) return 1 ; if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'u' ) ptr,0
453,"<S2SV_ModStart> ( ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragReverseSimpleTest"", DefragReverseSimpleTest ) ; UtRegisterTest ( ""DefragSturgesNovakBsdTest"", DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""DefragSturgesNovakLinuxTest"", DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""DefragSturgesNovakWindowsTest"", DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""DefragSturgesNovakFirstTest"", DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""DefragSturgesNovakLastTest"", DefragSturgesNovakLastTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragIn",0
454,<S2SV_ModStart> ; if ( object_length > sizeof ( new_object. data ) - add_v1_record ) { new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( object_length > sizeof ( new_object. data ) - add_v1_record ) { new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( object_length + add_v1_record > sizeof ( new_object. data ) ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( object_length > sizeof ( new_object. data ) - add_v1_record ) { new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( object_length + add_v1_record > sizeof ( new,0
455,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
456,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
457,"<S2SV_ModStart> p_enc ) ; if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_in. i_codec ) { if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_in. i_codec ) { msg_Err ( p_enc, ""Unsupported <S2SV_blank> codec <S2SV_blank> %d"", p_enc -> fmt_in. i_codec ) ; return NULL ; } else { if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_in. i_codec ) { msg_Err ( p_enc, ""Unsupported <S2SV_blank> codec <S2SV_blank> %d"", p_enc -> fmt_in. i_codec ) ; return NULL ; } else { if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_in. i_codec ) { msg_Err ( p_enc, ""Unsupported <S2SV_blank> codec <S2SV_blank> %d"", p_enc -> fmt_in. i_codec ) ; return NULL ; } else { if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_in. i_codec ) { msg_Err ( p",0
458,"<S2SV_ModStart> ] = '\\0' ; if ( bstrchr ( fname, '\\0' ) >= 0 ) { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", fname ) ; } else if ( bstrchr ( fname, '\\0' ) >= 0 ) { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", fname ) ; } else if ( bstrchr ( fname, '\\0' ) >= 0 ) { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", fname ) ; } else if ( bstrchr ( fname, '\\0' ) >= 0 ) { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", fname ) ; } else if ( bstrchr ( fname, '\\0' ) >= 0 ) { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", fname ) ; } else if ( bstrchr ( fname, '\\0' ) >= 0 ) { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%",0
459,<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> ) ; for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; <S2SV_ModStart> ) ; for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; <S2SV_ModStart> ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ].,0
460,"<S2SV_ModStart> ; if (! efe -> icbTag. strategyType ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if (! efe -> icbTag. strategyType ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode",0
461,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
462,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
463,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; <S2SV_ModEnd> YV12_BUFFER_CONFIG * fb <S2SV_ModStart> * fb ; vpx_get_reference_dec ( ctx -> pbi, data -> idx, & fb ) ; yuvconfig2image ( & data -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
464,"<S2SV_ModStart> ++ ) { if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ++ ) { if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOS <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ++ ) { if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ++ ) { if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA",0
465,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == expr_ty ) { expr_ty e ; e = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; if (! e ) return NULL ; return Expr ( e, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; } ch = CHILD ( n, 2 ) ; if ( TYPE ( ch ) == testlist ) expr1 = ast_for_testlist ( c, ch ) ; else expr1 = ast_for_expr ( c, ch ) ; if (! expr1 ) return NULL ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; ch = CHILD ( n, 3 ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; switch ( TYPE ( ch ) == testlist ) expr1 = ast_for_testlist ( c, ch ) ; else expr1 = ast_for_expr ( c, ch ) ; if (! expr",0
466,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> int r, <S2SV_ModStart> int sig_stride = 16 ; unsigned char * mc_running_avg_y = mc_running_avg -> y_buffer + y_offset ; int mc_avg_y_stride = mc_running_avg -> y_stride ; unsigned char * running_avg_y = running_avg -> y_buffer + y_offset ; int running_avg_y_stride = running_avg -> y_stride ; unsigned char * running_avg_y = running_avg -> y_buffer + y_offset ; int avg_y_stride = running_avg -> y_stride ; int c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; i ++ ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { if ( ( sig [ c ] + adjustment ) > 255 ) running",0
467,"<S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; if ( ( sockPtr -> flags & NS_CONN_ENTITYTOOLARGE )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; if ( ( sockPtr -> flags & NS_CONN_ENTITYTOOLARGE )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; if ( ( sockPtr -> flags & NS_CONN_ENTITYTOOLARGE )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; } } else { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; if ( ( sockPtr -> flags & NS_CONN_ENTITYTOOLARGE )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; if ( ( sockPtr -> flags & NS_CONN_ENTITYTOOLARGE )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ;",0
468,"<S2SV_ModStart> = 0 ; # if XTENSA_HAVE_COPROCESSORS coprocessor_release_all ( ti ) ; # endif <S2SV_ModStart> = 0 ; if ( xtregs -> cp0 & XTREGS_CP0_BITFLIPS ) ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs -> cp0 ) ) ; else ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs -> cp0 ) ) ;",0
469,<S2SV_ModStart> -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> ttl = queueItem -> ancillary. ttl ; # if ( ETH_SUPPORT == ENABLED ) message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif,0
470,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_ModStart> -> src_dev ; <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_ModStart> ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for""",0
471,"<S2SV_ModStart> int error ; struct mb2_cache * ext2_mb_cache = EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> get_bh ( new_bh ) ; mb2_cache_insert ( ext2_mb_cache, new_bh <S2SV_ModEnd> ) ; } <S2SV_ModStart> new_bh ) ; mb2_cache_insert ( ext2_mb_cache, new_bh <S2SV_ModEnd> ) ; }",0
472,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> map ) { vpx_active_map_t * const map = va_arg ( args, vpx_active_map_t * ) ; if (! vp9_set_active_map ( ctx -> cpi, map -> active_map, map -> rows, map -> cols ) ) return VPX_CODEC_INVALID_PARAM ; else return VPX_CODEC_INVALID_PARAM ; } if ( map ) { if (! vp9_set_active_map ( ctx -> cpi, map -> active_map, map -> rows, map -> cols ) ) return VPX_CODEC_INVALID_PARAM ; else return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
473,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image",0
474,"<S2SV_ModStart>. size,! WARN_ON_ONCE ( <S2SV_ModStart>. size,! WARN_ON_ONCE ( <S2SV_ModStart>. size,! WARN_ON_ONCE ( task_event -> event_id. pid ) ) ; task_event -> event_id. pid = perf_event_pid ( event, task ) ; task_event -> event_id. ppid = perf_event_pid ( event, task ) ; task_event -> event_id. tid = perf_event_tid ( event, task ) ; task_event -> event_id. ptid = perf_event_tid ( event, current ) ; task_event -> event_id. pid = perf_event_pid ( event, task ) ; task_event -> event_id. ppid = perf_event_pid ( event, task ) ; task_event -> event_id. ppid = perf_event_pid ( event, task ) ; task_event -> event_id. ppid = perf_event_pid ( event, current ) ; task_event -> event_id. ptid = perf_event_tid ( event, current ) ;",0
475,"<S2SV_ModStart> AcquireQuantumMemory ( imsx, imsy <S2SV_ModEnd>, 1 ) <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd>, 1 ) <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart>",0
476,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { <S2SV_ModEnd> if ( data <S2SV_ModStart> * ) data ; YV12_BUFFER_CONFIG sd ; <S2SV_ModStart> VP9_REFFRAME ) frame -> frame_type, & sd ) ; return vp9_copy_reference_dec ( ctx -> pbi, ( VP9_REFFRAME ) frame -> frame_type, & sd ) ; } else if ( data ) { vpx_ref_frame_t * ) data ; YV12_BUFFER_CONFIG sd ; image2yuvconfig ( & frame -> img, & sd ) ; return vp9_copy_reference_dec ( ctx -> pbi, ( VP9_REFFRAME ) frame -> frame_type, & sd ) ; } else { return vp9_copy_reference_dec ( ctx -> pbi, ( VP9_REFFRAME ) frame -> frame_type, & sd ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
477,"<S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, <S2SV_ModEnd> u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, <S2SV_ModEnd> u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby2, <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby2,",0
478,"<S2SV_ModStart>, u4_y_offset ; IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; <S2SV_ModStart> B_PIC ) impeg2d_dec_pnb_mb_params ( ps_dec, & u4_x_offset, & u4_y_offset ) ; else if ( ps_dec -> e_pic_type == B_PIC ) impeg2d_dec_p_mb_params ( ps_dec, & u4_x_offset, & u4_y_offset ) ; else if ( ps_dec -> e_pic_type == B_PIC ) impeg2d_dec_p_mb_params ( ps_dec, & u4_x_offset, & u4_y_dst_offset, & u4_x_offset, & u4_y_dst_offset ) ; else if ( ps_dec -> e_pic_type == B_PIC ) impeg2d_dec_p_mb_params ( ps_dec, & u4_x_offset, & u4_y_dst",0
479,"<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> const YV12_BUFFER_CONFIG * const cfg = & cm -> frame_bufs [ <S2SV_ModEnd> cm -> ref_frame_map <S2SV_ModStart> ] ]. buf ; if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else { if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } } else if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = & cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_",0
480,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
481,"<S2SV_ModStart> -> mbmi ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ plane_bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ plane_bsize ] ; const int step = 1 << ( tx_size << 1 ) ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) )",0
482,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ;",0
483,"<S2SV_ModStart> nrow ) { if ( _TIFFReadEncodedStripAndAllocBuffer ( tif, p0, buf, bufsize ) < 0 ) { return ( 0 ) ; } <S2SV_ModStart> img -> row_offset ; if ( buf == NULL ) { if ( _TIFFReadEncodedStripAndAllocBuffer ( tif, p1, bufsize, ""gtStripSeparate"" ) < 0 ) { return ( 0 ) ; } else { if ( _TIFFReadEncodedStripAndAllocBuffer ( tif, buf, bufsize, ""gtStripSeparate"" ) < 0 ) { return ( 0 ) ; } else { if ( _TIFFReadEncodedStripAndAllocBuffer ( tif, buf, bufsize, ""gtStripSeparate"" ) < 0 ) { return ( 0 ) ; } else { if ( _TIFFReadEncodedStripAndAllocBuffer ( tif, buf, bufsize, ""gtStripSeparate"" ) ; } else { if ( _TIFFReadEncodedStripAndAllocBuffer ( tif, buf, bufsize, ""gtStripSeparate"" ) < 0 ) { return ( 0 ) ; } else { if ( _TIFFReadEncodedStripAndAllocBuffer ( tif",0
484,"<S2SV_ModStart> } } } if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) { Py_FatalError ( ""Comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 1 ) ) ; Py_FatalError ( ""Comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 1 ) ) ) ; } else if ( TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) { Py_FatalError ( ""Comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 2 ) ) ; Py_FatalError ( ""Comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 3 ) ) ; Py_FatalError ( ""Comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 3 ) ) ; } else if ( TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) { Py_FatalError ( ""Comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 2 ) ) ; Py_FatalError ( ""Comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d""",0
485,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] =,0
486,<S2SV_ModStart> number ) ) { if ( num & ( 1 << ( number - 1 ) ) ) return num - ( 1 << number ) ; else return num ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
487,"<S2SV_ModStart> [ plane ] ; const int x = vpx_img_plane_width ( img, plane ) ; const int y = vpx_img_plane_height ( img, plane ) ; const int y2 = vpx_img_plane_height ( img, plane ) ; const int y3 = vpx_img_plane_height ( img, plane ) ; const int y4 = vpx_img_plane_width ( img, plane ) ; const int y4 = vpx_img_plane_height ( img, plane ) ; const int y5 = vpx_img_plane_height ( img, plane ) ; const int y6 = vpx_img_plane_height ( img, plane ) ; const int y7 = vpx_img_plane_width ( img, plane ) ; const int w = vpx_img_plane_width ( img, plane ) ; const int h = vpx_img_plane_height ( img, plane ) ; int w = vpx_img_plane_width ( img, plane ) ; const int w = vpx_img_plane_width ( img, plane ) ; const int h = vpx_img_",0
488,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; MD5_Init ( & md5_ctx ) ; MD5_Update ( & md5_ctx, & avp -> type, sizeof ( avp ->",0
489,<S2SV_ModStart> return 0 ; actx -> key. counter [ 0 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr ) ; actx -> key. counter [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 4 ) ; actx -> key. counter [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 8 ) ; actx -> key. counter [ 0 ] = actx -> key. counter [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 4 ) ; actx -> key. counter [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 8 ) ; actx -> key. counter [ 3 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 16 ) ; actx -> key. counter [ 3 ] = actx -> key. counter [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 8 ) ; actx -> key. counter [ 3 ] = CHACHA_U8TOU32 ( ( unsigned,0
490,"<S2SV_ModStart> alg ) { if (! capable ( CAP_SYS_MODULE ) ) return ERR_PTR ( - EPERM ) ; <S2SV_ModStart>, name ) ; if (! capable ( CAP_SYS_MODULE ) ) return ERR_PTR ( - EPERM ) ; if (! <S2SV_ModStart> ( ""%s-all"", name ) ; if (! capable ( CAP_SYS_MODULE ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_MODULE ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_MODULE ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_MODULE ) ) return ERR_PTR ( - EPERM ) ; if (! request_module ( ""%s-all"", name ) ; if (! capable ( CAP_SYS_MODULE ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_MODULE ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_MODULE ) ) return ERR_PTR ( - EPERM )",0
491,"<S2SV_ModStart>. size, WARN_ON_ONCE ( comm_event -> event_id. header. size!= comm_event -> event_id. header. size ) ; if ( ret ) goto out ; comm_event -> event_id. pid = perf_event_pid ( event, comm_event -> task ) ; comm_event -> event_id. tid = perf_event_tid ( event, comm_event -> task ) ; comm_event -> event_id. pid = perf_event_pid ( event, comm_event -> task ) ; comm_event -> event_id. tid = perf_event_tid ( event, comm_event -> task ) ; perf_output_put ( & handle, comm_event -> event_id ) ; __output_copy ( & handle, comm_event -> comm, comm_event -> comm_size ) ; perf_event__output_id_sample ( event, & handle, & sample ) ;",0
492,"<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ; if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { if ( access",0
493,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock,",0
494,"<S2SV_ModStart> { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; }",0
495,"<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_close ( adata -> conn ) ; <S2SV_ModStart> goto err_close_conn ; } if ( ans == MUTT_NO ) { enum ImapExecResult rc = imap_exec ( adata, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_ERROR ) { mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; goto err_close_conn ; } else { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; goto err_close_conn ;",0
496,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
497,"<S2SV_ModStart> ""?WATCH={\\""json\\"":true};\\n"" ) ; if ( send ( gpsd_sock, line, 22, 0 )!= 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; if ( recv ( gpsd_sock, line, 22, 0 )!= 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; if ( send ( gpsd_sock, line, 22, 0 )!= 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; if ( recv ( gpsd_sock, line, sizeof ( line ) - 1, 0 )!= 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; if ( recv ( gpsd_sock, line, 22, 0 )!= 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; if ( recv ( gpsd_sock, line, 22, 0 )!= 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; if ( recv ( gpsd_sock, line, sizeof ( line ) - 1, 0 )!= 22 ) return ; memset ( line, 0, sizeof (",0
498,"<S2SV_ModStart>, & rlen, 0",1
499,"<S2SV_ModStart> * slavename ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) <S2SV_ModStart> } # endif strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> 82 ) ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> curconn -> pass_salt, user -> password, 82 ) ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> curconn -> pass_salt, 16 ) ; md5_init ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; init_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> srcaddr, pkthdr -> seskey, 0 ) ;",0
500,"<S2SV_ModStart> ) ) { if ( PyUnicode_CompareWithASCIIString ( name, ""__debug__"" ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; }",0
501,"<S2SV_ModStart> off } ; if ( strlen ( str ) < i ) { return - 1 ; } for ( i = j = 0 ; i < sizeof ( buf ) - 1 && str [ i ] ; i ++, j ++ ) { if ( str [ j ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } for ( j = 0 ; j < sizeof ( buf ) - 1 ; j ++ ) { if ( str [ j ] == '#' ) { i -- ; continue ; } for ( j = 0 ; j < sizeof ( buf ) - 1 ; j ++ ) { if ( str [ j ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } for ( j = 0 ; j < sizeof ( buf ) - 1 ; j ++ ) { if ( str [ j ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } for ( j = 0 ; j < sizeof ( buf ) - 1 ; j ++ ) { if ( str [ j ]",0
502,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
503,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
504,"<S2SV_ModStart> iv ) ; rb_ivar_set ( self, id_key_set, Qnil ) ;",0
505,"<S2SV_ModStart> sshbuf * b = NULL <S2SV_ModStart> char * pkalg, * userstyle = NULL, * key_s = NULL, * ca_s = NULL ; u_char * pkblob, * sig, have_sig ; size_t blen, slen ; int r, pktype <S2SV_ModEnd> ; if ( <S2SV_ModStart> authctxt -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if (! authctxt -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if (! authctxt -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if (! authctxt -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> valid ) { debug2 ( ""%",0
506,"<S2SV_ModStart> = 0 ; # if 1 memcpy ( & filehdr, fourcc, sizeof ( Wave64FileHeader ) - 4 ) || memcmp ( filehdr. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( filehdr. formType, wave_guid, sizeof ( wave_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! ( config -> qmode & QMODE_NO_STORE_WRAPPER ) &&! WavpackAddWrapper ( wpc, & filehdr, sizeof ( filehdr ) ) ) { error_line ( ""%s"", WavpackGetErrorMessage ( wpc ) ) ; return WAVPACK_SOFT_ERROR ; } else if (! ( config -> qmode & QMODE_IGNORE_LENGTH ) && filehdr. ckSize && filehdr. ckSize + 1 && filehdr. ckSize!= infilesize ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return W",0
507,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } exif_log ( en -> log, EXIF_LOG_CODE_COR",0
508,<S2SV_ModStart> bd_addr ) { int status ; if ( interface_ready ( ) == FALSE ) return BT_STATUS_NOT_READY ; status = btif_dm_remove_bond ( bd_addr ) ; if ( status == BT_STATUS_NOT_READY ) return BT_STATUS_NOT_READY,0
509,"<S2SV_ModStart> int i ; size_t <S2SV_ModEnd> avail ; int <S2SV_ModStart> 4 ) ; if ( nxip < 0 ) { elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL ; } <S2SV_ModEnd> expect = 8 <S2SV_ModStart> 8 ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> xmin = xmin ; snap -> xmax = xmax ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; }",0
510,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++,0
511,"<S2SV_ModStart> if ( ret ||! cm_id -> device ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; rdma_unbind_addr ( cm_id, ( struct sockaddr * ) & sin ) ; }",0
512,<S2SV_ModStart> = - 1 ; struct oe_epoll * epoll ; <S2SV_ModStart> = 0 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; <S2SV_ModStart> = 0 ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } <S2SV_ModStart> = 0 ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
513,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_ERR, """,0
514,"<S2SV_ModStart> ; if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return -",0
515,<S2SV_ModStart> 0 ; default : if ( param == MAGIC_PARAM_ELF_PHNUM_MAX ) * ( size_t * ) val = ms -> elf_phnum_max ; if ( param == MAGIC_PARAM_ELF_SHNUM_MAX ) * ( size_t * ) val = ms -> elf_shnum_max ; if ( param == MAGIC_PARAM_ELF_PHNUM_MAX ) * ( size_t * ) val = ms -> elf_phnum_max ; if ( param == MAGIC_PARAM_ELF_SHNUM_MAX ) * ( size_t * ) val = ms -> elf_shnum_max ; if ( param == MAGIC_PARAM_ELF_SHNUM_MAX ) * ( size_t * ) val = ms -> elf_shnum_max ; if ( param == MAGIC_PARAM_ELF_PHNUM_MAX ) * ( size_t * ) val = ms -> elf_phnum_max ; if ( param == MAGIC_PARAM_ELF_SHNUM_MAX ) * ( size_t * ) val = ms -> elf_shnum,0
516,<S2SV_ModStart> * journal = EXT4_JOURNAL ( page -> mapping -> host ) ; if (! trylock_page ( page ) ) unlock_page ( page ) ;,0
517,"<S2SV_ModStart> { trak = gf_isom_get_track <S2SV_ModEnd> ( movie -> <S2SV_ModStart> i + 1 ) ; GF_SAFEALLOC ( writer, TrackWriter ) ; if (! trak ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = ( GF_MediaBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_MPEG4 ) ; if (! writer -> mdia ) return GF_OUT_OF_MEM ; writer -> stbl = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_MPEG4 ) ; if (! writer -> stbl ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_",0
518,"<S2SV_ModStart> int plen ; <S2SV_ModEnd> md5_state_t state ; <S2SV_ModStart> ; # endif strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password, 82 ) ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> = '\\0' ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password, pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; if ( is_a_tty && get_terminal_size ( & width, & height )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height ) ; } if ( is_a_tty && get_terminal_size ( & width, & height )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height ) ; } if ( is_a_tty && get_terminal_size ( & width, & height )!= - 1 ) { width = htole16 ( width ) ; height =",0
519,<S2SV_ModStart> ; if ( tree_head ) { if ( tree_head -> label ) SNMP_FREE ( tree_head -> label ) ; SNMP_FREE ( tree_head -> label ) ; SNMP_FREE ( tree_head -> label ) ; if ( tree_head -> label ) SNMP_FREE ( tree_head -> label ) ; if ( tree_head -> label ) SNMP_FREE ( tree_head -> label ) ; if ( tree_head -> label ) SNMP_FREE ( tree_head -> label ) ; if ( tree_head -> label ) SNMP_FREE ( tree_head -> label ) ; if ( tree_head -> label ) SNMP_FREE ( tree_head -> label ) ; if ( tree_head -> label ) SNMP_FREE ( tree_head -> label ) ; if ( tree_head -> label ) SNMP_FREE ( tree_head -> label ) ; if ( tree_head -> label ) SNMP_FREE ( tree_head -> label ) ; if ( tree_head -> label ) SNMP_FREE ( tree_head -> label ) ; if ( tree_head -> label ) SNMP_FREE ( tree_head -> label ) ; if,0
520,"<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> bits -= 24 ; \\\n} <S2SV_ModEnd> typedef struct PCDTable <S2SV_ModStart> buffer ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; <S2SV_ModStart> buffer ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; <S2SV_ModStart> buffer ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; <S2SV_ModStart> buffer ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; <S2SV_ModStart> buffer ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; <S2SV_ModStart> buffer ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; <S2SV_ModStart> buffer ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError",0
521,"<S2SV_ModStart> += 1 ; while ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) )!= TYPE_COMMENT ) { if ( forbidden_name ( c, argname, ch, 0 ) ) goto error ; arg = arg ( argname, annotation, NULL, LINENO ( ch ), ch -> n_col_offset, c -> c_arena ) ; if (! arg ) goto error ; arg = arg ( argname, annotation, NULL, LINENO ( ch ), ch -> n_col_offset, c -> c_arena ) ; if (! arg ) goto error ; arg = arg ( argname, annotation, NULL, LINENO ( ch ), ch -> n_col_offset, c -> c_arena ) ; if (! arg ) goto error ; arg = arg ( argname, annotation, NULL, LINENO ( ch ), ch -> n_col_offset, c -> c_arena ) ; if (! arg ) goto error ; arg = arg ( argname, annotation, NULL, LINENO ( ch ), ch -> n_col_offset, c -> c_are",0
522,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
523,<S2SV_ModStart> -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) ) { # if CONFIG_VP9_HIGHBITDEPTH if ( ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) ) && ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH if ( ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && (,0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMMON <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> { int dummy_rate ; int64_t dummy_dist ; BLOCK_SIZE i ; if ( sf -> adaptive_pred_interp_filter ) { for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 16, num_4x4_w * num_4x4_blk ) ; for ( x -> sb_index = 0 ; x -> sb_index < 16 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index < 16 ; ++ x -> b_index ) for",0
525,"<S2SV_ModStart> obj_tlen ; int hexdump ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; ND_TCHECK ( * lmp_obj_header ) ; lmp_obj_header = ( const struct lmp_object_header * ) pptr ; ND_TCHECK ( * lmp_obj_header ) ; obj_tptr = pptr ; obj_tlen = EXTRACT_16BITS ( lmp_obj_header -> length ) ; ND_TCHECK ( * lmp_obj_header ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo",0
526,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inc_mvs ( const <S2SV_ModStart> ++ i ) { MV diff = { mvs [ i ]. as_mv. row - mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ]. row, mvs [ i ]. as_mv. col - mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ]. col - mbmi -> ref_mvs [ i ]. as_mv. col } ; nmv_context_counts * counts = mbmi -> counts ; for ( i = 0 ; i < 2 ; ++ i ) { MV diff = { mvs [ i ]. as_mv. row - mbmi -> ref_mvs [ i ]. as_mv. row, mvs [ i ]. as_mv. col - mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ]. col - mbmi -> ref_mvs [ i ]. as_mv. col } ; vp9_inc_mv ( & diff, counts ) ; }",0
527,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>",0
528,"<S2SV_ModStart> ; if ( pskb_expand_head ( skb_out, size - skb -> len, GFP_ATOMIC ) < 0 ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; if ( skb_out -> len < skb -> len ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_set_network_header ( skb_out ) ; skb_set_transport_header ( skb_out ) ;",0
529,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
530,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> DEBUGMSGTL ( ( <S2SV_ModStart> ( ""init_mib"", ""Seen <S2SV_blank> MIBDIRS: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> directories <S2SV_blank>...\\n"", env_var ) ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strdup ( env_var ) ; env_var = strdup ( env_var ) ; env_var = strdup ( env_var ) ; env_var = strdup ( env_var ) ; env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strdup ( env_var ) ; env_var = strdup ( env_var",0
531,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) ) <S2SV_ModStart> fd, UI_SET_KEYBIT, key_map [ x ]. mapped_id ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, UI_DEV_CREATE, & dev ) ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> create <S2SV_blank> uinput <S2SV_blank> device"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, UI_DEV_CREATE, & dev ) ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> create <S2SV_blank> uinput <S2SV_blank> device"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
532,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
533,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s,",0
534,"<S2SV_ModStart> * pctx ) { iakerb_ctx_id_t ctx ; krb5_error_code code ; * pctx = NULL ; ctx = k5alloc ( sizeof ( * ctx ), & code ) ; if ( ctx == NULL ) goto cleanup ; ctx -> defcred = GSS_C_NO_CREDENTIAL ; ctx -> state = IAKERB_AS_REQ ; ctx -> count = 0 ; code = krb5_gss_init_context ( & ctx -> k5c ) ; if ( code!= 0 ) goto cleanup ; * pctx = ctx ; return code ; } ctx = k5alloc ( sizeof ( * ctx ), & code ) ; if ( ctx == NULL ) goto cleanup ; ctx -> defcred = GSS_C_NO_CREDENTIAL ; ctx -> magic = KG_IAKERB_CONTEXT ; ctx -> state = IAKERB_AS_REQ ; ctx -> count = 0 ; ctx -> state = IAKERB_AS_REQ ; ctx -> state = IAKERB_AS_REQ ; ctx -> count = 0 ; code = krb5_gss_init_context ( & ctx -> k5c )",0
535,"<S2SV_ModStart> = DirectClass ; if ( ( <S2SV_ModStart> ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; bitmapDC = CreateCompatibleDC ( hDC ) ; if ( bitmapDC == ( HDC ) NULL ) { DeleteDC ( hDC ) ; ThrowReaderException ( CoderError, ""UnableToCreateDC"" ) ; } <S2SV_ModStart> ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image",0
536,<S2SV_ModStart> )!= START_CODE_PREFIX && ps_stream -> u4_offset < ps_stream -> u4_max_offset <S2SV_ModStart> )!= START_CODE_PREFIX && ps_stream -> u4_offset < ps_stream -> u4_max_offset,0
537,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { kfree ( string ) ; return - EINVAL ; } if ( strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) && strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) && strcmp ( dentry -> d_name. name, ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) && strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) && strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) && strcmp ( dentry -> d_name. name, ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if ( flood_duration_test ) ret = kstrtoul ( string, 0, & ipc_count ) ; else ret = kstrtoul ( string,",0
538,"<S2SV_ModStart> = g_new0 ( MonoType *, count ) ; <S2SV_ModStart> = g_new0 ( MonoType *, count ) ; <S2SV_ModStart> = g_new0 ( MonoType <S2SV_ModEnd>, count ) <S2SV_ModStart> = g_new0 ( MonoType <S2SV_ModEnd>, count ) <S2SV_ModStart> = g_new0 ( MonoType <S2SV_ModEnd>, count ) <S2SV_ModStart> = g_new0 ( MonoType <S2SV_ModEnd>, count ) <S2SV_ModStart> = g_new0 ( MonoType <S2SV_ModEnd>, count ) <S2SV_ModStart> = g_new0 ( MonoType <S2SV_ModEnd>, count ) <S2SV_ModStart> = g_new0 ( MonoType <S2SV_ModEnd>, count ) <S2SV_ModStart> = g_new0 ( MonoType <S2SV_ModEnd>, count ) <S2SV_ModStart> = g_new0 ( MonoType <S2SV_ModEnd>, count ) <S2SV_ModStart> = g_new0 ( MonoType <S2SV_ModEnd>, count ) <S2SV_ModStart> = g_new0 ( MonoType <S2SV_ModEnd>, count ) <S2SV_ModStart> = g_new0 ( MonoType <S2SV_ModEnd>, count ) <S2SV_ModStart> = g_new0 ( MonoType <S2SV_ModEnd>, count ) <S2SV_ModStart> = g_new0 ( MonoType <S2SV_ModEnd>, count ) <S2SV_ModStart> = g_new0 ( MonoType <S2SV_ModEnd>, count ) <S2SV_ModStart> = g_new0 ( MonoType <S2SV_ModEnd>, count )",0
539,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; size_t tmp ; count = min_t ( size_t, count, sizeof ( buf ) ) ; if ( count > sizeof ( buf ) ) return - EMSGSIZE ; if ( copy_from_user ( buf, buffer, count ) ) return - EFAULT ; tmp = simple_strtol ( buf, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ; <S2SV_ModEnd> tmp = simple_strtol",0
540,"<S2SV_ModStart> is_path ) { const <S2SV_ModStart> * last_elem, * wp ; if ( * name == '$' ) { const char * repl ; size_t len ; if ( ( ( strncmp ( & name [ 1 ], ""ORIGIN"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM"", 8 ) == 0 && ( len = 9 )!= 0 ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) ) ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? l -> l_origin : l -> l_platform ) ; if ( repl!= NULL && repl!= ( const char * ) - 1 ) ) repl = ( ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_origin ) :",0
541,"<S2SV_ModStart> } pDecCont = ( decContainer_t * ) H264SwDecMalloc ( <S2SV_ModEnd> sizeof ( decContainer_t <S2SV_ModStart> ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; }",0
542,"<S2SV_ModStart> len ) { struct ipv6_txoptions opt_space ; <S2SV_ModStart> ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference_protected ( rp -> opt_space, sock_owned_by_user ( sk ) ) ; if ( opt ) opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt_space ) opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt ) opt_space = rcu_dereference_protected ( rp -> opt_space, sock_owned_by_user ( sk ) ) opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt_space ) opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt ) opt_space",0
543,"<S2SV_ModStart> drop ; } iph = ip_hdr ( skb ) ; if ( unlikely (! opt ) ) goto inhdr_error ; <S2SV_ModStart> 0 ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( in_dev &&! IN_DEV_SOURCE_",0
544,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
545,"<S2SV_ModStart> goto errout ; if ( info -> end - info -> begin < info -> grouping || info -> end - info -> grouping < info -> grouping ) { vorbis_info_residue_free ( info, vi, opb ) ; return - 1 ; } if ( info -> begin < info -> grouping || info -> end - info -> grouping < info -> grouping ) { vorbis_info_residue_free ( info, vi, opb ) ; return - 1 ; } if ( oggpack_eop ( opb ) ) goto errout ; if ( info -> end - info -> begin < info -> grouping || info -> end - info -> grouping < info -> grouping ) { vorbis_info_residue_free ( info, vi, opb ) ; return - 1 ; } if ( info -> begin < info -> begin ) { vorbis_info_residue_free ( info, vi, opb ) ; return - 1 ; } if ( info -> end - info -> begin < info -> grouping ) { vorbis_info_residue_free ( info, vi, opb ) ; return - 1 ; }",0
546,"<S2SV_ModStart> if (! js_doregexec ( J, <S2SV_ModEnd> re -> prog",1
547,"<S2SV_ModStart> ) break ; if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; break ; } sk_eat_skb ( sk, skb, 0 ) ; break ; } <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; break ; } <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; break ; }",0
548,"<S2SV_ModStart> = 0 ; if ( key_data_in == NULL ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> & err ) ; if ( key_data_in == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_kvno!= key_data [ i + 1 ]. key_data_kvno ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> & err ) ; if ( key_data_in == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SAL",0
549,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
550,"<S2SV_ModStart> ] ) ; sqlite3_int64 <S2SV_ModEnd> nByte = sqlite3_value_bytes <S2SV_ModStart> nByte + 1 ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; pCsr -> zInput [ nByte ] = 0 ; }",0
551,<S2SV_ModStart> filp ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (,0
552,"<S2SV_ModStart> * body, asdl_seq * orelse, <S2SV_ModStart> = body ; if (! orelse ) { PyErr_SetString ( PyExc_ValueError, ""field <S2SV_blank> orelse <S2SV_blank> is <S2SV_blank> required <S2SV_blank> for <S2SV_blank> AsyncFor"" ) ; return NULL ; } <S2SV_ModStart> = orelse ; if (! body ) { PyErr_SetString ( PyExc_ValueError, ""field <S2SV_blank> body <S2SV_blank> is <S2SV_blank> required <S2SV_blank> for <S2SV_blank> AsyncFor"" ) ; return NULL ; } <S2SV_ModStart> = orelse ; if (! orelse ) { PyErr_SetString ( PyExc_ValueError, ""field <S2SV_blank> orelse <S2SV_blank> is <S2SV_blank> required <S2SV_blank> for <S2SV_blank> AsyncFor"" ) ; return NULL ; }",0
553,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int mi_sort_index ( <S2SV_ModStart> name ) { if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param ->",0
554,<S2SV_ModStart> } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
555,"<S2SV_ModStart> case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP",0
556,"<S2SV_ModStart> UINT error ; # ifdef WITH_DEBUG_RDPEI WLog_DBG ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" PRIu16 "" <S2SV_blank> (%s) <S2SV_blank> length: <S2SV_blank> %"" PRIu32 """", eventId ) ; # endif",0
557,"<S2SV_ModStart> ) ; } if ( pData -> socket ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; }",0
558,"<S2SV_ModStart> ) ; struct ipv6_txoptions * opt <S2SV_ModStart> struct flowi6 fl6 ; rcu_read_lock ( ) ; <S2SV_ModStart> = 1 ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> SCTP_MIB_OUTSCTPPACKS ) ; rcu_read_unlock ( ) ; <S2SV_ModStart> = 1 ; rcu_assign_pointer ( np -> opt, opt ) ; <S2SV_ModStart> = 1 ; rcu_read_unlock ( sk ) ; <S2SV_ModStart> = 1 ; rcu_read_lock ( ) ; <S2SV_ModStart> = 1 ; rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> = 1 ; rcu_read_unlock ( ) ;",0
559,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
560,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
561,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ; UINT32 failureCode ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_DBG ( TAG, ""RDP_NEG_FAILURE"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_DBG ( TAG, ""RDP_NEG_FAILURE"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_DBG ( TAG, ""RDP_NEG_FAILURE"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; return ;",0
562,"<S2SV_ModStart> = 0 ; bn_t t ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = m_len ; m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } while ( pad!= 0 && m_len > 0 ) ; * p_len -= ( m_len - 1 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ; * p_len -= ( m_len - 1 ) ; bn_mod_2b ( m, m, (",0
563,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
564,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
565,"<S2SV_ModStart> = calloc ( <S2SV_ModEnd> sizeof ( SF_PRIVATE <S2SV_ModStart> ) ) == NULL ) { sf_errno = SFE_MALLOC_FAILED ; return NULL ; } ; psf_init_files ( psf ) ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf -> file. mode = mode ; psf -> error = psf_set_stdio ( psf ) ; psf -> error = psf_fopen ( psf, sfinfo ) ; <S2SV_ModEnd> return NULL ;",0
566,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> < SWITCHABLE_FILTER_CONTEXTS ; ++ j ) count [ i ] += <S2SV_ModEnd> cm -> counts,0
567,<S2SV_ModStart> { token ++ ; } if ( operand >= MAX_OPERANDS ) { return false ; },0
568,"<S2SV_ModStart> cpi ) { MACROBLOCK * const x = & cpi -> td. <S2SV_ModEnd> mb ; VP9_COMMON <S2SV_ModStart> -> mi_cols ) ; vpx_setup_src_planes ( x, cpi -> Source, 0, 0 ) ; vp9_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_dst_planes ( xd, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; vpx_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; memset ( xd -> above_seg_context, 0,",0
569,"<S2SV_ModStart> ( hp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } return ( retval ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
570,"<S2SV_ModStart> # define EOFOp 0x08 <S2SV_ModEnd> Image * image <S2SV_ModStart> image ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( Corrupt",0
571,<S2SV_ModStart> len ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( tETH_HDR ) ),0
572,<S2SV_ModStart> u2_frame_num ) ; if ( ps_prev_poc -> i4_pic_order_cnt_lsb > 0 && ps_prev_poc -> i4_pic_order_cnt_msb > 0 && ps_prev_poc -> i4_pic_order_cnt_lsb < ps_cur_poc -> i4_pic_order_cnt_msb ) ps_prev_poc -> i4_pic_order_cnt_lsb = ps_cur_poc -> i4_pic_order_cnt_lsb ; ps_prev_poc -> i4_pic_order_cnt_msb = ps_cur_poc -> i4_pic_order_cnt_msb ; ps_prev_poc -> i4_pic_order_cnt_lsb = ps_cur_poc -> i4_pic_order_cnt_lsb ; ps_prev_poc -> i4_pic_order_cnt_msb = ps_cur_poc -> i4_pic_order_cnt_msb ; ps_prev_poc -> i4_pic,0
573,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> int cim_rev ; <S2SV_ModStart> ; struct pci_dev <S2SV_ModEnd> * pdev ; <S2SV_ModStart> ; return PTR_ERR ( karg ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( karg ) ) { printk ( MYIOC_s_ERR_FMT ""%s@%d <S2SV_blank> - <S2SV_blank> ioc%d <S2SV_blank> not <S2SV_blank> found!\\n"", __FILE__, __LINE__, iocnum ) ; kfree ( karg ) ; return PTR_ERR ( karg ) ; } if ( ( ( iocnum = mpt_verify_adapter ( ioc ) ) < 0 ) || ( iocnum == MPT_ADAPTER * ioc ) ) < 0 ) { printk ( MYIOC_s_ERR_FMT ""%s@%d <S2SV_blank> - <S2SV_blank> not <S2SV_blank> found!\\n"", __FILE__, __LINE__, iocnum ) ; kfree ( karg ) ; return - ENODEV ; } if ( ( ( port = mpt_verify_port ( iocnum, & port ) ) < 0 ) || ( port",0
574,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
575,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
576,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ; u64 irq_time ; if ( rq -> skip_clock_update ) return <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
577,"<S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv",0
578,"<S2SV_ModStart> ; if ( ( exif_get_long ( buf + datao, EXIF_BYTE_ORDER_INTEL ) < 0 ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( exif_get_short ( buf + datao, EXIF_BYTE_ORDER_INTEL ) < 0 ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteDataFuji"", sizeof ( MnoteF",0
579,"<S2SV_ModStart> if ( l_strchr ( fname, '\\0' ) ) { L_ERROR ( ""filename <S2SV_blank> not <S2SV_blank> found\\n"", fname ) ; return 1 ; } <S2SV_ModStart> if ( l_strchr ( fname, '\\0' ) ) { L_ERROR ( ""filename <S2SV_blank> not <S2SV_blank> found\\n"", fname ) ; return 1 ; } <S2SV_ModStart> if ( l_strchr ( fname, '\\0' ) ) { L_ERROR ( ""filename <S2SV_blank> not <S2SV_blank> found\\n"", fname ) ; return 1 ; } if ( l_strchr ( fname, '\\0' ) ) { L_ERROR ( ""filename <S2SV_blank> not <S2SV_blank> found\\n"", fname ) ; return 1 ; } if ( l_strchr ( fname, '\\0' ) ) { L_ERROR ( ""filename <S2SV_blank> not <S2SV_blank> found\\n"", fname ) ; return 1 ; } if ( l_strchr ( fname, '\\0' ) ) { L_ERROR ( ""filename <S2SV_blank> not <S2SV_blank> found\\n"", fname ) ; return 1 ; } if ( l_strchr ( fname, '\\0' ) ) { L_ERROR ( ""filename <S2SV_blank> not <S2SV_blank> found\\n"", fname ) ; return 1 ;",0
580,<S2SV_ModStart> flags ) { <S2SV_ModEnd> struct fscrypt_info * <S2SV_ModStart> 0 ; } spin_lock ( & dentry -> d_lock ) ; cached_with_key = dentry -> d_flags & DCACHE_ENCRYPTED_WITH_KEY ; spin_unlock ( & dentry -> d_lock ) ; dir_has_key = ( dentry -> d_flags & DCACHE_ENCRYPTED_WITH_KEY <S2SV_ModEnd> ; dput (,0
581,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ; CRYPTO_THREAD_write_lock <S2SV_ModEnd> ( stunnel_locks [ <S2SV_ModStart> LOCK_SECTIONS ] ) ; opt = service_options. next ; service_options. next = NULL ; service_free ( & service_options ) ; while ( opt ) { unsigned i ; unsigned i ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names ) { opt -> option. retry = 0 ; } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname ) ; } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname",0
582,<S2SV_ModStart> ; context. curX = i -> posX ; context. curY = i -> posY ; # ifdef NGIFLIB_INDEXED_ONLY if ( i -> parent -> mode & NGIFLIB_MODE_INDEXED ) { # ifdef NGIFLIB_ENABLE_CALLBACKS context. line_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i -> posY * i -> parent -> width ; context. line_p. p32 = context. line_p. p32 + i -> posX ; # endif } else { # ifdef NGIFLIB_ENABLE_CALLBACKS context. line_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i -> posY * i -> parent -> width ; context. line_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i -> posY * i -> parent -> width ; context. line_p. p32 = context. line_p. p32 + i -> posX ; # else if ( i -> parent -> mode & NGIFLIB_ENABLE_CALLBACKS context. line_p,0
583,"<S2SV_ModStart> ; RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, len - op -> size, cpu )",0
584,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> char * ) RelinquishMagickMemory ( data ) ; if ( graymap!= ( int * ) NULL ) graymap = ( int * ) RelinquishMagickMemory ( graymap ) ; if ( redmap!= ( int * ) NULL ) redmap = ( int * ) RelinquishMagickMemory ( redmap ) ; if ( data!= ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( graymap!= ( int * ) NULL ) graymap = ( int * ) RelinquishMagickMemory ( graymap ) ; if ( data!= ( unsigned char * ) RelinquishMagickMemory ( data ) ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( graymap!= ( int * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( graymap ) ; if ( data!= ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory (",0
585,"<S2SV_ModStart> void ) { if ( strchr ( mnemonic, '\\0' ) ) { mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; }",0
586,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT7 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT8 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT9 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT10 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT11 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT12 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT13 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT14 <S2SV_ModEnd> )",0
587,"<S2SV_ModStart> image ) ; if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ; <S2SV_ModStart> image ) ; if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ; <S2SV_ModStart> image ) ; if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ; <S2SV_ModStart> image ) ; if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ; <S2SV_ModStart> image ) ; if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ; <S2SV_ModStart> image ) ; if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ; <S2SV_ModStart> image ) ; if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ; <S2SV_ModStart> image ) ; if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile""",0
588,"<S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket, n ) ; if ( n < sizeof ( buf ) ) { syslog ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket, n ) ; goto error ; } n = read ( req -> socket, buf, n ) ; if ( n < sizeof ( buf ) ) { syslog ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket, n ) ; goto error ; } if ( n < sizeof ( buf ) ) { syslog ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket, n ) ; goto error ; } n = read ( req -> socket, buf, n ) ; if ( n < sizeof ( buf ) ) { syslog ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket, n ) ; goto error ; } if ( n < sizeof ( buf ) ) { syslog ( LOG_INFO, ""(s=%d) <S2SV_blank>",0
589,<S2SV_ModStart> { WORD32 i <S2SV_ModEnd> ; WORD32 st_rps_idx <S2SV_ModStart> ps_slice_hdr ) { ps_dpb_mgr -> ai4_st_curr_before [ st_rps_idx ] = 0 ; ps_dpb_mgr -> ai4_st_curr_after [ st_rps_idx ] = 0 ; ps_mv_buf_mgr -> ai4_lt_curr_before [ st_rps_idx ] = 0 ; ps_dpb_mgr -> ai4_lt_curr_after [ st_rps_idx ] = 0 ; <S2SV_ModStart> ps_slice_hdr ) { ps_dpb_mgr -> ai4_st_curr_before [ st_rps_idx ] = 0 ; ps_dpb_mgr -> ai4_st_curr_after [ st_rps_idx ] = 0 ; ps_mv_buf_mgr -> ai4_lt_curr_before [ st_rps_idx ] = 0 ; ps_dpb_mgr -> ai4_lt_curr_after [ st_rps_idx ] = 0 ; } else { ps_dpb_mgr -> ai4_,0
590,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart> 0 ; while ( child ) { ++ numentries ; child = child -> next ; } if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; memset ( entries, 0, sizeof ( char * ) * numentries ) ) ) ) return 0 ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (!",0
591,"<S2SV_ModStart> * length ) { struct stream packet = * s ; struct stream packet = * s ; struct stream packet = * s ; if (! s_check ( s ) ) { rdp_protocol_error ( ""ber_parse_header(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> header <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; return False ; } if (! s_check ( s ) ) { rdp_protocol_error ( ""ber_parse_header(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; return False ; } if (! s_check ( s ) ) { rdp_protocol_error ( ""ber_parse_header(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> header <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; return False ; } if (! s_check ( s ) ) { rdp_protocol_error ( ""ber_parse_header(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; return False ; } if (! s_check ( s ) ) { rdp_protocol_error ( ""ber_parse_header(), <S2SV_blank> consume <S2SV_blank>",0
592,"<S2SV_ModStart> ; other = rcu_dereference_protected ( sk -> sk_user_data, sock_owned_by_user ( sk ) ) ; if ( other ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; if ( unix_recvq_full ( other ) ) writable = 0 ; } else if ( unix_peer ( sk )!= sk ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; sock_put ( other ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask ;",0
593,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
594,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void exit_io_context ( <S2SV_ModStart> void exit_io_context ( <S2SV_ModEnd> struct io_context * <S2SV_ModStart> * ioc ; mutex_lock ( & ioc -> ctx_mutex ) ; <S2SV_ModStart> ioc = current <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context ; mutex_unlock ( & ioc -> ctx_mutex ) ; <S2SV_ModEnd> if ( atomic_dec_and_test <S2SV_ModStart> ioc -> nr_tasks ) ) { if ( ioc -> aic && ioc -> aic -> exit ) ioc -> aic -> exit ( ioc -> aic ) ; if ( ioc -> aic -> exit ) ioc -> aic -> exit ( ioc -> aic ) ; cfq_exit ( ioc ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
595,"<S2SV_ModStart> = 0 ; # if XTENSA_HAVE_COPROCESSORS coprocessor_release_all ( ti ) ; # endif <S2SV_ModStart> = 0 ; if ( xtregs -> cp0 & XTREGS_CP0_BITSP ) ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ) ; else ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ) ; if ( xtregs -> cp0 & XTREGS_CP0_BITSP ) ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ) ; else ret |= __copy_from_user ( & ti -> xtregs_user, & xtregs -> user, sizeof ( xtregs -> user ) ) ;",0
596,<S2SV_ModStart> 0 ) { if ( header -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN <S2SV_ModStart> ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor,0
597,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { <S2SV_ModEnd> vp9_ref_frame_t * frame <S2SV_ModStart> ( args, vpx_ref_frame_t * <S2SV_ModEnd> ) ; if <S2SV_ModStart> NULL ) { YV12_BUFFER_CONFIG <S2SV_ModEnd> * fb ; <S2SV_ModStart> YV12_BUFFER_CONFIG * fb ; vp9_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_OK ; } else if ( frame!= NULL ) { YV12_BUFFER_CONFIG * fb ; vp9_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; } else { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
598,<S2SV_ModStart> plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { ret = - EPERM ; break ; },0
599,"<S2SV_ModStart> * info, my_str * name, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> ) ) ; if (! rep_quick && init_io_cache ( & info -> read_cache, info -> dfile, ( uint ) param -> read_buffer_length, READ_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, MYF ( MY_WME ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, MYF ( MY_WME ) ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, MYF ( MY_WME ) ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, MYF ( MY_WME",0
600,"<S2SV_ModStart> } ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN uECC_word_t * p = signature ; # else uECC_word_t * p = ( uECC_word_t * ) signature ; # endif <S2SV_ModStart> curve ) ; if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, num_n_words ) ) { return 0 ; } <S2SV_ModStart> curve ) ; if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, num_n_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_generate_",0
601,"<S2SV_ModStart> trunc : ND_TCHECK2 ( * bp, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) goto trunc ; <S2SV_ModStart> ) ) ; bp += ND_RPL_DAOACK_TRUNC_LEN ; length -= ND_RPL_DAOACK_TRUNC_LEN ; if ( RPL_DAOACK_D ( daoack -> rpl_flags ) ) { ND_TCHECK2 ( * bp, ND_RPL_DAGID_LEN ) ; if ( length < ND_RPL_DAGID_LEN ) goto tooshort ; dagid_str = ip6addr_string ( ndo, daoack -> rpl_dagid ) ; bp += DAGID_LEN ; length -= DAGID_LEN ; } if ( RPL_D ( daoack -> rpl_flags ) ) { ND_TCHECK2 ( * bp, ND_RPL_DAGID_LEN ) ; if ( length < ND_RPL_DAGID_LEN ) goto toos",0
602,"<S2SV_ModStart> ; } else { uint32_t new_free_total = pool -> free_total * 2 ; void * new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; } else { free ( buf ) ; } }",0
603,"<S2SV_ModStart> tp ; { int cval = 0, meta = 0 ; if ( * cp == '\\\\' && cp [ 1 ] && index ( ""0123456789"", cp [ 1 ] ) && cp [ 2 ] ) { meta = 1 ; cp += 2 ; } if ( * cp == '\\\\' && cp [ 1 ] && index ( ""0123456789xXoO"", cp [ 1 ] ) && cp [ 2 ] ) { meta = 1 ; cp += 2 ; } if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( (",0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
605,"<S2SV_ModStart> * lined ; PIXC * cmap, * cmapd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if ( pixc == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; cmap = pixGetColormap ( pixc ) ; ncolors = pixcmapGetCount ( cmap ) ; ncolors = pixcmapGetCount ( cmap ) ; ncolors = pixcmapGetCount ( cmap ) ; ncolors = pixcmapGetCount ( cmap ) ; ncolors = pixcmapGetCount ( cmap ) ; ncolors = pixcmapGetCount ( cmap ) ; ncolors = pixcmapGetCount ( cmap ) ; ncolors = pixcmapGetCount ( cmap ) ; ncolors = pixcmapGetCount ( cmap ) ; ncolors = pixcmapGetCount ( cmap ) ; ncolors = pixcmapGetCount ( cmap ) ; cmapd = pixcmapCreate ( ncolors ) ; lut = ( l_int32 * ) LEPT_CALLOC ( 256, sizeof ( l_int32 ) ) ; for ( j = 0 ; j < ncolors ; j ++ ) lut [ j ] = - 1 ;",0
606,<S2SV_ModStart> = 256 ; if ( new_mv_mode_penalty < 0 ) new_mv_mode_penalty = 0 <S2SV_ModStart> vf = vp8_mse16x16 ; if ( new_mv_mode_penalty < 0 ) new_mv_mode_penalty = 0 <S2SV_ModStart> = vp8_mse16x16 ; if ( new_mv_mode_penalty < 0 ) new_mv_mode_penalty = 0 <S2SV_ModStart> ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_,0
607,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
608,"<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> -> count ; for ( idx = 0 ; idx < count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ;",0
609,"<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> ; int size ; size = overhead ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_validate_ns ( conn, ns )!= MONGO_OK ) return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; }",0
610,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> state = NEGO_STATE_FAIL ; goto fail <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; goto fail <S2SV_ModEnd> ; } Stream_Read_UINT16 <S2SV_ModStart> = NEGO_STATE_FINAL ; goto fail <S2SV_ModEnd> ; } Stream_Read_UINT32 <S2SV_ModStart> = NEGO_STATE_FINAL ; fail : return ;,0
611,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_frame = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } else { last_error = bits_per_mb_at_this_q - target_bits_",0
612,"<S2SV_ModStart> ~ TJA1101_CONFIG1_MII_MODE ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_CONFIG1 ) ; value &= ~ TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_CONFIG1 ) ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_COMM_CTRL ) ; value |= TJA1101_COMM_CTRL_AUTO_OP ; tja1101WritePhyReg ( interface, TJA1101_COMM_CTRL, value ) ; value = tja",0
613,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
614,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ;,0
615,"<S2SV_ModStart>, MB_PREDICTION_MODE mode, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> int i ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> uint8_t, left_col, 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> uint8_t, above_data, 128 + 16 ) ; uint8_t * above_row = above_data + 16 ; const int bs = 4 << tx_size ; if ( plane == 0 ) { frame_width = xd -> cur_buf -> y_width ; frame_height = xd -> cur_buf -> y_height ; } else { frame_width = xd -> cur_buf -> uv_width ; frame_height = xd -> cur_buf -> uv_height ; } } if ( right_available ) { if ( xd -> cur_buf -> mb_to_bottom_edge < 0 ) { if ( xd -> mb_to_left_edge < 0 ) { for ( i = 0 ; i < bs ; ++ i ) left_col [ i ] = ref [ i * ref_stride - 1 ] ; for ( i = 0 ; i < bs ; ++ i ) left_",0
616,"<S2SV_ModStart> } end ++ ; if ( end >= pattern [ current ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; }",0
617,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ; <S2SV_ModStart> cur_aio_dio = NULL ; ei -> i_datasync_dio = NULL ; ei -> i_sync_tid = 0 ; ei -> i_datasync_tid = 0 ; return & ei -> vfs_inode ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
618,"<S2SV_ModStart> BUG_ON (! thresholds ) ; usage = mem_cgroup_usage ( memcg, type == _MEMSWAP ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; size = 0 ; for ( i = 0 ; i < thresholds -> primary -> size ; i ++ ) { if ( thresholds -> primary -> entries [ i ]. eventfd!= eventfd ) size ++ ; } new = thresholds -> spare ; if (! size ) { kfree ( new ) ; new = NULL ; goto swap_buffers ; }",0
619,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> lock ) ; mutex_lock ( & client -> lock ) ; <S2SV_ModStart> lock ) ; mutex_unlock ( & client -> lock ) ; handle = ion_handle_get_by_id_nolock <S2SV_ModEnd> ( client, <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
620,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> VP9_FRAME_MARKER, 2 ) ; write_profile ( cm -> profile, wb ) ; vpx_wb_write_bit ( wb, cm -> frame_type ) ; vpx_wb_write_bit ( wb, cm -> show_frame ) ; vpx_wb_write_bit ( wb, cm -> error_resilient_mode ) ; if ( cm -> frame_type == KEY_FRAME ) { const COLOR_SPACE cs = UNKNOWN ; write_sync_code ( wb ) ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vp9_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } vp9_wb_write_literal ( wb, cs, 3 ) ; if ( cs!= SRGB ) { vp9_wb_write_bit ( wb, 0 ) ; if ( cm -> profile >= PROFILE_1 ) { vp9_wb_write_bit ( wb, 0",0
621,<S2SV_ModStart> } # ifdef
622,"<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart>'<S2SV_blank>') ; if ( p == NULL ) return ERROR_INVALID_SYNTAX ; p = osStrpbrk ( p + 1, "" <S2SV_blank>?"" ) ; if ( p == NULL ) return ERROR_INVALID_SYNTAX ; p = osStrpbrk ( p + 1, "" <S2SV_blank>?"" ) ; if ( p == NULL ) return ERROR_INVALID_SYNTAX ; if ( * p == '?' ) { q = p ; if ( q == NULL ) return ERROR_INVALID_SYNTAX ; m = q - p ; } else { q = p ; m = 0 ; } n = osStrlen ( queryString ) ; if ( n == 0 ) { n ++ ; if ( ( context -> bufferLen + n - m ) > HTTP_CLIENT_BUFFER_SIZE ) return ERROR_BUFFER_OVERFLOW ; osMemmove ( p + n, q, p + n - m ) ; } else { n ++ ; if ( ( context -> bufferLen + n - m ) > HTTP_CLIENT_BUFFER_SIZE ) return ERROR_BUFFER_OVERFLOW ; osStrncpy ( p + n - 1, queryString, n - 1 )",0
623,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case DOUBLESTAR : i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE",0
624,<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd>,0
625,"<S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { if <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD",0
626,"<S2SV_ModStart> ; while ( i < gemsafe_cert_max && <S2SV_ModStart> == 0x01 ) { if ( i < gemsafe_cert_max ) { r = gemsafe_get_cert_len_internal ( card, i ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len_internal ( card, i ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len ( card, i ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len_internal ( card, i ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len ( card, i ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len_internal ( card, i ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len ( card, i ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len_internal ( card, i ) ; return SC_ERROR_INTERNAL ;",0
627,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
628,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv ) { VALUE klass = rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ) ) ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ) ) ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get (",0
629,"<S2SV_ModStart> ; config_arg = strchr ( config_line, '\\0' ) ; if ( strlen ( config_arg ) > CONFLINELEN ) config_arg = strchr ( config_arg, '\\0' ) ; if ( strlen ( config_arg ) > CONFLINELEN ) config_arg = strchr ( config_arg, '\\0' ) ; if ( strlen ( config_arg ) > CONFLINELEN ) config_arg = strchr ( config_arg, '\\0' ) ; else config_arg = strchr ( config_arg, '\\0' ) ; if ( strlen ( config_arg ) > CONFLINELEN ) config_arg = strchr ( config_arg, '\\0' ) ; if ( strlen ( config_arg ) > CONFLINELEN ) config_arg = strchr ( config_arg, '\\0' ) ; if ( strlen ( config_arg ) > CONFLINELEN ) config_arg = strchr ( config_arg, '\\0' ) ; else config_arg = strchr ( config_arg, '\\0' ) ; if ( strlen ( config_arg ) > CONFLINELEN ) config_arg = strchr ( config_arg, '\\0' )",0
630,<S2SV_ModStart> 2 ] ; out [ 3 ] = 0x00 ; <S2SV_ModStart> 2 ] ; out [ 5 ] = 0x00 ; <S2SV_ModStart> 2 ] ; out [ 3 ] = 0x00 ; <S2SV_ModStart> 2 ] ; out [ 5 ] = 0x00 ; out [ <S2SV_ModStart> 2 ] ; out [ 4 ] = 0x00 ; out [ 5 ] = 0x00 ; out [ 6 ] = 0x00 ; out [ 7 ] = 0x00 ; out [ 8 ] = 0x00 ; out [ 9 ] = 0x00 ; out [ 10 ] = 0x00 ; out [ 11 ] = 0x00 ; out [ 12 ] = 0x00 ; out [ 13 ] = 0x00 ; out [ 14 ] = 0x00 ; out [ 15 ] = 0x00 ; out [ 15 ] = 0x00 ; out [ 15 ] = 0x00 ; out [ 14 ] = 0x00 ; out [ 15 ] = 0x00 ; out [ 15 ] = 0x00 ; out [ 14 ] = 0x00 ; out [ 15 ] = 0x00 ; out [ 12 ] = 0x00 ; out [ 13 ] = 0x00 ; out [ 14 ] = 0x,0
631,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
632,"<S2SV_ModStart> ; err = - EBUSY ; if ( type == PACKET_FANOUT_HASH ) goto out ; if ( type_flags & PACKET_FANOUT_FLAG_ROLLOVER ) { err = - ENOMEM ; rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) goto out ; atomic_long_set ( & rollover -> num, 0 ) ; atomic_long_set ( & rollover -> num_huge, 0 ) ; atomic_long_set ( & rollover -> num_failed, 0 ) ; rollover = NULL ; } if ( type == PACKET_FANOUT_ROLLOVER || ( type_flags & PACKET_FANOUT_FLAG_ROLLOVER ) ) { err = - ENOMEM ; rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) goto out ; atomic_long_set ( & rollover -> num_huge, 0 ) ; atomic_long_set ( & rollover -> num_failed, 0 ) ; rollover = NULL ; }",0
633,<S2SV_ModStart> handle -> nmi && handle -> event <S2SV_ModStart> pending ) ; perf_event_wakeup ( handle -> event ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
634,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int utf8s_to_utf16s ( const u8 * s, int len, wchar_t * pwcs ) { if ( len < 0 ) return - EINVAL ; if ( * s & 0x80 ) { size = utf8_to_utf32 ( s, len, & u ) ; if ( size < 0 ) return - EINVAL ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } s += size ; len -= size ; } else { * op ++ = ( wchar_",0
635,"<S2SV_ModStart> EPROTONOSUPPORT ) { <S2SV_ModEnd> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure""",0
636,"<S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_RXFHSR ) ; if ( ( status & ( KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXFHSR_RXRF | KSZ8851_RXFHSR_RXCE <S2SV_ModEnd> ) )!= <S2SV_ModStart> ( status & ( KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> | KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXRF | KSZ8851_RXCE <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( status & ( KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> | RXFHSR_RXCE ) <S2SV_ModStart> ( status & ( KSZ8851_R",0
637,"<S2SV_ModStart> const node * node <S2SV_ModEnd>, asdl_seq * <S2SV_ModStart> is_async ) { identifier name ; arguments_ty args ; expr_ty returns = NULL ; int name_i = 1 ; if ( TYPE ( CHILD ( n, name_i + 1 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 2 ), 0 ) ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 2 ) ) ; name_i += 2 ; if ( TYPE ( CHILD ( n, name_i + 3 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3 ) ) ; name_i += 3 ; if (! type_comment",0
638,"<S2SV_ModStart> ; pgd = find_pgd ( mm, 0xA0000 ) ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; if ( pud_none_or_clear_bad ( pud ) ) goto out ; pmd = pmd_offset ( pud, 0xA0000 ) ; split_huge_page_pmd ( mm, pmd ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ;",0
639,"<S2SV_ModStart> ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!""",0
640,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> IndexPacket index ; <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
641,"<S2SV_ModStart> ) ; } if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
642,<S2SV_ModStart> ; for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel (,0
643,<S2SV_ModStart> len < needed || len > param -> data_size,0
644,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
645,<S2SV_ModStart> bfqq ) bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
646,"<S2SV_ModStart> += 1 ; if ( orderInfo -> orderType >= MAX_PRIMARY_DRAWING_ORDER_TYPES ) { rdp_protocol_error ( context, ""Invalid <S2SV_blank> primary <S2SV_blank> drawing <S2SV_blank> order <S2SV_blank> type: <S2SV_blank> %u"", orderInfo -> orderType ) ; return - 1 ; } <S2SV_ModStart> += 1 ; if ( orderInfo -> orderType >= MAX_PRIMARY_DRAWING_ORDER_TYPES ) { rdp_protocol_error ( context, ""Invalid <S2SV_blank> primary <S2SV_blank> drawing <S2SV_blank> order <S2SV_blank> type: <S2SV_blank> %u"", orderInfo -> orderType ) ; return - 1 ; }",0
647,<S2SV_ModStart> ; if ( OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ),0
648,"<S2SV_ModStart> int plane ; # if CONFIG_VP9_HIGHBITDEPTH switch ( bsize -> bit_depth ) { case 8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case 16 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; default : vpx_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; } # if CONFIG_VP9_HIGHBITDEPTH switch ( bsize -> bit_depth ) { case 8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case 16 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; default : vpx_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; } # endif",0
649,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMMON <S2SV_ModStart> x -> e_mbd ; # if CONFIG_VP9_HIGHBITDEPTH if ( frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } # endif <S2SV_ModStart> ) ) { if (! frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col",0
650,"<S2SV_ModStart> = NULL ; if (! reader. superblock ) { hrtf = getHrtf ( & reader, err ) ; } else if ( strcmp ( reader. superblock -> name, "".sofa"" ) ) hrtf = getHrtf ( & reader, err ) ; else if ( strcmp ( reader. superblock -> name, "".sofa"" ) ) hrtf = getHrtf ( & reader, err ) ; else if ( strcmp ( reader. superblock -> name, "".sofa"" ) ) if ( strcmp ( reader. superblock -> name, "".sofa"" ) ) hrtf = getHrtf ( & reader, err ) ; else if ( strcmp ( reader. superblock -> name, "".sofa"" ) ) hrtf = getHrtf ( & reader, err ) ; else if ( strcmp ( reader. superblock -> name, "".sofa"" ) ) hrtf = getHrtf ( & reader, err ) ; else if ( strcmp ( reader. superblock -> name, "".sofa"" ) ) if ( strcmp ( reader. superblock -> name, "".sofa"" ) ) hrtf = getHrtf ( & reader, err ) ;",0
651,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtentInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtentInFile"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtentInFile"" ) ; if ( status == Magick",0
652,"<S2SV_ModStart> = 1 ; memset ( pMap -> ranges, 0, sizeof ( MappedRange ) ) ;",0
653,<S2SV_ModStart> ; if ( be16_to_cpu ( dip -> di_nlink ) > be64_to_cpu ( dip -> di_nlink ) ) return __this_address ; if ( be32_to_cpu ( dip -> di_anextents ) + be16_to_cpu ( dip -> di_anextents ) > be64_to_cpu ( dip -> di_nblocks ) ) return __this_address ; if ( be16_to_cpu ( dip -> di_nlink ) > be64_to_cpu ( dip -> di_nlink ) ) return __this_address ; if ( be16_to_cpu ( dip -> di_nlink ) > be64_to_cpu ( dip -> di_anextents ) + be16_to_cpu ( dip -> di_anextents ) ) return __this_address ; if ( be16_to_cpu ( dip -> di_nlink ) > be64_to_cpu ( dip -> di_nlink ) ) return __this_address ; if ( be16_to_cpu ( dip -> di_nlink ) > be64_to_cpu ( dip -> di_,0
654,"<S2SV_ModStart> ; if ( flags & ( VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF | VP8_EFLAG_FORCE_GF ) ) || ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) && ( flags & VP8_EFLAG_NO_REF_GF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) && ( flags & VP8_EFLAG_NO_REF_GF ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG",0
655,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
656,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( & <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> } hlist_add_head_rcu (,0
657,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> case BGP_VPN_ADDR : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_VPN_ADDR : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_VPN_ADDR : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_VPN_ADDR : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_VPN_ADDR : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_VPN_ADDR : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ;",0
658,"<S2SV_ModStart> ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'40%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""</th>""",0
659,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
660,"<S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ; } else if ( isRemoveLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else if ( <S2SV_ModStart> ) ) { if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else if ( isRemoveLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ; } else if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else { if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else if ( isRemoveLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ; } else",0
661,"<S2SV_ModStart> ; if ( len < sizeof ( struct usb_descriptor_header ) ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> bytes, <S2SV_blank> ignoring\\n"", cfgno, len ) ; retval = - EINVAL ; goto error ; } if ( len < sizeof ( struct usb_descriptor_header ) ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> bytes, <S2SV_blank> ignoring\\n"", cfgno, len ) ; retval = - EINVAL ; goto error ; } if ( len < sizeof ( struct usb_descriptor_header ) ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> bytes, <S2SV_blank> ignoring\\n"", cfgno, len ) ; retval = - EINVAL ; goto error ; } if ( len < sizeof ( struct usb_descriptor_header ) ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> bytes, <S2SV_blank> ignoring\\n"", cfgno, len ) ; retval = -",0
662,"<S2SV_ModStart> ; if ( info -> count < 1 ) return - EINVAL ; access = info -> access == 0? SNDRV_CTL_ELEM_ACCESS_READWRITE : ( info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ) ; info -> id. numid = 0 ; memset ( & kctl, 0, sizeof ( kctl ) ) ; if ( replace && card -> user_ctl_count >= MAX_USER_CONTROLS ) return - ENOMEM ; if ( info -> count < 1 ) return - EINVAL ; access = info -> access == 0? SNDRV_CTL_ELEM_ACCESS_READWRITE : ( info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_",0
663,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
664,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
665,"<S2SV_ModStart> 16 ) ; if ( error16x16 > INT_MAX ) { error16x16 = INT_MAX ; distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ x -> rdmult ] [ mode ] ; this_rd = RDCOST ( x -> rdmult, x -> rddiv, rate, distortion ) ; if ( error16x16 > this_rd ) { error16x16 = this_rd ; distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ x -> rdmult ] [ mode ] ; this_rd = RDCOST ( x -> rdmult, x -> rddiv, rate, distortion ) ; if ( error16x16 > this_rd ) { error16x16 = this_rd ; distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predict",0
666,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 ) ; interface -> macAddr. w [ 0 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR2 ) ; interface -> macAddr. w [ 1 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR3 ) ; interface -> macAddr. w [ 2 ] = letoh16 ( temp ) ; macAddrToEui64 ( & interface -> macAddr, & interface -> eui64 ) ; } else { temp = htole16 ( interface -> macAddr. w [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR1, temp ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR2, temp",0
667,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; vsnprintf ( start, maxlen, format, argptr ) ; <S2SV_ModStart> psf -> header ) ; va_end ( argptr ) ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header ) ; return ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
668,<S2SV_ModStart> priv -> alg_priv && ctx -> iface -> destroy ) ctx -> iface -> destroy ( ctx -> priv -> alg_priv ) ; else if ( ctx -> priv -> name ) ctx -> priv -> name -> destroy ( ctx -> priv -> name <S2SV_ModEnd> ) ; ctx,0
669,"<S2SV_ModStart> speed ) { if ( speed < 1 ) { sf -> adaptive_rd_thresh = 1 ; sf -> recode_loop = ALLOW_RECODE_KFMAXBW ; sf -> allow_skip_recode = 1 ; } if ( speed >= 1 ) { sf -> use_square_partition_only =! frame_is_intra_only ( cm ) ; sf -> use_square_partition_only =! frame_is_intra_only ( cm ) ; sf -> less_rectangular_check = 1 ; sf -> tx_size_search_method = vp9_frame_is_boosted ( cpi )? USE_FULL_RD : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = DISABLE_ALL_SPLIT ; else sf -> disable_split_mask = DISABLE_ALL_INTER_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; sf -> mode_skip_start = 10 ; sf -> adaptive_pred",0
670,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
671,"<S2SV_ModStart> ; int goodsize ; if ( inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = L -> stacksize ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { },",0
672,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
673,"<S2SV_ModStart>, * s = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; if ( quote < 0 ) { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", _PyUnicode_AsString ( s ) ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", _PyUnicode_AsString ( s ) ) ; } if (! str ) { # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { PyErr_Fetch ( & type, & value, & tback ) ; errstr = PyObject_Str ( type ) ; if ( errstr ) { char * s = """" ; char buf [ 128 ] ; s = _PyUnicode_AsString ( errstr ) ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", _PyUnicode_AsString ( errstr ) ; ast_error ( n, buf ) ; Py_DECREF ( errstr ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF (",0
674,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> } else if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_INVALID_PARAM ; break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) { res = parse_quantizers_keyframe ( svc_ctx, option_value,",0
675,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( & <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> } hlist_add_head_rcu (,0
676,"<S2SV_ModStart> ) ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> frame <S2SV_blank> %d\\n"", frame ) ; <S2SV_ModStart> ) ; } fprintf ( mvs, ""Mb <S2SV_blank> mv <S2SV_blank> ref <S2SV_blank> for <S2SV_blank> frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. ref_frame ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index ++ ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n",0
677,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
678,,1
679,"<S2SV_ModStart> ) ) { if ( imp_dbh -> pmysql -> error ) { imp_dbh -> pmysql -> error = mysql_error ( imp_dbh -> pmysql ) ; imp_dbh -> pmysql -> error = mysql_error ( imp_dbh -> pmysql ) ; } else { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; if ( imp_dbh -> pmysql -> error ) { imp_dbh -> pmysql -> error = mysql_error ( imp_dbh -> pmysql ) ; imp_dbh -> pmysql -> error = mysql_error ( imp_dbh -> pmysql ) ; } else { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; }",0
680,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, FIONREAD, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, FIONREAD, TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY ( <S2SV_ModStart>, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_",0
681,<S2SV_ModStart> struct ieee_802_11_phdr phdr ; if ( pinfo -> bmp_mode == NL80211_IFTYPE_STATION ) { if ( pinfo -> bmp_mode == NL80211_IFTYPE_ADHOC ) { if ( pinfo -> bmp_mode == NL80211_IFTYPE_ADHOC ) { if ( pinfo -> bmp_mode == NL80211_IFTYPE_ADHOC ) { if ( pinfo -> bmp_mode == NL80211_IFTYPE_ADHOC ) { if ( pinfo -> bmp_mode == NL80211_IFTYPE_STATION ) { if ( pinfo -> bmp_mode == NL80211_IFTYPE_ADHOC ) { if ( pinfo -> bmp_mode == NL80211_IFTYPE_ADHOC ) { if ( pinfo -> bmp_mode == NL80211_IFTYPE_ADHOC ) { if ( pinfo -> bmp_mode == NL80211_IFTYPE_ADHOC ) { if ( pinfo -> bmp_mode == NL80211_IFTYPE_ADHOC ),0
682,<S2SV_ModStart> ; sh = s_malloc0 <S2SV_ModEnd> ( hdrlen +,0
683,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; if (! context ) { return FALSE ; } <S2SV_ModStart> ccl = context -> ColorLossLevel ; for ( y = 0 ; y < context -> height ; y ++ ) { src = data + ( context -> height - 1 - y ) * scanline ; coplane = context -> priv -> PlaneBuffers [ 0 ] + y * scanline ; cgplane = context -> priv -> PlaneBuffers [ 1 ] + y * scanline ; aplane = context -> priv -> PlaneBuffers [ 2 ] + y * scanline ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * scanline ; for ( x = 0 ; x < context -> width ; x ++ ) { src = data + x * scanline ; coplane = context -> priv -> PlaneBuffers [ 0 ] + x * scanline ; cgplane = context -> priv -> PlaneBuffers [ 1 ] + y * scanline ; aplane = context -> priv -> PlaneBuffers [ 2 ] + x * scanline,0
684,"<S2SV_ModStart> nr_parens ) return ERR_PTR ( - EINVAL ) ; if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } * ( ++ top ) = invert ; continue ; case '!' : if (! is_not ( next ) ) break ; invert =! invert ; continue ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; }",0
685,<S2SV_ModStart> cpi ) { const RATE_CONTROL * rc = & cpi -> td. rc <S2SV_ModStart> > INT_MAX )? INT_MAX : ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? INT_MAX : ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? INT_MAX : ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? INT_MAX : ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? INT_MAX : ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? INT_MAX : ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX? INT_MAX : ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2,0
686,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_reader_bit_t <S2SV_ModEnd> read_tx_mode ( vpx_reader <S2SV_ModStart> r ) { vpx_reader_bit_t <S2SV_ModEnd> tx_mode = vp9_read_literal <S2SV_ModStart> ; TX_MODE tx_mode = vpx_read_bit <S2SV_ModEnd> ( r ) <S2SV_ModStart> == ALLOW_32X32 ) tx_mode = vpx_read_bit <S2SV_ModEnd> ( r ),0
687,"<S2SV_ModStart> case 6 : # line 96 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). class_vector ) ) ; } # line 1045 ""re_grammar.c"" break ; case 26 : # line 97 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1051 ""re_grammar.c"" break ; case 27 : # line 98 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1057 ""re_grammar.c"" break ; case 28 : # line 99 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1063 ""re_grammar.c"" break ; case 29 : # line 100 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1069 ""re_grammar.c"" break ; case 30 : # line 100 """,0
688,<S2SV_ModStart> = args -> cpi ; MACROBLOCK * const mb = & cpi -> mb ; <S2SV_ModStart> 32 ] ; MACROBLOCK * const p = & mb -> plane [ plane ] ; struct macroblockd_plane * pd = & xd -> plane [ plane ] ; MB_MODE_INFO * mbmi = & xd -> mi [ 0 ] -> mbmi <S2SV_ModEnd> ; const int <S2SV_ModStart> const int16_t * qcoeff <S2SV_ModEnd> = BLOCK_OFFSET ( <S2SV_ModStart> -> plane_type ; vp9_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc -> coef_probs [ tx_size ] [ type ] [ ref ] ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = cpi -> fc -> counts [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const coef_probs ),0
689,<S2SV_ModStart> ; SrcList * pSrc ; if ( pSelect -> pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = & pSrc -> a [ i ] ; if ( pItem -> pTab == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = & pSrc -> a [ i ] ; if ( pItem -> pTab == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } if ( pItem -> pTab == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = & pSrc -> a [ i ] ; if ( pItem -> p,0
690,<S2SV_ModStart> shmflg & SHM_RND ) { <S2SV_ModStart> shmflg & SHM_RND ) { if ( addr < shmlba ) { err = - EINVAL ; goto out ; } <S2SV_ModStart> shm_perm ) ; if ( shp -> shm_file == NULL ) { err = - EIDRM ; goto out_unlock ; } if ( shp -> shm_file == NULL ) { err = - EIDRM ; goto out_unlock ; } if ( shp -> shm_file == NULL ) { err = - EIDRM ; goto out_unlock ; } if ( shp -> shm_file == NULL ) { err = - EIDRM ; goto out_unlock ; } if ( shp -> shm_file == NULL ) { err = - EIDRM ; goto out_unlock ; } if ( shp -> shm_file == NULL ) { err = - EIDRM ; goto out_unlock ; } if ( shp -> shm_file == NULL ) { err = - EIDRM ; goto out_unlock ; } if ( shp -> shm_file == NULL ) { err = - EIDRM ; goto out_unlock ; },0
691,"<S2SV_ModStart> ; serv = svc_create ( <S2SV_ModEnd> & nfs4_callback_program, <S2SV_ModStart> sv_ops ) ; if (! serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; }",0
692,"<S2SV_ModStart> PointZZ_p * point <S2SV_ModEnd>, const CurveZZ_p <S2SV_ModStart>, curve ) { pointZZ_pInits ( R0. x, R0. y, rop -> x, rop -> y, NULL ) ; pointZZ_pInits ( R1. x, R1. y, rop -> x, rop -> y, NULL ) ; pointZZ_pInits ( R0. x, R0. y, R1. x, rop -> y, NULL ) ; pointZZ_pDouble ( & R0, & tmp, curve ) ; if ( pointZZ_pInits ( R1. x, R1. y, point -> x, point -> y ) ) { pointZZ_pInits ( R1. x, R1. y, rop -> x, rop -> y, NULL ) ; pointZZ_pInits ( R1. x, R1. x, rop -> y, NULL ) ; pointZZ_pInits ( R1, & R1, point, curve ) ; } else { pointZZ_pInits ( R1. x, R1. y, point -> x, point ->",0
693,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
694,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_DONTWAIT ) )",0
695,"<S2SV_ModStart> s ) { if ( s < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } <S2SV_ModStart> 0 ) ; if ( s < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } if ( s < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
696,"<S2SV_ModStart> = NULL ; if ( xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ) ) ; break ; } else { char * path = xml_get_",0
697,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
698,"<S2SV_ModStart> mq_flush_lock, flags ) ; flush_rq -> tag = - 1",0
699,"<S2SV_ModStart> { int length ; struct stream packet = * s ; <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & packet ) ; if (! s_check ( s ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> domain <S2SV_blank> params <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; return RD_FALSE ; } <S2SV_ModStart> length ) ; if (! s_check ( s ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> domain <S2SV_blank> params <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; return RD_FALSE ; }",0
700,"<S2SV_ModStart> ) ; } if ( hkey. type == HASH_KEY_IS_STRING ) { zend_hash_update ( params, hkey. str, hkey. len, ( void * ) & tmp, sizeof ( zval * ), ( void * ) & tmp, sizeof ( zval * ), ( void * ) & zdata_ptr, sizeof ( zval * ), ( void * ) & zdata_ptr ) ; * current_param = tmp ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. num, hkey. len, ( void * ) & tmp, sizeof ( zval * ), ( void * ) & zdata_ptr, sizeof ( zval * ), ( void * ) & zdata_ptr ), sizeof ( zval * ), ( void * ) & zdata_ptr ) ; * current_param = tmp ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. num, hkey. num, ( void * ) & tmp, sizeof ( zval * ),",0
701,"<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> = VPX_IMG_FMT_I420 ; if (! memcmp ( buffer, ""YUV4MPEG"", 8 ) ) { fprintf ( stderr, ""Incorrect <S2SV_blank> magic <S2SV_blank> for <S2SV_blank> YUV4MPEG <S2SV_blank> file.\\n"" ) ; return - 1 ; } if ( memcmp ( buffer, ""YUV4MPEG"", 8 ) ) { fprintf ( stderr, ""Incorrect <S2SV_blank> magic <S2SV_blank> for <S2SV_blank> YUV4MPEG2 <S2SV_blank> file.\\n"" ) ; return - 1 ; } if (! memcmp ( buffer, ""Chroma"", 8 ) ) { fprintf ( stderr, ""Incorrect <S2SV_blank> chroma <S2SV_blank> magic <S2SV_blank> for <S2SV_blank> YUV4MPEG <S2SV_blank> file.\\n"" ) ; return - 1 ; } if ( memcmp ( buffer, ""Chroma"", 8 ) ) { fprintf ( stderr, ""Incorrect <S2SV_blank> chroma <S2SV_blank> input <S2SV_blank> file <S2SV_blank> version; <S2SV_blank> YUV4MPEG2 <S2SV_blank> required.\\n"" ) ; return - 1 ; } if ( memcmp ( buffer, ""Chroma"", 8 ) ) { fprintf ( stderr, ""Incorrect <S2SV_blank>",0
702,"<S2SV_ModStart> obj * otmp ; if ( strlen ( buf ) >= sizeof ( struct obj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } otmp = read_obj_nam ( buf, ( struct obj * ) 0 ) ; if ( otmp == NULL ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } if ( otmp == sizeof ( struct obj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
703,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> 0 ) return FALSE ; if ( read_uid_guids ( & table_start ) == FALSE ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( parse_inode_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_directory_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start,",0
704,"<S2SV_ModStart> * createenv ( <S2SV_ModEnd> const struct rule <S2SV_ModStart> rule ) { if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; if ( RB_INSERT ( envtree, & env -> root, NULL ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } else if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { const char * e, * eq ; size_t len ; if ( len > sizeof ( keybuf ) - 1 ) continue ; if ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
705,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; vp9_clear_segmentation ( seg ) ; vp9_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_set_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vp9_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; } } vp9_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1",0
706,"<S2SV_ModStart> ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; stmt_type = make_type ( """,0
707,"<S2SV_ModStart> ) ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( logfile_fd, ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"", 16 ) ) ; TEMP_FAILURE_RETRY (",0
708,<S2SV_ModStart> += 8 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 8 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 4 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> +,0
709,<S2SV_ModStart> ) ; } ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ;,0
710,"<S2SV_ModStart> = 0 ; memset ( vect, 0, sizeof ( vect ) - 1 ) ; memset ( vect, 0, sizeof ( vect ) - 1 ) ; memset ( vect, 0, sizeof ( vect ) - 1 ) ; memset ( vect, 0, sizeof ( vect ) - 1 ) ; memset ( vect, 0, sizeof ( vect ) - 1 ) ; memset ( vect, 0, sizeof ( vect ) - 1 ) ; memset ( vect, 0, sizeof ( vect ) - 1 ) ; memset ( vect, 0, sizeof ( vect ) - 1 ) ; memset ( vect, 0, sizeof ( vect ) - 1 ) ; memset ( vect, 0, sizeof ( vect ) - 1 ) ; memset ( vect, 0, sizeof ( vect ) - 1 ) ; memset ( vect, 0, sizeof ( vect ) - 1 ) ; memset ( vect, 0, sizeof ( vect ) - 1 ) ; memset ( vect, 0, sizeof ( vect ) - 1 ) ; memset ( vect, 0, sizeof ( vect ) - 1 ) ; memset ( vect, 0, sizeof ( vect ) - 1 ) ; memset ( vect, 0, sizeof ( vect",0
711,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int DoOneObject ( <S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, * t, * StartClean, * argbuf <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> ; s = cinput ; while ( * s!= '[' ) s ++ ; t = s ; while ( * t!= ']' ) t ++ ; * t ++ = 0 ; * t ++ = 0 ; * StartClean = outpos ; while ( * s == '0' && s [ 1 ]!= ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; } } StartClean = outpos ; while ( * t!='<S2SV_blank>'&& * t!= '\\t' && * t!= '\\",0
712,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart>, id ; if ( iph -> protocol == IPPROTO_UDP ) hash = jhash_3words ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, ( __force u32 ) iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; else hash = jhash_3words <S2SV_ModEnd> ( ( __force <S2SV_ModStart> iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs ) ; } else { hash = jhash_3words ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs ) ; }",0
713,"<S2SV_ModStart> expr_ty step ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower ) ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id ( obj, & PyId_upper ) ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } if ( lookup_attr_id ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; }",0
714,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",0
715,"<S2SV_ModStart> = gecos ; # endif <S2SV_ModStart> = gecos ; # ifdef HAVE_LIBUSER if ( setpwnam ( ctl -> pw, NULL ) < 0 ) { warn ( ""setpwnam <S2SV_blank> failed"" ) ; # endif free ( gecos ) ; printf ( _ ( ""Finger <S2SV_blank> information <S2SV_blank> *NOT* <S2SV_blank> changed. <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ) ; return - 1 ; }",0
716,"<S2SV_ModStart> int err ; if (! nfp_abm_u32_check_knode ( alink -> abm, knode, proto, extack ) ) goto err_delete ; mask = be32_to_cpu ( knode -> sel -> keys [ 0 ]. mask ) >> tos_off & 0xff ; val = be32_to_cpu ( knode -> sel -> keys [ 0 ]. val ) >> tos_off & 0xff ; val = be32_to_cpu ( knode -> sel -> keys [ 0 ]. mask ) >> tos_off & 0xff ; mask = be32_to_cpu ( knode -> sel -> keys [ 0 ]. mask ) >> tos_off & 0xff ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } else { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ;",0
717,"<S2SV_ModStart> VPX_RC_ONE_PASS ; if ( stream -> config. cfg. rc_twopass_stats_in == NULL ) { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } else { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; } if ( stream -> config. stats_fn ) { if (! stats_open_file ( & stream -> stats, stream -> config. stats_fn, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } else { if (! stats_open_mem ( & stream -> stats, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } if ( stream -> config. stats_fn ) { if (! stats_open_mem ( & stream -> stats, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } else { if (! stats_open_mem ( & stream ->",0
718,"<S2SV_ModStart> error ) ) { g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s\\n"", tmpfile_name ) ; g_auto ( GStrv ) old_argv = NULL ; g_auto ( GStrv ) groups = NULL ; g_auto ( GStrv ) new_argv = NULL ; g_auto ( GStrv ) groups = NULL ; g_auto ( GStrv ) groups = NULL ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s\\n"", tmpfile_name ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s\\n"", tmpfile_name ) ; g_auto ( GStrv ) new_argv = NULL ; g_auto ( GStrv ) groups = NULL ; g_auto ( GStrv ) groups = NULL ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s\\n"", tmpfile_name ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s\\",0
719,"<S2SV_ModStart> data_end ) { const <S2SV_ModStart> pbi -> common ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; TileBuffer tile_buffers [ 4 ] [ 1 << 6 ] ; int tile_row, tile_col ; const uint8_t * end = NULL ; vpx_reader r ; memset ( cm -> above_context, 0, sizeof ( * cm -> above_context ) * MAX_MB_PLANE * 2 * aligned_cols ) ; memset ( cm -> above_seg_context, 0, sizeof ( * cm -> above_seg_context ) * aligned_cols ) ; for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) { for ( tile_col = 0 ; tile_col < tile_cols ; ++ tile_col ) { const int last_tile = tile_row == tile_rows - 1 && tile_col == tile_cols - 1 ; const size_t size = get_tile ( data_end, last_tile",0
720,"<S2SV_ModStart> VP9D_CONFIG * oxcf, VP9_COMMON * common <S2SV_ModEnd> ) { VP9_COMMON <S2SV_ModStart> * const cm = common? & common -> common : NULL ; if (! pbi ) return NULL ; vp9_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 0 ; vpx_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vpx_initialize_dec ( ) ; vpx_rtcd ( ) ; memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> current_key_frame = 0 ; cm -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; vp9_init_dequantizer ( cm ) ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; vpx_worker_init ( & pbi -> lf_worker ) ; vp9_worker_init ( & pb",0
721,"<S2SV_ModStart> { GF_LOG ( GF_LOG_ERROR <S2SV_ModEnd>, GF_LOG_CONTAINER, <S2SV_ModStart> GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
722,"<S2SV_ModStart> req ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> -> opt ; rcu_read_lock ( ) ; opt = rcu_dereference_protected ( req_inet -> inet_opt, sock_owned_by_user ( req -> sk ) ) ; if ( opt == NULL || opt -> cipso == 0 ) { rcu_read_unlock ( ) ; return ; } <S2SV_ModEnd> cipso_v4_delopt ( &",0
723,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> tree2tok ( struct <S2SV_ModStart> { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tokens [ - j ]. len = l ; } },0
724,"<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_pkt_list_init ( & ctx -> pkt_list ) ; <S2SV_ModStart> = validate_img ( ctx <S2SV_ModEnd>, img ) <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_UPD_LAST | VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD",0
725,"<S2SV_ModStart> { ret = get_tag_raw ( asn1, & len ) ; if ( ret ) goto error ; if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; memset ( elem, 0, elemtype -> size ) ; ret = decode_atype ( & t, contents, clen, elemtype, elem ) ; if ( ret ) goto error ;",0
726,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
727,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> ) rc -> avg_frame_bandwidth <S2SV_ModEnd> * ( int64_t,0
728,"<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN <S2SV_ModStart> MIF_MAGICLEN ] ; char buf [ 4096 ] ; if ( jas_stream_read ( in, buf, sizeof ( buf ) )!= MIF_MAGICLEN ) { jas_eprintf ( ""error: <S2SV_blank> header <S2SV_blank> length <S2SV_blank> mismatch\\n"" ) ; goto error ; } if ( jas_stream_read ( in, buf, sizeof ( buf ) )!= MIF_MAGICLEN ) { jas_eprintf ( ""error: <S2SV_blank> header <S2SV_blank> length <S2SV_blank> mismatch\\n"" ) ; goto error ; } if ( jas_stream_read ( in, buf, sizeof ( buf ) )!= MIF_MAGICLEN ) { jas_eprintf ( ""error: <S2SV_blank> header <S2SV_blank> length <S2SV_blank> mismatch\\n"" ) ; goto error ; } if ( jas_stream_read ( in, buf, sizeof ( buf ) )!= MIF_MAGICLEN ) { jas_eprintf ( ""error: <S2SV_blank> header <S2SV_blank> length <S2SV_blank> mismatch\\n"" ) ; goto error ; } if ( jas_stream_read ( in, buf",0
729,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & td -> common ; <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> -> mbmi ; PICK_MODE_CONTEXT * ctx = get_block_context ( x, bsize ) ; unsigned int segment_id = mi -> segment_id ; const int mis = cm -> mi_stride ; const int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; x -> skip_recode =! x -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 && cpi -> oxcf. aq_mode!= COMPLEXITY_AQ && cpi -> sf. aq_mode!= CYCLIC_REFRESH_AQ && cpi -> sf. allow_skip_recode ; x -> skip_optimize = ctx -> is_coded",0
730,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++,0
731,"<S2SV_ModStart> range_max ) { int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) position = get_bits_count ( gbc ) ; if ( position < 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits1 ( gbc ) ) { bits [ i ++ ]",0
732,<S2SV_ModStart> case EXIT_REASON_NMI_WINDOW : switch ( exit_reason ) { case EXIT_REASON_TASK_SWITCH : switch ( vmx -> idt_vectoring_info ) { case VMX_IDT_VECTOR : switch ( vmx -> idt_vectoring_info ) { case VMX_IDT_VECTOR : switch ( vmx -> idt_vectoring_info ) { case VMX_IDT_VECTOR : switch ( vmx -> idt_vectoring_info ) { case VMX_IDT_VECTOR : switch ( vmx -> idt_vectoring_info ) { case VMX_IDT_VECTOR : switch ( vmx -> idt_vectoring_info ) { case VMX_IDT_VECTOR : switch ( vmx -> idt_vectoring_info ) { case VMX_IDT_VECTOR : if ( vmcs12 -> guest_cr0 & X86_CR0_TS ) { case VMX_IDT_VECTOR : switch ( vmcs12 -> guest_cr0 & X86_CR0_TS ) { case VMX_IDT,0
733,"<S2SV_ModStart> { } else if ( <S2SV_ModStart> { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|",0
734,"<S2SV_ModStart> -> http_contentlen. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_host_line. ptr = NULL, packet -> http_host_line. len = 0, packet -> http_host_line. ptr = NULL, packet -> http_host_line. len = 0, packet -> http_content_line. ptr = NULL, packet -> http_content_line. len = 0, packet -> http_host_line. ptr = NULL, packet -> http_host_line. ptr = NULL, packet -> http_host_line. len = 0, packet -> http_referer_line. ptr = NULL, packet -> http_referer_line. len = 0, packet -> content_line. ptr = NULL, packet -> content_line. len = 0, packet -> accept_line. ptr = NULL, packet -> accept_line. len = 0, packet -> user_agent_line. ptr = NULL, packet -> user_agent_line. len = 0, packet -> http_url_name. ptr = NULL, packet -> http_url_name. len = 0, packet -> http",0
735,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
736,"<S2SV_ModStart> ; assert ( floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim ) > entries ) ; assert ( floor ( pow ( ( float ) r, dim ) > entries ) ; assert ( floor ( pow ( ( float ) r, dim ) > entries ) ; assert ( floor ( pow ( ( float ) r, dim ) > entries ) ; assert ( floor ( pow ( ( float ) r, dim ) > entries ) ; assert ( floor ( pow",0
737,"<S2SV_ModStart> ( 4, MagickMax <S2SV_ModEnd> ( 4, <S2SV_ModStart> ( 4, MagickMax <S2SV_ModEnd> ( 4, <S2SV_ModStart> ( 4, MagickMax <S2SV_ModEnd> ( 4, <S2SV_ModStart> ( 4, MagickMax <S2SV_ModEnd> ( 4, <S2SV_ModStart> dds_info -> height <S2SV_ModEnd> - y ) <S2SV_ModStart> ( 4, MagickMax <S2SV_ModEnd> ( 4, <S2SV_ModStart> dds_info -> width <S2SV_ModEnd> - x ) <S2SV_ModStart> dds_info -> height <S2SV_ModEnd> - y ) <S2SV_ModStart> dds_info, 8 ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse <S2SV_ModEnd> ; c0 = <S2SV_ModStart> ( image ) ; c1 = ReadBlobLSBShort ( image ) ; bits = ReadBlobLSBLong ( image ) ; CalculateColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { if ( ( j + i ) < ( ssize_t ) dds_info -> width && ( j + i ) < ( ssize_t ) dds_info -> height && ( j + i ) < ( ssize_t ) dds_info -> width ) ) { if ( ( j + i ) < ( ssize_t ) dds_",0
738,"<S2SV_ModStart> drop ; } iph = ip_hdr ( skb ) ; if ( unlikely (! opt ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_",0
739,"<S2SV_ModStart> length ) { int ret ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY (",0
740,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
741,"<S2SV_ModStart> cfg ) { <S2SV_ModEnd> memset ( cfg <S2SV_ModStart> -> debug_file = fopen ( filename, ""a"" )? fopen ( filename, ""a"" ) : fopen ( filename, ""a"" )? fopen ( filename, ""a"" ) : fopen ( filename, ""a"" )? fopen ( filename, ""a"" )? fopen ( filename, ""a"" ) : fopen ( filename, ""a"" )? fopen ( filename, ""a"" )? fopen ( filename, ""a"" ) : fopen ( filename, ""a"" )? fopen ( filename, ""a"" ) : fopen ( filename, ""a"" )? fopen ( filename, ""a"" ) : fopen ( filename, ""a"" )? fopen ( filename, ""a"" ) : fopen ( filename, ""a"" )? fopen ( filename, ""a"" )? fopen ( filename, ""a"" ) : fopen ( filename, ""a"" )? fopen ( filename, ""a"" )? fopen ( filename, ""a"" ) : fopen ( filename, ""a"" )? fopen ( filename, ""a"" ) : fopen ( filename, ""a"" )?",0
742,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",1
743,"<S2SV_ModStart> ; WLog_VRB ( AUTODETECT_TAG <S2SV_ModEnd>, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" )",0
744,<S2SV_ModStart> & cpi -> td. <S2SV_ModStart> & cpi -> td. <S2SV_ModStart> & cpi -> td. <S2SV_ModStart> & cpi -> td. <S2SV_ModStart> & cpi -> td. <S2SV_ModStart> & cpi -> td. <S2SV_ModStart> & cpi -> td. <S2SV_ModStart> & cpi -> td. <S2SV_ModStart> & cpi -> td. <S2SV_ModStart> & cpi -> td. <S2SV_ModStart> & cpi -> td. <S2SV_ModStart> & cpi -> td. <S2SV_ModStart> & cpi -> td. <S2SV_ModStart> & cpi -> td. td_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_,0
745,"<S2SV_ModStart> ( type == ARPHRD_ETHER <S2SV_ModEnd> ) dev = <S2SV_ModStart> ether_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; }",0
746,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> data <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
747,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_ModEnd> vp8mt_de_alloc_temp_buffers ( pbi,0
748,<S2SV_ModStart> 0 ) { xWantedSize += xHeapStructSize ; if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } } else { xWantedSize = 0 ; } if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; },0
749,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
750,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
751,"<S2SV_ModStart> s ) { struct stream packet = * s ; <S2SV_ModStart> int i ; if (! s_check_rem ( s, 2 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> bitmap <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> i ++ ) { if (! s_check_rem ( s, 2 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> i ++ ) { if (! s_check_rem ( s, 2 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> i ++ ) { if (! s_check_rem ( s, 2 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> i ++ ) { if (! s_check_rem ( s, 2 ) )",0
752,"<S2SV_ModStart> } else { if (! smatch ( option, ""filename"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Missing <S2SV_blank> filename"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch",0
753,"<S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> -> frame_coef_probs [ tx_size ] ; vpx_coeff_count * coef_counts = cpi -> coef_counts [ tx_size ] ; unsigned int ( * eob_branch_ct ) [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ] ; unsigned int ( * eob_branch_ct ) [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ] ; unsigned int ( * eob_branch_ct ) [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ] ; vpx_tree_probs_from_distribution ( vp9_coef_tree, coef_counts [ i ] [ j ] [ k ] [ l ], eob_branch_ct [ i ] [ j ] [ k ]",0
754,"<S2SV_ModStart> { } ; struct termios oldtc ; <S2SV_ModStart> name ) ; oldtc = tcgetattr ( fd, & tc ) ; if ( oldtc < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = tcsetattr ( fd, TCSANOW, & tc ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = tcsetattr ( fd, TCSANOW, & tc ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = tcsetattr ( fd, TCSANOW, & tc ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf",0
755,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> ) ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb",0
756,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface ->",0
757,"<S2SV_ModStart> int stride, vpx_bit_depth_t bit_depth <S2SV_ModStart> int uv_block_size, vpx_bit_depth_t bit_depth <S2SV_ModStart> = vp9_get_interp_kernel ( bit_depth <S2SV_ModStart> = vp9_get_interp_kernel ( bit_depth <S2SV_ModStart> = vp9_get_interp_kernel ( bit_depth <S2SV_ModStart> = vp9_get_interp_kernel ( bit_depth <S2SV_ModStart> = MV_PRECISION_Q3 ; } vpx_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size",0
758,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) >= 4 * BUFSZ ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( origbuf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'""",0
759,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> cJSON * cJSON_CreateFloatArray <S2SV_ModStart> ; for ( int i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; } if (! a ) a -> child = cJSON_CreateArray ( ) ; for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! i ) a -> child = n ; else suffix_object ( p, n ) ; } if (! i ) a -> child = cJSON_CreateArray ( ) ; for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! i ) a -> child = cJSON_CreateFloat ( numbers [ i ] ) ; if (! i ) a -> child = cJSON_CreateFloat ( numbers [ i ] ) ; if (! i ) a -> child =",0
760,"<S2SV_ModStart> tk_status ) ; if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_rebind ; } if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_unlock ; } if ( status == NLM_LCK_GRANTED ) printk ( KERN_WARNING ""lockd: <S2SV_blank> unexpected <S2SV_blank> unlock <S2SV_blank> status: <S2SV_blank> %d\\n"", status ) ;",0
761,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
762,<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> ) ; for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; <S2SV_ModStart> ) ; for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; <S2SV_ModStart> ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ].,0
763,"<S2SV_ModStart> { VP9_COMMON * const cm = & pbi -> common <S2SV_ModEnd> ; const uint8_t <S2SV_ModStart> int num_workers = MIN ( pbi -> oxcf. max_threads <S2SV_ModEnd>, tile_cols ) <S2SV_ModStart> int num_workers = MIN ( pbi -> oxcf. max_threads <S2SV_ModEnd>, tile_cols ) <S2SV_ModStart> int num_workers = MIN ( pbi -> oxcf. max_threads <S2SV_ModEnd>, tile_cols ) <S2SV_ModStart> int num_workers = MIN ( pbi -> oxcf. max_threads <S2SV_ModEnd>, tile_cols ) <S2SV_ModStart> int i ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_threads * sizeof ( * pbi -> tile_workers ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR",0
764,<S2SV_ModStart> * 0x101 ; if ( fgetc ( ifp ) - 'M' ) return ; <S2SV_ModStart> ( ) ; if ( fgetc ( ifp ) - 'R' ) return ; <S2SV_ModStart> ( ) ; if ( fgetc ( ifp ) - 'M' ) return ; if ( fgetc ( ifp ) - 'M' ) return ; if ( fgetc ( ifp ) - 'R' ) return ; if ( fgetc ( ifp ) - 'M' ) return ; if ( fgetc ( ifp ) - 'M' ) return ; if ( fgetc ( ifp ) - 'R' ) return ; <S2SV_ModStart> ( ) ; if ( fgetc ( ifp ) - 'M' ) return ; if ( fgetc ( ifp ) - 'M' ) return ; if ( fgetc ( ifp ) - 'M' ) return ; if ( fgetc ( ifp ) - 'M' ) return ; if ( fgetc ( ifp ) - 'M' ) return ; if ( fgetc ( ifp ) - 'M' ) return ; <S2SV_ModStart> ( ) ; if ( fgetc ( ifp,0
765,"<S2SV_ModStart> cm -> seg ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const double base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; const int base_q_mult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; const int base_q_mult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; const int base_q_mult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; const int base_q_mult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; const int base_q_mult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta",0
766,<S2SV_ModStart> -> error_code ) { vpx_codec_err_t err_detail ; err_detail = error -> has_detail? error -> detail : NULL ; ctx -> base. err_detail = err_detail ; return error -> error_code ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
767,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
768,"<S2SV_ModStart> * ps_cur_slice ; pocstruct_t * ps_prev_poc, * ps_cur_poc ; memset ( ps_dec -> ps_cur_slice, 0, sizeof ( dec_slice_params_t ) ) ; memset ( ps_dec -> ps_prev_poc, 0, sizeof ( pocstruct_t ) ) ; memset ( ps_dec -> ps_cur_sps, 0, sizeof ( dec_seq_params_t ) ) ; ps_dec -> u4_num_fld_in_frm = 0 ; ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; ps_dec -> s_dpb_dec_env. pv_codec_handle = NULL ; ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ;",0
769,<S2SV_ModStart> ; if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) goto out_unlock ; } } } else { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) goto out_unlock ; } } } else { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO,0
770,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet, TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet, TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet, TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet, TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet, TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet, TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet, TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet, TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet, TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet, TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet, TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet, TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet, TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb.",0
771,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int getnum ( <S2SV_ModStart> = 0 ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; if (! isdigit ( * * fmt ) ) return df ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * *,0
772,"<S2SV_ModStart> ( g, & g -> allgc, g -> survival, g -> reallyold ) ; markold ( g, & g -> allgc, g -> old ) ; markold ( g, & g -> allgc, g -> old ) ; markold ( g, & g -> allgc, g -> reallyold ) ; g -> allgc = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = * psurvival ; g -> allgc = * psurvival ; g -> survival = g -> allgc ; psurvival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival",0
773,"<S2SV_ModStart> 0 ; else { ret = - EINVAL ; goto err ; } <S2SV_ModEnd> deb_info ( ""Identify <S2SV_blank> state <S2SV_blank> cold <S2SV_blank> = <S2SV_blank> %d\\n""",0
774,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok",0
775,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> cib -> variant_opaque <S2SV_ModEnd> ; struct sockaddr_in <S2SV_ModStart> struct sockaddr_in addr <S2SV_ModEnd> ; int rc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> connection -> socket <S2SV_ModStart> = NULL ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } connection -> socket =",0
776,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi,",0
777,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",0
778,"<S2SV_ModStart> ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } if ( len < 26 ) { ND_PRINT (",0
779,"<S2SV_ModStart> } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
780,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> ; if ( copy_to_user ( & karg, uarg, sizeof ( struct mpt_ioctl_command ) ) ) { printk ( KERN_ERR MYNAM ""%s@%d::mptctl_mpt_command <S2SV_blank> - <S2SV_blank> "" ""Unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> in <S2SV_blank> mpt_ioctl_command <S2SV_blank> struct <S2SV_blank> @ <S2SV_blank> %p\\n"", __FILE__, __LINE__, uarg ) ; return - EFAULT ; } if ( copy_to_user ( & karg, uarg, sizeof ( struct mpt_ioctl_command ) ) ) { printk ( KERN_ERR MYNAM ""%s@%d::mptctl_mpt_command <S2SV_blank> - <S2SV_blank> "" ""Unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> in <S2SV_blank> mpt_ioctl_command <S2SV_blank> struct <S2SV_blank> @ <S2SV_blank> %p\\n"", __FILE__, __LINE__, uarg ) ; return - EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_",0
781,<S2SV_ModStart> Image <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
782,"<S2SV_ModStart> = 0 ; if ( numbands > JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> to <S2SV_blank> use\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if ( numbands > JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> to <S2SV_blank> use\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if ( numbands > JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> to <S2SV_blank> use\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if ( numbands > JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> to <S2SV_blank> use\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if ( numbands > JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> to <S2SV_blank> use\\n"" ) ; return - 1 ; } if ( numbands > JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> to <S2SV_blank> use\\n"" )",0
783,<S2SV_ModStart> = '\\0' ; str_temp = malloc ( strlen ( str_temp ) + 1 ) ; if (! str_temp ) str_temp = malloc ( strlen ( str_temp ) + 1 ) ; if (! str_temp ) str_temp = malloc ( strlen ( str_temp ) + 1 ) ; if (! str_temp ) str_temp = malloc ( strlen ( str_temp ) + 1 ) ; if (! str_temp ) str_temp = malloc ( strlen ( str_temp ) + 1 + 1 ) ; if (! str_temp ) str_temp = malloc ( strlen ( str_temp ) + 1 + 1 ) ; if (! str_temp ) str_temp = malloc ( strlen ( str_temp ) + 1 ) ; if (! str_temp ) str_temp = malloc ( strlen ( str_temp ) + 1 ) ; if (! str_temp ) str_temp = malloc ( strlen ( str_temp ) + 1 + 1 ) ; if (! str_temp ) str_temp = malloc ( strlen ( str_temp ) + 1 + 1 ) ; if (! str_temp ),0
784,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_reader <S2SV_ModEnd> * decode_uniform ( <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - 191 ; if ( v < 0 ) { vpx_reader_error ( r ) ; return vpx_reader_error ; } <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - 1 ) ; vpx_reader_error ( r ) ; return vpx_reader_error <S2SV_ModEnd> ; } <S2SV_null>",0
785,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
786,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> ctx ] ) ; if ( mode == REFERENCE_MODE_SELECT ) { const int ctx = vp9_get_reference_mode_context ( cm, xd ) ; const int ctx = vp9_get_reference_mode_context ( cm, xd ) ; const int ctx = vp9_get_reference_mode_context ( cm, xd ) ; const int ctx = vp9_get_reference_mode_context ( cm, xd ) ; const int ctx = vp9_get_reference_mode_context ( cm, xd ) ; if ( mode == REFERENCE_MODE_SELECT ) { const int ctx = vp9_get_reference_mode_context ( cm, xd ) ; const int ctx = vp9_get_reference_mode_context ( cm, xd ) ; const int ctx = vp9_get_reference_mode_context ( cm, xd ) ; const int ctx = vp9_get_reference_mode_context ( cm, xd ) ; const int ctx = vp9_get",0
787,"<S2SV_ModStart> ) ) ; if (! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; <S2SV_ModStart> (! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; if ( prev ) { memcpy ( stream, prev, sizeof ( * stream ) ) ; stream -> index ++ ; prev -> next = stream ; } else { vpx_codec_err_t res ; res = vpx_codec_enc_config_default ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_timebase. den = 1000 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; stream -> ebml. last_pts_ms = - 1 ; stream -> ebml. debug = global -> debug ; stream -> config.",0
788,"<S2SV_ModStart> nd_opt_rdnss * oprd ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""dnssl"", op -> nd_opt_type ), op -> nd_opt_type ) ) ; switch ( op -> nd_opt_type ) { case ND_OPT_SOURCE_LINKADDR : l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp + 2, l ) ; break ; case ND_OPT_TARGET_LINKADDR : l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp + 2, l ) ; break ; case ND_OPT_MTU : l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp + 2, l ) ; break ; case ND_OPT_ADV_INTERVAL : l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp +",0
789,"<S2SV_ModStart> = 0 ; if ( yr_re_ast_get_root_node ( * re_ast ) == NULL ) ( * re_ast ) -> root_node = yr_re_ast_get_root_node ( * re_ast ) ) { yr_re_ast_set_root_node ( * re_ast, NULL ) ; ( * re_ast ) -> root_node = yr_re_ast_get_root_node ( * re_ast ) ; if ( yr_re_ast_get_root_node ( * re_ast ) == NULL ) ( * re_ast ) -> root_node = yr_re_ast_get_root_node ( * re_ast ) ) ; if ( yr_re_ast_get_root_node ( * re_ast ) == NULL ) { yr_re_ast_set_root_node ( * re_ast, yr_re_ast_get_root_node ( * re_ast ) ) ; ( * re_ast ) -> root_node = yr_re_ast_get_root_node ( * re_ast ) ; }",0
790,"<S2SV_ModStart> ; ret = var_expand <S2SV_ModEnd> ( path, <S2SV_ModStart> error ) ; if ( ret <= 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } <S2SV_ModStart> 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank>",0
791,"<S2SV_ModStart> return 0 ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; <S2SV_ModStart> A ] ; if ( nla -> nla_len > skb -> len - <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len - <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len - <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len - <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len ) return 0 ; nla = nla_find_nested ( nla, X ) ; if ( nla ) return ( void * ) nla - ( void * ) skb -> data - ( void * ) skb -> data ; if ( nla -> nla_len > skb -> len ) return 0 ; nla = nla_find_nested ( nla, X ) ; if ( nla ) return ( void * ) nla - ( void * ) skb -> data - ( void * ) skb -> data ; if ( nla ) return ( void * ) nla - ( void * ) skb -> data - ( void * ) skb -> data - ( void * ) skb -> data ;",0
792,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
793,"<S2SV_ModStart> ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost/mobile\'>"" ""<priority>10</priority>"" ""<status>On <S2SV_blank> my <S2SV_blank> mobile</status>"" ""</message>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost/mobile\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</forwarded>"" ""</message>""",0
794,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
795,<S2SV_ModStart> = 0 ; # ifndef PGEN tok -> filename = NULL ; # endif <S2SV_ModStart> = 0 ; # endif <S2SV_ModStart> = 0 ; # if defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) &&,0
796,"<S2SV_ModStart> -> av1_config ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> dataLength ) ; else av1 -> emul_esd -> decoderConfig -> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
797,"<S2SV_ModStart> { GF_LOG ( GF_LOG_ERROR <S2SV_ModEnd>, GF_LOG_CONTAINER, <S2SV_ModStart> GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
798,<S2SV_ModStart> ; buff [ sizeof ( buff ) - 1 <S2SV_ModStart> ; buff [ sizeof ( buff ) - 1 <S2SV_ModStart> ; buff [ sizeof ( buff ) - 1 <S2SV_ModStart> ; buff [ sizeof ( buff ) - 1 <S2SV_ModStart> ; buff [ sizeof ( buff ) - 1 <S2SV_ModStart> ; buff [ sizeof ( buff ) - 1 <S2SV_ModStart> ; buff [ sizeof ( buff ) - 1 <S2SV_ModStart> ; buff [ sizeof ( buff ) - 1 <S2SV_ModStart> ; buff [ sizeof ( buff ) - 1 <S2SV_ModStart> ; buff [ sizeof ( buff ) - 1 ] = '\\0' ; buff [ sizeof ( buff ) - 1 ] = '\\0' ; buff [ sizeof ( buff ) - 1 ] = '\\0' ; <S2SV_ModStart> ; buff [ sizeof ( buff ) - 1 ] = '\\0' ; buff [ sizeof ( buff ) - 1 ] = '\\0' ; buff [ sizeof ( buff ) - 1 ] = '\\0' ; <S2SV_ModStart> ; buff [ sizeof ( buff ) - 1 ] = '\\0' ; buff [ sizeof ( buff ) - 1 ] = '\\0' ;,0
799,"<S2SV_ModStart> maxFrameNum ) ; <S2SV_ModEnd> dpb -> maxLongTermFrameIdx <S2SV_ModStart> NO_LONG_TERM_FRAME_INDICES ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; if ( noReordering ) dpb -> dpbSize = dpbSize ; if ( dpb -> buffer == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; H264SwDecMemset ( dpb -> buffer, 0, ( MAX_NUM_REF_PICS + 1 ) * sizeof ( dpbPicture_t ) ) ; for ( i = 0 ; i < dpb -> dpbSize ; i ++ ) { ALLOCATE ( dpb -> buffer [ i ]. pAllocatedData, ( picSizeInMbs * 384 + 32 + 15 ), u8 ) ; if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; dpb -> buffer [ i ]. pAllocatedData = ALIGN ( dpb -> buffer [ i ]. pAllocatedData, 16 ) ; for ( i = 0 ; i < dpb -> dpbSize ; i ++ ) { if ( dpb -> buffer [",0
800,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> = 0 ; if (! addr ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen ) addrlen_in = * addrlen ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAI,0
801,,1
802,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> TPDU <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; }",0
803,"<S2SV_ModStart> ipv6_pinfo * np = rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ( sk ) ) <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> ; opt = rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt_space ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_own",0
804,"<S2SV_ModStart>, at ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; # if HAVE__INTERNAL__SHA_COLLECT int sha_collect = ctx -> sha_collect ; # endif const char * archtype = NULL ; # endif",0
805,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> address ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR_ERRE <S2SV_ModEnd> ) ; while <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR_ERRE <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> 5 ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg (",0
806,"<S2SV_ModStart> = 0 ; # ifdef CCITT_SUPPORT if ( t2p -> pdf_compression == T2P_COMPRESS_GIF ) { buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ; if ( buffer == NULL ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( buffer == NULL ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; }",0
807,"<S2SV_ModStart> new_parent ) { struct cred * old_cred ; <S2SV_ModStart> new_parent ) ; old_cred = __task_cred ( new_parent ) ; __ptrace_link ( child, old_cred, __task_cred ( new_parent ) ) ; __ptrace_link ( child, new_parent, old_cred <S2SV_ModEnd> ) ; rcu_read_unlock",0
808,"<S2SV_ModStart> { rc = cib_tls_signon <S2SV_ModEnd> ( cib, <S2SV_ModStart> { rc = cib_tls_signon <S2SV_ModEnd> ( cib, <S2SV_ModStart> } if ( rc == pcmk_ok ) { rc = cib_tls_signon <S2SV_ModEnd> ( cib, <S2SV_ModStart> } if ( rc == pcmk_ok ) { rc = cib_tls_signon ( cib, & ( private -> command ) ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; crm_send_remote_msg ( hello, F_CIB_CLIENTNAME, name ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. session, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0",0
809,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
810,"<S2SV_ModStart> num00, tmp_err <S2SV_ModEnd>, sr = <S2SV_ModStart> bsize ] ; const int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr ; step_param += sr ; further_steps -= sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX",0
811,"<S2SV_ModStart> { SET_ERRNO ( EPERM, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( h -> size == 0 ) { SET_ERRNO ( EPERM, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( h -> size == 0 ) { SET_ERRNO ( EPERM, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" ) ; goto error ; } if ( h -> size == 0 ) { SET_ERRNO ( EPERM, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" ) ; goto error ; } if ( h -> size == 0 ) { SET_ERRNO ( EPERM, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> h",0
812,<S2SV_ModStart> ) ; } if ( child -> is_enabled == NOT_SET ) { merged -> is_enabled = ( child -> is_enabled == NOT_SET? parent -> is_enabled : child -> is_enabled ) ; merged -> reqbody_inmemory_limit = ( child -> reqbody_inmemory_limit == NOT_SET? parent -> reqbody_inmemory_limit : child -> reqbody_inmemory_limit ) ; merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit == NOT_SET? parent -> reqbody_no_files_limit : child -> reqbody_no_files_limit ) ; merged -> reqbody_inmemory_limit = ( child -> reqbody_inmemory_limit == NOT_SET? parent -> reqbody_inmemory_limit : child -> reqbody_inmemory_limit ) ; merged -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit == NOT_SET? parent -> reqbody,0
813,"<S2SV_ModStart> ; if ( msg_sys -> msg_name ) { memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; } else if ( msg_sys -> msg_name ) memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; } else if ( msg_sys -> msg_name ) memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; memcpy ( & address, sizeof ( struct sockaddr_storage ) ) ; memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ;",0
814,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent",0
815,"<S2SV_ModStart>!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> key, comp -> key_len ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> iv, comp -> iv_len ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> cipher, sizeof ( comp -> cipher ) ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> cipher, sizeof ( comp -> cipher ) ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> key, comp -> key_len ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> iv, comp -> iv_len ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> cipher, sizeof ( comp -> cipher ) ) )!= 0 ||",0
816,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
817,"<S2SV_ModStart> cib_client_t * client = NULL <S2SV_ModStart> client = user_data ; if ( client == NULL ) { return ; } crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"", crm_str ( client -> name ), client -> id ) ; if ( client -> id!= NULL ) { if (! g_hash_table_remove ( client_list, client -> id ) ) { crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found in <S2SV_blank> the <S2SV_blank> hashtable"", client -> name ) ; } } <S2SV_ModStart> num_clients ) ; g_hash_table_remove ( client_list, client -> id ) ; if ( client -> id!= NULL ) { if (! g_hash_table_remove ( client_list, client -> id ) ) { if (! g_hash_table_remove ( client_list, client -> id ) ) { crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found in <S2SV_blank> the <S2SV_blank> hashtable"", client -> name ) ; } } <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
818,"<S2SV_ModStart> * uv ; thread -> openupval = NULL ; <S2SV_ModStart> uv ; work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; else <S2SV_ModStart> uv ) { if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; else markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open",0
